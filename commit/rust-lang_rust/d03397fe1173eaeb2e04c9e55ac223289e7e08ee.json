{"sha": "d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "node_id": "C_kwDOAAsO6NoAKGQwMzM5N2ZlMTE3M2VhZWIyZTA0YzllNTVhYzIyMzI4OWU3ZTA4ZWU", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-12-10T22:31:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-10T22:31:55Z"}, "message": "Merge #10978\n\n10978: internal: Only prime direct dependencies of the workspace crates r=jonas-schievink a=lnicola\n\nThis reduces the number of primed crates on `self` from 177 to 105.\r\n\r\n```text\r\n# baseline\r\n  86521 me   20   0 2939M  562M 14320 S  0.0  0.9  0:07.10   37 rust-analyzer\r\n\r\n# pr\r\n  99947 me   20   0 2935M  549M 14424 S  0.0  0.9  0:07.10   37 rust-analyzer\r\n```\r\n\r\nThe RAM usage seems to vary a lot, so I'm not sure the improvement shown above is real.\r\n\r\nWe also drop the topological sorting, although it might still make sense to do the dependencies before the workspace crates. But since it's only used to make the progress reporting a bit more fine, it probably doesn't matter too much.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>", "tree": {"sha": "327f953fa95ec0f7c73a2ff9b6980bd2980e8dbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/327f953fa95ec0f7c73a2ff9b6980bd2980e8dbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhs9VbCRBK7hj4Ov3rIwAAl9wIAFNuK/pUIG3Hw4COv9twe7px\nEowHpTFVVBFtcxMVNGMlNBcP7t8THhFotubN5whsaPRPBAq4b+NpQvIJRMS3STs7\nyB6EumzweCB20ynITLcg8r5x5eOC5brxYtQSsN7j2DhUjS+JWpCRrJvROpYWg6h7\nWXaSRHD6s2g908IoQTpNRzr80Lbnp/kxV/RnKJUYnEQN+zKDrdm+BUpiQmEftWo1\nHw5ZIGwlQNRxpMmIIDjXFhoUi2mtSNZhPtYzqkMElDkLyO0UzBVE26XJcBxJmbg6\nwH86oMCyyMacDEQAeSjLZaJ+C83gfKjFP/RJWur8skC+12wv5HOndc6+4wZ8lzk=\n=CdJs\n-----END PGP SIGNATURE-----\n", "payload": "tree 327f953fa95ec0f7c73a2ff9b6980bd2980e8dbf\nparent 021d5821befc2e0a0d7d164b345f93d8dfaac52a\nparent d012a20f257571124bef303b2d9bef185e91c13b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1639175515 +0000\ncommitter GitHub <noreply@github.com> 1639175515 +0000\n\nMerge #10978\n\n10978: internal: Only prime direct dependencies of the workspace crates r=jonas-schievink a=lnicola\n\nThis reduces the number of primed crates on `self` from 177 to 105.\r\n\r\n```text\r\n# baseline\r\n  86521 me   20   0 2939M  562M 14320 S  0.0  0.9  0:07.10   37 rust-analyzer\r\n\r\n# pr\r\n  99947 me   20   0 2935M  549M 14424 S  0.0  0.9  0:07.10   37 rust-analyzer\r\n```\r\n\r\nThe RAM usage seems to vary a lot, so I'm not sure the improvement shown above is real.\r\n\r\nWe also drop the topological sorting, although it might still make sense to do the dependencies before the workspace crates. But since it's only used to make the progress reporting a bit more fine, it probably doesn't matter too much.\n\nCo-authored-by: Lauren\u021biu Nicola <lnicola@dend.ro>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "html_url": "https://github.com/rust-lang/rust/commit/d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03397fe1173eaeb2e04c9e55ac223289e7e08ee/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021d5821befc2e0a0d7d164b345f93d8dfaac52a", "url": "https://api.github.com/repos/rust-lang/rust/commits/021d5821befc2e0a0d7d164b345f93d8dfaac52a", "html_url": "https://github.com/rust-lang/rust/commit/021d5821befc2e0a0d7d164b345f93d8dfaac52a"}, {"sha": "d012a20f257571124bef303b2d9bef185e91c13b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d012a20f257571124bef303b2d9bef185e91c13b", "html_url": "https://github.com/rust-lang/rust/commit/d012a20f257571124bef303b2d9bef185e91c13b"}], "stats": {"total": 31, "additions": 10, "deletions": 21}, "files": [{"sha": "5eba1d1e276f49c54ce4c7f4ef63c41b6749f53e", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 10, "deletions": 21, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/d03397fe1173eaeb2e04c9e55ac223289e7e08ee/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03397fe1173eaeb2e04c9e55ac223289e7e08ee/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=d03397fe1173eaeb2e04c9e55ac223289e7e08ee", "patch": "@@ -4,7 +4,7 @@\n //! various caches, it's not really advanced at the moment.\n \n use hir::db::DefDatabase;\n-use ide_db::base_db::{CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt};\n+use ide_db::base_db::{SourceDatabase, SourceDatabaseExt};\n use rustc_hash::FxHashSet;\n \n use crate::RootDatabase;\n@@ -20,40 +20,29 @@ pub struct PrimeCachesProgress {\n pub(crate) fn prime_caches(db: &RootDatabase, cb: &(dyn Fn(PrimeCachesProgress) + Sync)) {\n     let _p = profile::span(\"prime_caches\");\n     let graph = db.crate_graph();\n-    // We're only interested in the transitive dependencies of all workspace crates.\n+    // We're only interested in the workspace crates and the `ImportMap`s of their direct\n+    // dependencies, though in practice the latter also compute the `DefMap`s.\n+    // We don't prime transitive dependencies because they're generally not visible in\n+    // the current workspace.\n     let to_prime: FxHashSet<_> = graph\n         .iter()\n         .filter(|&id| {\n             let file_id = graph[id].root_file_id;\n             let root_id = db.file_source_root(file_id);\n             !db.source_root(root_id).is_library\n         })\n-        .flat_map(|id| graph.transitive_deps(id))\n+        .flat_map(|id| graph[id].dependencies.iter().map(|krate| krate.crate_id))\n         .collect();\n \n-    let topo = toposort(&graph, &to_prime);\n-\n     // FIXME: This would be easy to parallelize, since it's in the ideal ordering for that.\n     // Unfortunately rayon prevents panics from propagation out of a `scope`, which breaks\n     // cancellation, so we cannot use rayon.\n-    for (i, &crate_id) in topo.iter().enumerate() {\n+    let n_total = to_prime.len();\n+    for (n_done, &crate_id) in to_prime.iter().enumerate() {\n         let crate_name = graph[crate_id].display_name.as_deref().unwrap_or_default().to_string();\n \n-        cb(PrimeCachesProgress { on_crate: crate_name, n_done: i, n_total: topo.len() });\n-        db.crate_def_map(crate_id);\n+        cb(PrimeCachesProgress { on_crate: crate_name, n_done, n_total });\n+        // This also computes the DefMap\n         db.import_map(crate_id);\n     }\n }\n-\n-fn toposort(graph: &CrateGraph, crates: &FxHashSet<CrateId>) -> Vec<CrateId> {\n-    // Just subset the full topologically sorted set for simplicity.\n-\n-    let all = graph.crates_in_topological_order();\n-    let mut result = Vec::with_capacity(crates.len());\n-    for krate in all {\n-        if crates.contains(&krate) {\n-            result.push(krate);\n-        }\n-    }\n-    result\n-}"}]}