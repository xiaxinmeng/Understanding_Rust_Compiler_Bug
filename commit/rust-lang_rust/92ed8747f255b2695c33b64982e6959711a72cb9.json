{"sha": "92ed8747f255b2695c33b64982e6959711a72cb9", "node_id": "C_kwDOAAsO6NoAKDkyZWQ4NzQ3ZjI1NWIyNjk1YzMzYjY0OTgyZTY5NTk3MTFhNzJjYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-25T15:43:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-25T15:43:29Z"}, "message": "Auto merge of #92353 - Kobzol:doc-attr-lists-gat, r=GuillaumeGomez\n\nRustdoc: remove ListAttributesIter and use impl Iterator instead\n\nThis is a continuation of https://github.com/rust-lang/rust/pull/92227.\n\nI found that `ListAttributesIter` did not optimize well and replacing it with a simple `impl Iterator` resulted in 1-3 % instruction count wins locally.\n\nBecause I needed to use `impl Iterator` on a slice of AST attributes, I had to implement it using GAT + impl trait. I also have a version without GAT [here](https://github.com/Kobzol/rust/commit/5470e2a65cbd3086d19f0847f44ca9cbbc049689), if GATs are not welcome in rustdoc :D Locally it resulted in equal performance numbers.\n\nCan I ask for a perf. run? Thanks.\n\nr? rust-lang/rustdoc", "tree": {"sha": "2d93b34de6249b0f75fd8862846dcd545825407c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d93b34de6249b0f75fd8862846dcd545825407c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92ed8747f255b2695c33b64982e6959711a72cb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92ed8747f255b2695c33b64982e6959711a72cb9", "html_url": "https://github.com/rust-lang/rust/commit/92ed8747f255b2695c33b64982e6959711a72cb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92ed8747f255b2695c33b64982e6959711a72cb9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dfae79bbc3dabe1427073086acf7f7bd45148c", "url": "https://api.github.com/repos/rust-lang/rust/commits/17dfae79bbc3dabe1427073086acf7f7bd45148c", "html_url": "https://github.com/rust-lang/rust/commit/17dfae79bbc3dabe1427073086acf7f7bd45148c"}, {"sha": "3a3e4b78593bc2669828dfc2e36070897b9c6a4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a3e4b78593bc2669828dfc2e36070897b9c6a4d", "html_url": "https://github.com/rust-lang/rust/commit/3a3e4b78593bc2669828dfc2e36070897b9c6a4d"}], "stats": {"total": 65, "additions": 19, "deletions": 46}, "files": [{"sha": "dac23691a307b5bc08f0cee5b3122bf1fd9d1a4b", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 17, "deletions": 46, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/92ed8747f255b2695c33b64982e6959711a72cb9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92ed8747f255b2695c33b64982e6959711a72cb9/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=92ed8747f255b2695c33b64982e6959711a72cb9", "patch": "@@ -5,7 +5,7 @@ use std::lazy::SyncOnceCell as OnceCell;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::sync::Arc;\n-use std::{slice, vec};\n+use std::vec;\n \n use arrayvec::ArrayVec;\n \n@@ -733,43 +733,12 @@ crate struct Module {\n     crate span: Span,\n }\n \n-crate struct ListAttributesIter<'a> {\n-    attrs: slice::Iter<'a, ast::Attribute>,\n-    current_list: vec::IntoIter<ast::NestedMetaItem>,\n-    name: Symbol,\n-}\n-\n-impl<'a> Iterator for ListAttributesIter<'a> {\n-    type Item = ast::NestedMetaItem;\n-\n-    fn next(&mut self) -> Option<Self::Item> {\n-        if let Some(nested) = self.current_list.next() {\n-            return Some(nested);\n-        }\n-\n-        for attr in &mut self.attrs {\n-            if let Some(list) = attr.meta_item_list() {\n-                if attr.has_name(self.name) {\n-                    self.current_list = list.into_iter();\n-                    if let Some(nested) = self.current_list.next() {\n-                        return Some(nested);\n-                    }\n-                }\n-            }\n-        }\n-\n-        None\n-    }\n-\n-    fn size_hint(&self) -> (usize, Option<usize>) {\n-        let lower = self.current_list.len();\n-        (lower, None)\n-    }\n-}\n-\n crate trait AttributesExt {\n-    /// Finds an attribute as List and returns the list of attributes nested inside.\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_>;\n+    type AttributeIterator<'a>: Iterator<Item = ast::NestedMetaItem>\n+    where\n+        Self: 'a;\n+\n+    fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a>;\n \n     fn span(&self) -> Option<rustc_span::Span>;\n \n@@ -781,8 +750,13 @@ crate trait AttributesExt {\n }\n \n impl AttributesExt for [ast::Attribute] {\n-    fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n-        ListAttributesIter { attrs: self.iter(), current_list: Vec::new().into_iter(), name }\n+    type AttributeIterator<'a> = impl Iterator<Item = ast::NestedMetaItem> + 'a;\n+\n+    fn lists<'a>(&'a self, name: Symbol) -> Self::AttributeIterator<'a> {\n+        self.iter()\n+            .filter(move |attr| attr.has_name(name))\n+            .filter_map(ast::Attribute::meta_item_list)\n+            .flatten()\n     }\n \n     /// Return the span of the first doc-comment, if it exists.\n@@ -902,12 +876,9 @@ crate trait NestedAttributesExt {\n     fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem>;\n }\n \n-impl<I> NestedAttributesExt for I\n-where\n-    I: IntoIterator<Item = ast::NestedMetaItem>,\n-{\n-    fn get_word_attr(self, word: Symbol) -> Option<ast::NestedMetaItem> {\n-        self.into_iter().find(|attr| attr.is_word() && attr.has_name(word))\n+impl<I: Iterator<Item = ast::NestedMetaItem>> NestedAttributesExt for I {\n+    fn get_word_attr(mut self, word: Symbol) -> Option<ast::NestedMetaItem> {\n+        self.find(|attr| attr.is_word() && attr.has_name(word))\n     }\n }\n \n@@ -1015,7 +986,7 @@ crate struct Attributes {\n }\n \n impl Attributes {\n-    crate fn lists(&self, name: Symbol) -> ListAttributesIter<'_> {\n+    crate fn lists(&self, name: Symbol) -> impl Iterator<Item = ast::NestedMetaItem> + '_ {\n         self.other_attrs.lists(name)\n     }\n "}, {"sha": "a7c3c0bb606102532413f59fe416c3c59d0cf9c3", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92ed8747f255b2695c33b64982e6959711a72cb9/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92ed8747f255b2695c33b64982e6959711a72cb9/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=92ed8747f255b2695c33b64982e6959711a72cb9", "patch": "@@ -16,6 +16,8 @@\n #![feature(once_cell)]\n #![feature(type_ascription)]\n #![feature(iter_intersperse)]\n+#![feature(type_alias_impl_trait)]\n+#![feature(generic_associated_types)]\n #![recursion_limit = \"256\"]\n #![warn(rustc::internal)]\n #![allow(clippy::collapsible_if, clippy::collapsible_else_if)]"}]}