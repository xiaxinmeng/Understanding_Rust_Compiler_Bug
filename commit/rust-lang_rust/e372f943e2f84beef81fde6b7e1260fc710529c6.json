{"sha": "e372f943e2f84beef81fde6b7e1260fc710529c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNzJmOTQzZTJmODRiZWVmODFmZGU2YjdlMTI2MGZjNzEwNTI5YzY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-22T23:10:48Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-09-22T23:13:03Z"}, "message": "rustc: Write raw type parameters instead of linearized type parameters in object body shapes", "tree": {"sha": "b8a120a72dab926eed34b015266ab85ba0448251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8a120a72dab926eed34b015266ab85ba0448251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e372f943e2f84beef81fde6b7e1260fc710529c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e372f943e2f84beef81fde6b7e1260fc710529c6", "html_url": "https://github.com/rust-lang/rust/commit/e372f943e2f84beef81fde6b7e1260fc710529c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e372f943e2f84beef81fde6b7e1260fc710529c6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfa5bd111404102a561ee2a05e4aa1676363d6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa5bd111404102a561ee2a05e4aa1676363d6ad", "html_url": "https://github.com/rust-lang/rust/commit/dfa5bd111404102a561ee2a05e4aa1676363d6ad"}], "stats": {"total": 97, "additions": 61, "deletions": 36}, "files": [{"sha": "7c54bde66b32f9457c4fc836fd213413b8452dee", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 29, "deletions": 21, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=e372f943e2f84beef81fde6b7e1260fc710529c6", "patch": "@@ -274,7 +274,8 @@ fn add_substr(&dest: [u8], src: [u8]) {\n     dest += src;\n }\n \n-fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n+fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint],\n+            is_obj_body: bool) -> [u8] {\n     let s = [];\n \n     alt ty::struct(ccx.tcx, t) {\n@@ -320,7 +321,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         s += [shape_vec];\n         add_bool(s, true); // type is POD\n         let unit_ty = ty::mk_mach(ccx.tcx, ast::ty_u8);\n-        add_substr(s, shape_of(ccx, unit_ty, ty_param_map));\n+        add_substr(s, shape_of(ccx, unit_ty, ty_param_map, is_obj_body));\n       }\n \n \n@@ -352,7 +353,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n \n             add_u16(sub, vec::len(tps) as u16);\n             for tp: ty::t in tps {\n-                let subshape = shape_of(ccx, tp, ty_param_map);\n+                let subshape = shape_of(ccx, tp, ty_param_map, is_obj_body);\n                 add_u16(sub, vec::len(subshape) as u16);\n                 sub += subshape;\n             }\n@@ -368,29 +369,31 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n \n       ty::ty_box(mt) {\n         s += [shape_box];\n-        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map, is_obj_body));\n       }\n       ty::ty_uniq(mt) {\n         s += [shape_uniq];\n-        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map, is_obj_body));\n       }\n       ty::ty_vec(mt) {\n         s += [shape_vec];\n         add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));\n-        add_substr(s, shape_of(ccx, mt.ty, ty_param_map));\n+        add_substr(s, shape_of(ccx, mt.ty, ty_param_map, is_obj_body));\n       }\n       ty::ty_rec(fields) {\n         s += [shape_struct];\n         let sub = [];\n         for f: field in fields {\n-            sub += shape_of(ccx, f.mt.ty, ty_param_map);\n+            sub += shape_of(ccx, f.mt.ty, ty_param_map, is_obj_body);\n         }\n         add_substr(s, sub);\n       }\n       ty::ty_tup(elts) {\n         s += [shape_struct];\n         let sub = [];\n-        for elt in elts { sub += shape_of(ccx, elt, ty_param_map); }\n+        for elt in elts {\n+            sub += shape_of(ccx, elt, ty_param_map, is_obj_body);\n+        }\n         add_substr(s, sub);\n       }\n \n@@ -417,9 +420,9 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         add_u16(s, id as u16);\n         add_u16(s, vec::len(tps) as u16);\n         for tp: ty::t in tps {\n-            add_substr(s, shape_of(ccx, tp, ty_param_map));\n+            add_substr(s, shape_of(ccx, tp, ty_param_map, is_obj_body));\n         }\n-        add_substr(s, shape_of(ccx, subt, ty_param_map));\n+        add_substr(s, shape_of(ccx, subt, ty_param_map, is_obj_body));\n \n       }\n \n@@ -434,18 +437,23 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n \n \n       ty::ty_param(n, _) {\n-        // Find the type parameter in the parameter list.\n-        let found = false;\n-        let i = 0u;\n-        while i < vec::len(ty_param_map) {\n-            if n == ty_param_map[i] {\n-                s += [shape_var, i as u8];\n-                found = true;\n-                break;\n+        if is_obj_body {\n+            // Just write in the parameter number.\n+            s += [shape_var, n as u8];\n+        } else {\n+            // Find the type parameter in the parameter list.\n+            let found = false;\n+            let i = 0u;\n+            while i < vec::len(ty_param_map) {\n+                if n == ty_param_map[i] {\n+                    s += [shape_var, i as u8];\n+                    found = true;\n+                    break;\n+                }\n+                i += 1u;\n             }\n-            i += 1u;\n+            assert (found);\n         }\n-        assert (found);\n       }\n     }\n \n@@ -460,7 +468,7 @@ fn shape_of_variant(ccx: @crate_ctxt, v: ty::variant_info,\n     while i < ty_param_count { ty_param_map += [i]; i += 1u; }\n \n     let s = [];\n-    for t: ty::t in v.args { s += shape_of(ccx, t, ty_param_map); }\n+    for t: ty::t in v.args { s += shape_of(ccx, t, ty_param_map, false); }\n     ret s;\n }\n "}, {"sha": "5833be8aaff5ff17e33cb420da8b920579a76da5", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e372f943e2f84beef81fde6b7e1260fc710529c6", "patch": "@@ -951,10 +951,16 @@ fn get_derived_tydesc(cx: @block_ctxt, t: ty::t, escapes: bool,\n       none. {/* fall through */ }\n     }\n \n+    let is_obj_body;\n+    alt storage {\n+        tps_normal. { is_obj_body = false; }\n+        tps_obj(_) | tps_fn(_) { is_obj_body = true; }\n+    }\n+\n     bcx_ccx(cx).stats.n_derived_tydescs += 1u;\n     let bcx = new_raw_block_ctxt(cx.fcx, cx.fcx.llderivedtydescs);\n     let tys = linearize_ty_params(bcx, t);\n-    let root_ti = get_static_tydesc(bcx, t, tys.params);\n+    let root_ti = get_static_tydesc(bcx, t, tys.params, is_obj_body);\n     static_ti = some::<@tydesc_info>(root_ti);\n     lazily_emit_all_tydesc_glue(cx, static_ti);\n     let root = root_ti.tydesc;\n@@ -1048,21 +1054,22 @@ fn get_tydesc(cx: @block_ctxt, orig_t: ty::t, escapes: bool,\n              result: get_derived_tydesc(cx, t, escapes, storage, static_ti)};\n     }\n     // Otherwise, generate a tydesc if necessary, and return it.\n-    let info = get_static_tydesc(cx, t, []);\n+    let info = get_static_tydesc(cx, t, [], false);\n     static_ti = some::<@tydesc_info>(info);\n     ret {kind: tk_static, result: rslt(cx, info.tydesc)};\n }\n \n-fn get_static_tydesc(cx: @block_ctxt, orig_t: ty::t, ty_params: [uint]) ->\n-   @tydesc_info {\n+fn get_static_tydesc(cx: @block_ctxt, orig_t: ty::t, ty_params: [uint],\n+                     is_obj_body: bool) -> @tydesc_info {\n     let t = ty::strip_cname(bcx_tcx(cx), orig_t);\n \n \n     alt bcx_ccx(cx).tydescs.find(t) {\n       some(info) { ret info; }\n       none. {\n         bcx_ccx(cx).stats.n_static_tydescs += 1u;\n-        let info = declare_tydesc(cx.fcx.lcx, cx.sp, t, ty_params);\n+        let info = declare_tydesc(cx.fcx.lcx, cx.sp, t, ty_params,\n+                                  is_obj_body);\n         bcx_ccx(cx).tydescs.insert(t, info);\n         ret info;\n       }\n@@ -1097,7 +1104,8 @@ fn set_glue_inlining(cx: @local_ctxt, f: ValueRef, t: ty::t) {\n \n \n // Generates the declaration for (but doesn't emit) a type descriptor.\n-fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint]) ->\n+fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint],\n+                  is_obj_body: bool) ->\n    @tydesc_info {\n     log \"+++ declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n     let ccx = cx.ccx;\n@@ -1133,7 +1141,8 @@ fn declare_tydesc(cx: @local_ctxt, sp: span, t: ty::t, ty_params: [uint]) ->\n           mutable drop_glue: none::<ValueRef>,\n           mutable free_glue: none::<ValueRef>,\n           mutable cmp_glue: none::<ValueRef>,\n-          ty_params: ty_params};\n+          ty_params: ty_params,\n+          is_obj_body: is_obj_body};\n     log \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n     ret info;\n }\n@@ -1249,7 +1258,8 @@ fn emit_tydescs(ccx: @crate_ctxt) {\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n \n-        let shape = shape::shape_of(ccx, pair.key, ti.ty_params);\n+        let shape = shape::shape_of(ccx, pair.key, ti.ty_params,\n+                                    ti.is_obj_body);\n         let shape_tables =\n             llvm::LLVMConstPointerCast(ccx.shape_cx.llshapetables,\n                                        T_ptr(T_i8()));"}, {"sha": "ce49024a88b5eb309ba30808de8ad206ab063be8", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=e372f943e2f84beef81fde6b7e1260fc710529c6", "patch": "@@ -58,7 +58,8 @@ type tydesc_info =\n      mutable drop_glue: option::t<ValueRef>,\n      mutable free_glue: option::t<ValueRef>,\n      mutable cmp_glue: option::t<ValueRef>,\n-     ty_params: [uint]};\n+     ty_params: [uint],\n+     is_obj_body: bool};\n \n /*\n  * A note on nomenclature of linking: \"upcall\", \"extern\" and \"native\"."}, {"sha": "5688048085d1d28ff25d55b5fb87870e0778267f", "filename": "src/comp/middle/trans_objects.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e372f943e2f84beef81fde6b7e1260fc710529c6/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_objects.rs?ref=e372f943e2f84beef81fde6b7e1260fc710529c6", "patch": "@@ -108,6 +108,18 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n         // refcount.\n         let body_ty: ty::t =\n             create_object_body_type(ccx.tcx, obj_fields, tps, none);\n+\n+        // We have to get this type descriptor now so that\n+        // trans_malloc_boxed() doesn't generate a type descriptor with the\n+        // wrong storage type and override the type descriptor we're about to\n+        // generate.\n+        let ti = none;\n+        let storage = tps_obj(vec::len(ty_params));\n+        let body_td = get_tydesc(bcx, body_ty, true, storage, ti).result;\n+        bcx = body_td.bcx;\n+        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n+        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n+\n         let box = trans_malloc_boxed(bcx, body_ty);\n         bcx = box.bcx;\n         let body = box.body;\n@@ -126,19 +138,13 @@ fn trans_obj(cx: @local_ctxt, sp: span, ob: ast::_obj, ctor_id: ast::node_id,\n         let body_tydesc =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_tydesc]);\n         bcx = body_tydesc.bcx;\n-        let ti = none;\n \n         check type_is_tup_like(bcx, body_ty);\n         let r =\n             GEP_tup_like(bcx, body_ty, body, [0, abi::obj_body_elt_typarams]);\n         bcx = r.bcx;\n         let body_typarams = r.val;\n \n-        let storage = tps_obj(vec::len(ty_params));\n-        let body_td = get_tydesc(bcx, body_ty, true, storage, ti).result;\n-        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, ti);\n-        lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, ti);\n-        bcx = body_td.bcx;\n         Store(bcx, body_td.val, body_tydesc.val);\n \n         // Copy the object's type parameters and fields into the space we"}]}