{"sha": "5eae9af193efca654a4e20ec0766781c24b7eb87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYWU5YWYxOTNlZmNhNjU0YTRlMjBlYzA3NjY3ODFjMjRiN2ViODc=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-03-15T12:11:02Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-03-15T12:11:02Z"}, "message": "Custom error on literal names from other languages\n\nThis detects all Java literal types and all single word C data types,\nand suggests the corresponding Rust literal type.", "tree": {"sha": "4bea9462a10cbfc3b9aeef06a3356a3bdeff34fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bea9462a10cbfc3b9aeef06a3356a3bdeff34fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5eae9af193efca654a4e20ec0766781c24b7eb87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5eae9af193efca654a4e20ec0766781c24b7eb87", "html_url": "https://github.com/rust-lang/rust/commit/5eae9af193efca654a4e20ec0766781c24b7eb87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5eae9af193efca654a4e20ec0766781c24b7eb87/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326", "html_url": "https://github.com/rust-lang/rust/commit/5fe790e3c40710ecb95ddaadb98b59a3bb4f8326"}], "stats": {"total": 133, "additions": 133, "deletions": 0}, "files": [{"sha": "e85d78db22c563af4b9d7dd8ae4c405632ae06a8", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5eae9af193efca654a4e20ec0766781c24b7eb87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eae9af193efca654a4e20ec0766781c24b7eb87/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=5eae9af193efca654a4e20ec0766781c24b7eb87", "patch": "@@ -563,6 +563,15 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         }\n                     }\n                 }\n+            } else if err_code == &rustc_errors::error_code!(E0412) {\n+                if let Some(correct) = Self::likely_rust_type(path) {\n+                    err.span_suggestion(\n+                        span,\n+                        \"perhaps you intended to use this type\",\n+                        correct.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n         }\n \n@@ -1243,6 +1252,23 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         }\n     }\n \n+    // Returns the name of the Rust type approximately corresponding to\n+    // a type name in another programming language.\n+    fn likely_rust_type(path: &[Segment]) -> Option<Symbol> {\n+        let name = path[path.len() - 1].ident.as_str();\n+        // Common Java types\n+        Some(match &*name {\n+            \"byte\" => sym::u8, // In Java, bytes are signed, but in practice one almost always wants unsigned bytes.\n+            \"short\" => sym::i16,\n+            \"boolean\" => sym::bool,\n+            \"int\" => sym::i32,\n+            \"long\" => sym::i64,\n+            \"float\" => sym::f32,\n+            \"double\" => sym::f64,\n+            _ => return None,\n+        })\n+    }\n+\n     /// Only used in a specific case of type ascription suggestions\n     fn get_colon_suggestion_span(&self, start: Span) -> Span {\n         let sm = self.r.session.source_map();"}, {"sha": "f60d3d10dce47734fd27eb02d30895c5c783463c", "filename": "src/test/ui/lint/recommend-literal.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/5eae9af193efca654a4e20ec0766781c24b7eb87/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5eae9af193efca654a4e20ec0766781c24b7eb87/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.rs?ref=5eae9af193efca654a4e20ec0766781c24b7eb87", "patch": "@@ -0,0 +1,35 @@\n+type Real = double;\n+//~^ ERROR cannot find type `double` in this scope\n+//~| HELP perhaps you intended to use this type\n+\n+fn main() {\n+    let x: Real = 3.5;\n+    let y: long = 74802374902374923;\n+    //~^ ERROR cannot find type `long` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn z(a: boolean) {\n+    //~^ ERROR cannot find type `boolean` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+fn a() -> byte {\n+//~^ ERROR cannot find type `byte` in this scope\n+//~| HELP perhaps you intended to use this type\n+    3\n+}\n+\n+struct Data { //~ HELP you might be missing a type parameter\n+    width: float,\n+    //~^ ERROR cannot find type `float` in this scope\n+    //~| HELP perhaps you intended to use this type\n+    depth: Option<int>,\n+    //~^ ERROR cannot find type `int` in this scope\n+    //~| HELP perhaps you intended to use this type\n+}\n+\n+trait Stuff {}\n+impl Stuff for short {}\n+//~^ ERROR cannot find type `short` in this scope\n+//~| HELP perhaps you intended to use this type"}, {"sha": "b01073b42b864daf1f6613733dfa00cb896a7ed6", "filename": "src/test/ui/lint/recommend-literal.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/5eae9af193efca654a4e20ec0766781c24b7eb87/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5eae9af193efca654a4e20ec0766781c24b7eb87/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Frecommend-literal.stderr?ref=5eae9af193efca654a4e20ec0766781c24b7eb87", "patch": "@@ -0,0 +1,72 @@\n+error[E0412]: cannot find type `double` in this scope\n+  --> $DIR/recommend-literal.rs:1:13\n+   |\n+LL | type Real = double;\n+   |             ^^^^^^\n+   |             |\n+   |             not found in this scope\n+   |             help: perhaps you intended to use this type: `f64`\n+\n+error[E0412]: cannot find type `long` in this scope\n+  --> $DIR/recommend-literal.rs:7:12\n+   |\n+LL |     let y: long = 74802374902374923;\n+   |            ^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `i64`\n+\n+error[E0412]: cannot find type `boolean` in this scope\n+  --> $DIR/recommend-literal.rs:12:9\n+   |\n+LL | fn z(a: boolean) {\n+   |         ^^^^^^^\n+   |         |\n+   |         not found in this scope\n+   |         help: perhaps you intended to use this type: `bool`\n+\n+error[E0412]: cannot find type `byte` in this scope\n+  --> $DIR/recommend-literal.rs:17:11\n+   |\n+LL | fn a() -> byte {\n+   |           ^^^^\n+   |           |\n+   |           not found in this scope\n+   |           help: perhaps you intended to use this type: `u8`\n+\n+error[E0412]: cannot find type `float` in this scope\n+  --> $DIR/recommend-literal.rs:24:12\n+   |\n+LL |     width: float,\n+   |            ^^^^^\n+   |            |\n+   |            not found in this scope\n+   |            help: perhaps you intended to use this type: `f32`\n+\n+error[E0412]: cannot find type `int` in this scope\n+  --> $DIR/recommend-literal.rs:27:19\n+   |\n+LL |     depth: Option<int>,\n+   |                   ^^^ not found in this scope\n+   |\n+help: perhaps you intended to use this type\n+   |\n+LL |     depth: Option<i32>,\n+   |                   ^^^\n+help: you might be missing a type parameter\n+   |\n+LL | struct Data<int> {\n+   |            ^^^^^\n+\n+error[E0412]: cannot find type `short` in this scope\n+  --> $DIR/recommend-literal.rs:33:16\n+   |\n+LL | impl Stuff for short {}\n+   |                ^^^^^\n+   |                |\n+   |                not found in this scope\n+   |                help: perhaps you intended to use this type: `i16`\n+\n+error: aborting due to 7 previous errors\n+\n+For more information about this error, try `rustc --explain E0412`."}]}