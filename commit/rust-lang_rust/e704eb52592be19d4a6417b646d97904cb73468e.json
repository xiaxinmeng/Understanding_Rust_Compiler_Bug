{"sha": "e704eb52592be19d4a6417b646d97904cb73468e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MDRlYjUyNTkyYmUxOWQ0YTY0MTdiNjQ2ZDk3OTA0Y2I3MzQ2OGU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-26T09:03:06Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-08-26T09:03:06Z"}, "message": "Sync discriminant getter and setter with upstream\n\nFixes #683", "tree": {"sha": "d505789e5e943a96642e5140adce64cda8d01dbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d505789e5e943a96642e5140adce64cda8d01dbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e704eb52592be19d4a6417b646d97904cb73468e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e704eb52592be19d4a6417b646d97904cb73468e", "html_url": "https://github.com/rust-lang/rust/commit/e704eb52592be19d4a6417b646d97904cb73468e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e704eb52592be19d4a6417b646d97904cb73468e/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6c39fa701f42b9fd266261aec967e2eb6d2a70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6c39fa701f42b9fd266261aec967e2eb6d2a70d", "html_url": "https://github.com/rust-lang/rust/commit/f6c39fa701f42b9fd266261aec967e2eb6d2a70d"}], "stats": {"total": 192, "additions": 138, "deletions": 54}, "files": [{"sha": "5d65dd4d94f50d7800740494c32dc176589ffa3e", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/e704eb52592be19d4a6417b646d97904cb73468e/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704eb52592be19d4a6417b646d97904cb73468e/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=e704eb52592be19d4a6417b646d97904cb73468e", "patch": "@@ -264,4 +264,73 @@ fn main() {\n \n     static ANOTHER_STATIC: &u8 = &A_STATIC;\n     assert_eq!(*ANOTHER_STATIC, 42);\n+\n+    check_niche_behavior();\n+}\n+\n+// Copied ui/issues/issue-61696.rs\n+\n+pub enum Infallible {}\n+\n+// The check that the `bool` field of `V1` is encoding a \"niche variant\"\n+// (i.e. not `V1`, so `V3` or `V4`) used to be mathematically incorrect,\n+// causing valid `V1` values to be interpreted as other variants.\n+pub enum E1 {\n+    V1 { f: bool },\n+    V2 { f: Infallible },\n+    V3,\n+    V4,\n+}\n+\n+// Computing the discriminant used to be done using the niche type (here `u8`,\n+// from the `bool` field of `V1`), overflowing for variants with large enough\n+// indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+pub enum E2<X> {\n+    V1 { f: bool },\n+\n+    /*_00*/ _01(X), _02(X), _03(X), _04(X), _05(X), _06(X), _07(X),\n+    _08(X), _09(X), _0A(X), _0B(X), _0C(X), _0D(X), _0E(X), _0F(X),\n+    _10(X), _11(X), _12(X), _13(X), _14(X), _15(X), _16(X), _17(X),\n+    _18(X), _19(X), _1A(X), _1B(X), _1C(X), _1D(X), _1E(X), _1F(X),\n+    _20(X), _21(X), _22(X), _23(X), _24(X), _25(X), _26(X), _27(X),\n+    _28(X), _29(X), _2A(X), _2B(X), _2C(X), _2D(X), _2E(X), _2F(X),\n+    _30(X), _31(X), _32(X), _33(X), _34(X), _35(X), _36(X), _37(X),\n+    _38(X), _39(X), _3A(X), _3B(X), _3C(X), _3D(X), _3E(X), _3F(X),\n+    _40(X), _41(X), _42(X), _43(X), _44(X), _45(X), _46(X), _47(X),\n+    _48(X), _49(X), _4A(X), _4B(X), _4C(X), _4D(X), _4E(X), _4F(X),\n+    _50(X), _51(X), _52(X), _53(X), _54(X), _55(X), _56(X), _57(X),\n+    _58(X), _59(X), _5A(X), _5B(X), _5C(X), _5D(X), _5E(X), _5F(X),\n+    _60(X), _61(X), _62(X), _63(X), _64(X), _65(X), _66(X), _67(X),\n+    _68(X), _69(X), _6A(X), _6B(X), _6C(X), _6D(X), _6E(X), _6F(X),\n+    _70(X), _71(X), _72(X), _73(X), _74(X), _75(X), _76(X), _77(X),\n+    _78(X), _79(X), _7A(X), _7B(X), _7C(X), _7D(X), _7E(X), _7F(X),\n+    _80(X), _81(X), _82(X), _83(X), _84(X), _85(X), _86(X), _87(X),\n+    _88(X), _89(X), _8A(X), _8B(X), _8C(X), _8D(X), _8E(X), _8F(X),\n+    _90(X), _91(X), _92(X), _93(X), _94(X), _95(X), _96(X), _97(X),\n+    _98(X), _99(X), _9A(X), _9B(X), _9C(X), _9D(X), _9E(X), _9F(X),\n+    _A0(X), _A1(X), _A2(X), _A3(X), _A4(X), _A5(X), _A6(X), _A7(X),\n+    _A8(X), _A9(X), _AA(X), _AB(X), _AC(X), _AD(X), _AE(X), _AF(X),\n+    _B0(X), _B1(X), _B2(X), _B3(X), _B4(X), _B5(X), _B6(X), _B7(X),\n+    _B8(X), _B9(X), _BA(X), _BB(X), _BC(X), _BD(X), _BE(X), _BF(X),\n+    _C0(X), _C1(X), _C2(X), _C3(X), _C4(X), _C5(X), _C6(X), _C7(X),\n+    _C8(X), _C9(X), _CA(X), _CB(X), _CC(X), _CD(X), _CE(X), _CF(X),\n+    _D0(X), _D1(X), _D2(X), _D3(X), _D4(X), _D5(X), _D6(X), _D7(X),\n+    _D8(X), _D9(X), _DA(X), _DB(X), _DC(X), _DD(X), _DE(X), _DF(X),\n+    _E0(X), _E1(X), _E2(X), _E3(X), _E4(X), _E5(X), _E6(X), _E7(X),\n+    _E8(X), _E9(X), _EA(X), _EB(X), _EC(X), _ED(X), _EE(X), _EF(X),\n+    _F0(X), _F1(X), _F2(X), _F3(X), _F4(X), _F5(X), _F6(X), _F7(X),\n+    _F8(X), _F9(X), _FA(X), _FB(X), _FC(X), _FD(X), _FE(X), _FF(X),\n+\n+    V3,\n+    V4,\n+}\n+\n+fn check_niche_behavior () {\n+    if let E1::V2 { .. } = (E1::V1 { f: true }) {\n+        unsafe { intrinsics::abort(); }\n+    }\n+\n+    if let E2::V1 { .. } = E2::V3::<Infallible> {\n+        unsafe { intrinsics::abort(); }\n+    }\n }"}, {"sha": "ea075ece648a7c4bc2f2089d3e58c4cce4e1a507", "filename": "src/discriminant.rs", "status": "modified", "additions": 69, "deletions": 54, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/e704eb52592be19d4a6417b646d97904cb73468e/src%2Fdiscriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e704eb52592be19d4a6417b646d97904cb73468e/src%2Fdiscriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiscriminant.rs?ref=e704eb52592be19d4a6417b646d97904cb73468e", "patch": "@@ -1,3 +1,5 @@\n+//! Adapted from https://github.com/rust-lang/rust/blob/d760df5aea483aae041c9a241e7acacf48f75035/src/librustc_codegen_ssa/mir/place.rs\n+\n use crate::prelude::*;\n \n pub fn codegen_set_discriminant<'tcx>(\n@@ -6,7 +8,7 @@ pub fn codegen_set_discriminant<'tcx>(\n     variant_index: VariantIdx,\n ) {\n     let layout = place.layout();\n-    if layout.for_variant(&*fx, variant_index).abi == layout::Abi::Uninhabited {\n+    if layout.for_variant(fx, variant_index).abi.is_uninhabited() {\n         return;\n     }\n     match layout.variants {\n@@ -40,16 +42,9 @@ pub fn codegen_set_discriminant<'tcx>(\n         } => {\n             if variant_index != dataful_variant {\n                 let niche = place.place_field(fx, mir::Field::new(discr_index));\n-                //let niche_llty = niche.layout.immediate_llvm_type(bx.cx);\n-                let niche_value =\n-                    ((variant_index.as_u32() - niche_variants.start().as_u32()) as u128)\n-                        .wrapping_add(niche_start);\n-                // FIXME(eddyb) Check the actual primitive type here.\n-                let niche_llval = if niche_value == 0 {\n-                    CValue::const_val(fx, niche.layout().ty, 0)\n-                } else {\n-                    CValue::const_val(fx, niche.layout().ty, niche_value)\n-                };\n+                let niche_value = variant_index.as_u32() - niche_variants.start().as_u32();\n+                let niche_value = u128::from(niche_value).wrapping_add(niche_start);\n+                let niche_llval = CValue::const_val(fx, niche.layout().ty, niche_value);\n                 niche.write_cvalue(fx, niche_llval);\n             }\n         }\n@@ -71,68 +66,88 @@ pub fn codegen_get_discriminant<'tcx>(\n         layout::Variants::Single { index } => {\n             let discr_val = layout\n                 .ty\n-                .ty_adt_def()\n-                .map_or(u128::from(index.as_u32()), |def| {\n-                    def.discriminant_for_variant(fx.tcx, *index).val\n-                });\n+                .discriminant_for_variant(fx.tcx, *index)\n+                .map_or(u128::from(index.as_u32()), |discr| discr.val);\n             return CValue::const_val(fx, dest_layout.ty, discr_val);\n         }\n         layout::Variants::Multiple { discr, discr_index, discr_kind, variants: _ } => {\n             (discr, *discr_index, discr_kind)\n         }\n     };\n \n-    let discr = value.value_field(fx, mir::Field::new(discr_index));\n-    let discr_ty = discr.layout().ty;\n-    let lldiscr = discr.load_scalar(fx);\n-    match discr_kind {\n+    let cast_to = fx.clif_type(dest_layout.ty).unwrap();\n+\n+    // Read the tag/niche-encoded discriminant from memory.\n+    let encoded_discr = value.value_field(fx, mir::Field::new(discr_index));\n+    let encoded_discr = encoded_discr.load_scalar(fx);\n+\n+    // Decode the discriminant (specifically if it's niche-encoded).\n+    match *discr_kind {\n         layout::DiscriminantKind::Tag => {\n             let signed = match discr_scalar.value {\n                 layout::Int(_, signed) => signed,\n-                _ => false,\n+                _ => false\n             };\n-            let val = clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), signed);\n+            let val = clif_intcast(fx, encoded_discr, cast_to, signed);\n             return CValue::by_val(val, dest_layout);\n         }\n         layout::DiscriminantKind::Niche {\n             dataful_variant,\n             ref niche_variants,\n             niche_start,\n         } => {\n-            let niche_llty = fx.clif_type(discr_ty).unwrap();\n-            let dest_clif_ty = fx.clif_type(dest_layout.ty).unwrap();\n-            if niche_variants.start() == niche_variants.end() {\n-                let b = codegen_icmp_imm(fx, IntCC::Equal, lldiscr, *niche_start as i128);\n-                let if_true = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, niche_variants.start().as_u32() as i64);\n-                let if_false = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n-                let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::by_val(val, dest_layout);\n+            // Rebase from niche values to discriminants, and check\n+            // whether the result is in range for the niche variants.\n+\n+            // We first compute the \"relative discriminant\" (wrt `niche_variants`),\n+            // that is, if `n = niche_variants.end() - niche_variants.start()`,\n+            // we remap `niche_start..=niche_start + n` (which may wrap around)\n+            // to (non-wrap-around) `0..=n`, to be able to check whether the\n+            // discriminant corresponds to a niche variant with one comparison.\n+            // We also can't go directly to the (variant index) discriminant\n+            // and check that it is in the range `niche_variants`, because\n+            // that might not fit in the same type, on top of needing an extra\n+            // comparison (see also the comment on `let niche_discr`).\n+            let relative_discr = if niche_start == 0 {\n+                encoded_discr\n             } else {\n-                // Rebase from niche values to discriminant values.\n-                let delta = niche_start.wrapping_sub(niche_variants.start().as_u32() as u128);\n-                let delta = fx.bcx.ins().iconst(niche_llty, delta as u64 as i64);\n-                let lldiscr = fx.bcx.ins().isub(lldiscr, delta);\n-                let b = codegen_icmp_imm(\n-                    fx,\n-                    IntCC::UnsignedLessThanOrEqual,\n-                    lldiscr,\n-                    i128::from(niche_variants.end().as_u32()),\n-                );\n-                let if_true =\n-                    clif_intcast(fx, lldiscr, fx.clif_type(dest_layout.ty).unwrap(), false);\n-                let if_false = fx\n-                    .bcx\n-                    .ins()\n-                    .iconst(dest_clif_ty, dataful_variant.as_u32() as i64);\n-                let val = fx.bcx.ins().select(b, if_true, if_false);\n-                return CValue::by_val(val, dest_layout);\n-            }\n+                // FIXME handle niche_start > i64::max_value()\n+                fx.bcx.ins().iadd_imm(encoded_discr, -i64::try_from(niche_start).unwrap())\n+            };\n+            let relative_max = niche_variants.end().as_u32() - niche_variants.start().as_u32();\n+            let is_niche = {\n+                codegen_icmp_imm(fx, IntCC::UnsignedLessThanOrEqual, relative_discr, i128::from(relative_max))\n+            };\n+\n+            // NOTE(eddyb) this addition needs to be performed on the final\n+            // type, in case the niche itself can't represent all variant\n+            // indices (e.g. `u8` niche with more than `256` variants,\n+            // but enough uninhabited variants so that the remaining variants\n+            // fit in the niche).\n+            // In other words, `niche_variants.end - niche_variants.start`\n+            // is representable in the niche, but `niche_variants.end`\n+            // might not be, in extreme cases.\n+            let niche_discr = {\n+                let relative_discr = if relative_max == 0 {\n+                    // HACK(eddyb) since we have only one niche, we know which\n+                    // one it is, and we can avoid having a dynamic value here.\n+                    fx.bcx.ins().iconst(cast_to, 0)\n+                } else {\n+                    clif_intcast(fx, relative_discr, cast_to, false)\n+                };\n+                fx.bcx.ins().iadd_imm(\n+                    relative_discr,\n+                    i64::from(niche_variants.start().as_u32()),\n+                )\n+            };\n+\n+            let dataful_variant = fx.bcx.ins().iconst(cast_to, i64::from(dataful_variant.as_u32()));\n+            let discr = fx.bcx.ins().select(\n+                is_niche,\n+                niche_discr,\n+                dataful_variant,\n+            );\n+            CValue::by_val(discr, dest_layout)\n         }\n     }\n }"}]}