{"sha": "3f0729f37877d32565a6829327db84a84b27fc3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDcyOWYzNzg3N2QzMjU2NWE2ODI5MzI3ZGI4NGE4NGIyN2ZjM2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-06-20T15:10:02Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-06-20T15:48:42Z"}, "message": "expand: Move some more derive logic to `rustc_builtin_macros`", "tree": {"sha": "e7c8f178efeacc1c9b6984fc0fb1f167ca27ab5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7c8f178efeacc1c9b6984fc0fb1f167ca27ab5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0729f37877d32565a6829327db84a84b27fc3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0729f37877d32565a6829327db84a84b27fc3b", "html_url": "https://github.com/rust-lang/rust/commit/3f0729f37877d32565a6829327db84a84b27fc3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0729f37877d32565a6829327db84a84b27fc3b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75d1500f028d0e5dcb3978b873bf2d0a0be9c75f", "url": "https://api.github.com/repos/rust-lang/rust/commits/75d1500f028d0e5dcb3978b873bf2d0a0be9c75f", "html_url": "https://github.com/rust-lang/rust/commit/75d1500f028d0e5dcb3978b873bf2d0a0be9c75f"}], "stats": {"total": 51, "additions": 13, "deletions": 38}, "files": [{"sha": "415822c4573054e2ffa7cdb26ba29905ed441a38", "filename": "compiler/rustc_builtin_macros/src/cfg_eval.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg_eval.rs?ref=3f0729f37877d32565a6829327db84a84b27fc3b", "patch": "@@ -24,19 +24,18 @@ crate fn expand(\n     annotatable: Annotatable,\n ) -> Vec<Annotatable> {\n     check_builtin_macro_attribute(ecx, meta_item, sym::cfg_eval);\n-    cfg_eval(ecx, annotatable)\n+    vec![cfg_eval(ecx, annotatable)]\n }\n \n-crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Vec<Annotatable> {\n-    let mut visitor = CfgEval {\n+crate fn cfg_eval(ecx: &ExtCtxt<'_>, annotatable: Annotatable) -> Annotatable {\n+    CfgEval {\n         cfg: &mut StripUnconfigured {\n             sess: ecx.sess,\n             features: ecx.ecfg.features,\n             config_tokens: true,\n         },\n-    };\n-    let annotatable = visitor.configure_annotatable(annotatable);\n-    vec![annotatable]\n+    }\n+    .configure_annotatable(annotatable)\n }\n \n struct CfgEval<'a, 'b> {"}, {"sha": "60d6bae38b56c89c251913fd2eea4235611d87b6", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=3f0729f37877d32565a6829327db84a84b27fc3b", "patch": "@@ -26,6 +26,8 @@ impl MultiItemModifier for Expander {\n             return ExpandResult::Ready(vec![item]);\n         }\n \n+        let item = cfg_eval(ecx, item);\n+\n         let result =\n             ecx.resolver.resolve_derives(ecx.current_expansion.id, ecx.force_mode, &|| {\n                 let template =\n@@ -54,12 +56,12 @@ impl MultiItemModifier for Expander {\n                         report_path_args(sess, &meta);\n                         meta.path\n                     })\n-                    .map(|path| (path, None))\n+                    .map(|path| (path, item.clone(), None))\n                     .collect()\n             });\n \n         match result {\n-            Ok(()) => ExpandResult::Ready(cfg_eval(ecx, item)),\n+            Ok(()) => ExpandResult::Ready(vec![item]),\n             Err(Indeterminate) => ExpandResult::Retry(item),\n         }\n     }"}, {"sha": "96fd6cb68e8b93419cc6d9a40b9d02327fc9cba3", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=3f0729f37877d32565a6829327db84a84b27fc3b", "patch": "@@ -835,7 +835,7 @@ impl SyntaxExtension {\n /// Error type that denotes indeterminacy.\n pub struct Indeterminate;\n \n-pub type DeriveResolutions = Vec<(ast::Path, Option<Lrc<SyntaxExtension>>)>;\n+pub type DeriveResolutions = Vec<(ast::Path, Annotatable, Option<Lrc<SyntaxExtension>>)>;\n \n pub trait ResolverExpand {\n     fn next_node_id(&mut self) -> NodeId;"}, {"sha": "234a49fbbf125a1362a636a321176b201f18b88d", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 28, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=3f0729f37877d32565a6829327db84a84b27fc3b", "patch": "@@ -500,42 +500,16 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         .resolver\n                         .take_derive_resolutions(expn_id)\n                         .map(|derives| {\n-                            enum AnnotatableRef<'a> {\n-                                Item(&'a P<ast::Item>),\n-                                Stmt(&'a ast::Stmt),\n-                            }\n-                            let item = match &fragment {\n-                                AstFragment::Items(items) => match &items[..] {\n-                                    [item] => AnnotatableRef::Item(item),\n-                                    _ => unreachable!(),\n-                                },\n-                                AstFragment::Stmts(stmts) => match &stmts[..] {\n-                                    [stmt] => AnnotatableRef::Stmt(stmt),\n-                                    _ => unreachable!(),\n-                                },\n-                                _ => unreachable!(),\n-                            };\n-\n                             derive_invocations.reserve(derives.len());\n                             derives\n                                 .into_iter()\n-                                .map(|(path, _exts)| {\n+                                .map(|(path, item, _exts)| {\n                                     // FIXME: Consider using the derive resolutions (`_exts`)\n                                     // instead of enqueuing the derives to be resolved again later.\n                                     let expn_id = ExpnId::fresh(None);\n                                     derive_invocations.push((\n                                         Invocation {\n-                                            kind: InvocationKind::Derive {\n-                                                path,\n-                                                item: match item {\n-                                                    AnnotatableRef::Item(item) => {\n-                                                        Annotatable::Item(item.clone())\n-                                                    }\n-                                                    AnnotatableRef::Stmt(stmt) => {\n-                                                        Annotatable::Stmt(P(stmt.clone()))\n-                                                    }\n-                                                },\n-                                            },\n+                                            kind: InvocationKind::Derive { path, item },\n                                             fragment_kind,\n                                             expansion_data: ExpansionData {\n                                                 id: expn_id,"}, {"sha": "38d052f988c63fefa192da601a8ef0507bf09d2c", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0729f37877d32565a6829327db84a84b27fc3b/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=3f0729f37877d32565a6829327db84a84b27fc3b", "patch": "@@ -380,7 +380,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n             has_derive_copy: false,\n         });\n         let parent_scope = self.invocation_parent_scopes[&expn_id];\n-        for (i, (path, opt_ext)) in entry.resolutions.iter_mut().enumerate() {\n+        for (i, (path, _, opt_ext)) in entry.resolutions.iter_mut().enumerate() {\n             if opt_ext.is_none() {\n                 *opt_ext = Some(\n                     match self.resolve_macro_path("}]}