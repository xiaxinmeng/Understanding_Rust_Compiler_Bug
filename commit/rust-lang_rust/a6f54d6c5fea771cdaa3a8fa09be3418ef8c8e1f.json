{"sha": "a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "node_id": "C_kwDOAAsO6NoAKGE2ZjU0ZDZjNWZlYTc3MWNkYWEzYThmYTA5YmUzNDE4ZWY4YzhlMWY", "commit": {"author": {"name": "Azriel Hoh", "email": "azriel91@gmail.com", "date": "2023-02-15T21:50:27Z"}, "committer": {"name": "Azriel Hoh", "email": "azriel91@gmail.com", "date": "2023-02-15T21:50:27Z"}, "message": "Conditionally add snippet marker.", "tree": {"sha": "ae833d9c595a45e1a44c2e34aa8dd6357b41d413", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae833d9c595a45e1a44c2e34aa8dd6357b41d413"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "html_url": "https://github.com/rust-lang/rust/commit/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f/comments", "author": {"login": "azriel91", "id": 2993230, "node_id": "MDQ6VXNlcjI5OTMyMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2993230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azriel91", "html_url": "https://github.com/azriel91", "followers_url": "https://api.github.com/users/azriel91/followers", "following_url": "https://api.github.com/users/azriel91/following{/other_user}", "gists_url": "https://api.github.com/users/azriel91/gists{/gist_id}", "starred_url": "https://api.github.com/users/azriel91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azriel91/subscriptions", "organizations_url": "https://api.github.com/users/azriel91/orgs", "repos_url": "https://api.github.com/users/azriel91/repos", "events_url": "https://api.github.com/users/azriel91/events{/privacy}", "received_events_url": "https://api.github.com/users/azriel91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azriel91", "id": 2993230, "node_id": "MDQ6VXNlcjI5OTMyMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2993230?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azriel91", "html_url": "https://github.com/azriel91", "followers_url": "https://api.github.com/users/azriel91/followers", "following_url": "https://api.github.com/users/azriel91/following{/other_user}", "gists_url": "https://api.github.com/users/azriel91/gists{/gist_id}", "starred_url": "https://api.github.com/users/azriel91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azriel91/subscriptions", "organizations_url": "https://api.github.com/users/azriel91/orgs", "repos_url": "https://api.github.com/users/azriel91/repos", "events_url": "https://api.github.com/users/azriel91/events{/privacy}", "received_events_url": "https://api.github.com/users/azriel91/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f2d33fb40548178d4ced3f0f971540c910d7ed9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2d33fb40548178d4ced3f0f971540c910d7ed9", "html_url": "https://github.com/rust-lang/rust/commit/1f2d33fb40548178d4ced3f0f971540c910d7ed9"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "4595cfe29c85d1e5d685523881b9cf2e69d344f0", "filename": "crates/ide-assists/src/handlers/generate_getter.rs", "status": "modified", "additions": 105, "deletions": 2, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_getter.rs?ref=a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "patch": "@@ -180,7 +180,9 @@ pub(crate) fn generate_getter_impl(\n \n                 // Insert `$0` only for last getter we generate\n                 if i == record_fields_count - 1 {\n-                    getter_buf = getter_buf.replacen(\"fn \", \"fn $0\", 1);\n+                    if ctx.config.snippet_cap.is_some() {\n+                        getter_buf = getter_buf.replacen(\"fn \", \"fn $0\", 1);\n+                    }\n                 }\n \n                 // For first element we do not merge with '\\n', as\n@@ -330,7 +332,7 @@ fn parse_record_field(record_field: ast::RecordField, mutable: bool) -> Option<R\n \n #[cfg(test)]\n mod tests {\n-    use crate::tests::{check_assist, check_assist_not_applicable};\n+    use crate::tests::{check_assist, check_assist_no_snippet_cap, check_assist_not_applicable};\n \n     use super::*;\n \n@@ -377,6 +379,49 @@ impl Context {\n         );\n     }\n \n+    #[test]\n+    fn test_generate_getter_from_field_no_snippet_cap() {\n+        check_assist_no_snippet_cap(\n+            generate_getter,\n+            r#\"\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n+            r#\"\n+struct Context {\n+    data: Data,\n+}\n+\n+impl Context {\n+    fn data(&self) -> &Data {\n+        &self.data\n+    }\n+}\n+\"#,\n+        );\n+\n+        check_assist_no_snippet_cap(\n+            generate_getter_mut,\n+            r#\"\n+struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n+            r#\"\n+struct Context {\n+    data: Data,\n+}\n+\n+impl Context {\n+    fn data_mut(&mut self) -> &mut Data {\n+        &mut self.data\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_generate_getter_already_implemented() {\n         check_assist_not_applicable(\n@@ -433,6 +478,29 @@ impl Context {\n         );\n     }\n \n+    #[test]\n+    fn test_generate_getter_from_field_with_visibility_marker_no_snippet_cap() {\n+        check_assist_no_snippet_cap(\n+            generate_getter,\n+            r#\"\n+pub(crate) struct Context {\n+    dat$0a: Data,\n+}\n+\"#,\n+            r#\"\n+pub(crate) struct Context {\n+    data: Data,\n+}\n+\n+impl Context {\n+    pub(crate) fn data(&self) -> &Data {\n+        &self.data\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_multiple_generate_getter() {\n         check_assist(\n@@ -468,6 +536,41 @@ impl Context {\n         );\n     }\n \n+    #[test]\n+    fn test_multiple_generate_getter_no_snippet_cap() {\n+        check_assist_no_snippet_cap(\n+            generate_getter,\n+            r#\"\n+struct Context {\n+    data: Data,\n+    cou$0nt: usize,\n+}\n+\n+impl Context {\n+    fn data(&self) -> &Data {\n+        &self.data\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Context {\n+    data: Data,\n+    count: usize,\n+}\n+\n+impl Context {\n+    fn data(&self) -> &Data {\n+        &self.data\n+    }\n+\n+    fn count(&self) -> &usize {\n+        &self.count\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn test_not_a_special_case() {\n         cov_mark::check_count!(convert_reference_type, 0);"}, {"sha": "94be99fd7abf896bf06e05958c2a0bfdd60daefc", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=a6f54d6c5fea771cdaa3a8fa09be3418ef8c8e1f", "patch": "@@ -33,6 +33,20 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n     assist_emit_must_use: false,\n };\n \n+pub(crate) const TEST_CONFIG_NO_SNIPPET_CAP: AssistConfig = AssistConfig {\n+    snippet_cap: None,\n+    allowed: None,\n+    insert_use: InsertUseConfig {\n+        granularity: ImportGranularity::Crate,\n+        prefix_kind: hir::PrefixKind::Plain,\n+        enforce_granularity: true,\n+        group: true,\n+        skip_glob_imports: true,\n+    },\n+    prefer_no_std: false,\n+    assist_emit_must_use: false,\n+};\n+\n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {\n     RootDatabase::with_single_file(text)\n }\n@@ -43,6 +57,22 @@ pub(crate) fn check_assist(assist: Handler, ra_fixture_before: &str, ra_fixture_\n     check(assist, ra_fixture_before, ExpectedResult::After(&ra_fixture_after), None);\n }\n \n+#[track_caller]\n+pub(crate) fn check_assist_no_snippet_cap(\n+    assist: Handler,\n+    ra_fixture_before: &str,\n+    ra_fixture_after: &str,\n+) {\n+    let ra_fixture_after = trim_indent(ra_fixture_after);\n+    check_with_config(\n+        TEST_CONFIG_NO_SNIPPET_CAP,\n+        assist,\n+        ra_fixture_before,\n+        ExpectedResult::After(&ra_fixture_after),\n+        None,\n+    );\n+}\n+\n // There is no way to choose what assist within a group you want to test against,\n // so this is here to allow you choose.\n pub(crate) fn check_assist_by_label(\n@@ -119,14 +149,24 @@ enum ExpectedResult<'a> {\n \n #[track_caller]\n fn check(handler: Handler, before: &str, expected: ExpectedResult<'_>, assist_label: Option<&str>) {\n+    check_with_config(TEST_CONFIG, handler, before, expected, assist_label);\n+}\n+\n+#[track_caller]\n+fn check_with_config(\n+    config: AssistConfig,\n+    handler: Handler,\n+    before: &str,\n+    expected: ExpectedResult<'_>,\n+    assist_label: Option<&str>,\n+) {\n     let (mut db, file_with_caret_id, range_or_offset) = RootDatabase::with_range_or_offset(before);\n     db.set_enable_proc_attr_macros(true);\n     let text_without_caret = db.file_text(file_with_caret_id).to_string();\n \n     let frange = FileRange { file_id: file_with_caret_id, range: range_or_offset.into() };\n \n     let sema = Semantics::new(&db);\n-    let config = TEST_CONFIG;\n     let ctx = AssistContext::new(sema, &config, frange);\n     let resolve = match expected {\n         ExpectedResult::Unresolved => AssistResolveStrategy::None,"}]}