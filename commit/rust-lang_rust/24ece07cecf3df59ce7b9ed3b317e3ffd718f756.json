{"sha": "24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWNlMDdjZWNmM2RmNTljZTdiOWVkM2IzMTdlM2ZmZDcxOGY3NTY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-05-04T08:39:11Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:07Z"}, "message": "Allow blocks in const expressions\n\nOnly blocks with tail expressions that are const expressions\nand items are allowed.", "tree": {"sha": "fb613b5174d8991cfb3a74b8d46bb76029f9d943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb613b5174d8991cfb3a74b8d46bb76029f9d943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "html_url": "https://github.com/rust-lang/rust/commit/24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbc31df4fc084b47a5c6456df2efb6e28b82a7da", "html_url": "https://github.com/rust-lang/rust/commit/cbc31df4fc084b47a5c6456df2efb6e28b82a7da"}], "stats": {"total": 291, "additions": 290, "deletions": 1}, "files": [{"sha": "7da56655378edf7e8d65b5a856143e4b50b33d0d", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -148,6 +148,33 @@ fn check_expr(v: &mut CheckCrateVisitor, e: &Expr, is_const: bool) {\n                 }\n             }\n           }\n+          ExprBlock(ref block) => {\n+            // Check all statements in the block\n+            for stmt in block.stmts.iter() {\n+                let block_span_err = |span|\n+                    v.tcx.sess.span_err(span,\n+                        \"blocks in constants are limited to \\\n+                        items and tail expressions\");\n+                match stmt.node {\n+                    StmtDecl(ref span, _) => {\n+                        match span.node {\n+                            DeclLocal(_) => block_span_err(span.span),\n+\n+                            // Item statements are allowed\n+                            DeclItem(_) => {}\n+                        }\n+                    }\n+                    StmtExpr(ref expr, _) => block_span_err(expr.span),\n+                    StmtSemi(ref semi, _) => block_span_err(semi.span),\n+                    StmtMac(..) => v.tcx.sess.span_bug(e.span,\n+                        \"unexpanded statement macro in const?!\")\n+                }\n+            }\n+            match block.expr {\n+                Some(ref expr) => check_expr(v, &**expr, true),\n+                None => {}\n+            }\n+          }\n           ExprVstore(_, ExprVstoreMutSlice) |\n           ExprVstore(_, ExprVstoreSlice) |\n           ExprVec(_) |"}, {"sha": "aa0b573eba8c819d7ad173a5d3bfa0c48f7cb08d", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -47,7 +47,6 @@ use std::rc::Rc;\n //        fixed-size vectors and strings: [] and \"\"/_\n //        vector and string slices: &[] and &\"\"\n //        tuples: (,)\n-//        records: {...}\n //        enums: foo(...)\n //        floating point literals and operators\n //        & and * pointers\n@@ -241,6 +240,13 @@ impl<'a> ConstEvalVisitor<'a> {\n \n             ast::ExprRepeat(..) => general_const,\n \n+            ast::ExprBlock(ref block) => {\n+                match block.expr {\n+                    Some(ref e) => self.classify(&**e),\n+                    None => integral_const\n+                }\n+            }\n+\n             _ => non_const\n         };\n         self.ccache.insert(did, cn);\n@@ -479,6 +485,12 @@ pub fn eval_const_expr_partial<T: ty::ExprTyProvider>(tcx: &T, e: &Expr)\n       // If we have a vstore, just keep going; it has to be a string\n       ExprVstore(e, _) => eval_const_expr_partial(tcx, e),\n       ExprParen(e)     => eval_const_expr_partial(tcx, e),\n+      ExprBlock(ref block) => {\n+        match block.expr {\n+            Some(ref expr) => eval_const_expr_partial(tcx, &**expr),\n+            None => Ok(const_int(0i64))\n+        }\n+      }\n       _ => Err(\"unsupported constant expr\".to_strbuf())\n     }\n }"}, {"sha": "3cfabf7f96b7f2ff75e5d2bdf23463cba26458f1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -1611,6 +1611,9 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n         }\n       }\n       ast::ItemStatic(_, m, expr) => {\n+          // Recurse on the expression to catch items in blocks\n+          let mut v = TransItemVisitor{ ccx: ccx };\n+          v.visit_expr(expr, ());\n           consts::trans_const(ccx, m, item.id);\n           // Do static_assert checking. It can't really be done much earlier\n           // because we need to get the value of the bool out of LLVM"}, {"sha": "b5ab0a391f3b176fa8dda9bdb39ede7c9d739910", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -672,6 +672,12 @@ fn const_expr_unadjusted(cx: &CrateContext, e: &ast::Expr,\n               }\n           }\n           ast::ExprParen(e) => { const_expr(cx, e, is_local) }\n+          ast::ExprBlock(ref block) => {\n+            match block.expr {\n+                Some(ref expr) => const_expr(cx, &**expr, is_local),\n+                None => (C_nil(cx), true)\n+            }\n+          }\n           _ => cx.sess().span_bug(e.span,\n                   \"bad constant expression type in consts::const_expr\")\n         };"}, {"sha": "68f4fd95626dcbd65d8a83c25ce4994c2f8876ed", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -3554,6 +3554,12 @@ pub fn check_const_with_ty(fcx: &FnCtxt,\n                            _: Span,\n                            e: &ast::Expr,\n                            declty: ty::t) {\n+    // Gather locals in statics (because of block expressions).\n+    // This is technically uneccessary because locals in static items are forbidden,\n+    // but prevents type checking from blowing up before const checking can properly\n+    // emit a error.\n+    GatherLocalsVisitor { fcx: fcx }.visit_expr(e, ());\n+\n     check_expr(fcx, e);\n     let cty = fcx.expr_ty(e);\n     demand::suptype(fcx, e.span, declty, cty);"}, {"sha": "a3bcbd201e199ef2f130f1bfdacdabdf300d055e", "filename": "src/test/auxiliary/cci_const_block.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Fauxiliary%2Fcci_const_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Fauxiliary%2Fcci_const_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_const_block.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub static BLOCK_FN_DEF: fn(uint) -> uint = {\n+    fn foo(a: uint) -> uint {\n+        a + 10\n+    }\n+    foo\n+};"}, {"sha": "ace917c704acb7d49922105eabd1929891bfb137", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+static A: uint = { 1; 2 };\n+//~^ ERROR: blocks in constants are limited to items and tail expressions\n+\n+static B: uint = { { } 2 };\n+//~^ ERROR: blocks in constants are limited to items and tail expressions\n+\n+macro_rules! foo {\n+    () => (()) //~ ERROR: blocks in constants are limited to items and tail expressions\n+}\n+static C: uint = { foo!() 2 };\n+\n+static D: uint = { let x = 4; 2 };\n+//~^ ERROR: blocks in constants are limited to items and tail expressions\n+\n+pub fn main() {\n+}"}, {"sha": "16360ff08d059af52a1be1772bd3d516a597c8f5", "filename": "src/test/run-pass/const-block-cross-crate-fn.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-cross-crate-fn.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:cci_const_block.rs\n+\n+extern crate cci_const_block;\n+\n+pub fn main() {\n+    assert_eq!(cci_const_block::BLOCK_FN_DEF(390), 400);\n+}"}, {"sha": "09f26b15734ff22a49a3cd9f09c65b16164b95b9", "filename": "src/test/run-pass/const-block-item-macro-codegen.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item-macro-codegen.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// General test that function items in static blocks\n+// can be generated with a macro.\n+\n+#![feature(macro_rules)]\n+\n+struct MyType {\n+    desc: &'static str,\n+    data: uint,\n+    code: fn(uint, uint) -> uint\n+}\n+\n+impl MyType {\n+    fn eval(&self, a: uint) -> uint {\n+        (self.code)(self.data, a)\n+    }\n+}\n+\n+macro_rules! codegen {\n+    ($e:expr, $v:expr) => {\n+        {\n+            fn generated(a: uint, b: uint) -> uint {\n+                a - ($e * b)\n+            }\n+            MyType {\n+                desc: \"test\",\n+                data: $v,\n+                code: generated\n+            }\n+        }\n+    }\n+}\n+\n+static GENERATED_CODE_1: MyType = codegen!(2, 100);\n+static GENERATED_CODE_2: MyType = codegen!(5, 1000);\n+\n+pub fn main() {\n+    assert_eq!(GENERATED_CODE_1.eval(10), 80);\n+    assert_eq!(GENERATED_CODE_2.eval(100), 500);\n+}"}, {"sha": "3365f09cd80ab901ab56d8320519bee71921707b", "filename": "src/test/run-pass/const-block-item.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block-item.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,56 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+mod foo {\n+    pub trait Value {\n+        fn value(&self) -> uint;\n+    }\n+}\n+\n+static BLOCK_USE: uint = {\n+    use foo::Value;\n+    100\n+};\n+\n+static BLOCK_PUB_USE: uint = {\n+    pub use foo::Value;\n+    200\n+};\n+\n+static BLOCK_STRUCT_DEF: uint = {\n+    struct Foo {\n+        a: uint\n+    }\n+    Foo{ a: 300 }.a\n+};\n+\n+static BLOCK_FN_DEF: fn(uint) -> uint = {\n+    fn foo(a: uint) -> uint {\n+        a + 10\n+    }\n+    foo\n+};\n+\n+static BLOCK_MACRO_RULES: uint = {\n+    macro_rules! baz {\n+        () => (412)\n+    }\n+    baz!()\n+};\n+\n+pub fn main() {\n+    assert_eq!(BLOCK_USE, 100);\n+    assert_eq!(BLOCK_PUB_USE, 200);\n+    assert_eq!(BLOCK_STRUCT_DEF, 300);\n+    assert_eq!(BLOCK_FN_DEF(390), 400);\n+    assert_eq!(BLOCK_MACRO_RULES, 412);\n+}"}, {"sha": "feac6e68e48ad0ca6b6eed4e342bf57a1a8c195f", "filename": "src/test/run-pass/const-block.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ece07cecf3df59ce7b9ed3b317e3ffd718f756/src%2Ftest%2Frun-pass%2Fconst-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-block.rs?ref=24ece07cecf3df59ce7b9ed3b317e3ffd718f756", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+#![allow(unused_unsafe)]\n+\n+struct Foo {\n+    a: uint,\n+    b: *()\n+}\n+\n+fn foo<T>(a: T) -> T {\n+    a\n+}\n+\n+static BLOCK_INTEGRAL: uint = { 1 };\n+static BLOCK_EXPLICIT_UNIT: () = { () };\n+static BLOCK_IMPLICIT_UNIT: () = { };\n+static BLOCK_FLOAT: f64 = { 1.0 };\n+static BLOCK_ENUM: Option<uint> = { Some(100) };\n+static BLOCK_STRUCT: Foo = { Foo { a: 12, b: 0 as *() } };\n+static BLOCK_UNSAFE: uint = unsafe { 1000 };\n+\n+// FIXME: #13970\n+// static BLOCK_FN_INFERRED: fn(uint) -> uint = { foo };\n+\n+// FIXME: #13971\n+// static BLOCK_FN: fn(uint) -> uint = { foo::<uint> };\n+\n+// FIXME: #13972\n+// static BLOCK_ENUM_CONSTRUCTOR: fn(uint) -> Option<uint> = { Some };\n+\n+// FIXME: #13973\n+// static BLOCK_UNSAFE_SAFE_PTR: &'static int = unsafe { &*(0xdeadbeef as *int) };\n+// static BLOCK_UNSAFE_SAFE_PTR_2: &'static int = unsafe {\n+//     static X: *int = 0xdeadbeef as *int;\n+//     &*X\n+// };\n+\n+pub fn main() {\n+    assert_eq!(BLOCK_INTEGRAL, 1);\n+    assert_eq!(BLOCK_EXPLICIT_UNIT, ());\n+    assert_eq!(BLOCK_IMPLICIT_UNIT, ());\n+    assert_eq!(BLOCK_FLOAT, 1.0_f64);\n+    assert_eq!(BLOCK_STRUCT.a, 12);\n+    assert_eq!(BLOCK_STRUCT.b, 0 as *());\n+    assert_eq!(BLOCK_ENUM, Some(100));\n+    assert_eq!(BLOCK_UNSAFE, 1000);\n+\n+    // FIXME: #13970\n+    // assert_eq!(BLOCK_FN_INFERRED(300), 300);\n+\n+    // FIXME: #13971\n+    // assert_eq!(BLOCK_FN(300), 300);\n+\n+    // FIXME: #13972\n+    // assert_eq!(BLOCK_ENUM_CONSTRUCTOR(200), Some(200));\n+\n+    // FIXME: #13973\n+    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR as *int as uint, 0xdeadbeef_u);\n+    // assert_eq!(BLOCK_UNSAFE_SAFE_PTR_2 as *int as uint, 0xdeadbeef_u);\n+}"}]}