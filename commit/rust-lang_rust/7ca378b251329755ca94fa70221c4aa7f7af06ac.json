{"sha": "7ca378b251329755ca94fa70221c4aa7f7af06ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTM3OGIyNTEzMjk3NTVjYTk0ZmE3MDIyMWM0YWE3ZjdhZjA2YWM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-06-23T21:56:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-07-17T21:12:48Z"}, "message": "Prohibit lifetime arguments in path segments with late bound lifetime parameters", "tree": {"sha": "0b837b5cb504d6f2cb3487bb5cc1228e989291c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b837b5cb504d6f2cb3487bb5cc1228e989291c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca378b251329755ca94fa70221c4aa7f7af06ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca378b251329755ca94fa70221c4aa7f7af06ac", "html_url": "https://github.com/rust-lang/rust/commit/7ca378b251329755ca94fa70221c4aa7f7af06ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca378b251329755ca94fa70221c4aa7f7af06ac/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9967e9e3e974872a311399a913e6a2d57a16b697", "url": "https://api.github.com/repos/rust-lang/rust/commits/9967e9e3e974872a311399a913e6a2d57a16b697", "html_url": "https://github.com/rust-lang/rust/commit/9967e9e3e974872a311399a913e6a2d57a16b697"}], "stats": {"total": 252, "additions": 202, "deletions": 50}, "files": [{"sha": "3e227872848efb36efcd10ac1cde8ef167f5787e", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -346,6 +346,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Ge\n             // `def_id.index` (`def_id.krate` is the same as the item's).\n             type_param_to_index: _, // Don't hash this\n             has_self,\n+            has_late_bound_regions,\n         } = *self;\n \n         parent.hash_stable(hcx, hasher);\n@@ -354,6 +355,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ty::Ge\n         regions.hash_stable(hcx, hasher);\n         types.hash_stable(hcx, hasher);\n         has_self.hash_stable(hcx, hasher);\n+        has_late_bound_regions.hash_stable(hcx, hasher);\n     }\n }\n "}, {"sha": "3e71ac539a3417f6b512a0bc34421255e4ef2fac", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -204,6 +204,12 @@ declare_lint! {\n     \"detects parenthesized generic parameters in type and module names\"\n }\n \n+declare_lint! {\n+    pub LATE_BOUND_LIFETIME_ARGUMENTS,\n+    Deny,\n+    \"detects generic lifetime arguments in path segments with late bound lifetime parameters\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -249,6 +255,7 @@ impl LintPass for HardwiredLints {\n             LEGACY_CONSTRUCTOR_VISIBILITY,\n             MISSING_FRAGMENT_SPECIFIER,\n             PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES,\n+            LATE_BOUND_LIFETIME_ARGUMENTS,\n             DEPRECATED\n         )\n     }"}, {"sha": "1fee0dd98634ae3af07784b751bb122348240322", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -719,6 +719,7 @@ pub struct Generics {\n     pub type_param_to_index: BTreeMap<DefIndex, u32>,\n \n     pub has_self: bool,\n+    pub has_late_bound_regions: bool,\n }\n \n impl Generics {"}, {"sha": "21dca7f6c61c413234671a38817e6aabba2c9231", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -235,7 +235,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         FutureIncompatibleInfo {\n             id: LintId::of(PARENTHESIZED_PARAMS_IN_TYPES_AND_MODULES),\n             reference: \"issue #42238 <https://github.com/rust-lang/rust/issues/42238>\",\n-        }\n+        },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(LATE_BOUND_LIFETIME_ARGUMENTS),\n+            reference: \"issue #42868 <https://github.com/rust-lang/rust/issues/42868>\",\n+        },\n         ]);\n \n     // Register renamed and removed lints"}, {"sha": "c28ddf876b3cda242b37a13ac25e5b8fe935c334", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -288,7 +288,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         // variables.\n         let method_generics = self.tcx.generics_of(pick.item.def_id);\n         let mut fn_segment = Some((segment, method_generics));\n-        self.fcx.check_path_parameter_count(self.span, &mut fn_segment);\n+        self.fcx.check_path_parameter_count(self.span, &mut fn_segment, true);\n \n         // Create subst for early-bound lifetime parameters, combining\n         // parameters from the type and those from the method."}, {"sha": "917bffbc22f00ae8271fcc254d821966125ac51e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 51, "deletions": 30, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -4491,8 +4491,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // variables. If the user provided some types, we may still need\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n-        self.check_path_parameter_count(span, &mut type_segment);\n-        self.check_path_parameter_count(span, &mut fn_segment);\n+        self.check_path_parameter_count(span, &mut type_segment, false);\n+        self.check_path_parameter_count(span, &mut fn_segment, false);\n \n         let (fn_start, has_self) = match (type_segment, fn_segment) {\n             (_, Some((_, generics))) => {\n@@ -4618,7 +4618,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     /// Report errors if the provided parameters are too few or too many.\n     fn check_path_parameter_count(&self,\n                                   span: Span,\n-                                  segment: &mut Option<(&hir::PathSegment, &ty::Generics)>) {\n+                                  segment: &mut Option<(&hir::PathSegment, &ty::Generics)>,\n+                                  is_method_call: bool) {\n         let (lifetimes, types, infer_types, bindings) = {\n             match segment.map(|(s, _)| &s.parameters) {\n                 Some(&hir::AngleBracketedParameters(ref data)) => {\n@@ -4632,6 +4633,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 None => (&[][..], &[][..], true, &[][..])\n             }\n         };\n+        let infer_lifetimes = lifetimes.len() == 0;\n \n         let count_lifetime_params = |n| {\n             format!(\"{} lifetime parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n@@ -4640,32 +4642,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             format!(\"{} type parameter{}\", n, if n == 1 { \"\" } else { \"s\" })\n         };\n \n-        // Check provided lifetime parameters.\n-        let lifetime_defs = segment.map_or(&[][..], |(_, generics)| &generics.regions);\n-        if lifetimes.len() > lifetime_defs.len() {\n-            let expected_text = count_lifetime_params(lifetime_defs.len());\n-            let actual_text = count_lifetime_params(lifetimes.len());\n-            struct_span_err!(self.tcx.sess, span, E0088,\n-                             \"too many lifetime parameters provided: \\\n-                              expected at most {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n-        } else if lifetimes.len() > 0 && lifetimes.len() < lifetime_defs.len() {\n-            let expected_text = count_lifetime_params(lifetime_defs.len());\n-            let actual_text = count_lifetime_params(lifetimes.len());\n-            struct_span_err!(self.tcx.sess, span, E0090,\n-                             \"too few lifetime parameters provided: \\\n-                              expected {}, found {}\",\n-                             expected_text, actual_text)\n-                .span_label(span, format!(\"expected {}\", expected_text))\n-                .emit();\n-        }\n-\n-        // The case where there is not enough lifetime parameters is not checked,\n-        // because this is not possible - a function never takes lifetime parameters.\n-        // See discussion for Pull Request 36208.\n-\n         // Check provided type parameters.\n         let type_defs = segment.map_or(&[][..], |(_, generics)| {\n             if generics.parent.is_none() {\n@@ -4690,7 +4666,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // type parameters, we force instantiate_value_path to\n             // use inference variables instead of the provided types.\n             *segment = None;\n-        } else if !infer_types && types.len() < required_len {\n+        } else if types.len() < required_len && !infer_types {\n             let expected_text = count_type_params(required_len);\n             let actual_text = count_type_params(types.len());\n             struct_span_err!(self.tcx.sess, span, E0089,\n@@ -4706,6 +4682,51 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                       \"unexpected binding of associated item in expression path \\\n                        (only allowed in type paths)\");\n         }\n+\n+        // Check provided lifetime parameters.\n+        let lifetime_defs = segment.map_or(&[][..], |(_, generics)| &generics.regions);\n+        let required_len = lifetime_defs.len();\n+\n+        // Prohibit explicit lifetime arguments if late bound lifetime parameters are present.\n+        let has_late_bound_lifetime_defs =\n+            segment.map_or(false, |(_, generics)| generics.has_late_bound_regions);\n+        if has_late_bound_lifetime_defs && !lifetimes.is_empty() {\n+            // Report this as a lint only if no error was reported previously.\n+            if !is_method_call && (lifetimes.len() > lifetime_defs.len() ||\n+                                   lifetimes.len() < required_len && !infer_lifetimes) {\n+                self.tcx.sess.span_err(lifetimes[0].span,\n+                                       \"cannot specify lifetime arguments explicitly \\\n+                                        if late bound lifetime parameters are present\");\n+            } else {\n+                self.tcx.sess.add_lint(lint::builtin::LATE_BOUND_LIFETIME_ARGUMENTS,\n+                                       lifetimes[0].id, lifetimes[0].span,\n+                                       format!(\"cannot specify lifetime arguments explicitly \\\n+                                                if late bound lifetime parameters are present\"));\n+            }\n+            *segment = None;\n+            return;\n+        }\n+\n+        if lifetimes.len() > lifetime_defs.len() {\n+            let span = lifetimes[lifetime_defs.len()].span;\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n+            struct_span_err!(self.tcx.sess, span, E0088,\n+                             \"too many lifetime parameters provided: \\\n+                              expected at most {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, format!(\"expected {}\", expected_text))\n+                .emit();\n+        } else if lifetimes.len() < required_len && !infer_lifetimes {\n+            let expected_text = count_lifetime_params(lifetime_defs.len());\n+            let actual_text = count_lifetime_params(lifetimes.len());\n+            struct_span_err!(self.tcx.sess, span, E0090,\n+                             \"too few lifetime parameters provided: \\\n+                              expected {}, found {}\",\n+                             expected_text, actual_text)\n+                .span_label(span, format!(\"expected {}\", expected_text))\n+                .emit();\n+        }\n     }\n \n     fn structurally_resolve_type_or_else<F>(&self, sp: Span, ty: Ty<'tcx>, f: F)"}, {"sha": "25707229dbc5af7f83c8ccefb9309d898a0e44e4", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -876,11 +876,13 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let has_self = opt_self.is_some();\n     let mut parent_has_self = false;\n+    let mut parent_has_late_bound_regions = false;\n     let mut own_start = has_self as u32;\n     let (parent_regions, parent_types) = parent_def_id.map_or((0, 0), |def_id| {\n         let generics = tcx.generics_of(def_id);\n         assert_eq!(has_self, false);\n         parent_has_self = generics.has_self;\n+        parent_has_late_bound_regions = generics.has_late_bound_regions;\n         own_start = generics.count() as u32;\n         (generics.parent_regions + generics.regions.len() as u32,\n             generics.parent_types + generics.types.len() as u32)\n@@ -898,6 +900,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }).collect::<Vec<_>>();\n \n+    let has_late_bound_regions = regions.len() != ast_generics.lifetimes.len();\n     let object_lifetime_defaults =\n         tcx.named_region_map.object_lifetime_defaults.get(&node_id);\n \n@@ -959,7 +962,8 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         regions: regions,\n         types: types,\n         type_param_to_index: type_param_to_index,\n-        has_self: has_self || parent_has_self\n+        has_self: has_self || parent_has_self,\n+        has_late_bound_regions: has_late_bound_regions || parent_has_late_bound_regions,\n     })\n }\n "}, {"sha": "db84a4edc487c98914f839dd8e9f92415f2d8a65", "filename": "src/test/compile-fail/E0088.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2FE0088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2FE0088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0088.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -9,14 +9,9 @@\n // except according to those terms.\n \n fn f() {}\n-fn g<'a>() {}\n+fn g<'a>() -> &'a u8 { loop {} }\n \n fn main() {\n-    f::<'static>();\n-    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter [E0088]\n-    //~| NOTE expected 0 lifetime parameters\n-\n-    g::<'static, 'static>();\n-    //~^ ERROR expected at most 0 lifetime parameters, found 2 lifetime parameters [E0088]\n-    //~| NOTE expected 0 lifetime parameters\n+    f::<'static>(); //~ ERROR E0088\n+    g::<'static, 'static>(); //~ ERROR E0088\n }"}, {"sha": "28f1035cad7e08b5c8fd60a176e6fa59382096fc", "filename": "src/test/compile-fail/method-call-lifetime-args-lint.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args-lint.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(unused)]\n+\n+struct S;\n+\n+impl S {\n+    fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    fn late_implicit(self, _: &u8, _: &u8) {}\n+    fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n+    fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n+}\n+\n+fn method_call() {\n+    S.late(&0, &0); // OK\n+    S.late::<'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late::<'static, 'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late::<'static, 'static, 'static>(&0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_early(&0); // OK\n+    S.late_early::<'static>(&0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_early::<'static, 'static>(&0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+    S.late_early::<'static, 'static, 'static>(&0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+\n+    S.late_implicit(&0, &0); // OK\n+    // S.late_implicit::<'static>(&0, &0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+    // S.late_implicit::<'static, 'static>(&0, &0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+    // S.late_implicit::<'static, 'static, 'static>(&0, &0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+    S.late_implicit_early(&0); // OK\n+    S.late_implicit_early::<'static>(&0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+    // S.late_implicit_early::<'static, 'static>(&0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+    // S.late_implicit_early::<'static, 'static, 'static>(&0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+}\n+\n+fn ufcs() {\n+    S::late_early::<'static>(S, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    //~| WARN this was previously accepted\n+\n+    S::late_implicit_early::<'static>(S, &0);\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    //FIXME WARN this was previously accepted\n+}\n+\n+fn main() {}"}, {"sha": "00c03c3c8599a72394eb77655618db977ecfced5", "filename": "src/test/compile-fail/method-call-lifetime-args.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-call-lifetime-args.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -12,16 +12,14 @@ struct S;\n \n impl S {\n     fn late<'a, 'b>(self, _: &'a u8, _: &'b u8) {}\n+    fn late_implicit(self, _: &u8, _: &u8) {}\n     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n-    fn life_and_type<'a, T>(&self) -> &'a T { loop {} }\n+    fn late_early<'a, 'b>(self, _: &'a u8) -> &'b u8 { loop {} }\n+    fn late_implicit_early<'b>(self, _: &u8) -> &'b u8 { loop {} }\n+    fn life_and_type<'a, T>(self) -> &'a T { loop {} }\n }\n \n-fn main() {\n-    S.late(&0, &0); // OK\n-    S.late::<'static>(&0, &0);\n-    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter\n-    S.late::<'static, 'static, 'static>(&0, &0);\n-    //~^ ERROR expected at most 0 lifetime parameters, found 3 lifetime parameter\n+fn method_call() {\n     S.early(); // OK\n     S.early::<'static>();\n     //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n@@ -31,3 +29,47 @@ fn main() {\n     S.life_and_type::<u8>();\n     S.life_and_type::<'static, u8>();\n }\n+\n+fn ufcs() {\n+    S::late(S, &0, &0); // OK\n+    S::late::<'static>(S, &0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late::<'static, 'static>(S, &0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late::<'static, 'static, 'static>(S, &0, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_early(S, &0); // OK\n+    S::late_early::<'static, 'static>(S, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+    S::late_early::<'static, 'static, 'static>(S, &0);\n+    //~^ ERROR cannot specify lifetime arguments explicitly\n+\n+    S::late_implicit(S, &0, &0); // OK\n+    S::late_implicit::<'static>(S, &0, &0);\n+    //~^ ERROR expected at most 0 lifetime parameters, found 1 lifetime parameter\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit::<'static, 'static>(S, &0, &0);\n+    //~^ ERROR expected at most 0 lifetime parameters, found 2 lifetime parameters\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit::<'static, 'static, 'static>(S, &0, &0);\n+    //~^ ERROR expected at most 0 lifetime parameters, found 3 lifetime parameters\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit_early(S, &0); // OK\n+    S::late_implicit_early::<'static, 'static>(S, &0);\n+    //~^ ERROR expected at most 1 lifetime parameter, found 2 lifetime parameters\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+    S::late_implicit_early::<'static, 'static, 'static>(S, &0);\n+    //~^ ERROR expected at most 1 lifetime parameter, found 3 lifetime parameters\n+    //FIXME ERROR cannot specify lifetime arguments explicitly\n+\n+    S::early(S); // OK\n+    S::early::<'static>(S);\n+    //~^ ERROR expected 2 lifetime parameters, found 1 lifetime parameter\n+    S::early::<'static, 'static, 'static>(S);\n+    //~^ ERROR expected at most 2 lifetime parameters, found 3 lifetime parameters\n+    let _: &u8 = S::life_and_type::<'static>(S);\n+    S::life_and_type::<u8>(S);\n+    S::life_and_type::<'static, u8>(S);\n+}\n+\n+fn main() {}"}, {"sha": "370e07ba6c9e9f9f1897bf82fefab17bff63995b", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -369,7 +369,7 @@ impl Foo {\n impl Foo {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")] // Apparently unused lifetimes don't show up in the type.\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n }"}, {"sha": "44950ee8a601f90865698e22d955bc9a07344bf5", "filename": "src/test/incremental/hashes/trait_defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca378b251329755ca94fa70221c4aa7f7af06ac/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftrait_defs.rs?ref=7ca378b251329755ca94fa70221c4aa7f7af06ac", "patch": "@@ -448,7 +448,7 @@ trait TraitAddLifetimeParameterToMethod {\n trait TraitAddLifetimeParameterToMethod {\n     #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n     #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_metadata_clean(cfg=\"cfail2\")] // Unused lifetimes don't seem to show up in type?\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method<'a>();\n }"}]}