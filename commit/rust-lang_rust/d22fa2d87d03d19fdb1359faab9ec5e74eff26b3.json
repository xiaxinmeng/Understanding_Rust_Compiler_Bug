{"sha": "d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMmZhMmQ4N2QwM2QxOWZkYjEzNTlmYWFiOWVjNWU3NGVmZjI2YjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-08T19:33:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-01-08T19:33:20Z"}, "message": "Auto merge of #56638 - matthewjasper:remove-ref-region, r=nikomatsakis\n\nRemove some `Region`s from HAIR\n\nUse `ReErased` for any regions that need to be created in RValue::Ref\nin MIR generation. We will change them to all to `ReVar` before borrow\nchecking anyway.\n\nr? @nikomatsakis", "tree": {"sha": "78920aa48e5255b23faefe298d1be04cde6b0f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78920aa48e5255b23faefe298d1be04cde6b0f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "html_url": "https://github.com/rust-lang/rust/commit/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cb7cdcb3681c131cd2e2472c6fa9b42194b85b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb7cdcb3681c131cd2e2472c6fa9b42194b85b5", "html_url": "https://github.com/rust-lang/rust/commit/2cb7cdcb3681c131cd2e2472c6fa9b42194b85b5"}, {"sha": "4f3c469ad02fa0308d5c75155635429695d55560", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3c469ad02fa0308d5c75155635429695d55560", "html_url": "https://github.com/rust-lang/rust/commit/4f3c469ad02fa0308d5c75155635429695d55560"}], "stats": {"total": 89, "additions": 34, "deletions": 55}, "files": [{"sha": "e0fc90931696e57851889e5f8286f9d083d711a6", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -67,15 +67,14 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 block.and(Rvalue::Repeat(value_operand, count))\n             }\n             ExprKind::Borrow {\n-                region,\n                 borrow_kind,\n                 arg,\n             } => {\n                 let arg_place = match borrow_kind {\n                     BorrowKind::Shared => unpack!(block = this.as_read_only_place(block, arg)),\n                     _ => unpack!(block = this.as_place(block, arg)),\n                 };\n-                block.and(Rvalue::Ref(region, borrow_kind, arg_place))\n+                block.and(Rvalue::Ref(this.hir.tcx().types.re_erased, borrow_kind, arg_place))\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(block = this.as_operand(block, scope, lhs));\n@@ -249,11 +248,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                             BorrowKind::Mut {\n                                                 allow_two_phase_borrow: false,\n                                             },\n-                                        region,\n                                         arg,\n                                     } => unpack!(\n                                         block = this.limit_capture_mutability(\n-                                            upvar.span, upvar.ty, scope, block, arg, region,\n+                                            upvar.span, upvar.ty, scope, block, arg,\n                                         )\n                                     ),\n                                     _ => unpack!(block = this.as_operand(block, scope, upvar)),\n@@ -500,7 +498,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         temp_lifetime: Option<region::Scope>,\n         mut block: BasicBlock,\n         arg: ExprRef<'tcx>,\n-        region: &'tcx ty::RegionKind,\n     ) -> BlockAnd<Operand<'tcx>> {\n         let this = self;\n \n@@ -582,7 +579,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             block,\n             source_info,\n             &Place::Local(temp),\n-            Rvalue::Ref(region, borrow_kind, arg_place),\n+            Rvalue::Ref(this.hir.tcx().types.re_erased, borrow_kind, arg_place),\n         );\n \n         // In constants, temp_lifetime is None. We should not need to drop"}, {"sha": "d52ce9a67d29a87dd4a35dfb68c7260dfb716e41", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -640,7 +640,7 @@ struct Binding<'tcx> {\n     var_id: NodeId,\n     var_ty: Ty<'tcx>,\n     mutability: Mutability,\n-    binding_mode: BindingMode<'tcx>,\n+    binding_mode: BindingMode,\n }\n \n /// Indicates that the type of `source` must be a subtype of the\n@@ -1369,7 +1369,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         // Assign each of the bindings. Since we are binding for a\n         // guard expression, this will never trigger moves out of the\n         // candidate.\n-        let re_empty = self.hir.tcx().types.re_empty;\n+        let re_erased = self.hir.tcx().types.re_erased;\n         for binding in bindings {\n             let source_info = self.source_info(binding.span);\n \n@@ -1385,11 +1385,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             self.schedule_drop_for_binding(binding.var_id, binding.span, RefWithinGuard);\n             match binding.binding_mode {\n                 BindingMode::ByValue => {\n-                    let rvalue = Rvalue::Ref(re_empty, BorrowKind::Shared, binding.source.clone());\n+                    let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, binding.source.clone());\n                     self.cfg\n                         .push_assign(block, source_info, &ref_for_guard, rvalue);\n                 }\n-                BindingMode::ByRef(region, borrow_kind) => {\n+                BindingMode::ByRef(borrow_kind) => {\n                     // Tricky business: For `ref id` and `ref mut id`\n                     // patterns, we want `id` within the guard to\n                     // correspond to a temp of type `& &T` or `& &mut\n@@ -1429,10 +1429,10 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             allow_two_phase_borrow: true,\n                         },\n                     };\n-                    let rvalue = Rvalue::Ref(region, borrow_kind, binding.source.clone());\n+                    let rvalue = Rvalue::Ref(re_erased, borrow_kind, binding.source.clone());\n                     self.cfg\n                         .push_assign(block, source_info, &val_for_guard, rvalue);\n-                    let rvalue = Rvalue::Ref(region, BorrowKind::Shared, val_for_guard);\n+                    let rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, val_for_guard);\n                     self.cfg\n                         .push_assign(block, source_info, &ref_for_guard, rvalue);\n                 }\n@@ -1450,6 +1450,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             block, bindings\n         );\n \n+\n+        let re_erased = self.hir.tcx().types.re_erased;\n         // Assign each of the bindings. This may trigger moves out of the candidate.\n         for binding in bindings {\n             let source_info = self.source_info(binding.span);\n@@ -1460,8 +1462,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 BindingMode::ByValue => {\n                     Rvalue::Use(self.consume_by_copy_or_move(binding.source.clone()))\n                 }\n-                BindingMode::ByRef(region, borrow_kind) => {\n-                    Rvalue::Ref(region, borrow_kind, binding.source.clone())\n+                BindingMode::ByRef(borrow_kind) => {\n+                    Rvalue::Ref(re_erased, borrow_kind, binding.source.clone())\n                 }\n             };\n             self.cfg.push_assign(block, source_info, &local, rvalue);\n@@ -1507,7 +1509,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let tcx = self.hir.tcx();\n         let binding_mode = match mode {\n             BindingMode::ByValue => ty::BindingMode::BindByValue(mutability.into()),\n-            BindingMode::ByRef { .. } => ty::BindingMode::BindByReference(mutability.into()),\n+            BindingMode::ByRef(_) => ty::BindingMode::BindByReference(mutability.into()),\n         };\n         debug!(\"declare_binding: user_ty={:?}\", user_ty);\n         let local = LocalDecl::<'tcx> {\n@@ -1545,7 +1547,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             let ref_for_guard = self.local_decls.push(LocalDecl::<'tcx> {\n                 // See previous comment.\n                 mutability: Mutability::Not,\n-                ty: tcx.mk_imm_ref(tcx.types.re_empty, var_ty),\n+                ty: tcx.mk_imm_ref(tcx.types.re_erased, var_ty),\n                 user_ty: UserTypeProjections::none(),\n                 name: Some(name),\n                 source_info,\n@@ -1614,7 +1616,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         for (matched_place, borrow_kind) in all_fake_borrows {\n             let borrowed_input =\n-                Rvalue::Ref(tcx.types.re_empty, borrow_kind, matched_place.clone());\n+                Rvalue::Ref(tcx.types.re_erased, borrow_kind, matched_place.clone());\n             let borrowed_input_ty = borrowed_input.ty(&self.local_decls, tcx);\n             let borrowed_input_temp = self.temp(borrowed_input_ty, source_info.span);\n             self.cfg.push_assign("}, {"sha": "696c173b048ad282227269634a70847bd5a5ac19", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -304,17 +304,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n                     let method = self.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(method));\n \n+                    let re_erased = self.hir.tcx().types.re_erased;\n                     // take the argument by reference\n-                    let region_scope = self.topmost_scope();\n-                    let region = self.hir.tcx().mk_region(ty::ReScope(region_scope));\n                     let tam = ty::TypeAndMut {\n                         ty,\n                         mutbl: Mutability::MutImmutable,\n                     };\n-                    let ref_ty = self.hir.tcx().mk_ref(region, tam);\n+                    let ref_ty = self.hir.tcx().mk_ref(re_erased, tam);\n \n                     // let lhs_ref_place = &lhs;\n-                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, place);\n+                    let ref_rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, place);\n                     let lhs_ref_place = self.temp(ref_ty, test.span);\n                     self.cfg.push_assign(block, source_info, &lhs_ref_place, ref_rvalue);\n                     let val = Operand::Move(lhs_ref_place);\n@@ -324,7 +323,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     self.cfg.push_assign(block, source_info, &rhs_place, Rvalue::Use(expect));\n \n                     // let rhs_ref_place = &rhs_place;\n-                    let ref_rvalue = Rvalue::Ref(region, BorrowKind::Shared, rhs_place);\n+                    let ref_rvalue = Rvalue::Ref(re_erased, BorrowKind::Shared, rhs_place);\n                     let rhs_ref_place = self.temp(ref_ty, test.span);\n                     self.cfg.push_assign(block, source_info, &rhs_ref_place, ref_rvalue);\n                     let expect = Operand::Move(rhs_ref_place);"}, {"sha": "eb536fbcf69bb9683484cc2c2a862a22c5109415", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -124,40 +124,31 @@ fn apply_adjustment<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                   }),\n                 span,\n                 kind: ExprKind::Borrow {\n-                    region: deref.region,\n                     borrow_kind: deref.mutbl.to_borrow_kind(),\n                     arg: expr.to_ref(),\n                 },\n             };\n \n             overloaded_place(cx, hir_expr, adjustment.target, Some(call), vec![expr.to_ref()])\n         }\n-        Adjust::Borrow(AutoBorrow::Ref(r, m)) => {\n+        Adjust::Borrow(AutoBorrow::Ref(_, m)) => {\n             ExprKind::Borrow {\n-                region: r,\n                 borrow_kind: m.to_borrow_kind(),\n                 arg: expr.to_ref(),\n             }\n         }\n         Adjust::Borrow(AutoBorrow::RawPtr(m)) => {\n             // Convert this to a suitable `&foo` and\n-            // then an unsafe coercion. Limit the region to be just this\n-            // expression.\n-            let region = ty::ReScope(region::Scope {\n-                id: hir_expr.hir_id.local_id,\n-                data: region::ScopeData::Node\n-            });\n-            let region = cx.tcx.mk_region(region);\n+            // then an unsafe coercion.\n             expr = Expr {\n                 temp_lifetime,\n-                ty: cx.tcx.mk_ref(region,\n+                ty: cx.tcx.mk_ref(cx.tcx.types.re_erased,\n                                   ty::TypeAndMut {\n                                     ty: expr.ty,\n                                     mutbl: m,\n                                   }),\n                 span,\n                 kind: ExprKind::Borrow {\n-                    region,\n                     borrow_kind: m.to_borrow_kind(),\n                     arg: expr.to_ref(),\n                 },\n@@ -323,12 +314,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n \n         hir::ExprKind::AddrOf(mutbl, ref expr) => {\n-            let region = match expr_ty.sty {\n-                ty::Ref(r, _, _) => r,\n-                _ => span_bug!(expr.span, \"type of & not region\"),\n-            };\n             ExprKind::Borrow {\n-                region,\n                 borrow_kind: mutbl.to_borrow_kind(),\n                 arg: expr.to_ref(),\n             }\n@@ -1222,7 +1208,6 @@ fn capture_freevar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 ty: freevar_ty,\n                 span: closure_expr.span,\n                 kind: ExprKind::Borrow {\n-                    region: upvar_borrow.region,\n                     borrow_kind,\n                     arg: captured_var.to_ref(),\n                 },"}, {"sha": "e902423cd30fc5170192e92a80cbc5ebb40a31a0", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty, Const, LazyConst, UserTypeAnnotation};\n+use rustc::ty::{AdtDef, UpvarSubsts, Ty, Const, LazyConst, UserTypeAnnotation};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n use syntax::ast;\n@@ -235,7 +235,6 @@ pub enum ExprKind<'tcx> {\n         id: DefId,\n     },\n     Borrow {\n-        region: Region<'tcx>,\n         borrow_kind: BorrowKind,\n         arg: ExprRef<'tcx>,\n     },"}, {"sha": "8991a90737c7ed775a1a66a7081a966f88bc408b", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "patch": "@@ -39,9 +39,9 @@ pub enum PatternError {\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum BindingMode<'tcx> {\n+pub enum BindingMode {\n     ByValue,\n-    ByRef(Region<'tcx>, BorrowKind),\n+    ByRef(BorrowKind),\n }\n \n #[derive(Clone, Debug)]\n@@ -117,7 +117,7 @@ pub enum PatternKind<'tcx> {\n     Binding {\n         mutability: Mutability,\n         name: ast::Name,\n-        mode: BindingMode<'tcx>,\n+        mode: BindingMode,\n         var: ast::NodeId,\n         ty: Ty<'tcx>,\n         subpattern: Option<Pattern<'tcx>>,\n@@ -181,7 +181,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             PatternKind::Binding { mutability, name, mode, ref subpattern, .. } => {\n                 let is_mut = match mode {\n                     BindingMode::ByValue => mutability == Mutability::Mut,\n-                    BindingMode::ByRef(_, bk) => {\n+                    BindingMode::ByRef(bk) => {\n                         write!(f, \"ref \")?;\n                         match bk { BorrowKind::Mut { .. } => true, _ => false }\n                     }\n@@ -512,12 +512,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             PatKind::Binding(_, id, ident, ref sub) => {\n                 let var_ty = self.tables.node_id_to_type(pat.hir_id);\n-                let region = match var_ty.sty {\n-                    ty::Ref(r, _, _) => Some(r),\n-                    ty::Error => { // Avoid ICE\n-                        return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n-                    }\n-                    _ => None,\n+                if let ty::Error = var_ty.sty {\n+                    // Avoid ICE\n+                    return Pattern { span: pat.span, ty, kind: Box::new(PatternKind::Wild) };\n                 };\n                 let bm = *self.tables.pat_binding_modes().get(pat.hir_id)\n                                                          .expect(\"missing binding mode\");\n@@ -528,10 +525,10 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         (Mutability::Not, BindingMode::ByValue),\n                     ty::BindByReference(hir::MutMutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n-                            region.unwrap(), BorrowKind::Mut { allow_two_phase_borrow: false })),\n+                            BorrowKind::Mut { allow_two_phase_borrow: false })),\n                     ty::BindByReference(hir::MutImmutable) =>\n                         (Mutability::Not, BindingMode::ByRef(\n-                            region.unwrap(), BorrowKind::Shared)),\n+                            BorrowKind::Shared)),\n                 };\n \n                 // A ref x pattern is the same node used for x, and as such it has\n@@ -1042,7 +1039,7 @@ macro_rules! CloneImpls {\n \n CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, ast::NodeId, usize, ty::Const<'tcx>,\n-    Region<'tcx>, Ty<'tcx>, BindingMode<'tcx>, &'tcx AdtDef,\n+    Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n     &'tcx Substs<'tcx>, &'tcx Kind<'tcx>, UserTypeAnnotation<'tcx>,\n     UserTypeProjection<'tcx>, PatternTypeProjection<'tcx>\n }"}]}