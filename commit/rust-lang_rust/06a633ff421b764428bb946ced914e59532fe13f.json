{"sha": "06a633ff421b764428bb946ced914e59532fe13f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YTYzM2ZmNDIxYjc2NDQyOGJiOTQ2Y2VkOTE0ZTU5NTMyZmUxM2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-13T08:48:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-04-13T09:09:04Z"}, "message": "feat: improve performance by delaying computation of fixes for diagnostics", "tree": {"sha": "d608b8a7edd630a8b028c117c615ece9a48c4186", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d608b8a7edd630a8b028c117c615ece9a48c4186"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06a633ff421b764428bb946ced914e59532fe13f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06a633ff421b764428bb946ced914e59532fe13f", "html_url": "https://github.com/rust-lang/rust/commit/06a633ff421b764428bb946ced914e59532fe13f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06a633ff421b764428bb946ced914e59532fe13f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "url": "https://api.github.com/repos/rust-lang/rust/commits/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313", "html_url": "https://github.com/rust-lang/rust/commit/04b5fcfdb28f18f4d5279b43c2bb2b3f9c082313"}], "stats": {"total": 114, "additions": 74, "deletions": 40}, "files": [{"sha": "9a883acb98e42cd2d53ec7448f8d75b5de313ba6", "filename": "crates/ide/src/diagnostics.rs", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -84,6 +84,7 @@ pub struct DiagnosticsConfig {\n pub(crate) fn diagnostics(\n     db: &RootDatabase,\n     config: &DiagnosticsConfig,\n+    resolve: bool,\n     file_id: FileId,\n ) -> Vec<Diagnostic> {\n     let _p = profile::span(\"diagnostics\");\n@@ -107,25 +108,25 @@ pub(crate) fn diagnostics(\n     let res = RefCell::new(res);\n     let sink_builder = DiagnosticSinkBuilder::new()\n         .on::<hir::diagnostics::UnresolvedModule, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::MissingFields, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::MissingOkOrSomeInTailExpr, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::NoSuchField, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::RemoveThisSemicolon, _>(|d| {\n-            res.borrow_mut().push(diagnostic_with_fix(d, &sema));\n+            res.borrow_mut().push(diagnostic_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::IncorrectCase, _>(|d| {\n-            res.borrow_mut().push(warning_with_fix(d, &sema));\n+            res.borrow_mut().push(warning_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::ReplaceFilterMapNextWithFindMap, _>(|d| {\n-            res.borrow_mut().push(warning_with_fix(d, &sema));\n+            res.borrow_mut().push(warning_with_fix(d, &sema, resolve));\n         })\n         .on::<hir::diagnostics::InactiveCode, _>(|d| {\n             // If there's inactive code somewhere in a macro, don't propagate to the call-site.\n@@ -152,7 +153,7 @@ pub(crate) fn diagnostics(\n             // Override severity and mark as unused.\n             res.borrow_mut().push(\n                 Diagnostic::hint(range, d.message())\n-                    .with_fix(d.fix(&sema))\n+                    .with_fix(d.fix(&sema, resolve))\n                     .with_code(Some(d.code())),\n             );\n         })\n@@ -208,15 +209,23 @@ pub(crate) fn diagnostics(\n     res.into_inner()\n }\n \n-fn diagnostic_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n+fn diagnostic_with_fix<D: DiagnosticWithFix>(\n+    d: &D,\n+    sema: &Semantics<RootDatabase>,\n+    resolve: bool,\n+) -> Diagnostic {\n     Diagnostic::error(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fix(d.fix(&sema))\n+        .with_fix(d.fix(&sema, resolve))\n         .with_code(Some(d.code()))\n }\n \n-fn warning_with_fix<D: DiagnosticWithFix>(d: &D, sema: &Semantics<RootDatabase>) -> Diagnostic {\n+fn warning_with_fix<D: DiagnosticWithFix>(\n+    d: &D,\n+    sema: &Semantics<RootDatabase>,\n+    resolve: bool,\n+) -> Diagnostic {\n     Diagnostic::hint(sema.diagnostics_display_range(d.display_source()).range, d.message())\n-        .with_fix(d.fix(&sema))\n+        .with_fix(d.fix(&sema, resolve))\n         .with_code(Some(d.code()))\n }\n \n@@ -271,13 +280,19 @@ fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n }\n \n fn fix(id: &'static str, label: &str, source_change: SourceChange, target: TextRange) -> Assist {\n+    let mut res = unresolved_fix(id, label, target);\n+    res.source_change = Some(source_change);\n+    res\n+}\n+\n+fn unresolved_fix(id: &'static str, label: &str, target: TextRange) -> Assist {\n     assert!(!id.contains(' '));\n     Assist {\n         id: AssistId(id, AssistKind::QuickFix),\n         label: Label::new(label),\n         group: None,\n         target,\n-        source_change: Some(source_change),\n+        source_change: None,\n     }\n }\n \n@@ -299,7 +314,7 @@ mod tests {\n \n         let (analysis, file_position) = fixture::position(ra_fixture_before);\n         let diagnostic = analysis\n-            .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n+            .diagnostics(&DiagnosticsConfig::default(), true, file_position.file_id)\n             .unwrap()\n             .pop()\n             .unwrap();\n@@ -328,7 +343,7 @@ mod tests {\n     fn check_no_fix(ra_fixture: &str) {\n         let (analysis, file_position) = fixture::position(ra_fixture);\n         let diagnostic = analysis\n-            .diagnostics(&DiagnosticsConfig::default(), file_position.file_id)\n+            .diagnostics(&DiagnosticsConfig::default(), true, file_position.file_id)\n             .unwrap()\n             .pop()\n             .unwrap();\n@@ -342,15 +357,16 @@ mod tests {\n         let diagnostics = files\n             .into_iter()\n             .flat_map(|file_id| {\n-                analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n+                analysis.diagnostics(&DiagnosticsConfig::default(), true, file_id).unwrap()\n             })\n             .collect::<Vec<_>>();\n         assert_eq!(diagnostics.len(), 0, \"unexpected diagnostics:\\n{:#?}\", diagnostics);\n     }\n \n     fn check_expect(ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n-        let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n+        let diagnostics =\n+            analysis.diagnostics(&DiagnosticsConfig::default(), true, file_id).unwrap();\n         expect.assert_debug_eq(&diagnostics)\n     }\n \n@@ -895,10 +911,11 @@ struct Foo {\n \n         let (analysis, file_id) = fixture::file(r#\"mod foo;\"#);\n \n-        let diagnostics = analysis.diagnostics(&config, file_id).unwrap();\n+        let diagnostics = analysis.diagnostics(&config, true, file_id).unwrap();\n         assert!(diagnostics.is_empty());\n \n-        let diagnostics = analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap();\n+        let diagnostics =\n+            analysis.diagnostics(&DiagnosticsConfig::default(), true, file_id).unwrap();\n         assert!(!diagnostics.is_empty());\n     }\n \n@@ -1004,8 +1021,9 @@ impl TestStruct {\n         let expected = r#\"fn foo() {}\"#;\n \n         let (analysis, file_position) = fixture::position(input);\n-        let diagnostics =\n-            analysis.diagnostics(&DiagnosticsConfig::default(), file_position.file_id).unwrap();\n+        let diagnostics = analysis\n+            .diagnostics(&DiagnosticsConfig::default(), true, file_position.file_id)\n+            .unwrap();\n         assert_eq!(diagnostics.len(), 1);\n \n         check_fix(input, expected);"}, {"sha": "7be8b3459306e6853ed79d38a41d31e4ec280211", "filename": "crates/ide/src/diagnostics/fixes.rs", "status": "modified", "additions": 25, "deletions": 13, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Ffixes.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -20,17 +20,26 @@ use syntax::{\n };\n use text_edit::TextEdit;\n \n-use crate::{diagnostics::fix, references::rename::rename_with_semantics, Assist, FilePosition};\n+use crate::{\n+    diagnostics::{fix, unresolved_fix},\n+    references::rename::rename_with_semantics,\n+    Assist, FilePosition,\n+};\n \n /// A [Diagnostic] that potentially has a fix available.\n ///\n /// [Diagnostic]: hir::diagnostics::Diagnostic\n pub(crate) trait DiagnosticWithFix: Diagnostic {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist>;\n+    /// `resolve` determines if the diagnostic should fill in the `edit` field\n+    /// of the assist.\n+    ///\n+    /// If `resolve` is false, the edit will be computed later, on demand, and\n+    /// can be omitted.\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist>;\n }\n \n impl DiagnosticWithFix for UnresolvedModule {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let unresolved_module = self.decl.to_node(&root);\n         Some(fix(\n@@ -50,7 +59,7 @@ impl DiagnosticWithFix for UnresolvedModule {\n }\n \n impl DiagnosticWithFix for NoSuchField {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         missing_record_expr_field_fix(\n             &sema,\n@@ -61,7 +70,7 @@ impl DiagnosticWithFix for NoSuchField {\n }\n \n impl DiagnosticWithFix for MissingFields {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         // Note that although we could add a diagnostics to\n         // fill the missing tuple field, e.g :\n         // `struct A(usize);`\n@@ -97,7 +106,7 @@ impl DiagnosticWithFix for MissingFields {\n }\n \n impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let tail_expr = self.expr.to_node(&root);\n         let tail_expr_range = tail_expr.syntax().text_range();\n@@ -110,7 +119,7 @@ impl DiagnosticWithFix for MissingOkOrSomeInTailExpr {\n }\n \n impl DiagnosticWithFix for RemoveThisSemicolon {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n \n         let semicolon = self\n@@ -130,24 +139,27 @@ impl DiagnosticWithFix for RemoveThisSemicolon {\n }\n \n impl DiagnosticWithFix for IncorrectCase {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let name_node = self.ident.to_node(&root);\n \n         let name_node = InFile::new(self.file, name_node.syntax());\n         let frange = name_node.original_file_range(sema.db);\n         let file_position = FilePosition { file_id: frange.file_id, offset: frange.range.start() };\n \n-        let rename_changes =\n-            rename_with_semantics(sema, file_position, &self.suggested_text).ok()?;\n-\n         let label = format!(\"Rename to {}\", self.suggested_text);\n-        Some(fix(\"change_case\", &label, rename_changes, frange.range))\n+        let mut res = unresolved_fix(\"change_case\", &label, frange.range);\n+        if resolve {\n+            let source_change = rename_with_semantics(sema, file_position, &self.suggested_text);\n+            res.source_change = Some(source_change.ok().unwrap_or_default());\n+        }\n+\n+        Some(res)\n     }\n }\n \n impl DiagnosticWithFix for ReplaceFilterMapNextWithFindMap {\n-    fn fix(&self, sema: &Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         let root = sema.db.parse_or_expand(self.file)?;\n         let next_expr = self.next_expr.to_node(&root);\n         let next_call = ast::MethodCallExpr::cast(next_expr.syntax().clone())?;"}, {"sha": "7d39f4fbe4072ae05fb2e431ac51d9aaea3b4d3e", "filename": "crates/ide/src/diagnostics/unlinked_file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdiagnostics%2Funlinked_file.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -50,7 +50,7 @@ impl Diagnostic for UnlinkedFile {\n }\n \n impl DiagnosticWithFix for UnlinkedFile {\n-    fn fix(&self, sema: &hir::Semantics<RootDatabase>) -> Option<Assist> {\n+    fn fix(&self, sema: &hir::Semantics<RootDatabase>, _resolve: bool) -> Option<Assist> {\n         // If there's an existing module that could add a `mod` item to include the unlinked file,\n         // suggest that as a fix.\n "}, {"sha": "d481be09dbef23b2d3edf469f64acffd39ed2157", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -526,9 +526,10 @@ impl Analysis {\n     pub fn diagnostics(\n         &self,\n         config: &DiagnosticsConfig,\n+        resolve: bool,\n         file_id: FileId,\n     ) -> Cancelable<Vec<Diagnostic>> {\n-        self.with_db(|db| diagnostics::diagnostics(db, config, file_id))\n+        self.with_db(|db| diagnostics::diagnostics(db, config, resolve, file_id))\n     }\n \n     /// Convenience function to return assists + quick fixes for diagnostics\n@@ -550,9 +551,10 @@ impl Analysis {\n \n             if include_fixes {\n                 res.extend(\n-                    diagnostics::diagnostics(db, diagnostics_config, frange.file_id)\n+                    diagnostics::diagnostics(db, diagnostics_config, resolve, frange.file_id)\n                         .into_iter()\n-                        .filter_map(|it| it.fix),\n+                        .filter_map(|it| it.fix)\n+                        .filter(|it| it.target.intersect(frange.range).is_some()),\n                 );\n             }\n             res"}, {"sha": "74f784338fce9e034fe5b45b7d125d9856c5d48e", "filename": "crates/rust-analyzer/src/cli/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fdiagnostics.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -57,7 +57,8 @@ pub fn diagnostics(\n             let crate_name =\n                 module.krate().display_name(db).as_deref().unwrap_or(\"unknown\").to_string();\n             println!(\"processing crate: {}, module: {}\", crate_name, _vfs.file_path(file_id));\n-            for diagnostic in analysis.diagnostics(&DiagnosticsConfig::default(), file_id).unwrap()\n+            for diagnostic in\n+                analysis.diagnostics(&DiagnosticsConfig::default(), false, file_id).unwrap()\n             {\n                 if matches!(diagnostic.severity, Severity::Error) {\n                     found_error = true;"}, {"sha": "4f0c9d23c76f04fdf5b3f757e7238aeaa85fe718", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -1182,7 +1182,7 @@ pub(crate) fn publish_diagnostics(\n \n     let diagnostics: Vec<Diagnostic> = snap\n         .analysis\n-        .diagnostics(&snap.config.diagnostics(), file_id)?\n+        .diagnostics(&snap.config.diagnostics(), false, file_id)?\n         .into_iter()\n         .map(|d| Diagnostic {\n             range: to_proto::range(&line_index, d.range),"}, {"sha": "75e677762a602e446213970961a2232228daa94d", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06a633ff421b764428bb946ced914e59532fe13f/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=06a633ff421b764428bb946ced914e59532fe13f", "patch": "@@ -168,6 +168,7 @@ impl Server {\n         self.send_notification(r)\n     }\n \n+    #[track_caller]\n     pub(crate) fn request<R>(&self, params: R::Params, expected_resp: Value)\n     where\n         R: lsp_types::request::Request,"}]}