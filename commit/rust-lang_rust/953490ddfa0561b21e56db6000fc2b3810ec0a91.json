{"sha": "953490ddfa0561b21e56db6000fc2b3810ec0a91", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MzQ5MGRkZmEwNTYxYjIxZTU2ZGI2MDAwZmMyYjM4MTBlYzBhOTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T16:19:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:58Z"}, "message": "rustc: Remove lang item methods from CrateStore\n\nGiven the previous commit, these are now trivially representable as queries!", "tree": {"sha": "19f51a5ced0a5479eb552167e7e667ac1092b121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19f51a5ced0a5479eb552167e7e667ac1092b121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/953490ddfa0561b21e56db6000fc2b3810ec0a91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/953490ddfa0561b21e56db6000fc2b3810ec0a91", "html_url": "https://github.com/rust-lang/rust/commit/953490ddfa0561b21e56db6000fc2b3810ec0a91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/953490ddfa0561b21e56db6000fc2b3810ec0a91/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2e2aba07da5038ba13051a45de8f61d538d517a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e2aba07da5038ba13051a45de8f61d538d517a", "html_url": "https://github.com/rust-lang/rust/commit/a2e2aba07da5038ba13051a45de8f61d538d517a"}], "stats": {"total": 157, "additions": 82, "deletions": 75}, "files": [{"sha": "1c52725c910593cc06589723707e896d019c84df", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -561,6 +561,8 @@ define_dep_nodes!( <'tcx>\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(HirId),\n     [] GetLangItems,\n+    [] DefinedLangItems(CrateNum),\n+    [] MissingLangItems(CrateNum),\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "b7fdfe4a6359e648784b1fb8e02fa3ee378d7e92", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -28,7 +28,6 @@ use hir::map as hir_map;\n use hir::map::definitions::{Definitions, DefKey, DefPathTable};\n use hir::svh::Svh;\n use ich;\n-use middle::lang_items;\n use ty::{self, TyCtxt};\n use session::Session;\n use session::search_paths::PathKind;\n@@ -243,10 +242,6 @@ pub trait CrateStore {\n     // trait/impl-item info\n     fn associated_item_cloned(&self, def: DefId) -> ty::AssociatedItem;\n \n-    // crate metadata\n-    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>;\n-    fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>;\n-\n     // resolve\n     fn def_key(&self, def: DefId) -> DefKey;\n     fn def_path(&self, def: DefId) -> hir_map::DefPath;\n@@ -332,10 +327,6 @@ impl CrateStore for DummyCrateStore {\n         { bug!(\"associated_item_cloned\") }\n \n     // crate metadata\n-    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>\n-        { bug!(\"lang_items\") }\n-    fn missing_lang_items(&self, cnum: CrateNum) -> Vec<lang_items::LangItem>\n-        { bug!(\"missing_lang_items\") }\n     fn dep_kind_untracked(&self, cnum: CrateNum) -> DepKind { bug!(\"is_explicitly_linked\") }\n     fn export_macros_untracked(&self, cnum: CrateNum) { bug!(\"export_macros\") }\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol { bug!(\"crate_name\") }"}, {"sha": "d7cc47f9ee78dfc1c8ede3407c6dc4a63e8da14f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -209,7 +209,7 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItems {\n     let mut collector = LanguageItemCollector::new(tcx);\n     for cnum in tcx.sess.cstore.crates() {\n-        for (index, item_index) in tcx.sess.cstore.lang_items(cnum) {\n+        for &(index, item_index) in tcx.defined_lang_items(cnum).iter() {\n             let def_id = DefId { krate: cnum, index: index };\n             collector.collect_item(item_index, def_id);\n         }"}, {"sha": "ad6702ed21f8d0352662868714a5b9923accab27", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -84,7 +84,7 @@ fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let mut missing = HashSet::new();\n     for cnum in tcx.sess.cstore.crates() {\n-        for item in tcx.sess.cstore.missing_lang_items(cnum) {\n+        for &item in tcx.missing_lang_items(cnum).iter() {\n             missing.insert(item);\n         }\n     }"}, {"sha": "0e02d5b992a52a79396ee4531bc23715e07280ec", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -1097,7 +1097,17 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn lang_items(self) -> Rc<middle::lang_items::LanguageItems> {\n-        self.get_lang_items(LOCAL_CRATE)\n+        // Right now we insert a `with_ignore` node in the dep graph here to\n+        // ignore the fact that `get_lang_items` below depends on the entire\n+        // crate.  For now this'll prevent false positives of recompiling too\n+        // much when anything changes.\n+        //\n+        // Once red/green incremental compilation lands we should be able to\n+        // remove this because while the crate changes often the lint level map\n+        // will change rarely.\n+        self.dep_graph.with_ignore(|| {\n+            self.get_lang_items(LOCAL_CRATE)\n+        })\n     }\n }\n "}, {"sha": "fc7dcb16ea05784515f414c54e494a039f97afb1", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -10,7 +10,7 @@\n \n use dep_graph::{DepConstructor, DepNode, DepNodeIndex};\n use errors::{Diagnostic, DiagnosticBuilder};\n-use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use hir::def_id::{CrateNum, DefId, LOCAL_CRATE, DefIndex};\n use hir::def::{Def, Export};\n use hir::{self, TraitCandidate, HirId};\n use hir::svh::Svh;\n@@ -22,7 +22,7 @@ use middle::privacy::AccessLevels;\n use middle::region;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n-use middle::lang_items::LanguageItems;\n+use middle::lang_items::{LanguageItems, LangItem};\n use mir;\n use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n@@ -694,6 +694,18 @@ impl<'tcx> QueryDescription for queries::get_lang_items<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::defined_lang_items<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lang items defined in a crate\")\n+    }\n+}\n+\n+impl<'tcx> QueryDescription for queries::missing_lang_items<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the missing lang items in a crate\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1301,6 +1313,8 @@ define_maps! { <'tcx>\n     [] extern_mod_stmt_cnum: ExternModStmtCnum(HirId) -> Option<CrateNum>,\n \n     [] get_lang_items: get_lang_items_node(CrateNum) -> Rc<LanguageItems>,\n+    [] defined_lang_items: DefinedLangItems(CrateNum) -> Rc<Vec<(DefIndex, usize)>>,\n+    [] missing_lang_items: MissingLangItems(CrateNum) -> Rc<Vec<LangItem>>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {"}, {"sha": "567c8b7e3f73df1b8d6d5968e4d8445818d06c93", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -15,7 +15,6 @@ use rustc::dep_graph::DepGraph;\n use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n use rustc_trans;\n-use rustc::middle::lang_items;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region;\n use rustc::middle::resolve_lifetime;\n@@ -140,7 +139,6 @@ fn test_env<F>(source_string: &str,\n     let hir_map = hir_map::map_crate(&mut hir_forest, defs);\n \n     // run just enough stuff to build a tcx:\n-    let lang_items = lang_items::collect_language_items(&sess, &hir_map);\n     let named_region_map = resolve_lifetime::krate(&sess, &hir_map);\n     let index = stability::Index::new(&sess);\n     TyCtxt::create_and_enter(&sess,\n@@ -152,7 +150,6 @@ fn test_env<F>(source_string: &str,\n                              resolutions,\n                              named_region_map.unwrap(),\n                              hir_map,\n-                             lang_items,\n                              index,\n                              \"test_crate\",\n                              |tcx| {"}, {"sha": "16cbc52ced98fb1f275cbbbded69dec2fa56599e", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -20,11 +20,10 @@ use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             LinkagePreference, LoadedMacro, EncodedMetadata,\n                             EncodedMetadataHashes, NativeLibraryKind};\n use rustc::hir::def;\n-use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n use rustc::hir::map::blocks::FnLikeNode;\n use rustc::hir::map::definitions::{DefPathTable, GlobalMetaDataKind};\n@@ -213,6 +212,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         cdata.each_child_of_item(def_id.index, |child| result.push(child), tcx.sess);\n         Rc::new(result)\n     }\n+    defined_lang_items => { Rc::new(cdata.get_lang_items(&tcx.dep_graph)) }\n+    missing_lang_items => { Rc::new(cdata.get_missing_lang_items(&tcx.dep_graph)) }\n }\n \n pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n@@ -305,17 +306,6 @@ impl CrateStore for cstore::CStore {\n         }\n     }\n \n-    fn lang_items(&self, cnum: CrateNum) -> Vec<(DefIndex, usize)>\n-    {\n-        self.get_crate_data(cnum).get_lang_items(&self.dep_graph)\n-    }\n-\n-    fn missing_lang_items(&self, cnum: CrateNum)\n-                          -> Vec<lang_items::LangItem>\n-    {\n-        self.get_crate_data(cnum).get_missing_lang_items(&self.dep_graph)\n-    }\n-\n     fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol\n     {\n         self.get_crate_data(cnum).name"}, {"sha": "fcd0e58a985528007d7eb45da21273e44fe54b43", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -243,26 +243,27 @@ pub fn build_impls(cx: &DocContext, did: DefId) -> Vec<clean::Item> {\n     }\n \n     // Also try to inline primitive impls from other crates.\n+    let lang_items = tcx.lang_items();\n     let primitive_impls = [\n-        tcx.lang_items.isize_impl(),\n-        tcx.lang_items.i8_impl(),\n-        tcx.lang_items.i16_impl(),\n-        tcx.lang_items.i32_impl(),\n-        tcx.lang_items.i64_impl(),\n-        tcx.lang_items.i128_impl(),\n-        tcx.lang_items.usize_impl(),\n-        tcx.lang_items.u8_impl(),\n-        tcx.lang_items.u16_impl(),\n-        tcx.lang_items.u32_impl(),\n-        tcx.lang_items.u64_impl(),\n-        tcx.lang_items.u128_impl(),\n-        tcx.lang_items.f32_impl(),\n-        tcx.lang_items.f64_impl(),\n-        tcx.lang_items.char_impl(),\n-        tcx.lang_items.str_impl(),\n-        tcx.lang_items.slice_impl(),\n-        tcx.lang_items.const_ptr_impl(),\n-        tcx.lang_items.mut_ptr_impl(),\n+        lang_items.isize_impl(),\n+        lang_items.i8_impl(),\n+        lang_items.i16_impl(),\n+        lang_items.i32_impl(),\n+        lang_items.i64_impl(),\n+        lang_items.i128_impl(),\n+        lang_items.usize_impl(),\n+        lang_items.u8_impl(),\n+        lang_items.u16_impl(),\n+        lang_items.u32_impl(),\n+        lang_items.u64_impl(),\n+        lang_items.u128_impl(),\n+        lang_items.f32_impl(),\n+        lang_items.f64_impl(),\n+        lang_items.char_impl(),\n+        lang_items.str_impl(),\n+        lang_items.slice_impl(),\n+        lang_items.const_ptr_impl(),\n+        lang_items.mut_ptr_impl(),\n     ];\n \n     for def_id in primitive_impls.iter().filter_map(|&def_id| def_id) {\n@@ -401,7 +402,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n             clean::RegionBound(..) => unreachable!(),\n         }\n     });\n-    if trait_.def_id() == tcx.lang_items.deref_trait() {\n+    if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n "}, {"sha": "9d61bc2fa5aab341e22669f8b95e3c11cb75d549", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -125,9 +125,9 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n \n         {\n             let mut r = cx.renderinfo.borrow_mut();\n-            r.deref_trait_did = cx.tcx.lang_items.deref_trait();\n-            r.deref_mut_trait_did = cx.tcx.lang_items.deref_mut_trait();\n-            r.owned_box_did = cx.tcx.lang_items.owned_box();\n+            r.deref_trait_did = cx.tcx.lang_items().deref_trait();\n+            r.deref_mut_trait_did = cx.tcx.lang_items().deref_mut_trait();\n+            r.owned_box_did = cx.tcx.lang_items().owned_box();\n         }\n \n         let mut externs = Vec::new();\n@@ -689,7 +689,7 @@ impl TyParamBound {\n     fn is_sized_bound(&self, cx: &DocContext) -> bool {\n         use rustc::hir::TraitBoundModifier as TBM;\n         if let TyParamBound::TraitBound(PolyTrait { ref trait_, .. }, TBM::None) = *self {\n-            if trait_.def_id() == cx.tcx.lang_items.sized_trait() {\n+            if trait_.def_id() == cx.tcx.lang_items().sized_trait() {\n                 return true;\n             }\n         }\n@@ -713,7 +713,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n \n     match trait_did {\n         // Attempt to sugar an external path like Fn<(A, B,), C> to Fn(A, B) -> C\n-        Some(did) if cx.tcx.lang_items.fn_trait_kind(did).is_some() => {\n+        Some(did) if cx.tcx.lang_items().fn_trait_kind(did).is_some() => {\n             assert_eq!(types.len(), 1);\n             let inputs = match types[0].sty {\n                 ty::TyTuple(ref tys, _) => tys.iter().map(|t| t.clean(cx)).collect(),\n@@ -2526,7 +2526,7 @@ impl Clean<Vec<Item>> for doctree::Impl {\n \n         // If this impl block is an implementation of the Deref trait, then we\n         // need to try inlining the target's inherent impl blocks as well.\n-        if trait_.def_id() == cx.tcx.lang_items.deref_trait() {\n+        if trait_.def_id() == cx.tcx.lang_items().deref_trait() {\n             build_deref_target_impls(cx, &items, &mut ret);\n         }\n \n@@ -2582,27 +2582,27 @@ fn build_deref_target_impls(cx: &DocContext,\n             }\n         };\n         let did = match primitive {\n-            Isize => tcx.lang_items.isize_impl(),\n-            I8 => tcx.lang_items.i8_impl(),\n-            I16 => tcx.lang_items.i16_impl(),\n-            I32 => tcx.lang_items.i32_impl(),\n-            I64 => tcx.lang_items.i64_impl(),\n-            I128 => tcx.lang_items.i128_impl(),\n-            Usize => tcx.lang_items.usize_impl(),\n-            U8 => tcx.lang_items.u8_impl(),\n-            U16 => tcx.lang_items.u16_impl(),\n-            U32 => tcx.lang_items.u32_impl(),\n-            U64 => tcx.lang_items.u64_impl(),\n-            U128 => tcx.lang_items.u128_impl(),\n-            F32 => tcx.lang_items.f32_impl(),\n-            F64 => tcx.lang_items.f64_impl(),\n-            Char => tcx.lang_items.char_impl(),\n+            Isize => tcx.lang_items().isize_impl(),\n+            I8 => tcx.lang_items().i8_impl(),\n+            I16 => tcx.lang_items().i16_impl(),\n+            I32 => tcx.lang_items().i32_impl(),\n+            I64 => tcx.lang_items().i64_impl(),\n+            I128 => tcx.lang_items().i128_impl(),\n+            Usize => tcx.lang_items().usize_impl(),\n+            U8 => tcx.lang_items().u8_impl(),\n+            U16 => tcx.lang_items().u16_impl(),\n+            U32 => tcx.lang_items().u32_impl(),\n+            U64 => tcx.lang_items().u64_impl(),\n+            U128 => tcx.lang_items().u128_impl(),\n+            F32 => tcx.lang_items().f32_impl(),\n+            F64 => tcx.lang_items().f64_impl(),\n+            Char => tcx.lang_items().char_impl(),\n             Bool => None,\n-            Str => tcx.lang_items.str_impl(),\n-            Slice => tcx.lang_items.slice_impl(),\n-            Array => tcx.lang_items.slice_impl(),\n+            Str => tcx.lang_items().str_impl(),\n+            Slice => tcx.lang_items().slice_impl(),\n+            Array => tcx.lang_items().slice_impl(),\n             Tuple => None,\n-            RawPointer => tcx.lang_items.const_ptr_impl(),\n+            RawPointer => tcx.lang_items().const_ptr_impl(),\n             Reference => None,\n             Fn => None,\n         };"}, {"sha": "8eac959fc1e900c0f574397526afc322c966f980", "filename": "src/test/compile-fail/weak-lang-item.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/953490ddfa0561b21e56db6000fc2b3810ec0a91/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fweak-lang-item.rs?ref=953490ddfa0561b21e56db6000fc2b3810ec0a91", "patch": "@@ -16,3 +16,5 @@\n \n extern crate core;\n extern crate weak_lang_items;\n+\n+fn main() {}"}]}