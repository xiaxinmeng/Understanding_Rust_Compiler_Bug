{"sha": "d7029cbd7e25405ab815d12d55c3f496d48f6084", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MDI5Y2JkN2UyNTQwNWFiODE1ZDEyZDU1YzNmNDk2ZDQ4ZjYwODQ=", "commit": {"author": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-11T15:47:45Z"}, "committer": {"name": "Ethan Brierley", "email": "ethanboxx@gmail.com", "date": "2020-10-11T18:20:42Z"}, "message": "`min_const_generics` diagnostics improvements\n\n2\n\n3", "tree": {"sha": "b6ef22dbd3de4bf04d700f4287d56b6a4e0ef2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6ef22dbd3de4bf04d700f4287d56b6a4e0ef2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7029cbd7e25405ab815d12d55c3f496d48f6084", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7029cbd7e25405ab815d12d55c3f496d48f6084", "html_url": "https://github.com/rust-lang/rust/commit/d7029cbd7e25405ab815d12d55c3f496d48f6084", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7029cbd7e25405ab815d12d55c3f496d48f6084/comments", "author": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eopb", "id": 8074468, "node_id": "MDQ6VXNlcjgwNzQ0Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/8074468?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eopb", "html_url": "https://github.com/eopb", "followers_url": "https://api.github.com/users/eopb/followers", "following_url": "https://api.github.com/users/eopb/following{/other_user}", "gists_url": "https://api.github.com/users/eopb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eopb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eopb/subscriptions", "organizations_url": "https://api.github.com/users/eopb/orgs", "repos_url": "https://api.github.com/users/eopb/repos", "events_url": "https://api.github.com/users/eopb/events{/privacy}", "received_events_url": "https://api.github.com/users/eopb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1661f77e7b38546547207158bff2488411dd6697", "url": "https://api.github.com/repos/rust-lang/rust/commits/1661f77e7b38546547207158bff2488411dd6697", "html_url": "https://github.com/rust-lang/rust/commit/1661f77e7b38546547207158bff2488411dd6697"}], "stats": {"total": 371, "additions": 182, "deletions": 189}, "files": [{"sha": "83706e8a96f076352fd894187b3ce1eb06ddb20d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -469,24 +469,17 @@ impl<'a> Resolver<'a> {\n             ResolutionError::ParamInNonTrivialAnonConst { name, is_type } => {\n                 let mut err = self.session.struct_span_err(\n                     span,\n-                    \"generic parameters must not be used inside of non-trivial constant values\",\n-                );\n-                err.span_label(\n-                    span,\n-                    &format!(\n-                        \"non-trivial anonymous constants must not depend on the parameter `{}`\",\n-                        name\n-                    ),\n+                    \"generic parameters must not be used inside const evaluations\",\n                 );\n+                err.span_label(span, &format!(\"cannot perform const operation using `{}`\", name));\n \n                 if is_type {\n-                    err.note(\"type parameters are currently not permitted in anonymous constants\");\n+                    err.note(\"type parameters may not be used in anonymous constants\");\n                 } else {\n-                    err.help(\n-                        &format!(\"it is currently only allowed to use either `{0}` or `{{ {0} }}` as generic constants\",\n-                                 name\n-                        )\n-                    );\n+                    err.help(&format!(\n+                        \"const parameters may only be used as standalone arguments `{}`\",\n+                        name\n+                    ));\n                 }\n \n                 err"}, {"sha": "6677a5ffe2867e3218078ae027725a2e2e83a19a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -218,7 +218,7 @@ enum ResolutionError<'a> {\n     ParamInTyOfConstParam(Symbol),\n     /// constant values inside of type parameter defaults must not depend on generic parameters.\n     ParamInAnonConstInTyDefault(Symbol),\n-    /// generic parameters must not be used inside of non-trivial constant values.\n+    /// generic parameters must not be used inside const evaluations.\n     ///\n     /// This error is only emitted when using `min_const_generics`.\n     ParamInNonTrivialAnonConst { name: Symbol, is_type: bool },"}, {"sha": "31073683870e98834e81eb851bee5ea9c634eccc", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/array-size-in-generic-struct-param.rs:9:48\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n-   |                                                ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/array-size-in-generic-struct-param.rs:20:15\n    |\n LL |     arr: [u8; CFG.arr_size],\n-   |               ^^^ non-trivial anonymous constants must not depend on the parameter `CFG`\n+   |               ^^^ cannot perform const operation using `CFG`\n    |\n-   = help: it is currently only allowed to use either `CFG` or `{ CFG }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `CFG`\n \n error: `Config` is forbidden as the type of a const generic parameter\n   --> $DIR/array-size-in-generic-struct-param.rs:18:21"}, {"sha": "84591c1b724c61601eddcd3717dedf821c701ff8", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -8,7 +8,7 @@\n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n \n #[derive(PartialEq, Eq)]\n struct Config {\n@@ -19,7 +19,7 @@ struct B<const CFG: Config> {\n     //[min]~^ ERROR `Config` is forbidden\n     arr: [u8; CFG.arr_size],\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n }\n \n const C: Config = Config { arr_size: 5 };"}, {"sha": "60f860838139bdc181bb8b4639eadf4086e26c63", "filename": "src/test/ui/const-generics/const-argument-if-length.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/const-argument-if-length.rs:19:24\n    |\n LL |     pad: [u8; is_zst::<T>()],\n-   |                        ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                        ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error[E0277]: the size for values of type `T` cannot be known at compilation time\n   --> $DIR/const-argument-if-length.rs:17:12"}, {"sha": "b8b49e100e6c9d36749176334b74403143d63a38", "filename": "src/test/ui/const-generics/const-argument-if-length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-argument-if-length.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -17,7 +17,7 @@ pub struct AtLeastByte<T: ?Sized> {\n     value: T,\n     //~^ ERROR the size for values of type `T` cannot be known at compilation time\n     pad: [u8; is_zst::<T>()],\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n     //[full]~^^ ERROR evaluation of constant value failed\n }\n "}, {"sha": "93c92682c1216471f9653493a71bc565dd504255", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/feature-gate-const_evaluatable_checked.rs:6:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "3961b2568860f8e80800f09f6f3a5ee32da23352", "filename": "src/test/ui/const-generics/const_evaluatable_checked/feature-gate-const_evaluatable_checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Ffeature-gate-const_evaluatable_checked.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -4,7 +4,7 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n type Arr<const N: usize> = [u8; N - 1];\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside const evaluations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Default {\n     //[full]~^ ERROR constant expression depends"}, {"sha": "a9a5e7b8f4ac25f3148d80d0003b6669f49cb00f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/simple.rs:8:53\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/simple.rs:8:35\n    |\n LL | fn test<const N: usize>() -> [u8; N - 1] where [u8; N - 1]: Default {\n-   |                                   ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                   ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "903baf9cc0add805398fc704feed6eb741a80e9f", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/simple_fail.rs:7:33\n    |\n LL | type Arr<const N: usize> = [u8; N - 1];\n-   |                                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "47330c624c7e41abb27253efd88bd8adfe5b6288", "filename": "src/test/ui/const-generics/const_evaluatable_checked/simple_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_evaluatable_checked%2Fsimple_fail.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -5,7 +5,7 @@\n #![allow(incomplete_features)]\n \n type Arr<const N: usize> = [u8; N - 1]; //[full]~ ERROR evaluation of constant\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside const evaluations\n \n fn test<const N: usize>() -> Arr<N> where Arr<N>: Sized {\n     todo!()"}, {"sha": "52262e33676fe50731599fa65d7124271a97c861", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/generic-function-call-in-array-length.rs:9:39\n    |\n LL | fn bar<const N: usize>() -> [u32; foo(N)] {\n-   |                                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                       ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/generic-function-call-in-array-length.rs:12:13\n    |\n LL |     [0; foo(N)]\n-   |             ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |             ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "653ad84e10fc31e55c1bccdc10b7781e59e23a2d", "filename": "src/test/ui/const-generics/generic-function-call-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-function-call-in-array-length.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -7,10 +7,10 @@\n const fn foo(n: usize) -> usize { n * 2 }\n \n fn bar<const N: usize>() -> [u32; foo(N)] {\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n     [0; foo(N)]\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n }\n \n fn main() {}"}, {"sha": "611645b5eaac63d337ac83c7c8b38cc11d646b8a", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/generic-sum-in-array-length.rs:7:53\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                     ^ non-trivial anonymous constants must not depend on the parameter `A`\n+   |                                                     ^ cannot perform const operation using `A`\n    |\n-   = help: it is currently only allowed to use either `A` or `{ A }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `A`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/generic-sum-in-array-length.rs:7:57\n    |\n LL | fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-   |                                                         ^ non-trivial anonymous constants must not depend on the parameter `B`\n+   |                                                         ^ cannot perform const operation using `B`\n    |\n-   = help: it is currently only allowed to use either `B` or `{ B }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `B`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "b7ba70863826c25f305cfa1022bb1acad94d5bd5", "filename": "src/test/ui/const-generics/generic-sum-in-array-length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric-sum-in-array-length.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -5,8 +5,8 @@\n #![cfg_attr(min, feature(min_const_generics))]\n \n fn foo<const A: usize, const B: usize>(bar: [usize; A + B]) {}\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n-//[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside const evaluations\n+//[min]~| ERROR generic parameters must not be used inside const evaluations\n //[full]~^^^ ERROR constant expression depends on a generic parameter\n \n fn main() {}"}, {"sha": "e58d4c4d37e48c752d26f77eb16009914aa1b2d7", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:15:44\n    |\n LL |     T: Trait<{std::intrinsics::type_name::<T>()}>\n-   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error: `&'static str` is forbidden as the type of a const generic parameter\n   --> $DIR/intrinsics-type_name-as-const-argument.rs:10:22"}, {"sha": "833e8ef06dde088329cb53a78b05e923ee4db77d", "filename": "src/test/ui/const-generics/intrinsics-type_name-as-const-argument.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fintrinsics-type_name-as-const-argument.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -13,7 +13,7 @@ trait Trait<const S: &'static str> {}\n struct Bug<T>\n where\n     T: Trait<{std::intrinsics::type_name::<T>()}>\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n     //[full]~^^ ERROR constant expression depends on a generic parameter\n {\n     t: T"}, {"sha": "ac3488b2aff42d117c0f2656b26973a14817a3a6", "filename": "src/test/ui/const-generics/issue-61522-array-len-succ.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61522-array-len-succ.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-61522-array-len-succ.rs:7:45\n    |\n LL | pub struct MyArray<const COUNT: usize>([u8; COUNT + 1]);\n-   |                                             ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |                                             ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `COUNT`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-61522-array-len-succ.rs:12:30\n    |\n LL |     fn inner(&self) -> &[u8; COUNT + 1] {\n-   |                              ^^^^^ non-trivial anonymous constants must not depend on the parameter `COUNT`\n+   |                              ^^^^^ cannot perform const operation using `COUNT`\n    |\n-   = help: it is currently only allowed to use either `COUNT` or `{ COUNT }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `COUNT`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "405d83e7c7ee799cfc13d32575598d95bf4db6a8", "filename": "src/test/ui/const-generics/issue-67375.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67375.rs:9:25\n    |\n LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n-   |                         ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                         ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error[E0392]: parameter `T` is never used\n   --> $DIR/issue-67375.rs:7:12"}, {"sha": "78d3fcd89a73ff412e6d75adbd28e26ed24c621a", "filename": "src/test/ui/const-generics/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67375.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -7,7 +7,7 @@\n struct Bug<T> {\n     //~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n     //[full]~^^ WARN cannot use constants which depend on generic parameters in types\n     //[full]~^^^ WARN this was previously accepted by the compiler\n }"}, {"sha": "1833a011c65df61d0b84d5078af5e92c55331458", "filename": "src/test/ui/const-generics/issue-67945-1.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67945-1.rs:14:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n-   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67945-1.rs:17:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n-   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-1.rs:11:12"}, {"sha": "a97c16373533c21945a0a40523ac70b813b18a44", "filename": "src/test/ui/const-generics/issue-67945-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-1.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -12,10 +12,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n         0\n     }],\n }"}, {"sha": "dddc4f220fe30922a42b0924f1ac92394b1445c6", "filename": "src/test/ui/const-generics/issue-67945-2.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67945-2.rs:12:16\n    |\n LL |         let x: S = MaybeUninit::uninit();\n-   |                ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67945-2.rs:15:45\n    |\n LL |         let b = &*(&x as *const _ as *const S);\n-   |                                             ^ non-trivial anonymous constants must not depend on the parameter `S`\n+   |                                             ^ cannot perform const operation using `S`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error[E0392]: parameter `S` is never used\n   --> $DIR/issue-67945-2.rs:9:12"}, {"sha": "bc14a347b1c678348238aea3e8b9041b491708bf", "filename": "src/test/ui/const-generics/issue-67945-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-67945-2.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -10,10 +10,10 @@ struct Bug<S> {\n     //~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n         //[full]~^^ ERROR mismatched types\n         let b = &*(&x as *const _ as *const S);\n-        //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^ ERROR generic parameters must not be used inside const evaluations\n         0\n     }],\n }"}, {"sha": "c1a4c67e84870f3b947ec615aab4c3969a87412c", "filename": "src/test/ui/const-generics/issues/issue-61747.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-61747.rs:8:30\n    |\n LL |     fn successor() -> Const<{C + 1}> {\n-   |                              ^ non-trivial anonymous constants must not depend on the parameter `C`\n+   |                              ^ cannot perform const operation using `C`\n    |\n-   = help: it is currently only allowed to use either `C` or `{ C }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `C`\n \n error: aborting due to previous error\n "}, {"sha": "4802d6d8cc061febbd1bbb0133247e065477e221", "filename": "src/test/ui/const-generics/issues/issue-61935.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-61935.rs:10:23\n    |\n LL |         Self:FooImpl<{N==0}>\n-   |                       ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                       ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "5c0c4c2792b2ef2bf5d80cf0c4a91996dfa5bd4d", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -9,7 +9,7 @@ impl<const N: usize> Foo for [(); N]\n     where\n         Self:FooImpl<{N==0}>\n //[full]~^ERROR constant expression depends on a generic parameter\n-//[min]~^^ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ERROR generic parameters must not be used inside const evaluations\n {}\n \n trait FooImpl<const IS_ZERO: bool>{}"}, {"sha": "2a890c1966a9741472baa7f7c629f2bfdab5ae16", "filename": "src/test/ui/const-generics/issues/issue-62220.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-62220.rs:8:59\n    |\n LL | pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-   |                                                           ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                                           ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "d25643ead38e92cabd85c3fbb248a0a9bb026993", "filename": "src/test/ui/const-generics/issues/issue-62220.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62220.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -6,7 +6,7 @@\n pub struct Vector<T, const N: usize>([T; N]);\n \n pub type TruncatedVector<T, const N: usize> = Vector<T, { N - 1 }>;\n-//[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^ ERROR generic parameters must not be used inside const evaluations\n \n impl<T, const N: usize> Vector<T, { N }> {\n     /// Drop the last component and return the vector with one fewer dimension."}, {"sha": "2bf0d2130e7761853b736f3503a760441e04cae0", "filename": "src/test/ui/const-generics/issues/issue-62456.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-62456.rs:7:20\n    |\n LL |     let _ = [0u64; N + 1];\n-   |                    ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                    ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "53482a500bf6997dd147e63c851431ae10113324", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -6,7 +6,7 @@\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n }\n \n fn main() {}"}, {"sha": "900c4f0980df91bed79eb224fdb59053eca3414a", "filename": "src/test/ui/const-generics/issues/issue-64494.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-64494.rs:16:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n-   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-64494.rs:19:38\n    |\n LL | impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n-   |                                      ^^^^^^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                      ^^^^^^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error[E0119]: conflicting implementations of trait `MyTrait`:\n   --> $DIR/issue-64494.rs:19:1"}, {"sha": "a822c79f51bbeed34754112bfbd58d70d59068a1", "filename": "src/test/ui/const-generics/issues/issue-64494.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-64494.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -15,10 +15,10 @@ impl True for Is<{true}> {}\n \n impl<T: Foo> MyTrait for T where Is<{T::VAL == 5}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n impl<T: Foo> MyTrait for T where Is<{T::VAL == 6}>: True {}\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n //[min]~| ERROR conflicting implementations of trait `MyTrait`\n \n fn main() {}"}, {"sha": "691d9ca34426b9dda505728bd7040f2feaf828c1", "filename": "src/test/ui/const-generics/issues/issue-66205.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-66205.rs:8:14\n    |\n LL |     fact::<{ N - 1 }>();\n-   |              ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |              ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "e295fe3574ad37d184b3c22f8d17273c15027150", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -7,7 +7,7 @@\n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n }\n \n fn main() {}"}, {"sha": "03a936c2f02012f63330d07e92aa2508c5bd1c09", "filename": "src/test/ui/const-generics/issues/issue-67739.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-67739.rs:12:30\n    |\n LL |         [0u8; mem::size_of::<Self::Associated>()];\n-   |                              ^^^^^^^^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |                              ^^^^^^^^^^^^^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error: aborting due to previous error\n "}, {"sha": "db64f4e40cc2ad9a4d37fd13e44bf2927b2edcb4", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -11,7 +11,7 @@ pub trait Trait {\n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n         //[full]~^ ERROR constant expression depends on a generic parameter\n-        //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+        //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n         0\n     }\n }"}, {"sha": "b5bcedcb529bc1af5234c85f40e09eefd7512c31", "filename": "src/test/ui/const-generics/issues/issue-68366.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-68366.rs:12:37\n    |\n LL | impl <const N: usize> Collatz<{Some(N)}> {}\n-   |                                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error[E0207]: the const parameter `N` is not constrained by the impl trait, self type, or predicates\n   --> $DIR/issue-68366.rs:12:13"}, {"sha": "b6f7171e3f3207931ccc37e97dc06478a72d3e45", "filename": "src/test/ui/const-generics/issues/issue-68366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68366.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -11,7 +11,7 @@ struct Collatz<const N: Option<usize>>;\n \n impl <const N: usize> Collatz<{Some(N)}> {}\n //~^ ERROR the const parameter\n-//[min]~^^ generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ generic parameters must not be used inside const evaluations\n \n struct Foo;\n "}, {"sha": "fa5cdb62a63cd2a3f13a44f93c4520894b75e297", "filename": "src/test/ui/const-generics/issues/issue-68977.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-68977.rs:29:17\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-   |                 ^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `INT_BITS`\n+   |                 ^^^^^^^^ cannot perform const operation using `INT_BITS`\n    |\n-   = help: it is currently only allowed to use either `INT_BITS` or `{ INT_BITS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `INT_BITS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-68977.rs:29:28\n    |\n LL |     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-   |                            ^^^^^^^^^ non-trivial anonymous constants must not depend on the parameter `FRAC_BITS`\n+   |                            ^^^^^^^^^ cannot perform const operation using `FRAC_BITS`\n    |\n-   = help: it is currently only allowed to use either `FRAC_BITS` or `{ FRAC_BITS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `FRAC_BITS`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d121d3382279f4f46c6c8623a44619cf8e4b83f1", "filename": "src/test/ui/const-generics/issues/issue-68977.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-68977.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -27,8 +27,8 @@ fxp_storage_impls! {\n \n type FxpStorageHelper<const INT_BITS: u8, const FRAC_BITS: u8> =\n     PhantomU8<{(INT_BITS + FRAC_BITS + 7) / 8}>;\n-    //[min]~^ ERROR generic parameters must not be used inside of non-trivial constant values\n-    //[min]~| ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^ ERROR generic parameters must not be used inside const evaluations\n+    //[min]~| ERROR generic parameters must not be used inside const evaluations\n \n struct Fxp<const INT_BITS: u8, const FRAC_BITS: u8>\n where"}, {"sha": "68678259a358131cf9c7238735d5ee5e10166803", "filename": "src/test/ui/const-generics/issues/issue-72787.min.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-72787.rs:11:17\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n-   |                 ^^^ non-trivial anonymous constants must not depend on the parameter `LHS`\n+   |                 ^^^ cannot perform const operation using `LHS`\n    |\n-   = help: it is currently only allowed to use either `LHS` or `{ LHS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `LHS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-72787.rs:11:24\n    |\n LL |     Condition<{ LHS <= RHS }>: True\n-   |                        ^^^ non-trivial anonymous constants must not depend on the parameter `RHS`\n+   |                        ^^^ cannot perform const operation using `RHS`\n    |\n-   = help: it is currently only allowed to use either `RHS` or `{ RHS }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `RHS`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-72787.rs:26:25\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                         ^ non-trivial anonymous constants must not depend on the parameter `I`\n+   |                         ^ cannot perform const operation using `I`\n    |\n-   = help: it is currently only allowed to use either `I` or `{ I }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `I`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-72787.rs:26:36\n    |\n LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n-   |                                    ^ non-trivial anonymous constants must not depend on the parameter `J`\n+   |                                    ^ cannot perform const operation using `J`\n    |\n-   = help: it is currently only allowed to use either `J` or `{ J }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `J`\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-72787.rs:22:26"}, {"sha": "76e10ed36d1f6edfd4ec6ec9988ef4a140d7904f", "filename": "src/test/ui/const-generics/issues/issue-72787.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72787.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -10,8 +10,8 @@ pub trait True {}\n impl<const LHS: u32, const RHS: u32> True for IsLessOrEqual<LHS, RHS> where\n     Condition<{ LHS <= RHS }>: True\n //[full]~^ Error constant expression depends on a generic parameter\n-//[min]~^^ Error generic parameters must not be used inside of non-trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ Error generic parameters must not be used inside const evaluations\n+//[min]~| Error generic parameters must not be used inside const evaluations\n {\n }\n impl True for Condition<true> {}\n@@ -28,8 +28,8 @@ where\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n //[full]~| constant expression depends on a generic parameter\n-//[min]~^^^^^ Error generic parameters must not be used inside of non-trivial constant values\n-//[min]~| Error generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^^^^ Error generic parameters must not be used inside const evaluations\n+//[min]~| Error generic parameters must not be used inside const evaluations\n     // Condition<{ 8 - I <= 8 - J }>: True,\n {\n     fn print() {"}, {"sha": "41fe70c79b26266ee75669b211f2cc4760e81e0a", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-72819-generic-in-const-eval.rs:9:17\n    |\n LL | where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to previous error\n "}, {"sha": "7eaa8bbddc53474943b654dd97118e4107919add", "filename": "src/test/ui/const-generics/issues/issue-72819-generic-in-const-eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-72819-generic-in-const-eval.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -8,7 +8,7 @@\n struct Arr<const N: usize>\n where Assert::<{N < usize::max_value() / 2}>: IsTrue,\n //[full]~^ ERROR constant expression depends on a generic parameter\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n {\n }\n "}, {"sha": "fe683a3dfe311f619ace75a066edb699259f73b6", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-76701-ty-param-in-const.rs:6:46\n    |\n LL | fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n-   |                                              ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                              ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/issue-76701-ty-param-in-const.rs:12:42\n    |\n LL | fn const_param<const N: usize>() -> [u8; N + 1] {\n-   |                                          ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                          ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3d05813f63726488d9296960d1c9ca8bbcfb0a6f", "filename": "src/test/ui/const-generics/issues/issue-76701-ty-param-in-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-76701-ty-param-in-const.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -5,13 +5,13 @@\n \n fn ty_param<T>() -> [u8; std::mem::size_of::<T>()] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n     todo!()\n }\n \n fn const_param<const N: usize>() -> [u8; N + 1] {\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n     todo!()\n }\n "}, {"sha": "3c9fd1ff47b29267a6a9e619eaa9dc3d5fcd9b3d", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -7,19 +7,19 @@ fn ok<const M: usize>() -> [u8; M] {\n }\n \n struct Break0<const N: usize>([u8; { N + 1 }]);\n-//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//~^ ERROR generic parameters must not be used inside const evaluations\n \n struct Break1<const N: usize>([u8; { { N } }]);\n-//~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+//~^ ERROR generic parameters must not be used inside const evaluations\n \n fn break2<const N: usize>() {\n     let _: [u8; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //~^ ERROR generic parameters must not be used inside const evaluations\n }\n \n fn break3<const N: usize>() {\n     let _ = [0; N + 1];\n-    //~^ ERROR generic parameters must not be used inside of non-trivial constant values\n+    //~^ ERROR generic parameters must not be used inside const evaluations\n }\n \n trait Foo {"}, {"sha": "1282d7d7d620bd8fc2e75b76b79312f6447fbc95", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,34 +1,34 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/complex-expression.rs:9:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n-   |                                      ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                      ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/complex-expression.rs:12:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n-   |                                        ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                                        ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/complex-expression.rs:16:17\n    |\n LL |     let _: [u8; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/complex-expression.rs:21:17\n    |\n LL |     let _ = [0; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to 4 previous errors\n "}, {"sha": "381c20125426bfd180b2501d3618d58d91dd63f3", "filename": "src/test/ui/const-generics/min_const_generics/self-ty-in-const-1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fself-ty-in-const-1.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,10 +1,10 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/self-ty-in-const-1.rs:4:41\n    |\n LL |     fn t1() -> [u8; std::mem::size_of::<Self>()];\n-   |                                         ^^^^ non-trivial anonymous constants must not depend on the parameter `Self`\n+   |                                         ^^^^ cannot perform const operation using `Self`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error: generic `Self` types are currently not permitted in anonymous constants\n   --> $DIR/self-ty-in-const-1.rs:14:41"}, {"sha": "3bf3d41c88f8bf925022e6dd2f289fcf20a38349", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.min.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -6,13 +6,13 @@ LL | struct Bar<T = [u8; N], const N: usize>(T);\n    |\n    = note: using type defaults and const parameters in the same parameter list is currently not permitted\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:7:44\n    |\n LL | struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n-   |                                            ^ non-trivial anonymous constants must not depend on the parameter `T`\n+   |                                            ^ cannot perform const operation using `T`\n    |\n-   = note: type parameters are currently not permitted in anonymous constants\n+   = note: type parameters may not be used in anonymous constants\n \n error: constant values inside of type parameter defaults must not depend on generic parameters\n   --> $DIR/params-in-ct-in-ty-param-lazy-norm.rs:12:21"}, {"sha": "da37be6d87ae0c08ebff9c714d8ab70381eab22f", "filename": "src/test/ui/const-generics/params-in-ct-in-ty-param-lazy-norm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fparams-in-ct-in-ty-param-lazy-norm.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -6,7 +6,7 @@\n \n struct Foo<T, U = [u8; std::mem::size_of::<T>()]>(T, U);\n //[full]~^ ERROR constant values inside of type parameter defaults\n-//[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+//[min]~^^ ERROR generic parameters must not be used inside const evaluations\n \n // FIXME(const_generics:defaults): We still don't know how to we deal with type defaults.\n struct Bar<T = [u8; N], const N: usize>(T);"}, {"sha": "bd244a7d44d79f7d587fc3d5483f318e43afab75", "filename": "src/test/ui/const-generics/wf-misc.min.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.min.stderr?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -1,18 +1,18 @@\n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/wf-misc.rs:9:17\n    |\n LL |     let _: [u8; N + 1];\n-   |                 ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                 ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n-error: generic parameters must not be used inside of non-trivial constant values\n+error: generic parameters must not be used inside const evaluations\n   --> $DIR/wf-misc.rs:17:21\n    |\n LL |     let _: Const::<{N + 1}>;\n-   |                     ^ non-trivial anonymous constants must not depend on the parameter `N`\n+   |                     ^ cannot perform const operation using `N`\n    |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n+   = help: const parameters may only be used as standalone arguments `N`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8d68bf7765445e51d71966c91bc1043dad67f7f2", "filename": "src/test/ui/const-generics/wf-misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7029cbd7e25405ab815d12d55c3f496d48f6084/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fwf-misc.rs?ref=d7029cbd7e25405ab815d12d55c3f496d48f6084", "patch": "@@ -8,15 +8,15 @@\n pub fn arr_len<const N: usize>() {\n     let _: [u8; N + 1];\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n }\n \n struct Const<const N: usize>;\n \n pub fn func_call<const N: usize>() {\n     let _: Const::<{N + 1}>;\n     //[full]~^ ERROR constant expression depends on a generic parameter\n-    //[min]~^^ ERROR generic parameters must not be used inside of non-trivial\n+    //[min]~^^ ERROR generic parameters must not be used inside const evaluations\n }\n \n fn main() {}"}]}