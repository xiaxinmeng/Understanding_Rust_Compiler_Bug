{"sha": "6d39be465f77992d969a428befaa3ffcea9fe0da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMzliZTQ2NWY3Nzk5MmQ5NjlhNDI4YmVmYWEzZmZjZWE5ZmUwZGE=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-05T20:06:11Z"}, "committer": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-08-15T22:35:27Z"}, "message": "Add backtraces for syntax problems.", "tree": {"sha": "1afa3f7bdfb67aa4f446105d37d84987b6e16621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1afa3f7bdfb67aa4f446105d37d84987b6e16621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d39be465f77992d969a428befaa3ffcea9fe0da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d39be465f77992d969a428befaa3ffcea9fe0da", "html_url": "https://github.com/rust-lang/rust/commit/6d39be465f77992d969a428befaa3ffcea9fe0da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d39be465f77992d969a428befaa3ffcea9fe0da/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5428d4ee6d7afbd9d587658903a7c686eb97f9c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5428d4ee6d7afbd9d587658903a7c686eb97f9c3", "html_url": "https://github.com/rust-lang/rust/commit/5428d4ee6d7afbd9d587658903a7c686eb97f9c3"}], "stats": {"total": 126, "additions": 61, "deletions": 65}, "files": [{"sha": "5aad9c5cd14a06c58fdc5e64e762e20b3257319f", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 33, "deletions": 37, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=6d39be465f77992d969a428befaa3ffcea9fe0da", "patch": "@@ -32,41 +32,46 @@ fn syntax_expander_table() -> hashmap[str, syntax_extension] {\n     ret syntax_expanders;\n }\n \n-type span_msg_fn = fn(span, str) -> !  ;\n-type msg_fn = fn(str) -> !  ;\n+obj ext_ctxt(sess: @session, crate_file_name_hack: str, \n+             mutable backtrace: span[]) {\n+    fn crate_file_name() -> str { ret crate_file_name_hack; }\n \n-type next_id_fn = fn() -> ast::node_id ;\n-\n-\n-// Provides a limited set of services necessary for syntax extensions\n-// to do their thing\n-type ext_ctxt =\n-    {crate_file_name_hack: str,\n-     span_fatal: span_msg_fn,\n-     span_unimpl: span_msg_fn,\n-     span_bug: span_msg_fn,\n-     bug: msg_fn,\n-     next_id: next_id_fn};\n+    fn print_backtrace() {\n+        for sp: span in backtrace {\n+            sess.span_note(sp, \"(while expanding this)\")\n+        }\n+    }\n+    \n+    fn bt_push(sp: span) { backtrace += ~[sp]; }\n+    fn bt_pop() { ivec::pop(backtrace); }\n \n-fn mk_ctxt(sess: &session) -> ext_ctxt {\n-    fn ext_span_fatal_(sess: &session, sp: span, msg: str) -> ! {\n+    fn span_fatal(sp: span, msg: str) -> ! {\n+        self.print_backtrace();\n+        sess.span_fatal(sp, msg);\n+    }\n+    fn span_err(sp: span, msg: str) {\n+        self.print_backtrace();\n         sess.span_err(sp, msg);\n-        fail;\n     }\n-    let ext_span_fatal = bind ext_span_fatal_(sess, _, _);\n-    fn ext_span_unimpl_(sess: &session, sp: span, msg: str) -> ! {\n-        sess.span_err(sp, \"unimplemented \" + msg);\n-        fail;\n+    fn span_unimpl(sp:span, msg: str) -> ! {\n+        self.print_backtrace();\n+        sess.span_unimpl(sp, msg);\n     }\n-    let ext_span_bug = bind ext_span_bug_(sess, _, _);\n-    fn ext_span_bug_(sess: &session, sp: span, msg: str) -> ! {\n-        sess.span_bug(sp, msg);\n+    fn span_bug(sp:span, msg: str) -> ! {\n+        self.print_backtrace();\n+        sess.span_bug(sp, msg); \n+    }\n+    fn bug(msg: str) -> ! {\n+        self.print_backtrace();\n+        sess.bug(msg);\n+    }\n+    fn next_id() -> ast::node_id {\n+        ret sess.next_node_id();\n     }\n-    let ext_span_unimpl = bind ext_span_unimpl_(sess, _, _);\n-    fn ext_bug_(sess: &session, msg: str) -> ! { sess.bug(msg); }\n-    let ext_bug = bind ext_bug_(sess, _);\n \n+}\n \n+fn mk_ctxt(sess: &session) -> ext_ctxt {\n     // FIXME: Some extensions work by building ASTs with paths to functions\n     // they need to call at runtime. As those functions live in the std crate,\n     // the paths are prefixed with \"std::\". Unfortunately, these paths can't\n@@ -76,16 +81,7 @@ fn mk_ctxt(sess: &session) -> ext_ctxt {\n     // super-ugly and needs a better solution.\n     let crate_file_name_hack = sess.get_codemap().files.(0).name;\n \n-    fn ext_next_id_(sess: &session) -> ast::node_id {\n-        ret sess.next_node_id(); // temporary, until bind works better\n-    }\n-    let ext_next_id = bind ext_next_id_(sess);\n-    ret {crate_file_name_hack: crate_file_name_hack,\n-         span_fatal: ext_span_fatal,\n-         span_unimpl: ext_span_unimpl,\n-         span_bug: ext_span_bug,\n-         bug: ext_bug,\n-         next_id: ext_next_id};\n+    ret ext_ctxt(@sess, crate_file_name_hack, ~[]);\n }\n \n fn expr_to_str(cx: &ext_ctxt, expr: @ast::expr, error: str) -> str {"}, {"sha": "790e892cec2d86273e257eee566fa51a51ec69cc", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=6d39be465f77992d969a428befaa3ffcea9fe0da", "patch": "@@ -1,63 +1,63 @@\n-\n-import codemap::emit_error;\n import driver::session;\n-import syntax::ast::crate;\n-import syntax::ast::expr_;\n-import syntax::ast::expr_mac;\n-import syntax::ast::mac_invoc;\n-import syntax::fold::*;\n \n import std::option::none;\n import std::option::some;\n \n import std::map::hashmap;\n import std::ivec;\n \n-fn expand_expr(exts: &hashmap[str, base::syntax_extension],\n-               sess: &session::session, e: &expr_, fld: ast_fold,\n-               orig: &fn(&ast::expr_, ast_fold) -> expr_ ) -> expr_ {\n+import syntax::ast::crate;\n+import syntax::ast::expr_;\n+import syntax::ast::expr_mac;\n+import syntax::ast::mac_invoc;\n+import syntax::fold::*;\n+import syntax::ext::base::*;\n+\n+\n+fn expand_expr(exts: &hashmap[str, syntax_extension], cx: &ext_ctxt,\n+               e: &expr_, fld: ast_fold,\n+               orig: &fn(&expr_, ast_fold) -> expr_ ) -> expr_ {\n     ret alt e {\n           expr_mac(mac) {\n             alt mac.node {\n               mac_invoc(pth, args, body) {\n                 assert (ivec::len(pth.node.idents) > 0u);\n                 let extname = pth.node.idents.(0);\n-                let ext_cx = base::mk_ctxt(sess);\n                 alt exts.find(extname) {\n                   none. {\n-                    emit_error(some(pth.span),\n-                               \"unknown syntax expander: '\" + extname + \"'\",\n-                               sess.get_codemap());\n-                    fail\n+                    cx.span_fatal(pth.span,\n+                                  #fmt[\"macro undefined: '%s'\", extname])\n                   }\n-                  some(base::normal(ext)) {\n+                  some(normal(ext)) {\n+                    let expanded = ext(cx, pth.span, args, body);\n \n+                    cx.bt_push(mac.span);\n                     //keep going, outside-in\n-                    fld.fold_expr(ext(ext_cx, pth.span, args, body)).node\n+                    let fully_expanded = fld.fold_expr(expanded).node;\n+                    cx.bt_pop();\n+\n+                    fully_expanded\n                   }\n-                  some(base::macro_defining(ext)) {\n-                    let named_extension = ext(ext_cx, pth.span, args, body);\n+                  some(macro_defining(ext)) {\n+                    let named_extension = ext(cx, pth.span, args, body);\n                     exts.insert(named_extension.ident, named_extension.ext);\n                     ast::expr_rec(~[], none)\n                   }\n                 }\n               }\n-              _ {\n-                emit_error(some(mac.span), \"naked syntactic bit\",\n-                           sess.get_codemap());\n-                fail\n-              }\n+              _ { cx.span_bug(mac.span, \"naked syntactic bit\") }\n             }\n           }\n           _ { orig(e, fld) }\n         };\n }\n \n fn expand_crate(sess: &session::session, c: &@crate) -> @crate {\n-    let exts = ext::base::syntax_expander_table();\n+    let exts = syntax_expander_table();\n     let afp = default_ast_fold();\n+    let cx: ext_ctxt = mk_ctxt(sess);\n     let f_pre =\n-        {fold_expr: bind expand_expr(exts, sess, _, _, afp.fold_expr)\n+        {fold_expr: bind expand_expr(exts, cx, _, _, afp.fold_expr)\n             with *afp};\n     let f = make_fold(f_pre);\n     let res = @f.fold_crate(*c);"}, {"sha": "27fcece7fb546a68741e314a5f3c2372390694c2", "filename": "src/comp/syntax/ext/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Ffmt.rs?ref=6d39be465f77992d969a428befaa3ffcea9fe0da", "patch": "@@ -98,7 +98,7 @@ fn pieces_to_expr(cx: &ext_ctxt, sp: span, pieces: &[piece],\n     }\n     fn make_path_vec(cx: &ext_ctxt, ident: str) -> [str] {\n         fn compiling_std(cx: &ext_ctxt) -> bool {\n-            ret str::find(cx.crate_file_name_hack, \"std.rc\") >= 0;\n+            ret str::find(cx.crate_file_name(), \"std.rc\") >= 0;\n         }\n         if compiling_std(cx) {\n             ret ~[\"extfmt\", \"rt\", ident];"}, {"sha": "f4cb0021be3cca1eafc94f147b5d06c37ff3960d", "filename": "src/test/compile-fail/ext-nonexistent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Ftest%2Fcompile-fail%2Fext-nonexistent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d39be465f77992d969a428befaa3ffcea9fe0da/src%2Ftest%2Fcompile-fail%2Fext-nonexistent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fext-nonexistent.rs?ref=6d39be465f77992d969a428befaa3ffcea9fe0da", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern:unknown syntax expander\n+// error-pattern:macro undefined\n fn main() { #iamnotanextensionthatexists(\"\"); }\n\\ No newline at end of file"}]}