{"sha": "3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZDFhZjVmZGI1OWE0OWU5ZWI1ZTA1ZmYxNWZlZjZiODUxNGFlMzE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-03T12:33:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-01-16T17:57:58Z"}, "message": "let rustfmt undo most of my edits :(", "tree": {"sha": "32a519aee4deaf2fa87093ad1aace6e0bcb81588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32a519aee4deaf2fa87093ad1aace6e0bcb81588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "html_url": "https://github.com/rust-lang/rust/commit/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dee5d582f538e1d12f278e23ee47cb7c201c9b7", "html_url": "https://github.com/rust-lang/rust/commit/9dee5d582f538e1d12f278e23ee47cb7c201c9b7"}], "stats": {"total": 48, "additions": 17, "deletions": 31}, "files": [{"sha": "42d896af8014d0720387540838d9791cdfaaa5a0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -137,8 +137,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n     ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         let must_error = match self.error {\n             InterpError::MachineStop(_) => bug!(\"CTFE does not stop\"),\n-            err_inval!(Layout(LayoutError::Unknown(_)))\n-            | err_inval!(TooGeneric) => {\n+            err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n                 return Err(ErrorHandled::TooGeneric);\n             }\n             err_inval!(TypeckError) => return Err(ErrorHandled::Reported),"}, {"sha": "9461a066902128b1801409e54c30e4cafee495cb", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -118,17 +118,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n             // The rest is integer/pointer-\"like\", including fn ptr casts and casts from enums that\n             // are represented as integers.\n-            _ => {\n-                assert!(\n-                    src.layout.ty.is_bool()\n-                        || src.layout.ty.is_char()\n-                        || src.layout.ty.is_enum()\n-                        || src.layout.ty.is_integral()\n-                        || src.layout.ty.is_any_ptr(),\n-                    \"Unexpected cast from type {:?}\",\n-                    src.layout.ty\n-                )\n-            }\n+            _ => assert!(\n+                src.layout.ty.is_bool()\n+                    || src.layout.ty.is_char()\n+                    || src.layout.ty.is_enum()\n+                    || src.layout.ty.is_integral()\n+                    || src.layout.ty.is_any_ptr(),\n+                \"Unexpected cast from type {:?}\",\n+                src.layout.ty\n+            ),\n         }\n \n         // Handle cast from a univariant (ZST) enum."}, {"sha": "206d3d156735ec758b952e3dc5df5f06e5322511", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -152,16 +152,10 @@ impl<'tcx, Tag: Copy + 'static> LocalState<'tcx, Tag> {\n         &mut self,\n     ) -> InterpResult<'tcx, Result<&mut LocalValue<Tag>, MemPlace<Tag>>> {\n         match self.value {\n-            LocalValue::Dead => {\n-                throw_unsup!(DeadLocal)\n-            }\n-            LocalValue::Live(Operand::Indirect(mplace)) => {\n-                Ok(Err(mplace))\n-            }\n+            LocalValue::Dead => throw_unsup!(DeadLocal),\n+            LocalValue::Live(Operand::Indirect(mplace)) => Ok(Err(mplace)),\n             ref mut local @ LocalValue::Live(Operand::Immediate(_))\n-            | ref mut local @ LocalValue::Uninitialized => {\n-                Ok(Ok(local))\n-            }\n+            | ref mut local @ LocalValue::Uninitialized => Ok(Ok(local)),\n         }\n     }\n }"}, {"sha": "0bcdf9ae3c1f20866644e42a44dbfb534a32c90a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -580,8 +580,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                 Ok((layout.size, layout.align.abi))\n             }\n-            Some(GlobalAlloc::Memory(alloc)) =>\n-            {\n+            Some(GlobalAlloc::Memory(alloc)) => {\n                 // Need to duplicate the logic here, because the global allocations have\n                 // different associated types than the interpreter-local ones.\n                 Ok((alloc.size, alloc.align))"}, {"sha": "d1c08da6cbee55da6b4c287974897bdcb9ad121b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -543,9 +543,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | ty::ConstKind::Placeholder(..) => {\n                 bug!(\"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n-            ty::ConstKind::Value(val_val) => {\n-                val_val\n-            }\n+            ty::ConstKind::Value(val_val) => val_val,\n         };\n         // Other cases need layout.\n         let layout = from_known_layout(layout, || self.layout_of(val.ty))?;"}, {"sha": "9f713dfd5e6078dfae48fa93a1f2dcea9381340d", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=3fd1af5fdb59a49e9eb5e05ff15fef6b8514ae31", "patch": "@@ -114,8 +114,7 @@ fn write_path(out: &mut String, path: &Vec<PathElem>) {\n             ClosureVar(name) => write!(out, \".<closure-var({})>\", name),\n             TupleElem(idx) => write!(out, \".{}\", idx),\n             ArrayElem(idx) => write!(out, \"[{}]\", idx),\n-            Deref =>\n-            {\n+            Deref => {\n                 // This does not match Rust syntax, but it is more readable for long paths -- and\n                 // some of the other items here also are not Rust syntax.  Actually we can't\n                 // even use the usual syntax because we are just showing the projections,\n@@ -206,8 +205,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             ty::Adt(def, ..) if def.is_enum() => {\n                 // we might be projecting *to* a variant, or to a field *in*a variant.\n                 match layout.variants {\n-                    layout::Variants::Single { index } =>\n-                    {\n+                    layout::Variants::Single { index } => {\n                         // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name)\n                     }"}]}