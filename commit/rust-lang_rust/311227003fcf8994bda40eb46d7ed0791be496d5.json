{"sha": "311227003fcf8994bda40eb46d7ed0791be496d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMTIyNzAwM2ZjZjg5OTRiZGE0MGViNDZkN2VkMDc5MWJlNDk2ZDU=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-10T22:28:37Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-09-10T22:28:37Z"}, "message": "Remove much of the modules section.\n\nThis part can get _really_ confusing, and we want to make sure that\npeople succeed in the guide. I plan on making a module guide in the\nfuture to replace the information here.", "tree": {"sha": "0f214c72bb770e83b22ec72a19abe78e95336ddc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f214c72bb770e83b22ec72a19abe78e95336ddc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/311227003fcf8994bda40eb46d7ed0791be496d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/311227003fcf8994bda40eb46d7ed0791be496d5", "html_url": "https://github.com/rust-lang/rust/commit/311227003fcf8994bda40eb46d7ed0791be496d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/311227003fcf8994bda40eb46d7ed0791be496d5/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c8c82b87d32dda24403b0dc1a810ac34f04cd90", "html_url": "https://github.com/rust-lang/rust/commit/9c8c82b87d32dda24403b0dc1a810ac34f04cd90"}], "stats": {"total": 193, "additions": 2, "deletions": 191}, "files": [{"sha": "c42cfe46fd5bd2e90a8c620824e5bbc2ac1a6cce", "filename": "src/doc/guide.md", "status": "modified", "additions": 2, "deletions": 191, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/311227003fcf8994bda40eb46d7ed0791be496d5/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/311227003fcf8994bda40eb46d7ed0791be496d5/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=311227003fcf8994bda40eb46d7ed0791be496d5", "patch": "@@ -2751,197 +2751,8 @@ $ cargo run\n Hello, world!\n ```\n \n-Nice!\n-\n-There's a common pattern when you're building an executable: you build both an\n-executable and a library, and put most of your logic in the library. That way,\n-other programs can use that library to build their own functionality.\n-\n-Let's do that with our project. If you remember, libraries and executables\n-are both crates, so while our project has one crate now, let's make a second:\n-one for the library, and one for the executable.\n-\n-To make the second crate, open up `src/lib.rs` and put this code in it:\n-\n-```{rust}\n-mod hello {\n-    pub fn print_hello() {\n-        println!(\"Hello, world!\");\n-    }\n-}\n-```\n-\n-And change your `src/main.rs` to look like this:\n-\n-```{rust,ignore}\n-extern crate modules;\n-\n-fn main() {\n-    modules::hello::print_hello();\n-}\n-```\n-\n-There's been a few changes. First, we moved our `hello` module into its own\n-file, `src/lib.rs`. This is the file that Cargo expects a library crate to\n-be named, by convention.\n-\n-Next, we added an `extern crate modules` to the top of our `src/main.rs`. This,\n-as you can guess, lets Rust know that our crate relies on another, external\n-crate. We also had to modify our call to `print_hello`: now that it's in\n-another crate, we need to specify that crate first.\n-\n-This doesn't _quite_ work yet. Try it:\n-\n-```{notrust,ignore}\n-$ cargo build\n-   Compiling modules v0.0.1 (file:///home/you/projects/modules)\n-/home/you/projects/modules/src/lib.rs:2:5: 4:6 warning: code is never used: `print_hello`, #[warn(dead_code)] on by default\n-/home/you/projects/modules/src/lib.rs:2     pub fn print_hello() {\n-/home/you/projects/modules/src/lib.rs:3         println!(\"Hello, world!\");\n-/home/you/projects/modules/src/lib.rs:4     }\n-/home/you/projects/modules/src/main.rs:4:5: 4:32 error: function `print_hello` is private\n-/home/you/projects/modules/src/main.rs:4     modules::hello::print_hello();\n-                                          ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n-error: aborting due to previous error\n-Could not compile `modules`.\n-```\n-\n-First, we get a warning that some code is never used. Odd. Next, we get an error:\n-`print_hello` is private, so we can't call it. Notice that the first error came\n-from `src/lib.rs`, and the second came from `src/main.rs`: cargo is smart enough\n-to build it all with one command. Also, after seeing the second error, the warning\n-makes sense: we never actually call `hello_world`, because we're not allowed to!\n-\n-Just like modules, crates also have private visibility by default. Any modules\n-inside of a crate can only be used by other modules in the crate, unless they\n-use `pub`. In `src/lib.rs`, change this line:\n-\n-```{rust,ignore}\n-mod hello {\n-```\n-\n-To this:\n-\n-```{rust,ignore}\n-pub mod hello {\n-```\n-\n-And everything should work:\n-\n-```{notrust,ignore}\n-$ cargo run\n-   Compiling modules v0.0.1 (file:///home/you/projects/modules)\n-     Running `target/modules`\n-Hello, world!\n-```\n-\n-Let's do one more thing: add a `goodbye` module as well. Imagine a `src/lib.rs`\n-that looks like this:\n-\n-```{rust,ignore}\n-pub mod hello {\n-    pub fn print_hello() {\n-        println!(\"Hello, world!\");\n-    }\n-}\n-\n-pub mod goodbye {\n-    pub fn print_goodbye() {\n-        println!(\"Goodbye for now!\");\n-    }\n-}\n-```\n-\n-Now, these two modules are pretty small, but imagine we've written a real, large\n-program: they could both be huge. So maybe we want to move them into their own\n-files. We can do that pretty easily, and there are two different conventions\n-for doing it. Let's give each a try. First, make `src/lib.rs` look like this:\n-\n-```{rust,ignore}\n-pub mod hello;\n-pub mod goodbye;\n-```\n-\n-This tells Rust that this crate has two public modules: `hello` and `goodbye`.\n-\n-Next, make a `src/hello.rs` that contains this:\n-\n-```{rust,ignore}\n-pub fn print_hello() {\n-    println!(\"Hello, world!\");\n-}\n-```\n-\n-When we include a module like this, we don't need to make the `mod` declaration\n-in `hello.rs`, because it's already been declared in `lib.rs`. `hello.rs` just\n-contains the body of the module which is defined (by the `pub mod hello`) in\n-`lib.rs`.  This helps prevent 'rightward drift': when you end up indenting so\n-many times that your code is hard to read.\n-\n-Finally, make a new directory, `src/goodbye`, and make a new file in it,\n-`src/goodbye/mod.rs`:\n-\n-```{rust,ignore}\n-pub fn print_goodbye() {\n-    println!(\"Bye for now!\");\n-}\n-```\n-\n-Same deal, but we can make a folder with a `mod.rs` instead of `mod_name.rs` in\n-the same directory. If you have a lot of modules, nested folders can make\n-sense.  For example, if the `goodbye` module had its _own_ modules inside of\n-it, putting all of that in a folder helps keep our directory structure tidy.\n-And in fact, if you place the modules in separate files, they're required to be\n-in separate folders.\n-\n-This should all compile as usual:\n-\n-```{notrust,ignore}\n-$ cargo build\n-   Compiling modules v0.0.1 (file:///home/you/projects/modules)\n-```\n-\n-We've seen how the `::` operator can be used to call into modules, but when\n-we have deep nesting like `modules::hello::say_hello`, it can get tedious.\n-That's why we have the `use` keyword.\n-\n-`use` allows us to bring certain names into another scope. For example, here's\n-our main program:\n-\n-```{rust,ignore}\n-extern crate modules;\n-\n-fn main() {\n-    modules::hello::print_hello();\n-}\n-```\n-\n-We could instead write this:\n-\n-```{rust,ignore}\n-extern crate modules;\n-\n-use modules::hello::print_hello;\n-\n-fn main() {\n-    print_hello();\n-}\n-```\n-\n-By bringing `print_hello` into scope, we don't need to qualify it anymore. However,\n-it's considered proper style to do write this code like like this:\n-\n-```{rust,ignore}\n-extern crate modules;\n-\n-use modules::hello;\n-\n-fn main() {\n-    hello::print_hello();\n-}\n-```\n-\n-By just bringing the module into scope, we can keep one level of namespacing.\n+Nice! There are more things we can do with modules, including moving them into\n+their own files. This is enough detail for now.\n \n # Testing\n "}]}