{"sha": "279b6df1f2355b0b9af5993f38fd9524d74c320d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3OWI2ZGYxZjIzNTViMGI5YWY1OTkzZjM4ZmQ5NTI0ZDc0YzMyMGQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-15T13:18:00Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-15T13:18:00Z"}, "message": "incr.comp.: Refactor query cache serialization to be more re-usable.", "tree": {"sha": "902275bed25e6b3633f910b72835dc2e4008e983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/902275bed25e6b3633f910b72835dc2e4008e983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/279b6df1f2355b0b9af5993f38fd9524d74c320d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/279b6df1f2355b0b9af5993f38fd9524d74c320d", "html_url": "https://github.com/rust-lang/rust/commit/279b6df1f2355b0b9af5993f38fd9524d74c320d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/279b6df1f2355b0b9af5993f38fd9524d74c320d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1aeddf272d9370f32dc13025bfb802270efd10", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1aeddf272d9370f32dc13025bfb802270efd10", "html_url": "https://github.com/rust-lang/rust/commit/2c1aeddf272d9370f32dc13025bfb802270efd10"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "1395f37722e2dd834e154f0b4e3b984acbb21d4a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=279b6df1f2355b0b9af5993f38fd9524d74c320d", "patch": "@@ -1313,7 +1313,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                            -> Result<(), E::Error>\n         where E: ty::codec::TyEncoder\n     {\n-        self.on_disk_query_result_cache.serialize(self, self.cstore, encoder)\n+        self.on_disk_query_result_cache.serialize(self.global_tcx(), self.cstore, encoder)\n     }\n \n }"}, {"sha": "98727b5d10d1ddd5f9edce01a57f3f8f6d5dc185", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 35, "deletions": 18, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=279b6df1f2355b0b9af5993f38fd9524d74c320d", "patch": "@@ -32,7 +32,6 @@ use syntax_pos::{BytePos, Span, NO_EXPANSION, DUMMY_SP};\n use ty;\n use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use ty::context::TyCtxt;\n-use ty::maps::config::QueryDescription;\n use ty::subst::Substs;\n \n // Some magic values used for verifying that encoding and decoding. These are\n@@ -162,11 +161,11 @@ impl<'sess> OnDiskCache<'sess> {\n         }\n     }\n \n-    pub fn serialize<'a, 'gcx, 'lcx, E>(&self,\n-                                        tcx: TyCtxt<'a, 'gcx, 'lcx>,\n-                                        cstore: &CrateStore,\n-                                        encoder: &mut E)\n-                                        -> Result<(), E::Error>\n+    pub fn serialize<'a, 'tcx, E>(&self,\n+                                  tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                  cstore: &CrateStore,\n+                                  encoder: &mut E)\n+                                  -> Result<(), E::Error>\n         where E: ty_codec::TyEncoder\n      {\n         // Serializing the DepGraph should not modify it:\n@@ -232,19 +231,13 @@ impl<'sess> OnDiskCache<'sess> {\n         // Encode query results\n         let mut query_result_index = EncodedQueryResultIndex::new();\n \n-        // Encode TypeckTables\n-        for (def_id, entry) in tcx.maps.typeck_tables_of.borrow().map.iter() {\n-            if ty::maps::queries::typeck_tables_of::cache_on_disk(*def_id) {\n-                let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+        {\n+            use ty::maps::queries::*;\n+            let enc = &mut encoder;\n+            let qri = &mut query_result_index;\n \n-                // Record position of the cache entry\n-                query_result_index.push((dep_node, encoder.position()));\n-\n-                // Encode the type check tables with the SerializedDepNodeIndex\n-                // as tag.\n-                let typeck_tables: &ty::TypeckTables<'gcx> = &entry.value;\n-                encoder.encode_tagged(dep_node, typeck_tables)?;\n-            }\n+            // Encode TypeckTables\n+            encode_query_results::<typeck_tables_of, _>(tcx, enc, qri)?;\n         }\n \n         // Encode query result index\n@@ -842,3 +835,27 @@ for CacheDecoder<'a, 'tcx, 'x> {\n         Ok(IntEncodedWithFixedSize(value))\n     }\n }\n+\n+fn encode_query_results<'x, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                            encoder: &mut CacheEncoder<'x, 'tcx, E>,\n+                                            query_result_index: &mut EncodedQueryResultIndex)\n+                                            -> Result<(), E::Error>\n+    where Q: super::plumbing::GetCacheInternal<'tcx>,\n+          E: 'x + TyEncoder,\n+          Q::Value: Encodable,\n+{\n+    for (key, entry) in Q::get_cache_internal(tcx).map.iter() {\n+        if Q::cache_on_disk(key.clone()) {\n+            let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+\n+            // Record position of the cache entry\n+            query_result_index.push((dep_node, encoder.position()));\n+\n+            // Encode the type check tables with the SerializedDepNodeIndex\n+            // as tag.\n+            encoder.encode_tagged(dep_node, &entry.value)?;\n+        }\n+    }\n+\n+    Ok(())\n+}"}, {"sha": "1ca8fc6eb480f4706a2f11dd22c7cd0b09feff15", "filename": "src/librustc/ty/maps/plumbing.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/279b6df1f2355b0b9af5993f38fd9524d74c320d/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fplumbing.rs?ref=279b6df1f2355b0b9af5993f38fd9524d74c320d", "patch": "@@ -20,7 +20,7 @@ use ty::maps::config::QueryDescription;\n use ty::item_path;\n \n use rustc_data_structures::fx::{FxHashMap};\n-use std::cell::RefMut;\n+use std::cell::{Ref, RefMut};\n use std::marker::PhantomData;\n use std::mem;\n use syntax_pos::Span;\n@@ -55,6 +55,11 @@ impl<'tcx, M: QueryDescription<'tcx>> QueryMap<'tcx, M> {\n     }\n }\n \n+pub(super) trait GetCacheInternal<'tcx>: QueryDescription<'tcx> + Sized {\n+    fn get_cache_internal<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                              -> Ref<'a, QueryMap<'tcx, Self>>;\n+}\n+\n pub(super) struct CycleError<'a, 'tcx: 'a> {\n     span: Span,\n     cycle: RefMut<'a, [(Span, Query<'tcx>)]>,\n@@ -242,6 +247,13 @@ macro_rules! define_maps {\n             type Value = $V;\n         }\n \n+        impl<$tcx> GetCacheInternal<$tcx> for queries::$name<$tcx> {\n+            fn get_cache_internal<'a>(tcx: TyCtxt<'a, $tcx, $tcx>)\n+                                      -> ::std::cell::Ref<'a, QueryMap<$tcx, Self>> {\n+                tcx.maps.$name.borrow()\n+            }\n+        }\n+\n         impl<'a, $tcx, 'lcx> queries::$name<$tcx> {\n \n             #[allow(unused)]"}]}