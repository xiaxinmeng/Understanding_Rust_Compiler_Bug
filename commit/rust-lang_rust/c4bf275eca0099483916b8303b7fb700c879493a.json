{"sha": "c4bf275eca0099483916b8303b7fb700c879493a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YmYyNzVlY2EwMDk5NDgzOTE2YjgzMDNiN2ZiNzAwYzg3OTQ5M2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-27T22:56:36Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-30T04:43:06Z"}, "message": "Remove 'feature(nll)' from bind_by_move_pattern_guards tests.", "tree": {"sha": "e21e51a46785392acf933a10c7a99f9acfe65f30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e21e51a46785392acf933a10c7a99f9acfe65f30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bf275eca0099483916b8303b7fb700c879493a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bf275eca0099483916b8303b7fb700c879493a", "html_url": "https://github.com/rust-lang/rust/commit/c4bf275eca0099483916b8303b7fb700c879493a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bf275eca0099483916b8303b7fb700c879493a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f64b66a407627ca151c56b3c30ecefaa984de095", "url": "https://api.github.com/repos/rust-lang/rust/commits/f64b66a407627ca151c56b3c30ecefaa984de095", "html_url": "https://github.com/rust-lang/rust/commit/f64b66a407627ca151c56b3c30ecefaa984de095"}], "stats": {"total": 139, "additions": 71, "deletions": 68}, "files": [{"sha": "2afffd71fe2066dec22430cb59b07f3c12772fe6", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1989,7 +1989,7 @@ When matching on a variable it cannot be mutated in the match guards, as this\n could cause the match to be non-exhaustive:\n \n ```compile_fail,E0510\n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n let mut x = Some(0);\n match x {\n     None => (),"}, {"sha": "1ffb7f6fd4acd0f2f692ae9aaf863a9ffae9d8bc", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -5,9 +5,7 @@\n // reject it. But I want to make sure that we continue to reject it\n // (under NLL) even when that conservaive check goes away.\n \n-\n #![feature(bind_by_move_pattern_guards)]\n-#![feature(nll)]\n \n fn main() {\n     let mut b = &mut true;"}, {"sha": "a8eb78b7cc007c01bf2e8ff2b5b28b8747bc13b4", "filename": "src/test/ui/issues/issue-27282-reborrow-ref-mut-in-guard.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-reborrow-ref-mut-in-guard.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error[E0596]: cannot borrow `r` as mutable, as it is immutable for the pattern guard\n-  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:16:25\n+  --> $DIR/issue-27282-reborrow-ref-mut-in-guard.rs:14:25\n    |\n LL |         ref mut r if { (|| { let bar = &mut *r; **bar = false; })();\n    |                         ^^                   - mutable borrow occurs due to use of `r` in closure"}, {"sha": "49e0dfaa3eb84b6194eb6b995fa6bca7e23403d5", "filename": "src/test/ui/match/match-ref-mut-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-stability.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -3,7 +3,7 @@\n \n // run-pass\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n \n // Test that z always point to the same temporary.\n fn referent_stability() {"}, {"sha": "94e4a763866f6dbad776ee5e7f77fa4434a86e2e", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,7 +1,7 @@\n // Test that we have enough false edges to avoid exposing the exact matching\n // algorithm in borrow checking.\n \n-#![feature(nll, bind_by_move_pattern_guards)]\n+#![feature(bind_by_move_pattern_guards)]\n \n fn guard_always_precedes_arm(y: i32) {\n     let mut x;\n@@ -41,18 +41,4 @@ fn guard_may_be_taken(y: bool) {\n     };\n }\n \n-fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n-    let r = &mut y.1;\n-    // We don't actually test y.1 to select the second arm, but we don't want\n-    // borrowck results to be based on the order we match patterns.\n-    match y {\n-        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n-        (true, _) => {\n-            r;\n-            2\n-        }\n-        (false, _) => 3,\n-    };\n-}\n-\n fn main() {}"}, {"sha": "b1e0fa739769a3b5545124aefddacd66f76462e8", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -16,19 +16,7 @@ LL |         true => {\n LL |             x;\n    |             ^ value used here after move\n \n-error[E0503]: cannot use `y.1` because it was mutably borrowed\n-  --> $DIR/match-cfg-fake-edges.rs:49:17\n-   |\n-LL |     let r = &mut y.1;\n-   |             -------- borrow of `y.1` occurs here\n-...\n-LL |         (false, true) => 1,\n-   |                 ^^^^ use of borrowed `y.1`\n-LL |         (true, _) => {\n-LL |             r;\n-   |             - borrow later used here\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0381, E0382, E0503.\n+Some errors have detailed explanations: E0381, E0382.\n For more information about an error, try `rustc --explain E0381`."}, {"sha": "84c0dec2fe5cd374e51efdd84423b5d4d5ce55f8", "filename": "src/test/ui/nll/match-cfg-fake-edges2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -0,0 +1,20 @@\n+// Test that we have enough false edges to avoid exposing the exact matching\n+// algorithm in borrow checking.\n+\n+#![feature(nll)]\n+\n+fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n+    let r = &mut y.1;\n+    // We don't actually test y.1 to select the second arm, but we don't want\n+    // borrowck results to be based on the order we match patterns.\n+    match y {\n+        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n+        (true, _) => {\n+            r;\n+            2\n+        }\n+        (false, _) => 3,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "eab89658e79be3fb6dc28c1f0c901de52b058826", "filename": "src/test/ui/nll/match-cfg-fake-edges2.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -0,0 +1,15 @@\n+error[E0503]: cannot use `y.1` because it was mutably borrowed\n+  --> $DIR/match-cfg-fake-edges2.rs:11:17\n+   |\n+LL |     let r = &mut y.1;\n+   |             -------- borrow of `y.1` occurs here\n+...\n+LL |         (false, true) => 1,\n+   |                 ^^^^ use of borrowed `y.1`\n+LL |         (true, _) => {\n+LL |             r;\n+   |             - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0503`."}, {"sha": "601c46ff86cc7766554e44fcbb0e3499e11a1364", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -5,9 +5,7 @@\n // Test that we don't allow mutating the value being matched on in a way that\n // changes which patterns it matches, until we have chosen an arm.\n \n-\n #![feature(bind_by_move_pattern_guards)]\n-#![feature(nll)]\n \n fn ok_mutation_in_guard(mut q: i32) {\n     match q {"}, {"sha": "b2951fd339da4506c04648447fab5f35fe8b9068", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error[E0510]: cannot assign `q` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:59:13\n+  --> $DIR/match-guards-partially-borrow.rs:57:13\n    |\n LL |     match q {\n    |           - value is immutable in match guard\n@@ -8,7 +8,7 @@ LL |             q = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `r` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:71:13\n+  --> $DIR/match-guards-partially-borrow.rs:69:13\n    |\n LL |     match r {\n    |           - value is immutable in match guard\n@@ -17,7 +17,7 @@ LL |             r = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `t` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:95:13\n+  --> $DIR/match-guards-partially-borrow.rs:93:13\n    |\n LL |     match t {\n    |           - value is immutable in match guard\n@@ -26,7 +26,7 @@ LL |             t = true;\n    |             ^^^^^^^^ cannot assign\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:109:22\n+  --> $DIR/match-guards-partially-borrow.rs:107:22\n    |\n LL |     match x {\n    |           - value is immutable in match guard\n@@ -35,7 +35,7 @@ LL |                 Some(ref mut r) => *r = None,\n    |                      ^^^^^^^^^ cannot mutably borrow\n \n error[E0506]: cannot assign to `t` because it is borrowed\n-  --> $DIR/match-guards-partially-borrow.rs:121:13\n+  --> $DIR/match-guards-partially-borrow.rs:119:13\n    |\n LL |         s if {\n    |         - borrow of `t` occurs here\n@@ -46,7 +46,7 @@ LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:132:13\n+  --> $DIR/match-guards-partially-borrow.rs:130:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n@@ -55,7 +55,7 @@ LL |             y = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:143:13\n+  --> $DIR/match-guards-partially-borrow.rs:141:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n@@ -64,7 +64,7 @@ LL |             z = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:155:13\n+  --> $DIR/match-guards-partially-borrow.rs:153:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n@@ -73,7 +73,7 @@ LL |             a = &true;\n    |             ^^^^^^^^^ cannot assign\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:166:13\n+  --> $DIR/match-guards-partially-borrow.rs:164:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard"}, {"sha": "e43c8541e6d6d323d7504250f4e7d75ac06a64c7", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/bind-by-move-no-guards.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Fbind-by-move-no-guards.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -2,7 +2,7 @@\n // rust-lang/rust#2329), that starts passing with this feature in\n // place.\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n #![feature(bind_by_move_pattern_guards)]\n \n@@ -12,6 +12,7 @@ fn main() {\n     let (tx, rx) = channel();\n     let x = Some(rx);\n     tx.send(false);\n+    tx.send(false);\n     match x {\n         Some(z) if z.recv().unwrap() => { panic!() },\n         Some(z) => { assert!(!z.recv().unwrap()); },"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2015.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2015.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n+  --> $DIR/feature-gate.rs:36:1\n    |\n LL | / fn main() {\n LL | |     foo(107)"}, {"sha": "fe1f69907473515b4163b959d72f6eda3858f2b9", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.gate_and_2018.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.gate_and_2018.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error: compilation successful\n-  --> $DIR/feature-gate.rs:41:1\n+  --> $DIR/feature-gate.rs:36:1\n    |\n LL | / fn main() {\n LL | |     foo(107)"}, {"sha": "7a7b1c253528f68754ed66d9a8c35fe929a1661c", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.no_gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.no_gate.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error[E0008]: cannot bind by-move into a pattern guard\n-  --> $DIR/feature-gate.rs:33:16\n+  --> $DIR/feature-gate.rs:28:16\n    |\n LL |         A { a: v } if *v == 42 => v,\n    |                ^ moves value into pattern guard"}, {"sha": "69fce0bc775f7e6e6b40c8b151ab950d35e928fd", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/feature-gate.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Ffeature-gate.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -6,7 +6,7 @@\n \n // gate-test-bind_by_move_pattern_guards\n \n-// revisions: no_gate gate_and_2015 gate_and_2018 gate_and_znll gate_and_feature_nll\n+// revisions: no_gate gate_and_2015 gate_and_2018\n \n // (We're already testing NLL behavior quite explicitly, no need for compare-mode=nll.)\n // ignore-compare-mode-nll\n@@ -15,14 +15,9 @@\n \n #![cfg_attr(gate_and_2015, feature(bind_by_move_pattern_guards))]\n #![cfg_attr(gate_and_2018, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_znll, feature(bind_by_move_pattern_guards))]\n-#![cfg_attr(gate_and_feature_nll, feature(bind_by_move_pattern_guards))]\n-\n-#![cfg_attr(gate_and_feature_nll, feature(nll))]\n \n //[gate_and_2015] edition:2015\n //[gate_and_2018] edition:2018\n-//[gate_and_znll] compile-flags: -Z borrowck=mir\n \n struct A { a: Box<i32> }\n \n@@ -43,5 +38,3 @@ fn main() {\n }\n //[gate_and_2015]~^^^ ERROR compilation successful\n //[gate_and_2018]~^^^^ ERROR compilation successful\n-//[gate_and_znll]~^^^^^ ERROR compilation successful\n-//[gate_and_feature_nll]~^^^^^^ ERROR compilation successful"}, {"sha": "eccb4e417b6949f4d4b995ccbbaa61a1517a4619", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-basic-examples.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-basic-examples.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,39 +1,45 @@\n #![feature(bind_by_move_pattern_guards)]\n \n-// build-pass (FIXME(62277): could be check-pass?)\n+// run-pass\n \n struct A { a: Box<i32> }\n \n impl A {\n     fn get(&self) -> i32 { *self.a }\n }\n \n-fn foo(n: i32) {\n+fn foo(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if *v == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n-fn bar(n: i32) {\n+fn bar(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if x.get() == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n-fn baz(n: i32) {\n+fn baz(n: i32) -> i32 {\n     let x = A { a: Box::new(n) };\n     let y = match x {\n         A { a: v } if *v.clone() == 42 => v,\n         _ => Box::new(0),\n     };\n+    *y\n }\n \n fn main() {\n-    foo(107);\n-    bar(107);\n-    baz(107);\n+    assert_eq!(foo(107), 0);\n+    assert_eq!(foo(42), 42);\n+    assert_eq!(bar(107), 0);\n+    assert_eq!(bar(42), 42);\n+    assert_eq!(baz(107), 0);\n+    assert_eq!(baz(42), 42);\n }"}, {"sha": "602a8e15cb1808494bf65789b71f234013ee6260", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n enum VecWrapper { A(Vec<i32>) }"}, {"sha": "c9e8fc8ee532b67ca9728bf9fe08001aeadd017e", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-across-arms.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-across-arms.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-across-arms.rs:8:36\n+  --> $DIR/rfc-reject-double-move-across-arms.rs:7:36\n    |\n LL |         VecWrapper::A(v) if { drop(v); false } => 1,\n    |                                    ^ move occurs because `v` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait"}, {"sha": "77252a1ce15698f460ade5d9b43162597b1c41e8", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.rs?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,4 +1,3 @@\n-#![feature(nll)]\n #![feature(bind_by_move_pattern_guards)]\n \n struct A { a: Box<i32> }"}, {"sha": "a345022cee7c5a28c38ebd956188052df8b32073", "filename": "src/test/ui/rfc-0107-bind-by-move-pattern-guards/rfc-reject-double-move-in-first-arm.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4bf275eca0099483916b8303b7fb700c879493a/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-0107-bind-by-move-pattern-guards%2Frfc-reject-double-move-in-first-arm.stderr?ref=c4bf275eca0099483916b8303b7fb700c879493a", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `v` in pattern guard\n-  --> $DIR/rfc-reject-double-move-in-first-arm.rs:9:30\n+  --> $DIR/rfc-reject-double-move-in-first-arm.rs:8:30\n    |\n LL |         A { a: v } if { drop(v); true } => v,\n    |                              ^ move occurs because `v` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait"}]}