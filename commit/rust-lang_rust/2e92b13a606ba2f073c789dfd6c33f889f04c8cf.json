{"sha": "2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTJiMTNhNjA2YmEyZjA3M2M3ODlkZmQ2YzMzZjg4OWYwNGM4Y2Y=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-20T18:13:05Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-12-20T21:47:51Z"}, "message": "Prevent caching projections in the case of cycles\n\nWhen normalizing a projection which results in a cycle, we would\ncache the result of `project_type` without the nested obligations\n(because they're not needed for inference). This would result in\nthe nested obligations only being handled once in fulfill, which\nwould avoid the cycle error.\n\nFixes #79714, a regresion from #79305 caused by the removal of\n`get_paranoid_cache_value_obligation`.", "tree": {"sha": "65d4dc0e2251bc3a5d08aa4d8360909074b5d3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d4dc0e2251bc3a5d08aa4d8360909074b5d3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "html_url": "https://github.com/rust-lang/rust/commit/2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "77fce67733d2a1403f17b382dfbd3802003172a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/77fce67733d2a1403f17b382dfbd3802003172a6", "html_url": "https://github.com/rust-lang/rust/commit/77fce67733d2a1403f17b382dfbd3802003172a6"}], "stats": {"total": 171, "additions": 150, "deletions": 21}, "files": [{"sha": "33bddf1dedc1b2a6fa055207cbc5892b66e1357e", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -90,6 +90,7 @@ impl ProjectionCacheKey<'tcx> {\n pub enum ProjectionCacheEntry<'tcx> {\n     InProgress,\n     Ambiguous,\n+    Recur,\n     Error,\n     NormalizedTy(NormalizedTy<'tcx>),\n }\n@@ -143,7 +144,12 @@ impl<'tcx> ProjectionCache<'_, 'tcx> {\n             \"ProjectionCacheEntry::insert_ty: adding cache entry: key={:?}, value={:?}\",\n             key, value\n         );\n-        let fresh_key = self.map().insert(key, ProjectionCacheEntry::NormalizedTy(value));\n+        let mut map = self.map();\n+        if let Some(ProjectionCacheEntry::Recur) = map.get(&key) {\n+            debug!(\"Not overwriting Recur\");\n+            return;\n+        }\n+        let fresh_key = map.insert(key, ProjectionCacheEntry::NormalizedTy(value));\n         assert!(!fresh_key, \"never started projecting `{:?}`\", key);\n     }\n \n@@ -197,6 +203,14 @@ impl<'tcx> ProjectionCache<'_, 'tcx> {\n         assert!(!fresh, \"never started projecting `{:?}`\", key);\n     }\n \n+    /// Indicates that while trying to normalize `key`, `key` was required to\n+    /// be normalized again. Selection or evaluation should eventually report\n+    /// an error here.\n+    pub fn recur(&mut self, key: ProjectionCacheKey<'tcx>) {\n+        let fresh = self.map().insert(key, ProjectionCacheEntry::Recur);\n+        assert!(!fresh, \"never started projecting `{:?}`\", key);\n+    }\n+\n     /// Indicates that trying to normalize `key` resulted in\n     /// error.\n     pub fn error(&mut self, key: ProjectionCacheKey<'tcx>) {"}, {"sha": "fa0526445c194042aab483cfbd76a87f5c8b46ce", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -496,12 +496,6 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n             return Ok(None);\n         }\n         Err(ProjectionCacheEntry::InProgress) => {\n-            // If while normalized A::B, we are asked to normalize\n-            // A::B, just return A::B itself. This is a conservative\n-            // answer, in the sense that A::B *is* clearly equivalent\n-            // to A::B, though there may be a better value we can\n-            // find.\n-\n             // Under lazy normalization, this can arise when\n             // bootstrapping.  That is, imagine an environment with a\n             // where-clause like `A::B == u32`. Now, if we are asked\n@@ -512,6 +506,14 @@ fn opt_normalize_projection_type<'a, 'b, 'tcx>(\n \n             debug!(\"found cache entry: in-progress\");\n \n+            // Cache that normalizing this projection resulted in a cycle. This\n+            // should ensure that, unless this happens within a snapshot that's\n+            // rolled back, fulfillment or evaluation will notice the cycle.\n+\n+            infcx.inner.borrow_mut().projection_cache().recur(cache_key);\n+            return Err(InProgress);\n+        }\n+        Err(ProjectionCacheEntry::Recur) => {\n             return Err(InProgress);\n         }\n         Err(ProjectionCacheEntry::NormalizedTy(ty)) => {"}, {"sha": "a8f81445b03979dab77ed6411eb60292639f368b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -291,6 +291,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n+    pub(super) fn query_mode(&self) -> TraitQueryMode {\n+        self.query_mode\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // Selection\n     //"}, {"sha": "61ef013236e8d2bf63328221c0d45b3c9b21614c", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -24,13 +24,13 @@ impl Tr for u32 {\n // ...but not in an impl that redefines one of the types.\n impl Tr for bool {\n     type A = Box<Self::B>;\n-    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n+    //~^ ERROR overflow evaluating the requirement `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n     type B = &'static Self::A;\n-    //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n+    //~^ ERROR overflow evaluating the requirement `<usize as Tr>::A == _`\n }\n \n fn main() {"}, {"sha": "5e98520b41187a5c9261e03603184c1022ecdbcf", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-1.stderr?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -1,15 +1,15 @@\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:26:5\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n   --> $DIR/defaults-cyclic-fail-1.rs:32:5\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "e91c9f2d29a8215e785dea0147b251edcadb4e13", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -25,13 +25,13 @@ impl Tr for u32 {\n \n impl Tr for bool {\n     type A = Box<Self::B>;\n-    //~^ ERROR type mismatch resolving `<bool as Tr>::B == _`\n+    //~^ ERROR overflow evaluating the requirement `<bool as Tr>::B == _`\n }\n // (the error is shown twice for some reason)\n \n impl Tr for usize {\n     type B = &'static Self::A;\n-    //~^ ERROR type mismatch resolving `<usize as Tr>::A == _`\n+    //~^ ERROR overflow evaluating the requirement `<usize as Tr>::A == _`\n }\n \n fn main() {"}, {"sha": "c538805f858219dbccb8bdc34a4b4b5bd4d06f4e", "filename": "src/test/ui/associated-types/defaults-cyclic-fail-2.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fdefaults-cyclic-fail-2.stderr?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -1,15 +1,15 @@\n-error[E0271]: type mismatch resolving `<bool as Tr>::B == _`\n+error[E0275]: overflow evaluating the requirement `<bool as Tr>::B == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:27:5\n    |\n LL |     type A = Box<Self::B>;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0271]: type mismatch resolving `<usize as Tr>::A == _`\n+error[E0275]: overflow evaluating the requirement `<usize as Tr>::A == _`\n   --> $DIR/defaults-cyclic-fail-2.rs:33:5\n    |\n LL |     type B = &'static Self::A;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ cyclic type of infinite size\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "ba074210a2b5fb223512e6ca6fd82ece6cd45dac", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -0,0 +1,29 @@\n+// Regression test for #79714\n+\n+trait Baz {}\n+impl Baz for () {}\n+impl<T> Baz for (T,) {}\n+\n+trait Fiz {}\n+impl Fiz for bool {}\n+\n+trait Grault {\n+    type A;\n+    type B;\n+}\n+\n+impl<T: Grault> Grault for (T,)\n+where\n+    Self::A: Baz,\n+    Self::B: Fiz,\n+{\n+    type A = ();\n+    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+    type B = bool;\n+    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+}\n+//~^^^^^^^^^^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+\n+fn main() {\n+    let x: <(_,) as Grault>::A = ();\n+}"}, {"sha": "82328048c99a3a79b62b8d82c42da06fe9d4a587", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -0,0 +1,39 @@\n+error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+  --> $DIR/impl-wf-cycle-1.rs:15:1\n+   |\n+LL | / impl<T: Grault> Grault for (T,)\n+LL | | where\n+LL | |     Self::A: Baz,\n+LL | |     Self::B: Fiz,\n+...  |\n+LL | |\n+LL | | }\n+   | |_^\n+   |\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+   = note: 1 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+\n+error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+  --> $DIR/impl-wf-cycle-1.rs:20:5\n+   |\n+LL |     type A = ();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+   = note: 1 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+\n+error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+  --> $DIR/impl-wf-cycle-1.rs:22:5\n+   |\n+LL |     type B = bool;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+   = note: 1 redundant requirements hidden\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}, {"sha": "6fccc54f229aea6e2932c8c5be999e644c932845", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for #79714\n+\n+trait Grault {\n+    type A;\n+}\n+\n+impl<T: Grault> Grault for (T,)\n+where\n+    Self::A: Copy,\n+{\n+    type A = ();\n+    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+}\n+//~^^^^^^^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+\n+fn main() {}"}, {"sha": "5cd18a33adf374500bb10dc6d786bf47d67b473f", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2e92b13a606ba2f073c789dfd6c33f889f04c8cf/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=2e92b13a606ba2f073c789dfd6c33f889f04c8cf", "patch": "@@ -0,0 +1,25 @@\n+error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+  --> $DIR/impl-wf-cycle-2.rs:7:1\n+   |\n+LL | / impl<T: Grault> Grault for (T,)\n+LL | | where\n+LL | |     Self::A: Copy,\n+LL | | {\n+LL | |     type A = ();\n+LL | |\n+LL | | }\n+   | |_^\n+   |\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+\n+error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n+  --> $DIR/impl-wf-cycle-2.rs:11:5\n+   |\n+LL |     type A = ();\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0275`."}]}