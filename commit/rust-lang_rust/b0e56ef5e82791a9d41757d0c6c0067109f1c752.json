{"sha": "b0e56ef5e82791a9d41757d0c6c0067109f1c752", "node_id": "C_kwDOAAsO6NoAKGIwZTU2ZWY1ZTgyNzkxYTlkNDE3NTdkMGM2YzAwNjcxMDlmMWM3NTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T14:38:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-07T14:38:59Z"}, "message": "Auto merge of #13545 - Veykril:adjustment-hints, r=Veykril\n\nGeneralize reborrow hints as adjustment hints\n\nLike reborrow hints, these are still mainly useful for teaching/learning\n\n![image](https://user-images.githubusercontent.com/3757771/200073606-b5cd3b95-a9ad-454d-a3c4-d4d89bf45928.png)", "tree": {"sha": "31a86888205d6c7de8bcba67f6827118cbb5c9dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a86888205d6c7de8bcba67f6827118cbb5c9dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e56ef5e82791a9d41757d0c6c0067109f1c752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e56ef5e82791a9d41757d0c6c0067109f1c752", "html_url": "https://github.com/rust-lang/rust/commit/b0e56ef5e82791a9d41757d0c6c0067109f1c752", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e56ef5e82791a9d41757d0c6c0067109f1c752/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a839ea22e2b0a713f00cb939247772a0d1c7572", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a839ea22e2b0a713f00cb939247772a0d1c7572", "html_url": "https://github.com/rust-lang/rust/commit/3a839ea22e2b0a713f00cb939247772a0d1c7572"}, {"sha": "ee2dd934caeeb2fb044ac1cacd3e65c3b033bc8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2dd934caeeb2fb044ac1cacd3e65c3b033bc8b", "html_url": "https://github.com/rust-lang/rust/commit/ee2dd934caeeb2fb044ac1cacd3e65c3b033bc8b"}], "stats": {"total": 409, "additions": 304, "deletions": 105}, "files": [{"sha": "ad33053ad095f5fe2d3d4475e9eb833fedbe3628", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -53,7 +53,7 @@ pub use builder::{ParamKind, TyBuilder};\n pub use chalk_ext::*;\n pub use infer::{\n     could_coerce, could_unify, Adjust, Adjustment, AutoBorrow, BindingMode, InferenceDiagnostic,\n-    InferenceResult,\n+    InferenceResult, OverloadedDeref, PointerCast,\n };\n pub use interner::Interner;\n pub use lower::{"}, {"sha": "9d77f343bc5756b164eaef4bc4d64855feacc8d9", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -117,7 +117,7 @@ pub use {\n         name::{known, Name},\n         ExpandResult, HirFileId, InFile, MacroFile, Origin,\n     },\n-    hir_ty::display::HirDisplay,\n+    hir_ty::{display::HirDisplay, PointerCast, Safety},\n };\n \n // These are negative re-exports: pub using these names is forbidden, they\n@@ -3651,6 +3651,28 @@ impl From<ItemInNs> for ScopeDef {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum Adjust {\n+    /// Go from ! to any type.\n+    NeverToAny,\n+    /// Dereference once, producing a place.\n+    Deref(Option<OverloadedDeref>),\n+    /// Take the address and produce either a `&` or `*` pointer.\n+    Borrow(AutoBorrow),\n+    Pointer(PointerCast),\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum AutoBorrow {\n+    /// Converts from T to &T.\n+    Ref(Mutability),\n+    /// Converts from T to *T.\n+    RawPtr(Mutability),\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct OverloadedDeref(pub Mutability);\n+\n pub trait HasVisibility {\n     fn visibility(&self, db: &dyn HirDatabase) -> Visibility;\n     fn is_visible_from(&self, db: &dyn HirDatabase, module: Module) -> bool {"}, {"sha": "2e1f88ba09043e7b9d76bfbb2b1d1ec266302c13", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -29,9 +29,10 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, SourceAnalyzer},\n-    Access, BindingMode, BuiltinAttr, Callable, ConstParam, Crate, DeriveHelper, Field, Function,\n-    HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local, Macro, Module, ModuleDef,\n-    Name, Path, ScopeDef, ToolModule, Trait, Type, TypeAlias, TypeParam, VariantDef,\n+    Access, Adjust, AutoBorrow, BindingMode, BuiltinAttr, Callable, ConstParam, Crate,\n+    DeriveHelper, Field, Function, HasSource, HirFileId, Impl, InFile, Label, LifetimeParam, Local,\n+    Macro, Module, ModuleDef, Name, OverloadedDeref, Path, ScopeDef, ToolModule, Trait, Type,\n+    TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -333,9 +334,8 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_trait(trait_)\n     }\n \n-    // FIXME: Figure out a nice interface to inspect adjustments\n-    pub fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n-        self.imp.is_implicit_reborrow(expr)\n+    pub fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+        self.imp.expr_adjustments(expr)\n     }\n \n     pub fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {\n@@ -1067,8 +1067,29 @@ impl<'db> SemanticsImpl<'db> {\n         }\n     }\n \n-    fn is_implicit_reborrow(&self, expr: &ast::Expr) -> Option<Mutability> {\n-        self.analyze(expr.syntax())?.is_implicit_reborrow(self.db, expr)\n+    fn expr_adjustments(&self, expr: &ast::Expr) -> Option<Vec<Adjust>> {\n+        let mutability = |m| match m {\n+            hir_ty::Mutability::Not => Mutability::Shared,\n+            hir_ty::Mutability::Mut => Mutability::Mut,\n+        };\n+        self.analyze(expr.syntax())?.expr_adjustments(self.db, expr).map(|it| {\n+            it.iter()\n+                .map(|adjust| match adjust.kind {\n+                    hir_ty::Adjust::NeverToAny => Adjust::NeverToAny,\n+                    hir_ty::Adjust::Deref(Some(hir_ty::OverloadedDeref(m))) => {\n+                        Adjust::Deref(Some(OverloadedDeref(mutability(m))))\n+                    }\n+                    hir_ty::Adjust::Deref(None) => Adjust::Deref(None),\n+                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::RawPtr(m)) => {\n+                        Adjust::Borrow(AutoBorrow::RawPtr(mutability(m)))\n+                    }\n+                    hir_ty::Adjust::Borrow(hir_ty::AutoBorrow::Ref(m)) => {\n+                        Adjust::Borrow(AutoBorrow::Ref(mutability(m)))\n+                    }\n+                    hir_ty::Adjust::Pointer(pc) => Adjust::Pointer(pc),\n+                })\n+                .collect()\n+        })\n     }\n \n     fn type_of_expr(&self, expr: &ast::Expr) -> Option<TypeInfo> {"}, {"sha": "91ea1c24d14f83895c13c30a861bbe354f78919a", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -38,8 +38,7 @@ use hir_ty::{\n         UnsafeExpr,\n     },\n     method_resolution::{self, lang_names_for_bin_op},\n-    Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind,\n-    TyLoweringContext,\n+    Adjustment, InferenceResult, Interner, Substitution, Ty, TyExt, TyKind, TyLoweringContext,\n };\n use itertools::Itertools;\n use smallvec::SmallVec;\n@@ -156,21 +155,14 @@ impl SourceAnalyzer {\n         Some(res)\n     }\n \n-    pub(crate) fn is_implicit_reborrow(\n+    pub(crate) fn expr_adjustments(\n         &self,\n         db: &dyn HirDatabase,\n         expr: &ast::Expr,\n-    ) -> Option<Mutability> {\n+    ) -> Option<&[Adjustment]> {\n         let expr_id = self.expr_id(db, expr)?;\n         let infer = self.infer.as_ref()?;\n-        let adjustments = infer.expr_adjustments.get(&expr_id)?;\n-        adjustments.windows(2).find_map(|slice| match slice {\n-            &[Adjustment {kind: Adjust::Deref(None), ..}, Adjustment {kind: Adjust::Borrow(AutoBorrow::Ref(m)), ..}] => Some(match m {\n-                hir_ty::Mutability::Mut => Mutability::Mut,\n-                hir_ty::Mutability::Not => Mutability::Shared,\n-            }),\n-            _ => None,\n-        })\n+        infer.expr_adjustments.get(&expr_id).map(|v| &**v)\n     }\n \n     pub(crate) fn type_of_expr("}, {"sha": "325e609054dc8f5d3a91c19a04325b1eba1192b2", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 169, "deletions": 64, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -1,7 +1,10 @@\n use std::fmt;\n \n use either::Either;\n-use hir::{known, Callable, HasVisibility, HirDisplay, Mutability, Semantics, TypeInfo};\n+use hir::{\n+    known, Adjust, AutoBorrow, Callable, HasVisibility, HirDisplay, Mutability, OverloadedDeref,\n+    PointerCast, Safety, Semantics, TypeInfo,\n+};\n use ide_db::{\n     base_db::FileRange, famous_defs::FamousDefs, syntax_helpers::node_ext::walk_ty, FxHashMap,\n     RootDatabase,\n@@ -22,7 +25,7 @@ pub struct InlayHintsConfig {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n-    pub reborrow_hints: ReborrowHints,\n+    pub adjustment_hints: AdjustmentHints,\n     pub closure_return_type_hints: ClosureReturnTypeHints,\n     pub binding_mode_hints: bool,\n     pub lifetime_elision_hints: LifetimeElisionHints,\n@@ -48,9 +51,9 @@ pub enum LifetimeElisionHints {\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n-pub enum ReborrowHints {\n+pub enum AdjustmentHints {\n     Always,\n-    MutableOnly,\n+    ReborrowOnly,\n     Never,\n }\n \n@@ -61,7 +64,8 @@ pub enum InlayKind {\n     ClosingBraceHint,\n     ClosureReturnTypeHint,\n     GenericParamListHint,\n-    ImplicitReborrowHint,\n+    AdjustmentHint,\n+    AdjustmentHintClosingParenthesis,\n     LifetimeHint,\n     ParameterHint,\n     TypeHint,\n@@ -115,6 +119,12 @@ impl From<String> for InlayHintLabel {\n     }\n }\n \n+impl From<&str> for InlayHintLabel {\n+    fn from(s: &str) -> Self {\n+        Self { parts: vec![InlayHintLabelPart { text: s.into(), linked_location: None }] }\n+    }\n+}\n+\n impl fmt::Display for InlayHintLabel {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{}\", self.parts.iter().map(|part| &part.text).format(\"\"))\n@@ -221,6 +231,7 @@ fn hints(\n         match node {\n             ast::Expr(expr) => {\n                 chaining_hints(hints, sema, &famous_defs, config, file_id, &expr);\n+                adjustment_hints(hints, sema, config, &expr);\n                 match expr {\n                     ast::Expr::CallExpr(it) => param_name_hints(hints, sema, config, ast::Expr::from(it)),\n                     ast::Expr::MethodCallExpr(it) => {\n@@ -229,7 +240,7 @@ fn hints(\n                     ast::Expr::ClosureExpr(it) => closure_ret_hints(hints, sema, &famous_defs, config, file_id, it),\n                     // We could show reborrows for all expressions, but usually that is just noise to the user\n                     // and the main point here is to show why \"moving\" a mutable reference doesn't necessarily move it\n-                    ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n+                    // ast::Expr::PathExpr(_) => reborrow_hints(hints, sema, config, &expr),\n                     _ => None,\n                 }\n             },\n@@ -617,30 +628,95 @@ fn closure_ret_hints(\n     Some(())\n }\n \n-fn reborrow_hints(\n+fn adjustment_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<'_, RootDatabase>,\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n-    if config.reborrow_hints == ReborrowHints::Never {\n+    if config.adjustment_hints == AdjustmentHints::Never {\n+        return None;\n+    }\n+\n+    if let ast::Expr::ParenExpr(_) = expr {\n+        // These inherit from the inner expression which would result in duplicate hints\n         return None;\n     }\n \n+    let parent = expr.syntax().parent().and_then(ast::Expr::cast);\n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n-    let mutability = sema.is_implicit_reborrow(desc_expr)?;\n-    let label = match mutability {\n-        hir::Mutability::Shared if config.reborrow_hints != ReborrowHints::MutableOnly => \"&*\",\n-        hir::Mutability::Mut => \"&mut *\",\n-        _ => return None,\n+    let adjustments = sema.expr_adjustments(desc_expr).filter(|it| !it.is_empty())?;\n+    let needs_parens = match parent {\n+        Some(parent) => {\n+            match parent {\n+                ast::Expr::AwaitExpr(_)\n+                | ast::Expr::CallExpr(_)\n+                | ast::Expr::CastExpr(_)\n+                | ast::Expr::FieldExpr(_)\n+                | ast::Expr::MethodCallExpr(_)\n+                | ast::Expr::TryExpr(_) => true,\n+                // FIXME: shorthands need special casing, though not sure if adjustments are even valid there\n+                ast::Expr::RecordExpr(_) => false,\n+                ast::Expr::IndexExpr(index) => index.base().as_ref() == Some(expr),\n+                _ => false,\n+            }\n+        }\n+        None => false,\n     };\n-    acc.push(InlayHint {\n-        range: expr.syntax().text_range(),\n-        kind: InlayKind::ImplicitReborrowHint,\n-        label: label.to_string().into(),\n-        tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n-    });\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHint,\n+            label: \"(\".into(),\n+            tooltip: None,\n+        });\n+    }\n+    for adjustment in adjustments.into_iter().rev() {\n+        // FIXME: Add some nicer tooltips to each of these\n+        let text = match adjustment {\n+            Adjust::NeverToAny if config.adjustment_hints == AdjustmentHints::Always => {\n+                \"<never-to-any>\"\n+            }\n+            Adjust::Deref(None) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Mut))) => \"*\",\n+            Adjust::Deref(Some(OverloadedDeref(Mutability::Shared))) => \"*\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Shared)) => \"&\",\n+            Adjust::Borrow(AutoBorrow::Ref(Mutability::Mut)) => \"&mut \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Shared)) => \"&raw const \",\n+            Adjust::Borrow(AutoBorrow::RawPtr(Mutability::Mut)) => \"&raw mut \",\n+            // some of these could be represented via `as` casts, but that's not too nice and\n+            // handling everything as a prefix expr makes the `(` and `)` insertion easier\n+            Adjust::Pointer(cast) if config.adjustment_hints == AdjustmentHints::Always => {\n+                match cast {\n+                    PointerCast::ReifyFnPointer => \"<fn-item-to-fn-pointer>\",\n+                    PointerCast::UnsafeFnPointer => \"<safe-fn-pointer-to-unsafe-fn-pointer>\",\n+                    PointerCast::ClosureFnPointer(Safety::Unsafe) => {\n+                        \"<closure-to-unsafe-fn-pointer>\"\n+                    }\n+                    PointerCast::ClosureFnPointer(Safety::Safe) => \"<closure-to-fn-pointer>\",\n+                    PointerCast::MutToConstPointer => \"<mut-ptr-to-const-ptr>\",\n+                    PointerCast::ArrayToPointer => \"<array-ptr-to-element-ptr>\",\n+                    PointerCast::Unsize => \"<unsize>\",\n+                }\n+            }\n+            _ => continue,\n+        };\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHint,\n+            label: text.into(),\n+            tooltip: None,\n+        });\n+    }\n+    if needs_parens {\n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::AdjustmentHintClosingParenthesis,\n+            label: \")\".into(),\n+            tooltip: None,\n+        });\n+    }\n     Some(())\n }\n \n@@ -1218,7 +1294,7 @@ mod tests {\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n-    use crate::inlay_hints::ReborrowHints;\n+    use crate::inlay_hints::AdjustmentHints;\n     use crate::{fixture, inlay_hints::InlayHintsConfig, LifetimeElisionHints};\n \n     use super::ClosureReturnTypeHints;\n@@ -1230,7 +1306,7 @@ mod tests {\n         chaining_hints: false,\n         lifetime_elision_hints: LifetimeElisionHints::Never,\n         closure_return_type_hints: ClosureReturnTypeHints::Never,\n-        reborrow_hints: ReborrowHints::Always,\n+        adjustment_hints: AdjustmentHints::Never,\n         binding_mode_hints: false,\n         hide_named_constructor_hints: false,\n         hide_closure_initialization_hints: false,\n@@ -1242,7 +1318,6 @@ mod tests {\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n-        reborrow_hints: ReborrowHints::Always,\n         closure_return_type_hints: ClosureReturnTypeHints::WithBlock,\n         binding_mode_hints: true,\n         lifetime_elision_hints: LifetimeElisionHints::Always,\n@@ -2845,48 +2920,6 @@ impl () {\n         );\n     }\n \n-    #[test]\n-    fn hints_implicit_reborrow() {\n-        check_with_config(\n-            InlayHintsConfig {\n-                reborrow_hints: ReborrowHints::Always,\n-                parameter_hints: true,\n-                ..DISABLED_CONFIG\n-            },\n-            r#\"\n-fn __() {\n-    let unique = &mut ();\n-    let r_mov = unique;\n-    let foo: &mut _ = unique;\n-                    //^^^^^^ &mut *\n-    ref_mut_id(unique);\n-             //^^^^^^ mut_ref\n-             //^^^^^^ &mut *\n-    let shared = ref_id(unique);\n-                      //^^^^^^ shared_ref\n-                      //^^^^^^ &*\n-    let mov = shared;\n-    let r_mov: &_ = shared;\n-    ref_id(shared);\n-         //^^^^^^ shared_ref\n-\n-    identity(unique);\n-    identity(shared);\n-}\n-fn identity<T>(t: T) -> T {\n-    t\n-}\n-fn ref_mut_id(mut_ref: &mut ()) -> &mut () {\n-    mut_ref\n-  //^^^^^^^ &mut *\n-}\n-fn ref_id(shared_ref: &()) -> &() {\n-    shared_ref\n-}\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn hints_binding_modes() {\n         check_with_config(\n@@ -2994,4 +3027,76 @@ fn f() {\n \"#,\n         );\n     }\n+\n+    #[test]\n+    fn adjustment_hints() {\n+        check_with_config(\n+            InlayHintsConfig { adjustment_hints: AdjustmentHints::Always, ..DISABLED_CONFIG },\n+            r#\"\n+//- minicore: coerce_unsized\n+fn main() {\n+    let _: u32         = loop {};\n+                       //^^^^^^^<never-to-any>\n+    let _: &u32        = &mut 0;\n+                       //^^^^^^&\n+                       //^^^^^^*\n+    let _: &mut u32    = &mut 0;\n+                       //^^^^^^&mut $\n+                       //^^^^^^*\n+    let _: *const u32  = &mut 0;\n+                       //^^^^^^&raw const $\n+                       //^^^^^^*\n+    let _: *mut u32    = &mut 0;\n+                       //^^^^^^&raw mut $\n+                       //^^^^^^*\n+    let _: fn()        = main;\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main;\n+                       //^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+                       //^^^^<fn-item-to-fn-pointer>\n+    let _: unsafe fn() = main as fn();\n+                       //^^^^^^^^^^^^<safe-fn-pointer-to-unsafe-fn-pointer>\n+    let _: fn()        = || {};\n+                       //^^^^^<closure-to-fn-pointer>\n+    let _: unsafe fn() = || {};\n+                       //^^^^^<closure-to-unsafe-fn-pointer>\n+    let _: *const u32  = &mut 0u32 as *mut u32;\n+                       //^^^^^^^^^^^^^^^^^^^^^<mut-ptr-to-const-ptr>\n+    let _: &mut [_]    = &mut [0; 0];\n+                       //^^^^^^^^^^^<unsize>\n+                       //^^^^^^^^^^^&mut $\n+                       //^^^^^^^^^^^*\n+\n+    Struct.consume();\n+    Struct.by_ref();\n+  //^^^^^^(\n+  //^^^^^^&\n+  //^^^^^^)\n+    Struct.by_ref_mut();\n+  //^^^^^^(\n+  //^^^^^^&mut $\n+  //^^^^^^)\n+\n+    (&Struct).consume();\n+   //^^^^^^^*\n+    (&Struct).by_ref();\n+\n+    (&mut Struct).consume();\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref();\n+   //^^^^^^^^^^^&\n+   //^^^^^^^^^^^*\n+    (&mut Struct).by_ref_mut();\n+}\n+\n+#[derive(Copy, Clone)]\n+struct Struct;\n+impl Struct {\n+    fn consume(self) {}\n+    fn by_ref(&self) {}\n+    fn by_ref_mut(&mut self) {}\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "568c53f8bdbfa3cf63336150187e2240cf8b7b26", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -81,8 +81,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n-        InlayTooltip, LifetimeElisionHints, ReborrowHints,\n+        AdjustmentHints, ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig,\n+        InlayKind, InlayTooltip, LifetimeElisionHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "6ebd6f713fb71322b7a0943faa14b76b38bcb202", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -111,7 +111,7 @@ impl StaticIndex<'_> {\n                     chaining_hints: true,\n                     closure_return_type_hints: crate::ClosureReturnTypeHints::WithBlock,\n                     lifetime_elision_hints: crate::LifetimeElisionHints::Never,\n-                    reborrow_hints: crate::ReborrowHints::Never,\n+                    adjustment_hints: crate::AdjustmentHints::Never,\n                     hide_named_constructor_hints: false,\n                     hide_closure_initialization_hints: false,\n                     param_names_for_lifetime_elision_hints: false,"}, {"sha": "d642cd9b928ed7941f0382c397ab88d540f8771d", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 39, "deletions": 5, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -261,6 +261,7 @@ config_data! {\n         files_excludeDirs: Vec<PathBuf> = \"[]\",\n         /// Controls file watching implementation.\n         files_watcher: FilesWatcherDef = \"\\\"client\\\"\",\n+\n         /// Enables highlighting of related references while the cursor is on `break`, `loop`, `while`, or `for` keywords.\n         highlightRelated_breakPoints_enable: bool = \"true\",\n         /// Enables highlighting of all exit points while the cursor is on any `return`, `?`, `fn`, or return type arrow (`->`).\n@@ -320,6 +321,8 @@ config_data! {\n         inlayHints_closingBraceHints_minLines: usize               = \"25\",\n         /// Whether to show inlay type hints for return types of closures.\n         inlayHints_closureReturnTypeHints_enable: ClosureReturnTypeHintsDef  = \"\\\"never\\\"\",\n+        /// Whether to show inlay hints for type adjustments.\n+        inlayHints_expressionAdjustmentHints_enable: AdjustmentHintsDef = \"\\\"never\\\"\",\n         /// Whether to show inlay type hints for elided lifetimes in function signatures.\n         inlayHints_lifetimeElisionHints_enable: LifetimeElisionDef = \"\\\"never\\\"\",\n         /// Whether to prefer using parameter names as the name for elided lifetime hints if possible.\n@@ -329,7 +332,8 @@ config_data! {\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n         inlayHints_parameterHints_enable: bool                     = \"true\",\n-        /// Whether to show inlay type hints for compiler inserted reborrows.\n+        /// Whether to show inlay hints for compiler inserted reborrows.\n+        /// This setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\n         inlayHints_reborrowHints_enable: ReborrowHintsDef          = \"\\\"never\\\"\",\n         /// Whether to render leading colons for type hints, and trailing colons for parameter hints.\n         inlayHints_renderColons: bool                              = \"true\",\n@@ -1200,10 +1204,15 @@ impl Config {\n             hide_closure_initialization_hints: self\n                 .data\n                 .inlayHints_typeHints_hideClosureInitialization,\n-            reborrow_hints: match self.data.inlayHints_reborrowHints_enable {\n-                ReborrowHintsDef::Always => ide::ReborrowHints::Always,\n-                ReborrowHintsDef::Never => ide::ReborrowHints::Never,\n-                ReborrowHintsDef::Mutable => ide::ReborrowHints::MutableOnly,\n+            adjustment_hints: match self.data.inlayHints_expressionAdjustmentHints_enable {\n+                AdjustmentHintsDef::Always => ide::AdjustmentHints::Always,\n+                AdjustmentHintsDef::Never => match self.data.inlayHints_reborrowHints_enable {\n+                    ReborrowHintsDef::Always | ReborrowHintsDef::Mutable => {\n+                        ide::AdjustmentHints::ReborrowOnly\n+                    }\n+                    ReborrowHintsDef::Never => ide::AdjustmentHints::Never,\n+                },\n+                AdjustmentHintsDef::Reborrow => ide::AdjustmentHints::ReborrowOnly,\n             },\n             binding_mode_hints: self.data.inlayHints_bindingModeHints_enable,\n             param_names_for_lifetime_elision_hints: self\n@@ -1538,6 +1547,7 @@ mod de_unit_v {\n     named_unit_variant!(all);\n     named_unit_variant!(skip_trivial);\n     named_unit_variant!(mutable);\n+    named_unit_variant!(reborrow);\n     named_unit_variant!(with_block);\n }\n \n@@ -1687,6 +1697,17 @@ enum ReborrowHintsDef {\n     Mutable,\n }\n \n+#[derive(Deserialize, Debug, Clone)]\n+#[serde(untagged)]\n+enum AdjustmentHintsDef {\n+    #[serde(deserialize_with = \"true_or_always\")]\n+    Always,\n+    #[serde(deserialize_with = \"false_or_never\")]\n+    Never,\n+    #[serde(deserialize_with = \"de_unit_v::reborrow\")]\n+    Reborrow,\n+}\n+\n #[derive(Deserialize, Debug, Clone)]\n #[serde(rename_all = \"snake_case\")]\n enum FilesWatcherDef {\n@@ -1996,6 +2017,19 @@ fn field_props(field: &str, ty: &str, doc: &[&str], default: &str) -> serde_json\n                 \"Only show mutable reborrow hints.\"\n             ]\n         },\n+        \"AdjustmentHintsDef\" => set! {\n+            \"type\": \"string\",\n+            \"enum\": [\n+                \"always\",\n+                \"never\",\n+                \"reborrow\"\n+            ],\n+            \"enumDescriptions\": [\n+                \"Always show all adjustment hints.\",\n+                \"Never show adjustment hints.\",\n+                \"Only show auto borrow and dereference adjustment hints.\"\n+            ]\n+        },\n         \"CargoFeaturesDef\" => set! {\n             \"anyOf\": [\n                 {"}, {"sha": "6f44a1de636d74674a312ee2358f9f3ac6ad46fe", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -440,32 +440,35 @@ pub(crate) fn inlay_hint(\n     Ok(lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n-            InlayKind::ParameterHint\n-            | InlayKind::ImplicitReborrowHint\n-            | InlayKind::BindingModeHint => position(line_index, inlay_hint.range.start()),\n+            InlayKind::ParameterHint | InlayKind::AdjustmentHint | InlayKind::BindingModeHint => {\n+                position(line_index, inlay_hint.range.start())\n+            }\n             // after annotated thing\n             InlayKind::ClosureReturnTypeHint\n             | InlayKind::TypeHint\n             | InlayKind::ChainingHint\n             | InlayKind::GenericParamListHint\n+            | InlayKind::AdjustmentHintClosingParenthesis\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n             InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n-            InlayKind::BindingModeHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::BindingModeHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::LifetimeHint\n             | InlayKind::ParameterHint => false,\n         }),\n         padding_right: Some(match inlay_hint.kind {\n-            InlayKind::ChainingHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::ChainingHint\n             | InlayKind::ClosureReturnTypeHint\n             | InlayKind::GenericParamListHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::TypeHint\n             | InlayKind::ClosingBraceHint => false,\n             InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n@@ -476,10 +479,11 @@ pub(crate) fn inlay_hint(\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n                 Some(lsp_types::InlayHintKind::TYPE)\n             }\n-            InlayKind::BindingModeHint\n+            InlayKind::AdjustmentHintClosingParenthesis\n+            | InlayKind::BindingModeHint\n             | InlayKind::GenericParamListHint\n             | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::AdjustmentHint\n             | InlayKind::ClosingBraceHint => None,\n         },\n         text_edits: None,"}, {"sha": "da8e62980789ef3cf3fa8362d617d30eb6f0704c", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -450,6 +450,11 @@ to always show them).\n --\n Whether to show inlay type hints for return types of closures.\n --\n+[[rust-analyzer.inlayHints.expressionAdjustmentHints.enable]]rust-analyzer.inlayHints.expressionAdjustmentHints.enable (default: `\"never\"`)::\n++\n+--\n+Whether to show inlay hints for type adjustments.\n+--\n [[rust-analyzer.inlayHints.lifetimeElisionHints.enable]]rust-analyzer.inlayHints.lifetimeElisionHints.enable (default: `\"never\"`)::\n +\n --\n@@ -474,7 +479,8 @@ site.\n [[rust-analyzer.inlayHints.reborrowHints.enable]]rust-analyzer.inlayHints.reborrowHints.enable (default: `\"never\"`)::\n +\n --\n-Whether to show inlay type hints for compiler inserted reborrows.\n+Whether to show inlay hints for compiler inserted reborrows.\n+This setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\n --\n [[rust-analyzer.inlayHints.renderColons]]rust-analyzer.inlayHints.renderColons (default: `true`)::\n +"}, {"sha": "75e94af6fd249b7f5607301f93237b28748bb3d3", "filename": "editors/code/package.json", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b0e56ef5e82791a9d41757d0c6c0067109f1c752/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b0e56ef5e82791a9d41757d0c6c0067109f1c752/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b0e56ef5e82791a9d41757d0c6c0067109f1c752", "patch": "@@ -935,6 +935,21 @@\n                         \"Only show type hints for return types of closures with blocks.\"\n                     ]\n                 },\n+                \"rust-analyzer.inlayHints.expressionAdjustmentHints.enable\": {\n+                    \"markdownDescription\": \"Whether to show inlay hints for type adjustments.\",\n+                    \"default\": \"never\",\n+                    \"type\": \"string\",\n+                    \"enum\": [\n+                        \"always\",\n+                        \"never\",\n+                        \"reborrow\"\n+                    ],\n+                    \"enumDescriptions\": [\n+                        \"Always show all adjustment hints.\",\n+                        \"Never show adjustment hints.\",\n+                        \"Only show auto borrow and dereference adjustment hints.\"\n+                    ]\n+                },\n                 \"rust-analyzer.inlayHints.lifetimeElisionHints.enable\": {\n                     \"markdownDescription\": \"Whether to show inlay type hints for elided lifetimes in function signatures.\",\n                     \"default\": \"never\",\n@@ -970,7 +985,7 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"rust-analyzer.inlayHints.reborrowHints.enable\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for compiler inserted reborrows.\",\n+                    \"markdownDescription\": \"Whether to show inlay hints for compiler inserted reborrows.\\nThis setting is deprecated in favor of #rust-analyzer.inlayHints.expressionAdjustmentHints.enable#.\",\n                     \"default\": \"never\",\n                     \"type\": \"string\",\n                     \"enum\": ["}]}