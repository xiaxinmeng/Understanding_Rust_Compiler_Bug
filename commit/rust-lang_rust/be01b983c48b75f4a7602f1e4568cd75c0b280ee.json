{"sha": "be01b983c48b75f4a7602f1e4568cd75c0b280ee", "node_id": "C_kwDOAAsO6NoAKGJlMDFiOTgzYzQ4Yjc1ZjRhNzYwMmYxZTQ1NjhjZDc1YzBiMjgwZWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T09:23:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-23T09:23:07Z"}, "message": "Auto merge of #10533 - Nilstrieb:cache, r=dswij\n\nSignificantly optimize `significant_drop_tightening`\n\nThe lint is very slow as it doesn't cache the deeply nested check for the attribute. If we cache it, we can reduce the time spent on checking `rustc_borrowck` from 28s to 9s, which is a nice improvement. In the profile, the time inside `has_sig_drop_attr` goes from 66% to 0.2%, which is a lot more reasonable.\n\n<details>\n<summary>Flame graphs</summary>\n\nBefore (all the tall `clippy` towers are `has_sig_drop_attr`):\n![before](https://user-images.githubusercontent.com/48135649/227037243-bcd93bbe-a4ad-45c3-be25-2b021b12a5c0.svg)\n\nAfter:\n![after](https://user-images.githubusercontent.com/48135649/227040322-8d3f0448-18e3-4923-8187-c72df324a3fa.svg)\n</details>\n\nFixes #10532\n\nchangelog: [`significant_drop_tightening`]: significantly optimized", "tree": {"sha": "b50da7f94688a988e2f159b84a71a634d1892526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b50da7f94688a988e2f159b84a71a634d1892526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be01b983c48b75f4a7602f1e4568cd75c0b280ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be01b983c48b75f4a7602f1e4568cd75c0b280ee", "html_url": "https://github.com/rust-lang/rust/commit/be01b983c48b75f4a7602f1e4568cd75c0b280ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be01b983c48b75f4a7602f1e4568cd75c0b280ee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d1e72308e5bcdf5abe95c1d29dfe82524940061", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d1e72308e5bcdf5abe95c1d29dfe82524940061", "html_url": "https://github.com/rust-lang/rust/commit/1d1e72308e5bcdf5abe95c1d29dfe82524940061"}, {"sha": "966d5b0e348c9bd29eb1d9ddc2c2cf42555a25b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/966d5b0e348c9bd29eb1d9ddc2c2cf42555a25b7", "html_url": "https://github.com/rust-lang/rust/commit/966d5b0e348c9bd29eb1d9ddc2c2cf42555a25b7"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "c3e99aa0055ab4d747113d3242854bc64544d7e9", "filename": "clippy_lints/src/significant_drop_tightening.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/be01b983c48b75f4a7602f1e4568cd75c0b280ee/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be01b983c48b75f4a7602f1e4568cd75c0b280ee/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsignificant_drop_tightening.rs?ref=be01b983c48b75f4a7602f1e4568cd75c0b280ee", "patch": "@@ -1,9 +1,9 @@\n-use crate::FxHashSet;\n use clippy_utils::{\n     diagnostics::span_lint_and_then,\n     get_attr,\n     source::{indent_of, snippet},\n };\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir::{\n     self as hir,\n@@ -58,6 +58,7 @@ impl_lint_pass!(SignificantDropTightening<'_> => [SIGNIFICANT_DROP_TIGHTENING]);\n pub struct SignificantDropTightening<'tcx> {\n     /// Auxiliary structure used to avoid having to verify the same type multiple times.\n     seen_types: FxHashSet<Ty<'tcx>>,\n+    type_cache: FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'tcx> SignificantDropTightening<'tcx> {\n@@ -118,7 +119,7 @@ impl<'tcx> SignificantDropTightening<'tcx> {\n         stmt: &hir::Stmt<'_>,\n         cb: impl Fn(&mut SigDropAuxParams),\n     ) {\n-        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types);\n+        let mut sig_drop_finder = SigDropFinder::new(cx, &mut self.seen_types, &mut self.type_cache);\n         sig_drop_finder.visit_expr(expr);\n         if sig_drop_finder.has_sig_drop {\n             cb(sdap);\n@@ -296,15 +297,24 @@ impl Default for SigDropAuxParams {\n struct SigDropChecker<'cx, 'sdt, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n     seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+    type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n-    pub(crate) fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    pub(crate) fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         seen_types.clear();\n-        Self { cx, seen_types }\n+        Self {\n+            cx,\n+            seen_types,\n+            type_cache,\n+        }\n     }\n \n-    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+    pub(crate) fn has_sig_drop_attr_uncached(&mut self, ty: Ty<'tcx>) -> bool {\n         if let Some(adt) = ty.ty_adt_def() {\n             let mut iter = get_attr(\n                 self.cx.sess(),\n@@ -340,6 +350,16 @@ impl<'cx, 'sdt, 'tcx> SigDropChecker<'cx, 'sdt, 'tcx> {\n         }\n     }\n \n+    pub(crate) fn has_sig_drop_attr(&mut self, ty: Ty<'tcx>) -> bool {\n+        // The borrow checker prevents us from using something fancier like or_insert_with.\n+        if let Some(ty) = self.type_cache.get(&ty) {\n+            return *ty;\n+        }\n+        let value = self.has_sig_drop_attr_uncached(ty);\n+        self.type_cache.insert(ty, value);\n+        value\n+    }\n+\n     fn has_seen_ty(&mut self, ty: Ty<'tcx>) -> bool {\n         !self.seen_types.insert(ty)\n     }\n@@ -353,11 +373,15 @@ struct SigDropFinder<'cx, 'sdt, 'tcx> {\n }\n \n impl<'cx, 'sdt, 'tcx> SigDropFinder<'cx, 'sdt, 'tcx> {\n-    fn new(cx: &'cx LateContext<'tcx>, seen_types: &'sdt mut FxHashSet<Ty<'tcx>>) -> Self {\n+    fn new(\n+        cx: &'cx LateContext<'tcx>,\n+        seen_types: &'sdt mut FxHashSet<Ty<'tcx>>,\n+        type_cache: &'sdt mut FxHashMap<Ty<'tcx>, bool>,\n+    ) -> Self {\n         Self {\n             cx,\n             has_sig_drop: false,\n-            sig_drop_checker: SigDropChecker::new(cx, seen_types),\n+            sig_drop_checker: SigDropChecker::new(cx, seen_types, type_cache),\n         }\n     }\n }"}]}