{"sha": "9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjFkNWM3M2E2N2UwOTM2ZjcxYWJlNmVhY2NlZjhkMGI0YmQyNWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T08:20:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T09:57:01Z"}, "message": "multi-variant enums are tricky", "tree": {"sha": "0b5b6f3359c894b0f69195ecbd176753fb2a5b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b5b6f3359c894b0f69195ecbd176753fb2a5b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e", "html_url": "https://github.com/rust-lang/rust/commit/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d242b3f9098fe13518da4442692f29915cf2da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d242b3f9098fe13518da4442692f29915cf2da4", "html_url": "https://github.com/rust-lang/rust/commit/0d242b3f9098fe13518da4442692f29915cf2da4"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "74cff1bab0f814c53786b5af146619cb03c3d97e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9ab1d5c73a67e0936f71abe6eaccef8d0b4bd25e", "patch": "@@ -1971,14 +1971,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                                 })\n                             })\n                         }\n+                        // Multi-variant enums are tricky: if all but one variant are\n+                        // uninhabited, we might actually do layout like for a single-variant\n+                        // enum, and then even leaving them uninitialized could be okay.\n                         _ => None, // Conservative fallback for multi-variant enum.\n                     }\n                 }\n                 Tuple(..) => {\n                     // Proceed recursively, check all fields.\n                     ty.tuple_fields().find_map(|field| ty_find_init_error(tcx, field, init))\n                 }\n-                // FIXME: *Only for `mem::uninitialized`*, we could also warn for multivariant enum.\n                 // Conservative fallback.\n                 _ => None,\n             }"}]}