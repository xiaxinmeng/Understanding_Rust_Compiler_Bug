{"sha": "ecce58c6fdc54dda860d03e12a0de93cad5b16d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2U1OGM2ZmRjNTRkZGE4NjBkMDNlMTJhMGRlOTNjYWQ1YjE2ZDE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T19:16:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-26T19:16:16Z"}, "message": "auto merge of #15762 : nham/rust/ringbuf_docs, r=alexcrichton\n\nThis adds examples for get(), get_mut(), swap(), iter() and mut_iter()", "tree": {"sha": "9312045e03db743006d802171f920d89aaf54ee2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9312045e03db743006d802171f920d89aaf54ee2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecce58c6fdc54dda860d03e12a0de93cad5b16d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecce58c6fdc54dda860d03e12a0de93cad5b16d1", "html_url": "https://github.com/rust-lang/rust/commit/ecce58c6fdc54dda860d03e12a0de93cad5b16d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecce58c6fdc54dda860d03e12a0de93cad5b16d1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4dfb7d84c2af1e3bb7b6efe41c22c4ab17118e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dfb7d84c2af1e3bb7b6efe41c22c4ab17118e8", "html_url": "https://github.com/rust-lang/rust/commit/d4dfb7d84c2af1e3bb7b6efe41c22c4ab17118e8"}, {"sha": "ebe809712884d8952c49a74041a9b115c19eb588", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebe809712884d8952c49a74041a9b115c19eb588", "html_url": "https://github.com/rust-lang/rust/commit/ebe809712884d8952c49a74041a9b115c19eb588"}], "stats": {"total": 66, "additions": 66, "deletions": 0}, "files": [{"sha": "dcb8628c5a64840cee91ee2d6a4385b09473f566", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/ecce58c6fdc54dda860d03e12a0de93cad5b16d1/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecce58c6fdc54dda860d03e12a0de93cad5b16d1/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=ecce58c6fdc54dda860d03e12a0de93cad5b16d1", "patch": "@@ -133,6 +133,18 @@ impl<T> RingBuf<T> {\n     /// Retrieve an element in the RingBuf by index\n     ///\n     /// Fails if there is no element with the given index\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf = RingBuf::new();\n+    /// buf.push(3i);\n+    /// buf.push(4);\n+    /// buf.push(5);\n+    /// assert_eq!(buf.get(1), &4);\n+    /// ```\n     pub fn get<'a>(&'a self, i: uint) -> &'a T {\n         let idx = self.raw_index(i);\n         match *self.elts.get(idx) {\n@@ -144,6 +156,19 @@ impl<T> RingBuf<T> {\n     /// Retrieve an element in the RingBuf by index\n     ///\n     /// Fails if there is no element with the given index\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf = RingBuf::new();\n+    /// buf.push(3i);\n+    /// buf.push(4);\n+    /// buf.push(5);\n+    /// *buf.get_mut(1) = 7;\n+    /// assert_eq!(buf.get(1), &7);\n+    /// ```\n     pub fn get_mut<'a>(&'a mut self, i: uint) -> &'a mut T {\n         let idx = self.raw_index(i);\n         match *self.elts.get_mut(idx) {\n@@ -157,6 +182,20 @@ impl<T> RingBuf<T> {\n     /// `i` and `j` may be equal.\n     ///\n     /// Fails if there is no element with the given index\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf = RingBuf::new();\n+    /// buf.push(3i);\n+    /// buf.push(4);\n+    /// buf.push(5);\n+    /// buf.swap(0, 2);\n+    /// assert_eq!(buf.get(0), &5);\n+    /// assert_eq!(buf.get(2), &3);\n+    /// ```\n     pub fn swap(&mut self, i: uint, j: uint) {\n         assert!(i < self.len());\n         assert!(j < self.len());\n@@ -196,11 +235,38 @@ impl<T> RingBuf<T> {\n     }\n \n     /// Front-to-back iterator.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf = RingBuf::new();\n+    /// buf.push(5i);\n+    /// buf.push(3);\n+    /// buf.push(4);\n+    /// assert_eq!(buf.iter().collect::<Vec<&int>>().as_slice(), &[&5, &3, &4]);\n+    /// ```\n     pub fn iter<'a>(&'a self) -> Items<'a, T> {\n         Items{index: 0, rindex: self.nelts, lo: self.lo, elts: self.elts.as_slice()}\n     }\n \n     /// Front-to-back iterator which returns mutable values.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// use std::collections::RingBuf;\n+    ///\n+    /// let mut buf = RingBuf::new();\n+    /// buf.push(5i);\n+    /// buf.push(3);\n+    /// buf.push(4);\n+    /// for num in buf.mut_iter() {\n+    ///     *num = *num - 2;\n+    /// }\n+    /// assert_eq!(buf.mut_iter().collect::<Vec<&mut int>>().as_slice(), &[&mut 3, &mut 1, &mut 2]);\n+    /// ```\n     pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n         let start_index = raw_index(self.lo, self.elts.len(), 0);\n         let end_index = raw_index(self.lo, self.elts.len(), self.nelts);"}]}