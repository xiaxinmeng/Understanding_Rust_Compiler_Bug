{"sha": "7d298d1acecbd866be7b9e2c60ef86032bb2a502", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkMjk4ZDFhY2VjYmQ4NjZiZTdiOWUyYzYwZWY4NjAzMmJiMmE1MDI=", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@red-bean.com", "date": "2015-06-10T20:17:49Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@red-bean.com", "date": "2015-06-10T20:17:49Z"}, "message": "Fix examples for returning closures.", "tree": {"sha": "0822dcb771b7a3271f9c4ae8061ed911d477b241", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0822dcb771b7a3271f9c4ae8061ed911d477b241"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d298d1acecbd866be7b9e2c60ef86032bb2a502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d298d1acecbd866be7b9e2c60ef86032bb2a502", "html_url": "https://github.com/rust-lang/rust/commit/7d298d1acecbd866be7b9e2c60ef86032bb2a502", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d298d1acecbd866be7b9e2c60ef86032bb2a502/comments", "author": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a9570154dfbc4032cb3a6ba8b51c6256518dcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a9570154dfbc4032cb3a6ba8b51c6256518dcd", "html_url": "https://github.com/rust-lang/rust/commit/d8a9570154dfbc4032cb3a6ba8b51c6256518dcd"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "428897821cfcce2f2768c30928ecee9e0bebcf1b", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7d298d1acecbd866be7b9e2c60ef86032bb2a502/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/7d298d1acecbd866be7b9e2c60ef86032bb2a502/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=7d298d1acecbd866be7b9e2c60ef86032bb2a502", "patch": "@@ -324,37 +324,34 @@ first, it may seem strange, but we\u2019ll figure it out. Here\u2019s how you\u2019d prob\n try to return a closure from a function:\n \n ```rust,ignore\n-fn factory() -> (Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> (Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n This gives us these long, related errors:\n \n ```text\n error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-f = factory();\n-^\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a\n-constant size known at compile-time\n-f = factory();\n-^\n-error: the trait `core::marker::Sized` is not implemented for the type\n-`core::ops::Fn(i32) -> collections::vec::Vec<i32>` [E0277]\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-note: `core::ops::Fn(i32) -> collections::vec::Vec<i32>` does not have a constant size known at compile-time\n-factory() -> (Fn(i32) -> Vec<i32>) {\n-             ^~~~~~~~~~~~~~~~~~~~~\n-\n+`core::ops::Fn(i32) -> i32` [E0277]\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+fn factory() -> (Fn(i32) -> i32) {\n+                ^~~~~~~~~~~~~~~~\n+error: the trait `core::marker::Sized` is not implemented for the type `core::ops::Fn(i32) -> i32` [E0277]\n+let f = factory();\n+    ^\n+note: `core::ops::Fn(i32) -> i32` does not have a constant size known at compile-time\n+let f = factory();\n+    ^\n ```\n \n In order to return something from a function, Rust needs to know what\n@@ -364,16 +361,16 @@ way to give something a size is to take a reference to it, as references\n have a known size. So we\u2019d write this:\n \n ```rust,ignore\n-fn factory() -> &(Fn(i32) -> Vec<i32>) {\n-    let vec = vec![1, 2, 3];\n+fn factory() -> &(Fn(i32) -> i32) {\n+    let num = 5;\n \n-    |n| vec.push(n)\n+    |x| x + num\n }\n \n let f = factory();\n \n-let answer = f(4);\n-assert_eq!(vec![1, 2, 3, 4], answer);\n+let answer = f(1);\n+assert_eq!(6, answer);\n ```\n \n But we get another error:\n@@ -448,7 +445,8 @@ assert_eq!(6, answer);\n We use a trait object, by `Box`ing up the `Fn`. There\u2019s just one last problem:\n \n ```text\n-error: `num` does not live long enough\n+error: closure may outlive the current function, but it borrows `num`,\n+which is owned by the current function [E0373]\n Box::new(|x| x + num)\n          ^~~~~~~~~~~\n ```"}]}