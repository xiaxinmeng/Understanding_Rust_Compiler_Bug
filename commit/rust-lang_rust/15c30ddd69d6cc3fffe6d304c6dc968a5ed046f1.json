{"sha": "15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YzMwZGRkNjlkNmNjM2ZmZmU2ZDMwNGM2ZGM5NjhhNWVkMDQ2ZjE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-12T23:50:03Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T13:55:32Z"}, "message": "Stabilize the `never_type`, written `!`.", "tree": {"sha": "95bc3d210dafa100d70199d2730b0378584898e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95bc3d210dafa100d70199d2730b0378584898e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "html_url": "https://github.com/rust-lang/rust/commit/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "html_url": "https://github.com/rust-lang/rust/commit/f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}], "stats": {"total": 78, "additions": 26, "deletions": 52}, "files": [{"sha": "86dd77f10f324f5a84812685a19427679fdbce67", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -185,7 +185,7 @@ mod impls {\n         bool char\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Clone for ! {\n         #[inline]\n         fn clone(&self) -> Self {"}, {"sha": "1e2e595f1dd0a7035ee7dfdbdc8852861e3c5170", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -1128,24 +1128,24 @@ mod impls {\n \n     ord_impl! { char usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl PartialEq for ! {\n         fn eq(&self, _: &!) -> bool {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Eq for ! {}\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl PartialOrd for ! {\n         fn partial_cmp(&self, _: &!) -> Option<Ordering> {\n             *self\n         }\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Ord for ! {\n         fn cmp(&self, _: &!) -> Ordering {\n             *self"}, {"sha": "07dca9ad214ecca2265600105f2e43389247312f", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -1935,14 +1935,14 @@ macro_rules! fmt_refs {\n \n fmt_refs! { Debug, Display, Octal, Binary, LowerHex, UpperHex, LowerExp, UpperExp }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Debug for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Display for ! {\n     fn fmt(&self, _: &mut Formatter<'_>) -> Result {\n         *self"}, {"sha": "ec19392450a4bddbc8bb230343181fb7519a6765", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -85,7 +85,7 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n #![feature(no_core)]"}, {"sha": "86ee673cea941589af8af9b764ee3e02688f6e94", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -774,7 +774,7 @@ mod copy_impls {\n         bool char\n     }\n \n-    #[unstable(feature = \"never_type\", issue = \"35121\")]\n+    #[stable(feature = \"never_type\", since = \"1.41.0\")]\n     impl Copy for ! {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "c2f85b9535e787ec63356dffcb1df63edf742532", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -4728,7 +4728,7 @@ impl From<Infallible> for TryFromIntError {\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl From<!> for TryFromIntError {\n     fn from(never: !) -> TryFromIntError {\n         // Match rather than coerce to make sure that code like"}, {"sha": "1fc157eca3e896b525781474d9bf3b944c60c5c9", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -36,7 +36,7 @@\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n #![cfg_attr(windows, feature(libc))]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(exhaustive_patterns)]\n #![feature(overlapping_marker_traits)]\n #![feature(extern_types)]"}, {"sha": "2dea2216f380e7771ac5c41e7598768cf2ae06d5", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -2440,11 +2440,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     #[inline]\n     pub fn mk_diverging_default(self) -> Ty<'tcx> {\n-        if self.features().never_type {\n-            self.types.never\n-        } else {\n-            self.intern_tup(&[])\n-        }\n+        self.types.never\n     }\n \n     #[inline]"}, {"sha": "f2739a3b30c92926c67bdb3848cf061ff9f45e8d", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -8,7 +8,7 @@\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(in_band_lifetimes)]\n "}, {"sha": "b96a5e694dfc09fb49c5d5e584eb7804e9505884", "filename": "src/librustc_error_codes/error_codes/E0725.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0725.md?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -4,8 +4,8 @@ command line flags.\n Erroneous code example:\n \n ```ignore (can't specify compiler flags from doctests)\n-#![feature(never_type)] // error: the feature `never_type` is not in\n-                        // the list of allowed features\n+#![feature(specialization)] // error: the feature `specialization` is not in\n+                            // the list of allowed features\n ```\n \n Delete the offending feature attribute, or add it to the list of allowed"}, {"sha": "cbb6408126a4559db23d577fb5ba8bcffda8119d", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -16,7 +16,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(decl_macro)]\n #![feature(drain_filter)]\n #![feature(exhaustive_patterns)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(specialization)]\n #![feature(try_trait)]\n #![feature(unicode_internals)]"}, {"sha": "8f3e274b79fb0e9333869d50d45e5825bd895c89", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -3129,9 +3129,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     // Tries to apply a fallback to `ty` if it is an unsolved variable.\n-    // Non-numerics get replaced with ! or () (depending on whether\n-    // feature(never_type) is enabled, unconstrained ints with i32,\n-    // unconstrained floats with f64.\n+    // Non-numerics get replaced with `!`, unconstrained ints with `i32`,\n+    // unconstrained floats with `f64`.\n     // Fallback becomes very dubious if we have encountered type-checking errors.\n     // In that case, fallback to Error.\n     // The return value indicates whether fallback has occurred."}, {"sha": "0f147f92b5f7eefa68d234336f2b0d5181cb7a48", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -66,7 +66,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(slice_patterns)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n \n #![recursion_limit=\"256\"]\n "}, {"sha": "6ed2d4b8477caf0a5635447b70a104a4596c1fcb", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -14,7 +14,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]\n #![feature(drain_filter)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(unicode_internals)]\n \n #![recursion_limit=\"256\"]"}, {"sha": "13d83337f5f6f507dd38dceeb480e843396d1d27", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -11,7 +11,7 @@ Core encoding and decoding interfaces.\n #![feature(box_syntax)]\n #![feature(core_intrinsics)]\n #![feature(specialization)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![feature(associated_type_bounds)]\n #![cfg_attr(test, feature(test))]"}, {"sha": "45f1160ca794df5df0deda9adc2001f3ff8f7c52", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -465,7 +465,7 @@ impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     }\n }\n \n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n impl Error for ! {\n     fn description(&self) -> &str { *self }\n }"}, {"sha": "acf53f7f00348ca906662ab7d2ed304b285df2df", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -280,7 +280,7 @@\n #![feature(maybe_uninit_ref)]\n #![feature(maybe_uninit_slice)]\n #![feature(needs_panic_runtime)]\n-#![feature(never_type)]\n+#![cfg_attr(bootstrap, feature(never_type))]\n #![feature(nll)]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n #![feature(optin_builtin_traits)]"}, {"sha": "b4495588c99498a9a09370fc66d68e0efde44113", "filename": "src/libstd/primitive_docs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibstd%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprimitive_docs.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -71,7 +71,6 @@ mod prim_bool { }\n /// write:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # fn foo() -> u32 {\n /// let x: ! = {\n ///     return 123\n@@ -201,7 +200,6 @@ mod prim_bool { }\n /// for example:\n ///\n /// ```\n-/// #![feature(never_type)]\n /// # use std::fmt;\n /// # trait Debug {\n /// # fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result;\n@@ -239,7 +237,7 @@ mod prim_bool { }\n /// [`Default`]: default/trait.Default.html\n /// [`default()`]: default/trait.Default.html#tymethod.default\n ///\n-#[unstable(feature = \"never_type\", issue = \"35121\")]\n+#[stable(feature = \"never_type\", since = \"1.41.0\")]\n mod prim_never { }\n \n #[doc(primitive = \"char\")]"}, {"sha": "dab83f48a03aeef54ba3a9ad816160ca8448a171", "filename": "src/libsyntax/feature_gate/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Faccepted.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -253,6 +253,8 @@ declare_features! (\n     (accepted, const_constructor, \"1.40.0\", Some(61456), None),\n     /// Allows the use of `#[cfg(doctest)]`, set when rustdoc is collecting doctests.\n     (accepted, cfg_doctest, \"1.40.0\", Some(62210), None),\n+    /// Allows the `!` type. Does not imply 'exhaustive_patterns' any more.\n+    (accepted, never_type, \"1.41.0\", Some(35121), None),\n     /// Allows relaxing the coherence rules such that\n     /// `impl<T> ForeignTrait<LocalType> for ForeignType<T>` is permitted.\n     (accepted, re_rebalance_coherence, \"1.41.0\", Some(55437), None),"}, {"sha": "23718f562463a93de81331eaf55c5a051f4d1823", "filename": "src/libsyntax/feature_gate/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Factive.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -318,9 +318,6 @@ declare_features! (\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n \n-    /// Allows the `!` type. Does not imply 'exhaustive_patterns' (below) any more.\n-    (active, never_type, \"1.13.0\", Some(35121), None),\n-\n     /// Allows exhaustive pattern matching on types that contain uninhabited types.\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n "}, {"sha": "f966850254f9ad5a844bf00943cd5491bbf591ba", "filename": "src/libsyntax/feature_gate/check.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate%2Fcheck.rs?ref=15c30ddd69d6cc3fffe6d304c6dc968a5ed046f1", "patch": "@@ -521,25 +521,11 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_extern(bare_fn_ty.ext);\n             }\n-            ast::TyKind::Never => {\n-                gate_feature_post!(&self, never_type, ty.span,\n-                                   \"The `!` type is experimental\");\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)\n     }\n \n-    fn visit_fn_ret_ty(&mut self, ret_ty: &'a ast::FunctionRetTy) {\n-        if let ast::FunctionRetTy::Ty(ref output_ty) = *ret_ty {\n-            if let ast::TyKind::Never = output_ty.kind {\n-                // Do nothing.\n-            } else {\n-                self.visit_ty(output_ty)\n-            }\n-        }\n-    }\n-\n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n             ast::ExprKind::Box(_) => {\n@@ -567,10 +553,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e)\n     }\n \n-    fn visit_arm(&mut self, arm: &'a ast::Arm) {\n-        visit::walk_arm(self, arm)\n-    }\n-\n     fn visit_pat(&mut self, pattern: &'a ast::Pat) {\n         match &pattern.kind {\n             PatKind::Slice(pats) => {"}]}