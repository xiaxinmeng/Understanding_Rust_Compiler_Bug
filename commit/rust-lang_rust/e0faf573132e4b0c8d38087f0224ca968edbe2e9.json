{"sha": "e0faf573132e4b0c8d38087f0224ca968edbe2e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwZmFmNTczMTMyZTRiMGM4ZDM4MDg3ZjAyMjRjYTk2OGVkYmUyZTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-11T22:03:14Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-11T22:05:39Z"}, "message": "rustc: Factor out expr_ty() into expr_ann() and expr_ty()", "tree": {"sha": "c03fbf34fb1fb9027fe71abbc80e0d4297a93b38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c03fbf34fb1fb9027fe71abbc80e0d4297a93b38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0faf573132e4b0c8d38087f0224ca968edbe2e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0faf573132e4b0c8d38087f0224ca968edbe2e9", "html_url": "https://github.com/rust-lang/rust/commit/e0faf573132e4b0c8d38087f0224ca968edbe2e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0faf573132e4b0c8d38087f0224ca968edbe2e9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d218df02bfdb1010c21b003242449bae3f8eb13e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d218df02bfdb1010c21b003242449bae3f8eb13e", "html_url": "https://github.com/rust-lang/rust/commit/d218df02bfdb1010c21b003242449bae3f8eb13e"}], "stats": {"total": 83, "additions": 45, "deletions": 38}, "files": [{"sha": "b55f5156d90aa505280d6a76482254c7bbf59ce2", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/e0faf573132e4b0c8d38087f0224ca968edbe2e9/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0faf573132e4b0c8d38087f0224ca968edbe2e9/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e0faf573132e4b0c8d38087f0224ca968edbe2e9", "patch": "@@ -757,52 +757,59 @@ fn pat_ty(@ast.pat pat) -> @t {\n     fail;   // not reached\n }\n \n-fn expr_ty(@ast.expr expr) -> @t {\n+fn expr_ann(@ast.expr expr) -> option.t[ast.ann] {\n     alt (expr.node) {\n-        case (ast.expr_vec(_, _, ?ann))       { ret ann_to_type(ann); }\n-        case (ast.expr_tup(_, ?ann))          { ret ann_to_type(ann); }\n-        case (ast.expr_rec(_, _, ?ann))       { ret ann_to_type(ann); }\n-        case (ast.expr_bind(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_call(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_self_method(_, ?ann))  { ret ann_to_type(ann); }\n+        case (ast.expr_vec(_, _, ?ann))       { ret some[ast.ann](ann); }\n+        case (ast.expr_tup(_, ?ann))          { ret some[ast.ann](ann); }\n+        case (ast.expr_rec(_, _, ?ann))       { ret some[ast.ann](ann); }\n+        case (ast.expr_bind(_, _, ?ann))      { ret some[ast.ann](ann); }\n+        case (ast.expr_call(_, _, ?ann))      { ret some[ast.ann](ann); }\n+        case (ast.expr_self_method(_, ?ann))  { ret some[ast.ann](ann); }\n         case (ast.expr_spawn(_, _, _, _, ?ann))\n-                                              { ret ann_to_type(ann); }\n-        case (ast.expr_binary(_, _, _, ?ann)) { ret ann_to_type(ann); }\n-        case (ast.expr_unary(_, _, ?ann))     { ret ann_to_type(ann); }\n-        case (ast.expr_lit(_, ?ann))          { ret ann_to_type(ann); }\n-        case (ast.expr_cast(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_if(_, _, _, ?ann))     { ret ann_to_type(ann); }\n-        case (ast.expr_for(_, _, _, ?ann))    { ret ann_to_type(ann); }\n+                                              { ret some[ast.ann](ann); }\n+        case (ast.expr_binary(_, _, _, ?ann)) { ret some[ast.ann](ann); }\n+        case (ast.expr_unary(_, _, ?ann))     { ret some[ast.ann](ann); }\n+        case (ast.expr_lit(_, ?ann))          { ret some[ast.ann](ann); }\n+        case (ast.expr_cast(_, _, ?ann))      { ret some[ast.ann](ann); }\n+        case (ast.expr_if(_, _, _, ?ann))     { ret some[ast.ann](ann); }\n+        case (ast.expr_for(_, _, _, ?ann))    { ret some[ast.ann](ann); }\n         case (ast.expr_for_each(_, _, _, ?ann))\n-                                              { ret ann_to_type(ann); }\n-        case (ast.expr_while(_, _, ?ann))     { ret ann_to_type(ann); }\n-        case (ast.expr_do_while(_, _, ?ann))  { ret ann_to_type(ann); }\n-        case (ast.expr_alt(_, _, ?ann))       { ret ann_to_type(ann); }\n-        case (ast.expr_block(_, ?ann))        { ret ann_to_type(ann); }\n-        case (ast.expr_assign(_, _, ?ann))    { ret ann_to_type(ann); }\n+                                              { ret some[ast.ann](ann); }\n+        case (ast.expr_while(_, _, ?ann))     { ret some[ast.ann](ann); }\n+        case (ast.expr_do_while(_, _, ?ann))  { ret some[ast.ann](ann); }\n+        case (ast.expr_alt(_, _, ?ann))       { ret some[ast.ann](ann); }\n+        case (ast.expr_block(_, ?ann))        { ret some[ast.ann](ann); }\n+        case (ast.expr_assign(_, _, ?ann))    { ret some[ast.ann](ann); }\n         case (ast.expr_assign_op(_, _, _, ?ann))\n-                                              { ret ann_to_type(ann); }\n-        case (ast.expr_field(_, _, ?ann))     { ret ann_to_type(ann); }\n-        case (ast.expr_index(_, _, ?ann))     { ret ann_to_type(ann); }\n-        case (ast.expr_path(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_ext(_, _, _, _, ?ann)) { ret ann_to_type(ann); }\n-        case (ast.expr_port(?ann))            { ret ann_to_type(ann); }\n-        case (ast.expr_chan(_, ?ann))         { ret ann_to_type(ann); }\n-        case (ast.expr_send(_, _, ?ann))      { ret ann_to_type(ann); }\n-        case (ast.expr_recv(_, _, ?ann))      { ret ann_to_type(ann); }\n-\n-        case (ast.expr_fail(_))               { ret plain_ty(ty_nil); }\n-        case (ast.expr_break(_))              { ret plain_ty(ty_nil); }\n-        case (ast.expr_cont(_))               { ret plain_ty(ty_nil); }\n-        case (ast.expr_log(_,_))              { ret plain_ty(ty_nil); }\n-        case (ast.expr_check_expr(_,_))       { ret plain_ty(ty_nil); }\n-        case (ast.expr_ret(_,_))              { ret plain_ty(ty_nil); }\n-        case (ast.expr_put(_,_))              { ret plain_ty(ty_nil); }\n-        case (ast.expr_be(_,_))               { ret plain_ty(ty_nil); }\n+                                              { ret some[ast.ann](ann); }\n+        case (ast.expr_field(_, _, ?ann))     { ret some[ast.ann](ann); }\n+        case (ast.expr_index(_, _, ?ann))     { ret some[ast.ann](ann); }\n+        case (ast.expr_path(_, _, ?ann))      { ret some[ast.ann](ann); }\n+        case (ast.expr_ext(_, _, _, _, ?ann)) { ret some[ast.ann](ann); }\n+        case (ast.expr_port(?ann))            { ret some[ast.ann](ann); }\n+        case (ast.expr_chan(_, ?ann))         { ret some[ast.ann](ann); }\n+        case (ast.expr_send(_, _, ?ann))      { ret some[ast.ann](ann); }\n+        case (ast.expr_recv(_, _, ?ann))      { ret some[ast.ann](ann); }\n+\n+        case (ast.expr_fail(_))               { ret none[ast.ann]; }\n+        case (ast.expr_break(_))              { ret none[ast.ann]; }\n+        case (ast.expr_cont(_))               { ret none[ast.ann]; }\n+        case (ast.expr_log(_,_))              { ret none[ast.ann]; }\n+        case (ast.expr_check_expr(_,_))       { ret none[ast.ann]; }\n+        case (ast.expr_ret(_,_))              { ret none[ast.ann]; }\n+        case (ast.expr_put(_,_))              { ret none[ast.ann]; }\n+        case (ast.expr_be(_,_))               { ret none[ast.ann]; }\n     }\n     fail;\n }\n \n+fn expr_ty(@ast.expr expr) -> @t {\n+    alt (expr_ann(expr)) {\n+        case (none[ast.ann])     { ret plain_ty(ty_nil); }\n+        case (some[ast.ann](?a)) { ret ann_to_type(a); }\n+    }\n+}\n+\n // Expression utilities\n \n fn field_num(session.session sess, &span sp, &ast.ident id) -> uint {"}]}