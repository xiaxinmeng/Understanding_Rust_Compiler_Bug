{"sha": "3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjMjNhMGE4MzYxNjRlZDNhYzFiOTRiNTI2ZmY4ZjRlNzE1NzFlOGU=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-11T02:01:45Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-12T02:21:03Z"}, "message": "std: replace str::append with a method", "tree": {"sha": "a067e160673e4cc9e9eff19b7b29331328a86632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a067e160673e4cc9e9eff19b7b29331328a86632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "html_url": "https://github.com/rust-lang/rust/commit/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3", "html_url": "https://github.com/rust-lang/rust/commit/96cd61ad034cc9e88ab6a7845c3480dbc1ea62f3"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "6b4f1420c565582aeda0d0f819106acac372aba4", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "patch": "@@ -254,7 +254,7 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n     }\n \n     // write debugger script\n-    let script_str = str::append(cmds, \"\\nquit\\n\");\n+    let script_str = cmds.append(\"\\nquit\\n\");\n     debug!(\"script_str = %s\", script_str);\n     dump_output_file(config, testfile, script_str, \"debugger.script\");\n "}, {"sha": "e8145b37114ef06965e58bcf661142d3ac8d1dcf", "filename": "src/libstd/str.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c23a0a836164ed3ac1b94b526ff8f4e71571e8e/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=3c23a0a836164ed3ac1b94b526ff8f4e71571e8e", "patch": "@@ -154,14 +154,6 @@ pub fn push_str(lhs: &mut ~str, rhs: &str) {\n     lhs.push_str(rhs)\n }\n \n-/// Concatenate two strings together\n-#[inline(always)]\n-pub fn append(lhs: ~str, rhs: &str) -> ~str {\n-    let mut v = lhs;\n-    v.push_str_no_overallocate(rhs);\n-    v\n-}\n-\n #[allow(missing_doc)]\n pub trait StrVector {\n     pub fn concat(&self) -> ~str;\n@@ -1515,8 +1507,6 @@ pub mod raw {\n #[cfg(not(test))]\n pub mod traits {\n     use ops::Add;\n-    use str::append;\n-\n     impl<'self> Add<&'self str,~str> for ~str {\n         #[inline(always)]\n         fn add(&self, rhs: & &'self str) -> ~str {\n@@ -2100,6 +2090,7 @@ pub trait OwnedStr {\n     fn push_str_no_overallocate(&mut self, rhs: &str);\n     fn push_str(&mut self, rhs: &str);\n     fn push_char(&mut self, c: char);\n+    fn append(&self, rhs: &str) -> ~str; // FIXME #4850: this should consume self.\n     fn reserve(&mut self, n: uint);\n     fn reserve_at_least(&mut self, n: uint);\n }\n@@ -2197,6 +2188,14 @@ impl OwnedStr for ~str {\n             raw::set_len(self, new_len);\n         }\n     }\n+    /// Concatenate two strings together.\n+    #[inline]\n+    fn append(&self, rhs: &str) -> ~str {\n+        // FIXME #4850: this should consume self, but that causes segfaults\n+        let mut v = self.clone();\n+        v.push_str_no_overallocate(rhs);\n+        v\n+    }\n \n     /**\n      * Reserves capacity for exactly `n` bytes in the given string, not including\n@@ -2396,6 +2395,27 @@ mod tests {\n         assert_eq!(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\".rfind(|c: char| c == '\u534e'), Some(30u));\n     }\n \n+    #[test]\n+    fn test_push_str() {\n+        let mut s = ~\"\";\n+        s.push_str(\"\");\n+        assert_eq!(s.slice_from(0), \"\");\n+        s.push_str(\"abc\");\n+        assert_eq!(s.slice_from(0), \"abc\");\n+        s.push_str(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(s.slice_from(0), \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+    }\n+    #[test]\n+    fn test_append() {\n+        let mut s = ~\"\";\n+        s = s.append(\"\");\n+        assert_eq!(s.slice_from(0), \"\");\n+        s = s.append(\"abc\");\n+        assert_eq!(s.slice_from(0), \"abc\");\n+        s = s.append(\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+        assert_eq!(s.slice_from(0), \"abc\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\");\n+    }\n+\n     #[test]\n     fn test_pop_char() {\n         let mut data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";"}]}