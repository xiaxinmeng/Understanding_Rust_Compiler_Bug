{"sha": "acd484e51da873f5a545c81c6a9743a5dfe06c45", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZDQ4NGU1MWRhODczZjVhNTQ1YzgxYzZhOTc0M2E1ZGZlMDZjNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T19:33:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-25T19:33:52Z"}, "message": "Auto merge of #5641 - ThibsG:DocCommonTools, r=flip1995\n\nAdd common lint tools doc\n\nThis PR starts adding some documentation about linting tools.\n\n`Retrieving all methods of a type` is not covered at this time.\n\nfixes partially: #3843\n\nchangelog: none", "tree": {"sha": "172d9f9a2622af238872c268c14bfded52ac87ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/172d9f9a2622af238872c268c14bfded52ac87ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acd484e51da873f5a545c81c6a9743a5dfe06c45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acd484e51da873f5a545c81c6a9743a5dfe06c45", "html_url": "https://github.com/rust-lang/rust/commit/acd484e51da873f5a545c81c6a9743a5dfe06c45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acd484e51da873f5a545c81c6a9743a5dfe06c45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6de17b043dfdf942963f1b4e83dec4f8e4e2e06c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6de17b043dfdf942963f1b4e83dec4f8e4e2e06c", "html_url": "https://github.com/rust-lang/rust/commit/6de17b043dfdf942963f1b4e83dec4f8e4e2e06c"}, {"sha": "827041252c709dee70756633a33a13a0bacbd3a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/827041252c709dee70756633a33a13a0bacbd3a9", "html_url": "https://github.com/rust-lang/rust/commit/827041252c709dee70756633a33a13a0bacbd3a9"}], "stats": {"total": 153, "additions": 153, "deletions": 0}, "files": [{"sha": "8092be277cca01af4bfbf8905cee24e1bfc567c5", "filename": "doc/adding_lints.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acd484e51da873f5a545c81c6a9743a5dfe06c45/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/acd484e51da873f5a545c81c6a9743a5dfe06c45/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=acd484e51da873f5a545c81c6a9743a5dfe06c45", "patch": "@@ -465,6 +465,7 @@ Here are some pointers to things you are likely going to need for every lint:\n * [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n+* [Common tools for writing lints](common_tools_writing_lints.md) helps with common operations\n * [The rustc-dev-guide][rustc-dev-guide] explains a lot of internal compiler concepts\n * [The nightly rustc docs][nightly_docs] which has been linked to throughout\n   this guide"}, {"sha": "ed33b37c6bd1bb9598ec41cd46208b7df0f003d0", "filename": "doc/common_tools_writing_lints.md", "status": "added", "additions": 152, "deletions": 0, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/acd484e51da873f5a545c81c6a9743a5dfe06c45/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/acd484e51da873f5a545c81c6a9743a5dfe06c45/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=acd484e51da873f5a545c81c6a9743a5dfe06c45", "patch": "@@ -0,0 +1,152 @@\n+# Common tools for writing lints\n+\n+You may need following tooltips to catch up with common operations.\n+\n+- [Common tools for writing lints](#common-tools-for-writing-lints)\n+  - [Retrieving the type of an expression](#retrieving-the-type-of-an-expression)\n+  - [Checking if a type implements a specific trait](#checking-if-a-type-implements-a-specific-trait)\n+  - [Dealing with macros](#dealing-with-macros)\n+\n+Useful Rustc dev guide links:\n+- [Stages of compilation](https://rustc-dev-guide.rust-lang.org/compiler-src.html#the-main-stages-of-compilation)\n+- [Type checking](https://rustc-dev-guide.rust-lang.org/type-checking.html)\n+- [Ty module](https://rustc-dev-guide.rust-lang.org/ty.html)\n+\n+# Retrieving the type of an expression\n+\n+Sometimes you may want to retrieve the type `Ty` of an expression `Expr`, for example to answer following questions:\n+\n+- which type does this expression correspond to (using its [`TyKind`][TyKind])?\n+- is it a sized type? \n+- is it a primitive type?\n+- does it implement a trait?\n+\n+This operation is performed using the [`expr_ty()`][expr_ty] method from the [`TypeckTables`][TypeckTables] struct, \n+that gives you access to the underlying structure [`TyS`][TyS].\n+\n+Example of use:\n+```rust\n+impl LateLintPass<'_, '_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        // Get type of `expr`\n+        let ty = cx.tables.expr_ty(expr);\n+        // Match its kind to enter its type\n+        match ty.kind {\n+            ty::Adt(adt_def, _) if adt_def.is_struct() => println!(\"Our `expr` is a struct!\"),\n+            _ => ()\n+        }\n+    }\n+}\n+```\n+\n+Similarly in [`TypeckTables`][TypeckTables] methods, you have the [`pat_ty()`][pat_ty] method \n+to retrieve a type from a pattern.\n+\n+Two noticeable items here:\n+- `cx` is the lint context [`LateContext`][LateContext]. \n+  The two most useful data structures in this context are `tcx` and `tables`, \n+  allowing us to jump to type definitions and other compilation stages such as HIR.\n+- `tables` is [`TypeckTables`][TypeckTables] and is created by type checking step, \n+  it includes useful information such as types of expressions, ways to resolve methods and so on.\n+\n+# Checking if a type implements a specific trait\n+\n+There are two ways to do this, depending if the target trait is part of lang items.\n+\n+```rust\n+use crate::utils::{implements_trait, match_trait_method, paths};\n+\n+impl LateLintPass<'_, '_> for MyStructLint {\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n+        // 1. Using expression and Clippy's convenient method\n+        // we use `match_trait_method` function from Clippy's toolbox\n+        if match_trait_method(cx, expr, &paths::INTO) {\n+            // `expr` implements `Into` trait\n+        }\n+\n+        // 2. Using type context `TyCtxt`\n+        let ty = cx.tables.expr_ty(expr);\n+        if cx.tcx.lang_items()\n+            // we are looking for the `DefId` of `Drop` trait in lang items\n+            .drop_trait()\n+            // then we use it with our type `ty` by calling `implements_trait` from Clippy's utils\n+            .map_or(false, |id| implements_trait(cx, ty, id, &[])) {\n+                // `expr` implements `Drop` trait\n+            }\n+    }\n+}\n+```\n+\n+> Prefer using lang items, if the target trait is available there.\n+\n+A list of defined paths for Clippy can be found in [paths.rs][paths]\n+\n+We access lang items through the type context `tcx`. `tcx` is of type [`TyCtxt`][TyCtxt] and is defined in the `rustc_middle` crate.\n+\n+# Dealing with macros\n+\n+There are several helpers in Clippy's utils to deal with macros:\n+\n+- `in_macro()`: detect if the given span is expanded by a macro\n+\n+You may want to use this for example to not start linting in any macro.\n+\n+```rust\n+macro_rules! foo {\n+    ($param:expr) => {\n+        match $param {\n+            \"bar\" => println!(\"whatever\"),\n+            _ => ()\n+        }\n+    };\n+}\n+\n+foo!(\"bar\");\n+\n+// if we lint the `match` of `foo` call and test its span\n+assert_eq!(in_macro(match_span), true);\n+```\n+\n+- `in_external_macro()`: detect if the given span is from an external macro, defined in a foreign crate\n+\n+You may want to use it for example to not start linting in macros from other crates\n+\n+```rust\n+#[macro_use]\n+extern crate a_crate_with_macros;\n+\n+// `foo` is defined in `a_crate_with_macros`\n+foo!(\"bar\");\n+\n+// if we lint the `match` of `foo` call and test its span\n+assert_eq!(in_external_macro(cx.sess(), match_span), true);\n+```\n+\n+- `differing_macro_contexts()`: returns true if the two given spans are not from the same context\n+\n+```rust\n+macro_rules! m {\n+    ($a:expr, $b:expr) => {\n+        if $a.is_some() {\n+            $b;\n+        }\n+    }\n+}\n+\n+let x: Option<u32> = Some(42);\n+m!(x, x.unwrap());\n+\n+// These spans are not from the same context\n+// x.is_some() is from inside the macro\n+// x.unwrap() is from outside the macro\n+assert_eq!(differing_macro_contexts(x_is_some_span, x_unwrap_span), true);\n+```\n+\n+[TyS]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyS.html\n+[TyKind]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/enum.TyKind.html\n+[TypeckTables]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html\n+[expr_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TypeckTables.html#method.expr_ty\n+[LateContext]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_lint/struct.LateContext.html\n+[TyCtxt]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TyCtxt.html\n+[pat_ty]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/context/struct.TypeckTables.html#method.pat_ty\n+[paths]: ../clippy_lints/src/utils/paths.rs"}]}