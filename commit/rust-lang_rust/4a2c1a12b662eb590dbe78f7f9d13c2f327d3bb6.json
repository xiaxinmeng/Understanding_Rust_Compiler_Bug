{"sha": "4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "node_id": "C_kwDOAAsO6NoAKDRhMmMxYTEyYjY2MmViNTkwZGJlNzhmN2Y5ZDEzYzJmMzI3ZDNiYjY", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-28T08:45:09Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-09-28T10:45:11Z"}, "message": "fix unwind drop glue for if-then scopes", "tree": {"sha": "03521acdc623bf2031dfdcc9cfcc5cfc3216f6a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03521acdc623bf2031dfdcc9cfcc5cfc3216f6a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE0u8S3YU336XkLsQOPNdIZH7vY1kFAmM0JbcACgkQPNdIZH7v\nY1mGdg//Uf3ygOkDB8WXmXBFDFghH1JkXIXPq6Zi8CBhiRmqG9/UdmXipBD52Tne\nXztYJwi7Bx9HjQ4eUpA9McbT3kvQkde76L5Af0EKkj873Lxe1cQ1k4S5l/iQKxOC\nf5YVFMhRJLFZ/Q6OzWSltqsMphJc+MF04rjRwLbwhXUUc9rJ6u3fzcjFbUL3tonZ\n/dgQ3ycUNfOVg4SiVMzznKeSDMk4Ks6iYnY0vbQ8z1tWl2zMxc8HzeAI9wWeJK3Z\nHZ9qWtPg/7VU3mvlA6LCHGgMsQoC6xORU1IHxTdfNMXHMtQJfT2bc1e9wDba4EPG\nDdaOznF3FYBHBJ/sul6qfXmC3q3ga5WSTIgVMR/3BxaFuvkp5FFVc+nituQUBQVx\nB+Q+FGFtxm+7JbRIVXFRv1dECveXaIj6peqX4wBExpS7LNvsQKNVM/BJACggxca0\nS94eZCEMmdmmPrOc+mI2ZqqUHtJiBNO9dPcCYgVHgcYjna1/1y7s5QMgf0nIf7kD\n/YNmBW6BbiS4C+Y7NEBmLZohuPG5Y/K0SxKiTAhioxo4oeCWnDPbk0UxFKPUh0MG\nGvC99jRar3pf33Ffh4+WmjtxI+xDpd10k9GTH0b9KvHcSx2HKNIZHJZlulAHIEZJ\nXov8hj/dHawDl7nKKkuMCIOKPA7jimH6tlLpQsnsdgmiLUs04u8=\n=BokC\n-----END PGP SIGNATURE-----", "payload": "tree 03521acdc623bf2031dfdcc9cfcc5cfc3216f6a0\nparent 837bf370de144a682041e68bb67469b9f68a55ce\nauthor Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1664354709 +0800\ncommitter Ding Xiang Fei <dingxiangfei2009@protonmail.ch> 1664361911 +0800\n\nfix unwind drop glue for if-then scopes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "html_url": "https://github.com/rust-lang/rust/commit/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837bf370de144a682041e68bb67469b9f68a55ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/837bf370de144a682041e68bb67469b9f68a55ce", "html_url": "https://github.com/rust-lang/rust/commit/837bf370de144a682041e68bb67469b9f68a55ce"}], "stats": {"total": 104, "additions": 90, "deletions": 14}, "files": [{"sha": "183db56d7a08c0e868923ac572e7553fcd57e7f4", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -245,11 +245,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 OutsideGuard,\n                                                 true,\n                                             );\n-                                            this.schedule_drop_for_binding(\n-                                                node,\n-                                                span,\n-                                                OutsideGuard,\n-                                            );\n                                         },\n                                     );\n                                     this.ast_let_else("}, {"sha": "24ecd0a539949c2bc945dfdbf2a96f4e8ebd1c2f", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 this.source_info(then_expr.span)\n                             };\n                             let (then_block, else_block) =\n-                                this.in_if_then_scope(condition_scope, |this| {\n+                                this.in_if_then_scope(condition_scope, then_expr.span, |this| {\n                                     let then_blk = unpack!(this.then_else_break(\n                                         block,\n                                         &this.thir[cond],\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Let { expr, ref pat } => {\n                 let scope = this.local_scope();\n-                let (true_block, false_block) = this.in_if_then_scope(scope, |this| {\n+                let (true_block, false_block) = this.in_if_then_scope(scope, expr_span, |this| {\n                     this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span)\n                 });\n "}, {"sha": "3f813e0af0da362e0b74918a3726c6f194a8cb8d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -1986,7 +1986,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let mut guard_span = rustc_span::DUMMY_SP;\n \n             let (post_guard_block, otherwise_post_guard_block) =\n-                self.in_if_then_scope(match_scope, |this| match *guard {\n+                self.in_if_then_scope(match_scope, guard_span, |this| match *guard {\n                     Guard::If(e) => {\n                         let e = &this.thir[e];\n                         guard_span = e.span;\n@@ -2301,7 +2301,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<BasicBlock> {\n         let else_block_span = self.thir[else_block].span;\n-        let (matching, failure) = self.in_if_then_scope(*let_else_scope, |this| {\n+        let (matching, failure) = self.in_if_then_scope(*let_else_scope, else_block_span, |this| {\n             let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n             let pat = Pat { ty: init.ty, span: else_block_span, kind: PatKind::Wild };\n             let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false, this);"}, {"sha": "2d29d0b6928b62a16c1390865db0c25b47763797", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 42, "deletions": 5, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -466,9 +466,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let normal_exit_block = f(self);\n         let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();\n         assert!(breakable_scope.region_scope == region_scope);\n-        let break_block = self.build_exit_tree(breakable_scope.break_drops, None);\n+        let break_block =\n+            self.build_exit_tree(breakable_scope.break_drops, region_scope, span, None);\n         if let Some(drops) = breakable_scope.continue_drops {\n-            self.build_exit_tree(drops, loop_block);\n+            self.build_exit_tree(drops, region_scope, span, loop_block);\n         }\n         match (normal_exit_block, break_block) {\n             (Some(block), None) | (None, Some(block)) => block,\n@@ -510,6 +511,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn in_if_then_scope<F>(\n         &mut self,\n         region_scope: region::Scope,\n+        span: Span,\n         f: F,\n     ) -> (BasicBlock, BasicBlock)\n     where\n@@ -524,7 +526,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         assert!(if_then_scope.region_scope == region_scope);\n \n         let else_block = self\n-            .build_exit_tree(if_then_scope.else_drops, None)\n+            .build_exit_tree(if_then_scope.else_drops, region_scope, span, None)\n             .map_or_else(|| self.cfg.start_new_block(), |else_block_and| unpack!(else_block_and));\n \n         (then_block, else_block)\n@@ -1021,6 +1023,38 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         cached_drop\n     }\n \n+    /// This is similar to [diverge_cleanup_target] except its target is set to\n+    /// some ancestor scope instead of the current scope.\n+    /// It is possible to unwind to some ancestor scope if some drop panics as\n+    /// the program breaks out of a if-then scope.\n+    fn diverge_cleanup_target(&mut self, target_scope: region::Scope, span: Span) -> DropIdx {\n+        let target = self.scopes.scope_index(target_scope, span);\n+        let (uncached_scope, mut cached_drop) = self.scopes.scopes[..=target]\n+            .iter()\n+            .enumerate()\n+            .rev()\n+            .find_map(|(scope_idx, scope)| {\n+                scope.cached_unwind_block.map(|cached_block| (scope_idx + 1, cached_block))\n+            })\n+            .unwrap_or((0, ROOT_NODE));\n+\n+        if uncached_scope > target {\n+            return cached_drop;\n+        }\n+\n+        let is_generator = self.generator_kind.is_some();\n+        for scope in &mut self.scopes.scopes[uncached_scope..=target] {\n+            for drop in &scope.drops {\n+                if is_generator || drop.kind == DropKind::Value {\n+                    cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);\n+                }\n+            }\n+            scope.cached_unwind_block = Some(cached_drop);\n+        }\n+\n+        cached_drop\n+    }\n+\n     /// Prepares to create a path that performs all required cleanup for a\n     /// terminator that can unwind at the given basic block.\n     ///\n@@ -1222,21 +1256,24 @@ impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {\n     fn build_exit_tree(\n         &mut self,\n         mut drops: DropTree,\n+        else_scope: region::Scope,\n+        span: Span,\n         continue_block: Option<BasicBlock>,\n     ) -> Option<BlockAnd<()>> {\n         let mut blocks = IndexVec::from_elem(None, &drops.drops);\n         blocks[ROOT_NODE] = continue_block;\n \n         drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);\n+        let is_generator = self.generator_kind.is_some();\n \n         // Link the exit drop tree to unwind drop tree.\n         if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {\n-            let unwind_target = self.diverge_cleanup();\n+            let unwind_target = self.diverge_cleanup_target(else_scope, span);\n             let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);\n             for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {\n                 match drop_data.0.kind {\n                     DropKind::Storage => {\n-                        if self.generator_kind.is_some() {\n+                        if is_generator {\n                             let unwind_drop = self\n                                 .scopes\n                                 .unwind_drops"}, {"sha": "7dfaf1358ae7d11d23f21ce5b35002b4da6968e1", "filename": "src/test/ui/let-else/issue-102317.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -0,0 +1,20 @@\n+// issue #102317\n+// run-pass\n+// compile-flags: --edition 2021 -C opt-level=3 -Zvalidate-mir\n+\n+struct SegmentJob;\n+\n+impl Drop for SegmentJob {\n+    fn drop(&mut self) {}\n+}\n+\n+pub async fn run() -> Result<(), ()> {\n+    let jobs = Vec::<SegmentJob>::new();\n+    let Some(_job) = jobs.into_iter().next() else {\n+        return Ok(())\n+    };\n+\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "1c675788ee93318a0ef1378190c2766697ba8836", "filename": "src/test/ui/mir/issue-99852.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs?ref=4a2c1a12b662eb590dbe78f7f9d13c2f327d3bb6", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// compile-flags: -Z validate-mir\n+#![feature(let_chains)]\n+\n+fn lambda<T, U>() -> U\n+where\n+    T: Default,\n+    U: Default,\n+{\n+    let foo: Result<T, ()> = Ok(T::default());\n+    let baz: U = U::default();\n+\n+    if let Ok(foo) = foo && let Ok(bar) = transform(foo) {\n+        bar\n+    } else {\n+        baz\n+    }\n+}\n+\n+fn transform<T, U>(input: T) -> Result<U, ()> {\n+    todo!()\n+}\n+\n+fn main() {}"}]}