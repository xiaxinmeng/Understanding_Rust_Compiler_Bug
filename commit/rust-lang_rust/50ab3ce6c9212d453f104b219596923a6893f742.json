{"sha": "50ab3ce6c9212d453f104b219596923a6893f742", "node_id": "C_kwDOAAsO6NoAKDUwYWIzY2U2YzkyMTJkNDUzZjEwNGIyMTk1OTY5MjNhNjg5M2Y3NDI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T08:01:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T08:01:31Z"}, "message": "Auto merge of #10607 - beetrees:toml-spans, r=giraffate\n\nAdd spans to `clippy.toml` error messages\n\nAdds spans to errors and warnings encountered when parsing `clippy.toml`.\n\nchangelog: Errors and warnings generated when parsing `clippy.toml` now point to the location in the TOML file the error/warning occurred.", "tree": {"sha": "36a8b027651a7625ff34b07d3473a9ce9c09c304", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36a8b027651a7625ff34b07d3473a9ce9c09c304"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ab3ce6c9212d453f104b219596923a6893f742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ab3ce6c9212d453f104b219596923a6893f742", "html_url": "https://github.com/rust-lang/rust/commit/50ab3ce6c9212d453f104b219596923a6893f742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ab3ce6c9212d453f104b219596923a6893f742/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9524cff2b40a7e67f84b88c2d95b3729c94bf26e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9524cff2b40a7e67f84b88c2d95b3729c94bf26e", "html_url": "https://github.com/rust-lang/rust/commit/9524cff2b40a7e67f84b88c2d95b3729c94bf26e"}, {"sha": "6f13a37499191a19f5115a8cbe8b5431f269ab7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f13a37499191a19f5115a8cbe8b5431f269ab7e", "html_url": "https://github.com/rust-lang/rust/commit/6f13a37499191a19f5115a8cbe8b5431f269ab7e"}], "stats": {"total": 419, "additions": 278, "deletions": 141}, "files": [{"sha": "1c4ce89a863f8e402446cdd496eaaccd22c465a7", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -30,7 +30,7 @@ termize = \"0.1\"\n compiletest_rs = { version = \"0.10\", features = [\"tmp\"] }\n tester = \"0.9\"\n regex = \"1.5\"\n-toml = \"0.5\"\n+toml = \"0.7.3\"\n walkdir = \"2.3\"\n # This is used by the `collect-metadata` alias.\n filetime = \"0.2\""}, {"sha": "ccb665e67c88075eff442b30edadd7fedc32c9a3", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -21,7 +21,7 @@ regex-syntax = \"0.7\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = { version = \"1.0\", optional = true }\n tempfile = { version = \"3.3.0\", optional = true }\n-toml = \"0.5\"\n+toml = \"0.7.3\"\n unicode-normalization = \"0.1\"\n unicode-script = { version = \"0.5\", default-features = false }\n semver = \"1.0\""}, {"sha": "a29cdb64abccaecadcc2f421a58f2460447a99b8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -336,7 +336,7 @@ mod zero_sized_map_values;\n \n pub use crate::utils::conf::{lookup_conf_file, Conf};\n use crate::utils::{\n-    conf::{format_error, metadata::get_configuration_metadata, TryConf},\n+    conf::{metadata::get_configuration_metadata, TryConf},\n     FindAll,\n };\n \n@@ -372,23 +372,36 @@ pub fn read_conf(sess: &Session, path: &io::Result<(Option<PathBuf>, Vec<String>\n         },\n     };\n \n-    let TryConf { conf, errors, warnings } = utils::conf::read(file_name);\n+    let TryConf { conf, errors, warnings } = utils::conf::read(sess, file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n-        sess.err(format!(\n-            \"error reading Clippy's configuration file `{}`: {}\",\n-            file_name.display(),\n-            format_error(error)\n-        ));\n+        if let Some(span) = error.span {\n+            sess.span_err(\n+                span,\n+                format!(\"error reading Clippy's configuration file: {}\", error.message),\n+            );\n+        } else {\n+            sess.err(format!(\n+                \"error reading Clippy's configuration file `{}`: {}\",\n+                file_name.display(),\n+                error.message\n+            ));\n+        }\n     }\n \n     for warning in warnings {\n-        sess.struct_warn(format!(\n-            \"error reading Clippy's configuration file `{}`: {}\",\n-            file_name.display(),\n-            format_error(warning)\n-        ))\n-        .emit();\n+        if let Some(span) = warning.span {\n+            sess.span_warn(\n+                span,\n+                format!(\"error reading Clippy's configuration file: {}\", warning.message),\n+            );\n+        } else {\n+            sess.warn(format!(\n+                \"error reading Clippy's configuration file `{}`: {}\",\n+                file_name.display(),\n+                warning.message\n+            ));\n+        }\n     }\n \n     conf"}, {"sha": "2d79a5c90081ceb64eda11d1637c42c25c0584c9", "filename": "clippy_lints/src/nonstandard_macro_braces.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnonstandard_macro_braces.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -241,7 +241,7 @@ impl<'de> Deserialize<'de> for MacroMatcher {\n                 V: de::MapAccess<'de>,\n             {\n                 let mut name = None;\n-                let mut brace: Option<&str> = None;\n+                let mut brace: Option<String> = None;\n                 while let Some(key) = map.next_key()? {\n                     match key {\n                         Field::Name => {"}, {"sha": "35f40830681d65cbcff21df5712deba060388f73", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 112, "deletions": 95, "changes": 207, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -2,12 +2,15 @@\n \n #![allow(clippy::module_name_repetitions)]\n \n+use rustc_session::Session;\n+use rustc_span::{BytePos, Pos, SourceFile, Span, SyntaxContext};\n use serde::de::{Deserializer, IgnoredAny, IntoDeserializer, MapAccess, Visitor};\n use serde::Deserialize;\n-use std::error::Error;\n+use std::fmt::{Debug, Display, Formatter};\n+use std::ops::Range;\n use std::path::{Path, PathBuf};\n use std::str::FromStr;\n-use std::{cmp, env, fmt, fs, io, iter};\n+use std::{cmp, env, fmt, fs, io};\n \n #[rustfmt::skip]\n const DEFAULT_DOC_VALID_IDENTS: &[&str] = &[\n@@ -67,33 +70,70 @@ impl DisallowedPath {\n #[derive(Default)]\n pub struct TryConf {\n     pub conf: Conf,\n-    pub errors: Vec<Box<dyn Error>>,\n-    pub warnings: Vec<Box<dyn Error>>,\n+    pub errors: Vec<ConfError>,\n+    pub warnings: Vec<ConfError>,\n }\n \n impl TryConf {\n-    fn from_error(error: impl Error + 'static) -> Self {\n+    fn from_toml_error(file: &SourceFile, error: &toml::de::Error) -> Self {\n+        ConfError::from_toml(file, error).into()\n+    }\n+}\n+\n+impl From<ConfError> for TryConf {\n+    fn from(value: ConfError) -> Self {\n         Self {\n             conf: Conf::default(),\n-            errors: vec![Box::new(error)],\n+            errors: vec![value],\n             warnings: vec![],\n         }\n     }\n }\n \n+impl From<io::Error> for TryConf {\n+    fn from(value: io::Error) -> Self {\n+        ConfError::from(value).into()\n+    }\n+}\n+\n #[derive(Debug)]\n-struct ConfError(String);\n+pub struct ConfError {\n+    pub message: String,\n+    pub span: Option<Span>,\n+}\n+\n+impl ConfError {\n+    fn from_toml(file: &SourceFile, error: &toml::de::Error) -> Self {\n+        if let Some(span) = error.span() {\n+            Self::spanned(file, error.message(), span)\n+        } else {\n+            Self {\n+                message: error.message().to_string(),\n+                span: None,\n+            }\n+        }\n+    }\n \n-impl fmt::Display for ConfError {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        <String as fmt::Display>::fmt(&self.0, f)\n+    fn spanned(file: &SourceFile, message: impl Into<String>, span: Range<usize>) -> Self {\n+        Self {\n+            message: message.into(),\n+            span: Some(Span::new(\n+                file.start_pos + BytePos::from_usize(span.start),\n+                file.start_pos + BytePos::from_usize(span.end),\n+                SyntaxContext::root(),\n+                None,\n+            )),\n+        }\n     }\n }\n \n-impl Error for ConfError {}\n-\n-fn conf_error(s: impl Into<String>) -> Box<dyn Error> {\n-    Box::new(ConfError(s.into()))\n+impl From<io::Error> for ConfError {\n+    fn from(value: io::Error) -> Self {\n+        Self {\n+            message: value.to_string(),\n+            span: None,\n+        }\n+    }\n }\n \n macro_rules! define_Conf {\n@@ -117,20 +157,14 @@ macro_rules! define_Conf {\n             }\n         }\n \n-        impl<'de> Deserialize<'de> for TryConf {\n-            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error> where D: Deserializer<'de> {\n-                deserializer.deserialize_map(ConfVisitor)\n-            }\n-        }\n-\n         #[derive(Deserialize)]\n         #[serde(field_identifier, rename_all = \"kebab-case\")]\n         #[allow(non_camel_case_types)]\n         enum Field { $($name,)* third_party, }\n \n-        struct ConfVisitor;\n+        struct ConfVisitor<'a>(&'a SourceFile);\n \n-        impl<'de> Visitor<'de> for ConfVisitor {\n+        impl<'de> Visitor<'de> for ConfVisitor<'_> {\n             type Value = TryConf;\n \n             fn expecting(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n@@ -141,32 +175,38 @@ macro_rules! define_Conf {\n                 let mut errors = Vec::new();\n                 let mut warnings = Vec::new();\n                 $(let mut $name = None;)*\n-                // could get `Field` here directly, but get `str` first for diagnostics\n-                while let Some(name) = map.next_key::<&str>()? {\n-                    match Field::deserialize(name.into_deserializer())? {\n-                        $(Field::$name => {\n-                            $(warnings.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n-                            match map.next_value() {\n-                                Err(e) => errors.push(conf_error(e.to_string())),\n+                // could get `Field` here directly, but get `String` first for diagnostics\n+                while let Some(name) = map.next_key::<toml::Spanned<String>>()? {\n+                    match Field::deserialize(name.get_ref().as_str().into_deserializer()) {\n+                        Err(e) => {\n+                            let e: FieldError = e;\n+                            errors.push(ConfError::spanned(self.0, e.0, name.span()));\n+                        }\n+                        $(Ok(Field::$name) => {\n+                            $(warnings.push(ConfError::spanned(self.0, format!(\"deprecated field `{}`. {}\", name.get_ref(), $dep), name.span()));)?\n+                            let raw_value = map.next_value::<toml::Spanned<toml::Value>>()?;\n+                            let value_span = raw_value.span();\n+                            match <$ty>::deserialize(raw_value.into_inner()) {\n+                                Err(e) => errors.push(ConfError::spanned(self.0, e.to_string().replace('\\n', \" \").trim(), value_span)),\n                                 Ok(value) => match $name {\n-                                    Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n+                                    Some(_) => errors.push(ConfError::spanned(self.0, format!(\"duplicate field `{}`\", name.get_ref()), name.span())),\n                                     None => {\n                                         $name = Some(value);\n                                         // $new_conf is the same as one of the defined `$name`s, so\n                                         // this variable is defined in line 2 of this function.\n                                         $(match $new_conf {\n-                                            Some(_) => errors.push(conf_error(concat!(\n+                                            Some(_) => errors.push(ConfError::spanned(self.0, concat!(\n                                                 \"duplicate field `\", stringify!($new_conf),\n                                                 \"` (provided as `\", stringify!($name), \"`)\"\n-                                            ))),\n+                                            ), name.span())),\n                                             None => $new_conf = $name.clone(),\n                                         })?\n                                     },\n                                 }\n                             }\n                         })*\n-                        // white-listed; ignore\n-                        Field::third_party => drop(map.next_value::<IgnoredAny>())\n+                        // ignore contents of the third_party key\n+                        Ok(Field::third_party) => drop(map.next_value::<IgnoredAny>())\n                     }\n                 }\n                 let conf = Conf { $($name: $name.unwrap_or_else(defaults::$name),)* };\n@@ -532,19 +572,19 @@ pub fn lookup_conf_file() -> io::Result<(Option<PathBuf>, Vec<String>)> {\n /// Read the `toml` configuration file.\n ///\n /// In case of error, the function tries to continue as much as possible.\n-pub fn read(path: &Path) -> TryConf {\n-    let content = match fs::read_to_string(path) {\n-        Err(e) => return TryConf::from_error(e),\n-        Ok(content) => content,\n+pub fn read(sess: &Session, path: &Path) -> TryConf {\n+    let file = match sess.source_map().load_file(path) {\n+        Err(e) => return e.into(),\n+        Ok(file) => file,\n     };\n-    match toml::from_str::<TryConf>(&content) {\n+    match toml::de::Deserializer::new(file.src.as_ref().unwrap()).deserialize_map(ConfVisitor(&file)) {\n         Ok(mut conf) => {\n             extend_vec_if_indicator_present(&mut conf.conf.doc_valid_idents, DEFAULT_DOC_VALID_IDENTS);\n             extend_vec_if_indicator_present(&mut conf.conf.disallowed_names, DEFAULT_DISALLOWED_NAMES);\n \n             conf\n         },\n-        Err(e) => TryConf::from_error(e),\n+        Err(e) => TryConf::from_toml_error(&file, &e),\n     }\n }\n \n@@ -556,65 +596,42 @@ fn extend_vec_if_indicator_present(vec: &mut Vec<String>, default: &[&str]) {\n \n const SEPARATOR_WIDTH: usize = 4;\n \n-// Check whether the error is \"unknown field\" and, if so, list the available fields sorted and at\n-// least one per line, more if `CLIPPY_TERMINAL_WIDTH` is set and allows it.\n-pub fn format_error(error: Box<dyn Error>) -> String {\n-    let s = error.to_string();\n-\n-    if_chain! {\n-        if error.downcast::<toml::de::Error>().is_ok();\n-        if let Some((prefix, mut fields, suffix)) = parse_unknown_field_message(&s);\n-        then {\n-            use fmt::Write;\n-\n-            fields.sort_unstable();\n-\n-            let (rows, column_widths) = calculate_dimensions(&fields);\n-\n-            let mut msg = String::from(prefix);\n-            for row in 0..rows {\n-                writeln!(msg).unwrap();\n-                for (column, column_width) in column_widths.iter().copied().enumerate() {\n-                    let index = column * rows + row;\n-                    let field = fields.get(index).copied().unwrap_or_default();\n-                    write!(\n-                        msg,\n-                        \"{:SEPARATOR_WIDTH$}{field:column_width$}\",\n-                        \" \"\n-                    )\n-                    .unwrap();\n-                }\n-            }\n-            write!(msg, \"\\n{suffix}\").unwrap();\n-            msg\n-        } else {\n-            s\n-        }\n+#[derive(Debug)]\n+struct FieldError(String);\n+\n+impl std::error::Error for FieldError {}\n+\n+impl Display for FieldError {\n+    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {\n+        f.pad(&self.0)\n     }\n }\n \n-// `parse_unknown_field_message` will become unnecessary if\n-// https://github.com/alexcrichton/toml-rs/pull/364 is merged.\n-fn parse_unknown_field_message(s: &str) -> Option<(&str, Vec<&str>, &str)> {\n-    // An \"unknown field\" message has the following form:\n-    //   unknown field `UNKNOWN`, expected one of `FIELD0`, `FIELD1`, ..., `FIELDN` at line X column Y\n-    //                                           ^^      ^^^^                     ^^\n-    if_chain! {\n-        if s.starts_with(\"unknown field\");\n-        let slices = s.split(\"`, `\").collect::<Vec<_>>();\n-        let n = slices.len();\n-        if n >= 2;\n-        if let Some((prefix, first_field)) = slices[0].rsplit_once(\" `\");\n-        if let Some((last_field, suffix)) = slices[n - 1].split_once(\"` \");\n-        then {\n-            let fields = iter::once(first_field)\n-                .chain(slices[1..n - 1].iter().copied())\n-                .chain(iter::once(last_field))\n-                .collect::<Vec<_>>();\n-            Some((prefix, fields, suffix))\n-        } else {\n-            None\n+impl serde::de::Error for FieldError {\n+    fn custom<T: Display>(msg: T) -> Self {\n+        Self(msg.to_string())\n+    }\n+\n+    fn unknown_field(field: &str, expected: &'static [&'static str]) -> Self {\n+        // List the available fields sorted and at least one per line, more if `CLIPPY_TERMINAL_WIDTH` is\n+        // set and allows it.\n+        use fmt::Write;\n+\n+        let mut expected = expected.to_vec();\n+        expected.sort_unstable();\n+\n+        let (rows, column_widths) = calculate_dimensions(&expected);\n+\n+        let mut msg = format!(\"unknown field `{field}`, expected one of\");\n+        for row in 0..rows {\n+            writeln!(msg).unwrap();\n+            for (column, column_width) in column_widths.iter().copied().enumerate() {\n+                let index = column * rows + row;\n+                let field = expected.get(index).copied().unwrap_or_default();\n+                write!(msg, \"{:SEPARATOR_WIDTH$}{field:column_width$}\", \" \").unwrap();\n+            }\n         }\n+        Self(msg)\n     }\n }\n "}, {"sha": "a828d12370467d6683aafff0650255f0f5258a80", "filename": "lintcheck/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/lintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/lintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2FCargo.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -22,7 +22,7 @@ rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0.85\"\n tar = \"0.4\"\n-toml = \"0.5\"\n+toml = \"0.7.3\"\n ureq = \"2.2\"\n walkdir = \"2.3\"\n "}, {"sha": "3c5b6e12b9688254b399f3b49321a6ac14af7f08", "filename": "src/driver.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -70,7 +70,7 @@ fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>)\n \n /// Track files that may be accessed at runtime in `file_depinfo` so that cargo will re-run clippy\n /// when any of them are modified\n-fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n+fn track_files(parse_sess: &mut ParseSess) {\n     let file_depinfo = parse_sess.file_depinfo.get_mut();\n \n     // Used by `clippy::cargo` lints and to determine the MSRV. `cargo clippy` executes `clippy-driver`\n@@ -79,10 +79,7 @@ fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n         file_depinfo.insert(Symbol::intern(\"Cargo.toml\"));\n     }\n \n-    // `clippy.toml`\n-    if let Some(path) = conf_path_string {\n-        file_depinfo.insert(Symbol::intern(&path));\n-    }\n+    // `clippy.toml` will be automatically tracked as it's loaded with `sess.source_map().load_file()`\n \n     // During development track the `clippy-driver` executable so that cargo will re-run clippy whenever\n     // it is rebuilt\n@@ -126,17 +123,11 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n         let conf_path = clippy_lints::lookup_conf_file();\n-        let conf_path_string = if let Ok((Some(path), _)) = &conf_path {\n-            path.to_str().map(String::from)\n-        } else {\n-            None\n-        };\n-\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n         config.parse_sess_created = Some(Box::new(move |parse_sess| {\n             track_clippy_args(parse_sess, &clippy_args_var);\n-            track_files(parse_sess, conf_path_string);\n+            track_files(parse_sess);\n         }));\n         config.register_lints = Some(Box::new(move |sess, lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that"}, {"sha": "5b7e8c0db744daeecc1605c0651e0aebeb79a797", "filename": "tests/ui-toml/bad_toml/conf_bad_toml.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml%2Fconf_bad_toml.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: expected an equals, found an identifier at line 1 column 4\n+error: error reading Clippy's configuration file: expected `.`, `=`\n+  --> $DIR/clippy.toml:1:4\n+   |\n+LL | fn this_is_obviously(not: a, toml: file) {\n+   |    ^\n \n error: aborting due to previous error\n "}, {"sha": "386e1135df90dd7932415fb61bb015cb6f353a1b", "filename": "tests/ui-toml/bad_toml_type/conf_bad_type.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fbad_toml_type%2Fconf_bad_type.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,4 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: invalid type: integer `42`, expected a sequence for key `disallowed-names`\n+error: error reading Clippy's configuration file: invalid type: integer `42`, expected a sequence\n+  --> $DIR/clippy.toml:1:20\n+   |\n+LL | disallowed-names = 42\n+   |                    ^^\n \n error: aborting due to previous error\n "}, {"sha": "123ad94dd09dab3806df380f589cd4e29074c5e3", "filename": "tests/ui-toml/conf_deprecated_key/conf_deprecated_key.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fconf_deprecated_key%2Fconf_deprecated_key.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,6 +1,14 @@\n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cyclomatic-complexity-threshold = 2\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `blacklisted-names`. Please use `disallowed-names` instead\n+warning: error reading Clippy's configuration file: deprecated field `blacklisted-names`. Please use `disallowed-names` instead\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | blacklisted-names = [ \"..\", \"wibble\" ]\n+   | ^^^^^^^^^^^^^^^^^\n \n error: the function has a cognitive complexity of (3/2)\n   --> $DIR/conf_deprecated_key.rs:6:4"}, {"sha": "55789afc1b71c8d6d07a7fb9dd156c75354a77f4", "filename": "tests/ui-toml/duplicated_keys/clippy.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fclippy.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,5 +1,2 @@\n cognitive-complexity-threshold = 2\n-# This is the deprecated name for the same key\n-cyclomatic-complexity-threshold = 3\n-# Check we get duplication warning regardless of order\n cognitive-complexity-threshold = 4"}, {"sha": "54997735274e4b0ee72b014a8d43d0b2a225e04d", "filename": "tests/ui-toml/duplicated_keys/duplicated_keys.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys%2Fduplicated_keys.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,8 +1,8 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+error: error reading Clippy's configuration file: duplicate key `cognitive-complexity-threshold` in document root\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cognitive-complexity-threshold = 4\n+   | ^\n \n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: duplicate field `cognitive-complexity-threshold`\n-\n-warning: error reading Clippy's configuration file `$DIR/clippy.toml`: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "7932c43ebd217bef17d7c44e2530fb262457715e", "filename": "tests/ui-toml/duplicated_keys_deprecated/clippy.toml", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fclippy.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1,3 @@\n+cognitive-complexity-threshold = 2\n+# This is the deprecated name for the same key\n+cyclomatic-complexity-threshold = 3"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/duplicated_keys_deprecated/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "2ae7848f183b5130882b846dfbac92183a70fb0e", "filename": "tests/ui-toml/duplicated_keys_deprecated/duplicated_keys.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated%2Fduplicated_keys.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1,14 @@\n+error: error reading Clippy's configuration file: duplicate field `cognitive_complexity_threshold` (provided as `cyclomatic_complexity_threshold`)\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:3:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "53c634b727ed5a3a0e7e79e81df2fdb7aceebb49", "filename": "tests/ui-toml/duplicated_keys_deprecated_2/clippy.toml", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fclippy.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1,4 @@\n+# This is the deprecated name for cognitive-complexity-threshold\n+cyclomatic-complexity-threshold = 3\n+# Check we get duplication warning regardless of order\n+cognitive-complexity-threshold = 4"}, {"sha": "f328e4d9d04c31d0d70d16d21a07d1613be9d577", "filename": "tests/ui-toml/duplicated_keys_deprecated_2/duplicated_keys.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.rs?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1 @@\n+fn main() {}"}, {"sha": "53ad42712469119621645284c9276d5cd0de1bf7", "filename": "tests/ui-toml/duplicated_keys_deprecated_2/duplicated_keys.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fduplicated_keys_deprecated_2%2Fduplicated_keys.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -0,0 +1,14 @@\n+error: error reading Clippy's configuration file: duplicate field `cognitive-complexity-threshold`\n+  --> $DIR/clippy.toml:4:1\n+   |\n+LL | cognitive-complexity-threshold = 4\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: error reading Clippy's configuration file: deprecated field `cyclomatic-complexity-threshold`. Please use `cognitive-complexity-threshold` instead\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | cyclomatic-complexity-threshold = 3\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error; 1 warning emitted\n+"}, {"sha": "b77b4580051ef14b83650059af6345571b34274e", "filename": "tests/ui-toml/toml_unknown_key/clippy.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fclippy.toml?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,6 +1,8 @@\n # that one is an error\n foobar = 42\n+# so is this one\n+barfoo = 53\n \n-# that one is white-listed\n+# that one is ignored\n [third-party]\n clippy-feature = \"nightly\""}, {"sha": "b6038f031f3c3222a432111b700e248df04f9d1a", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 67, "deletions": 3, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/50ab3ce6c9212d453f104b219596923a6893f742/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=50ab3ce6c9212d453f104b219596923a6893f742", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+error: error reading Clippy's configuration file: unknown field `foobar`, expected one of\n            allow-dbg-in-tests\n            allow-expect-in-tests\n            allow-mixed-uninlined-format-args\n@@ -54,7 +54,71 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            vec-box-size-threshold\n            verbose-bit-mask-threshold\n            warn-on-all-wildcard-imports\n-       at line 5 column 1\n+  --> $DIR/clippy.toml:2:1\n+   |\n+LL | foobar = 42\n+   | ^^^^^^\n \n-error: aborting due to previous error\n+error: error reading Clippy's configuration file: unknown field `barfoo`, expected one of\n+           allow-dbg-in-tests\n+           allow-expect-in-tests\n+           allow-mixed-uninlined-format-args\n+           allow-print-in-tests\n+           allow-unwrap-in-tests\n+           allowed-scripts\n+           arithmetic-side-effects-allowed\n+           arithmetic-side-effects-allowed-binary\n+           arithmetic-side-effects-allowed-unary\n+           array-size-threshold\n+           avoid-breaking-exported-api\n+           await-holding-invalid-types\n+           blacklisted-names\n+           cargo-ignore-publish\n+           cognitive-complexity-threshold\n+           cyclomatic-complexity-threshold\n+           disallowed-macros\n+           disallowed-methods\n+           disallowed-names\n+           disallowed-types\n+           doc-valid-idents\n+           enable-raw-pointer-heuristic-for-send\n+           enforced-import-renames\n+           enum-variant-name-threshold\n+           enum-variant-size-threshold\n+           future-size-threshold\n+           ignore-interior-mutability\n+           large-error-threshold\n+           literal-representation-threshold\n+           matches-for-let-else\n+           max-fn-params-bools\n+           max-include-file-size\n+           max-struct-bools\n+           max-suggested-slice-pattern-length\n+           max-trait-bounds\n+           missing-docs-in-crate-items\n+           msrv\n+           pass-by-value-size-limit\n+           semicolon-inside-block-ignore-singleline\n+           semicolon-outside-block-ignore-multiline\n+           single-char-binding-names-threshold\n+           standard-macro-braces\n+           suppress-restriction-lint-in-const\n+           third-party\n+           too-large-for-stack\n+           too-many-arguments-threshold\n+           too-many-lines-threshold\n+           trivial-copy-size-limit\n+           type-complexity-threshold\n+           unnecessary-box-size\n+           unreadable-literal-lint-fractions\n+           upper-case-acronyms-aggressive\n+           vec-box-size-threshold\n+           verbose-bit-mask-threshold\n+           warn-on-all-wildcard-imports\n+  --> $DIR/clippy.toml:4:1\n+   |\n+LL | barfoo = 53\n+   | ^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}]}