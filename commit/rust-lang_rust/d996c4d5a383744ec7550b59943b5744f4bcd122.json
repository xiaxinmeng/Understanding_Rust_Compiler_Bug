{"sha": "d996c4d5a383744ec7550b59943b5744f4bcd122", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5OTZjNGQ1YTM4Mzc0NGVjNzU1MGI1OTk0M2I1NzQ0ZjRiY2QxMjI=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-14T16:58:55Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-17T16:57:21Z"}, "message": "remove _by_hir_id if there is no NodeId counterpart", "tree": {"sha": "992ef7746c54879b8aa91f602592f26bf414d4c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/992ef7746c54879b8aa91f602592f26bf414d4c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d996c4d5a383744ec7550b59943b5744f4bcd122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d996c4d5a383744ec7550b59943b5744f4bcd122", "html_url": "https://github.com/rust-lang/rust/commit/d996c4d5a383744ec7550b59943b5744f4bcd122", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d996c4d5a383744ec7550b59943b5744f4bcd122/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/61964d9732847a3c208c48d07cb8c2ddae8ddb3c", "html_url": "https://github.com/rust-lang/rust/commit/61964d9732847a3c208c48d07cb8c2ddae8ddb3c"}], "stats": {"total": 328, "additions": 164, "deletions": 164}, "files": [{"sha": "8f0f832b6c418c322d7aa61736262f230091025b", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -358,7 +358,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n             args: I) -> CFGIndex {\n         let func_or_rcvr_exit = self.expr(func_or_rcvr, pred);\n         let ret = self.straightline(call_expr, func_or_rcvr_exit, args);\n-        let m = self.tcx.hir().get_module_parent_by_hir_id(call_expr.hir_id);\n+        let m = self.tcx.hir().get_module_parent(call_expr.hir_id);\n         if self.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(call_expr)) {\n             self.add_unreachable_node()\n         } else {"}, {"sha": "666cfc3f6dcac4bf838dfc73f05c9a0e46746802", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -171,7 +171,7 @@ pub trait Visitor<'v> : Sized {\n     /// but cannot supply a `Map`; see `nested_visit_map` for advice.\n     #[allow(unused_variables)]\n     fn visit_nested_item(&mut self, id: ItemId) {\n-        let opt_item = self.nested_visit_map().inter().map(|map| map.expect_item_by_hir_id(id.id));\n+        let opt_item = self.nested_visit_map().inter().map(|map| map.expect_item(id.id));\n         if let Some(item) = opt_item {\n             self.visit_item(item);\n         }"}, {"sha": "5a45f04b6371977492a4a4b0994e4e89b0044260", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -435,7 +435,7 @@ impl<'hir> Map<'hir> {\n \n     /// Given a `HirId`, returns the `BodyId` associated with it,\n     /// if the node is a body owner, otherwise returns `None`.\n-    pub fn maybe_body_owned_by_by_hir_id(&self, hir_id: HirId) -> Option<BodyId> {\n+    pub fn maybe_body_owned_by(&self, hir_id: HirId) -> Option<BodyId> {\n         if let Some(entry) = self.find_entry(hir_id) {\n             if self.dep_graph.is_fully_enabled() {\n                 let hir_id_owner = hir_id.owner;\n@@ -451,13 +451,13 @@ impl<'hir> Map<'hir> {\n \n     /// Given a body owner's id, returns the `BodyId` associated with it.\n     pub fn body_owned_by(&self, id: HirId) -> BodyId {\n-        self.maybe_body_owned_by_by_hir_id(id).unwrap_or_else(|| {\n-            span_bug!(self.span_by_hir_id(id), \"body_owned_by: {} has no associated body\",\n+        self.maybe_body_owned_by(id).unwrap_or_else(|| {\n+            span_bug!(self.span(id), \"body_owned_by: {} has no associated body\",\n                       self.hir_to_string(id));\n         })\n     }\n \n-    pub fn body_owner_kind_by_hir_id(&self, id: HirId) -> BodyOwnerKind {\n+    pub fn body_owner_kind(&self, id: HirId) -> BodyOwnerKind {\n         match self.get_by_hir_id(id) {\n             Node::Item(&Item { node: ItemKind::Const(..), .. }) |\n             Node::TraitItem(&TraitItem { node: TraitItemKind::Const(..), .. }) |\n@@ -548,7 +548,7 @@ impl<'hir> Map<'hir> {\n         let module = &self.forest.krate.modules[&node_id];\n \n         for id in &module.items {\n-            visitor.visit_item(self.expect_item_by_hir_id(*id));\n+            visitor.visit_item(self.expect_item(*id));\n         }\n \n         for id in &module.trait_items {\n@@ -784,7 +784,7 @@ impl<'hir> Map<'hir> {\n \n     /// Returns the `DefId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n-    pub fn get_module_parent_by_hir_id(&self, id: HirId) -> DefId {\n+    pub fn get_module_parent(&self, id: HirId) -> DefId {\n         self.local_def_id_from_hir_id(self.get_module_parent_node(id))\n     }\n \n@@ -860,11 +860,11 @@ impl<'hir> Map<'hir> {\n         Some(scope)\n     }\n \n-    pub fn get_parent_did_by_hir_id(&self, id: HirId) -> DefId {\n+    pub fn get_parent_did(&self, id: HirId) -> DefId {\n         self.local_def_id_from_hir_id(self.get_parent_item(id))\n     }\n \n-    pub fn get_foreign_abi_by_hir_id(&self, hir_id: HirId) -> Abi {\n+    pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {\n         let parent = self.get_parent_item(hir_id);\n         if let Some(entry) = self.find_entry(parent) {\n             if let Entry {\n@@ -877,7 +877,7 @@ impl<'hir> Map<'hir> {\n         bug!(\"expected foreign mod or inlined parent, found {}\", self.hir_to_string(parent))\n     }\n \n-    pub fn expect_item_by_hir_id(&self, id: HirId) -> &'hir Item {\n+    pub fn expect_item(&self, id: HirId) -> &'hir Item {\n         match self.find_by_hir_id(id) { // read recorded by `find`\n             Some(Node::Item(item)) => item,\n             _ => bug!(\"expected item, found {}\", self.hir_to_string(id))\n@@ -965,7 +965,7 @@ impl<'hir> Map<'hir> {\n \n     /// Given a node ID, gets a list of attributes associated with the AST\n     /// corresponding to the node-ID.\n-    pub fn attrs_by_hir_id(&self, id: HirId) -> &'hir [ast::Attribute] {\n+    pub fn attrs(&self, id: HirId) -> &'hir [ast::Attribute] {\n         self.read(id); // reveals attributes on the node\n         let attrs = match self.find_entry(id).map(|entry| entry.node) {\n             Some(Node::Local(l)) => Some(&l.attrs[..]),\n@@ -981,7 +981,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n-            Some(Node::Ctor(..)) => return self.attrs_by_hir_id(self.get_parent_item(id)),\n+            Some(Node::Ctor(..)) => return self.attrs(self.get_parent_item(id)),\n             Some(Node::Crate) => Some(&self.forest.krate.attrs[..]),\n             _ => None\n         };\n@@ -1028,7 +1028,7 @@ impl<'hir> Map<'hir> {\n         })\n     }\n \n-    pub fn span_by_hir_id(&self, hir_id: HirId) -> Span {\n+    pub fn span(&self, hir_id: HirId) -> Span {\n         self.read(hir_id); // reveals span from node\n         match self.find_entry(hir_id).map(|entry| entry.node) {\n             Some(Node::Item(item)) => item.span,\n@@ -1068,7 +1068,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n-        self.as_local_hir_id(id).map(|id| self.span_by_hir_id(id))\n+        self.as_local_hir_id(id).map(|id| self.span(id))\n     }\n \n     pub fn hir_to_string(&self, id: HirId) -> String {\n@@ -1221,7 +1221,7 @@ pub fn map_crate<'hir>(sess: &crate::session::Session,\n impl<'hir> print::PpAnn for Map<'hir> {\n     fn nested(&self, state: &mut print::State<'_>, nested: print::Nested) -> io::Result<()> {\n         match nested {\n-            Nested::Item(id) => state.print_item(self.expect_item_by_hir_id(id.id)),\n+            Nested::Item(id) => state.print_item(self.expect_item(id.id)),\n             Nested::TraitItem(id) => state.print_trait_item(self.trait_item(id)),\n             Nested::ImplItem(id) => state.print_impl_item(self.impl_item(id)),\n             Nested::Body(id) => state.print_expr(&self.body(id).value),"}, {"sha": "54b4435573baac2171577065d9355d78581986dd", "filename": "src/librustc/hir/upvars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fhir%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fupvars.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -15,7 +15,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n         }\n \n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by_by_hir_id(hir_id)?);\n+        let body = tcx.hir().body(tcx.hir().maybe_body_owned_by(hir_id)?);\n \n         let mut local_collector = LocalCollector::default();\n         local_collector.visit_body(body);"}, {"sha": "321c06897de111a538e7cfbcb0aa05b18caabd7f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -191,7 +191,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         };\n         let (prefix, span) = match *region {\n             ty::ReEarlyBound(ref br) => {\n-                let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n+                let mut sp = cm.def_span(self.hir().span(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n                     .and_then(|generics| generics.get_named(br.name))\n@@ -204,7 +204,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 bound_region: ty::BoundRegion::BrNamed(_, name),\n                 ..\n             }) => {\n-                let mut sp = cm.def_span(self.hir().span_by_hir_id(node));\n+                let mut sp = cm.def_span(self.hir().span(node));\n                 if let Some(param) = self.hir()\n                     .get_generics(scope)\n                     .and_then(|generics| generics.get_named(name))\n@@ -216,11 +216,11 @@ impl<'tcx> TyCtxt<'tcx> {\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),\n-                    self.hir().span_by_hir_id(node),\n+                    self.hir().span(node),\n                 ),\n                 _ => (\n                     format!(\"the lifetime {} as defined on\", region),\n-                    cm.def_span(self.hir().span_by_hir_id(node)),\n+                    cm.def_span(self.hir().span(node)),\n                 ),\n             },\n             _ => bug!(),\n@@ -1338,7 +1338,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                             if let Node::GenericParam(ref param) = hir.get_by_hir_id(id) {\n                                 has_bounds = !param.bounds.is_empty();\n                             }\n-                            let sp = hir.span_by_hir_id(id);\n+                            let sp = hir.span(id);\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n                             let is_impl_trait = bound_kind.to_string().starts_with(\"impl \");"}, {"sha": "f33f917392653a9715a4aa68dd4cdfd9b5b7c194", "filename": "src/librustc/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -52,7 +52,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n         let hir = &self.tcx().hir();\n         if let Some(hir_id) = hir.as_local_hir_id(id) {\n-            if let Some(body_id) = hir.maybe_body_owned_by_by_hir_id(hir_id) {\n+            if let Some(body_id) = hir.maybe_body_owned_by(hir_id) {\n                 let body = hir.body(body_id);\n                 let owner_id = hir.body_owner(body_id);\n                 let fn_decl = hir.fn_decl_by_hir_id(owner_id).unwrap();\n@@ -63,7 +63,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         .filter_map(|(index, arg)| {\n                             // May return None; sometimes the tables are not yet populated.\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let arg_ty_span = hir.span_by_hir_id(ty_hir_id);\n+                            let arg_ty_span = hir.span(ty_hir_id);\n                             let ty = tables.node_type_opt(arg.hir_id)?;\n                             let mut found_anon_region = false;\n                             let new_arg_ty = self.tcx().fold_regions(&ty, &mut false, |r, _| {"}, {"sha": "e90f4ca94c625cbfaa67e73a0c719eab94dfb6f2", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -1399,7 +1399,7 @@ fn late_lint_mod_pass<'tcx, T: for<'a> LateLintPass<'a, 'tcx>>(\n \n     // Visit the crate attributes\n     if hir_id == hir::CRATE_HIR_ID {\n-        walk_list!(cx, visit_attribute, tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID));\n+        walk_list!(cx, visit_attribute, tcx.hir().attrs(hir::CRATE_HIR_ID));\n     }\n }\n "}, {"sha": "041944d887bd9431c0f3ac82eeb2d3df91e86c4b", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -762,7 +762,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n }\n \n pub fn maybe_lint_level_root(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n-    let attrs = tcx.hir().attrs_by_hir_id(id);\n+    let attrs = tcx.hir().attrs(id);\n     attrs.iter().any(|attr| Level::from_symbol(attr.name_or_empty()).is_some())\n }\n "}, {"sha": "63503f58156bc4484b22cdef5c7a2fc59944402f", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         match ty.node {\n             TyKind::Def(item_id, _) => {\n-                let item = self.tcx.hir().expect_item_by_hir_id(item_id.id);\n+                let item = self.tcx.hir().expect_item(item_id.id);\n                 intravisit::walk_item(self, item);\n             }\n             _ => ()"}, {"sha": "3d2bc6c7bf88259ca8b2b5288098af15faa01f79", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -1171,7 +1171,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::Call(ref f, ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent_by_hir_id(expr.hir_id);\n+                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {\n@@ -1182,7 +1182,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             }\n \n             hir::ExprKind::MethodCall(.., ref args) => {\n-                let m = self.ir.tcx.hir().get_module_parent_by_hir_id(expr.hir_id);\n+                let m = self.ir.tcx.hir().get_module_parent(expr.hir_id);\n                 let succ = if self.ir.tcx.is_ty_uninhabited_from(m, self.tables.expr_ty(expr)) {\n                     self.s.exit_ln\n                 } else {"}, {"sha": "a856430e68a234ebde21d4f43e7418bd08c94486", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -358,7 +358,7 @@ impl MutabilityCategory {\n                 }\n                 _ => span_bug!(p.span, \"expected identifier pattern\")\n             },\n-            _ => span_bug!(tcx.hir().span_by_hir_id(id), \"expected identifier pattern\")\n+            _ => span_bug!(tcx.hir().span(id), \"expected identifier pattern\")\n         };\n         debug!(\"MutabilityCategory::{}(tcx, id={:?}) => {:?}\",\n                \"from_local\", id, ret);"}, {"sha": "2285beb3758599f20e0662deed170811869f1a6c", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -174,12 +174,12 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         } else {\n                             let impl_did = self.tcx\n                                                .hir()\n-                                               .get_parent_did_by_hir_id(hir_id);\n+                                               .get_parent_did(hir_id);\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too.\n                             let impl_hir_id = self.tcx.hir().as_local_hir_id(impl_did).unwrap();\n-                            match self.tcx.hir().expect_item_by_hir_id(impl_hir_id).node {\n+                            match self.tcx.hir().expect_item(impl_hir_id).node {\n                                 hir::ItemKind::Impl(..) => {\n                                     let generics = self.tcx.generics_of(impl_did);\n                                     generics.requires_monomorphization(self.tcx)\n@@ -296,7 +296,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         self.visit_nested_body(body);\n                     }\n                     hir::ImplItemKind::Method(_, body) => {\n-                        let did = self.tcx.hir().get_parent_did_by_hir_id(search_item);\n+                        let did = self.tcx.hir().get_parent_did(search_item);\n                         if method_might_be_inlined(self.tcx, impl_item, did) {\n                             self.visit_nested_body(body)\n                         }"}, {"sha": "dfab8e36bf9d1a4ac963b9b18fbe0d6fda6e9f54", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -188,7 +188,7 @@ impl Scope {\n         if hir_id == hir::DUMMY_HIR_ID {\n             return DUMMY_SP;\n         }\n-        let span = tcx.hir().span_by_hir_id(hir_id);\n+        let span = tcx.hir().span(hir_id);\n         if let ScopeData::Remainder(first_statement_index) = self.data {\n             if let Node::Block(ref blk) = tcx.hir().get_by_hir_id(hir_id) {\n                 // Want span for scope starting after the\n@@ -649,7 +649,7 @@ impl<'tcx> ScopeTree {\n         let param_owner = tcx.parent(br.def_id).unwrap();\n \n         let param_owner_id = tcx.hir().as_local_hir_id(param_owner).unwrap();\n-        let scope = tcx.hir().maybe_body_owned_by_by_hir_id(param_owner_id).map(|body_id| {\n+        let scope = tcx.hir().maybe_body_owned_by(param_owner_id).map(|body_id| {\n             tcx.hir().body(body_id).value.hir_id.local_id\n         }).unwrap_or_else(|| {\n             // The lifetime was defined on node that doesn't own a body,\n@@ -1277,7 +1277,7 @@ impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n \n         // The body of the every fn is a root scope.\n         self.cx.parent = self.cx.var_parent;\n-        if self.tcx.hir().body_owner_kind_by_hir_id(owner_id).is_fn_or_closure() {\n+        if self.tcx.hir().body_owner_kind(owner_id).is_fn_or_closure() {\n             self.visit_expr(&body.value)\n         } else {\n             // Only functions have an outer terminating (drop) scope, while\n@@ -1336,7 +1336,7 @@ fn region_scope_tree<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ScopeTree\n     }\n \n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by_by_hir_id(id) {\n+    let scope_tree = if let Some(body_id) = tcx.hir().maybe_body_owned_by(id) {\n         let mut visitor = RegionResolutionVisitor {\n             tcx,\n             scope_tree: ScopeTree::default(),"}, {"sha": "6f2c4b66f5ec4eec79172b92bf2890a4dbf2e7d4", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -625,7 +625,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 // `abstract type MyAnonTy<'b>: MyTrait<'b>;`\n                 //                          ^            ^ this gets resolved in the scope of\n                 //                                         the exist_ty generics\n-                let (generics, bounds) = match self.tcx.hir().expect_item_by_hir_id(item_id.id).node\n+                let (generics, bounds) = match self.tcx.hir().expect_item(item_id.id).node\n                 {\n                     // named existential types are reached via TyKind::Path\n                     // this arm is for `impl Trait` in the types of statics, constants and locals\n@@ -1236,7 +1236,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body) {\n                         signal_shadowing_problem(\n                             tcx,\n                             label.name,\n-                            original_lifetime(tcx.hir().span_by_hir_id(hir_id)),\n+                            original_lifetime(tcx.hir().span(hir_id)),\n                             shadower_label(label.span),\n                         );\n                         return;\n@@ -1590,7 +1590,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             if let Some(parent_hir_id) = self.tcx.hir()\n                                 .as_local_hir_id(parent_def_id) {\n                                     // lifetimes in `derive` expansions don't count (Issue #53738)\n-                                    if self.tcx.hir().attrs_by_hir_id(parent_hir_id).iter()\n+                                    if self.tcx.hir().attrs(parent_hir_id).iter()\n                                         .any(|attr| attr.check_name(sym::automatically_derived)) {\n                                             continue;\n                                         }\n@@ -1690,7 +1690,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         // Find the start of nested early scopes, e.g., in methods.\n         let mut index = 0;\n         if let Some(parent_id) = parent_id {\n-            let parent = self.tcx.hir().expect_item_by_hir_id(parent_id);\n+            let parent = self.tcx.hir().expect_item(parent_id);\n             if sub_items_have_self_param(&parent.node) {\n                 index += 1; // Self comes before lifetimes\n             }\n@@ -2065,7 +2065,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) = self.tcx\n                     .hir()\n-                    .expect_item_by_hir_id(self.tcx.hir().get_parent_item(parent))\n+                    .expect_item(self.tcx.hir().get_parent_item(parent))\n                     .node\n                 {\n                     assoc_item_kind = trait_items\n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }) => {\n                 if let hir::ItemKind::Impl(.., ref self_ty, ref impl_items) = self.tcx\n                     .hir()\n-                    .expect_item_by_hir_id(self.tcx.hir().get_parent_item(parent))\n+                    .expect_item(self.tcx.hir().get_parent_item(parent))\n                     .node\n                 {\n                     impl_self = Some(self_ty);\n@@ -2629,7 +2629,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         signal_shadowing_problem(\n                             self.tcx,\n                             param.name.ident().name,\n-                            original_lifetime(self.tcx.hir().span_by_hir_id(hir_id)),\n+                            original_lifetime(self.tcx.hir().span(hir_id)),\n                             shadower_lifetime(&param),\n                         );\n                         return;"}, {"sha": "1d5c1cb927d280764f6c090dbf9890ee15160504", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -2565,7 +2565,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                             let name = if tcx.sess.opts.debugging_opts.span_free_formats {\n                                 format!(\"[closure@{:?}]\", hir_id)\n                             } else {\n-                                format!(\"[closure@{:?}]\", tcx.hir().span_by_hir_id(hir_id))\n+                                format!(\"[closure@{:?}]\", tcx.hir().span(hir_id))\n                             };\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n@@ -2585,7 +2585,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                     AggregateKind::Generator(def_id, _, _) => ty::tls::with(|tcx| {\n                         if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n                             let name = format!(\"[generator@{:?}]\",\n-                                               tcx.hir().span_by_hir_id(hir_id));\n+                                               tcx.hir().span(hir_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n \n                             if let Some(upvars) = tcx.upvars(def_id) {"}, {"sha": "432a61de6cb984cc46ae500c4bd520d53d3877fb", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -218,7 +218,7 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(hir_id) => {\n                 Some(hir_id)\n             }\n-        }.map(|hir_id| tcx.hir().span_by_hir_id(hir_id))\n+        }.map(|hir_id| tcx.hir().span(hir_id))\n     }\n }\n "}, {"sha": "dcf69fee0e16d30d0ee17333d7501e174c36796b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -1096,7 +1096,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             Node::Ctor(ref variant_data) => {\n                 let span = variant_data.ctor_hir_id()\n-                    .map(|hir_id| self.tcx.hir().span_by_hir_id(hir_id))\n+                    .map(|hir_id| self.tcx.hir().span(hir_id))\n                     .unwrap_or(DUMMY_SP);\n                 let span = self.tcx.sess.source_map().def_span(span);\n "}, {"sha": "2d295679be32406c2eac5c67dc8b418d8d8045cf", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -654,7 +654,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn impl_is_default(self, node_item_def_id: DefId) -> bool {\n         match self.hir().as_local_hir_id(node_item_def_id) {\n             Some(hir_id) => {\n-                let item = self.hir().expect_item_by_hir_id(hir_id);\n+                let item = self.hir().expect_item(hir_id);\n                 if let hir::ItemKind::Impl(_, _, defaultness, ..) = item.node {\n                     defaultness.is_default()\n                 } else {"}, {"sha": "361410380e8f8ad52b4e738ab9ae31c9b7d14ab1", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -277,7 +277,7 @@ impl Visibility {\n                 def => Visibility::Restricted(def.def_id()),\n             },\n             hir::VisibilityKind::Inherited => {\n-                Visibility::Restricted(tcx.hir().get_module_parent_by_hir_id(id))\n+                Visibility::Restricted(tcx.hir().get_module_parent(id))\n             }\n         }\n     }\n@@ -3016,7 +3016,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Gets the attributes of a definition.\n     pub fn get_attrs(self, did: DefId) -> Attributes<'tcx> {\n         if let Some(id) = self.hir().as_local_hir_id(did) {\n-            Attributes::Borrowed(self.hir().attrs_by_hir_id(id))\n+            Attributes::Borrowed(self.hir().attrs(id))\n         } else {\n             Attributes::Owned(self.item_attrs(did))\n         }\n@@ -3068,7 +3068,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {\n         if impl_did.is_local() {\n             let hir_id = self.hir().as_local_hir_id(impl_did).unwrap();\n-            Ok(self.hir().span_by_hir_id(hir_id))\n+            Ok(self.hir().span(hir_id))\n         } else {\n             Err(self.crate_name(impl_did.krate))\n         }\n@@ -3103,7 +3103,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let scope = match ident.span.modernize_and_adjust(self.expansion_that_defined(scope)) {\n             Some(actual_expansion) =>\n                 self.hir().definitions().parent_module_of_macro_def(actual_expansion),\n-            None => self.hir().get_module_parent_by_hir_id(block),\n+            None => self.hir().get_module_parent(block),\n         };\n         (ident, scope)\n     }\n@@ -3129,7 +3129,7 @@ fn associated_item<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> AssocItem {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let parent_id = tcx.hir().get_parent_item(id);\n     let parent_def_id = tcx.hir().local_def_id_from_hir_id(parent_id);\n-    let parent_item = tcx.hir().expect_item_by_hir_id(parent_id);\n+    let parent_item = tcx.hir().expect_item(parent_id);\n     match parent_item.node {\n         hir::ItemKind::Impl(.., ref impl_item_refs) => {\n             if let Some(impl_item_ref) = impl_item_refs.iter().find(|i| i.id.hir_id == id) {\n@@ -3186,7 +3186,7 @@ fn adt_sized_constraint<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> AdtSizedConst\n \n fn associated_item_def_ids<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx [DefId] {\n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item_by_hir_id(id);\n+    let item = tcx.hir().expect_item(id);\n     match item.node {\n         hir::ItemKind::Trait(.., ref trait_item_refs) => {\n             tcx.arena.alloc_from_iter(\n@@ -3266,7 +3266,7 @@ fn param_env<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ParamEnv<'tcx> {\n     );\n \n     let body_id = tcx.hir().as_local_hir_id(def_id).map_or(hir::DUMMY_HIR_ID, |id| {\n-        tcx.hir().maybe_body_owned_by_by_hir_id(id).map_or(id, |body| body.hir_id)\n+        tcx.hir().maybe_body_owned_by(id).map_or(id, |body| body.hir_id)\n     });\n     let cause = traits::ObligationCause::misc(tcx.def_span(def_id), body_id);\n     traits::normalize_param_env_or_error(tcx, def_id, unnormalized_env, cause)"}, {"sha": "d143cc3e6092d00331c829ccc078698361eaf733", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -589,7 +589,7 @@ pub trait PrettyPrinter<'tcx>:\n \n                 // FIXME(eddyb) should use `def_span`.\n                 if let Some(hir_id) = self.tcx().hir().as_local_hir_id(did) {\n-                    p!(write(\"@{:?}\", self.tcx().hir().span_by_hir_id(hir_id)));\n+                    p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n                     let mut sep = \" \";\n                     for (&var_id, upvar_ty) in self.tcx().upvars(did)\n                         .as_ref()\n@@ -631,7 +631,7 @@ pub trait PrettyPrinter<'tcx>:\n                     if self.tcx().sess.opts.debugging_opts.span_free_formats {\n                         p!(write(\"@{:?}\", hir_id));\n                     } else {\n-                        p!(write(\"@{:?}\", self.tcx().hir().span_by_hir_id(hir_id)));\n+                        p!(write(\"@{:?}\", self.tcx().hir().span(hir_id)));\n                     }\n                     let mut sep = \" \";\n                     for (&var_id, upvar_ty) in self.tcx().upvars(did)"}, {"sha": "58be2cf76c72438ee3a373d24d11ca23b00f5b33", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -88,7 +88,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>, errors: &[MoveErr\n             }\n         }\n         if let NoteClosureEnv(upvar_id) = error.move_from.note {\n-            err.span_label(bccx.tcx.hir().span_by_hir_id(upvar_id.var_path.hir_id),\n+            err.span_label(bccx.tcx.hir().span(upvar_id.var_path.hir_id),\n                            \"captured outer variable\");\n         }\n         err.emit();"}, {"sha": "cc9c83de179c8c3969faed963ab9812b1fb4ec51", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -699,7 +699,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n             }\n \n             move_data::MoveExpr |\n-            move_data::MovePat => (self.tcx.hir().span_by_hir_id(hir_id), \"\"),\n+            move_data::MovePat => (self.tcx.hir().span(hir_id), \"\"),\n \n             move_data::Captured =>\n                 (match self.tcx.hir().expect_expr_by_hir_id(hir_id).node {\n@@ -828,7 +828,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                         let mut db = self.cannot_assign(error_span, &descr, Origin::Ast);\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n                             let hir_id = upvar_id.var_path.hir_id;\n-                            let sp = self.tcx.hir().span_by_hir_id(hir_id);\n+                            let sp = self.tcx.hir().span(hir_id);\n                             let fn_closure_msg = \"`Fn` closures cannot capture their enclosing \\\n                                                   environment for modifications\";\n                             match (self.tcx.sess.source_map().span_to_snippet(sp), &err.cmt.cat) {\n@@ -1117,7 +1117,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                     \"consider changing this closure to take self by mutable reference\"\n                 };\n                 let hir_id = self.tcx.hir().local_def_id_to_hir_id(id);\n-                let help_span = self.tcx.hir().span_by_hir_id(hir_id);\n+                let help_span = self.tcx.hir().span(hir_id);\n                 self.cannot_act_on_capture_in_sharable_fn(span,\n                                                           prefix,\n                                                           (help_span, help_msg),\n@@ -1223,7 +1223,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n             Some(ImmutabilityBlame::LocalDeref(hir_id)) => {\n                 match self.local_binding_mode(hir_id) {\n                     ty::BindByReference(..) => {\n-                        let let_span = self.tcx.hir().span_by_hir_id(hir_id);\n+                        let let_span = self.tcx.hir().span(hir_id);\n                         let suggestion = suggest_ref_mut(self.tcx, let_span);\n                         if let Some(replace_str) = suggestion {\n                             db.span_suggestion(\n@@ -1271,7 +1271,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                             db: &mut DiagnosticBuilder<'_>,\n                             borrowed_hir_id: hir::HirId,\n                             binding_hir_id: hir::HirId) {\n-        let let_span = self.tcx.hir().span_by_hir_id(binding_hir_id);\n+        let let_span = self.tcx.hir().span(binding_hir_id);\n         if let ty::BindByValue(..) = self.local_binding_mode(binding_hir_id) {\n             if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(let_span) {\n                 let (ty, is_implicit_self) = self.local_ty(binding_hir_id);\n@@ -1289,7 +1289,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 {\n                     let borrow_expr_id = self.tcx.hir().get_parent_node_by_hir_id(borrowed_hir_id);\n                     db.span_suggestion(\n-                        self.tcx.hir().span_by_hir_id(borrow_expr_id),\n+                        self.tcx.hir().span(borrow_expr_id),\n                         \"consider removing the `&mut`, as it is an \\\n                         immutable binding to a mutable reference\",\n                         snippet,\n@@ -1360,7 +1360,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 if *kind == ty::ClosureKind::Fn {\n                     let closure_hir_id =\n                         self.tcx.hir().local_def_id_to_hir_id(upvar_id.closure_expr_id);\n-                    db.span_help(self.tcx.hir().span_by_hir_id(closure_hir_id),\n+                    db.span_help(self.tcx.hir().span(closure_hir_id),\n                                  \"consider changing this closure to take \\\n                                   self by mutable reference\");\n                 }\n@@ -1369,7 +1369,7 @@ impl BorrowckCtxt<'_, 'tcx> {\n                 if let Categorization::Deref(..) = err.cmt.cat {\n                     db.span_label(*error_span, \"cannot borrow as mutable\");\n                 } else if let Categorization::Local(local_id) = err.cmt.cat {\n-                    let span = self.tcx.hir().span_by_hir_id(local_id);\n+                    let span = self.tcx.hir().span(local_id);\n                     if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n                         if snippet.starts_with(\"ref mut \") || snippet.starts_with(\"&mut \") {\n                             db.span_label(*error_span, \"cannot reborrow mutably\");"}, {"sha": "dc50c0e19efbf5faee4dc33d703009da258365e8", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -29,7 +29,7 @@ impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n                 cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n             MonoItem::GlobalAsm(hir_id) => {\n-                let item = cx.tcx().hir().expect_item_by_hir_id(hir_id);\n+                let item = cx.tcx().hir().expect_item(hir_id);\n                 if let hir::ItemKind::GlobalAsm(ref ga) = item.node {\n                     cx.codegen_global_asm(ga);\n                 } else {"}, {"sha": "683da5865cda4e8905817bb83c725bf28289960e", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -923,7 +923,7 @@ fn print_with_analysis<'tcx>(\n                                             node);\n \n                     let hir_id = tcx.hir().node_to_hir_id(nodeid);\n-                    tcx.sess.span_fatal(tcx.hir().span_by_hir_id(hir_id), &message)\n+                    tcx.sess.span_fatal(tcx.hir().span(hir_id), &message)\n                 }\n             }\n         }"}, {"sha": "b221b8ed30c59dc8c2a314636e4ad29fc501b6c4", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -254,7 +254,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         let crate_ident = if let Some(name) = &cx.tcx.sess.opts.crate_name {\n             Some(Ident::from_str(name))\n         } else {\n-            attr::find_by_name(&cx.tcx.hir().attrs_by_hir_id(hir::CRATE_HIR_ID), sym::crate_name)\n+            attr::find_by_name(&cx.tcx.hir().attrs(hir::CRATE_HIR_ID), sym::crate_name)\n                 .and_then(|attr| attr.meta())\n                 .and_then(|meta| {\n                     meta.name_value_literal().and_then(|lit| {"}, {"sha": "9fc23e45d203cab296e5aa26fc385175fc61151d", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -921,7 +921,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem) {\n         let mut vis = ImproperCTypesVisitor { cx };\n-        let abi = cx.tcx.hir().get_foreign_abi_by_hir_id(it.hir_id);\n+        let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n         if abi != Abi::RustIntrinsic && abi != Abi::PlatformIntrinsic {\n             match it.node {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {"}, {"sha": "f84ce2f015edf3d75b70c32588e51174d59165ba", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             descr_post_path: &str,\n         ) -> bool {\n             if ty.is_unit() || cx.tcx.is_ty_uninhabited_from(\n-                cx.tcx.hir().get_module_parent_by_hir_id(expr.hir_id), ty)\n+                cx.tcx.hir().get_module_parent(expr.hir_id), ty)\n             {\n                 return true;\n             }"}, {"sha": "b52b6dfbb5e1229f7f5a9fed2fe59530afbc7826", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -579,7 +579,7 @@ impl EncodeContext<'tcx> {\n         };\n \n         let enum_id = tcx.hir().as_local_hir_id(enum_did).unwrap();\n-        let enum_vis = &tcx.hir().expect_item_by_hir_id(enum_id).vis;\n+        let enum_vis = &tcx.hir().expect_item(enum_id).vis;\n \n         Entry {\n             kind: EntryKind::Variant(self.lazy(&data)),\n@@ -632,7 +632,7 @@ impl EncodeContext<'tcx> {\n         // Variant constructors have the same visibility as the parent enums, unless marked as\n         // non-exhaustive, in which case they are lowered to `pub(crate)`.\n         let enum_id = tcx.hir().as_local_hir_id(enum_did).unwrap();\n-        let enum_vis = &tcx.hir().expect_item_by_hir_id(enum_id).vis;\n+        let enum_vis = &tcx.hir().expect_item(enum_id).vis;\n         let mut ctor_vis = ty::Visibility::from_hir(enum_vis, enum_id, tcx);\n         if variant.is_field_list_non_exhaustive() && ctor_vis == ty::Visibility::Public {\n             ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n@@ -751,7 +751,7 @@ impl EncodeContext<'tcx> {\n         };\n \n         let struct_id = tcx.hir().as_local_hir_id(adt_def_id).unwrap();\n-        let struct_vis = &tcx.hir().expect_item_by_hir_id(struct_id).vis;\n+        let struct_vis = &tcx.hir().expect_item(struct_id).vis;\n         let mut ctor_vis = ty::Visibility::from_hir(struct_vis, struct_id, tcx);\n         for field in &variant.fields {\n             if ctor_vis.is_at_least(field.vis, tcx) {"}, {"sha": "c4a11efe5bce43a215e62fbca7295006cbba2305", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -177,7 +177,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         |bd, i| DebugFormatted::new(&bd.move_data().move_paths[i]),\n     ));\n \n-    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind_by_hir_id(id).is_fn_or_closure();\n+    let locals_are_invalidated_at_exit = tcx.hir().body_owner_kind(id).is_fn_or_closure();\n     let borrow_set = Rc::new(BorrowSet::build(\n             tcx, body, locals_are_invalidated_at_exit, &mdpe.move_data));\n "}, {"sha": "d15229367251ae3befe6173a30c808ebae1934b1", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -422,7 +422,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 let upvar = &self.upvars[upvar_field.unwrap().index()];\n                 let upvar_hir_id = upvar.var_hir_id;\n                 let upvar_name = upvar.name;\n-                let upvar_span = self.infcx.tcx.hir().span_by_hir_id(upvar_hir_id);\n+                let upvar_span = self.infcx.tcx.hir().span(upvar_hir_id);\n \n                 let place_name = self.describe_place(move_place).unwrap();\n "}, {"sha": "46b690129ea259d9b4e077b95bc482c58aa9cee6", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -310,7 +310,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let scope = error_region.free_region_binding_scope(tcx);\n         let node = tcx.hir().as_local_hir_id(scope).unwrap_or(hir::DUMMY_HIR_ID);\n \n-        let span = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(node));\n+        let span = tcx.sess.source_map().def_span(tcx.hir().span(node));\n         if let Some(param) = tcx.hir()\n             .get_generics(scope)\n             .and_then(|generics| generics.get_named(name))"}, {"sha": "59fc4113794a45ff8ecbaa0d68d221f768a60f19", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/var_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fvar_name.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"get_upvar_name_and_span_for_region: upvar_hir_id={:?}\", upvar_hir_id);\n \n         let upvar_name = tcx.hir().name_by_hir_id(upvar_hir_id);\n-        let upvar_span = tcx.hir().span_by_hir_id(upvar_hir_id);\n+        let upvar_span = tcx.hir().span(upvar_hir_id);\n         debug!(\"get_upvar_name_and_span_for_region: upvar_name={:?} upvar_span={:?}\",\n                upvar_name, upvar_span);\n "}, {"sha": "a236359f1d4313627f7f8b422d09a7cf37be72e9", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -471,7 +471,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         let tcx = self.infcx.tcx;\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n \n-        match tcx.hir().body_owner_kind_by_hir_id(self.mir_hir_id) {\n+        match tcx.hir().body_owner_kind(self.mir_hir_id) {\n             BodyOwnerKind::Closure |\n             BodyOwnerKind::Fn => {\n                 let defining_ty = if self.mir_def_id == closure_base_def_id {"}, {"sha": "a0e45caeb6b3bf6a3991a56a530a2150d43330fd", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -55,10 +55,10 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n             (*body_id, ty.span)\n         }\n         Node::AnonConst(hir::AnonConst { body, hir_id, .. }) => {\n-            (*body, tcx.hir().span_by_hir_id(*hir_id))\n+            (*body, tcx.hir().span(*hir_id))\n         }\n \n-        _ => span_bug!(tcx.hir().span_by_hir_id(id), \"can't build MIR for {:?}\", def_id),\n+        _ => span_bug!(tcx.hir().span(id), \"can't build MIR for {:?}\", def_id),\n     };\n \n     tcx.infer_ctxt().enter(|infcx| {\n@@ -103,7 +103,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n                         let self_arg;\n                         if let Some(ref fn_decl) = tcx.hir().fn_decl_by_hir_id(owner_id) {\n                             let ty_hir_id = fn_decl.inputs[index].hir_id;\n-                            let ty_span = tcx.hir().span_by_hir_id(ty_hir_id);\n+                            let ty_span = tcx.hir().span(ty_hir_id);\n                             opt_ty_info = Some(ty_span);\n                             self_arg = if index == 0 && fn_decl.implicit_self.has_implicit_self() {\n                                 match fn_decl.implicit_self {\n@@ -131,7 +131,7 @@ pub fn mir_build<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Body<'tcx> {\n                     ty::Generator(gen_def_id, gen_substs, ..) =>\n                         gen_substs.sig(gen_def_id, tcx),\n                     _ =>\n-                        span_bug!(tcx.hir().span_by_hir_id(id),\n+                        span_bug!(tcx.hir().span(id),\n                                   \"generator w/o generator type: {:?}\", ty),\n                 };\n                 (Some(gen_sig.yield_ty), gen_sig.return_ty)\n@@ -535,7 +535,7 @@ where\n \n     let tcx = hir.tcx();\n     let tcx_hir = tcx.hir();\n-    let span = tcx_hir.span_by_hir_id(fn_id);\n+    let span = tcx_hir.span(fn_id);\n \n     let hir_tables = hir.tables();\n     let fn_def_id = tcx_hir.local_def_id_from_hir_id(fn_id);\n@@ -650,7 +650,7 @@ fn construct_const<'a, 'tcx>(\n ) -> Body<'tcx> {\n     let tcx = hir.tcx();\n     let owner_id = tcx.hir().body_owner(body_id);\n-    let span = tcx.hir().span_by_hir_id(owner_id);\n+    let span = tcx.hir().span(owner_id);\n     let mut builder = Builder::new(\n         hir,\n         span,\n@@ -689,7 +689,7 @@ fn construct_error<'a, 'tcx>(\n     body_id: hir::BodyId\n ) -> Body<'tcx> {\n     let owner_id = hir.tcx().hir().body_owner(body_id);\n-    let span = hir.tcx().hir().span_by_hir_id(owner_id);\n+    let span = hir.tcx().hir().span(owner_id);\n     let ty = hir.tcx().types.err;\n     let mut builder = Builder::new(hir, span, 0, Safety::Safe, ty, span, vec![], vec![], false);\n     let source_info = builder.source_info(span);"}, {"sha": "d5932052d1aa3365731b5b63bf2e20217531107c", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -49,7 +49,7 @@ fn mirror_stmts<'a, 'tcx>(\n     for (index, stmt) in stmts.iter().enumerate() {\n         let hir_id = stmt.hir_id;\n         let opt_dxn_ext = cx.region_scope_tree.opt_destruction_scope(hir_id.local_id);\n-        let stmt_span = StatementSpan(cx.tcx.hir().span_by_hir_id(hir_id));\n+        let stmt_span = StatementSpan(cx.tcx.hir().span(hir_id));\n         match stmt.node {\n             hir::StmtKind::Expr(ref expr) |\n             hir::StmtKind::Semi(ref expr) => {"}, {"sha": "ff53cf02d8d15b8b77e5d2d10181f1cecfd7dd25", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let src_def_id = tcx.hir().local_def_id_from_hir_id(src_id);\n         let tables = tcx.typeck_tables_of(src_def_id);\n-        let body_owner_kind = tcx.hir().body_owner_kind_by_hir_id(src_id);\n+        let body_owner_kind = tcx.hir().body_owner_kind(src_id);\n \n         let constness = match body_owner_kind {\n             hir::BodyOwnerKind::Const |\n@@ -65,7 +65,7 @@ impl<'a, 'tcx> Cx<'a, 'tcx> {\n             hir::BodyOwnerKind::Fn => hir::Constness::NotConst,\n         };\n \n-        let attrs = tcx.hir().attrs_by_hir_id(src_id);\n+        let attrs = tcx.hir().attrs(src_id);\n \n         // Some functions always have overflow checks enabled,\n         // however, they may not get codegen'd, depending on"}, {"sha": "159b526bdba654cad82cab7931eaeae872bf286d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -161,7 +161,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             }\n         }\n \n-        let module = self.tcx.hir().get_module_parent_by_hir_id(scrut.hir_id);\n+        let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n             let mut have_errors = false;\n \n@@ -193,7 +193,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Then, if the match has no arms, check whether the scrutinee\n             // is uninhabited.\n             let pat_ty = self.tables.node_type(scrut.hir_id);\n-            let module = self.tcx.hir().get_module_parent_by_hir_id(scrut.hir_id);\n+            let module = self.tcx.hir().get_module_parent(scrut.hir_id);\n             let mut def_span = None;\n             let mut missing_variants = vec![];\n             if inlined_arms.is_empty() {\n@@ -261,7 +261,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n     }\n \n     fn check_irrefutable(&self, pat: &'tcx Pat, origin: &str) {\n-        let module = self.tcx.hir().get_module_parent_by_hir_id(pat.hir_id);\n+        let module = self.tcx.hir().get_module_parent(pat.hir_id);\n         MatchCheckCtxt::create_and_enter(self.tcx, self.param_env, module, |ref mut cx| {\n             let mut patcx = PatternContext::new(self.tcx,\n                                                 self.param_env.and(self.identity_substs),"}, {"sha": "a7120888742d0faa0f8637003f2b99864d96aeac", "filename": "src/librustc_mir/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flints.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -130,7 +130,7 @@ fn check_fn_for_unconditional_recursion(\n     // recurs.\n     if !reached_exit_without_self_call && !self_call_locations.is_empty() {\n         let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-        let sp = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(hir_id));\n+        let sp = tcx.sess.source_map().def_span(tcx.hir().span(hir_id));\n         let mut db = tcx.struct_span_lint_hir(UNCONDITIONAL_RECURSION,\n                                               hir_id,\n                                               sp,"}, {"sha": "2e74ebcf061e2c3800a38831f6adff5ba983852f", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -455,7 +455,7 @@ fn check_recursion_limit<'tcx>(\n         let error = format!(\"reached the recursion limit while instantiating `{}`\",\n                             instance);\n         if let Some(hir_id) = tcx.hir().as_local_hir_id(def_id) {\n-            tcx.sess.span_fatal(tcx.hir().span_by_hir_id(hir_id), &error);\n+            tcx.sess.span_fatal(tcx.hir().span(hir_id), &error);\n         } else {\n             tcx.sess.fatal(&error);\n         }"}, {"sha": "2bcf058ad7c35c8335766c56749bd0d18b46ddfb", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -193,7 +193,7 @@ pub trait MonoItemExt<'tcx>: fmt::Debug {\n             MonoItem::GlobalAsm(hir_id) => {\n                 Some(hir_id)\n             }\n-        }.map(|hir_id| tcx.hir().span_by_hir_id(hir_id))\n+        }.map(|hir_id| tcx.hir().span(hir_id))\n     }\n }\n "}, {"sha": "32153f7bcd9cc44835d826b88060ffbc791e0931", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -488,7 +488,7 @@ fn check_unused_unsafe<'a, 'tcx>(\n ) {\n     let body_id =\n         tcx.hir().as_local_hir_id(def_id).and_then(|hir_id| {\n-            tcx.hir().maybe_body_owned_by_by_hir_id(hir_id)\n+            tcx.hir().maybe_body_owned_by(hir_id)\n         });\n \n     let body_id = match body_id {\n@@ -527,7 +527,7 @@ fn unsafety_check_result<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> UnsafetyChec\n     let param_env = tcx.param_env(def_id);\n \n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind_by_hir_id(id) {\n+    let (const_context, min_const_fn) = match tcx.hir().body_owner_kind(id) {\n         hir::BodyOwnerKind::Closure => (false, false),\n         hir::BodyOwnerKind::Fn => (tcx.is_const_fn(def_id), tcx.is_min_const_fn(def_id)),\n         hir::BodyOwnerKind::Const |\n@@ -591,12 +591,12 @@ fn is_enclosed(\n }\n \n fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id: hir::HirId) {\n-    let span = tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(id));\n+    let span = tcx.sess.source_map().def_span(tcx.hir().span(id));\n     let msg = \"unnecessary `unsafe` block\";\n     let mut db = tcx.struct_span_lint_hir(UNUSED_UNSAFE, id, span, msg);\n     db.span_label(span, msg);\n     if let Some((kind, id)) = is_enclosed(tcx, used_unsafe, id) {\n-        db.span_label(tcx.sess.source_map().def_span(tcx.hir().span_by_hir_id(id)),\n+        db.span_label(tcx.sess.source_map().def_span(tcx.hir().span(id)),\n                       format!(\"because it's nested under this `unsafe` {}\", kind));\n     }\n     db.emit();"}, {"sha": "5e6f1bc15f02a655ea1b7fe79567ae56b8c2ec91", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -70,7 +70,7 @@ impl Inliner<'tcx> {\n \n         // Only do inlining into fn bodies.\n         let id = self.tcx.hir().as_local_hir_id(self.source.def_id()).unwrap();\n-        if self.tcx.hir().body_owner_kind_by_hir_id(id).is_fn_or_closure()\n+        if self.tcx.hir().body_owner_kind(id).is_fn_or_closure()\n             && self.source.promoted.is_none()\n         {\n             for (bb, bb_data) in caller_body.basic_blocks().iter_enumerated() {"}, {"sha": "79bb2cfe08db32ff80f7880e61b6ad1fd688fb12", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -208,7 +208,7 @@ fn mir_const<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>>\n \n fn mir_validated(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx Steal<Body<'tcx>> {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind_by_hir_id(hir_id) {\n+    if let hir::BodyOwnerKind::Const = tcx.hir().body_owner_kind(hir_id) {\n         // Ensure that we compute the `mir_const_qualif` for constants at\n         // this point, before we steal the mir-const result.\n         let _ = tcx.mir_const_qualif(def_id);"}, {"sha": "b6abfdb7425aa2cd6ea4c02a2dfb662d25af7cae", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -1503,7 +1503,7 @@ impl MirPass for QualifyAndPromoteConstants {\n         let def_id = src.def_id();\n         let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n         let mut const_promoted_temps = None;\n-        let mode = match tcx.hir().body_owner_kind_by_hir_id(id) {\n+        let mode = match tcx.hir().body_owner_kind(id) {\n             hir::BodyOwnerKind::Closure => Mode::NonConstFn,\n             hir::BodyOwnerKind::Fn => {\n                 if tcx.is_const_fn(def_id) {"}, {"sha": "5397a4af8fa8fb6c19df1bbee8e3255de7a9067d", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -175,7 +175,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         self.in_fn = false;\n         self.in_static = false;\n \n-        match self.tcx.hir().body_owner_kind_by_hir_id(item_id) {\n+        match self.tcx.hir().body_owner_kind(item_id) {\n             hir::BodyOwnerKind::Closure |\n             hir::BodyOwnerKind::Fn => self.in_fn = true,\n             hir::BodyOwnerKind::Static(_) => self.in_static = true,"}, {"sha": "9eaa6f920f085808f5910ebdb5aab440c0bf671d", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -233,7 +233,7 @@ fn def_id_visibility<'tcx>(\n                 Node::Item(item) => &item.vis,\n                 Node::ForeignItem(foreign_item) => &foreign_item.vis,\n                 Node::TraitItem(..) | Node::Variant(..) => {\n-                    return def_id_visibility(tcx, tcx.hir().get_parent_did_by_hir_id(hir_id));\n+                    return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id));\n                 }\n                 Node::ImplItem(impl_item) => {\n                     match tcx.hir().get_by_hir_id(tcx.hir().get_parent_item(hir_id)) {\n@@ -255,7 +255,7 @@ fn def_id_visibility<'tcx>(\n                                 tcx, parent_did,\n                             );\n \n-                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n+                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n                             let ctor_did = tcx.hir().local_def_id_from_hir_id(\n                                 vdata.ctor_hir_id().unwrap());\n                             let variant = adt_def.variant_with_ctor_id(ctor_did);\n@@ -294,7 +294,7 @@ fn def_id_visibility<'tcx>(\n                             // visibility to within the crate.\n                             if ctor_vis == ty::Visibility::Public {\n                                 let adt_def =\n-                                    tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n+                                    tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n                                 if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n                                     ctor_vis =\n                                         ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n@@ -311,7 +311,7 @@ fn def_id_visibility<'tcx>(\n                 }\n                 Node::Expr(expr) => {\n                     return (ty::Visibility::Restricted(\n-                        tcx.hir().get_module_parent_by_hir_id(expr.hir_id)),\n+                        tcx.hir().get_module_parent(expr.hir_id)),\n                             expr.span, \"private\")\n                 }\n                 node => bug!(\"unexpected node kind: {:?}\", node)\n@@ -501,11 +501,11 @@ impl EmbargoVisitor<'tcx> {\n             if let Some(item) = module.res\n                 .and_then(|res| res.mod_def_id())\n                 .and_then(|def_id| self.tcx.hir().as_local_hir_id(def_id))\n-                .map(|module_hir_id| self.tcx.hir().expect_item_by_hir_id(module_hir_id))\n+                .map(|module_hir_id| self.tcx.hir().expect_item(module_hir_id))\n              {\n                 if let hir::ItemKind::Mod(m) = &item.node {\n                     for item_id in m.item_ids.as_ref() {\n-                        let item = self.tcx.hir().expect_item_by_hir_id(item_id.id);\n+                        let item = self.tcx.hir().expect_item(item_id.id);\n                         let def_id = self.tcx.hir().local_def_id_from_hir_id(item_id.id);\n                         if !self.tcx.hygienic_eq(segment.ident, item.ident, def_id) { continue; }\n                         if let hir::ItemKind::Use(..) = item.node {\n@@ -764,7 +764,7 @@ impl Visitor<'tcx> for EmbargoVisitor<'tcx> {\n             let module = if module_id == hir::CRATE_HIR_ID {\n                 &self.tcx.hir().krate().module\n             } else if let hir::ItemKind::Mod(ref module) =\n-                          self.tcx.hir().expect_item_by_hir_id(module_id).node {\n+                          self.tcx.hir().expect_item(module_id).node {\n                 module\n             } else {\n                 unreachable!()\n@@ -1690,7 +1690,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             tcx: self.tcx,\n             item_id,\n             item_def_id: self.tcx.hir().local_def_id_from_hir_id(item_id),\n-            span: self.tcx.hir().span_by_hir_id(item_id),\n+            span: self.tcx.hir().span(item_id),\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,"}, {"sha": "42c7ff607c55a538d2d7e8aae044e0e6f10f7e6c", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let def_span = match def {\n                         Res::Err => None,\n                         Res::Local(id) => {\n-                            Some(self.tcx.hir().span_by_hir_id(id))\n+                            Some(self.tcx.hir().span(id))\n                         },\n                         _ => def\n                             .opt_def_id()"}, {"sha": "946082746f46fe9ef55143950b3bb18b188a7eca", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -813,7 +813,7 @@ fn compare_synthetic_generics<'tcx>(\n     {\n         if impl_synthetic != trait_synthetic {\n             let impl_hir_id = tcx.hir().as_local_hir_id(impl_def_id).unwrap();\n-            let impl_span = tcx.hir().span_by_hir_id(impl_hir_id);\n+            let impl_span = tcx.hir().span(impl_hir_id);\n             let trait_span = tcx.def_span(trait_def_id);\n             let mut err = struct_span_err!(tcx.sess,\n                                            impl_span,"}, {"sha": "a2621abf44d8dd29229d8f0107aa95985f542092", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -213,7 +213,7 @@ fn ensure_drop_predicates_are_implied_by_item_defn<'tcx>(\n         // repeated `contains` calls.\n \n         if !assumptions_in_impl_context.contains(&predicate) {\n-            let item_span = tcx.hir().span_by_hir_id(self_type_hir_id);\n+            let item_span = tcx.hir().span(self_type_hir_id);\n             struct_span_err!(\n                 tcx.sess,\n                 drop_impl_span,"}, {"sha": "29b4fee138e829e083a452ea1100768b6f4c5fce", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -264,7 +264,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 // local binding\n                                 if let &QPath::Resolved(_, ref path) = &qpath {\n                                     if let hir::def::Res::Local(hir_id) = path.res {\n-                                        let span = tcx.hir().span_by_hir_id(hir_id);\n+                                        let span = tcx.hir().span(hir_id);\n                                         let snippet = tcx.sess.source_map().span_to_snippet(span);\n                                         let filename = tcx.sess.source_map().span_to_filename(span);\n \n@@ -370,7 +370,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         });\n \n                     if let Some((field, field_ty)) = field_receiver {\n-                        let scope = self.tcx.hir().get_module_parent_by_hir_id(self.body_id);\n+                        let scope = self.tcx.hir().get_module_parent(self.body_id);\n                         let is_accessible = field.vis.is_accessible_from(scope, self.tcx);\n \n                         if is_accessible {\n@@ -564,7 +564,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                               err: &mut DiagnosticBuilder<'_>,\n                               mut msg: String,\n                               candidates: Vec<DefId>) {\n-        let module_did = self.tcx.hir().get_module_parent_by_hir_id(self.body_id);\n+        let module_did = self.tcx.hir().get_module_parent(self.body_id);\n         let module_id = self.tcx.hir().as_local_hir_id(module_did).unwrap();\n         let krate = self.tcx.hir().krate();\n         let (span, found_use) = UsePlacementFinder::check(self.tcx, krate, module_id);\n@@ -897,7 +897,7 @@ impl hir::intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n         // Find a `use` statement.\n         for item_id in &module.item_ids {\n-            let item = self.tcx.hir().expect_item_by_hir_id(item_id.id);\n+            let item = self.tcx.hir().expect_item(item_id.id);\n             match item.node {\n                 hir::ItemKind::Use(..) => {\n                     // Don't suggest placing a `use` before the prelude"}, {"sha": "d4dbb68778ed2d15bad5a45a707104191fa9b5d0", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -622,7 +622,7 @@ impl Inherited<'a, 'tcx> {\n     fn new(infcx: InferCtxt<'a, 'tcx>, def_id: DefId) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().as_local_hir_id(def_id);\n-        let body_id = item_id.and_then(|id| tcx.hir().maybe_body_owned_by_by_hir_id(id));\n+        let body_id = item_id.and_then(|id| tcx.hir().maybe_body_owned_by(id));\n         let implicit_region_bound = body_id.map(|body_id| {\n             let body = tcx.hir().body(body_id);\n             tcx.mk_region(ty::ReScope(region::Scope {\n@@ -821,7 +821,7 @@ fn typeck_tables_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TypeckT\n     }\n \n     let id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let span = tcx.hir().span_by_hir_id(id);\n+    let span = tcx.hir().span(id);\n \n     // Figure out what primary body this item has.\n     let (body_id, fn_decl) = primary_body_of(tcx, id).unwrap_or_else(|| {\n@@ -1193,7 +1193,7 @@ fn check_fn<'a, 'tcx>(\n                 }\n \n                 let inputs = fn_sig.inputs();\n-                let span = fcx.tcx.hir().span_by_hir_id(fn_id);\n+                let span = fcx.tcx.hir().span(fn_id);\n                 if inputs.len() == 1 {\n                     let arg_is_panic_info = match inputs[0].sty {\n                         ty::Ref(region, ty, mutbl) => match ty.sty {\n@@ -1246,7 +1246,7 @@ fn check_fn<'a, 'tcx>(\n                 }\n \n                 let inputs = fn_sig.inputs();\n-                let span = fcx.tcx.hir().span_by_hir_id(fn_id);\n+                let span = fcx.tcx.hir().span(fn_id);\n                 if inputs.len() == 1 {\n                     let arg_is_alloc_layout = match inputs[0].sty {\n                         ty::Adt(ref adt, _) => {\n@@ -1909,11 +1909,11 @@ pub fn check_enum<'tcx>(tcx: TyCtxt<'tcx>, sp: Span, vs: &'tcx [hir::Variant], i\n             let variant_i_hir_id = tcx.hir().as_local_hir_id(variant_did).unwrap();\n             let variant_i = tcx.hir().expect_variant(variant_i_hir_id);\n             let i_span = match variant_i.node.disr_expr {\n-                Some(ref expr) => tcx.hir().span_by_hir_id(expr.hir_id),\n-                None => tcx.hir().span_by_hir_id(variant_i_hir_id)\n+                Some(ref expr) => tcx.hir().span(expr.hir_id),\n+                None => tcx.hir().span(variant_i_hir_id)\n             };\n             let span = match v.node.disr_expr {\n-                Some(ref expr) => tcx.hir().span_by_hir_id(expr.hir_id),\n+                Some(ref expr) => tcx.hir().span(expr.hir_id),\n                 None => v.span\n             };\n             struct_span_err!(tcx.sess, span, E0081,\n@@ -4363,7 +4363,7 @@ pub fn check_bounds_are_used<'tcx>(tcx: TyCtxt<'tcx>, generics: &ty::Generics, t\n     for (&used, param) in types_used.iter().zip(types) {\n         if !used {\n             let id = tcx.hir().as_local_hir_id(param.def_id).unwrap();\n-            let span = tcx.hir().span_by_hir_id(id);\n+            let span = tcx.hir().span(id);\n             struct_span_err!(tcx.sess, span, E0091, \"type parameter `{}` is unused\", param.name)\n                 .span_label(span, \"unused type parameter\")\n                 .emit();"}, {"sha": "5c710399446efba6bc63097365b522728220d71d", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -175,7 +175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         if self.err_count_since_creation() == 0 {\n             // regionck assumes typeck succeeded\n-            rcx.visit_fn_body(fn_id, body, self.tcx.hir().span_by_hir_id(fn_id));\n+            rcx.visit_fn_body(fn_id, body, self.tcx.hir().span(fn_id));\n         }\n \n         rcx.resolve_regions_and_report_errors(SuppressRegionErrors::when_nll_is_enabled(self.tcx));"}, {"sha": "034ff5f8347679387d5392ff5c4dde512e0a3be2", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// the types first.\n pub fn check_item_well_formed<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item_by_hir_id(hir_id);\n+    let item = tcx.hir().expect_item(hir_id);\n \n     debug!(\"check_item_well_formed(it.hir_id={:?}, it.name={})\",\n            item.hir_id,"}, {"sha": "ffc323f28b6757a016dacb9b80b5f1b549f93dfd", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             wbcx.visit_node_id(arg.pat.span, arg.hir_id);\n         }\n         // Type only exists for constants and statics, not functions.\n-        match self.tcx.hir().body_owner_kind_by_hir_id(item_id) {\n+        match self.tcx.hir().body_owner_kind(item_id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => {\n                 wbcx.visit_node_id(body.value.span, item_id);\n             }\n@@ -398,7 +398,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n             if let ty::UserType::TypeOf(_, user_substs) = c_ty.value {\n                 if self.rustc_dump_user_substs {\n                     // This is a unit-testing mechanism.\n-                    let span = self.tcx().hir().span_by_hir_id(hir_id);\n+                    let span = self.tcx().hir().span(hir_id);\n                     // We need to buffer the errors in order to guarantee a consistent\n                     // order when emitting them.\n                     let err = self.tcx().sess.struct_span_err(\n@@ -773,13 +773,13 @@ impl Locatable for Span {\n impl Locatable for DefIndex {\n     fn to_span(&self, tcx: TyCtxt<'_>) -> Span {\n         let hir_id = tcx.hir().def_index_to_hir_id(*self);\n-        tcx.hir().span_by_hir_id(hir_id)\n+        tcx.hir().span(hir_id)\n     }\n }\n \n impl Locatable for hir::HirId {\n     fn to_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        tcx.hir().span_by_hir_id(*self)\n+        tcx.hir().span(*self)\n     }\n }\n "}, {"sha": "dda86778f27270ff295e6a6dd3501eabc1058892", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -121,7 +121,7 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'tcx>) {\n \n     for extern_crate in &crates_to_lint {\n         let id = tcx.hir().as_local_hir_id(extern_crate.def_id).unwrap();\n-        let item = tcx.hir().expect_item_by_hir_id(id);\n+        let item = tcx.hir().expect_item(id);\n \n         // If the crate is fully unused, we suggest removing it altogether.\n         // We do this in any edition."}, {"sha": "e392622060c9b9e1fac4de0e59aed5da75800480", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -88,7 +88,7 @@ fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     debug!(\"visit_implementation_of_copy: self_type={:?} (bound)\",\n            self_type);\n \n-    let span = tcx.hir().span_by_hir_id(impl_hir_id);\n+    let span = tcx.hir().span(impl_hir_id);\n     let param_env = tcx.param_env(impl_did);\n     assert!(!self_type.has_escaping_bound_vars());\n \n@@ -98,7 +98,7 @@ fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n     match param_env.can_type_implement_copy(tcx, self_type) {\n         Ok(()) => {}\n         Err(CopyImplementationError::InfrigingFields(fields)) => {\n-            let item = tcx.hir().expect_item_by_hir_id(impl_hir_id);\n+            let item = tcx.hir().expect_item(impl_hir_id);\n             let span = if let ItemKind::Impl(.., Some(ref tr), _, _) = item.node {\n                 tr.path.span\n             } else {\n@@ -115,7 +115,7 @@ fn visit_implementation_of_copy<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) {\n             err.emit()\n         }\n         Err(CopyImplementationError::NotAnAdt) => {\n-            let item = tcx.hir().expect_item_by_hir_id(impl_hir_id);\n+            let item = tcx.hir().expect_item(impl_hir_id);\n             let span = if let ItemKind::Impl(.., ref ty, _) = item.node {\n                 ty.span\n             } else {\n@@ -161,7 +161,7 @@ fn visit_implementation_of_dispatch_from_dyn<'tcx>(tcx: TyCtxt<'tcx>, impl_did:\n         let dispatch_from_dyn_trait = tcx.lang_items().dispatch_from_dyn_trait().unwrap();\n \n         let impl_hir_id = tcx.hir().as_local_hir_id(impl_did).unwrap();\n-        let span = tcx.hir().span_by_hir_id(impl_hir_id);\n+        let span = tcx.hir().span(impl_hir_id);\n \n         let source = tcx.type_of(impl_did);\n         assert!(!source.has_escaping_bound_vars());\n@@ -343,7 +343,7 @@ pub fn coerce_unsized_info<'tcx>(gcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n            source,\n            target);\n \n-    let span = gcx.hir().span_by_hir_id(impl_hir_id);\n+    let span = gcx.hir().span(impl_hir_id);\n     let param_env = gcx.param_env(impl_did);\n     assert!(!source.has_escaping_bound_vars());\n \n@@ -480,11 +480,11 @@ pub fn coerce_unsized_info<'tcx>(gcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUn\n                                being coerced, none found\");\n                     return err_info;\n                 } else if diff_fields.len() > 1 {\n-                    let item = gcx.hir().expect_item_by_hir_id(impl_hir_id);\n+                    let item = gcx.hir().expect_item(impl_hir_id);\n                     let span = if let ItemKind::Impl(.., Some(ref t), _, _) = item.node {\n                         t.path.span\n                     } else {\n-                        gcx.hir().span_by_hir_id(impl_hir_id)\n+                        gcx.hir().span(impl_hir_id)\n                     };\n \n                     let mut err = struct_span_err!(gcx.sess,"}, {"sha": "5606d9c0ce815157a7b943d8096cae7d2aa5bd90", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -742,7 +742,7 @@ fn super_predicates_of<'tcx>(\n \n fn trait_def<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> &'tcx ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    let item = tcx.hir().expect_item_by_hir_id(hir_id);\n+    let item = tcx.hir().expect_item(hir_id);\n \n     let (is_auto, unsafety) = match item.node {\n         hir::ItemKind::Trait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n@@ -1177,7 +1177,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n             ImplItemKind::Const(ref ty, _) => icx.to_ty(ty),\n             ImplItemKind::Existential(_) => {\n                 if tcx\n-                    .impl_trait_ref(tcx.hir().get_parent_did_by_hir_id(hir_id))\n+                    .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n                     .is_none()\n                 {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n@@ -1187,7 +1187,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n             }\n             ImplItemKind::Type(ref ty) => {\n                 if tcx\n-                    .impl_trait_ref(tcx.hir().get_parent_did_by_hir_id(hir_id))\n+                    .impl_trait_ref(tcx.hir().get_parent_did(hir_id))\n                     .is_none()\n                 {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n@@ -1272,7 +1272,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n             ..\n         }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_did_by_hir_id(hir_id))\n+                tcx.type_of(tcx.hir().get_parent_did(hir_id))\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -1325,7 +1325,7 @@ pub fn checked_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, fail: bool) -> Op\n                     ..\n                 }) if e.hir_id == hir_id =>\n                 {\n-                    tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id))\n+                    tcx.adt_def(tcx.hir().get_parent_did(hir_id))\n                         .repr\n                         .discr_type()\n                         .to_ty(tcx)\n@@ -1709,15 +1709,15 @@ fn fn_sig<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n             node: ForeignItemKind::Fn(ref fn_decl, _, _),\n             ..\n         }) => {\n-            let abi = tcx.hir().get_foreign_abi_by_hir_id(hir_id);\n+            let abi = tcx.hir().get_foreign_abi(hir_id);\n             compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n \n         Ctor(data) | Variant(Spanned {\n             node: hir::VariantKind { data, ..  },\n             ..\n         }) if data.ctor_hir_id().is_some() => {\n-            let ty = tcx.type_of(tcx.hir().get_parent_did_by_hir_id(hir_id));\n+            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id));\n             let inputs = data.fields()\n                 .iter()\n                 .map(|f| tcx.type_of(tcx.hir().local_def_id_from_hir_id(f.hir_id)));\n@@ -1762,7 +1762,7 @@ fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef\n     let icx = ItemCtxt::new(tcx, def_id);\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    match tcx.hir().expect_item_by_hir_id(hir_id).node {\n+    match tcx.hir().expect_item(hir_id).node {\n         hir::ItemKind::Impl(.., ref opt_trait_ref, _, _) => {\n             opt_trait_ref.as_ref().map(|ast_trait_ref| {\n                 let selfty = tcx.type_of(def_id);\n@@ -1775,7 +1775,7 @@ fn impl_trait_ref<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<ty::TraitRef\n \n fn impl_polarity<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> hir::ImplPolarity {\n     let hir_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n-    match tcx.hir().expect_item_by_hir_id(hir_id).node {\n+    match tcx.hir().expect_item(hir_id).node {\n         hir::ItemKind::Impl(_, polarity, ..) => polarity,\n         ref item => bug!(\"impl_polarity: {:?} not an impl\", item),\n     }"}, {"sha": "5dbd667485e98d89fe63ec98473dfbde7456a22c", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -46,7 +46,7 @@ fn variances_of<'tcx>(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> &'tcx [ty::Varia\n     let id = tcx.hir().as_local_hir_id(item_def_id).expect(\"expected local def-id\");\n     let unsupported = || {\n         // Variance not relevant.\n-        span_bug!(tcx.hir().span_by_hir_id(id), \"asked to compute variance for wrong kind of item\")\n+        span_bug!(tcx.hir().span(id), \"asked to compute variance for wrong kind of item\")\n     };\n     match tcx.hir().get_by_hir_id(id) {\n         Node::Item(item) => match item.node {"}, {"sha": "c14ae5932af479faf628c8a28b3db3a0be5fa965", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -305,7 +305,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, ret: &mut Vec<clean::Item>) {\n     }\n \n     let for_ = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n-        match tcx.hir().expect_item_by_hir_id(hir_id).node {\n+        match tcx.hir().expect_item(hir_id).node {\n             hir::ItemKind::Impl(.., ref t, _) => {\n                 t.clean(cx)\n             }\n@@ -327,7 +327,7 @@ pub fn build_impl(cx: &DocContext<'_>, did: DefId, ret: &mut Vec<clean::Item>) {\n \n     let predicates = tcx.explicit_predicates_of(did);\n     let (trait_items, generics) = if let Some(hir_id) = tcx.hir().as_local_hir_id(did) {\n-        match tcx.hir().expect_item_by_hir_id(hir_id).node {\n+        match tcx.hir().expect_item(hir_id).node {\n             hir::ItemKind::Impl(.., ref gen, _, _, ref item_ids) => {\n                 (\n                     item_ids.iter()"}, {"sha": "4becb42d3055174d6ad446570a48bb99bbeddbc7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -276,7 +276,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         };\n         let primitives = if root.is_local() {\n             cx.tcx.hir().krate().module.item_ids.iter().filter_map(|&id| {\n-                let item = cx.tcx.hir().expect_item_by_hir_id(id.id);\n+                let item = cx.tcx.hir().expect_item(id.id);\n                 match item.node {\n                     hir::ItemKind::Mod(_) => {\n                         as_primitive(Res::Def(\n@@ -320,7 +320,7 @@ impl Clean<ExternalCrate> for CrateNum {\n         };\n         let keywords = if root.is_local() {\n             cx.tcx.hir().krate().module.item_ids.iter().filter_map(|&id| {\n-                let item = cx.tcx.hir().expect_item_by_hir_id(id.id);\n+                let item = cx.tcx.hir().expect_item(id.id);\n                 match item.node {\n                     hir::ItemKind::Mod(_) => {\n                         as_keyword(Res::Def(\n@@ -2777,7 +2777,7 @@ impl Clean<Type> for hir::Ty {\n             },\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n             TyKind::Def(item_id, _) => {\n-                let item = cx.tcx.hir().expect_item_by_hir_id(item_id.id);\n+                let item = cx.tcx.hir().expect_item(item_id.id);\n                 if let hir::ItemKind::Existential(ref ty) = item.node {\n                     ImplTrait(ty.bounds.clean(cx))\n                 } else {\n@@ -2799,7 +2799,7 @@ impl Clean<Type> for hir::Ty {\n                     // Substitute private type aliases\n                     if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n                         if !cx.renderinfo.borrow().access_levels.is_exported(def_id) {\n-                            alias = Some(&cx.tcx.hir().expect_item_by_hir_id(hir_id).node);\n+                            alias = Some(&cx.tcx.hir().expect_item(hir_id).node);\n                         }\n                     }\n                 };\n@@ -4441,7 +4441,7 @@ pub fn path_to_def_local(tcx: TyCtxt<'_>, path: &[Symbol]) -> Option<DefId> {\n         let segment = path_it.next()?;\n \n         for item_id in mem::replace(&mut items, HirVec::new()).iter() {\n-            let item = tcx.hir().expect_item_by_hir_id(item_id.id);\n+            let item = tcx.hir().expect_item(item_id.id);\n             if item.ident.name == *segment {\n                 if path_it.peek().is_none() {\n                     return Some(tcx.hir().local_def_id_from_hir_id(item_id.id))"}, {"sha": "ff76579d67d21a6b81a449eec6b3d2069f901c1e", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -248,7 +248,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         let orig_inside_public_path = self.inside_public_path;\n         self.inside_public_path &= vis.node.is_pub();\n         for i in &m.item_ids {\n-            let item = self.cx.tcx.hir().expect_item_by_hir_id(i.id);\n+            let item = self.cx.tcx.hir().expect_item(i.id);\n             self.visit_item(item, None, &mut om);\n         }\n         self.inside_public_path = orig_inside_public_path;\n@@ -275,7 +275,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n         fn inherits_doc_hidden(cx: &core::DocContext<'_>, mut node: hir::HirId) -> bool {\n             while let Some(id) = cx.tcx.hir().get_enclosing_scope(node) {\n                 node = id;\n-                if cx.tcx.hir().attrs_by_hir_id(node)\n+                if cx.tcx.hir().attrs(node)\n                     .lists(sym::doc).has_word(sym::hidden) {\n                     return true;\n                 }\n@@ -295,7 +295,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             return false;\n         };\n \n-        let use_attrs = tcx.hir().attrs_by_hir_id(id);\n+        let use_attrs = tcx.hir().attrs(id);\n         // Don't inline `doc(hidden)` imports so they can be stripped at a later stage.\n         let is_no_inline = use_attrs.lists(sym::doc).has_word(sym::no_inline) ||\n                            use_attrs.lists(sym::doc).has_word(sym::hidden);\n@@ -346,7 +346,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Node::Item(&hir::Item { node: hir::ItemKind::Mod(ref m), .. }) if glob => {\n                 let prev = mem::replace(&mut self.inlining, true);\n                 for i in &m.item_ids {\n-                    let i = self.cx.tcx.hir().expect_item_by_hir_id(i.id);\n+                    let i = self.cx.tcx.hir().expect_item(i.id);\n                     self.visit_item(i, None, om);\n                 }\n                 self.inlining = prev;\n@@ -361,7 +361,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Node::ForeignItem(it) if !glob => {\n                 // Generate a fresh `extern {}` block if we want to inline a foreign item.\n                 om.foreigns.push(hir::ForeignMod {\n-                    abi: tcx.hir().get_foreign_abi_by_hir_id(it.hir_id),\n+                    abi: tcx.hir().get_foreign_abi(it.hir_id),\n                     items: vec![hir::ForeignItem {\n                         ident: renamed.unwrap_or(it.ident),\n                         .. it.clone()"}, {"sha": "76554eaba9c92916518ee4274b16682b2a215f04", "filename": "src/test/run-pass-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d996c4d5a383744ec7550b59943b5744f4bcd122/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=d996c4d5a383744ec7550b59943b5744f4bcd122", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingWhitelistedAttrPass {\n \n         let item = match cx.tcx.hir().get_by_hir_id(id) {\n             Node::Item(item) => item,\n-            _ => cx.tcx.hir().expect_item_by_hir_id(cx.tcx.hir().get_parent_item(id)),\n+            _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };\n \n         if !attr::contains_name(&item.attrs, Symbol::intern(\"whitelisted_attr\")) {"}]}