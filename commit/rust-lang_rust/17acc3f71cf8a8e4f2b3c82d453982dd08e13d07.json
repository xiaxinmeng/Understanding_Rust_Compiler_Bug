{"sha": "17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "node_id": "C_kwDOAAsO6NoAKDE3YWNjM2Y3MWNmOGE4ZTRmMmIzYzgyZDQ1Mzk4MmRkMDhlMTNkMDc", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-02T00:15:34Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2022-07-02T00:15:34Z"}, "message": "Document implementation a bit, add some fast paths", "tree": {"sha": "38e87021761ba340ea9643cab743c9568a242ffc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38e87021761ba340ea9643cab743c9568a242ffc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "html_url": "https://github.com/rust-lang/rust/commit/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bbcafe3b59ee5c4537f65e820835c526531fe59", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bbcafe3b59ee5c4537f65e820835c526531fe59", "html_url": "https://github.com/rust-lang/rust/commit/3bbcafe3b59ee5c4537f65e820835c526531fe59"}], "stats": {"total": 26, "additions": 20, "deletions": 6}, "files": [{"sha": "6e0d166086fc7ec1d95cd0ff7164b1f6fc7aea60", "filename": "src/stacked_borrows/stack.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07/src%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17acc3f71cf8a8e4f2b3c82d453982dd08e13d07/src%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fstack.rs?ref=17acc3f71cf8a8e4f2b3c82d453982dd08e13d07", "patch": "@@ -51,6 +51,13 @@ struct StackCache {\n \n #[cfg(feature = \"stack-cache\")]\n impl StackCache {\n+    /// When a tag is used, we call this function to add or refresh it in the cache.\n+    ///\n+    /// We use position in the cache to represent how recently a tag was used; the first position\n+    /// is the most recently used tag. So an add shifts every element towards the end, and inserts\n+    /// the new element at the start. We lose the last element.\n+    /// This strategy is effective at keeping the most-accessed tags in the cache, but it costs a\n+    /// linear shift across the entire cache when we add a new tag.\n     fn add(&mut self, idx: usize, tag: SbTag) {\n         self.tags.copy_within(0..CACHE_LEN - 1, 1);\n         self.tags[0] = tag;\n@@ -172,9 +179,12 @@ impl<'tcx> Stack {\n         // If we found the tag, look up its position in the stack to see if it grants\n         // the required permission\n         if self.borrows[stack_idx].perm.grants(access) {\n-            // If it does, and it's already in the most-recently-used position, move it\n-            // there.\n-            if cache_idx != 0 {\n+            // If it does, and it's not already in the most-recently-used position, move it there.\n+            // Except if the tag is in position 1, this is equivalent to just a swap, so do that.\n+            if cache_idx == 1 {\n+                self.cache.tags.swap(0, 1);\n+                self.cache.idx.swap(0, 1);\n+            } else if cache_idx > 1 {\n                 self.cache.add(stack_idx, tag);\n             }\n             Some(stack_idx)\n@@ -208,9 +218,13 @@ impl<'tcx> Stack {\n \n         // The above insert changes the meaning of every index in the cache >= new_idx, so now\n         // we need to find every one of those indexes and increment it.\n-        for idx in &mut self.cache.idx {\n-            if *idx >= new_idx {\n-                *idx += 1;\n+        // But if the insert is at the end (equivalent to a push), we can skip this step because\n+        // it didn't change the position of any other tags.\n+        if new_idx != self.borrows.len() - 1 {\n+            for idx in &mut self.cache.idx {\n+                if *idx >= new_idx {\n+                    *idx += 1;\n+                }\n             }\n         }\n "}]}