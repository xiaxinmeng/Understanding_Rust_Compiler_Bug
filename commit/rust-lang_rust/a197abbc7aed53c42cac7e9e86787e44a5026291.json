{"sha": "a197abbc7aed53c42cac7e9e86787e44a5026291", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOTdhYmJjN2FlZDUzYzQyY2FjN2U5ZTg2Nzg3ZTQ0YTUwMjYyOTE=", "commit": {"author": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-03-23T19:32:05Z"}, "committer": {"name": "Matt Hooper", "email": "matthewjhooper94@gmail.com", "date": "2020-03-24T22:18:42Z"}, "message": "Added new inlay hint kind and rules for method chaining", "tree": {"sha": "b3fc1a2055a2071edfdbb03c9591a91b31c01c32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3fc1a2055a2071edfdbb03c9591a91b31c01c32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a197abbc7aed53c42cac7e9e86787e44a5026291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a197abbc7aed53c42cac7e9e86787e44a5026291", "html_url": "https://github.com/rust-lang/rust/commit/a197abbc7aed53c42cac7e9e86787e44a5026291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a197abbc7aed53c42cac7e9e86787e44a5026291/comments", "author": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "M-J-Hooper", "id": 13765376, "node_id": "MDQ6VXNlcjEzNzY1Mzc2", "avatar_url": "https://avatars.githubusercontent.com/u/13765376?v=4", "gravatar_id": "", "url": "https://api.github.com/users/M-J-Hooper", "html_url": "https://github.com/M-J-Hooper", "followers_url": "https://api.github.com/users/M-J-Hooper/followers", "following_url": "https://api.github.com/users/M-J-Hooper/following{/other_user}", "gists_url": "https://api.github.com/users/M-J-Hooper/gists{/gist_id}", "starred_url": "https://api.github.com/users/M-J-Hooper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/M-J-Hooper/subscriptions", "organizations_url": "https://api.github.com/users/M-J-Hooper/orgs", "repos_url": "https://api.github.com/users/M-J-Hooper/repos", "events_url": "https://api.github.com/users/M-J-Hooper/events{/privacy}", "received_events_url": "https://api.github.com/users/M-J-Hooper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae627174aecae0b4f4d2c087a856eda1a97a1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae627174aecae0b4f4d2c087a856eda1a97a1ac", "html_url": "https://github.com/rust-lang/rust/commit/fae627174aecae0b4f4d2c087a856eda1a97a1ac"}], "stats": {"total": 103, "additions": 98, "deletions": 5}, "files": [{"sha": "2353ad71fa82f6349dcbae859ed1d6286145159e", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 92, "deletions": 5, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=a197abbc7aed53c42cac7e9e86787e44a5026291", "patch": "@@ -5,7 +5,7 @@ use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n-    match_ast, SmolStr, TextRange,\n+    match_ast, SmolStr, TextRange, NodeOrToken, SyntaxKind, Direction\n };\n \n use crate::{FileId, FunctionSignature};\n@@ -14,19 +14,26 @@ use crate::{FileId, FunctionSignature};\n pub struct InlayHintsOptions {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n+    pub chaining_hints: bool,\n     pub max_length: Option<usize>,\n }\n \n impl Default for InlayHintsOptions {\n     fn default() -> Self {\n-        Self { type_hints: true, parameter_hints: true, max_length: None }\n+        Self { \n+            type_hints: true, \n+            parameter_hints: true, \n+            chaining_hints: true,\n+            max_length: None \n+        }\n     }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n+    ChainingHint,\n }\n \n #[derive(Debug)]\n@@ -47,6 +54,10 @@ pub(crate) fn inlay_hints(\n \n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            get_chaining_hints(&mut res, &sema, options, expr);\n+        }\n+\n         match_ast! {\n             match node {\n                 ast::CallExpr(it) => { get_param_name_hints(&mut res, &sema, options, ast::Expr::from(it)); },\n@@ -222,13 +233,89 @@ fn get_fn_signature(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<\n     }\n }\n \n+fn get_chaining_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    options: &InlayHintsOptions,\n+    expr: ast::Expr,\n+) -> Option<()> {\n+    if !options.chaining_hints {\n+        return None;\n+    }\n+\n+    let ty = sema.type_of_expr(&expr)?;\n+    let label = ty.display_truncated(sema.db, options.max_length).to_string();\n+    if ty.is_unknown() {\n+        return None;\n+    }\n+\n+    let mut tokens = expr.syntax()\n+        .siblings_with_tokens(Direction::Next)\n+        .filter_map(NodeOrToken::into_token)\n+        .filter(|t| match t.kind() {\n+            SyntaxKind::WHITESPACE if !t.text().contains('\\n') => false,\n+            SyntaxKind::COMMENT => false,\n+            _ => true,\n+        });\n+\n+    // Chaining can be defined as an expression whose next sibling tokens are newline and dot\n+    // Ignoring extra whitespace and comments\n+    let next = tokens.next()?.kind();\n+    let next_next = tokens.next()?.kind();\n+    if next == SyntaxKind::WHITESPACE && next_next == SyntaxKind::DOT { \n+        acc.push(InlayHint {\n+            range: expr.syntax().text_range(),\n+            kind: InlayKind::ChainingHint,\n+            label: label.into(),\n+        });\n+    }\n+    Some(())\n+}\n+\n #[cfg(test)]\n mod tests {\n     use crate::inlay_hints::InlayHintsOptions;\n     use insta::assert_debug_snapshot;\n \n     use crate::mock_analysis::single_file;\n \n+    #[test]\n+    fn generic_chaining_hints() {\n+        let (analysis, file_id) = single_file(\n+            r#\"\n+            struct A<T>(T); \n+            struct B<T>(T);\n+            struct C<T>(T);\n+            struct X<T,R>(T, R);\n+            \n+            impl<T> A<T> {\n+                fn new(t: T) -> Self { A(t) }\n+                fn into_b(self) -> B<T> { B(self.0) }\n+            }\n+            impl<T> B<T> {\n+                fn into_c(self) -> C<T> { C(self.0) }\n+            }\n+            fn test() {\n+                let c = A::new(X(42, true))\n+                    .into_b() // All the from A -> B -> C\n+                    .into_c();\n+            }\"#,\n+        );\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: false, type_hints: false, chaining_hints: true, max_length: None}).unwrap(), @r###\"\n+        [\n+            InlayHint {\n+                range: [416; 465),\n+                kind: ChainingHint,\n+                label: \"B<X<i32, bool>>\",\n+            },\n+            InlayHint {\n+                range: [416; 435),\n+                kind: ChainingHint,\n+                label: \"A<X<i32, bool>>\",\n+            },\n+        ]\"###);\n+    }\n+\n     #[test]\n     fn param_hints_only() {\n         let (analysis, file_id) = single_file(\n@@ -238,7 +325,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ parameter_hints: true, type_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [106; 107),\n@@ -262,7 +349,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: false, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"[]\"###);\n     }\n \n     #[test]\n@@ -274,7 +361,7 @@ mod tests {\n                 let _x = foo(4, 4);\n             }\"#,\n         );\n-        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, max_length: None}).unwrap(), @r###\"\n+        assert_debug_snapshot!(analysis.inlay_hints(file_id, &InlayHintsOptions{ type_hints: true, parameter_hints: false, chaining_hints: false, max_length: None}).unwrap(), @r###\"\n         [\n             InlayHint {\n                 range: [97; 99),"}, {"sha": "628ed107e99afa0e41ea41219b1cd2e88e24bc68", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=a197abbc7aed53c42cac7e9e86787e44a5026291", "patch": "@@ -34,6 +34,8 @@ pub struct ServerConfig {\n     pub inlay_hints_type: bool,\n     #[serde(deserialize_with = \"nullable_bool_true\")]\n     pub inlay_hints_parameter: bool,\n+    #[serde(deserialize_with = \"nullable_bool_true\")]\n+    pub inlay_hints_chaining: bool,\n     pub inlay_hints_max_length: Option<usize>,\n \n     pub cargo_watch_enable: bool,\n@@ -66,6 +68,7 @@ impl Default for ServerConfig {\n             lru_capacity: None,\n             inlay_hints_type: true,\n             inlay_hints_parameter: true,\n+            inlay_hints_chaining: true,\n             inlay_hints_max_length: None,\n             cargo_watch_enable: true,\n             cargo_watch_args: Vec::new(),"}, {"sha": "6edc03fe0fe90b5790f2d033107e96760d535c0e", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=a197abbc7aed53c42cac7e9e86787e44a5026291", "patch": "@@ -332,6 +332,7 @@ impl ConvWith<&LineIndex> for InlayHint {\n             kind: match self.kind {\n                 InlayKind::ParameterHint => req::InlayKind::ParameterHint,\n                 InlayKind::TypeHint => req::InlayKind::TypeHint,\n+                InlayKind::ChainingHint => req::InlayKind::ChainingHint,\n             },\n         }\n     }"}, {"sha": "7825b007798169c9a8464c5adc17db9d6eb7fb56", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=a197abbc7aed53c42cac7e9e86787e44a5026291", "patch": "@@ -183,6 +183,7 @@ pub fn main_loop(\n                 inlay_hints: InlayHintsOptions {\n                     type_hints: config.inlay_hints_type,\n                     parameter_hints: config.inlay_hints_parameter,\n+                    chaining_hints: config.inlay_hints_chaining,\n                     max_length: config.inlay_hints_max_length,\n                 },\n                 cargo_watch: CheckOptions {"}, {"sha": "8557294f62630179ce02c5c9bf585081d68f0359", "filename": "crates/rust-analyzer/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a197abbc7aed53c42cac7e9e86787e44a5026291/crates%2Frust-analyzer%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freq.rs?ref=a197abbc7aed53c42cac7e9e86787e44a5026291", "patch": "@@ -200,6 +200,7 @@ pub struct InlayHintsParams {\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n+    ChainingHint,\n }\n \n #[derive(Debug, Deserialize, Serialize)]"}]}