{"sha": "de2abc29e9f890433bef39eac46a84bdb9eaecf7", "node_id": "C_kwDOAAsO6NoAKGRlMmFiYzI5ZTlmODkwNDMzYmVmMzllYWM0NmE4NGJkYjllYWVjZjc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-03T20:44:47Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-03T20:45:51Z"}, "message": "clippy::perf fixes\n\nsingle_char_pattern and to_string_in_format_args", "tree": {"sha": "36035607a8402f78c6cbb9de7cc316dbbbcf1825", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36035607a8402f78c6cbb9de7cc316dbbbcf1825"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de2abc29e9f890433bef39eac46a84bdb9eaecf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de2abc29e9f890433bef39eac46a84bdb9eaecf7", "html_url": "https://github.com/rust-lang/rust/commit/de2abc29e9f890433bef39eac46a84bdb9eaecf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de2abc29e9f890433bef39eac46a84bdb9eaecf7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd", "html_url": "https://github.com/rust-lang/rust/commit/4e8fb743ccbec27344b2dd42de7057f41d4ebfdd"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "8a1dea4d99bfed44e1aa40e4ab67fde92f6c79c9", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=de2abc29e9f890433bef39eac46a84bdb9eaecf7", "patch": "@@ -219,7 +219,7 @@ impl<'a> ArchiveBuilder<'a> for LlvmArchiveBuilder<'a> {\n \n             match result {\n                 Err(e) => {\n-                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e.to_string()));\n+                    self.config.sess.fatal(&format!(\"Error calling dlltool: {}\", e));\n                 }\n                 Ok(output) if !output.status.success() => self.config.sess.fatal(&format!(\n                     \"Dlltool could not create import library: {}\\n{}\","}, {"sha": "237aef1cf23aadcdb2d1e48efbbec1d23bead587", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=de2abc29e9f890433bef39eac46a84bdb9eaecf7", "patch": "@@ -126,7 +126,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String\n \n                 // If the user tried to use a key=\"value\" flag, but is missing the quotes, provide\n                 // a hint about how to resolve this.\n-                if s.contains(\"=\") && !s.contains(\"=\\\"\") && !s.ends_with(\"\\\"\") {\n+                if s.contains('=') && !s.contains(\"=\\\"\") && !s.ends_with('\"') {\n                     error!(concat!(\n                         r#\"expected `key` or `key=\"value\"`, ensure escaping is appropriate\"#,\n                         r#\" for your shell, try 'key=\"value\"' or key=\\\"value\\\"\"#"}, {"sha": "4898a4844b9f779b6549ad7641b0381bd95eab6a", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=de2abc29e9f890433bef39eac46a84bdb9eaecf7", "patch": "@@ -1702,11 +1702,11 @@ impl<'a> Parser<'a> {\n \n         // Try to lowercase the prefix if it's a valid base prefix.\n         fn fix_base_capitalisation(s: &str) -> Option<String> {\n-            if let Some(stripped) = s.strip_prefix(\"B\") {\n+            if let Some(stripped) = s.strip_prefix('B') {\n                 Some(format!(\"0b{stripped}\"))\n-            } else if let Some(stripped) = s.strip_prefix(\"O\") {\n+            } else if let Some(stripped) = s.strip_prefix('O') {\n                 Some(format!(\"0o{stripped}\"))\n-            } else if let Some(stripped) = s.strip_prefix(\"X\") {\n+            } else if let Some(stripped) = s.strip_prefix('X') {\n                 Some(format!(\"0x{stripped}\"))\n             } else {\n                 None"}, {"sha": "0347b6a4ab82f7da77d9b7c719e3661ba7d3fd3f", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de2abc29e9f890433bef39eac46a84bdb9eaecf7/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=de2abc29e9f890433bef39eac46a84bdb9eaecf7", "patch": "@@ -1587,10 +1587,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) {\n         let len = remaining_fields.len();\n \n-        let mut displayable_field_names =\n-            remaining_fields.keys().map(|ident| ident.as_str()).collect::<Vec<_>>();\n-\n-        displayable_field_names.sort();\n+        let mut displayable_field_names: Vec<&str> =\n+            remaining_fields.keys().map(|ident| ident.as_str()).collect();\n+        // sorting &str primitives here, sort_unstable is ok\n+        displayable_field_names.sort_unstable();\n \n         let mut truncated_fields_error = String::new();\n         let remaining_fields_names = match &displayable_field_names[..] {"}]}