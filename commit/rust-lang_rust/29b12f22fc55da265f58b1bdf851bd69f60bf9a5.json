{"sha": "29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YjEyZjIyZmM1NWRhMjY1ZjU4YjFiZGY4NTFiZDY5ZjYwYmY5YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T16:01:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-22T16:01:39Z"}, "message": "Auto merge of #6069 - alex-700:redundant-pattern-matching-in-macro, r=Manishearth\n\nForbid redundant_pattern_matching triggering in macros\n\nfixes #6065\n\nchangelog: forbid redundant_pattern_matching triggering in macros", "tree": {"sha": "3f4e96dc95842f84fc8a44db076423fedfcce797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f4e96dc95842f84fc8a44db076423fedfcce797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "html_url": "https://github.com/rust-lang/rust/commit/29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "html_url": "https://github.com/rust-lang/rust/commit/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d"}, {"sha": "d4f158fa5cd5f4ae1cc690b37b0a8850cb013b69", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f158fa5cd5f4ae1cc690b37b0a8850cb013b69", "html_url": "https://github.com/rust-lang/rust/commit/d4f158fa5cd5f4ae1cc690b37b0a8850cb013b69"}], "stats": {"total": 89, "additions": 37, "deletions": 52}, "files": [{"sha": "b1a4e06d4c32fdc918d0a5b2f3f1feb35f162ef4", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "patch": "@@ -502,7 +502,7 @@ impl_lint_pass!(Matches => [\n \n impl<'tcx> LateLintPass<'tcx> for Matches {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) || in_macro(expr.span) {\n             return;\n         }\n "}, {"sha": "e0b58157590ab26ec150f156273d5df4e8c77947", "filename": "tests/ui/crashes/ice-2636.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fcrashes%2Fice-2636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fcrashes%2Fice-2636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2636.rs?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -1,22 +0,0 @@\n-#![allow(dead_code)]\n-\n-enum Foo {\n-    A,\n-    B,\n-    C,\n-}\n-\n-macro_rules! test_hash {\n-    ($foo:expr, $($t:ident => $ord:expr),+ ) => {\n-        use self::Foo::*;\n-        match $foo {\n-            $ ( & $t => $ord,\n-            )*\n-        };\n-    };\n-}\n-\n-fn main() {\n-    let a = Foo::A;\n-    test_hash!(&a, A => 0, B => 1, C => 2);\n-}"}, {"sha": "53799b4fbf1d971c26eab4b29a21619b567254e9", "filename": "tests/ui/crashes/ice-2636.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fcrashes%2Fice-2636.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d/tests%2Fui%2Fcrashes%2Fice-2636.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2636.stderr?ref=78fbb04edbcd6c7065d87ffcdb02314d1c8a3e6d", "patch": "@@ -1,17 +0,0 @@\n-error: you don't need to add `&` to both the expression and the patterns\n-  --> $DIR/ice-2636.rs:12:9\n-   |\n-LL | /         match $foo {\n-LL | |             $ ( & $t => $ord,\n-LL | |             )*\n-LL | |         };\n-   | |_________^\n-...\n-LL |       test_hash!(&a, A => 0, B => 1, C => 2);\n-   |       --------------------------------------- in this macro invocation\n-   |\n-   = note: `-D clippy::match-ref-pats` implied by `-D warnings`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error\n-"}, {"sha": "fe8f62503b76748685eb4df7ca893a038ac65e2f", "filename": "tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.fixed?ref=29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "patch": "@@ -42,6 +42,7 @@ fn main() {\n \n     issue5504();\n     issue6067();\n+    issue6065();\n \n     let _ = if gen_res().is_ok() {\n         1\n@@ -79,6 +80,17 @@ fn issue5504() {\n     while m!().is_some() {}\n }\n \n+fn issue6065() {\n+    macro_rules! if_let_in_macro {\n+        ($pat:pat, $x:expr) => {\n+            if let Some($pat) = $x {}\n+        };\n+    }\n+\n+    // shouldn't be linted\n+    if_let_in_macro!(_, Some(42));\n+}\n+\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n // However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n // so the following should be linted."}, {"sha": "09426a6e59082275ac3c35124585476add74f551", "filename": "tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.rs?ref=29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "patch": "@@ -54,6 +54,7 @@ fn main() {\n \n     issue5504();\n     issue6067();\n+    issue6065();\n \n     let _ = if let Ok(_) = gen_res() {\n         1\n@@ -91,6 +92,17 @@ fn issue5504() {\n     while let Some(_) = m!() {}\n }\n \n+fn issue6065() {\n+    macro_rules! if_let_in_macro {\n+        ($pat:pat, $x:expr) => {\n+            if let Some($pat) = $x {}\n+        };\n+    }\n+\n+    // shouldn't be linted\n+    if_let_in_macro!(_, Some(42));\n+}\n+\n // Methods that are unstable const should not be suggested within a const context, see issue #5697.\n // However, in Rust 1.48.0 the methods `is_ok` and `is_err` of `Result` were stabilized as const,\n // so the following should be linted."}, {"sha": "3473ceea00e22ecec0fbdc59fa6c42291a63d3b3", "filename": "tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/29b12f22fc55da265f58b1bdf851bd69f60bf9a5/tests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fredundant_pattern_matching.stderr?ref=29b12f22fc55da265f58b1bdf851bd69f60bf9a5", "patch": "@@ -73,67 +73,67 @@ LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:58:20\n+  --> $DIR/redundant_pattern_matching.rs:59:20\n    |\n LL |     let _ = if let Ok(_) = gen_res() {\n    |             -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:60:19\n+  --> $DIR/redundant_pattern_matching.rs:61:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:83:19\n+  --> $DIR/redundant_pattern_matching.rs:84:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:84:16\n+  --> $DIR/redundant_pattern_matching.rs:85:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:90:12\n+  --> $DIR/redundant_pattern_matching.rs:91:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:91:15\n+  --> $DIR/redundant_pattern_matching.rs:92:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:98:12\n+  --> $DIR/redundant_pattern_matching.rs:110:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:100:12\n+  --> $DIR/redundant_pattern_matching.rs:112:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:102:15\n+  --> $DIR/redundant_pattern_matching.rs:114:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:104:15\n+  --> $DIR/redundant_pattern_matching.rs:116:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:106:5\n+  --> $DIR/redundant_pattern_matching.rs:118:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -142,7 +142,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:111:5\n+  --> $DIR/redundant_pattern_matching.rs:123:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,"}]}