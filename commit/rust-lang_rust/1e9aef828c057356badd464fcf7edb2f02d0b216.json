{"sha": "1e9aef828c057356badd464fcf7edb2f02d0b216", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOWFlZjgyOGMwNTczNTZiYWRkNDY0ZmNmN2VkYjJmMDJkMGIyMTY=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T02:11:42Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2011-05-22T06:10:10Z"}, "message": "stdlib: Reindent list.rs", "tree": {"sha": "496bcfd4f1da75d95abf12750144ada7b3bf7c09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/496bcfd4f1da75d95abf12750144ada7b3bf7c09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9aef828c057356badd464fcf7edb2f02d0b216", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9aef828c057356badd464fcf7edb2f02d0b216", "html_url": "https://github.com/rust-lang/rust/commit/1e9aef828c057356badd464fcf7edb2f02d0b216", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9aef828c057356badd464fcf7edb2f02d0b216/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4f5f6993041e1c5a4d0de541bff14cc43784233", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4f5f6993041e1c5a4d0de541bff14cc43784233", "html_url": "https://github.com/rust-lang/rust/commit/d4f5f6993041e1c5a4d0de541bff14cc43784233"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "7ffbf527f02922f832fd23df39b28da3b3a414f1", "filename": "src/lib/list.rs", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/1e9aef828c057356badd464fcf7edb2f02d0b216/src%2Flib%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9aef828c057356badd464fcf7edb2f02d0b216/src%2Flib%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Flist.rs?ref=1e9aef828c057356badd464fcf7edb2f02d0b216", "patch": "@@ -11,49 +11,49 @@ tag list[T] {\n }\n \n fn foldl[T,U](&list[T] ls, &U u, fn(&T t, &U u) -> U f) -> U {\n-  alt(ls) {\n-    case (cons[T](?hd, ?tl)) {\n-      auto u_ = f(hd, u);\n-      // FIXME: should use 'be' here, not 'ret'. But parametric\n-      // tail calls currently don't work.\n-      ret foldl[T,U](*tl, u_, f);\n-    }\n-    case (nil[T]) {\n-      ret u;\n+    alt(ls) {\n+        case (cons[T](?hd, ?tl)) {\n+            auto u_ = f(hd, u);\n+            // FIXME: should use 'be' here, not 'ret'. But parametric\n+            // tail calls currently don't work.\n+            ret foldl[T,U](*tl, u_, f);\n+        }\n+        case (nil[T]) {\n+            ret u;\n+        }\n     }\n-  }\n \n-  fail; // TODO: remove me when exhaustiveness checking works\n+    fail; // TODO: remove me when exhaustiveness checking works\n }\n \n fn find[T,U](&list[T] ls,\n              (fn(&T) -> option::t[U]) f) -> option::t[U] {\n-  alt(ls) {\n-    case (cons[T](?hd, ?tl)) {\n-        alt (f(hd)) {\n-            case (none[U]) {\n-                // FIXME: should use 'be' here, not 'ret'. But parametric tail\n-                // calls currently don't work.\n-                ret find[T,U](*tl, f);\n-            }\n-            case (some[U](?res)) {\n-                ret some[U](res);\n+    alt(ls) {\n+        case (cons[T](?hd, ?tl)) {\n+            alt (f(hd)) {\n+                case (none[U]) {\n+                    // FIXME: should use 'be' here, not 'ret'. But parametric\n+                    // tail calls currently don't work.\n+                    ret find[T,U](*tl, f);\n+                }\n+                case (some[U](?res)) {\n+                    ret some[U](res);\n+                }\n             }\n         }\n+        case (nil[T]) {\n+            ret none[U];\n+        }\n     }\n-    case (nil[T]) {\n-        ret none[U];\n-    }\n-  }\n \n-  fail; // TODO: remove me when exhaustiveness checking works\n+    fail; // TODO: remove me when exhaustiveness checking works\n }\n \n fn length[T](&list[T] ls) -> uint {\n-  fn count[T](&T t, &uint u) -> uint {\n-    ret u + 1u;\n-  }\n-  ret foldl[T,uint](ls, 0u, bind count[T](_, _));\n+    fn count[T](&T t, &uint u) -> uint {\n+        ret u + 1u;\n+    }\n+    ret foldl[T,uint](ls, 0u, bind count[T](_, _));\n }\n \n fn cdr[T](&list[T] ls) -> list[T] {"}]}