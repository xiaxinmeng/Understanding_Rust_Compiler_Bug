{"sha": "50a9f008f266bc7e81926309e3a0a2e36860a305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYTlmMDA4ZjI2NmJjN2U4MTkyNjMwOWUzYTBhMmUzNjg2MGEzMDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-19T14:37:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-19T14:37:57Z"}, "message": "CTFE Machine: do not expose Allocation", "tree": {"sha": "c7f4d40ff6e470d510c70bd043cf30389a8e42d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f4d40ff6e470d510c70bd043cf30389a8e42d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50a9f008f266bc7e81926309e3a0a2e36860a305", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50a9f008f266bc7e81926309e3a0a2e36860a305", "html_url": "https://github.com/rust-lang/rust/commit/50a9f008f266bc7e81926309e3a0a2e36860a305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50a9f008f266bc7e81926309e3a0a2e36860a305/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e827cc21e0734edd26170e8d1481f0d66a1426b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e827cc21e0734edd26170e8d1481f0d66a1426b", "html_url": "https://github.com/rust-lang/rust/commit/3e827cc21e0734edd26170e8d1481f0d66a1426b"}], "stats": {"total": 20, "additions": 11, "deletions": 9}, "files": [{"sha": "e7d7c38cc8ffd2af4d0d105fce3ab29f3d5e0f14", "filename": "compiler/rustc_mir/src/interpret/machine.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50a9f008f266bc7e81926309e3a0a2e36860a305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a9f008f266bc7e81926309e3a0a2e36860a305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmachine.rs?ref=50a9f008f266bc7e81926309e3a0a2e36860a305", "patch": "@@ -313,7 +313,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     #[inline(always)]\n     fn memory_read(\n         _memory_extra: &Self::MemoryExtra,\n-        _alloc: &Allocation<Self::PointerTag, Self::AllocExtra>,\n+        _alloc_extra: &Self::AllocExtra,\n         _ptr: Pointer<Self::PointerTag>,\n         _size: Size,\n     ) -> InterpResult<'tcx> {\n@@ -324,7 +324,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     #[inline(always)]\n     fn memory_written(\n         _memory_extra: &mut Self::MemoryExtra,\n-        _alloc: &mut Allocation<Self::PointerTag, Self::AllocExtra>,\n+        _alloc_extra: &mut Self::AllocExtra,\n         _ptr: Pointer<Self::PointerTag>,\n         _size: Size,\n     ) -> InterpResult<'tcx> {\n@@ -335,8 +335,9 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     #[inline(always)]\n     fn memory_deallocated(\n         _memory_extra: &mut Self::MemoryExtra,\n-        _alloc: &mut Allocation<Self::PointerTag, Self::AllocExtra>,\n+        _alloc_extra: &mut Self::AllocExtra,\n         _ptr: Pointer<Self::PointerTag>,\n+        _size: Size,\n     ) -> InterpResult<'tcx> {\n         Ok(())\n     }"}, {"sha": "7fb7c51b0b5bc85231cc719b5eed4f661fb02ccc", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/50a9f008f266bc7e81926309e3a0a2e36860a305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50a9f008f266bc7e81926309e3a0a2e36860a305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=50a9f008f266bc7e81926309e3a0a2e36860a305", "patch": "@@ -343,10 +343,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // Let the machine take some extra action\n-        M::memory_deallocated(&mut self.extra, &mut alloc, ptr)?;\n+        let size = alloc.size();\n+        M::memory_deallocated(&mut self.extra, &mut alloc.extra, ptr, size)?;\n \n         // Don't forget to remember size and align of this now-dead allocation\n-        let old = self.dead_alloc_map.insert(ptr.alloc_id, (alloc.size(), alloc.align));\n+        let old = self.dead_alloc_map.insert(ptr.alloc_id, (size, alloc.align));\n         if old.is_some() {\n             bug!(\"Nothing can be deallocated twice\");\n         }\n@@ -591,7 +592,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             },\n         )?;\n         if let Some((ptr, alloc)) = ptr_and_alloc {\n-            M::memory_read(&self.extra, alloc, ptr, size)?;\n+            M::memory_read(&self.extra, &alloc.extra, ptr, size)?;\n             let range = alloc_range(ptr.offset, size);\n             Ok(Some(AllocRef { alloc, range, tcx: self.tcx, alloc_id: ptr.alloc_id }))\n         } else {\n@@ -660,7 +661,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             // FIXME: can we somehow avoid looking up the allocation twice here?\n             // We cannot call `get_raw_mut` inside `check_and_deref_ptr` as that would duplicate `&mut self`.\n             let (alloc, extra) = self.get_raw_mut(ptr.alloc_id)?;\n-            M::memory_written(extra, alloc, ptr, size)?;\n+            M::memory_written(extra, &mut alloc.extra, ptr, size)?;\n             let range = alloc_range(ptr.offset, size);\n             Ok(Some(AllocRefMut { alloc, range, tcx, alloc_id: ptr.alloc_id }))\n         } else {\n@@ -1029,7 +1030,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             Some(src_ptr) => src_ptr,\n         };\n         let src_alloc = self.get_raw(src.alloc_id)?;\n-        M::memory_read(&self.extra, src_alloc, src, size)?;\n+        M::memory_read(&self.extra, &src_alloc.extra, src, size)?;\n         // We need the `dest` ptr for the next operation, so we get it now.\n         // We already did the source checks and called the hooks so we are good to return early.\n         let dest = match dest {\n@@ -1058,7 +1059,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n         // Destination alloc preparations and access hooks.\n         let (dest_alloc, extra) = self.get_raw_mut(dest.alloc_id)?;\n-        M::memory_written(extra, dest_alloc, dest, size * num_copies)?;\n+        M::memory_written(extra, &mut dest_alloc.extra, dest, size * num_copies)?;\n         let dest_bytes = dest_alloc\n             .get_bytes_mut_ptr(&tcx, alloc_range(dest.offset, size * num_copies))\n             .as_mut_ptr();"}]}