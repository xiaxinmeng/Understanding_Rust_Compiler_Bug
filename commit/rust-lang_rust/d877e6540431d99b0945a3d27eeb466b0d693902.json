{"sha": "d877e6540431d99b0945a3d27eeb466b0d693902", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzdlNjU0MDQzMWQ5OWIwOTQ1YTNkMjdlZWI0NjZiMGQ2OTM5MDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-03T20:29:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-03T20:29:21Z"}, "message": "Auto merge of #27134 - fhartwig:derive, r=huonw\n\nFixes #25022\r\n\r\nThis adapts the deriving mechanism to not repeat bounds for the same type parameter. To give an example: for the following code:\r\n\r\n```rust\r\n#[derive(Clone)]\r\npub struct FlatMap<I, U: IntoIterator, F> {\r\n    iter: I,\r\n    f: F,\r\n    frontiter: Option<U::IntoIter>,\r\n    backiter: Option<U::IntoIter>,\r\n}\r\n```\r\nthe latest nightly generates the following impl signature:\r\n\r\n```rust\r\nimpl <I: ::std::clone::Clone,\r\n      U: ::std::clone::Clone + IntoIterator,\r\n      F: ::std::clone::Clone>\r\n::std::clone::Clone for FlatMap<I, U, F> where\r\n    I: ::std::clone::Clone,\r\n    F: ::std::clone::Clone,\r\n    U::IntoIter: ::std::clone::Clone,\r\n    U::IntoIter: ::std::clone::Clone\r\n```\r\n\r\nWith these changes, the signature changes to this:\r\n```rust\r\nimpl <I, U: IntoIterator, F> ::std::clone::Clone for FlatMap<I, U, F> where\r\n    I: ::std::clone::Clone,\r\n    F: ::std::clone::Clone,\r\n    U::IntoIter: ::std::clone::Clone\r\n```\r\n(Nothing in the body of the impl changes)\r\nNote that the second impl is more permissive, as it doesn't have a `Clone` bound on `U` at all. There was a compile-fail test that failed due to this. I don't understand why we would want the old behaviour (and nobody on IRC could tell me either), so please tell me if there is a good reason that I missed.", "tree": {"sha": "6cae8df9b2700d9ada25a34b42e1a832ae7e8242", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cae8df9b2700d9ada25a34b42e1a832ae7e8242"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d877e6540431d99b0945a3d27eeb466b0d693902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d877e6540431d99b0945a3d27eeb466b0d693902", "html_url": "https://github.com/rust-lang/rust/commit/d877e6540431d99b0945a3d27eeb466b0d693902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d877e6540431d99b0945a3d27eeb466b0d693902/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1fe32ca12c51afcd761d9962f51a74ff0d07a591", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fe32ca12c51afcd761d9962f51a74ff0d07a591", "html_url": "https://github.com/rust-lang/rust/commit/1fe32ca12c51afcd761d9962f51a74ff0d07a591"}, {"sha": "93e5a74c87a5278d76050708bd59731c7f8fb5bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/93e5a74c87a5278d76050708bd59731c7f8fb5bb", "html_url": "https://github.com/rust-lang/rust/commit/93e5a74c87a5278d76050708bd59731c7f8fb5bb"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "8f9e0279b29a12262aef345d11302a89dd0e9498", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d877e6540431d99b0945a3d27eeb466b0d693902/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d877e6540431d99b0945a3d27eeb466b0d693902/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d877e6540431d99b0945a3d27eeb466b0d693902", "patch": "@@ -188,6 +188,7 @@ pub use self::SubstructureFields::*;\n use self::StructType::*;\n \n use std::cell::RefCell;\n+use std::collections::HashSet;\n use std::vec;\n \n use abi::Abi;\n@@ -549,10 +550,20 @@ impl<'a> TraitDef<'a> {\n                 .map(|ty_param| ty_param.ident.name)\n                 .collect();\n \n+            let mut processed_field_types = HashSet::new();\n             for field_ty in field_tys {\n                 let tys = find_type_parameters(&*field_ty, &ty_param_names);\n \n                 for ty in tys {\n+                    // if we have already handled this type, skip it\n+                    if let ast::TyPath(_, ref p) = ty.node {\n+                        if p.segments.len() == 1\n+                            && ty_param_names.contains(&p.segments[0].identifier.name)\n+                            || processed_field_types.contains(&p.segments) {\n+                            continue;\n+                        };\n+                        processed_field_types.insert(p.segments.clone());\n+                    }\n                     let mut bounds: Vec<_> = self.additional_bounds.iter().map(|p| {\n                         cx.typarambound(p.to_path(cx, self.span, type_ident, generics))\n                     }).collect();"}]}