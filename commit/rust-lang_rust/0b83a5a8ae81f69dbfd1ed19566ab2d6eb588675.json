{"sha": "0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODNhNWE4YWU4MWY2OWRiZmQxZWQxOTU2NmFiMmQ2ZWI1ODg2NzU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-10T02:13:20Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-18T15:39:59Z"}, "message": "ty/instance: use `ParamEnvAnd` in the `resolve_instance` query.", "tree": {"sha": "5b20386c482395a5dad2c72766ac35b152083423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b20386c482395a5dad2c72766ac35b152083423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "html_url": "https://github.com/rust-lang/rust/commit/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "339a938fa6582d5c6f84d811680a1031c684c1c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/339a938fa6582d5c6f84d811680a1031c684c1c6", "html_url": "https://github.com/rust-lang/rust/commit/339a938fa6582d5c6f84d811680a1031c684c1c6"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "c974ab3190e82558621b5588042ada17c4b81fd7", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "patch": "@@ -1258,8 +1258,10 @@ rustc_queries! {\n             desc { \"looking up enabled feature gates\" }\n         }\n \n-        query resolve_instance(key: (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>)) -> Option<ty::Instance<'tcx>> {\n-            desc { \"resolving instance `{:?}` `{:?}` with {:?}\", key.1, key.2, key.0 }\n+        query resolve_instance(\n+            key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n+        ) -> Option<ty::Instance<'tcx>> {\n+            desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         }\n     }\n }"}, {"sha": "0366795a20e1f8d09b081165387f59922ac5cae7", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "patch": "@@ -290,7 +290,14 @@ impl<'tcx> Instance<'tcx> {\n     ) -> Option<Instance<'tcx>> {\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n-        tcx.resolve_instance((tcx.erase_regions(&param_env), def_id, tcx.erase_regions(&substs)))\n+\n+        // HACK(eddyb) erase regions in `substs` first, so that `param_env.and(...)`\n+        // below is more likely to ignore the bounds in scope (e.g. if the only\n+        // generic parameters mentioned by `substs` were lifetime ones).\n+        let substs = tcx.erase_regions(&substs);\n+\n+        // FIXME(eddyb) should this always use `param_env.with_reveal_all()`?\n+        tcx.resolve_instance(tcx.erase_regions(&param_env.and((def_id, substs))))\n     }\n \n     pub fn resolve_for_fn_ptr("}, {"sha": "a261e484a85faada4d493a0fc16df0a29f74f62e", "filename": "src/librustc_middle/ty/query/keys.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fkeys.rs?ref=0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "patch": "@@ -296,14 +296,3 @@ impl Key for (Symbol, u32, u32) {\n         DUMMY_SP\n     }\n }\n-\n-impl<'tcx> Key for (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>) {\n-    type CacheSelector = DefaultCacheSelector;\n-\n-    fn query_crate(&self) -> CrateNum {\n-        self.1.krate\n-    }\n-    fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n-        tcx.def_span(self.1)\n-    }\n-}"}, {"sha": "d50e7f39d41557c5c5ea904ac8af2268e7d5fad4", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "patch": "@@ -9,10 +9,12 @@ use traits::{translate_substs, Reveal};\n \n use log::debug;\n \n-pub fn resolve_instance<'tcx>(\n+fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    (param_env, def_id, substs): (ty::ParamEnv<'tcx>, DefId, SubstsRef<'tcx>),\n+    key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n ) -> Option<Instance<'tcx>> {\n+    let (param_env, (def_id, substs)) = key.into_parts();\n+\n     debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n     let result = if let Some(trait_def_id) = tcx.trait_of_item(def_id) {\n         debug!(\" => associated item, attempting to find impl in param_env {:#?}\", param_env);"}]}