{"sha": "1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkMjg5NTI2MzFiMzdmNDIyYTZjMGJkOTY2MGMyMGIwYjQwZjViZjk=", "commit": {"author": {"name": "John VanEnk", "email": "vanenkj@gmail.com", "date": "2020-01-22T21:07:03Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T04:50:59Z"}, "message": "Add non-C-like enumeration tests on Rust->C calls to the abi-sysv64-arg-passing test.", "tree": {"sha": "0d63e36ef4310db07fe6f96b28b72e91501da247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d63e36ef4310db07fe6f96b28b72e91501da247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "html_url": "https://github.com/rust-lang/rust/commit/1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d28952631b37f422a6c0bd9660c20b0b40f5bf9/comments", "author": {"login": "sw17ch", "id": 95705, "node_id": "MDQ6VXNlcjk1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/95705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sw17ch", "html_url": "https://github.com/sw17ch", "followers_url": "https://api.github.com/users/sw17ch/followers", "following_url": "https://api.github.com/users/sw17ch/following{/other_user}", "gists_url": "https://api.github.com/users/sw17ch/gists{/gist_id}", "starred_url": "https://api.github.com/users/sw17ch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sw17ch/subscriptions", "organizations_url": "https://api.github.com/users/sw17ch/orgs", "repos_url": "https://api.github.com/users/sw17ch/repos", "events_url": "https://api.github.com/users/sw17ch/events{/privacy}", "received_events_url": "https://api.github.com/users/sw17ch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b23b9864c07e47247c93d69e7ed8197c4cc9b37", "html_url": "https://github.com/rust-lang/rust/commit/3b23b9864c07e47247c93d69e7ed8197c4cc9b37"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "a5299638e52f80920cffb70e103b72d26585e765", "filename": "src/test/auxiliary/rust_test_helpers.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/1d28952631b37f422a6c0bd9660c20b0b40f5bf9/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/1d28952631b37f422a6c0bd9660c20b0b40f5bf9/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frust_test_helpers.c?ref=1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "patch": "@@ -300,3 +300,87 @@ __int128 sub(__int128 a, __int128 b) {\n }\n \n #endif\n+\n+#define OPTION_TAG_NONE (0)\n+#define OPTION_TAG_SOME (1)\n+\n+struct U8TaggedEnumOptionU64 {\n+    uint8_t tag;\n+    union {\n+        uint64_t some;\n+    };\n+};\n+\n+struct U8TaggedEnumOptionU64\n+rust_dbg_new_some_u64(uint64_t some) {\n+    struct U8TaggedEnumOptionU64 r = {\n+        .tag = OPTION_TAG_SOME,\n+        .some = some,\n+    };\n+    return r;\n+}\n+\n+struct U8TaggedEnumOptionU64\n+rust_dbg_new_none_u64(void) {\n+    struct U8TaggedEnumOptionU64 r = {\n+        .tag = OPTION_TAG_NONE,\n+    };\n+    return r;\n+}\n+\n+int32_t\n+rust_dbg_unpack_option_u64(struct U8TaggedEnumOptionU64 o, uint64_t *into) {\n+    assert(into);\n+    switch (o.tag) {\n+    case OPTION_TAG_SOME:\n+        *into = o.some;\n+        return 1;\n+    case OPTION_TAG_NONE:\n+        return 0;\n+    default:\n+        assert(0 && \"unexpected tag\");\n+    }\n+}\n+\n+struct U8TaggedEnumOptionU64U64 {\n+    uint8_t tag;\n+    union {\n+        struct {\n+\t    uint64_t a;\n+\t    uint64_t b;\n+\t} some;\n+    };\n+};\n+\n+struct U8TaggedEnumOptionU64U64\n+rust_dbg_new_some_u64u64(uint64_t a, uint64_t b) {\n+    struct U8TaggedEnumOptionU64U64 r = {\n+        .tag = OPTION_TAG_SOME,\n+        .some = { .a = a, .b = b },\n+    };\n+    return r;\n+}\n+\n+struct U8TaggedEnumOptionU64U64\n+rust_dbg_new_none_u64u64(void) {\n+    struct U8TaggedEnumOptionU64U64 r = {\n+        .tag = OPTION_TAG_NONE,\n+    };\n+    return r;\n+}\n+\n+int32_t\n+rust_dbg_unpack_option_u64u64(struct U8TaggedEnumOptionU64U64 o, uint64_t *a, uint64_t *b) {\n+    assert(a);\n+    assert(b);\n+    switch (o.tag) {\n+    case OPTION_TAG_SOME:\n+        *a = o.some.a;\n+        *b = o.some.b;\n+        return 1;\n+    case OPTION_TAG_NONE:\n+        return 0;\n+    default:\n+        assert(0 && \"unexpected tag\");\n+    }\n+}"}, {"sha": "adb62ab698eb97a844c23c627dcf15b2fe80273c", "filename": "src/test/ui/abi/abi-sysv64-arg-passing.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/1d28952631b37f422a6c0bd9660c20b0b40f5bf9/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d28952631b37f422a6c0bd9660c20b0b40f5bf9/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-arg-passing.rs?ref=1d28952631b37f422a6c0bd9660c20b0b40f5bf9", "patch": "@@ -92,6 +92,18 @@ mod tests {\n     #[derive(Copy, Clone)]\n     pub struct Floats { a: f64, b: u8, c: f64 }\n \n+    #[repr(C, u8)]\n+    pub enum U8TaggedEnumOptionU64U64 {\n+        None,\n+        Some(u64,u64),\n+    }\n+\n+    #[repr(C, u8)]\n+    pub enum U8TaggedEnumOptionU64 {\n+        None,\n+        Some(u64),\n+    }\n+\n     #[link(name = \"rust_test_helpers\", kind = \"static\")]\n     extern \"sysv64\" {\n         pub fn rust_int8_to_int32(_: i8) -> i32;\n@@ -125,6 +137,12 @@ mod tests {\n         ) -> f32;\n         pub fn rust_dbg_abi_1(q: Quad) -> Quad;\n         pub fn rust_dbg_abi_2(f: Floats) -> Floats;\n+        pub fn rust_dbg_new_some_u64u64(a: u64, b: u64) -> U8TaggedEnumOptionU64U64;\n+        pub fn rust_dbg_new_none_u64u64() -> U8TaggedEnumOptionU64U64;\n+        pub fn rust_dbg_unpack_option_u64u64(o: U8TaggedEnumOptionU64U64, a: *mut u64, b: *mut u64) -> i32;\n+        pub fn rust_dbg_new_some_u64(some: u64) -> U8TaggedEnumOptionU64;\n+        pub fn rust_dbg_new_none_u64() -> U8TaggedEnumOptionU64;\n+        pub fn rust_dbg_unpack_option_u64(o: U8TaggedEnumOptionU64, v: *mut u64) -> i32;\n     }\n \n     pub fn cabi_int_widening() {\n@@ -336,6 +354,59 @@ mod tests {\n         test1();\n         test2();\n     }\n+\n+    pub fn enum_passing_and_return_pair() {\n+        let some_u64u64 = unsafe { rust_dbg_new_some_u64u64(10, 20) };\n+        if let U8TaggedEnumOptionU64U64::Some(a, b) = some_u64u64 {\n+            assert_eq!(10, a);\n+            assert_eq!(20, b);\n+        } else {\n+            panic!(\"unexpected none\");\n+        }\n+\n+        let none_u64u64 = unsafe { rust_dbg_new_none_u64u64() };\n+        if let U8TaggedEnumOptionU64U64::Some(_,_) = none_u64u64 {\n+            panic!(\"unexpected some\");\n+        }\n+\n+        let mut a: u64 = 0;\n+        let mut b: u64 = 0;\n+        let r = unsafe { rust_dbg_unpack_option_u64u64(some_u64u64, &mut a as *mut _, &mut b as *mut _) };\n+        assert_eq!(1, r);\n+        assert_eq!(10, a);\n+        assert_eq!(20, b);\n+\n+        let mut a: u64 = 0;\n+        let mut b: u64 = 0;\n+        let r = unsafe { rust_dbg_unpack_option_u64u64(none_u64u64, &mut a as *mut _, &mut b as *mut _) };\n+        assert_eq!(0, r);\n+        assert_eq!(0, a);\n+        assert_eq!(0, b);\n+    }\n+\n+    pub fn enum_passing_and_return() {\n+        let some_u64 = unsafe { rust_dbg_new_some_u64(10) };\n+        if let U8TaggedEnumOptionU64::Some(v) = some_u64 {\n+            assert_eq!(10, v);\n+        } else {\n+            panic!(\"unexpected none\");\n+        }\n+\n+        let none_u64 = unsafe { rust_dbg_new_none_u64() };\n+        if let U8TaggedEnumOptionU64::Some(_) = none_u64 {\n+            panic!(\"unexpected some\");\n+        }\n+\n+        let mut target: u64 = 0;\n+        let r = unsafe { rust_dbg_unpack_option_u64(some_u64, &mut target as *mut _) };\n+        assert_eq!(1, r);\n+        assert_eq!(10, target);\n+\n+        let mut target: u64 = 0;\n+        let r = unsafe { rust_dbg_unpack_option_u64(none_u64, &mut target as *mut _) };\n+        assert_eq!(0, r);\n+        assert_eq!(0, target);\n+    }\n }\n \n #[cfg(target_arch = \"x86_64\")]\n@@ -359,6 +430,8 @@ fn main() {\n     issue_28676();\n     issue_62350();\n     struct_return();\n+    enum_passing_and_return_pair();\n+    enum_passing_and_return();\n }\n \n #[cfg(not(target_arch = \"x86_64\"))]"}]}