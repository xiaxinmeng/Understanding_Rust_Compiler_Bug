{"sha": "da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhMmVlNWRjYjI5YjM2NzVjYjM0MmM5YmMyNDBhMjJlZWE5Y2MyYjc=", "commit": {"author": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-05-29T09:23:00Z"}, "committer": {"name": "Jorge Aparicio", "email": "jorge@japaric.io", "date": "2018-06-03T11:46:19Z"}, "message": "reject `fn panic_impl<T>(_: &PanicInfo) -> !`", "tree": {"sha": "4afa1b7897986449957131ee4b3eebd2ccc99d71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4afa1b7897986449957131ee4b3eebd2ccc99d71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "html_url": "https://github.com/rust-lang/rust/commit/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7/comments", "author": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "committer": {"login": "japaric", "id": 5018213, "node_id": "MDQ6VXNlcjUwMTgyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5018213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/japaric", "html_url": "https://github.com/japaric", "followers_url": "https://api.github.com/users/japaric/followers", "following_url": "https://api.github.com/users/japaric/following{/other_user}", "gists_url": "https://api.github.com/users/japaric/gists{/gist_id}", "starred_url": "https://api.github.com/users/japaric/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/japaric/subscriptions", "organizations_url": "https://api.github.com/users/japaric/orgs", "repos_url": "https://api.github.com/users/japaric/repos", "events_url": "https://api.github.com/users/japaric/events{/privacy}", "received_events_url": "https://api.github.com/users/japaric/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c84d382ed87521a5b98b30f508366111dbbc7d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c84d382ed87521a5b98b30f508366111dbbc7d5", "html_url": "https://github.com/rust-lang/rust/commit/4c84d382ed87521a5b98b30f508366111dbbc7d5"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "d54f29e6b99809a756b3ea179df25ae1c5682a08", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "patch": "@@ -130,7 +130,7 @@ use syntax_pos::{self, BytePos, Span, MultiSpan};\n use rustc::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::map::Node;\n-use rustc::hir::{self, PatKind};\n+use rustc::hir::{self, PatKind, Item_};\n use rustc::middle::lang_items;\n \n mod autoderef;\n@@ -1133,7 +1133,7 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     if let Some(panic_impl_did) = fcx.tcx.lang_items().panic_impl() {\n         if panic_impl_did == fn_hir_id.owner_def_id() {\n             if let Some(panic_info_did) = fcx.tcx.lang_items().panic_info() {\n-                if ret_ty.sty != ty::TyNever {\n+                if declared_ret_ty.sty != ty::TyNever {\n                     fcx.tcx.sess.span_err(\n                         decl.output.span(),\n                         \"return type should be `!`\",\n@@ -1161,6 +1161,17 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n                             \"argument should be `&PanicInfo`\",\n                         );\n                     }\n+\n+                    if let Node::NodeItem(item) = fcx.tcx.hir.get(fn_id) {\n+                        if let Item_::ItemFn(_, _, _, _, ref generics, _) = item.node {\n+                            if !generics.params.is_empty() {\n+                                fcx.tcx.sess.span_err(\n+                                    span,\n+                                    \"`#[panic_implementation]` function should have no type parameters\",\n+                                );\n+                            }\n+                        }\n+                    }\n                 } else {\n                     fcx.tcx.sess.span_err(span, \"function should have one argument\");\n                 }"}, {"sha": "d5f942ba2d62fc29b760d805042dd990c33abb70", "filename": "src/test/compile-fail/panic-implementation-bad-signature-4.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpanic-implementation-bad-signature-4.rs?ref=da2ee5dcb29b3675cb342c9bc240a22eea9cc2b7", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:-C panic=abort\n+\n+#![feature(panic_implementation)]\n+#![no_std]\n+#![no_main]\n+\n+use core::panic::PanicInfo;\n+\n+#[panic_implementation]\n+fn panic<T>(pi: &PanicInfo) -> ! {\n+    //~^ ERROR `#[panic_implementation]` function should have no type parameters\n+    loop {}\n+}"}]}