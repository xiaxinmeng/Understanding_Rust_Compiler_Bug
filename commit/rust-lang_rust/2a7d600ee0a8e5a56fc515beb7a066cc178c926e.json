{"sha": "2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhN2Q2MDBlZTBhOGU1YTU2ZmM1MTViZWI3YTA2NmNjMTc4YzkyNmU=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-19T20:18:03Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-07-20T03:08:39Z"}, "message": "Avoid cloning Place in in_projection_structurally", "tree": {"sha": "5b53f1f1938462ade16b6b71c8255ff42f6cfb86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b53f1f1938462ade16b6b71c8255ff42f6cfb86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "html_url": "https://github.com/rust-lang/rust/commit/2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a7d600ee0a8e5a56fc515beb7a066cc178c926e/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b456df4aba82ca62166f05e6c4608664dfb9223", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b456df4aba82ca62166f05e6c4608664dfb9223", "html_url": "https://github.com/rust-lang/rust/commit/7b456df4aba82ca62166f05e6c4608664dfb9223"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "eadda7b52a1647c827acd301757a873a3862761e", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2a7d600ee0a8e5a56fc515beb7a066cc178c926e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a7d600ee0a8e5a56fc515beb7a066cc178c926e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2a7d600ee0a8e5a56fc515beb7a066cc178c926e", "patch": "@@ -185,9 +185,9 @@ trait Qualif {\n         base: &PlaceBase<'tcx>,\n         proj: &Projection<'tcx>,\n     ) -> bool {\n-        let base_qualif = Self::in_place(cx, &Place {\n-            base: base.clone(),\n-            projection: proj.base.clone(),\n+        let base_qualif = Self::in_place(cx, PlaceRef {\n+            base,\n+            projection: &proj.base,\n         });\n         let qualif = base_qualif && Self::mask_for_ty(\n             cx,\n@@ -214,36 +214,36 @@ trait Qualif {\n         Self::in_projection_structurally(cx, base, proj)\n     }\n \n-    fn in_place(cx: &ConstCx<'_, 'tcx>, place: &Place<'tcx>) -> bool {\n-        match *place {\n-            Place {\n+    fn in_place(cx: &ConstCx<'_, 'tcx>, place: PlaceRef<'_, 'tcx>) -> bool {\n+        match place {\n+            PlaceRef {\n                 base: PlaceBase::Local(local),\n                 projection: None,\n-            } => Self::in_local(cx, local),\n-            Place {\n+            } => Self::in_local(cx, *local),\n+            PlaceRef {\n                 base: PlaceBase::Static(box Static {\n                     kind: StaticKind::Promoted(_),\n                     ..\n                 }),\n                 projection: None,\n             } => bug!(\"qualifying already promoted MIR\"),\n-            Place {\n-                base: PlaceBase::Static(ref static_),\n+            PlaceRef {\n+                base: PlaceBase::Static(static_),\n                 projection: None,\n             } => {\n                 Self::in_static(cx, static_)\n             },\n-            Place {\n-                ref base,\n-                projection: Some(ref proj),\n-            } => Self::in_projection(cx, &base, proj),\n+            PlaceRef {\n+                base,\n+                projection: Some(proj),\n+            } => Self::in_projection(cx, base, proj),\n         }\n     }\n \n     fn in_operand(cx: &ConstCx<'_, 'tcx>, operand: &Operand<'tcx>) -> bool {\n         match *operand {\n             Operand::Copy(ref place) |\n-            Operand::Move(ref place) => Self::in_place(cx, place),\n+            Operand::Move(ref place) => Self::in_place(cx, place.as_place_ref()),\n \n             Operand::Constant(ref constant) => {\n                 if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n@@ -272,7 +272,7 @@ trait Qualif {\n             Rvalue::NullaryOp(..) => false,\n \n             Rvalue::Discriminant(ref place) |\n-            Rvalue::Len(ref place) => Self::in_place(cx, place),\n+            Rvalue::Len(ref place) => Self::in_place(cx, place.as_place_ref()),\n \n             Rvalue::Use(ref operand) |\n             Rvalue::Repeat(ref operand, _) |\n@@ -290,15 +290,15 @@ trait Qualif {\n                     if let ProjectionElem::Deref = proj.elem {\n                         let base_ty = Place::ty_from(&place.base, &proj.base, cx.body, cx.tcx).ty;\n                         if let ty::Ref(..) = base_ty.sty {\n-                            return Self::in_place(cx, &Place {\n-                                base: place.base.clone(),\n-                                projection: proj.base.clone(),\n+                            return Self::in_place(cx, PlaceRef {\n+                                base: &place.base,\n+                                projection: &proj.base,\n                             });\n                         }\n                     }\n                 }\n \n-                Self::in_place(cx, place)\n+                Self::in_place(cx, place.as_place_ref())\n             }\n \n             Rvalue::Aggregate(_, ref operands) => {"}]}