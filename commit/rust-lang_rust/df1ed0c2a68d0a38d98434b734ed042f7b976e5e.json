{"sha": "df1ed0c2a68d0a38d98434b734ed042f7b976e5e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmMWVkMGMyYTY4ZDBhMzhkOTg0MzRiNzM0ZWQwNDJmN2I5NzZlNWU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-13T13:32:39Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-24T10:36:31Z"}, "message": "Make a method that doesn't need `Self` a free function instead", "tree": {"sha": "d60884d8e620d55debca23a9e7dbb4fd5f9b8865", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d60884d8e620d55debca23a9e7dbb4fd5f9b8865"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df1ed0c2a68d0a38d98434b734ed042f7b976e5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df1ed0c2a68d0a38d98434b734ed042f7b976e5e", "html_url": "https://github.com/rust-lang/rust/commit/df1ed0c2a68d0a38d98434b734ed042f7b976e5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df1ed0c2a68d0a38d98434b734ed042f7b976e5e/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a835555474c87def84099df412816d5edfa2b9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a835555474c87def84099df412816d5edfa2b9cb", "html_url": "https://github.com/rust-lang/rust/commit/a835555474c87def84099df412816d5edfa2b9cb"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "bafa32df8486d8cdc6ea56009e4be0b010f73392", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/df1ed0c2a68d0a38d98434b734ed042f7b976e5e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df1ed0c2a68d0a38d98434b734ed042f7b976e5e/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=df1ed0c2a68d0a38d98434b734ed042f7b976e5e", "patch": "@@ -176,7 +176,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     ) -> EvalResult<'tcx, ScalarMaybeUndef<Tag>> {\n         // get_bytes_unchecked tests alignment and relocation edges\n         let bytes = self.get_bytes_with_undef_and_ptr(\n-            cx, ptr, size, ptr_align.min(self.int_align(cx, size))\n+            cx, ptr, size, ptr_align.min(int_align(cx, size))\n         )?;\n         // Undef check happens *after* we established that the alignment is correct.\n         // We must not return Ok() for unaligned pointers!\n@@ -272,24 +272,23 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n         let ptr_size = cx.data_layout().pointer_size;\n         self.write_scalar(cx, ptr.into(), ptr_align, val, ptr_size)\n     }\n+}\n \n-    fn int_align(\n-        &self,\n-        cx: &impl HasDataLayout,\n-        size: Size,\n-    ) -> Align {\n-        // We assume pointer-sized integers have the same alignment as pointers.\n-        // We also assume signed and unsigned integers of the same size have the same alignment.\n-        let ity = match size.bytes() {\n-            1 => layout::I8,\n-            2 => layout::I16,\n-            4 => layout::I32,\n-            8 => layout::I64,\n-            16 => layout::I128,\n-            _ => bug!(\"bad integer size: {}\", size.bytes()),\n-        };\n-        ity.align(cx).abi\n-    }\n+fn int_align(\n+    cx: &impl HasDataLayout,\n+    size: Size,\n+) -> Align {\n+    // We assume pointer-sized integers have the same alignment as pointers.\n+    // We also assume signed and unsigned integers of the same size have the same alignment.\n+    let ity = match size.bytes() {\n+        1 => layout::I8,\n+        2 => layout::I16,\n+        4 => layout::I32,\n+        8 => layout::I64,\n+        16 => layout::I128,\n+        _ => bug!(\"bad integer size: {}\", size.bytes()),\n+    };\n+    ity.align(cx).abi\n }\n \n /// Byte accessors"}]}