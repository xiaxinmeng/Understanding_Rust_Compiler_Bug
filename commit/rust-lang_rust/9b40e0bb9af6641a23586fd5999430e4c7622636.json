{"sha": "9b40e0bb9af6641a23586fd5999430e4c7622636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNDBlMGJiOWFmNjY0MWEyMzU4NmZkNTk5OTQzMGU0Yzc2MjI2MzY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-20T15:37:17Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2019-11-20T15:37:17Z"}, "message": "made gdb pretty-printing script more robust when printing uninitialized vec.\n\nI based this solution on my reading of:\n\nhttps://rethinkdb.com/blog/make-debugging-easier-with-custom-pretty-printers#what-is-still-to-be-done\n\nThat post claims that there is no clean way to check for garbage pointers, and\nso this PR adopts the same solution of tentatively attempting to convert a\ndererence to a string, which throws a clean exception on garbage that we can\ncatch and recover from.\n\nI only made the change to vec and not the other pretty printers because I wanted\nto focus my effort on the simplest thing that would resolve issue #64343. In\nparticular, I *considered* generalizing this fix to work on the other datatypes\nin the pretty-printing support library, but I don't want to invest effort in\nthat until after we resolve our overall debugging support strategy; see also\nissues #60826 and #65564.", "tree": {"sha": "da101725fa84e3fe01a33f14022e1f458d5b80fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da101725fa84e3fe01a33f14022e1f458d5b80fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b40e0bb9af6641a23586fd5999430e4c7622636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b40e0bb9af6641a23586fd5999430e4c7622636", "html_url": "https://github.com/rust-lang/rust/commit/9b40e0bb9af6641a23586fd5999430e4c7622636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b40e0bb9af6641a23586fd5999430e4c7622636/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc", "html_url": "https://github.com/rust-lang/rust/commit/76ade3e8ac42cd7a7b7c3c5ef54818ab68e3ebdc"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "5da01b96fa5e36f392cdecad68eb448964eed219", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b40e0bb9af6641a23586fd5999430e4c7622636/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/9b40e0bb9af6641a23586fd5999430e4c7622636/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=9b40e0bb9af6641a23586fd5999430e4c7622636", "patch": "@@ -284,10 +284,20 @@ def to_string(self):\n                 (\"(len: %i, cap: %i)\" % (length, cap)))\n \n     def children(self):\n+        saw_inaccessible = False\n         (length, data_ptr, cap) = rustpp.extract_length_ptr_and_cap_from_std_vec(self.__val)\n         gdb_ptr = data_ptr.get_wrapped_value()\n         for index in xrange(0, length):\n-            yield (str(index), (gdb_ptr + index).dereference())\n+            if saw_inaccessible:\n+                return\n+            try:\n+                # rust-lang/rust#64343: passing deref expr to `str` allows\n+                # catching exception on garbage pointer\n+                str((gdb_ptr + index).dereference())\n+                yield (str(index), (gdb_ptr + index).dereference())\n+            except RuntimeError:\n+                saw_inaccessible = True\n+                yield (str(index), \"inaccessible\")\n \n \n class RustStdVecDequePrinter(object):"}]}