{"sha": "ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOTI2OTVhMmMxZmQ3Y2ZjNThkN2Q3NjlkM2JjM2JlY2UyYTAxZmE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T12:23:42Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-01-04T12:23:42Z"}, "message": "Use IndexVec for ebb_map\n\ncc #745", "tree": {"sha": "b81897ce292af15ee72c195b1d3ca1a14c7e07ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b81897ce292af15ee72c195b1d3ca1a14c7e07ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "html_url": "https://github.com/rust-lang/rust/commit/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff1c62365e0be3e96fb5d8d3938283cbf101d84b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff1c62365e0be3e96fb5d8d3938283cbf101d84b", "html_url": "https://github.com/rust-lang/rust/commit/ff1c62365e0be3e96fb5d8d3938283cbf101d84b"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "b8bf2cf831a1154693a1e572d66b1607e41cfc2a", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "patch": "@@ -398,7 +398,7 @@ pub fn codegen_fn_prelude(fx: &mut FunctionCx<'_, '_, impl Backend>, start_ebb:\n \n     fx.bcx\n         .ins()\n-        .jump(*fx.ebb_map.get(&START_BLOCK).unwrap(), &[]);\n+        .jump(*fx.ebb_map.get(START_BLOCK).unwrap(), &[]);\n }\n \n pub fn codegen_terminator_call<'tcx>("}, {"sha": "ac18ff6228a5aacf03eb240e70d982ce687274ff", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "patch": "@@ -1,4 +1,5 @@\n use rustc::ty::adjustment::PointerCast;\n+use rustc_index::vec::IndexVec;\n \n use crate::prelude::*;\n \n@@ -27,10 +28,7 @@ pub fn trans_fn<'clif, 'tcx, B: Backend + 'static>(\n \n     // Predefine ebb's\n     let start_ebb = bcx.create_ebb();\n-    let mut ebb_map: HashMap<BasicBlock, Ebb> = HashMap::new();\n-    for (bb, _bb_data) in mir.basic_blocks().iter_enumerated() {\n-        ebb_map.insert(bb, bcx.create_ebb());\n-    }\n+    let ebb_map: IndexVec<BasicBlock, Ebb> = (0..mir.basic_blocks().len()).map(|_| bcx.create_ebb()).collect();\n \n     // Make FunctionCx\n     let pointer_type = cx.module.target_config().pointer_type();"}, {"sha": "e5b932947ccc5b4398e9421e658e1bd2485ea6ac", "filename": "src/common.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=ca92695a2c1fd7cfc58d7d769d3bc3bece2a01fa", "patch": "@@ -1,5 +1,6 @@\n use rustc::ty::layout::{Integer, Primitive};\n use rustc_target::spec::{HasTargetSpec, Target};\n+use rustc_index::vec::IndexVec;\n \n use cranelift_codegen::ir::{InstructionData, Opcode, ValueDef};\n \n@@ -263,7 +264,7 @@ pub struct FunctionCx<'clif, 'tcx, B: Backend + 'static> {\n     pub mir: &'tcx Body<'tcx>,\n \n     pub bcx: FunctionBuilder<'clif>,\n-    pub ebb_map: HashMap<BasicBlock, Ebb>,\n+    pub ebb_map: IndexVec<BasicBlock, Ebb>,\n     pub local_map: HashMap<Local, CPlace<'tcx>>,\n \n     pub clif_comments: crate::pretty_clif::CommentWriter,\n@@ -341,7 +342,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub fn get_ebb(&self, bb: BasicBlock) -> Ebb {\n-        *self.ebb_map.get(&bb).unwrap()\n+        *self.ebb_map.get(bb).unwrap()\n     }\n \n     pub fn get_local_place(&mut self, local: Local) -> CPlace<'tcx> {"}]}