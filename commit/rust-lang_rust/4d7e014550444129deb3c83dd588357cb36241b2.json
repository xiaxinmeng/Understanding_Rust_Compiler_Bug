{"sha": "4d7e014550444129deb3c83dd588357cb36241b2", "node_id": "C_kwDOAAsO6NoAKDRkN2UwMTQ1NTA0NDQxMjlkZWIzYzgzZGQ1ODgzNTdjYjM2MjQxYjI", "commit": {"author": {"name": "ricked-twice", "email": "39213807+ricked-twice@users.noreply.github.com", "date": "2022-05-17T18:31:48Z"}, "committer": {"name": "ricked-twice", "email": "39213807+ricked-twice@users.noreply.github.com", "date": "2022-05-17T18:31:48Z"}, "message": "Clean fix for #96223\n- Modified `InferCtxt::mk_trait_obligation_with_new_self_ty` to take as\n  argument a `Binder<(TraitPredicate, Ty)>` instead of a\n  `Binder<TraitPredicate>` and a separate `Ty` with no bound vars.\n\n- Modified all call places to avoid calling `Binder::no_bounds_var` or\n  `Binder::skip_binder` when it is not safe.", "tree": {"sha": "c226a3f3084a8f8fabef8516a7517ee49a9954fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c226a3f3084a8f8fabef8516a7517ee49a9954fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7e014550444129deb3c83dd588357cb36241b2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEy//zn6QeojTXHSMFkquVU+1XdQMFAmKD63oACgkQkquVU+1X\ndQOfow/9FK1H/Qyz8EXJBffYCNbmMuNXLv1wlZK9yDnb4xLJPwjXIFc8trIkidcM\nz1C40OHyxroInfHS1sZcL4HelnwOaHoq3na7mYKttarh3BR948MWx2uO7nr8+HKl\nW2UMVzNGtzI1wNMwyd9kESkM5qYY+siS1XXGNTwOC5BBFDiAiI0knXIvcx3KJU2f\nFI7DVfzX9r7BVOGwSdaoKD7zH1y6ov1BJ/cmX7ik83DvdGh9prd2SSL1qdxrPrtr\neTQJNF7QyicySrX1a0i0LHEnD4ddtIar+maQC18dCloqsuTYCxV+OzDkwQ2UjfeR\n81m5ooBVQeDwUZ9OGG1SlftCxe9yT/88W2h6P9qTLJrkHOckinG4AqXJSls/x/81\nDASlElgBm3Jse8oQikmfb/O7Q7ae13RYwh6zBg7DY+AhHQB7SKaCgCstHF5xX+2m\nhzO9C+EGvknaq6HcX65ycrrlsKmcvX6TVgsqLMp5dwImZYJwpkHZoi89NpzLHOs2\nVFeINKtRS94PSAHjvAxhVQbF/85YHcPiZ8zW+Wgd+cjDUYqzAPlG1xlUDDo1oF4/\ncRNxYfBd+UPpsGkglggIDqa58L0rm74XOVs62S2fTIdURviwFiM3yBLHXr/DDlIn\nqJvNxV0XjECVEdULZgbrg61XIPf5tezn+ttWf55mppk3ceFXSU4=\n=go+C\n-----END PGP SIGNATURE-----", "payload": "tree c226a3f3084a8f8fabef8516a7517ee49a9954fe\nparent 3655175a75f503c9855b6a73a9d3c83997354c1d\nauthor ricked-twice <39213807+ricked-twice@users.noreply.github.com> 1652812308 +0200\ncommitter ricked-twice <39213807+ricked-twice@users.noreply.github.com> 1652812308 +0200\n\nClean fix for #96223\n- Modified `InferCtxt::mk_trait_obligation_with_new_self_ty` to take as\n  argument a `Binder<(TraitPredicate, Ty)>` instead of a\n  `Binder<TraitPredicate>` and a separate `Ty` with no bound vars.\n\n- Modified all call places to avoid calling `Binder::no_bounds_var` or\n  `Binder::skip_binder` when it is not safe.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7e014550444129deb3c83dd588357cb36241b2", "html_url": "https://github.com/rust-lang/rust/commit/4d7e014550444129deb3c83dd588357cb36241b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7e014550444129deb3c83dd588357cb36241b2/comments", "author": {"login": "ricked-twice", "id": 39213807, "node_id": "MDQ6VXNlcjM5MjEzODA3", "avatar_url": "https://avatars.githubusercontent.com/u/39213807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricked-twice", "html_url": "https://github.com/ricked-twice", "followers_url": "https://api.github.com/users/ricked-twice/followers", "following_url": "https://api.github.com/users/ricked-twice/following{/other_user}", "gists_url": "https://api.github.com/users/ricked-twice/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricked-twice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricked-twice/subscriptions", "organizations_url": "https://api.github.com/users/ricked-twice/orgs", "repos_url": "https://api.github.com/users/ricked-twice/repos", "events_url": "https://api.github.com/users/ricked-twice/events{/privacy}", "received_events_url": "https://api.github.com/users/ricked-twice/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ricked-twice", "id": 39213807, "node_id": "MDQ6VXNlcjM5MjEzODA3", "avatar_url": "https://avatars.githubusercontent.com/u/39213807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ricked-twice", "html_url": "https://github.com/ricked-twice", "followers_url": "https://api.github.com/users/ricked-twice/followers", "following_url": "https://api.github.com/users/ricked-twice/following{/other_user}", "gists_url": "https://api.github.com/users/ricked-twice/gists{/gist_id}", "starred_url": "https://api.github.com/users/ricked-twice/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ricked-twice/subscriptions", "organizations_url": "https://api.github.com/users/ricked-twice/orgs", "repos_url": "https://api.github.com/users/ricked-twice/repos", "events_url": "https://api.github.com/users/ricked-twice/events{/privacy}", "received_events_url": "https://api.github.com/users/ricked-twice/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3655175a75f503c9855b6a73a9d3c83997354c1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3655175a75f503c9855b6a73a9d3c83997354c1d", "html_url": "https://github.com/rust-lang/rust/commit/3655175a75f503c9855b6a73a9d3c83997354c1d"}], "stats": {"total": 236, "additions": 121, "deletions": 115}, "files": [{"sha": "266fcc777ef565738b1d83cdc3b6a6af4e76e7c8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4d7e014550444129deb3c83dd588357cb36241b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7e014550444129deb3c83dd588357cb36241b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=4d7e014550444129deb3c83dd588357cb36241b2", "patch": "@@ -1384,8 +1384,7 @@ trait InferCtxtPrivExt<'hir, 'tcx> {\n     fn mk_trait_obligation_with_new_self_ty(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: ty::PolyTraitPredicate<'tcx>,\n-        new_self_ty: Ty<'tcx>,\n+        trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx>;\n \n     fn maybe_report_ambiguity(\n@@ -1923,14 +1922,11 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n     fn mk_trait_obligation_with_new_self_ty(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n-        trait_ref: ty::PolyTraitPredicate<'tcx>,\n-        new_self_ty: Ty<'tcx>,\n+        trait_ref_and_ty: ty::Binder<'tcx, (ty::TraitPredicate<'tcx>, Ty<'tcx>)>,\n     ) -> PredicateObligation<'tcx> {\n-        assert!(!new_self_ty.has_escaping_bound_vars());\n-\n-        let trait_pred = trait_ref.map_bound_ref(|tr| ty::TraitPredicate {\n+        let trait_pred = trait_ref_and_ty.map_bound_ref(|(tr, new_self_ty)| ty::TraitPredicate {\n             trait_ref: ty::TraitRef {\n-                substs: self.tcx.mk_substs_trait(new_self_ty, &tr.trait_ref.substs[1..]),\n+                substs: self.tcx.mk_substs_trait(*new_self_ty, &tr.trait_ref.substs[1..]),\n                 ..tr.trait_ref\n             },\n             ..*tr"}, {"sha": "becf3fdd5ee45b61be8632f45c04e51fbf4e6ac0", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 117, "deletions": 107, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/4d7e014550444129deb3c83dd588357cb36241b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7e014550444129deb3c83dd588357cb36241b2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4d7e014550444129deb3c83dd588357cb36241b2", "patch": "@@ -637,8 +637,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(steps) = autoderef.find_map(|(ty, steps)| {\n                     // Re-add the `&`\n                     let ty = self.tcx.mk_ref(region, TypeAndMut { ty, mutbl });\n-                    let obligation =\n-                        self.mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred, ty);\n+                    let real_trait_pred_and_ty =\n+                        real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, ty));\n+                    let obligation = self\n+                        .mk_trait_obligation_with_new_self_ty(param_env, real_trait_pred_and_ty);\n                     Some(steps).filter(|_| self.predicate_may_hold(&obligation))\n                 }) {\n                     if steps > 0 {\n@@ -659,10 +661,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     }\n                 } else if real_trait_pred != trait_pred {\n                     // This branch addresses #87437.\n+                    let real_trait_pred_and_base_ty =\n+                        real_trait_pred.map_bound(|inner_trait_pred| (inner_trait_pred, base_ty));\n                     let obligation = self.mk_trait_obligation_with_new_self_ty(\n                         param_env,\n-                        real_trait_pred,\n-                        base_ty,\n+                        real_trait_pred_and_base_ty,\n                     );\n                     if self.predicate_may_hold(&obligation) {\n                         err.span_suggestion_verbose(\n@@ -720,9 +723,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         trait_pred: ty::PolyTraitPredicate<'tcx>,\n     ) -> bool {\n-        let Some(self_ty) = trait_pred.self_ty().no_bound_vars() else {\n-            return false;\n-        };\n+        let self_ty = trait_pred.self_ty().skip_binder();\n \n         let (def_id, output_ty, callable) = match *self_ty.kind() {\n             ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n@@ -731,14 +732,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         };\n         let msg = format!(\"use parentheses to call the {}\", callable);\n \n-        // `mk_trait_obligation_with_new_self_ty` only works for types with no escaping bound\n-        // variables, so bail out if we have any.\n-        let Some(output_ty) = output_ty.no_bound_vars() else {\n-            return false;\n-        };\n+        let output_ty = self.tcx.liberate_late_bound_regions(def_id, output_ty);\n+\n+        let trait_pred_and_self = trait_pred.map_bound(|trait_pred| (trait_pred, output_ty));\n \n         let new_obligation =\n-            self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred, output_ty);\n+            self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred_and_self);\n \n         match self.evaluate_obligation(&new_obligation) {\n             Ok(\n@@ -842,96 +841,102 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let param_env = obligation.param_env;\n \n         // Try to apply the original trait binding obligation by borrowing.\n-        let mut try_borrowing = |old_pred: ty::PolyTraitPredicate<'tcx>,\n-                                 blacklist: &[DefId]|\n-         -> bool {\n-            if blacklist.contains(&old_pred.def_id()) {\n-                return false;\n-            }\n+        let mut try_borrowing =\n+            |old_pred: ty::PolyTraitPredicate<'tcx>, blacklist: &[DefId]| -> bool {\n+                if blacklist.contains(&old_pred.def_id()) {\n+                    return false;\n+                }\n+                // We map bounds to `&T` and `&mut T`\n+                let trait_pred_and_imm_ref = old_pred.map_bound(|trait_pred| {\n+                    (\n+                        trait_pred,\n+                        self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                    )\n+                });\n+                let trait_pred_and_mut_ref = old_pred.map_bound(|trait_pred| {\n+                    (\n+                        trait_pred,\n+                        self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, trait_pred.self_ty()),\n+                    )\n+                });\n \n-            // This is a quick fix to resolve an ICE (#96223).\n-            // This change should probably be deeper.\n-            // As suggested by @jackh726, `mk_trait_obligation_with_new_self_ty` could take a `Binder<(TraitRef, Ty)>\n-            // instead of `Binder<Ty>` leading to some changes to its call places.\n-            let Some(orig_ty) = old_pred.self_ty().no_bound_vars() else {\n-                return false;\n-            };\n-            let mk_result = |new_ty| {\n-                let obligation =\n-                    self.mk_trait_obligation_with_new_self_ty(param_env, old_pred, new_ty);\n-                self.predicate_must_hold_modulo_regions(&obligation)\n-            };\n-            let imm_result = mk_result(self.tcx.mk_imm_ref(self.tcx.lifetimes.re_static, orig_ty));\n-            let mut_result = mk_result(self.tcx.mk_mut_ref(self.tcx.lifetimes.re_static, orig_ty));\n-\n-            if imm_result || mut_result {\n-                if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    // We have a very specific type of error, where just borrowing this argument\n-                    // might solve the problem. In cases like this, the important part is the\n-                    // original type obligation, not the last one that failed, which is arbitrary.\n-                    // Because of this, we modify the error to refer to the original obligation and\n-                    // return early in the caller.\n-\n-                    let msg = format!(\n-                        \"the trait bound `{}: {}` is not satisfied\",\n-                        orig_ty,\n-                        old_pred.print_modifiers_and_trait_path(),\n-                    );\n-                    if has_custom_message {\n-                        err.note(&msg);\n-                    } else {\n-                        err.message =\n-                            vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n-                    }\n-                    if snippet.starts_with('&') {\n-                        // This is already a literal borrow and the obligation is failing\n-                        // somewhere else in the obligation chain. Do not suggest non-sense.\n-                        return false;\n-                    }\n-                    err.span_label(\n-                        span,\n-                        &format!(\n-                            \"expected an implementor of trait `{}`\",\n+                let mk_result = |trait_pred_and_new_ty| {\n+                    let obligation =\n+                        self.mk_trait_obligation_with_new_self_ty(param_env, trait_pred_and_new_ty);\n+                    self.predicate_must_hold_modulo_regions(&obligation)\n+                };\n+                let imm_result = mk_result(trait_pred_and_imm_ref);\n+                let mut_result = mk_result(trait_pred_and_mut_ref);\n+\n+                if imm_result || mut_result {\n+                    if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n+                        // We have a very specific type of error, where just borrowing this argument\n+                        // might solve the problem. In cases like this, the important part is the\n+                        // original type obligation, not the last one that failed, which is arbitrary.\n+                        // Because of this, we modify the error to refer to the original obligation and\n+                        // return early in the caller.\n+\n+                        let msg = format!(\n+                            \"the trait bound `{}: {}` is not satisfied\",\n+                            // Safe to skip binder here\n+                            old_pred.self_ty().skip_binder(),\n                             old_pred.print_modifiers_and_trait_path(),\n-                        ),\n-                    );\n-\n-                    // This if is to prevent a special edge-case\n-                    if matches!(\n-                        span.ctxt().outer_expn_data().kind,\n-                        ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n-                    ) {\n-                        // We don't want a borrowing suggestion on the fields in structs,\n-                        // ```\n-                        // struct Foo {\n-                        //  the_foos: Vec<Foo>\n-                        // }\n-                        // ```\n-\n-                        if imm_result && mut_result {\n-                            err.span_suggestions(\n-                                span.shrink_to_lo(),\n-                                \"consider borrowing here\",\n-                                [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                        );\n+                        if has_custom_message {\n+                            err.note(&msg);\n                         } else {\n-                            err.span_suggestion_verbose(\n-                                span.shrink_to_lo(),\n-                                &format!(\n-                                    \"consider{} borrowing here\",\n-                                    if mut_result { \" mutably\" } else { \"\" }\n-                                ),\n-                                format!(\"&{}\", if mut_result { \"mut \" } else { \"\" }),\n-                                Applicability::MaybeIncorrect,\n-                            );\n+                            err.message =\n+                                vec![(rustc_errors::DiagnosticMessage::Str(msg), Style::NoStyle)];\n                         }\n+                        if snippet.starts_with('&') {\n+                            // This is already a literal borrow and the obligation is failing\n+                            // somewhere else in the obligation chain. Do not suggest non-sense.\n+                            return false;\n+                        }\n+                        err.span_label(\n+                            span,\n+                            &format!(\n+                                \"expected an implementor of trait `{}`\",\n+                                old_pred.print_modifiers_and_trait_path(),\n+                            ),\n+                        );\n+\n+                        // This if is to prevent a special edge-case\n+                        if matches!(\n+                            span.ctxt().outer_expn_data().kind,\n+                            ExpnKind::Root | ExpnKind::Desugaring(DesugaringKind::ForLoop)\n+                        ) {\n+                            // We don't want a borrowing suggestion on the fields in structs,\n+                            // ```\n+                            // struct Foo {\n+                            //  the_foos: Vec<Foo>\n+                            // }\n+                            // ```\n+\n+                            if imm_result && mut_result {\n+                                err.span_suggestions(\n+                                    span.shrink_to_lo(),\n+                                    \"consider borrowing here\",\n+                                    [\"&\".to_string(), \"&mut \".to_string()].into_iter(),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            } else {\n+                                err.span_suggestion_verbose(\n+                                    span.shrink_to_lo(),\n+                                    &format!(\n+                                        \"consider{} borrowing here\",\n+                                        if mut_result { \" mutably\" } else { \"\" }\n+                                    ),\n+                                    format!(\"&{}\", if mut_result { \"mut \" } else { \"\" }),\n+                                    Applicability::MaybeIncorrect,\n+                                );\n+                            }\n+                        }\n+                        return true;\n                     }\n-                    return true;\n                 }\n-            }\n-            return false;\n-        };\n+                return false;\n+            };\n \n         if let ObligationCauseCode::ImplDerivedObligation(cause) = &*code {\n             try_borrowing(cause.derived.parent_trait_pred, &[])\n@@ -992,20 +997,22 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return false;\n             }\n \n-            let Some(mut suggested_ty) = trait_pred.self_ty().no_bound_vars() else {\n-                return false;\n-            };\n+            // We skip binder here\n+            let mut suggested_ty = trait_pred.self_ty().skip_binder();\n \n             for refs_remaining in 0..refs_number {\n                 let ty::Ref(_, inner_ty, _) = suggested_ty.kind() else {\n                     break;\n                 };\n                 suggested_ty = *inner_ty;\n \n+                // We remap bounds here\n+                let trait_pred_and_suggested_ty =\n+                    trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n+\n                 let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n-                    trait_pred,\n-                    suggested_ty,\n+                    trait_pred_and_suggested_ty,\n                 );\n \n                 if self.predicate_may_hold(&new_obligation) {\n@@ -1141,10 +1148,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     hir::Mutability::Not => self.tcx.mk_mut_ref(region, t_type),\n                 };\n \n+                let trait_pred_and_suggested_ty =\n+                    trait_pred.map_bound(|trait_pred| (trait_pred, suggested_ty));\n+\n                 let new_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n-                    trait_pred,\n-                    suggested_ty,\n+                    trait_pred_and_suggested_ty,\n                 );\n                 let suggested_ty_would_satisfy_obligation = self\n                     .evaluate_obligation_no_overflow(&new_obligation)\n@@ -1195,7 +1204,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             // Only suggest this if the expression behind the semicolon implements the predicate\n             && let Some(typeck_results) = self.in_progress_typeck_results\n             && let Some(ty) = typeck_results.borrow().expr_ty_opt(expr)\n-            && self.predicate_may_hold(&self.mk_trait_obligation_with_new_self_ty(obligation.param_env, trait_pred, ty))\n+            && self.predicate_may_hold(&self.mk_trait_obligation_with_new_self_ty(\n+                obligation.param_env, trait_pred.map_bound(|trait_pred| (trait_pred, ty))\n+            ))\n         {\n             err.span_label(\n                 expr.span,\n@@ -2727,8 +2738,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 );\n                 let try_obligation = self.mk_trait_obligation_with_new_self_ty(\n                     obligation.param_env,\n-                    trait_pred,\n-                    normalized_ty.ty().unwrap(),\n+                    trait_pred.map_bound(|trait_pred| (trait_pred, normalized_ty.ty().unwrap())),\n                 );\n                 debug!(\"suggest_await_before_try: try_trait_obligation {:?}\", try_obligation);\n                 if self.predicate_may_hold(&try_obligation)"}]}