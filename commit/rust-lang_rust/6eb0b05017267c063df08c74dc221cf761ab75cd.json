{"sha": "6eb0b05017267c063df08c74dc221cf761ab75cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYjBiMDUwMTcyNjdjMDYzZGYwOGM3NGRjMjIxY2Y3NjFhYjc1Y2Q=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-23T22:07:22Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-07-23T22:07:22Z"}, "message": "Add src and fix generics display issues", "tree": {"sha": "db08234f81deaa7bee9aeec52daeb037f1468a2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db08234f81deaa7bee9aeec52daeb037f1468a2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6eb0b05017267c063df08c74dc221cf761ab75cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0b05017267c063df08c74dc221cf761ab75cd", "html_url": "https://github.com/rust-lang/rust/commit/6eb0b05017267c063df08c74dc221cf761ab75cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6eb0b05017267c063df08c74dc221cf761ab75cd/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "459550b5376a98d69313cf4b984a2527a92dbb94", "url": "https://api.github.com/repos/rust-lang/rust/commits/459550b5376a98d69313cf4b984a2527a92dbb94", "html_url": "https://github.com/rust-lang/rust/commit/459550b5376a98d69313cf4b984a2527a92dbb94"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "86511c66de01c5bbdc0289f81889f6fdd3888cf8", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6eb0b05017267c063df08c74dc221cf761ab75cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6eb0b05017267c063df08c74dc221cf761ab75cd/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=6eb0b05017267c063df08c74dc221cf761ab75cd", "patch": "@@ -152,7 +152,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     }\n                     self.cx.tcx.for_each_relevant_impl(trait_def_id, ty, |impl_def_id| {\n                         self.cx.tcx.infer_ctxt().enter(|infcx| {\n-                            let generics = infcx.tcx.generics_of(impl_def_id);\n+                            let t_generics = infcx.tcx.generics_of(impl_def_id);\n                             let trait_ref = infcx.tcx.impl_trait_ref(impl_def_id).unwrap();\n \n                             match infcx.tcx.type_of(impl_def_id).sty {\n@@ -161,7 +161,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                             }\n \n                             let substs = infcx.fresh_substs_for_item(DUMMY_SP, def_id);\n-                            let ty2 = ty.subst(infcx.tcx, substs);\n+                            let ty = ty.subst(infcx.tcx, substs);\n                             let param_env = param_env.subst(infcx.tcx, substs);\n \n                             let impl_substs = infcx.fresh_substs_for_item(DUMMY_SP, impl_def_id);\n@@ -171,7 +171,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                             // our type, and ignore the impl if there was a mismatch.\n                             let cause = traits::ObligationCause::dummy();\n                             let eq_result = infcx.at(&cause, param_env)\n-                                                 .eq(trait_ref.self_ty(), ty2);\n+                                                 .eq(trait_ref.self_ty(), ty);\n                             if let Ok(InferOk { value: (), obligations }) = eq_result {\n                                 // FIXME(eddyb) ignoring `obligations` might cause false positives.\n                                 drop(obligations);\n@@ -199,9 +199,10 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                              .collect();\n \n                                 let ty = self.get_real_ty(def_id, def_ctor, &real_name, generics);\n+                                let predicates = infcx.tcx.predicates_of(def_id);\n \n                                 traits.push(Item {\n-                                    source: Span::empty(),\n+                                    source: infcx.tcx.def_span(impl_def_id).clean(self.cx),\n                                     name: None,\n                                     attrs: Default::default(),\n                                     visibility: None,\n@@ -210,8 +211,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                                     deprecation: None,\n                                     inner: ImplItem(Impl {\n                                         unsafety: hir::Unsafety::Normal,\n-                                        generics: (generics,\n-                                                   &tcx.predicates_of(impl_def_id)).clean(self.cx),\n+                                        generics: (t_generics, &predicates).clean(self.cx),\n                                         provided_trait_methods,\n                                         trait_: Some(trait_.clean(self.cx)),\n                                         for_: ty.clean(self.cx),"}]}