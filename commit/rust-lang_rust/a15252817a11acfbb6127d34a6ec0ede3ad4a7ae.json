{"sha": "a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "node_id": "C_kwDOAAsO6NoAKGExNTI1MjgxN2ExMWFjZmJiNjEyN2QzNGE2ZWMwZWRlM2FkNGE3YWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-23T00:09:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-23T00:09:43Z"}, "message": "Rollup merge of #93103 - estebank:await-span, r=nagisa\n\nTweak `expr.await` desugaring `Span`\n\nFix #93074", "tree": {"sha": "d71b46972a1497f0dee25239dabb221d4e764545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d71b46972a1497f0dee25239dabb221d4e764545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh7JzHCRBK7hj4Ov3rIwAA1pMIAJ8JqbB7OPTbbpRjvN7psAy+\nhyB8zxF5xod9JpTmL/0BMZC6kWXeJnetXXZkQszpl9npunx9Wb7KTPfueomQHPY+\naXVX5QkkszQL21leYRMTQVD4L16PAfoNr25CfGt9gSoYGfWKA2MkHyJoMrT0LFi2\nJAM5dAxu5zOX5C99uDs2WifPRZf0hWVeJ7YrMA6FV78MkT+VKqi4Kt4zc7d4UQmb\nzcA131kQpn/uhUm9kaDcUvzJKAhHMBBSFfUgxagGN44Bxwk4Ua54cAkXzB1GMt4I\nMS7av3sa4XQAryI8GY+OaTZplmNYOhrt0D2DVy0Qbz5oPJ3qi/yuQMP99ji5b9I=\n=MAnh\n-----END PGP SIGNATURE-----\n", "payload": "tree d71b46972a1497f0dee25239dabb221d4e764545\nparent 24ac541de64938791bd7c72c9a63ec328508bdac\nparent 7356e28abbd56ff600dff1d34553b5bebcfc8767\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642896583 +0100\ncommitter GitHub <noreply@github.com> 1642896583 +0100\n\nRollup merge of #93103 - estebank:await-span, r=nagisa\n\nTweak `expr.await` desugaring `Span`\n\nFix #93074\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "html_url": "https://github.com/rust-lang/rust/commit/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ac541de64938791bd7c72c9a63ec328508bdac", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ac541de64938791bd7c72c9a63ec328508bdac", "html_url": "https://github.com/rust-lang/rust/commit/24ac541de64938791bd7c72c9a63ec328508bdac"}, {"sha": "7356e28abbd56ff600dff1d34553b5bebcfc8767", "url": "https://api.github.com/repos/rust-lang/rust/commits/7356e28abbd56ff600dff1d34553b5bebcfc8767", "html_url": "https://github.com/rust-lang/rust/commit/7356e28abbd56ff600dff1d34553b5bebcfc8767"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "17bc8d7591b406e766d4a7bb4fe2a4a2bf745273", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "patch": "@@ -625,18 +625,18 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     ///     }\n     /// }\n     /// ```\n-    fn lower_expr_await(&mut self, await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n-        let dot_await_span = expr.span.shrink_to_hi().to(await_span);\n+    fn lower_expr_await(&mut self, dot_await_span: Span, expr: &Expr) -> hir::ExprKind<'hir> {\n+        let full_span = expr.span.to(dot_await_span);\n         match self.generator_kind {\n             Some(hir::GeneratorKind::Async(_)) => {}\n             Some(hir::GeneratorKind::Gen) | None => {\n                 let mut err = struct_span_err!(\n                     self.sess,\n-                    await_span,\n+                    dot_await_span,\n                     E0728,\n                     \"`await` is only allowed inside `async` functions and blocks\"\n                 );\n-                err.span_label(await_span, \"only allowed inside `async` functions and blocks\");\n+                err.span_label(dot_await_span, \"only allowed inside `async` functions and blocks\");\n                 if let Some(item_sp) = self.current_item {\n                     err.span_label(item_sp, \"this is not `async`\");\n                 }\n@@ -646,7 +646,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let span = self.mark_span_with_reason(DesugaringKind::Await, dot_await_span, None);\n         let gen_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            full_span,\n             self.allow_gen_future.clone(),\n         );\n         let expr = self.lower_expr_mut(expr);\n@@ -699,9 +699,9 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         let loop_hir_id = self.lower_node_id(loop_node_id);\n         let ready_arm = {\n             let x_ident = Ident::with_dummy_span(sym::result);\n-            let (x_pat, x_pat_hid) = self.pat_ident(span, x_ident);\n-            let x_expr = self.expr_ident(span, x_ident, x_pat_hid);\n-            let ready_field = self.single_pat_field(span, x_pat);\n+            let (x_pat, x_pat_hid) = self.pat_ident(gen_future_span, x_ident);\n+            let x_expr = self.expr_ident(gen_future_span, x_ident, x_pat_hid);\n+            let ready_field = self.single_pat_field(gen_future_span, x_pat);\n             let ready_pat = self.pat_lang_item_variant(\n                 span,\n                 hir::LangItem::PollReady,\n@@ -711,7 +711,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n                     hir::ExprKind::Break(this.lower_loop_destination(None), Some(x_expr));\n-                this.arena.alloc(this.expr(span, expr_break, ThinVec::new()))\n+                this.arena.alloc(this.expr(gen_future_span, expr_break, ThinVec::new()))\n             });\n             self.arm(ready_pat, break_x)\n         };\n@@ -783,7 +783,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         // `match ::std::future::IntoFuture::into_future(<expr>) { ... }`\n         let into_future_span = self.mark_span_with_reason(\n             DesugaringKind::Await,\n-            await_span,\n+            dot_await_span,\n             self.allow_into_future.clone(),\n         );\n         let into_future_expr = self.expr_call_lang_item_fn("}, {"sha": "1f1e1184dcc022e8991968208970709e1be3fde3", "filename": "src/test/ui/async-await/proper-span-for-type-error.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.fixed?ref=a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    Ok(a().await) //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "00ccde1bf99628bf9f7d9ad8d65f1feffcfc8a6c", "filename": "src/test/ui/async-await/proper-span-for-type-error.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.rs?ref=a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "patch": "@@ -0,0 +1,11 @@\n+// edition:2021\n+// run-rustfix\n+#![allow(dead_code)]\n+\n+async fn a() {}\n+\n+async fn foo() -> Result<(), i32> {\n+    a().await //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "611dc0407bf96daa4e7fc1f1e08fb6a0359d5de2", "filename": "src/test/ui/async-await/proper-span-for-type-error.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a15252817a11acfbb6127d34a6ec0ede3ad4a7ae/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fproper-span-for-type-error.stderr?ref=a15252817a11acfbb6127d34a6ec0ede3ad4a7ae", "patch": "@@ -0,0 +1,16 @@\n+error[E0308]: mismatched types\n+  --> $DIR/proper-span-for-type-error.rs:8:5\n+   |\n+LL |     a().await\n+   |     ^^^^^^^^^ expected enum `Result`, found `()`\n+   |\n+   = note:   expected enum `Result<(), i32>`\n+           found unit type `()`\n+help: try wrapping the expression in `Ok`\n+   |\n+LL |     Ok(a().await)\n+   |     +++         +\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}