{"sha": "5127d24a3e863a0ce99bffd6bacfce396ae0813b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxMjdkMjRhM2U4NjNhMGNlOTliZmZkNmJhY2ZjZTM5NmFlMDgxM2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-23T22:51:58Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-11-25T18:55:26Z"}, "message": "Remove `#[staged_api]`", "tree": {"sha": "bea2fbbdf39079d66edbd9af82e7c633df5d06e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea2fbbdf39079d66edbd9af82e7c633df5d06e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5127d24a3e863a0ce99bffd6bacfce396ae0813b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5127d24a3e863a0ce99bffd6bacfce396ae0813b", "html_url": "https://github.com/rust-lang/rust/commit/5127d24a3e863a0ce99bffd6bacfce396ae0813b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5127d24a3e863a0ce99bffd6bacfce396ae0813b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b9a13e6ba83a5619b628c1534b1c6d566157f62", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b9a13e6ba83a5619b628c1534b1c6d566157f62", "html_url": "https://github.com/rust-lang/rust/commit/1b9a13e6ba83a5619b628c1534b1c6d566157f62"}], "stats": {"total": 55, "additions": 18, "deletions": 37}, "files": [{"sha": "80194ea27bf5d116cb138150d428a1131db9c0b3", "filename": "src/doc/reference.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -2325,10 +2325,6 @@ The currently implemented features of the reference compiler are:\n * `simd_ffi` - Allows use of SIMD vectors in signatures for foreign functions.\n                The SIMD interface is subject to change.\n \n-* `staged_api` - Allows usage of stability markers and `#![staged_api]` in a\n-                 crate. Stability markers are also attributes: `#[stable]`,\n-                 `#[unstable]`, and `#[rustc_deprecated]` are the three levels.\n-\n * `start` - Allows use of the `#[start]` attribute, which changes the entry point\n             into a Rust program. This capability, especially the signature for the\n             annotated function, is subject to change."}, {"sha": "f4cbeb5ce9c616a9ba9848c0547010c6ab3c585a", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -350,12 +350,19 @@ impl<'a> CrateReader<'a> {\n     fn is_staged_api(&self, data: &[u8]) -> bool {\n         let attrs = decoder::get_crate_attributes(data);\n         for attr in &attrs {\n-            if &attr.name()[..] == \"staged_api\" {\n-                match attr.node.value.node { ast::MetaWord(_) => return true, _ => (/*pass*/) }\n+            if attr.name() == \"feature\" {\n+                if let Some(metas) = attr.meta_item_list() {\n+                    for meta in metas {\n+                        if let ast::MetaWord(ref name) = meta.node {\n+                            if &name[..] == \"staged_api\" {\n+                                return true\n+                            }\n+                        }\n+                    }\n+                }\n             }\n         }\n-\n-        return false;\n+        false\n     }\n \n     fn resolve_crate(&mut self,"}, {"sha": "a7a6ad7abf67115ec092abfd71dd193e4a00580f", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -279,19 +279,9 @@ impl<'tcx> Index<'tcx> {\n                            |v| intravisit::walk_crate(v, krate));\n     }\n \n-    pub fn new(krate: &Crate) -> Index {\n-        let mut is_staged_api = false;\n-        for attr in &krate.attrs {\n-            if attr.name() == \"staged_api\" {\n-                if let ast::MetaWord(_) = attr.node.value.node {\n-                    attr::mark_used(attr);\n-                    is_staged_api = true;\n-                    break\n-                }\n-            }\n-        }\n+    pub fn new(sess: &Session) -> Index<'tcx> {\n         let mut staged_api = FnvHashMap();\n-        staged_api.insert(LOCAL_CRATE, is_staged_api);\n+        staged_api.insert(LOCAL_CRATE, sess.features.borrow().staged_api);\n         Index {\n             staged_api: staged_api,\n             map: DefIdMap(),"}, {"sha": "bfff4615e43b4f69b2d8bc980a708da6e4ca4bd3", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -738,7 +738,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                freevars,\n                                region_map,\n                                lang_items,\n-                               stability::Index::new(krate),\n+                               stability::Index::new(sess),\n                                |tcx| {\n                                    // passes are timed inside typeck\n                                    typeck::check_crate(tcx, trait_map);"}, {"sha": "90ce9662cb0b262d967f850a1289be19fbb80409", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -136,7 +136,7 @@ fn test_env<F>(source_string: &str,\n                                freevars,\n                                region_map,\n                                lang_items,\n-                               stability::Index::new(krate),\n+                               stability::Index::new(&sess),\n                                |tcx| {\n                                    let infcx = infer::new_infer_ctxt(tcx, &tcx.tables, None, false);\n                                    body(Env { infcx: &infcx });"}, {"sha": "b450331d44036fee62f37efc43023799738e629d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5127d24a3e863a0ce99bffd6bacfce396ae0813b/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=5127d24a3e863a0ce99bffd6bacfce396ae0813b", "patch": "@@ -277,8 +277,6 @@ pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGat\n     // Not used any more, but we can't feature gate it\n     (\"no_stack_check\", Normal, Ungated),\n \n-    (\"staged_api\", CrateLevel, Gated(\"staged_api\",\n-                                     \"staged_api is for use by rustc only\")),\n     (\"plugin\", CrateLevel, Gated(\"plugin\",\n                                  \"compiler plugins are experimental \\\n                                   and possibly buggy\")),\n@@ -501,6 +499,7 @@ pub struct Features {\n     pub cfg_target_vendor: bool,\n     pub augmented_assignments: bool,\n     pub braced_empty_structs: bool,\n+    pub staged_api: bool,\n }\n \n impl Features {\n@@ -532,6 +531,7 @@ impl Features {\n             cfg_target_vendor: false,\n             augmented_assignments: false,\n             braced_empty_structs: false,\n+            staged_api: false,\n         }\n     }\n }\n@@ -1104,6 +1104,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         cfg_target_vendor: cx.has_feature(\"cfg_target_vendor\"),\n         augmented_assignments: cx.has_feature(\"augmented_assignments\"),\n         braced_empty_structs: cx.has_feature(\"braced_empty_structs\"),\n+        staged_api: cx.has_feature(\"staged_api\"),\n     }\n }\n "}, {"sha": "53d687b5cfefe16f6649abb6bfb3f42ddb2c60c1", "filename": "src/test/compile-fail/staged_api.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1b9a13e6ba83a5619b628c1534b1c6d566157f62/src%2Ftest%2Fcompile-fail%2Fstaged_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b9a13e6ba83a5619b628c1534b1c6d566157f62/src%2Ftest%2Fcompile-fail%2Fstaged_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstaged_api.rs?ref=1b9a13e6ba83a5619b628c1534b1c6d566157f62", "patch": "@@ -1,13 +0,0 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![staged_api] //~ ERROR staged_api is for use by rustc only\n-\n-fn main() { }"}]}