{"sha": "62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "node_id": "C_kwDOAAsO6NoAKDYyZTRiY2IxNjhiMzU0YjU3ODBlMmEwYWJjMDJiNjFlNmE0ZWZlZTM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-09T06:30:15Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-09T07:00:40Z"}, "message": "Address comments", "tree": {"sha": "a0c0edb857bbf3d978362e5552069e6f721c30a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0c0edb857bbf3d978362e5552069e6f721c30a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "html_url": "https://github.com/rust-lang/rust/commit/62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62e4bcb168b354b5780e2a0abc02b61e6a4efee3/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ed37c2e16a9b426f84501a9ae4a5f22741816c", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ed37c2e16a9b426f84501a9ae4a5f22741816c", "html_url": "https://github.com/rust-lang/rust/commit/60ed37c2e16a9b426f84501a9ae4a5f22741816c"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "0fe1ddc123501bdce55c1ea878fd86c0c3d33ebe", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62e4bcb168b354b5780e2a0abc02b61e6a4efee3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e4bcb168b354b5780e2a0abc02b61e6a4efee3/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "patch": "@@ -250,7 +250,7 @@ impl<K: DepKind> DepGraph<K> {\n     /// in the query infrastructure, and is not currently needed by the\n     /// decoding of any query results. Should the need arise in the future,\n     /// we should consider extending the query system with this functionality.\n-    pub fn with_query_deserialization<OP, R>(op: OP) -> R\n+    pub fn with_query_deserialization<OP, R>(&self, op: OP) -> R\n     where\n         OP: FnOnce() -> R,\n     {\n@@ -881,7 +881,7 @@ impl<K: DepKind> DepGraphData<K> {\n         );\n \n         if !side_effects.is_empty() {\n-            DepGraph::<K>::with_query_deserialization(|| {\n+            qcx.dep_context().dep_graph().with_query_deserialization(|| {\n                 self.emit_side_effects(qcx, dep_node_index, side_effects)\n             });\n         }"}, {"sha": "7b9e0c3a0a6777a72e19bea87308bd705a92cd3a", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/62e4bcb168b354b5780e2a0abc02b61e6a4efee3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62e4bcb168b354b5780e2a0abc02b61e6a4efee3/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=62e4bcb168b354b5780e2a0abc02b61e6a4efee3", "patch": "@@ -2,9 +2,7 @@\n //! generate the actual methods on tcx which find and execute the provider,\n //! manage the caches, and so forth.\n \n-use crate::dep_graph::{\n-    DepContext, DepGraph, DepKind, DepNode, DepNodeIndex, DepNodeParams, TaskDepsRef,\n-};\n+use crate::dep_graph::{DepContext, DepKind, DepNode, DepNodeIndex, DepNodeParams};\n use crate::dep_graph::{DepGraphData, HasDepContext};\n use crate::ich::StableHashingContext;\n use crate::query::caches::QueryCache;\n@@ -430,13 +428,12 @@ where\n \n             // Similarly, fingerprint the result to assert that\n             // it doesn't have anything not considered hashable.\n-            if cfg!(debug_assertions)\n-            && let Some(hash_result) = query.hash_result()\n-          {\n-            qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n-                hash_result(&mut hcx, &result);\n-            });\n-        }\n+            if cfg!(debug_assertions) && let Some(hash_result) = query.hash_result()\n+            {\n+                qcx.dep_context().with_stable_hashing_context(|mut hcx| {\n+                    hash_result(&mut hcx, &result);\n+                });\n+            }\n \n             return (result, dep_node_index);\n         }\n@@ -524,9 +521,10 @@ where\n         // The call to `with_query_deserialization` enforces that no new `DepNodes`\n         // are created during deserialization. See the docs of that method for more\n         // details.\n-        let result = DepGraph::<Qcx::DepKind>::with_query_deserialization(|| {\n-            try_load_from_disk(qcx, prev_dep_node_index)\n-        });\n+        let result = qcx\n+            .dep_context()\n+            .dep_graph()\n+            .with_query_deserialization(|| try_load_from_disk(qcx, prev_dep_node_index));\n \n         prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n \n@@ -575,7 +573,7 @@ where\n     let prof_timer = qcx.dep_context().profiler().query_provider();\n \n     // The dep-graph for this computation is already in-place.\n-    let result = Qcx::DepKind::with_deps(TaskDepsRef::Ignore, || query.compute(qcx, *key));\n+    let result = qcx.dep_context().dep_graph().with_ignore(|| query.compute(qcx, *key));\n \n     prof_timer.finish_with_query_invocation_id(dep_node_index.into());\n "}]}