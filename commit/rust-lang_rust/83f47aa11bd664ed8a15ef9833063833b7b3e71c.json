{"sha": "83f47aa11bd664ed8a15ef9833063833b7b3e71c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZjQ3YWExMWJkNjY0ZWQ4YTE1ZWY5ODMzMDYzODMzYjdiM2U3MWM=", "commit": {"author": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-12T14:47:37Z"}, "committer": {"name": "Laurence Tratt", "email": "laurie@tratt.net", "date": "2020-08-12T14:47:37Z"}, "message": "Be clear about the reverse `transmute` guarantees.", "tree": {"sha": "c5bc3ab2564d67b21be3308c2d332c8dda2c4801", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5bc3ab2564d67b21be3308c2d332c8dda2c4801"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83f47aa11bd664ed8a15ef9833063833b7b3e71c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83f47aa11bd664ed8a15ef9833063833b7b3e71c", "html_url": "https://github.com/rust-lang/rust/commit/83f47aa11bd664ed8a15ef9833063833b7b3e71c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83f47aa11bd664ed8a15ef9833063833b7b3e71c/comments", "author": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ltratt", "id": 20318, "node_id": "MDQ6VXNlcjIwMzE4", "avatar_url": "https://avatars.githubusercontent.com/u/20318?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ltratt", "html_url": "https://github.com/ltratt", "followers_url": "https://api.github.com/users/ltratt/followers", "following_url": "https://api.github.com/users/ltratt/following{/other_user}", "gists_url": "https://api.github.com/users/ltratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/ltratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ltratt/subscriptions", "organizations_url": "https://api.github.com/users/ltratt/orgs", "repos_url": "https://api.github.com/users/ltratt/repos", "events_url": "https://api.github.com/users/ltratt/events{/privacy}", "received_events_url": "https://api.github.com/users/ltratt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5118a525fcf9db4102d903650331039158eff11", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5118a525fcf9db4102d903650331039158eff11", "html_url": "https://github.com/rust-lang/rust/commit/f5118a525fcf9db4102d903650331039158eff11"}], "stats": {"total": 5, "additions": 3, "deletions": 2}, "files": [{"sha": "db7583b04190a34707f8b05d49aaf182d889c3d3", "filename": "library/core/src/option.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/83f47aa11bd664ed8a15ef9833063833b7b3e71c/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83f47aa11bd664ed8a15ef9833063833b7b3e71c/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=83f47aa11bd664ed8a15ef9833063833b7b3e71c", "patch": "@@ -83,8 +83,9 @@\n //! * [`ptr::NonNull<T>`]\n //! * `#[repr(transparent)]` struct around one of the types in this list.\n //!\n-//! For the above cases, it is guaranteed that one can use [`mem::transmute`]\n-//! between `T` and `Option<T>` and vice versa.\n+//! For the above cases, it is guaranteed that one can [`mem::transmute`]\n+//! from all valid values of `T` to `Option<T>` but only from non-`None`\n+//! Option<T>` to `T`.\n //!\n //! # Examples\n //!"}]}