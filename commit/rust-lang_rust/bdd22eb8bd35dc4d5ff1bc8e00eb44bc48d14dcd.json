{"sha": "bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZDIyZWI4YmQzNWRjNGQ1ZmYxYmM4ZTAwZWI0NGJjNDhkMTRkY2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-24T19:57:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-24T19:57:24Z"}, "message": "Merge #4126\n\n4126: Don't omit methods with self from path completion r=matklad a=jonas-schievink\n\nIt's sometimes useful to create a reference to these items (eg. for use as a function pointer). Perhaps these should be given lower score though, if that's possible?\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "d45970bbfa388a83dfef0fb63f3257d5b7a0ca77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d45970bbfa388a83dfef0fb63f3257d5b7a0ca77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeo0SkCRBK7hj4Ov3rIwAAdHIIAFRIZQ3wnnv6EPyv6cfD+a1S\nKTxZ9/Ai+OjAIne81+mfDufh6zPnOj3j8t8GItIFb1KqY6r/HhhMZeYSLcSdvO9r\n7t1pQ8Ioeuf2NmjZB/3e/laNUuwISofADDZ0L0NotsNkcGTdV510u1Mx1oqjXZgv\n1Hjgg2u8qjDnq+m/dUAHQ4zXohq/YrECZr6fBAZ1URvzkLYkW8TBY9/J4jjADHQQ\nsqLgDrmzYOS9UkXb/nNcqIUs6egAmrpUwvGKW5F6AWX4DBXK3ylckwztBBuN+Dy8\nKCbLcOr56kPAwbwK9p1bvmoMTdDtRznq00xeShBe5SxA9u0BBV7JBsxo5g04rHM=\n=KDfG\n-----END PGP SIGNATURE-----\n", "payload": "tree d45970bbfa388a83dfef0fb63f3257d5b7a0ca77\nparent 5d97667f8dd467e7382885fcae40bcdbac63ae4f\nparent 7b9553a7039a5307b8c436d4128e08b74f75c55b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1587758244 +0000\ncommitter GitHub <noreply@github.com> 1587758244 +0000\n\nMerge #4126\n\n4126: Don't omit methods with self from path completion r=matklad a=jonas-schievink\n\nIt's sometimes useful to create a reference to these items (eg. for use as a function pointer). Perhaps these should be given lower score though, if that's possible?\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd", "html_url": "https://github.com/rust-lang/rust/commit/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d97667f8dd467e7382885fcae40bcdbac63ae4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d97667f8dd467e7382885fcae40bcdbac63ae4f", "html_url": "https://github.com/rust-lang/rust/commit/5d97667f8dd467e7382885fcae40bcdbac63ae4f"}, {"sha": "7b9553a7039a5307b8c436d4128e08b74f75c55b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9553a7039a5307b8c436d4128e08b74f75c55b", "html_url": "https://github.com/rust-lang/rust/commit/7b9553a7039a5307b8c436d4128e08b74f75c55b"}], "stats": {"total": 44, "additions": 38, "deletions": 6}, "files": [{"sha": "5a5139e14c293cc2ba5e3f0c14820bf19842697e", "filename": "crates/ra_ide/src/completion/complete_qualified_path.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_qualified_path.rs?ref=bdd22eb8bd35dc4d5ff1bc8e00eb44bc48d14dcd", "patch": "@@ -57,9 +57,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                     match item {\n                         hir::AssocItem::Function(func) => {\n-                            if !func.has_self_param(ctx.db) {\n-                                acc.add_function(ctx, func, None);\n-                            }\n+                            acc.add_function(ctx, func, None);\n                         }\n                         hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                         hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n@@ -86,9 +84,7 @@ pub(super) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                 }\n                 match item {\n                     hir::AssocItem::Function(func) => {\n-                        if !func.has_self_param(ctx.db) {\n-                            acc.add_function(ctx, func, None);\n-                        }\n+                        acc.add_function(ctx, func, None);\n                     }\n                     hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n                     hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n@@ -482,6 +478,42 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_struct_associated_method_with_self() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                \"\n+                //- /lib.rs\n+                /// A Struct\n+                struct S;\n+\n+                impl S {\n+                    /// An associated method\n+                    fn m(&self) { }\n+                }\n+\n+                fn foo() { let _ = S::<|> }\n+                \"\n+            ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"m()\",\n+                source_range: [105; 105),\n+                delete: [105; 105),\n+                insert: \"m()$0\",\n+                kind: Method,\n+                lookup: \"m\",\n+                detail: \"fn m(&self)\",\n+                documentation: Documentation(\n+                    \"An associated method\",\n+                ),\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_struct_associated_const() {\n         assert_debug_snapshot!("}]}