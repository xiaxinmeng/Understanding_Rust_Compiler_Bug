{"sha": "f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "node_id": "C_kwDOAAsO6NoAKGY1ZjBlNmQ1NTEwNDFhYzE1ZGIwZDI3ZWNiY2FjMWI1ZjBlYzU2NjU", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T10:50:41Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2022-03-25T10:55:18Z"}, "message": "Skip needless bitset for debuginfo", "tree": {"sha": "17bcf6dc525fc5423815d8bb223c101edfecb5af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17bcf6dc525fc5423815d8bb223c101edfecb5af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "html_url": "https://github.com/rust-lang/rust/commit/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7941b3f1473331d2abb2b8796046adc0105c8f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/7941b3f1473331d2abb2b8796046adc0105c8f94", "html_url": "https://github.com/rust-lang/rust/commit/7941b3f1473331d2abb2b8796046adc0105c8f94"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "76caa3ceaafae81e741973af657b401a9bcf5447", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "patch": "@@ -23,25 +23,26 @@ pub fn compute_mir_scopes<'ll, 'tcx>(\n     fn_dbg_scope: &'ll DIScope,\n     debug_context: &mut FunctionDebugContext<&'ll DIScope, &'ll DILocation>,\n ) {\n-    // Find all the scopes with variables defined in them.\n-    let mut has_variables = BitSet::new_empty(mir.source_scopes.len());\n-\n-    // Only consider variables when they're going to be emitted.\n-    // FIXME(eddyb) don't even allocate `has_variables` otherwise.\n-    if cx.sess().opts.debuginfo == DebugInfo::Full {\n+    // Find all scopes with variables defined in them.\n+    let variables = if cx.sess().opts.debuginfo == DebugInfo::Full {\n+        let mut vars = BitSet::new_empty(mir.source_scopes.len());\n         // FIXME(eddyb) take into account that arguments always have debuginfo,\n         // irrespective of their name (assuming full debuginfo is enabled).\n         // NOTE(eddyb) actually, on second thought, those are always in the\n         // function scope, which always exists.\n         for var_debug_info in &mir.var_debug_info {\n-            has_variables.insert(var_debug_info.source_info.scope);\n+            vars.insert(var_debug_info.source_info.scope);\n         }\n-    }\n+        Some(vars)\n+    } else {\n+        // Nothing to emit, of course.\n+        None\n+    };\n \n     // Instantiate all scopes.\n     for idx in 0..mir.source_scopes.len() {\n         let scope = SourceScope::new(idx);\n-        make_mir_scope(cx, instance, mir, fn_dbg_scope, &has_variables, debug_context, scope);\n+        make_mir_scope(cx, instance, mir, fn_dbg_scope, &variables, debug_context, scope);\n     }\n }\n \n@@ -50,7 +51,7 @@ fn make_mir_scope<'ll, 'tcx>(\n     instance: Instance<'tcx>,\n     mir: &Body<'tcx>,\n     fn_dbg_scope: &'ll DIScope,\n-    has_variables: &BitSet<SourceScope>,\n+    variables: &Option<BitSet<SourceScope>>,\n     debug_context: &mut FunctionDebugContext<&'ll DIScope, &'ll DILocation>,\n     scope: SourceScope,\n ) {\n@@ -60,7 +61,7 @@ fn make_mir_scope<'ll, 'tcx>(\n \n     let scope_data = &mir.source_scopes[scope];\n     let parent_scope = if let Some(parent) = scope_data.parent_scope {\n-        make_mir_scope(cx, instance, mir, fn_dbg_scope, has_variables, debug_context, parent);\n+        make_mir_scope(cx, instance, mir, fn_dbg_scope, variables, debug_context, parent);\n         debug_context.scopes[parent]\n     } else {\n         // The root is the function itself.\n@@ -74,7 +75,7 @@ fn make_mir_scope<'ll, 'tcx>(\n         return;\n     };\n \n-    if !has_variables.contains(scope) && scope_data.inlined.is_none() {\n+    if let Some(vars) = variables && !vars.contains(scope) && scope_data.inlined.is_none() {\n         // Do not create a DIScope if there are no variables defined in this\n         // MIR `SourceScope`, and it's not `inlined`, to avoid debuginfo bloat.\n         debug_context.scopes[scope] = parent_scope;"}, {"sha": "3152c505af0e5488bd74a926d4a2b769e19a3615", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=f5f0e6d551041ac15db0d27ecbcac1b5f0ec5665", "patch": "@@ -7,6 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(extern_types)]\n #![feature(once_cell)]"}]}