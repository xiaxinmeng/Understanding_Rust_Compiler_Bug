{"sha": "0ad2450396ea72bff341c65dbf24745e1e185aad", "node_id": "C_kwDOAAsO6NoAKDBhZDI0NTAzOTZlYTcyYmZmMzQxYzY1ZGJmMjQ3NDVlMWUxODVhYWQ", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:05:28Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2023-05-06T08:05:28Z"}, "message": "Check for inside multibyte", "tree": {"sha": "bcdc75b98a3c52a62871ce63d2dd39a4030959e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcdc75b98a3c52a62871ce63d2dd39a4030959e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad2450396ea72bff341c65dbf24745e1e185aad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad2450396ea72bff341c65dbf24745e1e185aad", "html_url": "https://github.com/rust-lang/rust/commit/0ad2450396ea72bff341c65dbf24745e1e185aad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad2450396ea72bff341c65dbf24745e1e185aad/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "902b3438c97067c4fddf4eb7e429b8fd82cfe5b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/902b3438c97067c4fddf4eb7e429b8fd82cfe5b7", "html_url": "https://github.com/rust-lang/rust/commit/902b3438c97067c4fddf4eb7e429b8fd82cfe5b7"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "2494975f9fbd1294e51b7e9e7012845e98af65a2", "filename": "lib/line-index/src/lib.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ad2450396ea72bff341c65dbf24745e1e185aad/lib%2Fline-index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad2450396ea72bff341c65dbf24745e1e185aad/lib%2Fline-index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lib%2Fline-index%2Fsrc%2Flib.rs?ref=0ad2450396ea72bff341c65dbf24745e1e185aad", "patch": "@@ -144,12 +144,20 @@ impl LineIndex {\n         self.try_line_col(offset).expect(\"invalid offset\")\n     }\n \n-    /// Transforms the `TextSize` into a `LineCol`, or returns `None` if the `offset` was invalid.\n+    /// Transforms the `TextSize` into a `LineCol`, or returns `None` if the `offset` was invalid,\n+    /// e.g. if it points to the middle of a multi-byte character.\n     pub fn try_line_col(&self, offset: TextSize) -> Option<LineCol> {\n         let line = self.newlines.partition_point(|&it| it <= offset).checked_sub(1)?;\n         let line_start_offset = self.newlines.get(line)?;\n         let col = offset - line_start_offset;\n-        Some(LineCol { line: line as u32, col: col.into() })\n+        let ret = LineCol { line: line as u32, col: col.into() };\n+        self.line_wide_chars\n+            .get(&ret.line)\n+            .into_iter()\n+            .flat_map(|it| it.iter())\n+            .find(|it| it.start < col && col < it.end)\n+            .is_none()\n+            .then_some(ret)\n     }\n \n     /// Transforms the `LineCol` into a `TextSize`."}]}