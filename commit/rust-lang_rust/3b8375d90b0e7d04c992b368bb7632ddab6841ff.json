{"sha": "3b8375d90b0e7d04c992b368bb7632ddab6841ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiODM3NWQ5MGIwZTdkMDRjOTkyYjM2OGJiNzYzMmRkYWI2ODQxZmY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-03T14:38:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-02-03T14:38:23Z"}, "message": "warn on `use`ing all variants of an enum", "tree": {"sha": "34a356a83548de35e66a018967403ca09f1c995d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34a356a83548de35e66a018967403ca09f1c995d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b8375d90b0e7d04c992b368bb7632ddab6841ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b8375d90b0e7d04c992b368bb7632ddab6841ff", "html_url": "https://github.com/rust-lang/rust/commit/3b8375d90b0e7d04c992b368bb7632ddab6841ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b8375d90b0e7d04c992b368bb7632ddab6841ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eb884b7b055c5b150ad45de577458a4a5815952", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb884b7b055c5b150ad45de577458a4a5815952", "html_url": "https://github.com/rust-lang/rust/commit/5eb884b7b055c5b150ad45de577458a4a5815952"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "424c89b28b87652d5240fcf75eb6e782b19dc18a", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b8375d90b0e7d04c992b368bb7632ddab6841ff/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b8375d90b0e7d04c992b368bb7632ddab6841ff/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3b8375d90b0e7d04c992b368bb7632ddab6841ff", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 109 lints included in this crate:\n+There are 110 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -33,6 +33,7 @@ name\n [drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                           | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n [duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument) | warn    | Function arguments having names which only differ by an underscore\n [empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                       | warn    | empty `loop {}` detected\n+[enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                 | allow   | finds use items that import all variants of an enum\n [enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                       | warn    | finds enums where all variants share a prefix/postfix\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                 | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n [expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)             | warn    | implementing `Clone` explicitly on `Copy` types"}, {"sha": "d6df307fec2d7da24008e612582066c4cd6c2caf", "filename": "src/enum_glob_use.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/3b8375d90b0e7d04c992b368bb7632ddab6841ff/src%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8375d90b0e7d04c992b368bb7632ddab6841ff/src%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fenum_glob_use.rs?ref=3b8375d90b0e7d04c992b368bb7632ddab6841ff", "patch": "@@ -0,0 +1,61 @@\n+//! lint on `use`ing all variants of an enum\n+\n+use rustc::lint::{LateLintPass, LintPass, LateContext, LintArray, LintContext};\n+use rustc_front::hir::*;\n+use rustc::front::map::Node::NodeItem;\n+use rustc::front::map::PathElem::PathName;\n+use rustc::middle::ty::TyEnum;\n+use utils::span_lint;\n+use syntax::codemap::Span;\n+use syntax::ast::NodeId;\n+\n+/// **What it does:** Warns when `use`ing all variants of an enum\n+///\n+/// **Why is this bad?** It is usually better style to use the prefixed name of an enum variant, rather than importing variants\n+///\n+/// **Known problems:** Old-style enums that prefix the variants are still around\n+///\n+/// **Example:** `use std::cmp::Ordering::*;`\n+declare_lint! { pub ENUM_GLOB_USE, Allow,\n+    \"finds use items that import all variants of an enum\" }\n+\n+pub struct EnumGlobUse;\n+\n+impl LintPass for EnumGlobUse {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ENUM_GLOB_USE)\n+    }\n+}\n+\n+impl LateLintPass for EnumGlobUse {\n+    fn check_mod(&mut self, cx: &LateContext, m: &Mod, _: Span, _: NodeId) {\n+        // only check top level `use` statements\n+        for item in &m.item_ids {\n+            self.lint_item(cx, cx.krate.item(item.id));\n+        }\n+    }\n+}\n+\n+impl EnumGlobUse {\n+    fn lint_item(&self, cx: &LateContext, item: &Item) {\n+        if item.vis == Visibility::Public {\n+            return; // re-exports are fine\n+        }\n+        if let ItemUse(ref item_use) = item.node {\n+            if let ViewPath_::ViewPathGlob(_) = item_use.node {\n+                let def = cx.tcx.def_map.borrow()[&item.id];\n+                if let Some(NodeItem(it)) = cx.tcx.map.get_if_local(def.def_id()) {\n+                    if let ItemEnum(..) = it.node {\n+                        span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n+                    }\n+                } else {\n+                    if let Some(&PathName(_)) = cx.sess().cstore.item_path(def.def_id()).last() {\n+                        if let TyEnum(..) = cx.sess().cstore.item_type(&cx.tcx, def.def_id()).ty.sty {\n+                            span_lint(cx, ENUM_GLOB_USE, item.span, \"don't use glob imports for enum variants\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "4f3de70db4da7a5335139664d53636dd792f80ee", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3b8375d90b0e7d04c992b368bb7632ddab6841ff/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8375d90b0e7d04c992b368bb7632ddab6841ff/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3b8375d90b0e7d04c992b368bb7632ddab6841ff", "patch": "@@ -37,6 +37,7 @@ pub mod utils;\n pub mod consts;\n pub mod types;\n pub mod misc;\n+pub mod enum_glob_use;\n pub mod eq_op;\n pub mod bit_mask;\n pub mod ptr_arg;\n@@ -95,6 +96,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_late_lint_pass(box misc::CmpNan);\n     reg.register_late_lint_pass(box eq_op::EqOp);\n     reg.register_early_lint_pass(box enum_variants::EnumVariantNames);\n+    reg.register_late_lint_pass(box enum_glob_use::EnumGlobUse);\n     reg.register_late_lint_pass(box bit_mask::BitMask);\n     reg.register_late_lint_pass(box ptr_arg::PtrArg);\n     reg.register_late_lint_pass(box needless_bool::NeedlessBool);\n@@ -153,6 +155,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n \n     reg.register_lint_group(\"clippy_pedantic\", vec![\n+        enum_glob_use::ENUM_GLOB_USE,\n         matches::SINGLE_MATCH_ELSE,\n         methods::OPTION_UNWRAP_USED,\n         methods::RESULT_UNWRAP_USED,"}, {"sha": "fc5f531ba90d7ce417cc304f02006e6e17920a3a", "filename": "tests/compile-fail/enum_glob_use.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b8375d90b0e7d04c992b368bb7632ddab6841ff/tests%2Fcompile-fail%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b8375d90b0e7d04c992b368bb7632ddab6841ff/tests%2Fcompile-fail%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_glob_use.rs?ref=3b8375d90b0e7d04c992b368bb7632ddab6841ff", "patch": "@@ -0,0 +1,20 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(clippy, clippy_pedantic)]\n+#![allow(unused_imports, dead_code)]\n+\n+use std::cmp::Ordering::*; //~ ERROR: don't use glob imports for enum variants\n+\n+enum Enum {}\n+\n+use self::Enum::*; //~ ERROR: don't use glob imports for enum variants\n+\n+fn blarg() {\n+    use self::Enum::*; // ok, just for a function\n+}\n+\n+mod blurg {\n+    pub use std::cmp::Ordering::*; // ok, re-export\n+}\n+\n+fn main() {}"}]}