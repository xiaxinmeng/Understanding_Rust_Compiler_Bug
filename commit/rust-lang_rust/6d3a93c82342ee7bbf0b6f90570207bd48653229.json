{"sha": "6d3a93c82342ee7bbf0b6f90570207bd48653229", "node_id": "C_kwDOAAsO6NoAKDZkM2E5M2M4MjM0MmVlN2JiZjBiNmY5MDU3MDIwN2JkNDg2NTMyMjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-14T16:17:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-14T16:17:57Z"}, "message": "Rollup merge of #105598 - RalfJung:more-comments, r=the8472\n\nexplain mem::forget(env_lock) in fork/exec\n\nI stumbled upon this while doing triage for https://github.com/rust-lang/rust/issues/64718.", "tree": {"sha": "07e6b954ce6cbd71dc4af67a217a03a64f098c06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e6b954ce6cbd71dc4af67a217a03a64f098c06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d3a93c82342ee7bbf0b6f90570207bd48653229", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjmfc1CRBK7hj4Ov3rIwAAfd8IAIgEpwnH+NvYtPnTP8NN2Ykf\nFc5sWWLEXr3eyybNRJKxybjuliMdTmOKvRZs5vxyJpPcLpNjWPaAmhFUPgqmQCy6\ngO0gTRWHjYIpr08MsZp8+wAPJa5RvkFGRHeSzuJFbFdH3PTsOnMbGPi2YVuEqBCt\nxmOmpf1L78mrrb17+TcxKt8Flmo6DQdfQC3ShGSpgy6lXywWkPI4StFdT/+IRYLj\nQv/KOgudfM4LnJLE5b6DospisgvmQ2bqVphxfJw/S+ju3QaRJ94ldzgwj0TYpKLM\nYNdbE+YkEkf4gZp6qlbDk7sM82cugAGBCCcvh/PVfAvPeTeZuHYRaw38U2UBXYM=\n=lJGT\n-----END PGP SIGNATURE-----\n", "payload": "tree 07e6b954ce6cbd71dc4af67a217a03a64f098c06\nparent ba71a63fde087b5bddd71bc13b95cee4b71da8e2\nparent 3465d5fb168e99fd3a16a6b525feffbeca43647e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1671034677 +0100\ncommitter GitHub <noreply@github.com> 1671034677 +0100\n\nRollup merge of #105598 - RalfJung:more-comments, r=the8472\n\nexplain mem::forget(env_lock) in fork/exec\n\nI stumbled upon this while doing triage for https://github.com/rust-lang/rust/issues/64718.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d3a93c82342ee7bbf0b6f90570207bd48653229", "html_url": "https://github.com/rust-lang/rust/commit/6d3a93c82342ee7bbf0b6f90570207bd48653229", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d3a93c82342ee7bbf0b6f90570207bd48653229/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba71a63fde087b5bddd71bc13b95cee4b71da8e2", "html_url": "https://github.com/rust-lang/rust/commit/ba71a63fde087b5bddd71bc13b95cee4b71da8e2"}, {"sha": "3465d5fb168e99fd3a16a6b525feffbeca43647e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3465d5fb168e99fd3a16a6b525feffbeca43647e", "html_url": "https://github.com/rust-lang/rust/commit/3465d5fb168e99fd3a16a6b525feffbeca43647e"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "c0716a089bc38b1b2b3be521c41165e259daeb46", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d3a93c82342ee7bbf0b6f90570207bd48653229/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d3a93c82342ee7bbf0b6f90570207bd48653229/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=6d3a93c82342ee7bbf0b6f90570207bd48653229", "patch": "@@ -66,14 +66,15 @@ impl Command {\n         //\n         // Note that as soon as we're done with the fork there's no need to hold\n         // a lock any more because the parent won't do anything and the child is\n-        // in its own process. Thus the parent drops the lock guard while the child\n-        // forgets it to avoid unlocking it on a new thread, which would be invalid.\n+        // in its own process. Thus the parent drops the lock guard immediately.\n+        // The child calls `mem::forget` to leak the lock, which is crucial because\n+        // releasing a lock is not async-signal-safe.\n         let env_lock = sys::os::env_read_lock();\n         let (pid, pidfd) = unsafe { self.do_fork()? };\n \n         if pid == 0 {\n             crate::panic::always_abort();\n-            mem::forget(env_lock);\n+            mem::forget(env_lock); // avoid non-async-signal-safe unlocking\n             drop(input);\n             let Err(err) = unsafe { self.do_exec(theirs, envp.as_ref()) };\n             let errno = err.raw_os_error().unwrap_or(libc::EINVAL) as u32;"}]}