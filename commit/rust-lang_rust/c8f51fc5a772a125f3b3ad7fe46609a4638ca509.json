{"sha": "c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZjUxZmM1YTc3MmExMjVmM2IzYWQ3ZmU0NjYwOWE0NjM4Y2E1MDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-19T08:39:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-19T08:39:37Z"}, "message": "Auto merge of #1630 - RalfJung:rustup, r=RalfJung\n\nRustup\n\nIncludes https://github.com/rust-lang/miri/pull/1626 and https://github.com/rust-lang/miri/pull/1629.", "tree": {"sha": "d4315e0c8a051fa19f17cd3669635a8329ada268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4315e0c8a051fa19f17cd3669635a8329ada268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "html_url": "https://github.com/rust-lang/rust/commit/c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1499c5a4d99c39326bd4a5ce5fcb419292296576", "url": "https://api.github.com/repos/rust-lang/rust/commits/1499c5a4d99c39326bd4a5ce5fcb419292296576", "html_url": "https://github.com/rust-lang/rust/commit/1499c5a4d99c39326bd4a5ce5fcb419292296576"}, {"sha": "517728bf97b5be2f609a9c539c7fdade2c601555", "url": "https://api.github.com/repos/rust-lang/rust/commits/517728bf97b5be2f609a9c539c7fdade2c601555", "html_url": "https://github.com/rust-lang/rust/commit/517728bf97b5be2f609a9c539c7fdade2c601555"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "5d44fe9e4b837074c30aec60bf4e36cba2a64c4f", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "patch": "@@ -1 +1 @@\n-12f0dba618e761c987142474435dff95ab177f3c\n+bf469eb6c20ccea05400a1942c70343f36705e1c"}, {"sha": "2685a93726d8fdffd5968aa1937b81cd28aa1028", "filename": "src/shims/posix/linux/dlsym.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fdlsym.rs?ref=c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "patch": "@@ -12,6 +12,8 @@ impl Dlsym {\n     pub fn from_str(name: &str) -> InterpResult<'static, Option<Dlsym>> {\n         Ok(match &*name {\n             \"__pthread_get_minstack\" => None,\n+            \"getrandom\" => None, // std falls back to syscall(SYS_getrandom, ...) when this is NULL.\n+            \"statx\" => None, // std falls back to syscall(SYS_statx, ...) when this is NULL.\n             _ => throw_unsup_format!(\"unsupported Linux dlsym: {}\", name),\n         })\n     }"}, {"sha": "23dc02a6affd30976a95ae7780fffa1e4130acca", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "patch": "@@ -208,7 +208,9 @@ fn getrandom<'tcx>(\n \n     // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n     // neither of which have any effect on our current PRNG.\n-    this.read_scalar(flags)?.to_i32()?;\n+    let _flags = this.read_scalar(flags)?;\n+    // FIXME: Check that this is an integer type of the right size.\n+    // Currently, some callers pass i32 and some usize, is that even allowed?\n \n     this.gen_random(ptr, len)?;\n     this.write_scalar(Scalar::from_machine_usize(len, this), dest)?;"}, {"sha": "9b61aabab3b23d56ce5a07c4ab09f87706e1cbab", "filename": "tests/run-pass/backtrace-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/tests%2Frun-pass%2Fbacktrace-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/tests%2Frun-pass%2Fbacktrace-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-std.rs?ref=c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "patch": "@@ -1,5 +1,5 @@\n // normalize-stderr-test \"at .*/(rust[^/]*|checkout)/library/\" -> \"at RUSTLIB/\"\n-// normalize-stderr-test \"RUSTLIB/(.*):\\d+\"-> \"RUSTLIB/$1:LL\"\n+// normalize-stderr-test \"RUSTLIB/([^:]*):\\d+:\\d+\"-> \"RUSTLIB/$1:LL:CC\"\n // normalize-stderr-test \"::<.*>\" -> \"\"\n // compile-flags: -Zmiri-disable-isolation\n "}, {"sha": "09f035b9724eef4af4ceb4a5449f4148b8587543", "filename": "tests/run-pass/backtrace-std.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/tests%2Frun-pass%2Fbacktrace-std.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8f51fc5a772a125f3b3ad7fe46609a4638ca509/tests%2Frun-pass%2Fbacktrace-std.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbacktrace-std.stderr?ref=c8f51fc5a772a125f3b3ad7fe46609a4638ca509", "patch": "@@ -1,28 +1,28 @@\n    0: func_d\n-             at $DIR/backtrace-std.rs:18\n+             at $DIR/backtrace-std.rs:18:45\n    1: func_c\n-             at $DIR/backtrace-std.rs:17\n+             at $DIR/backtrace-std.rs:17:45\n    2: func_b\n-             at $DIR/backtrace-std.rs:11\n+             at $DIR/backtrace-std.rs:11:48\n    3: func_a\n-             at $DIR/backtrace-std.rs:10\n+             at $DIR/backtrace-std.rs:10:45\n    4: main\n-             at $DIR/backtrace-std.rs:21\n+             at $DIR/backtrace-std.rs:21:19\n    5: <fn() as std::ops::FnOnce<()>>::call_once - shim(fn())\n-             at RUSTLIB/core/src/ops/function.rs:LL\n+             at RUSTLIB/core/src/ops/function.rs:LL:CC\n    6: std::sys_common::backtrace::__rust_begin_short_backtrace\n-             at RUSTLIB/std/src/sys_common/backtrace.rs:LL\n+             at RUSTLIB/std/src/sys_common/backtrace.rs:LL:CC\n    7: std::rt::lang_start::{closure#0}\n-             at RUSTLIB/std/src/rt.rs:LL\n+             at RUSTLIB/std/src/rt.rs:LL:CC\n    8: std::ops::function::impls::call_once\n-             at RUSTLIB/core/src/ops/function.rs:LL\n+             at RUSTLIB/core/src/ops/function.rs:LL:CC\n    9: std::panicking::r#try::do_call\n-             at RUSTLIB/std/src/panicking.rs:LL\n+             at RUSTLIB/std/src/panicking.rs:LL:CC\n   10: std::panicking::r#try\n-             at RUSTLIB/std/src/panicking.rs:LL\n+             at RUSTLIB/std/src/panicking.rs:LL:CC\n   11: std::panic::catch_unwind\n-             at RUSTLIB/std/src/panic.rs:LL\n+             at RUSTLIB/std/src/panic.rs:LL:CC\n   12: std::rt::lang_start_internal\n-             at RUSTLIB/std/src/rt.rs:LL\n+             at RUSTLIB/std/src/rt.rs:LL:CC\n   13: std::rt::lang_start\n-             at RUSTLIB/std/src/rt.rs:LL\n+             at RUSTLIB/std/src/rt.rs:LL:CC"}]}