{"sha": "9abda03da69ee64625f2242cdaefa348bd0b48cd", "node_id": "C_kwDOAAsO6NoAKDlhYmRhMDNkYTY5ZWU2NDYyNWYyMjQyY2RhZWZhMzQ4YmQwYjQ4Y2Q", "commit": {"author": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-30T14:49:47Z"}, "committer": {"name": "joboet", "email": "jonasboettiger@icloud.com", "date": "2022-12-30T14:49:47Z"}, "message": "std: rename `Parker::new` to `Parker::new_in_place`, add safe `Parker::new` constructor for SGX", "tree": {"sha": "a9e521cd6a0fbe80f4a88894100ce5076a4e6866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9e521cd6a0fbe80f4a88894100ce5076a4e6866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9abda03da69ee64625f2242cdaefa348bd0b48cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEVuz3PwcqDyifNyYbcE4BSbAZSzwFAmOu+osACgkQcE4BSbAZ\nSzyjww/9EAuwXmTO8QSlJ5UTTAA/ppUDwmmeZKVS2QrDO8UiCi9ahXpeXmzTBnQP\noUZr0MEY5SKfED2CODdSbiRdsVwhPLWaC2UwV0JSsBzJu2i7+XWplr986wfSvtAk\nk4AXmdJZo1bcYek6hALKBBYRdmIbvT0uSOeNezSQiUotnl1A807WP6clygOVMNwQ\nk72+MBmtNk5cDxiXjqbl8beLScWCsIplRLibmXMzT9l1mCXefPG7CxkDRJad820z\nDydxwKlY+HXfhnUtA0Lef1XygnTcvUTAWCTqcai44Eir4A5zwlo58y1zpoOaxOsh\nAE2dIO0kp3TIcdnzxY2mchj2xuHT/KfwgHI9fB041s6wFBILX0SL1xGAbsfdeXOA\nqBOV2CKF+BJZ9kJmwtly26hWVp+mBJZz4f9c5NLlcFsHWhjY8wI2NDbR0+rx1u3k\n3LdpC8wFp1GDA6DT+d2XHl0EVPCYoweC1cRC4XHvSzwJ0pA6cg3OhBeyOr9C/GpV\nHu03VApUF0uo/k7F7tiXQ9/ghdVpuneQxk4j9VoIBfdhU05212q0UnvM5kJQq6YK\nQyMSKqXXZlA6pOInKW9iODq+/hayaLHnn776QMzrzM8SDJ7EXUgjaQzRlcTiRMxj\nYc/ul5efv/TBYof9doFzMecS6+GL8z77RJoPEW2QHm28De20zIY=\n=WpQh\n-----END PGP SIGNATURE-----", "payload": "tree a9e521cd6a0fbe80f4a88894100ce5076a4e6866\nparent 3076f4ec30632a063d0737bef589e1c4859ad23c\nauthor joboet <jonasboettiger@icloud.com> 1672411787 +0100\ncommitter joboet <jonasboettiger@icloud.com> 1672411787 +0100\n\nstd: rename `Parker::new` to `Parker::new_in_place`, add safe `Parker::new` constructor for SGX\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9abda03da69ee64625f2242cdaefa348bd0b48cd", "html_url": "https://github.com/rust-lang/rust/commit/9abda03da69ee64625f2242cdaefa348bd0b48cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9abda03da69ee64625f2242cdaefa348bd0b48cd/comments", "author": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joboet", "id": 25721079, "node_id": "MDQ6VXNlcjI1NzIxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/25721079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joboet", "html_url": "https://github.com/joboet", "followers_url": "https://api.github.com/users/joboet/followers", "following_url": "https://api.github.com/users/joboet/following{/other_user}", "gists_url": "https://api.github.com/users/joboet/gists{/gist_id}", "starred_url": "https://api.github.com/users/joboet/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joboet/subscriptions", "organizations_url": "https://api.github.com/users/joboet/orgs", "repos_url": "https://api.github.com/users/joboet/repos", "events_url": "https://api.github.com/users/joboet/events{/privacy}", "received_events_url": "https://api.github.com/users/joboet/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3076f4ec30632a063d0737bef589e1c4859ad23c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3076f4ec30632a063d0737bef589e1c4859ad23c", "html_url": "https://github.com/rust-lang/rust/commit/3076f4ec30632a063d0737bef589e1c4859ad23c"}], "stats": {"total": 40, "additions": 16, "deletions": 24}, "files": [{"sha": "1608b8cb642dc858ba13482b2d1f5c72a0ba6bfa", "filename": "library/std/src/sys/sgx/thread.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsgx%2Fthread.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -65,7 +65,6 @@ mod task_queue {\n /// execution. The signal is sent once all TLS destructors have finished at\n /// which point no new thread locals should be created.\n pub mod wait_notify {\n-    use crate::mem::MaybeUninit;\n     use crate::pin::Pin;\n     use crate::sync::Arc;\n     use crate::sys_common::thread_parking::Parker;\n@@ -88,25 +87,14 @@ pub mod wait_notify {\n         /// called, this will return immediately, otherwise the current thread\n         /// is blocked until notified.\n         pub fn wait(self) {\n-            // This is not actually `unsafe`, but it uses the `Parker` API,\n-            // which needs `unsafe` on some platforms.\n+            // SAFETY:\n+            // This is only ever called on one thread.\n             unsafe { Pin::new(&*self.0).park() }\n         }\n     }\n \n     pub fn new() -> (Notifier, Waiter) {\n-        // Safety:\n-        // Some other platforms (looking at you, UNIX!) require that the thread\n-        // parker is constructed in-place. This is just a noisy way of writing:\n-        // ```rust\n-        // let parker = Parker::new();\n-        // ```\n-        let parker = unsafe {\n-            let mut place = MaybeUninit::uninit();\n-            Parker::new(place.as_mut_ptr());\n-            place.assume_init()\n-        };\n-        let inner = Arc::new(parker);\n+        let inner = Arc::new(Parker::new());\n         (Notifier(inner.clone()), Waiter(inner))\n     }\n }"}, {"sha": "b709fada3b4a805f1421f7c408f9ac266caf9115", "filename": "library/std/src/sys/unix/thread_parking/darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fdarwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fdarwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fdarwin.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -46,7 +46,7 @@ unsafe impl Sync for Parker {}\n unsafe impl Send for Parker {}\n \n impl Parker {\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         let semaphore = dispatch_semaphore_create(0);\n         assert!(\n             !semaphore.is_null(),"}, {"sha": "082d25e68f587ad9a424b076b348a2814b011894", "filename": "library/std/src/sys/unix/thread_parking/pthread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_parking%2Fpthread.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -99,7 +99,7 @@ impl Parker {\n     ///\n     /// # Safety\n     /// The constructed parker must never be moved.\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         // Use the default mutex implementation to allow for simpler initialization.\n         // This could lead to undefined behaviour when deadlocking. This is avoided\n         // by not deadlocking. Note in particular the unlocking operation before any"}, {"sha": "5d43676adbb11f0428d99c796fe58eaa3b3b2c45", "filename": "library/std/src/sys/windows/thread_parking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parking.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -97,7 +97,7 @@ const NOTIFIED: i8 = 1;\n impl Parker {\n     /// Construct the Windows parker. The UNIX parker implementation\n     /// requires this to happen in-place.\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         parker.write(Self { state: AtomicI8::new(EMPTY) });\n     }\n "}, {"sha": "588e7b27826f6633ed6ba4c6b8f8f95192c52aac", "filename": "library/std/src/sys_common/thread_parking/futex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Ffutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Ffutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Ffutex.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -35,7 +35,7 @@ pub struct Parker {\n impl Parker {\n     /// Construct the futex parker. The UNIX parker implementation\n     /// requires this to happen in-place.\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         parker.write(Self { state: AtomicU32::new(EMPTY) });\n     }\n "}, {"sha": "3209bffe353ed81b775a8b7869789824d1a052b1", "filename": "library/std/src/sys_common/thread_parking/generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fgeneric.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -19,7 +19,7 @@ pub struct Parker {\n impl Parker {\n     /// Construct the generic parker. The UNIX parker implementation\n     /// requires this to happen in-place.\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         parker.write(Parker {\n             state: AtomicUsize::new(EMPTY),\n             lock: Mutex::new(()),"}, {"sha": "e98169597c378011d3e044251d69e813fbd119f6", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -26,9 +26,13 @@ const EMPTY: i8 = 0;\n const NOTIFIED: i8 = 1;\n \n impl Parker {\n+    pub fn new() -> Parker {\n+        Parker { state: AtomicI8::new(EMPTY), tid: UnsafeCell::new(None) }\n+    }\n+\n     /// Create a new thread parker. UNIX requires this to happen in-place.\n-    pub unsafe fn new(parker: *mut Parker) {\n-        parker.write(Parker { state: AtomicI8::new(EMPTY), tid: UnsafeCell::new(None) })\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n+        parker.write(Parker::new())\n     }\n \n     /// # Safety"}, {"sha": "d0f8899a94eb8507ff233f5d8321bf576fc8827e", "filename": "library/std/src/sys_common/thread_parking/wait_flag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fwait_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fwait_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fwait_flag.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -41,7 +41,7 @@ pub struct Parker {\n impl Parker {\n     /// Construct a parker for the current thread. The UNIX parker\n     /// implementation requires this to happen in-place.\n-    pub unsafe fn new(parker: *mut Parker) {\n+    pub unsafe fn new_in_place(parker: *mut Parker) {\n         parker.write(Parker { state: AtomicI8::new(EMPTY), wait_flag: WaitFlag::new() })\n     }\n "}, {"sha": "7acda8e98f18fcf75bf3b8f97334832b949bb0f6", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9abda03da69ee64625f2242cdaefa348bd0b48cd/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=9abda03da69ee64625f2242cdaefa348bd0b48cd", "patch": "@@ -1216,7 +1216,7 @@ impl Thread {\n             let ptr = Arc::get_mut_unchecked(&mut arc).as_mut_ptr();\n             addr_of_mut!((*ptr).name).write(name);\n             addr_of_mut!((*ptr).id).write(ThreadId::new());\n-            Parker::new(addr_of_mut!((*ptr).parker));\n+            Parker::new_in_place(addr_of_mut!((*ptr).parker));\n             Pin::new_unchecked(arc.assume_init())\n         };\n "}]}