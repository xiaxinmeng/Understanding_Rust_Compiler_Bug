{"sha": "a1daa8d984eb715c87ca010c8fd0ac96a698d214", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExZGFhOGQ5ODRlYjcxNWM4N2NhMDEwYzhmZDBhYzk2YTY5OGQyMTQ=", "commit": {"author": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2021-06-28T23:01:40Z"}, "committer": {"name": "Stefan Schindler", "email": "dns2utf8@estada.ch", "date": "2021-08-09T22:47:04Z"}, "message": "Capture outputs and show output when debug flag is passed", "tree": {"sha": "ee5ef988fd9ee1a25ec7bcca2c3fefa8284e39d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5ef988fd9ee1a25ec7bcca2c3fefa8284e39d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1daa8d984eb715c87ca010c8fd0ac96a698d214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1daa8d984eb715c87ca010c8fd0ac96a698d214", "html_url": "https://github.com/rust-lang/rust/commit/a1daa8d984eb715c87ca010c8fd0ac96a698d214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1daa8d984eb715c87ca010c8fd0ac96a698d214/comments", "author": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dns2utf8", "id": 739070, "node_id": "MDQ6VXNlcjczOTA3MA==", "avatar_url": "https://avatars.githubusercontent.com/u/739070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dns2utf8", "html_url": "https://github.com/dns2utf8", "followers_url": "https://api.github.com/users/dns2utf8/followers", "following_url": "https://api.github.com/users/dns2utf8/following{/other_user}", "gists_url": "https://api.github.com/users/dns2utf8/gists{/gist_id}", "starred_url": "https://api.github.com/users/dns2utf8/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dns2utf8/subscriptions", "organizations_url": "https://api.github.com/users/dns2utf8/orgs", "repos_url": "https://api.github.com/users/dns2utf8/repos", "events_url": "https://api.github.com/users/dns2utf8/events{/privacy}", "received_events_url": "https://api.github.com/users/dns2utf8/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4eefc3be19aec951b7c90b38aa71ee9f3e96789", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4eefc3be19aec951b7c90b38aa71ee9f3e96789", "html_url": "https://github.com/rust-lang/rust/commit/c4eefc3be19aec951b7c90b38aa71ee9f3e96789"}], "stats": {"total": 100, "additions": 72, "deletions": 28}, "files": [{"sha": "ca11c286ad37342692477f682189e943f73b83c3", "filename": "src/tools/rustdoc-gui/tester.js", "status": "modified", "additions": 72, "deletions": 28, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/a1daa8d984eb715c87ca010c8fd0ac96a698d214/src%2Ftools%2Frustdoc-gui%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/a1daa8d984eb715c87ca010c8fd0ac96a698d214/src%2Ftools%2Frustdoc-gui%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-gui%2Ftester.js?ref=a1daa8d984eb715c87ca010c8fd0ac96a698d214", "patch": "@@ -73,9 +73,9 @@ function parseOptions(args) {\n function print_test_successful() {\n     process.stdout.write(\".\");\n }\n+\n function print_test_erroneous() {\n-    // Bold Red \"F\" Reset\n-    process.stdout.write(\"\\033[1m\\x1b[31mF\\x1b[0m\");\n+    process.stdout.write(\"F\");\n }\n \n async function main(argv) {\n@@ -84,6 +84,7 @@ async function main(argv) {\n         process.exit(1);\n     }\n \n+    let debug = false;\n     const options = new Options();\n     try {\n         // This is more convenient that setting fields one by one.\n@@ -92,6 +93,7 @@ async function main(argv) {\n             \"--variable\", \"DOC_PATH\", opts[\"doc_folder\"],\n         ];\n         if (opts[\"debug\"]) {\n+            debug = true;\n             args.push(\"--debug\");\n         }\n         if (opts[\"show_text\"]) {\n@@ -108,12 +110,12 @@ async function main(argv) {\n \n     let failed = false;\n     let files;\n-    let tests = [];\n     if (opts[\"files\"].length === 0) {\n-        files = fs.readdirSync(opts[\"tests_folder\"]).filter(file => path.extname(file) == \".goml\");\n+        files = fs.readdirSync(opts[\"tests_folder\"]);\n     } else {\n-        files = opts[\"files\"].filter(file => path.extname(file) == \".goml\");\n+        files = opts[\"files\"];\n     }\n+    files = files.filter(file => path.extname(file) == \".goml\");\n     if (files.length === 0) {\n         console.log(\"rustdoc-gui: No test selected\");\n         process.exit(2);\n@@ -122,34 +124,76 @@ async function main(argv) {\n \n     console.log(`running ${files.length} rustdoc-gui tests`);\n     process.setMaxListeners(files.length + 1);\n-    for (var i = 0; i < files.length; ++i) {\n+    let tests = [];\n+    let results = new Array(files.length);\n+    // poormans enum\n+    const RUN_SUCCESS = 42, RUN_FAILED = 23, RUN_ERRORED = 13;\n+    for (let i = 0; i < files.length; ++i) {\n         const testPath = path.join(opts[\"tests_folder\"], files[i]);\n-        tests.push(runTest(testPath, options));\n-    }\n-\n-    let error_outputs = \"\";\n-    let failed_outputs = \"\";\n-    for (var i = 0; i < tests.length; ++i) {\n-        await tests[i].then(out => {\n-            const [output, nb_failures] = out;\n-            if (nb_failures > 0) {\n-                failed_outputs += output + \"\\n\";\n-                print_test_erroneous()\n+        tests.push(\n+            runTest(testPath, options)\n+            .then(out => {\n+                //console.log(i);\n+                const [output, nb_failures] = out;\n+                results[i] = {\n+                    status: nb_failures === 0 ? RUN_SUCCESS : RUN_FAILED,\n+                    output: output,\n+                };\n+                if (nb_failures > 0) {\n+                    print_test_erroneous()\n+                    failed = true;\n+                } else {\n+                    print_test_successful()\n+                }\n+            })\n+            .catch(err => {\n+                results[i] = {\n+                    status: RUN_ERRORED,\n+                    output: err,\n+                };\n+                print_test_erroneous();\n                 failed = true;\n-            } else {\n-                print_test_successful()\n-            }\n-        }).catch(err => {\n-            error_outputs += err + \"\\n\";\n-            print_test_erroneous();\n-            failed = true;\n-        });\n+            })\n+        );\n     }\n-    console.log(\"\")\n+    await Promise.all(tests);\n+    // final \\n after the tests\n+    console.log(\"\\n\");\n+\n+    results.forEach(r => {\n+        switch (r.status) {\n+            case RUN_SUCCESS:\n+                if (debug === false) {\n+                    break;\n+                }\n+            case RUN_FAILED:\n+                console.log(r.output);\n+                break;\n+            case RUN_ERRORED:\n+                // skip\n+                break;\n+            default:\n+                console.error(`unexpected status = ${r.status}`);\n+                process.exit(4);\n+        }\n+    });\n+    // print run errors on the bottom so developers see them better\n+    results.forEach(r => {\n+        switch (r.status) {\n+            case RUN_SUCCESS:\n+            case RUN_FAILED:\n+                // skip\n+                break;\n+            case RUN_ERRORED:\n+                console.error(r.output);\n+                break;\n+            default:\n+                console.error(`unexpected status = ${r.status}`);\n+                process.exit(4);\n+        }\n+    });\n \n     if (failed) {\n-        console.log(failed_outputs);\n-        console.error(error_outputs);\n         process.exit(1);\n     }\n }"}]}