{"sha": "55c5014b760a5d4bf3c6dc6a19818278ec83816e", "node_id": "C_kwDOAAsO6NoAKDU1YzUwMTRiNzYwYTVkNGJmM2M2ZGM2YTE5ODE4Mjc4ZWM4MzgxNmU", "commit": {"author": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T14:28:33Z"}, "committer": {"name": "btwotwo", "email": "10519967+btwotwo@users.noreply.github.com", "date": "2022-10-06T14:32:21Z"}, "message": "Replace if with option, add detail for each env variable completion", "tree": {"sha": "f71c368215cd333d696951c5f38c8aeac7931ebd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f71c368215cd333d696951c5f38c8aeac7931ebd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c5014b760a5d4bf3c6dc6a19818278ec83816e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE7WZLfNy5oeDQue2p1FagNJ1zoKMFAmM+5vUACgkQ1FagNJ1z\noKPetw/+L3Wxfz5s3PTJ3EpZeMeNhVQoF3jtpdo34e49Y23TXhmXds7i0gV2ne4K\n3aNS3+OJFa4l2vWVVqZxlUtv3eZuqH8O374iK3sbPDgtxOQiC2EXqQ31MRibixMu\nJEmet2ktAvg2AkhRFhySnkyasIykqUV/8/WMxV6A5zylhaXh6jrGftfvr/D9hYlF\nbmd9KLOzKuqyj5eI4I+/Y+7LqUsMCRGAUxjCZ9IRdaPMK/SykDv+uSQec3UUiOGp\nh55FaswL4cHiQHvP6NipzuVNClRPcKu5/KIZSehENfyQ6zf88MywLZL69vn4g3VX\ng9H7t1wXvJUdQd2jMgFN5vBBLIemjgaKTYafbSQq37IgwbrIKMajt8eYHBJUJajg\nV5AvPBp9BJS/n8OFEmJW7XWfQ9vbF5vRDZRwIO91SnCDtkPM051ttslNGLxpAGUd\nPq0BHE6zZmZaswG7GZfE92/6LexBtku/WQ+QRrrUNNXRMIvCcqQ27ao+neTo+GCH\nY8d3DspqbkCW85jTLpF1alkANzOvHT1/MI3B53PLDev23i10bGJd/ccHDDtUwAIn\nVYUAAm382ytsHf8NPNqPczPkZrWWsnT2rY/eaNH5bjakZ6Qko97ecacTxTr2Pp0f\nGB3ff368ZuIqqU6e0APTxnZnjbgq0eH9T7lyJHZBHCsUpFjbAfM=\n=tSEA\n-----END PGP SIGNATURE-----", "payload": "tree f71c368215cd333d696951c5f38c8aeac7931ebd\nparent bc7080884c92148fdb47701067d1f1dbdef4ed1d\nauthor btwotwo <10519967+btwotwo@users.noreply.github.com> 1665066513 +0200\ncommitter btwotwo <10519967+btwotwo@users.noreply.github.com> 1665066741 +0200\n\nReplace if with option, add detail for each env variable completion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c5014b760a5d4bf3c6dc6a19818278ec83816e", "html_url": "https://github.com/rust-lang/rust/commit/55c5014b760a5d4bf3c6dc6a19818278ec83816e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c5014b760a5d4bf3c6dc6a19818278ec83816e/comments", "author": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "btwotwo", "id": 10519967, "node_id": "MDQ6VXNlcjEwNTE5OTY3", "avatar_url": "https://avatars.githubusercontent.com/u/10519967?v=4", "gravatar_id": "", "url": "https://api.github.com/users/btwotwo", "html_url": "https://github.com/btwotwo", "followers_url": "https://api.github.com/users/btwotwo/followers", "following_url": "https://api.github.com/users/btwotwo/following{/other_user}", "gists_url": "https://api.github.com/users/btwotwo/gists{/gist_id}", "starred_url": "https://api.github.com/users/btwotwo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/btwotwo/subscriptions", "organizations_url": "https://api.github.com/users/btwotwo/orgs", "repos_url": "https://api.github.com/users/btwotwo/repos", "events_url": "https://api.github.com/users/btwotwo/events{/privacy}", "received_events_url": "https://api.github.com/users/btwotwo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc7080884c92148fdb47701067d1f1dbdef4ed1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7080884c92148fdb47701067d1f1dbdef4ed1d", "html_url": "https://github.com/rust-lang/rust/commit/bc7080884c92148fdb47701067d1f1dbdef4ed1d"}], "stats": {"total": 51, "additions": 22, "deletions": 29}, "files": [{"sha": "e2e0bc142c0a86642e2b11434fa996e617e6dd1b", "filename": "crates/ide-completion/src/completions/env_vars.rs", "status": "modified", "additions": 22, "deletions": 29, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/55c5014b760a5d4bf3c6dc6a19818278ec83816e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c5014b760a5d4bf3c6dc6a19818278ec83816e/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fenv_vars.rs?ref=55c5014b760a5d4bf3c6dc6a19818278ec83816e", "patch": "@@ -1,8 +1,8 @@\n //! Completes environment variables defined by Cargo (https://doc.rust-lang.org/cargo/reference/environment-variables.html)\n+use ide_db::syntax_helpers::node_ext::get_outer_macro_name;\n+use syntax::ast::{self, IsString};\n \n-use syntax::{ast, AstToken, AstNode, TextRange, TextSize};\n-\n-use crate::{context::CompletionContext, CompletionItem, CompletionItemKind};\n+use crate::{CompletionItem, CompletionItemKind};\n \n use super::Completions;\n const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n@@ -29,34 +29,27 @@ const CARGO_DEFINED_VARS: &[(&str, &str)] = &[\n \n pub(crate) fn complete_cargo_env_vars(\n     acc: &mut Completions,\n-    ctx: &CompletionContext<'_>,\n-    original: &ast::String\n-) {\n-    if !is_env_macro(original) {\n-        return;\n-    }\n-\n-    let start = ctx.original_token.text_range().start() + TextSize::from(1);\n-    let cursor = ctx.position.offset;\n-\n-    CompletionItem::new(CompletionItemKind::Binding, TextRange::new(start, cursor), \"CARGO\").add_to(acc);\n+    expanded: &ast::String,\n+) -> Option<()> {\n+    guard_env_macro(expanded)?;\n+    let range = expanded.text_range_between_quotes()?;\n+\n+    CARGO_DEFINED_VARS.iter().for_each(|(var, detail)| {\n+        let mut item = CompletionItem::new(CompletionItemKind::Keyword, range, *var);\n+        item.detail(*detail);\n+        item.add_to(acc);\n+    });\n+\n+    Some(())\n }\n \n-fn is_env_macro(string: &ast::String) -> bool {\n-    //todo: replace copypaste from format_string with separate function\n-    (|| {\n-        let macro_call = string.syntax().parent_ancestors().find_map(ast::MacroCall::cast)?;\n-        let name = macro_call.path()?.segment()?.name_ref()?;\n-\n-        if !matches!(name.text().as_str(), \n-        \"env\" | \"option_env\") {\n-            return None;\n-        }\n-\n+fn guard_env_macro(string: &ast::String) -> Option<()> {\n+    let name = get_outer_macro_name(string)?;\n+    if !matches!(name.text().as_str(), \"env\" | \"option_env\") {\n+        return None;\n+    }\n \n-        Some(())\n-    })()\n-    .is_some()\n+    Some(())\n }\n \n #[cfg(test)]\n@@ -112,4 +105,4 @@ mod tests {\n         let completions = completion_list(fixture);\n         assert!(completions.is_empty(), \"Completions weren't empty: {}\", completions);\n     }\n-}\n\\ No newline at end of file\n+}"}]}