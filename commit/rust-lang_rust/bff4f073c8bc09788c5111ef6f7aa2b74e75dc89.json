{"sha": "bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZjRmMDczYzhiYzA5Nzg4YzUxMTFlZjZmN2FhMmI3NGU3NWRjODk=", "commit": {"author": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-08T17:39:57Z"}, "committer": {"name": "Jacob Hoffman-Andrews", "email": "github@hoffman-andrews.com", "date": "2021-06-17T05:08:44Z"}, "message": "Use render_impl_summary when rendering traits.", "tree": {"sha": "320d6fc44ba53a7e2490801f11f68407d2fb6fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320d6fc44ba53a7e2490801f11f68407d2fb6fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "html_url": "https://github.com/rust-lang/rust/commit/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89/comments", "author": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsha", "id": 220205, "node_id": "MDQ6VXNlcjIyMDIwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/220205?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsha", "html_url": "https://github.com/jsha", "followers_url": "https://api.github.com/users/jsha/followers", "following_url": "https://api.github.com/users/jsha/following{/other_user}", "gists_url": "https://api.github.com/users/jsha/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsha/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsha/subscriptions", "organizations_url": "https://api.github.com/users/jsha/orgs", "repos_url": "https://api.github.com/users/jsha/repos", "events_url": "https://api.github.com/users/jsha/events{/privacy}", "received_events_url": "https://api.github.com/users/jsha/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce6472987d2cb466345a857cb2efdd06307c5ebf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce6472987d2cb466345a857cb2efdd06307c5ebf", "html_url": "https://github.com/rust-lang/rust/commit/ce6472987d2cb466345a857cb2efdd06307c5ebf"}], "stats": {"total": 72, "additions": 29, "deletions": 43}, "files": [{"sha": "4ce14e6eb3ce8ccfddb582e28ccbb7fe105eaa27", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "patch": "@@ -1542,15 +1542,10 @@ fn render_impl(\n         }\n     }\n     if render_mode == RenderMode::Normal {\n-        let on_trait_page = matches!(*parent.kind, clean::ItemKind::TraitItem(_));\n-        let has_impl_items = !(impl_items.is_empty() && default_impl_items.is_empty());\n-        let toggled = !on_trait_page && has_impl_items;\n-        let is_implementing_trait = i.inner_impl().trait_.is_some();\n+        let toggled = !(impl_items.is_empty() && default_impl_items.is_empty());\n         if toggled {\n             close_tags.insert_str(0, \"</details>\");\n             write!(w, \"<details class=\\\"rustdoc-toggle implementors-toggle\\\" open>\");\n-        }\n-        if toggled {\n             write!(w, \"<summary>\")\n         }\n         render_impl_summary(\n@@ -1573,23 +1568,21 @@ fn render_impl(\n             }\n         }\n \n-        if !on_trait_page {\n-            if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n-                let mut ids = cx.id_map.borrow_mut();\n-                write!(\n-                    w,\n-                    \"<div class=\\\"docblock\\\">{}</div>\",\n-                    Markdown(\n-                        &*dox,\n-                        &i.impl_item.links(cx),\n-                        &mut ids,\n-                        cx.shared.codes,\n-                        cx.shared.edition(),\n-                        &cx.shared.playground\n-                    )\n-                    .into_string()\n-                );\n-            }\n+        if let Some(ref dox) = cx.shared.maybe_collapsed_doc_value(&i.impl_item) {\n+            let mut ids = cx.id_map.borrow_mut();\n+            write!(\n+                w,\n+                \"<div class=\\\"docblock\\\">{}</div>\",\n+                Markdown(\n+                    &*dox,\n+                    &i.impl_item.links(cx),\n+                    &mut ids,\n+                    cx.shared.codes,\n+                    cx.shared.edition(),\n+                    &cx.shared.playground\n+                )\n+                .into_string()\n+            );\n         }\n     }\n     if !default_impl_items.is_empty() || !impl_items.is_empty() {\n@@ -1601,7 +1594,7 @@ fn render_impl(\n     w.write_str(&close_tags);\n }\n \n-fn render_impl_summary(\n+pub(crate) fn render_impl_summary(\n     w: &mut Buffer,\n     cx: &Context<'_>,\n     i: &Impl,"}, {"sha": "5be16d1ce5006ffb2063f726baddd5813cd547b6", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bff4f073c8bc09788c5111ef6f7aa2b74e75dc89/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=bff4f073c8bc09788c5111ef6f7aa2b74e75dc89", "patch": "@@ -15,11 +15,11 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use super::{\n     collect_paths_for_type, document, ensure_trailing_slash, item_ty_to_strs, notable_traits_decl,\n     render_assoc_item, render_assoc_items, render_attributes_in_code, render_attributes_in_pre,\n-    render_impl, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n+    render_impl_summary, render_stability_since_raw, write_srclink, AssocItemLink, Context,\n };\n use crate::clean::{self, GetDefId};\n use crate::formats::item_type::ItemType;\n-use crate::formats::{AssocItemRender, Impl, RenderMode};\n+use crate::formats::{AssocItemRender, Impl};\n use crate::html::escape::Escape;\n use crate::html::format::{print_abi_with_space, print_where_clause, Buffer, PrintWithSpace};\n use crate::html::highlight;\n@@ -691,22 +691,17 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n             write_small_section_header(w, \"foreign-impls\", \"Implementations on Foreign Types\", \"\");\n \n             for implementor in foreign {\n-                let provided_methods = implementor.inner_impl().provided_trait_methods(cx.tcx());\n-                let assoc_link =\n-                    AssocItemLink::GotoSource(implementor.impl_item.def_id, &provided_methods);\n-                render_impl(\n+                let outer_version = implementor.impl_item.stable_since(cx.tcx());\n+                let outer_const_version = implementor.impl_item.const_stable_since(cx.tcx());\n+                render_impl_summary(\n                     w,\n                     cx,\n                     &implementor,\n-                    it,\n-                    assoc_link,\n-                    RenderMode::Normal,\n-                    implementor.impl_item.stable_since(cx.tcx()).as_deref(),\n-                    implementor.impl_item.const_stable_since(cx.tcx()).as_deref(),\n+                    outer_version.as_deref(),\n+                    outer_const_version.as_deref(),\n                     false,\n                     None,\n                     true,\n-                    false,\n                     &[],\n                 );\n             }\n@@ -1320,19 +1315,17 @@ fn render_implementor(\n         } => implementor_dups[&path.last()].1,\n         _ => false,\n     };\n-    render_impl(\n+    let outer_version = trait_.stable_since(cx.tcx());\n+    let outer_const_version = trait_.const_stable_since(cx.tcx());\n+    render_impl_summary(\n         w,\n         cx,\n         implementor,\n-        trait_,\n-        AssocItemLink::Anchor(None),\n-        RenderMode::Normal,\n-        trait_.stable_since(cx.tcx()).as_deref(),\n-        trait_.const_stable_since(cx.tcx()).as_deref(),\n+        outer_version.as_deref(),\n+        outer_const_version.as_deref(),\n         false,\n         Some(use_absolute),\n         false,\n-        false,\n         aliases,\n     );\n }"}]}