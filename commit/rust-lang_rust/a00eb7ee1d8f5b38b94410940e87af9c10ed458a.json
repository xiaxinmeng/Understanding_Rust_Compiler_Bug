{"sha": "a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMGViN2VlMWQ4ZjViMzhiOTQ0MTA5NDBlODdhZjljMTBlZDQ1OGE=", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T00:43:02Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2021-02-20T00:43:02Z"}, "message": "Add @is command to jsondocck", "tree": {"sha": "6249a278e6b028ec0a3f6e821655bbb6693eb59a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6249a278e6b028ec0a3f6e821655bbb6693eb59a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "html_url": "https://github.com/rust-lang/rust/commit/a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00eb7ee1d8f5b38b94410940e87af9c10ed458a/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b471a3f5fe57e5c6e08acf665f2094422415a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b471a3f5fe57e5c6e08acf665f2094422415a3d", "html_url": "https://github.com/rust-lang/rust/commit/9b471a3f5fe57e5c6e08acf665f2094422415a3d"}], "stats": {"total": 38, "additions": 27, "deletions": 11}, "files": [{"sha": "f32692b70cd2bfcece497bd6fb7594abd0779357", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a00eb7ee1d8f5b38b94410940e87af9c10ed458a/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00eb7ee1d8f5b38b94410940e87af9c10ed458a/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "patch": "@@ -1,24 +1,24 @@\n // edition:2018\n \n-// @has nested.json \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n-// @has - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n+// @is nested.json \"$.index[*][?(@.name=='nested')].kind\" \\\"module\\\"\n+// @is - \"$.index[*][?(@.name=='nested')].inner.is_crate\" true\n // @count - \"$.index[*][?(@.name=='nested')].inner.items[*]\" 1\n \n-// @has nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n-// @has - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n+// @is nested.json \"$.index[*][?(@.name=='l1')].kind\" \\\"module\\\"\n+// @is - \"$.index[*][?(@.name=='l1')].inner.is_crate\" false\n // @count - \"$.index[*][?(@.name=='l1')].inner.items[*]\" 2\n pub mod l1 {\n \n-    // @has nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n-    // @has - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n+    // @is nested.json \"$.index[*][?(@.name=='l3')].kind\" \\\"module\\\"\n+    // @is - \"$.index[*][?(@.name=='l3')].inner.is_crate\" false\n     // @count - \"$.index[*][?(@.name=='l3')].inner.items[*]\" 1\n     pub mod l3 {\n \n-        // @has nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n-        // @has - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n+        // @is nested.json \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n+        // @is - \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n         pub struct L4;\n     }\n-    // @has nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\"\n-    // @has - \"$.index[*][?(@.inner.span=='l3::L4')].inner.glob\" false\n+    // @is nested.json \"$.index[*][?(@.inner.span=='l3::L4')].kind\" \\\"import\\\"\n+    // @is - \"$.index[*][?(@.inner.span=='l3::L4')].inner.glob\" false\n     pub use l3::L4;\n }"}, {"sha": "2afb66b969685bc3da0774e6b5eeb77bb3058d49", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a00eb7ee1d8f5b38b94410940e87af9c10ed458a/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00eb7ee1d8f5b38b94410940e87af9c10ed458a/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=a00eb7ee1d8f5b38b94410940e87af9c10ed458a", "patch": "@@ -48,13 +48,14 @@ pub struct Command {\n pub enum CommandKind {\n     Has,\n     Count,\n+    Is,\n }\n \n impl CommandKind {\n     fn validate(&self, args: &[String], command_num: usize, lineno: usize) -> bool {\n         let count = match self {\n             CommandKind::Has => (1..=3).contains(&args.len()),\n-            CommandKind::Count => 3 == args.len(),\n+            CommandKind::Count | CommandKind::Is => 3 == args.len(),\n         };\n \n         if !count {\n@@ -83,6 +84,7 @@ impl fmt::Display for CommandKind {\n         let text = match self {\n             CommandKind::Has => \"has\",\n             CommandKind::Count => \"count\",\n+            CommandKind::Is => \"is\",\n         };\n         write!(f, \"{}\", text)\n     }\n@@ -127,6 +129,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n         let cmd = match cmd {\n             \"has\" => CommandKind::Has,\n             \"count\" => CommandKind::Count,\n+            \"is\" => CommandKind::Is,\n             _ => {\n                 print_err(&format!(\"Unrecognized command name `@{}`\", cmd), lineno);\n                 errors = true;\n@@ -180,6 +183,7 @@ fn get_commands(template: &str) -> Result<Vec<Command>, ()> {\n /// Performs the actual work of ensuring a command passes. Generally assumes the command\n /// is syntactically valid.\n fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n+    // FIXME: Be more granular about why, (eg syntax error, count not equal)\n     let result = match command.kind {\n         CommandKind::Has => {\n             match command.args.len() {\n@@ -220,6 +224,18 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                 Err(_) => false,\n             }\n         }\n+        CommandKind::Is => {\n+            // @has <path> <jsonpath> <value> = check *exactly one* item matched by path, and it equals value\n+            assert_eq!(command.args.len(), 3);\n+            let val = cache.get_value(&command.args[0])?;\n+            match select(&val, &command.args[1]) {\n+                Ok(results) => {\n+                    let pat: Value = serde_json::from_str(&command.args[2]).unwrap();\n+                    results.len() == 1 && *results[0] == pat\n+                }\n+                Err(_) => false,\n+            }\n+        }\n     };\n \n     if result == command.negated {"}]}