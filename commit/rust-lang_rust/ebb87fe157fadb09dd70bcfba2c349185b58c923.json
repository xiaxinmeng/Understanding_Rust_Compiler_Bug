{"sha": "ebb87fe157fadb09dd70bcfba2c349185b58c923", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYjg3ZmUxNTdmYWRiMDlkZDcwYmNmYmEyYzM0OTE4NWI1OGM5MjM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-27T13:10:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-08-27T13:10:42Z"}, "message": "Don't use fake text range in original node search as is in completions", "tree": {"sha": "66691be6c5e9dfbaa7166a5f7ac63f66580f68ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66691be6c5e9dfbaa7166a5f7ac63f66580f68ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebb87fe157fadb09dd70bcfba2c349185b58c923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebb87fe157fadb09dd70bcfba2c349185b58c923", "html_url": "https://github.com/rust-lang/rust/commit/ebb87fe157fadb09dd70bcfba2c349185b58c923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebb87fe157fadb09dd70bcfba2c349185b58c923/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5012fa2dd4b18daf3d7ffcdb64cda9d50185fe7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5012fa2dd4b18daf3d7ffcdb64cda9d50185fe7c", "html_url": "https://github.com/rust-lang/rust/commit/5012fa2dd4b18daf3d7ffcdb64cda9d50185fe7c"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "6ceef0225a8c97596004801a7bc6512bed4eb3b3", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ebb87fe157fadb09dd70bcfba2c349185b58c923/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb87fe157fadb09dd70bcfba2c349185b58c923/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=ebb87fe157fadb09dd70bcfba2c349185b58c923", "patch": "@@ -285,6 +285,7 @@ fn maximize_name_ref(name_ref: &ast::NameRef) -> SyntaxNode {\n }\n \n fn find_node_with_range<N: AstNode>(syntax: &SyntaxNode, range: TextRange) -> Option<N> {\n+    let range = syntax.text_range().intersect(range)?;\n     syntax.covering_element(range).ancestors().find_map(N::cast)\n }\n "}, {"sha": "5ef6829a05cc1dab8a4f026857a2a4883227013d", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ebb87fe157fadb09dd70bcfba2c349185b58c923/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebb87fe157fadb09dd70bcfba2c349185b58c923/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=ebb87fe157fadb09dd70bcfba2c349185b58c923", "patch": "@@ -75,13 +75,13 @@ pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     },\n };\n \n-pub(crate) fn completion_list(code: &str) -> String {\n-    completion_list_with_config(TEST_CONFIG, code)\n+pub(crate) fn completion_list(ra_fixture: &str) -> String {\n+    completion_list_with_config(TEST_CONFIG, ra_fixture)\n }\n \n-fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n+fn completion_list_with_config(config: CompletionConfig, ra_fixture: &str) -> String {\n     // filter out all but one builtintype completion for smaller test outputs\n-    let items = get_all_items(config, code);\n+    let items = get_all_items(config, ra_fixture);\n     let mut bt_seen = false;\n     let items = items\n         .into_iter()\n@@ -227,3 +227,26 @@ fn test_no_completions_required() {\n     cov_mark::check!(no_completion_required);\n     check_no_completion(r#\"fn foo() { for i i$0 }\"#);\n }\n+\n+#[test]\n+fn regression_10042() {\n+    completion_list(\n+        r#\"\n+macro_rules! preset {\n+    ($($x:ident)&&*) => {\n+        {\n+            let mut v = Vec::new();\n+            $(\n+                v.push($x.into());\n+            )*\n+            v\n+        }\n+    };\n+}\n+\n+fn foo() {\n+    preset!(foo$0);\n+}\n+\"#,\n+    );\n+}"}]}