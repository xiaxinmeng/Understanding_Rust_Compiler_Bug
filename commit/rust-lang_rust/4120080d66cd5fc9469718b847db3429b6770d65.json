{"sha": "4120080d66cd5fc9469718b847db3429b6770d65", "node_id": "C_kwDOAAsO6NoAKDQxMjAwODBkNjZjZDVmYzk0Njk3MThiODQ3ZGIzNDI5YjY3NzBkNjU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T18:17:12Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-03T18:17:12Z"}, "message": "Remove useless LocalDefId in ImplTraitContext::Universal.", "tree": {"sha": "9d21e3185a6ae788883186a7339c3439ee48d268", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d21e3185a6ae788883186a7339c3439ee48d268"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4120080d66cd5fc9469718b847db3429b6770d65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4120080d66cd5fc9469718b847db3429b6770d65", "html_url": "https://github.com/rust-lang/rust/commit/4120080d66cd5fc9469718b847db3429b6770d65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4120080d66cd5fc9469718b847db3429b6770d65/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40d5e83dc133d093c22c7ff016b10daa4f40dcf", "html_url": "https://github.com/rust-lang/rust/commit/e40d5e83dc133d093c22c7ff016b10daa4f40dcf"}], "stats": {"total": 28, "additions": 11, "deletions": 17}, "files": [{"sha": "f46d5f77b5a1618688ef4d5d1082ed6050cfe00e", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4120080d66cd5fc9469718b847db3429b6770d65/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4120080d66cd5fc9469718b847db3429b6770d65/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=4120080d66cd5fc9469718b847db3429b6770d65", "patch": "@@ -266,7 +266,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                     let body_id =\n                         this.lower_maybe_async_body(span, &decl, asyncness, body.as_deref());\n \n-                    let itctx = ImplTraitContext::Universal(this.current_hir_id_owner);\n+                    let itctx = ImplTraitContext::Universal;\n                     let (generics, decl) = this.lower_generics(generics, id, itctx, |this| {\n                         let ret_id = asyncness.opt_return_id();\n                         this.lower_fn_decl(&decl, Some(id), FnDeclKind::Fn, ret_id)\n@@ -385,7 +385,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n-                let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+                let itctx = ImplTraitContext::Universal;\n                 let (generics, (trait_ref, lowered_ty)) =\n                     self.lower_generics(ast_generics, id, itctx, |this| {\n                         let trait_ref = trait_ref.as_ref().map(|trait_ref| {\n@@ -655,7 +655,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             kind: match i.kind {\n                 ForeignItemKind::Fn(box Fn { ref sig, ref generics, .. }) => {\n                     let fdec = &sig.decl;\n-                    let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+                    let itctx = ImplTraitContext::Universal;\n                     let (generics, (fn_dec, fn_args)) =\n                         self.lower_generics(generics, i.id, itctx, |this| {\n                             (\n@@ -1237,7 +1237,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n         is_async: Option<NodeId>,\n     ) -> (&'hir hir::Generics<'hir>, hir::FnSig<'hir>) {\n         let header = self.lower_fn_header(sig.header);\n-        let itctx = ImplTraitContext::Universal(self.current_hir_id_owner);\n+        let itctx = ImplTraitContext::Universal;\n         let (generics, decl) = self.lower_generics(generics, id, itctx, |this| {\n             this.lower_fn_decl(&sig.decl, Some(id), kind, is_async)\n         });"}, {"sha": "ecfada996a65b7790b51b1f39f5393e2f16940ba", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4120080d66cd5fc9469718b847db3429b6770d65/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4120080d66cd5fc9469718b847db3429b6770d65/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4120080d66cd5fc9469718b847db3429b6770d65", "patch": "@@ -253,7 +253,7 @@ enum ImplTraitContext {\n     /// equivalent to a fresh universal parameter like `fn foo<T: Debug>(x: T)`.\n     ///\n     /// Newly generated parameters should be inserted into the given `Vec`.\n-    Universal(LocalDefId),\n+    Universal,\n \n     /// Treat `impl Trait` as shorthand for a new opaque type.\n     /// Example: `fn foo() -> impl Debug`, where `impl Debug` is conceptually\n@@ -895,7 +895,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 hir::TypeBindingKind::Equality { term }\n             }\n             AssocConstraintKind::Bound { ref bounds } => {\n-                let mut parent_def_id = self.current_hir_id_owner;\n                 // Piggy-back on the `impl Trait` context to figure out the correct behavior.\n                 let (desugar_to_impl_trait, itctx) = match itctx {\n                     // We are in the return position:\n@@ -915,10 +914,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // so desugar to\n                     //\n                     //     fn foo(x: dyn Iterator<Item = impl Debug>)\n-                    ImplTraitContext::Universal(parent) if self.is_in_dyn_type => {\n-                        parent_def_id = parent;\n-                        (true, itctx)\n-                    }\n+                    ImplTraitContext::Universal if self.is_in_dyn_type => (true, itctx),\n \n                     // In `type Foo = dyn Iterator<Item: Debug>` we desugar to\n                     // `type Foo = dyn Iterator<Item = impl Debug>` but we have to override the\n@@ -944,6 +940,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     // Desugar `AssocTy: Bounds` into `AssocTy = impl Bounds`. We do this by\n                     // constructing the HIR for `impl bounds...` and then lowering that.\n \n+                    let parent_def_id = self.current_hir_id_owner;\n                     let impl_trait_node_id = self.resolver.next_node_id();\n                     self.resolver.create_def(\n                         parent_def_id,\n@@ -1186,12 +1183,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             |this| this.lower_param_bounds(bounds, nested_itctx),\n                         )\n                     }\n-                    ImplTraitContext::Universal(parent_def_id) => {\n+                    ImplTraitContext::Universal => {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        let hir_bounds = self\n-                            .lower_param_bounds(bounds, ImplTraitContext::Universal(parent_def_id));\n+                        let hir_bounds =\n+                            self.lower_param_bounds(bounds, ImplTraitContext::Universal);\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         let param = hir::GenericParam {\n@@ -1401,10 +1398,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n         let inputs = self.arena.alloc_from_iter(inputs.iter().map(|param| {\n             if fn_node_id.is_some() {\n-                self.lower_ty_direct(\n-                    &param.ty,\n-                    ImplTraitContext::Universal(self.current_hir_id_owner),\n-                )\n+                self.lower_ty_direct(&param.ty, ImplTraitContext::Universal)\n             } else {\n                 self.lower_ty_direct(\n                     &param.ty,"}]}