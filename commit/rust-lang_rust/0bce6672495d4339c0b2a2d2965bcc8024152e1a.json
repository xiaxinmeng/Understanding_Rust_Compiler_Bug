{"sha": "0bce6672495d4339c0b2a2d2965bcc8024152e1a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2U2NjcyNDk1ZDQzMzljMGIyYTJkMjk2NWJjYzgwMjQxNTJlMWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-31T06:47:17Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-08-31T06:47:17Z"}, "message": "rollup merge of #16835 : michaelsproul/doc-slice-failure", "tree": {"sha": "cbbaa07cbb2190e8fca69352ed331da00c5f6ae4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbbaa07cbb2190e8fca69352ed331da00c5f6ae4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bce6672495d4339c0b2a2d2965bcc8024152e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bce6672495d4339c0b2a2d2965bcc8024152e1a", "html_url": "https://github.com/rust-lang/rust/commit/0bce6672495d4339c0b2a2d2965bcc8024152e1a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bce6672495d4339c0b2a2d2965bcc8024152e1a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d1c9c48c8241cb7befa3c5bd684ec9d7e8e2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d1c9c48c8241cb7befa3c5bd684ec9d7e8e2f1", "html_url": "https://github.com/rust-lang/rust/commit/89d1c9c48c8241cb7befa3c5bd684ec9d7e8e2f1"}, {"sha": "db7c7c23a49081001bd4ceb652fec86b73d7806b", "url": "https://api.github.com/repos/rust-lang/rust/commits/db7c7c23a49081001bd4ceb652fec86b73d7806b", "html_url": "https://github.com/rust-lang/rust/commit/db7c7c23a49081001bd4ceb652fec86b73d7806b"}], "stats": {"total": 61, "additions": 33, "deletions": 28}, "files": [{"sha": "5d73a191a81940d69b57a13d221c571afff9054b", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 33, "deletions": 28, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/0bce6672495d4339c0b2a2d2965bcc8024152e1a/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bce6672495d4339c0b2a2d2965bcc8024152e1a/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=0bce6672495d4339c0b2a2d2965bcc8024152e1a", "patch": "@@ -57,31 +57,31 @@ use raw::Slice as RawSlice;\n // Extension traits\n //\n \n-/// Extension methods for vectors\n+/// Extension methods for immutable slices.\n #[unstable = \"may merge with other traits; region parameter may disappear\"]\n pub trait ImmutableSlice<'a, T> {\n-    /**\n-     * Returns a slice of self spanning the interval [`start`, `end`).\n-     *\n-     * Fails when the slice (or part of it) is outside the bounds of self,\n-     * or when `start` > `end`.\n-     */\n+    /// Returns a subslice spanning the interval [`start`, `end`).\n+    ///\n+    /// Fails when the end of the new slice lies beyond the end of the\n+    /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n+    ///\n+    /// Slicing with `start` equal to `end` yields an empty slice.\n     #[unstable]\n     fn slice(&self, start: uint, end: uint) -> &'a [T];\n \n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n+    /// Returns a subslice from `start` to the end of the slice.\n+    ///\n+    /// Fails when `start` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing from `self.len()` yields an empty slice.\n     #[unstable]\n     fn slice_from(&self, start: uint) -> &'a [T];\n \n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n+    /// Returns a subslice from the start of the slice to `end`.\n+    ///\n+    /// Fails when `end` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing to `0` yields an empty slice.\n     #[unstable]\n     fn slice_to(&self, end: uint) -> &'a [T];\n \n@@ -486,21 +486,26 @@ pub trait MutableSlice<'a, T> {\n     /// Primarily intended for getting a &mut [T] from a [T, ..N].\n     fn as_mut_slice(self) -> &'a mut [T];\n \n-    /// Return a slice that points into another slice.\n+    /// Returns a mutable subslice spanning the interval [`start`, `end`).\n+    ///\n+    /// Fails when the end of the new slice lies beyond the end of the\n+    /// original slice (i.e. when `end > self.len()`) or when `start > end`.\n+    ///\n+    /// Slicing with `start` equal to `end` yields an empty slice.\n     fn mut_slice(self, start: uint, end: uint) -> &'a mut [T];\n \n-    /**\n-     * Returns a slice of self from `start` to the end of the vec.\n-     *\n-     * Fails when `start` points outside the bounds of self.\n-     */\n+    /// Returns a mutable subslice from `start` to the end of the slice.\n+    ///\n+    /// Fails when `start` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing from `self.len()` yields an empty slice.\n     fn mut_slice_from(self, start: uint) -> &'a mut [T];\n \n-    /**\n-     * Returns a slice of self from the start of the vec to `end`.\n-     *\n-     * Fails when `end` points outside the bounds of self.\n-     */\n+    /// Returns a mutable subslice from the start of the slice to `end`.\n+    ///\n+    /// Fails when `end` is strictly greater than the length of the original slice.\n+    ///\n+    /// Slicing to `0` yields an empty slice.\n     fn mut_slice_to(self, end: uint) -> &'a mut [T];\n \n     /// Returns an iterator that allows modifying each value"}]}