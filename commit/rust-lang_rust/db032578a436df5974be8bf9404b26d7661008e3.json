{"sha": "db032578a436df5974be8bf9404b26d7661008e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMDMyNTc4YTQzNmRmNTk3NGJlOGJmOTQwNGIyNmQ3NjYxMDA4ZTM=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-24T19:40:43Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-24T21:11:27Z"}, "message": "add new test case", "tree": {"sha": "b058d80817fdb17f5be0476efc4ae81cb67b6598", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b058d80817fdb17f5be0476efc4ae81cb67b6598"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db032578a436df5974be8bf9404b26d7661008e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db032578a436df5974be8bf9404b26d7661008e3", "html_url": "https://github.com/rust-lang/rust/commit/db032578a436df5974be8bf9404b26d7661008e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db032578a436df5974be8bf9404b26d7661008e3/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d22f7061507e78d5b83b03f6e3cf420b9969a92c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22f7061507e78d5b83b03f6e3cf420b9969a92c", "html_url": "https://github.com/rust-lang/rust/commit/d22f7061507e78d5b83b03f6e3cf420b9969a92c"}], "stats": {"total": 68, "additions": 68, "deletions": 0}, "files": [{"sha": "95fc3243fbed34629eb516bc9f6799b4c32cef1b", "filename": "src/test/compile-fail/unsized-enum2.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/db032578a436df5974be8bf9404b26d7661008e3/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db032578a436df5974be8bf9404b26d7661008e3/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funsized-enum2.rs?ref=db032578a436df5974be8bf9404b26d7661008e3", "patch": "@@ -0,0 +1,68 @@\n+// Copyright 206 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::Deref;\n+\n+// Due to aggressive error message deduplication, we require 20 *different*\n+// unsized types (even Path and [u8] are considered the \"same\").\n+\n+trait Foo {}\n+trait Bar {}\n+trait FooBar {}\n+trait BarFoo {}\n+\n+trait PathHelper1 {}\n+trait PathHelper2 {}\n+trait PathHelper3 {}\n+trait PathHelper4 {}\n+\n+struct Path1(PathHelper1);\n+struct Path2(PathHelper2);\n+struct Path3(PathHelper3);\n+struct Path4(PathHelper4);\n+\n+enum E<W: ?Sized, X: ?Sized, Y: ?Sized, Z: ?Sized> {\n+    // parameter\n+    VA(W), //~ ERROR `W: std::marker::Sized` is not satisfied\n+    VB{x: X}, //~ ERROR `X: std::marker::Sized` is not satisfied\n+    VC(isize, Y), //~ ERROR `Y: std::marker::Sized` is not satisfied\n+    VD{u: isize, x: Z}, //~ ERROR `Z: std::marker::Sized` is not satisfied\n+\n+    // slice / str\n+    VE([u8]), //~ ERROR `[u8]: std::marker::Sized` is not satisfied\n+    VF{x: str}, //~ ERROR `str: std::marker::Sized` is not satisfied\n+    VG(isize, [f32]), //~ ERROR `[f32]: std::marker::Sized` is not satisfied\n+    VH{u: isize, x: [u32]}, //~ ERROR `[u32]: std::marker::Sized` is not satisfied\n+\n+    // unsized struct\n+    VI(Path1), //~ ERROR `PathHelper1 + 'static: std::marker::Sized` is not satisfied\n+    VJ{x: Path2}, //~ ERROR `PathHelper2 + 'static: std::marker::Sized` is not satisfied\n+    VK(isize, Path3), //~ ERROR `PathHelper3 + 'static: std::marker::Sized` is not satisfied\n+    VL{u: isize, x: Path4}, //~ ERROR `PathHelper4 + 'static: std::marker::Sized` is not satisfied\n+\n+    // plain trait\n+    VM(Foo),  //~ ERROR `Foo + 'static: std::marker::Sized` is not satisfied\n+    VN{x: Bar}, //~ ERROR `Bar + 'static: std::marker::Sized` is not satisfied\n+    VO(isize, FooBar), //~ ERROR `FooBar + 'static: std::marker::Sized` is not satisfied\n+    VP{u: isize, x: BarFoo}, //~ ERROR `BarFoo + 'static: std::marker::Sized` is not satisfied\n+\n+    // projected\n+    VQ(<&'static [i8] as Deref>::Target), //~ ERROR `[i8]: std::marker::Sized` is not satisfied\n+    VR{x: <&'static [char] as Deref>::Target},\n+    //~^ ERROR `[char]: std::marker::Sized` is not satisfied\n+    VS(isize, <&'static [f64] as Deref>::Target),\n+    //~^ ERROR `[f64]: std::marker::Sized` is not satisfied\n+    VT{u: isize, x: <&'static [i32] as Deref>::Target},\n+    //~^ ERROR `[i32]: std::marker::Sized` is not satisfied\n+}\n+\n+\n+fn main() { }\n+"}]}