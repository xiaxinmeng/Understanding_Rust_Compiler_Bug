{"sha": "c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNGZmMjg4NGRjNDZhOGEwZWY3ZjU5MTZiNDczMGE0ZTUxNmQ5YWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:40:04Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-28T10:40:04Z"}, "message": "Rollup merge of #35917 - jseyfried:remove_attr_ext_traits, r=nrc\n\nsyntax: Remove traits `AttrMetaMethods`, `AttributeMethods`, and `AttrNestedMetaItemMethods`", "tree": {"sha": "dd2a303288164091abb7fb5441f22601f2d64f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2a303288164091abb7fb5441f22601f2d64f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "html_url": "https://github.com/rust-lang/rust/commit/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6303640e856dc3cccea655df104203649b5efd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/6303640e856dc3cccea655df104203649b5efd76", "html_url": "https://github.com/rust-lang/rust/commit/6303640e856dc3cccea655df104203649b5efd76"}, {"sha": "469753f0abc4b9eac811d8b2955d478825f9c3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/469753f0abc4b9eac811d8b2955d478825f9c3e1", "html_url": "https://github.com/rust-lang/rust/commit/469753f0abc4b9eac811d8b2955d478825f9c3e1"}], "stats": {"total": 304, "additions": 90, "deletions": 214}, "files": [{"sha": "21143f93a7da84011a128e852fb3d7b71e484857", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -11,7 +11,6 @@\n use session::Session;\n \n use syntax::ast;\n-use syntax::attr::{AttrNestedMetaItemMethods, AttrMetaMethods};\n use syntax::visit;\n use syntax::visit::Visitor;\n "}, {"sha": "81d3d440b566f8f3edccac5da6a20d3a65b1931a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -38,7 +38,7 @@ use util::nodemap::FnvHashMap;\n use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n-use syntax::attr::{self, AttrMetaMethods, AttrNestedMetaItemMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n use syntax_pos::Span;"}, {"sha": "d1769d5cbc51bd90011c529b4ba845840014d704", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -30,7 +30,6 @@ use middle::weak_lang_items;\n use util::nodemap::FnvHashMap;\n \n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse::token::InternedString;\n use hir::intravisit::Visitor;\n use hir;"}, {"sha": "0764e817f4307be588e51c8da31f67864b288cf4", "filename": "src/librustc/middle/recursion_limit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Frecursion_limit.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -17,7 +17,6 @@\n \n use session::Session;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n \n pub fn update_recursion_limit(sess: &Session, krate: &ast::Crate) {\n     for attr in &krate.attrs {"}, {"sha": "c20fcc3fe1dc6205631eaf8b460f2208a6b84221", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -27,7 +27,7 @@ use syntax_pos::{Span, DUMMY_SP};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n use syntax::feature_gate::{GateIssue, emit_feature_err, find_lang_feature_accepted_version};\n-use syntax::attr::{self, Stability, Deprecation, AttrMetaMethods};\n+use syntax::attr::{self, Stability, Deprecation};\n use util::nodemap::{DefIdMap, FnvHashSet, FnvHashMap};\n \n use hir;"}, {"sha": "562dce6a1b129d9403f7552b24a9c9b08718725b", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -25,7 +25,6 @@ use middle::cstore;\n \n use syntax::ast::{self, IntTy, UintTy};\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::parse;\n use syntax::parse::token::InternedString;\n use syntax::feature_gate::UnstableFeatures;\n@@ -1773,8 +1772,9 @@ mod tests {\n     use std::path::PathBuf;\n     use std::rc::Rc;\n     use super::{OutputType, OutputTypes, Externs, PanicStrategy};\n-    use syntax::attr;\n-    use syntax::attr::AttrMetaMethods;\n+    use syntax::{ast, attr};\n+    use syntax::parse::token::InternedString;\n+    use syntax::codemap::dummy_spanned;\n \n     fn optgroups() -> Vec<OptGroup> {\n         super::rustc_optgroups().into_iter()\n@@ -1803,7 +1803,9 @@ mod tests {\n         let (sessopts, cfg) = build_session_options_and_crate_config(matches);\n         let sess = build_session(sessopts, &dep_graph, None, registry, Rc::new(DummyCrateStore));\n         let cfg = build_configuration(&sess, cfg);\n-        assert!((attr::contains_name(&cfg[..], \"test\")));\n+        assert!(attr::contains(&cfg, &dummy_spanned(ast::MetaItemKind::Word({\n+            InternedString::new(\"test\")\n+        }))));\n     }\n \n     // When the user supplies --test and --cfg test, don't implicitly add"}, {"sha": "8318a29de1c54e1dd3124a334522815396a46c3e", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -37,7 +37,6 @@ use util::nodemap::{FnvHashMap, FnvHashSet};\n use std::cmp;\n use std::fmt;\n use syntax::ast;\n-use syntax::attr::{AttributeMethods, AttrMetaMethods};\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n "}, {"sha": "1ea82a9c639d8a845d2a068a9b1afaf321602009", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -43,7 +43,7 @@ use std::rc::Rc;\n use std::slice;\n use std::vec::IntoIter;\n use syntax::ast::{self, CrateNum, Name, NodeId};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax_pos::{DUMMY_SP, Span};\n "}, {"sha": "a8993724e670630ca2a5fdbacc1fbb012116152a", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -27,7 +27,6 @@ use rustc::middle::mem_categorization as mc;\n use std::mem;\n use std::rc::Rc;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::{Span, DUMMY_SP};\n \n #[derive(PartialEq, Eq, PartialOrd, Ord)]"}, {"sha": "887c7deb86be0804d9164c942927139fa9ae417b", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -11,7 +11,6 @@\n use borrowck::BorrowckCtxt;\n \n use syntax::ast::{self, MetaItem};\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP};\n \n@@ -127,8 +126,6 @@ fn do_dataflow<'a, 'tcx, BD>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              bd: BD) -> DataflowResults<BD>\n     where BD: BitDenotation<Idx=MovePathIndex, Ctxt=MoveDataParamEnv<'tcx>> + DataflowOperator\n {\n-    use syntax::attr::AttrMetaMethods;\n-\n     let name_found = |sess: &Session, attrs: &[ast::Attribute], name| -> Option<String> {\n         if let Some(item) = has_rustc_mir_with(attrs, name) {\n             if let Some(s) = item.value_str() {"}, {"sha": "07faeee10f1c483c276ea8a1cdd62eb22bd9e5f9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -43,7 +43,6 @@ use std::mem;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n "}, {"sha": "c6ab4578f0632c69d10661b96743fd9bdeb65963", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -49,7 +49,7 @@ use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use syntax::{ast, diagnostics, visit};\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::{self, PResult, token};\n use syntax::util::node_count::NodeCounter;\n use syntax;"}, {"sha": "efadf1ff488dfbee24919b4a0504c3246129d893", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -95,7 +95,6 @@ use std::thread;\n use rustc::session::early_error;\n \n use syntax::{ast, json};\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};"}, {"sha": "8df8f5003711883aa5b906c1a3c25140ae84c058", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -56,7 +56,6 @@ use std::env;\n use std::fs::File;\n use std::io::Write;\n use syntax::ast;\n-use syntax::attr::{AttrNestedMetaItemMethods, AttrMetaMethods};\n use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n "}, {"sha": "b14c20ae8d46e84b54ebc54a19778b01031a373e", "filename": "src/librustc_incremental/calculate_svh/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -28,7 +28,6 @@\n //! at the beginning.\n \n use syntax::ast;\n-use syntax::attr::AttributeMethods;\n use std::hash::{Hash, SipHasher, Hasher};\n use rustc::dep_graph::DepNode;\n use rustc::hir;"}, {"sha": "fda7ef207a3447a434a97edd5f85f7197fd0944a", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -32,7 +32,6 @@ use rustc::hir::def_id::DefId;\n use rustc::hir::intravisit::Visitor;\n use rustc_data_structures::fnv::FnvHashSet;\n use syntax::ast::{self, Attribute, NestedMetaItem};\n-use syntax::attr::{AttrNestedMetaItemMethods, AttrMetaMethods};\n use syntax::parse::token::InternedString;\n use rustc::ty::TyCtxt;\n "}, {"sha": "0e130c3bb66bfb823c88f127a214b54722f04a3c", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -14,7 +14,7 @@ use lint::{LateContext, LintContext, LintArray};\n use lint::{LintPass, LateLintPass};\n \n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax_pos::Span;\n \n use rustc::hir::{self, PatKind};"}, {"sha": "a103386e2c9809c89c8853fda70d6d832540f476", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -44,7 +44,7 @@ use lint::{LintPass, LateLintPass};\n use std::collections::HashSet;\n \n use syntax::{ast};\n-use syntax::attr::{self, AttrMetaMethods, AttrNestedMetaItemMethods, AttributeMethods};\n+use syntax::attr;\n use syntax_pos::{Span};\n \n use rustc::hir::{self, PatKind};\n@@ -1145,7 +1145,7 @@ impl LintPass for UnstableFeatures {\n \n impl LateLintPass for UnstableFeatures {\n     fn check_attribute(&mut self, ctx: &LateContext, attr: &ast::Attribute) {\n-        if attr::contains_name(&[attr.meta().clone()], \"feature\") {\n+        if attr.meta().check_name(\"feature\") {\n             if let Some(items) = attr.meta().meta_item_list() {\n                 for item in items {\n                     ctx.span_lint(UNSTABLE_FEATURES, item.span(), \"unstable feature\");"}, {"sha": "924b768958d69433ea1867930a0ea8189a2ada43", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -18,7 +18,7 @@ use lint::{LintPass, EarlyLintPass, LateLintPass};\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n use syntax::parse::token::keywords;\n use syntax::ptr::P;"}, {"sha": "7e1f3ea618c979f597a3f17128ad4aabfd565e74", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -35,7 +35,7 @@ use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap;\n use syntax::parse;\n-use syntax::attr::{self, AttrMetaMethods, AttrNestedMetaItemMethods};\n+use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::visit;\n use syntax_pos::{self, Span, mk_sp, Pos};"}, {"sha": "25fedb10201a9101a3f2bb79bdba97748d7dbbc6", "filename": "src/librustc_metadata/macro_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_metadata%2Fmacro_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_metadata%2Fmacro_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fmacro_import.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use std::collections::{HashSet, HashMap};\n use syntax::parse::token;\n use syntax::ast;\n-use syntax::attr::{self, AttrNestedMetaItemMethods, AttrMetaMethods};\n+use syntax::attr;\n use syntax::ext;\n use syntax_pos::Span;\n "}, {"sha": "1767630b81b1a14b897ac59b227637b4be9fbf58", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -32,7 +32,6 @@ use rustc::ty::{self, Ty, TyCtxt};\n use syntax::parse::token;\n use rustc::hir;\n use rustc_const_math::{ConstInt, ConstUsize};\n-use syntax::attr::AttrMetaMethods;\n \n #[derive(Copy, Clone)]\n pub struct Cx<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {"}, {"sha": "9e56397bc99e9ff6bb8031cd0d4f1f047cf0c4e4", "filename": "src/librustc_plugin/load.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_plugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_plugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fload.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -20,7 +20,6 @@ use std::env;\n use std::mem;\n use std::path::PathBuf;\n use syntax::ast;\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax_pos::{Span, COMMAND_LINE_SP};\n \n /// Pointer to a registrar function."}, {"sha": "7fe6d2bbfe24eeb640555c2f2d81cc6862ddcd13", "filename": "src/librustc_trans/assert_module_sources.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fassert_module_sources.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -29,7 +29,6 @@\n \n use rustc::ty::TyCtxt;\n use syntax::ast;\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax::parse::token::InternedString;\n \n use {ModuleSource, ModuleTranslation};"}, {"sha": "b21785c27dae5e50967ec55912ece1c227af1118", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -42,7 +42,6 @@ use std::process::Command;\n use std::str;\n use flate;\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax_pos::Span;\n \n // RLIB LLVM-BYTECODE OBJECT LAYOUT"}, {"sha": "2482a6d7aa147728a69d21382d8de4cad373189e", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -93,7 +93,6 @@ use std::rc::Rc;\n use std::str;\n use std::i32;\n use syntax_pos::{Span, DUMMY_SP};\n-use syntax::attr::AttrMetaMethods;\n use syntax::attr;\n use rustc::hir;\n use syntax::ast;"}, {"sha": "2b6e2a23261bdf21c073c45f6f7d047c22f05616", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -29,7 +29,7 @@ use rustc::hir;\n \n use std::ffi::{CStr, CString};\n use syntax::ast;\n-use syntax::attr::{self, AttrMetaMethods};\n+use syntax::attr;\n use syntax::parse::token;\n \n pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {"}, {"sha": "25c30151ad45dbcac159cae4a97b0a49698a7a4a", "filename": "src/librustc_trans/symbol_names_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_trans%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsymbol_names_test.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -17,7 +17,6 @@\n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n \n use common::SharedCrateContext;\n use monomorphize::Instance;"}, {"sha": "0c35982ec470b0c6ee418e643a447b24e1aa238d", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -113,7 +113,6 @@ use std::ops::Deref;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::codemap::{self, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::{self, InternedString, keywords};"}, {"sha": "75b4b8f4479882ae94fec5ad8d09cbd30ce060fe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 58, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -26,9 +26,8 @@ pub use self::Visibility::*;\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::{AttributeMethods, AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax::codemap::Spanned;\n-use syntax::parse::token::{self, InternedString, keywords};\n+use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax::print::pprust as syntax_pprust;\n use syntax_pos::{self, DUMMY_SP, Pos};\n@@ -541,62 +540,6 @@ impl Clean<Attribute> for ast::Attribute {\n     }\n }\n \n-// This is a rough approximation that gets us what we want.\n-impl attr::AttrNestedMetaItemMethods for Attribute {\n-    fn check_name(&self, name: &str) -> bool {\n-        self.name().map_or(false, |mi_name| &*mi_name == name)\n-    }\n-\n-    fn literal(&self) -> Option<&ast::Lit> { None }\n-\n-    fn is_literal(&self) -> bool {\n-      match *self {\n-        Literal(..) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn meta_item(&self) -> Option<&P<ast::MetaItem>> { None }\n-\n-    fn name(&self) -> Option<InternedString> {\n-        match *self {\n-            Word(ref n) | List(ref n, _) | NameValue(ref n, _) => {\n-                Some(token::intern_and_get_ident(n))\n-            },\n-            _ => None\n-        }\n-    }\n-\n-    fn value_str(&self) -> Option<InternedString> {\n-        match *self {\n-            NameValue(_, ref v) => {\n-                Some(token::intern_and_get_ident(v))\n-            }\n-            _ => None,\n-        }\n-    }\n-\n-    fn word(&self) -> Option<&P<ast::MetaItem>> { None }\n-\n-    fn is_word(&self) -> bool {\n-      match *self {\n-        Word(_) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn meta_item_list<'a>(&'a self) -> Option<&'a [ast::NestedMetaItem]> { None }\n-\n-    fn is_meta_item_list(&self) -> bool {\n-      match *self {\n-        List(..) => true,\n-        _ => false,\n-      }\n-    }\n-\n-    fn span(&self) -> syntax_pos::Span { unimplemented!() }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Debug)]\n pub struct TyParam {\n     pub name: String,"}, {"sha": "1805da2385b67d017de4b988eefb605b07f772e9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -140,8 +140,6 @@ pub fn run(input: &str,\n \n // Look for #![doc(test(no_crate_inject))], used by crates in the std facade\n fn scrape_test_config(krate: &::rustc::hir::Crate) -> TestOptions {\n-    use syntax::attr::AttrMetaMethods;\n-    use syntax::attr::AttrNestedMetaItemMethods;\n     use syntax::print::pprust;\n \n     let mut opts = TestOptions {"}, {"sha": "214f2a54f0d12c05317068318a1dd8b7bc116cdd", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -17,7 +17,6 @@ use std::mem;\n use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax_pos::Span;\n \n use rustc::hir::map as hir_map;"}, {"sha": "6060ff529f2155bbe01d47ae3275e2e2b525bfa2", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 68, "deletions": 107, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -81,32 +81,47 @@ pub fn is_used(attr: &Attribute) -> bool {\n     })\n }\n \n-pub trait AttrNestedMetaItemMethods {\n+impl NestedMetaItem {\n+    /// Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.\n+    pub fn meta_item(&self) -> Option<&P<MetaItem>> {\n+        match self.node {\n+            NestedMetaItemKind::MetaItem(ref item) => Some(&item),\n+            _ => None\n+        }\n+    }\n+\n+    /// Returns the Lit if self is a NestedMetaItemKind::Literal.\n+    pub fn literal(&self) -> Option<&Lit> {\n+        match self.node {\n+            NestedMetaItemKind::Literal(ref lit) => Some(&lit),\n+            _ => None\n+        }\n+    }\n+\n+    /// Returns the Span for `self`.\n+    pub fn span(&self) -> Span {\n+        self.span\n+    }\n+\n     /// Returns true if this list item is a MetaItem with a name of `name`.\n-    fn check_name(&self, name: &str) -> bool {\n+    pub fn check_name(&self, name: &str) -> bool {\n         self.meta_item().map_or(false, |meta_item| meta_item.check_name(name))\n     }\n \n     /// Returns the name of the meta item, e.g. `foo` in `#[foo]`,\n     /// `#[foo=\"bar\"]` and `#[foo(bar)]`, if self is a MetaItem\n-    fn name(&self) -> Option<InternedString> {\n+    pub fn name(&self) -> Option<InternedString> {\n         self.meta_item().and_then(|meta_item| Some(meta_item.name()))\n     }\n \n-    /// Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.\n-    fn meta_item(&self) -> Option<&P<MetaItem>>;\n-\n-    /// Returns the Lit if self is a NestedMetaItemKind::Literal.\n-    fn literal(&self) -> Option<&Lit>;\n-\n     /// Gets the string value if self is a MetaItem and the MetaItem is a\n     /// MetaItemKind::NameValue variant containing a string, otherwise None.\n-    fn value_str(&self) -> Option<InternedString> {\n+    pub fn value_str(&self) -> Option<InternedString> {\n         self.meta_item().and_then(|meta_item| meta_item.value_str())\n     }\n \n     /// Returns a MetaItem if self is a MetaItem with Kind Word.\n-    fn word(&self) -> Option<&P<MetaItem>> {\n+    pub fn word(&self) -> Option<&P<MetaItem>> {\n         self.meta_item().and_then(|meta_item| if meta_item.is_word() {\n             Some(meta_item)\n         } else {\n@@ -115,125 +130,79 @@ pub trait AttrNestedMetaItemMethods {\n     }\n \n     /// Gets a list of inner meta items from a list MetaItem type.\n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         self.meta_item().and_then(|meta_item| meta_item.meta_item_list())\n     }\n \n     /// Returns `true` if the variant is MetaItem.\n-    fn is_meta_item(&self) -> bool {\n+    pub fn is_meta_item(&self) -> bool {\n         self.meta_item().is_some()\n     }\n \n     /// Returns `true` if the variant is Literal.\n-    fn is_literal(&self) -> bool {\n+    pub fn is_literal(&self) -> bool {\n         self.literal().is_some()\n     }\n \n     /// Returns `true` if self is a MetaItem and the meta item is a word.\n-    fn is_word(&self) -> bool {\n+    pub fn is_word(&self) -> bool {\n         self.word().is_some()\n     }\n \n     /// Returns `true` if self is a MetaItem and the meta item is a ValueString.\n-    fn is_value_str(&self) -> bool {\n+    pub fn is_value_str(&self) -> bool {\n         self.value_str().is_some()\n     }\n \n     /// Returns `true` if self is a MetaItem and the meta item is a list.\n-    fn is_meta_item_list(&self) -> bool {\n+    pub fn is_meta_item_list(&self) -> bool {\n         self.meta_item_list().is_some()\n     }\n-\n-    /// Returns the Span for `self`.\n-    fn span(&self) -> Span;\n }\n \n-impl AttrNestedMetaItemMethods for NestedMetaItem {\n-    fn meta_item(&self) -> Option<&P<MetaItem>> {\n-        match self.node {\n-            NestedMetaItemKind::MetaItem(ref item) => Some(&item),\n-            _ => None\n-        }\n-    }\n-\n-    fn literal(&self) -> Option<&Lit> {\n-        match self.node {\n-            NestedMetaItemKind::Literal(ref lit) => Some(&lit),\n-            _ => None\n-        }\n-    }\n-\n-    fn span(&self) -> Span {\n-        self.span\n-    }\n-}\n-\n-pub trait AttrMetaMethods {\n-    fn check_name(&self, name: &str) -> bool {\n-        name == &self.name()[..]\n-    }\n-\n-    /// Retrieve the name of the meta item, e.g. `foo` in `#[foo]`,\n-    /// `#[foo=\"bar\"]` and `#[foo(bar)]`\n-    fn name(&self) -> InternedString;\n-\n-    /// Gets the string value if self is a MetaItemKind::NameValue variant\n-    /// containing a string, otherwise None.\n-    fn value_str(&self) -> Option<InternedString>;\n-\n-    /// Gets a list of inner meta items from a list MetaItem type.\n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]>;\n-\n-    /// Indicates if the attribute is a Word.\n-    fn is_word(&self) -> bool;\n-\n-    /// Indicates if the attribute is a Value String.\n-    fn is_value_str(&self) -> bool {\n-        self.value_str().is_some()\n-    }\n-\n-    /// Indicates if the attribute is a Meta-Item List.\n-    fn is_meta_item_list(&self) -> bool {\n-        self.meta_item_list().is_some()\n-    }\n-\n-    fn span(&self) -> Span;\n-}\n-\n-impl AttrMetaMethods for Attribute {\n-    fn check_name(&self, name: &str) -> bool {\n+impl Attribute {\n+    pub fn check_name(&self, name: &str) -> bool {\n         let matches = name == &self.name()[..];\n         if matches {\n             mark_used(self);\n         }\n         matches\n     }\n \n-    fn name(&self) -> InternedString { self.meta().name() }\n+    pub fn name(&self) -> InternedString { self.meta().name() }\n \n-    fn value_str(&self) -> Option<InternedString> {\n+    pub fn value_str(&self) -> Option<InternedString> {\n         self.meta().value_str()\n     }\n \n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         self.meta().meta_item_list()\n     }\n \n-    fn is_word(&self) -> bool { self.meta().is_word() }\n+    pub fn is_word(&self) -> bool { self.meta().is_word() }\n \n-    fn span(&self) -> Span { self.meta().span }\n+    pub fn span(&self) -> Span { self.meta().span }\n+\n+    pub fn is_meta_item_list(&self) -> bool {\n+        self.meta_item_list().is_some()\n+    }\n+\n+    /// Indicates if the attribute is a Value String.\n+    pub fn is_value_str(&self) -> bool {\n+        self.value_str().is_some()\n+    }\n }\n \n-impl AttrMetaMethods for MetaItem {\n-    fn name(&self) -> InternedString {\n+impl MetaItem {\n+    pub fn name(&self) -> InternedString {\n         match self.node {\n             MetaItemKind::Word(ref n) => (*n).clone(),\n             MetaItemKind::NameValue(ref n, _) => (*n).clone(),\n             MetaItemKind::List(ref n, _) => (*n).clone(),\n         }\n     }\n \n-    fn value_str(&self) -> Option<InternedString> {\n+    pub fn value_str(&self) -> Option<InternedString> {\n         match self.node {\n             MetaItemKind::NameValue(_, ref v) => {\n                 match v.node {\n@@ -245,53 +214,45 @@ impl AttrMetaMethods for MetaItem {\n         }\n     }\n \n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n+    pub fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n         match self.node {\n             MetaItemKind::List(_, ref l) => Some(&l[..]),\n             _ => None\n         }\n     }\n \n-    fn is_word(&self) -> bool {\n+    pub fn is_word(&self) -> bool {\n         match self.node {\n             MetaItemKind::Word(_) => true,\n             _ => false,\n         }\n     }\n \n-    fn span(&self) -> Span { self.span }\n-}\n+    pub fn span(&self) -> Span { self.span }\n \n-// Annoying, but required to get test_cfg to work\n-impl AttrMetaMethods for P<MetaItem> {\n-    fn name(&self) -> InternedString { (**self).name() }\n-    fn value_str(&self) -> Option<InternedString> { (**self).value_str() }\n-    fn meta_item_list(&self) -> Option<&[NestedMetaItem]> {\n-        (**self).meta_item_list()\n+    pub fn check_name(&self, name: &str) -> bool {\n+        name == &self.name()[..]\n     }\n-    fn is_word(&self) -> bool { (**self).is_word() }\n-    fn is_value_str(&self) -> bool { (**self).is_value_str() }\n-    fn is_meta_item_list(&self) -> bool { (**self).is_meta_item_list() }\n-    fn span(&self) -> Span { (**self).span() }\n-}\n \n+    pub fn is_value_str(&self) -> bool {\n+        self.value_str().is_some()\n+    }\n \n-pub trait AttributeMethods {\n-    fn meta(&self) -> &MetaItem;\n-    fn with_desugared_doc<T, F>(&self, f: F) -> T where\n-        F: FnOnce(&Attribute) -> T;\n+    pub fn is_meta_item_list(&self) -> bool {\n+        self.meta_item_list().is_some()\n+    }\n }\n \n-impl AttributeMethods for Attribute {\n+impl Attribute {\n     /// Extract the MetaItem from inside this Attribute.\n-    fn meta(&self) -> &MetaItem {\n+    pub fn meta(&self) -> &MetaItem {\n         &self.node.value\n     }\n \n     /// Convert self to a normal #[doc=\"foo\"] comment, if it is a\n     /// comment like `///` or `/** */`. (Returns self unchanged for\n     /// non-sugared doc attributes.)\n-    fn with_desugared_doc<T, F>(&self, f: F) -> T where\n+    pub fn with_desugared_doc<T, F>(&self, f: F) -> T where\n         F: FnOnce(&Attribute) -> T,\n     {\n         if self.node.is_sugared_doc {\n@@ -431,17 +392,17 @@ pub fn contains(haystack: &[P<MetaItem>], needle: &MetaItem) -> bool {\n     })\n }\n \n-pub fn list_contains_name<AM: AttrNestedMetaItemMethods>(items: &[AM], name: &str) -> bool {\n+pub fn list_contains_name(items: &[NestedMetaItem], name: &str) -> bool {\n     debug!(\"attr::list_contains_name (name={})\", name);\n     items.iter().any(|item| {\n         debug!(\"  testing: {:?}\", item.name());\n         item.check_name(name)\n     })\n }\n \n-pub fn contains_name<AM: AttrMetaMethods>(metas: &[AM], name: &str) -> bool {\n+pub fn contains_name(attrs: &[Attribute], name: &str) -> bool {\n     debug!(\"attr::contains_name (name={})\", name);\n-    metas.iter().any(|item| {\n+    attrs.iter().any(|item| {\n         debug!(\"  testing: {}\", item.name());\n         item.check_name(name)\n     })"}, {"sha": "ff1ecd443717eb89fcad306d94946d98299ff0d0", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use attr::{AttrMetaMethods, AttrNestedMetaItemMethods, HasAttrs};\n+use attr::HasAttrs;\n use feature_gate::{emit_feature_err, EXPLAIN_STMT_ATTR_SYNTAX, Features, get_features, GateIssue};\n use fold::Folder;\n use {fold, attr};"}, {"sha": "15ebf95d6239370e76ce470dae113680613dbfd4", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -13,7 +13,6 @@ use ast::{MacStmtStyle, Stmt, StmtKind, ItemKind};\n use ast;\n use ext::hygiene::Mark;\n use attr::{self, HasAttrs};\n-use attr::AttrMetaMethods;\n use codemap::{dummy_spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use syntax_pos::{self, Span, ExpnId};\n use config::StripUnconfigured;"}, {"sha": "1e15c1563561cbd0d30656d36b1ed96258517137", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -27,7 +27,7 @@ use self::AttributeGate::*;\n \n use abi::Abi;\n use ast::{self, NodeId, PatKind};\n-use attr::{self, AttrMetaMethods, AttrNestedMetaItemMethods};\n+use attr;\n use codemap::{CodeMap, Spanned};\n use syntax_pos::Span;\n use errors::Handler;"}, {"sha": "af95e44a567bab9245e182d726026e9f55ecd280", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -678,7 +678,7 @@ mod tests {\n     use codemap::Spanned;\n     use ast::{self, PatKind};\n     use abi::Abi;\n-    use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n+    use attr::first_attr_value_str_by_name;\n     use parse;\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};"}, {"sha": "99c00789219bf0b5d3874447f68823fbd09db0ab", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -16,7 +16,6 @@ use ast::{SelfKind, RegionTyParamBound, TraitTyParamBound, TraitBoundModifier};\n use ast::Attribute;\n use util::parser::AssocOp;\n use attr;\n-use attr::{AttrMetaMethods, AttributeMethods};\n use codemap::{self, CodeMap};\n use syntax_pos::{self, BytePos};\n use errors;"}, {"sha": "6155ad729a2893d5ebcf976411947bda8741ccbc", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -19,7 +19,7 @@ use std::iter;\n use std::slice;\n use std::mem;\n use std::vec;\n-use attr::{self, AttrMetaMethods, AttrNestedMetaItemMethods};\n+use attr;\n use syntax_pos::{self, DUMMY_SP, NO_EXPANSION, Span, FileMap, BytePos};\n use std::rc::Rc;\n "}, {"sha": "a8b682d81599ac10fddf9218d4ec2e1599c8f82f", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -194,7 +194,6 @@ use std::vec;\n use syntax::abi::Abi;\n use syntax::ast::{self, BinOpKind, EnumDef, Expr, Generics, Ident, PatKind, VariantData};\n use syntax::attr;\n-use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax::ext::build::AstBuilder;\n use syntax::codemap::{self, dummy_spanned, respan};"}, {"sha": "81085122e875bf47ce8799d51e6478ac171f93aa", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -11,7 +11,6 @@\n //! The compiler code necessary to implement the `#[derive]` extensions.\n \n use syntax::ast::{self, MetaItem};\n-use syntax::attr::{AttrNestedMetaItemMethods, AttrMetaMethods};\n use syntax::ext::base::{Annotatable, ExtCtxt, SyntaxEnv};\n use syntax::ext::base::{MultiDecorator, MultiItemDecorator, MultiModifier};\n use syntax::ext::build::AstBuilder;"}, {"sha": "5a3412b7ed9f9f496ff8a9bcff665a88d1914c31", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -18,7 +18,6 @@ extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast::{self, Item, MetaItem, ItemKind};\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax::ext::base::*;\n use syntax::parse::{self, token};\n use syntax::ptr::P;"}, {"sha": "91b4b74797a830a26ea3b08c4cc828514c254612", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -21,7 +21,6 @@ extern crate rustc;\n extern crate rustc_plugin;\n \n use syntax::ast;\n-use syntax::attr::AttrMetaMethods;\n use syntax::ext::base::{MultiDecorator, ExtCtxt, Annotatable};\n use syntax::ext::build::AstBuilder;\n use syntax::parse::token;"}, {"sha": "46fdf911258456e685643c9c2ec0ead5d2536986", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=c14ff2884dc46a8a0ef7f5916b4730a4e516d9ab", "patch": "@@ -19,7 +19,6 @@ extern crate syntax_pos;\n \n use syntax::ast::{self, Item, MetaItem, ItemKind};\n use syntax::codemap::DUMMY_SP;\n-use syntax::attr::{AttrMetaMethods, AttrNestedMetaItemMethods};\n use syntax::ext::base::*;\n use syntax::ext::quote::rt::ToTokens;\n use syntax::parse::{self, token};"}]}