{"sha": "2bfe32cc9301d404c98d896efbabe8f04361d5bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZmUzMmNjOTMwMWQ0MDRjOThkODk2ZWZiYWJlOGYwNDM2MWQ1YmY=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-20T00:06:45Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-12-11T23:36:15Z"}, "message": "Avoid regenerating the `Vec<PathBuf>` in `FileSearch::search()`.\n\n`FileSearch::search()` traverses one or more directories. For each\ndirectory it generates a `Vec<PathBuf>` containing one element per file\nin that directory.\n\nIn some benchmarks this occurs enough that the allocations done for the\n`PathBuf`s are significant, and in practice a small number of\ndirectories are being traversed over and over again. For example, when\ncompiling the `tokio-webpush-simple` benchmark, two directories are\ntraversed 58 times each. Each of these directories have more than 100\nfiles.\n\nThis commit changes things so that all the `Vec<PathBuf>`s that will be\nneeded by a `Session` are precomputed when that `Session` is created;\nthey are stored in `SearchPath`. `FileSearch` gets a reference to the\nnecessary `SearchPath`s. This reduces instruction counts on several\nbenchmarks by 1--5%.\n\nThe commit also removes the barely-used `visited_dirs` hash in\n`for_each_lib_searchPath`. It only detects if `tlib_path` is the same as\none of the previously seen paths, which is unlikely.", "tree": {"sha": "667bba60d155cb2d2eca50df9e66165f34be7735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/667bba60d155cb2d2eca50df9e66165f34be7735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bfe32cc9301d404c98d896efbabe8f04361d5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfe32cc9301d404c98d896efbabe8f04361d5bf", "html_url": "https://github.com/rust-lang/rust/commit/2bfe32cc9301d404c98d896efbabe8f04361d5bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bfe32cc9301d404c98d896efbabe8f04361d5bf/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f13006182c9df451e7703307467fc1717239cf6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f13006182c9df451e7703307467fc1717239cf6e", "html_url": "https://github.com/rust-lang/rust/commit/f13006182c9df451e7703307467fc1717239cf6e"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "6bfed4fbf5a251319027179fccf3ccd46a6bcc47", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 11, "deletions": 23, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=2bfe32cc9301d404c98d896efbabe8f04361d5bf", "patch": "@@ -12,7 +12,6 @@\n \n pub use self::FileMatch::*;\n \n-use rustc_data_structures::fx::FxHashSet;\n use std::borrow::Cow;\n use std::env;\n use std::fs;\n@@ -31,29 +30,22 @@ pub enum FileMatch {\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,\n-    pub search_paths: &'a [SearchPath],\n     pub triple: &'a str,\n+    pub search_paths: &'a [SearchPath],\n+    pub tlib_path: &'a SearchPath,\n     pub kind: PathKind,\n }\n \n impl<'a> FileSearch<'a> {\n     pub fn for_each_lib_search_path<F>(&self, mut f: F) where\n         F: FnMut(&SearchPath)\n     {\n-        let mut visited_dirs = FxHashSet::default();\n-        visited_dirs.reserve(self.search_paths.len() + 1);\n         let iter = self.search_paths.iter().filter(|sp| sp.kind.matches(self.kind));\n         for search_path in iter {\n             f(search_path);\n-            visited_dirs.insert(search_path.dir.to_path_buf());\n         }\n \n-        debug!(\"filesearch: searching lib path\");\n-        let tlib_path = make_target_lib_path(self.sysroot,\n-                                             self.triple);\n-        if !visited_dirs.contains(&tlib_path) {\n-            f(&SearchPath { kind: PathKind::All, dir: tlib_path });\n-        }\n+        f(self.tlib_path);\n     }\n \n     pub fn get_lib_path(&self) -> PathBuf {\n@@ -65,21 +57,15 @@ impl<'a> FileSearch<'a> {\n     {\n         self.for_each_lib_search_path(|search_path| {\n             debug!(\"searching {}\", search_path.dir.display());\n-            let files = match fs::read_dir(&search_path.dir) {\n-                Ok(files) => files,\n-                Err(..) => return,\n-            };\n-            let files = files.filter_map(|p| p.ok().map(|s| s.path()))\n-                             .collect::<Vec<_>>();\n             fn is_rlib(p: &Path) -> bool {\n                 p.extension() == Some(\"rlib\".as_ref())\n             }\n             // Reading metadata out of rlibs is faster, and if we find both\n             // an rlib and a dylib we only read one of the files of\n             // metadata, so in the name of speed, bring all rlib files to\n             // the front of the search list.\n-            let files1 = files.iter().filter(|p| is_rlib(p));\n-            let files2 = files.iter().filter(|p| !is_rlib(p));\n+            let files1 = search_path.files.iter().filter(|p| is_rlib(p));\n+            let files2 = search_path.files.iter().filter(|p| !is_rlib(p));\n             for path in files1.chain(files2) {\n                 debug!(\"testing {}\", path.display());\n                 let maybe_picked = pick(path, search_path.kind);\n@@ -98,12 +84,15 @@ impl<'a> FileSearch<'a> {\n     pub fn new(sysroot: &'a Path,\n                triple: &'a str,\n                search_paths: &'a Vec<SearchPath>,\n-               kind: PathKind) -> FileSearch<'a> {\n+               tlib_path: &'a SearchPath,\n+               kind: PathKind)\n+               -> FileSearch<'a> {\n         debug!(\"using sysroot = {}, triple = {}\", sysroot.display(), triple);\n         FileSearch {\n             sysroot,\n-            search_paths,\n             triple,\n+            search_paths,\n+            tlib_path,\n             kind,\n         }\n     }\n@@ -137,8 +126,7 @@ pub fn relative_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf\n     p\n }\n \n-pub fn make_target_lib_path(sysroot: &Path,\n-                        target_triple: &str) -> PathBuf {\n+pub fn make_target_lib_path(sysroot: &Path, target_triple: &str) -> PathBuf {\n     sysroot.join(&relative_target_lib_path(sysroot, target_triple))\n }\n "}, {"sha": "12b5646e7f1d17ac6d340c41228c07a8d38ec56e", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2bfe32cc9301d404c98d896efbabe8f04361d5bf", "patch": "@@ -19,8 +19,8 @@ use lint;\n use lint::builtin::BuiltinLintDiagnostics;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n-use session::search_paths::PathKind;\n use session::config::{OutputType, Lto};\n+use session::search_paths::{PathKind, SearchPath};\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n@@ -64,6 +64,9 @@ pub struct Session {\n     pub target: config::Config,\n     pub host: Target,\n     pub opts: config::Options,\n+    pub host_tlib_path: SearchPath,\n+    /// This is `None` if the host and target are the same.\n+    pub target_tlib_path: Option<SearchPath>,\n     pub parse_sess: ParseSess,\n     /// For a library crate, this is always none\n     pub entry_fn: Once<Option<(NodeId, Span, config::EntryFnType)>>,\n@@ -699,6 +702,8 @@ impl Session {\n             &self.sysroot,\n             self.opts.target_triple.triple(),\n             &self.opts.search_paths,\n+            // target_tlib_path==None means it's the same as host_tlib_path.\n+            self.target_tlib_path.as_ref().unwrap_or(&self.host_tlib_path),\n             kind,\n         )\n     }\n@@ -707,6 +712,7 @@ impl Session {\n             &self.sysroot,\n             config::host_triple(),\n             &self.opts.search_paths,\n+            &self.host_tlib_path,\n             kind,\n         )\n     }\n@@ -1106,6 +1112,15 @@ pub fn build_session_(\n         None => filesearch::get_or_default_sysroot(),\n     };\n \n+    let host_triple = config::host_triple();\n+    let target_triple = sopts.target_triple.triple();\n+    let host_tlib_path = SearchPath::from_sysroot_and_triple(&sysroot, host_triple);\n+    let target_tlib_path = if host_triple == target_triple {\n+        None\n+    } else {\n+        Some(SearchPath::from_sysroot_and_triple(&sysroot, target_triple))\n+    };\n+\n     let file_path_mapping = sopts.file_path_mapping();\n \n     let local_crate_source_file =\n@@ -1134,6 +1149,8 @@ pub fn build_session_(\n         target: target_cfg,\n         host,\n         opts: sopts,\n+        host_tlib_path,\n+        target_tlib_path,\n         parse_sess: p_s,\n         // For a library crate, this is always none\n         entry_fn: Once::new(),"}, {"sha": "5c44a07f84341467066fbd2a6079fdb899ef40bb", "filename": "src/librustc/session/search_paths.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfe32cc9301d404c98d896efbabe8f04361d5bf/src%2Flibrustc%2Fsession%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fsearch_paths.rs?ref=2bfe32cc9301d404c98d896efbabe8f04361d5bf", "patch": "@@ -16,6 +16,7 @@ use session::filesearch::make_target_lib_path;\n pub struct SearchPath {\n     pub kind: PathKind,\n     pub dir: PathBuf,\n+    pub files: Vec<PathBuf>,\n }\n \n #[derive(Eq, PartialEq, Clone, Copy, Debug, PartialOrd, Ord, Hash)]\n@@ -65,7 +66,18 @@ impl SearchPath {\n     }\n \n     fn new(kind: PathKind, dir: PathBuf) -> Self {\n-        SearchPath { kind, dir }\n+        // Get the files within the directory.\n+        let files = match std::fs::read_dir(&dir) {\n+            Ok(files) => {\n+                files.filter_map(|p| {\n+                    p.ok().map(|s| s.path())\n+                })\n+                .collect::<Vec<_>>()\n+            }\n+            Err(..) => vec![],\n+        };\n+\n+        SearchPath { kind, dir, files }\n     }\n }\n "}]}