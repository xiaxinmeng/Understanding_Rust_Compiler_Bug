{"sha": "b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjM0MGI2MjY5ZTFiNTRmYjRhYTNmZjQ5YTkwMjYyZmIyZDk1M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-16T07:36:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-16T07:36:26Z"}, "message": "auto merge of #12302 : alexcrichton/rust/issue-12295, r=brson\n\nThe previous code erroneously assumed that 'steals > cnt' was always true, but\r\nthat was a false assumption. The code was altered to decrement steals to a\r\nminimum of 0 instead of taking all of cnt into account.\r\n\r\nI didn't include the exact test from #12295 because it could run for quite\r\nawhile, and instead set the threshold for MAX_STEALS to much lower during\r\ntesting. I found that this triggered the old bug quite frequently when running\r\nwithout this fix.\r\n\r\nCloses #12295", "tree": {"sha": "9004b3c068063762803d4c5e1d786e3b3340ee4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9004b3c068063762803d4c5e1d786e3b3340ee4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "html_url": "https://github.com/rust-lang/rust/commit/b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d4fd50af3c16ffe43c8035b929374e13bb76793", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d4fd50af3c16ffe43c8035b929374e13bb76793", "html_url": "https://github.com/rust-lang/rust/commit/5d4fd50af3c16ffe43c8035b929374e13bb76793"}, {"sha": "bea7862d9470c33b7b3e21a552a991e3b948aa29", "url": "https://api.github.com/repos/rust-lang/rust/commits/bea7862d9470c33b7b3e21a552a991e3b948aa29", "html_url": "https://github.com/rust-lang/rust/commit/bea7862d9470c33b7b3e21a552a991e3b948aa29"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "832cdca12f0ac616caa7f5347b8f65701a6d4fe7", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "patch": "@@ -18,6 +18,7 @@\n /// module. You'll also note that the implementation of the shared and stream\n /// channels are quite similar, and this is no coincidence!\n \n+use cmp;\n use int;\n use iter::Iterator;\n use kinds::Send;\n@@ -35,6 +36,9 @@ use mpsc = sync::mpsc_queue;\n \n static DISCONNECTED: int = int::MIN;\n static FUDGE: int = 1024;\n+#[cfg(test)]\n+static MAX_STEALS: int = 5;\n+#[cfg(not(test))]\n static MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n@@ -307,7 +311,11 @@ impl<T: Send> Packet<T> {\n                         DISCONNECTED => {\n                             self.cnt.store(DISCONNECTED, atomics::SeqCst);\n                         }\n-                        n => { self.steals -= n; }\n+                        n => {\n+                            let m = cmp::min(n, self.steals);\n+                            self.steals -= m;\n+                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                        }\n                     }\n                     assert!(self.steals >= 0);\n                 }"}, {"sha": "f1988dbbeeda55595408278952bc6654a829047c", "filename": "src/libstd/comm/stream.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fstream.rs?ref=b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "patch": "@@ -17,6 +17,7 @@\n /// High level implementation details can be found in the comment of the parent\n /// module.\n \n+use cmp;\n use comm::Port;\n use int;\n use iter::Iterator;\n@@ -32,6 +33,9 @@ use sync::atomics;\n use vec::OwnedVector;\n \n static DISCONNECTED: int = int::MIN;\n+#[cfg(test)]\n+static MAX_STEALS: int = 5;\n+#[cfg(not(test))]\n static MAX_STEALS: int = 1 << 20;\n \n pub struct Packet<T> {\n@@ -198,19 +202,28 @@ impl<T: Send> Packet<T> {\n     pub fn try_recv(&mut self) -> Result<T, Failure<T>> {\n         match self.queue.pop() {\n             // If we stole some data, record to that effect (this will be\n-            // factored into cnt later on). Note that we don't allow steals to\n-            // grow without bound in order to prevent eventual overflow of\n-            // either steals or cnt as an overflow would have catastrophic\n-            // results. Also note that we don't unconditionally set steals to 0\n-            // because it can be true that steals > cnt.\n+            // factored into cnt later on).\n+            //\n+            // Note that we don't allow steals to grow without bound in order to\n+            // prevent eventual overflow of either steals or cnt as an overflow\n+            // would have catastrophic results. Sometimes, steals > cnt, but\n+            // other times cnt > steals, so we don't know the relation between\n+            // steals and cnt. This code path is executed only rarely, so we do\n+            // a pretty slow operation, of swapping 0 into cnt, taking steals\n+            // down as much as possible (without going negative), and then\n+            // adding back in whatever we couldn't factor into steals.\n             Some(data) => {\n                 self.steals += 1;\n                 if self.steals > MAX_STEALS {\n                     match self.cnt.swap(0, atomics::SeqCst) {\n                         DISCONNECTED => {\n                             self.cnt.store(DISCONNECTED, atomics::SeqCst);\n                         }\n-                        n => { self.steals -= n; }\n+                        n => {\n+                            let m = cmp::min(n, self.steals);\n+                            self.steals -= m;\n+                            self.cnt.fetch_add(n - m, atomics::SeqCst);\n+                        }\n                     }\n                     assert!(self.steals >= 0);\n                 }"}, {"sha": "f418be262ed571b98e83c0c6d67cfb497d9d83c9", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "patch": "@@ -867,7 +867,6 @@ impl num::FromStrRadix for f32 {\n #[cfg(test)]\n mod tests {\n     use f32::*;\n-    use prelude::*;\n \n     use num::*;\n     use num;"}, {"sha": "1b1aaf684706494062a17e0dd2c80040163e685f", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "patch": "@@ -869,7 +869,6 @@ impl num::FromStrRadix for f64 {\n #[cfg(test)]\n mod tests {\n     use f64::*;\n-    use prelude::*;\n \n     use num::*;\n     use num;"}, {"sha": "ceccd918140d6c0283d99d67063f8a35bc72bb7f", "filename": "src/libstd/task.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b36340b6269e1b54fb4aa3ff49a90262fb2d953c/src%2Flibstd%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask.rs?ref=b36340b6269e1b54fb4aa3ff49a90262fb2d953c", "patch": "@@ -65,7 +65,6 @@ use rt::task::Task;\n use str::{Str, SendStr, IntoMaybeOwned};\n \n #[cfg(test)] use any::{AnyOwnExt, AnyRefExt};\n-#[cfg(test)] use ptr;\n #[cfg(test)] use result;\n \n /// Indicates the manner in which a task exited."}]}