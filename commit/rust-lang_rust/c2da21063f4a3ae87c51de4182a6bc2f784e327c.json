{"sha": "c2da21063f4a3ae87c51de4182a6bc2f784e327c", "node_id": "C_kwDOAAsO6NoAKGMyZGEyMTA2M2Y0YTNhZTg3YzUxZGU0MTgyYTZiYzJmNzg0ZTMyN2M", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-16T22:53:41Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-16T23:04:39Z"}, "message": "Edit GATs tests to apply lint", "tree": {"sha": "19b419202728bbdaf652051e4c55b87af1f435d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19b419202728bbdaf652051e4c55b87af1f435d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2da21063f4a3ae87c51de4182a6bc2f784e327c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2da21063f4a3ae87c51de4182a6bc2f784e327c", "html_url": "https://github.com/rust-lang/rust/commit/c2da21063f4a3ae87c51de4182a6bc2f784e327c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2da21063f4a3ae87c51de4182a6bc2f784e327c/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e391796d4729c5103a993461c72b5eebc1dac943", "url": "https://api.github.com/repos/rust-lang/rust/commits/e391796d4729c5103a993461c72b5eebc1dac943", "html_url": "https://github.com/rust-lang/rust/commit/e391796d4729c5103a993461c72b5eebc1dac943"}], "stats": {"total": 88, "additions": 35, "deletions": 53}, "files": [{"sha": "5b94cdee7c9c7deea6fb73f325ec198a982ee5a4", "filename": "src/test/ui/generic-associated-types/collections-project-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections-project-default.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -8,7 +8,7 @@\n // check that we don't normalize with trait defaults.\n \n trait Collection<T> {\n-    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter, Self: 'iter;\n     type Family: CollectionFamily;\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> ="}, {"sha": "b0f2fb3f567856e8d649f1c0ed7c3e0c4612081b", "filename": "src/test/ui/generic-associated-types/collections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fcollections.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -8,7 +8,7 @@\n // run-pass\n \n trait Collection<T> {\n-    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter;\n+    type Iter<'iter>: Iterator<Item=&'iter T> where T: 'iter, Self: 'iter;\n     type Family: CollectionFamily;\n     // Test associated type defaults with parameters\n     type Sibling<U>: Collection<U> ="}, {"sha": "d7c4dbda2644e68a6d31003e323d8a034d8ad1c9", "filename": "src/test/ui/generic-associated-types/generic-associated-type-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgeneric-associated-type-bounds.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -3,7 +3,7 @@\n #![feature(generic_associated_types)]\n \n pub trait X {\n-    type Y<'a>;\n+    type Y<'a> where Self: 'a;\n     fn m(&self) -> Self::Y<'_>;\n }\n "}, {"sha": "568996e1a17aa4b8b199fad7414ed6c3b688ff17", "filename": "src/test/ui/generic-associated-types/issue-70303.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-70303.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -3,7 +3,7 @@\n #![feature(generic_associated_types)]\n \n trait Document {\n-    type Cursor<'a>: DocCursor<'a>;\n+    type Cursor<'a>: DocCursor<'a> where Self: 'a;\n \n     fn cursor(&self) -> Self::Cursor<'_>;\n }"}, {"sha": "20c6924afa614d34d34858dd25de778fad604efa", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -3,7 +3,7 @@\n pub trait SubTrait {}\n \n pub trait SuperTrait {\n-    type SubType<'a>: SubTrait;\n+    type SubType<'a>: SubTrait where Self: 'a;\n \n     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n }"}, {"sha": "64eeec1b2fcbe39c2dfbf92460a60dac57f4ac67", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -7,7 +7,7 @@ LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruc\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-76535.rs:6:10\n    |\n-LL |     type SubType<'a>: SubTrait;\n+LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ --\n help: add missing lifetime argument\n    |\n@@ -25,7 +25,7 @@ note: for a trait to be \"object safe\" it needs to allow building a vtable to all\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n-LL |     type SubType<'a>: SubTrait;\n+LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n \n@@ -40,7 +40,7 @@ note: for a trait to be \"object safe\" it needs to allow building a vtable to all\n    |\n LL | pub trait SuperTrait {\n    |           ---------- this trait cannot be made into an object...\n-LL |     type SubType<'a>: SubTrait;\n+LL |     type SubType<'a>: SubTrait where Self: 'a;\n    |          ^^^^^^^ ...because it contains the generic associated type `SubType`\n    = help: consider moving `SubType` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`"}, {"sha": "47ef38ff45d65beadccc13496883013c7420e21d", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -17,12 +17,12 @@ impl<'a, T> RefCont<'a, T> for Box<T> {\n }\n \n trait MapLike<K, V> {\n-    type VRefCont<'a>: RefCont<'a, V>;\n+    type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n }\n \n impl<K: Ord, V: 'static> MapLike<K, V> for std::collections::BTreeMap<K, V> {\n-    type VRefCont<'a> = &'a V;\n+    type VRefCont<'a> where Self: 'a = &'a V;\n     fn get<'a>(&'a self, key: &K) -> Option<&'a V> {\n         std::collections::BTreeMap::get(self, key)\n     }"}, {"sha": "8b6f9b866e5ef1559333c848e618ffbf80fbdb32", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -7,7 +7,7 @@ LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n note: associated type defined here, with 1 lifetime parameter: `'a`\n   --> $DIR/issue-79422.rs:20:10\n    |\n-LL |     type VRefCont<'a>: RefCont<'a, V>;\n+LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ --\n help: add missing lifetime argument\n    |\n@@ -25,7 +25,7 @@ note: for a trait to be \"object safe\" it needs to allow building a vtable to all\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n-LL |     type VRefCont<'a>: RefCont<'a, V>;\n+LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n \n@@ -40,7 +40,7 @@ note: for a trait to be \"object safe\" it needs to allow building a vtable to all\n    |\n LL | trait MapLike<K, V> {\n    |       ------- this trait cannot be made into an object...\n-LL |     type VRefCont<'a>: RefCont<'a, V>;\n+LL |     type VRefCont<'a>: RefCont<'a, V> where Self: 'a;\n    |          ^^^^^^^^ ...because it contains the generic associated type `VRefCont`\n    = help: consider moving `VRefCont` to another trait\n    = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`"}, {"sha": "0f62f83e2563b15935bce74fc968ec97c56941f7", "filename": "src/test/ui/generic-associated-types/issue-86787.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -9,6 +9,7 @@ enum Either<L, R> {\n pub trait HasChildrenOf {\n     type T;\n     type TRef<'a>;\n+    //~^ Missing required bounds\n \n     fn ref_children<'a>(&'a self) -> Vec<Self::TRef<'a>>;\n     fn take_children(self) -> Vec<Self::T>;\n@@ -20,9 +21,9 @@ where\n     Right: HasChildrenOf,\n {\n     type T = Either<Left::T, Right::T>;\n+    // We used to error below because the where clause doesn't match the trait.\n+    // Now, we error early on the trait itself.\n     type TRef<'a>\n-    //~^ `impl` associated type signature\n-    //~^^ `impl` associated type signature\n     where\n     <Left as HasChildrenOf>::T: 'a,\n     <Right as HasChildrenOf>::T: 'a"}, {"sha": "87dcd875de703b589d4be1477ed8446f9233eb1b", "filename": "src/test/ui/generic-associated-types/issue-86787.stderr", "status": "modified", "additions": 7, "deletions": 29, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86787.stderr?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -1,32 +1,10 @@\n-error: `impl` associated type signature for `TRef` doesn't match `trait` associated type signature\n-  --> $DIR/issue-86787.rs:23:5\n+error: Missing required bounds on TRef\n+  --> $DIR/issue-86787.rs:11:5\n    |\n-LL |       type TRef<'a>;\n-   |       -------------- expected\n-...\n-LL | /     type TRef<'a>\n-LL | |\n-LL | |\n-LL | |     where\n-LL | |     <Left as HasChildrenOf>::T: 'a,\n-LL | |     <Right as HasChildrenOf>::T: 'a\n-LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ found\n+LL |     type TRef<'a>;\n+   |     ^^^^^^^^^^^^^-\n+   |                  |\n+   |                  help: add the required where clauses: `where Self: 'a`\n \n-error: `impl` associated type signature for `TRef` doesn't match `trait` associated type signature\n-  --> $DIR/issue-86787.rs:23:5\n-   |\n-LL |       type TRef<'a>;\n-   |       -------------- expected\n-...\n-LL | /     type TRef<'a>\n-LL | |\n-LL | |\n-LL | |     where\n-LL | |     <Left as HasChildrenOf>::T: 'a,\n-LL | |     <Right as HasChildrenOf>::T: 'a\n-LL | |     = Either<&'a Left::T, &'a Right::T>;\n-   | |________________________________________^ found\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "df5586ed422f84f0491c3330ccc6e492b33f194c", "filename": "src/test/ui/generic-associated-types/issue-88287.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88287.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -13,7 +13,8 @@ trait SearchableResource<Criteria> {\n trait SearchableResourceExt<Criteria>: SearchableResource<Criteria> {\n     type Future<'f, A: 'f + ?Sized, B: 'f>: Future<Output = Result<Vec<A::SearchResult>, ()>> + 'f\n     where\n-        A: SearchableResource<B>;\n+        A: SearchableResource<B>,\n+        Self: 'f;\n \n     fn search<'c>(&'c self, client: &'c ()) -> Self::Future<'c, Self, Criteria>;\n }\n@@ -29,6 +30,7 @@ where\n     type Future<'f, A, B: 'f>\n     where\n         A: SearchableResource<B> + ?Sized + 'f,\n+        Self: 'f,\n     = SearchFutureTy<'f, A, B>;\n \n     fn search<'c>(&'c self, _client: &'c ()) -> Self::Future<'c, Self, Criteria> {"}, {"sha": "8ee98201aba7a79ec6624e8aa626025e403d032d", "filename": "src/test/ui/generic-associated-types/issue-88360.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -1,13 +1,14 @@\n #![feature(generic_associated_types)]\n \n trait GatTrait {\n-    type Gat<'a>;\n+    type Gat<'a> where Self: 'a;\n \n     fn test(&self) -> Self::Gat<'_>;\n }\n \n trait SuperTrait<T>\n where\n+    Self: 'static,\n     for<'a> Self: GatTrait<Gat<'a> = &'a T>,\n {\n     fn copy(&self) -> Self::Gat<'_> where T: Copy {"}, {"sha": "5f769d799faa16ab547dfd1d80a3abf54fbd11b5", "filename": "src/test/ui/generic-associated-types/issue-88360.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-88360.stderr?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: mismatched types\n-  --> $DIR/issue-88360.rs:14:9\n+  --> $DIR/issue-88360.rs:15:9\n    |\n LL | trait SuperTrait<T>\n    |                  - this type parameter"}, {"sha": "bcbcfc18996375a47fe0dd4c6024512530ce2e18", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -1,7 +1,7 @@\n #![feature(generic_associated_types)]\n \n pub trait X {\n-    type Y<'a>;\n+    type Y<'a> where Self: 'a;\n     fn m(&self) -> Self::Y<'_>;\n }\n "}, {"sha": "f83d4d7b68e48ae155a5db86ae28bf2f6486654a", "filename": "src/test/ui/generic-associated-types/streaming_iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fstreaming_iterator.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -5,12 +5,12 @@\n use std::fmt::Display;\n \n trait StreamingIterator {\n-    type Item<'a>;\n+    type Item<'a> where Self: 'a;\n     // Applying the lifetime parameter `'a` to `Self::Item` inside the trait.\n     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>>;\n }\n \n-struct Foo<T: StreamingIterator> {\n+struct Foo<T: StreamingIterator + 'static> {\n     // Applying a concrete lifetime to the constructor outside the trait.\n     bar: <T as StreamingIterator>::Item<'static>,\n }\n@@ -30,7 +30,7 @@ struct StreamEnumerate<I> {\n }\n \n impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n-    type Item<'a> = (usize, I::Item<'a>);\n+    type Item<'a> where Self: 'a = (usize, I::Item<'a>);\n     fn next<'a>(&'a mut self) -> Option<Self::Item<'a>> {\n         match self.iter.next() {\n             None => None,\n@@ -44,7 +44,7 @@ impl<I: StreamingIterator> StreamingIterator for StreamEnumerate<I> {\n }\n \n impl<I: Iterator> StreamingIterator for I {\n-    type Item<'a> = <I as Iterator>::Item;\n+    type Item<'a> where Self: 'a = <I as Iterator>::Item;\n     fn next(&mut self) -> Option<<I as StreamingIterator>::Item<'_>> {\n         Iterator::next(self)\n     }"}, {"sha": "7d0f7638ac89dc008a5f43305440cff3c2299bb7", "filename": "src/test/ui/generic-associated-types/variance_constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2da21063f4a3ae87c51de4182a6bc2f784e327c/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fvariance_constraints.rs?ref=c2da21063f4a3ae87c51de4182a6bc2f784e327c", "patch": "@@ -3,7 +3,7 @@\n #![feature(generic_associated_types)]\n \n trait A {\n-    type B<'a>;\n+    type B<'a> where Self: 'a;\n \n     fn make_b<'a>(&'a self) -> Self::B<'a>;\n }"}]}