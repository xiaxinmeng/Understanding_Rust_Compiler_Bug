{"sha": "c0218fb10667a198b41e4d140f8d0760e27ca5e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMjE4ZmIxMDY2N2ExOThiNDFlNGQxNDBmOGQwNzYwZTI3Y2E1ZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-21T16:35:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-21T16:35:12Z"}, "message": "auto merge of #5069 : pcwalton/rust/plussing-2, r=pcwalton", "tree": {"sha": "79b8645af15e6fddbf895be80f8892329b9f62d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b8645af15e6fddbf895be80f8892329b9f62d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0218fb10667a198b41e4d140f8d0760e27ca5e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0218fb10667a198b41e4d140f8d0760e27ca5e7", "html_url": "https://github.com/rust-lang/rust/commit/c0218fb10667a198b41e4d140f8d0760e27ca5e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0218fb10667a198b41e4d140f8d0760e27ca5e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41a4151173df5cd93089e40238205c6356835807", "url": "https://api.github.com/repos/rust-lang/rust/commits/41a4151173df5cd93089e40238205c6356835807", "html_url": "https://github.com/rust-lang/rust/commit/41a4151173df5cd93089e40238205c6356835807"}, {"sha": "c0defda4994b2cf292901c24bef88b37a088861e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0defda4994b2cf292901c24bef88b37a088861e", "html_url": "https://github.com/rust-lang/rust/commit/c0defda4994b2cf292901c24bef88b37a088861e"}], "stats": {"total": 105, "additions": 52, "deletions": 53}, "files": [{"sha": "41895ebed7c5992789bea67bda74126bfbdd0881", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -2072,12 +2072,12 @@ on values of type `T` inside the function. It will also cause a\n compile-time error when anyone tries to call `print_all` on an array\n whose element type does not have a `Printable` implementation.\n \n-Type parameters can have multiple bounds by separating them with spaces,\n+Type parameters can have multiple bounds by separating them with `+`,\n as in this version of `print_all` that copies elements.\n \n ~~~\n # trait Printable { fn print(&self); }\n-fn print_all<T: Printable Copy>(printable_things: ~[T]) {\n+fn print_all<T: Printable + Copy>(printable_things: ~[T]) {\n     let mut i = 0;\n     while i < printable_things.len() {\n         let copy_of_thing = printable_things[i];"}, {"sha": "9d4cadff08a2288d365a97e8e258cd890fbad311", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -1203,8 +1203,8 @@ pub trait Select2<T:Owned,U:Owned> {\n \n impl<T: Owned,\n      U: Owned,\n-     Left: Selectable GenericPort<T>,\n-     Right: Selectable GenericPort<U>>\n+     Left: Selectable + GenericPort<T>,\n+     Right: Selectable + GenericPort<U>>\n      Select2<T,U> for (Left, Right) {\n     fn select() -> Either<T, U> {\n         match self {"}, {"sha": "c7ee1b871a8ed49a8041fedbb690c98e224ea7cc", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -72,8 +72,8 @@ pub impl LatticeValue for ty::t {\n }\n \n pub impl CombineFields {\n-    fn var_sub_var<T:Copy InferStr LatticeValue,\n-                   V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+    fn var_sub_var<T:Copy + InferStr + LatticeValue,\n+                   V:Copy + Eq + ToStr + Vid + UnifyVid<Bounds<T>>>(\n         &self,\n         +a_id: V,\n         +b_id: V) -> ures\n@@ -125,8 +125,8 @@ pub impl CombineFields {\n     }\n \n     /// make variable a subtype of T\n-    fn var_sub_t<T:Copy InferStr LatticeValue,\n-                 V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+    fn var_sub_t<T:Copy + InferStr + LatticeValue,\n+                 V:Copy + Eq + ToStr + Vid + UnifyVid<Bounds<T>>>(\n         &self,\n         +a_id: V,\n         +b: T) -> ures\n@@ -149,8 +149,8 @@ pub impl CombineFields {\n             a_id, a_bounds, b_bounds, node_a.rank)\n     }\n \n-    fn t_sub_var<T:Copy InferStr LatticeValue,\n-                 V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+    fn t_sub_var<T:Copy + InferStr + LatticeValue,\n+                 V:Copy + Eq + ToStr + Vid + UnifyVid<Bounds<T>>>(\n         &self,\n         +a: T,\n         +b_id: V) -> ures\n@@ -201,8 +201,8 @@ pub impl CombineFields {\n         }\n     }\n \n-    fn set_var_to_merged_bounds<T:Copy InferStr LatticeValue,\n-                                V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+    fn set_var_to_merged_bounds<T:Copy + InferStr + LatticeValue,\n+                                V:Copy+Eq+ToStr+Vid+UnifyVid<Bounds<T>>>(\n         &self,\n         +v_id: V,\n         a: &Bounds<T>,\n@@ -395,9 +395,9 @@ pub enum LatticeVarResult<V,T> {\n  *   the variables and return the unified variable, in which case the\n  *   result is a variable.  This is indicated with a `VarResult`\n  *   return. */\n-pub fn lattice_vars<L:LatticeDir Combine,\n-                    T:Copy InferStr LatticeValue,\n-                    V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+pub fn lattice_vars<L:LatticeDir + Combine,\n+                    T:Copy + InferStr + LatticeValue,\n+                    V:Copy + Eq + ToStr + Vid + UnifyVid<Bounds<T>>>(\n     self: &L,                           // defines whether we want LUB or GLB\n     +a_vid: V,                          // first variable\n     +b_vid: V,                          // second variable\n@@ -441,9 +441,9 @@ pub fn lattice_vars<L:LatticeDir Combine,\n     }\n }\n \n-pub fn lattice_var_and_t<L:LatticeDir Combine,\n-                         T:Copy InferStr LatticeValue,\n-                         V:Copy Eq ToStr Vid UnifyVid<Bounds<T>>>(\n+pub fn lattice_var_and_t<L:LatticeDir + Combine,\n+                         T:Copy + InferStr + LatticeValue,\n+                         V:Copy + Eq + ToStr + Vid + UnifyVid<Bounds<T>>>(\n     self: &L,\n     +a_id: V,\n     b: &T,"}, {"sha": "4f85718ad1e533b05d43a0d646a8f34e2f1a6f1d", "filename": "src/librustc/middle/typeck/infer/unify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Funify.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -163,8 +163,8 @@ pub fn mk_err<T:SimplyUnifiable>(+a_is_expected: bool,\n }\n \n pub impl InferCtxt {\n-    fn simple_vars<T:Copy Eq InferStr SimplyUnifiable,\n-                   V:Copy Eq Vid ToStr UnifyVid<Option<T>>>(\n+    fn simple_vars<T:Copy + Eq + InferStr + SimplyUnifiable,\n+                   V:Copy + Eq + Vid + ToStr + UnifyVid<Option<T>>>(\n             &mut self,\n             +a_is_expected: bool,\n             +a_id: V,\n@@ -201,8 +201,8 @@ pub impl InferCtxt {\n         return uok();\n     }\n \n-    fn simple_var_t<T:Copy Eq InferStr SimplyUnifiable,\n-                    V:Copy Eq Vid ToStr UnifyVid<Option<T>>>(\n+    fn simple_var_t<T:Copy + Eq + InferStr + SimplyUnifiable,\n+                    V:Copy + Eq + Vid + ToStr + UnifyVid<Option<T>>>(\n             &mut self,\n             +a_is_expected: bool,\n             +a_id: V,"}, {"sha": "80f93323a8ea6938a6b0cf1f6221904b498b38c0", "filename": "src/libstd/flatpipes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibstd%2Fflatpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibstd%2Fflatpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fflatpipes.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -151,7 +151,7 @@ pub mod serial {\n     }\n \n     /// Create a pair of `FlatChan` and `FlatPort`, backed by pipes\n-    pub fn pipe_stream<T: Encodable<DefaultEncoder>\n+    pub fn pipe_stream<T: Encodable<DefaultEncoder> +\n                           Decodable<DefaultDecoder>>(\n                           ) -> (PipePort<T>, PipeChan<T>) {\n         let (port, chan) = pipes::stream();\n@@ -443,17 +443,17 @@ pub mod flatteners {\n     SerializingFlattener\n     */\n \n-    pub fn deserialize_buffer<D: Decoder FromReader,\n-                          T: Decodable<D>>(buf: &[u8]) -> T {\n+    pub fn deserialize_buffer<D: Decoder + FromReader,\n+                              T: Decodable<D>>(buf: &[u8]) -> T {\n         let buf = vec::from_slice(buf);\n         let buf_reader = @BufReader::new(buf);\n         let reader = buf_reader as @Reader;\n         let deser: D = FromReader::from_reader(reader);\n         Decodable::decode(&deser)\n     }\n \n-    pub fn serialize_value<D: Encoder FromWriter,\n-                       T: Encodable<D>>(val: &T) -> ~[u8] {\n+    pub fn serialize_value<D: Encoder + FromWriter,\n+                           T: Encodable<D>>(val: &T) -> ~[u8] {\n         let bytes_writer = @BytesWriter();\n         let writer = bytes_writer as @Writer;\n         let ser = FromWriter::from_writer(writer);"}, {"sha": "a06dee723c86d1dfb2df1d5b1782e8f9979b3748", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 8, "deletions": 20, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -260,9 +260,7 @@ impl Context {\n         Context{db: db, logger: lg, cfg: cfg, freshness: LinearMap::new()}\n     }\n \n-    fn prep<T:Owned\n-              Encodable<json::Encoder>\n-              Decodable<json::Decoder>>(\n+    fn prep<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n                   @self,\n                   fn_name:&str,\n                   blk: fn(@Mut<Prep>)->Work<T>) -> Work<T> {\n@@ -278,9 +276,8 @@ trait TPrep {\n     fn declare_input(&self, kind:&str, name:&str, val:&str);\n     fn is_fresh(&self, cat:&str, kind:&str, name:&str, val:&str) -> bool;\n     fn all_fresh(&self, cat:&str, map:&WorkMap) -> bool;\n-    fn exec<T:Owned\n-        Encodable<json::Encoder>\n-        Decodable<json::Decoder>>(&self, blk: ~fn(&Exec) -> T) -> Work<T>;\n+    fn exec<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n+        &self, blk: ~fn(&Exec) -> T) -> Work<T>;\n }\n \n impl TPrep for @Mut<Prep> {\n@@ -318,11 +315,8 @@ impl TPrep for @Mut<Prep> {\n         return true;\n     }\n \n-    fn exec<T:Owned\n-        Encodable<json::Encoder>\n-        Decodable<json::Decoder>>(&self,\n-                                  blk: ~fn(&Exec) -> T) -> Work<T> {\n-\n+    fn exec<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n+            &self, blk: ~fn(&Exec) -> T) -> Work<T> {\n         let mut bo = Some(blk);\n \n         do self.borrow_imm |p| {\n@@ -360,20 +354,15 @@ impl TPrep for @Mut<Prep> {\n     }\n }\n \n-impl<T:Owned\n-       Encodable<json::Encoder>\n-       Decodable<json::Decoder>>\n-    Work<T> {\n+impl<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>> Work<T> {\n     static fn new(p: @Mut<Prep>, e: Either<T,PortOne<(Exec,T)>>) -> Work<T> {\n         Work { prep: p, res: Some(e) }\n     }\n }\n \n // FIXME (#3724): movable self. This should be in impl Work.\n-fn unwrap<T:Owned\n-            Encodable<json::Encoder>\n-            Decodable<json::Decoder>>(w: Work<T>) -> T {\n-\n+fn unwrap<T:Owned + Encodable<json::Encoder> + Decodable<json::Decoder>>(\n+        w: Work<T>) -> T {\n     let mut ww = w;\n     let mut s = None;\n \n@@ -383,7 +372,6 @@ fn unwrap<T:Owned\n         None => fail!(),\n         Some(Left(v)) => v,\n         Some(Right(port)) => {\n-\n             let (exe, v) = match recv(port) {\n                 oneshot::send(data) => data\n             };"}, {"sha": "f5ee5bd80290715f99679d62fa1624acbd09aba4", "filename": "src/libsyntax/parse/obsolete.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibsyntax%2Fparse%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fobsolete.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -46,7 +46,8 @@ pub enum ObsoleteSyntax {\n     ObsoleteBinaryMove,\n     ObsoleteUnsafeBlock,\n     ObsoleteUnenforcedBound,\n-    ObsoleteImplSyntax\n+    ObsoleteImplSyntax,\n+    ObsoleteTraitBoundSeparator,\n }\n \n pub impl to_bytes::IterBytes for ObsoleteSyntax {\n@@ -120,7 +121,11 @@ pub impl Parser {\n             ObsoleteImplSyntax => (\n                 \"colon-separated impl syntax\",\n                 \"write `impl Trait for Type`\"\n-            )\n+            ),\n+            ObsoleteTraitBoundSeparator => (\n+                \"space-separated trait bounds\",\n+                \"write `+` between trait bounds\"\n+            ),\n         };\n \n         self.report(sp, kind, kind_str, desc);"}, {"sha": "85b4eae25d385819933c584d9fa111638333591b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -75,6 +75,7 @@ use parse::obsolete::{ObsoleteMoveInit, ObsoleteBinaryMove};\n use parse::obsolete::{ObsoleteStructCtor, ObsoleteWith};\n use parse::obsolete::{ObsoleteSyntax, ObsoleteLowerCaseKindBounds};\n use parse::obsolete::{ObsoleteUnsafeBlock, ObsoleteImplSyntax};\n+use parse::obsolete::{ObsoleteTraitBoundSeparator};\n use parse::prec::{as_prec, token_to_binop};\n use parse::token::{can_begin_expr, is_ident, is_ident_or_path};\n use parse::token::{is_plain_ident, INTERPOLATED, special_idents};\n@@ -2676,7 +2677,12 @@ pub impl Parser {\n                 }\n \n                 if self.eat(token::BINOP(token::PLUS)) {\n-                    // Should be `break;` but that isn't backwards compatible.\n+                    loop;\n+                }\n+\n+                if is_ident_or_path(self.token) {\n+                    self.obsolete(copy self.span,\n+                                  ObsoleteTraitBoundSeparator);\n                 }\n             }\n         }"}, {"sha": "e4004c6dc22174202403ec9a8ec318bc47312b52", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -38,8 +38,8 @@ fn test_prettyprint<A:Encodable<prettyprint::Serializer>>(\n }\n \n fn test_ebml<A:\n-    Eq\n-    Encodable<EBWriter::Encoder>\n+    Eq +\n+    Encodable<EBWriter::Encoder> +\n     Decodable<EBReader::Decoder>\n >(a1: &A) {\n     let bytes = do io::with_bytes_writer |wr| {"}, {"sha": "9106d39c592f3e520d1cd33eae98c3bb35b49170", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0218fb10667a198b41e4d140f8d0760e27ca5e7/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=c0218fb10667a198b41e4d140f8d0760e27ca5e7", "patch": "@@ -59,7 +59,7 @@ fn square_from_char(c: char) -> square {\n     }\n }\n \n-fn read_board_grid<rdr: &static io::Reader>(+in: rdr) -> ~[~[square]] {\n+fn read_board_grid<rdr: &static + io::Reader>(+in: rdr) -> ~[~[square]] {\n     let in = (in) as io::Reader;\n     let mut grid = ~[];\n     for in.each_line |line| {"}]}