{"sha": "9ed1829f1fb61695c21474361ec23b9976793b73", "node_id": "C_kwDOAAsO6NoAKDllZDE4MjlmMWZiNjE2OTVjMjE0NzQzNjFlYzIzYjk5NzY3OTNiNzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T22:45:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-17T22:45:08Z"}, "message": "Auto merge of #13792 - Veykril:flycheck, r=Veykril\n\nAdd a command to clear flycheck diagnostics\n\nAnd document the flycheck notifications", "tree": {"sha": "02295c9ef6f926055c3a0fb58bbb82416fa5ca7a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02295c9ef6f926055c3a0fb58bbb82416fa5ca7a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed1829f1fb61695c21474361ec23b9976793b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed1829f1fb61695c21474361ec23b9976793b73", "html_url": "https://github.com/rust-lang/rust/commit/9ed1829f1fb61695c21474361ec23b9976793b73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed1829f1fb61695c21474361ec23b9976793b73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be", "html_url": "https://github.com/rust-lang/rust/commit/e0aa5afd7bd69813154e97a25cb6c6b4f05ea1be"}, {"sha": "cf8d89e46bdd636d0b28f047360943d21e3c6124", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf8d89e46bdd636d0b28f047360943d21e3c6124", "html_url": "https://github.com/rust-lang/rust/commit/cf8d89e46bdd636d0b28f047360943d21e3c6124"}], "stats": {"total": 120, "additions": 85, "deletions": 35}, "files": [{"sha": "835b37c98e2c5455765877566876f4127f589dce", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -1125,11 +1125,8 @@ impl Config {\n         }\n     }\n \n-    pub fn flycheck(&self) -> Option<FlycheckConfig> {\n-        if !self.data.checkOnSave_enable {\n-            return None;\n-        }\n-        let flycheck_config = match &self.data.checkOnSave_overrideCommand {\n+    pub fn flycheck(&self) -> FlycheckConfig {\n+        match &self.data.checkOnSave_overrideCommand {\n             Some(args) if !args.is_empty() => {\n                 let mut args = args.clone();\n                 let command = args.remove(0);\n@@ -1183,8 +1180,11 @@ impl Config {\n                 extra_args: self.data.checkOnSave_extraArgs.clone(),\n                 extra_env: self.check_on_save_extra_env(),\n             },\n-        };\n-        Some(flycheck_config)\n+        }\n+    }\n+\n+    pub fn check_on_save(&self) -> bool {\n+        self.data.checkOnSave_enable\n     }\n \n     pub fn runnables(&self) -> RunnablesConfig {"}, {"sha": "65620b4209b4080113f819b540ba00e6321b10b2", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -132,9 +132,8 @@ pub struct ExpandedMacro {\n \n pub enum CancelFlycheck {}\n \n-impl Request for CancelFlycheck {\n+impl Notification for CancelFlycheck {\n     type Params = ();\n-    type Result = ();\n     const METHOD: &'static str = \"rust-analyzer/cancelFlycheck\";\n }\n \n@@ -145,6 +144,13 @@ impl Notification for RunFlycheck {\n     const METHOD: &'static str = \"rust-analyzer/runFlycheck\";\n }\n \n+pub enum ClearFlycheck {}\n+\n+impl Notification for ClearFlycheck {\n+    type Params = ();\n+    const METHOD: &'static str = \"rust-analyzer/clearFlycheck\";\n+}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct RunFlycheckParams {"}, {"sha": "47776f734b0daad48a5fca8417c1c194cbd03c9d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -581,10 +581,7 @@ impl GlobalState {\n                 // When we're running multiple flychecks, we have to include a disambiguator in\n                 // the title, or the editor complains. Note that this is a user-facing string.\n                 let title = if self.flycheck.len() == 1 {\n-                    match self.config.flycheck() {\n-                        Some(config) => format!(\"{}\", config),\n-                        None => \"cargo check\".to_string(),\n-                    }\n+                    format!(\"{}\", self.config.flycheck())\n                 } else {\n                     format!(\"cargo check (#{})\", id + 1)\n                 };\n@@ -593,7 +590,7 @@ impl GlobalState {\n                     state,\n                     message,\n                     None,\n-                    Some(format!(\"rust-analyzer/checkOnSave/{}\", id)),\n+                    Some(format!(\"rust-analyzer/flycheck/{}\", id)),\n                 );\n             }\n         }\n@@ -638,7 +635,6 @@ impl GlobalState {\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n-            .on_sync_mut::<lsp_ext::CancelFlycheck>(handlers::handle_cancel_flycheck)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n             .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)\n@@ -796,7 +792,7 @@ impl GlobalState {\n             })?\n             .on::<lsp_types::notification::WorkDoneProgressCancel>(|this, params| {\n                 if let lsp_types::NumberOrString::String(s) = &params.token {\n-                    if let Some(id) = s.strip_prefix(\"rust-analyzer/checkOnSave/\") {\n+                    if let Some(id) = s.strip_prefix(\"rust-analyzer/flycheck/\") {\n                         if let Ok(id) = u32::from_str_radix(id, 10) {\n                             if let Some(flycheck) = this.flycheck.get(id as usize) {\n                                 flycheck.cancel();\n@@ -825,6 +821,7 @@ impl GlobalState {\n                 }\n                 Ok(())\n             })?\n+            .on::<lsp_ext::CancelFlycheck>(handlers::handle_cancel_flycheck)?\n             .on::<lsp_types::notification::DidChangeTextDocument>(|this, params| {\n                 if let Ok(path) = from_proto::vfs_path(&params.text_document.uri) {\n                     match this.mem_docs.get_mut(&path) {\n@@ -864,6 +861,10 @@ impl GlobalState {\n                 }\n                 Ok(())\n             })?\n+            .on::<lsp_ext::ClearFlycheck>(|this, ()| {\n+                this.diagnostics.clear_check_all();\n+                Ok(())\n+            })?\n             .on::<lsp_ext::RunFlycheck>(|this, params| {\n                 if let Some(text_document) = params.text_document {\n                     if let Ok(vfs_path) = from_proto::vfs_path(&text_document.uri) {\n@@ -888,14 +889,14 @@ impl GlobalState {\n                         }\n                     }\n \n-                    if run_flycheck(this, vfs_path) {\n+                    if !this.config.check_on_save() || run_flycheck(this, vfs_path) {\n                         return Ok(());\n                     }\n-                }\n-\n-                // No specific flycheck was triggered, so let's trigger all of them.\n-                for flycheck in this.flycheck.iter() {\n-                    flycheck.restart();\n+                } else if this.config.check_on_save() {\n+                    // No specific flycheck was triggered, so let's trigger all of them.\n+                    for flycheck in this.flycheck.iter() {\n+                        flycheck.restart();\n+                    }\n                 }\n                 Ok(())\n             })?"}, {"sha": "3e7664d7d3e877ec55acaeb7d3b9e86801c2b018", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -449,15 +449,7 @@ impl GlobalState {\n \n     fn reload_flycheck(&mut self) {\n         let _p = profile::span(\"GlobalState::reload_flycheck\");\n-        let config = match self.config.flycheck() {\n-            Some(it) => it,\n-            None => {\n-                self.flycheck = Arc::new([]);\n-                self.diagnostics.clear_check_all();\n-                return;\n-            }\n-        };\n-\n+        let config = self.config.flycheck();\n         let sender = self.flycheck_sender.clone();\n         let invocation_strategy = match config {\n             FlycheckConfig::CargoCommand { .. } => flycheck::InvocationStrategy::PerWorkspace,"}, {"sha": "1bbb4c2323c00d6ea0470ffd8d9009daa22b54ab", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 1cb29d3afa36e743\n+lsp_ext.rs hash: 45bd7985265725c5\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:\n@@ -459,6 +459,45 @@ Note that this functionality is intended primarily to inform the end user about\n In particular, it's valid for the client to completely ignore this extension.\n Clients are discouraged from but are allowed to use the `health` status to decide if it's worth sending a request to the server.\n \n+### Controlling Flycheck\n+\n+The flycheck/checkOnSave feature can be controlled via notifications sent by the client to the server.\n+\n+**Method:** `rust-analyzer/runFlycheck`\n+\n+**Notification:**\n+\n+```typescript\n+interface RunFlycheckParams {\n+    /// The text document whose cargo workspace flycheck process should be started.\n+    /// If the document is null or does not belong to a cargo workspace all flycheck processes will be started.\n+    textDocument: lc.TextDocumentIdentifier | null;\n+}\n+```\n+\n+Triggers the flycheck processes.\n+\n+\n+**Method:** `rust-analyzer/clearFlycheck`\n+\n+**Notification:**\n+\n+```typescript\n+interface ClearFlycheckParams {}\n+```\n+\n+Clears the flycheck diagnostics.\n+\n+**Method:** `rust-analyzer/cancelFlycheck`\n+\n+**Notification:**\n+\n+```typescript\n+interface CancelFlycheckParams {}\n+```\n+\n+Cancels all running flycheck processes.\n+\n ## Syntax Tree\n \n **Method:** `rust-analyzer/syntaxTree`"}, {"sha": "f9b0e28dadb7d43a4a5192df208df39b03bee947", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -251,6 +251,11 @@\n                 \"command\": \"rust-analyzer.runFlycheck\",\n                 \"title\": \"Run flycheck\",\n                 \"category\": \"rust-analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.clearFlycheck\",\n+                \"title\": \"Clear flycheck diagnostics\",\n+                \"category\": \"rust-analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "cb4e13e2c6043587afd7c713f2e720c8fd273b87", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -788,7 +788,13 @@ export function openDocs(ctx: CtxInit): Cmd {\n \n export function cancelFlycheck(ctx: CtxInit): Cmd {\n     return async () => {\n-        await ctx.client.sendRequest(ra.cancelFlycheck);\n+        await ctx.client.sendNotification(ra.cancelFlycheck);\n+    };\n+}\n+\n+export function clearFlycheck(ctx: CtxInit): Cmd {\n+    return async () => {\n+        await ctx.client.sendNotification(ra.clearFlycheck);\n     };\n }\n "}, {"sha": "29349cc20f5b096dabbf94c84cb52e7bada2d509", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -79,8 +79,8 @@ export const relatedTests = new lc.RequestType<lc.TextDocumentPositionParams, Te\n     \"rust-analyzer/relatedTests\"\n );\n \n-export const cancelFlycheck = new lc.RequestType0<void, void>(\"rust-analyzer/cancelFlycheck\");\n-\n+export const cancelFlycheck = new lc.NotificationType0(\"rust-analyzer/cancelFlycheck\");\n+export const clearFlycheck = new lc.NotificationType0(\"rust-analyzer/clearFlycheck\");\n export const runFlycheck = new lc.NotificationType<{\n     textDocument: lc.TextDocumentIdentifier | null;\n }>(\"rust-analyzer/runFlycheck\");"}, {"sha": "9a9667b2cd20f0fae8928d260649bf41e8d0d876", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/9ed1829f1fb61695c21474361ec23b9976793b73/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=9ed1829f1fb61695c21474361ec23b9976793b73", "patch": "@@ -150,6 +150,7 @@ function createCommands(): Record<string, CommandFactory> {\n         moveItemUp: { enabled: commands.moveItemUp },\n         moveItemDown: { enabled: commands.moveItemDown },\n         cancelFlycheck: { enabled: commands.cancelFlycheck },\n+        clearFlycheck: { enabled: commands.clearFlycheck },\n         runFlycheck: { enabled: commands.runFlycheck },\n         ssr: { enabled: commands.ssr },\n         serverVersion: { enabled: commands.serverVersion },"}]}