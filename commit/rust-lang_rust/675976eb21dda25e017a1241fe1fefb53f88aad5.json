{"sha": "675976eb21dda25e017a1241fe1fefb53f88aad5", "node_id": "C_kwDOAAsO6NoAKDY3NTk3NmViMjFkZGEyNWUwMTdhMTI0MWZlMWZlZmI1M2Y4OGFhZDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-02-06T14:24:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-06T14:24:15Z"}, "message": "Rollup merge of #107685 - jieyouxu:issue-90027, r=compiler-errors\n\nSuggest adding a return type for async functions\n\nFixes #90027.", "tree": {"sha": "224701fd45cf26394d1d4a9990562c273a6e5eab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224701fd45cf26394d1d4a9990562c273a6e5eab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/675976eb21dda25e017a1241fe1fefb53f88aad5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj4Q2PCRBK7hj4Ov3rIwAATfcIAHCAeRImYyTGAAjuYWT9WcUs\nozWahRoo6hqLqdqFIzmVPkhVAIU54JcXar5b3YO3lG6cTKaCUsqjj60RS2mBaqbP\nvazd93tf7YUUUFOhUqQY9kkmXVsZyrditqbadU2E2KEDleih9OQhQkGOYhe7TQy+\nmj4ZDLbeBaEtjJX8YMkUzswjvLIdil4RvXv5y5QrBkOVMiQ7lqgOgjr6JARJyeV6\nFegxN6QyVIvCBXjkKGlaq9E/TpPp5kVQ8nk/UXdgAesOy6TJwZY+40CzgKfDlMf5\nT+c6dX1fGi7mkw3eI9cwpgYokqqcyny6jSfiLEZY+8XzopyP2Z988iPOymYIQWo=\n=YAWQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 224701fd45cf26394d1d4a9990562c273a6e5eab\nparent fc791cb2096e36c9db6d8eced5b217f12688897b\nparent 6b05b80690fe6548b49da46f85b9ec7b1ea95e7e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1675693455 +0530\ncommitter GitHub <noreply@github.com> 1675693455 +0530\n\nRollup merge of #107685 - jieyouxu:issue-90027, r=compiler-errors\n\nSuggest adding a return type for async functions\n\nFixes #90027.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/675976eb21dda25e017a1241fe1fefb53f88aad5", "html_url": "https://github.com/rust-lang/rust/commit/675976eb21dda25e017a1241fe1fefb53f88aad5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/675976eb21dda25e017a1241fe1fefb53f88aad5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc791cb2096e36c9db6d8eced5b217f12688897b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc791cb2096e36c9db6d8eced5b217f12688897b", "html_url": "https://github.com/rust-lang/rust/commit/fc791cb2096e36c9db6d8eced5b217f12688897b"}, {"sha": "6b05b80690fe6548b49da46f85b9ec7b1ea95e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b05b80690fe6548b49da46f85b9ec7b1ea95e7e", "html_url": "https://github.com/rust-lang/rust/commit/6b05b80690fe6548b49da46f85b9ec7b1ea95e7e"}], "stats": {"total": 103, "additions": 102, "deletions": 1}, "files": [{"sha": "e84b3de124c58070388d3b741de2630569a215ff", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/675976eb21dda25e017a1241fe1fefb53f88aad5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675976eb21dda25e017a1241fe1fefb53f88aad5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=675976eb21dda25e017a1241fe1fefb53f88aad5", "patch": "@@ -921,6 +921,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 kind: hir::ImplItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, false)),\n+            Node::Expr(&hir::Expr {\n+                hir_id,\n+                kind: hir::ExprKind::Closure(..),\n+                ..\n+            }) if let Some(Node::Expr(&hir::Expr {\n+                hir_id,\n+                kind: hir::ExprKind::Call(..),\n+                ..\n+            })) = self.tcx.hir().find_parent(hir_id) &&\n+            let Some(Node::Item(&hir::Item {\n+                ident,\n+                kind: hir::ItemKind::Fn(ref sig, ..),\n+                ..\n+            })) = self.tcx.hir().find_parent(hir_id) => {\n+                Some((&sig.decl, ident, ident.name != sym::main))\n+            },\n             _ => None,\n         }\n     }"}, {"sha": "51e3e3ec73db9d994a84c512645bd2ffbc2abca2", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/675976eb21dda25e017a1241fe1fefb53f88aad5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675976eb21dda25e017a1241fe1fefb53f88aad5/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=675976eb21dda25e017a1241fe1fefb53f88aad5", "patch": "@@ -705,10 +705,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             hir::FnRetTy::Return(ty) => {\n+                let span = ty.span;\n+\n+                if let hir::TyKind::OpaqueDef(item_id, ..) = ty.kind\n+                && let hir::Node::Item(hir::Item {\n+                    kind: hir::ItemKind::OpaqueTy(op_ty),\n+                    ..\n+                }) = self.tcx.hir().get(item_id.hir_id())\n+                && let hir::OpaqueTy {\n+                    bounds: [bound], ..\n+                } = op_ty\n+                && let hir::GenericBound::LangItemTrait(\n+                    hir::LangItem::Future, _, _, generic_args) = bound\n+                && let hir::GenericArgs { bindings: [ty_binding], .. } = generic_args\n+                && let hir::TypeBinding { kind, .. } = ty_binding\n+                && let hir::TypeBindingKind::Equality { term } = kind\n+                && let hir::Term::Ty(term_ty) = term {\n+                    // Check if async function's return type was omitted.\n+                    // Don't emit suggestions if the found type is `impl Future<...>`.\n+                    debug!(\"suggest_missing_return_type: found = {:?}\", found);\n+                    if found.is_suggestable(self.tcx, false) {\n+                        if term_ty.span.is_empty() {\n+                            err.subdiagnostic(AddReturnTypeSuggestion::Add { span, found: found.to_string() });\n+                            return true;\n+                        } else {\n+                            err.subdiagnostic(ExpectedReturnTypeLabel::Other { span, expected });\n+                        }\n+                    }\n+                }\n+\n                 // Only point to return type if the expected type is the return type, as if they\n                 // are not, the expectation must have been caused by something else.\n                 debug!(\"suggest_missing_return_type: return type {:?} node {:?}\", ty, ty.kind);\n-                let span = ty.span;\n                 let ty = self.astconv().ast_ty_to_ty(ty);\n                 debug!(\"suggest_missing_return_type: return type {:?}\", ty);\n                 debug!(\"suggest_missing_return_type: expected type {:?}\", ty);"}, {"sha": "8ccb15ca48a4fc8777a50d9c0d66e63c0de626b7", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/675976eb21dda25e017a1241fe1fefb53f88aad5/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/675976eb21dda25e017a1241fe1fefb53f88aad5/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.rs?ref=675976eb21dda25e017a1241fe1fefb53f88aad5", "patch": "@@ -0,0 +1,21 @@\n+// edition:2018\n+\n+async fn hello() { //~ HELP try adding a return type\n+    0\n+    //~^ ERROR [E0308]\n+}\n+\n+async fn world() -> () {\n+    0\n+    //~^ ERROR [E0308]\n+}\n+\n+async fn suggest_await_in_async_fn_return() {\n+    hello()\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP consider `await`ing on the `Future`\n+    //~| HELP consider using a semicolon here\n+    //~| SUGGESTION .await\n+}\n+\n+fn main() {}"}, {"sha": "6a1a9f45bc62b1846dffc5b74e0eaf7a19e7d0cb", "filename": "tests/ui/typeck/issue-90027-async-fn-return-suggestion.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/675976eb21dda25e017a1241fe1fefb53f88aad5/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/675976eb21dda25e017a1241fe1fefb53f88aad5/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-90027-async-fn-return-suggestion.stderr?ref=675976eb21dda25e017a1241fe1fefb53f88aad5", "patch": "@@ -0,0 +1,36 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:4:5\n+   |\n+LL | async fn hello() {\n+   |                  - help: try adding a return type: `-> i32`\n+LL |     0\n+   |     ^ expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:9:5\n+   |\n+LL | async fn world() -> () {\n+   |                     -- expected `()` because of return type\n+LL |     0\n+   |     ^ expected `()`, found integer\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-90027-async-fn-return-suggestion.rs:14:5\n+   |\n+LL |     hello()\n+   |     ^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl Future<Output = ()>`\n+help: consider `await`ing on the `Future`\n+   |\n+LL |     hello().await\n+   |            ++++++\n+help: consider using a semicolon here\n+   |\n+LL |     hello();\n+   |            +\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}