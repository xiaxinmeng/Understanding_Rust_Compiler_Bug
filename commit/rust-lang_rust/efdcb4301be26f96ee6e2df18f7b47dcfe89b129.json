{"sha": "efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZGNiNDMwMWJlMjZmOTZlZTZlMmRmMThmN2I0N2RjZmU4OWIxMjk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-02-18T15:57:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-18T15:57:43Z"}, "message": "Rollup merge of #82256 - eddyb:time-passes-stderr, r=varkor\n\nPrint -Ztime-passes (and misc stats/logs) on stderr, not stdout.\n\nI've tried not to change anything that looked similar to `rustc --print`, where people might use automation, and/or any \"bulk\" prints, such as dumping an entire Graphviz (`dot`) graph on stdout.\n\nThe reason I want `-Ztime-passes` to be on stderr like debug logging is I can get a complete (and correctly interleaved) view just by looking at stderr, which is merely a convenience when running `rustc`/Cargo directly, but even more important when it's nested in a build script, as Cargo will split the build script output into stdout (named `output`) and `stderr`.", "tree": {"sha": "55327092c7e615916a77097f6e9bcda60b139266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55327092c7e615916a77097f6e9bcda60b139266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgLo53CRBK7hj4Ov3rIwAAdHIIAD2WNEvv95e34t/udnQbYnhR\nLuSas4aPoJZrHED/OuiFlVktQ6jSr4K0XIFVL8fUPrMbP5CIAwtHMtyZQuSHBkhn\nf5+HbIYiK/UlwenIvZBtWPrpAGptCn9cvIUE7QFLB+ZVex3naGs1he8bOdN4Kbam\naadlwXiu0oBXtHihTnoP9xiFxb6qPahJPYo65cR4ftZqclAUJpzMrdZDIll2AaB/\nyYA81L7/FKqkPRYGcdFe7WJSQ2eQfCZ0z7YJgZfegaR6Bljq0q5FDK9X2RGsvuMj\na0gtxn4DRB1WyoWTVWOc/dOxDkYWceOcLiplFQnV/uF7nExIWgcjeps7S2050w8=\n=L03o\n-----END PGP SIGNATURE-----\n", "payload": "tree 55327092c7e615916a77097f6e9bcda60b139266\nparent 555db2da70fb10103263148d678a72901a455d50\nparent 6165d1cc72f8af55b3ef16ad81273b80876f9518\nauthor Dylan DPC <dylan.dpc@gmail.com> 1613663863 +0100\ncommitter GitHub <noreply@github.com> 1613663863 +0100\n\nRollup merge of #82256 - eddyb:time-passes-stderr, r=varkor\n\nPrint -Ztime-passes (and misc stats/logs) on stderr, not stdout.\n\nI've tried not to change anything that looked similar to `rustc --print`, where people might use automation, and/or any \"bulk\" prints, such as dumping an entire Graphviz (`dot`) graph on stdout.\n\nThe reason I want `-Ztime-passes` to be on stderr like debug logging is I can get a complete (and correctly interleaved) view just by looking at stderr, which is merely a convenience when running `rustc`/Cargo directly, but even more important when it's nested in a build script, as Cargo will split the build script output into stdout (named `output`) and `stderr`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "html_url": "https://github.com/rust-lang/rust/commit/efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555db2da70fb10103263148d678a72901a455d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/555db2da70fb10103263148d678a72901a455d50", "html_url": "https://github.com/rust-lang/rust/commit/555db2da70fb10103263148d678a72901a455d50"}, {"sha": "6165d1cc72f8af55b3ef16ad81273b80876f9518", "url": "https://api.github.com/repos/rust-lang/rust/commits/6165d1cc72f8af55b3ef16ad81273b80876f9518", "html_url": "https://github.com/rust-lang/rust/commit/6165d1cc72f8af55b3ef16ad81273b80876f9518"}], "stats": {"total": 128, "additions": 64, "deletions": 64}, "files": [{"sha": "51f851dc9469fe10dc0a07fea8d21e20c8a71b4a", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -608,7 +608,7 @@ pub fn print_time_passes_entry(\n         (None, None) => String::new(),\n     };\n \n-    println!(\"time: {:>7}{}\\t{}\", duration_to_secs_str(dur), mem_string, what);\n+    eprintln!(\"time: {:>7}{}\\t{}\", duration_to_secs_str(dur), mem_string, what);\n }\n \n // Hack up our own formatting for the duration to make it easier for scripts"}, {"sha": "374a9eb41e5c72be10ab654acc630b304649d21e", "filename": "compiler/rustc_incremental/src/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffile_format.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -109,7 +109,7 @@ fn report_format_mismatch(report_incremental_info: bool, file: &Path, message: &\n     debug!(\"read_file: {}\", message);\n \n     if report_incremental_info {\n-        println!(\n+        eprintln!(\n             \"[incremental] ignoring cache artifact `{}`: {}\",\n             file.file_name().unwrap().to_string_lossy(),\n             message"}, {"sha": "c7a6c1195c5033cef24a587f55c5e098d0530567", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -440,12 +440,12 @@ fn copy_files(sess: &Session, target_dir: &Path, source_dir: &Path) -> Result<bo\n     }\n \n     if sess.opts.debugging_opts.incremental_info {\n-        println!(\n+        eprintln!(\n             \"[incremental] session directory: \\\n                   {} files hard-linked\",\n             files_linked\n         );\n-        println!(\n+        eprintln!(\n             \"[incremental] session directory: \\\n                  {} files copied\",\n             files_copied"}, {"sha": "2b5649bb0594f57de4d749f630278bb4026c8288", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -170,7 +170,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n \n                 if prev_commandline_args_hash != expected_hash {\n                     if report_incremental_info {\n-                        println!(\n+                        eprintln!(\n                             \"[incremental] completely ignoring cache because of \\\n                                     differing commandline arguments\"\n                         );"}, {"sha": "ed5061125ba9ee7fa165efbb9ef004b563b3e17e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -64,8 +64,8 @@ pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     }\n \n     if sess.opts.debugging_opts.input_stats {\n-        println!(\"Lines of code:             {}\", sess.source_map().count_lines());\n-        println!(\"Pre-expansion node count:  {}\", count_nodes(&krate));\n+        eprintln!(\"Lines of code:             {}\", sess.source_map().count_lines());\n+        eprintln!(\"Pre-expansion node count:  {}\", count_nodes(&krate));\n     }\n \n     if let Some(ref s) = sess.opts.debugging_opts.show_span {\n@@ -394,7 +394,7 @@ fn configure_and_expand_inner<'a>(\n     // Done with macro expansion!\n \n     if sess.opts.debugging_opts.input_stats {\n-        println!(\"Post-expansion node count: {}\", count_nodes(&krate));\n+        eprintln!(\"Post-expansion node count: {}\", count_nodes(&krate));\n     }\n \n     if sess.opts.debugging_opts.hir_stats {"}, {"sha": "61265d7204c0b2773814a709f72fa4272597c8f4", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -695,23 +695,23 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 }\n             }\n \n-            println!(\"metadata stats:\");\n-            println!(\"             dep bytes: {}\", dep_bytes);\n-            println!(\"     lib feature bytes: {}\", lib_feature_bytes);\n-            println!(\"       lang item bytes: {}\", lang_item_bytes);\n-            println!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n-            println!(\"          native bytes: {}\", native_lib_bytes);\n-            println!(\"      source_map bytes: {}\", source_map_bytes);\n-            println!(\"            impl bytes: {}\", impl_bytes);\n-            println!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n-            println!(\"  def-path table bytes: {}\", def_path_table_bytes);\n-            println!(\" proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n-            println!(\"             mir bytes: {}\", mir_bytes);\n-            println!(\"            item bytes: {}\", item_bytes);\n-            println!(\"           table bytes: {}\", tables_bytes);\n-            println!(\"         hygiene bytes: {}\", hygiene_bytes);\n-            println!(\"            zero bytes: {}\", zero_bytes);\n-            println!(\"           total bytes: {}\", total_bytes);\n+            eprintln!(\"metadata stats:\");\n+            eprintln!(\"             dep bytes: {}\", dep_bytes);\n+            eprintln!(\"     lib feature bytes: {}\", lib_feature_bytes);\n+            eprintln!(\"       lang item bytes: {}\", lang_item_bytes);\n+            eprintln!(\" diagnostic item bytes: {}\", diagnostic_item_bytes);\n+            eprintln!(\"          native bytes: {}\", native_lib_bytes);\n+            eprintln!(\"      source_map bytes: {}\", source_map_bytes);\n+            eprintln!(\"            impl bytes: {}\", impl_bytes);\n+            eprintln!(\"    exp. symbols bytes: {}\", exported_symbols_bytes);\n+            eprintln!(\"  def-path table bytes: {}\", def_path_table_bytes);\n+            eprintln!(\" proc-macro-data-bytes: {}\", proc_macro_data_bytes);\n+            eprintln!(\"             mir bytes: {}\", mir_bytes);\n+            eprintln!(\"            item bytes: {}\", item_bytes);\n+            eprintln!(\"           table bytes: {}\", tables_bytes);\n+            eprintln!(\"         hygiene bytes: {}\", hygiene_bytes);\n+            eprintln!(\"            zero bytes: {}\", zero_bytes);\n+            eprintln!(\"           total bytes: {}\", total_bytes);\n         }\n \n         root"}, {"sha": "29ec9c132a89c0b6e6c7761558ff9772dbf8a364", "filename": "compiler/rustc_middle/src/ty/query/stats.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fstats.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -67,29 +67,29 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n     if cfg!(debug_assertions) {\n         let hits: usize = queries.iter().map(|s| s.cache_hits).sum();\n         let results: usize = queries.iter().map(|s| s.entry_count).sum();\n-        println!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n+        eprintln!(\"\\nQuery cache hit rate: {}\", hits as f64 / (hits + results) as f64);\n     }\n \n     let mut query_key_sizes = queries.clone();\n     query_key_sizes.sort_by_key(|q| q.key_size);\n-    println!(\"\\nLarge query keys:\");\n+    eprintln!(\"\\nLarge query keys:\");\n     for q in query_key_sizes.iter().rev().filter(|q| q.key_size > 8) {\n-        println!(\"   {} - {} x {} - {}\", q.name, q.key_size, q.entry_count, q.key_type);\n+        eprintln!(\"   {} - {} x {} - {}\", q.name, q.key_size, q.entry_count, q.key_type);\n     }\n \n     let mut query_value_sizes = queries.clone();\n     query_value_sizes.sort_by_key(|q| q.value_size);\n-    println!(\"\\nLarge query values:\");\n+    eprintln!(\"\\nLarge query values:\");\n     for q in query_value_sizes.iter().rev().filter(|q| q.value_size > 8) {\n-        println!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n+        eprintln!(\"   {} - {} x {} - {}\", q.name, q.value_size, q.entry_count, q.value_type);\n     }\n \n     if cfg!(debug_assertions) {\n         let mut query_cache_hits = queries.clone();\n         query_cache_hits.sort_by_key(|q| q.cache_hits);\n-        println!(\"\\nQuery cache hits:\");\n+        eprintln!(\"\\nQuery cache hits:\");\n         for q in query_cache_hits.iter().rev() {\n-            println!(\n+            eprintln!(\n                 \"   {} - {} ({}%)\",\n                 q.name,\n                 q.cache_hits,\n@@ -100,19 +100,19 @@ pub fn print_stats(tcx: TyCtxt<'_>) {\n \n     let mut query_value_count = queries.clone();\n     query_value_count.sort_by_key(|q| q.entry_count);\n-    println!(\"\\nQuery value count:\");\n+    eprintln!(\"\\nQuery value count:\");\n     for q in query_value_count.iter().rev() {\n-        println!(\"   {} - {}\", q.name, q.entry_count);\n+        eprintln!(\"   {} - {}\", q.name, q.entry_count);\n     }\n \n     let mut def_id_density: Vec<_> =\n         queries.iter().filter(|q| q.local_def_id_keys.is_some()).collect();\n     def_id_density.sort_by_key(|q| q.local_def_id_keys.unwrap());\n-    println!(\"\\nLocal DefId density:\");\n+    eprintln!(\"\\nLocal DefId density:\");\n     let total = tcx.hir().definitions().def_index_count() as f64;\n     for q in def_id_density.iter().rev() {\n         let local = q.local_def_id_keys.unwrap();\n-        println!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);\n+        eprintln!(\"   {} - {} = ({}%)\", q.name, local, (local as f64 * 100.0) / total);\n     }\n }\n "}, {"sha": "7a9bfaad88367528bb9544684c2d51828f80259a", "filename": "compiler/rustc_mir/src/transform/coverage/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcoverage%2Ftests.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -327,7 +327,7 @@ macro_rules! assert_successors {\n fn test_covgraph_goto_switchint() {\n     let mir_body = goto_switchint();\n     if false {\n-        println!(\"basic_blocks = {}\", debug_basic_blocks(&mir_body));\n+        eprintln!(\"basic_blocks = {}\", debug_basic_blocks(&mir_body));\n     }\n     let basic_coverage_blocks = graph::CoverageGraph::from_mir(&mir_body);\n     print_coverage_graphviz(\"covgraph_goto_switchint \", &mir_body, &basic_coverage_blocks);\n@@ -583,11 +583,11 @@ fn test_find_loop_backedges_none() {\n     let mir_body = goto_switchint();\n     let basic_coverage_blocks = graph::CoverageGraph::from_mir(&mir_body);\n     if false {\n-        println!(\n+        eprintln!(\n             \"basic_coverage_blocks = {:?}\",\n             basic_coverage_blocks.iter_enumerated().collect::<Vec<_>>()\n         );\n-        println!(\"successors = {:?}\", basic_coverage_blocks.successors);\n+        eprintln!(\"successors = {:?}\", basic_coverage_blocks.successors);\n     }\n     let backedges = graph::find_loop_backedges(&basic_coverage_blocks);\n     assert_eq!("}, {"sha": "8d5a5bdf6b71248603af3c83de8419ce107375d2", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -66,13 +66,13 @@ impl<'k> StatCollector<'k> {\n \n         let mut total_size = 0;\n \n-        println!(\"\\n{}\\n\", title);\n+        eprintln!(\"\\n{}\\n\", title);\n \n-        println!(\"{:<18}{:>18}{:>14}{:>14}\", \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\");\n-        println!(\"----------------------------------------------------------------\");\n+        eprintln!(\"{:<18}{:>18}{:>14}{:>14}\", \"Name\", \"Accumulated Size\", \"Count\", \"Item Size\");\n+        eprintln!(\"----------------------------------------------------------------\");\n \n         for (label, data) in stats {\n-            println!(\n+            eprintln!(\n                 \"{:<18}{:>18}{:>14}{:>14}\",\n                 label,\n                 to_readable_str(data.count * data.size),\n@@ -82,8 +82,8 @@ impl<'k> StatCollector<'k> {\n \n             total_size += data.count * data.size;\n         }\n-        println!(\"----------------------------------------------------------------\");\n-        println!(\"{:<18}{:>18}\\n\", \"Total\", to_readable_str(total_size));\n+        eprintln!(\"----------------------------------------------------------------\");\n+        eprintln!(\"{:<18}{:>18}\\n\", \"Total\", to_readable_str(total_size));\n     }\n }\n "}, {"sha": "b13aa2f6ccbac36f84cb59f18882b9ab07be7308", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -964,29 +964,29 @@ impl<K: DepKind> DepGraph<K> {\n                                  ----------------------------------------------\\\n                                  ------------\";\n \n-        println!(\"[incremental]\");\n-        println!(\"[incremental] DepGraph Statistics\");\n-        println!(\"{}\", SEPARATOR);\n-        println!(\"[incremental]\");\n-        println!(\"[incremental] Total Node Count: {}\", total_node_count);\n-        println!(\"[incremental] Total Edge Count: {}\", total_edge_count);\n+        eprintln!(\"[incremental]\");\n+        eprintln!(\"[incremental] DepGraph Statistics\");\n+        eprintln!(\"{}\", SEPARATOR);\n+        eprintln!(\"[incremental]\");\n+        eprintln!(\"[incremental] Total Node Count: {}\", total_node_count);\n+        eprintln!(\"[incremental] Total Edge Count: {}\", total_edge_count);\n \n         if cfg!(debug_assertions) {\n             let total_edge_reads = current.total_read_count.load(Relaxed);\n             let total_duplicate_edge_reads = current.total_duplicate_read_count.load(Relaxed);\n \n-            println!(\"[incremental] Total Edge Reads: {}\", total_edge_reads);\n-            println!(\"[incremental] Total Duplicate Edge Reads: {}\", total_duplicate_edge_reads);\n+            eprintln!(\"[incremental] Total Edge Reads: {}\", total_edge_reads);\n+            eprintln!(\"[incremental] Total Duplicate Edge Reads: {}\", total_duplicate_edge_reads);\n         }\n \n-        println!(\"[incremental]\");\n+        eprintln!(\"[incremental]\");\n \n-        println!(\n+        eprintln!(\n             \"[incremental]  {:<36}| {:<17}| {:<12}| {:<17}|\",\n             \"Node Kind\", \"Node Frequency\", \"Node Count\", \"Avg. Edge Count\"\n         );\n \n-        println!(\n+        eprintln!(\n             \"[incremental] -------------------------------------\\\n                   |------------------\\\n                   |-------------\\\n@@ -997,7 +997,7 @@ impl<K: DepKind> DepGraph<K> {\n             let node_kind_ratio = (100.0 * (stat.node_counter as f64)) / (total_node_count as f64);\n             let node_kind_avg_edges = (stat.edge_counter as f64) / (stat.node_counter as f64);\n \n-            println!(\n+            eprintln!(\n                 \"[incremental]  {:<36}|{:>16.1}% |{:>12} |{:>17.1} |\",\n                 format!(\"{:?}\", stat.kind),\n                 node_kind_ratio,\n@@ -1006,8 +1006,8 @@ impl<K: DepKind> DepGraph<K> {\n             );\n         }\n \n-        println!(\"{}\", SEPARATOR);\n-        println!(\"[incremental]\");\n+        eprintln!(\"{}\", SEPARATOR);\n+        eprintln!(\"[incremental]\");\n     }\n \n     fn next_virtual_depnode_index(&self) -> DepNodeIndex {"}, {"sha": "823aa61c4705daae510050eea3c1b4e6ec2af85f", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -959,19 +959,19 @@ impl Session {\n     }\n \n     pub fn print_perf_stats(&self) {\n-        println!(\n+        eprintln!(\n             \"Total time spent computing symbol hashes:      {}\",\n             duration_to_secs_str(*self.perf_stats.symbol_hash_time.lock())\n         );\n-        println!(\n+        eprintln!(\n             \"Total queries canonicalized:                   {}\",\n             self.perf_stats.queries_canonicalized.load(Ordering::Relaxed)\n         );\n-        println!(\n+        eprintln!(\n             \"normalize_generic_arg_after_erasing_regions:   {}\",\n             self.perf_stats.normalize_generic_arg_after_erasing_regions.load(Ordering::Relaxed)\n         );\n-        println!(\n+        eprintln!(\n             \"normalize_projection_ty:                       {}\",\n             self.perf_stats.normalize_projection_ty.load(Ordering::Relaxed)\n         );"}, {"sha": "0aca677248b7291530e6f19f9b1e8e9f6ffb752a", "filename": "compiler/rustc_span/src/source_map/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efdcb4301be26f96ee6e2df18f7b47dcfe89b129/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map%2Ftests.rs?ref=efdcb4301be26f96ee6e2df18f7b47dcfe89b129", "patch": "@@ -243,7 +243,7 @@ impl SourceMapExtension for SourceMap {\n         substring: &str,\n         n: usize,\n     ) -> Span {\n-        println!(\n+        eprintln!(\n             \"span_substr(file={:?}/{:?}, substring={:?}, n={})\",\n             file.name, file.start_pos, substring, n\n         );"}]}