{"sha": "11580ced403211c8c422a952a2c5dabedf6812d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNTgwY2VkNDAzMjExYzhjNDIyYTk1MmEyYzVkYWJlZGY2ODEyZDY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T17:11:05Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-11-16T22:11:28Z"}, "message": "Address review comments", "tree": {"sha": "8d8bac55b4a4a793af8c1a94036537bb39acb31f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d8bac55b4a4a793af8c1a94036537bb39acb31f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11580ced403211c8c422a952a2c5dabedf6812d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11580ced403211c8c422a952a2c5dabedf6812d6", "html_url": "https://github.com/rust-lang/rust/commit/11580ced403211c8c422a952a2c5dabedf6812d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11580ced403211c8c422a952a2c5dabedf6812d6/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a699f17483baeff87dc027331bce9a552a6b0624", "url": "https://api.github.com/repos/rust-lang/rust/commits/a699f17483baeff87dc027331bce9a552a6b0624", "html_url": "https://github.com/rust-lang/rust/commit/a699f17483baeff87dc027331bce9a552a6b0624"}], "stats": {"total": 24, "additions": 11, "deletions": 13}, "files": [{"sha": "a56a7bf1802c77b8b70f5b1d30324b9b7f335e06", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=11580ced403211c8c422a952a2c5dabedf6812d6", "patch": "@@ -1073,6 +1073,9 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    /// Returns a string literal if the next token is a string literal.\n+    /// In case of error returns `Some(lit)` if the next token is a literal with a wrong kind,\n+    /// and returns `None` if the next token is not literal at all.\n     pub fn parse_str_lit(&mut self) -> Result<ast::StrLit, Option<Lit>> {\n         match self.parse_opt_lit() {\n             Some(lit) => match lit.kind {"}, {"sha": "bbf00825acb3376874e809690c022a4edb79e796", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=11580ced403211c8c422a952a2c5dabedf6812d6", "patch": "@@ -2448,10 +2448,7 @@ pub enum Extern {\n \n impl Extern {\n     pub fn from_abi(abi: Option<StrLit>) -> Extern {\n-        match abi {\n-            Some(abi) => Extern::Explicit(abi),\n-            None => Extern::Implicit,\n-        }\n+        abi.map_or(Extern::Implicit, Extern::Explicit)\n     }\n }\n "}, {"sha": "bd345a9a7dada11c83573e30517fcf0d5e3a412e", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=11580ced403211c8c422a952a2c5dabedf6812d6", "patch": "@@ -72,9 +72,8 @@ fn parse_asm_str<'a>(p: &mut Parser<'a>) -> PResult<'a, Symbol> {\n         Ok(str_lit) => Ok(str_lit.symbol_unescaped),\n         Err(opt_lit) => {\n             let span = opt_lit.map_or(p.token.span, |lit| lit.span);\n-            let msg = \"expected string literal\";\n-            let mut err = p.sess.span_diagnostic.struct_span_fatal(span, msg);\n-            err.span_label(span, msg);\n+            let mut err = p.sess.span_diagnostic.struct_span_err(span, \"expected string literal\");\n+            err.span_label(span, \"not a string literal\");\n             Err(err)\n         }\n     }"}, {"sha": "86eaeeab5a426ec4b27199860928c336a5268f54", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=11580ced403211c8c422a952a2c5dabedf6812d6", "patch": "@@ -570,7 +570,6 @@ symbols! {\n         rust_2018_preview,\n         rust_begin_unwind,\n         rustc,\n-        Rust,\n         RustcDecodable,\n         RustcEncodable,\n         rustc_allocator,"}, {"sha": "2b29332fef5e524adcec3bc4ecf2c0b19faa5ba6", "filename": "src/test/ui/asm/asm-parse-errors.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11580ced403211c8c422a952a2c5dabedf6812d6/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fasm-parse-errors.stderr?ref=11580ced403211c8c422a952a2c5dabedf6812d6", "patch": "@@ -8,13 +8,13 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:5:18\n    |\n LL |     asm!(\"nop\" : struct);\n-   |                  ^^^^^^ expected string literal\n+   |                  ^^^^^^ not a string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:6:30\n    |\n LL |     asm!(\"mov %eax, $$0x2\" : struct);\n-   |                              ^^^^^^ expected string literal\n+   |                              ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:7:39\n@@ -32,7 +32,7 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:9:44\n    |\n LL |     asm!(\"in %dx, %al\" : \"={al}\"(result) : struct);\n-   |                                            ^^^^^^ expected string literal\n+   |                                            ^^^^^^ not a string literal\n \n error: expected `(`, found keyword `struct`\n   --> $DIR/asm-parse-errors.rs:10:51\n@@ -50,13 +50,13 @@ error: expected string literal\n   --> $DIR/asm-parse-errors.rs:12:36\n    |\n LL |     asm!(\"mov $$0x200, %eax\" : : : struct);\n-   |                                    ^^^^^^ expected string literal\n+   |                                    ^^^^^^ not a string literal\n \n error: expected string literal\n   --> $DIR/asm-parse-errors.rs:13:45\n    |\n LL |     asm!(\"mov eax, 2\" : \"={eax}\"(foo) : : : struct);\n-   |                                             ^^^^^^ expected string literal\n+   |                                             ^^^^^^ not a string literal\n \n error: inline assembly must be a string literal\n   --> $DIR/asm-parse-errors.rs:14:10"}]}