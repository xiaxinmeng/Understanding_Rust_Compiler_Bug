{"sha": "99fee7896b9a5e8e21af1ba6787b21566e945d78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZmVlNzg5NmI5YTVlOGUyMWFmMWJhNjc4N2IyMTU2NmU5NDVkNzg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-06T22:26:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-06T22:26:57Z"}, "message": "Rollup merge of #67009 - Aaron1011:fix/coerce-suggestion, r=Centril\n\nEmit coercion suggestions in more places\n\nFixes #66910\n\nWe have several different kinds of suggestions we can try to make when\ntype coercion fails. However, we were previously only emitting these\nsuggestions from `demand_coerce_diag`. This resulted in the compiler\nfailing to emit applicable suggestions in several different cases, such\nas when the implicit return value of a function had the wrong type.\n\nThis commit adds a new `emit_coerce_suggestions` method, which tries to\nemit a number of related suggestions. This method is called from both\n`demand_coerce_diag` and `CoerceMany::coerce_inner`, which covers a much\nwider range of cases than before.\n\nWe now suggest using `.await` in more cases where it is applicable,\namong other improvements.\n\nI'm not happy about disabling the `issue-59756`, but from what I can tell, the suggestion infrastructure in rustc lacks any way of indicating mutually exclusive suggestions (and compiletest lacks a way to only apply a subset of available suggestions).", "tree": {"sha": "7ceebe74dd71b38787ef95abd9a170416dd405d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ceebe74dd71b38787ef95abd9a170416dd405d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99fee7896b9a5e8e21af1ba6787b21566e945d78", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd6tWxCRBK7hj4Ov3rIwAAdHIIAABsPC2ro4KPh1HJdzqlQvRy\ntPodgblowofsEyjkL4MftVy4AsJp4Vp3kBEZ5mAZ7ePUsIxsiCSIcNA055XiIXVI\nURw1oWiLQ31hxcZsTxYz9J0BDchMbIKiyotNAHkbsgDMwQ1BLO50nuGBBMvrSQ3O\nOA4E9TrasuqbXCWrG2h3DfQ+bYj2LWSc6TIHQSuwYJ5fkUac76x7RR5zK7YxbvaH\najCpqhGjYDRCRwYfdtAdCDzix75lAJVBemWJ5+tQPX5KhEYoIcnFez/1be3JsKno\nuYKHHXHy2BIbvZkt+o8MGvXBbqKssRYENcaX0mfJspRD05n2VN5wTsQ+GrBMR44=\n=9Yd9\n-----END PGP SIGNATURE-----\n", "payload": "tree 7ceebe74dd71b38787ef95abd9a170416dd405d8\nparent 62528d86b01f6d595759d9974413fd2c9055af30\nparent a6883c0ab00042f63c7e4cec3066577f3f8b8e5c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575671217 +0100\ncommitter GitHub <noreply@github.com> 1575671217 +0100\n\nRollup merge of #67009 - Aaron1011:fix/coerce-suggestion, r=Centril\n\nEmit coercion suggestions in more places\n\nFixes #66910\n\nWe have several different kinds of suggestions we can try to make when\ntype coercion fails. However, we were previously only emitting these\nsuggestions from `demand_coerce_diag`. This resulted in the compiler\nfailing to emit applicable suggestions in several different cases, such\nas when the implicit return value of a function had the wrong type.\n\nThis commit adds a new `emit_coerce_suggestions` method, which tries to\nemit a number of related suggestions. This method is called from both\n`demand_coerce_diag` and `CoerceMany::coerce_inner`, which covers a much\nwider range of cases than before.\n\nWe now suggest using `.await` in more cases where it is applicable,\namong other improvements.\n\nI'm not happy about disabling the `issue-59756`, but from what I can tell, the suggestion infrastructure in rustc lacks any way of indicating mutually exclusive suggestions (and compiletest lacks a way to only apply a subset of available suggestions).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99fee7896b9a5e8e21af1ba6787b21566e945d78", "html_url": "https://github.com/rust-lang/rust/commit/99fee7896b9a5e8e21af1ba6787b21566e945d78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99fee7896b9a5e8e21af1ba6787b21566e945d78/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62528d86b01f6d595759d9974413fd2c9055af30", "url": "https://api.github.com/repos/rust-lang/rust/commits/62528d86b01f6d595759d9974413fd2c9055af30", "html_url": "https://github.com/rust-lang/rust/commit/62528d86b01f6d595759d9974413fd2c9055af30"}, {"sha": "a6883c0ab00042f63c7e4cec3066577f3f8b8e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6883c0ab00042f63c7e4cec3066577f3f8b8e5c", "html_url": "https://github.com/rust-lang/rust/commit/a6883c0ab00042f63c7e4cec3066577f3f8b8e5c"}], "stats": {"total": 135, "additions": 116, "deletions": 19}, "files": [{"sha": "253fc5575c5bc1639f3010d82a2e078755c6978c", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -1284,6 +1284,10 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     augment_error(&mut err);\n                 }\n \n+                if let Some(expr) = expression {\n+                    fcx.emit_coerce_suggestions(&mut err, expr, found, expected);\n+                }\n+\n                 // Error possibly reported in `check_assign` so avoid emitting error again.\n                 err.emit_unless(expression.filter(|e| fcx.is_assign_to_bool(e, expected))\n                     .is_some());"}, {"sha": "16a55d2a4d318214c4c48ab95eb83d6f4c2693b5", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -15,6 +15,22 @@ use errors::{Applicability, DiagnosticBuilder};\n use super::method::probe;\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n+\n+    pub fn emit_coerce_suggestions(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr,\n+        expr_ty: Ty<'tcx>,\n+        expected: Ty<'tcx>\n+    ) {\n+        self.annotate_expected_due_to_let_ty(err, expr);\n+        self.suggest_compatible_variants(err, expr, expected, expr_ty);\n+        self.suggest_ref_or_into(err, expr, expected, expr_ty);\n+        self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n+        self.suggest_missing_await(err, expr, expected, expr_ty);\n+    }\n+\n+\n     // Requires that the two types unify, and prints an error message if\n     // they don't.\n     pub fn demand_suptype(&self, sp: Span, expected: Ty<'tcx>, actual: Ty<'tcx>) {\n@@ -137,11 +153,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return (expected, None)\n         }\n \n-        self.annotate_expected_due_to_let_ty(&mut err, expr);\n-        self.suggest_compatible_variants(&mut err, expr, expected, expr_ty);\n-        self.suggest_ref_or_into(&mut err, expr, expected, expr_ty);\n-        self.suggest_boxing_when_appropriate(&mut err, expr, expected, expr_ty);\n-        self.suggest_missing_await(&mut err, expr, expected, expr_ty);\n+        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected);\n \n         (expected, Some(err))\n     }"}, {"sha": "a956aba4f62b9896ff13b0f56e35b1b31eafa326", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -4584,8 +4584,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             pointing_at_return_type = self.suggest_missing_return_type(\n                 err, &fn_decl, expected, found, can_suggest);\n         }\n-        self.suggest_ref_or_into(err, expr, expected, found);\n-        self.suggest_boxing_when_appropriate(err, expr, expected, found);\n         pointing_at_return_type\n     }\n \n@@ -4957,15 +4955,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ty: expected,\n                 }));\n                 let obligation = traits::Obligation::new(self.misc(sp), self.param_env, predicate);\n+                debug!(\"suggest_missing_await: trying obligation {:?}\", obligation);\n                 if self.infcx.predicate_may_hold(&obligation) {\n+                    debug!(\"suggest_missing_await: obligation held: {:?}\", obligation);\n                     if let Ok(code) = self.sess().source_map().span_to_snippet(sp) {\n                         err.span_suggestion(\n                             sp,\n                             \"consider using `.await` here\",\n                             format!(\"{}.await\", code),\n                             Applicability::MaybeIncorrect,\n                         );\n+                    } else {\n+                        debug!(\"suggest_missing_await: no snippet for {:?}\", sp);\n                     }\n+                } else {\n+                    debug!(\"suggest_missing_await: obligation did not hold: {:?}\", obligation)\n                 }\n             }\n         }"}, {"sha": "1ec59d906206eada93ce9282dfd81e12afef9517", "filename": "src/test/ui/async-await/suggest-missing-await.fixed", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.fixed?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -16,4 +16,15 @@ async fn suggest_await_in_async_fn() {\n     //~| SUGGESTION x.await\n }\n \n+async fn dummy() {}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_fn_return() {\n+    dummy().await;\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP try adding a semicolon\n+    //~| HELP consider using `.await` here\n+    //~| SUGGESTION dummy().await\n+}\n+\n fn main() {}"}, {"sha": "70cc1f1d5a2c6078da0f8c4014b9a2e1eec4bd70", "filename": "src/test/ui/async-await/suggest-missing-await.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.rs?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -16,4 +16,15 @@ async fn suggest_await_in_async_fn() {\n     //~| SUGGESTION x.await\n }\n \n+async fn dummy() {}\n+\n+#[allow(unused)]\n+async fn suggest_await_in_async_fn_return() {\n+    dummy()\n+    //~^ ERROR mismatched types [E0308]\n+    //~| HELP try adding a semicolon\n+    //~| HELP consider using `.await` here\n+    //~| SUGGESTION dummy().await\n+}\n+\n fn main() {}"}, {"sha": "7ab024434b2bf86250d4c2db32263b20e8259be3", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -10,6 +10,23 @@ LL |     take_u32(x)\n    = note:     expected type `u32`\n            found opaque type `impl std::future::Future`\n \n-error: aborting due to previous error\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-missing-await.rs:23:5\n+   |\n+LL |     dummy()\n+   |     ^^^^^^^ expected `()`, found opaque type\n+   |\n+   = note: expected unit type `()`\n+            found opaque type `impl std::future::Future`\n+help: try adding a semicolon\n+   |\n+LL |     dummy();\n+   |            ^\n+help: consider using `.await` here\n+   |\n+LL |     dummy().await\n+   |\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "ca61fb0c171febdbd67445dac6811c3d94f2e7c1", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name4.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name4.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -4,7 +4,10 @@ error[E0308]: mismatched types\n LL | fn bar(x: usize) -> Option<usize> {\n    |                     ------------- expected `std::option::Option<usize>` because of return type\n LL |     return x;\n-   |            ^ expected enum `std::option::Option`, found `usize`\n+   |            ^\n+   |            |\n+   |            expected enum `std::option::Option`, found `usize`\n+   |            help: try using a variant of the expected enum: `Some(x)`\n    |\n    = note: expected enum `std::option::Option<usize>`\n               found type `usize`"}, {"sha": "9ca983df30af51392b22145e8f56abc28e9c550e", "filename": "src/test/ui/issues/issue-51632-try-desugar-incompatible-types.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51632-try-desugar-incompatible-types.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -2,13 +2,18 @@ error[E0308]: try expression alternatives have incompatible types\n   --> $DIR/issue-51632-try-desugar-incompatible-types.rs:8:5\n    |\n LL |     missing_discourses()?\n-   |     ^^^^^^^^^^^^^^^^^^^^-\n-   |     |                   |\n-   |     |                   help: try removing this `?`\n-   |     expected enum `std::result::Result`, found `isize`\n+   |     ^^^^^^^^^^^^^^^^^^^^^ expected enum `std::result::Result`, found `isize`\n    |\n    = note: expected enum `std::result::Result<isize, ()>`\n               found type `isize`\n+help: try removing this `?`\n+   |\n+LL |     missing_discourses()\n+   |                        --\n+help: try using a variant of the expected enum\n+   |\n+LL |     Ok(missing_discourses()?)\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "d6df0592be32c7edfe0165c94189bac43ffe1932", "filename": "src/test/ui/issues/issue-59756.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.rs?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -1,4 +1,8 @@\n // run-rustfix\n+// ignore-test\n+//\n+// FIXME: Re-enable this test once we support choosing\n+// between multiple mutually exclusive suggestions for the same span\n \n #![allow(warnings)]\n "}, {"sha": "9066e57aabfe5eefafb8d89b2261c8921805bc70", "filename": "src/test/ui/issues/issue-59756.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59756.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -2,13 +2,18 @@ error[E0308]: try expression alternatives have incompatible types\n   --> $DIR/issue-59756.rs:13:5\n    |\n LL |     foo()?\n-   |     ^^^^^-\n-   |     |    |\n-   |     |    help: try removing this `?`\n-   |     expected enum `std::result::Result`, found struct `A`\n+   |     ^^^^^^ expected enum `std::result::Result`, found struct `A`\n    |\n    = note: expected enum `std::result::Result<A, B>`\n             found struct `A`\n+help: try removing this `?`\n+   |\n+LL |     foo()\n+   |         --\n+help: try using a variant of the expected enum\n+   |\n+LL |     Ok(foo()?)\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "c73130643db7b18c06d1a215878db53ed361ae80", "filename": "src/test/ui/mismatched_types/abridged.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fabridged.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -26,7 +26,10 @@ error[E0308]: mismatched types\n LL | fn b() -> Option<Foo> {\n    |           ----------- expected `std::option::Option<Foo>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `std::option::Option`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^\n+   |     |\n+   |     expected enum `std::option::Option`, found struct `Foo`\n+   |     help: try using a variant of the expected enum: `Some(Foo { bar: 1 })`\n    |\n    = note: expected enum `std::option::Option<Foo>`\n             found struct `Foo`\n@@ -37,7 +40,10 @@ error[E0308]: mismatched types\n LL | fn c() -> Result<Foo, Bar> {\n    |           ---------------- expected `std::result::Result<Foo, Bar>` because of return type\n LL |     Foo { bar: 1 }\n-   |     ^^^^^^^^^^^^^^ expected enum `std::result::Result`, found struct `Foo`\n+   |     ^^^^^^^^^^^^^^\n+   |     |\n+   |     expected enum `std::result::Result`, found struct `Foo`\n+   |     help: try using a variant of the expected enum: `Ok(Foo { bar: 1 })`\n    |\n    = note: expected enum `std::result::Result<Foo, Bar>`\n             found struct `Foo`"}, {"sha": "a77e92022e2b676a4eab4dba9b85bf345174760b", "filename": "src/test/ui/proc-macro/span-preservation.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fspan-preservation.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -14,6 +14,11 @@ LL | fn b(x: Option<isize>) -> usize {\n LL |     match x {\n LL |         Some(x) => { return x },\n    |                             ^ expected `usize`, found `isize`\n+   |\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+   |\n+LL |         Some(x) => { return x.try_into().unwrap() },\n+   |                             ^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n   --> $DIR/span-preservation.rs:33:22"}, {"sha": "69f8ffa581bc128c0dcabbdd9aa6113d38d97bde", "filename": "src/test/ui/tail-typeck.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Ftail-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Ftail-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftail-typeck.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -5,6 +5,11 @@ LL | fn f() -> isize { return g(); }\n    |           -----          ^^^ expected `isize`, found `usize`\n    |           |\n    |           expected `isize` because of return type\n+   |\n+help: you can convert an `usize` to `isize` and panic if the converted value wouldn't fit\n+   |\n+LL | fn f() -> isize { return g().try_into().unwrap(); }\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c1274bd0ea6bc3226bdb8a7ca79e3780ad46ebac", "filename": "src/test/ui/wrong-ret-type.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99fee7896b9a5e8e21af1ba6787b21566e945d78/src%2Ftest%2Fui%2Fwrong-ret-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwrong-ret-type.stderr?ref=99fee7896b9a5e8e21af1ba6787b21566e945d78", "patch": "@@ -5,6 +5,11 @@ LL | fn mk_int() -> usize { let i: isize = 3; return i; }\n    |                -----                            ^ expected `usize`, found `isize`\n    |                |\n    |                expected `usize` because of return type\n+   |\n+help: you can convert an `isize` to `usize` and panic if the converted value wouldn't fit\n+   |\n+LL | fn mk_int() -> usize { let i: isize = 3; return i.try_into().unwrap(); }\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}