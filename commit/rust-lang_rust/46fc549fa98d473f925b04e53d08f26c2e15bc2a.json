{"sha": "46fc549fa98d473f925b04e53d08f26c2e15bc2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2ZmM1NDlmYTk4ZDQ3M2Y5MjViMDRlNTNkMDhmMjZjMmUxNWJjMmE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-18T02:47:54Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-21T02:05:03Z"}, "message": "rm obsolete integer to_str{,_radix} free functions", "tree": {"sha": "ece6425698c9bf30a637e4cffc5b5a4fb721083b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ece6425698c9bf30a637e4cffc5b5a4fb721083b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46fc549fa98d473f925b04e53d08f26c2e15bc2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46fc549fa98d473f925b04e53d08f26c2e15bc2a", "html_url": "https://github.com/rust-lang/rust/commit/46fc549fa98d473f925b04e53d08f26c2e15bc2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46fc549fa98d473f925b04e53d08f26c2e15bc2a/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d72f604b7da4f03e7b30466af6b8b55f16c207b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d72f604b7da4f03e7b30466af6b8b55f16c207b", "html_url": "https://github.com/rust-lang/rust/commit/0d72f604b7da4f03e7b30466af6b8b55f16c207b"}], "stats": {"total": 256, "additions": 104, "deletions": 152}, "files": [{"sha": "4cd9dc3a1162d445865bc87eb311a82984b619d7", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -2864,17 +2864,16 @@ the vtable pointer for the `T` implementation of `R`, and the pointer value of `\n An example of an object type:\n \n ~~~~~~~~\n-# use std::int;\n trait Printable {\n-  fn to_str(&self) -> ~str;\n+  fn to_string(&self) -> ~str;\n }\n \n impl Printable for int {\n-  fn to_str(&self) -> ~str { int::to_str(*self) }\n+  fn to_string(&self) -> ~str { self.to_str() }\n }\n \n fn print(a: @Printable) {\n-   println(a.to_str());\n+   println(a.to_string());\n }\n \n fn main() {"}, {"sha": "958c15737615a3bbed9117d2a0a492a65709aaef", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -555,12 +555,11 @@ while cake_amount > 0 {\n `loop` denotes an infinite loop, and is the preferred way of writing `while true`:\n \n ~~~~\n-use std::int;\n-let mut x = 5;\n+let mut x = 5u;\n loop {\n     x += x - 3;\n     if x % 5 == 0 { break; }\n-    println(int::to_str(x));\n+    println(x.to_str());\n }\n ~~~~\n "}, {"sha": "d2d6b540cff4cf50bc6b10f67974776823e02d28", "filename": "src/libextra/crypto/digest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fcrypto%2Fdigest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fcrypto%2Fdigest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fcrypto%2Fdigest.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n use std::vec;\n \n \n@@ -71,7 +70,7 @@ pub trait Digest {\n fn to_hex(rr: &[u8]) -> ~str {\n     let mut s = ~\"\";\n     for b in rr.iter() {\n-        let hex = uint::to_str_radix(*b as uint, 16u);\n+        let hex = (*b as uint).to_str_radix(16u);\n         if hex.len() == 1 {\n             s.push_char('0');\n         }"}, {"sha": "abce22f98c6bf712c591f53177760533b8be639e", "filename": "src/libextra/md4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fmd4.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n \n-use std::uint;\n use std::vec;\n \n struct Quad {\n@@ -121,7 +120,7 @@ pub fn md4_str(msg: &[u8]) -> ~str {\n             if byte <= 16u8 {\n                 result.push_char('0')\n             }\n-            result.push_str(uint::to_str_radix(byte as uint, 16u));\n+            result.push_str((byte as uint).to_str_radix(16u));\n             i += 1u32;\n         }\n     }"}, {"sha": "c86c4dd07ed2f2034da4c13ddcf2ea4d7aa78b27", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -525,7 +525,7 @@ impl ToStrRadix for BigUint {\n             if v.is_empty() { return ~\"0\" }\n             let mut s = str::with_capacity(v.len() * l);\n             for n in v.rev_iter() {\n-                let ss = uint::to_str_radix(*n as uint, radix);\n+                let ss = (*n as uint).to_str_radix(radix);\n                 s.push_str(\"0\".repeat(l - ss.len()));\n                 s.push_str(ss);\n             }"}, {"sha": "257d941e4afff6d3db6c579555179e265013e8b3", "filename": "src/libextra/time.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibextra%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftime.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -10,8 +10,6 @@\n \n #[allow(missing_doc)];\n \n-\n-use std::int;\n use std::io;\n use std::num;\n use std::str;\n@@ -824,7 +822,7 @@ fn do_strftime(format: &str, tm: &Tm) -> ~str {\n           //'U' {}\n           'u' => {\n             let i = tm.tm_wday as int;\n-            int::to_str(if i == 0 { 7 } else { i })\n+            (if i == 0 { 7 } else { i }).to_str()\n           }\n           //'V' {}\n           'v' => {\n@@ -834,10 +832,10 @@ fn do_strftime(format: &str, tm: &Tm) -> ~str {\n                 parse_type('Y', tm))\n           }\n           //'W' {}\n-          'w' => int::to_str(tm.tm_wday as int),\n+          'w' => (tm.tm_wday as int).to_str(),\n           //'X' {}\n           //'x' {}\n-          'Y' => int::to_str(tm.tm_year as int + 1900),\n+          'Y' => (tm.tm_year as int + 1900).to_str(),\n           'y' => fmt!(\"%02d\", (tm.tm_year as int + 1900) % 100),\n           'Z' => tm.tm_zone.clone(),\n           'z' => {"}, {"sha": "1ddebbb428010d3cbc8baf906ada3db835ad6b29", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -26,7 +26,6 @@ use util::common::time;\n use util::ppaux;\n \n use std::hashmap::{HashMap,HashSet};\n-use std::int;\n use std::io;\n use std::os;\n use std::vec;\n@@ -454,21 +453,21 @@ pub fn pretty_print_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n         match node {\n           pprust::node_item(s, item) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(item.id));\n+            pprust::synth_comment(s, item.id.to_str());\n           }\n           pprust::node_block(s, ref blk) => {\n             pp::space(s.s);\n             pprust::synth_comment(\n-                s, ~\"block \" + int::to_str(blk.id));\n+                s, ~\"block \" + blk.id.to_str());\n           }\n           pprust::node_expr(s, expr) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, int::to_str(expr.id));\n+            pprust::synth_comment(s, expr.id.to_str());\n             pprust::pclose(s);\n           }\n           pprust::node_pat(s, pat) => {\n             pp::space(s.s);\n-            pprust::synth_comment(s, ~\"pat \" + int::to_str(pat.id));\n+            pprust::synth_comment(s, ~\"pat \" + pat.id.to_str());\n           }\n         }\n     }"}, {"sha": "eba01c8d399e86d5ee46a23c8ba0b60d6f82cb93", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -25,7 +25,6 @@ use std::hash::HashUtil;\n use std::hashmap::{HashMap, HashSet};\n use std::io;\n use std::str;\n-use std::uint;\n use std::vec;\n use extra::flate;\n use extra::serialize::Encodable;\n@@ -303,7 +302,7 @@ fn encode_disr_val(_: &EncodeContext,\n                    ebml_w: &mut writer::Encoder,\n                    disr_val: uint) {\n     ebml_w.start_tag(tag_disr_val);\n-    let s = uint::to_str(disr_val);\n+    let s = disr_val.to_str();\n     ebml_w.writer.write(s.as_bytes());\n     ebml_w.end_tag();\n }"}, {"sha": "5611808cc6d982225d6a7357f667633ea266b104", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -17,7 +17,6 @@ use middle::ty;\n use std::hashmap::HashMap;\n use std::io::WriterUtil;\n use std::io;\n-use std::uint;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast::*;\n@@ -324,7 +323,7 @@ fn enc_sty(w: @io::Writer, cx: @ctxt, st: &ty::sty) {\n         w.write_char('p');\n         w.write_str((cx.ds)(did));\n         w.write_char('|');\n-        w.write_str(uint::to_str(id));\n+        w.write_str(id.to_str());\n       }\n       ty::ty_self(did) => {\n         w.write_char('s');"}, {"sha": "50b5140505ef35ed8114a3fc1efc84a283c81035", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -71,7 +71,6 @@ use std::hash;\n use std::hashmap::HashMap;\n use std::io;\n use std::libc::c_uint;\n-use std::uint;\n use std::vec;\n use std::local_data;\n use extra::time;\n@@ -719,7 +718,7 @@ pub fn iter_structural_ty(cx: @mut Block, av: ValueRef, t: ty::t,\n                   for variant in (*variants).iter() {\n                       let variant_cx =\n                           sub_block(cx, ~\"enum-iter-variant-\" +\n-                                    uint::to_str(variant.disr_val));\n+                                    variant.disr_val.to_str());\n                       let variant_cx =\n                           iter_variant(variant_cx, repr, av, *variant,\n                                        substs.tps, |x,y,z| f(x,y,z));"}, {"sha": "96d12dbc3ac0e71f42330d5a77109b82a8e7a944", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -33,7 +33,6 @@ use std::ops;\n use std::ptr::to_unsafe_ptr;\n use std::to_bytes;\n use std::to_str::ToStr;\n-use std::u32;\n use std::vec;\n use syntax::ast::*;\n use syntax::ast_util::is_local;\n@@ -1944,7 +1943,7 @@ impl ops::Sub<TypeContents,TypeContents> for TypeContents {\n \n impl ToStr for TypeContents {\n     fn to_str(&self) -> ~str {\n-        fmt!(\"TypeContents(%s)\", u32::to_str_radix(self.bits, 2))\n+        fmt!(\"TypeContents(%s)\", self.bits.to_str_radix(2))\n     }\n }\n "}, {"sha": "e2d6d588baed0e02e05099e5a5bc9f7cb7be8b4f", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -17,7 +17,6 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str, trait_ref_to_str};\n \n-use std::uint;\n use syntax::ast;\n \n pub trait InferStr {\n@@ -72,7 +71,7 @@ impl<V:Vid + ToStr,T:InferStr> InferStr for VarValue<V, T> {\n         match *self {\n           Redirect(ref vid) => fmt!(\"Redirect(%s)\", vid.to_str()),\n           Root(ref pt, rk) => fmt!(\"Root(%s, %s)\", pt.inf_str(cx),\n-                               uint::to_str_radix(rk, 10u))\n+                               rk.to_str_radix(10u))\n         }\n     }\n }"}, {"sha": "21b7ee321e8db2a1aa63d7d7b56c74879b1dc445", "filename": "src/libstd/hash.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -27,8 +27,8 @@ use option::{Some, None};\n use rt::io::Writer;\n use str::OwnedStr;\n use to_bytes::IterBytes;\n-use uint;\n use vec::ImmutableVector;\n+use num::ToStrRadix;\n \n // Alias `SipState` to `State`.\n pub use State = hash::SipState;\n@@ -386,7 +386,7 @@ impl Streaming for SipState {\n         let r = self.result_bytes();\n         let mut s = ~\"\";\n         for b in r.iter() {\n-            s.push_str(uint::to_str_radix(*b as uint, 16u));\n+            s.push_str((*b as uint).to_str_radix(16u));\n         }\n         s\n     }\n@@ -407,8 +407,6 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n-    use uint;\n-\n     // Hash just the bytes of the slice, without length prefix\n     struct Bytes<'self>(&'self [u8]);\n     impl<'self> IterBytes for Bytes<'self> {\n@@ -496,7 +494,7 @@ mod tests {\n         fn to_hex_str(r: &[u8, ..8]) -> ~str {\n             let mut s = ~\"\";\n             for b in r.iter() {\n-                s.push_str(uint::to_str_radix(*b as uint, 16u));\n+                s.push_str((*b as uint).to_str_radix(16u));\n             }\n             s\n         }"}, {"sha": "4a7a5e32b32b2809cb2c7a4bc3ab4055dc7cfbbb", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -525,35 +525,25 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: &fn(v: &[u8]) -> U) -> U {\n     f(buf.slice(0, cur))\n }\n \n-/// Convert to a string in base 10.\n-#[inline]\n-pub fn to_str(num: $T) -> ~str {\n-    to_str_radix(num, 10u)\n-}\n-\n-/// Convert to a string in a given base.\n-#[inline]\n-pub fn to_str_radix(num: $T, radix: uint) -> ~str {\n-    let mut buf: ~[u8] = ~[];\n-    do strconv::int_to_str_bytes_common(num, radix, strconv::SignNeg) |i| {\n-        buf.push(i);\n-    }\n-    // We know we generated valid utf-8, so we don't need to go through that\n-    // check.\n-    unsafe { str::raw::from_bytes_owned(buf) }\n-}\n-\n impl ToStr for $T {\n+    /// Convert to a string in base 10.\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        to_str(*self)\n+        self.to_str_radix(10)\n     }\n }\n \n impl ToStrRadix for $T {\n+    /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n-        to_str_radix(*self, radix)\n+        let mut buf: ~[u8] = ~[];\n+        do strconv::int_to_str_bytes_common(*self, radix, strconv::SignNeg) |i| {\n+            buf.push(i);\n+        }\n+        // We know we generated valid utf-8, so we don't need to go through that\n+        // check.\n+        unsafe { str::raw::from_bytes_owned(buf) }\n     }\n }\n \n@@ -813,39 +803,39 @@ mod tests {\n \n     #[test]\n     fn test_to_str() {\n-        assert_eq!(to_str_radix(0 as $T, 10u), ~\"0\");\n-        assert_eq!(to_str_radix(1 as $T, 10u), ~\"1\");\n-        assert_eq!(to_str_radix(-1 as $T, 10u), ~\"-1\");\n-        assert_eq!(to_str_radix(127 as $T, 16u), ~\"7f\");\n-        assert_eq!(to_str_radix(100 as $T, 10u), ~\"100\");\n+        assert_eq!((0 as $T).to_str_radix(10u), ~\"0\");\n+        assert_eq!((1 as $T).to_str_radix(10u), ~\"1\");\n+        assert_eq!((-1 as $T).to_str_radix(10u), ~\"-1\");\n+        assert_eq!((127 as $T).to_str_radix(16u), ~\"7f\");\n+        assert_eq!((100 as $T).to_str_radix(10u), ~\"100\");\n \n     }\n \n     #[test]\n     fn test_int_to_str_overflow() {\n         let mut i8_val: i8 = 127_i8;\n-        assert_eq!(i8::to_str(i8_val), ~\"127\");\n+        assert_eq!(i8_val.to_str(), ~\"127\");\n \n         i8_val += 1 as i8;\n-        assert_eq!(i8::to_str(i8_val), ~\"-128\");\n+        assert_eq!(i8_val.to_str(), ~\"-128\");\n \n         let mut i16_val: i16 = 32_767_i16;\n-        assert_eq!(i16::to_str(i16_val), ~\"32767\");\n+        assert_eq!(i16_val.to_str(), ~\"32767\");\n \n         i16_val += 1 as i16;\n-        assert_eq!(i16::to_str(i16_val), ~\"-32768\");\n+        assert_eq!(i16_val.to_str(), ~\"-32768\");\n \n         let mut i32_val: i32 = 2_147_483_647_i32;\n-        assert_eq!(i32::to_str(i32_val), ~\"2147483647\");\n+        assert_eq!(i32_val.to_str(), ~\"2147483647\");\n \n         i32_val += 1 as i32;\n-        assert_eq!(i32::to_str(i32_val), ~\"-2147483648\");\n+        assert_eq!(i32_val.to_str(), ~\"-2147483648\");\n \n         let mut i64_val: i64 = 9_223_372_036_854_775_807_i64;\n-        assert_eq!(i64::to_str(i64_val), ~\"9223372036854775807\");\n+        assert_eq!(i64_val.to_str(), ~\"9223372036854775807\");\n \n         i64_val += 1 as i64;\n-        assert_eq!(i64::to_str(i64_val), ~\"-9223372036854775808\");\n+        assert_eq!(i64_val.to_str(), ~\"-9223372036854775808\");\n     }\n \n     #[test]"}, {"sha": "6fba8a6dd137d2e6e8446c60a88c4fee525524ef", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -708,14 +708,14 @@ mod test {\n mod bench {\n     use extra::test::BenchHarness;\n     use rand::{XorShiftRng,RngUtil};\n-    use uint;\n     use float;\n+    use to_str::ToStr;\n \n     #[bench]\n     fn uint_to_str_rand(bh: &mut BenchHarness) {\n         let mut rng = XorShiftRng::new();\n         do bh.iter {\n-            uint::to_str(rng.gen());\n+            rng.gen::<uint>().to_str();\n         }\n     }\n "}, {"sha": "2bf41f4103d808455528bb361d5c9d084a07dd3a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 27, "deletions": 38, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -380,35 +380,25 @@ pub fn to_str_bytes<U>(n: $T, radix: uint, f: &fn(v: &[u8]) -> U) -> U {\n     f(buf.slice(0, cur))\n }\n \n-/// Convert to a string in base 10.\n-#[inline]\n-pub fn to_str(num: $T) -> ~str {\n-    to_str_radix(num, 10u)\n-}\n-\n-/// Convert to a string in a given base.\n-#[inline]\n-pub fn to_str_radix(num: $T, radix: uint) -> ~str {\n-    let mut buf = ~[];\n-    do strconv::int_to_str_bytes_common(num, radix, strconv::SignNone) |i| {\n-        buf.push(i);\n-    }\n-    // We know we generated valid utf-8, so we don't need to go through that\n-    // check.\n-    unsafe { str::raw::from_bytes_owned(buf) }\n-}\n-\n impl ToStr for $T {\n+    /// Convert to a string in base 10.\n     #[inline]\n     fn to_str(&self) -> ~str {\n-        to_str(*self)\n+        self.to_str_radix(10u)\n     }\n }\n \n impl ToStrRadix for $T {\n+    /// Convert to a string in a given base.\n     #[inline]\n     fn to_str_radix(&self, radix: uint) -> ~str {\n-        to_str_radix(*self, radix)\n+        let mut buf = ~[];\n+        do strconv::int_to_str_bytes_common(*self, radix, strconv::SignNone) |i| {\n+            buf.push(i);\n+        }\n+        // We know we generated valid utf-8, so we don't need to go through that\n+        // check.\n+        unsafe { str::raw::from_bytes_owned(buf) }\n     }\n }\n \n@@ -451,7 +441,6 @@ mod tests {\n     use u32;\n     use u64;\n     use u8;\n-    use uint;\n \n     #[test]\n     fn test_num() {\n@@ -536,13 +525,13 @@ mod tests {\n \n     #[test]\n     pub fn test_to_str() {\n-        assert_eq!(to_str_radix(0 as $T, 10u), ~\"0\");\n-        assert_eq!(to_str_radix(1 as $T, 10u), ~\"1\");\n-        assert_eq!(to_str_radix(2 as $T, 10u), ~\"2\");\n-        assert_eq!(to_str_radix(11 as $T, 10u), ~\"11\");\n-        assert_eq!(to_str_radix(11 as $T, 16u), ~\"b\");\n-        assert_eq!(to_str_radix(255 as $T, 16u), ~\"ff\");\n-        assert_eq!(to_str_radix(0xff as $T, 10u), ~\"255\");\n+        assert_eq!((0 as $T).to_str_radix(10u), ~\"0\");\n+        assert_eq!((1 as $T).to_str_radix(10u), ~\"1\");\n+        assert_eq!((2 as $T).to_str_radix(10u), ~\"2\");\n+        assert_eq!((11 as $T).to_str_radix(10u), ~\"11\");\n+        assert_eq!((11 as $T).to_str_radix(16u), ~\"b\");\n+        assert_eq!((255 as $T).to_str_radix(16u), ~\"ff\");\n+        assert_eq!((0xff as $T).to_str_radix(10u), ~\"255\");\n     }\n \n     #[test]\n@@ -575,28 +564,28 @@ mod tests {\n     #[test]\n     fn test_uint_to_str_overflow() {\n         let mut u8_val: u8 = 255_u8;\n-        assert_eq!(u8::to_str(u8_val), ~\"255\");\n+        assert_eq!(u8_val.to_str(), ~\"255\");\n \n         u8_val += 1 as u8;\n-        assert_eq!(u8::to_str(u8_val), ~\"0\");\n+        assert_eq!(u8_val.to_str(), ~\"0\");\n \n         let mut u16_val: u16 = 65_535_u16;\n-        assert_eq!(u16::to_str(u16_val), ~\"65535\");\n+        assert_eq!(u16_val.to_str(), ~\"65535\");\n \n         u16_val += 1 as u16;\n-        assert_eq!(u16::to_str(u16_val), ~\"0\");\n+        assert_eq!(u16_val.to_str(), ~\"0\");\n \n         let mut u32_val: u32 = 4_294_967_295_u32;\n-        assert_eq!(u32::to_str(u32_val), ~\"4294967295\");\n+        assert_eq!(u32_val.to_str(), ~\"4294967295\");\n \n         u32_val += 1 as u32;\n-        assert_eq!(u32::to_str(u32_val), ~\"0\");\n+        assert_eq!(u32_val.to_str(), ~\"0\");\n \n         let mut u64_val: u64 = 18_446_744_073_709_551_615_u64;\n-        assert_eq!(u64::to_str(u64_val), ~\"18446744073709551615\");\n+        assert_eq!(u64_val.to_str(), ~\"18446744073709551615\");\n \n         u64_val += 1 as u64;\n-        assert_eq!(u64::to_str(u64_val), ~\"0\");\n+        assert_eq!(u64_val.to_str(), ~\"0\");\n     }\n \n     #[test]\n@@ -638,14 +627,14 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     pub fn to_str_radix1() {\n-        uint::to_str_radix(100u, 1u);\n+        100u.to_str_radix(1u);\n     }\n \n     #[test]\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     pub fn to_str_radix37() {\n-        uint::to_str_radix(100u, 37u);\n+        100u.to_str_radix(37u);\n     }\n \n     #[test]"}, {"sha": "893c32e830a3738110f72bad9dbd9b6fc334e551", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -58,7 +58,7 @@ pub use num::{Orderable, Signed, Unsigned, Round};\n pub use num::{Algebraic, Trigonometric, Exponential, Hyperbolic};\n pub use num::{Integer, Fractional, Real, RealExt};\n pub use num::{Bitwise, BitCount, Bounded};\n-pub use num::{Primitive, Int, Float};\n+pub use num::{Primitive, Int, Float, ToStrRadix};\n pub use path::GenericPath;\n pub use path::Path;\n pub use path::PosixPath;"}, {"sha": "83c12f0af5e1b92d7fbff75dc37107404ff585aa", "filename": "src/libstd/unstable/extfmt.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Funstable%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibstd%2Funstable%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fextfmt.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -480,7 +480,6 @@ pub mod rt {\n     use str;\n     use sys;\n     use num;\n-    use uint;\n     use vec;\n     use option::{Some, None, Option};\n \n@@ -593,7 +592,7 @@ pub mod rt {\n         return if prec == 0u && num == 0u {\n                 ~\"\"\n             } else {\n-                let s = uint::to_str_radix(num, radix);\n+                let s = num.to_str_radix(radix);\n                 let len = s.char_len();\n                 if len < prec {\n                     let diff = prec - len;"}, {"sha": "3bad1ed93842d5d41b997805fa5ce92114fef8a8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -28,7 +28,6 @@ use print::pp;\n use print::pprust;\n \n use std::io;\n-use std::u64;\n \n // The @ps is stored here to prevent recursive type.\n pub enum ann_node<'self> {\n@@ -2035,24 +2034,24 @@ pub fn print_literal(s: @ps, lit: &ast::lit) {\n       ast::lit_int(i, t) => {\n         if i < 0_i64 {\n             word(s.s,\n-                 ~\"-\" + u64::to_str_radix(-i as u64, 10u)\n+                 ~\"-\" + (-i as u64).to_str_radix(10u)\n                  + ast_util::int_ty_to_str(t));\n         } else {\n             word(s.s,\n-                 u64::to_str_radix(i as u64, 10u)\n+                 (i as u64).to_str_radix(10u)\n                  + ast_util::int_ty_to_str(t));\n         }\n       }\n       ast::lit_uint(u, t) => {\n         word(s.s,\n-             u64::to_str_radix(u, 10u)\n+             u.to_str_radix(10u)\n              + ast_util::uint_ty_to_str(t));\n       }\n       ast::lit_int_unsuffixed(i) => {\n         if i < 0_i64 {\n-            word(s.s, ~\"-\" + u64::to_str_radix(-i as u64, 10u));\n+            word(s.s, ~\"-\" + (-i as u64).to_str_radix(10u));\n         } else {\n-            word(s.s, u64::to_str_radix(i as u64, 10u));\n+            word(s.s, (i as u64).to_str_radix(10u));\n         }\n       }\n       ast::lit_float(f, t) => {"}, {"sha": "22622c1cac33afa2ae24ab7f657fc9b74c69a9ed", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -89,13 +89,11 @@ impl Results {\n             let mut set = f();\n             do timed(&mut self.sequential_strings) {\n                 for i in range(0u, num_keys) {\n-                    let s = uint::to_str(i);\n-                    set.insert(s);\n+                    set.insert(i.to_str());\n                 }\n \n                 for i in range(0u, num_keys) {\n-                    let s = uint::to_str(i);\n-                    assert!(set.contains(&s));\n+                    assert!(set.contains(&i.to_str()));\n                 }\n             }\n         }\n@@ -104,7 +102,7 @@ impl Results {\n             let mut set = f();\n             do timed(&mut self.random_strings) {\n                 for _ in range(0, num_keys) {\n-                    let s = uint::to_str(rng.next() as uint);\n+                    let s = (rng.next() as uint).to_str();\n                     set.insert(s);\n                 }\n             }\n@@ -113,11 +111,11 @@ impl Results {\n         {\n             let mut set = f();\n             for i in range(0u, num_keys) {\n-                set.insert(uint::to_str(i));\n+                set.insert(i.to_str());\n             }\n             do timed(&mut self.delete_strings) {\n                 for i in range(0u, num_keys) {\n-                    assert!(set.remove(&uint::to_str(i)));\n+                    assert!(set.remove(&i.to_str()));\n                 }\n             }\n         }"}, {"sha": "4869c486e5ea9c6b13d0f8b6ae9e145b224cdc8f", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     let n = uint::from_str(args[1]).unwrap();\n \n     for i in range(0u, n) {\n-        let x = uint::to_str(i);\n+        let x = i.to_str();\n         info!(x);\n     }\n }"}, {"sha": "b2491e305b254a6c3bf1d93a69228759ec9355f0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -125,7 +125,7 @@ fn main() {\n                 let elapsed = stop - start;\n \n                 out.write_line(fmt!(\"%d\\t%d\\t%s\", n, fibn,\n-                                    u64::to_str(elapsed)));\n+                                    elapsed.to_str()));\n             }\n         }\n     }"}, {"sha": "7dc859e559efa53a9e2868bdb141d3f7caf63669", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -40,7 +40,7 @@ impl<A> option_monad<A> for Option<A> {\n }\n \n fn transform(x: Option<int>) -> Option<~str> {\n-    x.bind(|n| Some(*n + 1) ).bind(|n| Some(int::to_str(*n)) )\n+    x.bind(|n| Some(*n + 1) ).bind(|n| Some(n.to_str()) )\n }\n \n pub fn main() {"}, {"sha": "72bdc2ee0a63e2873ee976b879b4d44d75fc6444", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -529,7 +529,7 @@ impl TyVisitor for my_visitor {\n     }\n     fn visit_int(&self) -> bool {\n         do self.get::<int>() |i| {\n-            self.vals.push(int::to_str(i));\n+            self.vals.push(i.to_str());\n         };\n         true\n     }"}, {"sha": "520b3583195ae75b6548e3b7f96634be6186380c", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -32,7 +32,7 @@ trait uint_utils {\n }\n \n impl uint_utils for uint {\n-    fn str(&self) -> ~str { uint::to_str(*self) }\n+    fn str(&self) -> ~str { self.to_str() }\n     fn multi(&self, f: &fn(uint)) {\n         let mut c = 0u;\n         while c < *self { f(c); c += 1u; }"}, {"sha": "6916db28e11ea611b08b7b99aef3ed7589ce3ab8", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -13,16 +13,16 @@\n use std::int;\n \n trait to_str {\n-    fn to_str(&self) -> ~str;\n+    fn to_string(&self) -> ~str;\n }\n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::to_str(*self) }\n+    fn to_string(&self) -> ~str { self.to_str() }\n }\n impl to_str for ~str {\n-    fn to_str(&self) -> ~str { self.clone() }\n+    fn to_string(&self) -> ~str { self.clone() }\n }\n impl to_str for () {\n-    fn to_str(&self) -> ~str { ~\"()\" }\n+    fn to_string(&self) -> ~str { ~\"()\" }\n }\n \n trait map<T> {\n@@ -43,7 +43,7 @@ fn foo<U, T: map<U>>(x: T) -> ~[~str] {\n     x.map(|_e| ~\"hi\" )\n }\n fn bar<U:to_str,T:map<U>>(x: T) -> ~[~str] {\n-    x.map(|_e| _e.to_str() )\n+    x.map(|_e| _e.to_string() )\n }\n \n pub fn main() {"}, {"sha": "8ecad8d4fe163e05a7db9ab15d90f59f259b17af", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46fc549fa98d473f925b04e53d08f26c2e15bc2a/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=46fc549fa98d473f925b04e53d08f26c2e15bc2a", "patch": "@@ -10,35 +10,26 @@\n \n // xfail-fast\n \n-#[no_std];\n-\n-extern mod std;\n-\n-use std::str::StrVector;\n-use std::vec::ImmutableVector;\n-use std::iterator::Iterator;\n-use std::int;\n-\n trait to_str {\n-    fn to_str(&self) -> ~str;\n+    fn to_string(&self) -> ~str;\n }\n \n impl to_str for int {\n-    fn to_str(&self) -> ~str { int::to_str(*self) }\n+    fn to_string(&self) -> ~str { self.to_str() }\n }\n \n impl<T:to_str> to_str for ~[T] {\n-    fn to_str(&self) -> ~str {\n-        fmt!(\"[%s]\", self.iter().map(|e| e.to_str()).collect::<~[~str]>().connect(\", \"))\n+    fn to_string(&self) -> ~str {\n+        fmt!(\"[%s]\", self.iter().map(|e| e.to_string()).collect::<~[~str]>().connect(\", \"))\n     }\n }\n \n pub fn main() {\n-    assert!(1.to_str() == ~\"1\");\n-    assert!((~[2, 3, 4]).to_str() == ~\"[2, 3, 4]\");\n+    assert!(1.to_string() == ~\"1\");\n+    assert!((~[2, 3, 4]).to_string() == ~\"[2, 3, 4]\");\n \n     fn indirect<T:to_str>(x: T) -> ~str {\n-        x.to_str() + \"!\"\n+        x.to_string() + \"!\"\n     }\n     assert!(indirect(~[10, 20]) == ~\"[10, 20]!\");\n "}]}