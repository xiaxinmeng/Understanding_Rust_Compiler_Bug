{"sha": "e8782eeb6327eb79b132cc3f71bfaf55310dde00", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NzgyZWViNjMyN2ViNzliMTMyY2MzZjcxYmZhZjU1MzEwZGRlMDA=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T16:34:14Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-06-10T16:34:14Z"}, "message": "fix tests, remove some warnings", "tree": {"sha": "55be12fd3e32a320f11b3d7cf6125a825aede7c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55be12fd3e32a320f11b3d7cf6125a825aede7c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8782eeb6327eb79b132cc3f71bfaf55310dde00", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8782eeb6327eb79b132cc3f71bfaf55310dde00", "html_url": "https://github.com/rust-lang/rust/commit/e8782eeb6327eb79b132cc3f71bfaf55310dde00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8782eeb6327eb79b132cc3f71bfaf55310dde00/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b", "html_url": "https://github.com/rust-lang/rust/commit/2fa83c05035855f4b8f9a8b671d8d7cd69b60f8b"}], "stats": {"total": 62, "additions": 18, "deletions": 44}, "files": [{"sha": "3c0828def154ac60d2296f73e4226539e964367a", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -802,15 +802,15 @@ Use declarations support a number of convenient shortcuts:\n An example of `use` declarations:\n \n ~~~~\n-use std::float::{sin, pow};\n-use std::option::Some;\n+use std::float::sin;\n+use std::option::{Some, None};\n \n fn main() {\n-    // Equivalent to 'info!(std::float::pow(std::float::sin(1.0), 2.0));'\n-    info!(pow(sin(1.0), 2.0));\n+    // Equivalent to 'info!(std::float::sin(1.0));'\n+    info!(sin(1.0));\n \n-    // Equivalent to 'info!(std::option::Some(1.0));'\n-    info!(Some(1.0));\n+    // Equivalent to 'info!(~[std::option::Some(1.0), std::option::None]);'\n+    info!(~[Some(1.0), None]);\n }\n ~~~~\n "}, {"sha": "cdc0defcbcab08c3bd9ffb00f857cb628be6c4bc", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -11,7 +11,6 @@\n use core::prelude::*;\n \n use core::io;\n-use core::str;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "2888d4223b714ab3816c963e74c50f2596ab74fc", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -16,7 +16,6 @@ use common;\n use core::iterator::IteratorUtil;\n use core::io;\n use core::os;\n-use core::str;\n \n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out"}, {"sha": "83cda31c68089d84d499f0ad05a68102de29707a", "filename": "src/libextra/net_url.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_url.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -19,7 +19,6 @@ use core::cmp::Eq;\n use core::io::{Reader, ReaderUtil};\n use core::io;\n use core::hashmap::HashMap;\n-use core::str;\n use core::to_bytes;\n use core::uint;\n \n@@ -394,7 +393,7 @@ enum Input {\n // returns userinfo, host, port, and unparsed part, or an error\n fn get_authority(rawurl: &str) ->\n     Result<(Option<UserInfo>, ~str, Option<~str>, ~str), ~str> {\n-    if !raw_url.starts_with(\"//\") {\n+    if !rawurl.starts_with(\"//\") {\n         // there is no authority.\n         return Ok((None, ~\"\", None, rawurl.to_str()));\n     }"}, {"sha": "de54964142349c70b7097118440fb4bdc1127970", "filename": "src/libextra/rope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frope.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -40,6 +40,7 @@ use core::prelude::*;\n use core::iterator::IteratorUtil;\n use core::uint;\n use core::vec;\n+use core::str;\n \n /// The type of ropes.\n pub type Rope = node::Root;\n@@ -1187,8 +1188,6 @@ pub mod node {\n     pub mod char_iterator {\n         use core::prelude::*;\n \n-        use core::str;\n-\n         use rope::node::{Leaf, Node};\n         use rope::node::leaf_iterator;\n "}, {"sha": "3ab8bb1f60bc2b3fba7c73650163ad3b9fc91d1c", "filename": "src/libextra/semver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Fsemver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibextra%2Fsemver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fsemver.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -20,7 +20,6 @@ use core::cmp;\n use core::io::{ReaderUtil};\n use core::io;\n use core::option::{Option, Some, None};\n-use core::str;\n use core::to_str::ToStr;\n use core::uint;\n "}, {"sha": "dbeea417a3dd9f5b44ffb3b5812533575a9f721c", "filename": "src/libfuzzer/fuzzer.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibfuzzer%2Ffuzzer.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibfuzzer%2Ffuzzer.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfuzzer%2Ffuzzer.rc?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -37,7 +37,6 @@ use std::result;\n use std::run;\n use std::str;\n use std::uint;\n-use std::vec;\n \n use syntax::diagnostic;\n use syntax::parse::token::ident_interner;"}, {"sha": "8e015d9a677e151ab4198d4a10065d75374cc8b6", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -1995,7 +1995,7 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n \n     debug!(\"trans_enum_variant: name=%s tps=%s repr=%? enum_ty=%s\",\n            unsafe { str::raw::from_c_str(llvm::LLVMGetValueName(llfndecl)) },\n-           ~\"[\" + ty_param_substs.map(|&t| ty_to_str(ccx.tcx.connect(t)), \", \") + \"]\",\n+           ~\"[\" + ty_param_substs.map(|&t| ty_to_str(ccx.tcx, t)).connect(\", \") + \"]\",\n            repr, ty_to_str(ccx.tcx, enum_ty));\n \n     adt::trans_start_init(bcx, repr, fcx.llretptr.get(), disr);"}, {"sha": "8b2814875046ab13104bc7d77d99e89d842f0e32", "filename": "src/librustc/middle/trans/build.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -192,9 +192,7 @@ pub fn Invoke(cx: block,\n     terminate(cx, \"Invoke\");\n     debug!(\"Invoke(%s with arguments (%s))\",\n            val_str(cx.ccx().tn, Fn),\n-           vec::map(Args.connect(|a| val_str(cx.ccx().tn,\n-                                                   *a).to_owned()),\n-                        \", \"));\n+           Args.map(|a| val_str(cx.ccx().tn, *a).to_owned()).connect(\", \"));\n     unsafe {\n         count_insn(cx, \"invoke\");\n         llvm::LLVMBuildInvoke(B(cx),"}, {"sha": "b12b1499759f9ca5a9fe37f39e6b1ebf0041b98e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -115,7 +115,6 @@ use core::iterator::IteratorUtil;\n use core::cast::transmute;\n use core::hashmap::HashMap;\n use core::result;\n-use core::str;\n use core::util::replace;\n use core::vec;\n use extra::list::Nil;"}, {"sha": "364d8b2d052c3e6d67faccb91e1841a3ffa518b2", "filename": "src/librustc/middle/typeck/infer/to_str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fto_str.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -18,7 +18,6 @@ use middle::typeck::infer::InferCtxt;\n use middle::typeck::infer::unify::{Redirect, Root, VarValue};\n use util::ppaux::{mt_to_str, ty_to_str, trait_ref_to_str};\n \n-use core::str;\n use core::uint;\n use syntax::ast;\n "}, {"sha": "9556fd3e2574d053846a6dbe4db3962b0eed2148", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -16,7 +16,6 @@ use syntax::visit;\n \n use core::hashmap::HashSet;\n use core::io;\n-use core::str;\n use extra;\n \n pub fn time<T>(do_it: bool, what: ~str, thunk: &fn() -> T) -> T {"}, {"sha": "0900d93e498f354bbda22955364b09467d57dc28", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -143,7 +143,7 @@ fn try_parsing_version(s: &str) -> Option<Version> {\n     let s = s.trim();\n     debug!(\"Attempting to parse: %s\", s);\n     let mut parse_state = Start;\n-    for s.iter().advance |&c| {\n+    for s.iter().advance |c| {\n         if char::is_digit(c) {\n             parse_state = SawDigit;\n         }\n@@ -171,7 +171,7 @@ fn is_url_like(p: &RemotePath) -> bool {\n /// Otherwise, return None.\n pub fn split_version<'a>(s: &'a str) -> Option<(&'a str, Version)> {\n     // reject strings with multiple '#'s\n-    if s.splitn_iter('#', 2).count() > 1 {\n+    if s.splitn_iter('#', 2).count() > 2 {\n         return None;\n     }\n     match s.rfind('#') {"}, {"sha": "58711360c35644189f96e1de26a73c69169ec96c", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -1836,7 +1836,6 @@ mod tests {\n     use io;\n     use path::Path;\n     use result;\n-    use str;\n     use u64;\n     use vec;\n "}, {"sha": "8cd69f32e4969b1dcdbc112edd1a8148ea8e6014", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -1800,7 +1800,7 @@ impl<'self> StrSlice<'self> for &'self str {\n      */\n     #[inline]\n     fn substr(&self, begin: uint, n: uint) -> &'self str {\n-        s.slice(begin, begin + count_bytes(s, begin, n))\n+        self.slice(begin, begin + count_bytes(*self, begin, n))\n     }\n     /// Escape each char in `s` with char::escape_default.\n     #[inline]\n@@ -2318,7 +2318,6 @@ impl<'self> Iterator<u8> for StrBytesRevIterator<'self> {\n mod tests {\n     use iterator::IteratorUtil;\n     use container::Container;\n-    use char;\n     use option::Some;\n     use libc::c_char;\n     use libc;\n@@ -3026,14 +3025,6 @@ mod tests {\n         assert_eq!(~\"YMCA\", map(\"ymca\", |c| unsafe {libc::toupper(c as c_char)} as char));\n     }\n \n-    #[test]\n-    fn test_chars() {\n-        let ss = ~\"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        assert!(~['\u0e28','\u0e44','\u0e17','\u0e22','\u4e2d','\u534e','V','i','\u1ec7','t',' ','N','a',\n-                       'm']\n-            == to_chars(ss));\n-    }\n-\n     #[test]\n     fn test_utf16() {\n         let pairs ="}, {"sha": "618d5095777a91ccb6b3766e0b0262ad7fb46b2a", "filename": "src/libstd/str/ascii.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fstr%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibstd%2Fstr%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr%2Fascii.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -202,7 +202,6 @@ impl ToStrConsume for ~[Ascii] {\n #[cfg(test)]\n mod tests {\n     use super::*;\n-    use str;\n \n     macro_rules! v2ascii (\n         ( [$($e:expr),*]) => ( [$(Ascii{chr:$e}),*]);"}, {"sha": "2e60f7d02dfbc56ab2f86ac8aa94ad637e87255d", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -24,7 +24,6 @@ use syntax::parse::token::special_idents;\n \n use core::cmp;\n use core::hashmap::HashMap;\n-use core::str;\n use core::vec;\n \n pub enum path_elt {"}, {"sha": "3d6269942fd5b4b2f837c40d24201ff0f8600333", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -23,7 +23,6 @@ use visit;\n use core::hashmap::HashMap;\n use core::int;\n use core::option;\n-use core::str;\n use core::to_bytes;\n \n pub fn path_name_i(idents: &[ident]) -> ~str {"}, {"sha": "d3efd07aa045d5d372f647411564ea2a7ab6104c", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -21,7 +21,6 @@ use ext::base::*;\n use parse;\n use parse::token;\n \n-use core::str;\n use core::vec;\n \n enum State {"}, {"sha": "1076c5d0b98f593e5e93471a7772cb232ea221de", "filename": "src/libsyntax/ext/pipes/liveness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fliveness.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -42,7 +42,6 @@ use core::prelude::*;\n use ext::base::ExtCtxt;\n use ext::pipes::proto::{protocol_};\n \n-use core::str;\n use extra::bitv::Bitv;\n \n pub fn analyze(proto: @mut protocol_, _cx: @ExtCtxt) {"}, {"sha": "e5a77cc21fb8df7151764cd246252694475231e4", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -24,7 +24,6 @@ use parse::token;\n \n use core::iterator::IteratorUtil;\n use core::hashmap::HashMap;\n-use core::str;\n use core::uint;\n use core::vec;\n \n@@ -371,14 +370,14 @@ pub fn parse(\n         } else {\n             if (bb_eis.len() > 0u && next_eis.len() > 0u)\n                 || bb_eis.len() > 1u {\n-                let nts = vec::map(bb_eis.connect(|ei| {\n+                let nts = bb_eis.map(|ei| {\n                     match ei.elts[ei.idx].node {\n                       match_nonterminal(ref bind,ref name,_) => {\n                         fmt!(\"%s ('%s')\", *ident_to_str(name),\n                              *ident_to_str(bind))\n                       }\n                       _ => fail!()\n-                    } }), \" or \");\n+                    } }).connect(\" or \");\n                 return error(sp, fmt!(\n                     \"Local ambiguity: multiple parsing options: \\\n                      built-in NTs %s or %u other options.\","}, {"sha": "4029bd18338c33d28c13a1882ac3faaa559dc2b3", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8782eeb6327eb79b132cc3f71bfaf55310dde00/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=e8782eeb6327eb79b132cc3f71bfaf55310dde00", "patch": "@@ -14,7 +14,8 @@\n \n extern mod std;\n \n-use std::{str, int, vec};\n+use std::str::StrVector;\n+use std::{int, vec};\n \n trait to_str {\n     fn to_str(&self) -> ~str;\n@@ -26,7 +27,7 @@ impl to_str for int {\n \n impl<T:to_str> to_str for ~[T] {\n     fn to_str(&self) -> ~str {\n-        ~\"[\" + self.map(|e| e.to_str()).connect(\", \") + \"]\"\n+        ~\"[\" + vec::map(*self, |e| e.to_str()).connect(\", \") + \"]\"\n     }\n }\n "}]}