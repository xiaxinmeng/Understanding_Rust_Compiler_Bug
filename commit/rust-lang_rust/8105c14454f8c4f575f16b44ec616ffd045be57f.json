{"sha": "8105c14454f8c4f575f16b44ec616ffd045be57f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDVjMTQ0NTRmOGM0ZjU3NWYxNmI0NGVjNjE2ZmZkMDQ1YmU1N2Y=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:14:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T19:14:56Z"}, "message": "Improve debug_dump performance", "tree": {"sha": "d8d2aba889583afa2e6045f024656918b5f273db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d2aba889583afa2e6045f024656918b5f273db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8105c14454f8c4f575f16b44ec616ffd045be57f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8105c14454f8c4f575f16b44ec616ffd045be57f", "html_url": "https://github.com/rust-lang/rust/commit/8105c14454f8c4f575f16b44ec616ffd045be57f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8105c14454f8c4f575f16b44ec616ffd045be57f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d8cef4c0eec3718d92560337f9a1d4fcf04d01f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d8cef4c0eec3718d92560337f9a1d4fcf04d01f", "html_url": "https://github.com/rust-lang/rust/commit/5d8cef4c0eec3718d92560337f9a1d4fcf04d01f"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "707fbd94c3dac05ea17acd6144a0cb4d76d86620", "filename": "cli/src/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -33,9 +33,7 @@ fn main() -> Result<()> {\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", _) => {\n-            let start = Instant::now();\n             let tree = parse()?;\n-            eprintln!(\"elapsed {:?}\", start.elapsed());\n             println!(\"{}\", tree);\n         }\n         (\"render-test\", Some(matches)) => {\n@@ -53,7 +51,9 @@ fn main() -> Result<()> {\n \n fn parse() -> Result<String> {\n     let text = read_stdin()?;\n+    let start = Instant::now();\n     let file = libsyntax2::parse(text);\n+    eprintln!(\"elapsed {:?}\", start.elapsed());\n     let tree = libsyntax2::utils::dump_tree(&file);\n     Ok(tree)\n }"}, {"sha": "a50ec2a093055b48223169244df7c8a7af66bd1c", "filename": "src/algo/walk.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Falgo%2Fwalk.rs?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -8,12 +8,12 @@ pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = SyntaxNodeR\n }\n \n #[derive(Debug, Copy, Clone)]\n-enum WalkEvent<'a> {\n+pub enum WalkEvent<'a> {\n     Enter(SyntaxNodeRef<'a>),\n     Exit(SyntaxNodeRef<'a>),\n }\n \n-fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = WalkEvent<'a>> {\n+pub fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = WalkEvent<'a>> {\n     let mut done = false;\n     ::itertools::unfold(WalkEvent::Enter(root), move |pos| {\n         if done {"}, {"sha": "a72d9e3cbce611081c1da021f8f43889d26f1d84", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -41,8 +41,6 @@ pub use {\n     yellow::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot},\n };\n \n-pub(crate) use yellow::SyntaxError;\n-\n pub fn parse(text: String) -> SyntaxNode {\n     let tokens = tokenize(&text);\n     parser::parse::<yellow::GreenBuilder>(text, &tokens)"}, {"sha": "327d89a2453f4282b607d2b885e682f91b9c055c", "filename": "src/utils.rs", "status": "modified", "additions": 39, "deletions": 37, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -1,46 +1,48 @@\n-use std::{collections::BTreeSet, fmt::Write};\n-use {SyntaxError, SyntaxNode, SyntaxNodeRef};\n+use std::{fmt::Write};\n+use {\n+    SyntaxNode,\n+    algo::walk::{WalkEvent, walk},\n+};\n \n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: &SyntaxNode) -> String {\n     let syntax = syntax.as_ref();\n-    let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n-    let mut result = String::new();\n-    go(syntax, &mut result, 0, &mut errors);\n-    return result;\n-\n-    fn go(\n-        node: SyntaxNodeRef,\n-        buff: &mut String,\n-        level: usize,\n-        errors: &mut BTreeSet<SyntaxError>,\n-    ) {\n-        buff.push_str(&String::from(\"  \").repeat(level));\n-        writeln!(buff, \"{:?}\", node).unwrap();\n-        let my_errors: Vec<_> = errors\n-            .iter()\n-            .filter(|e| e.offset == node.range().start())\n-            .cloned()\n-            .collect();\n-        for err in my_errors {\n-            errors.remove(&err);\n-            buff.push_str(&String::from(\"  \").repeat(level));\n-            writeln!(buff, \"err: `{}`\", err.message).unwrap();\n-        }\n+    let mut errors: Vec<_> = syntax.root.errors.iter().cloned().collect();\n+    errors.sort_by_key(|e| e.offset);\n+    let mut err_pos = 0;\n+    let mut level = 0;\n+    let mut buf = String::new();\n+    macro_rules! indent {\n+        () => {\n+            for _ in 0..level {\n+                buf.push_str(\"  \");\n+            }\n+        };\n+    }\n \n-        for child in node.children() {\n-            go(child, buff, level + 1, errors)\n+    for event in walk(syntax) {\n+        match event {\n+            WalkEvent::Enter(node) => {\n+                indent!();\n+                writeln!(buf, \"{:?}\", node).unwrap();\n+                if node.first_child().is_none() {\n+                    let off = node.range().end();\n+                    while err_pos < errors.len() && errors[err_pos].offset <= off {\n+                        indent!();\n+                        writeln!(buf, \"err: `{}`\", errors[err_pos].message).unwrap();\n+                        err_pos += 1;\n+                    }\n+                }\n+                level += 1;\n+            },\n+            WalkEvent::Exit(_) => level -= 1,\n         }\n+    }\n \n-        let my_errors: Vec<_> = errors\n-            .iter()\n-            .filter(|e| e.offset == node.range().end())\n-            .cloned()\n-            .collect();\n-        for err in my_errors {\n-            errors.remove(&err);\n-            buff.push_str(&String::from(\"  \").repeat(level));\n-            writeln!(buff, \"err: `{}`\", err.message).unwrap();\n-        }\n+    assert_eq!(level, 0);\n+    for err in errors[err_pos..].iter()  {\n+        writeln!(buf, \"err: `{}`\", err.message).unwrap();\n     }\n+\n+    return buf;\n }"}, {"sha": "f35b97b48ad6c7bfe8ccf5ff32c9649b90c9ad71", "filename": "tests/data/parser/err/0001_item_recovery_in_file.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0001_item_recovery_in_file.txt?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -1,7 +1,7 @@\n FILE@[0; 21)\n-err: `expected item`\n   ERROR@[0; 3)\n     IF_KW@[0; 2)\n+    err: `expected item`\n     WHITESPACE@[2; 3)\n     err: `expected item`\n   ERROR@[3; 10)"}, {"sha": "d58bf263b31f5e6cdf71a3188b167e481be3427a", "filename": "tests/data/parser/err/0004_use_path_bad_segment.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0004_use_path_bad_segment.txt?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -9,8 +9,8 @@ FILE@[0; 12)\n               WHITESPACE@[3; 4)\n               IDENT@[4; 7) \"foo\"\n         COLONCOLON@[7; 9)\n-        err: `expected SEMI`\n         err: `expected identifier`\n+        err: `expected SEMI`\n         err: `expected item`\n         PATH_SEGMENT@[9; 9)\n   ERROR@[9; 11)"}, {"sha": "07c99e9fcea16f1a01d3e9ff25624474544749f5", "filename": "tests/data/parser/err/0007_stray_curly_in_file.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Ferr%2F0007_stray_curly_in_file.txt?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -1,7 +1,7 @@\n FILE@[0; 31)\n-err: `expected item`\n   ERROR@[0; 3)\n     R_CURLY@[0; 1)\n+    err: `expected item`\n     WHITESPACE@[1; 3)\n   STRUCT_ITEM@[3; 14)\n     STRUCT_KW@[3; 9)"}, {"sha": "9b210dcd4208be479af27768b00dbb93eb69faa5", "filename": "tests/data/parser/inline/0023_array_type_missing_semi.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0023_array_type_missing_semi.txt?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -13,8 +13,8 @@ FILE@[0; 18)\n         L_PAREN@[10; 11)\n         R_PAREN@[11; 12)\n         WHITESPACE@[12; 13)\n-        err: `expected SEMI`\n         err: `expected `;` or `]``\n+        err: `expected SEMI`\n         err: `expected item`\n   ERROR@[13; 15)\n     INT_NUMBER@[13; 15)"}, {"sha": "c99714ed4bc3937b32f1c43f3308cc6ddf69feaa", "filename": "tests/data/parser/inline/0029_fn_pointer_type_missing_fn.txt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "raw_url": "https://github.com/rust-lang/rust/raw/8105c14454f8c4f575f16b44ec616ffd045be57f/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0029_fn_pointer_type_missing_fn.txt?ref=8105c14454f8c4f575f16b44ec616ffd045be57f", "patch": "@@ -8,8 +8,8 @@ FILE@[0; 20)\n     EQ@[7; 8)\n     WHITESPACE@[8; 9)\n     UNSAFE_KW@[9; 15)\n-    err: `expected SEMI`\n     err: `expected `fn``\n+    err: `expected SEMI`\n     WHITESPACE@[15; 16)\n     err: `expected item`\n   ERROR@[16; 17)"}]}