{"sha": "c12575d3173eb6ba985482808a87e54f23ad328e", "node_id": "C_kwDOAAsO6NoAKGMxMjU3NWQzMTczZWI2YmE5ODU0ODI4MDhhODdlNTRmMjNhZDMyOGU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-05T08:34:06Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-05T08:34:06Z"}, "message": "Normalize in infcx instead of globally for `Option::as_deref` suggestion\n\nThe projection may contain inference variables. These inference\nvariables are local to the local inference context. Using\n`tcx.normalize_erasing_regions` doesn't work here because this method is\nglobal and does not have access to the inference context. It's therefore\nunable to deal with the inference variables. We normalize in the local\ninference context instead, which knowns about the inference variables.", "tree": {"sha": "f0a445712b9b8ea1df72cc6b833fd4504a6fae9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0a445712b9b8ea1df72cc6b833fd4504a6fae9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12575d3173eb6ba985482808a87e54f23ad328e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12575d3173eb6ba985482808a87e54f23ad328e", "html_url": "https://github.com/rust-lang/rust/commit/c12575d3173eb6ba985482808a87e54f23ad328e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12575d3173eb6ba985482808a87e54f23ad328e/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "896ccb96063526818aa560af43d3a918df97fe48", "url": "https://api.github.com/repos/rust-lang/rust/commits/896ccb96063526818aa560af43d3a918df97fe48", "html_url": "https://github.com/rust-lang/rust/commit/896ccb96063526818aa560af43d3a918df97fe48"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "80d0faca670a76f8930d66f17037c277ab0c5006", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c12575d3173eb6ba985482808a87e54f23ad328e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12575d3173eb6ba985482808a87e54f23ad328e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=c12575d3173eb6ba985482808a87e54f23ad328e", "patch": "@@ -3592,7 +3592,8 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             // Extract `<U as Deref>::Target` assoc type and check that it is `T`\n             && let Some(deref_target_did) = tcx.lang_items().deref_target()\n             && let projection = tcx.mk_projection(deref_target_did, tcx.mk_substs(&[ty::GenericArg::from(found_ty)]))\n-            && let Ok(deref_target) = tcx.try_normalize_erasing_regions(param_env, projection)\n+            && let InferOk { value: deref_target, obligations } = infcx.at(&ObligationCause::dummy(), param_env).normalize(projection)\n+            && obligations.iter().all(|obligation| infcx.predicate_must_hold_modulo_regions(obligation))\n             && infcx.can_eq(param_env, deref_target, target_ty)\n         {\n             let help = if let hir::Mutability::Mut = needs_mut"}, {"sha": "5febbbe392b245b99786e22aae1e6be9164a1070", "filename": "tests/ui/mismatched_types/suggest-option-asderef-inference-var.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c12575d3173eb6ba985482808a87e54f23ad328e/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12575d3173eb6ba985482808a87e54f23ad328e/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.rs?ref=c12575d3173eb6ba985482808a87e54f23ad328e", "patch": "@@ -0,0 +1,9 @@\n+fn deref_int(a: &i32) -> i32 {\n+    *a\n+}\n+\n+fn main() {\n+    // https://github.com/rust-lang/rust/issues/112293\n+    let _has_inference_vars: Option<i32> = Some(0).map(deref_int);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "71c4729e31038204480ddf243fd5878373d074a2", "filename": "tests/ui/mismatched_types/suggest-option-asderef-inference-var.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c12575d3173eb6ba985482808a87e54f23ad328e/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12575d3173eb6ba985482808a87e54f23ad328e/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fsuggest-option-asderef-inference-var.stderr?ref=c12575d3173eb6ba985482808a87e54f23ad328e", "patch": "@@ -0,0 +1,24 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/suggest-option-asderef-inference-var.rs:7:56\n+   |\n+LL | fn deref_int(a: &i32) -> i32 {\n+   | ---------------------------- found signature defined here\n+...\n+LL |     let _has_inference_vars: Option<i32> = Some(0).map(deref_int);\n+   |                                                    --- ^^^^^^^^^ expected due to this\n+   |                                                    |\n+   |                                                    required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn({integer}) -> _`\n+              found function signature `for<'a> fn(&'a i32) -> _`\n+note: required by a bound in `Option::<T>::map`\n+  --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: do not borrow the argument\n+   |\n+LL - fn deref_int(a: &i32) -> i32 {\n+LL + fn deref_int(a: i32) -> i32 {\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}]}