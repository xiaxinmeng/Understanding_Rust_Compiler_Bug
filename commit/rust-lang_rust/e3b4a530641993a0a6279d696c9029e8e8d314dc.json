{"sha": "e3b4a530641993a0a6279d696c9029e8e8d314dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYjRhNTMwNjQxOTkzYTBhNjI3OWQ2OTZjOTAyOWU4ZThkMzE0ZGM=", "commit": {"author": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2016-09-29T21:59:15Z"}, "committer": {"name": "Andrea Pretto", "email": "eulerdisk@gmail.com", "date": "2016-09-29T21:59:15Z"}, "message": "Test Case for Incr. Comp. Hash for enums #36674.", "tree": {"sha": "5d5dcb206fdd565db77368c863ad629a07099fca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d5dcb206fdd565db77368c863ad629a07099fca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3b4a530641993a0a6279d696c9029e8e8d314dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b4a530641993a0a6279d696c9029e8e8d314dc", "html_url": "https://github.com/rust-lang/rust/commit/e3b4a530641993a0a6279d696c9029e8e8d314dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3b4a530641993a0a6279d696c9029e8e8d314dc/comments", "author": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eulerdisk", "id": 10089822, "node_id": "MDQ6VXNlcjEwMDg5ODIy", "avatar_url": "https://avatars.githubusercontent.com/u/10089822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eulerdisk", "html_url": "https://github.com/eulerdisk", "followers_url": "https://api.github.com/users/eulerdisk/followers", "following_url": "https://api.github.com/users/eulerdisk/following{/other_user}", "gists_url": "https://api.github.com/users/eulerdisk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eulerdisk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eulerdisk/subscriptions", "organizations_url": "https://api.github.com/users/eulerdisk/orgs", "repos_url": "https://api.github.com/users/eulerdisk/repos", "events_url": "https://api.github.com/users/eulerdisk/events{/privacy}", "received_events_url": "https://api.github.com/users/eulerdisk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289f3a4ca79916d6445b452fc19a18a1e42a879a", "url": "https://api.github.com/repos/rust-lang/rust/commits/289f3a4ca79916d6445b452fc19a18a1e42a879a", "html_url": "https://github.com/rust-lang/rust/commit/289f3a4ca79916d6445b452fc19a18a1e42a879a"}], "stats": {"total": 715, "additions": 715, "deletions": 0}, "files": [{"sha": "bd477552742ef3d9c2d7662c9da9fec71d62f978", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "added", "additions": 715, "deletions": 0, "changes": 715, "blob_url": "https://github.com/rust-lang/rust/blob/e3b4a530641993a0a6279d696c9029e8e8d314dc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3b4a530641993a0a6279d696c9029e8e8d314dc/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=e3b4a530641993a0a6279d696c9029e8e8d314dc", "patch": "@@ -0,0 +1,715 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+// This test case tests the incremental compilation hash (ICH) implementation\n+// for struct definitions.\n+\n+// The general pattern followed here is: Change one thing between rev1 and rev2\n+// and make sure that the hash has changed, then change nothing between rev2 and\n+// rev3 and make sure that the hash has not changed.\n+\n+// We also test the ICH for struct definitions exported in metadata. Same as\n+// above, we want to make sure that the change between rev1 and rev2 also\n+// results in a change of the ICH for the struct's metadata, and that it stays\n+// the same between rev2 and rev3.\n+\n+// must-compile-successfully\n+// revisions: cfail1 cfail2 cfail3\n+// compile-flags: -Z query-dep-graph\n+\n+#![allow(warnings)]\n+#![feature(rustc_attrs)]\n+#![crate_type=\"rlib\"]\n+\n+\n+\n+// Change enum visibility -----------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumVisibility { A }\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+pub enum EnumVisibility { A }\n+\n+\n+\n+// Change name of a c-style variant -------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeNameCStyleVariant {\n+    Variant1,\n+    Variant2,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeNameCStyleVariant {\n+    Variant1,\n+    Variant2Changed,\n+}\n+\n+\n+\n+// Change name of a tuple-style variant ---------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeNameTupleStyleVariant {\n+    Variant1,\n+    Variant2(u32, f32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeNameTupleStyleVariant {\n+    Variant1,\n+    Variant2Changed(u32, f32),\n+}\n+\n+\n+\n+// Change name of a struct-style variant --------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeNameStructStyleVariant {\n+    Variant1,\n+    Variant2 { a: u32, b: f32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeNameStructStyleVariant {\n+    Variant1,\n+    Variant2Changed { a: u32, b: f32 },\n+}\n+\n+\n+\n+// Change the value of a c-style variant --------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeValueCStyleVariant0 {\n+    Variant1,\n+    Variant2 = 11,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeValueCStyleVariant0 {\n+    Variant1,\n+    Variant2 = 22,\n+}\n+\n+#[cfg(cfail1)]\n+enum EnumChangeValueCStyleVariant1 {\n+    Variant1,\n+    Variant2,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeValueCStyleVariant1 {\n+    Variant1,\n+    Variant2 = 11,\n+}\n+\n+\n+\n+// Add a c-style variant ------------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddCStyleVariant {\n+    Variant1,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumAddCStyleVariant {\n+    Variant1,\n+    Variant2,\n+}\n+\n+\n+\n+// Remove a c-style variant ---------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumRemoveCStyleVariant {\n+    Variant1,\n+    Variant2,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumRemoveCStyleVariant {\n+    Variant1,\n+}\n+\n+\n+\n+// Add a tuple-style variant --------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddTupleStyleVariant {\n+    Variant1,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumAddTupleStyleVariant {\n+    Variant1,\n+    Variant2(u32, f32),\n+}\n+\n+\n+\n+// Remove a tuple-style variant -----------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumRemoveTupleStyleVariant {\n+    Variant1,\n+    Variant2(u32, f32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumRemoveTupleStyleVariant {\n+    Variant1,\n+}\n+\n+\n+\n+// Add a struct-style variant -------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddStructStyleVariant {\n+    Variant1,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumAddStructStyleVariant {\n+    Variant1,\n+    Variant2 { a: u32, b: f32 },\n+}\n+\n+\n+\n+// Remove a struct-style variant ----------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumRemoveStructStyleVariant {\n+    Variant1,\n+    Variant2 { a: u32, b: f32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumRemoveStructStyleVariant {\n+    Variant1,\n+}\n+\n+\n+\n+// Change the type of a field in a tuple-style variant ------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeFieldTypeTupleStyleVariant {\n+    Variant1(u32, u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeFieldTypeTupleStyleVariant {\n+    Variant1(u32, u64),\n+}\n+\n+\n+\n+// Change the type of a field in a struct-style variant -----------------------\n+#[cfg(cfail1)]\n+enum EnumChangeFieldTypeStructStyleVariant {\n+    Variant1,\n+    Variant2 { a: u32, b: u32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeFieldTypeStructStyleVariant {\n+    Variant1,\n+    Variant2 { a: u32, b: u64 },\n+}\n+\n+\n+\n+// Change the name of a field in a struct-style variant -----------------------\n+#[cfg(cfail1)]\n+enum EnumChangeFieldNameStructStyleVariant {\n+    Variant1 { a: u32, b: u32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeFieldNameStructStyleVariant {\n+    Variant1 { a: u32, c: u32 },\n+}\n+\n+\n+\n+// Change order of fields in a tuple-style variant ----------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeOrderTupleStyleVariant {\n+    Variant1(u32, u64),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeOrderTupleStyleVariant {\n+    Variant1(u64, u32),\n+}\n+\n+\n+\n+// Change order of fields in a struct-style variant ---------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeFieldOrderStructStyleVariant {\n+    Variant1 { a: u32, b: f32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumChangeFieldOrderStructStyleVariant {\n+    Variant1 { b: u32, a: u32 },\n+}\n+\n+\n+\n+// Add a field to a tuple-style variant ---------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddFieldTupleStyleVariant {\n+    Variant1(u32, u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumAddFieldTupleStyleVariant {\n+    Variant1(u32, u32, u32),\n+}\n+\n+\n+\n+// Add a field to a struct-style variant --------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddFieldStructStyleVariant {\n+    Variant1 { a: u32, b: u32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumAddFieldStructStyleVariant {\n+    Variant1 { a: u32, b: u32, c: u32 },\n+}\n+\n+\n+\n+// Add #[must_use] to the enum ------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddMustUse {\n+    Variant1,\n+    Variant2,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[must_use]\n+enum EnumAddMustUse {\n+    Variant1,\n+    Variant2,\n+}\n+\n+\n+\n+// Add #[repr(C)] to the enum -------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddReprC {\n+    Variant1,\n+    Variant2,\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddReprC {\n+    Variant1,\n+    Variant2,\n+}\n+\n+\n+\n+// Change the name of a type parameter ----------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeNameOfTypeParameter<S> {\n+    Variant1(S),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumChangeNameOfTypeParameter<T> {\n+    Variant1(T),\n+}\n+\n+\n+\n+// Add a type parameter ------------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddTypeParameter<S> {\n+    Variant1(S),\n+    Variant2(S),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddTypeParameter<S, T> {\n+    Variant1(S),\n+    Variant2(T),\n+}\n+\n+\n+\n+// Change the name of a lifetime parameter ------------------------------------\n+#[cfg(cfail1)]\n+enum EnumChangeNameOfLifetimeParameter<'a> {\n+    Variant1(&'a u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumChangeNameOfLifetimeParameter<'b> {\n+    Variant1(&'b u32),\n+}\n+\n+\n+\n+// Add a lifetime parameter ---------------------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddLifetimeParameter<'a> {\n+    Variant1(&'a u32),\n+    Variant2(&'a u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddLifetimeParameter<'a, 'b> {\n+    Variant1(&'a u32),\n+    Variant2(&'b u32),\n+}\n+\n+\n+\n+// Add a lifetime bound to a lifetime parameter -------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddLifetimeParameterBound<'a, 'b> {\n+    Variant1(&'a u32),\n+    Variant2(&'b u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddLifetimeParameterBound<'a, 'b: 'a> {\n+    Variant1(&'a u32),\n+    Variant2(&'b u32),\n+}\n+\n+// Add a lifetime bound to a type parameter -----------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddLifetimeBoundToParameter<'a, T> {\n+    Variant1(T),\n+    Variant2(&'a u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddLifetimeBoundToParameter<'a, T: 'a> {\n+    Variant1(T),\n+    Variant2(&'a u32),\n+}\n+\n+\n+\n+// Add a trait bound to a type parameter --------------------------------------\n+#[cfg(cfail1)]\n+enum EnumAddTraitBound<S> {\n+    Variant1(S),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddTraitBound<T: Sync> {\n+    Variant1(T),\n+}\n+\n+\n+\n+// Add a lifetime bound to a lifetime parameter in where clause ---------------\n+#[cfg(cfail1)]\n+enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n+    Variant1(&'a u32),\n+    Variant2(&'b u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddLifetimeParameterBoundWhere<'a, 'b> where 'b: 'a {\n+    Variant1(&'a u32),\n+    Variant2(&'b u32),\n+}\n+\n+\n+\n+// Add a lifetime bound to a type parameter in where clause -------------------\n+#[cfg(cfail1)]\n+enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n+    Variant1(T),\n+    Variant2(&'a u32),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddLifetimeBoundToParameterWhere<'a, T> where T: 'a {\n+    Variant1(T),\n+    Variant2(&'a u32),\n+}\n+\n+\n+\n+// Add a trait bound to a type parameter in where clause ----------------------\n+#[cfg(cfail1)]\n+enum EnumAddTraitBoundWhere<S> {\n+    Variant1(S),\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+#[repr(C)]\n+enum EnumAddTraitBoundWhere<T> where T: Sync {\n+    Variant1(T),\n+}\n+\n+\n+\n+// In an enum with two variants, swap usage of type parameters ----------------\n+#[cfg(cfail1)]\n+enum EnumSwapUsageTypeParameters<A, B> {\n+    Variant1 { a: A },\n+    Variant2 { a: B },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumSwapUsageTypeParameters<A, B> {\n+    Variant1 { a: B },\n+    Variant2 { a: A },\n+}\n+\n+\n+\n+// In an enum with two variants, swap usage of lifetime parameters ------------\n+#[cfg(cfail1)]\n+enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n+    Variant1 { a: &'a u32 },\n+    Variant2 { b: &'b u32 },\n+}\n+\n+#[cfg(not(cfail1))]\n+#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_metadata_clean(cfg=\"cfail3\")]\n+enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n+    Variant1 { a: &'b u32 },\n+    Variant2 { b: &'a u32 },\n+}\n+\n+\n+\n+struct ReferencedType1;\n+struct ReferencedType2;\n+\n+\n+\n+// Change field type in tuple-style variant indirectly by modifying a use statement\n+mod change_field_type_indirectly_tuple_style {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as FieldType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as FieldType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    enum TupleStyle {\n+        Variant1(FieldType)\n+    }\n+}\n+\n+\n+\n+// Change field type in record-style variant indirectly by modifying a use statement\n+mod change_field_type_indirectly_struct_style {\n+    #[cfg(cfail1)]\n+    use super::ReferencedType1 as FieldType;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedType2 as FieldType;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    enum StructStyle {\n+        Variant1 { a: FieldType }\n+    }\n+}\n+\n+\n+\n+trait ReferencedTrait1 {}\n+trait ReferencedTrait2 {}\n+\n+\n+\n+// Change trait bound of type parameter indirectly by modifying a use statement\n+mod change_trait_bound_indirectly {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    enum Enum<T: Trait> {\n+        Variant1(T)\n+    }\n+}\n+\n+\n+\n+// Change trait bound of type parameter in where clause indirectly by modifying a use statement\n+mod change_trait_bound_indirectly_where {\n+    #[cfg(cfail1)]\n+    use super::ReferencedTrait1 as Trait;\n+    #[cfg(not(cfail1))]\n+    use super::ReferencedTrait2 as Trait;\n+\n+    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n+    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_metadata_dirty(cfg=\"cfail2\")]\n+    #[rustc_metadata_clean(cfg=\"cfail3\")]\n+    enum Enum<T> where T: Trait {\n+        Variant1(T)\n+    }\n+}\n+\n+"}]}