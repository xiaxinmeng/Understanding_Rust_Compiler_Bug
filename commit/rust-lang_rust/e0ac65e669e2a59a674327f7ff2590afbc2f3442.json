{"sha": "e0ac65e669e2a59a674327f7ff2590afbc2f3442", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYWM2NWU2NjllMmE1OWE2NzQzMjdmN2ZmMjU5MGFmYmMyZjM0NDI=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2017-10-07T10:19:34Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2017-10-07T21:27:28Z"}, "message": "address more FIXME whose associated issues were marked as closed\n\nupdate FIXME(#6298) to point to open issue 15020\nupdate FIXME(#6268) to point to RFC 811\nupdate FIXME(#10520) to point to RFC 1751\nremove FIXME for emscripten issue 4563 and include target in `test_estimate_scaling_factor`\nremove FIXME(#18207) since node_id isn't used for `ref` pattern analysis\nremove FIXME(#6308) since DST was implemented in #12938\nremove FIXME(#2658) since it was decided to not reorganize module\nremove FIXME(#20590) since it was decided to stay conservative with projection types\nremove FIXME(#20297) since it was decided that solving the issue is unnecessary\nremove FIXME(#27086) since closures do correspond to structs now\nremove FIXME(#13846) and enable `function_sections` for windows\nremove mention of #22079 in FIXME(#22079) since this is a general FIXME\nremove FIXME(#5074) since the restriction on borrow were lifted", "tree": {"sha": "b13925735814a635585c8535bb7cb3bbf8385aaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b13925735814a635585c8535bb7cb3bbf8385aaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0ac65e669e2a59a674327f7ff2590afbc2f3442", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0ac65e669e2a59a674327f7ff2590afbc2f3442", "html_url": "https://github.com/rust-lang/rust/commit/e0ac65e669e2a59a674327f7ff2590afbc2f3442", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0ac65e669e2a59a674327f7ff2590afbc2f3442/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cce93436d3628f5fa8288c7e84f4b695542c6ae3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cce93436d3628f5fa8288c7e84f4b695542c6ae3", "html_url": "https://github.com/rust-lang/rust/commit/cce93436d3628f5fa8288c7e84f4b695542c6ae3"}], "stats": {"total": 90, "additions": 16, "deletions": 74}, "files": [{"sha": "857aae72c8a5bd5d92a0088a36bbe3c37fc58b37", "filename": "src/libcore/tests/num/flt2dec/estimator.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnum%2Fflt2dec%2Festimator.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -8,11 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME https://github.com/kripken/emscripten/issues/4563\n-// NB we have to actually not compile this test to avoid\n-// an undefined symbol error\n-#![cfg(not(target_os = \"emscripten\"))]\n-\n use core::num::flt2dec::estimator::*;\n \n #[test]"}, {"sha": "5c86554f9079011e12b1244f40dce588c6f84309", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -171,7 +171,7 @@ fn build_local_id_to_index(body: Option<&hir::Body>,\n                            -> FxHashMap<hir::ItemLocalId, Vec<CFGIndex>> {\n     let mut index = FxHashMap();\n \n-    // FIXME (#6298): Would it be better to fold formals from decl\n+    // FIXME(#15020) Would it be better to fold formals from decl\n     // into cfg itself?  i.e. introduce a fn-based flow-graph in\n     // addition to the current block-based flow-graph, rather than\n     // have to put traversals like this here?"}, {"sha": "8754316ca840b1c508f58b4e3b5cebd1efff1114", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -477,10 +477,8 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n     fn pat_ty(&self, pat: &hir::Pat) -> McResult<Ty<'tcx>> {\n         let base_ty = self.node_ty(pat.hir_id)?;\n-        // FIXME (Issue #18207): This code detects whether we are\n-        // looking at a `ref x`, and if so, figures out what the type\n-        // *being borrowed* is.  But ideally we would put in a more\n-        // fundamental fix to this conflated use of the node id.\n+        // This code detects whether we are looking at a `ref x`,\n+        // and if so, figures out what the type *being borrowed* is.\n         let ret_ty = match pat.node {\n             PatKind::Binding(..) => {\n                 let bm = *self.tables"}, {"sha": "635bcbf7771e33cda34a80fd1d6abfdac500778d", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -960,7 +960,7 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n \n             hir::ExprAssignOp(..) | hir::ExprIndex(..) |\n             hir::ExprUnary(..) | hir::ExprCall(..) | hir::ExprMethodCall(..) => {\n-                // FIXME(#6268) Nested method calls\n+                // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n                 //\n                 // The lifetimes for a call or method call look as follows:\n                 //\n@@ -1081,8 +1081,6 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n     // Here, the expression `[...]` has an extended lifetime due to rule\n     // A, but the inner rvalues `a()` and `b()` have an extended lifetime\n     // due to rule C.\n-    //\n-    // FIXME(#6308) -- Note that `[]` patterns work more smoothly post-DST.\n \n     if let Some(expr) = init {\n         record_rvalue_scope_if_borrow_expr(visitor, &expr, blk_scope);"}, {"sha": "b636fc6c9950a7241b9f2071b7ac57a99bf57df2", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -28,8 +28,6 @@ pub enum FileMatch {\n }\n \n // A module for searching for libraries\n-// FIXME (#2658): I'm not happy how this module turned out. Should\n-// probably just be folded into cstore.\n \n pub struct FileSearch<'a> {\n     pub sysroot: &'a Path,"}, {"sha": "dc5ce7353246ab8e7972f309508073f4549f1286", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -252,7 +252,6 @@ fn uncovered_tys<'tcx>(tcx: TyCtxt, ty: Ty<'tcx>, infer_is_local: InferIsLocal)\n \n fn is_type_parameter(ty: Ty) -> bool {\n     match ty.sty {\n-        // FIXME(#20590) straighten story about projection types\n         ty::TyProjection(..) | ty::TyParam(..) => true,\n         _ => false,\n     }"}, {"sha": "cec79faff315d6fb4034f9f6e3d089d17d7f675d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -1309,13 +1309,13 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         };\n \n         if obligation.predicate.skip_binder().self_ty().is_ty_var() {\n-            // FIXME(#20297): Self is a type variable (e.g. `_: AsRef<str>`).\n+            // Self is a type variable (e.g. `_: AsRef<str>`).\n             //\n             // This is somewhat problematic, as the current scheme can't really\n             // handle it turning to be a projection. This does end up as truly\n             // ambiguous in most cases anyway.\n             //\n-            // Until this is fixed, take the fast path out - this also improves\n+            // Take the fast path out - this also improves\n             // performance by preventing assemble_candidates_from_impls from\n             // matching every impl for this trait.\n             return Ok(SelectionCandidateSet { vec: vec![], ambiguous: true });\n@@ -1383,8 +1383,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\"assemble_candidates_for_projected_tys({:?})\", obligation);\n \n-        // FIXME(#20297) -- just examining the self-type is very simplistic\n-\n         // before we go into the whole skolemization thing, just\n         // quickly check if the self-type is a projection at all.\n         match obligation.predicate.0.trait_ref.self_ty().sty {\n@@ -2174,14 +2172,6 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             ty::TyClosure(def_id, ref substs) => {\n-                // FIXME(#27086). We are invariant w/r/t our\n-                // func_substs, but we don't see them as\n-                // constituent types; this seems RIGHT but also like\n-                // something that a normal type couldn't simulate. Is\n-                // this just a gap with the way that PhantomData and\n-                // OIBIT interact? That is, there is no way to say\n-                // \"make me invariant with respect to this TYPE, but\n-                // do not act as though I can reach it\"\n                 substs.upvar_tys(def_id, self.tcx()).collect()\n             }\n "}, {"sha": "5e1dc485d420f7ba8505511982b925cf00d57e61", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -73,42 +73,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // projection).\n         match ty.sty {\n             ty::TyClosure(def_id, ref substs) => {\n-                // FIXME(#27086). We do not accumulate from substs, since they\n-                // don't represent reachable data. This means that, in\n-                // practice, some of the lifetime parameters might not\n-                // be in scope when the body runs, so long as there is\n-                // no reachable data with that lifetime. For better or\n-                // worse, this is consistent with fn types, however,\n-                // which can also encapsulate data in this fashion\n-                // (though it's somewhat harder, and typically\n-                // requires virtual dispatch).\n-                //\n-                // Note that changing this (in a naive way, at least)\n-                // causes regressions for what appears to be perfectly\n-                // reasonable code like this:\n-                //\n-                // ```\n-                // fn foo<'a>(p: &Data<'a>) {\n-                //    bar(|q: &mut Parser| q.read_addr())\n-                // }\n-                // fn bar(p: Box<FnMut(&mut Parser)+'static>) {\n-                // }\n-                // ```\n-                //\n-                // Note that `p` (and `'a`) are not used in the\n-                // closure at all, but to meet the requirement that\n-                // the closure type `C: 'static` (so it can be coerced\n-                // to the object type), we get the requirement that\n-                // `'a: 'static` since `'a` appears in the closure\n-                // type `C`.\n-                //\n-                // A smarter fix might \"prune\" unused `func_substs` --\n-                // this would avoid breaking simple examples like\n-                // this, but would still break others (which might\n-                // indeed be invalid, depending on your POV). Pruning\n-                // would be a subtle process, since we have to see\n-                // what func/type parameters are used and unused,\n-                // taking into consideration UFCS and so forth.\n \n                 for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);"}, {"sha": "21b8c4e082e7eac5f3cd0d028a676a03a382f757", "filename": "src/librustc_back/target/windows_base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fwindows_base.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -64,8 +64,7 @@ pub fn opts() -> TargetOptions {\n     ]);\n \n     TargetOptions {\n-        // FIXME(#13846) this should be enabled for windows\n-        function_sections: false,\n+        function_sections: true,\n         linker: \"gcc\".to_string(),\n         dynamic_linking: true,\n         executables: true,"}, {"sha": "fb70a6c3e848c03c0536fc5521ae5b76005a1039", "filename": "src/librustc_borrowck/borrowck/README.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2FREADME.md?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -781,8 +781,9 @@ the base path, it will still be considered freezable.\n \n \n \n-**FIXME #10520: Restrictions against mutating the base pointer.** When\n-an `&mut` pointer is frozen or claimed, we currently pass along the\n+**FIXME(https://github.com/rust-lang/rfcs/issues/1751)\n+Restrictions against mutating the base pointer.**\n+When an `&mut` pointer is frozen or claimed, we currently pass along the\n restriction against MUTATE to the base pointer. I do not believe this\n restriction is needed. It dates from the days when we had a way to\n mutate that preserved the value being mutated (i.e., swap). Nowadays"}, {"sha": "0fc1b68b87847e1bf7e82c73620d7a4203e11dab", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -659,7 +659,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         debug!(\"check_if_path_is_moved(id={:?}, use_kind={:?}, lp={:?})\",\n                id, use_kind, lp);\n \n-        // FIXME (22079): if you find yourself tempted to cut and paste\n+        // FIXME: if you find yourself tempted to cut and paste\n         // the body below and then specializing the error reporting,\n         // consider refactoring this instead!\n \n@@ -720,7 +720,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                         // the path must be initialized to prevent a case of\n                         // partial reinitialization\n                         //\n-                        // FIXME (22079): could refactor via hypothetical\n+                        // FIXME: could refactor via hypothetical\n                         // generalized check_if_path_is_moved\n                         let loan_path = owned_ptr_base_path_rc(lp_base);\n                         self.move_data.each_move_of(id, &loan_path, |_, _| {"}, {"sha": "6b52d842f8b196fadabdf889bf78f17548b04864", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -406,7 +406,7 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n         self.all_loans.push(loan);\n \n         // if loan_gen_scope != borrow_id {\n-            // FIXME(#6268) Nested method calls\n+            // FIXME(https://github.com/rust-lang/rfcs/issues/811) Nested method calls\n             //\n             // Typically, the scope of the loan includes the point at\n             // which the loan is originated. This\n@@ -417,9 +417,8 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n             //let restr = restrictions::compute_restrictions(\n             //    self.bccx, borrow_span, cmt, RESTR_EMPTY);\n             //let loan = {\n-            //    let all_loans = &mut *self.all_loans; // FIXME(#5074)\n             //    Loan {\n-            //        index: all_loans.len(),\n+            //        index: self.all_loans.len(),\n             //        loan_path,\n             //        cmt,\n             //        mutbl: ConstMutability,"}, {"sha": "ad7978480a6b1b44ccb99b0fcb127aa4d554453b", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0ac65e669e2a59a674327f7ff2590afbc2f3442/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=e0ac65e669e2a59a674327f7ff2590afbc2f3442", "patch": "@@ -815,7 +815,8 @@ impl<'a, 'gcx, 'tcx> Visitor<'gcx> for RegionCtxt<'a, 'gcx, 'tcx> {\n                 // the type of the node expr.id here *before applying\n                 // adjustments*.\n                 //\n-                // FIXME(#6268) nested method calls requires that this rule change\n+                // FIXME(https://github.com/rust-lang/rfcs/issues/811)\n+                // nested method calls requires that this rule change\n                 let ty0 = self.resolve_node_type(expr.hir_id);\n                 self.type_must_outlive(infer::AddrOf(expr.span), ty0, expr_region);\n                 intravisit::walk_expr(self, expr);"}]}