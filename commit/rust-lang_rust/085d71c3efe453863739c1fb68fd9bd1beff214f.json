{"sha": "085d71c3efe453863739c1fb68fd9bd1beff214f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NWQ3MWMzZWZlNDUzODYzNzM5YzFmYjY4ZmQ5YmQxYmVmZjIxNGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-18T11:52:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-02-28T13:43:47Z"}, "message": "remove special-case code for statics and just use `borrowck_fn`\n\nFixes #38520", "tree": {"sha": "f5d69ca22f926e003c2dc7f6a489afe0879c9872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5d69ca22f926e003c2dc7f6a489afe0879c9872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/085d71c3efe453863739c1fb68fd9bd1beff214f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/085d71c3efe453863739c1fb68fd9bd1beff214f", "html_url": "https://github.com/rust-lang/rust/commit/085d71c3efe453863739c1fb68fd9bd1beff214f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/085d71c3efe453863739c1fb68fd9bd1beff214f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9ec8841ef02ceb3278e6bedd98821bec332fd11", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9ec8841ef02ceb3278e6bedd98821bec332fd11", "html_url": "https://github.com/rust-lang/rust/commit/a9ec8841ef02ceb3278e6bedd98821bec332fd11"}], "stats": {"total": 144, "additions": 61, "deletions": 83}, "files": [{"sha": "4567795184e4dccf168c6a8ddf6f0f8c63ea1f20", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -32,7 +32,7 @@ struct LoopScope {\n }\n \n pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                           body: &hir::Expr) -> CFG {\n+                           body: &hir::Body) -> CFG {\n     let mut graph = graph::Graph::new();\n     let entry = graph.add_node(CFGNodeData::Entry);\n \n@@ -43,26 +43,18 @@ pub fn construct<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let fn_exit = graph.add_node(CFGNodeData::Exit);\n     let body_exit;\n \n-    // Find the function this expression is from.\n-    let mut node_id = body.id;\n-    loop {\n-        let node = tcx.hir.get(node_id);\n-        if hir::map::blocks::FnLikeNode::from_node(node).is_some() {\n-            break;\n-        }\n-        let parent = tcx.hir.get_parent_node(node_id);\n-        assert!(node_id != parent);\n-        node_id = parent;\n-    }\n+    // Find the tables for this body.\n+    let owner_def_id = tcx.hir.local_def_id(tcx.hir.body_owner(body.id()));\n+    let tables = tcx.item_tables(owner_def_id);\n \n     let mut cfg_builder = CFGBuilder {\n         tcx: tcx,\n-        tables: tcx.item_tables(tcx.hir.local_def_id(node_id)),\n+        tables: tables,\n         graph: graph,\n         fn_exit: fn_exit,\n         loop_scopes: Vec::new()\n     };\n-    body_exit = cfg_builder.expr(body, entry);\n+    body_exit = cfg_builder.expr(&body.value, entry);\n     cfg_builder.add_contained_edge(body_exit, fn_exit);\n     let CFGBuilder {graph, ..} = cfg_builder;\n     CFG {graph: graph,"}, {"sha": "1473dbb1676f32411eb6e2d6b4393f5d33e4a178", "filename": "src/librustc/cfg/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc%2Fcfg%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc%2Fcfg%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fmod.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -59,7 +59,7 @@ pub type CFGEdge = graph::Edge<CFGEdgeData>;\n \n impl CFG {\n     pub fn new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                         body: &hir::Expr) -> CFG {\n+                         body: &hir::Body) -> CFG {\n         construct::construct(tcx, body)\n     }\n "}, {"sha": "28b6c7a13f1713cb2c4bea107725d2e80cc4081a", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -28,9 +28,6 @@ use rustc::ty::{self, TyCtxt};\n use syntax::ast;\n use syntax_pos::Span;\n use rustc::hir;\n-use rustc::hir::Expr;\n-use rustc::hir::intravisit;\n-use rustc::hir::intravisit::{Visitor, NestedVisitorMap};\n \n use self::restrictions::RestrictionResult;\n \n@@ -514,53 +511,3 @@ impl<'a, 'tcx> GatherLoanCtxt<'a, 'tcx> {\n     }\n }\n \n-/// Context used while gathering loans on static initializers\n-///\n-/// This visitor walks static initializer's expressions and makes\n-/// sure the loans being taken are sound.\n-struct StaticInitializerCtxt<'a, 'tcx: 'a> {\n-    bccx: &'a BorrowckCtxt<'a, 'tcx>,\n-    body_id: hir::BodyId,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for StaticInitializerCtxt<'a, 'tcx> {\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-\n-    fn visit_expr(&mut self, ex: &'tcx Expr) {\n-        if let hir::ExprAddrOf(mutbl, ref base) = ex.node {\n-            let infcx = self.bccx.tcx.borrowck_fake_infer_ctxt(self.body_id);\n-            let mc = mc::MemCategorizationContext::new(&infcx);\n-            let base_cmt = mc.cat_expr(&base).unwrap();\n-            let borrow_kind = ty::BorrowKind::from_mutbl(mutbl);\n-            // Check that we don't allow borrows of unsafe static items.\n-            let err = check_aliasability(self.bccx, ex.span,\n-                                         BorrowViolation(euv::AddrOf),\n-                                         base_cmt, borrow_kind).is_err();\n-            if err {\n-                return; // reported an error, no sense in reporting more.\n-            }\n-        }\n-\n-        intravisit::walk_expr(self, ex);\n-    }\n-}\n-\n-pub fn gather_loans_in_static_initializer<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                    body: hir::BodyId) {\n-    debug!(\"gather_loans_in_static_initializer(expr={:?})\", body);\n-\n-    let bccx = &BorrowckCtxt {\n-        tcx: tcx,\n-        tables: None\n-    };\n-\n-    let mut sicx = StaticInitializerCtxt {\n-        bccx: bccx,\n-        body_id: body\n-    };\n-\n-    let body = sicx.bccx.tcx.hir.body(body);\n-    sicx.visit_body(body);\n-}"}, {"sha": "613f28138a51924505d69054e7770afcd2ca94f1", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n         match item.node {\n             hir::ItemStatic(.., ex) |\n             hir::ItemConst(_, ex) => {\n-                gather_loans::gather_loans_in_static_initializer(self.tcx, ex);\n+                borrowck_fn(self.tcx, ex);\n             }\n             _ => { }\n         }\n@@ -99,14 +99,14 @@ impl<'a, 'tcx> Visitor<'tcx> for BorrowckCtxt<'a, 'tcx> {\n \n     fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n         if let hir::TraitItemKind::Const(_, Some(expr)) = ti.node {\n-            gather_loans::gather_loans_in_static_initializer(self.tcx, expr);\n+            borrowck_fn(self.tcx, expr);\n         }\n         intravisit::walk_trait_item(self, ti);\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem) {\n         if let hir::ImplItemKind::Const(_, expr) = ii.node {\n-            gather_loans::gather_loans_in_static_initializer(self.tcx, expr);\n+            borrowck_fn(self.tcx, expr);\n         }\n         intravisit::walk_impl_item(self, ii);\n     }\n@@ -147,7 +147,7 @@ fn borrowck_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, body_id: hir::BodyId) {\n         mir::borrowck_mir(bccx, owner_id, &attributes);\n     }\n \n-    let cfg = cfg::CFG::new(bccx.tcx, &body.value);\n+    let cfg = cfg::CFG::new(bccx.tcx, &body);\n     let AnalysisData { all_loans,\n                        loans: loan_dfcx,\n                        move_data: flowed_moves } ="}, {"sha": "9810f121ef2c125570c4df911f625e6b7ae2510a", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -24,6 +24,7 @@\n #![deny(warnings)]\n \n #![feature(box_syntax)]\n+#![feature(loop_break_value)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "b6978478085d5b224607c90a0acc898c17ad712b", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -718,13 +718,24 @@ fn print_flowgraph<'a, 'tcx, W: Write>(variants: Vec<borrowck_dot::Variant>,\n                                        mode: PpFlowGraphMode,\n                                        mut out: W)\n                                        -> io::Result<()> {\n-    let cfg = match code {\n-        blocks::Code::Expr(expr) => cfg::CFG::new(tcx, expr),\n-        blocks::Code::FnLike(fn_like) => {\n-            let body = tcx.hir.body(fn_like.body());\n-            cfg::CFG::new(tcx, &body.value)\n-        },\n+    let body_id = match code {\n+        blocks::Code::Expr(expr) => {\n+            // Find the function this expression is from.\n+            let mut node_id = expr.id;\n+            loop {\n+                let node = tcx.hir.get(node_id);\n+                if let Some(n) = hir::map::blocks::FnLikeNode::from_node(node) {\n+                    break n.body();\n+                }\n+                let parent = tcx.hir.get_parent_node(node_id);\n+                assert!(node_id != parent);\n+                node_id = parent;\n+            }\n+        }\n+        blocks::Code::FnLike(fn_like) => fn_like.body(),\n     };\n+    let body = tcx.hir.body(body_id);\n+    let cfg = cfg::CFG::new(tcx, &body);\n     let labelled_edges = mode != PpFlowGraphMode::UnlabelledEdges;\n     let lcfg = LabelledCFG {\n         hir_map: &tcx.hir,"}, {"sha": "58336f939d1228e4f550d603ddc93d8f29c5dc7c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -712,7 +712,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n         // to have behaviour like the above, rather than\n         // e.g. accidentally recurring after an assert.\n \n-        let cfg = cfg::CFG::new(cx.tcx, &body.value);\n+        let cfg = cfg::CFG::new(cx.tcx, &body);\n \n         let mut work_queue = vec![cfg.entry];\n         let mut reached_exit_without_self_call = false;"}, {"sha": "c6bec6090f242a1024ecb22d46eca907e20ad33a", "filename": "src/test/compile-fail/E0017.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0017.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -19,8 +19,7 @@ static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| NOTE statics require immutable values\n                                               //~| ERROR E0017\n                                               //~| NOTE statics require immutable values\n-                                              //~| ERROR E0388\n-                                              //~| NOTE cannot write data in a static definition\n+                                              //~| ERROR cannot borrow\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n                                              //~| NOTE statics require immutable values\n                                              //~| ERROR E0017"}, {"sha": "2c88039d373e59ef77ecc11fc195fc883dec494f", "filename": "src/test/compile-fail/E0388.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0388.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -15,7 +15,7 @@ const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n                                      //~| ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR E0017\n-                                              //~| ERROR E0388\n+                                              //~| ERROR cannot borrow\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n                                              //~| ERROR E0017\n "}, {"sha": "3c1980e5b366cc9894c92e3f3307ee75e7174e14", "filename": "src/test/compile-fail/borrowck/move-in-static-initializer-issue-38520.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fmove-in-static-initializer-issue-38520.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #38520. Check that moves of `Foo` are not\n+// permitted as `Foo` is not copy (even in a static/const\n+// initializer).\n+\n+#![feature(const_fn)]\n+\n+struct Foo(usize);\n+\n+const fn get(x: Foo) -> usize {\n+    x.0\n+}\n+\n+const X: Foo = Foo(22);\n+static Y: usize = get(*&X); //~ ERROR E0507\n+const Z: usize = get(*&X); //~ ERROR E0507\n+\n+fn main() {\n+}"}, {"sha": "35e57dffb6c455c776dab8084a221f197cb22ba1", "filename": "src/test/compile-fail/issue-18118.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/085d71c3efe453863739c1fb68fd9bd1beff214f/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs?ref=085d71c3efe453863739c1fb68fd9bd1beff214f", "patch": "@@ -13,6 +13,6 @@ pub fn main() {\n         //~^ ERROR blocks in constants are limited to items and tail expressions\n         let p = 3;\n         //~^ ERROR blocks in constants are limited to items and tail expressions\n-        &p\n+        &p //~ ERROR `p` does not live long enough\n     };\n }"}]}