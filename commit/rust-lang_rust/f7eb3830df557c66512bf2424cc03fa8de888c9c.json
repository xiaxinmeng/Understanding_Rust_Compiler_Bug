{"sha": "f7eb3830df557c66512bf2424cc03fa8de888c9c", "node_id": "C_kwDOAAsO6NoAKGY3ZWIzODMwZGY1NTdjNjY1MTJiZjI0MjRjYzAzZmE4ZGU4ODhjOWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-07T05:44:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-07T05:44:04Z"}, "message": "Rollup merge of #94681 - RalfJung:miri-cast, r=oli-obk\n\nCTFE engine: expose misc_cast to Miri\n\nWe need that to implement `simd_cast`/`simd_as` in Miri.\n\nWhile at it, also change other code outside `cast.rs` to use `misc_cast` instead of lower-level methods.\n\nr? `@oli-obk`", "tree": {"sha": "d1172425685c3725736ba47b7a939c887d31b98b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1172425685c3725736ba47b7a939c887d31b98b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7eb3830df557c66512bf2424cc03fa8de888c9c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiJZukCRBK7hj4Ov3rIwAAhjgIAJz2W4rg9Q4j968rqPFlf6EI\nZdtse+qLejESY1C4+y5ao40SxQZtZw8Bv1mZIgWYpmhZizdXyIq9IrcZUh1oOUx5\nkcytaW18cJlLmY2mxS0vDOSfBcPg5FGIjV6bXUzWlcLW6nK76BH6Qsd5bv6jcNG9\nWVwY4n7XWVn63bj2kGLMMBlSDfW4/lp/4WvNUCEypMsRqYb9MKtFyl/zk/kFQiwB\nMLbo+p9yn6t+s/ykmRfgMCWprDAbjIciLehj/DlDCA/AZBPX86ARrC2RZY1hoDg+\nAGWgIXJmJQkrNerLIQRcnx2itCoqIPcMM7eYMmKubdGST16KvRqfuke5eanMSgE=\n=WrUu\n-----END PGP SIGNATURE-----\n", "payload": "tree d1172425685c3725736ba47b7a939c887d31b98b\nparent 02539e16121a3ad81172892753a7b1ed09746acd\nparent d29d2307b95dcde3c089949d9d4b4c3fdcc2c325\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646631844 +0100\ncommitter GitHub <noreply@github.com> 1646631844 +0100\n\nRollup merge of #94681 - RalfJung:miri-cast, r=oli-obk\n\nCTFE engine: expose misc_cast to Miri\n\nWe need that to implement `simd_cast`/`simd_as` in Miri.\n\nWhile at it, also change other code outside `cast.rs` to use `misc_cast` instead of lower-level methods.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb3830df557c66512bf2424cc03fa8de888c9c", "html_url": "https://github.com/rust-lang/rust/commit/f7eb3830df557c66512bf2424cc03fa8de888c9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb3830df557c66512bf2424cc03fa8de888c9c/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02539e16121a3ad81172892753a7b1ed09746acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/02539e16121a3ad81172892753a7b1ed09746acd", "html_url": "https://github.com/rust-lang/rust/commit/02539e16121a3ad81172892753a7b1ed09746acd"}, {"sha": "d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "url": "https://api.github.com/repos/rust-lang/rust/commits/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325", "html_url": "https://github.com/rust-lang/rust/commit/d29d2307b95dcde3c089949d9d4b4c3fdcc2c325"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "5be0a183cf6b40300685b951120cf339abee7cca", "filename": "compiler/rustc_const_eval/src/interpret/cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb3830df557c66512bf2424cc03fa8de888c9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb3830df557c66512bf2424cc03fa8de888c9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fcast.rs?ref=f7eb3830df557c66512bf2424cc03fa8de888c9c", "patch": "@@ -97,7 +97,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(())\n     }\n \n-    fn misc_cast(\n+    pub fn misc_cast(\n         &self,\n         src: &ImmTy<'tcx, M::PointerTag>,\n         cast_ty: Ty<'tcx>,\n@@ -139,7 +139,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n                     let discr_layout = self.layout_of(discr.ty)?;\n-                    return Ok(self.cast_from_scalar(discr.val, discr_layout, cast_ty).into());\n+                    return Ok(self.cast_from_int_like(discr.val, discr_layout, cast_ty).into());\n                 }\n             }\n             Variants::Multiple { .. } => {}\n@@ -169,17 +169,17 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         }\n \n-        // # The remaining source values are scalar.\n+        // # The remaining source values are scalar and \"int-like\".\n \n         // For all remaining casts, we either\n         // (a) cast a raw ptr to usize, or\n         // (b) cast from an integer-like (including bool, char, enums).\n         // In both cases we want the bits.\n         let bits = src.to_scalar()?.to_bits(src.layout.size)?;\n-        Ok(self.cast_from_scalar(bits, src.layout, cast_ty).into())\n+        Ok(self.cast_from_int_like(bits, src.layout, cast_ty).into())\n     }\n \n-    pub(super) fn cast_from_scalar(\n+    fn cast_from_int_like(\n         &self,\n         v: u128, // raw bits (there is no ScalarTy so we separate data+layout)\n         src_layout: TyAndLayout<'tcx>,"}, {"sha": "fb4fe41bdbc4c31981b3007ab59cd9faf8c7a02d", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb3830df557c66512bf2424cc03fa8de888c9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb3830df557c66512bf2424cc03fa8de888c9c/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=f7eb3830df557c66512bf2424cc03fa8de888c9c", "patch": "@@ -681,18 +681,22 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let tag_val = self.read_immediate(&self.operand_field(op, tag_field)?)?;\n         assert_eq!(tag_layout.size, tag_val.layout.size);\n         assert_eq!(tag_layout.abi.is_signed(), tag_val.layout.abi.is_signed());\n-        let tag_val = tag_val.to_scalar()?;\n-        trace!(\"tag value: {:?}\", tag_val);\n+        trace!(\"tag value: {}\", tag_val);\n \n         // Figure out which discriminant and variant this corresponds to.\n         Ok(match *tag_encoding {\n             TagEncoding::Direct => {\n+                // Generate a specific error if `tag_val` is not an integer.\n+                // (`tag_bits` itself is only used for error messages below.)\n                 let tag_bits = tag_val\n+                    .to_scalar()?\n                     .try_to_int()\n                     .map_err(|dbg_val| err_ub!(InvalidTag(dbg_val)))?\n                     .assert_bits(tag_layout.size);\n                 // Cast bits from tag layout to discriminant layout.\n-                let discr_val = self.cast_from_scalar(tag_bits, tag_layout, discr_layout.ty);\n+                // After the checks we did above, this cannot fail.\n+                let discr_val =\n+                    self.misc_cast(&tag_val, discr_layout.ty).unwrap().to_scalar().unwrap();\n                 let discr_bits = discr_val.assert_bits(discr_layout.size);\n                 // Convert discriminant to variant index, and catch invalid discriminants.\n                 let index = match *op.layout.ty.kind() {\n@@ -712,6 +716,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 (discr_val, index.0)\n             }\n             TagEncoding::Niche { dataful_variant, ref niche_variants, niche_start } => {\n+                let tag_val = tag_val.to_scalar()?;\n                 // Compute the variant this niche value/\"tag\" corresponds to. With niche layout,\n                 // discriminant (encoded in niche/tag) and variant index are the same.\n                 let variants_start = niche_variants.start().as_u32();"}]}