{"sha": "c8ea4ace9213ae045123fdfeb59d1ac887656d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4ZWE0YWNlOTIxM2FlMDQ1MTIzZmRmZWI1OWQxYWM4ODc2NTZkMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-14T10:21:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-14T10:21:32Z"}, "message": "Auto merge of #67136 - oli-obk:const_stability, r=Centril\n\nRequire stable/unstable annotations for the constness of all stable fns with a const modifier\n\nr? @RalfJung @Centril\n\nEvery `#[stable]` const fn now needs either a `#[rustc_const_unstable]` attribute or a `#[rustc_const_stable]` attribute. You can't silently stabilize the constness of a function anymore.", "tree": {"sha": "2a7d207294b6f2c99d1ddbe193b1d5af8ee46a09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7d207294b6f2c99d1ddbe193b1d5af8ee46a09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8ea4ace9213ae045123fdfeb59d1ac887656d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8ea4ace9213ae045123fdfeb59d1ac887656d31", "html_url": "https://github.com/rust-lang/rust/commit/c8ea4ace9213ae045123fdfeb59d1ac887656d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8ea4ace9213ae045123fdfeb59d1ac887656d31/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa", "html_url": "https://github.com/rust-lang/rust/commit/12307b3b08edee543a78fb9d4a837fbd6d6ac0fa"}, {"sha": "0b47ba7019adf06f6687a8c94040e63ae1ea4fba", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b47ba7019adf06f6687a8c94040e63ae1ea4fba", "html_url": "https://github.com/rust-lang/rust/commit/0b47ba7019adf06f6687a8c94040e63ae1ea4fba"}], "stats": {"total": 898, "additions": 717, "deletions": 181}, "files": [{"sha": "4a74a479e71bb8cff582404dbb4e18af96e0c387", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -275,6 +275,10 @@ impl<T> LinkedList<T> {\n     /// let list: LinkedList<u32> = LinkedList::new();\n     /// ```\n     #[inline]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_linked_list_new\", since = \"1.32.0\"),\n+    )]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> Self {\n         LinkedList {"}, {"sha": "d828e374a7b222fab17e41c6884e8dae760a749f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -117,7 +117,7 @@\n #![feature(unsized_locals)]\n #![feature(allocator_internals)]\n #![cfg_attr(bootstrap, feature(on_unimplemented))]\n-#![feature(rustc_const_unstable)]\n+#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(slice_partition_dedup)]\n #![feature(maybe_uninit_extra, maybe_uninit_slice)]\n #![feature(alloc_layout_extra)]"}, {"sha": "bf9bbba47535d9f55e9d39fffa0f79a5b1c07af1", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -367,6 +367,10 @@ impl String {\n     /// let s = String::new();\n     /// ```\n     #[inline]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_string_new\", since = \"1.32.0\"),\n+    )]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> String {\n         String { vec: Vec::new() }"}, {"sha": "52b45b0b8fe079ded0a0182b357462c659465eeb", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -315,6 +315,10 @@ impl<T> Vec<T> {\n     /// let mut vec: Vec<i32> = Vec::new();\n     /// ```\n     #[inline]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_vec_new\", since = \"1.32.0\"),\n+    )]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub const fn new() -> Vec<T> {\n         Vec {"}, {"sha": "71517ffb0065e4e4df0a05a00c7f478de9a0e670", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -100,6 +100,7 @@ impl Layout {\n     /// This function is unsafe as it does not verify the preconditions from\n     /// [`Layout::from_size_align`](#method.from_size_align).\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"alloc_layout\", since = \"1.28.0\"))]\n     #[inline]\n     pub const unsafe fn from_size_align_unchecked(size: usize, align: usize) -> Self {\n         Layout { size_: size, align_: NonZeroUsize::new_unchecked(align) }"}, {"sha": "b0e3021e0bf4dc839431d3c12fc75276d9191587", "filename": "src/libcore/any.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -423,7 +423,8 @@ impl TypeId {\n     /// assert_eq!(is_string(&\"cookie monster\".to_string()), true);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature=\"const_type_id\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature=\"const_type_id\"))]\n+    #[cfg_attr(not(bootstrap), rustc_const_unstable(feature=\"const_type_id\", issue = \"41875\"))]\n     pub const fn of<T: ?Sized + 'static>() -> TypeId {\n         TypeId {\n             #[cfg(bootstrap)]\n@@ -461,7 +462,8 @@ impl TypeId {\n /// );\n /// ```\n #[stable(feature = \"type_name\", since = \"1.38.0\")]\n-#[rustc_const_unstable(feature = \"const_type_name\")]\n+#[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_type_name\"))]\n+#[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\"))]\n pub const fn type_name<T: ?Sized>() -> &'static str {\n     intrinsics::type_name::<T>()\n }\n@@ -499,7 +501,8 @@ pub const fn type_name<T: ?Sized>() -> &'static str {\n /// println!(\"{}\", type_name_of_val(&y));\n /// ```\n #[unstable(feature = \"type_name_of_val\", issue = \"66359\")]\n-#[rustc_const_unstable(feature = \"const_type_name\")]\n+#[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_type_name\"))]\n+#[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\"))]\n pub const fn type_name_of_val<T: ?Sized>(val: &T) -> &'static str {\n     let _ = val;\n     type_name::<T>()"}, {"sha": "e4b4cd31c63aff040cb6c849aef456e478e93cdf", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -324,6 +324,7 @@ impl<T> Cell<T> {\n     /// let c = Cell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_cell_new\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn new(value: T) -> Cell<T> {\n         Cell {\n@@ -469,6 +470,7 @@ impl<T: ?Sized> Cell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cell_as_ptr\", since = \"1.12.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_cell_as_ptr\", since = \"1.32.0\"))]\n     pub const fn as_ptr(&self) -> *mut T {\n         self.value.get()\n     }\n@@ -649,6 +651,7 @@ impl<T> RefCell<T> {\n     /// let c = RefCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_refcell_new\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn new(value: T) -> RefCell<T> {\n         RefCell {\n@@ -1501,6 +1504,10 @@ impl<T> UnsafeCell<T> {\n     /// let uc = UnsafeCell::new(5);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_unsafe_cell_new\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn new(value: T) -> UnsafeCell<T> {\n         UnsafeCell { value }\n@@ -1543,6 +1550,10 @@ impl<T: ?Sized> UnsafeCell<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_unsafecell_get\", since = \"1.32.0\"),\n+    )]\n     pub const fn get(&self) -> *mut T {\n         // We can just cast the pointer from `UnsafeCell<T>` to `T` because of\n         // #[repr(transparent)]. This exploits libstd's special status, there is"}, {"sha": "5cfb9583a86d135ef1735f485de8c267377ddf13", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -911,6 +911,10 @@ impl char {\n     /// assert!(!non_ascii.is_ascii());\n     /// ```\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn is_ascii(&self) -> bool {\n         *self as u32 <= 0x7F"}, {"sha": "cdd994d5fc7f979a2fa1a932b3a71895634365bf", "filename": "src/libcore/convert/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -99,6 +99,7 @@ pub use num::FloatToInt;\n /// assert_eq!(vec![1, 3], filtered);\n /// ```\n #[stable(feature = \"convert_id\", since = \"1.33.0\")]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_identity\", since = \"1.33.0\"))]\n #[inline]\n pub const fn identity<T>(x: T) -> T {\n     x"}, {"sha": "1f72b7ab0902d0e5e1864eff1e1b9f9b2aab862a", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -939,7 +939,11 @@ extern \"rust-intrinsic\" {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_transmute\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_transmute\"))]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_unstable(feature = \"const_transmute\", issue = \"53605\"),\n+    )]\n     pub fn transmute<T, U>(e: T) -> U;\n \n     /// Returns `true` if the actual type given as `T` requires drop"}, {"sha": "127b778e62e68e87d8559445347c5ea5e727b164", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -281,6 +281,7 @@ impl<T> Default for Empty<T> {\n /// assert_eq!(None, nope.next());\n /// ```\n #[stable(feature = \"iter_empty\", since = \"1.2.0\")]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_iter_empty\", since = \"1.32.0\"))]\n pub const fn empty<T>() -> Empty<T> {\n     Empty(marker::PhantomData)\n }"}, {"sha": "146d582eb7abbfdf30604e71ab5b39d2d4fffc58", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -96,7 +96,7 @@\n #![feature(prelude_import)]\n #![feature(repr_simd, platform_intrinsics)]\n #![feature(rustc_attrs)]\n-#![feature(rustc_const_unstable)]\n+#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(simd_ffi)]\n #![feature(specialization)]\n #![feature(staged_api)]"}, {"sha": "6463668a03e3d411384d76637d5dc5e287085318", "filename": "src/libcore/mem/manually_drop.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmanually_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmanually_drop.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -63,6 +63,10 @@ impl<T> ManuallyDrop<T> {\n     /// ManuallyDrop::new(Box::new(()));\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\"),\n+    )]\n     #[inline(always)]\n     pub const fn new(value: T) -> ManuallyDrop<T> {\n         ManuallyDrop { value }\n@@ -80,6 +84,10 @@ impl<T> ManuallyDrop<T> {\n     /// let _: Box<()> = ManuallyDrop::into_inner(x); // This drops the `Box`.\n     /// ```\n     #[stable(feature = \"manually_drop\", since = \"1.20.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_manually_drop\", since = \"1.36.0\"),\n+    )]\n     #[inline(always)]\n     pub const fn into_inner(slot: ManuallyDrop<T>) -> T {\n         slot.value"}, {"sha": "670a194e2d6cce3e560c78da0772bda3dcef9c8a", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -250,6 +250,10 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [`assume_init`]: #method.assume_init\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\"),\n+    )]\n     #[inline(always)]\n     pub const fn new(val: T) -> MaybeUninit<T> {\n         MaybeUninit { value: ManuallyDrop::new(val) }\n@@ -264,6 +268,10 @@ impl<T> MaybeUninit<T> {\n     ///\n     /// [type]: union.MaybeUninit.html\n     #[stable(feature = \"maybe_uninit\", since = \"1.36.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_maybe_uninit\", since = \"1.36.0\"),\n+    )]\n     #[inline(always)]\n     #[cfg_attr(all(not(bootstrap)), rustc_diagnostic_item = \"maybe_uninit_uninit\")]\n     pub const fn uninit() -> MaybeUninit<T> {"}, {"sha": "00b32ad0b73f0e9078b44bce20a63bf56cfe1d40", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -271,6 +271,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_size_of\", since = \"1.32.0\"))]\n pub const fn size_of<T>() -> usize {\n     intrinsics::size_of::<T>()\n }\n@@ -371,6 +372,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_align_of\", since = \"1.32.0\"))]\n pub const fn align_of<T>() -> usize {\n     intrinsics::min_align_of::<T>()\n }\n@@ -453,6 +455,7 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// ```\n #[inline]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\"))]\n pub const fn needs_drop<T>() -> bool {\n     intrinsics::needs_drop::<T>()\n }"}, {"sha": "5a97aa4acfa4cd982b0455f0056b77ee5a9df61f", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 325, "deletions": 17, "changes": 342, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -60,6 +60,10 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 ///\n                 /// The value must not be zero.\n                 #[$stability]\n+                #[cfg_attr(\n+                    not(bootstrap),\n+                    rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\"),\n+                )]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     $Ty(n)\n@@ -80,6 +84,10 @@ assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", s\n                 /// Returns the value as a primitive type.\n                 #[$stability]\n                 #[inline]\n+                #[cfg_attr(\n+                    not(bootstrap),\n+                    rustc_const_stable(feature = \"nonzero\", since = \"1.34.0\"),\n+                )]\n                 pub const fn get(self) -> $Int {\n                     self.0\n                 }\n@@ -255,6 +263,10 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\"),\n+            )]\n             pub const fn min_value() -> Self {\n                 !0 ^ ((!0 as $UnsignedT) >> 1) as Self\n             }\n@@ -274,6 +286,10 @@ $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[inline(always)]\n             #[rustc_promotable]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\"),\n+            )]\n             pub const fn max_value() -> Self {\n                 !Self::min_value()\n             }\n@@ -323,6 +339,10 @@ $EndFeature, \"\n ```\n \"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn count_ones(self) -> u32 { (self as $UnsignedT).count_ones() }\n         }\n@@ -338,6 +358,10 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -358,6 +382,10 @@ assert_eq!(n.leading_zeros(), 0);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 (self as $UnsignedT).leading_zeros()\n@@ -378,6 +406,10 @@ assert_eq!(n.trailing_zeros(), 2);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 (self as $UnsignedT).trailing_zeros()\n@@ -401,6 +433,10 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -427,6 +463,10 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -450,6 +490,10 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 (self as $UnsignedT).swap_bytes() as Self\n@@ -470,6 +514,10 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n@@ -497,6 +545,10 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -530,6 +582,10 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -563,6 +619,10 @@ if cfg!(target_endian = \\\"big\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -596,6 +656,10 @@ if cfg!(target_endian = \\\"little\\\") {\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_conversions\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -948,7 +1012,11 @@ $EndFeature, \"\n ```\"),\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -974,7 +1042,11 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().saturating_sub(-1), \", stringif\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1114,6 +1186,10 @@ assert_eq!(\", stringify!($SelfT), \"::max_value().wrapping_add(2), \", stringify!(\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1137,6 +1213,10 @@ stringify!($SelfT), \"::max_value());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1159,6 +1239,10 @@ assert_eq!(11i8.wrapping_mul(12), -124);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1303,6 +1387,10 @@ assert_eq!(\", stringify!($SelfT), \"::min_value().wrapping_neg(), \", stringify!($\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn wrapping_neg(self) -> Self {\n                 self.overflowing_neg().0\n@@ -1328,6 +1416,10 @@ assert_eq!((-1\", stringify!($SelfT), \").wrapping_shl(128), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1359,6 +1451,10 @@ assert_eq!((-128i16).wrapping_shr(64), -128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1392,6 +1488,10 @@ assert_eq!((-128i8).wrapping_abs() as u8, 128);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn wrapping_abs(self) -> Self {\n                 // sign is -1 (all ones) for negative numbers, 0 otherwise.\n@@ -1466,6 +1566,10 @@ assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (\", stringify!($Sel\n \"::MIN, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1493,6 +1597,10 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_sub(1), (\", stringify!($Sel\n \"::MAX, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1518,6 +1626,10 @@ assert_eq!(1_000_000_000i32.overflowing_mul(10), (1410065408, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1685,6 +1797,10 @@ assert_eq!(\", stringify!($SelfT), \"::MIN.overflowing_neg(), (\", stringify!($Self\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 ((!self).wrapping_add(1), self == Self::min_value())\n             }\n@@ -1707,6 +1823,10 @@ assert_eq!(0x1i32.overflowing_shl(36), (0x10, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1732,6 +1852,10 @@ assert_eq!(0x10i32.overflowing_shr(36), (0x1, true));\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -1760,6 +1884,10 @@ assert_eq!((\", stringify!($SelfT), \"::min_value()).overflowing_abs(), (\", string\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"no_panic_abs\", since = \"1.13.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn overflowing_abs(self) -> (Self, bool) {\n                 (self.wrapping_abs(), self == Self::min_value())\n@@ -1964,6 +2092,10 @@ assert_eq!((-10\", stringify!($SelfT), \").abs(), 10);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             #[rustc_inherit_overflow_checks]\n             pub const fn abs(self) -> Self {\n@@ -2006,7 +2138,11 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_sign\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_sign\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_sign\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn signum(self) -> Self {\n                 (self > 0) as Self - (self < 0) as Self\n@@ -2027,6 +2163,10 @@ assert!(!(-10\", stringify!($SelfT), \").is_positive());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn is_positive(self) -> bool { self > 0 }\n         }\n@@ -2045,6 +2185,10 @@ assert!(!10\", stringify!($SelfT), \".is_negative());\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_int_methods\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn is_negative(self) -> bool { self < 0 }\n         }\n@@ -2062,7 +2206,11 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -2082,7 +2230,11 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -2117,7 +2269,11 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2151,7 +2307,11 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -2184,7 +2344,11 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -2227,7 +2391,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them\n@@ -2321,6 +2489,10 @@ Basic usage:\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_min_value\", since = \"1.32.0\"),\n+            )]\n             pub const fn min_value() -> Self { 0 }\n         }\n \n@@ -2338,6 +2510,10 @@ stringify!($MaxV), \");\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[rustc_promotable]\n             #[inline(always)]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_max_value\", since = \"1.32.0\"),\n+            )]\n             pub const fn max_value() -> Self { !0 }\n         }\n \n@@ -2384,6 +2560,10 @@ Basic usage:\n assert_eq!(n.count_ones(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn count_ones(self) -> u32 {\n                 intrinsics::ctpop(self as $ActualT) as u32\n@@ -2401,6 +2581,10 @@ Basic usage:\n \", $Feature, \"assert_eq!(\", stringify!($SelfT), \"::max_value().count_zeros(), 0);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn count_zeros(self) -> u32 {\n                 (!self).count_ones()\n@@ -2420,6 +2604,10 @@ Basic usage:\n assert_eq!(n.leading_zeros(), 2);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn leading_zeros(self) -> u32 {\n                 intrinsics::ctlz(self as $ActualT) as u32\n@@ -2440,6 +2628,10 @@ Basic usage:\n assert_eq!(n.trailing_zeros(), 3);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn trailing_zeros(self) -> u32 {\n                 intrinsics::cttz(self) as u32\n@@ -2463,6 +2655,10 @@ let m = \", $rot_result, \";\n assert_eq!(n.rotate_left(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2489,6 +2685,10 @@ let m = \", $rot_op, \";\n assert_eq!(n.rotate_right(\", $rot, \"), m);\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -2512,6 +2712,10 @@ let m = n.swap_bytes();\n assert_eq!(m, \", $swapped, \");\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn swap_bytes(self) -> Self {\n                 intrinsics::bswap(self as $ActualT) as Self\n@@ -2532,6 +2736,10 @@ let m = n.reverse_bits();\n assert_eq!(m, \", $reversed, \");\n ```\"),\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {\n@@ -2559,6 +2767,10 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn from_be(x: Self) -> Self {\n                 #[cfg(target_endian = \"big\")]\n@@ -2592,6 +2804,10 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn from_le(x: Self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2625,6 +2841,10 @@ if cfg!(target_endian = \\\"big\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn to_be(self) -> Self { // or not to be?\n                 #[cfg(target_endian = \"big\")]\n@@ -2658,6 +2878,10 @@ if cfg!(target_endian = \\\"little\\\") {\n }\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_math\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn to_le(self) -> Self {\n                 #[cfg(target_endian = \"little\")]\n@@ -2963,7 +3187,11 @@ assert_eq!(200u8.saturating_add(127), 255);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn saturating_add(self, rhs: Self) -> Self {\n                 intrinsics::saturating_add(self, rhs)\n@@ -2985,7 +3213,11 @@ assert_eq!(13\", stringify!($SelfT), \".saturating_sub(127), 0);\", $EndFeature, \"\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n-            #[rustc_const_unstable(feature = \"const_saturating_int_methods\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_saturating_int_methods\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_saturating_int_methods\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn saturating_sub(self, rhs: Self) -> Self {\n                 intrinsics::saturating_sub(self, rhs)\n@@ -3057,6 +3289,10 @@ assert_eq!(200\", stringify!($SelfT), \".wrapping_add(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3079,6 +3315,10 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_sub(\", stringify!($SelfT), \"::ma\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3102,6 +3342,10 @@ $EndFeature, \"\n         /// assert_eq!(25u8.wrapping_mul(12), 44);\n         /// ```\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        #[cfg_attr(\n+            not(bootstrap),\n+            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+        )]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -3231,6 +3475,10 @@ assert_eq!(100\", stringify!($SelfT), \".wrapping_rem_euclid(10), 0);\n         /// assert_eq!((-128i8).wrapping_neg(), -128);\n         /// ```\n         #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+        #[cfg_attr(\n+            not(bootstrap),\n+            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+        )]\n         #[inline]\n         pub const fn wrapping_neg(self) -> Self {\n             self.overflowing_neg().0\n@@ -3257,6 +3505,10 @@ Basic usage:\n assert_eq!(1\", stringify!($SelfT), \".wrapping_shl(128), 1);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3290,6 +3542,10 @@ Basic usage:\n assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"num_wrapping\", since = \"1.2.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3359,6 +3615,10 @@ assert_eq!(5\", stringify!($SelfT), \".overflowing_add(2), (7, false));\n assert_eq!(\", stringify!($SelfT), \"::MAX.overflowing_add(1), (0, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3387,6 +3647,10 @@ assert_eq!(0\", stringify!($SelfT), \".overflowing_sub(1), (\", stringify!($SelfT),\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3414,6 +3678,10 @@ $EndFeature, \"\n         /// assert_eq!(1_000_000_000u32.overflowing_mul(10), (1410065408, true));\n         /// ```\n         #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+        #[cfg_attr(\n+            not(bootstrap),\n+            rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+        )]\n         #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n         #[inline]\n@@ -3559,6 +3827,10 @@ assert_eq!(2\", stringify!($SelfT), \".overflowing_neg(), (-2i32 as \", stringify!(\n ```\"),\n             #[inline]\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             pub const fn overflowing_neg(self) -> (Self, bool) {\n                 ((!self).wrapping_add(1), self != 0)\n             }\n@@ -3582,6 +3854,10 @@ Basic usage\n assert_eq!(0x1\", stringify!($SelfT), \".overflowing_shl(132), (0x10, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3608,6 +3884,10 @@ Basic usage\n assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"wrapping\", since = \"1.7.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_wrapping_math\", since = \"1.32.0\"),\n+            )]\n             #[must_use = \"this returns the result of the operation, \\\n                           without modifying the original\"]\n             #[inline]\n@@ -3773,6 +4053,10 @@ Basic usage:\n assert!(!10\", stringify!($SelfT), \".is_power_of_two());\", $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_is_power_of_two\", since = \"1.32.0\"),\n+            )]\n             #[inline]\n             pub const fn is_power_of_two(self) -> bool {\n                 self.count_ones() == 1\n@@ -3884,7 +4168,11 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_be().to_ne_bytes()\n@@ -3904,7 +4192,11 @@ let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 self.to_le().to_ne_bytes()\n@@ -3939,7 +4231,11 @@ assert_eq!(\n );\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -3973,7 +4269,11 @@ fn read_be_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_be(Self::from_ne_bytes(bytes))\n@@ -4006,7 +4306,11 @@ fn read_le_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 Self::from_le(Self::from_ne_bytes(bytes))\n@@ -4049,7 +4353,11 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n }\n ```\"),\n             #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n-            #[rustc_const_unstable(feature = \"const_int_conversion\")]\n+            #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_int_conversion\"))]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_unstable(feature = \"const_int_conversion\", issue = \"53718\"),\n+            )]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "46398dd2f82edabc4cf0d6d7050d8df669177c3a", "filename": "src/libcore/num/wrapping.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fnum%2Fwrapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fnum%2Fwrapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fwrapping.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -530,6 +530,10 @@ assert_eq!(n.trailing_zeros(), 3);\n             /// assert_eq!(m, Wrapping(-22016));\n             /// ```\n             #[stable(feature = \"reverse_bits\", since = \"1.37.0\")]\n+            #[cfg_attr(\n+                not(bootstrap),\n+                rustc_const_stable(feature = \"const_reverse_bits\", since = \"1.37.0\"),\n+            )]\n             #[inline]\n             #[must_use]\n             pub const fn reverse_bits(self) -> Self {"}, {"sha": "54ce2917a368a68cf8d7c13ae17c623cd33f8cfa", "filename": "src/libcore/ops/range.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fops%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fops%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Frange.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -398,6 +398,7 @@ impl<Idx> RangeInclusive<Idx> {\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_range_new\", since = \"1.32.0\"))]\n     pub const fn new(start: Idx, end: Idx) -> Self {\n         Self { start, end, is_empty: None }\n     }\n@@ -421,6 +422,10 @@ impl<Idx> RangeInclusive<Idx> {\n     /// assert_eq!((3..=5).start(), &3);\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn start(&self) -> &Idx {\n         &self.start\n@@ -445,6 +450,10 @@ impl<Idx> RangeInclusive<Idx> {\n     /// assert_eq!((3..=5).end(), &5);\n     /// ```\n     #[stable(feature = \"inclusive_range_methods\", since = \"1.27.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_inclusive_range_methods\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn end(&self) -> &Idx {\n         &self.end"}, {"sha": "33c23233fd1c26dab8c0e212b645bd119e54d03a", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -198,6 +198,7 @@ unsafe fn real_drop_in_place<T: ?Sized>(to_drop: &mut T) {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\"))]\n pub const fn null<T>() -> *const T {\n     0 as *const T\n }\n@@ -215,6 +216,7 @@ pub const fn null<T>() -> *const T {\n #[inline(always)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n+#[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_null\", since = \"1.32.0\"))]\n pub const fn null_mut<T>() -> *mut T {\n     0 as *mut T\n }\n@@ -1060,6 +1062,7 @@ impl<T: ?Sized> *const T {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\"))]\n     #[inline]\n     pub const fn cast<U>(self) -> *const U {\n         self as _\n@@ -1307,7 +1310,11 @@ impl<T: ?Sized> *const T {\n     /// }\n     /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_ptr_offset_from\"))]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\"),\n+    )]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where\n@@ -1763,6 +1770,7 @@ impl<T: ?Sized> *mut T {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"ptr_cast\", since = \"1.38.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ptr_cast\", since = \"1.38.0\"))]\n     #[inline]\n     pub const fn cast<U>(self) -> *mut U {\n         self as _\n@@ -2049,7 +2057,11 @@ impl<T: ?Sized> *mut T {\n     /// }\n     /// ```\n     #[unstable(feature = \"ptr_offset_from\", issue = \"41079\")]\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_ptr_offset_from\"))]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"41079\"),\n+    )]\n     #[inline]\n     pub const unsafe fn offset_from(self, origin: *const T) -> isize\n     where"}, {"sha": "d1d97d7b332fa36417515b7fecc3312cfd4d7e00", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -66,6 +66,10 @@ impl<T: Sized> NonNull<T> {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn dangling() -> Self {\n         unsafe {\n@@ -82,6 +86,10 @@ impl<T: ?Sized> NonNull<T> {\n     ///\n     /// `ptr` must be non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_nonnull_new_unchecked\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         NonNull { pointer: ptr as _ }\n@@ -96,6 +104,10 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Acquires the underlying `*mut` pointer.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_nonnull_as_ptr\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n         self.pointer as *mut T\n@@ -125,6 +137,10 @@ impl<T: ?Sized> NonNull<T> {\n \n     /// Casts to a pointer of another type.\n     #[stable(feature = \"nonnull_cast\", since = \"1.27.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_nonnull_cast\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn cast<U>(self) -> NonNull<U> {\n         unsafe { NonNull::new_unchecked(self.as_ptr() as *mut U) }"}, {"sha": "a8e500d256fdc263a30ce0223a8bf207a331fc0e", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -62,6 +62,7 @@ impl<T> [T] {\n     /// assert_eq!(a.len(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\"))]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n     #[allow(unused_attributes)]\n@@ -81,6 +82,10 @@ impl<T> [T] {\n     /// assert!(!a.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_slice_is_empty\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n@@ -376,6 +381,10 @@ impl<T> [T] {\n     ///\n     /// [`as_mut_ptr`]: #method.as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\"),\n+    )]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const T {\n         self as *const [T] as *const T"}, {"sha": "6d225a25f20abed4d86d90381a1f4267e7feeff2", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -2090,6 +2090,7 @@ impl str {\n     /// assert_eq!(\"\u0192oo\".chars().count(), 3);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_str_len\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn len(&self) -> usize {\n         self.as_bytes().len()\n@@ -2110,6 +2111,10 @@ impl str {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(\n+        not(bootstrap),\n+        rustc_const_stable(feature = \"const_str_is_empty\", since = \"1.32.0\"),\n+    )]\n     pub const fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n@@ -2166,6 +2171,7 @@ impl str {\n     /// assert_eq!(b\"bors\", bytes);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\"))]\n     #[inline(always)]\n     // SAFETY: const sound because we transmute two types with the same layout\n     #[allow(unused_attributes)]\n@@ -2239,6 +2245,7 @@ impl str {\n     /// let ptr = s.as_ptr();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"rustc_str_as_ptr\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn as_ptr(&self) -> *const u8 {\n         self as *const str as *const u8"}, {"sha": "7756335ee207d691f4cf2765bb8207e4c9c7e960", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -331,6 +331,7 @@ impl AtomicBool {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\"))]\n     pub const fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: UnsafeCell::new(v as u8) }\n     }\n@@ -855,6 +856,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_atomic_new\", since = \"1.32.0\"))]\n     pub const fn new(p: *mut T) -> AtomicPtr<T> {\n         AtomicPtr { p: UnsafeCell::new(p) }\n     }\n@@ -1183,6 +1185,7 @@ macro_rules! atomic_int {\n      $stable_access:meta,\n      $stable_from:meta,\n      $stable_nand:meta,\n+     $const_stable:meta,\n      $stable_init_const:meta,\n      $s_int_type:expr, $int_ref:expr,\n      $extra_feature:expr,\n@@ -1258,6 +1261,7 @@ let atomic_forty_two = \", stringify!($atomic_type), \"::new(42);\n ```\"),\n                 #[inline]\n                 #[$stable]\n+                #[cfg_attr(not(bootstrap), $const_stable)]\n                 pub const fn new(v: $int_type) -> Self {\n                     $atomic_type {v: UnsafeCell::new(v)}\n                 }\n@@ -1978,6 +1982,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i8\", \"../../../std/primitive.i8.html\",\n     \"\",\n@@ -1995,6 +2000,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u8\", \"../../../std/primitive.u8.html\",\n     \"\",\n@@ -2012,6 +2018,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i16\", \"../../../std/primitive.i16.html\",\n     \"\",\n@@ -2029,6 +2036,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u16\", \"../../../std/primitive.u16.html\",\n     \"\",\n@@ -2046,6 +2054,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i32\", \"../../../std/primitive.i32.html\",\n     \"\",\n@@ -2063,6 +2072,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u32\", \"../../../std/primitive.u32.html\",\n     \"\",\n@@ -2080,6 +2090,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i64\", \"../../../std/primitive.i64.html\",\n     \"\",\n@@ -2097,6 +2108,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u64\", \"../../../std/primitive.u64.html\",\n     \"\",\n@@ -2114,6 +2126,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"i128\", \"../../../std/primitive.i128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n@@ -2131,6 +2144,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     \"u128\", \"../../../std/primitive.u128.html\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n@@ -2163,6 +2177,7 @@ atomic_int!{\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     \"isize\", \"../../../std/primitive.isize.html\",\n     \"\",\n@@ -2180,6 +2195,7 @@ atomic_int!{\n     stable(feature = \"atomic_access\", since = \"1.15.0\"),\n     stable(feature = \"atomic_from\", since = \"1.23.0\"),\n     stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n+    rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     stable(feature = \"rust1\", since = \"1.0.0\"),\n     \"usize\", \"../../../std/primitive.usize.html\",\n     \"\","}, {"sha": "c1e45f189b7a62de9f84ff1559c5c3dafbd712dd", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -39,6 +39,7 @@ impl RawWaker {\n     /// function in the `vtable` of the underlying `RawWaker` will be called.\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\"))]\n     pub const fn new(data: *const (), vtable: &'static RawWakerVTable) -> RawWaker {\n         RawWaker { data, vtable }\n     }\n@@ -151,6 +152,7 @@ impl RawWakerVTable {\n     // FIXME: remove whenever we have a stable way to accept fn pointers from const fn\n     // (see https://github.com/rust-rfcs/const-eval/issues/19#issuecomment-472799062)\n     #[rustc_allow_const_fn_ptr]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\"))]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "7d04cfb5da518a715523180cdfe51b18f4a263df", "filename": "src/libcore/time.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibcore%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftime.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -130,6 +130,7 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n     pub fn new(secs: u64, nanos: u32) -> Duration {\n         let secs =\n             secs.checked_add((nanos / NANOS_PER_SEC) as u64).expect(\"overflow in Duration::new\");\n@@ -152,6 +153,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_promotable]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n     pub const fn from_secs(secs: u64) -> Duration {\n         Duration { secs, nanos: 0 }\n     }\n@@ -171,6 +173,7 @@ impl Duration {\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n     #[rustc_promotable]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n     pub const fn from_millis(millis: u64) -> Duration {\n         Duration {\n             secs: millis / MILLIS_PER_SEC,\n@@ -193,6 +196,7 @@ impl Duration {\n     #[stable(feature = \"duration_from_micros\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n     pub const fn from_micros(micros: u64) -> Duration {\n         Duration {\n             secs: micros / MICROS_PER_SEC,\n@@ -215,6 +219,7 @@ impl Duration {\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n     #[inline]\n     #[rustc_promotable]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_consts\", since = \"1.32.0\"))]\n     pub const fn from_nanos(nanos: u64) -> Duration {\n         Duration {\n             secs: nanos / (NANOS_PER_SEC as u64),\n@@ -251,6 +256,7 @@ impl Duration {\n     ///\n     /// [`subsec_nanos`]: #method.subsec_nanos\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn as_secs(&self) -> u64 {\n         self.secs\n@@ -272,6 +278,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_millis(), 432);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn subsec_millis(&self) -> u32 {\n         self.nanos / NANOS_PER_MILLI\n@@ -293,6 +300,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_micros(), 234_567);\n     /// ```\n     #[stable(feature = \"duration_extras\", since = \"1.27.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_extras\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn subsec_micros(&self) -> u32 {\n         self.nanos / NANOS_PER_MICRO\n@@ -314,6 +322,7 @@ impl Duration {\n     /// assert_eq!(duration.subsec_nanos(), 10_000_000);\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration\", since = \"1.32.0\"))]\n     #[inline]\n     pub const fn subsec_nanos(&self) -> u32 {\n         self.nanos\n@@ -330,6 +339,7 @@ impl Duration {\n     /// assert_eq!(duration.as_millis(), 5730);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n     #[inline]\n     pub const fn as_millis(&self) -> u128 {\n         self.secs as u128 * MILLIS_PER_SEC as u128 + (self.nanos / NANOS_PER_MILLI) as u128\n@@ -346,6 +356,7 @@ impl Duration {\n     /// assert_eq!(duration.as_micros(), 5730023);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n     #[inline]\n     pub const fn as_micros(&self) -> u128 {\n         self.secs as u128 * MICROS_PER_SEC as u128 + (self.nanos / NANOS_PER_MICRO) as u128\n@@ -362,6 +373,7 @@ impl Duration {\n     /// assert_eq!(duration.as_nanos(), 5730023852);\n     /// ```\n     #[stable(feature = \"duration_as_u128\", since = \"1.33.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"duration_as_u128\", since = \"1.33.0\"))]\n     #[inline]\n     pub const fn as_nanos(&self) -> u128 {\n         self.secs as u128 * NANOS_PER_SEC as u128 + self.nanos as u128"}, {"sha": "51756084f24b0b90f4df4986ae33e1d612281ff3", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -19,7 +19,7 @@ use syntax_pos::{Span, MultiSpan};\n use syntax::ast::{Attribute, CRATE_NODE_ID};\n use syntax::errors::Applicability;\n use syntax::feature_gate::{feature_err, feature_err_issue};\n-use syntax::attr::{self, Stability, Deprecation, RustcDeprecation};\n+use syntax::attr::{self, Stability, Deprecation, RustcDeprecation, ConstStability};\n use crate::ty::{self, TyCtxt};\n use crate::util::nodemap::{FxHashSet, FxHashMap};\n \n@@ -91,6 +91,7 @@ pub struct Index<'tcx> {\n     /// This is mostly a cache, except the stabilities of local items\n     /// are filled by the annotator.\n     stab_map: FxHashMap<HirId, &'tcx Stability>,\n+    const_stab_map: FxHashMap<HirId, &'tcx ConstStability>,\n     depr_map: FxHashMap<HirId, DeprecationEntry>,\n \n     /// Maps for each crate whether it is part of the staged API.\n@@ -123,8 +124,14 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 self.tcx.sess.span_err(item_sp, \"`#[deprecated]` cannot be used in staged API; \\\n                                                  use `#[rustc_deprecated]` instead\");\n             }\n-            if let Some(mut stab) = attr::find_stability(&self.tcx.sess.parse_sess,\n-                                                         attrs, item_sp) {\n+            let (stab, const_stab) = attr::find_stability(\n+                &self.tcx.sess.parse_sess, attrs, item_sp,\n+            );\n+            if let Some(const_stab) = const_stab {\n+                let const_stab = self.tcx.intern_const_stability(const_stab);\n+                self.index.const_stab_map.insert(hir_id, const_stab);\n+            }\n+            if let Some(mut stab) = stab {\n                 // Error if prohibited, or can't inherit anything from a container.\n                 if kind == AnnotationKind::Prohibited ||\n                    (kind == AnnotationKind::Container &&\n@@ -189,9 +196,15 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n             }\n         } else {\n             // Emit errors for non-staged-api crates.\n+            let unstable_attrs = [\n+                sym::unstable, sym::stable,\n+                sym::rustc_deprecated,\n+                sym::rustc_const_unstable,\n+                sym::rustc_const_stable,\n+            ];\n             for attr in attrs {\n                 let name = attr.name_or_empty();\n-                if [sym::unstable, sym::stable, sym::rustc_deprecated].contains(&name) {\n+                if unstable_attrs.contains(&name) {\n                     attr::mark_used(attr);\n                     struct_span_err!(\n                         self.tcx.sess,\n@@ -399,6 +412,7 @@ impl<'tcx> Index<'tcx> {\n         let mut index = Index {\n             staged_api,\n             stab_map: Default::default(),\n+            const_stab_map: Default::default(),\n             depr_map: Default::default(),\n             active_features: Default::default(),\n         };\n@@ -440,9 +454,6 @@ impl<'tcx> Index<'tcx> {\n                     },\n                     feature: sym::rustc_private,\n                     rustc_depr: None,\n-                    const_stability: None,\n-                    promotable: false,\n-                    allow_const_fn_ptr: false,\n                 });\n                 annotator.parent_stab = Some(stability);\n             }\n@@ -460,6 +471,10 @@ impl<'tcx> Index<'tcx> {\n         self.stab_map.get(&id).cloned()\n     }\n \n+    pub fn local_const_stability(&self, id: HirId) -> Option<&'tcx ConstStability> {\n+        self.const_stab_map.get(&id).cloned()\n+    }\n+\n     pub fn local_deprecation_entry(&self, id: HirId) -> Option<DeprecationEntry> {\n         self.depr_map.get(&id).cloned()\n     }"}, {"sha": "cc02165f605790230785be4629ddca8b39c5466b", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -533,6 +533,7 @@ rustc_queries! {\n             eval_always\n         }\n         query lookup_stability(_: DefId) -> Option<&'tcx attr::Stability> {}\n+        query lookup_const_stability(_: DefId) -> Option<&'tcx attr::ConstStability> {}\n         query lookup_deprecation_entry(_: DefId) -> Option<DeprecationEntry> {}\n         query item_attrs(_: DefId) -> Lrc<[ast::Attribute]> {}\n     }"}, {"sha": "897a3678c40046ee7700e682caa1d9d08890e5d5", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 38, "deletions": 12, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -30,7 +30,12 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n     pub fn is_unstable_const_fn(self, def_id: DefId) -> Option<Symbol> {\n         if self.is_const_fn_raw(def_id) {\n-            self.lookup_stability(def_id)?.const_stability\n+            let const_stab = self.lookup_const_stability(def_id)?;\n+            if const_stab.level.is_unstable() {\n+                Some(const_stab.feature)\n+            } else {\n+                None\n+            }\n         } else {\n             None\n         }\n@@ -83,15 +88,36 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n \n         if self.features().staged_api {\n-            // in order for a libstd function to be considered min_const_fn\n-            // it needs to be stable and have no `rustc_const_unstable` attribute\n-            match self.lookup_stability(def_id) {\n-                // stable functions with unstable const fn aren't `min_const_fn`\n-                Some(&attr::Stability { const_stability: Some(_), .. }) => false,\n-                // unstable functions don't need to conform\n-                Some(&attr::Stability { ref level, .. }) if level.is_unstable() => false,\n-                // everything else needs to conform, because it would be callable from\n-                // other `min_const_fn` functions\n+            // In order for a libstd function to be considered min_const_fn\n+            // it needs to be stable and have no `rustc_const_unstable` attribute.\n+            match self.lookup_const_stability(def_id) {\n+                // `rustc_const_unstable` functions don't need to conform.\n+                Some(&attr::ConstStability { ref level, .. }) if level.is_unstable() => false,\n+                None => if let Some(stab) = self.lookup_stability(def_id) {\n+                    if stab.level.is_stable() {\n+                        self.sess.span_err(\n+                            self.def_span(def_id),\n+                            \"stable const functions must have either `rustc_const_stable` or \\\n+                            `rustc_const_unstable` attribute\",\n+                        );\n+                        // While we errored above, because we don't know if we need to conform, we\n+                        // err on the \"safe\" side and require min_const_fn.\n+                        true\n+                    } else {\n+                        // Unstable functions need not conform to min_const_fn.\n+                        false\n+                    }\n+                } else {\n+                    // Internal functions are forced to conform to min_const_fn.\n+                    // Annotate the internal function with a const stability attribute if\n+                    // you need to use unstable features.\n+                    // Note: this is an arbitrary choice that does not affect stability or const\n+                    // safety or anything, it just changes whether we need to annotate some\n+                    // internal functions with `rustc_const_stable` or with `rustc_const_unstable`\n+                    true\n+                },\n+                // Everything else needs to conform, because it would be callable from\n+                // other `min_const_fn` functions.\n                 _ => true,\n             }\n         } else {\n@@ -188,7 +214,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     }\n \n     fn is_promotable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-        tcx.is_const_fn(def_id) && match tcx.lookup_stability(def_id) {\n+        tcx.is_const_fn(def_id) && match tcx.lookup_const_stability(def_id) {\n             Some(stab) => {\n                 if cfg!(debug_assertions) && stab.promotable {\n                     let sig = tcx.fn_sig(def_id);\n@@ -207,7 +233,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n     fn const_fn_is_allowed_fn_ptr(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n         tcx.is_const_fn(def_id) &&\n-            tcx.lookup_stability(def_id)\n+            tcx.lookup_const_stability(def_id)\n                 .map(|stab| stab.allow_const_fn_ptr).unwrap_or(false)\n     }\n "}, {"sha": "595ea40b2ffd5896e0f827737e4e68c1043adb91", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1066,8 +1066,12 @@ pub struct GlobalCtxt<'tcx> {\n     /// Data layout specification for the current target.\n     pub data_layout: TargetDataLayout,\n \n+    /// `#[stable]` and `#[unstable]` attributes\n     stability_interner: ShardedHashMap<&'tcx attr::Stability, ()>,\n \n+    /// `#[rustc_const_stable]` and `#[rustc_const_unstable]` attributes\n+    const_stability_interner: ShardedHashMap<&'tcx attr::ConstStability, ()>,\n+\n     /// Stores the value of constants (and deduplicates the actual memory)\n     allocation_interner: ShardedHashMap<&'tcx Allocation, ()>,\n \n@@ -1129,6 +1133,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    pub fn intern_const_stability(self, stab: attr::ConstStability) -> &'tcx attr::ConstStability {\n+        self.const_stability_interner.intern(stab, |stab| {\n+            self.arena.alloc(stab)\n+        })\n+    }\n+\n     pub fn intern_layout(self, layout: LayoutDetails) -> &'tcx LayoutDetails {\n         self.layout_interner.intern(layout, |layout| {\n             self.arena.alloc(layout)\n@@ -1269,6 +1279,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             data_layout,\n             layout_interner: Default::default(),\n             stability_interner: Default::default(),\n+            const_stability_interner: Default::default(),\n             allocation_interner: Default::default(),\n             alloc_map: Lock::new(interpret::AllocMap::new()),\n             output_filenames: Arc::new(output_filenames.clone()),\n@@ -2058,6 +2069,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         println!(\"InternalSubsts interner: #{}\", self.interners.substs.len());\n         println!(\"Region interner: #{}\", self.interners.region.len());\n         println!(\"Stability interner: #{}\", self.stability_interner.len());\n+        println!(\"Const Stability interner: #{}\", self.const_stability_interner.len());\n         println!(\"Allocation interner: #{}\", self.allocation_interner.len());\n         println!(\"Layout interner: #{}\", self.layout_interner.len());\n     }\n@@ -2992,6 +3004,11 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n         let id = tcx.hir().definitions().def_index_to_hir_id(id.index);\n         tcx.stability().local_stability(id)\n     };\n+    providers.lookup_const_stability = |tcx, id| {\n+        assert_eq!(id.krate, LOCAL_CRATE);\n+        let id = tcx.hir().definitions().def_index_to_hir_id(id.index);\n+        tcx.stability().local_const_stability(id)\n+    };\n     providers.lookup_deprecation_entry = |tcx, id| {\n         assert_eq!(id.krate, LOCAL_CRATE);\n         let id = tcx.hir().definitions().def_index_to_hir_id(id.index);"}, {"sha": "98213b890f9537f96e86e7bbe3dcbdbe4eb90e33", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -111,10 +111,6 @@ declare_features! (\n     /// macros disappear).\n     (active, allow_internal_unsafe, \"1.0.0\", None, None),\n \n-    /// Allows using `#[rustc_const_unstable(feature = \"foo\", ..)]` which\n-    /// lets a function to be `const` when opted into with `#![feature(foo)]`.\n-    (active, rustc_const_unstable, \"1.0.0\", None, None),\n-\n     /// no-tracking-issue-end\n \n     /// Allows using `#[link_name=\"llvm.*\"]`."}, {"sha": "0a4fb8a224eecc1cd8e74b7177eb3e7ffacb73fc", "filename": "src/librustc_feature/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_feature%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Fbuiltin_attrs.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -344,10 +344,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         unstable, Whitelisted,\n         template!(List: r#\"feature = \"name\", reason = \"...\", issue = \"N\"\"#),\n     ),\n-    gated!(\n-        rustc_const_unstable, Normal, template!(List: r#\"feature = \"name\"\"#),\n-        \"the `#[rustc_const_unstable]` attribute is an internal feature\",\n-    ),\n+    // FIXME(#14407)\n+    ungated!(rustc_const_unstable, Whitelisted, template!(List: r#\"feature = \"name\"\"#)),\n+    // FIXME(#14407)\n+    ungated!(rustc_const_stable, Whitelisted, template!(List: r#\"feature = \"name\"\"#)),\n     gated!(\n         allow_internal_unstable, Normal, template!(Word, List: \"feat1, feat2, ...\"),\n         \"allow_internal_unstable side-steps feature gating and stability checks\","}, {"sha": "a1f95e35cbef2d1b35a7d85be2b528eb77b8d0e4", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -852,6 +852,10 @@ impl<'a, 'tcx> CrateMetadata {\n         }\n     }\n \n+    fn get_const_stability(&self, id: DefIndex) -> Option<attr::ConstStability> {\n+        self.root.per_def.const_stability.get(self, id).map(|stab| stab.decode(self))\n+    }\n+\n     fn get_deprecation(&self, id: DefIndex) -> Option<attr::Deprecation> {\n         self.root.per_def.deprecation.get(self, id)\n             .filter(|_| !self.is_proc_macro(id))"}, {"sha": "4a6b25930c869069d4b9f89397aaf7d6ba5b609c", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -134,6 +134,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     lookup_stability => {\n         cdata.get_stability(def_id.index).map(|s| tcx.intern_stability(s))\n     }\n+    lookup_const_stability => {\n+        cdata.get_const_stability(def_id.index).map(|s| tcx.intern_const_stability(s))\n+    }\n     lookup_deprecation_entry => {\n         cdata.get_deprecation(def_id.index).map(DeprecationEntry::external)\n     }"}, {"sha": "c1562a7734271dba1b354e3589842053b6986c92", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -866,6 +866,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.span[def_id] <- ast_item.span);\n         record!(self.per_def.attributes[def_id] <- &ast_item.attrs);\n         self.encode_stability(def_id);\n+        self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         match trait_item.kind {\n             ty::AssocKind::Const |\n@@ -946,6 +947,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.span[def_id] <- ast_item.span);\n         record!(self.per_def.attributes[def_id] <- &ast_item.attrs);\n         self.encode_stability(def_id);\n+        self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if impl_item.kind == ty::AssocKind::Method {\n@@ -1025,6 +1027,13 @@ impl EncodeContext<'tcx> {\n         }\n     }\n \n+    fn encode_const_stability(&mut self, def_id: DefId) {\n+        debug!(\"EncodeContext::encode_const_stability({:?})\", def_id);\n+        if let Some(stab) = self.tcx.lookup_const_stability(def_id) {\n+            record!(self.per_def.const_stability[def_id] <- stab)\n+        }\n+    }\n+\n     fn encode_deprecation(&mut self, def_id: DefId) {\n         debug!(\"EncodeContext::encode_deprecation({:?})\", def_id);\n         if let Some(depr) = self.tcx.lookup_deprecation(def_id) {\n@@ -1186,6 +1195,7 @@ impl EncodeContext<'tcx> {\n             _ => {}\n         }\n         self.encode_stability(def_id);\n+        self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         match item.kind {\n             hir::ItemKind::Static(..) |\n@@ -1545,6 +1555,7 @@ impl EncodeContext<'tcx> {\n         record!(self.per_def.span[def_id] <- nitem.span);\n         record!(self.per_def.attributes[def_id] <- &nitem.attrs);\n         self.encode_stability(def_id);\n+        self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n         self.encode_item_type(def_id);\n         if let hir::ForeignItemKind::Fn(..) = nitem.kind {"}, {"sha": "e13edc2d621c56e0a1323eb7d0b3648fb7782cfd", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -261,6 +261,7 @@ define_per_def_tables! {\n     attributes: Table<DefIndex, Lazy<[ast::Attribute]>>,\n     children: Table<DefIndex, Lazy<[DefIndex]>>,\n     stability: Table<DefIndex, Lazy<attr::Stability>>,\n+    const_stability: Table<DefIndex, Lazy<attr::ConstStability>>,\n     deprecation: Table<DefIndex, Lazy<attr::Deprecation>>,\n     ty: Table<DefIndex, Lazy!(Ty<'tcx>)>,\n     fn_sig: Table<DefIndex, Lazy!(ty::PolyFnSig<'tcx>)>,"}, {"sha": "14ca0423d8bc496c1b9d439cd293e158ac0cc5c2", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1065,7 +1065,8 @@ impl CStr {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_unchecked\")]\n+    #[cfg_attr(bootstrap, rustc_const_unstable(feature = \"const_cstr_unchecked\"))]\n+    #[cfg_attr(not(bootstrap), rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"0\"))]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         &*(bytes as *const [u8] as *const CStr)\n     }\n@@ -1119,6 +1120,7 @@ impl CStr {\n     /// [`CString`]: struct.CString.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_str_as_ptr\", since = \"1.32.0\"))]\n     pub const fn as_ptr(&self) -> *const c_char {\n         self.inner.as_ptr()\n     }"}, {"sha": "8198ae73a31fb49baf1d23ad53796733dc4e988a", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -293,7 +293,7 @@\n #![feature(raw)]\n #![feature(renamed_spin_loop)]\n #![feature(rustc_attrs)]\n-#![feature(rustc_const_unstable)]\n+#![cfg_attr(bootstrap, feature(rustc_const_unstable))]\n #![feature(rustc_private)]\n #![feature(shrink_to)]\n #![feature(slice_concat_ext)]"}, {"sha": "7d69f8f4b8d2fca23d558e131b459c15d617ea06", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -319,6 +319,7 @@ impl Ipv4Addr {\n     /// let addr = Ipv4Addr::new(127, 0, 0, 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\"))]\n     pub const fn new(a: u8, b: u8, c: u8, d: u8) -> Ipv4Addr {\n         // FIXME: should just be u32::from_be_bytes([a, b, c, d]),\n         // once that method is no longer rustc_const_unstable\n@@ -406,6 +407,7 @@ impl Ipv4Addr {\n     /// assert_eq!(Ipv4Addr::new(45, 22, 13, 197).is_unspecified(), false);\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv4\", since = \"1.32.0\"))]\n     pub const fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n     }\n@@ -1015,6 +1017,7 @@ impl Ipv6Addr {\n     /// let addr = Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\"))]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16,\n                      g: u16, h: u16) -> Ipv6Addr {\n         Ipv6Addr {\n@@ -1480,6 +1483,7 @@ impl Ipv6Addr {\n     ///            [255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n     /// ```\n     #[stable(feature = \"ipv6_to_octets\", since = \"1.12.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\"))]\n     pub const fn octets(&self) -> [u8; 16] {\n         self.inner.s6_addr\n     }"}, {"sha": "d8df09071cd69175d3038494a54f6005ca652385", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -188,6 +188,7 @@ struct WaiterQueue<'a> {\n impl Once {\n     /// Creates a new `Once` value.\n     #[stable(feature = \"once_new\", since = \"1.2.0\")]\n+    #[cfg_attr(not(bootstrap), rustc_const_stable(feature = \"const_once_new\", since = \"1.32.0\"))]\n     pub const fn new() -> Once {\n         Once { state_and_queue: AtomicUsize::new(INCOMPLETE), _marker: marker::PhantomData }\n     }"}, {"sha": "a37b27f67bcbd242c632d4279d3e8250408ab4a2", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 63, "deletions": 62, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -120,17 +120,21 @@ pub fn find_unwind_attr(diagnostic: Option<&Handler>, attrs: &[Attribute]) -> Op\n     })\n }\n \n-/// Represents the #[stable], #[unstable], #[rustc_{deprecated,const_unstable}] attributes.\n+/// Represents the #[stable], #[unstable], #[rustc_deprecated] attributes.\n #[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug,\n          PartialEq, Eq, Hash, HashStable_Generic)]\n pub struct Stability {\n     pub level: StabilityLevel,\n     pub feature: Symbol,\n     pub rustc_depr: Option<RustcDeprecation>,\n-    /// `None` means the function is stable but needs to be a stable const fn, too\n-    /// `Some` contains the feature gate required to be able to use the function\n-    /// as const fn\n-    pub const_stability: Option<Symbol>,\n+}\n+\n+/// Represents the #[rustc_const_unstable] and #[rustc_const_stable] attributes.\n+#[derive(RustcEncodable, RustcDecodable, Copy, Clone, Debug,\n+         PartialEq, Eq, Hash, HashStable_Generic)]\n+pub struct ConstStability {\n+    pub level: StabilityLevel,\n+    pub feature: Symbol,\n     /// whether the function has a `#[rustc_promotable]` attribute\n     pub promotable: bool,\n     /// whether the function has a `#[rustc_allow_const_fn_ptr]` attribute\n@@ -186,21 +190,21 @@ pub fn contains_feature_attr(attrs: &[Attribute], feature_name: Symbol) -> bool\n /// Collects stability info from all stability attributes in `attrs`.\n /// Returns `None` if no stability attributes are found.\n pub fn find_stability(sess: &ParseSess, attrs: &[Attribute],\n-                      item_sp: Span) -> Option<Stability> {\n+                      item_sp: Span) -> (Option<Stability>, Option<ConstStability>) {\n     find_stability_generic(sess, attrs.iter(), item_sp)\n }\n \n fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                  attrs_iter: I,\n                                  item_sp: Span)\n-                                 -> Option<Stability>\n+                                 -> (Option<Stability>, Option<ConstStability>)\n     where I: Iterator<Item = &'a Attribute>\n {\n     use StabilityLevel::*;\n \n     let mut stab: Option<Stability> = None;\n     let mut rustc_depr: Option<RustcDeprecation> = None;\n-    let mut rustc_const_unstable: Option<Symbol> = None;\n+    let mut const_stab: Option<ConstStability> = None;\n     let mut promotable = false;\n     let mut allow_const_fn_ptr = false;\n     let diagnostic = &sess.span_diagnostic;\n@@ -209,6 +213,7 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n         if ![\n             sym::rustc_deprecated,\n             sym::rustc_const_unstable,\n+            sym::rustc_const_stable,\n             sym::unstable,\n             sym::stable,\n             sym::rustc_promotable,\n@@ -287,7 +292,8 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                 }\n             }\n \n-            match meta.name_or_empty() {\n+            let meta_name = meta.name_or_empty();\n+            match meta_name {\n                 sym::rustc_deprecated => {\n                     if rustc_depr.is_some() {\n                         span_err!(diagnostic, item_sp, E0540,\n@@ -315,23 +321,12 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         }\n                     }\n                 }\n-                sym::rustc_const_unstable => {\n-                    if rustc_const_unstable.is_some() {\n-                        span_err!(diagnostic, item_sp, E0553,\n-                                  \"multiple rustc_const_unstable attributes\");\n-                        continue 'outer\n-                    }\n-\n-                    get_meta!(feature);\n-                    if let Some(feature) = feature {\n-                        rustc_const_unstable = Some(feature);\n-                    } else {\n-                        span_err!(diagnostic, attr.span, E0629, \"missing 'feature'\");\n-                        continue\n-                    }\n-                }\n+                sym::rustc_const_unstable |\n                 sym::unstable => {\n-                    if stab.is_some() {\n+                    if meta_name == sym::unstable && stab.is_some() {\n+                        handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n+                        break\n+                    } else if meta_name == sym::rustc_const_unstable && const_stab.is_some() {\n                         handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n                         break\n                     }\n@@ -398,18 +393,25 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                                     }\n                                 }\n                             };\n-                            stab = Some(Stability {\n-                                level: Unstable {\n-                                    reason,\n-                                    issue,\n-                                    is_soft,\n-                                },\n-                                feature,\n-                                rustc_depr: None,\n-                                const_stability: None,\n-                                promotable: false,\n-                                allow_const_fn_ptr: false,\n-                            })\n+                            let level = Unstable {\n+                                reason,\n+                                issue,\n+                                is_soft,\n+                            };\n+                            if sym::unstable == meta_name {\n+                                stab = Some(Stability {\n+                                    level,\n+                                    feature,\n+                                    rustc_depr: None,\n+                                });\n+                            } else {\n+                                const_stab = Some(ConstStability {\n+                                    level,\n+                                    feature,\n+                                    promotable: false,\n+                                    allow_const_fn_ptr: false,\n+                                });\n+                            }\n                         }\n                         (None, _, _) => {\n                             handle_errors(sess, attr.span, AttrError::MissingFeature);\n@@ -421,8 +423,12 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         }\n                     }\n                 }\n+                sym::rustc_const_stable |\n                 sym::stable => {\n-                    if stab.is_some() {\n+                    if meta_name == sym::stable && stab.is_some() {\n+                        handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n+                        break\n+                    } else if meta_name == sym::rustc_const_stable &&const_stab.is_some() {\n                         handle_errors(sess, attr.span, AttrError::MultipleStabilityLevels);\n                         break\n                     }\n@@ -464,16 +470,21 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n \n                     match (feature, since) {\n                         (Some(feature), Some(since)) => {\n-                            stab = Some(Stability {\n-                                level: Stable {\n-                                    since,\n-                                },\n-                                feature,\n-                                rustc_depr: None,\n-                                const_stability: None,\n-                                promotable: false,\n-                                allow_const_fn_ptr: false,\n-                            })\n+                            let level =  Stable { since };\n+                            if sym::stable == meta_name {\n+                                stab = Some(Stability {\n+                                    level,\n+                                    feature,\n+                                    rustc_depr: None,\n+                                });\n+                            } else {\n+                                const_stab = Some(ConstStability {\n+                                    level,\n+                                    feature,\n+                                    promotable: false,\n+                                    allow_const_fn_ptr: false,\n+                                });\n+                            }\n                         }\n                         (None, _) => {\n                             handle_errors(sess, attr.span, AttrError::MissingFeature);\n@@ -501,30 +512,20 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n         }\n     }\n \n-    // Merge the const-unstable info into the stability info\n-    if let Some(feature) = rustc_const_unstable {\n-        if let Some(ref mut stab) = stab {\n-            stab.const_stability = Some(feature);\n-        } else {\n-            span_err!(diagnostic, item_sp, E0630,\n-                      \"rustc_const_unstable attribute must be paired with \\\n-                       either stable or unstable attribute\");\n-        }\n-    }\n-\n     // Merge the const-unstable info into the stability info\n     if promotable || allow_const_fn_ptr {\n-        if let Some(ref mut stab) = stab {\n+        if let Some(ref mut stab) = const_stab {\n             stab.promotable = promotable;\n             stab.allow_const_fn_ptr = allow_const_fn_ptr;\n         } else {\n             span_err!(diagnostic, item_sp, E0717,\n                       \"rustc_promotable and rustc_allow_const_fn_ptr attributes \\\n-                      must be paired with either stable or unstable attribute\");\n+                      must be paired with either a rustc_const_unstable or a rustc_const_stable \\\n+                      attribute\");\n         }\n     }\n \n-    stab\n+    (stab, const_stab)\n }\n \n pub fn find_crate_name(attrs: &[Attribute]) -> Option<Symbol> {"}, {"sha": "72c0b3fde0276b0982a6a06b1ee75e0e7f5a5c3c", "filename": "src/libsyntax_expand/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fbase.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -775,14 +775,18 @@ impl SyntaxExtension {\n         }\n \n         let is_builtin = attr::contains_name(attrs, sym::rustc_builtin_macro);\n+        let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n+        if const_stability.is_some() {\n+            sess.span_diagnostic.span_err(span, \"macros cannot have const stability attributes\");\n+        }\n \n         SyntaxExtension {\n             kind,\n             span,\n             allow_internal_unstable,\n             allow_internal_unsafe: attr::contains_name(attrs, sym::allow_internal_unsafe),\n             local_inner_macros,\n-            stability: attr::find_stability(&sess, attrs, span),\n+            stability,\n             deprecation: attr::find_deprecation(&sess, attrs, span),\n             helper_attrs,\n             edition,"}, {"sha": "c7e4182de6b736a67fa38ad4ada9acf73440b6fd", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -605,6 +605,7 @@ symbols! {\n         rustc_builtin_macro,\n         rustc_clean,\n         rustc_const_unstable,\n+        rustc_const_stable,\n         rustc_conversion_suggestion,\n         rustc_def_path,\n         rustc_deprecated,"}, {"sha": "bc7ad04b6a2faeb1188037bb4353da21c3c0fdd1", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -4,12 +4,12 @@\n             reason = \"who ever let humans program computers, we're apparently really bad at it\",\n             issue = \"0\")]\n \n-#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(foo, foo2)]\n #![feature(staged_api)]\n \n // @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n pub const unsafe fn foo() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub fn foo2() -> u32'\n@@ -18,6 +18,7 @@ pub const fn foo2() -> u32 { 42 }\n \n // @has 'foo/fn.bar2.html' '//pre' 'pub const fn bar2() -> u32'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n \n // @has 'foo/fn.foo2_gated.html' '//pre' 'pub unsafe fn foo2_gated() -> u32'\n@@ -26,6 +27,7 @@ pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar2_gated.html' '//pre' 'pub const unsafe fn bar2_gated() -> u32'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar_not_gated.html' '//pre' 'pub unsafe fn bar_not_gated() -> u32'"}, {"sha": "b1d5440b41a48d6ab3bdb1fc8c17d1364573ef04", "filename": "src/test/ui/consts/auxiliary/promotable_const_fn_lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fpromotable_const_fn_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fpromotable_const_fn_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fauxiliary%2Fpromotable_const_fn_lib.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -7,6 +7,7 @@\n \n #[rustc_promotable]\n #[stable(since=\"1.0.0\", feature = \"mep\")]\n+#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n #[inline]\n pub const fn foo() -> usize { 22 }\n \n@@ -15,6 +16,7 @@ pub struct Foo(usize);\n \n impl Foo {\n     #[stable(since=\"1.0.0\", feature = \"mep\")]\n+    #[rustc_const_stable(feature = \"mep\", since = \"1.0.0\")]\n     #[inline]\n     #[rustc_promotable]\n     pub const fn foo() -> usize { 22 }"}, {"sha": "830db55207f1ca207339823cd5ea2eb03f73124e", "filename": "src/test/ui/consts/const-eval/auxiliary/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -3,9 +3,9 @@\n #![crate_type=\"rlib\"]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#![feature(rustc_const_unstable, const_fn)]\n+#![feature(const_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n pub const fn foo() -> u32 { 42 }"}, {"sha": "c4b89b50bc4ad5e9a025ebdb5f16273e316fa78c", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -3,11 +3,11 @@\n             we're apparently really bad at it\",\n             issue = \"0\")]\n \n-#![feature(rustc_const_unstable, const_fn)]\n+#![feature(const_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n const fn foo() -> u32 { 42 }\n \n fn meh() -> u32 { 42 }"}, {"sha": "937aae1a8e3997831f791b65416a577120b4a0a1", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,10 +1,12 @@\n #![feature(rustc_attrs, staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n const fn error(_: fn()) {} //~ ERROR function pointers in const fn are unstable\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_allow_const_fn_ptr]\n+#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "0ede4229ade30fecef0689a4dd76a899e305fc87", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,5 +1,5 @@\n error[E0723]: function pointers in const fn are unstable\n-  --> $DIR/allow_const_fn_ptr.rs:4:16\n+  --> $DIR/allow_const_fn_ptr.rs:5:16\n    |\n LL | const fn error(_: fn()) {}\n    |                ^"}, {"sha": "7aa9bd7e2dcdddeec9a76cdd29f9f14bd8bcf7fe", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -5,6 +5,7 @@\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_allow_const_fn_ptr]\n+#[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "97e467aece2333ff8eee54fb56a641472f372afe", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -3,25 +3,28 @@\n             we're apparently really bad at it\",\n             issue = \"0\")]\n \n-#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n const fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n \n #[unstable(feature = \"rust1\", issue=\"0\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n \n@@ -30,6 +33,7 @@ const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `\n const fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `const fn`\n "}, {"sha": "1da9b41aa5955647709dc8653bb66bf98ab6ae17", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,5 +1,5 @@\n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n-  --> $DIR/min_const_fn_libstd_stability.rs:15:25\n+  --> $DIR/min_const_fn_libstd_stability.rs:16:25\n    |\n LL | const fn bar() -> u32 { foo() }\n    |                         ^^^^^\n@@ -8,7 +8,7 @@ LL | const fn bar() -> u32 { foo() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n-  --> $DIR/min_const_fn_libstd_stability.rs:22:26\n+  --> $DIR/min_const_fn_libstd_stability.rs:24:26\n    |\n LL | const fn bar2() -> u32 { foo2() }\n    |                          ^^^^^^\n@@ -17,7 +17,7 @@ LL | const fn bar2() -> u32 { foo2() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_fn_libstd_stability.rs:26:26\n+  --> $DIR/min_const_fn_libstd_stability.rs:29:26\n    |\n LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                          ^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n-  --> $DIR/min_const_fn_libstd_stability.rs:34:32\n+  --> $DIR/min_const_fn_libstd_stability.rs:38:32\n    |\n LL | const fn bar2_gated() -> u32 { foo2_gated() }\n    |                                ^^^^^^^^^^^^"}, {"sha": "102b380144113cb7631a5087f71fbaa8b37596d1", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -3,25 +3,28 @@\n             we're apparently really bad at it\",\n             issue = \"0\")]\n \n-#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n const unsafe fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `const fn`\n \n #[unstable(feature = \"rust1\", issue=\"0\")]\n const unsafe fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call other `const fn`\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // conformity is required, even with `const_fn` feature gate\n const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n \n@@ -30,6 +33,7 @@ const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool\n const unsafe fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n //~^ ERROR can only call other `const fn`"}, {"sha": "ae92602d45f49e0cb6cc26a1d4bd95245843c857", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,5 +1,5 @@\n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:15:41\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:16:41\n    |\n LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    |                                         ^^^^^\n@@ -8,7 +8,7 @@ LL | const unsafe fn bar() -> u32 { unsafe { foo() } }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:22:42\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:24:42\n    |\n LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    |                                          ^^^^^^\n@@ -17,7 +17,7 @@ LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: only int, `bool` and `char` operations are stable in const fn\n-  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:26:33\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:29:33\n    |\n LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |                                 ^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:34:48\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:38:48\n    |\n LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } }\n    |                                                ^^^^^^^^^^^^"}, {"sha": "121177f8366541fc0d8cd20db032ce4baa8c01bc", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -3,21 +3,23 @@\n             we're apparently really bad at it\",\n             issue = \"0\")]\n \n-#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n const fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n \n #[unstable(feature = \"rust1\", issue=\"0\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n \n@@ -26,6 +28,7 @@ const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn\n const fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `const fn`\n "}, {"sha": "a0db74cfad65f9209fe6e53d1450c1e2a65c4cb8", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,5 +1,5 @@\n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:15:32\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:16:32\n    |\n LL | const unsafe fn bar() -> u32 { foo() }\n    |                                ^^^^^\n@@ -8,7 +8,7 @@ LL | const unsafe fn bar() -> u32 { foo() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:22:33\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:24:33\n    |\n LL | const unsafe fn bar2() -> u32 { foo2() }\n    |                                 ^^^^^^\n@@ -17,7 +17,7 @@ LL | const unsafe fn bar2() -> u32 { foo2() }\n    = help: add `#![feature(const_fn)]` to the crate attributes to enable\n \n error[E0723]: can only call other `const fn` within a `const fn`, but `const foo2_gated` is not stable as `const fn`\n-  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:30:39\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:33:39\n    |\n LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() }\n    |                                       ^^^^^^^^^^^^"}, {"sha": "655ad7b548a30d0f5bf7b2ad63d4c34bccb0e3a0", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -14,7 +14,7 @@ enum Opt<T> {\n }\n \n impl<T> Opt<T> {\n-    #[rustc_const_unstable(feature = \"foo\")]\n+    #[rustc_const_unstable(feature = \"foo\", issue = \"0\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n     //~^ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "88a6093492715bcc5e59a372a4c284de63c70119", "filename": "src/test/ui/feature-gate/allow-features-empty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Z allow_features=\n // Note: This test uses rustc internal flags because they will never stabilize.\n \n-#![feature(rustc_const_unstable)] //~ ERROR\n-\n #![feature(lang_items)] //~ ERROR\n \n #![feature(unknown_stdlib_feature)] //~ ERROR"}, {"sha": "f88b3ea0a60bfee39f20640ed9ddab4b6ee4c321", "filename": "src/test/ui/feature-gate/allow-features-empty.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features-empty.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,21 +1,15 @@\n-error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:4:12\n-   |\n-LL | #![feature(rustc_const_unstable)]\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n error[E0725]: the feature `lang_items` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:6:12\n+  --> $DIR/allow-features-empty.rs:4:12\n    |\n LL | #![feature(lang_items)]\n    |            ^^^^^^^^^^\n \n error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features\n-  --> $DIR/allow-features-empty.rs:8:12\n+  --> $DIR/allow-features-empty.rs:6:12\n    |\n LL | #![feature(unknown_stdlib_feature)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0725`."}, {"sha": "2ce4701a818037d7079dc30939b8b937c9db1696", "filename": "src/test/ui/feature-gate/allow-features.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,8 +1,6 @@\n // compile-flags: -Z allow_features=lang_items\n // Note: This test uses rustc internal flags because they will never stabilize.\n \n-#![feature(rustc_const_unstable)] //~ ERROR\n-\n #![feature(lang_items)]\n \n #![feature(unknown_stdlib_feature)] //~ ERROR"}, {"sha": "9caf48dd1386b6700fcf391f5f88ce3ae06b332a", "filename": "src/test/ui/feature-gate/allow-features.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fallow-features.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,15 +1,9 @@\n-error[E0725]: the feature `rustc_const_unstable` is not in the list of allowed features\n-  --> $DIR/allow-features.rs:4:12\n-   |\n-LL | #![feature(rustc_const_unstable)]\n-   |            ^^^^^^^^^^^^^^^^^^^^\n-\n error[E0725]: the feature `unknown_stdlib_feature` is not in the list of allowed features\n-  --> $DIR/allow-features.rs:8:12\n+  --> $DIR/allow-features.rs:6:12\n    |\n LL | #![feature(unknown_stdlib_feature)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0725`."}, {"sha": "3296a17a0b7ef0416d637b08717b08e3203922d9", "filename": "src/test/ui/feature-gates/feature-gate-rustc_const_unstable.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,11 +1,8 @@\n // Test internal const fn feature gate.\n \n-#![feature(staged_api)]\n #![feature(const_fn)]\n-//#![feature(rustc_const_unstable)]\n \n-#[stable(feature=\"zing\", since=\"1.0.0\")]\n-#[rustc_const_unstable(feature=\"fzzzzzt\")] //~ERROR internal feature\n+#[rustc_const_unstable(feature=\"fzzzzzt\")] //~ stability attributes may not be used outside\n pub const fn bazinga() {}\n \n fn main() {"}, {"sha": "9df926dcf90f5582980ecedb5052bb27e9fb7a9f", "filename": "src/test/ui/feature-gates/feature-gate-rustc_const_unstable.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc_const_unstable.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,11 +1,9 @@\n-error[E0658]: the `#[rustc_const_unstable]` attribute is an internal feature\n-  --> $DIR/feature-gate-rustc_const_unstable.rs:8:1\n+error[E0734]: stability attributes may not be used outside of the standard library\n+  --> $DIR/feature-gate-rustc_const_unstable.rs:5:1\n    |\n LL | #[rustc_const_unstable(feature=\"fzzzzzt\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(rustc_const_unstable)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0658`.\n+For more information about this error, try `rustc --explain E0734`."}, {"sha": "5d7664cefb33aa47522be9c7f308db19230c0300", "filename": "src/test/ui/invalid_const_promotion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Finvalid_const_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_const_promotion.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -22,6 +22,7 @@ use std::process::{Command, Stdio};\n // of the const fn kicks in, causing a different code path in the\n // compiler to be executed (see PR #66294).\n #[stable(feature = \"rustc\", since = \"1.0.0\")]\n+#[rustc_const_stable(feature = \"rustc\", since = \"1.0.0\")]\n #[rustc_promotable]\n const fn bar(_: bool) -> usize { 0 - 1 }\n "}, {"sha": "2e3d790d2d867b13da71a51295cbce4b9f4fa6a0", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -1,6 +1,6 @@\n // Various checks that stability attributes are used correctly, per RFC 507\n \n-#![feature(const_fn, staged_api, rustc_const_unstable)]\n+#![feature(const_fn, staged_api)]\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -60,11 +60,10 @@ fn multiple3() { }\n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_const_unstable(feature = \"c\")]\n-#[rustc_const_unstable(feature = \"d\")]\n+#[rustc_const_unstable(feature = \"c\", issue = \"0\")]\n+#[rustc_const_unstable(feature = \"d\", issue = \"0\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n //~^ ERROR Invalid stability or deprecation version found\n-//~| ERROR multiple rustc_const_unstable attributes\n \n #[rustc_deprecated(since = \"a\", reason = \"text\")]\n fn deprecated_without_unstable_or_stable() { }"}, {"sha": "552e078f45fde14de2e088f03a03e814b6237cd8", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -88,11 +88,11 @@ error[E0540]: multiple rustc_deprecated attributes\n LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0553]: multiple rustc_const_unstable attributes\n-  --> $DIR/stability-attribute-sanity.rs:65:1\n+error[E0544]: multiple stability levels\n+  --> $DIR/stability-attribute-sanity.rs:64:1\n    |\n-LL | pub const fn multiple4() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_const_unstable(feature = \"d\", issue = \"0\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Invalid stability or deprecation version found\n   --> $DIR/stability-attribute-sanity.rs:65:1\n@@ -101,7 +101,7 @@ LL | pub const fn multiple4() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0549]: rustc_deprecated attribute must be paired with either stable or unstable attribute\n-  --> $DIR/stability-attribute-sanity.rs:70:1\n+  --> $DIR/stability-attribute-sanity.rs:69:1\n    |\n LL | fn deprecated_without_unstable_or_stable() { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "22e4111ff3ad319dafeb6b8a772bdfce942b24b1", "filename": "src/tools/tidy/src/error_codes_check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8ea4ace9213ae045123fdfeb59d1ac887656d31/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes_check.rs?ref=c8ea4ace9213ae045123fdfeb59d1ac887656d31", "patch": "@@ -41,6 +41,7 @@ const WHITELIST: &[&str] = &[\n     \"E0514\",\n     \"E0519\",\n     \"E0523\",\n+    \"E0553\",\n     \"E0554\",\n     \"E0570\",\n     \"E0629\","}]}