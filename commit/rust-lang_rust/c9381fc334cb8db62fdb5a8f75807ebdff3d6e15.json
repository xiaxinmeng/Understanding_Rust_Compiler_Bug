{"sha": "c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "node_id": "C_kwDOAAsO6NoAKGM5MzgxZmMzMzRjYjhkYjYyZmRiNWE4Zjc1ODA3ZWJkZmYzZDZlMTU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-16T00:24:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-12-27T02:27:40Z"}, "message": "Detect likely `.` -> `..` typo in method calls\n\nFix #65015.", "tree": {"sha": "9026bc26002c1bfccaa4d7189c14cd9e528700cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9026bc26002c1bfccaa4d7189c14cd9e528700cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "html_url": "https://github.com/rust-lang/rust/commit/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/caa64e5b5e7605a1c1428b2a402021bef83f3e1e", "html_url": "https://github.com/rust-lang/rust/commit/caa64e5b5e7605a1c1428b2a402021bef83f3e1e"}], "stats": {"total": 142, "additions": 135, "deletions": 7}, "files": [{"sha": "706700bc1f41caba59773bb83f8a0a1c8c3b26e2", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "patch": "@@ -1604,6 +1604,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         None,\n                         Some(coercion_error),\n                     );\n+                    fcx.check_for_range_as_method_call(&mut err, expr, found, expected);\n                 }\n \n                 if visitor.ret_exprs.len() > 0 && let Some(expr) = expression {"}, {"sha": "4352c50358fccfa066cd9553e99f85f9f6d0d4f1", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "patch": "@@ -1448,4 +1448,46 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             _ => false,\n         }\n     }\n+\n+    pub fn check_for_range_as_method_call(\n+        &self,\n+        err: &mut Diagnostic,\n+        expr: &hir::Expr<'_>,\n+        checked_ty: Ty<'tcx>,\n+        // FIXME: We should do analysis to see if we can synthesize an expresion that produces\n+        // this type for always accurate suggestions, or at least marking the suggestion as\n+        // machine applicable.\n+        expected_ty: Ty<'tcx>,\n+    ) {\n+        if !hir::is_range_literal(expr) {\n+            return;\n+        }\n+        let hir::ExprKind::Struct(\n+            hir::QPath::LangItem(LangItem::Range, ..),\n+            [start, end],\n+            _,\n+        ) = expr.kind else { return; };\n+        let mut expr = end.expr;\n+        while let hir::ExprKind::MethodCall(_, rcvr, ..) = expr.kind {\n+            // Getting to the root receiver and asserting it is a fn call let's us ignore cases in\n+            // `src/test/ui/methods/issues/issue-90315.stderr`.\n+            expr = rcvr;\n+        }\n+        let hir::ExprKind::Call(..) = expr.kind else { return; };\n+        let ty::Adt(adt, _) = checked_ty.kind() else { return; };\n+        if self.tcx.lang_items().range_struct() != Some(adt.did()) {\n+            return;\n+        }\n+        if let ty::Adt(adt, _) = expected_ty.kind()\n+            && self.tcx.lang_items().range_struct() == Some(adt.did())\n+        {\n+            return;\n+        }\n+        err.span_suggestion_verbose(\n+            start.expr.span.between(end.expr.span),\n+            \"you might have meant to write a method call instead of a range\",\n+            \".\".to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n }"}, {"sha": "13b001af7ea0e3c7de92b9c42bff871f926aba02", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "patch": "@@ -16,7 +16,7 @@ use rustc_ast::ptr::P;\n use rustc_ast::visit::{self, AssocCtxt, BoundKind, FnCtxt, FnKind, Visitor};\n use rustc_ast::*;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap};\n-use rustc_errors::{DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n+use rustc_errors::{Applicability, DiagnosticArgValue, DiagnosticId, IntoDiagnosticArg};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, DefKind, LifetimeRes, PartialRes, PerNS};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n@@ -536,6 +536,9 @@ struct DiagnosticMetadata<'ast> {\n     in_assignment: Option<&'ast Expr>,\n     is_assign_rhs: bool,\n \n+    /// Used to detect possible `.` -> `..` typo when calling methods.\n+    in_range: Option<(&'ast Expr, &'ast Expr)>,\n+\n     /// If we are currently in a trait object definition. Used to point at the bounds when\n     /// encountering a struct or enum.\n     current_trait_object: Option<&'ast [ast::GenericBound]>,\n@@ -3320,17 +3323,14 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         );\n     }\n \n+    #[instrument(level = \"debug\", skip(self))]\n     fn smart_resolve_path_fragment(\n         &mut self,\n         qself: &Option<P<QSelf>>,\n         path: &[Segment],\n         source: PathSource<'ast>,\n         finalize: Finalize,\n     ) -> PartialRes {\n-        debug!(\n-            \"smart_resolve_path_fragment(qself={:?}, path={:?}, finalize={:?})\",\n-            qself, path, finalize,\n-        );\n         let ns = source.namespace();\n \n         let Finalize { node_id, path_span, .. } = finalize;\n@@ -3341,8 +3341,20 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n                 let def_id = this.parent_scope.module.nearest_parent_mod();\n                 let instead = res.is_some();\n-                let suggestion =\n-                    if res.is_none() { this.report_missing_type_error(path) } else { None };\n+                let suggestion = if let Some((start, end)) = this.diagnostic_metadata.in_range\n+                    && path[0].ident.span.lo() == end.span.lo()\n+                {\n+                    Some((\n+                        start.span.between(end.span),\n+                        \"you might have meant to write a method call instead of a range\",\n+                        \".\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    ))\n+                } else if res.is_none() {\n+                    this.report_missing_type_error(path)\n+                } else {\n+                    None\n+                };\n \n                 this.r.use_injections.push(UseError {\n                     err,\n@@ -4005,6 +4017,12 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 self.visit_expr(rhs);\n                 self.diagnostic_metadata.is_assign_rhs = false;\n             }\n+            ExprKind::Range(Some(ref start), Some(ref end), RangeLimits::HalfOpen) => {\n+                self.diagnostic_metadata.in_range = Some((start, end));\n+                self.resolve_expr(start, Some(expr));\n+                self.resolve_expr(end, Some(expr));\n+                self.diagnostic_metadata.in_range = None;\n+            }\n             _ => {\n                 visit::walk_expr(self, expr);\n             }"}, {"sha": "545f9c597fda54b3e313ae460d0a674c6d7f095d", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.rs?ref=c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "patch": "@@ -0,0 +1,22 @@\n+fn as_ref() -> Option<Vec<u8>> {\n+    None\n+}\n+struct Type {\n+    option: Option<Vec<u8>>\n+}\n+\n+impl Type {\n+    fn method(&self) -> Option<Vec<u8>> {\n+        self.option..as_ref().map(|x| x)\n+        //~^ ERROR E0308\n+    }\n+    fn method2(&self) -> Option<Vec<u8>> {\n+        self.option..foo().map(|x| x)\n+        //~^ ERROR E0425\n+        //~| ERROR E0308\n+    }\n+}\n+\n+fn main() {\n+    let _ = Type { option: None }.method();\n+}"}, {"sha": "becc825b6cf221962091b7bdbba8e8317751bb56", "filename": "src/test/ui/suggestions/method-access-to-range-literal-typo.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9381fc334cb8db62fdb5a8f75807ebdff3d6e15/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmethod-access-to-range-literal-typo.stderr?ref=c9381fc334cb8db62fdb5a8f75807ebdff3d6e15", "patch": "@@ -0,0 +1,45 @@\n+error[E0425]: cannot find function `foo` in this scope\n+  --> $DIR/method-access-to-range-literal-typo.rs:14:22\n+   |\n+LL |         self.option..foo().map(|x| x)\n+   |                      ^^^ not found in this scope\n+   |\n+help: you might have meant to write a method call instead of a range\n+   |\n+LL |         self.option.foo().map(|x| x)\n+   |                    ~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/method-access-to-range-literal-typo.rs:10:9\n+   |\n+LL |     fn method(&self) -> Option<Vec<u8>> {\n+   |                         --------------- expected `Option<Vec<u8>>` because of return type\n+LL |         self.option..as_ref().map(|x| x)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `Range`\n+   |\n+   = note: expected enum `Option<_>`\n+            found struct `std::ops::Range<Option<_>>`\n+help: you might have meant to write a method call instead of a range\n+   |\n+LL |         self.option.as_ref().map(|x| x)\n+   |                    ~\n+\n+error[E0308]: mismatched types\n+  --> $DIR/method-access-to-range-literal-typo.rs:14:9\n+   |\n+LL |     fn method2(&self) -> Option<Vec<u8>> {\n+   |                          --------------- expected `Option<Vec<u8>>` because of return type\n+LL |         self.option..foo().map(|x| x)\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found struct `Range`\n+   |\n+   = note: expected enum `Option<_>`\n+            found struct `std::ops::Range<Option<_>>`\n+help: you might have meant to write a method call instead of a range\n+   |\n+LL |         self.option.foo().map(|x| x)\n+   |                    ~\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}]}