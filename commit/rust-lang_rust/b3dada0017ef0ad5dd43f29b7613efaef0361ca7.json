{"sha": "b3dada0017ef0ad5dd43f29b7613efaef0361ca7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZGFkYTAwMTdlZjBhZDVkZDQzZjI5Yjc2MTNlZmFlZjAzNjFjYTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-15T21:03:30Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-03-16T00:50:21Z"}, "message": "cargo FIXMEs", "tree": {"sha": "6a0def1e7093e604b2ccaf546c527f25d80d34aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0def1e7093e604b2ccaf546c527f25d80d34aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3dada0017ef0ad5dd43f29b7613efaef0361ca7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3dada0017ef0ad5dd43f29b7613efaef0361ca7", "html_url": "https://github.com/rust-lang/rust/commit/b3dada0017ef0ad5dd43f29b7613efaef0361ca7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3dada0017ef0ad5dd43f29b7613efaef0361ca7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95ce42b34608518c250ed84a7b058f4a59c4a54b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95ce42b34608518c250ed84a7b058f4a59c4a54b", "html_url": "https://github.com/rust-lang/rust/commit/95ce42b34608518c250ed84a7b058f4a59c4a54b"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "9062e88c67b689ad6f143a978d7aa457dbf9a310", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 32, "deletions": 20, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b3dada0017ef0ad5dd43f29b7613efaef0361ca7/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3dada0017ef0ad5dd43f29b7613efaef0361ca7/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=b3dada0017ef0ad5dd43f29b7613efaef0361ca7", "patch": "@@ -432,41 +432,53 @@ fn for_each_package(c: cargo, b: fn(source, package)) {\n     })\n }\n \n-// FIXME: deduplicate code with install_one_crate\n-fn test_one_crate(_c: cargo, _path: str, cf: str, _p: pkg) {\n-    let buildpath = path::connect(_path, \"/test\");\n-    need_dir(buildpath);\n-    #debug(\"Testing: %s -> %s\", cf, buildpath);\n-    let p = run::program_output(rustc_sysroot(),\n-                                [\"--out-dir\", buildpath, \"--test\", cf]);\n-    if p.status != 0 {\n-        error(#fmt[\"rustc failed: %d\\n%s\\n%s\", p.status, p.err, p.out]);\n-        ret;\n-    }\n+// Runs all programs in directory <buildpath>\n+fn run_programs(buildpath: str) {\n     let new = os::list_dir(buildpath);\n     for ct: str in new {\n         run::run_program(ct, []);\n     }\n }\n \n-fn install_one_crate(c: cargo, _path: str, cf: str, _p: pkg) {\n-    let buildpath = path::connect(_path, \"/build\");\n+// Runs rustc in <path + subdir> with the given flags\n+// and returns <path + subdir>\n+fn run_in_buildpath(what: str, path: str, subdir: str, cf: str,\n+                    extra_flags: [str]) -> option<str> {\n+    let buildpath = path::connect(path, subdir);\n     need_dir(buildpath);\n-    #debug(\"Installing: %s -> %s\", cf, buildpath);\n+    #debug(\"%s: %s -> %s\", what, cf, buildpath);\n     let p = run::program_output(rustc_sysroot(),\n-                                [\"--out-dir\", buildpath, cf]);\n+                                [\"--out-dir\", buildpath, cf] + extra_flags);\n     if p.status != 0 {\n         error(#fmt[\"rustc failed: %d\\n%s\\n%s\", p.status, p.err, p.out]);\n-        ret;\n+        ret none;\n     }\n+    some(buildpath)\n+}\n+\n+fn test_one_crate(_c: cargo, path: str, cf: str) {\n+  let buildpath = alt run_in_buildpath(\"Testing\", path, \"/test\", cf,\n+                                       [ \"--test\"]) {\n+      none { ret; }\n+      some(bp) { bp }\n+  };\n+  run_programs(buildpath);\n+}\n+\n+fn install_one_crate(c: cargo, path: str, cf: str) {\n+    let buildpath = alt run_in_buildpath(\"Installing\", path,\n+                                         \"/build\", cf, []) {\n+      none { ret; }\n+      some(bp) { bp }\n+    };\n     let new = os::list_dir(buildpath);\n     let exec_suffix = os::exe_suffix();\n     for ct: str in new {\n         if (exec_suffix != \"\" && str::ends_with(ct, exec_suffix)) ||\n             (exec_suffix == \"\" && !str::starts_with(path::basename(ct),\n                                                     \"lib\")) {\n             #debug(\"  bin: %s\", ct);\n-            // FIXME: need libstd os::copy or something\n+            // FIXME: need libstd os::copy or something (Issue #1983)\n             run::run_program(\"cp\", [ct, c.bindir]);\n             if c.opts.mode == system_mode {\n                 install_one_crate_to_sysroot(ct, \"bin\");\n@@ -527,11 +539,11 @@ fn install_source(c: cargo, path: str) {\n         let p = load_pkg(cf);\n         alt p {\n             none { cont; }\n-            some(_p) {\n+            some(_) {\n                 if c.opts.test {\n-                    test_one_crate(c, path, cf, _p);\n+                    test_one_crate(c, path, cf);\n                 }\n-                install_one_crate(c, path, cf, _p);\n+                install_one_crate(c, path, cf);\n             }\n         }\n     }"}]}