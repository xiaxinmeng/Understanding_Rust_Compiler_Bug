{"sha": "16654ce1549b51a17e64d4b4b4eadecd034eb683", "node_id": "C_kwDOAAsO6NoAKDE2NjU0Y2UxNTQ5YjUxYTE3ZTY0ZDRiNGI0ZWFkZWNkMDM0ZWI2ODM", "commit": {"author": {"name": "Tom Kunc", "email": "tomkunc0@gmail.com", "date": "2022-12-23T12:22:46Z"}, "committer": {"name": "Tom Kunc", "email": "tomkunc0@gmail.com", "date": "2022-12-23T12:22:46Z"}, "message": "Create new inline_macro assist.", "tree": {"sha": "8a3bd4e8644a29bfdd741164d749374b0472d674", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3bd4e8644a29bfdd741164d749374b0472d674"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16654ce1549b51a17e64d4b4b4eadecd034eb683", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16654ce1549b51a17e64d4b4b4eadecd034eb683", "html_url": "https://github.com/rust-lang/rust/commit/16654ce1549b51a17e64d4b4b4eadecd034eb683", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16654ce1549b51a17e64d4b4b4eadecd034eb683/comments", "author": {"login": "tfpk", "id": 10906982, "node_id": "MDQ6VXNlcjEwOTA2OTgy", "avatar_url": "https://avatars.githubusercontent.com/u/10906982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tfpk", "html_url": "https://github.com/tfpk", "followers_url": "https://api.github.com/users/tfpk/followers", "following_url": "https://api.github.com/users/tfpk/following{/other_user}", "gists_url": "https://api.github.com/users/tfpk/gists{/gist_id}", "starred_url": "https://api.github.com/users/tfpk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tfpk/subscriptions", "organizations_url": "https://api.github.com/users/tfpk/orgs", "repos_url": "https://api.github.com/users/tfpk/repos", "events_url": "https://api.github.com/users/tfpk/events{/privacy}", "received_events_url": "https://api.github.com/users/tfpk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tfpk", "id": 10906982, "node_id": "MDQ6VXNlcjEwOTA2OTgy", "avatar_url": "https://avatars.githubusercontent.com/u/10906982?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tfpk", "html_url": "https://github.com/tfpk", "followers_url": "https://api.github.com/users/tfpk/followers", "following_url": "https://api.github.com/users/tfpk/following{/other_user}", "gists_url": "https://api.github.com/users/tfpk/gists{/gist_id}", "starred_url": "https://api.github.com/users/tfpk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tfpk/subscriptions", "organizations_url": "https://api.github.com/users/tfpk/orgs", "repos_url": "https://api.github.com/users/tfpk/repos", "events_url": "https://api.github.com/users/tfpk/events{/privacy}", "received_events_url": "https://api.github.com/users/tfpk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bf2a25dfe8337fe46a2698756cdfab46556ef88", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bf2a25dfe8337fe46a2698756cdfab46556ef88", "html_url": "https://github.com/rust-lang/rust/commit/7bf2a25dfe8337fe46a2698756cdfab46556ef88"}], "stats": {"total": 277, "additions": 277, "deletions": 0}, "files": [{"sha": "d669826aa7aa025dda1d305a0d22130a48477e5c", "filename": "crates/ide-assists/src/handlers/inline_macro.rs", "status": "added", "additions": 242, "deletions": 0, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Finline_macro.rs?ref=16654ce1549b51a17e64d4b4b4eadecd034eb683", "patch": "@@ -0,0 +1,242 @@\n+use syntax::ast::{self, AstNode};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: inline_macro\n+//\n+// Takes a macro and inlines it one step.\n+//\n+// ```\n+// macro_rules! num {\n+//     (+$($t:tt)+) => (1 + num!($($t )+));\n+//     (-$($t:tt)+) => (-1 + num!($($t )+));\n+//     (+) => (1);\n+//     (-) => (-1);\n+// }\n+//\n+// fn main() {\n+//     let number = num$0!(+ + + - + +);\n+//     println!(\"{number}\");\n+// }\n+// ```\n+// ->\n+// ```\n+// macro_rules! num {\n+//     (+$($t:tt)+) => (1 + num!($($t )+));\n+//     (-$($t:tt)+) => (-1 + num!($($t )+));\n+//     (+) => (1);\n+//     (-) => (-1);\n+// }\n+//\n+// fn main() {\n+//     let number = 1+num!(+ + - + +);\n+//     println!(\"{number}\");\n+// }\n+// ```\n+pub(crate) fn inline_macro(acc: &mut Assists, ctx: &AssistContext<'_>) -> Option<()> {\n+    let tok = ctx.token_at_offset().right_biased()?;\n+\n+    let mut anc = tok.parent_ancestors();\n+    let (_name, expanded, unexpanded) = loop {\n+        let node = anc.next()?;\n+        if let Some(mac) = ast::MacroCall::cast(node.clone()) {\n+            break (\n+                mac.path()?.segment()?.name_ref()?.to_string(),\n+                ctx.sema.expand(&mac)?.clone_for_update(),\n+                node,\n+            );\n+        }\n+    };\n+\n+    acc.add(\n+        AssistId(\"inline_macro\", AssistKind::RefactorRewrite),\n+        format!(\"Inline macro\"),\n+        unexpanded.text_range(),\n+        |builder| builder.replace(unexpanded.text_range(), expanded.to_string()),\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::{check_assist, check_assist_not_applicable, check_assist_target};\n+\n+    macro_rules! simple_macro {\n+        () => {\n+            r#\"\n+macro_rules! foo {\n+    (foo) => (true);\n+    () => (false);\n+}\n+\"#\n+        };\n+    }\n+    macro_rules! double_macro {\n+        () => {\n+            r#\"\n+macro_rules! bar {\n+    (bar) => (true);\n+    ($($tt:tt)?) => (false);\n+}\n+macro_rules! foo {\n+    (foo) => (true);\n+    (bar) => (bar!(bar));\n+    ($($tt:tt)?) => (bar!($($tt)?));\n+}\n+\"#\n+        };\n+    }\n+\n+    macro_rules! complex_macro {\n+        () => {\n+            r#\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\"#\n+        };\n+    }\n+    #[test]\n+    fn inline_macro_target() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = foo$0!(foo); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_target_start() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = $0foo!(foo); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_target_end() {\n+        check_assist_target(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let a = foo!(foo$0); }\"#),\n+            \"foo!(foo)\",\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(foo); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = true; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = false; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_not_applicable() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result$0 = foo!(foo); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_simple_not_applicable_broken_macro() {\n+        // FIXME: This is a bug. The macro should not expand, but it's\n+        // the same behaviour as the \"Expand Macro Recursively\" commmand\n+        // so it's presumably OK for the time being.\n+        check_assist(\n+            inline_macro,\n+            concat!(simple_macro!(), r#\"fn f() { let result = foo$0!(asdfasdf); }\"#),\n+            concat!(simple_macro!(), r#\"fn f() { let result = true; }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_double_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(double_macro!(), r#\"fn f() { let result = foo$0!(bar); }\"#),\n+            concat!(double_macro!(), r#\"fn f() { let result = bar!(bar); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_double_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(double_macro!(), r#\"fn f() { let result = foo$0!(asdf); }\"#),\n+            concat!(double_macro!(), r#\"fn f() { let result = bar!(asdf); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_complex_case1() {\n+        check_assist(\n+            inline_macro,\n+            concat!(complex_macro!(), r#\"fn f() { let result = num!(+ +$0 + - +); }\"#),\n+            concat!(complex_macro!(), r#\"fn f() { let result = 1+num!(+ + - +); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_complex_case2() {\n+        check_assist(\n+            inline_macro,\n+            concat!(complex_macro!(), r#\"fn f() { let result = n$0um!(- + + - +); }\"#),\n+            concat!(complex_macro!(), r#\"fn f() { let result = -1+num!(+ + - +); }\"#),\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_recursive_macro() {\n+        check_assist(\n+            inline_macro,\n+            r#\"\n+macro_rules! foo {\n+  () => {foo!()}\n+}\n+fn f() { let result = foo$0!(); }\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+  () => {foo!()}\n+}\n+fn f() { let result = foo!(); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_unknown_macro() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            r#\"\n+fn f() { let result = foo$0!(); }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn inline_macro_function_call_not_applicable() {\n+        check_assist_not_applicable(\n+            inline_macro,\n+            r#\"\n+fn f() { let result = foo$0(); }\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "1e6d755faed5a292737529045be29dae6c8445e4", "filename": "crates/ide-assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Flib.rs?ref=16654ce1549b51a17e64d4b4b4eadecd034eb683", "patch": "@@ -159,6 +159,7 @@ mod handlers {\n     mod add_return_type;\n     mod inline_call;\n     mod inline_local_variable;\n+    mod inline_macro;\n     mod inline_type_alias;\n     mod introduce_named_lifetime;\n     mod invert_if;\n@@ -255,6 +256,7 @@ mod handlers {\n             inline_local_variable::inline_local_variable,\n             inline_type_alias::inline_type_alias,\n             inline_type_alias::inline_type_alias_uses,\n+            inline_macro::inline_macro,\n             introduce_named_generic::introduce_named_generic,\n             introduce_named_lifetime::introduce_named_lifetime,\n             invert_if::invert_if,"}, {"sha": "666b794c01a735011f93d71d1501a05fb1ce3fe9", "filename": "crates/ide-assists/src/tests/generated.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16654ce1549b51a17e64d4b4b4eadecd034eb683/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=16654ce1549b51a17e64d4b4b4eadecd034eb683", "patch": "@@ -1438,6 +1438,39 @@ fn main() {\n     )\n }\n \n+#[test]\n+fn doctest_inline_macro() {\n+    check_doc_test(\n+        \"inline_macro\",\n+        r#####\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\n+fn main() {\n+    let number = num$0!(+ + + - + +);\n+    println!(\"{number}\");\n+}\n+\"#####,\n+        r#####\"\n+macro_rules! num {\n+    (+$($t:tt)+) => (1 + num!($($t )+));\n+    (-$($t:tt)+) => (-1 + num!($($t )+));\n+    (+) => (1);\n+    (-) => (-1);\n+}\n+\n+fn main() {\n+    let number = 1+num!(+ + - + +);\n+    println!(\"{number}\");\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_inline_type_alias() {\n     check_doc_test("}]}