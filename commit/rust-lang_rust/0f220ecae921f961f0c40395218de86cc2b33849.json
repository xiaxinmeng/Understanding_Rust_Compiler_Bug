{"sha": "0f220ecae921f961f0c40395218de86cc2b33849", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMjIwZWNhZTkyMWY5NjFmMGM0MDM5NTIxOGRlODZjYzJiMzM4NDk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-22T22:05:35Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-22T22:05:35Z"}, "message": "Beat up on the preempt test a bit more, as it keeps hanging under valgrind.", "tree": {"sha": "e575036b7ab1d6b0031268aa854f52f55261d7c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e575036b7ab1d6b0031268aa854f52f55261d7c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f220ecae921f961f0c40395218de86cc2b33849", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f220ecae921f961f0c40395218de86cc2b33849", "html_url": "https://github.com/rust-lang/rust/commit/0f220ecae921f961f0c40395218de86cc2b33849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f220ecae921f961f0c40395218de86cc2b33849/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37088659061fad1f53513ec7088802ef6dd7af57", "url": "https://api.github.com/repos/rust-lang/rust/commits/37088659061fad1f53513ec7088802ef6dd7af57", "html_url": "https://github.com/rust-lang/rust/commit/37088659061fad1f53513ec7088802ef6dd7af57"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "99f521656e88659c0f5fd1b6e22675567babdd00", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=0f220ecae921f961f0c40395218de86cc2b33849", "patch": "@@ -67,6 +67,17 @@ struct frame_glue_fns;\n \n static size_t const TIME_SLICE_IN_MS = 10;\n \n+// This helps our preemption scheme handle \"running on valgrind\".\n+\n+#if defined(__WIN32__)\n+#define YIELD_C_THREAD_IF_ON_VALGRIND (void);\n+#else\n+#define YIELD_C_THREAD_IF_ON_VALGRIND  \\\n+    if (RUNNING_ON_VALGRIND) {         \\\n+        pthread_yield();               \\\n+    }\n+#endif\n+\n // Every reference counted object should derive from this base class.\n \n template <typename T>"}, {"sha": "9427ec673ff7a7a0d9ec2e8eeb37985d3f4eee7a", "filename": "src/rt/rust_timer.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_timer.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_timer.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_timer.cpp?ref=0f220ecae921f961f0c40395218de86cc2b33849", "patch": "@@ -32,10 +32,9 @@ timer_loop(void *ptr) {\n     rust_dom *dom = timer->dom;\n     dom->log(rust_log::TIMER, \"in timer 0x%\" PRIxPTR, (uintptr_t)timer);\n     size_t ms = TIME_SLICE_IN_MS;\n-    if (!RUNNING_ON_VALGRIND)\n-        ms = 1;\n \n     while (!timer->exit_flag) {\n+        YIELD_C_THREAD_IF_ON_VALGRIND;\n #if defined(__WIN32__)\n         Sleep(ms);\n #else\n@@ -66,8 +65,6 @@ rust_timer::rust_timer(rust_dom *dom) :\n     pthread_attr_init(&attr);\n     pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n     pthread_create(&thread, &attr, timer_loop, (void *)this);\n-    if (RUNNING_ON_VALGRIND)\n-        usleep(10000);\n #endif\n }\n "}, {"sha": "e931fc9b7f6e0b4965b0348b1b687d56cbe56c39", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0f220ecae921f961f0c40395218de86cc2b33849/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=0f220ecae921f961f0c40395218de86cc2b33849", "patch": "@@ -1,21 +1,24 @@\n #include \"rust_internal.h\"\n+#include \"valgrind.h\"\n \n // Upcalls.\n \n #ifdef __GNUC__\n #define LOG_UPCALL_ENTRY(task)                              \\\n+    YIELD_C_THREAD_IF_ON_VALGRIND;                          \\\n     (task)->dom->get_log().reset_indent(0);                 \\\n     (task)->log(rust_log::UPCALL,                           \\\n                 \"> UPCALL %s - task: 0x%\" PRIxPTR           \\\n-                \" retpc: x%\" PRIxPTR,                      \\\n+                \" retpc: x%\" PRIxPTR,                       \\\n                 __FUNCTION__,                               \\\n                 (task), __builtin_return_address(0));       \\\n     (task)->dom->get_log().indent();\n #else\n #define LOG_UPCALL_ENTRY(task)                              \\\n+    YIELD_C_THREAD_IF_ON_VALGRIND;                          \\\n     (task)->dom->get_log().reset_indent(0);                 \\\n     (task)->log(rust_log::UPCALL,                           \\\n-                \"> UPCALL task: x%\" PRIxPTR (task));       \\\n+                \"> UPCALL task: x%\" PRIxPTR (task));        \\\n     (task)->dom->get_log().indent();\n #endif\n "}, {"sha": "ee37bcf44bfb06ca4c7aa407bf57ab7a42533d59", "filename": "src/test/run-pass/preempt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f220ecae921f961f0c40395218de86cc2b33849/src%2Ftest%2Frun-pass%2Fpreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f220ecae921f961f0c40395218de86cc2b33849/src%2Ftest%2Frun-pass%2Fpreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpreempt.rs?ref=0f220ecae921f961f0c40395218de86cc2b33849", "patch": "@@ -18,7 +18,7 @@ io fn main() {\n   log \"main waiting for alive signal\";\n   i <- alive;\n   log \"main got alive signal\";\n-  while (i < 1000) {\n+  while (i < 50) {\n     log \"main iterated\";\n     i += 1;\n   }"}]}