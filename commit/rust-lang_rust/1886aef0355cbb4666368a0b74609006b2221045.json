{"sha": "1886aef0355cbb4666368a0b74609006b2221045", "node_id": "C_kwDOAAsO6NoAKDE4ODZhZWYwMzU1Y2JiNDY2NjM2OGEwYjc0NjA5MDA2YjIyMjEwNDU", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-16T19:53:06Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-08-16T19:53:06Z"}, "message": "point at a type parameter shadowing another type", "tree": {"sha": "52438fc5586c0fb240aeb25020142903bc3bfe06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52438fc5586c0fb240aeb25020142903bc3bfe06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1886aef0355cbb4666368a0b74609006b2221045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1886aef0355cbb4666368a0b74609006b2221045", "html_url": "https://github.com/rust-lang/rust/commit/1886aef0355cbb4666368a0b74609006b2221045", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1886aef0355cbb4666368a0b74609006b2221045/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0068b8bf4b150b506ef0871be4e8652fd4308f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/0068b8bf4b150b506ef0871be4e8652fd4308f84", "html_url": "https://github.com/rust-lang/rust/commit/0068b8bf4b150b506ef0871be4e8652fd4308f84"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "e1f2f8ae097978fbfc7af60bf3d84a60ac4db260", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -161,6 +161,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             msg: String,\n             fallback_label: String,\n             span: Span,\n+            span_label: Option<(Span, &'a str)>,\n             could_be_expr: bool,\n             suggestion: Option<(Span, &'a str, String)>,\n         }\n@@ -172,6 +173,12 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 msg: format!(\"expected {}, found {} `{}`\", expected, res.descr(), path_str),\n                 fallback_label: format!(\"not a {expected}\"),\n                 span,\n+                span_label: match res {\n+                    Res::Def(kind, def_id) if kind == DefKind::TyParam => {\n+                        self.def_span(def_id).map(|span| (span, \"found this type pararmeter\"))\n+                    }\n+                    _ => None,\n+                },\n                 could_be_expr: match res {\n                     Res::Def(DefKind::Fn, _) => {\n                         // Verify whether this is a fn call or an Fn used as a type.\n@@ -251,6 +258,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                     format!(\"not found in {mod_str}\")\n                 },\n                 span: item_span,\n+                span_label: None,\n                 could_be_expr: false,\n                 suggestion,\n             }\n@@ -262,6 +270,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n         self.suggest_swapping_misplaced_self_ty_and_trait(&mut err, source, res, base_error.span);\n \n+        if let Some((span, label)) = base_error.span_label {\n+            err.span_label(span, label);\n+        }\n+\n         if let Some(sugg) = base_error.suggestion {\n             err.span_suggestion_verbose(sugg.0, sugg.1, sugg.2, Applicability::MaybeIncorrect);\n         }"}, {"sha": "5ad457d547a69bdd3c3427bda54bcaa7091bd182", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-69654.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-69654.stderr?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -2,7 +2,9 @@ error[E0423]: expected value, found type parameter `T`\n   --> $DIR/issue-69654.rs:5:25\n    |\n LL | impl<T> Bar<T> for [u8; T] {}\n-   |                         ^ not a value\n+   |      -                  ^ not a value\n+   |      |\n+   |      found this type pararmeter\n \n error[E0599]: the function or associated item `foo` exists for struct `Foo<_>`, but its trait bounds were not satisfied\n   --> $DIR/issue-69654.rs:17:10"}, {"sha": "ad11f72a31d37735c9131e087a3b424353e46b63", "filename": "src/test/ui/lexical-scopes.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Flexical-scopes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Flexical-scopes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flexical-scopes.stderr?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -1,6 +1,8 @@\n error[E0574]: expected struct, variant or union type, found type parameter `T`\n   --> $DIR/lexical-scopes.rs:3:13\n    |\n+LL | fn f<T>() {\n+   |      - found this type pararmeter\n LL |     let t = T { i: 0 };\n    |             ^ not a struct, variant or union type\n "}, {"sha": "bd496875e80b948711613fd4661f344028e45700", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.rs?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -0,0 +1,21 @@\n+trait Foo<T> {\n+    fn foo(&self, name: T) -> usize;\n+}\n+\n+struct Bar {\n+    baz: Baz,\n+}\n+\n+struct Baz {\n+    num: usize,\n+}\n+\n+impl<Baz> Foo<Baz> for Bar {\n+    fn foo(&self, _name: Baz) -> usize {\n+        match self.baz {\n+            Baz { num } => num, //~ ERROR expected struct, variant or union type, found type parameter `Baz`\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d9c404e94acb4dfd2e6486c32460f1ca0f604560", "filename": "src/test/ui/resolve/point-at-type-parameter-shadowing-another-type.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fpoint-at-type-parameter-shadowing-another-type.stderr?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -0,0 +1,12 @@\n+error[E0574]: expected struct, variant or union type, found type parameter `Baz`\n+  --> $DIR/point-at-type-parameter-shadowing-another-type.rs:16:13\n+   |\n+LL | impl<Baz> Foo<Baz> for Bar {\n+   |      --- found this type pararmeter\n+...\n+LL |             Baz { num } => num,\n+   |             ^^^ not a struct, variant or union type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0574`."}, {"sha": "ea9c4c82c361068f0b91a7c6900cf1434e2f4ef5", "filename": "src/test/ui/span/issue-35987.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1886aef0355cbb4666368a0b74609006b2221045/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-35987.stderr?ref=1886aef0355cbb4666368a0b74609006b2221045", "patch": "@@ -2,7 +2,9 @@ error[E0404]: expected trait, found type parameter `Add`\n   --> $DIR/issue-35987.rs:5:21\n    |\n LL | impl<T: Clone, Add> Add for Foo<T> {\n-   |                     ^^^ not a trait\n+   |                ---  ^^^ not a trait\n+   |                |\n+   |                found this type pararmeter\n    |\n help: consider importing this trait instead\n    |"}]}