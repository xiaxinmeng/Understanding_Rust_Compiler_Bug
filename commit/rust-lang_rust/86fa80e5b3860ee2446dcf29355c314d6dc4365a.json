{"sha": "86fa80e5b3860ee2446dcf29355c314d6dc4365a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmE4MGU1YjM4NjBlZTI0NDZkY2YyOTM1NWMzMTRkNmRjNDM2NWE=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-05T21:36:51Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-05-06T16:09:28Z"}, "message": "Allow fixture strings with unindented first line\n\nThis allows fixtures like\n        \"//- /lib.rs\n         ...\n         //- /foo.rs\n         ...\n\"", "tree": {"sha": "b1557808cf66502297e7d40408d9498e15e91c1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1557808cf66502297e7d40408d9498e15e91c1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86fa80e5b3860ee2446dcf29355c314d6dc4365a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86fa80e5b3860ee2446dcf29355c314d6dc4365a", "html_url": "https://github.com/rust-lang/rust/commit/86fa80e5b3860ee2446dcf29355c314d6dc4365a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86fa80e5b3860ee2446dcf29355c314d6dc4365a/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a5d14453e464edeb8613df2fdca742bfe2a72f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5d14453e464edeb8613df2fdca742bfe2a72f5", "html_url": "https://github.com/rust-lang/rust/commit/8a5d14453e464edeb8613df2fdca742bfe2a72f5"}], "stats": {"total": 104, "additions": 95, "deletions": 9}, "files": [{"sha": "b13e13af2aab4803ddf153f3fa7279a3a02536ae", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 95, "deletions": 9, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/86fa80e5b3860ee2446dcf29355c314d6dc4365a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fa80e5b3860ee2446dcf29355c314d6dc4365a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=86fa80e5b3860ee2446dcf29355c314d6dc4365a", "patch": "@@ -155,7 +155,7 @@ pub fn add_cursor(text: &str, offset: TextSize) -> String {\n     res\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Eq, PartialEq)]\n pub struct FixtureEntry {\n     pub meta: String,\n     pub text: String,\n@@ -170,19 +170,26 @@ pub struct FixtureEntry {\n ///  // - other meta\n ///  ```\n pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n-    let margin = fixture\n-        .lines()\n-        .filter(|it| it.trim_start().starts_with(\"//-\"))\n-        .map(|it| it.len() - it.trim_start().len())\n-        .next()\n-        .expect(\"empty fixture\");\n+    let fixture = indent_first_line(fixture);\n+    let margin = fixture_margin(&fixture);\n \n     let mut lines = fixture\n         .split('\\n') // don't use `.lines` to not drop `\\r\\n`\n-        .filter_map(|line| {\n+        .enumerate()\n+        .filter_map(|(ix, line)| {\n             if line.len() >= margin {\n                 assert!(line[..margin].trim().is_empty());\n-                Some(&line[margin..])\n+                let line_content = &line[margin..];\n+                if !line_content.starts_with(\"//-\") {\n+                    assert!(\n+                        !line_content.contains(\"//-\"),\n+                        r#\"Metadata line {} has invalid indentation. All metadata lines need to have the same indentation.\n+The offending line: {:?}\"#,\n+                        ix,\n+                        line\n+                    );\n+                }\n+                Some(line_content)\n             } else {\n                 assert!(line.trim().is_empty());\n                 None\n@@ -202,6 +209,85 @@ pub fn parse_fixture(fixture: &str) -> Vec<FixtureEntry> {\n     res\n }\n \n+/// Adjusts the indentation of the first line to the minimum indentation of the rest of the lines.\n+/// This allows fixtures to start off in a different indentation, e.g. to align the first line with\n+/// the other lines visually:\n+/// ```\n+/// let fixture = \"//- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \";\n+/// assert_eq!(fixture_margin(fixture),\n+/// \"               //- /lib.rs\n+///                mod foo;\n+///                //- /foo.rs\n+///                fn bar() {}\n+/// \")\n+/// ```\n+fn indent_first_line(fixture: &str) -> String {\n+    if fixture.is_empty() {\n+        return String::new();\n+    }\n+    let mut lines = fixture.lines();\n+    let first_line = lines.next().unwrap();\n+    if first_line.contains(\"//-\") {\n+        let rest = lines.collect::<Vec<_>>().join(\"\\n\");\n+        let fixed_margin = fixture_margin(&rest);\n+        let fixed_indent = fixed_margin - indent_len(first_line);\n+        format!(\"\\n{}{}\\n{}\", \" \".repeat(fixed_indent), first_line, rest)\n+    } else {\n+        fixture.to_owned()\n+    }\n+}\n+\n+fn fixture_margin(fixture: &str) -> usize {\n+    fixture\n+        .lines()\n+        .filter(|it| it.trim_start().starts_with(\"//-\"))\n+        .map(indent_len)\n+        .next()\n+        .expect(\"empty fixture\")\n+}\n+\n+fn indent_len(s: &str) -> usize {\n+    s.len() - s.trim_start().len()\n+}\n+\n+#[test]\n+#[should_panic]\n+fn parse_fixture_checks_further_indented_metadata() {\n+    parse_fixture(\n+        r\"\n+        //- /lib.rs\n+          mod bar;\n+\n+          fn foo() {}\n+          //- /bar.rs\n+          pub fn baz() {}\n+          \",\n+    );\n+}\n+\n+#[test]\n+fn parse_fixture_can_handle_unindented_first_line() {\n+    let fixture = \"//- /lib.rs\n+                   mod foo;\n+                   //- /foo.rs\n+                   struct Bar;\n+\";\n+    assert_eq!(\n+        parse_fixture(fixture),\n+        parse_fixture(\n+            \"//- /lib.rs\n+mod foo;\n+//- /foo.rs\n+struct Bar;\n+\"\n+        )\n+    )\n+}\n+\n /// Same as `parse_fixture`, except it allow empty fixture\n pub fn parse_single_fixture(fixture: &str) -> Option<FixtureEntry> {\n     if !fixture.lines().any(|it| it.trim_start().starts_with(\"//-\")) {"}]}