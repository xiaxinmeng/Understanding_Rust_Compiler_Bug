{"sha": "019a41bdb09c612e42717df2ae2148a29361842f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxOWE0MWJkYjA5YzYxMmU0MjcxN2RmMmFlMjE0OGEyOTM2MTg0MmY=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-23T02:19:30Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-07-23T02:19:30Z"}, "message": "Further revisions suggested by nmatsakis (#2990).", "tree": {"sha": "c6ccc74328216323c92d2a14c278a63fb478903f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6ccc74328216323c92d2a14c278a63fb478903f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/019a41bdb09c612e42717df2ae2148a29361842f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/019a41bdb09c612e42717df2ae2148a29361842f", "html_url": "https://github.com/rust-lang/rust/commit/019a41bdb09c612e42717df2ae2148a29361842f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/019a41bdb09c612e42717df2ae2148a29361842f/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9cbdf78656def0290e53353539681db612ecf1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cbdf78656def0290e53353539681db612ecf1f", "html_url": "https://github.com/rust-lang/rust/commit/d9cbdf78656def0290e53353539681db612ecf1f"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "4f03ee3cc80ac8fc1dc910acfeaec9df3d8e915b", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/019a41bdb09c612e42717df2ae2148a29361842f/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/019a41bdb09c612e42717df2ae2148a29361842f/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=019a41bdb09c612e42717df2ae2148a29361842f", "patch": "@@ -1197,15 +1197,14 @@ Rust has three competing goals that inform its view of memory:\n \n ## How performance considerations influence the memory model\n \n-Many languages that offer the kinds of memory safety guarantees that\n-Rust does have a single allocation strategy: objects live on the heap,\n-live for as long as they are needed, and are periodically\n-garbage-collected. This approach is straightforward both in concept\n-and in implementation, but has significant costs. Languages that take\n-this approach tend to aggressively pursue ways to ameliorate\n-allocation costs (think the Java Virtual Machine). Rust supports this\n-strategy with _shared boxes_: memory allocated on the heap that may be\n-referred to (shared) by multiple variables.\n+Most languages that offer strong memory safety guarantees rely upon a\n+garbage-collected heap to manage all of the objects. This approach is\n+straightforward both in concept and in implementation, but has\n+significant costs. Languages that take this approach tend to\n+aggressively pursue ways to ameliorate allocation costs (think the\n+Java Virtual Machine). Rust supports this strategy with _shared\n+boxes_: memory allocated on the heap that may be referred to (shared)\n+by multiple variables.\n \n By comparison, languages like C++ offer very precise control over\n where objects are allocated. In particular, it is common to put them"}]}