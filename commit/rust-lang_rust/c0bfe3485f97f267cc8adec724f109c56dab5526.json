{"sha": "c0bfe3485f97f267cc8adec724f109c56dab5526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYmZlMzQ4NWY5N2YyNjdjYzhhZGVjNzI0ZjEwOWM1NmRhYjU1MjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T09:13:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-09T09:13:54Z"}, "message": "Auto merge of #78363 - RalfJung:promotion, r=oli-obk\n\nremove this weird special case from promotion\n\nPromotion has a special case to ignore interior mutability under some specific circumstances. The purpose of this PR is to figure out what changes if we remove that. Since `Cell::new` and friends only get promoted inside `const`/`static` initializers these days, it actually is not easy to exploit this case: you need something like\n```rust\nconst TEST_INTERIOR_MUT: () = {\n    // The \"0.\" case is already ruled out by not permitting any interior mutability in `const`.\n    let _val: &'static _ = &(Cell::new(1), 2).1;\n};\n```\n\nI assume something like `&Some(&(Cell::new(1), 2).1)` would hit the nested case inside `validate_rvalue`... though I am not sure why that would not just trigger nested promotion, first promoting the inner reference and then the outer one?\n\nFixes https://github.com/rust-lang/rust/issues/67534 (by simply rejecting that code^^)\n\nr? `@oli-obk` (but for now this is not meant to be merged!)\nCc `@rust-lang/wg-const-eval`", "tree": {"sha": "110ddab74de64d4acd4a0d416a6f4b0734a508ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/110ddab74de64d4acd4a0d416a6f4b0734a508ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0bfe3485f97f267cc8adec724f109c56dab5526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0bfe3485f97f267cc8adec724f109c56dab5526", "html_url": "https://github.com/rust-lang/rust/commit/c0bfe3485f97f267cc8adec724f109c56dab5526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0bfe3485f97f267cc8adec724f109c56dab5526/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db85512bd8d922e0785029eff41152b0f35690f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db85512bd8d922e0785029eff41152b0f35690f1", "html_url": "https://github.com/rust-lang/rust/commit/db85512bd8d922e0785029eff41152b0f35690f1"}, {"sha": "d057a93e6f43eb410b9c348a8fe590bdc4452ae6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d057a93e6f43eb410b9c348a8fe590bdc4452ae6", "html_url": "https://github.com/rust-lang/rust/commit/d057a93e6f43eb410b9c348a8fe590bdc4452ae6"}], "stats": {"total": 134, "additions": 56, "deletions": 78}, "files": [{"sha": "8d5ed747c3f8f25ed3f8611096ac72cbb43cdc7b", "filename": "compiler/rustc_mir/src/transform/promote_consts.rs", "status": "modified", "additions": 6, "deletions": 52, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c0bfe3485f97f267cc8adec724f109c56dab5526/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bfe3485f97f267cc8adec724f109c56dab5526/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=c0bfe3485f97f267cc8adec724f109c56dab5526", "patch": "@@ -22,7 +22,7 @@ use rustc_middle::ty::cast::CastTy;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, List, TyCtxt, TypeFoldable};\n use rustc_span::symbol::sym;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use rustc_index::vec::{Idx, IndexVec};\n use rustc_target::spec::abi::Abi;\n@@ -326,41 +326,16 @@ impl<'tcx> Validator<'_, 'tcx> {\n                         if place.projection.contains(&ProjectionElem::Deref) {\n                             return Err(Unpromotable);\n                         }\n-\n-                        let mut has_mut_interior =\n-                            self.qualif_local::<qualifs::HasMutInterior>(place.local);\n-                        // HACK(eddyb) this should compute the same thing as\n-                        // `<HasMutInterior as Qualif>::in_projection` from\n-                        // `check_consts::qualifs` but without recursion.\n-                        if has_mut_interior {\n-                            // This allows borrowing fields which don't have\n-                            // `HasMutInterior`, from a type that does, e.g.:\n-                            // `let _: &'static _ = &(Cell::new(1), 2).1;`\n-                            let mut place_projection = &place.projection[..];\n-                            // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                            while let &[ref proj_base @ .., elem] = place_projection {\n-                                // FIXME(eddyb) this is probably excessive, with\n-                                // the exception of `union` member accesses.\n-                                let ty =\n-                                    Place::ty_from(place.local, proj_base, self.body, self.tcx)\n-                                        .projection_ty(self.tcx, elem)\n-                                        .ty;\n-                                if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n-                                    has_mut_interior = false;\n-                                    break;\n-                                }\n-\n-                                place_projection = proj_base;\n-                            }\n+                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n+                            return Err(Unpromotable);\n                         }\n \n                         // FIXME(eddyb) this duplicates part of `validate_rvalue`.\n+                        let has_mut_interior =\n+                            self.qualif_local::<qualifs::HasMutInterior>(place.local);\n                         if has_mut_interior {\n                             return Err(Unpromotable);\n                         }\n-                        if self.qualif_local::<qualifs::NeedsDrop>(place.local) {\n-                            return Err(Unpromotable);\n-                        }\n \n                         if let BorrowKind::Mut { .. } = kind {\n                             let ty = place.ty(self.body, self.tcx).ty;\n@@ -692,28 +667,7 @@ impl<'tcx> Validator<'_, 'tcx> {\n \n                 self.validate_place(place)?;\n \n-                // HACK(eddyb) this should compute the same thing as\n-                // `<HasMutInterior as Qualif>::in_projection` from\n-                // `check_consts::qualifs` but without recursion.\n-                let mut has_mut_interior =\n-                    self.qualif_local::<qualifs::HasMutInterior>(place.local);\n-                if has_mut_interior {\n-                    let mut place_projection = place.projection;\n-                    // FIXME(eddyb) use a forward loop instead of a reverse one.\n-                    while let &[ref proj_base @ .., elem] = place_projection {\n-                        // FIXME(eddyb) this is probably excessive, with\n-                        // the exception of `union` member accesses.\n-                        let ty = Place::ty_from(place.local, proj_base, self.body, self.tcx)\n-                            .projection_ty(self.tcx, elem)\n-                            .ty;\n-                        if ty.is_freeze(self.tcx.at(DUMMY_SP), self.param_env) {\n-                            has_mut_interior = false;\n-                            break;\n-                        }\n-\n-                        place_projection = proj_base;\n-                    }\n-                }\n+                let has_mut_interior = self.qualif_local::<qualifs::HasMutInterior>(place.local);\n                 if has_mut_interior {\n                     return Err(Unpromotable);\n                 }"}, {"sha": "1e4d8586b872cfd03cb9c0bfca79cc25d834be9b", "filename": "src/test/ui/consts/promote-not.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0bfe3485f97f267cc8adec724f109c56dab5526/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0bfe3485f97f267cc8adec724f109c56dab5526/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.rs?ref=c0bfe3485f97f267cc8adec724f109c56dab5526", "patch": "@@ -3,6 +3,8 @@\n #![allow(unconditional_panic, const_err)]\n #![feature(const_fn, const_fn_union)]\n \n+use std::cell::Cell;\n+\n // We do not promote mutable references.\n static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]); //~ ERROR temporary value dropped while borrowed\n \n@@ -32,4 +34,14 @@ const TEST_UNION: () = {\n     let _x: &'static i32 = &unsafe { U { x: 0 }.x }; //~ ERROR temporary value dropped while borrowed\n };\n \n-fn main() {}\n+// In a `const`, we do not promote things with interior mutability. Not even if we \"project it away\".\n+const TEST_INTERIOR_MUT: () = {\n+    // The \"0.\" case is already ruled out by not permitting any interior mutability in `const`.\n+    let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n+};\n+\n+fn main() {\n+    // We must not promote things with interior mutability. Not even if we \"project it away\".\n+    let _val: &'static _ = &(Cell::new(1), 2).0; //~ ERROR temporary value dropped while borrowed\n+    let _val: &'static _ = &(Cell::new(1), 2).1; //~ ERROR temporary value dropped while borrowed\n+}"}, {"sha": "6e76d9ee6c16536df50cead172582aa8b95681b4", "filename": "src/test/ui/consts/promote-not.stderr", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c0bfe3485f97f267cc8adec724f109c56dab5526/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0bfe3485f97f267cc8adec724f109c56dab5526/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fpromote-not.stderr?ref=c0bfe3485f97f267cc8adec724f109c56dab5526", "patch": "@@ -1,5 +1,5 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:7:50\n+  --> $DIR/promote-not.rs:9:50\n    |\n LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n    |                                        ----------^^^^^^^^^-\n@@ -9,7 +9,7 @@ LL | static mut TEST1: Option<&mut [i32]> = Some(&mut [1, 2, 3]);\n    |                                        using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:10:18\n+  --> $DIR/promote-not.rs:12:18\n    |\n LL |     let x = &mut [1,2,3];\n    |                  ^^^^^^^ creates a temporary which is freed while still in use\n@@ -19,7 +19,7 @@ LL | };\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:19:32\n+  --> $DIR/promote-not.rs:21:32\n    |\n LL |         let _x: &'static () = &foo();\n    |                 -----------    ^^^^^ creates a temporary which is freed while still in use\n@@ -29,7 +29,7 @@ LL |     }\n    |     - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:27:29\n+  --> $DIR/promote-not.rs:29:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n    |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -39,7 +39,7 @@ LL | }\n    | - temporary value is freed at the end of this statement\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/promote-not.rs:32:29\n+  --> $DIR/promote-not.rs:34:29\n    |\n LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n    |             ------------    ^^^^^^^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n@@ -48,6 +48,37 @@ LL |     let _x: &'static i32 = &unsafe { U { x: 0 }.x };\n LL | };\n    | - temporary value is freed at the end of this statement\n \n-error: aborting due to 5 previous errors\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:40:29\n+   |\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL | };\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:45:29\n+   |\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).0;\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error[E0716]: temporary value dropped while borrowed\n+  --> $DIR/promote-not.rs:46:29\n+   |\n+LL |     let _val: &'static _ = &(Cell::new(1), 2).1;\n+   |               ----------    ^^^^^^^^^^^^^^^^^ creates a temporary which is freed while still in use\n+   |               |\n+   |               type annotation requires that borrow lasts for `'static`\n+LL | }\n+   | - temporary value is freed at the end of this statement\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "267ed746322ea42800585f68c9eaa0521479b5ba", "filename": "src/test/ui/issues/issue-49955-2.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Fissues%2Fissue-49955-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db85512bd8d922e0785029eff41152b0f35690f1/src%2Ftest%2Fui%2Fissues%2Fissue-49955-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49955-2.rs?ref=db85512bd8d922e0785029eff41152b0f35690f1", "patch": "@@ -1,19 +0,0 @@\n-// run-pass\n-// compile-flags: -Z borrowck=mir\n-\n-use std::cell::Cell;\n-\n-const FIVE: Cell<i32> = Cell::new(5);\n-\n-#[inline(never)]\n-fn tuple_field() -> &'static u32 {\n-    // This test is MIR-borrowck-only because the old borrowck\n-    // doesn't agree that borrows of \"frozen\" (i.e., without any\n-    // interior mutability) fields of non-frozen temporaries,\n-    // should be promoted, while MIR promotion does promote them.\n-    &(FIVE, 42).1\n-}\n-\n-fn main() {\n-    assert_eq!(tuple_field().to_string(), \"42\");\n-}"}]}