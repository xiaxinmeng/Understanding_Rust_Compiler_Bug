{"sha": "3feaecd757241b7b5efd742108abe351ff8d497d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmZWFlY2Q3NTcyNDFiN2I1ZWZkNzQyMTA4YWJlMzUxZmY4ZDQ5N2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-17T22:32:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-18T18:32:27Z"}, "message": "intrinsics: Move the call to upcall_fail out of rust_intrinsic_cast", "tree": {"sha": "33c2b15ddf5d4bf1ce236d808adf24697b9a75b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33c2b15ddf5d4bf1ce236d808adf24697b9a75b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3feaecd757241b7b5efd742108abe351ff8d497d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3feaecd757241b7b5efd742108abe351ff8d497d", "html_url": "https://github.com/rust-lang/rust/commit/3feaecd757241b7b5efd742108abe351ff8d497d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3feaecd757241b7b5efd742108abe351ff8d497d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44aebb978ca146dad99068412f44aa11c379dc12", "url": "https://api.github.com/repos/rust-lang/rust/commits/44aebb978ca146dad99068412f44aa11c379dc12", "html_url": "https://github.com/rust-lang/rust/commit/44aebb978ca146dad99068412f44aa11c379dc12"}], "stats": {"total": 60, "additions": 12, "deletions": 48}, "files": [{"sha": "22cce4956498260f83a5fd5771d0266c071c3c0c", "filename": "src/lib/unsafe.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Flib%2Funsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Flib%2Funsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Funsafe.rs?ref=3feaecd757241b7b5efd742108abe351ff8d497d", "patch": "@@ -19,7 +19,14 @@ Function: reinterpret_cast\n \n Casts the value at `src` to U. The two types must have the same length.\n */\n-unsafe fn reinterpret_cast<T, U>(src: T) -> U { ret rusti::cast(src); }\n+unsafe fn reinterpret_cast<T, U>(src: T) -> U {\n+    let t1 = sys::get_type_desc::<T>();\n+    let t2 = sys::get_type_desc::<U>();\n+    if (*t1).size != (*t2).size {\n+        fail \"attempt to cast values of differing sizes\";\n+    }\n+    ret rusti::cast(src);\n+}\n \n /*\n Function: leak"}, {"sha": "82346948afdceee1e1e0db2f77dfddea687365d3", "filename": "src/rt/intrinsics/intrinsics.cpp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.cpp?ref=3feaecd757241b7b5efd742108abe351ff8d497d", "patch": "@@ -6,9 +6,6 @@\n #include <cstdlib>\n #include <cstring>\n \n-extern \"C\" CDECL void\n-upcall_fail(char const *expr, char const *file, size_t line);\n-\n extern \"C\" CDECL void\n port_recv(uintptr_t *dptr, rust_port *port);\n \n@@ -41,12 +38,8 @@ rust_intrinsic_cast(void *retptr,\n                     type_desc *t2,\n                     void *src)\n {\n-    if (t1->size != t2->size) {\n-        upcall_fail(\"attempt to cast values of differing sizes\",\n-                    __FILE__, __LINE__);\n-        return;\n-    }\n-\n+    // assert t1->size == t2->size\n+    // FIXME: This should be easily expressible in rust\n     memmove(retptr, src, t1->size);\n }\n "}, {"sha": "47ac0bbd578b988c52b98e7bef763e0b0a95d052", "filename": "src/rt/intrinsics/intrinsics.i386.ll.in", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.i386.ll.in?ref=3feaecd757241b7b5efd742108abe351ff8d497d", "patch": "@@ -57,9 +57,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %\"struct.hash_map<int, rust_task *>::map_entry\" = type opaque\n %class.circular_buffer = type { %class.rust_kernel*, i32, i32, i32, i32, i8* }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n-\n define void @rust_intrinsic_vec_len(i32* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind {\n   %1 = load %struct.rust_vec** %vp, align 4, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i32 0, i32 0\n@@ -80,28 +77,13 @@ define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %en\n   ret void\n }\n \n-define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) {\n+define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) nounwind {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i32 0, i32 1\n   %2 = load i32* %1, align 4, !tbaa !3\n-  %3 = getelementptr inbounds %struct.type_desc* %t2, i32 0, i32 1\n-  %4 = load i32* %3, align 4, !tbaa !3\n-  %5 = icmp eq i32 %2, %4\n-  br i1 %5, label %7, label %6\n-\n-; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i32 0, i32 0), i32 46)\n-  br label %8\n-\n-; <label>:7                                       ; preds = %0\n   tail call void @llvm.memmove.p0i8.p0i8.i32(i8* %retptr, i8* %src, i32 %2, i32 1, i1 false)\n-  br label %8\n-\n-; <label>:8                                       ; preds = %7, %6\n   ret void\n }\n \n-declare void @upcall_fail(i8*, i8*, i32)\n-\n declare void @llvm.memmove.p0i8.p0i8.i32(i8* nocapture, i8* nocapture, i32, i32, i1) nounwind\n \n define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind {"}, {"sha": "4aa771f0e44a4df888980fe2311a3b176709d066", "filename": "src/rt/intrinsics/intrinsics.x86_64.ll.in", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "raw_url": "https://github.com/rust-lang/rust/raw/3feaecd757241b7b5efd742108abe351ff8d497d/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fintrinsics%2Fintrinsics.x86_64.ll.in?ref=3feaecd757241b7b5efd742108abe351ff8d497d", "patch": "@@ -57,9 +57,6 @@ target triple = \"@CFG_TARGET_TRIPLE@\"\n %\"struct.hash_map<long, rust_task *>::map_entry\" = type opaque\n %class.circular_buffer = type { %class.rust_kernel*, i64, i64, i64, i64, i8* }\n \n-@.str = private unnamed_addr constant [42 x i8] c\"attempt to cast values of differing sizes\\00\", align 1\n-@.str1 = private unnamed_addr constant [33 x i8] c\"src/rt/intrinsics/intrinsics.cpp\\00\", align 1\n-\n define void @rust_intrinsic_vec_len(i64* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, %struct.rust_vec** nocapture %vp) nounwind uwtable {\n   %1 = load %struct.rust_vec** %vp, align 8, !tbaa !0\n   %2 = getelementptr inbounds %struct.rust_vec* %1, i64 0, i32 0\n@@ -80,28 +77,13 @@ define void @rust_intrinsic_ptr_offset(i8** nocapture %retptr, i8* nocapture %en\n   ret void\n }\n \n-define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) uwtable {\n+define void @rust_intrinsic_cast(i8* nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %t1, %struct.type_desc* nocapture %t2, i8* nocapture %src) nounwind uwtable {\n   %1 = getelementptr inbounds %struct.type_desc* %t1, i64 0, i32 1\n   %2 = load i64* %1, align 8, !tbaa !3\n-  %3 = getelementptr inbounds %struct.type_desc* %t2, i64 0, i32 1\n-  %4 = load i64* %3, align 8, !tbaa !3\n-  %5 = icmp eq i64 %2, %4\n-  br i1 %5, label %7, label %6\n-\n-; <label>:6                                       ; preds = %0\n-  tail call void @upcall_fail(i8* getelementptr inbounds ([42 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8]* @.str1, i64 0, i64 0), i64 46)\n-  br label %8\n-\n-; <label>:7                                       ; preds = %0\n   tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %retptr, i8* %src, i64 %2, i32 1, i1 false)\n-  br label %8\n-\n-; <label>:8                                       ; preds = %7, %6\n   ret void\n }\n \n-declare void @upcall_fail(i8*, i8*, i64)\n-\n declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind\n \n define void @rust_intrinsic_addr_of(i8** nocapture %retptr, i8* nocapture %env, %struct.type_desc* nocapture %ty, i8* %valptr) nounwind uwtable {"}]}