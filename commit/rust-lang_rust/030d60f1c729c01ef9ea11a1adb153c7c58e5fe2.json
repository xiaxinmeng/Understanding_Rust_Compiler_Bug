{"sha": "030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "node_id": "C_kwDOAAsO6NoAKDAzMGQ2MGYxYzcyOWMwMWVmOWVhMTFhMWFkYjE1M2M3YzU4ZTVmZTI", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-12-25T09:27:14Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2023-01-07T10:42:16Z"}, "message": "more tests", "tree": {"sha": "18afd83d1d9b752f6b8af9bb3218310cdf215292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18afd83d1d9b752f6b8af9bb3218310cdf215292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "html_url": "https://github.com/rust-lang/rust/commit/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f", "html_url": "https://github.com/rust-lang/rust/commit/dca15fd5b95c01edd81ccee1c0f0bdbc28d3f05f"}], "stats": {"total": 245, "additions": 208, "deletions": 37}, "files": [{"sha": "be23c3b747858fbb7c906089e5776750d7118c8d", "filename": "src/test/ui/nll/user-annotations/normalization-2.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.rs?ref=030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "patch": "@@ -23,10 +23,20 @@ enum MyTy<T> {\n }\n \n impl<T> MyTy<T> {\n+    const CONST: () = ();\n     fn method<X>() {}\n     fn method2<X>(&self) {}\n }\n \n+trait TraitAssoc {\n+    const TRAIT_CONST: ();\n+    fn trait_method<X>(&self);\n+}\n+impl<T> TraitAssoc for T {\n+    const TRAIT_CONST: () = ();\n+    fn trait_method<X>(&self) {}\n+}\n+\n type Ty<'a> = <&'a () as Trait>::Assoc;\n \n fn test_local<'a>() {\n@@ -41,13 +51,30 @@ fn test_closure_sig<'a, 'b>() {\n     //~^ ERROR lifetime may not live long enough\n }\n \n-fn test_path<'a, 'b, 'c, 'd>() {\n+fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n     <Ty<'a>>::method::<Ty<'static>>;\n     //~^ ERROR lifetime may not live long enough\n     <Ty<'static>>::method::<Ty<'b>>;\n     //~^ ERROR lifetime may not live long enough\n \n-    MyTy::Unit::<Ty<'c>>;\n+    <Ty<'c>>::trait_method::<Ty<'static>>;\n+    //~^ ERROR lifetime may not live long enough\n+    <Ty<'static>>::trait_method::<Ty<'d>>;\n+    //~^ ERROR lifetime may not live long enough\n+\n+    <Ty<'e>>::CONST;\n+    //~^ ERROR lifetime may not live long enough\n+    <Ty<'f>>::TRAIT_CONST;\n+    //~^ ERROR lifetime may not live long enough\n+\n+    <Ty<'static>>::method::<Ty<'static>>;\n+    <Ty<'static>>::trait_method::<Ty<'static>>;\n+    <Ty<'static>>::CONST;\n+    <Ty<'static>>::TRAIT_CONST;\n+\n+    MyTy::Unit::<Ty<'g>>;\n+    //~^ ERROR lifetime may not live long enough\n+    MyTy::<Ty<'h>>::Unit;\n     //~^ ERROR lifetime may not live long enough\n }\n \n@@ -67,9 +94,11 @@ fn test_variants<'a, 'b, 'c>() {\n     //~^ ERROR lifetime may not live long enough\n }\n \n-fn test_method_call<'a>(x: MyTy<()>) {\n+fn test_method_call<'a, 'b>(x: MyTy<()>) {\n     x.method2::<Ty<'a>>();\n     //~^ ERROR lifetime may not live long enough\n+    x.trait_method::<Ty<'b>>();\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn test_struct_path<'a, 'b, 'c, 'd>() {\n@@ -97,7 +126,7 @@ fn test_struct_path<'a, 'b, 'c, 'd>() {\n     //~^ ERROR lifetime may not live long enough\n }\n \n-fn test_pattern<'a, 'b, 'c>() {\n+fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n     use MyTy::*;\n     match MyTy::Unit {\n         Struct::<Ty<'a>> {..} => {},\n@@ -108,6 +137,15 @@ fn test_pattern<'a, 'b, 'c>() {\n         //~^ ERROR lifetime may not live long enough\n         Dumb(_) => {},\n     };\n+    match MyTy::Unit {\n+        <Ty<'d>>::Struct {..} => {},\n+        //~^ ERROR lifetime may not live long enough\n+        <Ty<'e>>::Tuple (..) => {},\n+        //~^ ERROR lifetime may not live long enough\n+        <Ty<'f>>::Unit => {},\n+        //~^ ERROR lifetime may not live long enough\n+        Dumb(_) => {},\n+    };\n }\n \n "}, {"sha": "5299282ea151ed52eb69afeac079040e3ec90b79", "filename": "src/test/ui/nll/user-annotations/normalization-2.stderr", "status": "modified", "additions": 123, "deletions": 29, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization-2.stderr?ref=030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "patch": "@@ -1,21 +1,21 @@\n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:33:12\n+  --> $DIR/normalization-2.rs:43:12\n    |\n LL | fn test_local<'a>() {\n    |               -- lifetime `'a` defined here\n LL |     let _: Ty<'a> = MyTy::Unit;\n    |            ^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:38:6\n+  --> $DIR/normalization-2.rs:48:6\n    |\n LL | fn test_closure_sig<'a, 'b>() {\n    |                     -- lifetime `'a` defined here\n LL |     |_: Ty<'a>| {};\n    |      ^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:40:11\n+  --> $DIR/normalization-2.rs:50:11\n    |\n LL | fn test_closure_sig<'a, 'b>() {\n    |                         -- lifetime `'b` defined here\n@@ -29,47 +29,97 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:45:5\n+  --> $DIR/normalization-2.rs:55:5\n    |\n-LL | fn test_path<'a, 'b, 'c, 'd>() {\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n    |              -- lifetime `'a` defined here\n LL |     <Ty<'a>>::method::<Ty<'static>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:47:5\n+  --> $DIR/normalization-2.rs:57:5\n    |\n-LL | fn test_path<'a, 'b, 'c, 'd>() {\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n    |                  -- lifetime `'b` defined here\n ...\n LL |     <Ty<'static>>::method::<Ty<'b>>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:50:5\n+  --> $DIR/normalization-2.rs:60:5\n    |\n-LL | fn test_path<'a, 'b, 'c, 'd>() {\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n    |                      -- lifetime `'c` defined here\n ...\n-LL |     MyTy::Unit::<Ty<'c>>;\n-   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n+LL |     <Ty<'c>>::trait_method::<Ty<'static>>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:62:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n+   |                          -- lifetime `'d` defined here\n+...\n+LL |     <Ty<'static>>::trait_method::<Ty<'d>>;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'d` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:65:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n+   |                              -- lifetime `'e` defined here\n+...\n+LL |     <Ty<'e>>::CONST;\n+   |     ^^^^^^^^^^^^^^^ requires that `'e` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:67:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n+   |                                  -- lifetime `'f` defined here\n+...\n+LL |     <Ty<'f>>::TRAIT_CONST;\n+   |     ^^^^^^^^^^^^^^^^^^^^^ requires that `'f` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:75:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n+   |                                      -- lifetime `'g` defined here\n+...\n+LL |     MyTy::Unit::<Ty<'g>>;\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'g` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:77:5\n+   |\n+LL | fn test_path<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h>() {\n+   |                                          -- lifetime `'h` defined here\n+...\n+LL |     MyTy::<Ty<'h>>::Unit;\n+   |     ^^^^^^^^^^^^^^^^^^^^ requires that `'h` must outlive `'static`\n \n help: the following changes may resolve your lifetime errors\n    |\n    = help: replace `'a` with `'static`\n    = help: replace `'b` with `'static`\n    = help: replace `'c` with `'static`\n+   = help: replace `'d` with `'static`\n+   = help: replace `'e` with `'static`\n+   = help: replace `'f` with `'static`\n+   = help: replace `'g` with `'static`\n+   = help: replace `'h` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:55:5\n+  --> $DIR/normalization-2.rs:82:5\n    |\n LL | fn test_call<'a, 'b, 'c>() {\n    |              -- lifetime `'a` defined here\n LL |     <Ty<'a>>::method::<Ty<'static>>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:57:5\n+  --> $DIR/normalization-2.rs:84:5\n    |\n LL | fn test_call<'a, 'b, 'c>() {\n    |                  -- lifetime `'b` defined here\n@@ -83,15 +133,15 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'b` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:62:5\n+  --> $DIR/normalization-2.rs:89:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                  -- lifetime `'a` defined here\n LL |     <Ty<'a>>::Struct {};\n    |     ^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:64:5\n+  --> $DIR/normalization-2.rs:91:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                      -- lifetime `'b` defined here\n@@ -100,7 +150,7 @@ LL |     <Ty<'b>>::Tuple();\n    |     ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:66:5\n+  --> $DIR/normalization-2.rs:93:5\n    |\n LL | fn test_variants<'a, 'b, 'c>() {\n    |                          -- lifetime `'c` defined here\n@@ -115,15 +165,29 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'c` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:71:7\n+  --> $DIR/normalization-2.rs:98:7\n    |\n-LL | fn test_method_call<'a>(x: MyTy<()>) {\n+LL | fn test_method_call<'a, 'b>(x: MyTy<()>) {\n    |                     -- lifetime `'a` defined here\n LL |     x.method2::<Ty<'a>>();\n    |       ^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:88:5\n+  --> $DIR/normalization-2.rs:100:7\n+   |\n+LL | fn test_method_call<'a, 'b>(x: MyTy<()>) {\n+   |                         -- lifetime `'b` defined here\n+...\n+LL |     x.trait_method::<Ty<'b>>();\n+   |       ^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n+\n+help: the following changes may resolve your lifetime errors\n+   |\n+   = help: replace `'a` with `'static`\n+   = help: replace `'b` with `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:117:5\n    |\n LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n    |                     -- lifetime `'a` defined here\n@@ -132,7 +196,7 @@ LL |     MyTy::<Ty<'a>>::Struct {}; // without SelfTy\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:90:5\n+  --> $DIR/normalization-2.rs:119:5\n    |\n LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n    |                         -- lifetime `'b` defined here\n@@ -141,7 +205,7 @@ LL |     <Ty<'b> as Project>::Enum::Struct {}; // with SelfTy\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:94:5\n+  --> $DIR/normalization-2.rs:123:5\n    |\n LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n    |                             -- lifetime `'c` defined here\n@@ -150,7 +214,7 @@ LL |     Struct::<Ty<'c>> { x: None, }; // without SelfTy\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:96:5\n+  --> $DIR/normalization-2.rs:125:5\n    |\n LL | fn test_struct_path<'a, 'b, 'c, 'd>() {\n    |                                 -- lifetime `'d` defined here\n@@ -166,37 +230,67 @@ help: the following changes may resolve your lifetime errors\n    = help: replace `'d` with `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:103:9\n+  --> $DIR/normalization-2.rs:132:9\n    |\n-LL | fn test_pattern<'a, 'b, 'c>() {\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n    |                 -- lifetime `'a` defined here\n ...\n LL |         Struct::<Ty<'a>> {..} => {},\n    |         ^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:105:9\n+  --> $DIR/normalization-2.rs:134:9\n    |\n-LL | fn test_pattern<'a, 'b, 'c>() {\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n    |                     -- lifetime `'b` defined here\n ...\n LL |         Tuple::<Ty<'b>> (..) => {},\n    |         ^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'static`\n \n error: lifetime may not live long enough\n-  --> $DIR/normalization-2.rs:107:9\n+  --> $DIR/normalization-2.rs:136:9\n    |\n-LL | fn test_pattern<'a, 'b, 'c>() {\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n    |                         -- lifetime `'c` defined here\n ...\n LL |         Unit::<Ty<'c>> => {},\n    |         ^^^^^^^^^^^^^^ requires that `'c` must outlive `'static`\n \n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:141:9\n+   |\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n+   |                             -- lifetime `'d` defined here\n+...\n+LL |         <Ty<'d>>::Struct {..} => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^^ requires that `'d` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:143:9\n+   |\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n+   |                                 -- lifetime `'e` defined here\n+...\n+LL |         <Ty<'e>>::Tuple (..) => {},\n+   |         ^^^^^^^^^^^^^^^^^^^^ requires that `'e` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/normalization-2.rs:145:9\n+   |\n+LL | fn test_pattern<'a, 'b, 'c, 'd, 'e, 'f>() {\n+   |                                     -- lifetime `'f` defined here\n+...\n+LL |         <Ty<'f>>::Unit => {},\n+   |         ^^^^^^^^^^^^^^ requires that `'f` must outlive `'static`\n+\n help: the following changes may resolve your lifetime errors\n    |\n    = help: replace `'a` with `'static`\n    = help: replace `'b` with `'static`\n    = help: replace `'c` with `'static`\n+   = help: replace `'d` with `'static`\n+   = help: replace `'e` with `'static`\n+   = help: replace `'f` with `'static`\n \n-error: aborting due to 19 previous errors\n+error: aborting due to 28 previous errors\n "}, {"sha": "c2e892f573c2d6fa6ebc7372111dffed096bc19f", "filename": "src/test/ui/nll/user-annotations/normalization.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.rs?ref=030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "patch": "@@ -3,8 +3,15 @@\n \n trait Foo { type Out; }\n impl Foo for () { type Out = &'static u32; }\n+impl<'a> Foo for &'a () { type Out = &'a u32; }\n \n fn main() {\n     let a = 22;\n-    let b: <() as Foo>::Out = &a; //~ ERROR\n+    let _: <() as Foo>::Out = &a; //~ ERROR\n+\n+    let a = 22;\n+    let _: <&'static () as Foo>::Out = &a; //~ ERROR\n+\n+    let a = 22;\n+    let _: <&'_ () as Foo>::Out = &a;\n }"}, {"sha": "975cb4b66d91d0ef91004d6524d5f21786f43878", "filename": "src/test/ui/nll/user-annotations/normalization.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fnormalization.stderr?ref=030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "patch": "@@ -1,13 +1,25 @@\n error[E0597]: `a` does not live long enough\n-  --> $DIR/normalization.rs:9:31\n+  --> $DIR/normalization.rs:10:31\n    |\n-LL |     let b: <() as Foo>::Out = &a;\n+LL |     let _: <() as Foo>::Out = &a;\n    |            ----------------   ^^ borrowed value does not live long enough\n    |            |\n    |            type annotation requires that `a` is borrowed for `'static`\n+...\n LL | }\n    | - `a` dropped here while still borrowed\n \n-error: aborting due to previous error\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/normalization.rs:13:40\n+   |\n+LL |     let _: <&'static () as Foo>::Out = &a;\n+   |            -------------------------   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `a` is borrowed for `'static`\n+...\n+LL | }\n+   | - `a` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0597`."}, {"sha": "962606508be7a492acf0fee3abf3b22f72c182b5", "filename": "src/test/ui/type-alias-impl-trait/associated-type-impl-trait-lifetime.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/030d60f1c729c01ef9ea11a1adb153c7c58e5fe2/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fassociated-type-impl-trait-lifetime.rs?ref=030d60f1c729c01ef9ea11a1adb153c7c58e5fe2", "patch": "@@ -0,0 +1,20 @@\n+//check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Trait {\n+    type Opaque1;\n+    type Opaque2;\n+    fn constrain(self);\n+}\n+\n+impl<'a> Trait for &'a () {\n+    type Opaque1 = impl Sized;\n+    type Opaque2 = impl Sized + 'a;\n+    fn constrain(self) {\n+        let _: Self::Opaque1 = ();\n+        let _: Self::Opaque2 = self;\n+    }\n+}\n+\n+fn main() {}"}]}