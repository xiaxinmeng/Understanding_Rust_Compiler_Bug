{"sha": "ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlOWI0N2RhZTYxY2QzNGVlN2NiY2IwMTNhNzJiNWYxNjIxNDhlNGE=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-08T01:15:12Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2021-01-08T01:15:12Z"}, "message": "Move `is_hir_ty_cfg_dependant` to `util`,\n\nadd stuff on pointer::cast` to the document for `cast_ptr_alignment`\nand fix line numbers in the test.", "tree": {"sha": "c005fde65461ff823fbd1a23cef0080458816681", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c005fde65461ff823fbd1a23cef0080458816681"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "html_url": "https://github.com/rust-lang/rust/commit/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f50ded059272ed3c060ea5df353966384d7df427", "url": "https://api.github.com/repos/rust-lang/rust/commits/f50ded059272ed3c060ea5df353966384d7df427", "html_url": "https://github.com/rust-lang/rust/commit/f50ded059272ed3c060ea5df353966384d7df427"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "765a0569007a8627d0f1ce33569357c5b978db56", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "patch": "@@ -8,7 +8,6 @@ use if_chain::if_chain;\n use rustc_ast::{FloatTy, IntTy, LitFloatType, LitIntType, LitKind, UintTy};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n-use rustc_hir::def::Res;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n     BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n@@ -33,9 +32,9 @@ use crate::consts::{constant, Constant};\n use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_type_diagnostic_item,\n-    last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args, multispan_sugg,\n-    numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n+    clip, comparisons, differing_macro_contexts, higher, in_constant, indent_of, int_bits, is_hir_ty_cfg_dependant,\n+    is_type_diagnostic_item, last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args,\n+    multispan_sugg, numeric_literal::NumericLiteral, qpath_res, reindent_multiline, sext, snippet, snippet_opt,\n     snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n     span_lint_and_then, unsext,\n };\n@@ -1282,8 +1281,8 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for casts from a less-strictly-aligned pointer to a\n-    /// more-strictly-aligned pointer\n+    /// **What it does:** Checks for casts, using `as` or `pointer::cast`,\n+    /// from a less-strictly-aligned pointer to a more-strictly-aligned pointer\n     ///\n     /// **Why is this bad?** Dereferencing the resulting pointer may be undefined\n     /// behavior.\n@@ -1296,6 +1295,9 @@ declare_clippy_lint! {\n     /// ```rust\n     /// let _ = (&1u8 as *const u8) as *const u16;\n     /// let _ = (&mut 1u8 as *mut u8) as *mut u16;\n+    ///\n+    /// (&1u8 as *const u8).cast::<u16>();\n+    /// (&mut 1u8 as *mut u8).cast::<u16>();\n     /// ```\n     pub CAST_PTR_ALIGNMENT,\n     pedantic,\n@@ -1725,18 +1727,6 @@ fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     }\n }\n \n-fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n-    if_chain! {\n-        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n-        if let Res::Def(_, def_id) = path.res;\n-        then {\n-            cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr)\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n fn show_unnecessary_cast(cx: &LateContext<'_>, expr: &Expr<'_>, literal_str: &str, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n     let literal_kind_name = if cast_from.is_integral() { \"integer\" } else { \"float\" };\n     span_lint_and_sugg("}, {"sha": "27f4cb2b254408b576533829b4fe7e829ec7cec6", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "patch": "@@ -1686,6 +1686,18 @@ macro_rules! unwrap_cargo_metadata {\n     }};\n }\n \n+pub fn is_hir_ty_cfg_dependant(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> bool {\n+    if_chain! {\n+        if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+        if let Res::Def(_, def_id) = path.res;\n+        then {\n+            cx.tcx.has_attr(def_id, sym::cfg) || cx.tcx.has_attr(def_id, sym::cfg_attr)\n+        } else {\n+            false\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{reindent_multiline, without_block_comments};"}, {"sha": "7998b787b91fbd70cb353d0c1ef990d11e6018d7", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee9b47dae61cd34ee7cbcb013a72b5f162148e4a/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=ee9b47dae61cd34ee7cbcb013a72b5f162148e4a", "patch": "@@ -13,13 +13,13 @@ LL |     (&mut 1u8 as *mut u8) as *mut u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:15:5\n+  --> $DIR/cast_alignment.rs:16:5\n    |\n LL |     (&1u8 as *const u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n-  --> $DIR/cast_alignment.rs:16:5\n+  --> $DIR/cast_alignment.rs:17:5\n    |\n LL |     (&mut 1u8 as *mut u8).cast::<u16>();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}