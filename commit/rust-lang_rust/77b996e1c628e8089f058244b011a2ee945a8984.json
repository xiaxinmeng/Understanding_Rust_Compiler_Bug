{"sha": "77b996e1c628e8089f058244b011a2ee945a8984", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3Yjk5NmUxYzYyOGU4MDg5ZjA1ODI0NGIwMTFhMmVlOTQ1YTg5ODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T00:23:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-12T00:23:05Z"}, "message": "Auto merge of #83042 - JohnTitor:rollup-s8efv94, r=JohnTitor\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #80385 (Clarify what `Cell::replace` returns)\n - #82571 (Rustdoc Json: Add tests for Reexports, and improve jsondocck)\n - #82860 (Add `-Z unpretty` flag for the THIR)\n - #82950 (convert slice doc link to intra-doc links)\n - #82965 (Add spirv extension handling in compiletest)\n - #82966 (update MSYS2 link in README)\n - #82979 (Fix \"run\" button position in error index)\n - #83001 (Ignore Vim swap files)\n - #83003 (rustdoc: tweak the search index format)\n - #83013 (Adjust some `#[cfg]`s to take non-Unix non-Windows operating systems into account)\n - #83018 (Reintroduce accidentally deleted assertions.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "3c87ee142e0bfe550b0cb2e14ffa09f6d8c7f17f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c87ee142e0bfe550b0cb2e14ffa09f6d8c7f17f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b996e1c628e8089f058244b011a2ee945a8984", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b996e1c628e8089f058244b011a2ee945a8984", "html_url": "https://github.com/rust-lang/rust/commit/77b996e1c628e8089f058244b011a2ee945a8984", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b996e1c628e8089f058244b011a2ee945a8984/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03e864fd86b8e346a2ea75235ce2b924ab453fa1", "url": "https://api.github.com/repos/rust-lang/rust/commits/03e864fd86b8e346a2ea75235ce2b924ab453fa1", "html_url": "https://github.com/rust-lang/rust/commit/03e864fd86b8e346a2ea75235ce2b924ab453fa1"}, {"sha": "14846d945d78987641aba1ec8c0c799b56c7da19", "url": "https://api.github.com/repos/rust-lang/rust/commits/14846d945d78987641aba1ec8c0c799b56c7da19", "html_url": "https://github.com/rust-lang/rust/commit/14846d945d78987641aba1ec8c0c799b56c7da19"}], "stats": {"total": 553, "additions": 377, "deletions": 176}, "files": [{"sha": "3f77e6884b90f0796b59c3ca3a438d3339bead1f", "filename": ".gitignore", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -7,6 +7,8 @@\n # configure your local ignore list.\n # FIXME: This needs cleanup.\n *~\n+*.swp\n+*.swo\n .#*\n .DS_Store\n .cproject"}, {"sha": "2c9eaebb5fdc2f7ce35bd3bad8ad0a5c7dd22c3b", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -3870,13 +3870,15 @@ dependencies = [\n  \"rustc_metadata\",\n  \"rustc_middle\",\n  \"rustc_mir\",\n+ \"rustc_mir_build\",\n  \"rustc_parse\",\n  \"rustc_plugin_impl\",\n  \"rustc_save_analysis\",\n  \"rustc_serialize\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"rustc_target\",\n+ \"rustc_typeck\",\n  \"tracing\",\n  \"tracing-subscriber\",\n  \"tracing-tree\","}, {"sha": "5ec94e189f8359c6659923317bb1e8e274dae7f7", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -90,7 +90,7 @@ build.\n \n [MSYS2][msys2] can be used to easily build Rust on Windows:\n \n-[msys2]: https://msys2.github.io/\n+[msys2]: https://www.msys2.org/\n \n 1. Grab the latest [MSYS2 installer][msys2] and go through the installer.\n "}, {"sha": "b11821b7db0a2b8eb6ac62e5eae4f0b4eb48d9c1", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -711,7 +711,7 @@ fn link_natively<'a, B: ArchiveBuilder<'a>>(\n             status.signal() == Some(libc::SIGILL)\n         }\n \n-        #[cfg(windows)]\n+        #[cfg(not(unix))]\n         fn is_illegal_instruction(_status: &ExitStatus) -> bool {\n             false\n         }\n@@ -1198,7 +1198,7 @@ fn exec_linker(\n     flush_linked_file(&output, out_filename)?;\n     return output;\n \n-    #[cfg(unix)]\n+    #[cfg(not(windows))]\n     fn flush_linked_file(_: &io::Result<Output>, _: &Path) -> io::Result<()> {\n         Ok(())\n     }\n@@ -1238,6 +1238,11 @@ fn exec_linker(\n         err.raw_os_error() == Some(ERROR_FILENAME_EXCED_RANGE)\n     }\n \n+    #[cfg(not(any(unix, windows)))]\n+    fn command_line_too_big(_: &io::Error) -> bool {\n+        false\n+    }\n+\n     struct Escape<'a> {\n         arg: &'a str,\n         is_like_msvc: bool,"}, {"sha": "c521f2041d8919ceadb8c84242e951c5fbc8ead0", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -34,6 +34,8 @@ rustc_interface = { path = \"../rustc_interface\" }\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_ast = { path = \"../rustc_ast\" }\n rustc_span = { path = \"../rustc_span\" }\n+rustc_mir_build = { path = \"../rustc_mir_build\" }\n+rustc_typeck = { path = \"../rustc_typeck\" }\n \n [target.'cfg(windows)'.dependencies]\n winapi = { version = \"0.3\", features = [\"consoleapi\", \"debugapi\", \"processenv\"] }"}, {"sha": "5512bd74453e54eace3b0bd17fc11847eb464f38", "filename": "compiler/rustc_driver/src/pretty.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Fpretty.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -9,12 +9,14 @@ use rustc_hir_pretty as pprust_hir;\n use rustc_middle::hir::map as hir_map;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_mir::util::{write_mir_graphviz, write_mir_pretty};\n+use rustc_mir_build::thir;\n use rustc_session::config::{Input, PpAstTreeMode, PpHirMode, PpMode, PpSourceMode};\n use rustc_session::Session;\n use rustc_span::symbol::Ident;\n use rustc_span::FileName;\n \n use std::cell::Cell;\n+use std::fmt::Write;\n use std::path::Path;\n \n pub use self::PpMode::*;\n@@ -469,6 +471,21 @@ pub fn print_after_hir_lowering<'tcx>(\n             format!(\"{:#?}\", krate)\n         }),\n \n+        ThirTree => {\n+            let mut out = String::new();\n+            abort_on_err(rustc_typeck::check_crate(tcx), tcx.sess);\n+            debug!(\"pretty printing THIR tree\");\n+            for did in tcx.body_owners() {\n+                let hir = tcx.hir();\n+                let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(did)));\n+                let arena = thir::Arena::default();\n+                let thir =\n+                    thir::build_thir(tcx, ty::WithOptConstParam::unknown(did), &arena, &body.value);\n+                let _ = writeln!(out, \"{:?}:\\n{:#?}\\n\", did, thir);\n+            }\n+            out\n+        }\n+\n         _ => unreachable!(),\n     };\n "}, {"sha": "9c83c0d09aa8e3a6bad3758077ad3b0b002d2870", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -1,7 +1,6 @@\n use crate::build;\n use crate::build::scope::DropKind;\n-use crate::thir::cx::build_thir;\n-use crate::thir::{Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n+use crate::thir::{build_thir, Arena, BindingMode, Expr, LintLevel, Pat, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n use rustc_errors::ErrorReported;\n use rustc_hir as hir;"}, {"sha": "b1591d8ba35f4e62ef6937d0b9eaa4b1fa1b24c6", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -20,7 +20,7 @@ extern crate rustc_middle;\n \n mod build;\n mod lints;\n-mod thir;\n+pub mod thir;\n \n use rustc_middle::ty::query::Providers;\n "}, {"sha": "ac93d042970f2c472262d96eb0b0b29a5dd45d82", "filename": "compiler/rustc_mir_build/src/thir/constant.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fconstant.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -1,3 +1,4 @@\n+use rustc_apfloat::Float;\n use rustc_ast as ast;\n use rustc_middle::mir::interpret::{\n     Allocation, ConstValue, LitToConstError, LitToConstInput, Scalar,\n@@ -61,20 +62,40 @@ fn parse_float<'tcx>(num: Symbol, fty: ty::FloatTy, neg: bool) -> Result<ConstVa\n     use rustc_apfloat::ieee::{Double, Single};\n     let scalar = match fty {\n         ty::FloatTy::F32 => {\n-            num.parse::<f32>().map_err(|_| ())?;\n+            let rust_f = num.parse::<f32>().map_err(|_| ())?;\n             let mut f = num.parse::<Single>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Single failed to parse `{}`: {:?}\", num, e)\n             });\n+            assert!(\n+                u128::from(rust_f.to_bits()) == f.to_bits(),\n+                \"apfloat::ieee::Single gave different result for `{}`: \\\n+                 {}({:#x}) vs Rust's {}({:#x})\",\n+                rust_f,\n+                f,\n+                f.to_bits(),\n+                Single::from_bits(rust_f.to_bits().into()),\n+                rust_f.to_bits()\n+            );\n             if neg {\n                 f = -f;\n             }\n             Scalar::from_f32(f)\n         }\n         ty::FloatTy::F64 => {\n-            num.parse::<f64>().map_err(|_| ())?;\n+            let rust_f = num.parse::<f64>().map_err(|_| ())?;\n             let mut f = num.parse::<Double>().unwrap_or_else(|e| {\n                 panic!(\"apfloat::ieee::Double failed to parse `{}`: {:?}\", num, e)\n             });\n+            assert!(\n+                u128::from(rust_f.to_bits()) == f.to_bits(),\n+                \"apfloat::ieee::Double gave different result for `{}`: \\\n+                 {}({:#x}) vs Rust's {}({:#x})\",\n+                rust_f,\n+                f,\n+                f.to_bits(),\n+                Double::from_bits(rust_f.to_bits().into()),\n+                rust_f.to_bits()\n+            );\n             if neg {\n                 f = -f;\n             }"}, {"sha": "fe8a58c00887265989de8f77c1c0defb67581f47", "filename": "compiler/rustc_mir_build/src/thir/cx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -14,7 +14,7 @@ use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::{LitToConstError, LitToConstInput};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n \n-crate fn build_thir<'thir, 'tcx>(\n+pub fn build_thir<'thir, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     owner_def: ty::WithOptConstParam<LocalDefId>,\n     arena: &'thir Arena<'thir, 'tcx>,"}, {"sha": "0c9df32c1880329dd2b41f0505553a548621fa4e", "filename": "compiler/rustc_mir_build/src/thir/mod.rs", "status": "modified", "additions": 40, "deletions": 39, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -18,50 +18,51 @@ use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n \n crate mod constant;\n+\n crate mod cx;\n+pub use cx::build_thir;\n \n crate mod pattern;\n-crate use self::pattern::PatTyProj;\n-crate use self::pattern::{BindingMode, FieldPat, Pat, PatKind, PatRange};\n+pub use self::pattern::{Ascription, BindingMode, FieldPat, Pat, PatKind, PatRange, PatTyProj};\n \n mod arena;\n-crate use arena::Arena;\n+pub use arena::Arena;\n \n mod util;\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LintLevel {\n+pub enum LintLevel {\n     Inherited,\n     Explicit(hir::HirId),\n }\n \n #[derive(Debug)]\n-crate struct Block<'thir, 'tcx> {\n-    crate targeted_by_break: bool,\n-    crate region_scope: region::Scope,\n-    crate opt_destruction_scope: Option<region::Scope>,\n-    crate span: Span,\n-    crate stmts: &'thir [Stmt<'thir, 'tcx>],\n-    crate expr: Option<&'thir Expr<'thir, 'tcx>>,\n-    crate safety_mode: BlockSafety,\n+pub struct Block<'thir, 'tcx> {\n+    pub targeted_by_break: bool,\n+    pub region_scope: region::Scope,\n+    pub opt_destruction_scope: Option<region::Scope>,\n+    pub span: Span,\n+    pub stmts: &'thir [Stmt<'thir, 'tcx>],\n+    pub expr: Option<&'thir Expr<'thir, 'tcx>>,\n+    pub safety_mode: BlockSafety,\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum BlockSafety {\n+pub enum BlockSafety {\n     Safe,\n     ExplicitUnsafe(hir::HirId),\n     PushUnsafe,\n     PopUnsafe,\n }\n \n #[derive(Debug)]\n-crate struct Stmt<'thir, 'tcx> {\n-    crate kind: StmtKind<'thir, 'tcx>,\n-    crate opt_destruction_scope: Option<region::Scope>,\n+pub struct Stmt<'thir, 'tcx> {\n+    pub kind: StmtKind<'thir, 'tcx>,\n+    pub opt_destruction_scope: Option<region::Scope>,\n }\n \n #[derive(Debug)]\n-crate enum StmtKind<'thir, 'tcx> {\n+pub enum StmtKind<'thir, 'tcx> {\n     Expr {\n         /// scope for this statement; may be used as lifetime of temporaries\n         scope: region::Scope,\n@@ -111,23 +112,23 @@ rustc_data_structures::static_assert_size!(Expr<'_, '_>, 144);\n /// example, method calls and overloaded operators are absent: they are\n /// expected to be converted into `Expr::Call` instances.\n #[derive(Debug)]\n-crate struct Expr<'thir, 'tcx> {\n+pub struct Expr<'thir, 'tcx> {\n     /// type of this expression\n-    crate ty: Ty<'tcx>,\n+    pub ty: Ty<'tcx>,\n \n     /// lifetime of this expression if it should be spilled into a\n     /// temporary; should be None only if in a constant context\n-    crate temp_lifetime: Option<region::Scope>,\n+    pub temp_lifetime: Option<region::Scope>,\n \n     /// span of the expression in the source\n-    crate span: Span,\n+    pub span: Span,\n \n     /// kind of expression\n-    crate kind: ExprKind<'thir, 'tcx>,\n+    pub kind: ExprKind<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate enum ExprKind<'thir, 'tcx> {\n+pub enum ExprKind<'thir, 'tcx> {\n     Scope {\n         region_scope: region::Scope,\n         lint_level: LintLevel,\n@@ -316,41 +317,41 @@ crate enum ExprKind<'thir, 'tcx> {\n }\n \n #[derive(Debug)]\n-crate struct FieldExpr<'thir, 'tcx> {\n-    crate name: Field,\n-    crate expr: &'thir Expr<'thir, 'tcx>,\n+pub struct FieldExpr<'thir, 'tcx> {\n+    pub name: Field,\n+    pub expr: &'thir Expr<'thir, 'tcx>,\n }\n \n #[derive(Debug)]\n-crate struct FruInfo<'thir, 'tcx> {\n-    crate base: &'thir Expr<'thir, 'tcx>,\n-    crate field_types: &'thir [Ty<'tcx>],\n+pub struct FruInfo<'thir, 'tcx> {\n+    pub base: &'thir Expr<'thir, 'tcx>,\n+    pub field_types: &'thir [Ty<'tcx>],\n }\n \n #[derive(Debug)]\n-crate struct Arm<'thir, 'tcx> {\n-    crate pattern: Pat<'tcx>,\n-    crate guard: Option<Guard<'thir, 'tcx>>,\n-    crate body: &'thir Expr<'thir, 'tcx>,\n-    crate lint_level: LintLevel,\n-    crate scope: region::Scope,\n-    crate span: Span,\n+pub struct Arm<'thir, 'tcx> {\n+    pub pattern: Pat<'tcx>,\n+    pub guard: Option<Guard<'thir, 'tcx>>,\n+    pub body: &'thir Expr<'thir, 'tcx>,\n+    pub lint_level: LintLevel,\n+    pub scope: region::Scope,\n+    pub span: Span,\n }\n \n #[derive(Debug)]\n-crate enum Guard<'thir, 'tcx> {\n+pub enum Guard<'thir, 'tcx> {\n     If(&'thir Expr<'thir, 'tcx>),\n     IfLet(Pat<'tcx>, &'thir Expr<'thir, 'tcx>),\n }\n \n #[derive(Copy, Clone, Debug)]\n-crate enum LogicalOp {\n+pub enum LogicalOp {\n     And,\n     Or,\n }\n \n #[derive(Debug)]\n-crate enum InlineAsmOperand<'thir, 'tcx> {\n+pub enum InlineAsmOperand<'thir, 'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,\n         expr: &'thir Expr<'thir, 'tcx>,"}, {"sha": "9ac79a37ac6903dcbf3e72ffbb8fb9d87bb5d2b0", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -40,22 +40,22 @@ crate enum PatternError {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate enum BindingMode {\n+pub enum BindingMode {\n     ByValue,\n     ByRef(BorrowKind),\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct FieldPat<'tcx> {\n-    crate field: Field,\n-    crate pattern: Pat<'tcx>,\n+pub struct FieldPat<'tcx> {\n+    pub field: Field,\n+    pub pattern: Pat<'tcx>,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate struct Pat<'tcx> {\n-    crate ty: Ty<'tcx>,\n-    crate span: Span,\n-    crate kind: Box<PatKind<'tcx>>,\n+pub struct Pat<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub span: Span,\n+    pub kind: Box<PatKind<'tcx>>,\n }\n \n impl<'tcx> Pat<'tcx> {\n@@ -65,8 +65,8 @@ impl<'tcx> Pat<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatTyProj<'tcx> {\n-    crate user_ty: CanonicalUserType<'tcx>,\n+pub struct PatTyProj<'tcx> {\n+    pub user_ty: CanonicalUserType<'tcx>,\n }\n \n impl<'tcx> PatTyProj<'tcx> {\n@@ -92,8 +92,8 @@ impl<'tcx> PatTyProj<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct Ascription<'tcx> {\n-    crate user_ty: PatTyProj<'tcx>,\n+pub struct Ascription<'tcx> {\n+    pub user_ty: PatTyProj<'tcx>,\n     /// Variance to use when relating the type `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n@@ -112,12 +112,12 @@ crate struct Ascription<'tcx> {\n     /// requires that `&'static str <: T_x`, where `T_x` is the type of `x`. Really, we should\n     /// probably be checking for a `PartialEq` impl instead, but this preserves the behavior\n     /// of the old type-check for now. See #57280 for details.\n-    crate variance: ty::Variance,\n-    crate user_ty_span: Span,\n+    pub variance: ty::Variance,\n+    pub user_ty_span: Span,\n }\n \n #[derive(Clone, Debug, PartialEq)]\n-crate enum PatKind<'tcx> {\n+pub enum PatKind<'tcx> {\n     Wild,\n \n     AscribeUserType {\n@@ -195,10 +195,10 @@ crate enum PatKind<'tcx> {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-crate struct PatRange<'tcx> {\n-    crate lo: &'tcx ty::Const<'tcx>,\n-    crate hi: &'tcx ty::Const<'tcx>,\n-    crate end: RangeEnd,\n+pub struct PatRange<'tcx> {\n+    pub lo: &'tcx ty::Const<'tcx>,\n+    pub hi: &'tcx ty::Const<'tcx>,\n+    pub end: RangeEnd,\n }\n \n impl<'tcx> fmt::Display for Pat<'tcx> {"}, {"sha": "c1be90efc7299773393741749bdbf0096279b5d1", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -2074,6 +2074,7 @@ fn parse_pretty(\n             (\"hir,identified\", true) => Hir(PpHirMode::Identified),\n             (\"hir,typed\", true) => Hir(PpHirMode::Typed),\n             (\"hir-tree\", true) => HirTree,\n+            (\"thir-tree\", true) => ThirTree,\n             (\"mir\", true) => Mir,\n             (\"mir-cfg\", true) => MirCFG,\n             _ => {\n@@ -2265,6 +2266,8 @@ pub enum PpMode {\n     Hir(PpHirMode),\n     /// `-Zunpretty=hir-tree`\n     HirTree,\n+    /// `-Zunpretty=thir-tree`\n+    ThirTree,\n     /// `-Zunpretty=mir`\n     Mir,\n     /// `-Zunpretty=mir-cfg`\n@@ -2282,6 +2285,7 @@ impl PpMode {\n             | AstTree(PpAstTreeMode::Expanded)\n             | Hir(_)\n             | HirTree\n+            | ThirTree\n             | Mir\n             | MirCFG => true,\n         }"}, {"sha": "8cd4ef7a14e8153f9ed712e0b6a8759cd1e96435", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -231,7 +231,7 @@ impl<T> [T] {\n     ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n-    /// See [`sort_unstable`](#method.sort_unstable).\n+    /// See [`sort_unstable`](slice::sort_unstable).\n     ///\n     /// # Current implementation\n     ///\n@@ -282,7 +282,7 @@ impl<T> [T] {\n     ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n-    /// See [`sort_unstable_by`](#method.sort_unstable_by).\n+    /// See [`sort_unstable_by`](slice::sort_unstable_by).\n     ///\n     /// # Current implementation\n     ///\n@@ -320,12 +320,12 @@ impl<T> [T] {\n     /// worst-case, where the key function is *O*(*m*).\n     ///\n     /// For expensive key functions (e.g. functions that are not simple property accesses or\n-    /// basic operations), [`sort_by_cached_key`](#method.sort_by_cached_key) is likely to be\n+    /// basic operations), [`sort_by_cached_key`](slice::sort_by_cached_key) is likely to be\n     /// significantly faster, as it does not recompute element keys.\n     ///\n     /// When applicable, unstable sorting is preferred because it is generally faster than stable\n     /// sorting and it doesn't allocate auxiliary memory.\n-    /// See [`sort_unstable_by_key`](#method.sort_unstable_by_key).\n+    /// See [`sort_unstable_by_key`](slice::sort_unstable_by_key).\n     ///\n     /// # Current implementation\n     ///\n@@ -363,7 +363,7 @@ impl<T> [T] {\n     /// worst-case, where the key function is *O*(*m*).\n     ///\n     /// For simple key functions (e.g., functions that are property accesses or\n-    /// basic operations), [`sort_by_key`](#method.sort_by_key) is likely to be\n+    /// basic operations), [`sort_by_key`](slice::sort_by_key) is likely to be\n     /// faster.\n     ///\n     /// # Current implementation"}, {"sha": "2fbbeb35e1d9d16ebe83cc669305911d54cdbc20", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -378,7 +378,7 @@ impl<T> Cell<T> {\n         }\n     }\n \n-    /// Replaces the contained value, and returns it.\n+    /// Replaces the contained value with `val`, and returns the old contained value.\n     ///\n     /// # Examples\n     ///"}, {"sha": "417a106b99a2ef9384ead64eb64336293023d1fb", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 59, "deletions": 53, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -308,7 +308,7 @@ impl<T> [T] {\n     /// Returns a mutable reference to an element or subslice depending on the\n     /// type of index (see [`get`]) or `None` if the index is out of bounds.\n     ///\n-    /// [`get`]: #method.get\n+    /// [`get`]: slice::get\n     ///\n     /// # Examples\n     ///\n@@ -339,7 +339,7 @@ impl<T> [T] {\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n     ///\n-    /// [`get`]: #method.get\n+    /// [`get`]: slice::get\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n@@ -373,7 +373,7 @@ impl<T> [T] {\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n     ///\n-    /// [`get_mut`]: #method.get_mut\n+    /// [`get_mut`]: slice::get_mut\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n@@ -424,7 +424,7 @@ impl<T> [T] {\n     /// }\n     /// ```\n     ///\n-    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    /// [`as_mut_ptr`]: slice::as_mut_ptr\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_slice_as_ptr\", since = \"1.32.0\")]\n     #[inline]\n@@ -487,7 +487,7 @@ impl<T> [T] {\n     /// assert!(!a.as_ptr_range().contains(&y));\n     /// ```\n     ///\n-    /// [`as_ptr`]: #method.as_ptr\n+    /// [`as_ptr`]: slice::as_ptr\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n@@ -529,7 +529,7 @@ impl<T> [T] {\n     /// use two pointers to refer to a range of elements in memory, as is\n     /// common in C++.\n     ///\n-    /// [`as_mut_ptr`]: #method.as_mut_ptr\n+    /// [`as_mut_ptr`]: slice::as_mut_ptr\n     #[stable(feature = \"slice_ptr_range\", since = \"1.48.0\")]\n     #[rustc_const_unstable(feature = \"const_ptr_offset\", issue = \"71499\")]\n     #[inline]\n@@ -780,8 +780,8 @@ impl<T> [T] {\n     /// assert!(iter.next().is_none());\n     /// ```\n     ///\n-    /// [`chunks_exact`]: #method.chunks_exact\n-    /// [`rchunks`]: #method.rchunks\n+    /// [`chunks_exact`]: slice::chunks_exact\n+    /// [`rchunks`]: slice::rchunks\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n@@ -818,8 +818,8 @@ impl<T> [T] {\n     /// assert_eq!(v, &[1, 1, 2, 2, 3]);\n     /// ```\n     ///\n-    /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n-    /// [`rchunks_mut`]: #method.rchunks_mut\n+    /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n+    /// [`rchunks_mut`]: slice::rchunks_mut\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n@@ -855,8 +855,8 @@ impl<T> [T] {\n     /// assert_eq!(iter.remainder(), &['m']);\n     /// ```\n     ///\n-    /// [`chunks`]: #method.chunks\n-    /// [`rchunks_exact`]: #method.rchunks_exact\n+    /// [`chunks`]: slice::chunks\n+    /// [`rchunks_exact`]: slice::rchunks_exact\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n@@ -897,8 +897,8 @@ impl<T> [T] {\n     /// assert_eq!(v, &[1, 1, 2, 2, 0]);\n     /// ```\n     ///\n-    /// [`chunks_mut`]: #method.chunks_mut\n-    /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n+    /// [`chunks_mut`]: slice::chunks_mut\n+    /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n@@ -1032,7 +1032,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.remainder(), &['m']);\n     /// ```\n     ///\n-    /// [`chunks_exact`]: #method.chunks_exact\n+    /// [`chunks_exact`]: slice::chunks_exact\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n@@ -1182,7 +1182,7 @@ impl<T> [T] {\n     /// assert_eq!(v, &[1, 1, 2, 2, 0]);\n     /// ```\n     ///\n-    /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n+    /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n@@ -1214,7 +1214,7 @@ impl<T> [T] {\n     /// assert!(iter.next().is_none());\n     /// ```\n     ///\n-    /// [`windows`]: #method.windows\n+    /// [`windows`]: slice::windows\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n@@ -1247,8 +1247,8 @@ impl<T> [T] {\n     /// assert!(iter.next().is_none());\n     /// ```\n     ///\n-    /// [`rchunks_exact`]: #method.rchunks_exact\n-    /// [`chunks`]: #method.chunks\n+    /// [`rchunks_exact`]: slice::rchunks_exact\n+    /// [`chunks`]: slice::chunks\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks(&self, chunk_size: usize) -> RChunks<'_, T> {\n@@ -1285,8 +1285,8 @@ impl<T> [T] {\n     /// assert_eq!(v, &[3, 2, 2, 1, 1]);\n     /// ```\n     ///\n-    /// [`rchunks_exact_mut`]: #method.rchunks_exact_mut\n-    /// [`chunks_mut`]: #method.chunks_mut\n+    /// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n+    /// [`chunks_mut`]: slice::chunks_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_mut(&mut self, chunk_size: usize) -> RChunksMut<'_, T> {\n@@ -1323,9 +1323,9 @@ impl<T> [T] {\n     /// assert_eq!(iter.remainder(), &['l']);\n     /// ```\n     ///\n-    /// [`chunks`]: #method.chunks\n-    /// [`rchunks`]: #method.rchunks\n-    /// [`chunks_exact`]: #method.chunks_exact\n+    /// [`chunks`]: slice::chunks\n+    /// [`rchunks`]: slice::rchunks\n+    /// [`chunks_exact`]: slice::chunks_exact\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact(&self, chunk_size: usize) -> RChunksExact<'_, T> {\n@@ -1366,9 +1366,9 @@ impl<T> [T] {\n     /// assert_eq!(v, &[0, 2, 2, 1, 1]);\n     /// ```\n     ///\n-    /// [`chunks_mut`]: #method.chunks_mut\n-    /// [`rchunks_mut`]: #method.rchunks_mut\n-    /// [`chunks_exact_mut`]: #method.chunks_exact_mut\n+    /// [`chunks_mut`]: slice::chunks_mut\n+    /// [`rchunks_mut`]: slice::rchunks_mut\n+    /// [`chunks_exact_mut`]: slice::chunks_exact_mut\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n     #[inline]\n     pub fn rchunks_exact_mut(&mut self, chunk_size: usize) -> RChunksExactMut<'_, T> {\n@@ -1552,7 +1552,7 @@ impl<T> [T] {\n     /// even if the resulting reference is not used. The caller has to ensure that\n     /// `0 <= mid <= self.len()`.\n     ///\n-    /// [`split_at`]: #method.split_at\n+    /// [`split_at`]: slice::split_at\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n@@ -1601,7 +1601,7 @@ impl<T> [T] {\n     /// even if the resulting reference is not used. The caller has to ensure that\n     /// `0 <= mid <= self.len()`.\n     ///\n-    /// [`split_at_mut`]: #method.split_at_mut\n+    /// [`split_at_mut`]: slice::split_at_mut\n     /// [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html\n     ///\n     /// # Examples\n@@ -2103,9 +2103,9 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search_by`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`binary_search_by`]: #method.binary_search_by\n-    /// [`binary_search_by_key`]: #method.binary_search_by_key\n-    /// [`partition_point`]: #method.partition_point\n+    /// [`binary_search_by`]: slice::binary_search_by\n+    /// [`binary_search_by_key`]: slice::binary_search_by_key\n+    /// [`partition_point`]: slice::partition_point\n     ///\n     /// # Examples\n     ///\n@@ -2156,9 +2156,9 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by_key`], and [`partition_point`].\n     ///\n-    /// [`binary_search`]: #method.binary_search\n-    /// [`binary_search_by_key`]: #method.binary_search_by_key\n-    /// [`partition_point`]: #method.partition_point\n+    /// [`binary_search`]: slice::binary_search\n+    /// [`binary_search_by_key`]: slice::binary_search_by_key\n+    /// [`partition_point`]: slice::partition_point\n     ///\n     /// # Examples\n     ///\n@@ -2225,10 +2225,10 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`partition_point`].\n     ///\n-    /// [`sort_by_key`]: #method.sort_by_key\n-    /// [`binary_search`]: #method.binary_search\n-    /// [`binary_search_by`]: #method.binary_search_by\n-    /// [`partition_point`]: #method.partition_point\n+    /// [`sort_by_key`]: slice::sort_by_key\n+    /// [`binary_search`]: slice::binary_search\n+    /// [`binary_search_by`]: slice::binary_search_by\n+    /// [`partition_point`]: slice::partition_point\n     ///\n     /// # Examples\n     ///\n@@ -2248,6 +2248,12 @@ impl<T> [T] {\n     /// let r = s.binary_search_by_key(&1, |&(a, b)| b);\n     /// assert!(match r { Ok(1..=4) => true, _ => false, });\n     /// ```\n+    // Lint rustdoc::broken_intra_doc_links is allowed as `slice::sort_by_key` is\n+    // in crate `alloc`, and as such doesn't exists yet when building `core`.\n+    // links to downstream crate: #74481. Since primitives are only documented in\n+    // libstd (#73423), this never leads to broken links in practice.\n+    #[cfg_attr(not(bootstrap), allow(rustdoc::broken_intra_doc_links))]\n+    #[cfg_attr(bootstrap, allow(broken_intra_doc_links))]\n     #[stable(feature = \"slice_binary_search_by_key\", since = \"1.10.0\")]\n     #[inline]\n     pub fn binary_search_by_key<'a, B, F>(&'a self, b: &B, mut f: F) -> Result<usize, usize>\n@@ -2446,7 +2452,7 @@ impl<T> [T] {\n     /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n     /// used for [`sort_unstable`].\n     ///\n-    /// [`sort_unstable`]: #method.sort_unstable\n+    /// [`sort_unstable`]: slice::sort_unstable\n     ///\n     /// # Panics\n     ///\n@@ -2494,7 +2500,7 @@ impl<T> [T] {\n     /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n     /// used for [`sort_unstable`].\n     ///\n-    /// [`sort_unstable`]: #method.sort_unstable\n+    /// [`sort_unstable`]: slice::sort_unstable\n     ///\n     /// # Panics\n     ///\n@@ -2546,7 +2552,7 @@ impl<T> [T] {\n     /// The current algorithm is based on the quickselect portion of the same quicksort algorithm\n     /// used for [`sort_unstable`].\n     ///\n-    /// [`sort_unstable`]: #method.sort_unstable\n+    /// [`sort_unstable`]: slice::sort_unstable\n     ///\n     /// # Panics\n     ///\n@@ -2883,7 +2889,7 @@ impl<T> [T] {\n     /// trait to generate values, you can pass [`Default::default`] as the\n     /// argument.\n     ///\n-    /// [`fill`]: #method.fill\n+    /// [`fill`]: slice::fill\n     ///\n     /// # Examples\n     ///\n@@ -2956,8 +2962,8 @@ impl<T> [T] {\n     /// assert_eq!(slice, [4, 5, 3, 4, 5]);\n     /// ```\n     ///\n-    /// [`copy_from_slice`]: #method.copy_from_slice\n-    /// [`split_at_mut`]: #method.split_at_mut\n+    /// [`copy_from_slice`]: slice::copy_from_slice\n+    /// [`split_at_mut`]: slice::split_at_mut\n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     pub fn clone_from_slice(&mut self, src: &[T])\n     where\n@@ -3018,8 +3024,8 @@ impl<T> [T] {\n     /// assert_eq!(slice, [4, 5, 3, 4, 5]);\n     /// ```\n     ///\n-    /// [`clone_from_slice`]: #method.clone_from_slice\n-    /// [`split_at_mut`]: #method.split_at_mut\n+    /// [`clone_from_slice`]: slice::clone_from_slice\n+    /// [`split_at_mut`]: slice::split_at_mut\n     #[doc(alias = \"memcpy\")]\n     #[stable(feature = \"copy_from_slice\", since = \"1.9.0\")]\n     pub fn copy_from_slice(&mut self, src: &[T])\n@@ -3136,7 +3142,7 @@ impl<T> [T] {\n     /// assert_eq!(slice, [4, 5, 3, 1, 2]);\n     /// ```\n     ///\n-    /// [`split_at_mut`]: #method.split_at_mut\n+    /// [`split_at_mut`]: slice::split_at_mut\n     #[stable(feature = \"swap_with_slice\", since = \"1.27.0\")]\n     pub fn swap_with_slice(&mut self, other: &mut [T]) {\n         assert!(self.len() == other.len(), \"destination and source slices have different lengths\");\n@@ -3380,7 +3386,7 @@ impl<T> [T] {\n     /// function to determine the ordering of two elements. Apart from that, it's equivalent to\n     /// [`is_sorted`]; see its documentation for more information.\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: slice::is_sorted\n     #[unstable(feature = \"is_sorted\", reason = \"new API\", issue = \"53485\")]\n     pub fn is_sorted_by<F>(&self, mut compare: F) -> bool\n     where\n@@ -3395,7 +3401,7 @@ impl<T> [T] {\n     /// elements, as determined by `f`. Apart from that, it's equivalent to [`is_sorted`]; see its\n     /// documentation for more information.\n     ///\n-    /// [`is_sorted`]: #method.is_sorted\n+    /// [`is_sorted`]: slice::is_sorted\n     ///\n     /// # Examples\n     ///\n@@ -3429,9 +3435,9 @@ impl<T> [T] {\n     ///\n     /// See also [`binary_search`], [`binary_search_by`], and [`binary_search_by_key`].\n     ///\n-    /// [`binary_search`]: #method.binary_search\n-    /// [`binary_search_by`]: #method.binary_search_by\n-    /// [`binary_search_by_key`]: #method.binary_search_by_key\n+    /// [`binary_search`]: slice::binary_search\n+    /// [`binary_search_by`]: slice::binary_search_by\n+    /// [`binary_search_by_key`]: slice::binary_search_by_key\n     ///\n     /// # Examples\n     ///"}, {"sha": "06f4df9a9b6da258f666727b441ed61b8e2814ab", "filename": "src/doc/rust.css", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Fdoc%2Frust.css", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Fdoc%2Frust.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.css?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -332,6 +332,7 @@ table th {\n \n /* Code snippets */\n \n+.example-wrap { position: relative; }\n pre.rust { position: relative; }\n a.test-arrow {\n \tbackground-color: rgba(78, 139, 202, 0.2);"}, {"sha": "56fee2c9fec2d78aae62a79afd4ab409ff2100bf", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 54, "deletions": 6, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -4,7 +4,7 @@ use std::path::Path;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_middle::ty::TyCtxt;\n use rustc_span::symbol::{sym, Symbol};\n-use serde::Serialize;\n+use serde::ser::{Serialize, SerializeStruct, Serializer};\n \n use crate::clean::types::{\n     FnDecl, FnRetTy, GenericBound, Generics, GetDefId, Type, TypeKind, WherePredicate,\n@@ -133,21 +133,69 @@ crate fn build_index<'tcx>(krate: &clean::Crate, cache: &mut Cache, tcx: TyCtxt<\n         .map(|module| module.doc_value().map_or_else(String::new, |s| short_markdown_summary(&s)))\n         .unwrap_or_default();\n \n-    #[derive(Serialize)]\n     struct CrateData<'a> {\n         doc: String,\n-        #[serde(rename = \"i\")]\n         items: Vec<&'a IndexItem>,\n-        #[serde(rename = \"p\")]\n         paths: Vec<(ItemType, String)>,\n         // The String is alias name and the vec is the list of the elements with this alias.\n         //\n         // To be noted: the `usize` elements are indexes to `items`.\n-        #[serde(rename = \"a\")]\n-        #[serde(skip_serializing_if = \"BTreeMap::is_empty\")]\n         aliases: &'a BTreeMap<String, Vec<usize>>,\n     }\n \n+    impl<'a> Serialize for CrateData<'a> {\n+        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n+        where\n+            S: Serializer,\n+        {\n+            let has_aliases = !self.aliases.is_empty();\n+            let mut crate_data =\n+                serializer.serialize_struct(\"CrateData\", if has_aliases { 9 } else { 8 })?;\n+            crate_data.serialize_field(\"doc\", &self.doc)?;\n+            crate_data.serialize_field(\n+                \"t\",\n+                &self.items.iter().map(|item| &item.ty).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"n\",\n+                &self.items.iter().map(|item| &item.name).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"q\",\n+                &self.items.iter().map(|item| &item.path).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"d\",\n+                &self.items.iter().map(|item| &item.desc).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"i\",\n+                &self\n+                    .items\n+                    .iter()\n+                    .map(|item| {\n+                        assert_eq!(\n+                            item.parent.is_some(),\n+                            item.parent_idx.is_some(),\n+                            \"`{}` is missing idx\",\n+                            item.name\n+                        );\n+                        item.parent_idx.map(|x| x + 1).unwrap_or(0)\n+                    })\n+                    .collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\n+                \"f\",\n+                &self.items.iter().map(|item| &item.search_type).collect::<Vec<_>>(),\n+            )?;\n+            crate_data.serialize_field(\"p\", &self.paths)?;\n+            if has_aliases {\n+                crate_data.serialize_field(\"a\", &self.aliases)?;\n+            }\n+            crate_data.end()\n+        }\n+    }\n+\n     // Collect the index into a string\n     format!(\n         r#\"\"{}\":{}\"#,"}, {"sha": "66c47f14655baaea4a1c607e4655b4e0fb1740c3", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -166,23 +166,6 @@ crate struct IndexItem {\n     crate search_type: Option<IndexItemFunctionType>,\n }\n \n-impl Serialize for IndexItem {\n-    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>\n-    where\n-        S: Serializer,\n-    {\n-        assert_eq!(\n-            self.parent.is_some(),\n-            self.parent_idx.is_some(),\n-            \"`{}` is missing idx\",\n-            self.name\n-        );\n-\n-        (self.ty, &self.name, &self.path, &self.desc, self.parent_idx, &self.search_type)\n-            .serialize(serializer)\n-    }\n-}\n-\n /// A type used for the search index.\n #[derive(Debug)]\n crate struct RenderType {"}, {"sha": "ac2da5f779bd1dfb1ef207961402aa8aed4d489f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -1847,13 +1847,18 @@ function defocusSearchBar() {\n                 });\n                 currentIndex += 1;\n \n-                // an array of [(Number) item type,\n-                //              (String) name,\n-                //              (String) full path or empty string for previous path,\n-                //              (String) description,\n-                //              (Number | null) the parent path index to `paths`]\n-                //              (Object | null) the type of the function (if any)\n-                var items = rawSearchIndex[crate].i;\n+                // an array of (Number) item types\n+                var itemTypes = rawSearchIndex[crate].t;\n+                // an array of (String) item names\n+                var itemNames = rawSearchIndex[crate].n;\n+                // an array of (String) full paths (or empty string for previous path)\n+                var itemPaths = rawSearchIndex[crate].q;\n+                // an array of (String) descriptions\n+                var itemDescs = rawSearchIndex[crate].d;\n+                // an array of (Number) the parent path index + 1 to `paths`, or 0 if none\n+                var itemParentIdxs = rawSearchIndex[crate].i;\n+                // an array of (Object | null) the type of the function, if any\n+                var itemFunctionSearchTypes = rawSearchIndex[crate].f;\n                 // an array of [(Number) item type,\n                 //              (String) name]\n                 var paths = rawSearchIndex[crate].p;\n@@ -1867,28 +1872,24 @@ function defocusSearchBar() {\n                     paths[i] = {ty: paths[i][0], name: paths[i][1]};\n                 }\n \n-                // convert `items` into an object form, and construct word indices.\n+                // convert `item*` into an object form, and construct word indices.\n                 //\n                 // before any analysis is performed lets gather the search terms to\n                 // search against apart from the rest of the data.  This is a quick\n                 // operation that is cached for the life of the page state so that\n                 // all other search operations have access to this cached data for\n                 // faster analysis operations\n-                len = items.length;\n+                len = itemTypes.length;\n                 var lastPath = \"\";\n                 for (i = 0; i < len; ++i) {\n-                    var rawRow = items[i];\n-                    if (!rawRow[2]) {\n-                        rawRow[2] = lastPath;\n-                    }\n                     var row = {\n                         crate: crate,\n-                        ty: rawRow[0],\n-                        name: rawRow[1],\n-                        path: rawRow[2],\n-                        desc: rawRow[3],\n-                        parent: paths[rawRow[4]],\n-                        type: rawRow[5],\n+                        ty: itemTypes[i],\n+                        name: itemNames[i],\n+                        path: itemPaths[i] ? itemPaths[i] : lastPath,\n+                        desc: itemDescs[i],\n+                        parent: itemParentIdxs[i] > 0 ? paths[itemParentIdxs[i] - 1] : undefined,\n+                        type: itemFunctionSearchTypes[i],\n                     };\n                     searchIndex.push(row);\n                     if (typeof row.name === \"string\") {"}, {"sha": "27f1ea78ad2f4faf504db438d151b89de62088bf", "filename": "src/librustdoc/html/static/rustdoc.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Frustdoc.css?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -347,10 +347,10 @@ nav.sub {\n .rustdoc:not(.source) .example-wrap {\n \tdisplay: inline-flex;\n \tmargin-bottom: 10px;\n-\tposition: relative;\n }\n \n .example-wrap {\n+\tposition: relative;\n \twidth: 100%;\n }\n "}, {"sha": "831c185f6b136d1f45735d14017cc1b0a3f63396", "filename": "src/test/rustdoc-json/reexport/glob_extern.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_extern.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @!has glob_extern.json \"$.index[*][?(@.name=='mod1')]\"\n+mod mod1 {\n+    extern \"C\" {\n+        // @set public_fn_id = - \"$.index[*][?(@.name=='public_fn')].id\"\n+        pub fn public_fn();\n+        // @!has - \"$.index[*][?(@.name=='private_fn')]\"\n+        fn private_fn();\n+    }\n+}\n+\n+// @has - \"$.index[*][?(@.name=='glob_extern')].inner.items[*]\" $public_fn_id\n+pub use mod1::*;"}, {"sha": "e907de9236776fc209d3be17525e8913f5279b89", "filename": "src/test/rustdoc-json/reexport/glob_private.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fglob_private.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -0,0 +1,27 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @!has glob_private.json \"$.index[*][?(@.name=='mod1')]\"\n+mod mod1 {\n+    // @!has - \"$.index[*][?(@.name=='mod2')]\"\n+    mod mod2 {\n+        // @set m2pub_id = - \"$.index[*][?(@.name=='Mod2Public')].id\"\n+        pub struct Mod2Public;\n+\n+        // @!has - \"$.index[*][?(@.name=='Mod2Private')]\"\n+        struct Mod2Private;\n+    }\n+    pub use self::mod2::*;\n+\n+    // @set m1pub_id = - \"$.index[*][?(@.name=='Mod1Public')].id\"\n+    pub struct Mod1Public;\n+\n+    // @!has - \"$.index[*][?(@.name=='Mod1Private')]\"\n+    struct Mod1Private;\n+}\n+pub use mod1::*;\n+\n+// @has - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $m2pub_id\n+// @has - \"$.index[*][?(@.name=='glob_private')].inner.items[*]\" $m1pub_id"}, {"sha": "8c2d7200d0c01fa050f22e66918b59aeb194fe6d", "filename": "src/test/rustdoc-json/reexport/rename_public.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Frename_public.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -0,0 +1,17 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @set inner_id = rename_public.json \"$.index[*][?(@.name=='inner')].id\"\n+// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $inner_id\n+pub mod inner {\n+    // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n+    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    pub struct Public;\n+}\n+// @set import_id = - \"$.index[*][?(@.inner.name=='NewName')].id\"\n+// @!has - \"$.index[*][?(@.inner.name=='Public')]\"\n+// @has - \"$.index[*][?(@.name=='rename_public')].inner.items[*]\" $import_id\n+// @is - \"$.index[*][?(@.inner.name=='NewName')].inner.span\" \\\"inner::Public\\\"\n+pub use inner::Public as NewName;"}, {"sha": "658b121e6ce97d46e1983b8e3ecfbe86272a7c47", "filename": "src/test/rustdoc-json/reexport/simple_private.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_private.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -0,0 +1,13 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @!has simple_private.json \"$.index[*][?(@.name=='inner')]\"\n+mod inner {\n+    // @set pub_id = - \"$.index[*][?(@.name=='Public')].id\"\n+    pub struct Public;\n+}\n+\n+// @has - \"$.index[*][?(@.name=='simple_private')].inner.items[*]\" $pub_id\n+pub use inner::Public;"}, {"sha": "0c97a2e7b40a212a32efcbe7d52a1b6e0e8a671f", "filename": "src/test/rustdoc-json/reexport/simple_public.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsimple_public.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -0,0 +1,18 @@\n+// edition:2018\n+\n+#![no_core]\n+#![feature(no_core)]\n+\n+// @set inner_id = simple_public.json \"$.index[*][?(@.name=='inner')].id\"\n+// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $inner_id\n+pub mod inner {\n+\n+    // @set public_id = - \"$.index[*][?(@.name=='Public')].id\"\n+    // @has - \"$.index[*][?(@.name=='inner')].inner.items[*]\" $public_id\n+    pub struct Public;\n+}\n+\n+// @set import_id = - \"$.index[*][?(@.inner.name=='Public')].id\"\n+// @has - \"$.index[*][?(@.name=='simple_public')].inner.items[*]\" $import_id\n+// @is - \"$.index[*][?(@.inner.name=='Public')].inner.span\" \\\"inner::Public\\\"\n+pub use inner::Public;"}, {"sha": "8290711418e63d3706e6a6d589b38c467629e2a4", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -2069,6 +2069,8 @@ impl<'test> TestCx<'test> {\n             f = f.with_extra_extension(\"js\");\n         } else if self.config.target.contains(\"wasm32\") {\n             f = f.with_extra_extension(\"wasm\");\n+        } else if self.config.target.contains(\"spirv\") {\n+            f = f.with_extra_extension(\"spv\");\n         } else if !env::consts::EXE_SUFFIX.is_empty() {\n             f = f.with_extra_extension(env::consts::EXE_SUFFIX);\n         }"}, {"sha": "bcb3f6922efaabe02ca480b930a439e8b0a75cb3", "filename": "src/tools/jsondocck/src/main.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondocck%2Fsrc%2Fmain.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -205,7 +205,21 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n                     let val = cache.get_value(&command.args[0])?;\n                     let results = select(&val, &command.args[1]).unwrap();\n                     let pat = string_to_value(&command.args[2], cache);\n-                    results.contains(&pat.as_ref())\n+                    let has = results.contains(&pat.as_ref());\n+                    // Give better error for when @has check fails\n+                    if !command.negated && !has {\n+                        return Err(CkError::FailedCheck(\n+                            format!(\n+                                \"{} matched to {:?} but didn't have {:?}\",\n+                                &command.args[1],\n+                                results,\n+                                pat.as_ref()\n+                            ),\n+                            command,\n+                        ));\n+                    } else {\n+                        has\n+                    }\n                 }\n                 _ => unreachable!(),\n             }\n@@ -233,7 +247,13 @@ fn check_command(command: Command, cache: &mut Cache) -> Result<(), CkError> {\n             assert_eq!(command.args[1], \"=\", \"Expected an `=`\");\n             let val = cache.get_value(&command.args[2])?;\n             let results = select(&val, &command.args[3]).unwrap();\n-            assert_eq!(results.len(), 1);\n+            assert_eq!(\n+                results.len(),\n+                1,\n+                \"Didn't get 1 result for `{}`: got {:?}\",\n+                command.args[3],\n+                results\n+            );\n             match results.len() {\n                 0 => false,\n                 1 => {"}, {"sha": "f6875e0036f679e14bd16a7fd711feb090d1188e", "filename": "src/tools/linkchecker/main.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Flinkchecker%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b996e1c628e8089f058244b011a2ee945a8984/src%2Ftools%2Flinkchecker%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Flinkchecker%2Fmain.rs?ref=77b996e1c628e8089f058244b011a2ee945a8984", "patch": "@@ -33,11 +33,6 @@ use crate::Redirect::*;\n // are cases where that does not work\n // [(generated_documentation_page, &[broken_links])]\n const LINKCHECK_EXCEPTIONS: &[(&str, &[&str])] = &[\n-    // These are methods on slice, and `Self` does not work on primitive impls\n-    // in intra-doc links (primitive impls are weird)\n-    // https://github.com/rust-lang/rust/issues/62834 is necessary to be\n-    // able to link to slices\n-    (\"std/io/struct.IoSlice.html\", &[\"#method.as_mut_ptr\", \"#method.sort_by_key\"]),\n     // These try to link to std::collections, but are defined in alloc\n     // https://github.com/rust-lang/rust/issues/74481\n     (\"std/collections/btree_map/struct.BTreeMap.html\", &[\"#insert-and-complex-keys\"]),"}]}