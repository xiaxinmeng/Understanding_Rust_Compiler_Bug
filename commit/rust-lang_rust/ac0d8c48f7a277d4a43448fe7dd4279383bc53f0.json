{"sha": "ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMGQ4YzQ4ZjdhMjc3ZDRhNDM0NDhmZTdkZDQyNzkzODNiYzUzZjA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T18:58:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T18:58:49Z"}, "message": "JS plugin", "tree": {"sha": "5fe6d1f761f15d1e2d63fc4e9be0c16e2f0b3d93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fe6d1f761f15d1e2d63fc4e9be0c16e2f0b3d93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "html_url": "https://github.com/rust-lang/rust/commit/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fc66c4ee667da871ea1f0c8b48b5e9b7373a187", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fc66c4ee667da871ea1f0c8b48b5e9b7373a187", "html_url": "https://github.com/rust-lang/rust/commit/6fc66c4ee667da871ea1f0c8b48b5e9b7373a187"}], "stats": {"total": 3775, "additions": 3772, "deletions": 3}, "files": [{"sha": "c3f44bc4978e92fb3a9969c938d0e795cb83d93d", "filename": "code/.gitignore", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.gitignore?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,6 @@\n+target\n+index.node\n+artifacts.json\n+*.vsix\n+out/*\n+node_modules/*"}, {"sha": "ac8f24bde2b33d34ca2237fb917e3b03ef4d084e", "filename": "code/.npmrc", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.npmrc", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.npmrc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.npmrc?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,4 @@\n+runtime = electron\n+target = 1.7.9\n+target_arch = x64\n+disturl = https://atom.io/download/atom-shell"}, {"sha": "5d75a92e86fd61f0593722835e493a1209112cfd", "filename": "code/.vscode/launch.json", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Flaunch.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Flaunch.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Flaunch.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,19 @@\n+{\n+    // Use IntelliSense to learn about possible attributes.\n+    // Hover to view descriptions of existing attributes.\n+    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n+    \"version\": \"0.2.0\",\n+    \"configurations\": [\n+        {\n+            \"name\": \"Launch Extension\",\n+            \"type\": \"extensionHost\",\n+            \"request\": \"launch\",\n+            \"runtimeExecutable\": \"${execPath}\",\n+            \"args\": [\"--extensionDevelopmentPath=${workspaceRoot}\" ],\n+            \"stopOnEntry\": false,\n+            \"sourceMaps\": true,\n+            \"outFiles\": [ \"${workspaceRoot}/out/src/**/*.js\" ],\n+            \"preLaunchTask\": \"npm\"\n+        },\n+    ]\n+}"}, {"sha": "580db9c6ae9570b0d5b8dd2be260837d0c6c17f1", "filename": "code/.vscode/settings.json", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Fsettings.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Fsettings.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Fsettings.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,10 @@\n+// Place your settings in this file to overwrite default and user settings.\n+{\n+    \"files.exclude\": {\n+        \"out\": true,\n+        \"node_modules\": true\n+    },\n+    \"search.exclude\": {\n+        \"out\": true // set this to false to include \"out\" folder in search results\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "8e5a8b9efa7dd245241be26a41abc11d1eb69bfc", "filename": "code/.vscode/tasks.json", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Ftasks.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2F.vscode%2Ftasks.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2F.vscode%2Ftasks.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,31 @@\n+\n+// Available variables which can be used inside of strings.\n+// ${workspaceRoot}: the root folder of the team\n+// ${file}: the current opened file\n+// ${fileBasename}: the current opened file's basename\n+// ${fileDirname}: the current opened file's dirname\n+// ${fileExtname}: the current opened file's extension\n+// ${cwd}: the current working directory of the spawned process\n+\n+// A task runner that calls a custom npm script that compiles the extension.\n+{\n+    \"version\": \"0.2.0\",\n+\n+    // we want to run npm\n+    \"command\": \"npm\",\n+\n+    // the command is a shell script\n+    \"isShellCommand\": true,\n+\n+    // show the output window only if unrecognized errors occur.\n+    \"showOutput\": \"silent\",\n+\n+    // we run the custom script \"compile\" as defined in package.json\n+    \"args\": [\"run\", \"compile\", \"--loglevel\", \"silent\"],\n+\n+    // The tsc compiler is started in watching mode\n+    \"isBackground\": true,\n+\n+    // use the standard tsc in watch mode problem matcher to find compile problems in the output.\n+    \"problemMatcher\": \"$tsc-watch\"\n+}"}, {"sha": "dfd49833d942180dfd3309e93a24198df6274b8b", "filename": "code/common.ts", "status": "added", "additions": 278, "deletions": 0, "changes": 278, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fcommon.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fcommon.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fcommon.ts?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,278 @@\n+import * as vscode from 'vscode'\n+import { log } from 'util'\n+\n+export function createPlugin(\n+    backend,\n+    fileExtension: string,\n+    disposables: vscode.Disposable[],\n+    doHighlighting: boolean = false,\n+    diganosticCollection: vscode.DiagnosticCollection | null = null\n+) {\n+    let uris = {\n+        syntaxTree: vscode.Uri.parse(`fall-${fileExtension}://syntaxtree`),\n+        metrics: vscode.Uri.parse(`fall-${fileExtension}://metrics`)\n+    }\n+\n+    function updateActiveEditor() {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null) return\n+        let file = currentFile()\n+        if (file == null) return\n+        if (doHighlighting) {\n+            setHighlights(editor, file.highlight())\n+        }\n+        if (diganosticCollection != null) {\n+            diganosticCollection.clear()\n+            diganosticCollection.set(\n+                editor.document.uri,\n+                file.diagnostics()\n+            )\n+        }\n+    }\n+\n+\n+    function currentFile(): EditorFile | null {\n+        let editor = vscode.window.activeTextEditor\n+        if (editor == null) return\n+        let doc = editor.document\n+        return getFile(doc)\n+    }\n+\n+    vscode.window.onDidChangeActiveTextEditor(updateActiveEditor)\n+    let cmd = vscode.commands.registerCommand(`fall-${fileExtension}.applyContextAction`, (range, id) => {\n+        let file = currentFile()\n+        if (file == null) return\n+        return file.applyContextAction(range, id)\n+    })\n+    disposables.push(cmd)\n+\n+    return {\n+        getFile: getFile,\n+        showSyntaxTree: () => {\n+            let file = currentFile()\n+            if (file == null) return\n+            return openDoc(uris.syntaxTree)\n+        },\n+        metrics: () => {\n+            let file = currentFile()\n+            if (file == null) return\n+            return openDoc(uris.metrics)\n+        },\n+        extendSelection: () => {\n+            let editor = vscode.window.activeTextEditor\n+            let file = currentFile()\n+            if (editor == null || file == null) return\n+            editor.selections = editor.selections.map((s) => {\n+                let range = file.extendSelection(s)\n+                return new vscode.Selection(range.start, range.end)\n+            })\n+        },\n+        documentSymbolsProvider: new DocumentSymbolProvider(getFile),\n+        documentFormattingEditProvider: new DocumentFormattingEditProvider(getFile),\n+        codeActionProvider: new CodeActionProvider(getFile, fileExtension)\n+    }\n+}\n+\n+\n+export interface FileStructureNode {\n+    name: string\n+    range: [number, number]\n+    children: [FileStructureNode]\n+}\n+\n+export interface FallDiagnostic {\n+    range: [number, number]\n+    severity: string\n+    message: string\n+}\n+\n+export class EditorFile {\n+    backend;\n+    imp;\n+    doc: vscode.TextDocument;\n+\n+    constructor(backend, imp, doc: vscode.TextDocument) {\n+        this.backend = backend\n+        this.imp = imp\n+        this.doc = doc\n+    }\n+\n+    metrics(): string { return this.call(\"metrics\") }\n+    syntaxTree(): string { return this.call(\"syntaxTree\") }\n+    extendSelection(range_: vscode.Range): vscode.Range | null {\n+        let range = fromVsRange(this.doc, range_)\n+        let exp = this.call(\"extendSelection\", range)\n+        if (exp == null) return null\n+        return toVsRange(this.doc, exp)\n+    }\n+\n+    structure(): Array<FileStructureNode> { return this.call(\"structure\") }\n+    reformat(): Array<vscode.TextEdit> {\n+        let edits = this.call(\"reformat\")\n+        return toVsEdits(this.doc, edits)\n+    }\n+\n+    highlight(): Array<[[number, number], string]> { return this.call(\"highlight\") }\n+    diagnostics(): Array<vscode.Diagnostic> {\n+        return this.call(\"diagnostics\").map((d) => {\n+            let range = toVsRange(this.doc, d.range)\n+            let severity = d.severity == \"Error\"\n+                ? vscode.DiagnosticSeverity.Error\n+                : vscode.DiagnosticSeverity.Warning\n+\n+            return new vscode.Diagnostic(range, d.message, severity)\n+        })\n+    }\n+\n+    contextActions(range_: vscode.Range): Array<string> {\n+        let range = fromVsRange(this.doc, range_)\n+        let result = this.call(\"contextActions\", range)\n+        return result\n+    }\n+\n+    applyContextAction(range_: vscode.Range, id: string) {\n+        let range = fromVsRange(this.doc, range_)\n+        let edits = this.call(\"applyContextAction\", range, id)\n+        let editor = vscode.window.activeTextEditor\n+        return editor.edit((builder) => {\n+            for (let op of edits) {\n+                builder.replace(toVsRange(this.doc, op.delete), op.insert)\n+            }\n+        })\n+    }\n+\n+    call(method: string, ...args) {\n+        let result = this.backend[method](this.imp, ...args)\n+        return result\n+    }\n+}\n+\n+function documentToFile(backend, fileExtension: string, disposables: vscode.Disposable[], onChange) {\n+    let docs = {}\n+    function update(doc: vscode.TextDocument, file) {\n+        let key = doc.uri.toString()\n+        if (file == null) {\n+            delete docs[key]\n+        } else {\n+            docs[key] = file\n+        }\n+        onChange(doc)\n+    }\n+    function get(doc: vscode.TextDocument) {\n+        return docs[doc.uri.toString()]\n+    }\n+\n+    function isKnownDoc(doc: vscode.TextDocument) {\n+        return doc.fileName.endsWith(`.${fileExtension}`)\n+    }\n+\n+    vscode.workspace.onDidChangeTextDocument((event: vscode.TextDocumentChangeEvent) => {\n+        let doc = event.document\n+        if (!isKnownDoc(event.document)) return\n+        let tree = get(doc)\n+        if (event.contentChanges.length == 1 && tree) {\n+            let edits = event.contentChanges.map((change) => {\n+                let start = doc.offsetAt(change.range.start)\n+                return {\n+                    \"delete\": [start, start + change.rangeLength],\n+                    \"insert\": change.text\n+                }\n+            })\n+            update(doc, backend.edit(tree, edits))\n+            return\n+        }\n+        update(doc, null)\n+    }, null, disposables)\n+\n+    vscode.workspace.onDidOpenTextDocument((doc: vscode.TextDocument) => {\n+        if (!isKnownDoc(doc)) return\n+        update(doc, backend.parse(doc.getText()))\n+    }, null, disposables)\n+\n+    vscode.workspace.onDidCloseTextDocument((doc: vscode.TextDocument) => {\n+        update(doc, null)\n+    }, null, disposables)\n+\n+    return (doc: vscode.TextDocument) => {\n+        if (!isKnownDoc(doc)) return null\n+\n+        if (!get(doc)) {\n+            update(doc, backend.parse(doc.getText()))\n+        }\n+        let imp = get(doc)\n+        return new EditorFile(backend, imp, doc)\n+    }\n+}\n+\n+export class DocumentSymbolProvider implements vscode.DocumentSymbolProvider {\n+    getFile: (doc: vscode.TextDocument) => EditorFile | null;\n+    constructor(getFile) {\n+        this.getFile = getFile\n+    }\n+\n+    provideDocumentSymbols(document: vscode.TextDocument, token: vscode.CancellationToken) {\n+        let file = this.getFile(document)\n+        if (file == null) return null\n+        return file.structure().map((node) => {\n+            return new vscode.SymbolInformation(\n+                node.name,\n+                vscode.SymbolKind.Function,\n+                toVsRange(document, node.range),\n+                null,\n+                null\n+            )\n+        })\n+    }\n+}\n+\n+export class DocumentFormattingEditProvider implements vscode.DocumentFormattingEditProvider {\n+    getFile: (doc: vscode.TextDocument) => EditorFile | null;\n+    constructor(getFile) { this.getFile = getFile }\n+\n+    provideDocumentFormattingEdits(\n+        document: vscode.TextDocument,\n+        options: vscode.FormattingOptions,\n+        token: vscode.CancellationToken\n+    ): vscode.TextEdit[] {\n+        let file = this.getFile(document)\n+        if (file == null) return []\n+        return file.reformat()\n+    }\n+}\n+\n+export class CodeActionProvider implements vscode.CodeActionProvider {\n+    fileExtension: string\n+    getFile: (doc: vscode.TextDocument) => EditorFile | null;\n+    constructor(getFile, fileExtension) {\n+        this.getFile = getFile\n+        this.fileExtension = fileExtension\n+    }\n+\n+    provideCodeActions(\n+        document: vscode.TextDocument,\n+        range: vscode.Range,\n+        context: vscode.CodeActionContext,\n+        token: vscode.CancellationToken\n+    ): vscode.Command[] {\n+        let file = this.getFile(document)\n+        if (file == null) return\n+        let actions = file.contextActions(range)\n+        return actions.map((id) => {\n+            return {\n+                title: id,\n+                command: `fall-${this.fileExtension}.applyContextAction`,\n+                arguments: [range, id]\n+            }\n+        })\n+    }\n+}\n+\n+\n+export function toVsEdits(doc: vscode.TextDocument, edits): Array<vscode.TextEdit> {\n+    return edits.map((op) => vscode.TextEdit.replace(toVsRange(doc, op.delete), op.insert))\n+}\n+\n+async function openDoc(uri: vscode.Uri) {\n+    let document = await vscode.workspace.openTextDocument(uri)\n+    vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n+}"}, {"sha": "1648dfb3382195b9e9fb78baea10f215df87a6d3", "filename": "code/native/Cargo.toml", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2FCargo.toml?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,19 @@\n+[package]\n+name = \"backend\"\n+version = \"0.1.0\"\n+authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n+license = \"MIT\"\n+build = \"build.rs\"\n+exclude = [\"artifacts.json\", \"index.node\"]\n+[workspace]\n+\n+[lib]\n+name = \"backend\"\n+crate-type = [\"dylib\"]\n+\n+[build-dependencies]\n+neon-build = \"0.2.0\"\n+\n+[dependencies]\n+neon = \"0.2.0\"\n+libsyntax2 = { path = \"../../\" }"}, {"sha": "687a6619460e768d374855902515d54e52d23a56", "filename": "code/native/build.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2Fbuild.rs?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,7 @@\n+extern crate neon_build;\n+\n+fn main() {\n+    neon_build::setup(); // must be called in build.rs\n+\n+    // add project-specific build logic here...\n+}"}, {"sha": "dcf478cf53e1c9c922564b417b5ccca704f1b51d", "filename": "code/native/src/lib.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fnative%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2Fsrc%2Flib.rs?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,80 @@\n+#[macro_use]\n+extern crate neon;\n+extern crate libsyntax2;\n+\n+use libsyntax2::{\n+    TextRange,\n+    File,\n+    utils::dump_tree,\n+    SyntaxKind::*,\n+};\n+use neon::prelude::*;\n+\n+pub struct Wrapper {\n+    inner: File,\n+}\n+\n+impl Wrapper {\n+    fn highlight(&self) -> Vec<(TextRange, &'static str)> {\n+        let mut res = Vec::new();\n+        self.inner.for_each_node(|node| {\n+            if node.kind() == ERROR {\n+                res.push((node.range(), \"error\"))\n+            }\n+        });\n+        res\n+    }\n+}\n+\n+\n+\n+declare_types! {\n+    /// A class for generating greeting strings.\n+    pub class RustFile for Wrapper {\n+        init(mut cx) {\n+            let text = cx.argument::<JsString>(0)?.value();\n+            Ok(Wrapper {\n+                inner: File::parse(&text)\n+            })\n+        }\n+\n+        method syntaxTree(mut cx) {\n+            let this = cx.this();\n+            let tree = {\n+                let guard = cx.lock();\n+                let wrapper = this.borrow(&guard);\n+                dump_tree(&wrapper.inner.syntax())\n+            };\n+            Ok(cx.string(tree.as_str()).upcast())\n+        }\n+\n+        method highlight(mut cx) {\n+            let this = cx.this();\n+            let highlights = {\n+                let guard = cx.lock();\n+                let wrapper = this.borrow(&guard);\n+                wrapper.highlight()\n+            };\n+            let res = cx.empty_array();\n+            for (i, (range, tag)) in highlights.into_iter().enumerate() {\n+                let start: u32 = range.start().into();\n+                let end: u32 = range.end().into();\n+                let start = cx.number(start);\n+                let end = cx.number(end);\n+                let tag = cx.string(tag);\n+                let hl = cx.empty_array();\n+                hl.set(&mut cx, 0, start)?;\n+                hl.set(&mut cx, 1, end)?;\n+                hl.set(&mut cx, 2, tag)?;\n+                res.set(&mut cx, i as u32, hl)?;\n+            }\n+\n+            Ok(res.upcast())\n+        }\n+    }\n+\n+}\n+\n+register_module!(mut cx, {\n+    cx.export_class::<RustFile>(\"RustFile\")\n+});"}, {"sha": "1c9a815d89b6891f9e3290403d09c45c8af228df", "filename": "code/package-lock.json", "status": "added", "additions": 3027, "deletions": 0, "changes": 3027, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage-lock.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0"}, {"sha": "2f97bb5c0ef362878235f0f357aa9e287172d3e5", "filename": "code/package.json", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fpackage.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,52 @@\n+{\n+    \"name\": \"libsyntax-rust\",\n+    \"displayName\": \"libsyntax-rust\",\n+    \"description\": \"An experimental Rust plugin for VS Code based on libsyntax2\",\n+    \"license\": \"MIT\",\n+    \"repository\": \"http://github.com/matklad/libsyntax2/\",\n+    \"version\": \"0.0.1\",\n+    \"publisher\": \"matklad\",\n+    \"engines\": {\n+        \"vscode\": \"^1.18.0\"\n+    },\n+    \"devDependencies\": {\n+        \"@types/node\": \"^6.0.112\",\n+        \"neon-cli\": \"^0.2.0\",\n+        \"typescript\": \"^2.9.1\",\n+        \"vsce\": \"^1.42.0\",\n+        \"vscode\": \"^1.1.18\"\n+    },\n+    \"scripts\": {\n+        \"vscode:prepublish\": \"tsc -p ./\",\n+        \"compile\": \"tsc -watch -p ./\",\n+        \"install\": \"neon build\",\n+        \"postinstall\": \"node ./node_modules/vscode/bin/install\"\n+    },\n+    \"main\": \"./out/src/main\",\n+    \"contributes\": {\n+        \"languages\": [\n+            {\n+                \"id\": \"rust\",\n+                \"extensions\": [\n+                    \".rs\"\n+                ]\n+            }\n+        ],\n+        \"commands\": [\n+            {\n+                \"command\": \"libsyntax-rust.syntaxTree\",\n+                \"title\": \"Show Rust syntax tree\"\n+            }\n+        ],\n+        \"keybindings\": [\n+            {\n+                \"command\": \"libsyntax-rust.semanticSelection\",\n+                \"key\": \"ctrl+w\",\n+                \"when\": \"editorTextFocus && editorLangId == rust\"\n+            }\n+        ]\n+    },\n+    \"activationEvents\": [\n+        \"onLanguage:rust\"\n+    ]\n+}"}, {"sha": "dfb005c09f2912ca750276b2869148897b3e02a2", "filename": "code/src/main.ts", "status": "added", "additions": 193, "deletions": 0, "changes": 193, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fmain.ts?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,193 @@\n+'use strict'\n+import * as vscode from 'vscode'\n+\n+const backend = require(\"../../native\")\n+\n+let docToSyntax;\n+\n+let uris = {\n+    syntaxTree: vscode.Uri.parse('libsyntax-rust://syntaxtree')\n+}\n+\n+\n+export function activate(context: vscode.ExtensionContext) {\n+    let textDocumentContentProvider = new TextDocumentContentProvider()\n+\n+    let dispose = (disposable) => {\n+        context.subscriptions.push(disposable);\n+    }\n+\n+    let registerCommand = (name, f) => {\n+        dispose(vscode.commands.registerCommand(name, f))\n+    }\n+\n+    docToSyntax = documentToFile(context.subscriptions, () => {\n+        let emitter = textDocumentContentProvider.eventEmitter\n+        emitter.fire(uris.syntaxTree)\n+        let syntax = activeSyntax()\n+        console.log(syntax.highlight());\n+        setHighlights(vscode.window.activeTextEditor, syntax.highlight())\n+    })\n+\n+\n+    dispose(vscode.workspace.registerTextDocumentContentProvider(\n+        'libsyntax-rust',\n+        textDocumentContentProvider\n+    ))\n+\n+    registerCommand('libsyntax-rust.syntaxTree', () => openDoc(uris.syntaxTree))\n+}\n+\n+export function deactivate() { }\n+\n+export class Syntax {\n+    imp;\n+    doc: vscode.TextDocument;\n+\n+    constructor(imp, doc: vscode.TextDocument) {\n+        this.imp = imp\n+        this.doc = doc\n+    }\n+\n+    syntaxTree(): string { return this.imp.syntaxTree() }\n+    highlight(): Array<[number, number, string]> { return this.imp.highlight() }\n+}\n+\n+\n+function activeDoc() {\n+    return vscode.window.activeTextEditor.document\n+}\n+\n+function activeSyntax(): Syntax {\n+    let doc = activeDoc()\n+    if (doc == null) return null\n+    return docToSyntax(doc)\n+}\n+\n+async function openDoc(uri: vscode.Uri) {\n+    let document = await vscode.workspace.openTextDocument(uri)\n+    return vscode.window.showTextDocument(document, vscode.ViewColumn.Two, true)\n+}\n+\n+function documentToFile(disposables: vscode.Disposable[], onChange) {\n+    let docs = {}\n+    function update(doc: vscode.TextDocument, file) {\n+        let key = doc.uri.toString()\n+        if (file == null) {\n+            delete docs[key]\n+        } else {\n+            docs[key] = file\n+        }\n+        onChange(doc)\n+    }\n+    function get(doc: vscode.TextDocument) {\n+        return docs[doc.uri.toString()]\n+    }\n+\n+    function isKnownDoc(doc: vscode.TextDocument) {\n+        return doc.fileName.endsWith('.rs')\n+    }\n+\n+    function createFile(text: String) {\n+        return new backend.RustFile(text)\n+    }\n+\n+    vscode.workspace.onDidChangeTextDocument((event: vscode.TextDocumentChangeEvent) => {\n+        let doc = event.document\n+        if (!isKnownDoc(event.document)) return\n+        update(doc, null)\n+    }, null, disposables)\n+\n+    vscode.workspace.onDidOpenTextDocument((doc: vscode.TextDocument) => {\n+        if (!isKnownDoc(doc)) return\n+        update(doc, createFile(doc.getText()))\n+    }, null, disposables)\n+\n+    vscode.workspace.onDidCloseTextDocument((doc: vscode.TextDocument) => {\n+        update(doc, null)\n+    }, null, disposables)\n+\n+    return (doc: vscode.TextDocument) => {\n+        if (!isKnownDoc(doc)) return null\n+\n+        if (!get(doc)) {\n+            update(doc, createFile(doc.getText()))\n+        }\n+        let imp = get(doc)\n+        return new Syntax(imp, doc)\n+    }\n+}\n+\n+export class TextDocumentContentProvider implements vscode.TextDocumentContentProvider {\n+    public eventEmitter = new vscode.EventEmitter<vscode.Uri>()\n+    public syntaxTree: string = \"Not available\"\n+\n+    public provideTextDocumentContent(uri: vscode.Uri): vscode.ProviderResult<string> {\n+        let syntax = activeSyntax()\n+        if (syntax == null) return\n+        if (uri.toString() == uris.syntaxTree.toString()) {\n+            return syntax.syntaxTree()\n+        }\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event\n+    }\n+}\n+\n+const decorations = (() => {\n+    const decor = (obj) => vscode.window.createTextEditorDecorationType({ color: obj })\n+    return {\n+        background: decor(\"#3F3F3F\"),\n+        error: vscode.window.createTextEditorDecorationType({\n+            borderColor: \"red\",\n+            borderStyle: \"none none dashed none\",\n+        }),\n+        comment: decor(\"#7F9F7F\"),\n+        string: decor(\"#CC9393\"),\n+        keyword: decor(\"#F0DFAF\"),\n+        function: decor(\"#93E0E3\"),\n+        parameter: decor(\"#94BFF3\"),\n+        builtin: decor(\"#DD6718\"),\n+        text: decor(\"#DCDCCC\"),\n+        attribute: decor(\"#BFEBBF\"),\n+        literal: decor(\"#DFAF8F\"),\n+    }\n+})()\n+\n+function setHighlights(\n+    editor: vscode.TextEditor,\n+    highlihgs: Array<[number, number, string]>\n+) {\n+    console.log(\"setHighlight\");\n+    let byTag = {}\n+    for (let tag in decorations) {\n+        byTag[tag] = []\n+    }\n+\n+    for (let [start, end, tag] of highlihgs) {\n+        if (!byTag[tag]) {\n+            console.log(`unknown tag ${tag}`)\n+            continue\n+        }\n+        let range = toVsRange(editor.document, [start, end])\n+        byTag[tag].push(range)\n+    }\n+\n+    for (let tag in byTag) {\n+        let dec = decorations[tag]\n+        let ranges = byTag[tag]\n+        editor.setDecorations(dec, ranges)\n+    }\n+}\n+\n+export function toVsRange(doc: vscode.TextDocument, range: [number, number]): vscode.Range {\n+    return new vscode.Range(\n+        doc.positionAt(range[0]),\n+        doc.positionAt(range[1]),\n+    )\n+}\n+\n+function fromVsRange(doc: vscode.TextDocument, range: vscode.Range): [number, number] {\n+    return [doc.offsetAt(range.start), doc.offsetAt(range.end)]\n+}"}, {"sha": "053bd1c709557b06ee0426f8a7516d8f802ee11e", "filename": "code/tsconfig.json", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Ftsconfig.json", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/code%2Ftsconfig.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Ftsconfig.json?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,11 @@\n+{\n+    \"compilerOptions\": {\n+        \"module\": \"commonjs\",\n+        \"target\": \"es6\",\n+        \"outDir\": \"out\",\n+        \"lib\": [ \"es6\" ],\n+        \"sourceMap\": true,\n+        \"rootDir\": \".\"\n+    },\n+    \"include\": [ \"src/*.ts\" ]\n+}\n\\ No newline at end of file"}, {"sha": "3a92874669ac8a248d7ecd7835cfe0d978f890b7", "filename": "src/ast.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast.rs?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -0,0 +1,30 @@\n+use std::sync::Arc;\n+use {SyntaxNode, TreeRoot, SyntaxRoot, SyntaxNodeRef};\n+\n+#[derive(Debug)]\n+pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n+    syntax: SyntaxNode<R>\n+}\n+\n+impl File<Arc<SyntaxRoot>> {\n+    pub fn parse(text: &str) -> Self {\n+        File { syntax: ::parse(text.to_owned()) }\n+    }\n+}\n+\n+impl<R: TreeRoot> File<R> {\n+    pub fn syntax(&self) -> SyntaxNode<R> {\n+        self.syntax.clone()\n+    }\n+\n+    pub fn for_each_node(&self, mut f: impl FnMut(SyntaxNodeRef)) {\n+        let syntax = self.syntax();\n+        let syntax = syntax.borrow();\n+        go(syntax, &mut f);\n+\n+        fn go(syntax: SyntaxNodeRef, f: &mut FnMut(SyntaxNodeRef)) {\n+            f(syntax);\n+            syntax.children().into_iter().for_each(f)\n+        }\n+    }\n+}"}, {"sha": "3a8e6fa64f32227d93b38b11fff8e120327ac0be", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -29,12 +29,14 @@ mod syntax_kinds;\n mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n+pub mod ast;\n \n pub use {\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     text_unit::{TextRange, TextUnit},\n-    yellow::{SyntaxNode, SyntaxNodeRef},\n+    yellow::{SyntaxNode, SyntaxNodeRef, TreeRoot, SyntaxRoot},\n+    ast::File,\n };\n \n pub(crate) use yellow::SyntaxError;"}, {"sha": "0cc90adbd4ca856027cc70fee03d9f9d52263d08", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0d8c48f7a277d4a43448fe7dd4279383bc53f0/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=ac0d8c48f7a277d4a43448fe7dd4279383bc53f0", "patch": "@@ -3,10 +3,10 @@ mod green;\n mod red;\n mod syntax;\n \n-pub use self::syntax::{SyntaxNode, SyntaxNodeRef};\n+pub use self::syntax::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot};\n pub(crate) use self::{\n     builder::GreenBuilder,\n     green::{GreenNode, GreenNodeBuilder},\n     red::RedNode,\n-    syntax::{SyntaxError, SyntaxRoot},\n+    syntax::{SyntaxError},\n };"}]}