{"sha": "eff35e59c698df379806add4c9f2c1d8d3fe55ca", "node_id": "C_kwDOAAsO6NoAKGVmZjM1ZTU5YzY5OGRmMzc5ODA2YWRkNGM5ZjJjMWQ4ZDNmZTU1Y2E", "commit": {"author": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-04-08T01:06:53Z"}, "committer": {"name": "Eric Holk", "email": "ericholk@microsoft.com", "date": "2022-09-12T23:55:55Z"}, "message": "Introduce dyn_star feature flag\n\nThe primary purpose of this commit is to introduce the\ndyn_star flag so we can begin experimenting with implementation.\n\nIn order to have something to do in the feature gate test, we also add\nparser support for `dyn* Trait` objects. These are currently treated\njust like `dyn Trait` objects, but this will change in the future.\n\nNote that for now `dyn* Trait` is experimental syntax to enable\nimplementing some of the machinery needed for async fn in dyn traits\nwithout fully supporting the feature.", "tree": {"sha": "66d66c6c1604d75452a40ddb9b1f2e0d87ef86aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66d66c6c1604d75452a40ddb9b1f2e0d87ef86aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff35e59c698df379806add4c9f2c1d8d3fe55ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff35e59c698df379806add4c9f2c1d8d3fe55ca", "html_url": "https://github.com/rust-lang/rust/commit/eff35e59c698df379806add4c9f2c1d8d3fe55ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff35e59c698df379806add4c9f2c1d8d3fe55ca/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa6ee9375242ae784dab1837dfc0b92f43e787ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa6ee9375242ae784dab1837dfc0b92f43e787ce", "html_url": "https://github.com/rust-lang/rust/commit/fa6ee9375242ae784dab1837dfc0b92f43e787ce"}], "stats": {"total": 66, "additions": 63, "deletions": 3}, "files": [{"sha": "722d7b71c7ac6554d0a429e935d1b3647e604085", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -2072,6 +2072,7 @@ impl TyKind {\n #[derive(Clone, Copy, PartialEq, Encodable, Decodable, Debug, HashStable_Generic)]\n pub enum TraitObjectSyntax {\n     Dyn,\n+    DynStar,\n     None,\n }\n "}, {"sha": "5558f0c8c768658d7ec0935ad3e6ae6e9b0c5a60", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -19,6 +19,7 @@ use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n };\n use rustc_session::lint::{BuiltinLintDiagnostics, LintBuffer};\n+use rustc_session::parse::feature_err;\n use rustc_session::Session;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident};\n@@ -753,7 +754,19 @@ impl<'a> AstValidator<'a> {\n                     self.maybe_lint_missing_abi(sig_span, ty.id);\n                 }\n             }\n-            TyKind::TraitObject(ref bounds, ..) => {\n+            TyKind::TraitObject(ref bounds, syntax, ..) => {\n+                if syntax == TraitObjectSyntax::DynStar\n+                    && !self.session.features_untracked().dyn_star\n+                {\n+                    feature_err(\n+                        &self.session.parse_sess,\n+                        sym::dyn_star,\n+                        ty.span,\n+                        \"dyn* trait objects are unstable\",\n+                    )\n+                    .emit();\n+                }\n+\n                 let mut any_lifetime_bounds = false;\n                 for bound in bounds {\n                     if let GenericBound::Outlives(ref lifetime) = *bound {"}, {"sha": "72f7064b6cae6dbf494ba613fee9a1dbb1d515c1", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -380,6 +380,8 @@ declare_features! (\n     (active, doc_cfg_hide, \"1.57.0\", Some(43781), None),\n     /// Allows `#[doc(masked)]`.\n     (active, doc_masked, \"1.21.0\", Some(44027), None),\n+    /// Allows `dyn* Trait` objects.\n+    (active, dyn_star, \"1.65.0\", Some(91611), None),\n     /// Allows `X..Y` patterns.\n     (active, exclusive_range_pattern, \"1.11.0\", Some(37854), None),\n     /// Allows exhaustive pattern matching on types that contain uninhabited types."}, {"sha": "ffe3618bc49515eb912ffef1742eeb6085dd2167", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -567,7 +567,8 @@ impl<'a> Parser<'a> {\n         self.check_keyword(kw::Dyn)\n             && (!self.token.uninterpolated_span().rust_2015()\n                 || self.look_ahead(1, |t| {\n-                    t.can_begin_bound() && !can_continue_type_after_non_fn_ident(t)\n+                    (t.can_begin_bound() || t.kind == TokenKind::BinOp(token::Star))\n+                        && !can_continue_type_after_non_fn_ident(t)\n                 }))\n     }\n \n@@ -576,10 +577,20 @@ impl<'a> Parser<'a> {\n     /// Note that this does *not* parse bare trait objects.\n     fn parse_dyn_ty(&mut self, impl_dyn_multi: &mut bool) -> PResult<'a, TyKind> {\n         self.bump(); // `dyn`\n+\n+        // parse dyn* types\n+        let dyn_star = matches!(self.token.kind, TokenKind::BinOp(token::Star));\n+        let syntax = if dyn_star {\n+            self.bump(); // `*`\n+            TraitObjectSyntax::DynStar\n+        } else {\n+            TraitObjectSyntax::Dyn\n+        };\n+\n         // Always parse bounds greedily for better error recovery.\n         let bounds = self.parse_generic_bounds(None)?;\n         *impl_dyn_multi = bounds.len() > 1 || self.prev_token.kind == TokenKind::BinOp(token::Plus);\n-        Ok(TyKind::TraitObject(bounds, TraitObjectSyntax::Dyn))\n+        Ok(TyKind::TraitObject(bounds, syntax))\n     }\n \n     /// Parses a type starting with a path."}, {"sha": "aeb535352f656419530d543e9bce1f8c039bed86", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -649,6 +649,7 @@ symbols! {\n         dropck_parametricity,\n         dylib,\n         dyn_metadata,\n+        dyn_star,\n         dyn_trait,\n         e,\n         edition_macro_pats,"}, {"sha": "4756661cf41b7318d27fccb2af1c9871de643880", "filename": "src/test/ui/dyn-star/feature-gate-dyn_star.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -0,0 +1,9 @@\n+// Feature gate test for dyn_star\n+\n+/// dyn* is not necessarily the final surface syntax (if we have one at all),\n+/// but for now we will support it to aid in writing tests independently.\n+pub fn dyn_star_parameter(_: &dyn* Send) {\n+    //~^ dyn* trait objects are unstable\n+}\n+\n+fn main() {}"}, {"sha": "2767e9478e2e8df8df4d0ed7e1ea8d96d0b92853", "filename": "src/test/ui/dyn-star/feature-gate-dyn_star.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ffeature-gate-dyn_star.stderr?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: dyn* trait objects are unstable\n+  --> $DIR/feature-gate-dyn_star.rs:5:31\n+   |\n+LL | pub fn dyn_star_parameter(_: &dyn* Send) {\n+   |                               ^^^^^^^^^\n+   |\n+   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n+   = help: add `#![feature(dyn_star)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "dd96bf0672dde8ec3a564e9054b4c93c7f8b09e0", "filename": "src/test/ui/dyn-star/syntax.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff35e59c698df379806add4c9f2c1d8d3fe55ca/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fsyntax.rs?ref=eff35e59c698df379806add4c9f2c1d8d3fe55ca", "patch": "@@ -0,0 +1,11 @@\n+// Make sure we can parse the `dyn* Trait` syntax\n+//\n+// check-pass\n+\n+\n+#![feature(dyn_star)]\n+\n+pub fn dyn_star_parameter(_: &dyn* Send) {\n+}\n+\n+fn main() {}"}]}