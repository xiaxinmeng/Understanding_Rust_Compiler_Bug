{"sha": "0022baae0042b1f052a08f8a06f0015f1dd8a79f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMjJiYWFlMDA0MmIxZjA1MmEwOGY4YTA2ZjAwMTVmMWRkOGE3OWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T00:51:30Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-27T17:54:25Z"}, "message": "Inline the remaining hir::Arm::top_pats_hack", "tree": {"sha": "95a2b1c515cc2e8c2fb24a10f571cc1386423174", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a2b1c515cc2e8c2fb24a10f571cc1386423174"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0022baae0042b1f052a08f8a06f0015f1dd8a79f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0022baae0042b1f052a08f8a06f0015f1dd8a79f", "html_url": "https://github.com/rust-lang/rust/commit/0022baae0042b1f052a08f8a06f0015f1dd8a79f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0022baae0042b1f052a08f8a06f0015f1dd8a79f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a07b030998d4359b77aa4721855b05f36cef9b78", "url": "https://api.github.com/repos/rust-lang/rust/commits/a07b030998d4359b77aa4721855b05f36cef9b78", "html_url": "https://github.com/rust-lang/rust/commit/a07b030998d4359b77aa4721855b05f36cef9b78"}], "stats": {"total": 26, "additions": 11, "deletions": 15}, "files": [{"sha": "6bfe6de63f5f8c4083da2fc01a4e953334dfda8e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0022baae0042b1f052a08f8a06f0015f1dd8a79f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0022baae0042b1f052a08f8a06f0015f1dd8a79f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0022baae0042b1f052a08f8a06f0015f1dd8a79f", "patch": "@@ -1291,17 +1291,6 @@ pub struct Arm {\n     pub body: P<Expr>,\n }\n \n-impl Arm {\n-    // HACK(or_patterns; Centril | dlrobertson): Remove this and\n-    // correctly handle each case in which this method is used.\n-    pub fn top_pats_hack(&self) -> &[P<Pat>] {\n-        match &self.pat.kind {\n-            PatKind::Or(pats) => pats,\n-            _ => std::slice::from_ref(&self.pat),\n-        }\n-    }\n-}\n-\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum Guard {\n     If(P<Expr>),"}, {"sha": "5b76d24a4d35c062065b3eb8b34a23ce1f2def4f", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0022baae0042b1f052a08f8a06f0015f1dd8a79f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0022baae0042b1f052a08f8a06f0015f1dd8a79f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=0022baae0042b1f052a08f8a06f0015f1dd8a79f", "patch": "@@ -140,10 +140,17 @@ impl<'tcx> MatchVisitor<'_, 'tcx> {\n             let mut have_errors = false;\n \n             let inlined_arms : Vec<(Vec<_>, _)> = arms.iter().map(|arm| (\n-                arm.top_pats_hack().iter().map(|pat| {\n-                    let mut patcx = PatCtxt::new(self.tcx,\n-                                                        self.param_env.and(self.identity_substs),\n-                                                        self.tables);\n+                // HACK(or_patterns; Centril | dlrobertson): Remove this and\n+                // correctly handle exhaustiveness checking for nested or-patterns.\n+                match &arm.pat.kind {\n+                    hir::PatKind::Or(pats) => pats,\n+                    _ => std::slice::from_ref(&arm.pat),\n+                }.iter().map(|pat| {\n+                    let mut patcx = PatCtxt::new(\n+                        self.tcx,\n+                        self.param_env.and(self.identity_substs),\n+                        self.tables\n+                    );\n                     patcx.include_lint_checks();\n                     let pattern = expand_pattern(cx, patcx.lower_pattern(&pat));\n                     if !patcx.errors.is_empty() {"}]}