{"sha": "f42b7085683a7a08eb4caef73b2bf839385a7af3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0MmI3MDg1NjgzYTdhMDhlYjRjYWVmNzNiMmJmODM5Mzg1YTdhZjM=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-27T16:18:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-27T16:18:16Z"}, "message": "Merge branch 'master' into oli-obk-patch-1", "tree": {"sha": "154ccf203563ebfe0d20a92c33566d8e43fd9eeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/154ccf203563ebfe0d20a92c33566d8e43fd9eeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f42b7085683a7a08eb4caef73b2bf839385a7af3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb/W5ICRBK7hj4Ov3rIwAAdHIIAANhjMFWBjq0Nl7C8u8tTGCW\nd3rkN5GOodopRBYNz5cdMB2f0pNSIypamM7YEFmR+ogFqR92f+lY01onY2mhTDPr\nD4f3NcYNQ0oCLBO7RTQFvzEHrSIUt3nsOxtG0n1bIIqDHut0nAUGqw2WX9mMRnyn\nIf3tMJSP0uOrOUkd3JEvTB3MLWbIBkXqD+2vggnT9yW+k7DVJAFIG6MmVoojpxW1\n0+KnDl1F9GNoPjJT9I9uK2z+y/y0su3/HbVKgpWWz467MchrmBJK/+ENJ5M8vEXz\n7L8sO+ze8mdwgDoWMjiGrVkQvyFCvlGe30U3ZqhDdsNfOn6aHyfHkRCkBawaE5Y=\n=NYSF\n-----END PGP SIGNATURE-----\n", "payload": "tree 154ccf203563ebfe0d20a92c33566d8e43fd9eeb\nparent 5958fa6a7049cd003e87d6d8502ae1237262c378\nparent fb2d0ff9438329088a578436f8d299fb5718b4fb\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1543335496 +0100\ncommitter GitHub <noreply@github.com> 1543335496 +0100\n\nMerge branch 'master' into oli-obk-patch-1"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f42b7085683a7a08eb4caef73b2bf839385a7af3", "html_url": "https://github.com/rust-lang/rust/commit/f42b7085683a7a08eb4caef73b2bf839385a7af3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f42b7085683a7a08eb4caef73b2bf839385a7af3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5958fa6a7049cd003e87d6d8502ae1237262c378", "url": "https://api.github.com/repos/rust-lang/rust/commits/5958fa6a7049cd003e87d6d8502ae1237262c378", "html_url": "https://github.com/rust-lang/rust/commit/5958fa6a7049cd003e87d6d8502ae1237262c378"}, {"sha": "fb2d0ff9438329088a578436f8d299fb5718b4fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb2d0ff9438329088a578436f8d299fb5718b4fb", "html_url": "https://github.com/rust-lang/rust/commit/fb2d0ff9438329088a578436f8d299fb5718b4fb"}], "stats": {"total": 426, "additions": 250, "deletions": 176}, "files": [{"sha": "ba3b8d3639917f3b672d5e9b365f0a44efa23bdb", "filename": ".travis.yml", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -11,7 +11,7 @@ os:\n - osx\n \n before_script:\n-# macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307)\n+# macOS weirdness (https://github.com/travis-ci/travis-ci/issues/6307, https://github.com/travis-ci/travis-ci/issues/10165)\n - if [[ \"$TRAVIS_OS_NAME\" == osx ]]; then rvm get stable; fi\n # Compute the rust version we use. We do not use \"language: rust\" to have more control here.\n - |\n@@ -28,8 +28,6 @@ before_script:\n - rustup target add i686-unknown-linux-gnu\n - rustup target add i686-pc-windows-gnu\n - rustup target add i686-pc-windows-msvc\n-- rustup component add rust-src\n-- cargo install xargo || echo \"Skipping xargo install\"\n \n script:\n - set -e\n@@ -39,11 +37,15 @@ script:\n   cargo test --release --all-features &&\n   cargo install --all-features --force --path .\n - |\n-  # get ourselves a MIR-full libstd\n-  xargo/build.sh &&\n-  export MIRI_SYSROOT=~/.xargo/HOST\n+  # Get ourselves a MIR-full libstd, and use it henceforth\n+  cargo miri setup &&\n+  if [ \"$TRAVIS_OS_NAME\" == osx ]; then\n+    export MIRI_SYSROOT=~/Library/Caches/miri.miri.miri/HOST\n+  else\n+    export MIRI_SYSROOT=~/.cache/miri/HOST\n+  fi\n - |\n-  # run all tests with full mir\n+  # Test miri with full MIR\n   cargo test --release --all-features\n - |\n   # Test cargo integration"}, {"sha": "becb5c69e56123db93581067ad623635b13e08d7", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -35,14 +35,16 @@ required-features = [\"rustc_tests\"]\n [dependencies]\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n cargo_metadata = { version = \"0.6\", optional = true }\n+directories = { version = \"1.0\", optional = true }\n env_logger = \"0.5\"\n log = \"0.4\"\n \n [build-dependencies]\n vergen = \"3\"\n \n [features]\n-cargo_miri = [\"cargo_metadata\"]\n+default = [\"cargo_miri\"]\n+cargo_miri = [\"cargo_metadata\", \"directories\"]\n rustc_tests = []\n \n [dev-dependencies]"}, {"sha": "dcf13a8af4a28436efdd750befa01c30c765c97a", "filename": "README.md", "status": "modified", "additions": 25, "deletions": 52, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -42,7 +42,7 @@ in this directory.\n \n [rustup]: https://www.rustup.rs\n \n-## Running Miri\n+## Running Miri on tiny examples\n \n ```sh\n cargo +nightly run -- -Zmiri-disable-validation tests/run-pass/vecs.rs # Or whatever test you like.\n@@ -51,74 +51,47 @@ cargo +nightly run -- -Zmiri-disable-validation tests/run-pass/vecs.rs # Or what\n We have to disable validation because that can lead to errors when libstd is not\n compiled the right way.\n \n-## Running Miri with full libstd\n-\n-Per default libstd does not contain the MIR of non-polymorphic functions, and\n-also does not contain some extra MIR statements that miri needs for validation.\n-When Miri hits a call to such a function, execution terminates, and even when\n-the MIR is present, validation can fail.  To fix this, it is possible to compile\n-libstd with full MIR:\n-\n-```sh\n-rustup component add --toolchain nightly rust-src\n-cargo +nightly install xargo\n-rustup run nightly xargo/build.sh\n-```\n+## Running Miri on your own project('s test suite)\n \n-Now you can run Miri against the libstd compiled by xargo:\n+Install Miri as a cargo subcommand:\n \n ```sh\n-MIRI_SYSROOT=~/.xargo/HOST cargo +nightly run tests/run-pass-fullmir/hashmap.rs\n+cargo +nightly install --git https://github.com/solson/miri/ miri\n ```\n \n-Notice that you will have to re-run the last step of the preparations above\n-(`xargo/build.sh`) when your toolchain changes (e.g., when you update the\n-nightly).\n-\n-## Running Miri on your own project('s test suite)\n-\n-Install Miri as a cargo subcommand with `cargo +nightly install --all-features\n---path .`.  Be aware that if you used `rustup override set` to fix a particular\n-Rust version for the miri directory, that will *not* apply to your own project\n-directory!  You have to use a consistent Rust version for building miri and your\n-project for this to work, so remember to either always specify the nightly\n-version manually, overriding it in your project directory as well, or use\n-`rustup default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally\n-make `nightly` the default toolchain.\n-\n-We assume that you have prepared a MIR-enabled libstd as described above.  Now\n-compile your project and its dependencies against that libstd:\n-\n-1. Run `cargo clean` to eliminate any cached dependencies that were built against\n-the non-MIR `libstd`.\n-2. To run all tests in your project through, Miri, use\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri test`. **NOTE**: This is\n-currently broken, see the discussion in\n-[#479](https://github.com/solson/miri/issues/479).\n-3. If you have a binary project, you can run it through Miri using\n-`MIRI_SYSROOT=~/.xargo/HOST cargo +nightly miri`.\n+Be aware that if you used `rustup override set` to fix a particular Rust version\n+for the miri directory, that will *not* apply to your own project directory!\n+You have to use a consistent Rust version for building miri and your project for\n+this to work, so remember to either always specify the nightly version manually,\n+overriding it in your project directory as well, or use `rustup default nightly`\n+(or `rustup default nightly-YYYY-MM-DD`) to globally make `nightly` the default\n+toolchain.\n+\n+1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n+   dependencies to be compiled the right way, that would not happen if they have\n+   previously already been compiled.\n+2. To run all tests in your project through Miri, use `cargo +nightly miri test`.\n+   **NOTE**: This is currently broken, see the discussion in\n+   [#479](https://github.com/solson/miri/issues/479).\n+3. If you have a binary project, you can run it through Miri using `cargo\n+   +nightly miri run`.\n \n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler\n errors.\n \n-#### \"constant evaluation error: no mir for `<function>`\"\n-\n-You may have forgotten to set `MIRI_SYSROOT` when calling `cargo miri`, and\n-your program called into `std` or `core`. Be sure to set `MIRI_SYSROOT=~/.xargo/HOST`.\n-\n #### \"found possibly newer version of crate `std` which `<dependency>` depends on\"\n \n-Your build directory may contain artifacts from an earlier build that did/did not\n-have `MIRI_SYSROOT` set. Run `cargo clean` before switching from non-Miri to Miri\n-builds and vice-versa.\n+Your build directory may contain artifacts from an earlier build that have/have\n+not been built for Miri. Run `cargo clean` before switching from non-Miri to\n+Miri builds and vice-versa.\n \n #### \"found crate `std` compiled by an incompatible version of rustc\"\n \n You may be running `cargo miri` with a different compiler version than the one\n-used to build the MIR-enabled `std`. Be sure to consistently use the same toolchain,\n-which should be the toolchain specified in the `rust-version` file.\n+used to build the custom libstd that Miri uses, and Miri failed to detect that.\n+Try deleting `~/.cache/miri`.\n \n ## Miri `-Z` flags\n "}, {"sha": "1f38b848c00594b6488245d07b882e0ae6bb66e8", "filename": "appveyor.yml", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -21,25 +21,19 @@ install:\n     - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_TOOLCHAIN%\n     - set PATH=%USERPROFILE%\\.cargo\\bin;%PATH%\n     - rustc --version\n-    # Customize installation.\n-    - rustup component add rust-src\n-    - cargo install xargo\n-    # Prepare a libstd with MIR (cannot use bash script, obviously).\n-    # The flags here should be kept in sync with `add_miri_default_args` in `src/lib.rs`.\n-    - cd xargo\n-    - set RUSTFLAGS=-Zalways-encode-mir -Zmir-emit-retag -Zmir-opt-level=0\n-    - xargo build\n-    - set RUSTFLAGS=\n-    - cd ..\n \n build: false\n \n test_script:\n     - set RUSTFLAGS=-g\n     - set RUST_BACKTRACE=1\n+    # Test plain miri\n     - cargo build --release --all-features --all-targets\n     - cargo test --release --all-features\n-    - set MIRI_SYSROOT=%USERPROFILE%\\.xargo\\HOST\n+    # Get ourselves a MIR-full libstd, and use it henceforth\n+    - cargo run --release --all-features --bin cargo-miri -- miri setup\n+    - set MIRI_SYSROOT=%USERPROFILE%\\AppData\\Local\\miri\\miri\\cache\\HOST\n+    # Test miri with full MIR\n     - cargo test --release --all-features\n \n notifications:"}, {"sha": "42745535e0ef4f01589767293d01343fa4176257", "filename": "cargo-miri-test/run-test.py", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/cargo-miri-test%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/cargo-miri-test%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri-test%2Frun-test.py?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -8,10 +8,10 @@\n import sys, subprocess\n \n def test_cargo_miri():\n-    print(\"==> Testing `cargo miri` <==\")\n+    print(\"==> Testing `cargo miri run` <==\")\n     ## Call `cargo miri`, capture all output\n     p = subprocess.Popen(\n-        [\"cargo\", \"miri\", \"-q\"],\n+        [\"cargo\", \"miri\", \"run\", \"-q\"],\n         stdout=subprocess.PIPE,\n         stderr=subprocess.PIPE\n     )"}, {"sha": "ed4ffa43dbce37b7f699e13741f184d81bac0640", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 176, "deletions": 53, "changes": 229, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,14 +1,21 @@\n+#![feature(inner_deref)]\n+\n extern crate cargo_metadata;\n \n use std::path::{PathBuf, Path};\n-use std::io::Write;\n+use std::io::{self, Write};\n use std::process::Command;\n-\n+use std::fs::{self, File};\n \n const CARGO_MIRI_HELP: &str = r#\"Interprets bin crates\n \n Usage:\n-    cargo miri [options] [--] [<opts>...]\n+    cargo miri [subcommand] [options] [--] [<opts>...]\n+\n+Subcommands:\n+    run                      Run binaries (default)\n+    test                     Run tests\n+    setup                    Only perform automatic setup, but without asking questions (for getting a proper libstd)\n \n Common options:\n     -h, --help               Print this message\n@@ -25,6 +32,13 @@ it to configure the resource limits\n available resource limits are `memory_size`, `step_limit`, `stack_limit`\n \"#;\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+enum MiriCommand {\n+    Run,\n+    Test,\n+    Setup,\n+}\n+\n fn show_help() {\n     println!(\"{}\", CARGO_MIRI_HELP);\n }\n@@ -34,6 +48,145 @@ fn show_version() {\n         env!(\"CARGO_PKG_VERSION\"), env!(\"VERGEN_SHA_SHORT\"), env!(\"VERGEN_COMMIT_DATE\"));\n }\n \n+fn show_error(msg: String) -> ! {\n+    eprintln!(\"fatal error: {}\", msg);\n+    std::process::exit(1)\n+}\n+\n+fn list_targets(mut args: impl Iterator<Item=String>) -> impl Iterator<Item=cargo_metadata::Target> {\n+    // We need to get the manifest, and then the metadata, to enumerate targets.\n+    let manifest_path_arg = args.find(|val| {\n+        val.starts_with(\"--manifest-path=\")\n+    });\n+\n+    let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(\n+        manifest_path_arg.as_ref().map(AsRef::as_ref),\n+    )\n+    {\n+        metadata\n+    } else {\n+        show_error(format!(\"error: Could not obtain cargo metadata.\"));\n+    };\n+\n+    let manifest_path = manifest_path_arg.map(|arg| {\n+        PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..]))\n+    });\n+\n+    let current_dir = std::env::current_dir();\n+\n+    let package_index = metadata\n+        .packages\n+        .iter()\n+        .position(|package| {\n+            let package_manifest_path = Path::new(&package.manifest_path);\n+            if let Some(ref manifest_path) = manifest_path {\n+                package_manifest_path == manifest_path\n+            } else {\n+                let current_dir = current_dir.as_ref().expect(\n+                    \"could not read current directory\",\n+                );\n+                let package_manifest_directory = package_manifest_path.parent().expect(\n+                    \"could not find parent directory of package manifest\",\n+                );\n+                package_manifest_directory == current_dir\n+            }\n+        })\n+        .expect(\"could not find matching package\");\n+    let package = metadata.packages.remove(package_index);\n+\n+    // Finally we got the list of targets to build\n+    package.targets.into_iter()\n+}\n+\n+fn ask(question: &str) {\n+    let mut buf = String::new();\n+    print!(\"{} [Y/n] \", question);\n+    io::stdout().flush().unwrap();\n+    io::stdin().read_line(&mut buf).unwrap();\n+    match buf.trim().to_lowercase().as_ref() {\n+        \"\" | \"y\" | \"yes\" => {}, // proceed\n+        \"n\" | \"no\" => show_error(format!(\"Aborting as per your request\")),\n+        a => show_error(format!(\"I do not understand `{}`\", a))\n+    };\n+}\n+\n+/// Perform the setup requires to make `cargo miri` work: Getting a custom-built libstd. Then sets MIRI_SYSROOT.\n+/// Skipped if MIRI_SYSROOT is already set, in that case we expect the user has done all this already.\n+fn setup(ask_user: bool) {\n+    if std::env::var(\"MIRI_SYSROOT\").is_ok() {\n+        return;\n+    }\n+\n+    // First, we need xargo\n+    if Command::new(\"xargo\").arg(\"--version\").output().is_err()\n+    {\n+        if ask_user {\n+            ask(\"It seems you do not have xargo installed. I will run `cargo install xargo`. Proceed?\");\n+        } else {\n+            println!(\"Installing xargo: `cargo install xargo`\");\n+        }\n+        if !Command::new(\"cargo\").args(&[\"install\", \"xargo\"]).status().unwrap().success() {\n+            show_error(format!(\"Failed to install xargo\"));\n+        }\n+    }\n+\n+    // Then, we also need rust-src.  Let's see if it is already installed.\n+    let sysroot = Command::new(\"rustc\").args(&[\"--print\", \"sysroot\"]).output().unwrap().stdout;\n+    let sysroot = std::str::from_utf8(&sysroot[..]).unwrap();\n+    let src = Path::new(sysroot.trim_end_matches('\\n')).join(\"lib\").join(\"rustlib\").join(\"src\");\n+    if !src.exists() {\n+        if ask_user {\n+            ask(\"It seems you do not have the rust-src component installed. I will run `rustup component add rust-src`. Proceed?\");\n+        } else {\n+            println!(\"Installing rust-src component: `rustup component add rust-src`\");\n+        }\n+        if !Command::new(\"rustup\").args(&[\"component\", \"add\", \"rust-src\"]).status().unwrap().success() {\n+            show_error(format!(\"Failed to install rust-src component\"));\n+        }\n+    }\n+\n+    // Next, we need our own libstd. We will do this work in whatever is a good cache dir for this platform.\n+    let dirs = directories::ProjectDirs::from(\"miri\", \"miri\", \"miri\").unwrap();\n+    let dir = dirs.cache_dir();\n+    if !dir.exists() {\n+        println!(\"Creating `{}` and using it for miri's build of libstd\", dir.display());\n+        fs::create_dir_all(&dir).unwrap();\n+    }\n+    // The interesting bit: Xargo.toml\n+    File::create(dir.join(\"Xargo.toml\")).unwrap()\n+        .write_all(br#\"\n+[dependencies.std]\n+features = [\"panic_unwind\"]\n+\n+[dependencies.test]\n+stage = 1\n+        \"#).unwrap();\n+    // The boring bits: A dummy project for xargo\n+    File::create(dir.join(\"Cargo.toml\")).unwrap()\n+        .write_all(br#\"\n+[package]\n+name = \"miri-xargo\"\n+description = \"A dummy project for building libstd with xargo.\"\n+version = \"0.0.0\"\n+\n+[lib]\n+path = \"lib.rs\"\n+        \"#).unwrap();\n+    File::create(dir.join(\"lib.rs\")).unwrap();\n+    // Run xargo\n+    if !Command::new(\"xargo\").arg(\"build\").arg(\"-q\")\n+        .current_dir(&dir)\n+        .env(\"RUSTFLAGS\", miri::miri_default_args().join(\" \"))\n+        .env(\"XARGO_HOME\", dir.to_str().unwrap())\n+        .status().unwrap().success()\n+    {\n+        show_error(format!(\"Failed to run xargo\"));\n+    }\n+\n+    // That should be it!\n+    std::env::set_var(\"MIRI_SYSROOT\", dir.join(\"HOST\"));\n+}\n+\n fn main() {\n     // Check for version and help flags even when invoked as 'cargo-miri'\n     if std::env::args().any(|a| a == \"--help\" || a == \"-h\") {\n@@ -51,61 +204,31 @@ fn main() {\n         // binary so that we come back in the other branch, and dispatch\n         // the invocations to rustc and miri, respectively.\n \n-        let test = std::env::args().nth(2).map_or(false, |text| text == \"test\");\n-        let skip = if test { 3 } else { 2 };\n-\n-        // We need to get the manifest, and then the metadata, to enumerate targets.\n-        let manifest_path_arg = std::env::args().skip(skip).find(|val| {\n-            val.starts_with(\"--manifest-path=\")\n-        });\n-\n-        let mut metadata = if let Ok(metadata) = cargo_metadata::metadata(\n-            manifest_path_arg.as_ref().map(AsRef::as_ref),\n-        )\n-        {\n-            metadata\n-        } else {\n-            let _ = std::io::stderr().write_fmt(format_args!(\n-                \"error: Could not obtain cargo metadata.\"\n-            ));\n-            std::process::exit(101);\n+        let (subcommand, skip) = match std::env::args().nth(2).deref() {\n+            Some(\"test\") => (MiriCommand::Test, 3),\n+            Some(\"run\") => (MiriCommand::Run, 3),\n+            Some(\"setup\") => (MiriCommand::Setup, 3),\n+            // Default command, if there is an option or nothing\n+            Some(s) if s.starts_with(\"-\") => (MiriCommand::Run, 2),\n+            None => (MiriCommand::Run, 2),\n+            // Unvalid command\n+            Some(s) => {\n+                show_error(format!(\"Unknown command `{}`\", s))\n+            }\n         };\n \n-        let manifest_path = manifest_path_arg.map(|arg| {\n-            PathBuf::from(Path::new(&arg[\"--manifest-path=\".len()..]))\n-        });\n-\n-        let current_dir = std::env::current_dir();\n-\n-        let package_index = metadata\n-            .packages\n-            .iter()\n-            .position(|package| {\n-                let package_manifest_path = Path::new(&package.manifest_path);\n-                if let Some(ref manifest_path) = manifest_path {\n-                    package_manifest_path == manifest_path\n-                } else {\n-                    let current_dir = current_dir.as_ref().expect(\n-                        \"could not read current directory\",\n-                    );\n-                    let package_manifest_directory = package_manifest_path.parent().expect(\n-                        \"could not find parent directory of package manifest\",\n-                    );\n-                    package_manifest_directory == current_dir\n-                }\n-            })\n-            .expect(\"could not find matching package\");\n-        let package = metadata.packages.remove(package_index);\n+        // We always setup\n+        let ask = subcommand != MiriCommand::Setup;\n+        setup(ask);\n \n-        // Finally we got the metadata, iterate all targets and see for which ones\n-        // we do anything.\n-        for target in package.targets {\n+        // Now run the command.\n+        for target in list_targets(std::env::args().skip(skip)) {\n             let args = std::env::args().skip(skip);\n             let kind = target.kind.get(0).expect(\n                 \"badly formatted cargo metadata: target::kind is an empty array\",\n             );\n-            match (test, &kind[..]) {\n-                (true, \"test\") => {\n+            match (subcommand, &kind[..]) {\n+                (MiriCommand::Test, \"test\") => {\n                     // For test binaries we call `cargo rustc --test target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--test\".to_string(), target.name].into_iter().chain(\n@@ -116,7 +239,7 @@ fn main() {\n                         std::process::exit(code);\n                     }\n                 }\n-                (true, \"lib\") => {\n+                (MiriCommand::Test, \"lib\") => {\n                     // For libraries we call `cargo rustc -- --test <rustc args>`\n                     // Notice now that `--test` is a rustc arg rather than a cargo arg. This tells\n                     // rustc to build a test harness which calls all #[test] functions. We don't\n@@ -131,7 +254,7 @@ fn main() {\n                         std::process::exit(code);\n                     }\n                 }\n-                (false, \"bin\") => {\n+                (MiriCommand::Run, \"bin\") => {\n                     // For ordinary binaries we call `cargo rustc --bin target -- <rustc args>`\n                     if let Err(code) = process(\n                         vec![\"--bin\".to_string(), target.name].into_iter().chain("}, {"sha": "60076f2919052e1e5c11688088c8942834651b5c", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,6 +1,6 @@\n #![feature(rustc_private)]\n \n-#![cfg_attr(feature = \"cargo-clippy\", allow(cast_lossless))]\n+#![allow(clippy::cast_lossless)]\n \n #[macro_use]\n extern crate log;\n@@ -54,8 +54,7 @@ pub use crate::stacked_borrows::{Borrow, Stack, Stacks, BorStackItem};\n /// set per default, for maximal validation power.\n pub fn miri_default_args() -> &'static [&'static str] {\n     // The flags here should be kept in sync with what bootstrap adds when `test-miri` is\n-    // set, which happens in `bootstrap/bin/rustc.rs` in the rustc sources; and also\n-    // kept in sync with `xargo/build.sh` in this repo and `appveyor.yml`.\n+    // set, which happens in `bootstrap/bin/rustc.rs` in the rustc sources.\n     &[\"-Zalways-encode-mir\", \"-Zmir-emit-retag\", \"-Zmir-opt-level=0\"]\n }\n "}, {"sha": "babd0246e7e1afcd0f2a1ed0ac540bfcc45443dc", "filename": "tests/compile-fail-fullmir/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fptr_offset_overflow.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -2,5 +2,5 @@\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;\n-    let _ = unsafe { x.offset(isize::min_value()) };\n+    let _val = unsafe { x.offset(isize::min_value()) };\n }"}, {"sha": "c1b8727c129b9a17b4bc8553e497503e6c3341fc", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -12,5 +12,5 @@ pub enum Foo {\n \n fn main() {\n     let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n-    let _ = mem::discriminant(&f);\n+    let _val = mem::discriminant(&f);\n }"}, {"sha": "a584863654cef267071ce6724fae3a0a0a074141", "filename": "tests/compile-fail/pointer_byte_read_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_1.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const usize;\n     let ptr_bytes = unsafe { *z }; // the actual deref is fine, because we read the entire pointer at once\n-    let _ = ptr_bytes / 432; //~ ERROR invalid arithmetic on pointers that would leak base addresses\n+    let _val = ptr_bytes / 432; //~ ERROR invalid arithmetic on pointers that would leak base addresses\n }"}, {"sha": "ddb9bc1f995f28448c6ca1b7dccc05a09225bbc6", "filename": "tests/compile-fail/pointer_byte_read_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointer_byte_read_2.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -3,5 +3,5 @@ fn main() {\n     let y = &x;\n     let z = &y as *const &i32 as *const u8;\n     // the deref fails, because we are reading only a part of the pointer\n-    let _ = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n+    let _val = unsafe { *z }; //~ ERROR tried to access part of a pointer value as raw bytes\n }"}, {"sha": "5d5eab155083b4f6e34ca4f69e2f62a751e13c79", "filename": "tests/compile-fail/ptr_bitops2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_bitops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_bitops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_bitops2.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let val = 13usize;\n     let addr = &val as *const _ as usize;\n-    let _ = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n+    let _val = addr & 13; //~ ERROR access part of a pointer value as raw bytes\n }"}, {"sha": "a823a0f49b630fe8454ccf99700f077e653558a0", "filename": "tests/compile-fail/ptr_int_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_int_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_int_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_int_cast.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = x as *const i32;\n     let x = x as u8; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n     let x = x as *const i32;\n-    let _ = unsafe { *x };\n+    let _val = unsafe { *x };\n }"}, {"sha": "d02739610814415057670800990d939fde28886c", "filename": "tests/compile-fail/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_int.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -3,6 +3,6 @@\n fn main() {\n     // Can't offset an integer pointer by non-zero offset.\n     unsafe {\n-        let _ = (1 as *mut u8).offset(1);\n+        let _val = (1 as *mut u8).offset(1);\n     }\n }"}, {"sha": "b49c758c72f786404ec2fb4390db3eb8cd043ccc", "filename": "tests/compile-fail/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_int_plus_ptr.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -4,6 +4,6 @@ fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));\n     // Can't start with an integer pointer and get to something usable\n     unsafe {\n-        let _ = (1 as *mut u8).offset(ptr as isize);\n+        let _val = (1 as *mut u8).offset(ptr as isize);\n     }\n }"}, {"sha": "dfc91e9dc1b12eba0805296eab816917dec8b9f2", "filename": "tests/compile-fail/ptr_rem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_rem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_rem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_rem.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let val = 13usize;\n     let addr = &val as *const _ as usize;\n-    let _ = addr % 16; //~ ERROR access part of a pointer value as raw bytes\n+    let _val = addr % 16; //~ ERROR access part of a pointer value as raw bytes\n }"}, {"sha": "eacb9f07fffd79be6663c124841bd785bcca0859", "filename": "tests/compile-fail/ptr_wrapping_offset_int_plus_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_wrapping_offset_int_plus_ptr.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));\n     // Can't start with an integer pointer and get to something usable\n     let ptr = (1 as *mut u8).wrapping_offset(ptr as isize);\n-    let _ = unsafe { *ptr };\n+    let _val = unsafe { *ptr };\n }"}, {"sha": "ddc78c8bf1d4ae75a43254c5a41f016713a09648", "filename": "tests/compile-fail/transmute_fat1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Ftransmute_fat1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ftransmute_fat1.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -10,5 +10,5 @@ fn main() {\n     let bad = unsafe {\n         std::mem::transmute::<&[u8], [u8; 8]>(&[1u8])\n     };\n-    let _ = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n+    let _val = bad[0] + bad[bad.len()-1]; //~ ERROR a raw memory access tried to access part of a pointer value as raw bytes\n }"}, {"sha": "a3f90703634919f81894cc55dc30db888d9fcaf5", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _ = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something less or equal to 1114111\n+    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something less or equal to 1114111\n         'a' => {true},\n         'b' => {false},\n         _ => {true},"}, {"sha": "0488926870a21bd8bc00bbee72b12bc76305d100", "filename": "tests/compile-fail/zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Fcompile-fail%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fzst.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,4 +1,4 @@\n fn main() {\n     let x = &() as *const () as *const i32;\n-    let _ = unsafe { *x }; //~ ERROR access memory with alignment 1, but alignment 4 is required\n+    let _val = unsafe { *x }; //~ ERROR access memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "aa7bccaa5ff3acfe7099b7da53f91158d2347c05", "filename": "tests/run-pass-fullmir/catch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fcatch.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -3,6 +3,6 @@ use std::panic::{catch_unwind, AssertUnwindSafe};\n \n fn main() {\n     let mut i = 3;\n-    let _ = catch_unwind(AssertUnwindSafe(|| {i -= 2;} ));\n+    let _val = catch_unwind(AssertUnwindSafe(|| {i -= 2;} ));\n     println!(\"{}\", i);\n }"}, {"sha": "ce59e60a932d5cd005ccfd3d4c8fcb643299a0c1", "filename": "tests/run-pass-fullmir/from_utf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Ffrom_utf8.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _ = ::std::str::from_utf8(b\"a\");\n+    let _val = ::std::str::from_utf8(b\"a\");\n }"}, {"sha": "dad47d85a24663e68abbf8fdb2f246d851e4c323", "filename": "tests/run-pass-fullmir/threads.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass-fullmir%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fthreads.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -5,15 +5,15 @@ use std::sync;\n \n fn main() {\n     let m = sync::Mutex::new(0);\n-    let _ = m.lock();\n+    drop(m.lock());\n     drop(m);\n \n     // We don't provide RwLock on Windows\n     #[cfg(not(target_os = \"windows\"))]\n     {\n         let rw = sync::RwLock::new(0);\n-        let _ = rw.read();\n-        let _ = rw.write();\n+        drop(rw.read());\n+        drop(rw.write());\n         drop(rw);\n     }\n }"}, {"sha": "374efb6032bf53b30d2388f5296c64d7c9665085", "filename": "tests/run-pass/closure-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fclosure-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fclosure-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fclosure-drop.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -17,7 +17,7 @@ fn main() {\n         // this closure never by val uses its captures\n         // so it's basically a fn(&self)\n         // the shim used to not drop the `x`\n-        let x = move || { let _ = x; };\n+        let x = move || { let _val = x; };\n         f(x);\n     }\n     assert!(ran_drop);"}, {"sha": "8b481a0a2dd8984e2f94d95e1c7573ccc82f3440", "filename": "tests/run-pass/drop_empty_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fdrop_empty_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fdrop_empty_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdrop_empty_slice.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     // With the nested Vec, this is calling Offset(Unique::empty(), 0) on drop.\n     let args : Vec<Vec<i32>> = Vec::new();\n-    let _ = box args;\n+    let _val = box args;\n }"}, {"sha": "01371f5bec6830e592f9a960e890b5808db8d44e", "filename": "tests/run-pass/issue-20575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-20575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-20575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-20575.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     let functions: [Box<Fn() -> Option<()>>; 1] = [Box::new(|| None)];\n \n-    let _: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n+    let _val: Option<Vec<()>> = functions.iter().map(|f| (*f)()).collect();\n }"}, {"sha": "e29e5fbcc40812e3b99544aa30071c2d2716a319", "filename": "tests/run-pass/issue-26709.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-26709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-26709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-26709.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     let mut x = 0;\n     {\n         let wrapper = Box::new(Wrapper(&mut x, 123));\n-        let _: Box<Wrapper<Send>> = wrapper;\n+        let _val: Box<Wrapper<Send>> = wrapper;\n     }\n     assert_eq!(432, x)\n }"}, {"sha": "62a4263c1069bcab90a79a219cc072bb4a896789", "filename": "tests/run-pass/issue-33387.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-33387.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -15,5 +15,5 @@ trait Foo {}\n impl Foo for [u8; 2] {}\n \n fn main() {\n-    let _: Arc<Foo + Send> = Arc::new([3, 4]);\n+    let _val: Arc<Foo + Send> = Arc::new([3, 4]);\n }"}, {"sha": "39c841403ef0c8f94f99e0af76a8ddd80312201b", "filename": "tests/run-pass/issue-miri-184.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-miri-184.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fissue-miri-184.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-miri-184.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -1,4 +1,4 @@\n pub fn main() {\n     let bytes: [u8; 8] = unsafe { ::std::mem::transmute(0u64) };\n-    let _: &[u8] = &bytes;\n+    let _val: &[u8] = &bytes;\n }"}, {"sha": "3280c36e0a7292f75c8b0c2e7db1b71cc097e7e1", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -27,6 +27,6 @@ fn foo(i:isize, j: char) -> Foo {\n \n pub fn main() {\n     let (tx, rx) = channel();\n-    let _ = tx.send(foo(42, 'c'));\n-    let _ = rx;\n+    tx.send(foo(42, 'c')).unwrap();\n+    let _val = rx;\n }"}, {"sha": "4506a72e8dd0284ed1af91809a565ae8183a8392", "filename": "tests/run-pass/slices.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f42b7085683a7a08eb4caef73b2bf839385a7af3/tests%2Frun-pass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fslices.rs?ref=f42b7085683a7a08eb4caef73b2bf839385a7af3", "patch": "@@ -4,15 +4,15 @@ fn slice_of_zst() {\n     fn foo<T>(v: &[T]) -> Option<&[T]> {\n         let mut it = v.iter();\n         for _ in 0..5 {\n-            let _ = it.next();\n+            it.next();\n         }\n         Some(it.as_slice())\n     }\n \n     fn foo_mut<T>(v: &mut [T]) -> Option<&mut [T]> {\n         let mut it = v.iter_mut();\n         for _ in 0..5 {\n-            let _ = it.next();\n+            it.next();\n         }\n         Some(it.into_slice())\n     }"}, {"sha": "c85820b708b67fa78874fbfee622efe770ea2abd", "filename": "xargo/Cargo.lock", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FCargo.lock?ref=5958fa6a7049cd003e87d6d8502ae1237262c378", "patch": "@@ -1,4 +0,0 @@\n-[[package]]\n-name = \"miri-xargo\"\n-version = \"0.0.0\"\n-"}, {"sha": "9129c105b112bb1b3dd597b118e2ac13466b505b", "filename": "xargo/Cargo.toml", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FCargo.toml?ref=5958fa6a7049cd003e87d6d8502ae1237262c378", "patch": "@@ -1,6 +0,0 @@\n-[package]\n-name = \"miri-xargo\"\n-description = \"A dummy project for building libstd with xargo.\"\n-version = \"0.0.0\"\n-\n-[dependencies]"}, {"sha": "e49b0dbe743b4fb726a1533ffa6cd2a30e76ba1b", "filename": "xargo/Xargo.toml", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FXargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2FXargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2FXargo.toml?ref=5958fa6a7049cd003e87d6d8502ae1237262c378", "patch": "@@ -1,5 +0,0 @@\n-[dependencies.std]\n-features = [\"panic_unwind\", \"backtrace\"]\n-\n-[dependencies.test]\n-stage = 1"}, {"sha": "25c56d31ab56a4032e22e773d153064700091643", "filename": "xargo/build.sh", "status": "removed", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2Fbuild.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2Fbuild.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2Fbuild.sh?ref=5958fa6a7049cd003e87d6d8502ae1237262c378", "patch": "@@ -1,4 +0,0 @@\n-#!/bin/sh\n-cd \"$(dirname \"$0\")\"\n-# The flags here should be kept in sync with `add_miri_default_args` in `src/lib.rs`.\n-RUSTFLAGS='-Zalways-encode-mir -Zmir-emit-retag -Zmir-opt-level=0' xargo build"}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "xargo/src/lib.rs", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5958fa6a7049cd003e87d6d8502ae1237262c378/xargo%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xargo%2Fsrc%2Flib.rs?ref=5958fa6a7049cd003e87d6d8502ae1237262c378"}]}