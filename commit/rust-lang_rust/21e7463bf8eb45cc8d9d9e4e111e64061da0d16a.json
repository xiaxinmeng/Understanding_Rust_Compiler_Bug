{"sha": "21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "node_id": "C_kwDOAAsO6NoAKDIxZTc0NjNiZjhlYjQ1Y2M4ZDlkOWU0ZTExMWU2NDA2MWRhMGQxNmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-06T10:00:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-06T10:00:33Z"}, "message": "Rollup merge of #112019 - jieyouxu:issue-111554, r=compiler-errors\n\nDon't suggest changing `&self` and `&mut self` in function signature to be mutable when taking `&mut self` in closure\n\nCurrent suggestion for when taking a mutable reference to `self` in a closure (as an upvar) will produce a machine-applicable suggestion to change the `self` in the function signature to `mut self`, but does not account for the specialness of implicit self in that it can already have `&` and `&mut` (see #111554). This causes the function signature to become `test(&mut mut self)` which does not seem desirable.\n\n```\nerror[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> src/sound_player.rs:870:11\n    |\n869 |     pub fn test(&mut self) {\n    |                      ---- help: consider changing this to be mutable: `mut self`\n870 |     || test2(&mut self);\n    |              ^^^^^^^^^ cannot borrow as mutable\n```\n\nThis PR suppresses the \"changing this to be mutable\" suggestion if the implicit self is either `ImplicitSelfKind::ImmRef` or `ImplicitSelfKind::MutRef`.\n\nFixes #111554.", "tree": {"sha": "31a0a7ed3b15f9496ab08c1a0afe66a88578c099", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31a0a7ed3b15f9496ab08c1a0afe66a88578c099"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkfwPBCRBK7hj4Ov3rIwAAeR0IACrHBcv7aDbFaxdWF5GG8bHI\nSAgONNIDZOaGVUVUseN/BlNcT9qMnEtDwNY1CxqQhhS3AJBlHF6yas6VnjP2h7fO\nXV6ywN5VFDb1SrVw7QL4JWZoYfc/tS8s8zEYC8Xfl8Afw7kNzKC4ZjrzAgsVGOkX\niOvSSLaW2gWP846ByxjY/g073D52HMrhzdZ52PlzK0AHZ0DHoX01QKVnNv0YudsP\nbW9Z/8pdpvSsXR/GIyCRI2uRwZQMCVv2W0f22TqKRbgVSOa/A2pmpN8k905qz2/3\nOisNegYp/uIOKxFOZozQBrKQOPt0HrFOtQrR4F4j8cSrCY0Rs5J+n/wwk7bHPLs=\n=K4wQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 31a0a7ed3b15f9496ab08c1a0afe66a88578c099\nparent 29871d5480c887abdaf4b8b2b925a9e4aee7b521\nparent 57e67e4ab21b466158a3e7eeaf598baefc18ad72\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686045633 +0200\ncommitter GitHub <noreply@github.com> 1686045633 +0200\n\nRollup merge of #112019 - jieyouxu:issue-111554, r=compiler-errors\n\nDon't suggest changing `&self` and `&mut self` in function signature to be mutable when taking `&mut self` in closure\n\nCurrent suggestion for when taking a mutable reference to `self` in a closure (as an upvar) will produce a machine-applicable suggestion to change the `self` in the function signature to `mut self`, but does not account for the specialness of implicit self in that it can already have `&` and `&mut` (see #111554). This causes the function signature to become `test(&mut mut self)` which does not seem desirable.\n\n```\nerror[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n   --> src/sound_player.rs:870:11\n    |\n869 |     pub fn test(&mut self) {\n    |                      ---- help: consider changing this to be mutable: `mut self`\n870 |     || test2(&mut self);\n    |              ^^^^^^^^^ cannot borrow as mutable\n```\n\nThis PR suppresses the \"changing this to be mutable\" suggestion if the implicit self is either `ImplicitSelfKind::ImmRef` or `ImplicitSelfKind::MutRef`.\n\nFixes #111554.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "html_url": "https://github.com/rust-lang/rust/commit/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29871d5480c887abdaf4b8b2b925a9e4aee7b521", "url": "https://api.github.com/repos/rust-lang/rust/commits/29871d5480c887abdaf4b8b2b925a9e4aee7b521", "html_url": "https://github.com/rust-lang/rust/commit/29871d5480c887abdaf4b8b2b925a9e4aee7b521"}, {"sha": "57e67e4ab21b466158a3e7eeaf598baefc18ad72", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e67e4ab21b466158a3e7eeaf598baefc18ad72", "html_url": "https://github.com/rust-lang/rust/commit/57e67e4ab21b466158a3e7eeaf598baefc18ad72"}], "stats": {"total": 85, "additions": 79, "deletions": 6}, "files": [{"sha": "34d466db2b4090dc4868ad797a6e5f53d7e027cd", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 22, "deletions": 6, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "patch": "@@ -416,12 +416,28 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         _,\n                     ) = pat.kind\n                 {\n-                    err.span_suggestion(\n-                        upvar_ident.span,\n-                        \"consider changing this to be mutable\",\n-                        format!(\"mut {}\", upvar_ident.name),\n-                        Applicability::MachineApplicable,\n-                    );\n+                    if upvar_ident.name == kw::SelfLower {\n+                        for (_, node) in self.infcx.tcx.hir().parent_iter(upvar_hir_id) {\n+                            if let Some(fn_decl) = node.fn_decl() {\n+                                if !matches!(fn_decl.implicit_self, hir::ImplicitSelfKind::ImmRef | hir::ImplicitSelfKind::MutRef) {\n+                                    err.span_suggestion(\n+                                        upvar_ident.span,\n+                                        \"consider changing this to be mutable\",\n+                                        format!(\"mut {}\", upvar_ident.name),\n+                                        Applicability::MachineApplicable,\n+                                    );\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                    } else {\n+                        err.span_suggestion(\n+                            upvar_ident.span,\n+                            \"consider changing this to be mutable\",\n+                            format!(\"mut {}\", upvar_ident.name),\n+                            Applicability::MachineApplicable,\n+                        );\n+                    }\n                 }\n \n                 let tcx = self.infcx.tcx;"}, {"sha": "0dad55be3acffa58eb2b1b76b954037d2a34f34a", "filename": "tests/ui/borrowck/issue-111554.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/tests%2Fui%2Fborrowck%2Fissue-111554.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/tests%2Fui%2Fborrowck%2Fissue-111554.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-111554.rs?ref=21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "patch": "@@ -0,0 +1,28 @@\n+struct Foo {}\n+\n+impl Foo {\n+    pub fn foo(&mut self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+    }\n+\n+    pub fn baz(&self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+        //~| ERROR cannot borrow data in a `&` reference as mutable\n+    }\n+\n+    pub fn qux(mut self) {\n+        || bar(&mut self);\n+        // OK\n+    }\n+\n+    pub fn quux(self) {\n+        || bar(&mut self);\n+        //~^ ERROR cannot borrow `self` as mutable, as it is not declared as mutable\n+    }\n+}\n+\n+fn bar(_: &mut Foo) {}\n+\n+fn main() {}"}, {"sha": "6b7a42e4959996fb58ded429475282980f1310e9", "filename": "tests/ui/borrowck/issue-111554.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/tests%2Fui%2Fborrowck%2Fissue-111554.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21e7463bf8eb45cc8d9d9e4e111e64061da0d16a/tests%2Fui%2Fborrowck%2Fissue-111554.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-111554.stderr?ref=21e7463bf8eb45cc8d9d9e4e111e64061da0d16a", "patch": "@@ -0,0 +1,29 @@\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:5:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:10:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow data in a `&` reference as mutable\n+  --> $DIR/issue-111554.rs:10:16\n+   |\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `self` as mutable, as it is not declared as mutable\n+  --> $DIR/issue-111554.rs:21:16\n+   |\n+LL |     pub fn quux(self) {\n+   |                 ---- help: consider changing this to be mutable: `mut self`\n+LL |         || bar(&mut self);\n+   |                ^^^^^^^^^ cannot borrow as mutable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0596`."}]}