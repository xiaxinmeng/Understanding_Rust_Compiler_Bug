{"sha": "3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNDVmZTllMWQ0YWQ0YzI3ZGQ0NDNiZGI1MjNiZWZkM2YwYjk2YzI=", "commit": {"author": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T10:51:42Z"}, "committer": {"name": "Jonas Hietala", "email": "tradet.h@gmail.com", "date": "2014-07-24T10:51:42Z"}, "message": "Documentation examples for LruCache.", "tree": {"sha": "e0a8b6678290a0a88f131037c4faafc42fbfdccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0a8b6678290a0a88f131037c4faafc42fbfdccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "html_url": "https://github.com/rust-lang/rust/commit/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2/comments", "author": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "treeman", "id": 162027, "node_id": "MDQ6VXNlcjE2MjAyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162027?v=4", "gravatar_id": "", "url": "https://api.github.com/users/treeman", "html_url": "https://github.com/treeman", "followers_url": "https://api.github.com/users/treeman/followers", "following_url": "https://api.github.com/users/treeman/following{/other_user}", "gists_url": "https://api.github.com/users/treeman/gists{/gist_id}", "starred_url": "https://api.github.com/users/treeman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/treeman/subscriptions", "organizations_url": "https://api.github.com/users/treeman/orgs", "repos_url": "https://api.github.com/users/treeman/repos", "events_url": "https://api.github.com/users/treeman/events{/privacy}", "received_events_url": "https://api.github.com/users/treeman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e2bb9d67bb47b9a3a6c7389efa45cefc33206a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e2bb9d67bb47b9a3a6c7389efa45cefc33206a6", "html_url": "https://github.com/rust-lang/rust/commit/9e2bb9d67bb47b9a3a6c7389efa45cefc33206a6"}], "stats": {"total": 86, "additions": 86, "deletions": 0}, "files": [{"sha": "e2aff529b79877a1603e9ea56b848951007470f3", "filename": "src/libstd/collections/lru_cache.rs", "status": "modified", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2/src%2Flibstd%2Fcollections%2Flru_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2/src%2Flibstd%2Fcollections%2Flru_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Flru_cache.rs?ref=3c45fe9e1d4ad4c27dd443bdb523befd3f0b96c2", "patch": "@@ -92,6 +92,13 @@ impl<K, V> LruEntry<K, V> {\n \n impl<K: Hash + Eq, V> LruCache<K, V> {\n     /// Create an LRU Cache that holds at most `capacity` items.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(10u);\n+    /// ```\n     pub fn new(capacity: uint) -> LruCache<K, V> {\n         let cache = LruCache {\n             map: HashMap::new(),\n@@ -106,6 +113,18 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Put a key-value pair into cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2u);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// assert_eq!(cache.get(&1), Some(&\"a\"));\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// ```\n     pub fn put(&mut self, k: K, v: V) {\n         let (node_ptr, node_opt) = match self.map.find_mut(&KeyRef{k: &k}) {\n             Some(node) => {\n@@ -137,6 +156,21 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Return a value corresponding to the key in the cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2u);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// cache.put(2, \"c\");\n+    /// cache.put(3, \"d\");\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), Some(&\"c\"));\n+    /// ```\n     pub fn get<'a>(&'a mut self, k: &K) -> Option<&'a V> {\n         let (value, node_ptr_opt) = match self.map.find_mut(&KeyRef{k: k}) {\n             None => (None, None),\n@@ -156,6 +190,20 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Remove and return a value corresponding to the key from the cache.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2u);\n+    ///\n+    /// cache.put(2i, \"a\");\n+    ///\n+    /// assert_eq!(cache.pop(&1), None);\n+    /// assert_eq!(cache.pop(&2), Some(\"a\"));\n+    /// assert_eq!(cache.pop(&2), None);\n+    /// assert_eq!(cache.len(), 0);\n+    /// ```\n     pub fn pop(&mut self, k: &K) -> Option<V> {\n         match self.map.pop(&KeyRef{k: k}) {\n             None => None,\n@@ -164,12 +212,50 @@ impl<K: Hash + Eq, V> LruCache<K, V> {\n     }\n \n     /// Return the maximum number of key-value pairs the cache can hold.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache: LruCache<int, &str> = LruCache::new(2u);\n+    /// assert_eq!(cache.capacity(), 2);\n+    /// ```\n     pub fn capacity(&self) -> uint {\n         self.max_size\n     }\n \n     /// Change the number of key-value pairs the cache can hold. Remove\n     /// least-recently-used key-value pairs if necessary.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// use std::collections::LruCache;\n+    /// let mut cache = LruCache::new(2u);\n+    ///\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// cache.put(3, \"c\");\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    ///\n+    /// cache.change_capacity(3u);\n+    /// cache.put(1i, \"a\");\n+    /// cache.put(2, \"b\");\n+    /// cache.put(3, \"c\");\n+    ///\n+    /// assert_eq!(cache.get(&1), Some(&\"a\"));\n+    /// assert_eq!(cache.get(&2), Some(&\"b\"));\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    ///\n+    /// cache.change_capacity(1u);\n+    ///\n+    /// assert_eq!(cache.get(&1), None);\n+    /// assert_eq!(cache.get(&2), None);\n+    /// assert_eq!(cache.get(&3), Some(&\"c\"));\n+    /// ```\n     pub fn change_capacity(&mut self, capacity: uint) {\n         for _ in range(capacity, self.len()) {\n             self.remove_lru();"}]}