{"sha": "3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMGNhZmJjZDdjMmZlMDkyODg4YjU4YWQ1OTk0YmQyODBlYjQwYjk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-20T17:25:30Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T06:40:15Z"}, "message": "tests: update expected recursion limit errors for the temporary lack of spans.", "tree": {"sha": "746f912eda137746332331d9de39aa26aff47a8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/746f912eda137746332331d9de39aa26aff47a8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "html_url": "https://github.com/rust-lang/rust/commit/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a8a5172a55e3ae33cf1d03aa8ac387e4ad94fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a8a5172a55e3ae33cf1d03aa8ac387e4ad94fda", "html_url": "https://github.com/rust-lang/rust/commit/7a8a5172a55e3ae33cf1d03aa8ac387e4ad94fda"}], "stats": {"total": 45, "additions": 29, "deletions": 16}, "files": [{"sha": "0689b0ded6ecdcf58f468066d01cc3ae87f6690e", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "patch": "@@ -120,7 +120,16 @@ pub fn erase_regions<'tcx,T>(cx: &ty::ctxt<'tcx>, value: &T) -> T\n // Is the type's representation size known at compile time?\n pub fn type_is_sized<'tcx>(tcx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {\n     let param_env = ty::empty_parameter_environment(tcx);\n-    ty::type_is_sized(&param_env, DUMMY_SP, ty)\n+    // FIXME(#4287) This can cause errors due to polymorphic recursion,\n+    // a better span should be provided, if available.\n+    let err_count = tcx.sess.err_count();\n+    let is_sized = ty::type_is_sized(&param_env, DUMMY_SP, ty);\n+    // Those errors aren't fatal, but an incorrect result can later\n+    // trip over asserts in both rustc's trans and LLVM.\n+    if err_count < tcx.sess.err_count() {\n+        tcx.sess.abort_if_errors();\n+    }\n+    is_sized\n }\n \n pub fn type_is_fat_ptr<'tcx>(cx: &ty::ctxt<'tcx>, ty: Ty<'tcx>) -> bool {"}, {"sha": "d39efa3c2ab78f909815c6db507a9a0be4a6419a", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,28 +8,34 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: reached the recursion limit during monomorphization\n-// issue 2258\n+//~^^^^^^^^^^ ERROR overflow\n+//\n+// We get an error message at the top of file (dummy span).\n+// This is not helpful, but also kind of annoying to prevent,\n+// so for now just live with it.\n+// This test case was originally for issue #2258.\n \n-trait to_opt {\n+trait ToOpt {\n     fn to_option(&self) -> Option<Self>;\n }\n \n-impl to_opt for usize {\n+impl ToOpt for usize {\n     fn to_option(&self) -> Option<usize> {\n         Some(*self)\n     }\n }\n \n-impl<T:Clone> to_opt for Option<T> {\n+impl<T:Clone> ToOpt for Option<T> {\n     fn to_option(&self) -> Option<Option<T>> {\n         Some((*self).clone())\n     }\n }\n \n-fn function<T:to_opt + Clone>(counter: usize, t: T) {\n+fn function<T:ToOpt + Clone>(counter: usize, t: T) {\n     if counter > 0_usize {\n         function(counter - 1_usize, t.to_option());\n+        // FIXME(#4287) Error message should be here. It should be\n+        // a type error to instantiate `test` at a type other than T.\n     }\n }\n "}, {"sha": "55f3b995336534c5e7cf8e9424ceb167bf2387b5", "filename": "src/test/compile-fail/recursion.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0cafbcd7c2fe092888b58ad5994bd280eb40b9/src%2Ftest%2Fcompile-fail%2Frecursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frecursion.rs?ref=3b0cafbcd7c2fe092888b58ad5994bd280eb40b9", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -10,10 +10,9 @@\n \n //~^^^^^^^^^^ ERROR overflow\n //\n-// We also get a second error message at the top of file (dummy\n-// span). This is not helpful, but also kind of annoying to prevent,\n-// so for now just live with it, since we also get a second message\n-// that is more helpful.\n+// We get an error message at the top of file (dummy span).\n+// This is not helpful, but also kind of annoying to prevent,\n+// so for now just live with it.\n \n enum Nil {NilValue}\n struct Cons<T> {head:isize, tail:T}\n@@ -28,9 +27,8 @@ impl<T:Dot> Dot for Cons<T> {\n }\n fn test<T:Dot> (n:isize, i:isize, first:T, second:T) ->isize {\n   match n {    0 => {first.dot(second)}\n-      //~^ ERROR: reached the recursion limit during monomorphization\n-      // Error message should be here. It should be a type error\n-      // to instantiate `test` at a type other than T. (See #4287)\n+      // FIXME(#4287) Error message should be here. It should be\n+      // a type error to instantiate `test` at a type other than T.\n     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}\n   }\n }"}]}