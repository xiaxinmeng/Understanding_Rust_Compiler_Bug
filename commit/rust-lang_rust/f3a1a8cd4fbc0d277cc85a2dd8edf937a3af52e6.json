{"sha": "f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "node_id": "C_kwDOAAsO6NoAKGYzYTFhOGNkNGZiYzBkMjc3Y2M4NWEyZGQ4ZWRmOTM3YTNhZjUyZTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-21T18:36:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-21T18:36:52Z"}, "message": "Rollup merge of #94203 - RalfJung:to_sized_int, r=oli-obk\n\nCTFE engine: Scalar: expose size-generic to_(u)int methods\n\nThis matches the size-generic constructors `Scalar::from_(u)int`, and it would have helped in https://github.com/rust-lang/miri/pull/1978.\n\nr? `@oli-obk`", "tree": {"sha": "28c874dc58e9047fee8ba42bb1caea6fead27040", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28c874dc58e9047fee8ba42bb1caea6fead27040"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiE9vECRBK7hj4Ov3rIwAA8O0IAImeEb04F4djzSqVU+Ccddac\nr0JsOUbxtYe/ZhRIVjaHI6CNn2FFhBE3iYgVKLZYR5GN5zidTK2L8dvD9+PfN/DY\n40pT5/kCpcoiJw1feWKSHJD6qasQPqv16FXfoXwDFzL2jgyUsxeV+1QVRSTKYiy2\nIJMcCgz4On0ZB8svW5WIh+Ag4pSEyVWvxarLCBdHXyeAql5Ns5j5tVHsV3odhsMR\nj9ORiET/BMNFA/PpwvQ3apiaJ739W9023ghh0aUxeNG7GoOC6gg7AjYBnfSahRDc\n4micfKAY9v0m4fZhXM86kGMuNs9tl/E9hn9LF/BZlCWtgkmA6rEfkzYh24ROnOM=\n=YFa6\n-----END PGP SIGNATURE-----\n", "payload": "tree 28c874dc58e9047fee8ba42bb1caea6fead27040\nparent 3095743600316af3ef67728c14473867500b58a2\nparent 1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645468612 +0100\ncommitter GitHub <noreply@github.com> 1645468612 +0100\n\nRollup merge of #94203 - RalfJung:to_sized_int, r=oli-obk\n\nCTFE engine: Scalar: expose size-generic to_(u)int methods\n\nThis matches the size-generic constructors `Scalar::from_(u)int`, and it would have helped in https://github.com/rust-lang/miri/pull/1978.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "html_url": "https://github.com/rust-lang/rust/commit/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3095743600316af3ef67728c14473867500b58a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/3095743600316af3ef67728c14473867500b58a2", "html_url": "https://github.com/rust-lang/rust/commit/3095743600316af3ef67728c14473867500b58a2"}, {"sha": "1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad", "html_url": "https://github.com/rust-lang/rust/commit/1e3609b1ba6cc83a7a7897202ddfca42e5dbf0ad"}], "stats": {"total": 46, "additions": 25, "deletions": 21}, "files": [{"sha": "acf7847de54169453403e57d5a37b5f4bab963d7", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=f3a1a8cd4fbc0d277cc85a2dd8edf937a3af52e6", "patch": "@@ -379,78 +379,82 @@ impl<'tcx, Tag: Provenance> Scalar<Tag> {\n         }\n     }\n \n+    /// Converts the scalar to produce an unsigned integer of the given size.\n+    /// Fails if the scalar is a pointer.\n     #[inline]\n-    fn to_unsigned_with_bit_width(self, bits: u64) -> InterpResult<'static, u128> {\n-        let sz = Size::from_bits(bits);\n-        self.to_bits(sz)\n+    pub fn to_uint(self, size: Size) -> InterpResult<'static, u128> {\n+        self.to_bits(size)\n     }\n \n     /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.\n     pub fn to_u8(self) -> InterpResult<'static, u8> {\n-        self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(8)).map(|v| u8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.\n     pub fn to_u16(self) -> InterpResult<'static, u16> {\n-        self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(16)).map(|v| u16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.\n     pub fn to_u32(self) -> InterpResult<'static, u32> {\n-        self.to_unsigned_with_bit_width(32).map(|v| u32::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(32)).map(|v| u32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.\n     pub fn to_u64(self) -> InterpResult<'static, u64> {\n-        self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())\n+        self.to_uint(Size::from_bits(64)).map(|v| u64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.\n     pub fn to_u128(self) -> InterpResult<'static, u128> {\n-        self.to_unsigned_with_bit_width(128)\n+        self.to_uint(Size::from_bits(128))\n     }\n \n+    /// Converts the scalar to produce a machine-pointer-sized unsigned integer.\n+    /// Fails if the scalar is a pointer.\n     pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n-        let b = self.to_bits(cx.data_layout().pointer_size)?;\n+        let b = self.to_uint(cx.data_layout().pointer_size)?;\n         Ok(u64::try_from(b).unwrap())\n     }\n \n+    /// Converts the scalar to produce a signed integer of the given size.\n+    /// Fails if the scalar is a pointer.\n     #[inline]\n-    fn to_signed_with_bit_width(self, bits: u64) -> InterpResult<'static, i128> {\n-        let sz = Size::from_bits(bits);\n-        let b = self.to_bits(sz)?;\n-        Ok(sz.sign_extend(b) as i128)\n+    pub fn to_int(self, size: Size) -> InterpResult<'static, i128> {\n+        let b = self.to_bits(size)?;\n+        Ok(size.sign_extend(b) as i128)\n     }\n \n     /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n     pub fn to_i8(self) -> InterpResult<'static, i8> {\n-        self.to_signed_with_bit_width(8).map(|v| i8::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(8)).map(|v| i8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i16`. Fails if the scalar is a pointer.\n     pub fn to_i16(self) -> InterpResult<'static, i16> {\n-        self.to_signed_with_bit_width(16).map(|v| i16::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(16)).map(|v| i16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i32`. Fails if the scalar is a pointer.\n     pub fn to_i32(self) -> InterpResult<'static, i32> {\n-        self.to_signed_with_bit_width(32).map(|v| i32::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(32)).map(|v| i32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i64`. Fails if the scalar is a pointer.\n     pub fn to_i64(self) -> InterpResult<'static, i64> {\n-        self.to_signed_with_bit_width(64).map(|v| i64::try_from(v).unwrap())\n+        self.to_int(Size::from_bits(64)).map(|v| i64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i128`. Fails if the scalar is a pointer.\n     pub fn to_i128(self) -> InterpResult<'static, i128> {\n-        self.to_signed_with_bit_width(128)\n+        self.to_int(Size::from_bits(128))\n     }\n \n+    /// Converts the scalar to produce a machine-pointer-sized signed integer.\n+    /// Fails if the scalar is a pointer.\n     pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n-        let sz = cx.data_layout().pointer_size;\n-        let b = self.to_bits(sz)?;\n-        let b = sz.sign_extend(b) as i128;\n+        let b = self.to_int(cx.data_layout().pointer_size)?;\n         Ok(i64::try_from(b).unwrap())\n     }\n "}]}