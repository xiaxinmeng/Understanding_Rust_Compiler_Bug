{"sha": "c457b26e33ccd83da9055acb19f6099e4a353a12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0NTdiMjZlMzNjY2Q4M2RhOTA1NWFjYjE5ZjYwOTllNGEzNTNhMTI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-07-30T17:43:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-08-02T14:28:11Z"}, "message": "rustc_trans: do not pass floating-point values to LLVM through FFI.", "tree": {"sha": "cd779ad3306174d5e8d859fc877eefc3a2c029e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd779ad3306174d5e8d859fc877eefc3a2c029e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c457b26e33ccd83da9055acb19f6099e4a353a12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c457b26e33ccd83da9055acb19f6099e4a353a12", "html_url": "https://github.com/rust-lang/rust/commit/c457b26e33ccd83da9055acb19f6099e4a353a12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c457b26e33ccd83da9055acb19f6099e4a353a12/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9861df47601cf6cb105d390db6c3a753dea7622e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9861df47601cf6cb105d390db6c3a753dea7622e", "html_url": "https://github.com/rust-lang/rust/commit/9861df47601cf6cb105d390db6c3a753dea7622e"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "20735af69e3786571d7fb6be8d4354340a609ba6", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=c457b26e33ccd83da9055acb19f6099e4a353a12", "patch": "@@ -598,7 +598,6 @@ extern \"C\" {\n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;\n     pub fn LLVMConstIntOfArbitraryPrecision(IntTy: TypeRef, Wn: c_uint, Ws: *const u64) -> ValueRef;\n-    pub fn LLVMConstReal(RealTy: TypeRef, N: f64) -> ValueRef;\n     pub fn LLVMConstIntGetZExtValue(ConstantVal: ValueRef) -> c_ulonglong;\n     pub fn LLVMConstIntGetSExtValue(ConstantVal: ValueRef) -> c_longlong;\n     pub fn LLVMRustConstInt128Get(ConstantVal: ValueRef, SExt: bool,"}, {"sha": "086a8290cff7a6d5a24d15d1a58f161cddab598c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=c457b26e33ccd83da9055acb19f6099e4a353a12", "patch": "@@ -844,8 +844,7 @@ fn create_imps(sess: &Session,\n             let imp = llvm::LLVMAddGlobal(llvm_module.llmod,\n                                           i8p_ty.to_ref(),\n                                           imp_name.as_ptr() as *const _);\n-            let init = llvm::LLVMConstBitCast(val, i8p_ty.to_ref());\n-            llvm::LLVMSetInitializer(imp, init);\n+            llvm::LLVMSetInitializer(imp, consts::ptrcast(val, i8p_ty));\n             llvm::LLVMRustSetLinkage(imp, llvm::Linkage::ExternalLinkage);\n         }\n     }"}, {"sha": "61766a3db2c9d9c53884afd2b4d7ed1779a86cbc", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=c457b26e33ccd83da9055acb19f6099e4a353a12", "patch": "@@ -223,12 +223,6 @@ pub fn C_big_integral(t: Type, u: u128) -> ValueRef {\n     }\n }\n \n-pub fn C_floating_f64(f: f64, t: Type) -> ValueRef {\n-    unsafe {\n-        llvm::LLVMConstReal(t.to_ref(), f)\n-    }\n-}\n-\n pub fn C_nil(ccx: &CrateContext) -> ValueRef {\n     C_struct(ccx, &[], false)\n }"}, {"sha": "310cd6fe9559d8942d4af168ee4603b76bec8fa0", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=c457b26e33ccd83da9055acb19f6099e4a353a12", "patch": "@@ -36,6 +36,12 @@ pub fn ptrcast(val: ValueRef, ty: Type) -> ValueRef {\n     }\n }\n \n+pub fn bitcast(val: ValueRef, ty: Type) -> ValueRef {\n+    unsafe {\n+        llvm::LLVMConstBitCast(val, ty.to_ref())\n+    }\n+}\n+\n pub fn addr_of_mut(ccx: &CrateContext,\n                    cv: ValueRef,\n                    align: machine::llalign,"}, {"sha": "265600a35e76d6540b346b43c71ae498e3df83ef", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c457b26e33ccd83da9055acb19f6099e4a353a12/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=c457b26e33ccd83da9055acb19f6099e4a353a12", "patch": "@@ -11,7 +11,6 @@\n use llvm::{self, ValueRef};\n use rustc::middle::const_val::{ConstEvalErr, ConstVal, ErrKind};\n use rustc_const_math::ConstInt::*;\n-use rustc_const_math::ConstFloat;\n use rustc_const_math::{ConstInt, ConstMathErr};\n use rustc::hir::def_id::DefId;\n use rustc::infer::TransNormalize;\n@@ -27,7 +26,7 @@ use abi::{self, Abi};\n use callee;\n use builder::Builder;\n use common::{self, CrateContext, const_get_elt, val_ty};\n-use common::{C_array, C_bool, C_bytes, C_floating_f64, C_integral, C_big_integral};\n+use common::{C_array, C_bool, C_bytes, C_integral, C_big_integral, C_u32, C_u64};\n use common::{C_null, C_struct, C_str_slice, C_undef, C_uint, C_vector, is_undef};\n use common::const_to_opt_u128;\n use consts;\n@@ -37,6 +36,7 @@ use type_::Type;\n use value::Value;\n \n use syntax_pos::Span;\n+use syntax::ast;\n \n use std::fmt;\n use std::ptr;\n@@ -96,11 +96,11 @@ impl<'tcx> Const<'tcx> {\n         let llty = type_of::type_of(ccx, ty);\n         let val = match cv {\n             ConstVal::Float(v) => {\n-                let v_f64 = match v {\n-                    ConstFloat::F32(v) => f32::from_bits(v) as f64,\n-                    ConstFloat::F64(v) => f64::from_bits(v)\n+                let bits = match v.ty {\n+                    ast::FloatTy::F32 => C_u32(ccx, v.bits as u32),\n+                    ast::FloatTy::F64 => C_u64(ccx, v.bits as u64)\n                 };\n-                C_floating_f64(v_f64, llty)\n+                consts::bitcast(bits, llty)\n             }\n             ConstVal::Bool(v) => C_bool(ccx, v),\n             ConstVal::Integral(ref i) => return Const::from_constint(ccx, i),"}]}