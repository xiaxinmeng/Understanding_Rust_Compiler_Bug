{"sha": "3868a62713245880145caca63a3e456c806a5bb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NjhhNjI3MTMyNDU4ODAxNDVjYWNhNjNhM2U0NTZjODA2YTViYjk=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T09:46:37Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-08T09:46:37Z"}, "message": "put `ConstantId`'s common fields into a struct", "tree": {"sha": "9f922f9bd603e85db0dc861a4b79380d0b219c0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f922f9bd603e85db0dc861a4b79380d0b219c0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3868a62713245880145caca63a3e456c806a5bb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXV+l9AAoJEFbW7qD8Z6xGkCcP/35FlSc8bdZ02PZlcLwGklsm\n1Q9IZBTIpIiHWVpGZNL7AizVvGbJ+PbAadw4L1rihtGQDfyb6Ztpec91XES4lBdX\nekOZLxTnWUFChqCaD1uICOYzSgu5dIhIzUMZu7uuQSgNE7PuO0m9pHaV0xfGtcdi\nCGXUjI2VIW3msYORTgcnTtNIblezZpCZ2V8G1C6KAVAMvN9PT27SugaKuyo3PqLd\nLFT/lbu9/cPxLlYy2KkC1pmEQATkxQsa7yE2/czc8Rmxo2kRXl7HZPFxTVMpe4XL\nhskPpsWDQQR8maz4nWqkNC4vTxW7l3348I9N2U5aITAPgV9tUaozuV0rKNvSedNj\nNZK0UHL94SOEKpR5Uqag3E1ZGm50uRS/Jli27Ss8LC3kJZg5LK2RzAIZ9LqcecIE\nakxDYtgO/fgYUrUth9j2URJyTPqVE5pHEJJzxPduE1bY6BJSLyrza3WzcN14UidH\nyzOmhyhw17XW8/oDs5+3poD7fjLioCFjmiXsbraSuVrbHMy+2HW0j6+iHcJ+oGfW\n+RfcwOictyFq1oMeX3rUtYdwBsQywoDCL/x6qUNE2IoAcVNZbkKZy6BPPwM1OXkq\nO93tNhrQAkYlmew0xfL+1or597168PdnFWRG+AbyB4Z+ZOEUBANODfn6c4k6UAE0\nT081HvirOSvSEdFmJV+C\n=FX42\n-----END PGP SIGNATURE-----", "payload": "tree 9f922f9bd603e85db0dc861a4b79380d0b219c0a\nparent 3de30e33f50377d00c7222db1d98398e9a8bb41d\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465379197 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465379197 +0200\n\nput `ConstantId`'s common fields into a struct"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3868a62713245880145caca63a3e456c806a5bb9", "html_url": "https://github.com/rust-lang/rust/commit/3868a62713245880145caca63a3e456c806a5bb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3868a62713245880145caca63a3e456c806a5bb9/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de30e33f50377d00c7222db1d98398e9a8bb41d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de30e33f50377d00c7222db1d98398e9a8bb41d", "html_url": "https://github.com/rust-lang/rust/commit/3de30e33f50377d00c7222db1d98398e9a8bb41d"}], "stats": {"total": 58, "additions": 27, "deletions": 31}, "files": [{"sha": "a7e95af6bbf3f814d57d6542b5af17528163d538", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3868a62713245880145caca63a3e456c806a5bb9/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3868a62713245880145caca63a3e456c806a5bb9/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=3868a62713245880145caca63a3e456c806a5bb9", "patch": "@@ -129,30 +129,18 @@ enum TerminatorTarget {\n }\n \n #[derive(Clone, Debug, Eq, PartialEq, Hash)]\n-enum ConstantId<'tcx> {\n-    Promoted { def_id: DefId, substs: &'tcx Substs<'tcx>, index: usize },\n-    Static { def_id: DefId, substs: &'tcx Substs<'tcx> },\n+struct ConstantId<'tcx> {\n+    def_id: DefId,\n+    substs: &'tcx Substs<'tcx>,\n+    kind: ConstantKind,\n }\n \n-impl<'tcx> ConstantId<'tcx> {\n-    fn substs(&self) -> &'tcx Substs<'tcx> {\n-        use self::ConstantId::*;\n-        match *self {\n-            Promoted { substs, .. } |\n-            Static { substs, .. } => substs\n-        }\n-    }\n-\n-    fn def_id(&self) -> DefId {\n-        use self::ConstantId::*;\n-        match *self {\n-            Promoted { def_id, .. } |\n-            Static { def_id, .. } => def_id,\n-        }\n-    }\n+#[derive(Clone, Debug, Eq, PartialEq, Hash)]\n+enum ConstantKind {\n+    Promoted(usize),\n+    Static,\n }\n \n-\n impl<'a, 'tcx> GlobalEvalContext<'a, 'tcx> {\n     fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'a MirMap<'tcx>) -> Self {\n         GlobalEvalContext {\n@@ -1208,15 +1196,19 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         if item_ty.ty.is_fn() {\n                             Err(EvalError::Unimplemented(\"unimplemented: mentions of function items\".to_string()))\n                         } else {\n-                            let cid = ConstantId::Static{ def_id: def_id, substs: substs };\n+                            let cid = ConstantId {\n+                                def_id: def_id,\n+                                substs: substs,\n+                                kind: ConstantKind::Static,\n+                            };\n                             Ok(*self.statics.get(&cid).expect(\"static should have been cached (rvalue)\"))\n                         }\n                     },\n                     Promoted { index } => {\n-                        let cid = ConstantId::Promoted {\n+                        let cid = ConstantId {\n                             def_id: self.frame().def_id,\n                             substs: self.substs(),\n-                            index: index,\n+                            kind: ConstantKind::Promoted(index),\n                         };\n                         Ok(*self.statics.get(&cid).expect(\"a promoted constant hasn't been precomputed\"))\n                     },\n@@ -1236,7 +1228,11 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n \n             Static(def_id) => {\n                 let substs = self.tcx.mk_substs(subst::Substs::empty());\n-                let cid = ConstantId::Static{ def_id: def_id, substs: substs };\n+                let cid = ConstantId {\n+                    def_id: def_id,\n+                    substs: substs,\n+                    kind: ConstantKind::Static,\n+                };\n                 *self.gecx.statics.get(&cid).expect(\"static should have been cached (lvalue)\")\n             },\n "}, {"sha": "c0e9249b29250b8c19480ab8658779400ce1369a", "filename": "src/interpreter/stepper.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3868a62713245880145caca63a3e456c806a5bb9/src%2Finterpreter%2Fstepper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3868a62713245880145caca63a3e456c806a5bb9/src%2Finterpreter%2Fstepper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fstepper.rs?ref=3868a62713245880145caca63a3e456c806a5bb9", "patch": "@@ -4,6 +4,7 @@ use super::{\n     TerminatorTarget,\n     ConstantId,\n     GlobalEvalContext,\n+    ConstantKind,\n };\n use error::EvalResult;\n use rustc::mir::repr as mir;\n@@ -123,10 +124,8 @@ impl<'fncx, 'a, 'b: 'a + 'mir, 'mir, 'tcx: 'b> Stepper<'fncx, 'a, 'b, 'mir, 'tcx\n     fn extract_constants<F: for<'f> FnMut(Event<'f, 'tcx>)>(&mut self, mut f: F) -> EvalResult<()> {\n         assert!(!self.constants.is_empty());\n         for (cid, span, return_ptr, mir) in self.constants.drain(..) {\n-            let def_id = cid.def_id();\n-            let substs = cid.substs();\n             f(Event::Constant);\n-            self.fncx.push_stack_frame(def_id, span, mir, substs, Some(return_ptr));\n+            self.fncx.push_stack_frame(cid.def_id, span, mir, cid.substs, Some(return_ptr));\n         }\n         self.step(f)\n     }\n@@ -143,9 +142,10 @@ struct ConstantExtractor<'a, 'b: 'mir, 'mir: 'a, 'tcx: 'b> {\n \n impl<'a, 'b, 'mir, 'tcx> ConstantExtractor<'a, 'b, 'mir, 'tcx> {\n     fn static_item(&mut self, def_id: DefId, substs: &'tcx subst::Substs<'tcx>, span: Span) {\n-        let cid = ConstantId::Static {\n+        let cid = ConstantId {\n             def_id: def_id,\n             substs: substs,\n+            kind: ConstantKind::Static,\n         };\n         if self.gecx.statics.contains_key(&cid) {\n             return;\n@@ -172,17 +172,17 @@ impl<'a, 'b, 'mir, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'mir, 'tcx>\n                 }\n             },\n             mir::Literal::Promoted { index } => {\n-                let cid = ConstantId::Promoted {\n+                let cid = ConstantId {\n                     def_id: self.def_id,\n                     substs: self.substs,\n-                    index: index,\n+                    kind: ConstantKind::Promoted(index),\n                 };\n                 if self.gecx.statics.contains_key(&cid) {\n                     return;\n                 }\n                 let mir = self.mir.promoted[index].clone();\n                 let return_ty = mir.return_ty;\n-                let return_ptr = self.gecx.alloc_ret_ptr(return_ty, cid.substs()).expect(\"there's no such thing as an unreachable static\");\n+                let return_ptr = self.gecx.alloc_ret_ptr(return_ty, cid.substs).expect(\"there's no such thing as an unreachable static\");\n                 let mir = CachedMir::Owned(Rc::new(mir));\n                 self.gecx.statics.insert(cid.clone(), return_ptr);\n                 self.constants.push((cid, constant.span, return_ptr, mir));"}]}