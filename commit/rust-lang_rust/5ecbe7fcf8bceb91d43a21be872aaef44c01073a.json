{"sha": "5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlY2JlN2ZjZjhiY2ViOTFkNDNhMjFiZTg3MmFhZWY0NGMwMTA3M2E=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-04-05T08:45:04Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-05-08T08:58:08Z"}, "message": "Explicitly register instrprof pass\n\nDon't use \"passes\" for this purpose, explicitly insert it into\nthe correct place in the pipeline instead.", "tree": {"sha": "9e9f7689a3674e7d0eb486485e7eafe8fea224e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e9f7689a3674e7d0eb486485e7eafe8fea224e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "html_url": "https://github.com/rust-lang/rust/commit/5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0318883cd6254f12347db752fa30bc097cc5b06b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0318883cd6254f12347db752fa30bc097cc5b06b", "html_url": "https://github.com/rust-lang/rust/commit/0318883cd6254f12347db752fa30bc097cc5b06b"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "96d24e4f298c7d852bcecbe631fab72fce1af325", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "patch": "@@ -472,6 +472,7 @@ pub(crate) unsafe fn optimize_with_new_llvm_pass_manager(\n         sanitizer_options.as_ref(),\n         pgo_gen_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n         pgo_use_path.as_ref().map_or(std::ptr::null(), |s| s.as_ptr()),\n+        config.instrument_coverage,\n         llvm_selfprofiler,\n         selfprofile_before_pass_callback,\n         selfprofile_after_pass_callback,\n@@ -545,7 +546,7 @@ pub(crate) unsafe fn optimize(\n                     llvm::LLVMRustAddPass(fpm, find_pass(\"lint\").unwrap());\n                     continue;\n                 }\n-                if pass_name == \"insert-gcov-profiling\" || pass_name == \"instrprof\" {\n+                if pass_name == \"insert-gcov-profiling\" {\n                     // Instrumentation must be inserted before optimization,\n                     // otherwise LLVM may optimize some functions away which\n                     // breaks llvm-cov.\n@@ -566,6 +567,10 @@ pub(crate) unsafe fn optimize(\n                 }\n             }\n \n+            if config.instrument_coverage {\n+                llvm::LLVMRustAddPass(mpm, find_pass(\"instrprof\").unwrap());\n+            }\n+\n             add_sanitizer_passes(config, &mut extra_passes);\n \n             // Some options cause LLVM bitcode to be emitted, which uses ThinLTOBuffers, so we need"}, {"sha": "9a7be03194463fcc90200a5ea8172d1e9a29f564", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "patch": "@@ -2203,6 +2203,7 @@ extern \"C\" {\n         SanitizerOptions: Option<&SanitizerOptions>,\n         PGOGenPath: *const c_char,\n         PGOUsePath: *const c_char,\n+        InstrumentCoverage: bool,\n         llvm_selfprofiler: *mut c_void,\n         begin_callback: SelfProfileBeforePassCallback,\n         end_callback: SelfProfileAfterPassCallback,"}, {"sha": "dd50a2988594cd00886b584d85583a08b4e516fd", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "patch": "@@ -84,6 +84,7 @@ pub struct ModuleConfig {\n \n     pub pgo_gen: SwitchWithOptPath,\n     pub pgo_use: Option<PathBuf>,\n+    pub instrument_coverage: bool,\n \n     pub sanitizer: SanitizerSet,\n     pub sanitizer_recover: SanitizerSet,\n@@ -174,12 +175,6 @@ impl ModuleConfig {\n                     if sess.opts.debugging_opts.profile && !is_compiler_builtins {\n                         passes.push(\"insert-gcov-profiling\".to_owned());\n                     }\n-\n-                    // The rustc option `-Zinstrument_coverage` injects intrinsic calls to\n-                    // `llvm.instrprof.increment()`, which requires the LLVM `instrprof` pass.\n-                    if sess.instrument_coverage() {\n-                        passes.push(\"instrprof\".to_owned());\n-                    }\n                     passes\n                 },\n                 vec![]\n@@ -193,6 +188,7 @@ impl ModuleConfig {\n                 SwitchWithOptPath::Disabled\n             ),\n             pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n+            instrument_coverage: if_regular!(sess.instrument_coverage(), false),\n \n             sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer, SanitizerSet::empty()),\n             sanitizer_recover: if_regular!("}, {"sha": "7191e9a779c6d5087e7be0da84a7a7e1490afafe", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/5ecbe7fcf8bceb91d43a21be872aaef44c01073a/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=5ecbe7fcf8bceb91d43a21be872aaef44c01073a", "patch": "@@ -32,6 +32,7 @@\n #include \"llvm/Transforms/Instrumentation.h\"\n #include \"llvm/Transforms/Instrumentation/AddressSanitizer.h\"\n #include \"llvm/Support/TimeProfiler.h\"\n+#include \"llvm/Transforms/Instrumentation/InstrProfiling.h\"\n #include \"llvm/Transforms/Instrumentation/ThreadSanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/MemorySanitizer.h\"\n #include \"llvm/Transforms/Instrumentation/HWAddressSanitizer.h\"\n@@ -744,7 +745,7 @@ LLVMRustOptimizeWithNewPassManager(\n     bool MergeFunctions, bool UnrollLoops, bool SLPVectorize, bool LoopVectorize,\n     bool DisableSimplifyLibCalls, bool EmitLifetimeMarkers,\n     LLVMRustSanitizerOptions *SanitizerOptions,\n-    const char *PGOGenPath, const char *PGOUsePath,\n+    const char *PGOGenPath, const char *PGOUsePath, bool InstrumentCoverage,\n     void* LlvmSelfProfiler,\n     LLVMRustSelfProfileBeforePassCallback BeforePassCallback,\n     LLVMRustSelfProfileAfterPassCallback AfterPassCallback) {\n@@ -834,6 +835,15 @@ LLVMRustOptimizeWithNewPassManager(\n     );\n   }\n \n+  if (InstrumentCoverage) {\n+    PipelineStartEPCallbacks.push_back(\n+      [](ModulePassManager &MPM, PassBuilder::OptimizationLevel Level) {\n+        InstrProfOptions Options;\n+        MPM.addPass(InstrProfiling(Options, false));\n+      }\n+    );\n+  }\n+\n   if (SanitizerOptions) {\n     if (SanitizerOptions->SanitizeMemory) {\n       MemorySanitizerOptions Options("}]}