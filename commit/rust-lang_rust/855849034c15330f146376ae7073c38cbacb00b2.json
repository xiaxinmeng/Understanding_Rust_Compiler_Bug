{"sha": "855849034c15330f146376ae7073c38cbacb00b2", "node_id": "C_kwDOAAsO6NoAKDg1NTg0OTAzNGMxNTMzMGYxNDYzNzZhZTcwNzNjMzhjYmFjYjAwYjI", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-05-20T20:33:31Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-05-21T19:52:43Z"}, "message": "get_last_with_len: lint VecDeque and any deref to slice\n\npreviously only vecs were supported", "tree": {"sha": "a4c0b3b5f59c6ed069e12b55a9090b7170eefc67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4c0b3b5f59c6ed069e12b55a9090b7170eefc67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855849034c15330f146376ae7073c38cbacb00b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855849034c15330f146376ae7073c38cbacb00b2", "html_url": "https://github.com/rust-lang/rust/commit/855849034c15330f146376ae7073c38cbacb00b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855849034c15330f146376ae7073c38cbacb00b2/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b312ad7d0cf0f30be2bd4658b71a3520a2e76709", "url": "https://api.github.com/repos/rust-lang/rust/commits/b312ad7d0cf0f30be2bd4658b71a3520a2e76709", "html_url": "https://github.com/rust-lang/rust/commit/b312ad7d0cf0f30be2bd4658b71a3520a2e76709"}], "stats": {"total": 297, "additions": 172, "deletions": 125}, "files": [{"sha": "df29d9308e7124da07b112998729023abbba7e17", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "removed", "additions": 0, "deletions": 107, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/b312ad7d0cf0f30be2bd4658b71a3520a2e76709/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b312ad7d0cf0f30be2bd4658b71a3520a2e76709/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=b312ad7d0cf0f30be2bd4658b71a3520a2e76709", "patch": "@@ -1,107 +0,0 @@\n-//! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n-\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::SpanlessEq;\n-use if_chain::if_chain;\n-use rustc_ast::ast::LitKind;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Spanned;\n-use rustc_span::sym;\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for using `x.get(x.len() - 1)` instead of\n-    /// `x.last()`.\n-    ///\n-    /// ### Why is this bad?\n-    /// Using `x.last()` is easier to read and has the same\n-    /// result.\n-    ///\n-    /// Note that using `x[x.len() - 1]` is semantically different from\n-    /// `x.last()`.  Indexing into the array will panic on out-of-bounds\n-    /// accesses, while `x.get()` and `x.last()` will return `None`.\n-    ///\n-    /// There is another lint (get_unwrap) that covers the case of using\n-    /// `x.get(index).unwrap()` instead of `x[index]`.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// // Bad\n-    /// let x = vec![2, 3, 5];\n-    /// let last_element = x.get(x.len() - 1);\n-    ///\n-    /// // Good\n-    /// let x = vec![2, 3, 5];\n-    /// let last_element = x.last();\n-    /// ```\n-    #[clippy::version = \"1.37.0\"]\n-    pub GET_LAST_WITH_LEN,\n-    complexity,\n-    \"Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler\"\n-}\n-\n-declare_lint_pass!(GetLastWithLen => [GET_LAST_WITH_LEN]);\n-\n-impl<'tcx> LateLintPass<'tcx> for GetLastWithLen {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            // Is a method call\n-            if let ExprKind::MethodCall(path, args, _) = expr.kind;\n-\n-            // Method name is \"get\"\n-            if path.ident.name == sym!(get);\n-\n-            // Argument 0 (the struct we're calling the method on) is a vector\n-            if let Some(struct_calling_on) = args.get(0);\n-            let struct_ty = cx.typeck_results().expr_ty(struct_calling_on);\n-            if is_type_diagnostic_item(cx, struct_ty, sym::Vec);\n-\n-            // Argument to \"get\" is a subtraction\n-            if let Some(get_index_arg) = args.get(1);\n-            if let ExprKind::Binary(\n-                Spanned {\n-                    node: BinOpKind::Sub,\n-                    ..\n-                },\n-                lhs,\n-                rhs,\n-            ) = &get_index_arg.kind;\n-\n-            // LHS of subtraction is \"x.len()\"\n-            if let ExprKind::MethodCall(arg_lhs_path, lhs_args, _) = &lhs.kind;\n-            if arg_lhs_path.ident.name == sym::len;\n-            if let Some(arg_lhs_struct) = lhs_args.get(0);\n-\n-            // The two vectors referenced (x in x.get(...) and in x.len())\n-            if SpanlessEq::new(cx).eq_expr(struct_calling_on, arg_lhs_struct);\n-\n-            // RHS of subtraction is 1\n-            if let ExprKind::Lit(rhs_lit) = &rhs.kind;\n-            if let LitKind::Int(1, ..) = rhs_lit.node;\n-\n-            then {\n-                let mut applicability = Applicability::MachineApplicable;\n-                let vec_name = snippet_with_applicability(\n-                    cx,\n-                    struct_calling_on.span, \"vec\",\n-                    &mut applicability,\n-                );\n-\n-                span_lint_and_sugg(\n-                    cx,\n-                    GET_LAST_WITH_LEN,\n-                    expr.span,\n-                    &format!(\"accessing last element with `{0}.get({0}.len() - 1)`\", vec_name),\n-                    \"try\",\n-                    format!(\"{}.last()\", vec_name),\n-                    applicability,\n-                );\n-            }\n-        }\n-    }\n-}"}, {"sha": "87279de05c00a3decc123c192347d811246414f9", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -91,7 +91,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(functions::NOT_UNSAFE_PTR_ARG_DEREF),\n     LintId::of(functions::RESULT_UNIT_ERR),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(if_let_mutex::IF_LET_MUTEX),\n     LintId::of(indexing_slicing::OUT_OF_BOUNDS_INDEXING),\n@@ -166,6 +165,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::INTO_ITER_ON_REF),\n     LintId::of(methods::IS_DIGIT_ASCII_RADIX),"}, {"sha": "d5dfcd10a66834c33298276a8344891943a878f2", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -15,7 +15,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n-    LintId::of(get_last_with_len::GET_LAST_WITH_LEN),\n     LintId::of(identity_op::IDENTITY_OP),\n     LintId::of(int_plus_one::INT_PLUS_ONE),\n     LintId::of(lifetimes::EXTRA_UNUSED_LIFETIMES),\n@@ -37,6 +36,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(methods::FILTER_MAP_IDENTITY),\n     LintId::of(methods::FILTER_NEXT),\n     LintId::of(methods::FLAT_MAP_IDENTITY),\n+    LintId::of(methods::GET_LAST_WITH_LEN),\n     LintId::of(methods::INSPECT_FOR_EACH),\n     LintId::of(methods::ITER_COUNT),\n     LintId::of(methods::MANUAL_FILTER_MAP),"}, {"sha": "527ff3485f2aca7da9d13e64fa527966ee3de24c", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -183,7 +183,6 @@ store.register_lints(&[\n     functions::TOO_MANY_ARGUMENTS,\n     functions::TOO_MANY_LINES,\n     future_not_send::FUTURE_NOT_SEND,\n-    get_last_with_len::GET_LAST_WITH_LEN,\n     identity_op::IDENTITY_OP,\n     if_let_mutex::IF_LET_MUTEX,\n     if_not_else::IF_NOT_ELSE,\n@@ -302,6 +301,7 @@ store.register_lints(&[\n     methods::FLAT_MAP_IDENTITY,\n     methods::FLAT_MAP_OPTION,\n     methods::FROM_ITER_INSTEAD_OF_COLLECT,\n+    methods::GET_LAST_WITH_LEN,\n     methods::GET_UNWRAP,\n     methods::IMPLICIT_CLONE,\n     methods::INEFFICIENT_TO_STRING,"}, {"sha": "2f8533723efc5f564d59d2d622b8831d14682b0b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -242,7 +242,6 @@ mod from_over_into;\n mod from_str_radix_10;\n mod functions;\n mod future_not_send;\n-mod get_last_with_len;\n mod identity_op;\n mod if_let_mutex;\n mod if_not_else;\n@@ -652,7 +651,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::StringLitAsBytes));\n     store.register_late_pass(|| Box::new(derive::Derive));\n     store.register_late_pass(|| Box::new(derivable_impls::DerivableImpls));\n-    store.register_late_pass(|| Box::new(get_last_with_len::GetLastWithLen));\n     store.register_late_pass(|| Box::new(drop_forget_ref::DropForgetRef));\n     store.register_late_pass(|| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|| Box::new(absurd_extreme_comparisons::AbsurdExtremeComparisons));"}, {"sha": "23368238ef5cce6511ff799e008287b5b9fc4ccd", "filename": "clippy_lints/src/methods/get_last_with_len.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_last_with_len.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -0,0 +1,55 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::SpanlessEq;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::source_map::Spanned;\n+use rustc_span::sym;\n+\n+use super::GET_LAST_WITH_LEN;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, arg: &Expr<'_>) {\n+    // Argument to \"get\" is a subtraction\n+    if let ExprKind::Binary(\n+        Spanned {\n+            node: BinOpKind::Sub, ..\n+        },\n+        lhs,\n+        rhs,\n+    ) = arg.kind\n+\n+        // LHS of subtraction is \"x.len()\"\n+        && let ExprKind::MethodCall(lhs_path, [lhs_recv], _) = &lhs.kind\n+        && lhs_path.ident.name == sym::len\n+\n+        // RHS of subtraction is 1\n+        && let ExprKind::Lit(rhs_lit) = &rhs.kind\n+        && let LitKind::Int(1, ..) = rhs_lit.node\n+\n+        // check that recv == lhs_recv `recv.get(lhs_recv.len() - 1)`\n+        && SpanlessEq::new(cx).eq_expr(recv, lhs_recv)\n+        && !recv.can_have_side_effects()\n+    {\n+        let method = match cx.typeck_results().expr_ty_adjusted(recv).peel_refs().kind() {\n+            ty::Adt(def, _) if cx.tcx.is_diagnostic_item(sym::VecDeque, def.did()) => \"back\",\n+            ty::Slice(_) => \"last\",\n+            _ => return,\n+        };\n+\n+        let mut applicability = Applicability::MachineApplicable;\n+        let recv_snippet = snippet_with_applicability(cx, recv.span, \"_\", &mut applicability);\n+\n+        span_lint_and_sugg(\n+            cx,\n+            GET_LAST_WITH_LEN,\n+            expr.span,\n+            &format!(\"accessing last element with `{recv_snippet}.get({recv_snippet}.len() - 1)`\"),\n+            \"try\",\n+            format!(\"{recv_snippet}.{method}()\"),\n+            applicability,\n+        );\n+    }\n+}"}, {"sha": "8e89f43e207ccd4b46f690b3f7ea9aae1004e6b9", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -21,6 +21,7 @@ mod filter_next;\n mod flat_map_identity;\n mod flat_map_option;\n mod from_iter_instead_of_collect;\n+mod get_last_with_len;\n mod get_unwrap;\n mod implicit_clone;\n mod inefficient_to_string;\n@@ -1209,6 +1210,38 @@ declare_clippy_lint! {\n     \"replace `.drain(..)` with `.into_iter()`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for using `x.get(x.len() - 1)` instead of\n+    /// `x.last()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// Using `x.last()` is easier to read and has the same\n+    /// result.\n+    ///\n+    /// Note that using `x[x.len() - 1]` is semantically different from\n+    /// `x.last()`.  Indexing into the array will panic on out-of-bounds\n+    /// accesses, while `x.get()` and `x.last()` will return `None`.\n+    ///\n+    /// There is another lint (get_unwrap) that covers the case of using\n+    /// `x.get(index).unwrap()` instead of `x[index]`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.get(x.len() - 1);\n+    ///\n+    /// // Good\n+    /// let x = vec![2, 3, 5];\n+    /// let last_element = x.last();\n+    /// ```\n+    #[clippy::version = \"1.37.0\"]\n+    pub GET_LAST_WITH_LEN,\n+    complexity,\n+    \"Using `x.get(x.len() - 1)` when `x.last()` is correct and simpler\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for use of `.get().unwrap()` (or\n@@ -2264,6 +2297,7 @@ impl_lint_pass!(Methods => [\n     BYTES_NTH,\n     ITER_SKIP_NEXT,\n     GET_UNWRAP,\n+    GET_LAST_WITH_LEN,\n     STRING_EXTEND_CHARS,\n     ITER_CLONED_COLLECT,\n     ITER_WITH_DRAIN,\n@@ -2590,6 +2624,7 @@ impl Methods {\n                         inspect_for_each::check(cx, expr, span2);\n                     }\n                 },\n+                (\"get\", [arg]) => get_last_with_len::check(cx, expr, recv, arg),\n                 (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n                 (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n                 (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),"}, {"sha": "1e90b37687a152bf2d0373ef8b2d525fc3697465", "filename": "tests/ui/get_last_with_len.fixed", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.fixed?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -1,10 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::get_last_with_len)]\n+#![allow(unused)]\n+\n+use std::collections::VecDeque;\n \n fn dont_use_last() {\n     let x = vec![2, 3, 5];\n-    let _ = x.last(); // ~ERROR Use x.last()\n+    let _ = x.last();\n }\n \n fn indexing_two_from_end() {\n@@ -23,9 +26,24 @@ fn use_last_with_different_vec_length() {\n     let _ = x.get(y.len() - 1);\n }\n \n+struct S {\n+    field: Vec<usize>,\n+}\n+\n+fn in_field(s: &S) {\n+    let _ = s.field.last();\n+}\n+\n fn main() {\n-    dont_use_last();\n-    indexing_two_from_end();\n-    index_into_last();\n-    use_last_with_different_vec_length();\n+    let slice = &[1, 2, 3];\n+    let _ = slice.last();\n+\n+    let array = [4, 5, 6];\n+    let _ = array.last();\n+\n+    let deq = VecDeque::from([7, 8, 9]);\n+    let _ = deq.back();\n+\n+    let nested = [[1]];\n+    let _ = nested[0].last();\n }"}, {"sha": "d63a731bd524681b297b63bd7146d0f5a3c73af9", "filename": "tests/ui/get_last_with_len.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.rs?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -1,10 +1,13 @@\n // run-rustfix\n \n #![warn(clippy::get_last_with_len)]\n+#![allow(unused)]\n+\n+use std::collections::VecDeque;\n \n fn dont_use_last() {\n     let x = vec![2, 3, 5];\n-    let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+    let _ = x.get(x.len() - 1);\n }\n \n fn indexing_two_from_end() {\n@@ -23,9 +26,24 @@ fn use_last_with_different_vec_length() {\n     let _ = x.get(y.len() - 1);\n }\n \n+struct S {\n+    field: Vec<usize>,\n+}\n+\n+fn in_field(s: &S) {\n+    let _ = s.field.get(s.field.len() - 1);\n+}\n+\n fn main() {\n-    dont_use_last();\n-    indexing_two_from_end();\n-    index_into_last();\n-    use_last_with_different_vec_length();\n+    let slice = &[1, 2, 3];\n+    let _ = slice.get(slice.len() - 1);\n+\n+    let array = [4, 5, 6];\n+    let _ = array.get(array.len() - 1);\n+\n+    let deq = VecDeque::from([7, 8, 9]);\n+    let _ = deq.get(deq.len() - 1);\n+\n+    let nested = [[1]];\n+    let _ = nested[0].get(nested[0].len() - 1);\n }"}, {"sha": "ac8dd6c2e41a80fc7a9ba5b5444035e4f9f76414", "filename": "tests/ui/get_last_with_len.stderr", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/855849034c15330f146376ae7073c38cbacb00b2/tests%2Fui%2Fget_last_with_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fget_last_with_len.stderr?ref=855849034c15330f146376ae7073c38cbacb00b2", "patch": "@@ -1,10 +1,40 @@\n error: accessing last element with `x.get(x.len() - 1)`\n-  --> $DIR/get_last_with_len.rs:7:13\n+  --> $DIR/get_last_with_len.rs:10:13\n    |\n-LL |     let _ = x.get(x.len() - 1); // ~ERROR Use x.last()\n+LL |     let _ = x.get(x.len() - 1);\n    |             ^^^^^^^^^^^^^^^^^^ help: try: `x.last()`\n    |\n    = note: `-D clippy::get-last-with-len` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: accessing last element with `s.field.get(s.field.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:34:13\n+   |\n+LL |     let _ = s.field.get(s.field.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `s.field.last()`\n+\n+error: accessing last element with `slice.get(slice.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:39:13\n+   |\n+LL |     let _ = slice.get(slice.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `slice.last()`\n+\n+error: accessing last element with `array.get(array.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:42:13\n+   |\n+LL |     let _ = array.get(array.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `array.last()`\n+\n+error: accessing last element with `deq.get(deq.len() - 1)`\n+  --> $DIR/get_last_with_len.rs:45:13\n+   |\n+LL |     let _ = deq.get(deq.len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `deq.back()`\n+\n+error: accessing last element with `nested[0].get(nested[0].len() - 1)`\n+  --> $DIR/get_last_with_len.rs:48:13\n+   |\n+LL |     let _ = nested[0].get(nested[0].len() - 1);\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `nested[0].last()`\n+\n+error: aborting due to 6 previous errors\n "}]}