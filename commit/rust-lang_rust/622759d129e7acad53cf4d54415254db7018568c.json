{"sha": "622759d129e7acad53cf4d54415254db7018568c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjc1OWQxMjllN2FjYWQ1M2NmNGQ1NDQxNTI1NGRiNzAxODU2OGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-04T00:27:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-04T00:27:06Z"}, "message": "Rollup merge of #75084 - Aaron1011:stabilize/ident-new-raw, r=petrochenkov\n\nStabilize Ident::new_raw\n\nTracking issue: #54723\n\nThis is a continuation of PR #59002", "tree": {"sha": "ce020c0fb3d5fd8fb72c2f09cdb4b50cc59ee082", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce020c0fb3d5fd8fb72c2f09cdb4b50cc59ee082"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622759d129e7acad53cf4d54415254db7018568c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfKKtaCRBK7hj4Ov3rIwAAdHIIAGzdo4Aw6r2BgRCG9UUwu5Zc\ngusBqvD/Wxgy+O8xhRtO5Ere8+KOsyzxW991+cPCeRmAA564w9DvkL/LmDmXa0K+\nGCW2cRGEqhfG4FvxaEt7PuSE5haYdRCBk+OumkGb906DcHzDcn4bcgxPIuSYntFp\n3L8z4MJ7o2wIMhmOGVCSyMRhrDkWpmYI6h8zCceSuDRtYVTVph/Al9ZSG4zgDT1o\nYrTkJoH7CQSk/jE/ERZw/jQkMHF9btpdF25PtumkEPaS6vAvGd6opZRJakUcXwxh\nThyvakeG72NOdyYfb0MgZxB/gaRh06kd6bbkoJZOXYjwZID/Jl2Ok4w93Lf4cMA=\n=Amp3\n-----END PGP SIGNATURE-----\n", "payload": "tree ce020c0fb3d5fd8fb72c2f09cdb4b50cc59ee082\nparent 4eb9253660d384cfdb73c166285bd4b3dab3f0d7\nparent 6deda6a6a05e6e6ace8fb015d610c6355efb0fd7\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1596500826 +0900\ncommitter GitHub <noreply@github.com> 1596500826 +0900\n\nRollup merge of #75084 - Aaron1011:stabilize/ident-new-raw, r=petrochenkov\n\nStabilize Ident::new_raw\n\nTracking issue: #54723\n\nThis is a continuation of PR #59002\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622759d129e7acad53cf4d54415254db7018568c", "html_url": "https://github.com/rust-lang/rust/commit/622759d129e7acad53cf4d54415254db7018568c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622759d129e7acad53cf4d54415254db7018568c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4eb9253660d384cfdb73c166285bd4b3dab3f0d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eb9253660d384cfdb73c166285bd4b3dab3f0d7", "html_url": "https://github.com/rust-lang/rust/commit/4eb9253660d384cfdb73c166285bd4b3dab3f0d7"}, {"sha": "6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7", "html_url": "https://github.com/rust-lang/rust/commit/6deda6a6a05e6e6ace8fb015d610c6355efb0fd7"}], "stats": {"total": 68, "additions": 66, "deletions": 2}, "files": [{"sha": "de3866d92fc3f181ee192baa930917031b51bef0", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/622759d129e7acad53cf4d54415254db7018568c/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622759d129e7acad53cf4d54415254db7018568c/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=622759d129e7acad53cf4d54415254db7018568c", "patch": "@@ -848,7 +848,7 @@ impl Ident {\n     /// Creates a new `Ident` with the given `string` as well as the specified\n     /// `span`.\n     /// The `string` argument must be a valid identifier permitted by the\n-    /// language, otherwise the function will panic.\n+    /// language (including keywords, e.g. `self` or `fn`). Otherwise, the function will panic.\n     ///\n     /// Note that `span`, currently in rustc, configures the hygiene information\n     /// for this identifier.\n@@ -870,7 +870,10 @@ impl Ident {\n     }\n \n     /// Same as `Ident::new`, but creates a raw identifier (`r#ident`).\n-    #[unstable(feature = \"proc_macro_raw_ident\", issue = \"54723\")]\n+    /// The `string` argument be a valid identifier permitted by the language\n+    /// (including keywords, e.g. `fn`). Keywords which are usable in path segments\n+    /// (e.g. `self`, `super`) are not supported, and will cause a panic.\n+    #[stable(feature = \"proc_macro_raw_ident\", since = \"1.47.0\")]\n     pub fn new_raw(string: &str, span: Span) -> Ident {\n         Ident(bridge::client::Ident::new(string, span.0, true))\n     }"}, {"sha": "9daee21aa17d458aea9794d9eac5a09d57baadb0", "filename": "src/test/ui/proc-macro/auxiliary/raw-ident.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fraw-ident.rs?ref=622759d129e7acad53cf4d54415254db7018568c", "patch": "@@ -0,0 +1,35 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::{TokenStream, TokenTree, Ident, Punct, Spacing, Span};\n+\n+#[proc_macro]\n+pub fn make_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new_raw(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}\n+\n+#[proc_macro]\n+pub fn make_bad_struct(input: TokenStream) -> TokenStream {\n+    match input.into_iter().next().unwrap() {\n+        TokenTree::Ident(ident) => {\n+            vec![\n+                TokenTree::Ident(Ident::new_raw(\"struct\", Span::call_site())),\n+                TokenTree::Ident(Ident::new(&ident.to_string(), Span::call_site())),\n+                TokenTree::Punct(Punct::new(';', Spacing::Alone))\n+            ].into_iter().collect()\n+        }\n+        _ => panic!()\n+    }\n+}"}, {"sha": "03cb4571496e90318056b03a11b63c7e9f0b127d", "filename": "src/test/ui/proc-macro/raw-ident.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.rs?ref=622759d129e7acad53cf4d54415254db7018568c", "patch": "@@ -0,0 +1,16 @@\n+// aux-build:raw-ident.rs\n+\n+#[macro_use] extern crate raw_ident;\n+\n+fn main() {\n+    make_struct!(fn);\n+    make_struct!(Foo);\n+    make_struct!(await);\n+\n+    r#fn;\n+    r#Foo;\n+    Foo;\n+    r#await;\n+\n+    make_bad_struct!(S); //~ ERROR expected one of\n+}"}, {"sha": "e82a1226b5aef4be18bb0e1162297bc102641418", "filename": "src/test/ui/proc-macro/raw-ident.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/622759d129e7acad53cf4d54415254db7018568c/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fraw-ident.stderr?ref=622759d129e7acad53cf4d54415254db7018568c", "patch": "@@ -0,0 +1,10 @@\n+error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `S`\n+  --> $DIR/raw-ident.rs:15:5\n+   |\n+LL |     make_bad_struct!(S);\n+   |     ^^^^^^^^^^^^^^^^^^^^ expected one of 8 possible tokens\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}]}