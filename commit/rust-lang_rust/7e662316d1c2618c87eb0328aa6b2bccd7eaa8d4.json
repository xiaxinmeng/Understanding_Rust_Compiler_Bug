{"sha": "7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlNjYyMzE2ZDFjMjYxOGM4N2ViMDMyOGFhNmIyYmNjZDdlYWE4ZDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T15:06:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-10-31T15:06:45Z"}, "message": "auto merge of #18458 : eddyb/rust/free-region-args, r=nikomatsakis\n\nThis fixes ICEs caused by late-bound lifetimes ending up in argument\r\ndatum types and being used in cleanup - user Drop impl's would then\r\nfail to monomorphize if the type was used to look up the impl of a\r\nmethod call - which happens in trans now, I presume for multidispatch.", "tree": {"sha": "6ec98d3c492f14064bb3eb46ef9ea6540c676347", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ec98d3c492f14064bb3eb46ef9ea6540c676347"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "html_url": "https://github.com/rust-lang/rust/commit/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82045ca3606dfe070fce99ca71fb6a9d39217b73", "url": "https://api.github.com/repos/rust-lang/rust/commits/82045ca3606dfe070fce99ca71fb6a9d39217b73", "html_url": "https://github.com/rust-lang/rust/commit/82045ca3606dfe070fce99ca71fb6a9d39217b73"}, {"sha": "96ba514294bc36586dafbf934a1497194ae44d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/96ba514294bc36586dafbf934a1497194ae44d8b", "html_url": "https://github.com/rust-lang/rust/commit/96ba514294bc36586dafbf934a1497194ae44d8b"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "16f406644dc43b2e89a73c1edbbceb1d9e9f62a8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "patch": "@@ -50,7 +50,7 @@ use middle::trans::cleanup;\n use middle::trans::common::{Block, C_bool, C_bytes_in_context, C_i32, C_integral, C_nil};\n use middle::trans::common::{C_null, C_struct_in_context, C_u64, C_u8, C_uint, C_undef};\n use middle::trans::common::{CrateContext, ExternMap, FunctionContext};\n-use middle::trans::common::{NodeInfo, Result, SubstP, monomorphize_type};\n+use middle::trans::common::{NodeInfo, Result, SubstP};\n use middle::trans::common::{node_id_type, param_substs, return_type_is_void};\n use middle::trans::common::{tydesc_info, type_is_immediate};\n use middle::trans::common::{type_is_zero_size, val_ty};\n@@ -1794,7 +1794,6 @@ pub fn trans_closure(ccx: &CrateContext,\n                      param_substs: &param_substs,\n                      fn_ast_id: ast::NodeId,\n                      _attributes: &[ast::Attribute],\n-                     arg_types: Vec<ty::t>,\n                      output_type: ty::FnOutput,\n                      abi: Abi,\n                      has_env: bool,\n@@ -1829,9 +1828,19 @@ pub fn trans_closure(ccx: &CrateContext,\n \n     // Set up arguments to the function.\n     let monomorphized_arg_types =\n-        arg_types.iter()\n-                 .map(|at| monomorphize_type(bcx, *at))\n-                 .collect::<Vec<_>>();\n+        decl.inputs.iter()\n+                   .map(|arg| node_id_type(bcx, arg.id))\n+                   .collect::<Vec<_>>();\n+    let monomorphized_arg_types = match is_unboxed_closure {\n+        NotUnboxedClosure => monomorphized_arg_types,\n+\n+        // Tuple up closure argument types for the \"rust-call\" ABI.\n+        IsUnboxedClosure => vec![if monomorphized_arg_types.is_empty() {\n+            ty::mk_nil()\n+        } else {\n+            ty::mk_tup(ccx.tcx(), monomorphized_arg_types)\n+        }]\n+    };\n     for monomorphized_arg_type in monomorphized_arg_types.iter() {\n         debug!(\"trans_closure: monomorphized_arg_type: {}\",\n                ty_to_string(ccx.tcx(), *monomorphized_arg_type));\n@@ -1933,7 +1942,6 @@ pub fn trans_fn(ccx: &CrateContext,\n     debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx()));\n     let _icx = push_ctxt(\"trans_fn\");\n     let fn_ty = ty::node_id_to_type(ccx.tcx(), id);\n-    let arg_types = ty::ty_fn_args(fn_ty);\n     let output_type = ty::ty_fn_ret(fn_ty);\n     let abi = ty::ty_fn_abi(fn_ty);\n     trans_closure(ccx,\n@@ -1943,7 +1951,6 @@ pub fn trans_fn(ccx: &CrateContext,\n                   param_substs,\n                   id,\n                   attrs,\n-                  arg_types,\n                   output_type,\n                   abi,\n                   false,"}, {"sha": "717f52d739ddf1c87759c44d177d035888047518", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "patch": "@@ -408,7 +408,6 @@ pub fn trans_expr_fn<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                   bcx.fcx.param_substs,\n                   id,\n                   [],\n-                  ty::ty_fn_args(fty),\n                   ty::ty_fn_ret(fty),\n                   ty::ty_fn_abi(fty),\n                   true,\n@@ -501,7 +500,6 @@ pub fn trans_unboxed_closure<'blk, 'tcx>(\n                   bcx.fcx.param_substs,\n                   id,\n                   [],\n-                  ty::ty_fn_args(function_type),\n                   ty::ty_fn_ret(function_type),\n                   ty::ty_fn_abi(function_type),\n                   true,"}, {"sha": "d011e807ce7dc61505f343220c51fdc40886fb2f", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "patch": "@@ -53,6 +53,7 @@ pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n     let mut wbcx = WritebackCx::new(fcx);\n     wbcx.visit_block(blk);\n     for arg in decl.inputs.iter() {\n+        wbcx.visit_node_id(ResolvingPattern(arg.pat.span), arg.id);\n         wbcx.visit_pat(&*arg.pat);\n \n         // Privacy needs the type for the whole pattern, not just each binding"}, {"sha": "27d9895097863c73c5a3c72eeba6a91fc3bda5df", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=7e662316d1c2618c87eb0328aa6b2bccd7eaa8d4", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsafe_destructor)]\n+\n+pub struct Foo<T>;\n+\n+impl<T> Iterator<T> for Foo<T> {\n+    fn next(&mut self) -> Option<T> {\n+        None\n+    }\n+}\n+\n+#[unsafe_destructor]\n+impl<T> Drop for Foo<T> {\n+    fn drop(&mut self) {\n+        self.next();\n+    }\n+}\n+\n+pub fn foo<'a>(_: Foo<&'a ()>) {}\n+\n+pub fn main() {}"}]}