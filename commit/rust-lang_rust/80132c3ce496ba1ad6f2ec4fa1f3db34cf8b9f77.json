{"sha": "80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "node_id": "C_kwDOAAsO6NoAKDgwMTMyYzNjZTQ5NmJhMWFkNmYyZWM0ZmExZjNkYjM0Y2Y4YjlmNzc", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-11-21T18:04:47Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-01-25T18:05:19Z"}, "message": "Store hir_id_to_def_id in OwnerInfo.", "tree": {"sha": "3758cbea88db9eee70ccc4662d3ef3c83bfe4252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3758cbea88db9eee70ccc4662d3ef3c83bfe4252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmHwO98ACgkQgTGiTgx5\n768uSxAArfitssuN2jUWMHSK+gfqlyE+yCnPQsjMnwL3SMiN3UmAu97ZPtw1Nxie\n78NCeK8W2iFWnaEkX72LSBdL+jyPyiPOpZOIRSS2nwCwAUcRMVR4cvGxOxFa69j9\nnw5Dj3Yek+wRkqyM7H9zYl2WY3xFLpu21TjArvxZQsSERT91095CVZ9IWtPuvFDi\nQgV1FTvV5RGFjJFtQt09iYOdnWhnBwaIGG65fmr66oJrApcLcQ6ac5x1QajHBGIn\nlanlmbLOGQ1rVNvpjU7r9dGje8RUStdl2Euo297MDgFK2w5LZo5Vqtbk633jPAVt\nI3ZlsWi1Tg1m4UukOFswcyLZ9rnrtFEq+yVeOZ5zg7Zd9btuovPeF03ejP7ILh1f\nm+Eipgxa8A6tSb/u3FUcCg8/m9x90RtCOYLh6/Xo1F6xmrBdigCb8BWHfS2+AdVV\nx5sZKsEgOanf+//QoP+rZvNwtgV13/CZ6/Gf7eveDPI7rwbqyiIFqEq5/SnEAPJU\nMYZKu6RnxoekRNCTSEqIE5jhyK3egIq+m+dGXUGnVPcfcCGT5WqydgLYzPb7NQ7u\nkDgnFoD6HAFwIEHmf+ei20pVMf7/b863+MyPNjPEhXv1WfaDfYhimaqc79RuV5xQ\n9rabqejW/cE2SSGEMY2yc4PiSCemvSJC8zeeF4Qw2XMi5svhBLg=\n=gfKi\n-----END PGP SIGNATURE-----", "payload": "tree 3758cbea88db9eee70ccc4662d3ef3c83bfe4252\nparent 17dfae79bbc3dabe1427073086acf7f7bd45148c\nauthor Camille GILLOT <gillot.camille@gmail.com> 1637517887 +0100\ncommitter Santiago Pastorino <spastorino@gmail.com> 1643133919 -0300\n\nStore hir_id_to_def_id in OwnerInfo.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "html_url": "https://github.com/rust-lang/rust/commit/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17dfae79bbc3dabe1427073086acf7f7bd45148c", "url": "https://api.github.com/repos/rust-lang/rust/commits/17dfae79bbc3dabe1427073086acf7f7bd45148c", "html_url": "https://github.com/rust-lang/rust/commit/17dfae79bbc3dabe1427073086acf7f7bd45148c"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "cc14f48b6bdea9d2db72b3ccb0a2dac23fdba0ed", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "patch": "@@ -479,6 +479,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let attrs = std::mem::take(&mut self.attrs);\n         let mut bodies = std::mem::take(&mut self.bodies);\n         let local_node_ids = std::mem::take(&mut self.local_node_ids);\n+\n+        let local_id_to_def_id = local_node_ids\n+            .iter()\n+            .filter_map(|&node_id| {\n+                let def_id = self.resolver.opt_local_def_id(node_id)?;\n+                let hir_id = self.node_id_to_hir_id[node_id]?;\n+                Some((hir_id.local_id, def_id))\n+            })\n+            .collect();\n+\n         let trait_map = local_node_ids\n             .into_iter()\n             .filter_map(|node_id| {\n@@ -501,7 +511,13 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let (hash_including_bodies, hash_without_bodies) = self.hash_owner(node, &bodies);\n         let (nodes, parenting) =\n             index::index_hir(self.sess, self.resolver.definitions(), node, &bodies);\n-        let nodes = hir::OwnerNodes { hash_including_bodies, hash_without_bodies, nodes, bodies };\n+        let nodes = hir::OwnerNodes {\n+            hash_including_bodies,\n+            hash_without_bodies,\n+            nodes,\n+            bodies,\n+            local_id_to_def_id,\n+        };\n         let attrs = {\n             let mut hcx = self.resolver.create_stable_hashing_context();\n             let mut stable_hasher = StableHasher::new();"}, {"sha": "74d6b05ca5fc5bf3963c89cf190ad3556b1ce093", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "patch": "@@ -107,8 +107,6 @@ pub struct Definitions {\n     /// Their `HirId`s are defined by their position while lowering the enclosing owner.\n     // FIXME(cjgillot) Some `LocalDefId`s from `use` items are dropped during lowering and lack a `HirId`.\n     pub(super) def_id_to_hir_id: IndexVec<LocalDefId, Option<hir::HirId>>,\n-    /// The reverse mapping of `def_id_to_hir_id`.\n-    pub(super) hir_id_to_def_id: FxHashMap<hir::HirId, LocalDefId>,\n \n     /// Item with a given `LocalDefId` was defined during macro expansion with ID `ExpnId`.\n     expansions_that_defined: FxHashMap<LocalDefId, ExpnId>,\n@@ -330,11 +328,6 @@ impl Definitions {\n         self.def_id_to_hir_id[id].unwrap()\n     }\n \n-    #[inline]\n-    pub fn opt_hir_id_to_local_def_id(&self, hir_id: hir::HirId) -> Option<LocalDefId> {\n-        self.hir_id_to_def_id.get(&hir_id).copied()\n-    }\n-\n     /// Adds a root definition (no parent) and a few other reserved definitions.\n     pub fn new(stable_crate_id: StableCrateId, crate_span: Span) -> Definitions {\n         let key = DefKey {\n@@ -362,7 +355,6 @@ impl Definitions {\n         Definitions {\n             table,\n             def_id_to_hir_id: Default::default(),\n-            hir_id_to_def_id: Default::default(),\n             expansions_that_defined: Default::default(),\n             def_id_to_span,\n             stable_crate_id,\n@@ -425,12 +417,6 @@ impl Definitions {\n             \"trying to initialize `LocalDefId` <-> `HirId` mappings twice\"\n         );\n \n-        // Build the reverse mapping of `def_id_to_hir_id`.\n-        self.hir_id_to_def_id = mapping\n-            .iter_enumerated()\n-            .filter_map(|(def_id, hir_id)| hir_id.map(|hir_id| (hir_id, def_id)))\n-            .collect();\n-\n         self.def_id_to_hir_id = mapping;\n     }\n "}, {"sha": "a0ed72c9e9e509347045e480a8c2371bb41f08fd", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "patch": "@@ -707,6 +707,8 @@ pub struct OwnerNodes<'tcx> {\n     pub nodes: IndexVec<ItemLocalId, Option<ParentedNode<'tcx>>>,\n     /// Content of local bodies.\n     pub bodies: SortedMap<ItemLocalId, &'tcx Body<'tcx>>,\n+    /// Non-owning definitions contained in this owner.\n+    pub local_id_to_def_id: SortedMap<ItemLocalId, LocalDefId>,\n }\n \n /// Full information resulting from lowering an AST node."}, {"sha": "b15054ae6d610420d8133002a6d68f776e5ca8f9", "filename": "compiler/rustc_hir/src/stable_hash_impls.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fstable_hash_impls.rs?ref=80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "patch": "@@ -208,8 +208,13 @@ impl<'tcx, HirCtx: crate::HashStableContext> HashStable<HirCtx> for OwnerNodes<'\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n         // We ignore the `nodes` and `bodies` fields since these refer to information included in\n         // `hash` which is hashed in the collector and used for the crate hash.\n-        let OwnerNodes { hash_including_bodies, hash_without_bodies: _, nodes: _, bodies: _ } =\n-            *self;\n+        let OwnerNodes {\n+            hash_including_bodies,\n+            hash_without_bodies: _,\n+            nodes: _,\n+            bodies: _,\n+            local_id_to_def_id: _,\n+        } = *self;\n         hash_including_bodies.hash_stable(hcx, hasher);\n     }\n }"}, {"sha": "1885df6ac5d9600744011349fa1a5d7ea1abb114", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=80132c3ce496ba1ad6f2ec4fa1f3db34cf8b9f77", "patch": "@@ -204,8 +204,11 @@ impl<'hir> Map<'hir> {\n         if hir_id.local_id == ItemLocalId::new(0) {\n             Some(hir_id.owner)\n         } else {\n-            // FIXME(#85914) is this access safe for incr. comp.?\n-            self.tcx.untracked_resolutions.definitions.opt_hir_id_to_local_def_id(hir_id)\n+            self.tcx\n+                .hir_owner_nodes(hir_id.owner)?\n+                .local_id_to_def_id\n+                .get(&hir_id.local_id)\n+                .copied()\n         }\n     }\n "}]}