{"sha": "ca47eebb44431c1ded5cc5c412d95210f3955ef4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhNDdlZWJiNDQ0MzFjMWRlZDVjYzVjNDEyZDk1MjEwZjM5NTVlZjQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-12T04:49:25Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-09-13T01:54:13Z"}, "message": "std: Add a bunch of Default impls", "tree": {"sha": "501f108f0835f49ad9216759ddd89ab6ccb7e090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501f108f0835f49ad9216759ddd89ab6ccb7e090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca47eebb44431c1ded5cc5c412d95210f3955ef4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca47eebb44431c1ded5cc5c412d95210f3955ef4", "html_url": "https://github.com/rust-lang/rust/commit/ca47eebb44431c1ded5cc5c412d95210f3955ef4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca47eebb44431c1ded5cc5c412d95210f3955ef4/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38f97ea10313ba9a8c6f57fbf73ff8daf5376e8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/38f97ea10313ba9a8c6f57fbf73ff8daf5376e8b", "html_url": "https://github.com/rust-lang/rust/commit/38f97ea10313ba9a8c6f57fbf73ff8daf5376e8b"}], "stats": {"total": 87, "additions": 82, "deletions": 5}, "files": [{"sha": "2641c1379e4f60d8528d86e9d47356e91c567def", "filename": "src/libextra/uuid.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibextra%2Fuuid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibextra%2Fuuid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fuuid.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -417,6 +417,13 @@ impl Uuid {\n     }\n }\n \n+impl Default for Uuid {\n+    /// Returns the nil UUID, which is all zeroes\n+    fn default() -> Uuid {\n+        Uuid::new_nil()\n+    }\n+}\n+\n impl Zero for Uuid {\n     /// Returns the nil UUID, which is all zeroes\n     fn zero() -> Uuid {"}, {"sha": "4ef50094139aa749bc5fe244bbefae4a9cde4fa9", "filename": "src/libstd/bool.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbool.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -24,6 +24,7 @@ Implementations of the following traits:\n * `Ord`\n * `TotalOrd`\n * `Eq`\n+* `Default`\n * `Zero`\n \n ## Various functions to compare `bool`s\n@@ -43,6 +44,7 @@ use to_str::ToStr;\n \n #[cfg(not(test))] use cmp::{Eq, Ord, TotalOrd, Ordering};\n #[cfg(not(test))] use ops::Not;\n+#[cfg(not(test))] use default::Default;\n #[cfg(not(test))] use num::Zero;\n \n /**\n@@ -323,6 +325,11 @@ impl Eq for bool {\n     fn eq(&self, other: &bool) -> bool { (*self) == (*other) }\n }\n \n+#[cfg(not(test))]\n+impl Default for bool {\n+    fn default() -> bool { false }\n+}\n+\n #[cfg(not(test))]\n impl Zero for bool {\n     fn zero() -> bool { false }"}, {"sha": "3a01e5908d9db821f5f99275e26a9700611cba01", "filename": "src/libstd/char.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fchar.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -21,6 +21,7 @@ use str;\n #[cfg(test)] use str::OwnedStr;\n \n #[cfg(not(test))] use cmp::{Eq, Ord};\n+#[cfg(not(test))] use default::Default;\n #[cfg(not(test))] use num::Zero;\n \n // UTF-8 ranges and tags for encoding characters\n@@ -434,9 +435,18 @@ impl Ord for char {\n     fn lt(&self, other: &char) -> bool { *self < *other }\n }\n \n+#[cfg(not(test))]\n+impl Default for char {\n+    #[inline]\n+    fn default() -> char { '\\x00' }\n+}\n+\n #[cfg(not(test))]\n impl Zero for char {\n+    #[inline]\n     fn zero() -> char { '\\x00' }\n+\n+    #[inline]\n     fn is_zero(&self) -> bool { *self == '\\x00' }\n }\n "}, {"sha": "120cf3fa8013bbb4e3bd50df1bbc655165ef33c7", "filename": "src/libstd/default.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdefault.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -15,3 +15,15 @@ pub trait Default {\n     /// Return the \"default value\" for a type.\n     fn default() -> Self;\n }\n+\n+impl<T: Default + 'static> Default for @mut T {\n+    fn default() -> @mut T { @mut Default::default() }\n+}\n+\n+impl<T: Default + 'static> Default for @T {\n+    fn default() -> @T { @Default::default() }\n+}\n+\n+impl<T: Default> Default for ~T {\n+    fn default() -> ~T { ~Default::default() }\n+}"}, {"sha": "0addcce3eb608657b6a50ae2c438cee6d8f946f1", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -12,6 +12,7 @@\n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n \n+use default::Default;\n use libc::c_int;\n use num::{Zero, One, strconv};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n@@ -237,6 +238,11 @@ impl Orderable for f32 {\n     }\n }\n \n+impl Default for f32 {\n+    #[inline]\n+    fn default() -> f32 { 0.0 }\n+}\n+\n impl Zero for f32 {\n     #[inline]\n     fn zero() -> f32 { 0.0 }"}, {"sha": "b0675278238e4c0e8fe92751cdd48e06c5bc9dbd", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -13,6 +13,7 @@\n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n \n+use default::Default;\n use libc::c_int;\n use num::{Zero, One, strconv};\n use num::{FPCategory, FPNaN, FPInfinite , FPZero, FPSubnormal, FPNormal};\n@@ -260,6 +261,11 @@ impl Orderable for f64 {\n     }\n }\n \n+impl Default for f64 {\n+    #[inline]\n+    fn default() -> f64 { 0.0 }\n+}\n+\n impl Zero for f64 {\n     #[inline]\n     fn zero() -> f64 { 0.0 }"}, {"sha": "3952f5478f7fdb956963edddae97a2fe71c3f2e2", "filename": "src/libstd/num/float.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -23,6 +23,7 @@\n #[allow(missing_doc)];\n #[allow(non_uppercase_statics)];\n \n+use default::Default;\n use num::{Zero, One, strconv};\n use num::FPCategory;\n use num;\n@@ -382,6 +383,11 @@ impl Orderable for float {\n     }\n }\n \n+impl Default for float {\n+    #[inline]\n+    fn default() -> float { 0.0 }\n+}\n+\n impl Zero for float {\n     #[inline]\n     fn zero() -> float { 0.0 }"}, {"sha": "ae2a56b835dd2707f2ee5a817c5a399f61b10913", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -16,6 +16,7 @@ macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n \n #[allow(non_uppercase_statics)];\n \n+use default::Default;\n use num::{ToStrRadix, FromStrRadix};\n use num::{CheckedDiv, Zero, One, strconv};\n use prelude::*;\n@@ -167,6 +168,11 @@ impl Orderable for $T {\n     }\n }\n \n+impl Default for $T {\n+    #[inline]\n+    fn default() -> $T { 0 }\n+}\n+\n impl Zero for $T {\n     #[inline]\n     fn zero() -> $T { 0 }"}, {"sha": "3deb7312b04f1da08a29d4f92c163ef1d6f44f17", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -16,6 +16,7 @@ macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n \n #[allow(non_uppercase_statics)];\n \n+use default::Default;\n use num::BitCount;\n use num::{ToStrRadix, FromStrRadix};\n use num::{CheckedDiv, Zero, One, strconv};\n@@ -172,6 +173,11 @@ impl Orderable for $T {\n     }\n }\n \n+impl Default for $T {\n+    #[inline]\n+    fn default() -> $T { 0 }\n+}\n+\n impl Zero for $T {\n     #[inline]\n     fn zero() -> $T { 0 }"}, {"sha": "dd5b71c6dd487adb248a5638c48e11d0c9955ef3", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -459,6 +459,7 @@ impl<T: Default> Option<T> {\n }\n \n impl<T> Default for Option<T> {\n+    #[inline]\n     fn default() -> Option<T> { None }\n }\n "}, {"sha": "2591131f21521e5020ac05aef287f63f07852bc9", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -89,6 +89,7 @@ macro_rules! tuple_impls {\n         pub mod inner {\n             use clone::Clone;\n             #[cfg(not(test))] use cmp::*;\n+            #[cfg(not(test))] use default::Default;\n             #[cfg(not(test))] use num::Zero;\n \n             $(\n@@ -172,6 +173,14 @@ macro_rules! tuple_impls {\n                     }\n                 }\n \n+                #[cfg(not(test))]\n+                impl<$($T:Default),+> Default for ($($T,)+) {\n+                    #[inline]\n+                    fn default() -> ($($T,)+) {\n+                        ($({ let x: $T = Default::default(); x},)+)\n+                    }\n+                }\n+\n                 #[cfg(not(test))]\n                 impl<$($T:Zero),+> Zero for ($($T,)+) {\n                     #[inline]"}, {"sha": "dfe4abe54e5b5c236d337bb82e9fd8494064c5fe", "filename": "src/libstd/unit.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca47eebb44431c1ded5cc5c412d95210f3955ef4/src%2Flibstd%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funit.rs?ref=ca47eebb44431c1ded5cc5c412d95210f3955ef4", "patch": "@@ -45,15 +45,16 @@ impl TotalEq for () {\n     fn equals(&self, _other: &()) -> bool { true }\n }\n \n+#[cfg(not(test))]\n+impl Default for () {\n+    #[inline]\n+    fn default() -> () { () }\n+}\n+\n #[cfg(not(test))]\n impl Zero for () {\n     #[inline]\n     fn zero() -> () { () }\n     #[inline]\n     fn is_zero(&self) -> bool { true }\n }\n-\n-#[cfg(not(test))]\n-impl Default for () {\n-    fn default() -> () { () }\n-}"}]}