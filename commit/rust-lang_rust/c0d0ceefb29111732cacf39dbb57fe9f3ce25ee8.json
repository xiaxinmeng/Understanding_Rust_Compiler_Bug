{"sha": "c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8", "node_id": "C_kwDOAAsO6NoAKGMwZDBjZWVmYjI5MTExNzMyY2FjZjM5ZGJiNTdmZTlmM2NlMjVlZTg", "commit": {"author": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T11:04:27Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2021-12-23T12:04:15Z"}, "message": "Don't check for platform details", "tree": {"sha": "bbcb1d2394e6df7af13f0b1642cc1a841d55952c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbcb1d2394e6df7af13f0b1642cc1a841d55952c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8", "html_url": "https://github.com/rust-lang/rust/commit/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8/comments", "author": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f55cca4d3b895aa59a31f2470ae13b0cd9838dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f55cca4d3b895aa59a31f2470ae13b0cd9838dcf", "html_url": "https://github.com/rust-lang/rust/commit/f55cca4d3b895aa59a31f2470ae13b0cd9838dcf"}], "stats": {"total": 64, "additions": 22, "deletions": 42}, "files": [{"sha": "3145326bc1cdfe6139bcc107cc4d1887519df1e7", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=c0d0ceefb29111732cacf39dbb57fe9f3ce25ee8", "patch": "@@ -9,7 +9,7 @@ import { log, isValidExecutable, isRustDocument } from './util';\n import { PersistentState } from './persistent_state';\n import { activateTaskProvider } from './tasks';\n import { setContextValue } from './util';\n-import { exec, spawnSync } from 'child_process';\n+import { exec } from 'child_process';\n \n let ctx: Ctx | undefined;\n \n@@ -227,43 +227,30 @@ async function getServer(context: vscode.ExtensionContext, config: Config, state\n     };\n     if (config.package.releaseTag === null) return \"rust-analyzer\";\n \n-    const platforms: { [key: string]: string } = {\n-        \"ia32 win32\": \"x86_64-pc-windows-msvc\",\n-        \"x64 win32\": \"x86_64-pc-windows-msvc\",\n-        \"x64 linux\": \"x86_64-unknown-linux-gnu\",\n-        \"x64 darwin\": \"x86_64-apple-darwin\",\n-        \"arm64 win32\": \"aarch64-pc-windows-msvc\",\n-        \"arm64 linux\": \"aarch64-unknown-linux-gnu\",\n-        \"arm64 darwin\": \"aarch64-apple-darwin\",\n-    };\n-    let platform = platforms[`${process.arch} ${process.platform}`];\n-    if (platform) {\n-        if (platform === \"x86_64-unknown-linux-gnu\" && isMusl()) {\n-            platform = \"x86_64-unknown-linux-musl\";\n-        }\n-        const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";\n-        const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n-        const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n-        if (bundledExists) {\n-            let server = bundled;\n-            if (await isNixOs()) {\n-                await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n-                const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer-${platform}${ext}`);\n-                let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n-                if (exists && config.package.version !== state.serverVersion) {\n-                    await vscode.workspace.fs.delete(dest);\n-                    exists = false;\n-                }\n-                if (!exists) {\n-                    await vscode.workspace.fs.copy(bundled, dest);\n-                    await patchelf(dest);\n-                    server = dest;\n-                }\n+    const ext = process.platform === \"win32\" ? \".exe\" : \"\";\n+    const bundled = vscode.Uri.joinPath(context.extensionUri, \"server\", `rust-analyzer${ext}`);\n+    const bundledExists = await vscode.workspace.fs.stat(bundled).then(() => true, () => false);\n+    if (bundledExists) {\n+        let server = bundled;\n+        if (await isNixOs()) {\n+            await vscode.workspace.fs.createDirectory(config.globalStorageUri).then();\n+            const dest = vscode.Uri.joinPath(config.globalStorageUri, `rust-analyzer${ext}`);\n+            let exists = await vscode.workspace.fs.stat(dest).then(() => true, () => false);\n+            if (exists && config.package.version !== state.serverVersion) {\n+                await vscode.workspace.fs.delete(dest);\n+                exists = false;\n+            }\n+            if (!exists) {\n+                await vscode.workspace.fs.copy(bundled, dest);\n+                await patchelf(dest);\n+                server = dest;\n             }\n-            await state.updateServerVersion(config.package.version);\n-            return server.fsPath;\n         }\n+        await state.updateServerVersion(config.package.version);\n+        return server.fsPath;\n     }\n+\n+    await state.updateServerVersion(undefined);\n     await vscode.window.showErrorMessage(\n         \"Unfortunately we don't ship binaries for your platform yet. \" +\n         \"You need to manually clone rust-analyzer repository and \" +\n@@ -288,13 +275,6 @@ async function isNixOs(): Promise<boolean> {\n     }\n }\n \n-function isMusl(): boolean {\n-    // We can detect Alpine by checking `/etc/os-release` but not Void Linux musl.\n-    // Instead, we run `ldd` since it advertises the libc which it belongs to.\n-    const res = spawnSync(\"ldd\", [\"--version\"]);\n-    return res.stderr != null && res.stderr.indexOf(\"musl libc\") >= 0;\n-}\n-\n function warnAboutExtensionConflicts() {\n     const conflicting = [\n         [\"rust-analyzer\", \"matklad.rust-analyzer\"],"}]}