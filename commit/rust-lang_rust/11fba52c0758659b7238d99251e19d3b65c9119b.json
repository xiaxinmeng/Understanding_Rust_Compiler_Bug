{"sha": "11fba52c0758659b7238d99251e19d3b65c9119b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZmJhNTJjMDc1ODY1OWI3MjM4ZDk5MjUxZTE5ZDNiNjVjOTExOWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-04T09:14:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-20T08:44:02Z"}, "message": "add out-pointer example", "tree": {"sha": "b55fa04ff32550914eb06dcf2089c2c92c769fac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b55fa04ff32550914eb06dcf2089c2c92c769fac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11fba52c0758659b7238d99251e19d3b65c9119b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11fba52c0758659b7238d99251e19d3b65c9119b", "html_url": "https://github.com/rust-lang/rust/commit/11fba52c0758659b7238d99251e19d3b65c9119b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11fba52c0758659b7238d99251e19d3b65c9119b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a43326d026d4b115bc400094efa0b3e13924ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/30a43326d026d4b115bc400094efa0b3e13924ce", "html_url": "https://github.com/rust-lang/rust/commit/30a43326d026d4b115bc400094efa0b3e13924ce"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "cf579459491860c36ca35f66d71efb64936ba59e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/11fba52c0758659b7238d99251e19d3b65c9119b/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11fba52c0758659b7238d99251e19d3b65c9119b/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=11fba52c0758659b7238d99251e19d3b65c9119b", "patch": "@@ -1022,6 +1022,30 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///\n /// The compiler then knows to not make any incorrect assumptions or optimizations on this code.\n ///\n+/// ## out-pointers\n+///\n+/// You can use `MaybeUninit<T>` to implement \"out-pointers\": instead of returning data\n+/// from a function, pass it a pointer to some (uninitialized) memory to put the\n+/// result into. This can be useful when it is important for the caller to control\n+/// how the memory the result is stored in gets allocated, and you want to avoid\n+/// unnecessary moves.\n+///\n+/// ```\n+/// use std::mem::MaybeUninit;\n+///\n+/// unsafe fn make_vec(out: *mut Vec<i32>) {\n+///     // `write` does not drop the old contents, which is important.\n+///     out.write(vec![1, 2, 3]);\n+/// }\n+///\n+/// let mut v: MaybeUninit<Vec<i32>> = MaybeUninit::uninit();\n+/// unsafe { make_vec(v.as_mut_ptr()); }\n+/// // Now we know `v` is initialized! This also makes sure the vector gets\n+/// // properly dropped.\n+/// let v = unsafe { v.assume_init() };\n+/// assert_eq!(&v, &[1, 2, 3]);\n+/// ```\n+///\n /// ## Initializing an array element-by-element\n ///\n /// `MaybeUninit<T>` can be used to initialize a large array element-by-element:\n@@ -1049,7 +1073,7 @@ impl<T: ?Sized> DerefMut for ManuallyDrop<T> {\n ///     unsafe { mem::transmute::<_, [Vec<u32>; 1000]>(data) }\n /// };\n ///\n-/// println!(\"{:?}\", &data[0]);\n+/// assert_eq!(&data[0], &[42]);\n /// ```\n ///\n /// You can also work with partially initialized arrays, which could"}]}