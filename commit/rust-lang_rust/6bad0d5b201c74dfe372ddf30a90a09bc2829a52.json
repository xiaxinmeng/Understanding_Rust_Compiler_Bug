{"sha": "6bad0d5b201c74dfe372ddf30a90a09bc2829a52", "node_id": "C_kwDOAAsO6NoAKDZiYWQwZDViMjAxYzc0ZGZlMzcyZGRmMzBhOTBhMDliYzI4MjlhNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T16:24:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-21T16:24:56Z"}, "message": "Auto merge of #98098 - bjorn3:archive_refactor, r=michaelwoerister\n\nRemove the source archive functionality of ArchiveWriter\n\nWe now build archives through strictly additive means rather than taking an existing archive and potentially substracting parts. This is simpler and makes it easier to swap out the archive writer in https://github.com/rust-lang/rust/pull/97485.", "tree": {"sha": "0fdf25596faf1e76c9db017b5509ee17c0fab3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fdf25596faf1e76c9db017b5509ee17c0fab3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bad0d5b201c74dfe372ddf30a90a09bc2829a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bad0d5b201c74dfe372ddf30a90a09bc2829a52", "html_url": "https://github.com/rust-lang/rust/commit/6bad0d5b201c74dfe372ddf30a90a09bc2829a52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bad0d5b201c74dfe372ddf30a90a09bc2829a52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4b0d3aff2451316d9650ce2e66557cfb75a5071", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b0d3aff2451316d9650ce2e66557cfb75a5071", "html_url": "https://github.com/rust-lang/rust/commit/e4b0d3aff2451316d9650ce2e66557cfb75a5071"}, {"sha": "0d28d642b577104bc7901bdf5cae921b47f2442b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d28d642b577104bc7901bdf5cae921b47f2442b", "html_url": "https://github.com/rust-lang/rust/commit/0d28d642b577104bc7901bdf5cae921b47f2442b"}], "stats": {"total": 47, "additions": 8, "deletions": 39}, "files": [{"sha": "411ec27139e426d20968c8e7ba8091f5c3e9f291", "filename": "src/archive.rs", "status": "modified", "additions": 8, "deletions": 39, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6bad0d5b201c74dfe372ddf30a90a09bc2829a52/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bad0d5b201c74dfe372ddf30a90a09bc2829a52/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=6bad0d5b201c74dfe372ddf30a90a09bc2829a52", "patch": "@@ -32,7 +32,7 @@ pub struct ArArchiveBuilder<'a> {\n }\n \n impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n-    fn new(sess: &'a Session, output: &Path, input: Option<&Path>) -> Self {\n+    fn new(sess: &'a Session, output: &Path) -> Self {\n         let config = ArchiveConfig {\n             sess,\n             dst: output.to_path_buf(),\n@@ -41,48 +41,13 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             use_gnu_style_archive: sess.target.options.archive_format == \"gnu\",\n         };\n \n-        let (src_archives, entries) = if let Some(input) = input {\n-            let mut archive = ar::Archive::new(File::open(input).unwrap());\n-            let mut entries = Vec::new();\n-\n-            let mut i = 0;\n-            while let Some(entry) = archive.next_entry() {\n-                let entry = entry.unwrap();\n-                entries.push((\n-                    String::from_utf8(entry.header().identifier().to_vec()).unwrap(),\n-                    ArchiveEntry::FromArchive {\n-                        archive_index: 0,\n-                        entry_index: i,\n-                    },\n-                ));\n-                i += 1;\n-            }\n-\n-            (vec![(input.to_owned(), archive)], entries)\n-        } else {\n-            (vec![], Vec::new())\n-        };\n-\n         ArArchiveBuilder {\n             config,\n-            src_archives,\n-            entries,\n+            src_archives: vec![],\n+            entries: vec![],\n         }\n     }\n \n-    fn src_files(&mut self) -> Vec<String> {\n-        self.entries.iter().map(|(name, _)| name.clone()).collect()\n-    }\n-\n-    fn remove_file(&mut self, name: &str) {\n-        let index = self\n-            .entries\n-            .iter()\n-            .position(|(entry_name, _)| entry_name == name)\n-            .expect(\"Tried to remove file not existing in src archive\");\n-        self.entries.remove(index);\n-    }\n-\n     fn add_file(&mut self, file: &Path) {\n         self.entries.push((\n             file.file_name().unwrap().to_str().unwrap().to_string(),\n@@ -113,7 +78,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         Ok(())\n     }\n \n-    fn build(mut self) {\n+    fn build(mut self) -> bool {\n         use std::process::Command;\n \n         fn add_file_using_ar(archive: &Path, file: &Path) {\n@@ -146,6 +111,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n             BuilderKind::Bsd(ar::Builder::new(File::create(&self.config.dst).unwrap()))\n         };\n \n+        let any_members = !self.entries.is_empty();\n+\n         // Add all files\n         for (entry_name, entry) in self.entries.into_iter() {\n             match entry {\n@@ -206,6 +173,8 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         if !status.success() {\n             self.config.sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n         }\n+\n+        any_members\n     }\n \n     fn inject_dll_import_lib(&mut self, _lib_name: &str, _dll_imports: &[DllImport], _tmpdir: &MaybeTempDir) {"}]}