{"sha": "6d778ff61058a18978a0c24d61f6a84e57138fa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNzc4ZmY2MTA1OGExODk3OGEwYzI0ZDYxZjZhODRlNTcxMzhmYTQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T11:37:41Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-03-21T14:08:57Z"}, "message": "Remove outdated and unnecessary std::vec_ng::Vec imports.\n\n(And fix some tests.)", "tree": {"sha": "8dc2864dc856de11039c9af2dc428b556750fcb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc2864dc856de11039c9af2dc428b556750fcb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d778ff61058a18978a0c24d61f6a84e57138fa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d778ff61058a18978a0c24d61f6a84e57138fa4", "html_url": "https://github.com/rust-lang/rust/commit/6d778ff61058a18978a0c24d61f6a84e57138fa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d778ff61058a18978a0c24d61f6a84e57138fa4/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af79a5aa7da4f42fc0939a19f46fa73b894d6e9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a", "html_url": "https://github.com/rust-lang/rust/commit/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a"}], "stats": {"total": 299, "additions": 26, "deletions": 273}, "files": [{"sha": "da21db6e5d5f3814b4a0772a12a30084fc01557c", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -21,7 +21,6 @@ extern crate getopts;\n extern crate log;\n \n use std::os;\n-use std::vec_ng::Vec;\n use std::io;\n use std::io::fs;\n use getopts::{optopt, optflag, reqopt};"}, {"sha": "285bad0fc4b122f03ea31250194672363c71f5ca", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::io::{BufferedReader, File};\n-use std::vec_ng::Vec;\n \n pub struct ExpectedError { line: uint, kind: ~str, msg: ~str }\n "}, {"sha": "f6ae45d766a50ed3607f1e80d0fd578fca36fd87", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,8 +12,6 @@ use common::config;\n use common;\n use util;\n \n-use std::vec_ng::Vec;\n-\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n     error_patterns: Vec<~str> ,"}, {"sha": "eef1a1ac241dc71dd81c3e276508ac8d511a3cb0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -33,8 +33,7 @@ use std::os;\n use std::str;\n use std::task;\n use std::slice;\n-use std::vec_ng;\n-\n+use std::vec;\n use test::MetricMap;\n \n pub fn run(config: config, testfile: ~str) {"}, {"sha": "6ed72cc3713f848ef9cdbb0c6b5b3b1f7fa6ef07", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -489,7 +489,6 @@ impl<T> Drop for TypedArena<T> {\n mod tests {\n     extern crate test;\n \n-    use std::vec_ng::Vec;\n \n     use self::test::BenchHarness;\n     use super::{Arena, TypedArena};"}, {"sha": "ecd04f31d676b10c6f0eaa329046d88409d2af7d", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -903,7 +903,6 @@ mod tests {\n \n     use std::result::{Err, Ok};\n     use std::result;\n-    use std::vec_ng::Vec;\n \n     fn check_fail_type(f: Fail_, ft: FailType) {\n         match f {"}, {"sha": "0659e79433a1338ce39243c41c2b7655da2a3811", "filename": "src/libsync/arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Farc.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -583,7 +583,6 @@ mod tests {\n     use super::{Arc, RWArc, MutexArc, CowArc};\n \n     use std::task;\n-    use std::vec_ng::Vec;\n \n     #[test]\n     fn manually_share_arc() {"}, {"sha": "2217706d4f02873940fff5700e83b622136c45c0", "filename": "src/libsync/sync/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibsync%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibsync%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmod.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -765,7 +765,6 @@ mod tests {\n     use std::result;\n     use std::task;\n     use std::comm::Empty;\n-    use std::vec_ng::Vec;\n \n     /************************************************************************\n      * Semaphore tests"}, {"sha": "6975236092992dbbe7d576fda23de545f846b492", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -563,7 +563,7 @@ fn format(val: Param, op: FormatOp, flags: Flags) -> Result<Vec<u8> ,~str> {\n mod test {\n     use super::{expand,String,Variables,Number};\n     use std::result::Ok;\n-    use std::vec_ng;\n+    use std::vec;\n \n     #[test]\n     fn test_basic_setabf() {"}, {"sha": "47602bfcdf2652dd1109a9201d796fa86c1a9f8c", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -538,7 +538,6 @@ mod test {\n                 Version5Sha1};\n     use std::str;\n     use std::io::MemWriter;\n-    use std::vec_ng::Vec;\n \n     #[test]\n     fn test_nil() {"}, {"sha": "aa6ee35a077925027e494cabdfb9c3364adf67d0", "filename": "src/test/auxiliary/anon-extern-mod-cross-crate-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fanon-extern-mod-cross-crate-1.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n use std::libc;\n \n-use std::vec_ng::Vec;\n #[link(name=\"rustrt\")]\n extern {\n     pub fn rust_get_test_int() -> libc::intptr_t;"}, {"sha": "3ebb23706b6b1decd131e9680eed140708a750e4", "filename": "src/test/auxiliary/cci_class_6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_6.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n pub mod kitties {\n-    use std::vec_ng::Vec;\n \n     pub struct cat<U> {\n         priv info : Vec<U> ,"}, {"sha": "a9be1e62195ff9665904b52f60f03b769e77220b", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(managed_boxes)];\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n \n pub struct Entry<A,B> {\n     key: A,"}, {"sha": "913921e75a4842ad65d5a68b615d7582427ca836", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[crate_id=\"cci_no_inline_lib\"];\n \n-use std::vec_ng::Vec;\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n pub fn iter(v: Vec<uint> , f: |uint|) {"}, {"sha": "e7e0bf1bd60fadc3496bab69ecd5d21218521e92", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -15,7 +15,6 @@\n extern crate collections;\n \n use std::cell::RefCell;\n-use std::vec_ng::Vec;\n use collections::HashMap;\n \n pub type header_map = HashMap<~str, @RefCell<Vec<@~str>>>;"}, {"sha": "2dc88d8ff02242bd39697186d682f6d2268d1b1b", "filename": "src/test/auxiliary/issue_2723_a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2723_a.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub unsafe fn f(xs: Vec<int> ) {\n     xs.map(|_x| { unsafe fn q() { fail!(); } });"}, {"sha": "e169f374db9bc9c13ce4630cf605ff3a53fdf9fa", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n use std::os;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn main() {\n     let args = os::args();"}, {"sha": "629b4cbfeea2be0bab5c9b5369f92734bb1cf5b5", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -24,7 +24,6 @@ use std::comm;\n use std::os;\n use std::task;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn move_out<T>(_x: T) {}\n "}, {"sha": "49d9c5d3a2e3157136a423ac97cc3b18c8b677c1", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -19,7 +19,6 @@ extern crate time;\n use std::os;\n use std::task;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn move_out<T>(_x: T) {}\n "}, {"sha": "a3a6bbeb9a60caedc479fe7dba7c5e1920957303", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -23,7 +23,6 @@ use sync::MutexArc;\n use sync::Future;\n use std::os;\n use std::uint;\n-use std::vec_ng::Vec;\n \n // A poor man's pipe.\n type pipe = MutexArc<Vec<uint> >;"}, {"sha": "4827712c2e2407f3f7d6129753c574057b877668", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -22,7 +22,6 @@ use sync::RWArc;\n use sync::Future;\n use std::os;\n use std::uint;\n-use std::vec_ng::Vec;\n \n // A poor man's pipe.\n type pipe = RWArc<Vec<uint> >;"}, {"sha": "143178513855fbade425d08d23dd2312c603bbc1", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::os;\n-use std::vec_ng::Vec;\n \n fn ack(m: int, n: int) -> int {\n     if m == 0 {"}, {"sha": "407bea5b4f4cbb8ccf796530ebe7e2ef18fe6b10", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -13,7 +13,6 @@\n use std::option;\n use std::os;\n use std::task;\n-use std::vec_ng::Vec;\n \n fn print_complements() {\n     let all = [Blue, Red, Yellow];"}, {"sha": "76ac8407d60c57a77fb1332d2334445e6f219c40", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -18,7 +18,6 @@ use std::io;\n use std::io::{BufferedWriter, File};\n use std::cmp::min;\n use std::os;\n-use std::vec_ng::Vec;\n \n static LINE_LENGTH: uint = 60;\n static IM: u32 = 139968;"}, {"sha": "7e9c7187ea57313ea0e4f6352f6d6b1c8e8f26f4", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::os;\n-use std::vec_ng::Vec;\n \n fn fib(n: int) -> int {\n     if n < 2 {"}, {"sha": "e63f6d675f5418c17bf7628ad74472ee21181673", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -24,7 +24,7 @@ use std::os;\n use std::io;\n use std::str;\n use std::task;\n-use std::slice;\n+use std::vec;\n \n fn f64_cmp(x: f64, y: f64) -> Ordering {\n     // arbitrarily decide that NaNs are larger than everything."}, {"sha": "b26053bdf353f96f49cb7fd80b4ac50c09e78391", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n // Utilities.\n //\n \n-use std::vec_ng::Vec;\n \n // returns an infinite iterator of repeated applications of f to x,\n // i.e. [x, f(x), f(f(x)), ...], as haskell iterate function."}, {"sha": "63a66022d8390a480e98a79185a77538241ecd91", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::os;\n-use std::vec_ng::Vec;\n \n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;"}, {"sha": "761131ed50189c14fd8d5d26d237ebc574536500", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -25,7 +25,6 @@ use std::os;\n use std::result::{Ok, Err};\n use std::task;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn fib(n: int) -> int {\n     fn pfib(tx: &Sender<int>, n: int) {"}, {"sha": "a1fa3ff06198b06bfe8d2c9c105bdb2c626a8af3", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -14,7 +14,6 @@ use std::from_str::FromStr;\n use std::iter::count;\n use std::cmp::min;\n use std::os;\n-use std::slice::from_elem;\n use sync::RWArc;\n \n fn A(i: uint, j: uint) -> f64 {\n@@ -49,7 +48,7 @@ fn mult(v: RWArc<Vec<f64>>,\n         spawn(proc() {\n             for i in range(chk, min(len, chk + chunk)) {\n                 let val = v.read(|v| f(v, i));\n-                out.write(|out| out[i] = val);\n+                out.write(|out| *out.get_mut(i) = val);\n             }\n             drop(tx)\n         });\n@@ -98,15 +97,16 @@ fn main() {\n     } else {\n         FromStr::from_str(args[1]).unwrap()\n     };\n-    let u = RWArc::new(from_elem(n, 1.));\n-    let v = RWArc::new(from_elem(n, 1.));\n-    let tmp = RWArc::new(from_elem(n, 1.));\n+    let u = RWArc::new(Vec::from_elem(n, 1.));\n+    let v = RWArc::new(Vec::from_elem(n, 1.));\n+    let tmp = RWArc::new(Vec::from_elem(n, 1.));\n     for _ in range(0, 10) {\n         mult_AtAv(u.clone(), v.clone(), tmp.clone());\n         mult_AtAv(v.clone(), u.clone(), tmp.clone());\n     }\n \n     u.read(|u| v.read(|v| {\n-        println!(\"{:.9f}\", (dot(*u, *v) / dot(*v, *v)).sqrt());\n+        println!(\"{:.9f}\",\n+                 (dot(u.as_slice(), v.as_slice()) / dot(v.as_slice(), v.as_slice())).sqrt());\n     }))\n }"}, {"sha": "b9ed1576e37165a5f03248430c3158b8c34e840c", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@ extern crate time;\n use collections::SmallIntMap;\n use std::os;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn append_sequential(min: uint, max: uint, map: &mut SmallIntMap<uint>) {\n     for i in range(min, max) {"}, {"sha": "0df92afd49477979f196c8480e4bbf2c969b526e", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -70,6 +70,7 @@ impl Sudoku {\n \n         let mut g = Vec::from_fn(10u, { |_i| vec!(0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8) });\n         for line in reader.lines() {\n+            let line = line.unwrap();\n             let comps: Vec<&str> = line.trim().split(',').collect();\n \n             if comps.len() == 3u {"}, {"sha": "4a53b3cbfe49360808931bdaef06c0cc0e7fb818", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -17,8 +17,7 @@ use collections::list::{List, Cons, Nil};\n use time::precise_time_s;\n use std::os;\n use std::task;\n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec;\n \n enum UniqueList {\n     ULNil, ULCons(~UniqueList)"}, {"sha": "f5711d91447d9daa3ccbb5299a010e0d55eeb2d8", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -21,7 +21,6 @@ use std::comm;\n use std::os;\n use std::task;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn child_generation(gens_left: uint, tx: comm::Sender<()>) {\n     // This used to be O(n^2) in the number of generations that ever existed."}, {"sha": "8af1fe2d444f3303c9d7b8f39e7f1820b371ac78", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n use std::os;\n use std::task;\n use std::uint;\n-use std::vec_ng::Vec;\n \n fn f(n: uint) {\n     let mut i = 0u;"}, {"sha": "e1696f0e63ed7607a52fca0aa55f590009b1ba14", "filename": "src/test/compile-fail/access-mode-in-closures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faccess-mode-in-closures.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct sty(Vec<int> );\n "}, {"sha": "67b7a5a7f370086acb3329c6870655bd5ce5bf08", "filename": "src/test/compile-fail/ambig_impl_unify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fambig_impl_unify.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait foo {\n     fn foo(&self) -> int;"}, {"sha": "d6065c81a2d899907c37b56b0b48802941c2ddc5", "filename": "src/test/compile-fail/borrowck-init-op-equal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-op-equal.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn test() {\n     let v: int;"}, {"sha": "e955f9d3289fe18fd939fd81a3f0b5b3e081ad74", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n type Foo = Vec<u8>;\n "}, {"sha": "350b077690418d2b342ef7ffb0fcc2ee7a772e57", "filename": "src/test/compile-fail/import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n use zed::bar;\n use zed::baz;\n \n-use std::vec_ng::Vec;\n \n mod zed {\n     pub fn bar() { println!(\"bar\"); }"}, {"sha": "8b282ba88418bf824b096c9b944e2dd1d2b1a8ec", "filename": "src/test/compile-fail/import2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n use baz::zed::bar;  //~ ERROR unresolved import\n //~^ ERROR failed to resolve import\n \n-use std::vec_ng::Vec;\n \n mod baz {}\n mod zed {"}, {"sha": "5f3163e9390196286c2def070f969ea39fee8fe2", "filename": "src/test/compile-fail/import4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fimport4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport4.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern: import\n \n-use std::vec_ng::Vec;\n \n mod a { pub use b::foo; }\n mod b { pub use a::foo; }"}, {"sha": "5bcba350b2ecba893f97825acf2c751d0f1b21f8", "filename": "src/test/compile-fail/infinite-vec-type-recursion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-vec-type-recursion.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern: illegal recursive type\n \n-use std::vec_ng::Vec;\n \n type x = Vec<x>;\n "}, {"sha": "ce5a5a09e4866114d46bee6cad8a1c80284e16ef", "filename": "src/test/compile-fail/issue-1655.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1655.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern:expected `[` but found `~`\n+// error-pattern:expected `[` but found `vec`\n mod blade_runner {\n-    #vec!(doc(\n+    #vec[doc(\n         brief = \"Blade Runner is probably the best movie ever\",\n         desc = \"I like that in the world of Blade Runner it is always\n                 raining, and that it's always night time. And Aliens\n                 was also a really good movie.\n \n                 Alien 3 was crap though.\"\n-    ))\n+    )]\n }"}, {"sha": "afb413584a4814e01bf87a902252393c1375e91d", "filename": "src/test/compile-fail/issue-2149.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2149.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait vec_monad<A> {\n     fn bind<B>(&self, f: |A| -> Vec<B> );"}, {"sha": "c89df46114cba2bc9a8e51757aa43aba1665f761", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -13,7 +13,6 @@\n #[allow(dead_code)];\n #[allow(deprecated_owned_vector)];\n \n-use std::vec_ng::Vec;\n \n fn fail_len(v: Vec<int> ) -> uint {\n     let mut i = 3;"}, {"sha": "79a66e30fdb916cc8ba22daf31009fd188ce678c", "filename": "src/test/compile-fail/issue-2590.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2590.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct parser {\n     tokens: Vec<int> ,"}, {"sha": "0f7cc2cb72b8e2b05b73dcb6456119e3ade48d33", "filename": "src/test/compile-fail/issue-3044.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3044.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     let needlesArr: Vec<char> = vec!('a', 'f');"}, {"sha": "dbd3a5a36e85a26ae66d153dc42455efb25ab6bc", "filename": "src/test/compile-fail/issue-7573.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7573.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub struct CrateId {\n     local_path: ~str,"}, {"sha": "4da1247819491e14c489caa19c7f7b3a6970c0d6", "filename": "src/test/compile-fail/kindck-freeze.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-freeze.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // Test which of the builtin types are considered freezeable.\n \n-use std::vec_ng::Vec;\n \n fn assert_freeze<T:Freeze>() { }\n trait Dummy { }"}, {"sha": "94902d4e68ea5a50d155453989f933282c2cef44", "filename": "src/test/compile-fail/kindck-pod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -13,7 +13,6 @@\n #[feature(managed_boxes)];\n \n use std::rc::Rc;\n-use std::vec_ng::Vec;\n \n fn assert_pod<T:Pod>() { }\n trait Dummy { }"}, {"sha": "cdf24257ce732603d877245c5c8010a98b390470", "filename": "src/test/compile-fail/kindck-send.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // Test which of the builtin types are considered sendable.\n \n-use std::vec_ng::Vec;\n \n fn assert_send<T:Send>() { }\n trait Dummy { }"}, {"sha": "ad3ac4eba11885045d8c92a5d76c711bdd636632", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@\n #[allow(deprecated_owned_vector)];\n #[deny(unused_mut)];\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     // negative cases"}, {"sha": "87448f68d02039a7ca2ee744b66639d6eb05ff9e", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -14,7 +14,6 @@\n #[deny(unused_unsafe)];\n #[allow(deprecated_owned_vector)];\n \n-use std::vec_ng::Vec;\n \n mod foo {\n     extern {"}, {"sha": "d3630ed107e645b609837f1884cbde55ee8a8906", "filename": "src/test/compile-fail/match-vec-unreachable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-unreachable.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     let x: Vec<(int, int)> = Vec::new();"}, {"sha": "ed0138e05be4c1536a8becf688b55abe16138c5b", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -96,7 +96,7 @@ fn f110() {\n \n fn f120() {\n     let mut x = vec!(~\"hi\", ~\"ho\");\n-    x.swap(0, 1);\n+    x.as_mut_slice().swap(0, 1);\n     touch(x.get(0));\n     touch(x.get(1));\n }"}, {"sha": "bd9547d5e1c4af74d1e38e4bffe1ec8c1b52c496", "filename": "src/test/compile-fail/non-copyable-void.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-copyable-void.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::libc;\n-use std::vec_ng::Vec;\n \n fn main() {\n     let x : *Vec<int> = &vec!(1,2,3);"}, {"sha": "15a94c72c02ab607a4da25f5e1e67dcce56d25fe", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,8 +12,7 @@\n // Issue #876\n \n #[no_implicit_prelude];\n-\n-use std::vec_ng::Vec;\n+use std::vec::Vec;\n \n fn last<T>(v: Vec<&T> ) -> std::option::Option<T> {\n     fail!();"}, {"sha": "c76a6f2453e243b30f1661e57654641bbcba120e", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(managed_boxes)];\n \n use std::cell::Cell;\n-use std::vec_ng::Vec;\n \n struct r {\n   i: @Cell<int>,"}, {"sha": "4d57470a721655d20c16204f51378caac5f91f47", "filename": "src/test/compile-fail/use-after-move-implicity-coerced-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-implicity-coerced-object.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n // ignore-tidy-linelength\n \n use std::fmt;\n-use std::vec_ng::Vec;\n \n struct Number {\n     n: i64"}, {"sha": "9c41b0bc1c1642ce6da6fab702f4360564560043", "filename": "src/test/compile-fail/vector-no-ann.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvector-no-ann.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     let _foo = Vec::new(); //~ ERROR unconstrained type"}, {"sha": "ab00a8a01e0a647626cd09b4fcd59f96b730fa01", "filename": "src/test/compile-fail/writing-to-immutable-vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-to-immutable-vec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     let v: Vec<int> = vec!(1, 2, 3);"}, {"sha": "5ddce3c60e177e1e2da270eed2306a06c2215079", "filename": "src/test/debug-info/boxed-vec.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fboxed-vec.rs?ref=af79a5aa7da4f42fc0939a19f46fa73b894d6e9a", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// ignore-android: FIXME(#10381)\n-\n-#[feature(managed_boxes)];\n-\n-// compile-flags:-g\n-// debugger:rbreak zzz\n-// debugger:run\n-// debugger:finish\n-\n-// debugger:print unique->fill\n-// check:$1 = 32\n-// debugger:print *((uint64_t[4]*)(unique->elements))\n-// check:$2 = {10, 11, 12, 13}\n-\n-#[allow(unused_variable)];\n-\n-fn main() {\n-\n-    let unique: Vec<i64> = vec!(10, 11, 12, 13);\n-\n-    zzz();\n-}\n-\n-fn zzz() {()}"}, {"sha": "83ad5c4c7fabf60d475876c8027c7d95c53ded01", "filename": "src/test/debug-info/issue11600.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fdebug-info%2Fissue11600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue11600.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn main() {\n-    let args : Vec<~str> = ::std::os::args();\n+    let args : ~[~str] = ::std::os::args();\n     ::std::io::println(args[0]);\n }\n "}, {"sha": "e585f9be4edc3e67370054de0b566c51f66faf8a", "filename": "src/test/debug-info/managed-pointer-within-unique-vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fmanaged-pointer-within-unique-vec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -17,16 +17,16 @@\n // debugger:run\n // debugger:finish\n \n-// debugger:print unique->elements[0]->val\n+// debugger:print unique.ptr[0]->val\n // check:$1 = 10\n \n-// debugger:print unique->elements[1]->val\n+// debugger:print unique.ptr[1]->val\n // check:$2 = 11\n \n-// debugger:print unique->elements[2]->val\n+// debugger:print unique.ptr[2]->val\n // check:$3 = 12\n \n-// debugger:print unique->elements[3]->val\n+// debugger:print unique.ptr[3]->val\n // check:$4 = 13\n \n #[allow(unused_variable)];"}, {"sha": "bc48920944642de2def686bab03c11e5a0437b10", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -15,7 +15,6 @@\n #[feature(managed_boxes)];\n \n use std::cell::Cell;\n-use std::vec_ng::Vec;\n \n fn test1() { let val = @0; { } *val; }\n "}, {"sha": "7e8a8867a7c5f8d6f89d820521d4f2699f5505d0", "filename": "src/test/run-fail/issue-3029.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Fissue-3029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fissue-3029.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n #[allow(unreachable_code)];\n #[allow(unused_variable)];\n \n-use std::vec_ng::Vec;\n \n // error-pattern:so long\n fn main() {"}, {"sha": "013cd09b9a662ce220caa5a64afe414d64114790", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -15,8 +15,7 @@\n \n extern crate collections;\n \n-use std::vec_ng::Vec;\n-use std::vec_ng;\n+use std::vec;\n \n fn main() {\n     let _count = @0u;"}, {"sha": "e77f95c22b25fde8f425bec74c68b11b556152ea", "filename": "src/test/run-fail/unwind-partial-box.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-box.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n fn f() -> Vec<int> { fail!(); }\n "}, {"sha": "c6d75aa8713682e0c826c4b0edbfa79ad2ae60d0", "filename": "src/test/run-fail/unwind-partial-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-unique.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n fn f() -> Vec<int> { fail!(); }\n "}, {"sha": "afa3b3fb7eee98bd5beaa1459fc76130d1750d18", "filename": "src/test/run-fail/unwind-partial-vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-partial-vec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n fn f() -> Vec<int> { fail!(); }\n "}, {"sha": "9c96970f0e7f116685a85ffd1d9e67c3f98b2642", "filename": "src/test/run-fail/unwind-rec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:fail\n \n-use std::vec_ng::Vec;\n \n fn build() -> Vec<int> {\n     fail!();"}, {"sha": "178d0a8ab327c4e06b2f9051de274f4bb8ea351b", "filename": "src/test/run-fail/unwind-rec2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-rec2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-rec2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:fail\n \n-use std::vec_ng::Vec;\n \n fn build1() -> Vec<int> {\n     vec!(0,0,0,0,0,0,0)"}, {"sha": "bb7a2e21bb98da61772162f081f28f3cee49ebff", "filename": "src/test/run-fail/unwind-tup.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n // error-pattern:fail\n "}, {"sha": "6b6f8172a179429f0e6537f7f0d4ee0938864e24", "filename": "src/test/run-fail/unwind-tup2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Funwind-tup2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-tup2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n // error-pattern:fail\n "}, {"sha": "40ffe15fe867a8e3ccc182e5f464e2bbf7c0a3b1", "filename": "src/test/run-fail/vec-overrun.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-fail%2Fvec-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fvec-overrun.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // error-pattern:index out of bounds: the len is 1 but the index is 2\n \n-use std::vec_ng::Vec;\n \n fn main() {\n     let v: Vec<int> = vec!(10);"}, {"sha": "c356d1d527e5e4e3bd453696f24988273a2b5a71", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n enum option<T> { some(T), none, }\n "}, {"sha": "2682d9e54bc11a9ef425404eaf156889387e5507", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-use std::vec_ng::Vec;\n \n trait iterable<A> {\n     fn iterate(&self, blk: |x: &A| -> bool) -> bool;"}, {"sha": "652f21c2ae3f829aeaff85b54ab1871492d9656c", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait Pushable<T> {\n     fn push_val(&mut self, t: T);"}, {"sha": "24f18daa985bedeeacb2579d6e1b87ae2afa547b", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn f<T>(x: Vec<T>) -> T { return x.move_iter().next().unwrap(); }\n "}, {"sha": "5bfbc447159e1c1ca467373ab8abb33d35fcbec4", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n "}, {"sha": "aa77014dc7d2426166673149d49d737c4a45e1f3", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n fn iter_vec<T>(v: Vec<T> , f: |&T|) { for x in v.iter() { f(x); } }\n "}, {"sha": "e6632fddad959a342441cc8bf3426138bf362959", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait Foo {\n     fn foo(self);"}, {"sha": "6624136544dded6d8b59154babf86989a4a056b1", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct F { f: Vec<int> }\n "}, {"sha": "bed6fcd0091af75f540cb53d1a24e367e78b1439", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::mem::swap;\n-use std::vec_ng::Vec;\n \n struct Ints {sum: ~int, values: Vec<int> }\n "}, {"sha": "05dffe916808e2a16afeca4e5edb9c461e5b0c20", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn want_slice(v: &[int]) -> int {\n     let mut sum = 0;"}, {"sha": "d4ff09c5df417e174131ffe2a02f2e5530f28608", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n struct F { f: @G }\n struct G { g: Vec<int> }"}, {"sha": "4bb9a89fcc1fc4716294a1d0bf1bdac38ef30ea1", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n fn borrow<'r,T>(x: &'r T) -> &'r T {x}\n "}, {"sha": "bf2423167571da1cfea71bb131f020e8c99a95bc", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn foo() -> int { 22 }\n "}, {"sha": "bbd50b2e67291011a803b1e958aa564ac1075588", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct cat<U> {\n     info : Vec<U> ,"}, {"sha": "3da8c041e273da8164f954bc070c4d012401ce2b", "filename": "src/test/run-pass/cleanup-rvalue-scopes.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-scopes.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -15,7 +15,6 @@\n #[feature(macro_rules)];\n \n use std::ops::Drop;\n-use std::vec_ng::Vec;\n \n static mut FLAGS: u64 = 0;\n "}, {"sha": "8c906bf96b69fb36aaa8700901664932db8d728f", "filename": "src/test/run-pass/cleanup-rvalue-temp-during-incomplete-alloc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-rvalue-temp-during-incomplete-alloc.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -25,7 +25,6 @@\n // scenario worth testing.\n \n use std::task;\n-use std::vec_ng::Vec;\n \n enum Conzabble {\n     Bickwick(Foo)"}, {"sha": "ad7d818bd3bb7ddc0a4ddda9a84c3689e8d651d2", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn bar(v: &mut [uint]) -> Vec<uint> {\n     Vec::from_slice(v)"}, {"sha": "10d747bf41408c3c3deaf742be0a93b7354a8573", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn reverse(v: &mut [uint]) {\n     v.reverse();"}, {"sha": "6820aa4d186efd8ea89103d1cdffc72917faa7cd", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn bar(v: &mut [uint]) {\n     v.reverse();"}, {"sha": "84d3dd97e8488e8ca8706de3a61492ad9f1596d7", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,6 +10,5 @@\n \n #[allow(unused_mut)];\n \n-use std::vec_ng::Vec;\n \n pub fn main() { let mut _v: Vec<int> = Vec::new(); }"}, {"sha": "d1b5569f33665e7b6d94c6aa385d2a28d5ff266c", "filename": "src/test/run-pass/expr-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fexpr-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-fn.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn test_int() {\n     fn f() -> int { 10 }"}, {"sha": "1ef4e21c1808d68c886f318ec2668130a3060895", "filename": "src/test/run-pass/expr-match-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-fail.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn test_simple() {\n     let r = match true { true => { true } false => { fail!() } };"}, {"sha": "c0f6b14dc27489f031813b1f8215a7d6de779830", "filename": "src/test/run-pass/for-loop-fail.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-fail.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,6 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() { let x: Vec<int> = Vec::new(); for _ in x.iter() { fail!(\"moop\"); } }"}, {"sha": "357d1201a4cbba023ef74d20ac369cadcd42d29a", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn two(it: |int|) { it(0); it(1); }\n "}, {"sha": "2b7c860c2fab4eb1c33a97c0cfaa7b542959aeaf", "filename": "src/test/run-pass/generic-static-methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-static-methods.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait vec_utils<T> {\n     fn map_<U>(x: &Self, f: |&T| -> U) -> Vec<U> ;"}, {"sha": "a4cae79c03708ae134fe401af082f9a43098c01c", "filename": "src/test/run-pass/getopts_ref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgetopts_ref.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -13,7 +13,6 @@\n extern crate getopts;\n \n use getopts::{optopt, getopts};\n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let args = Vec::new();"}, {"sha": "a57cf3e59ae1d96ff4b5b273caac877e58f1d992", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -14,7 +14,6 @@\n \n extern crate collections;\n \n-use std::vec_ng::Vec;\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues.\n@@ -28,7 +27,6 @@ mod map_reduce {\n     use collections::HashMap;\n     use std::str;\n     use std::task;\n-    use std::vec_ng::Vec;\n \n     pub type putter<'a> = 'a |~str, ~str|;\n "}, {"sha": "8e7a1347fd3d18b63ed432a1f17bf54a426043bf", "filename": "src/test/run-pass/html-literals.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fhtml-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhtml-literals.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(macro_rules)];\n \n-use std::vec_ng::Vec;\n \n /*\n "}, {"sha": "a9a9f78943fe295b9652c5593e7b417a5cd4a718", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -20,5 +20,5 @@ pub fn main() {\n     let (mut x, mut y) = (1, 2);\n     swap(&mut x, &mut y);\n     assert_eq!(x, 2);\n-    assert_eq!(x, 1);\n+    assert_eq!(y, 1);\n }"}, {"sha": "f240a5e6de55fd64d5650cbb69cf90969bb0a731", "filename": "src/test/run-pass/infer-fn-tail-expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-fn-tail-expr.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // issue #680\n \n-use std::vec_ng::Vec;\n \n fn f() -> Vec<int> { Vec::new() }\n "}, {"sha": "b3885691093c600b651ea25b5207f1dcb5362261", "filename": "src/test/run-pass/integral-indexing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintegral-indexing.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n // This is a testcase for issue #94.\n pub fn main() {"}, {"sha": "b7c4bb0fe00460817b2a257ebab7dfc01b5d8ef7", "filename": "src/test/run-pass/issue-1821.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-1821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-1821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1821.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #1821 - Don't recurse trying to typecheck this\n \n-use std::vec_ng::Vec;\n \n enum t {\n     foo(Vec<t>)"}, {"sha": "91912e00e180918d01af98e1c1692022b2e8e86d", "filename": "src/test/run-pass/issue-2502.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2502.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2502.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct font<'a> {\n     fontbuf: &'a Vec<u8> ,"}, {"sha": "907e0b5d11ded6a5503f00b97431efa5a33672ae", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@ extern crate serialize;\n use collections::HashMap;\n use serialize::json;\n use std::option;\n-use std::vec_ng::Vec;\n \n enum object {\n     bool_value(bool),"}, {"sha": "2035d6f6903e3984388ef9f36278abf5dca92412", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@\n \n use std::io;\n use std::fmt;\n-use std::vec_ng::Vec;\n \n enum square {\n     bot,"}, {"sha": "5bd41e8bf3bd3da80baf8181804d02cd54fc67ac", "filename": "src/test/run-pass/issue-3052.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3052.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3052.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n type Connection = 'static |Vec<u8> |;\n "}, {"sha": "35e91c2832bc42ec10212df6206e0d8e6b83f4ed", "filename": "src/test/run-pass/issue-3389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3389.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct trie_node {\n     content: Vec<~str> ,"}, {"sha": "bb0ea68e757e8a23d94cecc362f757ac18b9a45f", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -23,7 +23,6 @@\n use std::str;\n use std::slice;\n use std::fmt;\n-use std::vec_ng::Vec;\n \n // Represents a position on a canvas.\n struct Point {"}, {"sha": "da620ffeb0dd4acc6cd237e76bb895757fd2fd2c", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::task;\n-use std::vec_ng::Vec;\n \n type RingBuffer = Vec<f64> ;\n type SamplesFn = proc(samples: &RingBuffer);"}, {"sha": "da22da31d5b52a4148b546e9d0ebaa302d6ce4fa", "filename": "src/test/run-pass/issue-3991.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-3991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3991.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct HasNested {\n     nest: Vec<Vec<int> > ,"}, {"sha": "1033b953305d58fa4821d60a25189eccfe58c8ae", "filename": "src/test/run-pass/issue-4036.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-4036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4036.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@\n extern crate serialize;\n \n use serialize::{json, Decodable};\n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let json = json::from_str(\"[1]\").unwrap();"}, {"sha": "6dd2a2ec1339d44baabf703263761c9f74eaa893", "filename": "src/test/run-pass/issue-5708.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-5708.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5708.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -18,7 +18,6 @@ This does not occur with concrete types, only with references\n to traits.\n */\n \n-use std::vec_ng::Vec;\n \n // original\n trait Inner {"}, {"sha": "fa784e17b10f22806d43c514a01a4af18eeb7291", "filename": "src/test/run-pass/issue-6153.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-6153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6153.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn swap(f: |Vec<int> | -> Vec<int> ) -> Vec<int> {\n     let x = vec!(1, 2, 3);"}, {"sha": "af2211c00a593b085ba598248c714d208cb9c34f", "filename": "src/test/run-pass/issue-9382.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fissue-9382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-9382.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -16,7 +16,6 @@\n // from a vector to a slice. The drop glue was being invoked on\n // the temporary slice with a wrong type, triggering an LLVM assert.\n \n-use std::vec_ng::Vec;\n \n struct Thing1<'a> {\n     baz: &'a [~int],"}, {"sha": "36f0d3c1c52074028d74caf425b56931858abe13", "filename": "src/test/run-pass/ivec-pass-by-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-pass-by-value.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn f(_a: Vec<int> ) { }\n pub fn main() { f(vec!(1, 2, 3, 4, 5)); }"}, {"sha": "81ff6fd7adc9419b85724a7f4770e18760ca44d6", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::task;\n-use std::vec_ng::Vec;\n \n fn producer(tx: &Sender<Vec<u8>>) {\n     tx.send("}, {"sha": "190d25015840ce2090e97e9930c2c39a6a0a02d1", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n // This should typecheck even though the type of e is not fully\n // resolved when we finish typechecking the ||.\n \n-use std::vec_ng::Vec;\n \n struct Refs { refs: Vec<int> , n: int }\n "}, {"sha": "9120151051ea05ab2e1b38247650cd8b4da0750f", "filename": "src/test/run-pass/liveness-move-in-loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fliveness-move-in-loop.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn take(x: int) -> int {x}\n "}, {"sha": "ab9452536794ed8fd538563cb088777d5cb1b68b", "filename": "src/test/run-pass/match-vec-rvalue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-rvalue.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // Tests that matching rvalues with drops does not crash.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     match vec!(1, 2, 3) {"}, {"sha": "47f1fcc29346a6daff0fd1aabb5ab2aab44511d8", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n trait vec_monad<A> {\n     fn bind<B>(&self, f: |&A| -> Vec<B> ) -> Vec<B> ;"}, {"sha": "6bc3605156c5e7cbdebe8a7ab3bce73d72321825", "filename": "src/test/run-pass/move-arg-2-unique.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2-unique.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn test(foo: ~Vec<int> ) { assert!((*foo.get(0) == 10)); }\n "}, {"sha": "131a51a5467de9b8e292d56a092fb3e9a6deb5d1", "filename": "src/test/run-pass/move-arg-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-arg-2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n fn test(foo: @Vec<int> ) { assert!((*foo.get(0) == 10)); }\n "}, {"sha": "c00b7120054609df968d50f92e19978ee4f245a5", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(managed_boxes)];\n #[allow(unused_mut)];\n \n-use std::vec_ng::Vec;\n \n struct Pair { a: int, b: int}\n "}, {"sha": "0a30a80314a710e5e648836a3f98aba8b7ad1f46", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n #[deriving(Clone)]\n struct myvec<X>(Vec<X> );"}, {"sha": "117cd6d572ee06e071abf40c91a1a184c866f80b", "filename": "src/test/run-pass/nullable-pointer-iotareduction.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-iotareduction.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(macro_rules)];\n \n use std::{option, cast};\n-use std::vec_ng::Vec;\n \n // Iota-reduction is a rule in the Calculus of (Co-)Inductive Constructions,\n // which \"says that a destructor applied to an object built from a constructor"}, {"sha": "e02be3493e37cf47261e0099eff38c5614ba3bf6", "filename": "src/test/run-pass/nullable-pointer-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnullable-pointer-size.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(macro_rules)];\n \n use std::mem;\n-use std::vec_ng::Vec;\n \n enum E<T> { Thing(int, T), Nothing((), ((), ()), [i8, ..0]) }\n struct S<T>(int, T);"}, {"sha": "eefd8215eb4bcf92212c680161c693f5695e9ae5", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-header.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-header.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n // Test invoked `&self` methods on owned objects where the values\n // closed over contain managed values. This implies that the ~ boxes"}, {"sha": "bd4a933205cf19b6d456e9359d5f7ab4d676a9c0", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n // closed over do not contain managed values, and thus the ~ boxes do\n // not have headers.\n \n-use std::vec_ng::Vec;\n \n trait FooTrait {\n     fn foo(&self) -> uint;"}, {"sha": "865e1cc601b3960805db16e921f3ecdaba79e882", "filename": "src/test/run-pass/overload-index-operator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverload-index-operator.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -12,7 +12,6 @@\n // takes its argument *by reference*.\n \n use std::ops::Index;\n-use std::vec_ng::Vec;\n \n struct AssociationList<K,V> {\n     pairs: Vec<AssociationPair<K,V>> }"}, {"sha": "aa9a66daed7918cb2b1ff485ea9e6dc5104afd14", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n use std::cell::RefCell;\n use std::rc::Rc;\n-use std::vec_ng::Vec;\n \n #[deriving(Eq, Show)]\n struct Point {"}, {"sha": "b297fc7e13f77b232905f5d37942374673acd9d3", "filename": "src/test/run-pass/packed-struct-generic-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-generic-size.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::mem;\n-use std::vec_ng::Vec;\n \n #[packed]\n struct S<T, S> {"}, {"sha": "ef569af135044d75f3b056301b40aeb303582173", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // Check that functions can modify local state.\n \n-use std::vec_ng::Vec;\n \n fn sums_to(v: Vec<int> , sum: int) -> bool {\n     let mut i = 0u;"}, {"sha": "aad281dbeb65e0b8b29376a7a4dbf264e20ad53c", "filename": "src/test/run-pass/rcvr-borrowed-to-slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frcvr-borrowed-to-slice.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n trait sum {\n     fn sum_(self) -> int;\n@@ -30,7 +29,7 @@ pub fn main() {\n     assert_eq!(y, 6);\n \n     let x = vec!(1, 2, 3);\n-    let y = x..as_slice().sum_();\n+    let y = x.as_slice().sum_();\n     println!(\"y=={}\", y);\n     assert_eq!(y, 6);\n "}, {"sha": "36049bc0a18b0cbe6ab7afae634d92ef8a0d19d8", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n #[feature(managed_boxes)];\n \n use std::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n-use std::vec_ng::Vec;\n \n struct MyVisitor {\n     types: Vec<~str> ,"}, {"sha": "f5d46d4ce7c2b221a5c8b9315eb3c68713461a96", "filename": "src/test/run-pass/regions-borrow-evec-uniq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-evec-uniq.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn foo(x: &[int]) -> int {\n     x[0]"}, {"sha": "256d12ccddf78959d915612346c92683027d09cf", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n // Test lifetimes are linked properly when we create dependent region pointers.\n // Issue #3148.\n \n-use std::vec_ng::Vec;\n \n struct A {\n     value: B"}, {"sha": "2cee2ac58b39c4d22fb62d6c1172ae45fcc394e1", "filename": "src/test/run-pass/regions-dependent-autoslice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-autoslice.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n // Test lifetimes are linked properly when we autoslice a vector.\n // Issue #3148.\n \n-use std::vec_ng::Vec;\n \n fn subslice1<'r>(v: &'r [uint]) -> &'r [uint] { v }\n "}, {"sha": "1342c2e77f28f88c9fc9eb89ef5f1f7c6d59ff34", "filename": "src/test/run-pass/regions-infer-borrow-scope-view.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-view.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn view<'r, T>(x: &'r [T]) -> &'r [T] {x}\n "}, {"sha": "7c87c858d42a734f0ec7f04c9dfa2b8236ad2c47", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -24,7 +24,6 @@ use collections::HashMap;\n use std::cast;\n use std::libc;\n use std::mem;\n-use std::vec_ng::Vec;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n "}, {"sha": "da956dc6cdba3c520082a571dd65ab9c3d894ec7", "filename": "src/test/run-pass/seq-compare.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fseq-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fseq-compare.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     assert!((~\"hello\" < ~\"hellr\"));"}, {"sha": "a6ae21c81f1948b7043962a6b44815dff2286199", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n fn foo(c: Vec<int> ) {\n     let a: int = 5;"}, {"sha": "d2ee91e227003c9e47eef6f94020e204ac6baba6", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -15,7 +15,6 @@\n // interior record which is then itself interior to\n // something else, shape calculations were off.\n \n-use std::vec_ng::Vec;\n \n #[deriving(Clone)]\n enum opt_span {"}, {"sha": "c91b16c9ca02a3de64ba87ff7c7fe8c22587c10b", "filename": "src/test/run-pass/size-and-align.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fsize-and-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsize-and-align.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n enum clam<T> { a(T, int), b, }\n "}, {"sha": "ae547d417f007b03e36015f345b7ab5687a3c495", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n pub trait plus {\n     fn plus(&self) -> int;"}, {"sha": "7789fe5abb42edac56bf8a047402821e4221bd60", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,11 +9,10 @@\n // except according to those terms.\n \n use std::mem::swap;\n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let mut a: Vec<int> = vec!(0, 1, 2, 3, 4, 5, 6);\n-    a.swap(2, 4);\n+    a.as_mut_slice().swap(2, 4);\n     assert_eq!(*a.get(2), 4);\n     assert_eq!(*a.get(4), 2);\n     let mut n = 42;"}, {"sha": "d4a51199edaaa960aea84312f1d5a9f15c12ab9e", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::cmp;\n-use std::vec_ng::Vec;\n \n // Tests of ports and channels on various types\n fn test_rec() {"}, {"sha": "a239a2de78aa264e5d0c6440188de2bfcca2b2d7", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -11,7 +11,6 @@\n // ignore-fast\n \n use std::task;\n-use std::vec_ng::Vec;\n \n pub fn main() { println!(\"===== WITHOUT THREADS =====\"); test00(); }\n "}, {"sha": "338e06ba25a9e0e731fb7af3256320cc0847f82d", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -19,7 +19,6 @@ extern crate sync;\n \n use sync::Arc;\n use std::task;\n-use std::vec_ng::Vec;\n \n trait Pet {\n     fn name(&self, blk: |&str|);"}, {"sha": "a2c945436d30f2248cd5a0db3db57cc5cec4537c", "filename": "src/test/run-pass/trait-generic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-generic.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n trait to_str {\n     fn to_string(&self) -> ~str;"}, {"sha": "4bb217920f86239528b272bead51d5f2ff8b736b", "filename": "src/test/run-pass/trait-to-str.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-to-str.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n // ignore-fast\n \n-use std::vec_ng::Vec;\n \n trait to_str {\n     fn to_string(&self) -> ~str;"}, {"sha": "5bf1a72dc6b2aa70daacac6d1125aeed0d6c9fe7", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n struct S<T> {\n     a: T,"}, {"sha": "4971a42be3062906d32eb703ac8277830979020b", "filename": "src/test/run-pass/unique-autoderef-index.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-index.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let i = ~vec!(100);"}, {"sha": "c14af83ad87b2a5a1db6d68857be0476a4093cb5", "filename": "src/test/run-pass/unique-in-vec-copy.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-in-vec-copy.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let mut a = vec!(~10);"}, {"sha": "cac2619f35c5773596d3966a42a799686202c6da", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use std::str;\n-use std::vec_ng::Vec;\n \n pub fn main() {\n     // Chars of 1, 2, 3, and 4 bytes"}, {"sha": "84900a4453eed7aa180fcb335d15b6b7c052a2aa", "filename": "src/test/run-pass/vec-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-concat.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     let a: Vec<int> = vec!(1, 2, 3, 4, 5);\n     let b: Vec<int> = vec!(6, 7, 8, 9, 0);\n     let v: Vec<int> = vec::append(a, b.as_slice());\n-    println!(\"{}\", v[9]);\n+    println!(\"{}\", *v.get(9));\n     assert_eq!(*v.get(0), 1);\n     assert_eq!(*v.get(7), 8);\n     assert_eq!(*v.get(9), 0);"}, {"sha": "007ed9ae85eda556521136564f76768c6ac984c5", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,7 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n struct Pair { x: int, y: int }\n "}, {"sha": "ba51c49fac200afd9016e9c87b8ea6610d2954e0", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let mut v = vec!(1);"}, {"sha": "118095b6c9a2349765ee1d62b9729fe31a063e83", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let mut later: Vec<int> ;"}, {"sha": "222ab8989319a8485333e677bb7313fa65eeee5a", "filename": "src/test/run-pass/vec-self-append.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af79a5aa7da4f42fc0939a19f46fa73b894d6e9a/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=af79a5aa7da4f42fc0939a19f46fa73b894d6e9a", "patch": "@@ -1,56 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-fn test_heap_to_heap() {\n-    // a spills onto the heap\n-    let mut a = vec!(0, 1, 2, 3, 4);\n-    a = a + a; // FIXME(#3387)---can't write a += a\n-    assert_eq!(a.len(), 10u);\n-    assert_eq!(a[0], 0);\n-    assert_eq!(a[1], 1);\n-    assert_eq!(a[2], 2);\n-    assert_eq!(a[3], 3);\n-    assert_eq!(a[4], 4);\n-    assert_eq!(a[5], 0);\n-    assert_eq!(a[6], 1);\n-    assert_eq!(a[7], 2);\n-    assert_eq!(a[8], 3);\n-    assert_eq!(a[9], 4);\n-}\n-\n-fn test_stack_to_heap() {\n-    // a is entirely on the stack\n-    let mut a = vec!(0, 1, 2);\n-    // a spills to the heap\n-    a = a + a; // FIXME(#3387)---can't write a += a\n-    assert_eq!(a.len(), 6u);\n-    assert_eq!(a[0], 0);\n-    assert_eq!(a[1], 1);\n-    assert_eq!(a[2], 2);\n-    assert_eq!(a[3], 0);\n-    assert_eq!(a[4], 1);\n-    assert_eq!(a[5], 2);\n-}\n-\n-fn test_loop() {\n-    // Make sure we properly handle repeated self-appends.\n-    let mut a: Vec<int> = vec!(0);\n-    let mut i = 20;\n-    let mut expected_len = 1u;\n-    while i > 0 {\n-        println!(\"{}\", a.len());\n-        assert_eq!(a.len(), expected_len);\n-        a = a + a; // FIXME(#3387)---can't write a += a\n-        i -= 1;\n-        expected_len *= 2u;\n-    }\n-}\n-\n-pub fn main() { test_heap_to_heap(); test_stack_to_heap(); test_loop(); }"}, {"sha": "c5031a6e51fa3254dcf90e6d431cc12daceaea40", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let v: Vec<int> = vec!(10, 20);"}, {"sha": "ec476a522e08d2142f12d58412bb07f9745e76aa", "filename": "src/test/run-pass/vector-no-ann-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-no-ann-2.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -10,6 +10,5 @@\n \n #[feature(managed_boxes)];\n \n-use std::vec_ng::Vec;\n \n pub fn main() { let _quux: @Vec<uint> = @Vec::new(); }"}, {"sha": "a7328267541ab9b7c47bef68edbf3a7b5b7ef106", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d778ff61058a18978a0c24d61f6a84e57138fa4/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=6d778ff61058a18978a0c24d61f6a84e57138fa4", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::vec_ng::Vec;\n \n pub fn main() {\n     let mut i: int = 90;"}]}