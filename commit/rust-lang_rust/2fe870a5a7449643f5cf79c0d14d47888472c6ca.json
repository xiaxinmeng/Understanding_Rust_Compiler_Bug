{"sha": "2fe870a5a7449643f5cf79c0d14d47888472c6ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZTg3MGE1YTc0NDk2NDNmNWNmNzljMGQxNGQ0Nzg4ODQ3MmM2Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T19:46:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-07-20T19:46:46Z"}, "message": "Auto merge of #26831 - arielb1:lifetime-fixes, r=nikomatsakis\n\nr? @nikomatsakis", "tree": {"sha": "62e797f52c874ed23a2e2804c80d76616e842bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62e797f52c874ed23a2e2804c80d76616e842bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fe870a5a7449643f5cf79c0d14d47888472c6ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fe870a5a7449643f5cf79c0d14d47888472c6ca", "html_url": "https://github.com/rust-lang/rust/commit/2fe870a5a7449643f5cf79c0d14d47888472c6ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fe870a5a7449643f5cf79c0d14d47888472c6ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47265bbf37385a087235a8c5eddea5944ae6465e", "url": "https://api.github.com/repos/rust-lang/rust/commits/47265bbf37385a087235a8c5eddea5944ae6465e", "html_url": "https://github.com/rust-lang/rust/commit/47265bbf37385a087235a8c5eddea5944ae6465e"}, {"sha": "28ce509d3c0b3302e514d5835c43befaed6f449c", "url": "https://api.github.com/repos/rust-lang/rust/commits/28ce509d3c0b3302e514d5835c43befaed6f449c", "html_url": "https://github.com/rust-lang/rust/commit/28ce509d3c0b3302e514d5835c43befaed6f449c"}], "stats": {"total": 148, "additions": 118, "deletions": 30}, "files": [{"sha": "d902cb07494e3a1f7c10a7433d3816dc5e2fef40", "filename": "src/librustc/middle/free_region.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc%2Fmiddle%2Ffree_region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffree_region.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -13,18 +13,21 @@\n use middle::implicator::Implication;\n use middle::ty::{self, FreeRegion};\n use util::common::can_reach;\n-use util::nodemap::FnvHashMap;\n+use util::nodemap::{FnvHashMap, FnvHashSet};\n \n #[derive(Clone)]\n pub struct FreeRegionMap {\n-    /// `free_region_map` maps from a free region `a` to a list of\n+    /// `map` maps from a free region `a` to a list of\n     /// free regions `bs` such that `a <= b for all b in bs`\n     map: FnvHashMap<FreeRegion, Vec<FreeRegion>>,\n+    /// regions that are required to outlive (and therefore be\n+    /// equal to) 'static.\n+    statics: FnvHashSet<FreeRegion>\n }\n \n impl FreeRegionMap {\n     pub fn new() -> FreeRegionMap {\n-        FreeRegionMap { map: FnvHashMap() }\n+        FreeRegionMap { map: FnvHashMap(), statics: FnvHashSet() }\n     }\n \n     pub fn relate_free_regions_from_implications<'tcx>(&mut self,\n@@ -59,6 +62,8 @@ impl FreeRegionMap {\n                 }\n                 ty::Predicate::RegionOutlives(ty::Binder(ty::OutlivesPredicate(r_a, r_b))) => {\n                     match (r_a, r_b) {\n+                        (ty::ReStatic, ty::ReFree(_)) => {},\n+                        (ty::ReFree(fr_a), ty::ReStatic) => self.relate_to_static(fr_a),\n                         (ty::ReFree(fr_a), ty::ReFree(fr_b)) => {\n                             // Record that `'a:'b`. Or, put another way, `'b <= 'a`.\n                             self.relate_free_regions(fr_b, fr_a);\n@@ -76,8 +81,12 @@ impl FreeRegionMap {\n         }\n     }\n \n-    pub fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) {\n-        let mut sups = self.map.entry(sub).or_insert(Vec::new());\n+    fn relate_to_static(&mut self, sup: FreeRegion) {\n+        self.statics.insert(sup);\n+    }\n+\n+    fn relate_free_regions(&mut self, sub: FreeRegion, sup: FreeRegion) {\n+       let mut sups = self.map.entry(sub).or_insert(Vec::new());\n         if !sups.contains(&sup) {\n             sups.push(sup);\n         }\n@@ -88,7 +97,7 @@ impl FreeRegionMap {\n     /// it is possible that `sub != sup` and `sub <= sup` and `sup <= sub`\n     /// (that is, the user can give two different names to the same lifetime).\n     pub fn sub_free_region(&self, sub: FreeRegion, sup: FreeRegion) -> bool {\n-        can_reach(&self.map, sub, sup)\n+        can_reach(&self.map, sub, sup) || self.is_static(&sup)\n     }\n \n     /// Determines whether one region is a subregion of another.  This is intended to run *after\n@@ -116,10 +125,17 @@ impl FreeRegionMap {\n                 (ty::ReFree(sub_fr), ty::ReFree(super_fr)) =>\n                     self.sub_free_region(sub_fr, super_fr),\n \n+                (ty::ReStatic, ty::ReFree(ref sup_fr)) => self.is_static(sup_fr),\n+\n                 _ =>\n                     false,\n             }\n         }\n     }\n-}\n \n+    /// Determines whether this free-region is required to be 'static\n+    pub fn is_static(&self, super_region: &ty::FreeRegion) -> bool {\n+        debug!(\"is_static(super_region={:?})\", super_region);\n+        self.statics.iter().any(|s| can_reach(&self.map, *s, *super_region))\n+    }\n+}"}, {"sha": "4b62c7beab00270b8352582addc8f1ceb59a330e", "filename": "src/librustc/middle/infer/region_inference/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fregion_inference%2Fmod.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -869,7 +869,8 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n                 // is the scope `s_id`.  Otherwise, as we do not know\n                 // big the free region is precisely, the GLB is undefined.\n                 let fr_scope = fr.scope.to_code_extent();\n-                if self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) == fr_scope {\n+                if self.tcx.region_maps.nearest_common_ancestor(fr_scope, s_id) == fr_scope ||\n+                        free_regions.is_static(fr) {\n                     Ok(s)\n                 } else {\n                     Err(TypeError::RegionsNoOverlap(b, a))"}, {"sha": "7280c13bc5d75f67ead78f56ec78ea34895cfe4f", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -905,11 +905,13 @@ pub fn fulfill_obligation<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     let vtable = selection.map(|predicate| {\n         fulfill_cx.register_predicate_obligation(&infcx, predicate);\n     });\n-    let vtable = drain_fulfillment_cx_or_panic(span, &infcx, &mut fulfill_cx, &vtable);\n+    let vtable = erase_regions(tcx,\n+        &drain_fulfillment_cx_or_panic(span, &infcx, &mut fulfill_cx, &vtable)\n+    );\n \n-    info!(\"Cache miss: {:?}\", trait_ref);\n-    ccx.trait_cache().borrow_mut().insert(trait_ref,\n-                                          vtable.clone());\n+    info!(\"Cache miss: {:?} => {:?}\", trait_ref, vtable);\n+\n+    ccx.trait_cache().borrow_mut().insert(trait_ref, vtable.clone());\n \n     vtable\n }"}, {"sha": "07af1aa64ae9c0328d1708bbab20ee4199b35bbd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -1112,7 +1112,7 @@ fn report_ambiguous_associated_type(tcx: &ty::ctxt,\n // any ambiguity.\n fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n                                    ty_param_node_id: ast::NodeId,\n-                                   ty_param_name: Option<ast::Name>,\n+                                   ty_param_name: ast::Name,\n                                    assoc_name: ast::Name,\n                                    span: Span)\n                                    -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n@@ -1138,21 +1138,11 @@ fn find_bound_for_assoc_item<'tcx>(this: &AstConv<'tcx>,\n         .filter(|b| this.trait_defines_associated_type_named(b.def_id(), assoc_name))\n         .collect();\n \n-    if let Some(s) = ty_param_name {\n-        // borrowck doesn't like this any other way\n-        one_bound_for_assoc_type(tcx,\n-                                 suitable_bounds,\n-                                 &token::get_name(s),\n-                                 &token::get_name(assoc_name),\n-                                 span)\n-    } else {\n-        one_bound_for_assoc_type(tcx,\n-                                 suitable_bounds,\n-                                 \"Self\",\n-                                 &token::get_name(assoc_name),\n-                                 span)\n-\n-    }\n+    one_bound_for_assoc_type(tcx,\n+                             suitable_bounds,\n+                             &token::get_name(ty_param_name),\n+                             &token::get_name(assoc_name),\n+                             span)\n }\n \n \n@@ -1251,7 +1241,11 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n         }\n         (&ty::TyParam(_), def::DefSelfTy(Some(trait_did),  None)) => {\n             assert_eq!(trait_did.krate, ast::LOCAL_CRATE);\n-            match find_bound_for_assoc_item(this, trait_did.node, None, assoc_name, span) {\n+            match find_bound_for_assoc_item(this,\n+                                            trait_did.node,\n+                                            token::special_idents::type_self.name,\n+                                            assoc_name,\n+                                            span) {\n                 Ok(bound) => bound,\n                 Err(ErrorReported) => return (tcx.types.err, ty_path_def),\n             }\n@@ -1260,7 +1254,7 @@ fn associated_path_def_to_ty<'tcx>(this: &AstConv<'tcx>,\n             assert_eq!(param_did.krate, ast::LOCAL_CRATE);\n             match find_bound_for_assoc_item(this,\n                                             param_did.node,\n-                                            Some(param_name),\n+                                            param_name,\n                                             assoc_name,\n                                             span) {\n                 Ok(bound) => bound,"}, {"sha": "297b6a866da3a0b30b41ab5de2534fd6d96d5d9a", "filename": "src/test/compile-fail/regions-static-bound.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-static-bound.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n+    where 'a: 'static { t }\n+fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n+    where 'a: 'b, 'b: 'static { t }\n+fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n+    t //~ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn error(u: &(), v: &()) {\n+    static_id(&u); //~ ERROR cannot infer an appropriate lifetime\n+    static_id_indirect(&v); //~ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {}"}, {"sha": "854340b0eae29ac9abb9de945de635f85110073b", "filename": "src/test/run-pass/issue-26802.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Frun-pass%2Fissue-26802.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Frun-pass%2Fissue-26802.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-26802.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo<'a> {\n+    fn bar<'b>(&self, x: &'b u8) -> u8 where 'a: 'b { *x+7 }\n+}\n+\n+pub struct FooBar;\n+impl Foo<'static> for FooBar {}\n+fn test(foobar: FooBar) -> Box<Foo<'static>> {\n+    Box::new(foobar)\n+}\n+\n+fn main() {\n+    assert_eq!(test(FooBar).bar(&4), 11);\n+}"}, {"sha": "1c6411e3b8f11dd18aea9dcf7667b90eafc352dc", "filename": "src/test/run-pass/regions-static-bound.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Frun-pass%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fe870a5a7449643f5cf79c0d14d47888472c6ca/src%2Ftest%2Frun-pass%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-static-bound.rs?ref=2fe870a5a7449643f5cf79c0d14d47888472c6ca", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn invariant_id<'a,'b>(t: &'b mut &'static ()) -> &'b mut &'a ()\n+    where 'a: 'static { t }\n+fn static_id<'a>(t: &'a ()) -> &'static ()\n+    where 'a: 'static { t }\n+fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n+    where 'a: 'b, 'b: 'static { t }\n+fn ref_id<'a>(t: &'a ()) -> &'a () where 'static: 'a { t }\n+\n+static UNIT: () = ();\n+\n+fn main()\n+{\n+    let mut val : &'static () = &UNIT;\n+    invariant_id(&mut val);\n+    static_id(val);\n+    static_id_indirect(val);\n+    ref_id(val);\n+}"}]}