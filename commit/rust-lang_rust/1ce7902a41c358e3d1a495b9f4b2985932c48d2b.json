{"sha": "1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjZTc5MDJhNDFjMzU4ZTNkMWE0OTViOWY0YjI5ODU5MzJjNDhkMmI=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-24T21:45:02Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2012-08-25T05:56:05Z"}, "message": "Add a Buildable interface for constructing general sequences. Work on #2921.", "tree": {"sha": "ca58fdd5b311573e5a15c65fa96fb1434f8676d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca58fdd5b311573e5a15c65fa96fb1434f8676d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "html_url": "https://github.com/rust-lang/rust/commit/1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c87e9a5815ba4084ca2419eb39786b9bf6d45319", "url": "https://api.github.com/repos/rust-lang/rust/commits/c87e9a5815ba4084ca2419eb39786b9bf6d45319", "html_url": "https://github.com/rust-lang/rust/commit/c87e9a5815ba4084ca2419eb39786b9bf6d45319"}], "stats": {"total": 134, "additions": 125, "deletions": 9}, "files": [{"sha": "a161cc8d6f7e922468ab8993882a0aa59b1f3b87", "filename": "src/libcore/at_vec.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fat_vec.rs?ref=1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "patch": "@@ -24,9 +24,6 @@ extern mod rusti {\n     fn move_val_init<T>(&dst: T, -src: T);\n }\n \n-/// A function used to initialize the elements of a vector\n-type InitOp<T> = fn(uint) -> T;\n-\n /// Returns the number of elements the vector can hold without reallocating\n #[inline(always)]\n pure fn capacity<T>(&&v: @[const T]) -> uint {\n@@ -115,7 +112,7 @@ pure fn map<T, U>(v: &[T], f: fn(T) -> U) -> @[U] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n-pure fn from_fn<T>(n_elts: uint, op: InitOp<T>) -> @[T] {\n+pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> @[T] {\n     do build_sized(n_elts) |push| {\n         let mut i: uint = 0u;\n         while i < n_elts { push(op(i)); i += 1u; }"}, {"sha": "3606f826b0e970c96249def96318fdf1097e12b2", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "patch": "@@ -1,3 +1,6 @@\n+/// A function used to initialize the elements of a sequence\n+type InitOp<T> = fn(uint) -> T;\n+\n trait BaseIter<A> {\n     pure fn each(blk: fn(A) -> bool);\n     pure fn size_hint() -> option<uint>;\n@@ -29,6 +32,26 @@ trait CopyableIter<A:copy> {\n     pure fn find(p: fn(A) -> bool) -> option<A>;\n }\n \n+// A trait for sequences that can be by imperatively pushing elements\n+// onto them.\n+trait Buildable<A> {\n+    /**\n+     * Builds a buildable sequence by calling a provided function with\n+     * an argument function that pushes an element onto the back of\n+     * the sequence.\n+     * This version takes an initial size for the sequence.\n+     *\n+     * # Arguments\n+     *\n+     * * size - A hint for an initial size of the sequence\n+     * * builder - A function that will construct the sequence. It recieves\n+     *             as an argument a function that will push an element\n+     *             onto the sequence being constructed.\n+     */\n+     static pure fn build_sized(size: uint,\n+                                builder: fn(push: pure fn(+A))) -> self;\n+}\n+\n pure fn eachi<A,IA:BaseIter<A>>(self: IA, blk: fn(uint, A) -> bool) {\n     let mut i = 0u;\n     for self.each |a| {\n@@ -172,6 +195,105 @@ pure fn find<A: copy,IA:BaseIter<A>>(self: IA,\n     return none;\n }\n \n+// Some functions for just building\n+\n+/**\n+ * Builds a sequence by calling a provided function with an argument\n+ * function that pushes an element to the back of a sequence.\n+ *\n+ * # Arguments\n+ *\n+ * * builder - A function that will construct the sequence. It recieves\n+ *             as an argument a function that will push an element\n+ *             onto the sequence being constructed.\n+ */\n+#[inline(always)]\n+pure fn build<A,B: Buildable<A>>(builder: fn(push: pure fn(+A))) -> B {\n+    build_sized(4, builder)\n+}\n+\n+/**\n+ * Builds a sequence by calling a provided function with an argument\n+ * function that pushes an element to the back of a sequence.\n+ * This version takes an initial size for the sequence.\n+ *\n+ * # Arguments\n+ *\n+ * * size - An option, maybe containing initial size of the sequence\n+ *          to reserve\n+ * * builder - A function that will construct the sequence. It recieves\n+ *             as an argument a function that will push an element\n+ *             onto the sequence being constructed.\n+ */\n+#[inline(always)]\n+pure fn build_sized_opt<A,B: Buildable<A>>(\n+    size: option<uint>,\n+    builder: fn(push: pure fn(+A))) -> B {\n+\n+    build_sized(size.get_default(4), builder)\n+}\n+\n+// Functions that combine iteration and building\n+\n+/// Apply a function to each element of an iterable and return the results\n+fn map<T,IT: BaseIter<T>,U,BU: Buildable<U>>(v: IT, f: fn(T) -> U) -> BU {\n+    do build_sized_opt(v.size_hint()) |push| {\n+        for v.each() |elem| {\n+            push(f(elem));\n+        }\n+    }\n+}\n+\n+/**\n+ * Creates and initializes a generic sequence from a function\n+ *\n+ * Creates a generic sequence of size `n_elts` and initializes the elements\n+ * to the value returned by the function `op`.\n+ */\n+pure fn from_fn<T,BT: Buildable<T>>(n_elts: uint, op: InitOp<T>) -> BT {\n+    do build_sized(n_elts) |push| {\n+        let mut i: uint = 0u;\n+        while i < n_elts { push(op(i)); i += 1u; }\n+    }\n+}\n+\n+/**\n+ * Creates and initializes a generic sequence with some element\n+ *\n+ * Creates an immutable vector of size `n_elts` and initializes the elements\n+ * to the value `t`.\n+ */\n+pure fn from_elem<T: copy,BT: Buildable<T>>(n_elts: uint, t: T) -> BT {\n+    do build_sized(n_elts) |push| {\n+        let mut i: uint = 0u;\n+        while i < n_elts { push(t); i += 1u; }\n+    }\n+}\n+\n+/// Appending two generic sequences\n+#[inline(always)]\n+pure fn append<T: copy,IT: BaseIter<T>,BT: Buildable<T>>(\n+    lhs: IT, rhs: IT) -> BT {\n+    let size_opt = lhs.size_hint().chain(\n+        |sz1| rhs.size_hint().map(|sz2| sz1+sz2));\n+    do build_sized_opt(size_opt) |push| {\n+        for lhs.each |x| { push(x); }\n+        for rhs.each |x| { push(x); }\n+    }\n+}\n+\n+/// Copies a generic sequence, possibly converting it to a different\n+/// type of sequence.\n+#[inline(always)]\n+pure fn copy_seq<T: copy,IT: BaseIter<T>,BT: Buildable<T>>(\n+    v: IT) -> BT {\n+    do build_sized_opt(v.size_hint()) |push| {\n+        for v.each |x| { push(x); }\n+    }\n+}\n+\n+\n+\n /*\n #[test]\n fn test_enumerate() {"}, {"sha": "cbbaf3f73ab5aeb4d6a6d1f7ab96659be0d4f565", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce7902a41c358e3d1a495b9f4b2985932c48d2b/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=1ce7902a41c358e3d1a495b9f4b2985932c48d2b", "patch": "@@ -110,9 +110,6 @@ extern mod rusti {\n     fn move_val_init<T>(&dst: T, -src: T);\n }\n \n-/// A function used to initialize the elements of a vector\n-type InitOp/&<T> = fn(uint) -> T;\n-\n /// Returns true if a vector contains no elements\n pure fn is_empty<T>(v: &[const T]) -> bool {\n     as_const_buf(v, |_p, len| len == 0u)\n@@ -188,7 +185,7 @@ pure fn len<T>(&&v: &[const T]) -> uint {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n-pure fn from_fn<T>(n_elts: uint, op: InitOp<T>) -> ~[T] {\n+pure fn from_fn<T>(n_elts: uint, op: iter::InitOp<T>) -> ~[T] {\n     let mut v = ~[];\n     unchecked{reserve(v, n_elts);}\n     let mut i: uint = 0u;\n@@ -679,7 +676,7 @@ fn grow<T: copy>(&v: ~[const T], n: uint, initval: T) {\n  * * init_op - A function to call to retreive each appended element's\n  *             value\n  */\n-fn grow_fn<T>(&v: ~[const T], n: uint, op: InitOp<T>) {\n+fn grow_fn<T>(&v: ~[const T], n: uint, op: iter::InitOp<T>) {\n     reserve_at_least(v, len(v) + n);\n     let mut i: uint = 0u;\n     while i < n { push(v, op(i)); i += 1u; }"}]}