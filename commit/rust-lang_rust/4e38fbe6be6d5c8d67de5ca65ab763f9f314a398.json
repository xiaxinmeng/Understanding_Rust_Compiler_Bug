{"sha": "4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlMzhmYmU2YmU2ZDVjOGQ2N2RlNWNhNjVhYjc2M2Y5ZjMxNGEzOTg=", "commit": {"author": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-25T14:38:27Z"}, "committer": {"name": "JOE1994", "email": "joseph942010@gmail.com", "date": "2020-03-27T12:43:50Z"}, "message": "follow-up2 to review (few issues not resolved yet)", "tree": {"sha": "b570804e967e7c5526211a06ac8ba5e259382d37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b570804e967e7c5526211a06ac8ba5e259382d37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "html_url": "https://github.com/rust-lang/rust/commit/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398/comments", "author": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JOE1994", "id": 10286488, "node_id": "MDQ6VXNlcjEwMjg2NDg4", "avatar_url": "https://avatars.githubusercontent.com/u/10286488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JOE1994", "html_url": "https://github.com/JOE1994", "followers_url": "https://api.github.com/users/JOE1994/followers", "following_url": "https://api.github.com/users/JOE1994/following{/other_user}", "gists_url": "https://api.github.com/users/JOE1994/gists{/gist_id}", "starred_url": "https://api.github.com/users/JOE1994/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JOE1994/subscriptions", "organizations_url": "https://api.github.com/users/JOE1994/orgs", "repos_url": "https://api.github.com/users/JOE1994/repos", "events_url": "https://api.github.com/users/JOE1994/events{/privacy}", "received_events_url": "https://api.github.com/users/JOE1994/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2051805e957d307f7f084172b61cf0a6d69edfc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2051805e957d307f7f084172b61cf0a6d69edfc9", "html_url": "https://github.com/rust-lang/rust/commit/2051805e957d307f7f084172b61cf0a6d69edfc9"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "cc7c305596dc6e2fee042f2dd545812f46ac8652", "filename": "src/shims/env.rs", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "patch": "@@ -1,9 +1,6 @@\n-#![allow(non_snake_case)]\n-\n use std::ffi::{OsString, OsStr};\n use std::env;\n use std::convert::TryFrom;\n-use std::collections::hash_map::Values;\n \n use crate::stacked_borrows::Tag;\n use crate::rustc_target::abi::LayoutOf;\n@@ -47,10 +44,6 @@ impl<'tcx> EnvVars<'tcx> {\n         }\n         ecx.update_environ()\n     }\n-\n-    fn values(&self) -> InterpResult<'tcx, Values<'_, OsString, Pointer<Tag>>> {\n-        Ok(self.map.values())\n-    }\n }\n \n fn alloc_env_var_as_c_str<'mir, 'tcx>(\n@@ -115,11 +108,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    #[allow(non_snake_case)]\n     fn GetEnvironmentVariableW(\n         &mut self,\n-        name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName\n-        buf_op: OpTy<'tcx, Tag>, // LPWSTR  lpBuffer\n-        size_op: OpTy<'tcx, Tag>, // DWORD   nSize\n+        name_op: OpTy<'tcx, Tag>, // LPCWSTR\n+        buf_op: OpTy<'tcx, Tag>,  // LPWSTR\n+        size_op: OpTy<'tcx, Tag>, // DWORD\n     ) -> InterpResult<'tcx, u64> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentVariableW\");\n@@ -134,7 +128,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let var_ptr = Scalar::from(var_ptr.offset(Size::from_bytes(name_offset_bytes), this)?);\n \n                 let var_size = u64::try_from(this.read_os_str_from_wide_str(var_ptr)?.len()).unwrap();\n-                // `buf_size` represent size in characters.\n+                // `buf_size` represents the size in characters.\n                 let buf_size = u64::try_from(this.read_scalar(size_op)?.to_u32()?).unwrap();\n                 let return_val = if var_size.checked_add(1).unwrap() > buf_size {\n                     // If lpBuffer is not large enough to hold the data, the return value is the buffer size, in characters,\n@@ -157,31 +151,41 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         })\n     }\n \n+    #[allow(non_snake_case)]\n     fn GetEnvironmentStringsW(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetEnvironmentStringsW\");\n \n         // Info on layout of environment blocks in Windows: \n         // https://docs.microsoft.com/en-us/windows/win32/procthread/environment-variables\n         let mut env_vars = std::ffi::OsString::new();\n-        for &item in this.machine.env_vars.values()? {\n+        for &item in this.machine.env_vars.map.values() {\n             let env_var = this.read_os_str_from_wide_str(Scalar::from(item))?;\n             env_vars.push(env_var);\n             env_vars.push(\"\\0\");\n         }\n         // Allocate environment block & Store environment variables to environment block.\n         // Final null terminator(block terminator) is added by `alloc_os_str_to_wide_str`.\n+        // FIXME: MemoryKind should be `MiMemoryKind::Machine`,\n+        //        but using it results in a Stacked Borrows error when running MIRI on 'tests/run-pass/env.rs'\n+        //        For now, use `MiriMemoryKind::WinHeap` instead.\n         let envblock_ptr = this.alloc_os_str_as_wide_str(&env_vars, MiriMemoryKind::WinHeap.into());\n-\n+        // If the function succeeds, the return value is a pointer to the environment block of the current process.\n         Ok(envblock_ptr.into())\n     }\n \n-    fn FreeEnvironmentStringsW(&mut self, env_block_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, bool> {\n+    #[allow(non_snake_case)]\n+    fn FreeEnvironmentStringsW(&mut self, env_block_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"FreeEnvironmentStringsW\");\n \n         let env_block_ptr = this.read_scalar(env_block_op)?.not_undef()?;\n-        Ok(this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into()).is_ok())\n+        // FIXME: MemoryKind should be `MiMemoryKind::Machine`,\n+        //        but using it results in a Stacked Borrows error when running MIRI on 'tests/run-pass/env.rs'\n+        //        For now, use `MiriMemoryKind::WinHeap` instead.\n+        let result = this.memory.deallocate(this.force_ptr(env_block_ptr)?, None, MiriMemoryKind::WinHeap.into());\n+        // If the function succeeds, the return value is nonzero.\n+        Ok(result.is_ok() as i32)\n     }\n \n     fn setenv(\n@@ -220,10 +224,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n+    #[allow(non_snake_case)]\n     fn SetEnvironmentVariableW(\n         &mut self,\n-        name_op: OpTy<'tcx, Tag>, // LPCWSTR lpName,\n-        value_op: OpTy<'tcx, Tag>, // LPCWSTR lpValue,\n+        name_op: OpTy<'tcx, Tag>,  // LPCWSTR\n+        value_op: OpTy<'tcx, Tag>, // LPCWSTR\n     ) -> InterpResult<'tcx, i32> {\n         let mut this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetEnvironmentVariableW\");\n@@ -233,14 +238,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         if this.is_null(name_ptr)? {\n             // ERROR CODE is not clearly explained in docs.. For now, throw UB instead.\n-            throw_ub_format!(\"Pointer to environment variable name is NULL\");\n+            throw_ub_format!(\"pointer to environment variable name is NULL\");\n         }\n         \n         let name = this.read_os_str_from_wide_str(name_ptr)?;\n         if name.is_empty() {\n-            throw_unsup_format!(\"Environment variable name is an empty string\");\n+            throw_unsup_format!(\"environment variable name is an empty string\");\n         } else if name.to_string_lossy().contains('=') {\n-            throw_unsup_format!(\"Environment variable name contains '='\");\n+            throw_unsup_format!(\"environment variable name contains '='\");\n         } else if this.is_null(value_ptr)? {\n             // Delete environment variable `{name}`\n             if let Some(var) = this.machine.env_vars.map.remove(&name) {"}, {"sha": "a64ef0f1293522f201afcad964b891c9fba99c48", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e38fbe6be6d5c8d67de5ca65ab763f9f314a398/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=4e38fbe6be6d5c8d67de5ca65ab763f9f314a398", "patch": "@@ -34,14 +34,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"GetEnvironmentStringsW\" => {\n                 let result = this.GetEnvironmentStringsW()?;\n-                // If the function succeeds, the return value is a pointer to the environment block of the current process.\n                 this.write_scalar(result, dest)?;\n             }\n \n             \"FreeEnvironmentStringsW\" => {\n                 let result = this.FreeEnvironmentStringsW(args[0])?;\n-                // If the function succeeds, the return value is nonzero.\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             // File related shims"}]}