{"sha": "e10e49d815a0b4cd362e652f9855592b7918e711", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMGU0OWQ4MTVhMGI0Y2QzNjJlNjUyZjk4NTU1OTJiNzkxOGU3MTE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-09T18:51:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-09T18:51:17Z"}, "message": "Rollup merge of #37472 - joshtriplett:doc-fmt-write-io-write, r=brson\n\nDocument convention for using both fmt::Write and io::Write\n\nUsing a trait's methods (like `Write::write_fmt` as used in `writeln!` and other macros) requires importing that trait directly (not just the module containing it).  Both `fmt::Write` and `io::Write` provide compatible `Write::write_fmt` methods, and code can use `writeln!` and other macros on both an object implementing `fmt::Write` (such as a `String`) and an object implementing `io::Write` (such as `Stderr`).  However, importing both `Write` traits produces an error due to the name conflict.\n\nThe convention I've seen renames both of them on import, to `FmtWrite` and `IoWrite` respectively.  Document that convention in the Rust documentation for `write!` and `writeln!`, with examples.", "tree": {"sha": "38ffd64df3a8f3599cd52581e23f3205487af613", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ffd64df3a8f3599cd52581e23f3205487af613"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e10e49d815a0b4cd362e652f9855592b7918e711", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e10e49d815a0b4cd362e652f9855592b7918e711", "html_url": "https://github.com/rust-lang/rust/commit/e10e49d815a0b4cd362e652f9855592b7918e711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e10e49d815a0b4cd362e652f9855592b7918e711/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d712882228c9b2900fcb33a5e171553bd779116e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d712882228c9b2900fcb33a5e171553bd779116e", "html_url": "https://github.com/rust-lang/rust/commit/d712882228c9b2900fcb33a5e171553bd779116e"}, {"sha": "955829cee9a5bc5b07895200df50085225bca9f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/955829cee9a5bc5b07895200df50085225bca9f6", "html_url": "https://github.com/rust-lang/rust/commit/955829cee9a5bc5b07895200df50085225bca9f6"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "3cf32d1a559196d02c8048147beb1b8509528584", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e10e49d815a0b4cd362e652f9855592b7918e711/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e10e49d815a0b4cd362e652f9855592b7918e711/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=e10e49d815a0b4cd362e652f9855592b7918e711", "patch": "@@ -350,6 +350,21 @@ macro_rules! try {\n ///\n /// assert_eq!(w, b\"testformatted arguments\");\n /// ```\n+///\n+/// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n+/// implementing either, as objects do not typically implement both. However, the module must\n+/// import the traits qualified so their names do not conflict:\n+///\n+/// ```\n+/// use std::fmt::Write as FmtWrite;\n+/// use std::io::Write as IoWrite;\n+///\n+/// let mut s = String::new();\n+/// let mut v = Vec::new();\n+/// write!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n+/// write!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n+/// assert_eq!(v, b\"s = \\\"abc 123\\\"\");\n+/// ```\n #[macro_export]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! write {\n@@ -394,6 +409,21 @@ macro_rules! write {\n ///\n /// assert_eq!(&w[..], \"test\\nformatted arguments\\n\".as_bytes());\n /// ```\n+///\n+/// A module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\n+/// implementing either, as objects do not typically implement both. However, the module must\n+/// import the traits qualified so their names do not conflict:\n+///\n+/// ```\n+/// use std::fmt::Write as FmtWrite;\n+/// use std::io::Write as IoWrite;\n+///\n+/// let mut s = String::new();\n+/// let mut v = Vec::new();\n+/// writeln!(&mut s, \"{} {}\", \"abc\", 123).unwrap(); // uses fmt::Write::write_fmt\n+/// writeln!(&mut v, \"s = {:?}\", s).unwrap(); // uses io::Write::write_fmt\n+/// assert_eq!(v, b\"s = \\\"abc 123\\\\n\\\"\\n\");\n+/// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! writeln {"}]}