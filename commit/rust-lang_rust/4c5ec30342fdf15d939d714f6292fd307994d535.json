{"sha": "4c5ec30342fdf15d939d714f6292fd307994d535", "node_id": "C_kwDOAAsO6NoAKDRjNWVjMzAzNDJmZGYxNWQ5MzlkNzE0ZjYyOTJmZDMwNzk5NGQ1MzU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-30T20:44:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-30T20:44:49Z"}, "message": "Inline a few short methods.", "tree": {"sha": "1a0401f38039eb09f2528e75853251f059a4a5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a0401f38039eb09f2528e75853251f059a4a5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5ec30342fdf15d939d714f6292fd307994d535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5ec30342fdf15d939d714f6292fd307994d535", "html_url": "https://github.com/rust-lang/rust/commit/4c5ec30342fdf15d939d714f6292fd307994d535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5ec30342fdf15d939d714f6292fd307994d535/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "905834232bf7da7ae2b282806b9de4f102040d1d", "url": "https://api.github.com/repos/rust-lang/rust/commits/905834232bf7da7ae2b282806b9de4f102040d1d", "html_url": "https://github.com/rust-lang/rust/commit/905834232bf7da7ae2b282806b9de4f102040d1d"}], "stats": {"total": 9, "additions": 9, "deletions": 0}, "files": [{"sha": "127c8b58cc725242cd8fd82608eaa354182d8be9", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c5ec30342fdf15d939d714f6292fd307994d535/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5ec30342fdf15d939d714f6292fd307994d535/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=4c5ec30342fdf15d939d714f6292fd307994d535", "patch": "@@ -146,25 +146,30 @@ impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n }\n \n impl<'hir> Map<'hir> {\n+    #[inline]\n     pub fn krate(self) -> &'hir Crate<'hir> {\n         self.tcx.hir_crate(())\n     }\n \n+    #[inline]\n     pub fn root_module(self) -> &'hir Mod<'hir> {\n         match self.tcx.hir_owner(CRATE_DEF_ID).map(|o| o.node) {\n             Some(OwnerNode::Crate(item)) => item,\n             _ => bug!(),\n         }\n     }\n \n+    #[inline]\n     pub fn items(self) -> impl Iterator<Item = ItemId> + 'hir {\n         self.tcx.hir_crate_items(()).items.iter().copied()\n     }\n \n+    #[inline]\n     pub fn module_items(self, module: LocalDefId) -> impl Iterator<Item = ItemId> + 'hir {\n         self.tcx.hir_module_items(module).items()\n     }\n \n+    #[inline]\n     pub fn par_for_each_item(self, f: impl Fn(ItemId) + Sync + Send) {\n         par_for_each_in(&self.tcx.hir_crate_items(()).items[..], |id| f(*id));\n     }\n@@ -487,10 +492,12 @@ impl<'hir> Map<'hir> {\n     /// Returns an iterator of the `DefId`s for all body-owners in this\n     /// crate. If you would prefer to iterate over the bodies\n     /// themselves, you can do `self.hir().krate().body_ids.iter()`.\n+    #[inline]\n     pub fn body_owners(self) -> impl Iterator<Item = LocalDefId> + 'hir {\n         self.tcx.hir_crate_items(()).body_owners.iter().copied()\n     }\n \n+    #[inline]\n     pub fn par_body_owners(self, f: impl Fn(LocalDefId) + Sync + Send) {\n         par_for_each_in(&self.tcx.hir_crate_items(()).body_owners[..], |&def_id| f(def_id));\n     }\n@@ -632,12 +639,14 @@ impl<'hir> Map<'hir> {\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    #[inline]\n     pub fn parent_iter(self, current_id: HirId) -> ParentHirIterator<'hir> {\n         ParentHirIterator { current_id, map: self }\n     }\n \n     /// Returns an iterator for the nodes in the ancestor tree of the `current_id`\n     /// until the crate root is reached. Prefer this over your own loop using `get_parent_node`.\n+    #[inline]\n     pub fn parent_owner_iter(self, current_id: HirId) -> ParentOwnerIterator<'hir> {\n         ParentOwnerIterator { current_id, map: self }\n     }"}]}