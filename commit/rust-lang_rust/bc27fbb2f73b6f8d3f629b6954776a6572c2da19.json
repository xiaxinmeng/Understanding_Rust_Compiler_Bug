{"sha": "bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "node_id": "C_kwDOAAsO6NoAKGJjMjdmYmIyZjczYjZmOGQzZjYyOWI2OTU0Nzc2YTY1NzJjMmRhMTk", "commit": {"author": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-11T15:54:23Z"}, "committer": {"name": "infrandomness", "email": "infrandomness@gmail.com", "date": "2022-06-11T16:50:36Z"}, "message": "Add `assert_target_os_is_unix` function", "tree": {"sha": "903e37508a569d87e0fa3650d25be0424260312b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/903e37508a569d87e0fa3650d25be0424260312b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "html_url": "https://github.com/rust-lang/rust/commit/bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc27fbb2f73b6f8d3f629b6954776a6572c2da19/comments", "author": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "committer": {"login": "InfRandomness", "id": 43730933, "node_id": "MDQ6VXNlcjQzNzMwOTMz", "avatar_url": "https://avatars.githubusercontent.com/u/43730933?v=4", "gravatar_id": "", "url": "https://api.github.com/users/InfRandomness", "html_url": "https://github.com/InfRandomness", "followers_url": "https://api.github.com/users/InfRandomness/followers", "following_url": "https://api.github.com/users/InfRandomness/following{/other_user}", "gists_url": "https://api.github.com/users/InfRandomness/gists{/gist_id}", "starred_url": "https://api.github.com/users/InfRandomness/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/InfRandomness/subscriptions", "organizations_url": "https://api.github.com/users/InfRandomness/orgs", "repos_url": "https://api.github.com/users/InfRandomness/repos", "events_url": "https://api.github.com/users/InfRandomness/events{/privacy}", "received_events_url": "https://api.github.com/users/InfRandomness/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d00aa6424f64a72b07afed275a49f76e816016", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d00aa6424f64a72b07afed275a49f76e816016", "html_url": "https://github.com/rust-lang/rust/commit/58d00aa6424f64a72b07afed275a49f76e816016"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "134f556bf120456e6933d3ec43909a63a6194cb9", "filename": "src/helpers.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bc27fbb2f73b6f8d3f629b6954776a6572c2da19/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27fbb2f73b6f8d3f629b6954776a6572c2da19/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "patch": "@@ -493,6 +493,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         )\n     }\n \n+    /// Helper function used inside the shims of foreign functions to assert that the target OS\n+    /// is part of the UNIX family. It panics showing a message with the `name` of the foreign function\n+    /// if this is not the case.\n+    fn assert_target_os_is_unix(&self, name: &str) {\n+        assert!(\n+            target_os_is_unix(self.eval_context_ref().tcx.sess.target.os.as_ref()),\n+            \"`{}` is only available for supported UNIX family targets\",\n+            name,\n+        );\n+    }\n+\n     /// Get last error variable as a place, lazily allocating thread-local storage for it if\n     /// necessary.\n     fn last_error_place(&mut self) -> InterpResult<'tcx, MPlaceTy<'tcx, Tag>> {"}, {"sha": "85ecd2b719f207300f271681fae2407c13f84282", "filename": "src/shims/env.rs", "status": "modified", "additions": 6, "deletions": 30, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bc27fbb2f73b6f8d3f629b6954776a6572c2da19/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc27fbb2f73b6f8d3f629b6954776a6572c2da19/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=bc27fbb2f73b6f8d3f629b6954776a6572c2da19", "patch": "@@ -114,11 +114,7 @@ impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mi\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn getenv(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, Pointer<Option<Tag>>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let name = this.read_os_str_from_c_str(name_ptr)?;\n@@ -212,11 +208,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         value_op: &OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`setenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"setenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let value_ptr = this.read_pointer(value_op)?;\n@@ -286,11 +278,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn unsetenv(&mut self, name_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`unsetenv` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"unsetenv\");\n \n         let name_ptr = this.read_pointer(name_op)?;\n         let mut success = None;\n@@ -320,11 +308,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         size_op: &OpTy<'tcx, Tag>,\n     ) -> InterpResult<'tcx, Pointer<Option<Tag>>> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getcwd` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getcwd\");\n \n         let buf = this.read_pointer(buf_op)?;\n         let size = this.read_scalar(size_op)?.to_machine_usize(&*this.tcx)?;\n@@ -379,11 +363,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn chdir(&mut self, path_op: &OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`chdir` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"chdir\");\n \n         let path = this.read_path_from_c_str(this.read_pointer(path_op)?)?;\n \n@@ -469,11 +449,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n     fn getpid(&mut self) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n-        let target_os = &this.tcx.sess.target.os;\n-        assert!(\n-            target_os == \"linux\" || target_os == \"macos\",\n-            \"`getpid` is only available for the UNIX target family\"\n-        );\n+        this.assert_target_os_is_unix(\"getpid\");\n \n         this.check_no_isolation(\"`getpid`\")?;\n "}]}