{"sha": "1fec8c28353321048447465506dc68ab3a6c335e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZWM4YzI4MzUzMzIxMDQ4NDQ3NDY1NTA2ZGM2OGFiM2E2YzMzNWU=", "commit": {"author": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-02-10T16:54:56Z"}, "committer": {"name": "Anthony Ramine", "email": "n.oxyde@gmail.com", "date": "2019-03-04T09:20:40Z"}, "message": "Make the Entry API of HashMap<K, V> Sync and Send (fixes #45219)", "tree": {"sha": "781abfbd6d717039d0b534cc83f37df402fc5f7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/781abfbd6d717039d0b534cc83f37df402fc5f7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fec8c28353321048447465506dc68ab3a6c335e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fec8c28353321048447465506dc68ab3a6c335e", "html_url": "https://github.com/rust-lang/rust/commit/1fec8c28353321048447465506dc68ab3a6c335e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fec8c28353321048447465506dc68ab3a6c335e/comments", "author": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nox", "id": 123095, "node_id": "MDQ6VXNlcjEyMzA5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/123095?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nox", "html_url": "https://github.com/nox", "followers_url": "https://api.github.com/users/nox/followers", "following_url": "https://api.github.com/users/nox/following{/other_user}", "gists_url": "https://api.github.com/users/nox/gists{/gist_id}", "starred_url": "https://api.github.com/users/nox/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nox/subscriptions", "organizations_url": "https://api.github.com/users/nox/orgs", "repos_url": "https://api.github.com/users/nox/repos", "events_url": "https://api.github.com/users/nox/events{/privacy}", "received_events_url": "https://api.github.com/users/nox/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68650cacf23c60ee2f346b27bcefa7c6c31de1e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/68650cacf23c60ee2f346b27bcefa7c6c31de1e4", "html_url": "https://github.com/rust-lang/rust/commit/68650cacf23c60ee2f346b27bcefa7c6c31de1e4"}], "stats": {"total": 11, "additions": 11, "deletions": 0}, "files": [{"sha": "8bd87ff9b6c320786706c71ba60e67575358c8d6", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1fec8c28353321048447465506dc68ab3a6c335e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fec8c28353321048447465506dc68ab3a6c335e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=1fec8c28353321048447465506dc68ab3a6c335e", "patch": "@@ -2339,6 +2339,11 @@ pub struct OccupiedEntry<'a, K: 'a, V: 'a> {\n     elem: FullBucket<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Send, V: 'a + Send> Send for OccupiedEntry<'a, K, V> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for OccupiedEntry<'a, K, V> {}\n+\n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<'a, K: 'a + Debug, V: 'a + Debug> Debug for OccupiedEntry<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -2360,6 +2365,11 @@ pub struct VacantEntry<'a, K: 'a, V: 'a> {\n     elem: VacantEntryState<K, V, &'a mut RawTable<K, V>>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Send, V: 'a + Send> Send for VacantEntry<'a, K, V> {}\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+unsafe impl<'a, K: 'a + Sync, V: 'a + Sync> Sync for VacantEntry<'a, K, V> {}\n+\n #[stable(feature= \"debug_hash_map\", since = \"1.12.0\")]\n impl<'a, K: 'a + Debug, V: 'a> Debug for VacantEntry<'a, K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "fd53bb607f79d46bf7d1d5c18d8e3db769371b8a", "filename": "src/test/run-pass/threads-sendsync/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1fec8c28353321048447465506dc68ab3a6c335e/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fec8c28353321048447465506dc68ab3a6c335e/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads-sendsync%2Fsync-send-iterators-in-libcollections.rs?ref=1fec8c28353321048447465506dc68ab3a6c335e", "patch": "@@ -53,6 +53,7 @@ fn main() {\n     is_sync_send!(BTreeSet::<usize>::new(), union(&BTreeSet::<usize>::new()));\n \n     all_sync_send!(HashMap::<usize, usize>::new(), iter, iter_mut, drain, into_iter, keys, values);\n+    is_sync_send!(HashMap::<usize, usize>::new(), entry(0));\n     all_sync_send!(HashSet::<usize>::new(), iter, drain, into_iter);\n     is_sync_send!(HashSet::<usize>::new(), difference(&HashSet::<usize>::new()));\n     is_sync_send!(HashSet::<usize>::new(), symmetric_difference(&HashSet::<usize>::new()));"}]}