{"sha": "dc07280b087c89506ad7e5f66f4f88b18d06be2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDcyODBiMDg3Yzg5NTA2YWQ3ZTVmNjZmNGY4OGIxOGQwNmJlMmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-22T15:39:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-22T16:58:19Z"}, "message": "make --enforce-mut-vars always on, add mut annotations to remaining files", "tree": {"sha": "1d1ee1e4ebb35fc36a1b10162b949882d12ce943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d1ee1e4ebb35fc36a1b10162b949882d12ce943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc07280b087c89506ad7e5f66f4f88b18d06be2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc07280b087c89506ad7e5f66f4f88b18d06be2e", "html_url": "https://github.com/rust-lang/rust/commit/dc07280b087c89506ad7e5f66f4f88b18d06be2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc07280b087c89506ad7e5f66f4f88b18d06be2e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea6030878ac4cf7709aa7ace00880e88aba2ffb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea6030878ac4cf7709aa7ace00880e88aba2ffb7", "html_url": "https://github.com/rust-lang/rust/commit/ea6030878ac4cf7709aa7ace00880e88aba2ffb7"}], "stats": {"total": 1027, "additions": 519, "deletions": 508}, "files": [{"sha": "74cb13446209722251e6af21aa80010e78bb72a8", "filename": "doc/rust.md", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1003,7 +1003,7 @@ fn iter<T>(seq: [T], f: fn(T)) {\n     for elt: T in seq { f(elt); }\n }\n fn map<T, U>(seq: [T], f: fn(T) -> U) -> [U] {\n-    let acc = [];\n+    let mut acc = [];\n     for elt in seq { acc += [f(elt)]; }\n     acc\n }\n@@ -1104,7 +1104,7 @@ enum animal {\n   cat\n }\n \n-let a: animal = dog;\n+let mut a: animal = dog;\n a = cat;\n ~~~~\n \n@@ -1254,7 +1254,7 @@ not given, and the name is mandatory.\n ~~~~\n impl uint_loops for uint {\n     fn times(f: fn(uint)) {\n-        let i = 0u;\n+        let mut i = 0u;\n         while i < self { f(i); i += 1u; }\n     }\n }\n@@ -1775,7 +1775,7 @@ expression. No allocation or destruction is entailed.\n An example of three different move expressions:\n \n ~~~~~~~~\n-# let x = [mut 0];\n+# let mut x = [mut 0];\n # let a = [mut 0];\n # let b = 0;\n # let y = {mut z: 0};\n@@ -1804,8 +1804,8 @@ expression. No allocation or destruction is entailed.\n An example of three different swap expressions:\n \n ~~~~~~~~\n-# let x = [mut 0];\n-# let a = [mut 0];\n+# let mut x = [mut 0];\n+# let mut a = [mut 0];\n # let i = 0;\n # let y = {mut z: 0};\n # let b = {mut c: 0};\n@@ -1827,7 +1827,7 @@ expression](#unary-copy-expressions). For example, the following two\n expressions have the same effect:\n \n ~~~~\n-# let x = 0;\n+# let mut x = 0;\n # let y = 0;\n \n x = y;\n@@ -2015,7 +2015,7 @@ loop body. If it evaluates to `false`, control exits the loop.\n An example of a simple `while` expression:\n \n ~~~~\n-# let i = 0;\n+# let mut i = 0;\n # let println = io::println;\n \n while i < 10 {\n@@ -2027,7 +2027,7 @@ while i < 10 {\n An example of a `do`-`while` expression:\n \n ~~~~\n-# let i = 0;\n+# let mut i = 0;\n # let println = io::println;\n \n do {\n@@ -2053,7 +2053,7 @@ For example, the following (contrived) function uses a `loop` with a\n \n ~~~~\n fn count() -> bool {\n-  let i = 0;\n+  let mut i = 0;\n   loop {\n     i += 1;\n     if i == 20 { ret true; }\n@@ -2801,7 +2801,7 @@ fn add(x: int, y: int) -> int {\n   ret x + y;\n }\n \n-let x = add(5,7);\n+let mut x = add(5,7);\n \n type binop = fn(int,int) -> int;\n let bo: binop = add;\n@@ -2880,7 +2880,7 @@ has a set of points before and after it in the implied control flow.\n For example, this code:\n \n ~~~~~~~~\n-# let s;\n+# let mut s;\n \n s = \"hello, world\";\n io::println(s);\n@@ -3154,7 +3154,10 @@ A _reference_ references a value outside the frame. It may refer to a\n value allocated in another frame *or* a boxed value in the heap. The\n reference-formation rules ensure that the referent will outlive the reference.\n \n-Local variables are always implicitly mutable.\n+Local variables are immutable unless declared with `let mut`.  The\n+`mut` keyword applies to all local variables declared within that\n+declaration (so `let mut x, y` declares two mutable variables, `x` and\n+`y`).\n \n Local variables are not initialized when allocated; the entire frame worth of\n local variables are allocated at once, on frame-entry, in an uninitialized"}, {"sha": "c803216f0b5839137dac671b5680c12dfd49cb76", "filename": "doc/tutorial.md", "status": "modified", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -26,7 +26,7 @@ a curly-brace language in the tradition of C, C++, and JavaScript.\n \n ~~~~\n fn fac(n: int) -> int {\n-    let result = 1, i = 1;\n+    let mut result = 1, i = 1;\n     while i <= n {\n         result *= i;\n         i += 1;\n@@ -286,16 +286,19 @@ fn this_doesnt(_x: int) {}\n \n ## Variable declaration\n \n-The `let` keyword, as we've seen, introduces a local variable. Global\n-constants can be defined with `const`:\n+The `let` keyword, as we've seen, introduces a local variable. Local\n+variables are immutable by default: `let mut` can be used to introduce\n+a local variable that can be reassigned.  Global constants can be\n+defined with `const`:\n \n ~~~~\n use std;\n const repeat: uint = 5u;\n fn main() {\n-    let count = 0u;\n+    let hi = \"Hi!\";\n+    let mut count = 0u;\n     while count < repeat {\n-        io::println(\"Hi!\");\n+        io::println(hi);\n         count += 1u;\n     }\n }\n@@ -320,7 +323,7 @@ annotation:\n ~~~~\n // The type of this vector will be inferred based on its use.\n let x = [];\n-# x = [3];\n+# vec::map(x, fn&(&&_y:int) -> int { _y });\n // Explicitly say this is a vector of integers.\n let y: [int] = [];\n ~~~~\n@@ -665,7 +668,7 @@ keyword `break` can be used to abort the loop, and `cont` can be used\n to abort the current iteration and continue with the next.\n \n ~~~~\n-let x = 5;\n+let mut x = 5;\n while true {\n     x += x - 3;\n     if x % 5 == 0 { break; }\n@@ -761,7 +764,7 @@ failure otherwise. It is typically used to double-check things that\n *should* hold at a certain point in a program.\n \n ~~~~\n-let x = 100;\n+let mut x = 100;\n while (x > 10) { x -= 10; }\n assert x == 10;\n ~~~~\n@@ -933,7 +936,7 @@ of integers backwards:\n \n ~~~~\n fn for_rev(v: [int], act: fn(int)) {\n-    let i = vec::len(v);\n+    let mut i = vec::len(v);\n     while (i > 0u) {\n         i -= 1u;\n         act(v[i]);\n@@ -1273,7 +1276,7 @@ The `+` operator means concatenation when applied to vector types.\n Growing a vector in Rust is not as inefficient as it looks :\n \n ~~~~\n-let myvec = [], i = 0;\n+let mut myvec = [], i = 0;\n while i < 100 {\n     myvec += [i];\n     i += 1;\n@@ -1376,7 +1379,7 @@ in `main`, so we're good. But the call could also look like this:\n ~~~~\n # fn myfunc(a: int, b: fn()) {}\n # fn get_another_record() -> int { 1 }\n-# let x = 1;\n+# let mut x = 1;\n myfunc(x, {|| x = get_another_record(); });\n ~~~~\n \n@@ -1436,7 +1439,7 @@ very cheap, but you'll occasionally have to copy them to ensure\n safety.\n \n ~~~~\n-let my_rec = {a: 4, b: [1, 2, 3]};\n+let mut my_rec = {a: 4, b: [1, 2, 3]};\n alt my_rec {\n   {a, b} {\n     log(info, b); // This is okay\n@@ -1497,15 +1500,15 @@ Thus, Rust allows functions and datatypes to have type parameters.\n \n ~~~~\n fn for_rev<T>(v: [T], act: fn(T)) {\n-    let i = vec::len(v);\n+    let mut i = vec::len(v);\n     while i > 0u {\n         i -= 1u;\n         act(v[i]);\n     }\n }\n \n fn map<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n-    let acc = [];\n+    let mut acc = [];\n     for elt in v { acc += [f(elt)]; }\n     ret acc;\n }\n@@ -1548,7 +1551,7 @@ programs that just can't be typed.\n \n ~~~~\n let n = option::none;\n-# n = option::some(1);\n+# option::may(n, fn&(&&x:int) {})\n ~~~~\n \n If you never do anything else with `n`, the compiler will not be able\n@@ -1982,7 +1985,7 @@ parameters.\n ~~~~\n # iface to_str { fn to_str() -> str; }\n fn comma_sep<T: to_str>(elts: [T]) -> str {\n-    let result = \"\", first = true;\n+    let mut result = \"\", first = true;\n     for elt in elts {\n         if first { first = false; }\n         else { result += \", \"; }\n@@ -2094,7 +2097,7 @@ to leave off the `of` clause.\n # fn mk_currency(x: int, s: str) {}\n impl int_util for int {\n     fn times(b: fn(int)) {\n-        let i = 0;\n+        let mut i = 0;\n         while i < self { b(i); i += 1; }\n     }\n     fn dollars() -> currency {\n@@ -2450,7 +2453,7 @@ Here is the function which implements the child task:\n ~~~~\n fn stringifier(from_parent: comm::port<uint>,\n                to_parent: comm::chan<str>) {\n-    let value: uint;\n+    let mut value: uint;\n     do {\n         value = comm::recv(from_parent);\n         comm::send(to_parent, uint::to_str(value, 10u));"}, {"sha": "7b3dcab0abd44083310f890296335996434b7973", "filename": "mk/target.mk", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -11,13 +11,6 @@\n USE_SNAPSHOT_RUNTIME=0\n USE_SNAPSHOT_CORELIB=0\n \n-# Do not use --enforce-mut-vars in stage0, for now, as the snapshot\n-# has an older version of the check.\n-ENFORCE_MUT_VARS_0=\n-ENFORCE_MUT_VARS_1=--enforce-mut-vars\n-ENFORCE_MUT_VARS_2=--enforce-mut-vars\n-ENFORCE_MUT_VARS_3=--enforce-mut-vars\n-\n define TARGET_STAGE_N\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/intrinsics.ll: \\\n@@ -41,8 +34,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_STDLIB): \\\n \t        $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(ENFORCE_MUT_VARS_$(1)) \\\n-\t\t-o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n \t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n@@ -53,8 +45,7 @@ $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X):\t\t\t\t\\\n \t\t$$(RUSTC_INPUTS)                                \\\n \t\t$$(TLIBRUSTC_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(ENFORCE_MUT_VARS_$(1)) \\\n-\t\t -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$<\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n \t\t$$(COMPILER_CRATE) $$(COMPILER_INPUTS)\t\t\\\n@@ -63,8 +54,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC):\t\t\\\n \t\t$$(TCORELIB_DEFAULT$(1)_T_$(2)_H_$(3))      \\\n \t\t$$(TSTDLIB_DEFAULT$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(ENFORCE_MUT_VARS_$(1)) \\\n-\t\t-o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n endef\n \n@@ -127,7 +117,7 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_CORELIB): \\\n \t\t$$(CORELIB_CRATE) $$(CORELIB_INPUTS) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --enforce-mut-vars -o $$@ $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< && touch $$@\n \n endef\n "}, {"sha": "d7b1c0df949ff83574664ba59f18769c287959ee", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -93,9 +93,9 @@ fn error(msg: str) {\n fn load_link(mis: [@ast::meta_item]) -> (option<str>,\n                                          option<str>,\n                                          option<str>) {\n-    let name = none;\n-    let vers = none;\n-    let uuid = none;\n+    let mut name = none;\n+    let mut vers = none;\n+    let mut uuid = none;\n     for a: @ast::meta_item in mis {\n         alt a.node {\n             ast::meta_name_value(v, {node: ast::lit_str(s), span: _}) {\n@@ -124,12 +124,12 @@ fn load_pkg(filename: str) -> option<pkg> {\n     };\n     let c = parser::parse_crate_from_crate_file(filename, [], sess);\n \n-    let name = none;\n-    let vers = none;\n-    let uuid = none;\n-    let desc = none;\n-    let sigs = none;\n-    let crate_type = none;\n+    let mut name = none;\n+    let mut vers = none;\n+    let mut uuid = none;\n+    let mut desc = none;\n+    let mut sigs = none;\n+    let mut crate_type = none;\n \n     for a in c.node.attrs {\n         alt a.node.value.node {\n@@ -273,7 +273,7 @@ fn load_one_source_package(&src: source, p: map::hashmap<str, json::json>) {\n         _ { none }\n     };\n \n-    let tags = [];\n+    let mut tags = [];\n     alt p.find(\"tags\") {\n         some(json::list(js)) {\n             for j in js {\n@@ -390,7 +390,7 @@ fn configure(opts: options) -> cargo {\n     let sources = map::str_hash::<source>();\n     try_parse_sources(path::connect(syscargo, \"sources.json\"), sources);\n     try_parse_sources(path::connect(syscargo, \"local-sources.json\"), sources);\n-    let c = {\n+    let mut c = {\n         pgp: pgp::supported(),\n         root: p,\n         bindir: path::connect(p, \"bin\"),\n@@ -408,7 +408,7 @@ fn configure(opts: options) -> cargo {\n     need_dir(c.bindir);\n \n     sources.keys { |k|\n-        let s = sources.get(k);\n+        let mut s = sources.get(k);\n         load_source_packages(c, s);\n         sources.insert(k, s);\n     };\n@@ -597,7 +597,7 @@ fn cargo_suggestion(c: cargo, syncing: bool, fallback: fn())\n         ret;\n     }\n     if !syncing {\n-        let npkg = 0u;\n+        let mut npkg = 0u;\n         c.sources.values({ |v| npkg += vec::len(v.packages) });\n         if npkg == 0u {\n             error(\"No packages known. You may wish to run \" +\n@@ -609,7 +609,7 @@ fn cargo_suggestion(c: cargo, syncing: bool, fallback: fn())\n }\n \n fn install_uuid(c: cargo, wd: str, uuid: str) {\n-    let ps = [];\n+    let mut ps = [];\n     for_each_package(c, { |s, p|\n         info(#fmt[\"%s ? %s\", p.uuid, uuid]);\n         if p.uuid == uuid {\n@@ -631,7 +631,7 @@ fn install_uuid(c: cargo, wd: str, uuid: str) {\n }\n \n fn install_named(c: cargo, wd: str, name: str) {\n-    let ps = [];\n+    let mut ps = [];\n     for_each_package(c, { |s, p|\n         if p.name == name {\n             vec::grow(ps, 1u, (s, p));\n@@ -698,7 +698,7 @@ fn cmd_install(c: cargo) unsafe {\n     };\n \n     if str::starts_with(target, \"uuid:\") {\n-        let uuid = rest(target, 5u);\n+        let mut uuid = rest(target, 5u);\n         alt str::find_char(uuid, '/') {\n             option::some(idx) {\n                let source = str::slice(uuid, 0u, idx);\n@@ -710,7 +710,7 @@ fn cmd_install(c: cargo) unsafe {\n             }\n         }\n     } else {\n-        let name = target;\n+        let mut name = target;\n         alt str::find_char(name, '/') {\n             option::some(idx) {\n                let source = str::slice(name, 0u, idx);\n@@ -820,7 +820,7 @@ fn cmd_init(c: cargo) {\n }\n \n fn print_pkg(s: source, p: package) {\n-    let m = s.name + \"/\" + p.name + \" (\" + p.uuid + \")\";\n+    let mut m = s.name + \"/\" + p.name + \" (\" + p.uuid + \")\";\n     if vec::len(p.tags) > 0u {\n         m = m + \" [\" + str::connect(p.tags, \", \") + \"]\";\n     }\n@@ -842,7 +842,7 @@ fn cmd_search(c: cargo) {\n         cmd_usage();\n         ret;\n     }\n-    let n = 0;\n+    let mut n = 0;\n     let name = c.opts.free[2];\n     let tags = vec::slice(c.opts.free, 3u, vec::len(c.opts.free));\n     for_each_package(c, { |s, p|"}, {"sha": "ed159d6a073b03e2a079b798c37f4ab7af015bef", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -126,7 +126,7 @@ fn test_opts(config: config) -> test::test_opts {\n \n fn make_tests(config: config) -> [test::test_desc] {\n     #debug(\"making tests from %s\", config.src_base);\n-    let tests = [];\n+    let mut tests = [];\n     for file: str in os::list_dir(config.src_base) {\n         let file = file;\n         #debug(\"inspecting file %s\", file);\n@@ -144,7 +144,7 @@ fn is_test(config: config, testfile: str) -> bool {\n     let invalid_prefixes = [\".\", \"#\", \"~\"];\n     let name = path::basename(testfile);\n \n-    let valid = false;\n+    let mut valid = false;\n \n     for ext in valid_extensions {\n         if str::ends_with(name, ext) { valid = true; }"}, {"sha": "1e04eb521094b6b8b02513bc578fb1f95c8e941a", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,9 +9,9 @@ type expected_error = { line: uint, kind: str, msg: str };\n \n // Load any test directives embedded in the file\n fn load_errors(testfile: str) -> [expected_error] {\n-    let error_patterns = [];\n+    let mut error_patterns = [];\n     let rdr = result::get(io::file_reader(testfile));\n-    let line_num = 1u;\n+    let mut line_num = 1u;\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n         error_patterns += parse_expected(line_num, ln);\n@@ -22,15 +22,15 @@ fn load_errors(testfile: str) -> [expected_error] {\n \n fn parse_expected(line_num: uint, line: str) -> [expected_error] unsafe {\n     let error_tag = \"//!\";\n-    let idx;\n+    let mut idx;\n     alt str::find_str(line, error_tag) {\n          option::none { ret []; }\n          option::some(nn) { idx = (nn as uint) + str::len(error_tag); }\n     }\n \n     // \"//!^^^ kind msg\" denotes a message expected\n     // three lines above current line:\n-    let adjust_line = 0u;\n+    let mut adjust_line = 0u;\n     let len = str::len(line);\n     while idx < len && line[idx] == ('^' as u8) {\n         adjust_line += 1u;"}, {"sha": "04abf75894edb9a252692adb6ecc86c6a0e63cc9", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -22,10 +22,10 @@ type test_props = {\n \n // Load any test directives embedded in the file\n fn load_props(testfile: str) -> test_props {\n-    let error_patterns = [];\n-    let aux_builds = [];\n-    let compile_flags = option::none;\n-    let pp_exact = option::none;\n+    let mut error_patterns = [];\n+    let mut aux_builds = [];\n+    let mut compile_flags = option::none;\n+    let mut pp_exact = option::none;\n     iter_header(testfile) {|ln|\n         alt parse_error_pattern(ln) {\n           option::some(ep) { error_patterns += [ep]; }\n@@ -53,7 +53,7 @@ fn load_props(testfile: str) -> test_props {\n }\n \n fn is_test_ignored(config: config, testfile: str) -> bool {\n-    let found = false;\n+    let mut found = false;\n     iter_header(testfile) {|ln|\n         // FIXME: Can't return or break from iterator\n         // (Fix when Issue #1619 is resolved)"}, {"sha": "d9a27b405de613fa01232bda8fa278b727e728c0", "filename": "src/compiletest/procsrv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fprocsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fprocsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fprocsrv.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -60,9 +60,9 @@ fn run(lib_path: str, prog: str, args: [str],\n         comm::send(ch, (1, output));\n     };\n     let status = run::waitpid(pid);\n-    let errs = \"\";\n-    let outs = \"\";\n-    let count = 2;\n+    let mut errs = \"\";\n+    let mut outs = \"\";\n+    let mut count = 2;\n     while count > 0 {\n         let stream = comm::recv(p);\n         alt check stream {\n@@ -91,7 +91,7 @@ fn readclose(fd: c_int) -> str {\n     // Copied from run::program_output\n     let file = os::fdopen(fd);\n     let reader = io::FILE_reader(file, false);\n-    let buf = \"\";\n+    let mut buf = \"\";\n     while !reader.eof() {\n         let bytes = reader.read_bytes(4096u);\n         buf += str::from_bytes(bytes);"}, {"sha": "c81f48a811fc0f3777d063d323c8e6a8bdad35d0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -47,7 +47,7 @@ fn run_cfail_test(config: config, props: test_props, testfile: str) {\n }\n \n fn run_rfail_test(config: config, props: test_props, testfile: str) {\n-    let procres = compile_test(config, props, testfile);\n+    let mut procres = compile_test(config, props, testfile);\n \n     if procres.status != 0 { fatal_procres(\"compilation failed!\", procres); }\n \n@@ -75,7 +75,7 @@ fn check_correct_failure_status(procres: procres) {\n }\n \n fn run_rpass_test(config: config, props: test_props, testfile: str) {\n-    let procres = compile_test(config, props, testfile);\n+    let mut procres = compile_test(config, props, testfile);\n \n     if procres.status != 0 { fatal_procres(\"compilation failed!\", procres); }\n \n@@ -93,9 +93,9 @@ fn run_pretty_test(config: config, props: test_props, testfile: str) {\n     let rounds =\n         alt props.pp_exact { option::some(_) { 1 } option::none { 2 } };\n \n-    let srcs = [result::get(io::read_whole_file_str(testfile))];\n+    let mut srcs = [result::get(io::read_whole_file_str(testfile))];\n \n-    let round = 0;\n+    let mut round = 0;\n     while round < rounds {\n         logv(config, #fmt[\"pretty-printing round %d\", round]);\n         let procres = print_source(config, testfile, srcs[round]);\n@@ -109,15 +109,15 @@ fn run_pretty_test(config: config, props: test_props, testfile: str) {\n         round += 1;\n     }\n \n-    let expected =\n+    let mut expected =\n         alt props.pp_exact {\n           option::some(file) {\n             let filepath = path::connect(path::dirname(testfile), file);\n             result::get(io::read_whole_file_str(filepath))\n           }\n           option::none { srcs[vec::len(srcs) - 2u] }\n         };\n-    let actual = srcs[vec::len(srcs) - 1u];\n+    let mut actual = srcs[vec::len(srcs) - 1u];\n \n     if option::is_some(props.pp_exact) {\n         // Now we have to care about line endings\n@@ -176,7 +176,7 @@ actual:\\n\\\n \n     fn make_typecheck_args(config: config, _testfile: str) -> procargs {\n         let prog = config.rustc_path;\n-        let args = [\"-\", \"--no-trans\", \"--lib\", \"-L\", config.build_base];\n+        let mut args = [\"-\", \"--no-trans\", \"--lib\", \"-L\", config.build_base];\n         args += split_maybe_args(config.rustcflags);\n         ret {prog: prog, args: args};\n     }\n@@ -193,8 +193,8 @@ fn check_error_patterns(props: test_props,\n         fatal(\"process did not return an error status\");\n     }\n \n-    let next_err_idx = 0u;\n-    let next_err_pat = props.error_patterns[next_err_idx];\n+    let mut next_err_idx = 0u;\n+    let mut next_err_pat = props.error_patterns[next_err_idx];\n     for line: str in str::split_char(procres.stderr, '\\n') {\n         if str::contains(line, next_err_pat) {\n             #debug(\"found error pattern %s\", next_err_pat);\n@@ -244,7 +244,7 @@ fn check_expected_errors(expected_errors: [errors::expected_error],\n     // where line1:col1: is the starting point, line2:col2:\n     // is the ending point, and * represents ANSI color codes.\n     for line: str in str::split_char(procres.stderr, '\\n') {\n-        let was_expected = false;\n+        let mut was_expected = false;\n         vec::iteri(expected_errors) {|i, ee|\n             if !found_flags[i] {\n                 #debug[\"prefix=%s ee.kind=%s ee.msg=%s line=%s\",\n@@ -321,8 +321,8 @@ fn make_compile_args(config: config, props: test_props, extras: [str],\n                      xform: fn(config, str) -> str, testfile: str) ->\n    procargs {\n     let prog = config.rustc_path;\n-    let args = [testfile, \"-o\", xform(config, testfile),\n-                \"-L\", config.build_base] + extras;\n+    let mut args = [testfile, \"-o\", xform(config, testfile),\n+                    \"-L\", config.build_base] + extras;\n     args += split_maybe_args(config.rustcflags);\n     args += split_maybe_args(props.compile_flags);\n     ret {prog: prog, args: args};"}, {"sha": "f3ea25ef2d5f7cfea30e8965087cfc37b8070d6c", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -217,7 +217,7 @@ fn replace_ty_in_crate(crate: ast::crate, i: uint, newty: ast::ty, tm: test_mode\n }\n \n fn under(n: uint, it: fn(uint)) {\n-    let i: uint = 0u;\n+    let mut i: uint = 0u;\n     while i < n { it(i); i += 1u; }\n }\n \n@@ -487,9 +487,9 @@ fn file_might_not_converge(filename: str) -> bool {\n \n fn check_roundtrip_convergence(code: @str, maxIters: uint) {\n \n-    let i = 0u;\n-    let newv = code;\n-    let oldv = code;\n+    let mut i = 0u;\n+    let mut newv = code;\n+    let mut oldv = code;\n \n     while i < maxIters {\n         oldv = newv;\n@@ -576,7 +576,7 @@ fn main(args: [str]) {\n         #error(\"usage: %s <testdir>\", args[0]);\n         ret;\n     }\n-    let files = [];\n+    let mut files = [];\n     let root = args[1];\n \n     find_rust_files(files, root);"}, {"sha": "02e6c232de761fb0a6b76ecb6e638622178e5d61", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -332,8 +332,8 @@ fn test_select2_stress() {\n         };\n     }\n \n-    let as = 0;\n-    let bs = 0;\n+    let mut as = 0;\n+    let mut bs = 0;\n     iter::repeat(msgs * times * 2u) {||\n         alt check select2(po_a, po_b) {\n           either::left(\"a\") { as += 1 }"}, {"sha": "292ef86641d03d2b655e304e100fd79bd9c2e657", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -715,7 +715,7 @@ mod tests {\n             assert(vec::slice(ivals, 0u, vec::len(res)) ==\n                    vec::map(res, {|x| x as int}));\n         }\n-        let i = 0u;\n+        let mut i = 0u;\n         while i < 8u {\n             check_read_ln(i, wide_test, ivals);\n             i += 1u;"}, {"sha": "141f7db2cb7670924ae055659039132f07a5b3c1", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -232,7 +232,7 @@ fn test_flat_map_with_option() {\n #[test]\n fn test_flat_map_with_list() {\n     fn repeat(&&i: int) -> [int] {\n-        let r = [];\n+        let mut r = [];\n         int::range(0, i) {|_j| r += [i]; }\n         r\n     }\n@@ -246,8 +246,7 @@ fn test_flat_map_with_list() {\n \n #[test]\n fn test_repeat() {\n-    let c = [],\n-        i = 0u;\n+    let mut c = [], i = 0u;\n     repeat(5u) {||\n         c += [(i * i)];\n         i += 1u;"}, {"sha": "b9e290a9bb94bf18e288999ff46516d8a19b38bc", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -617,8 +617,8 @@ mod tests {\n     #[test]\n     #[ignore(reason = \"fails periodically on mac\")]\n     fn test_getenv_big() {\n-        let s = \"\";\n-        let i = 0;\n+        let mut s = \"\";\n+        let mut i = 0;\n         while i < 100 { s += \"aaaaaaaaaa\"; i += 1; }\n         let n = make_rand_name();\n         setenv(n, s);\n@@ -659,7 +659,7 @@ mod tests {\n     fn test_env_setenv() {\n         let n = make_rand_name();\n \n-        let e = env();\n+        let mut e = env();\n         setenv(n, \"VALUE\");\n         assert !vec::contains(e, (n, \"VALUE\"));\n "}, {"sha": "912b4419f519b90dd3a5628c8fe3d4196a682bbc", "filename": "src/libcore/run.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -366,7 +366,7 @@ mod tests {\n             // Copied from run::program_output\n             let file = os::fdopen(fd);\n             let reader = io::FILE_reader(file, false);\n-            let buf = \"\";\n+            let mut buf = \"\";\n             while !reader.eof() {\n                 let bytes = reader.read_bytes(4096u);\n                 buf += str::from_bytes(bytes);"}, {"sha": "95dc2e130339c1f31dad33e1490d36c71dce1a21", "filename": "src/libcore/str.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1675,15 +1675,15 @@ mod tests {\n \n     #[test]\n     fn test_pop_char() {\n-        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        let mut data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n         let cc = pop_char(data);\n         assert \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\" == data;\n         assert '\u534e' == cc;\n     }\n \n     #[test]\n     fn test_pop_char_2() {\n-        let data2 = \"\u534e\";\n+        let mut data2 = \"\u534e\";\n         let cc2 = pop_char(data2);\n         assert \"\" == data2;\n         assert '\u534e' == cc2;\n@@ -1693,7 +1693,7 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(target_os = \"win32\"))]\n     fn test_pop_char_fail() {\n-        let data = \"\";\n+        let mut data = \"\";\n         let _cc3 = pop_char(data);\n     }\n \n@@ -1887,7 +1887,7 @@ mod tests {\n         assert find_str_between(data, \"ab\", 2u, 6u) == some(3u);\n         assert find_str_between(data, \"ab\", 2u, 4u) == none;\n \n-        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n+        let mut data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n         data += data;\n         assert find_str_between(data, \"\", 0u, 43u) == some(0u);\n         assert find_str_between(data, \"\", 6u, 43u) == some(6u);\n@@ -1959,14 +1959,14 @@ mod tests {\n         assert (eq(\"bc\", unsafe::slice_bytes(\"abc\", 1u, 3u)));\n         assert (eq(\"\", unsafe::slice_bytes(\"abc\", 1u, 1u)));\n         fn a_million_letter_a() -> str {\n-            let i = 0;\n-            let rs = \"\";\n+            let mut i = 0;\n+            let mut rs = \"\";\n             while i < 100000 { rs += \"aaaaaaaaaa\"; i += 1; }\n             ret rs;\n         }\n         fn half_a_million_letter_a() -> str {\n-            let i = 0;\n-            let rs = \"\";\n+            let mut i = 0;\n+            let mut rs = \"\";\n             while i < 100000 { rs += \"aaaaa\"; i += 1; }\n             ret rs;\n         }\n@@ -2068,14 +2068,14 @@ mod tests {\n         assert \"\u534e\" == slice(data, 30u, 33u);\n \n         fn a_million_letter_X() -> str {\n-            let i = 0;\n-            let rs = \"\";\n+            let mut i = 0;\n+            let mut rs = \"\";\n             while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n             ret rs;\n         }\n         fn half_a_million_letter_X() -> str {\n-            let i = 0;\n-            let rs = \"\";\n+            let mut i = 0;\n+            let mut rs = \"\";\n             while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n             ret rs;\n         }\n@@ -2164,15 +2164,15 @@ mod tests {\n \n     #[test]\n     fn test_shift_byte() unsafe {\n-        let s = \"ABC\";\n+        let mut s = \"ABC\";\n         let b = unsafe::shift_byte(s);\n         assert (s == \"BC\");\n         assert (b == 65u8);\n     }\n \n     #[test]\n     fn test_pop_byte() unsafe {\n-        let s = \"ABC\";\n+        let mut s = \"ABC\";\n         let b = unsafe::pop_byte(s);\n         assert (s == \"AB\");\n         assert (b == 67u8);\n@@ -2264,7 +2264,7 @@ mod tests {\n \n         let v: [u8] = bytes(s1);\n         let s2: str = from_bytes(v);\n-        let i: uint = 0u;\n+        let mut i: uint = 0u;\n         let n1: uint = len(s1);\n         let n2: uint = vec::len::<u8>(v);\n         assert (n1 == n2);\n@@ -2297,7 +2297,7 @@ mod tests {\n \n     #[test]\n     fn test_chars_iter() {\n-        let i = 0;\n+        let mut i = 0;\n         chars_iter(\"x\\u03c0y\") {|ch|\n             alt check i {\n               0 { assert ch == 'x'; }\n@@ -2312,7 +2312,7 @@ mod tests {\n \n     #[test]\n     fn test_bytes_iter() {\n-        let i = 0;\n+        let mut i = 0;\n \n         bytes_iter(\"xyz\") {|bb|\n             alt check i {\n@@ -2330,7 +2330,7 @@ mod tests {\n     fn test_split_char_iter() {\n         let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n-        let ii = 0;\n+        let mut ii = 0;\n \n         split_char_iter(data, ' ') {|xx|\n             alt ii {\n@@ -2348,7 +2348,7 @@ mod tests {\n     fn test_splitn_char_iter() {\n         let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n-        let ii = 0;\n+        let mut ii = 0;\n \n         splitn_char_iter(data, ' ', 2u) {|xx|\n             alt ii {\n@@ -2365,7 +2365,7 @@ mod tests {\n     fn test_words_iter() {\n         let data = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n-        let ii = 0;\n+        let mut ii = 0;\n \n         words_iter(data) {|ww|\n             alt ii {\n@@ -2385,7 +2385,7 @@ mod tests {\n     fn test_lines_iter () {\n         let lf = \"\\nMary had a little lamb\\nLittle lamb\\n\";\n \n-        let ii = 0;\n+        let mut ii = 0;\n \n         lines_iter(lf) {|x|\n             alt ii {"}, {"sha": "369c5b16349ff8a7489a5a29f3ffda8f7d443a42", "filename": "src/libcore/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -790,7 +790,7 @@ fn test_spawn_sched_blocking() {\n         comm::recv(start_po);\n \n         fn pingpong(po: comm::port<int>, ch: comm::chan<int>) {\n-            let val = 20;\n+            let mut val = 20;\n             while val > 0 {\n                 val = comm::recv(po);\n                 comm::send(ch, val - 1);"}, {"sha": "71c4bbfe6ea6b611993d10f2433820f9fe9ea558", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1017,7 +1017,7 @@ mod tests {\n     fn test_unsafe_ptrs() unsafe {\n         // Test on-stack copy-from-buf.\n         let a = [1, 2, 3];\n-        let ptr = unsafe::to_ptr(a);\n+        let mut ptr = unsafe::to_ptr(a);\n         let b = unsafe::from_buf(ptr, 3u);\n         assert (len(b) == 3u);\n         assert (b[0] == 1);\n@@ -1039,7 +1039,7 @@ mod tests {\n     #[test]\n     fn test_from_fn() {\n         // Test on-stack from_fn.\n-        let v = from_fn(3u, square);\n+        let mut v = from_fn(3u, square);\n         assert (len(v) == 3u);\n         assert (v[0] == 0u);\n         assert (v[1] == 1u);\n@@ -1058,7 +1058,7 @@ mod tests {\n     #[test]\n     fn test_from_elem() {\n         // Test on-stack from_elem.\n-        let v = from_elem(2u, 10u);\n+        let mut v = from_elem(2u, 10u);\n         assert (len(v) == 2u);\n         assert (v[0] == 10u);\n         assert (v[1] == 10u);\n@@ -1093,7 +1093,7 @@ mod tests {\n \n     #[test]\n     fn test_tail() {\n-        let a = [11];\n+        let mut a = [11];\n         assert (tail(a) == []);\n \n         a = [11, 12];\n@@ -1102,7 +1102,7 @@ mod tests {\n \n     #[test]\n     fn test_last() {\n-        let n = last_opt([]);\n+        let mut n = last_opt([]);\n         assert (n == none);\n         n = last_opt([1, 2, 3]);\n         assert (n == some(3));\n@@ -1113,7 +1113,7 @@ mod tests {\n     #[test]\n     fn test_slice() {\n         // Test on-stack -> on-stack slice.\n-        let v = slice([1, 2, 3], 1u, 3u);\n+        let mut v = slice([1, 2, 3], 1u, 3u);\n         assert (len(v) == 2u);\n         assert (v[0] == 2);\n         assert (v[1] == 3);\n@@ -1138,8 +1138,8 @@ mod tests {\n     #[test]\n     fn test_pop() {\n         // Test on-stack pop.\n-        let v = [1, 2, 3];\n-        let e = pop(v);\n+        let mut v = [1, 2, 3];\n+        let mut e = pop(v);\n         assert (len(v) == 2u);\n         assert (v[0] == 1);\n         assert (v[1] == 2);\n@@ -1159,7 +1159,7 @@ mod tests {\n     #[test]\n     fn test_push() {\n         // Test on-stack push().\n-        let v = [];\n+        let mut v = [];\n         push(v, 1);\n         assert (len(v) == 1u);\n         assert (v[0] == 1);\n@@ -1174,7 +1174,7 @@ mod tests {\n     #[test]\n     fn test_grow() {\n         // Test on-stack grow().\n-        let v = [];\n+        let mut v = [];\n         grow(v, 2u, 1);\n         assert (len(v) == 2u);\n         assert (v[0] == 1);\n@@ -1192,7 +1192,7 @@ mod tests {\n \n     #[test]\n     fn test_grow_fn() {\n-        let v = [];\n+        let mut v = [];\n         grow_fn(v, 3u, square);\n         assert (len(v) == 3u);\n         assert (v[0] == 0u);\n@@ -1202,7 +1202,7 @@ mod tests {\n \n     #[test]\n     fn test_grow_set() {\n-        let v = [mutable 1, 2, 3];\n+        let mut v = [mutable 1, 2, 3];\n         grow_set(v, 4u, 4, 5);\n         assert (len(v) == 5u);\n         assert (v[0] == 1);\n@@ -1215,8 +1215,8 @@ mod tests {\n     #[test]\n     fn test_map() {\n         // Test on-stack map.\n-        let v = [1u, 2u, 3u];\n-        let w = map(v, square_ref);\n+        let mut v = [1u, 2u, 3u];\n+        let mut w = map(v, square_ref);\n         assert (len(w) == 3u);\n         assert (w[0] == 1u);\n         assert (w[1] == 4u);\n@@ -1240,15 +1240,15 @@ mod tests {\n         let v0 = [1, 2, 3, 4, 5];\n         let v1 = [5, 4, 3, 2, 1];\n         let u = map2::<int, int, int>(v0, v1, f);\n-        let i = 0;\n+        let mut i = 0;\n         while i < 5 { assert (v0[i] * v1[i] == u[i]); i += 1; }\n     }\n \n     #[test]\n     fn test_filter_map() {\n         // Test on-stack filter-map.\n-        let v = [1u, 2u, 3u];\n-        let w = filter_map(v, square_if_odd);\n+        let mut v = [1u, 2u, 3u];\n+        let mut w = filter_map(v, square_if_odd);\n         assert (len(w) == 2u);\n         assert (w[0] == 1u);\n         assert (w[1] == 9u);\n@@ -1287,8 +1287,8 @@ mod tests {\n     #[test]\n     fn test_foldl() {\n         // Test on-stack fold.\n-        let v = [1u, 2u, 3u];\n-        let sum = foldl(0u, v, add);\n+        let mut v = [1u, 2u, 3u];\n+        let mut sum = foldl(0u, v, add);\n         assert (sum == 6u);\n \n         // Test on-heap fold.\n@@ -1302,7 +1302,7 @@ mod tests {\n         fn sub(&&a: int, &&b: int) -> int {\n             a - b\n         }\n-        let v = [1, 2, 3, 4];\n+        let mut v = [1, 2, 3, 4];\n         let sum = foldl(0, v, sub);\n         assert sum == -10;\n     }\n@@ -1312,28 +1312,28 @@ mod tests {\n         fn sub(&&a: int, &&b: int) -> int {\n             a - b\n         }\n-        let v = [1, 2, 3, 4];\n+        let mut v = [1, 2, 3, 4];\n         let sum = foldr(v, 0, sub);\n         assert sum == -2;\n     }\n \n     #[test]\n     fn test_iter_empty() {\n-        let i = 0;\n+        let mut i = 0;\n         iter::<int>([], { |_v| i += 1 });\n         assert i == 0;\n     }\n \n     #[test]\n     fn test_iter_nonempty() {\n-        let i = 0;\n+        let mut i = 0;\n         iter([1, 2, 3], { |v| i += v });\n         assert i == 6;\n     }\n \n     #[test]\n     fn test_iteri() {\n-        let i = 0;\n+        let mut i = 0;\n         iteri([1, 2, 3], { |j, v|\n             if i == 0 { assert v == 1; }\n             assert j + 1u == v as uint;\n@@ -1344,14 +1344,14 @@ mod tests {\n \n     #[test]\n     fn test_riter_empty() {\n-        let i = 0;\n+        let mut i = 0;\n         riter::<int>([], { |_v| i += 1 });\n         assert i == 0;\n     }\n \n     #[test]\n     fn test_riter_nonempty() {\n-        let i = 0;\n+        let mut i = 0;\n         riter([1, 2, 3], { |v|\n             if i == 0 { assert v == 3; }\n             i += v\n@@ -1361,7 +1361,7 @@ mod tests {\n \n     #[test]\n     fn test_riteri() {\n-        let i = 0;\n+        let mut i = 0;\n         riteri([0, 1, 2], { |j, v|\n             if i == 0 { assert v == 2; }\n             assert j == v as uint;\n@@ -1372,7 +1372,7 @@ mod tests {\n \n     #[test]\n     fn test_permute() {\n-        let results: [[int]];\n+        let mut results: [[int]];\n \n         results = [];\n         permute([]) {|v| results += [v]; }\n@@ -1464,7 +1464,7 @@ mod tests {\n         assert position_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert position_between(v, 0u, 0u, f) == none;\n         assert position_between(v, 0u, 1u, f) == none;\n@@ -1493,7 +1493,7 @@ mod tests {\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert find(v, f) == some((1, 'b'));\n         assert find(v, g) == none;\n@@ -1504,7 +1504,7 @@ mod tests {\n         assert find_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert find_between(v, 0u, 0u, f) == none;\n         assert find_between(v, 0u, 1u, f) == none;\n@@ -1533,7 +1533,7 @@ mod tests {\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert position(v, f) == some(1u);\n         assert position(v, g) == none;\n@@ -1544,7 +1544,7 @@ mod tests {\n         assert rposition_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert rposition_between(v, 0u, 0u, f) == none;\n         assert rposition_between(v, 0u, 1u, f) == none;\n@@ -1573,7 +1573,7 @@ mod tests {\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n         fn g(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'd' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert rfind(v, f) == some((3, 'b'));\n         assert rfind(v, g) == none;\n@@ -1584,7 +1584,7 @@ mod tests {\n         assert rfind_between([], 0u, 0u, f) == none;\n \n         fn f(xy: (int, char)) -> bool { let (_x, y) = xy; y == 'b' }\n-        let v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n+        let mut v = [(0, 'a'), (1, 'b'), (2, 'c'), (3, 'b')];\n \n         assert rfind_between(v, 0u, 0u, f) == none;\n         assert rfind_between(v, 0u, 1u, f) == none;\n@@ -1740,7 +1740,7 @@ mod tests {\n \n     #[test]\n     fn test_unshift() {\n-        let x = [1, 2, 3];\n+        let mut x = [1, 2, 3];\n         unshift(x, 0);\n         assert x == [0, 1, 2, 3];\n     }"}, {"sha": "371f45cb7a986296138d407ee26e17e4d285bc79", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -234,16 +234,16 @@ fn eq_vec(v0: bitv, v1: [uint]) -> bool {\n mod tests {\n     #[test]\n     fn test_0_elements() {\n-        let act;\n-        let exp;\n+        let mut act;\n+        let mut exp;\n         act = bitv(0u, false);\n         exp = vec::from_elem::<uint>(0u, 0u);\n         assert (eq_vec(act, exp));\n     }\n \n     #[test]\n     fn test_1_element() {\n-        let act;\n+        let mut act;\n         act = bitv(1u, false);\n         assert (eq_vec(act, [0u]));\n         act = bitv(1u, true);\n@@ -252,7 +252,7 @@ mod tests {\n \n     #[test]\n     fn test_10_elements() {\n-        let act;\n+        let mut act;\n         // all 0\n \n         act = bitv(10u, false);\n@@ -291,7 +291,7 @@ mod tests {\n \n     #[test]\n     fn test_31_elements() {\n-        let act;\n+        let mut act;\n         // all 0\n \n         act = bitv(31u, false);\n@@ -364,7 +364,7 @@ mod tests {\n \n     #[test]\n     fn test_32_elements() {\n-        let act;\n+        let mut act;\n         // all 0\n \n         act = bitv(32u, false);\n@@ -439,7 +439,7 @@ mod tests {\n \n     #[test]\n     fn test_33_elements() {\n-        let act;\n+        let mut act;\n         // all 0\n \n         act = bitv(33u, false);"}, {"sha": "749cefc5ba6c873a3ad6fe23402021cc9600446c", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -126,7 +126,7 @@ mod tests {\n         assert (d.peek_front() == 42);\n         log(debug, d.peek_back());\n         assert (d.peek_back() == 137);\n-        let i: int = d.pop_front();\n+        let mut i: int = d.pop_front();\n         log(debug, i);\n         assert (i == 42);\n         i = d.pop_back();"}, {"sha": "9ca7f346bda38fd6ea7b570813904d5f6bd09692", "filename": "src/libstd/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -453,7 +453,7 @@ mod tests {\n         let eqer_uint: map::eqfn<uint> = eq_uint;\n         let hm_uu: map::hashmap<uint, uint> =\n             map::hashmap::<uint, uint>(hasher_uint, eqer_uint);\n-        let i: uint = 0u;\n+        let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm_uu.insert(i, i * i));\n             #debug(\"inserting %u -> %u\", i, i*i);\n@@ -533,7 +533,7 @@ mod tests {\n         let eqer: map::eqfn<uint> = eq;\n         let hm: map::hashmap<uint, uint> =\n             map::hashmap::<uint, uint>(hasher, eqer);\n-        let i: uint = 0u;\n+        let mut i: uint = 0u;\n         while i < num_to_insert {\n             assert (hm.insert(i, i * i));\n             #debug(\"inserting %u -> %u\", i, i*i);"}, {"sha": "e4438b77a00e32573a587ca2873d86f71e3bda76", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1281,18 +1281,18 @@ mod tests {\n     #[test]\n     fn of_string2() {\n         let buf = @ mutable \"1234567890\";\n-        let i = 0;\n+        let mut i = 0;\n         while i < 10 { *buf = *buf + *buf; i+=1;}\n         let sample = @*buf;\n         let r      = of_str(sample);\n         assert char_len(r) == str::char_len(*sample);\n         assert rope_to_string(r) == *sample;\n \n-        let string_iter = 0u;\n+        let mut string_iter = 0u;\n         let string_len  = str::len(*sample);\n         let rope_iter   = iterator::char::start(r);\n-        let equal       = true;\n-        let pos         = 0u;\n+        let mut equal   = true;\n+        let mut pos     = 0u;\n         while equal {\n             alt(node::char_iterator::next(rope_iter)) {\n               option::none {\n@@ -1314,12 +1314,12 @@ mod tests {\n     #[test]\n     fn iter1() {\n         let buf = @ mutable \"1234567890\";\n-        let i = 0;\n+        let mut i = 0;\n         while i < 10 { *buf = *buf + *buf; i+=1;}\n         let sample = @*buf;\n         let r      = of_str(sample);\n \n-        let len = 0u;\n+        let mut len = 0u;\n         let it  = iterator::char::start(r);\n         loop {\n             alt(node::char_iterator::next(it)) {\n@@ -1335,11 +1335,11 @@ mod tests {\n     fn bal1() {\n         let init = @ \"1234567890\";\n         let buf  = @ mutable * init;\n-        let i = 0;\n+        let mut i = 0;\n         while i < 8 { *buf = *buf + *buf; i+=1;}\n         let sample = @*buf;\n         let r1     = of_str(sample);\n-        let r2     = of_str(init);\n+        let mut r2 = of_str(init);\n         i = 0;\n         while i < 8 { r2 = append_rope(r2, r2); i+= 1;}\n \n@@ -1354,19 +1354,19 @@ mod tests {\n     #[test]\n     fn char_at1() {\n         //Generate a large rope\n-        let r = of_str(@ \"123456789\");\n+        let mut r = of_str(@ \"123456789\");\n         uint::range(0u, 10u){|_i|\n             r = append_rope(r, r);\n         }\n \n         //Copy it in the slowest possible way\n-        let r2 = empty();\n+        let mut r2 = empty();\n         uint::range(0u, char_len(r)){|i|\n             r2 = append_char(r2, char_at(r, i));\n         }\n         assert eq(r, r2);\n \n-        let r3 = empty();\n+        let mut r3 = empty();\n         uint::range(0u, char_len(r)){|i|\n             r3 = prepend_char(r3, char_at(r, char_len(r) - i - 1u));\n         }\n@@ -1387,7 +1387,7 @@ mod tests {\n     fn concat1() {\n         //Generate a reasonable rope\n         let chunk = of_str(@ \"123456789\");\n-        let r = empty();\n+        let mut r = empty();\n         uint::range(0u, 10u){|_i|\n             r = append_rope(r, chunk);\n         }"}, {"sha": "4d5aabf705db6c62184e3248994c763966f0e7d0", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -264,8 +264,8 @@ mod tests {\n         type test = {input: str, output: [u8]};\n \n         fn a_million_letter_a() -> str {\n-            let i = 0;\n-            let rs = \"\";\n+            let mut i = 0;\n+            let mut rs = \"\";\n             while i < 100000 { rs += \"aaaaaaaaaa\"; i += 1; }\n             ret rs;\n         }\n@@ -316,7 +316,7 @@ mod tests {\n         fn check_vec_eq(v0: [u8], v1: [u8]) {\n             assert (vec::len::<u8>(v0) == vec::len::<u8>(v1));\n             let len = vec::len::<u8>(v0);\n-            let i = 0u;\n+            let mut i = 0u;\n             while i < len {\n                 let a = v0[i];\n                 let b = v1[i];\n@@ -338,7 +338,7 @@ mod tests {\n         // Test that it works when accepting the message in pieces\n         for t: test in tests {\n             let len = str::len(t.input);\n-            let left = len;\n+            let mut left = len;\n             while left > 0u {\n                 let take = (left + 1u) / 2u;\n                 sh.input_str(str::slice(t.input, len - left,"}, {"sha": "461dd1bab3aa41fc25e253906a9cef4b94aff75f", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -167,7 +167,7 @@ mod test_qsort3 {\n         let f1 = lt;\n         let f2 = equal;\n         quick_sort3::<int>(f1, f2, v1);\n-        let i = 0u;\n+        let mut i = 0u;\n         while i < len {\n             log(debug, v2[i]);\n             assert (v2[i] == v1[i]);\n@@ -208,7 +208,7 @@ mod test_qsort {\n         fn leual(&&a: int, &&b: int) -> bool { ret a <= b; }\n         let f = leual;\n         quick_sort::<int>(f, v1);\n-        let i = 0u;\n+        let mut i = 0u;\n         while i < len {\n             log(debug, v2[i]);\n             assert (v2[i] == v1[i]);\n@@ -266,7 +266,7 @@ mod tests {\n         fn le(&&a: int, &&b: int) -> bool { ret a <= b; }\n         let f = le;\n         let v3 = merge_sort::<int>(f, v1);\n-        let i = 0u;\n+        let mut i = 0u;\n         while i < len {\n             log(debug, v3[i]);\n             assert (v3[i] == v2[i]);"}, {"sha": "271fac730ab9e4838e718dabfc53ad450aaf926c", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -491,7 +491,7 @@ mod tests {\n         let tests =\n         {\n         let testfn = fn~() { };\n-        let tests = [];\n+        let mut tests = [];\n         for name: str in names {\n             let test = {name: name, fn: testfn, ignore: false,\n                         should_fail: false};"}, {"sha": "f0bac2b1d9760261b123dafa794567a9b765a40f", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -422,7 +422,6 @@ fn build_session_options(match: getopts::match,\n     let cfg = parse_cfgspecs(getopts::opt_strs(match, \"cfg\"));\n     let test = opt_present(match, \"test\");\n     let warn_unused_imports = opt_present(match, \"warn-unused-imports\");\n-    let enforce_mut_vars = opt_present(match, \"enforce-mut-vars\");\n     let sopts: @session::options =\n         @{crate_type: crate_type,\n           static: static,\n@@ -444,8 +443,7 @@ fn build_session_options(match: getopts::match,\n           parse_only: parse_only,\n           no_trans: no_trans,\n           no_asm_comments: no_asm_comments,\n-          warn_unused_imports: warn_unused_imports,\n-          enforce_mut_vars: enforce_mut_vars};\n+          warn_unused_imports: warn_unused_imports};\n     ret sopts;\n }\n "}, {"sha": "b691aa65f881fd41e38933822b9900df2b1c7ffa", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -45,8 +45,7 @@ type options =\n      parse_only: bool,\n      no_trans: bool,\n      no_asm_comments: bool,\n-     warn_unused_imports: bool,\n-     enforce_mut_vars: bool};\n+     warn_unused_imports: bool};\n \n type crate_metadata = {name: str, data: [u8]};\n \n@@ -154,7 +153,7 @@ mod test {\n     }\n \n     fn make_crate(with_bin: bool, with_lib: bool) -> @ast::crate {\n-        let attrs = [];\n+        let mut attrs = [];\n         if with_bin { attrs += [make_crate_type_attr(\"bin\")]; }\n         if with_lib { attrs += [make_crate_type_attr(\"lib\")]; }\n         @ast_util::respan(ast_util::dummy_sp(), {"}, {"sha": "0c40305f14a626fc85fa02c05a73c666a8235ea5", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -305,7 +305,7 @@ fn is_illegal_to_modify_def(cx: @ctx, def: def, msg: msg) -> option<str> {\n       // variables are assigned at most once.  But this requires a new kind of\n       // propagation (def. not assigned), so I didn't do that.\n       def_local(_, false) if msg == msg_move_out { none }\n-      def_local(_, false) if cx.tcx.sess.opts.enforce_mut_vars {\n+      def_local(_, false) {\n         some(\"immutable local variable\")\n       }\n "}, {"sha": "76f9f8527f416041e5b0a657d46fcd5ae29d9819", "filename": "src/rustc/syntax/print/pprust.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fprint%2Fpprust.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1134,6 +1134,13 @@ fn print_decl(s: ps, decl: @ast::decl) {\n         space_if_not_bol(s);\n         ibox(s, indent_unit);\n         word_nbsp(s, \"let\");\n+\n+        // if any are mutable, all are mutable\n+        if vec::any(locs) {|l| l.node.is_mutbl } {\n+            assert vec::all(locs) {|l| l.node.is_mutbl };\n+            word_nbsp(s, \"mut\");\n+        }\n+\n         fn print_local(s: ps, &&loc: @ast::local) {\n             ibox(s, indent_unit);\n             print_local_decl(s, loc);"}, {"sha": "c3e2221cea11f25d7d1b1b11172a0e646fe68740", "filename": "src/rustdoc/astsrv.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fastsrv.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -77,7 +77,7 @@ fn act(po: comm::port<msg>, source: str, parse: parser) {\n         ignore_errors\n     );\n \n-    let keep_going = true;\n+    let mut keep_going = true;\n     while keep_going {\n         alt comm::recv(po) {\n           handle_request(f) {\n@@ -147,8 +147,7 @@ fn build_session() -> (session::session, @mutable bool) {\n         parse_only: false,\n         no_trans: false,\n         no_asm_comments: false,\n-        warn_unused_imports: false,\n-        enforce_mut_vars: false\n+        warn_unused_imports: false\n     };\n \n     let codemap = codemap::new_codemap();"}, {"sha": "0ad21a77bdb0f6e2c8d99de1d5f137c972acfff1", "filename": "src/rustdoc/desc_to_brief_pass.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fdesc_to_brief_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdesc_to_brief_pass.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -131,7 +131,7 @@ fn first_sentence(s: str) -> option<str> {\n }\n \n fn first_sentence_(s: str) -> str {\n-    let dotcount = 0;\n+    let mut dotcount = 0;\n     // The index of the character following a single dot. This allows\n     // Things like [0..1) to appear in the brief description\n     let idx = str::find(s) {|ch|\n@@ -163,10 +163,10 @@ fn first_sentence_(s: str) -> str {\n \n fn paragraphs(s: str) -> [str] {\n     let lines = str::lines_any(s);\n-    let whitespace_lines = 0;\n-    let accum = \"\";\n+    let mut whitespace_lines = 0;\n+    let mut accum = \"\";\n     let paras = vec::foldl([], lines) {|paras, line|\n-        let res = paras;\n+        let mut res = paras;\n \n         if str::is_whitespace(line) {\n             whitespace_lines += 1;"}, {"sha": "c60ae65afe69f942e094cc9b2f1a69e37e7076c8", "filename": "src/rustdoc/markdown_writer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_writer.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -127,7 +127,7 @@ fn readclose(fd: libc::c_int) -> str {\n     // Copied from run::program_output\n     let file = os::fdopen(fd);\n     let reader = io::FILE_reader(file, false);\n-    let buf = \"\";\n+    let mut buf = \"\";\n     while !reader.eof() {\n         let bytes = reader.read_bytes(4096u);\n         buf += str::from_bytes(bytes);\n@@ -138,8 +138,8 @@ fn readclose(fd: libc::c_int) -> str {\n \n fn generic_writer(process: fn~(markdown: str)) -> writer {\n     let ch = task::spawn_listener {|po: comm::port<writeinstr>|\n-        let markdown = \"\";\n-        let keep_going = true;\n+        let mut markdown = \"\";\n+        let mut keep_going = true;\n         while keep_going {\n             alt comm::recv(po) {\n               write(s) { markdown += s; }\n@@ -281,7 +281,7 @@ fn future_writer() -> (writer, future::future<str>) {\n         comm::send(chan, copy instr);\n     };\n     let future = future::from_fn {||\n-        let res = \"\";\n+        let mut res = \"\";\n         loop {\n             alt comm::recv(port) {\n               write(s) { res += s }"}, {"sha": "e0795904291168dd996633f362a3c711a35b87c1", "filename": "src/rustdoc/reexport_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Freexport_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Freexport_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Freexport_pass.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -46,7 +46,7 @@ fn to_assoc_list<K:copy, V:copy>(\n     map: map::hashmap<K, V>\n ) -> [(K, V)] {\n \n-    let vec = [];\n+    let mut vec = [];\n     map.items {|k, v|\n         vec += [(k, v)];\n     }\n@@ -183,7 +183,7 @@ fn build_reexport_path_map(srv: astsrv::srv, -def_map: def_map) -> path_map {\n             };\n             let modpath = ast_map::path_to_str(vec::init(*path));\n \n-            let reexportdocs = [];\n+            let mut reexportdocs = [];\n             for def in defs {\n                 if !def.reexp { cont; }\n                 alt def_map.find(def.id) {"}, {"sha": "4427d1bfa497b610e0c8fb09fafc52ae13673c08", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -30,7 +30,7 @@ fn run_passes(\n          original through each pass\"\n     )];\n \n-    let passno = 0;\n+    let mut passno = 0;\n     vec::foldl(doc, passes) {|doc, pass|\n         log(debug, #fmt(\"pass #%d\", passno));\n         passno += 1;"}, {"sha": "7ce71d88a967015dc80094cd543d410d60c69909", "filename": "src/rustdoc/sectionalize_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fsectionalize_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Fsectionalize_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fsectionalize_pass.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -90,9 +90,9 @@ fn sectionalize(desc: option<str>) -> (option<str>, [doc::section]) {\n \n     let lines = str::lines(option::get(desc));\n \n-    let new_desc = none;\n-    let current_section = none;\n-    let sections = [];\n+    let mut new_desc = none;\n+    let mut current_section = none;\n+    let mut sections = [];\n \n     for line in lines {\n         alt parse_header(line) {"}, {"sha": "342e0914647a75ff0a1f318714d816fc1fe86091", "filename": "src/rustdoc/unindent_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Funindent_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Frustdoc%2Funindent_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Funindent_pass.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -19,8 +19,8 @@ fn mk_pass() -> pass {\n \n fn unindent(s: str) -> str {\n     let lines = str::lines_any(s);\n-    let saw_first_line = false;\n-    let saw_second_line = false;\n+    let mut saw_first_line = false;\n+    let mut saw_second_line = false;\n     let min_indent = vec::foldl(uint::max_value, lines) {|min_indent, line|\n \n         // After we see the first non-whitespace line, look at\n@@ -46,7 +46,7 @@ fn unindent(s: str) -> str {\n             min_indent\n         } else {\n             saw_first_line = true;\n-            let spaces = 0u;\n+            let mut spaces = 0u;\n             str::all(line) {|char|\n                 // Only comparing against space because I wouldn't\n                 // know what to do with mixed whitespace chars"}, {"sha": "a14dbc2eedd7535c81061624d52d52b3efe45fb5", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n impl helpers for uint {\n     #[inline]\n     fn to(v: uint, f: fn(uint)) {\n-        let i = self;\n+        let mut i = self;\n         while i < v {\n             f(i);\n             i += 1u;"}, {"sha": "50d9df243e7cdea5a6f52fd20c0e775919bb87c6", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,7 +2,7 @@\n \n #[inline]\n fn iter<T>(v: [T], f: fn(T)) {\n-    let i = 0u;\n+    let mut i = 0u;\n     let n = vec::len(v);\n     while i < n {\n         f(v[i]);"}, {"sha": "42f959a4a7dc8788df5cbd7819bddfa8ef68cdf0", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,7 +2,7 @@\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n fn iter(v: [uint], f: fn(uint)) {\n-    let i = 0u;\n+    let mut i = 0u;\n     let n = vec::len(v);\n     while i < n {\n         f(v[i]);"}, {"sha": "46b718a85c776eb4530be39a91517e4ab0d65aa8", "filename": "src/test/bench/99bob-iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-iter.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -23,9 +23,9 @@ fn b8() -> str {\n }\n \n fn sub(t: str, n: int) -> str unsafe {\n-    let b: str = \"\";\n-    let i: uint = 0u;\n-    let ns: str;\n+    let mut b: str = \"\";\n+    let mut i: uint = 0u;\n+    let mut ns: str;\n     alt n {\n       0 { ns = \"no more bottles\"; }\n       1 { ns = \"1 bottle\"; }\n@@ -42,7 +42,7 @@ fn sub(t: str, n: int) -> str unsafe {\n \n /* Using an interator */\n fn ninetynine(it: fn(int)) {\n-    let n: int = 100;\n+    let mut n: int = 100;\n     while n > 1 { n -= 1; it(n); }\n }\n "}, {"sha": "a2a1c00b75d6664a01b3ef77fe0f4b7740c0025a", "filename": "src/test/bench/99bob-pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-pattern.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -51,7 +51,7 @@ fn next(b: bottle) -> bottle {\n fn more(b: bottle) -> bool { alt b { none { ret false; } _ { ret true; } } }\n \n fn main() {\n-    let b: bottle = multiple(99);\n-    let running: bool = true;\n+    let mut b: bottle = multiple(99);\n+    let mut running: bool = true;\n     while running { show(b); #debug(\"\"); running = more(b); b = next(b); }\n }"}, {"sha": "2fa2b6cb18ee05c0d4d08eb8bb77c61436e88ecb", "filename": "src/test/bench/99bob-simple.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2F99bob-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2F99bob-simple.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -23,9 +23,9 @@ fn b8() -> str {\n }\n \n fn sub(t: str, n: int) -> str unsafe {\n-    let b: str = \"\";\n-    let i: uint = 0u;\n-    let ns: str;\n+    let mut b: str = \"\";\n+    let mut i: uint = 0u;\n+    let mut ns: str;\n     alt n {\n       0 { ns = \"no more bottles\"; }\n       1 { ns = \"1 bottle\"; }\n@@ -42,7 +42,7 @@ fn sub(t: str, n: int) -> str unsafe {\n \n /* Straightforward counter */\n fn main() {\n-    let n: int = 99;\n+    let mut n: int = 99;\n     while n > 0 {\n         log(debug, sub(b1(), n));\n         log(debug, sub(b2(), n - 1));"}, {"sha": "39c0f8791409761004a466ff2daf9e8e23b0b2b0", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -15,8 +15,8 @@ enum request {\n }\n \n fn server(requests: comm::port<request>, responses: comm::chan<uint>) {\n-    let count = 0u;\n-    let done = false;\n+    let mut count = 0u;\n+    let mut done = false;\n     while !done {\n         alt comm::recv(requests) {\n           get_count { comm::send(responses, copy count); }\n@@ -37,7 +37,7 @@ fn run(args: [str]) {\n     let workers = option::get(uint::from_str(args[2]));\n     let start = std::time::precise_time_s();\n     let to_child = to_child;\n-    let worker_results = [];\n+    let mut worker_results = [];\n     uint::range(0u, workers) {|_i|\n         let builder = task::task_builder();\n         worker_results += [task::future_result(builder)];"}, {"sha": "b0bc3c519cc13f63ecc3b2f0bcf7711241fcebaf", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -25,7 +25,7 @@ fn main(args: [str]) {\n         8\n     };\n     let min_depth = 4;\n-    let max_depth;\n+    let mut max_depth;\n     if min_depth + 2 > n {\n         max_depth = min_depth + 2;\n     } else { max_depth = n; }\n@@ -35,13 +35,13 @@ fn main(args: [str]) {\n                           stretch_depth,\n                           item_check(stretch_tree)));\n     let long_lived_tree = bottom_up_tree(0, max_depth);\n-    let depth = min_depth;\n+    let mut depth = min_depth;\n     while depth <= max_depth {\n         let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n-        let chk = 0;\n-        let i = 1;\n+        let mut chk = 0;\n+        let mut i = 1;\n         while i <= iterations {\n-            let temp_tree = bottom_up_tree(i, depth);\n+            let mut temp_tree = bottom_up_tree(i, depth);\n             chk += item_check(temp_tree);\n             temp_tree = bottom_up_tree(-i, depth);\n             chk += item_check(temp_tree);"}, {"sha": "3f9f6a63054d491d33f7d6aac8ad309cee95537b", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,13 +9,13 @@ fn fannkuch(n: int) -> int {\n     let perm = vec::to_mut(vec::from_elem(n as uint, 0));\n     let perm1 = vec::to_mut(vec::from_fn(n as uint, perm1init));\n     let count = vec::to_mut(vec::from_elem(n as uint, 0));\n-    let f = 0;\n-    let i = 0;\n-    let k = 0;\n-    let r = 0;\n-    let flips = 0;\n-    let nperm = 0;\n-    let checksum = 0;\n+    let mut f = 0;\n+    let mut i = 0;\n+    let mut k = 0;\n+    let mut r = 0;\n+    let mut flips = 0;\n+    let mut nperm = 0;\n+    let mut checksum = 0;\n     r = n;\n     while r > 0 {\n         i = 0;\n@@ -40,7 +40,7 @@ fn fannkuch(n: int) -> int {\n         if nperm & 0x1 == 0 { checksum += f; } else { checksum -= f; }\n         // Use incremental change to generate another permutation\n \n-        let go = true;\n+        let mut go = true;\n         while go {\n             if r == n {\n                 io::println(#fmt(\"%d\", checksum));"}, {"sha": "37e5776c2b15295af08014d94295dbbb31cfff82", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -23,8 +23,8 @@ fn myrandom_next(r: myrandom, mx: u32) -> u32 {\n type aminoacids = {ch: char, prob: u32};\n \n fn make_cumulative(aa: [aminoacids]) -> [aminoacids] {\n-    let cp: u32 = 0u32;\n-    let ans: [aminoacids] = [];\n+    let mut cp: u32 = 0u32;\n+    let mut ans: [aminoacids] = [];\n     for a: aminoacids in aa { cp += a.prob; ans += [{ch: a.ch, prob: cp}]; }\n     ret ans;\n }\n@@ -45,7 +45,7 @@ fn select_random(r: u32, genelist: [aminoacids]) -> char {\n fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n     log(debug, \">\" + id + \" \" + desc);\n     let rng = @{mutable last: std::rand::rng().next()};\n-    let op: str = \"\";\n+    let mut op: str = \"\";\n     uint::range(0u, n as uint) {|_i|\n         str::push_char(op, select_random(myrandom_next(rng, 100u32),\n                                          genelist));\n@@ -59,7 +59,7 @@ fn make_random_fasta(id: str, desc: str, genelist: [aminoacids], n: int) {\n \n fn make_repeat_fasta(id: str, desc: str, s: str, n: int) unsafe {\n     log(debug, \">\" + id + \" \" + desc);\n-    let op: str = \"\";\n+    let mut op: str = \"\";\n     let sl: uint = str::len(s);\n     uint::range(0u, n as uint) {|i|\n         str::unsafe::push_byte(op, s[i % sl]);"}, {"sha": "ad24be13ca35693d4a3da455d2556a2c053d5399", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -36,9 +36,9 @@ pure fn cabs(x: cmplx) -> f64\n \n fn mb(x: cmplx) -> bool\n {\n-    let z = {re: 0., im: 0.};\n-    let i = 0;\n-    let in = true;\n+    let mut z = {re: 0., im: 0.};\n+    let mut i = 0;\n+    let mut in = true;\n     while i < 50 {\n         z = z*z + x;\n         if cabs(z) >= 4. {\n@@ -51,8 +51,8 @@ fn mb(x: cmplx) -> bool\n }\n \n fn fillbyte(x: cmplx, incr: f64) -> u8 {\n-    let rv = 0_u8;\n-    let i = 0_u8;\n+    let mut rv = 0_u8;\n+    let mut i = 0_u8;\n     while i < 8_u8 {\n         let z = {re: x.re + (i as f64)*incr, im: x.im};\n         if mb(z) {\n@@ -65,7 +65,7 @@ fn fillbyte(x: cmplx, incr: f64) -> u8 {\n \n fn chanmb(i: uint, size: uint, ch: comm::chan<line>) -> ()\n {\n-    let crv = [];\n+    let mut crv = [];\n     let incr = 2./(size as f64);\n     let y = incr*(i as f64) - 1.;\n     let xincr = 8.*incr;\n@@ -107,15 +107,15 @@ fn writer(path: str, writech: comm::chan<comm::chan<line>>, size: uint)\n     cout.write_line(\"P4\");\n     cout.write_line(#fmt(\"%u %u\", size, size));\n     let lines = std::map::uint_hash();\n-    let done = 0_u;\n-    let i = 0_u;\n+    let mut done = 0_u;\n+    let mut i = 0_u;\n     while i < size {\n         let aline = comm::recv(p);\n         if aline.i == done {\n             #debug(\"W %u\", aline.i);\n             cout.write(aline.b);\n             done += 1_u;\n-            let prev = done;\n+            let mut prev = done;\n             while prev <= i {\n                 if lines.contains_key(prev) {\n                     #debug(\"WS %u\", prev);"}, {"sha": "cc40dfa0b4fe46b129f75293dbd87024e2c977dc", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -21,7 +21,7 @@ fn main(args: [str]) {\n     };\n     let bodies: [Body::props] = NBodySystem::MakeNBodySystem();\n     io::println(#fmt(\"%f\", NBodySystem::energy(bodies)));\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < n { NBodySystem::advance(bodies, 0.01); i += 1; }\n     io::println(#fmt(\"%f\", NBodySystem::energy(bodies)));\n }\n@@ -37,11 +37,11 @@ mod NBodySystem {\n             [Body::sun(), Body::jupiter(), Body::saturn(), Body::uranus(),\n              Body::neptune()];\n \n-        let px: float = 0.0;\n-        let py: float = 0.0;\n-        let pz: float = 0.0;\n+        let mut px: float = 0.0;\n+        let mut py: float = 0.0;\n+        let mut pz: float = 0.0;\n \n-        let i: int = 0;\n+        let mut i: int = 0;\n         while i < 5 {\n             px += bodies[i].vx * bodies[i].mass;\n             py += bodies[i].vy * bodies[i].mass;\n@@ -58,9 +58,9 @@ mod NBodySystem {\n \n     fn advance(bodies: [Body::props], dt: float) {\n \n-        let i: int = 0;\n+        let mut i: int = 0;\n         while i < 5 {\n-            let j: int = i + 1;\n+            let mut j: int = i + 1;\n             while j < 5 { advance_one(bodies[i], bodies[j], dt); j += 1; }\n \n             i += 1;\n@@ -96,20 +96,20 @@ mod NBodySystem {\n     }\n \n     fn energy(bodies: [Body::props]) -> float unsafe {\n-        let dx: float;\n-        let dy: float;\n-        let dz: float;\n-        let distance: float;\n-        let e: float = 0.0;\n+        let mut dx: float;\n+        let mut dy: float;\n+        let mut dz: float;\n+        let mut distance: float;\n+        let mut e: float = 0.0;\n \n-        let i: int = 0;\n+        let mut i: int = 0;\n         while i < 5 {\n             e +=\n                 0.5 * bodies[i].mass *\n                     (bodies[i].vx * bodies[i].vx + bodies[i].vy * bodies[i].vy\n                          + bodies[i].vz * bodies[i].vz);\n \n-            let j: int = i + 1;\n+            let mut j: int = i + 1;\n             while j < 5 {\n                 dx = bodies[i].x - bodies[j].x;\n                 dy = bodies[i].y - bodies[j].y;"}, {"sha": "72d85bfba6581ab90d4d7e5f123f150601aba994", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -59,7 +59,7 @@ fn parse_opts(argv: [str]) -> config {\n }\n \n fn stress_task(&&id: int) {\n-    let i = 0;\n+    let mut i = 0;\n     loop {\n         let n = 15;\n         assert (fib(n) == fib(n));\n@@ -69,7 +69,7 @@ fn stress_task(&&id: int) {\n }\n \n fn stress(num_tasks: int) {\n-    let results = [];\n+    let mut results = [];\n     range(0, num_tasks) {|i|\n         let builder = task::task_builder();\n         results += [task::future_result(builder)];"}, {"sha": "d1bd69fee0704adab717fb5fbe383d85dab69d22", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -8,10 +8,10 @@ fn eval_A(i: uint, j: uint) -> float {\n \n fn eval_A_times_u(u: [const float], Au: [mutable float]) {\n     let N = vec::len(u);\n-    let i = 0u;\n+    let mut i = 0u;\n     while i < N {\n         Au[i] = 0.0;\n-        let j = 0u;\n+        let mut j = 0u;\n         while j < N {\n             Au[i] += eval_A(i, j) * u[j];\n             j += 1u;\n@@ -22,10 +22,10 @@ fn eval_A_times_u(u: [const float], Au: [mutable float]) {\n \n fn eval_At_times_u(u: [const float], Au: [mutable float]) {\n     let N = vec::len(u);\n-    let i = 0u;\n+    let mut i = 0u;\n     while i < N {\n         Au[i] = 0.0;\n-        let j = 0u;\n+        let mut j = 0u;\n         while j < N {\n             Au[i] += eval_A(j, i) * u[j];\n             j += 1u;\n@@ -50,16 +50,16 @@ fn main(args: [str]) {\n \n     let u = vec::to_mut(vec::from_elem(N, 1.0));\n     let v = vec::to_mut(vec::from_elem(N, 0.0));\n-    let i = 0u;\n+    let mut i = 0u;\n     while i < 10u {\n         eval_AtA_times_u(u, v);\n         eval_AtA_times_u(v, u);\n         i += 1u;\n     }\n \n-    let vBv = 0.0;\n-    let vv = 0.0;\n-    let i = 0u;\n+    let mut vBv = 0.0;\n+    let mut vv = 0.0;\n+    let mut i = 0u;\n     while i < N {\n         vBv += u[i] * v[i];\n         vv += v[i] * v[i];"}, {"sha": "cf6951b23a6957b9a954ed275645b40e827d9664", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -59,7 +59,7 @@ fn solve_grid(g: grid_t) {\n             drop_colors(g, avail, row, col);\n \n             // find first remaining color that is available\n-            let i = 1 as uint;\n+            let mut i = 1 as uint;\n             while i < (10 as uint) { /* FIXME llvm ctlhd */\n                 if bitv::get(avail, i) {\n                     g[row][col] = i as u8;\n@@ -94,15 +94,15 @@ fn solve_grid(g: grid_t) {\n         }\n     }\n \n-    let work: [(u8, u8)] = []; /* queue of uncolored fields */\n+    let mut work: [(u8, u8)] = []; /* queue of uncolored fields */\n     u8::range(0u8, 9u8) { |row|\n         u8::range(0u8, 9u8) { |col|\n             let color = (*g)[row][col];\n             if color == 0u8 { work += [(row, col)]; }\n         }\n     }\n \n-    let ptr = 0u;\n+    let mut ptr = 0u;\n     let end = vec::len(work);\n     while (ptr < end) {\n         let (row, col) = work[ptr];"}, {"sha": "d2cc076594af136852970fdf9f4e89250a5b4ee6", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,8 +9,8 @@ enum msg {\n fn calc(children: uint, parent_ch: comm::chan<msg>) {\n     let port = comm::port();\n     let chan = comm::chan(port);\n-    let child_chs = [];\n-    let sum = 0;\n+    let mut child_chs = [];\n+    let mut sum = 0;\n \n     iter::repeat (children) {||\n         task::spawn {||"}, {"sha": "8b880e2fb593adbe2f0caf0078adfe40d30256f7", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn f(&&n: uint) {\n-    let i = 0u;\n+    let mut i = 0u;\n     while i < n {\n         task::try {|| g() };\n         i += 1u;\n@@ -13,6 +13,6 @@ fn main(args: [str]) {\n         if vec::len(args) < 2u {\n             10u\n         } else { option::get(uint::parse_buf(str::bytes(args[1]), 10u)) };\n-    let i = 0u;\n+    let mut i = 0u;\n     while i < n { task::spawn {|| f(n); }; i += 1u; }\n }"}, {"sha": "c8388102c49d0ea5b1eb7e34a2b7c0616104bfe6", "filename": "src/test/bench/task-perf-vector-party.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-vector-party.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@\n \n fn f(&&n: uint) {\n     uint::range(0u, n) {|i|\n-        let v: [u8] = [];\n+        let mut v: [u8] = [];\n         vec::reserve(v, 1000u);\n     }\n }"}, {"sha": "60cc0c03d4d03f31f6f0e2311e49904d338714db", "filename": "src/test/bench/task-perf-word-count.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -31,7 +31,7 @@ fn map(input: str, emit: map_reduce::putter) {\n }\n \n fn reduce(_word: str, get: map_reduce::getter) {\n-    let count = 0;\n+    let mut count = 0;\n \n     loop { alt get() { some(_) { count += 1; } none { break; } } }\n }\n@@ -60,7 +60,7 @@ mod map_reduce {\n \n     fn start_mappers(ctrl: chan<ctrl_proto>, -inputs: [str]) ->\n        [future::future<task::task_result>] {\n-        let results = [];\n+        let mut results = [];\n         for i: str in inputs {\n             let builder = task::task_builder();\n             results += [task::future_result(builder)];\n@@ -75,7 +75,7 @@ mod map_reduce {\n \n         fn emit(im: map::hashmap<str, chan<reduce_proto>>,\n                 ctrl: chan<ctrl_proto>, key: str, val: int) {\n-            let c;\n+            let mut c;\n             alt im.find(key) {\n               some(_c) {\n                 c = _c;\n@@ -134,12 +134,12 @@ mod map_reduce {\n         // This task becomes the master control task. It task::_spawns\n         // to do the rest.\n \n-        let reducers: map::hashmap<str, chan<reduce_proto>>;\n+        let mut reducers: map::hashmap<str, chan<reduce_proto>>;\n \n         reducers = map::str_hash();\n \n-        let num_mappers = vec::len(inputs) as int;\n-        let results = start_mappers(chan(ctrl), inputs);\n+        let mut num_mappers = vec::len(inputs) as int;\n+        let mut results = start_mappers(chan(ctrl), inputs);\n \n         while num_mappers > 0 {\n             alt recv(ctrl) {\n@@ -148,7 +148,7 @@ mod map_reduce {\n                 num_mappers -= 1;\n               }\n               find_reducer(k, cc) {\n-                let c;\n+                let mut c;\n                 // log(error, \"finding reducer for \" + k);\n                 alt reducers.find(k) {\n                   some(_c) {\n@@ -191,15 +191,15 @@ fn main(argv: [str]) {\n     map_reduce::map_reduce(inputs);\n     let stop = time::precise_time_ns();\n \n-    let elapsed = stop - start;\n+    let mut elapsed = stop - start;\n     elapsed /= 1000000u64;\n \n     log(error, \"MapReduce completed in \"\n              + u64::str(elapsed) + \"ms\");\n }\n \n fn read_word(r: io::reader) -> option<str> {\n-    let w = \"\";\n+    let mut w = \"\";\n \n     while !r.eof() {\n         let c = r.read_char();"}, {"sha": "8014ee75c1596c5f3ab6ca8ea75200a3b654f989", "filename": "src/test/run-fail/explicit-fail-msg.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fexplicit-fail-msg.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,2 +1,4 @@\n // error-pattern:wooooo\n-fn main() { let a = 1; if 1 == 1 { a = 2; } fail \"woooo\" + \"o\"; }\n+fn main() {\n+    let mut a = 1; if 1 == 1 { a = 2; } fail \"woooo\" + \"o\";\n+}"}, {"sha": "28e93d0edbda8063488acc34f7a9ec7f49fbf059", "filename": "src/test/run-fail/unwind-misc-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-misc-1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     }\n \n     let map = map::hashmap(hash, eq);\n-    let arr = [];\n+    let mut arr = [];\n     uint::range(0u, 10u) {|i|\n         arr += [@\"key stuff\"];\n         map.insert(arr, arr + [@\"value stuff\"]);"}, {"sha": "60ddb99c26a71dd2269093b516bde348aaef7229", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,8 +3,8 @@ use std;\n import option;\n \n fn foo<T>(y: option<T>) {\n-    let x: int;\n-    let rs: [int] = [];\n+    let mut x: int;\n+    let mut rs: [int] = [];\n     /* tests that x doesn't get put in the precondition for the\n        entire if expression */\n "}, {"sha": "58b19eeeed21747e12db7e7dd7b86edde18f00e2", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@ enum thing { a, b, c, }\n fn foo(it: fn(int)) { it(10); }\n \n fn main() {\n-    let x = true;\n+    let mut x = true;\n     alt a {\n       a { x = true; foo {|_i|} }\n       b { x = false; }"}, {"sha": "7bd21a114c97210bef96d6464555cb786a36e65a", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,7 +9,7 @@ enum color {\n }\n \n fn process(c: color) -> int {\n-    let x: int;\n+    let mut x: int;\n     alt c {\n       rgb(r, _, _) { #debug(\"rgb\"); log(debug, r); x = r; }\n       rgba(_, _, _, a) { #debug(\"rgba\"); log(debug, a); x = a; }"}, {"sha": "3af1d92a8ea86ff84a685e604f568840f3575947", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,7 +9,7 @@ fn f1(a: {mutable x: int}, &b: int, -c: int) -> int {\n fn f2(a: int, f: fn(int)) -> int { f(1); ret a; }\n \n fn main() {\n-    let a = {mutable x: 1}, b = 2, c = 3;\n+    let mut a = {mutable x: 1}, b = 2, c = 3;\n     assert (f1(a, b, c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);"}, {"sha": "210053f2e73e1a246448b8ce80a55f453bab08e8", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,19 +1,19 @@\n // Issue 483 - Assignment expressions result in nil\n fn test_assign() {\n-    let x: int;\n-    let y: () = x = 10;\n+    let mut x: int;\n+    let mut y: () = x = 10;\n     assert (x == 10);\n-    let z = x = 11;\n+    let mut z = x = 11;\n     assert (x == 11);\n     z = x = 12;\n     assert (x == 12);\n }\n \n fn test_assign_op() {\n-    let x: int = 0;\n-    let y: () = x += 10;\n+    let mut x: int = 0;\n+    let mut y: () = x += 10;\n     assert (x == 10);\n-    let z = x += 11;\n+    let mut z = x += 11;\n     assert (x == 21);\n     z = x += 12;\n     assert (x == 33);"}, {"sha": "f5f0332dc431c2ad57c0ee29254b6df823d52d18", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let sum = 0;\n+    let mut sum = 0;\n     for x in [1, 2, 3, 4, 5] { sum += x; }\n     assert (sum == 15);\n }"}, {"sha": "55a5ac7314c3c2d66ac16a45c9f280a2028a0ab9", "filename": "src/test/run-pass/basic-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let ch = chan(p);\n     task::spawn {|| a(ch); };\n     task::spawn {|| a(ch); };\n-    let n: int = 0;\n+    let mut n: int = 0;\n     n = recv(p);\n     n = recv(p);\n     //    #debug(\"Finished.\");"}, {"sha": "e45ff2c4c71ffd6ccb9f18db7aa64f618b2eaa32", "filename": "src/test/run-pass/basic-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic-2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -15,7 +15,7 @@ fn main() {\n     let ch = chan(p);\n     task::spawn {|| a(ch); };\n     task::spawn {|| b(ch); };\n-    let n: int = 0;\n+    let mut n: int = 0;\n     n = recv(p);\n     n = recv(p);\n     #debug(\"Finished.\");"}, {"sha": "8ef7d50b9593e7f58ad40a0eb5be83b0fd1b6039", "filename": "src/test/run-pass/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbasic.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -28,13 +28,13 @@ fn g(x: int, y: str) -> int {\n }\n \n fn main() {\n-    let n: int = 2 + 3 * 7;\n+    let mut n: int = 2 + 3 * 7;\n     let s: str = \"hello there\";\n     let p = comm::port();\n     let ch = comm::chan(p);\n     task::spawn {|| a(ch); };\n     task::spawn {|| b(ch); };\n-    let x: int = 10;\n+    let mut x: int = 10;\n     x = g(n, s);\n     log(debug, x);\n     n = recv(p);"}, {"sha": "6651bc22f78d02366fb16d603c2a7fb0558f4375", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -11,8 +11,8 @@ fn target() {\n }\n \n fn general() {\n-    let a: int = 1;\n-    let b: int = 2;\n+    let mut a: int = 1;\n+    let mut b: int = 2;\n     a ^= b;\n     b ^= a;\n     a = a ^ b;"}, {"sha": "b13b819b2dc8e9093abe3a0282038848accae958", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -8,7 +8,7 @@ fn main() {\n     }\n \n     // Usable at all:\n-    let any_negative = vec::any(v) { |e| float::is_negative(e) };\n+    let mut any_negative = vec::any(v) { |e| float::is_negative(e) };\n     assert any_negative;\n \n     // Higher precedence than assignments:"}, {"sha": "e91c5fe5d23ce13da54ca4f4caf6444806b36c9a", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,7 +2,7 @@ fn iter_vec<T>(v: [T], f: fn(T)) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = [1, 2, 3, 4, 5, 6, 7];\n-    let odds = 0;\n+    let mut odds = 0;\n     iter_vec(v, {|i|\n         log(error, i);\n         if i % 2 == 1 {"}, {"sha": "bc984241aae6a16250b0116ae93883675e2c1fe6", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,7 +2,7 @@ fn iter_vec<T>(v: [T], f: fn(T)) { for x: T in v { f(x); } }\n \n fn main() {\n     let v = [1, 2, 3, 4, 5];\n-    let sum = 0;\n+    let mut sum = 0;\n     iter_vec(v, {|i|\n         iter_vec(v, {|j|\n             log(error, i * j);"}, {"sha": "a13843d37cf4f35343a7a9c83d9040c6a82a5722", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let i = 0;\n+    let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }\n     assert (i == 10);\n     do  { i += 1; if i == 20 { break; } } while i < 30"}, {"sha": "152f74d683d34f8bb7012966f16f90450bdd8d9f", "filename": "src/test/run-pass/chan-leak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fchan-leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchan-leak.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -15,7 +15,7 @@ type ctx = chan<request>;\n fn request_task(c: chan<ctx>) {\n     let p = port();\n     send(c, chan(p));\n-    let req: request;\n+    let mut req: request;\n     req = recv(p);\n     // Need to drop req before receiving it again\n     req = recv(p);\n@@ -25,7 +25,7 @@ fn new_cx() -> ctx {\n     let p = port();\n     let ch = chan(p);\n     let t = task::spawn {|| request_task(ch); };\n-    let cx: ctx;\n+    let mut cx: ctx;\n     cx = recv(p);\n     ret cx;\n }"}, {"sha": "c715f3b677b10778b9dfb64f24ee2ad05e4cf323", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,17 +9,17 @@ fn nothing() { }\n fn putstr(s: str) { }\n \n fn putint(i: int) {\n-    let i: int = 33;\n+    let mut i: int = 33;\n     while i < 36 { putstr(\"hi\"); i = i + 1; }\n }\n \n fn zerg(i: int) -> int { ret i; }\n \n fn foo(x: int) -> int {\n-    let y: t = x + 2;\n+    let mut y: t = x + 2;\n     putstr(\"hello\");\n     while y < 10 { putint(y); if y * 3 == 4 { y = y + 2; nothing(); } }\n-    let z: t;\n+    let mut z: t;\n     z = 0x55;\n     foo(z);\n     ret 0;"}, {"sha": "a2550197d0eb30da2b22457615ceb7644c95f2f1", "filename": "src/test/run-pass/constraint-prop-expr-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-expr-move.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ fn main() unsafe {\n     fn foo(_a: uint, _b: uint) : uint::le(_a, _b) {}\n     let a: uint = 1u;\n     let b: uint = 4u;\n-    let c: uint = 17u;\n+    let mut c: uint = 17u;\n     check (uint::le(a, b));\n     c <- a;\n     log(debug, foo(c, b));"}, {"sha": "76d6a733e98c026546301a60919bf18215554fd3", "filename": "src/test/run-pass/constraint-prop-swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconstraint-prop-swap.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n fn main() unsafe {\n     fn foo(_a: uint, _b: uint) : uint::le(_a, _b) {}\n-    let a: uint = 4u;\n-    let b: uint = 1u;\n+    let mut a: uint = 4u;\n+    let mut b: uint = 1u;\n     check (uint::le(b, a));\n     b <-> a;\n     log(debug, foo(a, b));"}, {"sha": "7badeedf824d53f2889af21ab1979671e5da3e96", "filename": "src/test/run-pass/expr-alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fexpr-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,14 +5,14 @@\n \n // Tests for using alt as an expression\n fn test_basic() {\n-    let rs: bool = alt true { true { true } false { false } };\n+    let mut rs: bool = alt true { true { true } false { false } };\n     assert (rs);\n     rs = alt false { true { false } false { true } };\n     assert (rs);\n }\n \n fn test_inferrence() {\n-    let rs = alt true { true { true } false { false } };\n+    let mut rs = alt true { true { true } false { false } };\n     assert (rs);\n }\n "}, {"sha": "b760763be0b61134298595f123d7c715ce038698", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,7 +9,7 @@ fn test_basic() { let rs: bool = { true }; assert (rs); }\n fn test_rec() { let rs = { {v1: 10, v2: 20} }; assert (rs.v2 == 20); }\n \n fn test_filled_with_stuff() {\n-    let rs = { let a = 0; while a < 10 { a += 1; } a };\n+    let rs = { let mut a = 0; while a < 10 { a += 1; } a };\n     assert (rs == 10);\n }\n "}, {"sha": "1b5504e8b86796c0a76af5d977476734bf0a051c", "filename": "src/test/run-pass/fn-bare-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffn-bare-assign.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -8,7 +8,7 @@ fn g(f: native fn(int, &bool), &called: bool) {\n }\n \n fn main() {\n-    let called = false;\n+    let mut called = false;\n     let h = f;\n     g(h, called);\n     assert called == true;"}, {"sha": "6afd21559dd1ab888628ba794420d1504ac4016c", "filename": "src/test/run-pass/foreach-nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-nested.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,7 +6,7 @@ fn two(it: fn(int)) { it(0); it(1); }\n \n fn main() {\n     let a: [mutable int] = [mutable -1, -1, -1, -1];\n-    let p: int = 0;\n+    let mut p: int = 0;\n     two {|i|\n         two {|j| a[p] = 10 * i + j; p += 1; };\n     };"}, {"sha": "4bf37df776d1c2b5ec55728e3cf6b1f61093d905", "filename": "src/test/run-pass/foreach-put-structured.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-put-structured.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,14 +1,14 @@\n \n \n fn pairs(it: fn((int, int))) {\n-    let i: int = 0;\n-    let j: int = 0;\n+    let mut i: int = 0;\n+    let mut j: int = 0;\n     while i < 10 { it((i, j)); i += 1; j += i; }\n }\n \n fn main() {\n-    let i: int = 10;\n-    let j: int = 0;\n+    let mut i: int = 10;\n+    let mut j: int = 0;\n     pairs() {|p|\n         let (_0, _1) = p;\n         log(debug, _0);"}, {"sha": "c27b26066645ea3f9f4a77ea16900e24a183b384", "filename": "src/test/run-pass/foreach-simple-outer-slot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeach-simple-outer-slot.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,14 +3,14 @@\n \n // -*- rust -*-\n fn main() {\n-    let sum: int = 0;\n+    let mut sum: int = 0;\n     first_ten {|i| #debug(\"main\"); log(debug, i); sum = sum + i; };\n     #debug(\"sum\");\n     log(debug, sum);\n     assert (sum == 45);\n }\n \n fn first_ten(it: fn(int)) {\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < 10 { #debug(\"first_ten\"); it(i); i = i + 1; }\n }"}, {"sha": "4aac6559fe3d7d3130a7e84e87bb1a23d147f77e", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -7,12 +7,12 @@ fn id<T: copy>(x: T) -> T { ret x; }\n type triple = {x: int, y: int, z: int};\n \n fn main() {\n-    let x = 62;\n-    let y = 63;\n+    let mut x = 62;\n+    let mut y = 63;\n     let a = 'a';\n-    let b = 'b';\n+    let mut b = 'b';\n     let p: triple = {x: 65, y: 66, z: 67};\n-    let q: triple = {x: 68, y: 69, z: 70};\n+    let mut q: triple = {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n     log(debug, y);\n     assert (x == y);"}, {"sha": "37727bcf03ae5d53a39ec9e80d82240718b32f24", "filename": "src/test/run-pass/generic-tag-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-alt.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n enum foo<T> { arm(T), }\n \n fn altfoo<T>(f: foo<T>) {\n-    let hit = false;\n+    let mut hit = false;\n     alt f { arm::<T>(x) { #debug(\"in arm\"); hit = true; } }\n     assert (hit);\n }"}, {"sha": "3d72538ca02b08220053c97e711c3a2954cbd183", "filename": "src/test/run-pass/generic-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,4 +2,4 @@\n \n enum option<T> { some(@T), none, }\n \n-fn main() { let a: option<int> = some::<int>(@10); a = none::<int>; }\n+fn main() { let mut a: option<int> = some::<int>(@10); a = none::<int>; }"}, {"sha": "e3392da13d730ed128d36f7ff11482d1b2282eec", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -44,7 +44,7 @@ mod map_reduce {\n \n         fn emit(im: map::hashmap<str, int>, ctrl: chan<ctrl_proto>, key: str,\n                 val: str) {\n-            let c;\n+            let mut c;\n             alt im.find(key) {\n               some(_c) { c = _c }\n               none {\n@@ -69,19 +69,19 @@ mod map_reduce {\n         // This task becomes the master control task. It spawns others\n         // to do the rest.\n \n-        let reducers: map::hashmap<str, int>;\n+        let mut reducers: map::hashmap<str, int>;\n \n         reducers = map::str_hash();\n \n         start_mappers(chan(ctrl), inputs);\n \n-        let num_mappers = vec::len(inputs) as int;\n+        let mut num_mappers = vec::len(inputs) as int;\n \n         while num_mappers > 0 {\n             alt recv(ctrl) {\n               mapper_done { num_mappers -= 1; }\n               find_reducer(k, cc) {\n-                let c;\n+                let mut c;\n                 alt reducers.find(str::from_bytes(k)) {\n                   some(_c) { c = _c; }\n                   none { c = 0; }"}, {"sha": "56f4d975b7cec367b5626063214e8b4254343429", "filename": "src/test/run-pass/i32-sub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fi32-sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi32-sub.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,4 +2,4 @@\n \n \n // -*- rust -*-\n-fn main() { let x: i32 = -400_i32; x = 0_i32 - x; assert (x == 400_i32); }\n+fn main() { let mut x: i32 = -400_i32; x = 0_i32 - x; assert (x == 400_i32); }"}, {"sha": "ddc1f5073ea925b2f86b573ec0907b5f7cea84a6", "filename": "src/test/run-pass/i8-incr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fi8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi8-incr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let x: i8 = -12i8;\n+    let mut x: i8 = -12i8;\n     let y: i8 = -12i8;\n     x = x + 1i8;\n     x = x - 1i8;"}, {"sha": "21c195377c980a0aad70fc62521a74756465717d", "filename": "src/test/run-pass/iface-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fiface-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-generic.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -16,7 +16,7 @@ iface map<T> {\n }\n impl <T> of map<T> for [T] {\n     fn map<U>(f: fn(T) -> U) -> [U] {\n-        let r = [];\n+        let mut r = [];\n         for x in self { r += [f(x)]; }\n         r\n     }"}, {"sha": "50e7257a6a011f2d1fa43295163c1cf4fdfc68df", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ use std;\n import vec::*;\n \n fn main() {\n-    let v = from_elem(0u, 0);\n+    let mut v = from_elem(0u, 0);\n     v += [4, 2];\n     assert (reversed(v) == [2, 4]);\n }"}, {"sha": "a006fea656de7ffe099677276f49f56a3f8bbd59", "filename": "src/test/run-pass/interior-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Finterior-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finterior-vec.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,11 +6,11 @@ native mod rusti {\n }\n \n fn main() unsafe {\n-    let v: [int] = [];\n+    let mut v: [int] = [];\n     assert (vec_len(v) == 0u); // zero-length\n-    let x = [1, 2];\n+    let mut x = [1, 2];\n     assert (vec_len(x) == 2u); // on stack\n-    let y = [1, 2, 3, 4, 5];\n+    let mut y = [1, 2, 3, 4, 5];\n     assert (vec_len(y) == 5u); // on heap\n \n     v += [];"}, {"sha": "7ae714ac060915015f89a914c2607ad107b8283a", "filename": "src/test/run-pass/issue-1257.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fissue-1257.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1257.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main () {\n-  let line = \"\";\n-  let i = 0;\n+  let mut line = \"\";\n+  let mut i = 0;\n   do {\n     line = if i == 9 { \"exit\" } else { \"notexit\" };\n     i += 1;"}, {"sha": "76d26e0b0255407d69513c41c1c56ef757602bd2", "filename": "src/test/run-pass/issue-783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fissue-783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fissue-783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-783.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -13,7 +13,7 @@ fn a() {\n         spawn {|| b(ch); };\n         recv(p);\n     }\n-    let i = 0;\n+    let mut i = 0;\n     while i < 100 {\n         doit();\n         i += 1;"}, {"sha": "af6b55934ebae9bb168ef6ac7566aa1ca53ee783", "filename": "src/test/run-pass/istr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fistr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fistr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fistr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -33,16 +33,16 @@ fn test_heap_add() {\n }\n \n fn test_append() {\n-    let s = \"\";\n+    let mut s = \"\";\n     s += \"a\";\n     assert (s == \"a\");\n \n-    let s = \"a\";\n+    let mut s = \"a\";\n     s += \"b\";\n     log(debug, s);\n     assert (s == \"ab\");\n \n-    let s = \"c\";\n+    let mut s = \"c\";\n     s += \"offee\";\n     assert (s == \"coffee\");\n "}, {"sha": "797049b5d51cfe80db618a25161ad10394c43ab6", "filename": "src/test/run-pass/iter-range.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fiter-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fiter-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiter-range.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,12 +2,12 @@\n \n fn range(a: int, b: int, it: fn(int)) {\n     assert (a < b);\n-    let i: int = a;\n+    let mut i: int = a;\n     while i < b { it(i); i += 1; }\n }\n \n fn main() {\n-    let sum: int = 0;\n+    let mut sum: int = 0;\n     range(0, 100) {|x| sum += x; }\n     log(debug, sum);\n }"}, {"sha": "b0289ceb64da222708fac223d2cd4669a4207118", "filename": "src/test/run-pass/ivec-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fivec-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fivec-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-add.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ fn double<T: copy>(a: T) -> [T] { ret [a] + [a]; }\n fn double_int(a: int) -> [int] { ret [a] + [a]; }\n \n fn main() {\n-    let d = double(1);\n+    let mut d = double(1);\n     assert (d[0] == 1);\n     assert (d[1] == 1);\n "}, {"sha": "2ae8986c7f146758dca6b23a07e3733ead593d03", "filename": "src/test/run-pass/last-use-corner-cases.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-corner-cases.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     call_me({|| *q}, q);\n \n     // Check that no false positives are found in loops.\n-    let q = ~40, p = 10;\n+    let mut q = ~40, p = 10;\n     loop {\n         let i = q;\n         p += *i;"}, {"sha": "e5d1f814047f4e3dc037e6af9d22f0a2cc056fbc", "filename": "src/test/run-pass/lazy-and-or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazy-and-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-and-or.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@ fn incr(&x: int) -> bool { x += 1; assert (false); ret false; }\n fn main() {\n     let x = 1 == 2 || 3 == 3;\n     assert (x);\n-    let y: int = 10;\n+    let mut y: int = 10;\n     log(debug, x || incr(y));\n     assert (y == 10);\n     if true && x { assert (true); } else { assert (false); }"}, {"sha": "dd9cd7b063567f3567f1319067ef4415ac457859", "filename": "src/test/run-pass/lazy-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazy-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazy-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazy-init.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,4 +2,4 @@\n \n fn foo(x: int) { log(debug, x); }\n \n-fn main() { let x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }\n+fn main() { let mut x: int; if 1 > 2 { x = 12; } else { x = 10; } foo(x); }"}, {"sha": "8651c81a41fc7c30dbd4540e2f7886536cf21a42", "filename": "src/test/run-pass/lazychan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazychan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flazychan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flazychan.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -7,7 +7,7 @@ import comm::*;\n fn main() {\n     let p = port();\n     let ch = chan(p);\n-    let y: int;\n+    let mut y: int;\n \n     task::spawn {|| child(ch); };\n     y = recv(p);"}, {"sha": "1b90eeb3c55601fc7a1c0c9400969fa7418ac6ea", "filename": "src/test/run-pass/leak-tag-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fleak-tag-copy.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,4 +2,4 @@\n \n enum t { a, b(@int), }\n \n-fn main() { let x = b(@10); x = a; }\n+fn main() { let mut x = b(@10); x = a; }"}, {"sha": "e5bc476cff9cb45aebf770c678cb752a6abe5f7b", "filename": "src/test/run-pass/let-destruct-fresh-mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let u = {x: 10, y: @{a: 20}};\n-    let {x: x, y: @{a: a}} = u;\n+    let mut {x: x, y: @{a: a}} = u;\n     x = 100;\n     a = 100;\n     assert (x == 100);"}, {"sha": "f7025949c2c97681e127e14b9ffa0e87019e4810", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,12 +2,12 @@\n \n fn main() {\n     let x = [1, 2, 3];\n-    let y = 0;\n+    let mut y = 0;\n     for i: int in x { log(debug, i); y += i; }\n     log(debug, y);\n     assert (y == 6);\n     let s = \"hello there\";\n-    let i: int = 0;\n+    let mut i: int = 0;\n     for c: u8 in s {\n         if i == 0 { assert (c == 'h' as u8); }\n         if i == 1 { assert (c == 'e' as u8); }"}, {"sha": "f9c7bfd4c7c50ef658334b06bbf093b4ccf01204", "filename": "src/test/run-pass/long-while.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flong-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Flong-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flong-while.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let i: int = 0; while i < 1000000 { i += 1; let x = 3; } }\n+fn main() { let mut i: int = 0; while i < 1000000 { i += 1; let x = 3; } }"}, {"sha": "a62526de7da6c9105312ce95ee9e4299bb4cefa1", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-  let i = 0u;\n+  let mut i = 0u;\n   loop {\n     log(error, \"a\");\n     i += 1u;\n@@ -8,7 +8,7 @@ fn main() {\n     }\n   }\n   assert (i == 10u);\n-  let is_even = false;\n+  let mut is_even = false;\n   loop {\n     if i == 21u {\n         break;"}, {"sha": "546679fc3915741980e9d087d31ad547afc39985", "filename": "src/test/run-pass/loop-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Floop-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Floop-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-scope.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = [10, 20, 30];\n-    let sum = 0;\n+    let mut sum = 0;\n     for x in x { sum += x; }\n     assert (sum == 60);\n }"}, {"sha": "788c24aa24d27b0221b9d44cb119c27ae23c9eea", "filename": "src/test/run-pass/maybe-mutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmaybe-mutable.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn len(v: [const int]) -> uint {\n-    let i = 0u;\n+    let mut i = 0u;\n     for x: int in v { i += 1u; }\n     ret i;\n }"}, {"sha": "d5a05d47cf066188f1e4525530414da221b59928", "filename": "src/test/run-pass/monad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmonad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmonad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonad.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,7 +4,7 @@ iface monad<A> {\n \n impl <A> of monad<A> for [A] {\n     fn bind<B>(f: fn(A) -> [B]) -> [B] {\n-        let r = [];\n+        let mut r = [];\n         for elt in self { r += f(elt); }\n         r\n     }"}, {"sha": "ea4f6466ae8dc87e2605cf5afc0d2fa708fd6444", "filename": "src/test/run-pass/morestack5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmorestack5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack5.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -10,7 +10,7 @@ fn getbig(&&i: int) {\n }\n \n fn main() {\n-    let sz = 400u;\n+    let mut sz = 400u;\n     while sz < 500u {\n         task::try {|| getbig(200) };\n         sz += 1u;"}, {"sha": "64268bcabaa05353791e086c6f1e5982df973aec", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n-    let y: ~{x: int, y: int, z: int};\n+    let mut y: ~{x: int, y: int, z: int};\n     if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n     ret y.y;\n }"}, {"sha": "586fa3c89aa7b47eef7047c2b448c35b9d77316f", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n-    let y: @{x: int, y: int, z: int};\n+    let mut y: @{x: int, y: int, z: int};\n     if x { y <- bar; } else { y = @{x: 4, y: 5, z: 6}; }\n     ret y.y;\n }"}, {"sha": "f14592a7508df5b9a49ceab5c970bfb11df80549", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ import uint;\n \n fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n-    let y: ~{x: int, y: int, z: int};\n+    let mut y: ~{x: int, y: int, z: int};\n     if x { y <- bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n     ret y.y;\n }"}, {"sha": "3105a80fea1515d3b2517d9263894bd2a062ddb8", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ import uint;\n \n fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n     let bar = foo;\n-    let y: @{x: int, y: int, z: int};\n+    let mut y: @{x: int, y: int, z: int};\n     if x { y <- bar; } else { y = @{x: 4, y: 5, z: 6}; }\n     ret y.y;\n }"}, {"sha": "3930d5371315465a146678568fe1a8432766800a", "filename": "src/test/run-pass/move-scalar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmove-scalar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-scalar.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n \n     let y: int = 42;\n-    let x: int;\n+    let mut x: int;\n     x <- y;\n     assert (x == 42);\n }"}, {"sha": "b56f80d9700fcfb3b0f4ea831272964c73b637a1", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,7 +6,7 @@ use std;\n fn grow(&v: [int]) { v += [1]; }\n \n fn main() {\n-    let v: [int] = [];\n+    let mut v: [int] = [];\n     grow(v);\n     grow(v);\n     grow(v);"}, {"sha": "b0493b32c1e56388f1e6730e22c64532976f8f24", "filename": "src/test/run-pass/nested-alts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fnested-alts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-alts.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,7 +4,7 @@ fn baz() -> ! { fail; }\n fn foo() {\n     alt some::<int>(5) {\n       some::<int>(x) {\n-        let bar;\n+        let mut bar;\n         alt none::<int> { none::<int> { bar = 5; } _ { baz(); } }\n         log(debug, bar);\n       }"}, {"sha": "59bbbcf794505a2d4f2f8d73324678f33f8c21ab", "filename": "src/test/run-pass/opeq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fopeq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fopeq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fopeq.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let x: int = 1;\n+    let mut x: int = 1;\n     x *= 2;\n     log(debug, x);\n     assert (x == 2);"}, {"sha": "2f0b41dc0c6c31f65c560908754f7f4a781923a7", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -16,7 +16,7 @@ impl point_ops for point {\n }\n \n fn main() {\n-    let p = {x: 10, y: 20};\n+    let mut p = {x: 10, y: 20};\n     p += {x: 101, y: 102};\n     p -= {x: 100, y: 100};\n     assert p + {x: 5, y: 5} == {x: 16, y: 27};"}, {"sha": "ae21a487441b6146f355ff9c3819f53f8df07cfc", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -13,12 +13,12 @@ fn ret_ext_mem() -> {a: @int, b: @int} { ret {a: @10, b: @10}; }\n fn ret_ext_ext_mem() -> @{a: @int, b: @int} { ret @{a: @10, b: @10}; }\n \n fn main() {\n-    let int_i: int;\n-    let ext_i: @int;\n-    let int_rec: {a: int, b: int};\n-    let ext_rec: @{a: int, b: int};\n-    let ext_mem: {a: @int, b: @int};\n-    let ext_ext_mem: @{a: @int, b: @int};\n+    let mut int_i: int;\n+    let mut ext_i: @int;\n+    let mut int_rec: {a: int, b: int};\n+    let mut ext_rec: @{a: int, b: int};\n+    let mut ext_mem: {a: @int, b: @int};\n+    let mut ext_ext_mem: @{a: @int, b: @int};\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing"}, {"sha": "d2824bb73e4ece519eb8538df3a5c490205078e8", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // Regression test for issue #152.\n fn main() {\n-    let b: uint = 1u;\n+    let mut b: uint = 1u;\n     while b <= 32u {\n         0u << b;\n         b <<= 1u;"}, {"sha": "f277498201da68c9dfc9fda450e3fbd5db5c99c1", "filename": "src/test/run-pass/paren-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fparen-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fparen-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparen-free.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n     let x = true;\n-    if x { let i = 10; while i > 0 { i -= 1; } }\n+    if x { let mut i = 10; while i > 0 { i -= 1; } }\n     alt x { true { #debug(\"right\"); } false { #debug(\"wrong\"); } }\n }"}, {"sha": "ef7a8ae1ed7aebae17da206e21483b665f879ffb", "filename": "src/test/run-pass/regions-self-in-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-in-enums.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@ enum int_wrapper {\n fn main() {\n     let x = 3;\n     let y = int_wrapper_ctor(&x);\n-    let z : &int;\n+    let mut z : &int;\n     alt y {\n         int_wrapper_ctor(zz) { z = zz; }\n     }"}, {"sha": "7362feaef63afc6254d92ee1d1e0cf50f33cdc2e", "filename": "src/test/run-pass/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshadow.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n // -*- rust -*-\n fn foo(c: [int]) {\n     let a: int = 5;\n-    let b: [int] = [];\n+    let mut b: [int] = [];\n \n \n     alt none::<int> {"}, {"sha": "7526a7ed169137d5da9f718864b11f83b40c1645", "filename": "src/test/run-pass/simple-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fsimple-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimple-infer.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,3 +1,3 @@\n \n \n-fn main() { let n; n = 1; log(debug, n); }\n+fn main() { let mut n; n = 1; log(debug, n); }"}, {"sha": "a7daf058abec8469ee900d65254881acb1b6be2a", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -13,6 +13,6 @@ fn main() {\n     task::spawn {|| x(\"hello from first spawned fn\", 65); };\n     task::spawn {|| x(\"hello from second spawned fn\", 66); };\n     task::spawn {|| x(\"hello from third spawned fn\", 67); };\n-    let i: int = 30;\n+    let mut i: int = 30;\n     while i > 0 { i = i - 1; #debug(\"parent sleeping\"); yield(); }\n }"}, {"sha": "c7eb7ae4a340cd8803b3fa31b8e41ee0ad8742ec", "filename": "src/test/run-pass/static-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstatic-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstatic-impl.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -12,7 +12,7 @@ mod b {\n impl util for uint {\n     fn str() -> str { uint::str(self) }\n     fn times(f: fn(uint)) {\n-        let c = 0u;\n+        let mut c = 0u;\n         while c < self { f(c); c += 1u; }\n     }\n }\n@@ -21,7 +21,7 @@ impl util<T> for [T] {\n     fn length() -> uint { vec::len(self) }\n     fn iter(f: fn(T)) { for x in self { f(x); } }\n     fn map<U>(f: fn(T) -> U) -> [U] {\n-        let r = [];\n+        let mut r = [];\n         for elt in self { r += [f(elt)]; }\n         r\n     }\n@@ -36,7 +36,7 @@ fn main() {\n     assert [1].length().str() == \"1\";\n     assert [3, 4].map({|a| a + 4})[0] == 7;\n     assert [3, 4].map::<uint>({|a| a as uint + 4u})[0] == 7u;\n-    let x = 0u;\n+    let mut x = 0u;\n     10u.times {|_n| x += 2u;}\n     assert x == 20u;\n }"}, {"sha": "03cda225bf6f1cd78a8f0426b77f9e15e6628898", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@ use std;\n import str;\n \n fn test1() {\n-    let s: str = \"hello\";\n+    let mut s: str = \"hello\";\n     s += \"world\";\n     log(debug, s);\n     assert (s[9] == 'd' as u8);"}, {"sha": "eca411a35aa14c08e76d016bc806d3fb8dce8662", "filename": "src/test/run-pass/str-growth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstr-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstr-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-growth.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let s = \"a\";\n+    let mut s = \"a\";\n     s += \"b\";\n     assert (s[0] == 'a' as u8);\n     assert (s[1] == 'b' as u8);"}, {"sha": "c293c8741e2830dc6aca5e07de45531c036aafd6", "filename": "src/test/run-pass/string-self-append.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fstring-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstring-self-append.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,9 +3,9 @@ import str;\n \n fn main() {\n     // Make sure we properly handle repeated self-appends.\n-    let a: str = \"A\";\n-    let i = 20;\n-    let expected_len = 1u;\n+    let mut a: str = \"A\";\n+    let mut i = 20;\n+    let mut expected_len = 1u;\n     while i > 0 {\n         log(error, str::len(a));\n         assert (str::len(a) == expected_len);"}, {"sha": "5cab30e86315ba30249847c130ee85be8b5f57a7", "filename": "src/test/run-pass/swap-1.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fswap-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fswap-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-1.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1 +1,4 @@\n-fn main() { let x = 3; let y = 7; x <-> y; assert (x == 7); assert (y == 3); }\n+fn main() {\n+    let mut x = 3; let mut y = 7;\n+    x <-> y; assert (x == 7); assert (y == 3);\n+}"}, {"sha": "c9a599fb73f76abefda5927f9fe82d38a21e0a82", "filename": "src/test/run-pass/swap-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fswap-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fswap-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,7 +5,7 @@ fn main() {\n     swap(a, 2, 4);\n     assert (a[2] == 4);\n     assert (a[4] == 2);\n-    let n = 42;\n+    let mut n = 42;\n     n <-> a[0];\n     assert (a[0] == 42);\n     assert (n == 0);"}, {"sha": "75c282e7a90a5002c7c039d1cd1a9e93999cc486", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -21,7 +21,7 @@ fn test05() {\n     let po = comm::port();\n     let ch = comm::chan(po);\n     task::spawn {|| test05_start(ch); };\n-    let value = comm::recv(po);\n+    let mut value = comm::recv(po);\n     log(error, value);\n     value = comm::recv(po);\n     log(error, value);"}, {"sha": "907b4fc769d01d6668003af88f96e49a6de20732", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,8 +6,8 @@ fn start(c: comm::chan<comm::chan<str>>) {\n     let p = comm::port();\n     comm::send(c, comm::chan(p));\n \n-    let a;\n-    let b;\n+    let mut a;\n+    let mut b;\n     a = comm::recv(p);\n     assert a == \"A\";\n     log(error, a);"}, {"sha": "ba5184570f2da88f5d7806b6ad1f1d3c6f32c091", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -12,7 +12,7 @@ fn test00() {\n     task::run(builder) {|| start(i); };\n \n     // Sleep long enough for the task to finish.\n-    let i = 0;\n+    let mut i = 0;\n     while i < 10000 {\n         task::yield();\n         i += 1;"}, {"sha": "eb8ffc6b8a83d782b69a980889e0e970999df235", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,7 +4,7 @@ import comm;\n import comm::send;\n \n fn start(c: comm::chan<int>, start: int, number_of_messages: int) {\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages { send(c, start + i); i += 1; }\n }\n "}, {"sha": "4a6ae05fccb53be7612f2760c6356c5f89f4c2f5", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -7,7 +7,7 @@ fn main() {\n     let ch = comm::chan(po);\n \n     // Spawn 10 tasks each sending us back one int.\n-    let i = 10;\n+    let mut i = 10;\n     while (i > 0) {\n         log(debug, i);\n         task::spawn {|| child(i, ch); };\n@@ -18,7 +18,7 @@ fn main() {\n     // anything back, so we deadlock here.\n \n     i = 10;\n-    let value = 0;\n+    let mut value = 0;\n     while (i > 0) {\n         log(debug, i);\n         value = comm::recv(po);"}, {"sha": "952306bebe1b3742027d5841d88ad8a5bf7aee9e", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,7 +4,7 @@ import comm;\n import task;\n \n fn start(c: comm::chan<int>, i0: int) {\n-    let i = i0;\n+    let mut i = i0;\n     while i > 0 {\n         comm::send(c, 0);\n         i = i - 1;"}, {"sha": "b79134505c9b52261bbcb73670a510366277c115", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -15,7 +15,7 @@ fn test_rec() {\n     let ch = chan(po);\n     let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n     send(ch, r0);\n-    let r1: r;\n+    let mut r1: r;\n     r1 = recv(po);\n     assert (r1.val0 == 0);\n     assert (r1.val1 == 1u8);\n@@ -53,7 +53,7 @@ fn test_tag() {\n     send(ch, tag2(10));\n     send(ch, tag3(10, 11u8, 'A'));\n     // FIXME: Do port semantics really guarantee these happen in order?\n-    let t1: t;\n+    let mut t1: t;\n     t1 = recv(po);\n     assert (t1 == tag1);\n     t1 = recv(po);\n@@ -72,7 +72,7 @@ fn test_chan() {\n     // Does the transmitted channel still work?\n \n     send(ch1, 10);\n-    let i: int;\n+    let mut i: int;\n     i = recv(po0);\n     assert (i == 10);\n }"}, {"sha": "648b6ba7fa3ead4e2154122e0dadf482dd4676fe", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -9,7 +9,7 @@ fn main() { #debug(\"===== WITHOUT THREADS =====\"); test00(); }\n \n fn test00_start(ch: chan<int>, message: int, count: int) {\n     #debug(\"Starting test00_start\");\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < count {\n         #debug(\"Sending Message\");\n         send(ch, message + 0);\n@@ -27,10 +27,10 @@ fn test00() {\n     let po = comm::port();\n     let ch = chan(po);\n \n-    let i: int = 0;\n+    let mut i: int = 0;\n \n     // Create and spawn tasks...\n-    let results = [];\n+    let mut results = [];\n     while i < number_of_tasks {\n         let builder = task::task_builder();\n         results += [task::future_result(builder)];\n@@ -41,7 +41,7 @@ fn test00() {\n     }\n \n     // Read from spawned tasks...\n-    let sum = 0;\n+    let mut sum = 0;\n     for r in results {\n         i = 0;\n         while i < number_of_messages {"}, {"sha": "f7de33c63d62d593f2dfac911e18b1cff14046d9", "filename": "src/test/run-pass/task-comm-4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-4.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,8 +5,8 @@ import comm::send;\n fn main() { test00(); }\n \n fn test00() {\n-    let r: int = 0;\n-    let sum: int = 0;\n+    let mut r: int = 0;\n+    let mut sum: int = 0;\n     let p = comm::port();\n     let c = comm::chan(p);\n     send(c, 1);"}, {"sha": "a0d4f4595bece7885912817827cd732897c477df", "filename": "src/test/run-pass/task-comm-5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-5.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,11 +5,11 @@ fn main() { test00(); }\n \n fn test00() {\n     let r: int = 0;\n-    let sum: int = 0;\n+    let mut sum: int = 0;\n     let p = comm::port();\n     let c = comm::chan(p);\n     let number_of_messages: int = 1000;\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n     i = 0;\n     while i < number_of_messages { sum += comm::recv(p); i += 1; }"}, {"sha": "b363b25e864aab5a90bdf820e947944307b4130a", "filename": "src/test/run-pass/task-comm-6.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-6.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -7,15 +7,15 @@ import comm::recv;\n fn main() { test00(); }\n \n fn test00() {\n-    let r: int = 0;\n-    let sum: int = 0;\n+    let mut r: int = 0;\n+    let mut sum: int = 0;\n     let p = comm::port();\n     let c0 = chan(p);\n     let c1 = chan(p);\n     let c2 = chan(p);\n     let c3 = chan(p);\n     let number_of_messages: int = 1000;\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages {\n         send(c0, i + 0);\n         send(c1, i + 0);"}, {"sha": "61ce4009c211f1371b15b607ceda8c412d39a0ca", "filename": "src/test/run-pass/task-comm-7.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-7.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,13 +5,13 @@ import comm;\n fn main() { test00(); }\n \n fn test00_start(c: comm::chan<int>, start: int, number_of_messages: int) {\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages { comm::send(c, start + i); i += 1; }\n }\n \n fn test00() {\n-    let r: int = 0;\n-    let sum: int = 0;\n+    let mut r: int = 0;\n+    let mut sum: int = 0;\n     let p = comm::port();\n     let number_of_messages: int = 10;\n     let c = comm::chan(p);\n@@ -29,7 +29,7 @@ fn test00() {\n         test00_start(c, number_of_messages * 3, number_of_messages);\n     }\n \n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages {\n         r = comm::recv(p);\n         sum += r;"}, {"sha": "4cab65639b17bed98c03f8f4deee8b6667f01f18", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -5,13 +5,13 @@ import comm;\n fn main() { test00(); }\n \n fn test00_start(c: comm::chan<int>, number_of_messages: int) {\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages { comm::send(c, i + 0); i += 1; }\n }\n \n fn test00() {\n     let r: int = 0;\n-    let sum: int = 0;\n+    let mut sum: int = 0;\n     let p = comm::port();\n     let number_of_messages: int = 10;\n     let ch = comm::chan(p);\n@@ -22,7 +22,7 @@ fn test00() {\n         test00_start(ch, number_of_messages);\n     }\n \n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < number_of_messages {\n         sum += comm::recv(p);\n         log(debug, r);"}, {"sha": "a39d1b6b7fa5d3d3dafc3cf402aebc7d343a7c3d", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -19,7 +19,7 @@ fn main() {\n \n fn test00_start(ch: chan<int>, message: int, count: int) {\n     #debug(\"Starting test00_start\");\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < count {\n         #debug(\"Sending Message\");\n         send(ch, message + 0);\n@@ -36,16 +36,16 @@ fn test00() {\n     let po = port();\n     let ch = chan(po);\n \n-    let i: int = 0;\n+    let mut i: int = 0;\n \n-    let results = [];\n+    let mut results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n         let builder = task::task_builder();\n         results += [task::future_result(builder)];\n         task::run(builder) {|| test00_start(ch, i, number_of_messages);}\n     }\n-    let sum: int = 0;\n+    let mut sum: int = 0;\n     for r in results {\n         i = 0;\n         while i < number_of_messages { sum += recv(po); i = i + 1; }\n@@ -79,14 +79,14 @@ fn test02() {\n \n fn test04_start() {\n     #debug(\"Started task\");\n-    let i: int = 1024 * 1024;\n+    let mut i: int = 1024 * 1024;\n     while i > 0 { i = i - 1; }\n     #debug(\"Finished task\");\n }\n \n fn test04() {\n     #debug(\"Spawning lots of tasks.\");\n-    let i: int = 4;\n+    let mut i: int = 4;\n     while i > 0 { i = i - 1; task::spawn {|| test04_start(); }; }\n     #debug(\"Finishing up.\");\n }\n@@ -103,7 +103,7 @@ fn test05() {\n     let po = comm::port();\n     let ch = chan(po);\n     task::spawn {|| test05_start(ch); };\n-    let value: int;\n+    let mut value: int;\n     value = recv(po);\n     value = recv(po);\n     value = recv(po);\n@@ -112,7 +112,7 @@ fn test05() {\n \n fn test06_start(&&task_number: int) {\n     #debug(\"Started task.\");\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < 1000000 { i = i + 1; }\n     #debug(\"Finished task.\");\n }\n@@ -121,9 +121,9 @@ fn test06() {\n     let number_of_tasks: int = 4;\n     #debug(\"Creating tasks\");\n \n-    let i: int = 0;\n+    let mut i: int = 0;\n \n-    let results = [];\n+    let mut results = [];\n     while i < number_of_tasks {\n         i = i + 1;\n         let builder = task::task_builder();"}, {"sha": "aee8b9ab641817147efbe07d247e72645dcd6746", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,7 +6,7 @@ use std;\n \n fn test_break() { loop { let x: @int = break; } }\n \n-fn test_cont() { let i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n+fn test_cont() { let mut i = 0; while i < 1 { i += 1; let x: @int = cont; } }\n \n fn test_ret() { let x: @int = ret; }\n "}, {"sha": "aa55b47d40dc849d30c4024e0f826840f6e2a28c", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,7 +4,7 @@ use std;\n import task;\n \n fn main() {\n-    let i = 10;\n+    let mut i = 10;\n     while i > 0 { task::spawn {|| child(i); }; i = i - 1; }\n     #debug(\"main thread exiting\");\n }"}, {"sha": "3e84e34173312e1b259ebda4fc4414a70a6ee4b8", "filename": "src/test/run-pass/type-params-in-for-each.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-params-in-for-each.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn range(lo: uint, hi: uint, it: fn(uint)) {\n-    let lo_ = lo;\n+    let mut lo_ = lo;\n     while lo_ < hi { it(lo_); lo_ += 1u; }\n }\n "}, {"sha": "8c1c3ef7a705d57acee7ecfd93d12f180593f9ee", "filename": "src/test/run-pass/typestate-cfg-nesting.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypestate-cfg-nesting.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,9 +1,12 @@\n \n \n-fn f() { let x = 10; let y = 11; if true { alt x { _ { y = x; } } } else { } }\n+fn f() {\n+    let x = 10; let mut y = 11;\n+    if true { alt x { _ { y = x; } } } else { }\n+}\n \n fn main() {\n     let x = 10;\n-    let y = 11;\n+    let mut y = 11;\n     if true { while false { y = x; } } else { }\n }"}, {"sha": "0606f86dc44a86315061296486449c64760ae98f", "filename": "src/test/run-pass/u32-decr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu32-decr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let word: u32 = 200000u32;\n+    let mut word: u32 = 200000u32;\n     word = word - 1u32;\n     assert (word == 199999u32);\n }"}, {"sha": "beb4495ad93c843c3c0cf4ebb8958d06fbce696b", "filename": "src/test/run-pass/u8-incr-decr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,9 +6,9 @@\n // These constants were chosen because they aren't used anywhere\n // in the rest of the generated code so they're easily grep-able.\n fn main() {\n-    let x: u8 = 19u8; // 0x13\n+    let mut x: u8 = 19u8; // 0x13\n \n-    let y: u8 = 35u8; // 0x23\n+    let mut y: u8 = 35u8; // 0x23\n \n     x = x + 7u8; // 0x7\n "}, {"sha": "671f1aee570deeb713bcefaf51858f854489ba1e", "filename": "src/test/run-pass/u8-incr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let x: u8 = 12u8;\n+    let mut x: u8 = 12u8;\n     let y: u8 = 12u8;\n     x = x + 1u8;\n     x = x - 1u8;"}, {"sha": "2ae6ea8d2893d930df25ded4072a49e88a2a36be", "filename": "src/test/run-pass/unique-assign-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-copy.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let i = ~mutable 1;\n     // Should be a copy\n-    let j;\n+    let mut j;\n     j = i;\n     *i = 2;\n     *j = 3;"}, {"sha": "b8728a10bd8ee9bb3a2a743932db9067cebee4c9", "filename": "src/test/run-pass/unique-assign-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign-drop.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let i = ~1;\n-    let j = ~2;\n+    let mut j = ~2;\n     // Should drop the previous value of j\n     j = i;\n     assert *j == 1;"}, {"sha": "282861adcb7daf63ece849a7506abfd2ecd9deed", "filename": "src/test/run-pass/unique-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-assign.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let i;\n+    let mut i;\n     i = ~1;\n     assert *i == 1;\n }\n\\ No newline at end of file"}, {"sha": "8d9386d70fff70d4d3dd6fdd75b1819e8ca39cda", "filename": "src/test/run-pass/unique-fn-arg-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-fn-arg-mut.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ fn f(&i: ~int) {\n }\n \n fn main() {\n-    let i = ~100;\n+    let mut i = ~100;\n     f(i);\n     assert *i == 200;\n }\n\\ No newline at end of file"}, {"sha": "677a28293729ec4e45bdfb9c49538bda496a8b6e", "filename": "src/test/run-pass/unique-move-temp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-move-temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move-temp.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,5 +1,5 @@\n fn main() {\n-    let i;\n+    let mut i;\n     i <- ~100;\n     assert *i == 100;\n }\n\\ No newline at end of file"}, {"sha": "5dde8eff44e60f08f16c41fcc43e687539f3c945", "filename": "src/test/run-pass/unique-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-move.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let i = ~100;\n-    let j;\n+    let mut j;\n     j <- i;\n     assert *j == 100;\n }\n\\ No newline at end of file"}, {"sha": "945bf250af29ec8a7bdc895bc8a4821ee6ce8ebb", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -11,13 +11,13 @@ fn main() {\n     let p = comm::port();\n     let ch = comm::chan(p);\n     let n = 100u;\n-    let expected = 0u;\n+    let mut expected = 0u;\n     uint::range(0u, n) {|i|\n         task::spawn {|| child(ch, i); };\n         expected += i;\n     }\n \n-    let actual = 0u;\n+    let mut actual = 0u;\n     uint::range(0u, n) {|_i|\n         let j = comm::recv(p);\n         actual += *j;"}, {"sha": "5b9fb5c036ebdb03ee37c9dbb59125811a54fe3c", "filename": "src/test/run-pass/unique-swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funique-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-swap.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n-    let i = ~100;\n-    let j = ~200;\n+    let mut i = ~100;\n+    let mut j = ~200;\n     i <-> j;\n     assert i == ~200;\n     assert j == ~100;"}, {"sha": "7fb752423497fe49cb099724222423ace931e69d", "filename": "src/test/run-pass/unit.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funit.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -4,4 +4,9 @@\n // -*- rust -*-\n fn f(u: ()) { ret u; }\n \n-fn main() { let u1: () = (); let u2: () = f(u1); u2 = (); ret (); }\n+fn main() {\n+    let u1: () = ();\n+    let mut u2: () = f(u1);\n+    u2 = ();\n+    ret ();\n+}"}, {"sha": "5b3a65bee01cfba6359a52f6b5305f8926ba6b66", "filename": "src/test/run-pass/unreachable-code.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Funreachable-code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funreachable-code.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -40,7 +40,7 @@ fn rec_ret() { let _r = {c: ret}; }\n fn vec_ret() { let _v = [1, 2, ret, 4]; }\n \n fn fail_then_concat() {\n-    let x = [], y = [3];\n+    let mut x = [], y = [3];\n     fail;\n     x += y;\n     \"good\" + \"bye\";"}, {"sha": "3280e61b855496fca8d3b39125a5252078cd1688", "filename": "src/test/run-pass/use-uninit-alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn foo<T>(o: myoption<T>) -> int {\n-    let x: int = 5;\n+    let mut x: int = 5;\n     alt o { none::<T> { } some::<T>(t) { x += 1; } }\n     ret x;\n }"}, {"sha": "283c4c630a380457383919f1b0817505dcd73949", "filename": "src/test/run-pass/use-uninit-alt2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-uninit-alt2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn foo<T>(o: myoption<T>) -> int {\n-    let x: int;\n+    let mut x: int;\n     alt o { none::<T> { fail; } some::<T>(t) { x = 5; } }\n     ret x;\n }"}, {"sha": "b9f3f5688b66f193c344b1011d20825dacfdfff8", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -30,7 +30,7 @@ fn main() {\n     assert (oo as int == 0xd6);\n \n     fn check_str_eq(a: str, b: str) {\n-        let i: int = 0;\n+        let mut i: int = 0;\n         for ab: u8 in a {\n             log(debug, i);\n             log(debug, ab);"}, {"sha": "99842f2ebc7f187cdf48270810bf2d9aec6f8235", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -19,7 +19,7 @@ fn main() {\n     assert (!str::is_utf8([0xc0_u8]));\n     assert (!str::is_utf8([0xc0_u8, 0x10_u8]));\n \n-    let stack = \"a\u00d7c\u20ac\";\n+    let mut stack = \"a\u00d7c\u20ac\";\n     assert (str::pop_char(stack) == '\u20ac');\n     assert (str::pop_char(stack) == 'c');\n     str::push_char(stack, 'u');"}, {"sha": "343004c81c28be78f38cd57f769ea1f413369228", "filename": "src/test/run-pass/vec-growth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-growth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-growth.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let v = [1];\n+    let mut v = [1];\n     v += [2];\n     v += [3];\n     v += [4];"}, {"sha": "a2571b57b7a1f4f73ce0be4e5a44a7662d672158", "filename": "src/test/run-pass/vec-ivec-deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-ivec-deadlock.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1 +1 @@\n-fn main() { let a = [1, 2, 3, 4, 5]; let b = [a, a]; b += b; }\n+fn main() { let a = [1, 2, 3, 4, 5]; let mut b = [a, a]; b += b; }"}, {"sha": "9b97ed092cd66623b531d03e8cb2661478e23299", "filename": "src/test/run-pass/vec-late-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-late-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-late-init.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,7 +1,7 @@\n \n \n fn main() {\n-    let later: [int];\n+    let mut later: [int];\n     if true { later = [1]; } else { later = [2]; }\n     log(debug, later[0]);\n }"}, {"sha": "56661e13a328152af89d5ee17a585edb1f5e9c9c", "filename": "src/test/run-pass/vec-push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-push.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,4 +2,4 @@\n \n fn push<T: copy>(&v: [const T], t: T) { v += [t]; }\n \n-fn main() { let v = [1, 2, 3]; push(v, 1); }\n+fn main() { let mut v = [1, 2, 3]; push(v, 1); }"}, {"sha": "e9e6cce4a87798b78733b591d0db394dea341258", "filename": "src/test/run-pass/vec-self-append.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec-self-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-self-append.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@ import vec;\n \n fn test_heap_to_heap() {\n     // a spills onto the heap\n-    let a = [0, 1, 2, 3, 4];\n+    let mut a = [0, 1, 2, 3, 4];\n     a += a;\n     assert (vec::len(a) == 10u);\n     assert (a[0] == 0);\n@@ -20,7 +20,7 @@ fn test_heap_to_heap() {\n \n fn test_stack_to_heap() {\n     // a is entirely on the stack\n-    let a = [0, 1, 2];\n+    let mut a = [0, 1, 2];\n     // a spills to the heap\n     a += a;\n     assert (vec::len(a) == 6u);\n@@ -34,9 +34,9 @@ fn test_stack_to_heap() {\n \n fn test_loop() {\n     // Make sure we properly handle repeated self-appends.\n-    let a: [int] = [0];\n-    let i = 20;\n-    let expected_len = 1u;\n+    let mut a: [int] = [0];\n+    let mut i = 20;\n+    let mut expected_len = 1u;\n     while i > 0 {\n         log(error, vec::len(a));\n         assert (vec::len(a) == expected_len);"}, {"sha": "f1cc97ab61aa0502d7f63b67742d5c094ab33b6e", "filename": "src/test/run-pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -6,7 +6,7 @@ fn main() {\n     let v: [int] = [10, 20];\n     assert (v[0] == 10);\n     assert (v[1] == 20);\n-    let x: int = 0;\n+    let mut x: int = 0;\n     assert (v[x] == 10);\n     assert (v[x + 1] == 20);\n     x = x + 1;"}, {"sha": "6da9397044ce3f5381103481f00b561a53fee826", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -36,9 +36,9 @@ fn zombiejesus() {\n }\n \n fn notsure() {\n-    let _x;\n-    let _y = (_x = 0) == (_x = 0);\n-    let _z = (_x <- 0) < (_x = 0);\n+    let mut _x;\n+    let mut _y = (_x = 0) == (_x = 0);\n+    let mut _z = (_x <- 0) < (_x = 0);\n     let _a = (_x += 0) == (_x = 0);\n     let _b = (_y <-> _z) == (_y <-> _z);\n }\n@@ -56,7 +56,7 @@ fn canttouchthis() -> uint {\n \n fn angrydome() {\n     loop { if break { } }\n-    let i = 0;\n+    let mut i = 0;\n     do  { i += 1; if i == 1 { alt cont { _ { } } } } while false\n }\n "}, {"sha": "c0dacbaf54941a24f2ada7a06f52f78766bba295", "filename": "src/test/run-pass/while-and-do-while.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-and-do-while.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,8 +1,8 @@\n \n \n fn main() {\n-    let x: int = 10;\n-    let y: int = 0;\n+    let mut x: int = 10;\n+    let mut y: int = 0;\n     while y < x { log(debug, y); #debug(\"hello\"); y = y + 1; }\n     do {\n         #debug(\"goodbye\");"}, {"sha": "24b0d530fc3f42c261366694e5f62ee314d168d9", "filename": "src/test/run-pass/while-cont.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-cont.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,6 +1,6 @@\n // Issue #825: Should recheck the loop contition after continuing\n fn main() {\n-    let i = 1;\n+    let mut i = 1;\n     while i > 0 {\n         assert (i > 0);\n         log(debug, i);"}, {"sha": "2293724739a1a4424439d40932210f763c1a34c4", "filename": "src/test/run-pass/while-loop-constraints-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-loop-constraints-2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -1,8 +1,8 @@\n fn main() {\n \n-    let y: int = 42;\n-    let z: int = 42;\n-    let x: int;\n+    let mut y: int = 42;\n+    let mut z: int = 42;\n+    let mut x: int;\n     while z < 50 {\n         z += 1;\n         while false { x <- y; y = z; }"}, {"sha": "9e4a2a170b7f157610cf5458a1b04d29f3d29c9d", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,15 +3,15 @@ enum t { a, b(str), }\n \n fn make(i: int) -> t {\n     if i > 10 { ret a; }\n-    let s = \"hello\";\n+    let mut s = \"hello\";\n     // Ensure s is non-const.\n \n     s += \"there\";\n     ret b(s);\n }\n \n fn main() {\n-    let i = 0;\n+    let mut i = 0;\n \n \n     // The auto slot for the result of make(i) should not leak."}, {"sha": "24907f948dc6092ed4e905c18fc155fdc8f1c378", "filename": "src/test/run-pass/while-with-break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-with-break.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -3,7 +3,7 @@\n \n // -*- rust -*-\n fn main() {\n-    let i: int = 90;\n+    let mut i: int = 90;\n     while i < 100 {\n         log(debug, i);\n         i = i + 1;"}, {"sha": "816b08db72401ebe2d0a9de0df6de4cbf1482d3d", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -7,7 +7,7 @@ type point = {x: int, y: int, mutable z: int};\n fn f(&p: point) { p.z = 13; }\n \n fn main() {\n-    let x: point = {x: 10, y: 11, mutable z: 12};\n+    let mut x: point = {x: 10, y: 11, mutable z: 12};\n     f(x);\n     assert (x.z == 13);\n }"}, {"sha": "a01e311daa870e53aa1d80c6692691609894bd6f", "filename": "src/test/run-pass/yield2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fyield2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc07280b087c89506ad7e5f66f4f88b18d06be2e/src%2Ftest%2Frun-pass%2Fyield2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield2.rs?ref=dc07280b087c89506ad7e5f66f4f88b18d06be2e", "patch": "@@ -2,6 +2,6 @@\n use std;\n \n fn main() {\n-    let i: int = 0;\n+    let mut i: int = 0;\n     while i < 100 { i = i + 1; log(error, i); task::yield(); }\n }"}]}