{"sha": "e1e6a7aa7a88d53643a13176df1408ed67c5431a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZTZhN2FhN2E4OGQ1MzY0M2ExMzE3NmRmMTQwOGVkNjdjNTQzMWE=", "commit": {"author": {"name": "abhijeetbhagat", "email": "abhijeet.bhagat@gmx.com", "date": "2017-01-04T08:57:19Z"}, "committer": {"name": "abhijeetbhagat", "email": "abhijeet.bhagat@gmx.com", "date": "2017-01-04T08:57:19Z"}, "message": "Fix formatting", "tree": {"sha": "ddf831f899a98fe032de4b2df0040f09bb2b6362", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddf831f899a98fe032de4b2df0040f09bb2b6362"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e6a7aa7a88d53643a13176df1408ed67c5431a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e6a7aa7a88d53643a13176df1408ed67c5431a", "html_url": "https://github.com/rust-lang/rust/commit/e1e6a7aa7a88d53643a13176df1408ed67c5431a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e6a7aa7a88d53643a13176df1408ed67c5431a/comments", "author": {"login": "abhijeetbhagat", "id": 9682848, "node_id": "MDQ6VXNlcjk2ODI4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/9682848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhijeetbhagat", "html_url": "https://github.com/abhijeetbhagat", "followers_url": "https://api.github.com/users/abhijeetbhagat/followers", "following_url": "https://api.github.com/users/abhijeetbhagat/following{/other_user}", "gists_url": "https://api.github.com/users/abhijeetbhagat/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhijeetbhagat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhijeetbhagat/subscriptions", "organizations_url": "https://api.github.com/users/abhijeetbhagat/orgs", "repos_url": "https://api.github.com/users/abhijeetbhagat/repos", "events_url": "https://api.github.com/users/abhijeetbhagat/events{/privacy}", "received_events_url": "https://api.github.com/users/abhijeetbhagat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "abhijeetbhagat", "id": 9682848, "node_id": "MDQ6VXNlcjk2ODI4NDg=", "avatar_url": "https://avatars.githubusercontent.com/u/9682848?v=4", "gravatar_id": "", "url": "https://api.github.com/users/abhijeetbhagat", "html_url": "https://github.com/abhijeetbhagat", "followers_url": "https://api.github.com/users/abhijeetbhagat/followers", "following_url": "https://api.github.com/users/abhijeetbhagat/following{/other_user}", "gists_url": "https://api.github.com/users/abhijeetbhagat/gists{/gist_id}", "starred_url": "https://api.github.com/users/abhijeetbhagat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/abhijeetbhagat/subscriptions", "organizations_url": "https://api.github.com/users/abhijeetbhagat/orgs", "repos_url": "https://api.github.com/users/abhijeetbhagat/repos", "events_url": "https://api.github.com/users/abhijeetbhagat/events{/privacy}", "received_events_url": "https://api.github.com/users/abhijeetbhagat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d910837e781c32f53eced88334694e1848b033eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d910837e781c32f53eced88334694e1848b033eb", "html_url": "https://github.com/rust-lang/rust/commit/d910837e781c32f53eced88334694e1848b033eb"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "7fb30847a9f4be7d66df50074780f42ac971abd2", "filename": "src/libstd/process.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e1e6a7aa7a88d53643a13176df1408ed67c5431a/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e6a7aa7a88d53643a13176df1408ed67c5431a/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=e1e6a7aa7a88d53643a13176df1408ed67c5431a", "patch": "@@ -932,7 +932,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn smoke() {\n-        let p = if cfg!(target_os = \"windows\"){\n+        let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).spawn()\n         } else {\n             Command::new(\"true\").spawn()\n@@ -954,7 +954,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn exit_reported_right() {\n-        let p = if cfg!(target_os = \"windows\"){\n+        let p = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn()\n         } else {\n             Command::new(\"false\").spawn()\n@@ -997,7 +997,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn stdout_works() {\n-        if cfg!(target_os = \"windows\"){\n+        if cfg!(target_os = \"windows\") {\n             let mut cmd = Command::new(\"cmd\");\n             cmd.args(&[\"/C\", \"echo foobar\"]).stdout(Stdio::piped());\n             assert_eq!(run_output(cmd), \"foobar\\r\\n\");\n@@ -1065,14 +1065,14 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_status() {\n-        let mut status = if cfg!(target_os = \"windows\"){\n+        let mut status = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).status().unwrap()\n         } else {\n             Command::new(\"false\").status().unwrap()\n         };\n         assert!(status.code() == Some(1));\n \n-        status = if cfg!(target_os = \"windows\"){\n+        status = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 0\"]).status().unwrap()\n         } else {\n             Command::new(\"true\").status().unwrap()\n@@ -1092,7 +1092,7 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_output() {\n         let Output {status, stdout, stderr}\n-             = if cfg!(target_os = \"windows\"){\n+             = if cfg!(target_os = \"windows\") {\n                  Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).output().unwrap()\n              } else {\n                  Command::new(\"echo\").arg(\"hello\").output().unwrap()\n@@ -1108,7 +1108,7 @@ mod tests {\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_process_output_error() {\n         let Output {status, stdout, stderr}\n-             = if cfg!(target_os = \"windows\"){\n+             = if cfg!(target_os = \"windows\") {\n                  Command::new(\"cmd\").args(&[\"/C\", \"mkdir .\"]).output().unwrap()\n              } else {\n                  Command::new(\"mkdir\").arg(\".\").output().unwrap()\n@@ -1122,7 +1122,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_once() {\n-        let mut prog = if cfg!(target_os = \"windows\"){\n+        let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n         } else {\n             Command::new(\"false\").spawn().unwrap()\n@@ -1133,7 +1133,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_finish_twice() {\n-        let mut prog = if cfg!(target_os = \"windows\"){\n+        let mut prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"exit 1\"]).spawn().unwrap()\n         } else {\n             Command::new(\"false\").spawn().unwrap()\n@@ -1145,7 +1145,7 @@ mod tests {\n     #[test]\n     #[cfg_attr(target_os = \"android\", ignore)]\n     fn test_wait_with_output_once() {\n-        let prog = if cfg!(target_os = \"windows\"){\n+        let prog = if cfg!(target_os = \"windows\") {\n             Command::new(\"cmd\").args(&[\"/C\", \"echo hello\"]).stdout(Stdio::piped()).spawn().unwrap()\n         } else {\n             Command::new(\"echo\").arg(\"hello\").stdout(Stdio::piped()).spawn().unwrap()"}]}