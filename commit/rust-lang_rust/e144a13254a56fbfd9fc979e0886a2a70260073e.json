{"sha": "e144a13254a56fbfd9fc979e0886a2a70260073e", "node_id": "C_kwDOAAsO6NoAKGUxNDRhMTMyNTRhNTZmYmZkOWZjOTc5ZTA4ODZhMmE3MDI2MDA3M2U", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-12-29T09:52:46Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2023-01-28T14:49:22Z"}, "message": "Replace `object_safety_violations().is_empty()` calls with `is_object_safe`", "tree": {"sha": "befd7d61bccccdc0807c6f57d66cc3fdf5da9233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/befd7d61bccccdc0807c6f57d66cc3fdf5da9233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e144a13254a56fbfd9fc979e0886a2a70260073e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e144a13254a56fbfd9fc979e0886a2a70260073e", "html_url": "https://github.com/rust-lang/rust/commit/e144a13254a56fbfd9fc979e0886a2a70260073e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e144a13254a56fbfd9fc979e0886a2a70260073e/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8da51366817317d19be9bd138943eafb30bc987", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8da51366817317d19be9bd138943eafb30bc987", "html_url": "https://github.com/rust-lang/rust/commit/d8da51366817317d19be9bd138943eafb30bc987"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "26cd383dd48fd53163cea9ef8a01a0b35ad9ff36", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=e144a13254a56fbfd9fc979e0886a2a70260073e", "patch": "@@ -834,7 +834,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         _ => {}\n     }\n     if !trait_should_be_self.is_empty() {\n-        if tcx.object_safety_violations(trait_def_id).is_empty() {\n+        if tcx.is_object_safe(trait_def_id) {\n             return;\n         }\n         let sugg = trait_should_be_self.iter().map(|span| (*span, \"Self\".to_string())).collect();"}, {"sha": "699e8805504c39996e8f3f7a08aa85c62b1b8341", "filename": "compiler/rustc_hir_typeck/src/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcoercion.rs?ref=e144a13254a56fbfd9fc979e0886a2a70260073e", "patch": "@@ -1823,7 +1823,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         .trait_ref()\n                         .and_then(|t| t.trait_def_id())\n                         .map_or(false, |def_id| {\n-                            fcx.tcx.object_safety_violations(def_id).is_empty()\n+                            fcx.tcx.is_object_safe(def_id)\n                         })\n                 })\n             }"}, {"sha": "342cefb99157db8b872ecf6489b7802e5f956eb2", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e144a13254a56fbfd9fc979e0886a2a70260073e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e144a13254a56fbfd9fc979e0886a2a70260073e", "patch": "@@ -1749,9 +1749,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let is_object_safe = match ty.kind() {\n             ty::Dynamic(predicates, _, ty::Dyn) => {\n                 // If the `dyn Trait` is not object safe, do not suggest `Box<dyn Trait>`.\n-                predicates\n-                    .principal_def_id()\n-                    .map_or(true, |def_id| self.tcx.object_safety_violations(def_id).is_empty())\n+                predicates.principal_def_id().map_or(true, |def_id| self.tcx.is_object_safe(def_id))\n             }\n             // We only want to suggest `impl Trait` to `dyn Trait`s.\n             // For example, `fn foo() -> str` needs to be filtered out."}]}