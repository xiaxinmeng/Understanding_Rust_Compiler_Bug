{"sha": "d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5Y2RkZGViNWY4MGIxMTc2M2I2Zjk1ZmQ3ZWVjZGVmNzA1ZWQxMmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-06T00:26:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-06-06T00:26:52Z"}, "message": "stdlib: Introduce ord and eq interfaces. Make std::sort::quick_sort3 use them. i=#2348", "tree": {"sha": "1e0d78049cc7f06cf3a1310347cf16be5464aeb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e0d78049cc7f06cf3a1310347cf16be5464aeb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "html_url": "https://github.com/rust-lang/rust/commit/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c6dac47aa93d11b2d4c8deeded4626e23081e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c6dac47aa93d11b2d4c8deeded4626e23081e7", "html_url": "https://github.com/rust-lang/rust/commit/49c6dac47aa93d11b2d4c8deeded4626e23081e7"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "aea97cf1649f539042a10d9a72c622e15a3ce158", "filename": "src/libcore/cmp.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "patch": "@@ -0,0 +1,10 @@\n+#[doc=\"Interfaces used for comparison.\"]\n+\n+iface ord {\n+    fn lt(&&other: self) -> bool;\n+}\n+\n+iface eq {\n+    fn eq(&&other: self) -> bool;\n+}\n+"}, {"sha": "efcd424024a1c5db946cb3eb9af9bc9554c6d9d3", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "patch": "@@ -44,6 +44,7 @@ export extfmt;\n export tuple;\n export to_str;\n export dvec, dvec_iter;\n+export cmp;\n \n // NDM seems to be necessary for resolve to work\n export option_iter;\n@@ -152,6 +153,7 @@ mod tuple;\n \n // Ubiquitous-utility-type modules\n \n+mod cmp;\n mod either;\n mod iter;\n mod logging;"}, {"sha": "4011ac1a18a7d23e4511fda14bcd828664f05e0f", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "patch": "@@ -1,4 +1,5 @@\n import T = inst::T;\n+import cmp::{eq, ord};\n \n export min_value, max_value;\n export min, max;\n@@ -10,6 +11,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n+export ord, eq;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -108,6 +110,18 @@ fn to_str_bytes<U>(n: T, radix: uint, f: fn([u8]/&) -> U) -> U {\n #[doc = \"Convert to a string\"]\n fn str(i: T) -> str { ret to_str(i, 10u); }\n \n+impl ord of ord for T {\n+    fn lt(&&other: T) -> bool {\n+        ret self < other;\n+    }\n+}\n+\n+impl eq of eq for T {\n+    fn eq(&&other: T) -> bool {\n+        ret self == other;\n+    }\n+}\n+\n \n // FIXME: Has alignment issues on windows and 32-bit linux\n #[test]"}, {"sha": "7126fb3d007d335f57ae7b124052eec47c6cbb10", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "patch": "@@ -1,4 +1,5 @@\n import T = inst::T;\n+import cmp::{eq, ord};\n \n export min_value, max_value;\n export min, max;\n@@ -10,6 +11,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n+export ord, eq;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -49,6 +51,18 @@ pure fn compl(i: T) -> T {\n     max_value ^ i\n }\n \n+impl ord of ord for T {\n+    fn lt(&&other: T) -> bool {\n+        ret self < other;\n+    }\n+}\n+\n+impl eq of eq for T {\n+    fn eq(&&other: T) -> bool {\n+        ret self == other;\n+    }\n+}\n+\n #[doc = \"\n Parse a buffer of bytes\n "}, {"sha": "76c71d7ed2aa24d3b144b988dc637c4928332b65", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9cdddeb5f80b11763b6f95fd7eecdef705ed12d/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=d9cdddeb5f80b11763b6f95fd7eecdef705ed12d", "patch": "@@ -1,5 +1,6 @@\n #[doc = \"Sorting methods\"];\n import vec::len;\n+import int::{eq, ord};\n \n export le;\n export merge_sort;\n@@ -141,7 +142,6 @@ fn qsort3<T: copy>(compare_func_lt: le<T>, compare_func_eq: le<T>,\n     qsort3::<T>(compare_func_lt, compare_func_eq, arr, i, right);\n }\n \n-// FIXME: This should take lt and eq types (#2348)\n #[doc = \"\n Fancy quicksort. Sorts a mut vector in place.\n \n@@ -152,22 +152,17 @@ According to these slides this is the algorithm of choice for\n \n This is an unstable sort.\n \"]\n-fn quick_sort3<T: copy>(compare_func_lt: le<T>, compare_func_eq: le<T>,\n-                       arr: [mut T]) {\n+fn quick_sort3<T: copy ord eq>(arr: [mut T]) {\n     if len::<T>(arr) == 0u { ret; }\n-    qsort3::<T>(compare_func_lt, compare_func_eq, arr, 0,\n+    qsort3::<T>({ |x, y| x.lt(y) }, { |x, y| x.eq(y) }, arr, 0,\n                 (len::<T>(arr) as int) - 1);\n }\n \n #[cfg(test)]\n mod test_qsort3 {\n     fn check_sort(v1: [mut int], v2: [mut int]) {\n         let len = vec::len::<int>(v1);\n-        fn lt(&&a: int, &&b: int) -> bool { ret a < b; }\n-        fn equal(&&a: int, &&b: int) -> bool { ret a == b; }\n-        let f1 = lt;\n-        let f2 = equal;\n-        quick_sort3::<int>(f1, f2, v1);\n+        quick_sort3::<int>(v1);\n         let mut i = 0u;\n         while i < len {\n             log(debug, v2[i]);"}]}