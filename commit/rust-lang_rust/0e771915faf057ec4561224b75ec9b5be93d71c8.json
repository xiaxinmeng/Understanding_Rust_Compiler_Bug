{"sha": "0e771915faf057ec4561224b75ec9b5be93d71c8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlNzcxOTE1ZmFmMDU3ZWM0NTYxMjI0Yjc1ZWM5YjViZTkzZDcxYzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T08:42:58Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-20T08:46:44Z"}, "message": "Allow non-path default type parameters", "tree": {"sha": "3da030379556170d1d18235c234ae95bbe28fba4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3da030379556170d1d18235c234ae95bbe28fba4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e771915faf057ec4561224b75ec9b5be93d71c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e771915faf057ec4561224b75ec9b5be93d71c8", "html_url": "https://github.com/rust-lang/rust/commit/0e771915faf057ec4561224b75ec9b5be93d71c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e771915faf057ec4561224b75ec9b5be93d71c8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4340d9b0e435bde11c0cc79e9f284856a836ccdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4340d9b0e435bde11c0cc79e9f284856a836ccdc", "html_url": "https://github.com/rust-lang/rust/commit/4340d9b0e435bde11c0cc79e9f284856a836ccdc"}], "stats": {"total": 57, "additions": 38, "deletions": 19}, "files": [{"sha": "78fab1a13a7e2908b778ad96cdbf16efb7a053f4", "filename": "crates/ra_hir/src/generics.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fgenerics.rs?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -5,12 +5,9 @@\n \n use std::sync::Arc;\n \n-use hir_def::{\n-    path::Path,\n-    type_ref::{TypeBound, TypeRef},\n-};\n+use hir_def::type_ref::{TypeBound, TypeRef};\n use hir_expand::name::{self, AsName};\n-use ra_syntax::ast::{self, DefaultTypeParamOwner, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n+use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n@@ -24,7 +21,7 @@ pub struct GenericParam {\n     // FIXME: give generic params proper IDs\n     pub idx: u32,\n     pub name: Name,\n-    pub default: Option<Path>,\n+    pub default: Option<TypeRef>,\n }\n \n /// Data about the generic parameters of a function, struct, impl, etc.\n@@ -140,7 +137,7 @@ impl GenericParams {\n         for (idx, type_param) in params.type_params().enumerate() {\n             let name = type_param.name().map_or_else(Name::missing, |it| it.as_name());\n             // FIXME: Use `Path::from_src`\n-            let default = type_param.default_type().and_then(|t| t.path()).and_then(Path::from_ast);\n+            let default = type_param.default_type().map(TypeRef::from_ast);\n \n             let param = GenericParam { idx: idx as u32 + start, name: name.clone(), default };\n             self.params.push(param);"}, {"sha": "03db386055af9e303dda98f346aa245a094f1e3b", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -611,9 +611,7 @@ pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDef) ->\n     let defaults = generic_params\n         .params_including_parent()\n         .into_iter()\n-        .map(|p| {\n-            p.default.as_ref().map_or(Ty::Unknown, |path| Ty::from_hir_path(db, &resolver, path))\n-        })\n+        .map(|p| p.default.as_ref().map_or(Ty::Unknown, |t| Ty::from_hir(db, &resolver, t)))\n         .collect();\n \n     Substs(defaults)"}, {"sha": "abfaffb5e2acdf2cf8de47d5423bcc95a41a5c85", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -1979,6 +1979,30 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_associated_method_generics_with_default_tuple_param() {\n+    let t = type_at(\n+        r#\"\n+//- /main.rs\n+struct Gen<T=()> {\n+    val: T\n+}\n+\n+impl<T> Gen<T> {\n+    pub fn make() -> Gen<T> {\n+        loop { }\n+    }\n+}\n+\n+fn test() {\n+    let a = Gen::make();\n+    a.val<|>;\n+}\n+\"#,\n+    );\n+    assert_eq!(t, \"()\");\n+}\n+\n #[test]\n fn infer_associated_method_generics_without_args() {\n     assert_snapshot!("}, {"sha": "de506d7cdacf80a84de1fa600c8114ad00c08d76", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -3625,8 +3625,11 @@ impl AstNode for TypeParam {\n impl ast::NameOwner for TypeParam {}\n impl ast::AttrsOwner for TypeParam {}\n impl ast::TypeBoundsOwner for TypeParam {}\n-impl ast::DefaultTypeParamOwner for TypeParam {}\n-impl TypeParam {}\n+impl TypeParam {\n+    pub fn default_type(&self) -> Option<TypeRef> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,"}, {"sha": "f99984fe0f69c44f984ae2016b37829422dd949c", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -163,9 +163,3 @@ impl Iterator for CommentIter {\n         self.iter.by_ref().find_map(|el| el.into_token().and_then(ast::Comment::cast))\n     }\n }\n-\n-pub trait DefaultTypeParamOwner: AstNode {\n-    fn default_type(&self) -> Option<ast::PathType> {\n-        child_opt(self)\n-    }\n-}"}, {"sha": "88d1dc109bbc10395944221fbbca0817b068df7b", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/0e771915faf057ec4561224b75ec9b5be93d71c8/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=0e771915faf057ec4561224b75ec9b5be93d71c8", "patch": "@@ -587,7 +587,10 @@ Grammar(\n                 (\"lifetime_params\", \"LifetimeParam\" ),\n             ]\n         ),\n-        \"TypeParam\": ( traits: [\"NameOwner\", \"AttrsOwner\", \"TypeBoundsOwner\", \"DefaultTypeParamOwner\"] ),\n+        \"TypeParam\": (\n+            options: [(\"default_type\", \"TypeRef\")],\n+            traits: [\"NameOwner\", \"AttrsOwner\", \"TypeBoundsOwner\"],\n+        ),\n         \"LifetimeParam\": (\n             traits: [\"AttrsOwner\"],\n         ),"}]}