{"sha": "d7a041f6071a09bfcc5addcff4954985aef0bc31", "node_id": "C_kwDOAAsO6NoAKGQ3YTA0MWY2MDcxYTA5YmZjYzVhZGRjZmY0OTU0OTg1YWVmMGJjMzE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-01T07:14:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-16T01:17:15Z"}, "message": "Make `ExtCtxt::expr_lit` non-`pub`.\n\nBy using `expr_str` more and adding `expr_{char,byte_str}`.", "tree": {"sha": "37d35edbc18c7a00afb84b80614a8cee03f0042d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37d35edbc18c7a00afb84b80614a8cee03f0042d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7a041f6071a09bfcc5addcff4954985aef0bc31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7a041f6071a09bfcc5addcff4954985aef0bc31", "html_url": "https://github.com/rust-lang/rust/commit/d7a041f6071a09bfcc5addcff4954985aef0bc31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7a041f6071a09bfcc5addcff4954985aef0bc31/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d1e5a485c669aedc953e958b780877f0d934ae8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1e5a485c669aedc953e958b780877f0d934ae8", "html_url": "https://github.com/rust-lang/rust/commit/7d1e5a485c669aedc953e958b780877f0d934ae8"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "c0f35d122f8e66ac294db443b4735b56654ae2de", "filename": "compiler/rustc_builtin_macros/src/concat_bytes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fconcat_bytes.rs?ref=d7a041f6071a09bfcc5addcff4954985aef0bc31", "patch": "@@ -1,6 +1,5 @@\n use rustc_ast as ast;\n use rustc_ast::{ptr::P, tokenstream::TokenStream};\n-use rustc_data_structures::sync::Lrc;\n use rustc_errors::Applicability;\n use rustc_expand::base::{self, DummyResult};\n \n@@ -185,5 +184,5 @@ pub fn expand_concat_bytes(\n         return base::MacEager::expr(DummyResult::raw_expr(sp, true));\n     }\n     let sp = cx.with_def_site_ctxt(sp);\n-    base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(accumulator))))\n+    base::MacEager::expr(cx.expr_byte_str(sp, accumulator))\n }"}, {"sha": "5ab70e441b8149bc712d82f10c081cfd4b7c3702", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=d7a041f6071a09bfcc5addcff4954985aef0bc31", "patch": "@@ -52,7 +52,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n     // We want to make sure we have the ctxt set so that we can use unstable methods\n     let span = cx.with_def_site_ctxt(span);\n-    let name = cx.expr_lit(span, ast::LitKind::Str(ident.name, ast::StrStyle::Cooked));\n+    let name = cx.expr_str(span, ident.name);\n     let fmt = substr.nonselflike_args[0].clone();\n \n     // Struct and tuples are similar enough that we use the same code for both,\n@@ -89,10 +89,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         for i in 0..fields.len() {\n             let field = &fields[i];\n             if is_struct {\n-                let name = cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                );\n+                let name = cx.expr_str(field.span, field.name.unwrap().name);\n                 args.push(name);\n             }\n             // Use an extra indirection to make sure this works for unsized types.\n@@ -108,10 +105,7 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n \n         for field in fields {\n             if is_struct {\n-                name_exprs.push(cx.expr_lit(\n-                    field.span,\n-                    ast::LitKind::Str(field.name.unwrap().name, ast::StrStyle::Cooked),\n-                ));\n+                name_exprs.push(cx.expr_str(field.span, field.name.unwrap().name));\n             }\n \n             // Use an extra indirection to make sure this works for unsized types."}, {"sha": "08026c9d357846cc144cf718541b240a5a7aee05", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=d7a041f6071a09bfcc5addcff4954985aef0bc31", "patch": "@@ -923,7 +923,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 }\n \n                 // Build the format\n-                let fill = self.ecx.expr_lit(sp, ast::LitKind::Char(fill));\n+                let fill = self.ecx.expr_char(sp, fill);\n                 let align = |name| {\n                     let mut p = Context::rtpath(self.ecx, sym::Alignment);\n                     p.push(Ident::new(name, sp));"}, {"sha": "d78bbc3c932269c401400588536325cf2084c95a", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=d7a041f6071a09bfcc5addcff4954985aef0bc31", "patch": "@@ -216,7 +216,7 @@ pub fn expand_include_bytes(\n         }\n     };\n     match cx.source_map().load_binary_file(&file) {\n-        Ok(bytes) => base::MacEager::expr(cx.expr_lit(sp, ast::LitKind::ByteStr(bytes.into()))),\n+        Ok(bytes) => base::MacEager::expr(cx.expr_byte_str(sp, bytes)),\n         Err(e) => {\n             cx.span_err(sp, &format!(\"couldn't read {}: {}\", file.display(), e));\n             DummyResult::any(sp)"}, {"sha": "b971a63ec8977d303f1b37425137626c230c4230", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7a041f6071a09bfcc5addcff4954985aef0bc31/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=d7a041f6071a09bfcc5addcff4954985aef0bc31", "patch": "@@ -3,6 +3,7 @@ use crate::base::ExtCtxt;\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode, Expr, LocalKind, PatKind, UnOp};\n+use rustc_data_structures::sync::Lrc;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n \n@@ -330,23 +331,38 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_struct(span, self.path_ident(span, id), fields)\n     }\n \n-    pub fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n+    fn expr_lit(&self, span: Span, lit_kind: ast::LitKind) -> P<ast::Expr> {\n         let lit = ast::Lit::from_lit_kind(lit_kind, span);\n         self.expr(span, ast::ExprKind::Lit(lit))\n     }\n+\n     pub fn expr_usize(&self, span: Span, i: usize) -> P<ast::Expr> {\n         self.expr_lit(\n             span,\n             ast::LitKind::Int(i as u128, ast::LitIntType::Unsigned(ast::UintTy::Usize)),\n         )\n     }\n+\n     pub fn expr_u32(&self, sp: Span, u: u32) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Int(u as u128, ast::LitIntType::Unsigned(ast::UintTy::U32)))\n     }\n+\n     pub fn expr_bool(&self, sp: Span, value: bool) -> P<ast::Expr> {\n         self.expr_lit(sp, ast::LitKind::Bool(value))\n     }\n \n+    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n+    }\n+\n+    pub fn expr_char(&self, sp: Span, ch: char) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::Char(ch))\n+    }\n+\n+    pub fn expr_byte_str(&self, sp: Span, bytes: Vec<u8>) -> P<ast::Expr> {\n+        self.expr_lit(sp, ast::LitKind::ByteStr(Lrc::from(bytes)))\n+    }\n+\n     /// `[expr1, expr2, ...]`\n     pub fn expr_array(&self, sp: Span, exprs: Vec<P<ast::Expr>>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Array(exprs))\n@@ -357,10 +373,6 @@ impl<'a> ExtCtxt<'a> {\n         self.expr_addr_of(sp, self.expr_array(sp, exprs))\n     }\n \n-    pub fn expr_str(&self, sp: Span, s: Symbol) -> P<ast::Expr> {\n-        self.expr_lit(sp, ast::LitKind::Str(s, ast::StrStyle::Cooked))\n-    }\n-\n     pub fn expr_cast(&self, sp: Span, expr: P<ast::Expr>, ty: P<ast::Ty>) -> P<ast::Expr> {\n         self.expr(sp, ast::ExprKind::Cast(expr, ty))\n     }"}]}