{"sha": "dce460028e9c21ebadb28f6744d4b10bf0e8d501", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZTQ2MDAyOGU5YzIxZWJhZGIyOGY2NzQ0ZDRiMTBiZjBlOGQ1MDE=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-29T18:11:53Z"}, "committer": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2016-10-31T20:12:59Z"}, "message": "detect gdb version & rust support in compiletest", "tree": {"sha": "6fa7314f67b10d5aa74d4666a448c92b04f08e1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fa7314f67b10d5aa74d4666a448c92b04f08e1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dce460028e9c21ebadb28f6744d4b10bf0e8d501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dce460028e9c21ebadb28f6744d4b10bf0e8d501", "html_url": "https://github.com/rust-lang/rust/commit/dce460028e9c21ebadb28f6744d4b10bf0e8d501", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dce460028e9c21ebadb28f6744d4b10bf0e8d501/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6554fb0d8d5d794db7a7532a5edd16eb28777a48", "url": "https://api.github.com/repos/rust-lang/rust/commits/6554fb0d8d5d794db7a7532a5edd16eb28777a48", "html_url": "https://github.com/rust-lang/rust/commit/6554fb0d8d5d794db7a7532a5edd16eb28777a48"}], "stats": {"total": 269, "additions": 180, "deletions": 89}, "files": [{"sha": "dab44c4a82992eab7caa582782b4e2bef92c6a3f", "filename": "configure", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/configure", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -862,13 +862,6 @@ then\n     fi\n fi\n \n-if [ -n \"$CFG_GDB\" ]\n-then\n-    # Store GDB's version\n-    CFG_GDB_VERSION=$($CFG_GDB --version 2>/dev/null | head -1)\n-    putvar CFG_GDB_VERSION\n-fi\n-\n if [ -n \"$CFG_LLDB\" ]\n then\n     # Store LLDB's version"}, {"sha": "f3d8f0387bbd6367bcacdd7576ede0b576b564bb", "filename": "mk/tests.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -648,7 +648,7 @@ CTEST_COMMON_ARGS$(1)-T-$(2)-H-$(3) = \\\n         --host $(3) \\\n \t--docck-python $$(CFG_PYTHON) \\\n \t--lldb-python $$(CFG_LLDB_PYTHON) \\\n-        --gdb-version=\"$(CFG_GDB_VERSION)\" \\\n+        --gdb=\"$(CFG_GDB)\" \\\n         --lldb-version=\"$(CFG_LLDB_VERSION)\" \\\n         --llvm-version=\"$$(LLVM_VERSION_$(3))\" \\\n         --android-cross-path=$(CFG_ARM_LINUX_ANDROIDEABI_NDK) \\"}, {"sha": "50a2337b307830c9ee17a1039c686c94a8443f37", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -168,8 +168,8 @@ pub fn compiletest(build: &Build,\n         cmd.arg(\"--lldb-python\").arg(python_default);\n     }\n \n-    if let Some(ref vers) = build.gdb_version {\n-        cmd.arg(\"--gdb-version\").arg(vers);\n+    if let Some(ref gdb) = build.config.gdb {\n+        cmd.arg(\"--gdb\").arg(gdb);\n     }\n     if let Some(ref vers) = build.lldb_version {\n         cmd.arg(\"--lldb-version\").arg(vers);"}, {"sha": "0948a7c130e5f4f93834f55dcb2589495458ed60", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -85,6 +85,7 @@ pub struct Config {\n     pub mandir: Option<String>,\n     pub codegen_tests: bool,\n     pub nodejs: Option<PathBuf>,\n+    pub gdb: Option<PathBuf>,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -122,6 +123,7 @@ struct Build {\n     compiler_docs: Option<bool>,\n     docs: Option<bool>,\n     submodules: Option<bool>,\n+    gdb: Option<String>,\n }\n \n /// TOML representation of how the LLVM build is configured.\n@@ -226,6 +228,7 @@ impl Config {\n         }\n         config.rustc = build.rustc.map(PathBuf::from);\n         config.cargo = build.cargo.map(PathBuf::from);\n+        config.gdb = build.gdb.map(PathBuf::from);\n         set(&mut config.compiler_docs, build.compiler_docs);\n         set(&mut config.docs, build.docs);\n         set(&mut config.submodules, build.submodules);\n@@ -392,6 +395,9 @@ impl Config {\n                 \"CFG_DEFAULT_LINKER\" if value.len() > 0 => {\n                     self.rustc_default_linker = Some(value.to_string());\n                 }\n+                \"CFG_GDB\" if value.len() > 0 => {\n+                    self.gdb = Some(PathBuf::from(value));\n+                }\n                 \"CFG_RELEASE_CHANNEL\" => {\n                     self.channel = value.to_string();\n                 }"}, {"sha": "1289cdba59577a03ca852f24fc6095e083a42a2d", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -79,6 +79,9 @@\n # Indicate whether submodules are managed and updated automatically.\n #submodules = true\n \n+# The path to (or name of) the GDB executable to use\n+#gdb = \"gdb\"\n+\n # =============================================================================\n # Options for compiling Rust code itself\n # ============================================================================="}, {"sha": "e99e088bffe36999a342c8162d7b80a84f094cdc", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -123,7 +123,6 @@ pub struct Build {\n     bootstrap_key_stage0: String,\n \n     // Probed tools at runtime\n-    gdb_version: Option<String>,\n     lldb_version: Option<String>,\n     lldb_python_dir: Option<String>,\n \n@@ -196,7 +195,6 @@ impl Build {\n             package_vers: String::new(),\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n-            gdb_version: None,\n             lldb_version: None,\n             lldb_python_dir: None,\n         }"}, {"sha": "cc1b7136d475f99f920ab3780f0d18fc8390c1d2", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -92,6 +92,12 @@ pub fn check(build: &mut Build) {\n         need_cmd(s.as_ref());\n     }\n \n+    if let Some(ref gdb) = build.config.gdb {\n+        need_cmd(gdb.as_ref());\n+    } else {\n+        build.config.gdb = have_cmd(\"gdb\".as_ref());\n+    }\n+\n     // We're gonna build some custom C code here and there, host triples\n     // also build some C++ shims for LLVM so we need a C++ compiler.\n     for target in build.config.target.iter() {\n@@ -198,7 +204,6 @@ $ pacman -R cmake && pacman -S mingw-w64-x86_64-cmake\n                    .to_string()\n         })\n     };\n-    build.gdb_version = run(Command::new(\"gdb\").arg(\"--version\")).ok();\n     build.lldb_version = run(Command::new(\"lldb\").arg(\"--version\")).ok();\n     if build.lldb_version.is_some() {\n         build.lldb_python_dir = run(Command::new(\"lldb\").arg(\"-P\")).ok();"}, {"sha": "34f3837d8bbb0605a44460fd07fc01c456e7f90b", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -146,8 +146,11 @@ pub struct Config {\n     // Host triple for the compiler being invoked\n     pub host: String,\n \n-    // Version of GDB\n-    pub gdb_version: Option<String>,\n+    // Path to / name of the GDB executable\n+    pub gdb: Option<String>,\n+\n+    // Version of GDB, encoded as ((major * 1000) + minor) * 1000 + patch\n+    pub gdb_version: Option<u32>,\n \n     // Whether GDB has native rust support\n     pub gdb_native_rust: bool,"}, {"sha": "e57c9949b1c57b84439fbf371a213ef5e7e6f174", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -18,6 +18,8 @@ use common::Config;\n use common;\n use util;\n \n+use extract_gdb_version;\n+\n /// Properties which must be known very early, before actually running\n /// the test.\n pub struct EarlyProps {\n@@ -75,15 +77,15 @@ impl EarlyProps {\n                 return true;\n             }\n \n-            if let Some(ref actual_version) = config.gdb_version {\n+            if let Some(actual_version) = config.gdb_version {\n                 if line.contains(\"min-gdb-version\") {\n                     let min_version = line.trim()\n                         .split(' ')\n                         .last()\n                         .expect(\"Malformed GDB version directive\");\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    gdb_version_to_int(actual_version) < gdb_version_to_int(min_version)\n+                    actual_version < extract_gdb_version(min_version).unwrap()\n                 } else {\n                     false\n                 }\n@@ -464,23 +466,6 @@ pub fn parse_name_value_directive(line: &str, directive: &str) -> Option<String>\n     }\n }\n \n-pub fn gdb_version_to_int(version_string: &str) -> isize {\n-    let error_string = format!(\"Encountered GDB version string with unexpected format: {}\",\n-                               version_string);\n-    let error_string = error_string;\n-\n-    let components: Vec<&str> = version_string.trim().split('.').collect();\n-\n-    if components.len() != 2 {\n-        panic!(\"{}\", error_string);\n-    }\n-\n-    let major: isize = components[0].parse().ok().expect(&error_string);\n-    let minor: isize = components[1].parse().ok().expect(&error_string);\n-\n-    return major * 1000 + minor;\n-}\n-\n pub fn lldb_version_to_int(version_string: &str) -> isize {\n     let error_string = format!(\"Encountered LLDB version string with unexpected format: {}\",\n                                version_string);"}, {"sha": "d6e64cc1752a94d724c8a1304cb051e201e3dce5", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 137, "deletions": 39, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(box_syntax)]\n #![feature(rustc_private)]\n+#![feature(static_in_const)]\n #![feature(test)]\n #![feature(libc)]\n \n@@ -35,6 +36,7 @@ use std::ffi::OsString;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n+use std::process::Command;\n use getopts::{optopt, optflag, reqopt};\n use common::Config;\n use common::{Pretty, DebugInfoGdb, DebugInfoLldb, Mode};\n@@ -98,7 +100,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n           optopt(\"\", \"logfile\", \"file to log test execution to\", \"FILE\"),\n           optopt(\"\", \"target\", \"the target to build for\", \"TARGET\"),\n           optopt(\"\", \"host\", \"the host to build for\", \"HOST\"),\n-          optopt(\"\", \"gdb-version\", \"the version of GDB used\", \"VERSION STRING\"),\n+          optopt(\"\", \"gdb\", \"path to GDB to use for GDB debuginfo tests\", \"PATH\"),\n           optopt(\"\", \"lldb-version\", \"the version of LLDB used\", \"VERSION STRING\"),\n           optopt(\"\", \"llvm-version\", \"the version of LLVM used\", \"VERSION STRING\"),\n           optopt(\"\", \"android-cross-path\", \"Android NDK standalone path\", \"PATH\"),\n@@ -149,6 +151,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         }\n     }\n \n+    let (gdb, gdb_version, gdb_native_rust) = analyze_gdb(matches.opt_str(\"gdb\"));\n+\n     Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n@@ -171,8 +175,9 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         target_rustcflags: matches.opt_str(\"target-rustcflags\"),\n         target: opt_str2(matches.opt_str(\"target\")),\n         host: opt_str2(matches.opt_str(\"host\")),\n-        gdb_version: extract_gdb_version(matches.opt_str(\"gdb-version\")),\n-        gdb_native_rust: false,\n+        gdb: gdb,\n+        gdb_version: gdb_version,\n+        gdb_native_rust: gdb_native_rust,\n         lldb_version: extract_lldb_version(matches.opt_str(\"lldb-version\")),\n         llvm_version: matches.opt_str(\"llvm-version\"),\n         android_cross_path: opt_path(matches, \"android-cross-path\"),\n@@ -471,44 +476,96 @@ pub fn make_test_closure(config: &Config, testpaths: &TestPaths) -> test::TestFn\n     }))\n }\n \n-fn extract_gdb_version(full_version_line: Option<String>) -> Option<String> {\n-    match full_version_line {\n-        Some(ref full_version_line)\n-          if !full_version_line.trim().is_empty() => {\n-            let full_version_line = full_version_line.trim();\n+/// Returns (Path to GDB, GDB Version, GDB has Rust Support)\n+fn analyze_gdb(gdb: Option<String>) -> (Option<String>, Option<u32>, bool) {\n+    #[cfg(not(windows))]\n+    const GDB_FALLBACK: &str = \"gdb\";\n+    #[cfg(windows)]\n+    const GDB_FALLBACK: &str = \"gdb.exe\";\n \n-            // used to be a regex \"(^|[^0-9])([0-9]\\.[0-9]+)\"\n-            for (pos, c) in full_version_line.char_indices() {\n-                if !c.is_digit(10) {\n-                    continue\n-                }\n-                if pos + 2 >= full_version_line.len() {\n-                    continue\n-                }\n-                if full_version_line[pos + 1..].chars().next().unwrap() != '.' {\n-                    continue\n-                }\n-                if !full_version_line[pos + 2..].chars().next().unwrap().is_digit(10) {\n-                    continue\n-                }\n-                if pos > 0 && full_version_line[..pos].chars().next_back()\n-                                                      .unwrap().is_digit(10) {\n-                    continue\n-                }\n-                let mut end = pos + 3;\n-                while end < full_version_line.len() &&\n-                      full_version_line[end..].chars().next()\n-                                              .unwrap().is_digit(10) {\n-                    end += 1;\n-                }\n-                return Some(full_version_line[pos..end].to_owned());\n-            }\n-            println!(\"Could not extract GDB version from line '{}'\",\n-                     full_version_line);\n-            None\n-        },\n-        _ => None\n+    const MIN_GDB_WITH_RUST: u32 = 7011010;\n+\n+    let gdb = match gdb {\n+        None => GDB_FALLBACK,\n+        Some(ref s) if s.is_empty() => GDB_FALLBACK, // may be empty if configure found no gdb\n+        Some(ref s) => s,\n+    };\n+\n+    let version_line = Command::new(gdb).arg(\"--version\").output().map(|output| {\n+        String::from_utf8_lossy(&output.stdout).lines().next().unwrap().to_string()\n+    }).ok();\n+\n+    let version = match version_line {\n+        Some(line) => extract_gdb_version(&line),\n+        None => return (None, None, false),\n+    };\n+\n+    let gdb_native_rust = version.map_or(false, |v| v >= MIN_GDB_WITH_RUST);\n+\n+    return (Some(gdb.to_owned()), version, gdb_native_rust);\n+}\n+\n+fn extract_gdb_version(full_version_line: &str) -> Option<u32> {\n+    let full_version_line = full_version_line.trim();\n+\n+    // GDB versions look like this: \"major.minor.patch?.yyyymmdd?\", with both\n+    // of the ? sections being optional\n+\n+    // We will parse up to 3 digits for minor and patch, ignoring the date\n+    // We limit major to 1 digit, otherwise, on openSUSE, we parse the openSUSE version\n+\n+    // don't start parsing in the middle of a number\n+    let mut prev_was_digit = false;\n+    for (pos, c) in full_version_line.char_indices() {\n+        if prev_was_digit || !c.is_digit(10) {\n+            prev_was_digit = c.is_digit(10);\n+            continue\n+        }\n+\n+        prev_was_digit = true;\n+\n+        let line = &full_version_line[pos..];\n+\n+        let next_split = match line.find(|c: char| !c.is_digit(10)) {\n+            Some(idx) => idx,\n+            None => continue, // no minor version\n+        };\n+\n+        if line.as_bytes()[next_split] != b'.' {\n+            continue; // no minor version\n+        }\n+\n+        let major = &line[..next_split];\n+        let line = &line[next_split + 1..];\n+\n+        let (minor, patch) = match line.find(|c: char| !c.is_digit(10)) {\n+            Some(idx) => if line.as_bytes()[idx] == b'.' {\n+                let patch = &line[idx + 1..];\n+\n+                let patch_len = patch.find(|c: char| !c.is_digit(10)).unwrap_or(patch.len());\n+                let patch = &patch[..patch_len];\n+                let patch = if patch_len > 3 || patch_len == 0 { None } else { Some(patch) };\n+\n+                (&line[..idx], patch)\n+            } else {\n+                (&line[..idx], None)\n+            },\n+            None => (line, None),\n+        };\n+\n+        if major.len() != 1 || minor.is_empty() {\n+            continue;\n+        }\n+\n+        let major: u32 = major.parse().unwrap();\n+        let minor: u32 = minor.parse().unwrap();\n+        let patch: u32 = patch.unwrap_or(\"0\").parse().unwrap();\n+\n+        return Some(((major * 1000) + minor) * 1000 + patch);\n     }\n+\n+    println!(\"Could not extract GDB version from line '{}'\", full_version_line);\n+    None\n }\n \n fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n@@ -554,3 +611,44 @@ fn extract_lldb_version(full_version_line: Option<String>) -> Option<String> {\n fn is_blacklisted_lldb_version(version: &str) -> bool {\n     version == \"350\"\n }\n+\n+#[test]\n+fn test_extract_gdb_version() {\n+    macro_rules! test { ($($expectation:tt: $input:tt,)*) => {{$(\n+        assert_eq!(extract_gdb_version($input), Some($expectation));\n+    )*}}}\n+\n+    test! {\n+        7000001: \"GNU gdb (GDB) CentOS (7.0.1-45.el5.centos)\",\n+\n+        7002000: \"GNU gdb (GDB) Red Hat Enterprise Linux (7.2-90.el6)\",\n+\n+        7004000: \"GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04\",\n+        7004001: \"GNU gdb (GDB) 7.4.1-debian\",\n+\n+        7006001: \"GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7\",\n+\n+        7007001: \"GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.2) 7.7.1\",\n+        7007001: \"GNU gdb (Debian 7.7.1+dfsg-5) 7.7.1\",\n+        7007001: \"GNU gdb (GDB) Fedora 7.7.1-21.fc20\",\n+\n+        7008000: \"GNU gdb (GDB; openSUSE 13.2) 7.8\",\n+        7009001: \"GNU gdb (GDB) Fedora 7.9.1-20.fc22\",\n+        7010001: \"GNU gdb (GDB) Fedora 7.10.1-31.fc23\",\n+\n+        7011000: \"GNU gdb (Ubuntu 7.11-0ubuntu1) 7.11\",\n+        7011001: \"GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.04) 7.11.1\",\n+        7011001: \"GNU gdb (Debian 7.11.1-2) 7.11.1\",\n+        7011001: \"GNU gdb (GDB) Fedora 7.11.1-86.fc24\",\n+        7011001: \"GNU gdb (GDB; openSUSE Leap 42.1) 7.11.1\",\n+        7011001: \"GNU gdb (GDB; openSUSE Tumbleweed) 7.11.1\",\n+\n+        7011090: \"7.11.90\",\n+        7011090: \"GNU gdb (Ubuntu 7.11.90.20161005-0ubuntu1) 7.11.90.20161005-git\",\n+\n+        7012000: \"7.12\",\n+        7012000: \"GNU gdb (GDB) 7.12\",\n+        7012000: \"GNU gdb (GDB) 7.12.20161027-git\",\n+        7012050: \"GNU gdb (GDB) 7.12.50.20161027-git\",\n+    }\n+}"}, {"sha": "3c6903ac21d517310120fa4ab4920a5c63720683", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dce460028e9c21ebadb28f6744d4b10bf0e8d501/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=dce460028e9c21ebadb28f6744d4b10bf0e8d501", "patch": "@@ -32,6 +32,8 @@ use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n use std::str;\n \n+use extract_gdb_version;\n+\n pub fn run(config: Config, testpaths: &TestPaths) {\n     match &*config.target {\n \n@@ -44,6 +46,10 @@ pub fn run(config: Config, testpaths: &TestPaths) {\n         _=> { }\n     }\n \n+    if config.mode == DebugInfoGdb && config.gdb.is_none() {\n+        panic!(\"gdb not available but debuginfo gdb debuginfo test requested\");\n+    }\n+\n     if config.verbose {\n         // We're going to be dumping a lot of info. Start on a new line.\n         print!(\"\\n\\n\");\n@@ -598,19 +604,18 @@ actual:\\n\\\n                 script_str.push_str(\"show version\\n\");\n \n                 match self.config.gdb_version {\n-                    Some(ref version) => {\n+                    Some(version) => {\n                         println!(\"NOTE: compiletest thinks it is using GDB version {}\",\n                                  version);\n \n-                        if header::gdb_version_to_int(version) >\n-                            header::gdb_version_to_int(\"7.4\") {\n-                                // Add the directory containing the pretty printers to\n-                                // GDB's script auto loading safe path\n-                                script_str.push_str(\n-                                    &format!(\"add-auto-load-safe-path {}\\n\",\n-                                             rust_pp_module_abs_path.replace(r\"\\\", r\"\\\\\"))\n-                                );\n-                            }\n+                        if version > extract_gdb_version(\"7.4\").unwrap() {\n+                            // Add the directory containing the pretty printers to\n+                            // GDB's script auto loading safe path\n+                            script_str.push_str(\n+                                &format!(\"add-auto-load-safe-path {}\\n\",\n+                                         rust_pp_module_abs_path.replace(r\"\\\", r\"\\\\\"))\n+                            );\n+                        }\n                     }\n                     _ => {\n                         println!(\"NOTE: compiletest does not know which version of \\\n@@ -645,11 +650,6 @@ actual:\\n\\\n                 debug!(\"script_str = {}\", script_str);\n                 self.dump_output_file(&script_str, \"debugger.script\");\n \n-                // run debugger script with gdb\n-                fn debugger() -> &'static str {\n-                    if cfg!(windows) {\"gdb.exe\"} else {\"gdb\"}\n-                }\n-\n                 let debugger_script = self.make_out_name(\"debugger.script\");\n \n                 // FIXME (#9639): This needs to handle non-utf8 paths\n@@ -660,7 +660,7 @@ actual:\\n\\\n                          format!(\"-command={}\", debugger_script.to_str().unwrap()));\n \n                 let proc_args = ProcArgs {\n-                    prog: debugger().to_owned(),\n+                    prog: self.config.gdb.as_ref().unwrap().to_owned(),\n                     args: debugger_opts,\n                 };\n "}]}