{"sha": "acb90eb014eff6f4e4de2c3a651c68086ad4c466", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjYjkwZWIwMTRlZmY2ZjRlNGRlMmMzYTY1MWM2ODA4NmFkNGM0NjY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-11-25T05:28:24Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:43:01Z"}, "message": "Fix tidy issues", "tree": {"sha": "b506f956a095d866cdab61d83d5d5fa312e203c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b506f956a095d866cdab61d83d5d5fa312e203c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acb90eb014eff6f4e4de2c3a651c68086ad4c466", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acb90eb014eff6f4e4de2c3a651c68086ad4c466", "html_url": "https://github.com/rust-lang/rust/commit/acb90eb014eff6f4e4de2c3a651c68086ad4c466", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acb90eb014eff6f4e4de2c3a651c68086ad4c466/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9978574c9e18ac2feb2daf0758ec00e407be75ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/9978574c9e18ac2feb2daf0758ec00e407be75ca", "html_url": "https://github.com/rust-lang/rust/commit/9978574c9e18ac2feb2daf0758ec00e407be75ca"}], "stats": {"total": 93, "additions": 53, "deletions": 40}, "files": [{"sha": "a554867389e120f7a24a98f5ea0dcef3070361f8", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 51, "deletions": 39, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/acb90eb014eff6f4e4de2c3a651c68086ad4c466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb90eb014eff6f4e4de2c3a651c68086ad4c466/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=acb90eb014eff6f4e4de2c3a651c68086ad4c466", "patch": "@@ -1,57 +1,59 @@\n //! This pass type-checks the MIR to ensure it is not broken.\n \n-use crate::borrow_check::borrow_set::BorrowSet;\n-use crate::borrow_check::location::LocationTable;\n-use crate::borrow_check::nll::constraints::{OutlivesConstraintSet, OutlivesConstraint};\n-use crate::borrow_check::nll::member_constraints::MemberConstraintSet;\n-use crate::borrow_check::nll::facts::AllFacts;\n-use crate::borrow_check::nll::region_infer::values::LivenessValues;\n-use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n-use crate::borrow_check::nll::region_infer::values::PlaceholderIndices;\n-use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n-use crate::borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n-use crate::borrow_check::nll::renumber;\n-use crate::borrow_check::nll::type_check::free_region_relations::{\n-    CreateResult, UniversalRegionRelations,\n-};\n-use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n-use crate::borrow_check::nll::ToRegionVid;\n-use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n-use crate::dataflow::move_paths::MoveData;\n-use crate::dataflow::FlowAtLocation;\n-use crate::dataflow::MaybeInitializedPlaces;\n+use std::{fmt, iter, mem};\n+use std::rc::Rc;\n+\n use either::Either;\n+\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n+use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::canonical::QueryRegionConstraints;\n use rustc::infer::outlives::env::RegionBoundPairs;\n-use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin};\n use rustc::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n+use rustc::mir::*;\n use rustc::mir::interpret::PanicInfo;\n use rustc::mir::tcx::PlaceTy;\n-use rustc::mir::visit::{PlaceContext, Visitor, NonMutatingUseContext};\n-use rustc::mir::*;\n+use rustc::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n+use rustc::traits::{self, ObligationCause, PredicateObligations};\n+use rustc::traits::query::{Fallible, NoSolution};\n use rustc::traits::query::type_op;\n use rustc::traits::query::type_op::custom::CustomTypeOp;\n-use rustc::traits::query::{Fallible, NoSolution};\n-use rustc::traits::{self, ObligationCause, PredicateObligations};\n-use rustc::ty::adjustment::{PointerCast};\n-use rustc::ty::cast::CastTy;\n-use rustc::ty::fold::TypeFoldable;\n-use rustc::ty::subst::{Subst, SubstsRef, GenericArgKind, UserSubsts};\n use rustc::ty::{\n-    self, RegionVid, ToPolyTraitRef, Ty, TyCtxt, UserType,\n-    CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations,\n+    self, CanonicalUserTypeAnnotation, CanonicalUserTypeAnnotations, RegionVid, ToPolyTraitRef, Ty,\n+    TyCtxt, UserType,\n     UserTypeAnnotationIndex,\n };\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_index::vec::{IndexVec, Idx};\n+use rustc::ty::adjustment::PointerCast;\n+use rustc::ty::cast::CastTy;\n+use rustc::ty::fold::TypeFoldable;\n use rustc::ty::layout::VariantIdx;\n-use std::rc::Rc;\n-use std::{fmt, iter, mem};\n-use syntax_pos::{Span, DUMMY_SP};\n-\n+use rustc::ty::subst::{GenericArgKind, Subst, SubstsRef, UserSubsts};\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_error_codes::*;\n+use rustc_index::vec::{Idx, IndexVec};\n+use syntax_pos::{DUMMY_SP, Span};\n+\n+use crate::borrow_check::borrow_set::BorrowSet;\n+use crate::borrow_check::location::LocationTable;\n+use crate::borrow_check::nll::constraints::{OutlivesConstraint, OutlivesConstraintSet};\n+use crate::borrow_check::nll::facts::AllFacts;\n+use crate::borrow_check::nll::member_constraints::MemberConstraintSet;\n+use crate::borrow_check::nll::region_infer::{ClosureRegionRequirementsExt, TypeTest};\n+use crate::borrow_check::nll::region_infer::values::LivenessValues;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndex;\n+use crate::borrow_check::nll::region_infer::values::PlaceholderIndices;\n+use crate::borrow_check::nll::region_infer::values::RegionValueElements;\n+use crate::borrow_check::nll::renumber;\n+use crate::borrow_check::nll::ToRegionVid;\n+use crate::borrow_check::nll::type_check::free_region_relations::{\n+    CreateResult, UniversalRegionRelations,\n+};\n+use crate::borrow_check::nll::universal_regions::{DefiningTy, UniversalRegions};\n+use crate::dataflow::FlowAtLocation;\n+use crate::dataflow::MaybeInitializedPlaces;\n+use crate::dataflow::move_paths::MoveData;\n+use crate::transform::promote_consts::should_suggest_const_in_array_repeat_expressions_attribute;\n \n macro_rules! span_mirbug {\n     ($context:expr, $elem:expr, $($message:tt)*) => ({\n@@ -1374,7 +1376,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    fn check_stmt(&mut self, body: ReadOnlyBodyCache<'_, 'tcx>, stmt: &Statement<'tcx>, location: Location) {\n+    fn check_stmt(\n+        &mut self,\n+        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        stmt: &Statement<'tcx>,\n+        location: Location)\n+    {\n         debug!(\"check_stmt: {:?}\", stmt);\n         let tcx = self.tcx();\n         match stmt.kind {\n@@ -1985,7 +1992,12 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    fn check_rvalue(&mut self, body: ReadOnlyBodyCache<'_, 'tcx>, rvalue: &Rvalue<'tcx>, location: Location) {\n+    fn check_rvalue(\n+        &mut self,\n+        body: ReadOnlyBodyCache<'_, 'tcx>,\n+        rvalue: &Rvalue<'tcx>,\n+        location: Location)\n+    {\n         let tcx = self.tcx();\n \n         match rvalue {"}, {"sha": "4c5b374059de0f41fa97eac51741922f99a7b51a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/acb90eb014eff6f4e4de2c3a651c68086ad4c466/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acb90eb014eff6f4e4de2c3a651c68086ad4c466/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=acb90eb014eff6f4e4de2c3a651c68086ad4c466", "patch": "@@ -63,7 +63,8 @@ impl<'tcx> MirPass<'tcx> for PromoteTemps<'tcx> {\n         let mut rpo = traversal::reverse_postorder(body);\n         let (temps, all_candidates) = collect_temps_and_candidates(tcx, body, &mut rpo);\n \n-        let promotable_candidates = validate_candidates(tcx, read_only, def_id, &temps, &all_candidates);\n+        let promotable_candidates\n+            = validate_candidates(tcx, read_only, def_id, &temps, &all_candidates);\n \n         let promoted = promote_candidates(def_id, body, tcx, temps, promotable_candidates);\n         self.promoted_fragments.set(promoted);"}]}