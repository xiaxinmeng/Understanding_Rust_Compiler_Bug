{"sha": "6c28ffbef344598092141c93c25a950502999018", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMjhmZmJlZjM0NDU5ODA5MjE0MWM5M2MyNWE5NTA1MDI5OTkwMTg=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-14T06:51:05Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-11-17T20:13:25Z"}, "message": "Use DefPath for clean::Visibility, not clean::Path\n\nVisibility needs much less information than a full path, since modules\ncan never have generics. This allows constructing a Visibility from only\na DefId.\n\nNote that this means that paths are now normalized to their DefPath.\nIn other words, `pub(self)` or `pub(super)` now always shows `pub(in\npath)` instead of preserving the original text.", "tree": {"sha": "6f857e54c78b9fd9d703213fbff0bb1b502a042c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f857e54c78b9fd9d703213fbff0bb1b502a042c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c28ffbef344598092141c93c25a950502999018", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c28ffbef344598092141c93c25a950502999018", "html_url": "https://github.com/rust-lang/rust/commit/6c28ffbef344598092141c93c25a950502999018", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c28ffbef344598092141c93c25a950502999018/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c919f490bbcd2b29b74016101f7ec71aaa24bdbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c919f490bbcd2b29b74016101f7ec71aaa24bdbb", "html_url": "https://github.com/rust-lang/rust/commit/c919f490bbcd2b29b74016101f7ec71aaa24bdbb"}], "stats": {"total": 59, "additions": 37, "deletions": 22}, "files": [{"sha": "fc1cc58ed8dc6e169d3c993ad11a7780b254bb91", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6c28ffbef344598092141c93c25a950502999018", "patch": "@@ -1812,7 +1812,7 @@ impl Clean<Visibility> for hir::Visibility<'_> {\n             hir::VisibilityKind::Restricted { ref path, .. } => {\n                 let path = path.clean(cx);\n                 let did = register_res(cx, path.res);\n-                Visibility::Restricted(did, path)\n+                Visibility::Restricted(did, cx.tcx.def_path(did))\n             }\n         }\n     }"}, {"sha": "849d13eed8612781dbb29d882e6aa8d21a6d001f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=6c28ffbef344598092141c93c25a950502999018", "patch": "@@ -1460,12 +1460,18 @@ impl From<hir::PrimTy> for PrimitiveType {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, Debug)]\n+#[derive(Clone, Debug)]\n crate enum Visibility {\n     Public,\n     Inherited,\n     Crate,\n-    Restricted(DefId, Path),\n+    Restricted(DefId, rustc_hir::definitions::DefPath),\n+}\n+\n+impl Visibility {\n+    crate fn is_public(&self) -> bool {\n+        matches!(self, Visibility::Public)\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "4c610e6e7b8c71516b36798e2d84d21eec02a77f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 18, "deletions": 5, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6c28ffbef344598092141c93c25a950502999018", "patch": "@@ -11,7 +11,7 @@ use std::fmt;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_span::def_id::DefId;\n+use rustc_span::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_target::spec::abi::Abi;\n \n use crate::clean::{self, PrimitiveType};\n@@ -1089,19 +1089,32 @@ impl Function<'_> {\n \n impl clean::Visibility {\n     crate fn print_with_space(&self) -> impl fmt::Display + '_ {\n+        use rustc_span::symbol::kw;\n+\n         display_fn(move |f| match *self {\n             clean::Public => f.write_str(\"pub \"),\n             clean::Inherited => Ok(()),\n             clean::Visibility::Crate => write!(f, \"pub(crate) \"),\n+            // If this is `pub(crate)`, `path` will be empty.\n+            clean::Visibility::Restricted(did, _) if did.index == CRATE_DEF_INDEX => {\n+                write!(f, \"pub(crate) \")\n+            }\n             clean::Visibility::Restricted(did, ref path) => {\n                 f.write_str(\"pub(\")?;\n-                if path.segments.len() != 1\n-                    || (path.segments[0].name != \"self\" && path.segments[0].name != \"super\")\n+                debug!(\"path={:?}\", path);\n+                let first_name =\n+                    path.data[0].data.get_opt_name().expect(\"modules are always named\");\n+                if path.data.len() != 1 || (first_name != kw::SelfLower && first_name != kw::Super)\n                 {\n                     f.write_str(\"in \")?;\n                 }\n-                resolved_path(f, did, path, true, false)?;\n-                f.write_str(\") \")\n+                // modified from `resolved_path()` to work with `DefPathData`\n+                let last_name = path.data.last().unwrap().data.get_opt_name().unwrap();\n+                for seg in &path.data[..path.data.len() - 1] {\n+                    write!(f, \"{}::\", seg.data.get_opt_name().unwrap())?;\n+                }\n+                let path = anchor(did, &last_name.as_str()).to_string();\n+                write!(f, \"{}) \", path)\n             }\n         })\n     }"}, {"sha": "eb5a61a9d202a669ad45b8639e4aa61953ac1d0e", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c28ffbef344598092141c93c25a950502999018/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=6c28ffbef344598092141c93c25a950502999018", "patch": "@@ -50,13 +50,13 @@ impl<'a> DocFolder for Stripper<'a> {\n             }\n \n             clean::StructFieldItem(..) => {\n-                if i.visibility != clean::Public {\n+                if !i.visibility.is_public() {\n                     return StripItem(i).strip();\n                 }\n             }\n \n             clean::ModuleItem(..) => {\n-                if i.def_id.is_local() && i.visibility != clean::Public {\n+                if i.def_id.is_local() && !i.visibility.is_public() {\n                     debug!(\"Stripper: stripping module {:?}\", i.name);\n                     let old = mem::replace(&mut self.update_retained, false);\n                     let ret = StripItem(self.fold_item_recur(i).unwrap()).strip();\n@@ -163,9 +163,7 @@ crate struct ImportStripper;\n impl DocFolder for ImportStripper {\n     fn fold_item(&mut self, i: Item) -> Option<Item> {\n         match i.kind {\n-            clean::ExternCrateItem(..) | clean::ImportItem(..) if i.visibility != clean::Public => {\n-                None\n-            }\n+            clean::ExternCrateItem(..) | clean::ImportItem(..) if !i.visibility.is_public() => None,\n             _ => self.fold_item_recur(i),\n         }\n     }"}, {"sha": "6720d848ac3b59e50947fa087a3a8b15a54aa475", "filename": "src/test/rustdoc/pub-restricted.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6c28ffbef344598092141c93c25a950502999018/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c28ffbef344598092141c93c25a950502999018/src%2Ftest%2Frustdoc%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fpub-restricted.rs?ref=6c28ffbef344598092141c93c25a950502999018", "patch": "@@ -1,5 +1,3 @@\n-// ignore-tidy-linelength\n-\n // compile-flags: --document-private-items\n \n #![feature(crate_visibility_modifier)]\n@@ -12,21 +10,21 @@ pub struct FooPublic;\n crate struct FooJustCrate;\n // @has 'foo/struct.FooPubCrate.html' '//pre' 'pub(crate) struct FooPubCrate'\n pub(crate) struct FooPubCrate;\n-// @has 'foo/struct.FooSelf.html' '//pre' 'pub(self) struct FooSelf'\n+// @has 'foo/struct.FooSelf.html' '//pre' 'pub(crate) struct FooSelf'\n pub(self) struct FooSelf;\n-// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(self) struct FooInSelf'\n+// @has 'foo/struct.FooInSelf.html' '//pre' 'pub(crate) struct FooInSelf'\n pub(in self) struct FooInSelf;\n mod a {\n-    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(super) struct FooSuper'\n+    // @has 'foo/a/struct.FooSuper.html' '//pre' 'pub(crate) struct FooSuper'\n     pub(super) struct FooSuper;\n-    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(super) struct FooInSuper'\n+    // @has 'foo/a/struct.FooInSuper.html' '//pre' 'pub(crate) struct FooInSuper'\n     pub(in super) struct FooInSuper;\n     // @has 'foo/a/struct.FooInA.html' '//pre' 'pub(in a) struct FooInA'\n     pub(in a) struct FooInA;\n     mod b {\n-        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in self::super::b) struct FooInSelfSuperB'\n-        pub(in self::super::b) struct FooInSelfSuperB;\n-        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(in super::super) struct FooInSuperSuper'\n+        // @has 'foo/a/b/struct.FooInSelfSuperB.html' '//pre' 'pub(in a::b) struct FooInSelfSuperB'\n+        pub(in a::b) struct FooInSelfSuperB;\n+        // @has 'foo/a/b/struct.FooInSuperSuper.html' '//pre' 'pub(crate) struct FooInSuperSuper'\n         pub(in super::super) struct FooInSuperSuper;\n         // @has 'foo/a/b/struct.FooInAB.html' '//pre' 'pub(in a::b) struct FooInAB'\n         pub(in a::b) struct FooInAB;"}]}