{"sha": "03bbb98019fc447c4afd71d03f6990dcc0c7f160", "node_id": "C_kwDOAAsO6NoAKDAzYmJiOTgwMTlmYzQ0N2M0YWZkNzFkMDNmNjk5MGRjYzBjN2YxNjA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-14T14:56:37Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-30T11:55:17Z"}, "message": "Bless tests.", "tree": {"sha": "2624e78cc616851fc69870bad850607559eb96dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2624e78cc616851fc69870bad850607559eb96dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bbb98019fc447c4afd71d03f6990dcc0c7f160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bbb98019fc447c4afd71d03f6990dcc0c7f160", "html_url": "https://github.com/rust-lang/rust/commit/03bbb98019fc447c4afd71d03f6990dcc0c7f160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bbb98019fc447c4afd71d03f6990dcc0c7f160/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94449e610163b4cbe762089351f5517ad90a3841", "url": "https://api.github.com/repos/rust-lang/rust/commits/94449e610163b4cbe762089351f5517ad90a3841", "html_url": "https://github.com/rust-lang/rust/commit/94449e610163b4cbe762089351f5517ad90a3841"}], "stats": {"total": 825, "additions": 527, "deletions": 298}, "files": [{"sha": "5bbc20359c64a09f3c1fd762dbc50a0369bc077d", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -14,10 +14,10 @@ note: captured value is not `Send` because `&` references cannot be sent unless\n LL |                     let x = x;\n    |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n    = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\n-help: consider further restricting type parameter `T`\n+help: consider further restricting this bound\n    |\n-LL |         where 'me:'async_trait, T: std::marker::Sync {\n-   |                               ++++++++++++++++++++++\n+LL |     fn bar<'me, 'async_trait, T: Send + std::marker::Sync>(x: &'me T)\n+   |                                       +++++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "b1e59e9d5de362a70b3ef16d636045279732f5f2", "filename": "src/test/ui/builtin-superkinds/builtin-superkinds-self-type.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbuiltin-superkinds%2Fbuiltin-superkinds-self-type.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,9 +2,12 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/builtin-superkinds-self-type.rs:10:16\n    |\n LL | impl <T: Sync> Foo for T { }\n-   |       --       ^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |       |\n-   |       help: consider adding an explicit lifetime bound...: `T: 'static +`\n+   |                ^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl <T: Sync + 'static> Foo for T { }\n+   |               +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7ffebab415334ea26629d5a57b452a7a4b02be29", "filename": "src/test/ui/feature-gates/feature-gate-infer_static_outlives_requirements.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-infer_static_outlives_requirements.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,8 +1,6 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/feature-gate-infer_static_outlives_requirements.rs:5:10\n    |\n-LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n    |\n@@ -11,6 +9,10 @@ note: ...that is required by this bound\n    |\n LL | struct Bar<T: 'static> {\n    |               ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<U: 'static> {\n+   |             +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "a13dc043dc52bc57163e45ce321e5fd9d8663cf9", "filename": "src/test/ui/generic-associated-types/issue-86483.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-86483.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,7 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:5:1\n    |\n-LL |   pub trait IceIce<T>\n-   |   ^                - help: consider adding an explicit lifetime bound...: `T: 'a`\n-   |  _|\n-   | |\n+LL | / pub trait IceIce<T>\n LL | | where\n LL | |     for<'a> T: 'a,\n LL | | {\n@@ -19,13 +16,14 @@ note: ...that is required by this bound\n    |\n LL |     for<'a> T: 'a,\n    |                ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     for<'a> T: 'a + 'a,\n+   |                   ++++\n \n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:9:5\n    |\n-LL | pub trait IceIce<T>\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     type Ice<'v>: IntoIterator<Item = &'v T>;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n@@ -34,6 +32,10 @@ note: ...that is required by this bound\n    |\n LL |     for<'a> T: 'a,\n    |                ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     for<'a> T: 'a + 'a,\n+   |                   ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/issue-86483.rs:9:32"}, {"sha": "b424d9a2fdb0c593beb015117848beb2b7e732cf", "filename": "src/test/ui/generic-associated-types/issue-91139.migrate.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.migrate.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,13 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/issue-91139.rs:27:12\n    |\n-LL | fn foo<T>() {\n-   |        - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo<T: 'a>() {\n+   |         ++++\n \n error: aborting due to previous error\n "}, {"sha": "c74161cd3e059fb3c642069e410269e845d6e76d", "filename": "src/test/ui/generic-associated-types/issue-92096.migrate.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,17 +2,23 @@ error[E0311]: the parameter type `C` may not live long enough\n   --> $DIR/issue-92096.rs:20:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n-   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n-   |                 |\n-   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     C: Client + Send + Sync + 'a,\n+   |                             ++++\n \n error[E0311]: the parameter type `C` may not live long enough\n   --> $DIR/issue-92096.rs:20:33\n    |\n LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n-   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n-   |                 |\n-   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     C: Client + Send + Sync + 'a,\n+   |                             ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5323ee172267f20ae4c56d2137247b4f9dbd003c", "filename": "src/test/ui/generic-associated-types/missing-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing-bounds.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -87,10 +87,10 @@ note: tuple struct defined here\n    |\n LL | struct E<B>(B);\n    |        ^\n-help: consider further restricting type parameter `B`\n+help: consider further restricting this bound\n    |\n-LL | impl<B: Add> Add for E<B> where <B as Add>::Output = B, B: Add<Output = B> {\n-   |                                                       ++++++++++++++++++++\n+LL | impl<B: Add + Add<Output = B>> Add for E<B> where <B as Add>::Output = B {\n+   |             +++++++++++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "ae52010cc50a294b62579322bd234f31e2ed67ad", "filename": "src/test/ui/generic-associated-types/unsatified-item-lifetime-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Funsatified-item-lifetime-bound.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,7 +2,7 @@ warning: unnecessary lifetime parameter `'a`\n   --> $DIR/unsatified-item-lifetime-bound.rs:4:12\n    |\n LL |     type Y<'a: 'static>;\n-   |            ^^^^^^^^^^^\n+   |            ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n "}, {"sha": "3e48aef553b16c8f9b987ebcd00fd23f95a56611", "filename": "src/test/ui/impl-trait/equal-hidden-lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fequal-hidden-lifetimes.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,7 +2,7 @@ warning: unnecessary lifetime parameter `'a`\n   --> $DIR/equal-hidden-lifetimes.rs:7:25\n    |\n LL | fn equal_regions_static<'a: 'static>(x: &'a i32) -> impl Sized {\n-   |                         ^^^^^^^^^^^\n+   |                         ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n "}, {"sha": "dade2b91fe0b6cfcb55cf71f03d9f59e83c1e79e", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -128,9 +128,12 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:51\n    |\n LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                 --                ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |                                 |\n-   |                                 help: consider adding an explicit lifetime bound...: `T: 'static +`\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn ty_param_wont_outlive_static<T:Debug + 'static>(x: T) -> impl Debug + 'static {\n+   |                                         +++++++++\n \n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/must_outlive_least_region_or_bound.rs:16:50"}, {"sha": "9f28a8d44a7b722551ff709fc0dfc374ccfe4333", "filename": "src/test/ui/impl-trait/type_parameters_captured.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,9 +2,12 @@ error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/type_parameters_captured.rs:7:20\n    |\n LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |        -           ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n-   |        |\n-   |        help: consider adding an explicit lifetime bound...: `T: 'static`\n+   |                    ^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo<T: 'static>(x: T) -> impl Any + 'static {\n+   |         +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4cf634245be1b30cb7c693634dce3538dfe8a8b2", "filename": "src/test/ui/issues/issue-30438-c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.rs?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -5,6 +5,7 @@ trait Trait { type Out; }\n struct Test<'a> { s: &'a str }\n \n fn silly<'y, 'z>(_s: &'y Test<'z>) -> &'y <Test<'z> as Trait>::Out where 'z: 'static {\n+    //~^ WARN unnecessary lifetime parameter `'z`\n     let x = Test { s: \"this cannot last\" };\n     &x\n     //~^ ERROR: cannot return reference to local variable `x`"}, {"sha": "a7a5c0500fd236e753e93c1b12363a5a782b82b4", "filename": "src/test/ui/issues/issue-30438-c.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30438-c.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,9 +1,17 @@\n+warning: unnecessary lifetime parameter `'z`\n+  --> $DIR/issue-30438-c.rs:7:74\n+   |\n+LL | fn silly<'y, 'z>(_s: &'y Test<'z>) -> &'y <Test<'z> as Trait>::Out where 'z: 'static {\n+   |                                                                          ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'z`\n+\n error[E0515]: cannot return reference to local variable `x`\n-  --> $DIR/issue-30438-c.rs:9:5\n+  --> $DIR/issue-30438-c.rs:10:5\n    |\n LL |     &x\n    |     ^^ returns a reference to data owned by the current function\n \n-error: aborting due to previous error\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0515`."}, {"sha": "33f6c498b6f35ca2f97ebcd0c6aab1d3d7c7ae51", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,18 +1,24 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:19:10\n    |\n-LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     foo: &'static T\n    |          ^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n-LL | trait X<K>: Sized {\n-   |         - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn foo<'a, L: X<&'a Nested<K>>>();\n    |                   ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | trait X<K: 'a>: Sized {\n+   |          ++++\n \n error[E0309]: the parameter type `Self` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:28:19\n@@ -27,25 +33,34 @@ error[E0309]: the parameter type `L` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:32:22\n    |\n LL |     fn baz<'a, L, M: X<&'a Nested<L>>>() {\n-   |                -     ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n-   |                |\n-   |                help: consider adding an explicit lifetime bound...: `L: 'a`\n+   |                      ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<L>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     fn baz<'a, L: 'a, M: X<&'a Nested<L>>>() {\n+   |                 ++++\n \n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n    |\n-LL | impl<K> Nested<K> {\n-   |      - help: consider adding an explicit lifetime bound...: `K: 'a`\n LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n    |                                 ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<K: 'a> Nested<K> {\n+   |       ++++\n \n error[E0309]: the parameter type `M` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n    |\n LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^  -- help: consider adding an explicit lifetime bound...: `M: 'a +`\n-   |                                    |\n-   |                                    ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+   |                                    ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b + 'a>() {\n+   |                                                            ++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "10cff3a27e449a2eb5299789d8682c706ff39743", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.fixed", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.fixed?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -54,31 +54,31 @@ where\n \n fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n where\n-    T: A,\n-    T: B, T: Trait, T: Copy\n-    //~^ HELP consider further restricting type parameter `T`\n+    T: A + Trait + Copy,\n+    //~^ HELP consider further restricting this bound\n+    T: B,\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n-fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n+fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+//~^ HELP consider further restricting this bound\n where\n-    T: B + Trait + Copy,\n-    //~^ HELP consider further restricting this bound\n+    T: B,\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n #[rustfmt::skip]\n-fn existing_colon<T: Copy>(t: T) {\n+fn existing_colon<T: Copy:>(t: T) {\n     //~^ HELP consider restricting type parameter `T`\n     [t, t]; //~ use of moved value: `t`\n }\n \n fn existing_colon_in_where<T>(t: T)\n where\n-    T: Copy,\n-    //~^ HELP consider further restricting this bound\n+    T:, T: Copy\n+    //~^ HELP consider further restricting type parameter `T`\n {\n     [t, t]; //~ use of moved value: `t`\n }"}, {"sha": "0a43dd1a9a38722f42141fcf7052448fccb9f5f6", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.rs?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -55,16 +55,16 @@ where\n fn duplicate_custom_3<T>(t: S<T>) -> (S<T>, S<T>)\n where\n     T: A,\n+    //~^ HELP consider further restricting this bound\n     T: B,\n-    //~^ HELP consider further restricting type parameter `T`\n {\n     (t, t) //~ use of moved value: `t`\n }\n \n fn duplicate_custom_4<T: A>(t: S<T>) -> (S<T>, S<T>)\n+//~^ HELP consider further restricting this bound\n where\n     T: B,\n-    //~^ HELP consider further restricting this bound\n {\n     (t, t) //~ use of moved value: `t`\n }\n@@ -78,7 +78,7 @@ fn existing_colon<T:>(t: T) {\n fn existing_colon_in_where<T>(t: T)\n where\n     T:,\n-    //~^ HELP consider further restricting this bound\n+    //~^ HELP consider further restricting type parameter `T`\n {\n     [t, t]; //~ use of moved value: `t`\n }"}, {"sha": "150fa5d92d6f770a45cebd5761ea5587f68ab27e", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -121,10 +121,10 @@ LL |     (t, t)\n    |      |\n    |      value moved here\n    |\n-help: consider further restricting type parameter `T`\n+help: consider further restricting this bound\n    |\n-LL |     T: B, T: Trait, T: Copy\n-   |         ~~~~~~~~~~~~~~~~~~~\n+LL |     T: A + Trait + Copy,\n+   |          ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n   --> $DIR/use_of_moved_value_copy_suggestions.rs:69:9\n@@ -139,8 +139,8 @@ LL |     (t, t)\n    |\n help: consider further restricting this bound\n    |\n-LL |     T: B + Trait + Copy,\n-   |          ++++++++++++++\n+LL | fn duplicate_custom_4<T: A + Trait + Copy>(t: S<T>) -> (S<T>, S<T>)\n+   |                            ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n   --> $DIR/use_of_moved_value_copy_suggestions.rs:83:9\n@@ -153,10 +153,10 @@ LL |     [t, t];\n    |      |\n    |      value moved here\n    |\n-help: consider further restricting this bound\n+help: consider further restricting type parameter `T`\n    |\n-LL |     T: Copy,\n-   |        ++++\n+LL |     T:, T: Copy\n+   |       ~~~~~~~~~\n \n error[E0382]: use of moved value: `t`\n   --> $DIR/use_of_moved_value_copy_suggestions.rs:75:9\n@@ -171,8 +171,8 @@ LL |     [t, t];\n    |\n help: consider restricting type parameter `T`\n    |\n-LL | fn existing_colon<T: Copy>(t: T) {\n-   |                      ++++\n+LL | fn existing_colon<T: Copy:>(t: T) {\n+   |                    ++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "08605efa2ea9cba750e333d96162a8f7754f1d13", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -36,9 +36,6 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n-LL |   fn supply<'a, T>(value: T)\n-   |                 - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |       establish_relationships(value, |value| {\n    |  ____________________________________^\n LL | |\n@@ -48,6 +45,11 @@ LL | |         // This function call requires that\n LL | |         require(value);\n LL | |     });\n    | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Trait<'a> + 'a,\n+   |                  ++++\n \n error: aborting due to previous error\n "}, {"sha": "64b08a9b32fb31be779fe6e03bdd398eb525cbd6", "filename": "src/test/ui/nll/ty-outlives/impl-trait-outlives.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-outlives.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,20 +1,24 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:11:5\n    |\n-LL | fn no_region<'a, T>(x: Box<T>) -> impl Debug + 'a\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Debug + 'a,\n+   |              ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/impl-trait-outlives.rs:26:5\n    |\n-LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> impl Debug + 'a\n-   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'b + Debug + 'a,\n+   |                   ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3b9b2956c5183b47571f1f6561107e44d25280f2", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,13 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/projection-implied-bounds.rs:30:18\n    |\n-LL | fn generic2<T: Iterator>(value: T) {\n-   |             -- help: consider adding an explicit lifetime bound...: `T: 'static +`\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn generic2<T: Iterator + 'static>(value: T) {\n+   |                         +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "caf2e3c47475564a69ef1dda33abc380a417441f", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -31,11 +31,13 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n-LL | fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-   |                                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Anything<'b> + 'a,\n+   |                     ++++\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:45:39\n@@ -82,11 +84,13 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n-LL | fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n-   |                                   - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Anything<'b> + 'a,\n+   |                     ++++\n \n error: lifetime may not live long enough\n   --> $DIR/projection-one-region-closure.rs:56:39"}, {"sha": "e28b89580bc4c346d3ad310eeb4d06edc5855fa5", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-none.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-none.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,11 +1,13 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/projection-where-clause-none.rs:16:5\n    |\n-LL | fn foo<'a, T>() -> &'a ()\n-   |            - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     bar::<T::Output>()\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: MyTrait<'a> + 'a,\n+   |                    ++++\n \n error: aborting due to previous error\n "}, {"sha": "a4588730b3f8746d26c3dd1fb51e944509012405", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -52,10 +52,13 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n-LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n-   |                     - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn generic_fail<'a, T: 'a>(cell: Cell<&'a ()>, value: T) {\n+   |                      ++++\n \n error: aborting due to previous error\n "}, {"sha": "084dd93cb86b9b3376312c46d03ea202a0c201f9", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -29,20 +29,24 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n-LL | fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Debug + 'a,\n+   |              ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:41:5\n    |\n-LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n-   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'b + Debug + 'a,\n+   |                   ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "11a737ba291f06670be5603f2556d8a35b27a795", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -37,8 +37,6 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n-LL |   fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n-   |                    - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n@@ -48,6 +46,11 @@ LL | |         // See `correct_region`, which explains the point of this\n LL | |         require(&x, &y)\n LL | |     })\n    | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn no_region<'a, T: 'a>(a: Cell<&'a ()>, b: T) {\n+   |                   ++++\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n@@ -121,16 +124,18 @@ LL | | }\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n-LL |   fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n-   |                           - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n LL | |\n LL | |         // See `correct_region`\n LL | |         require(&x, &y)\n LL | |     })\n    | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'b + 'a,\n+   |           ++++\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26"}, {"sha": "ba79137d18d8cb832aff363bd90bbd1bb454041c", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,13 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn-body.rs:19:5\n    |\n-LL | fn region_static<'a, T>(cell: Cell<&'a usize>, t: T) {\n-   |                      - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     outlives(cell, t)\n    |     ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn region_static<'a, T: 'a>(cell: Cell<&'a usize>, t: T) {\n+   |                       ++++\n \n error: aborting due to previous error\n "}, {"sha": "729f14d84adafe589b634a595fecd98057070b9e", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,20 +1,24 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:11:5\n    |\n-LL | fn no_region<'a, T>(x: Box<T>) -> Box<Debug + 'a>\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: Debug + 'a,\n+   |              ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/ty-param-fn.rs:26:5\n    |\n-LL | fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<Debug + 'a>\n-   |                         - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     x\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     T: 'b + Debug + 'a,\n+   |                   ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "66d3102225ecc809ddd2885266ee3829ca184791", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,26 +1,35 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn i<'a, T, U: 'static>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |              +++++++++\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn i<'a, T, U: 'static>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |              +++++++++\n \n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:13:5\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn i<'a, T, U: 'static>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |              +++++++++\n \n error: lifetime may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:13:5\n@@ -51,10 +60,13 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/regions-close-object-into-object-4.rs:13:14\n    |\n-LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n-   |             - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^^^^^^ ...so that the type `U` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn i<'a, T, U: 'static>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n+   |              +++++++++\n \n error: aborting due to 6 previous errors\n "}, {"sha": "1a78079b638d8c17025d1c7326ad8c6b5f9bc301", "filename": "src/test/ui/regions/regions-close-object-into-object-5.base.stderr", "status": "modified", "additions": 32, "deletions": 21, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,9 +1,6 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n@@ -12,22 +9,25 @@ note: ...that is required by this bound\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `B<'_, T>` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n@@ -36,13 +36,14 @@ note: ...that is required by this bound\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n@@ -51,33 +52,43 @@ note: ...that is required by this bound\n    |\n LL | struct B<'a, T: 'a>(&'a (A<T> + 'a));\n    |                 ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...so that the reference type `&dyn A<T>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:16\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |                ^^^ ...so that the type `(dyn A<T> + 'static)` is not borrowed for too long\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "cb06326130e10c800b602f19670685e7359eb101", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,29 +1,35 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |     ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error[E0515]: cannot return value referencing local data `*v`\n   --> $DIR/regions-close-object-into-object-5.rs:21:5\n@@ -37,11 +43,13 @@ LL |     Box::new(B(&*v)) as Box<dyn X>\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-object-into-object-5.rs:21:14\n    |\n-LL | fn f<'a, T, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // oh dear!\n LL |     Box::new(B(&*v)) as Box<dyn X>\n    |              ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn f<'a, T: 'static, U>(v: Box<A<T> + 'static>) -> Box<X + 'static> {\n+   |           +++++++++\n \n error: aborting due to 5 previous errors\n "}, {"sha": "d8f77ad85c96689ee50f0832f0a0ceca864e22bd", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.base.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,18 +1,24 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:15:5\n    |\n-LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn make_object1<A: SomeTrait + 'static>(v: A) -> Box<dyn SomeTrait + 'static> {\n+   |                              +++++++++\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:24:5\n    |\n-LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a + 'b>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                                           ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d8f77ad85c96689ee50f0832f0a0ceca864e22bd", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,18 +1,24 @@\n error[E0310]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:15:5\n    |\n-LL | fn make_object1<A: SomeTrait>(v: A) -> Box<dyn SomeTrait + 'static> {\n-   |                 -- help: consider adding an explicit lifetime bound...: `A: 'static +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'static>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn make_object1<A: SomeTrait + 'static>(v: A) -> Box<dyn SomeTrait + 'static> {\n+   |                              +++++++++\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-close-over-type-parameter-1.rs:24:5\n    |\n-LL | fn make_object3<'a, 'b, A: SomeTrait + 'a>(v: A) -> Box<dyn SomeTrait + 'b> {\n-   |                         -- help: consider adding an explicit lifetime bound...: `A: 'b +`\n LL |     Box::new(v) as Box<dyn SomeTrait + 'b>\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn make_object3<'a, 'b, A: SomeTrait + 'a + 'b>(v: A) -> Box<dyn SomeTrait + 'b> {\n+   |                                           ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "79a5d34dea89d73a1fd4ff3b6c2071a5d3756915", "filename": "src/test/ui/regions/regions-close-param-into-object.base.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,38 +1,46 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:10:5\n    |\n-LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     where T : X + 'static\n+   |                 +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:16:5\n    |\n-LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `Box<T>` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn p2<T: 'static>(v: Box<T>) -> Box<dyn X + 'static>\n+   |        +++++++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:22:5\n    |\n-LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     where T : X + 'a\n+   |                 ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:28:5\n    |\n-LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `Box<T>` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn p4<'a,T: 'a>(v: Box<T>) -> Box<dyn X + 'a>\n+   |           ++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6ee12d5b82c6910add9eeb26b46481bd34fef3ba", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,38 +1,46 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:10:5\n    |\n-LL | fn p1<T>(v: T) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     where T : X + 'static\n+   |                 +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:16:5\n    |\n-LL | fn p2<T>(v: Box<T>) -> Box<dyn X + 'static>\n-   |       - help: consider adding an explicit lifetime bound...: `T: 'static`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn p2<T: 'static>(v: Box<T>) -> Box<dyn X + 'static>\n+   |        +++++++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:22:5\n    |\n-LL | fn p3<'a,T>(v: T) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     where T : X + 'a\n+   |                 ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-close-param-into-object.rs:28:5\n    |\n-LL | fn p4<'a,T>(v: Box<T>) -> Box<dyn X + 'a>\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n-...\n LL |     Box::new(v)\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn p4<'a,T: 'a>(v: Box<T>) -> Box<dyn X + 'a>\n+   |           ++++\n \n error: aborting due to 4 previous errors\n "}, {"sha": "7c2e1aeeea619bcabc9b2be24e855afac37af61c", "filename": "src/test/ui/regions/regions-free-region-outlives-static-outlives-free-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.rs?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -9,7 +9,7 @@\n //     'a : 'b\n \n fn test<'a,'b>(x: &'a i32) -> &'b i32\n-    where 'a: 'static\n+    where 'a: 'static //~ WARN unnecessary lifetime parameter `'a`\n {\n     x\n }"}, {"sha": "70ed418d5cbbb4802b9cb0198409d6ee8061cf94", "filename": "src/test/ui/regions/regions-free-region-outlives-static-outlives-free-region.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-outlives-static-outlives-free-region.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,8 +1,8 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-free-region-outlives-static-outlives-free-region.rs:13:5\n+  --> $DIR/regions-free-region-outlives-static-outlives-free-region.rs:12:11\n    |\n-LL |     'a: 'static,\n-   |     ^^\n+LL |     where 'a: 'static\n+   |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n "}, {"sha": "85ced4b524111532e5f6be5939a93f19ef21c0e3", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.base.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,11 +1,13 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:20:10\n    |\n-LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n-   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n-LL | {\n LL |     wf::<&'x T>();\n    |          ^^^^^ ...so that the reference type `&'x T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn func<'x, T:Trait1<'x> + 'x>(t: &'x T::Foo)\n+   |                          ++++\n \n error: aborting due to previous error\n "}, {"sha": "1a428eb25d7d0a1c17d47e0143e1662ba62e085c", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,11 +1,13 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-implied-bounds-projection-gap-1.rs:20:5\n    |\n-LL | fn func<'x, T:Trait1<'x>>(t: &'x T::Foo)\n-   |             -- help: consider adding an explicit lifetime bound...: `T: 'x +`\n-LL | {\n LL |     wf::<&'x T>();\n    |     ^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn func<'x, T:Trait1<'x> + 'x>(t: &'x T::Foo)\n+   |                          ++++\n \n error: aborting due to previous error\n "}, {"sha": "658740f3f871c2c3db7ad448d3b95f6ea66cf9f4", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.base.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,8 +1,6 @@\n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n-LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n-   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n    |\n@@ -11,12 +9,14 @@ note: ...that is required by this bound\n    |\n LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n    |                     ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar1<'a,A: 'a>(x: Inv<'a>, a: A) {\n+   |             ++++\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:41:5\n    |\n-LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n-   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds...\n    |\n@@ -25,6 +25,10 @@ note: ...that is required by this bound\n    |\n LL | fn check_bound<'a,A:'a>(x: Inv<'a>, a: A) { }\n    |                     ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar2<'a,'b,A:Is<'b> + 'a>(x: Inv<'a>, y: Inv<'b>, a: A) {\n+   |                        ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5cc2d20c2e0d16129b5c59fa2c0bfe5898815ffa", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,18 +1,24 @@\n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:37:5\n    |\n-LL | fn bar1<'a,A>(x: Inv<'a>, a: A) {\n-   |            - help: consider adding an explicit lifetime bound...: `A: 'a`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar1<'a,A: 'a>(x: Inv<'a>, a: A) {\n+   |             ++++\n \n error[E0309]: the parameter type `A` may not live long enough\n   --> $DIR/regions-infer-bound-from-trait.rs:41:5\n    |\n-LL | fn bar2<'a,'b,A:Is<'b>>(x: Inv<'a>, y: Inv<'b>, a: A) {\n-   |               -- help: consider adding an explicit lifetime bound...: `A: 'a +`\n LL |     check_bound(x, a)\n    |     ^^^^^^^^^^^^^^^^^ ...so that the type `A` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn bar2<'a,'b,A:Is<'b> + 'a>(x: Inv<'a>, y: Inv<'b>, a: A) {\n+   |                        ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "25232b455b687329e69a19a16f5cbd0692ff9be3", "filename": "src/test/ui/regions/regions-static-bound-rpass.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.rs?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,17 @@\n // run-pass\n+\n fn invariant_id<'a,'b>(t: &'b mut &'static ()) -> &'b mut &'a ()\n     where 'a: 'static { t }\n+//~^ WARN unnecessary lifetime parameter `'a`\n+\n fn static_id<'a>(t: &'a ()) -> &'static ()\n     where 'a: 'static { t }\n+//~^ WARN unnecessary lifetime parameter `'a`\n+\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n+//~^ WARN unnecessary lifetime parameter `'b`\n+\n fn ref_id<'a>(t: &'a ()) -> &'a () where 'static: 'a { t }\n \n static UNIT: () = ();"}, {"sha": "9355a409d5099a733e0e2eebccf711d595e7ec4c", "filename": "src/test/ui/regions/regions-static-bound-rpass.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound-rpass.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,24 +1,24 @@\n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-static-bound-rpass.rs:5:5\n+  --> $DIR/regions-static-bound-rpass.rs:4:11\n    |\n-LL |     'a: 'static,\n-   |     ^^\n+LL |     where 'a: 'static { t }\n+   |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n warning: unnecessary lifetime parameter `'a`\n-  --> $DIR/regions-static-bound-rpass.rs:12:5\n+  --> $DIR/regions-static-bound-rpass.rs:8:11\n    |\n-LL |     'a: 'static,\n-   |     ^^\n+LL |     where 'a: 'static { t }\n+   |           ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n warning: unnecessary lifetime parameter `'b`\n-  --> $DIR/regions-static-bound-rpass.rs:20:5\n+  --> $DIR/regions-static-bound-rpass.rs:12:19\n    |\n-LL |     'b: 'static,\n-   |     ^^\n+LL |     where 'a: 'b, 'b: 'static { t }\n+   |                   ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'b`\n "}, {"sha": "6b8120444d067a5c56f796c771250624764f3c15", "filename": "src/test/ui/regions/regions-static-bound.base.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,32 +1,48 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/regions-static-bound.rs:6:11\n+   |\n+LL |     where 'a: 'static { t }\n+   |           ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+warning: unnecessary lifetime parameter `'b`\n+  --> $DIR/regions-static-bound.rs:10:19\n+   |\n+LL |     where 'a: 'b, 'b: 'static { t }\n+   |                   ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'b`\n+\n error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:14:5\n    |\n LL |     t\n    |     ^\n    |\n    = note: ...the reference is valid for the static lifetime...\n note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-static-bound.rs:9:24\n+  --> $DIR/regions-static-bound.rs:13:24\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        ^^\n \n error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-static-bound.rs:16:5\n+  --> $DIR/regions-static-bound.rs:20:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |             --- this data with an anonymous lifetime `'_`...\n LL |     static_id(&u);\n    |     ^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/regions-static-bound.rs:16:5\n+  --> $DIR/regions-static-bound.rs:20:5\n    |\n LL |     static_id(&u);\n    |     ^^^^^^^^^\n \n error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/regions-static-bound.rs:19:5\n+  --> $DIR/regions-static-bound.rs:23:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                     --- this data with an anonymous lifetime `'_`...\n@@ -35,12 +51,12 @@ LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^ -- ...is used here...\n    |\n note: ...and is required to live as long as `'static` here\n-  --> $DIR/regions-static-bound.rs:19:5\n+  --> $DIR/regions-static-bound.rs:23:5\n    |\n LL |     static_id_indirect(&v);\n    |     ^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 3 previous errors; 2 warnings emitted\n \n Some errors have detailed explanations: E0312, E0759.\n For more information about an error, try `rustc --explain E0312`."}, {"sha": "68e36f3aeea8f514fe2513f9d5de1126fac48e24", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,13 +1,29 @@\n+warning: unnecessary lifetime parameter `'a`\n+  --> $DIR/regions-static-bound.rs:6:11\n+   |\n+LL |     where 'a: 'static { t }\n+   |           ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'a`\n+\n+warning: unnecessary lifetime parameter `'b`\n+  --> $DIR/regions-static-bound.rs:10:19\n+   |\n+LL |     where 'a: 'b, 'b: 'static { t }\n+   |                   ^^\n+   |\n+   = help: you can use the `'static` lifetime directly, in place of `'b`\n+\n error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:10:5\n+  --> $DIR/regions-static-bound.rs:14:5\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:16:5\n+  --> $DIR/regions-static-bound.rs:20:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |          -  - let's call the lifetime of this reference `'1`\n@@ -20,7 +36,7 @@ LL |     static_id(&u);\n    |     argument requires that `'1` must outlive `'static`\n \n error[E0521]: borrowed data escapes outside of function\n-  --> $DIR/regions-static-bound.rs:19:5\n+  --> $DIR/regions-static-bound.rs:23:5\n    |\n LL | fn error(u: &(), v: &()) {\n    |                  -  - let's call the lifetime of this reference `'2`\n@@ -33,6 +49,6 @@ LL |     static_id_indirect(&v);\n    |     `v` escapes the function body here\n    |     argument requires that `'2` must outlive `'static`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 3 previous errors; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0521`."}, {"sha": "1eed7e71745d8f3877c6ba8e7f1b7a415d235274", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -4,8 +4,12 @@\n \n fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'static { t }\n+//~^ WARN unnecessary lifetime parameter `'a`\n+\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n+//~^ WARN unnecessary lifetime parameter `'b`\n+\n fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n     t\n     //[base]~^ ERROR E0312"}, {"sha": "950ffd6c89bd31ed2757c2d17d1a95b7ba628562", "filename": "src/test/ui/rfc-2093-infer-outlives/dont-infer-static.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fdont-infer-static.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,8 +1,6 @@\n error[E0310]: the parameter type `U` may not live long enough\n   --> $DIR/dont-infer-static.rs:8:10\n    |\n-LL | struct Foo<U> {\n-   |            - help: consider adding an explicit lifetime bound...: `U: 'static`\n LL |     bar: Bar<U>\n    |          ^^^^^^ ...so that the type `U` will meet its required lifetime bounds...\n    |\n@@ -11,6 +9,10 @@ note: ...that is required by this bound\n    |\n LL | struct Bar<T: 'static> {\n    |               ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<U: 'static> {\n+   |             +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "2c660b285009723961eadea6d1dc5f120a019de9", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-enum-not-wf.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-enum-not-wf.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,27 +1,35 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:17:18\n    |\n-LL | enum Ref1<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     Ref1Variant1(RequireOutlives<'a, T>),\n    |                  ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | enum Ref1<'a, T: 'a> {\n+   |                ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:22:25\n    |\n-LL | enum Ref2<'a, T> {\n-   |               - help: consider adding an explicit lifetime bound...: `T: 'a`\n-LL |     Ref2Variant1,\n LL |     Ref2Variant2(isize, RequireOutlives<'a, T>),\n    |                         ^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | enum Ref2<'a, T: 'a> {\n+   |                ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-enum-not-wf.rs:35:23\n    |\n-LL | enum RefDouble<'a, 'b, T> {\n-   |                        - help: consider adding an explicit lifetime bound...: `T: 'b`\n LL |     RefDoubleVariant1(&'a RequireOutlives<'b, T>),\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | enum RefDouble<'a, 'b, T: 'b> {\n+   |                         ++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "34ff1362cf32336d3d2dd1f441cbc848c6784129", "filename": "src/test/ui/rfc-2093-infer-outlives/regions-struct-not-wf.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2093-infer-outlives%2Fregions-struct-not-wf.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,16 +1,17 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:13:16\n    |\n-LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a T;\n    |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for usize {\n+   |           ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/regions-struct-not-wf.rs:21:16\n    |\n-LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = RefOk<'a, T>;\n    |                ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds...\n    |\n@@ -19,6 +20,10 @@ note: ...that is required by this bound\n    |\n LL | struct RefOk<'a, T:'a> {\n    |                    ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for u32 {\n+   |           ++++\n \n error[E0491]: in type `&'a &'b T`, reference has a longer lifetime than the data it references\n   --> $DIR/regions-struct-not-wf.rs:25:16"}, {"sha": "ef07a89315f4088ddd653b649a5e0d8cf1f99fd3", "filename": "src/test/ui/static/static-lifetime-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-lifetime-bound.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,7 +2,7 @@ warning: unnecessary lifetime parameter `'a`\n   --> $DIR/static-lifetime-bound.rs:1:6\n    |\n LL | fn f<'a: 'static>(_: &'a i32) {}\n-   |      ^^^^^^^^^^^\n+   |      ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n "}, {"sha": "17a019c69849f0174b014633b8da9dc65e765497", "filename": "src/test/ui/suggestions/bound-suggestions.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.fixed?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -35,7 +35,7 @@ fn test_one_bound_where<X>(x: X) where X: Sized + std::fmt::Debug {\n }\n \n #[allow(dead_code)]\n-fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n+fn test_many_bounds_where<X>(x: X) where X: Sized + std::fmt::Debug, X: Sized {\n     println!(\"{:?}\", x);\n     //~^ ERROR doesn't implement\n }"}, {"sha": "e5e19444d2435c3a5796c9f194ffdb65d679d96b", "filename": "src/test/ui/suggestions/bound-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fbound-suggestions.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -65,10 +65,10 @@ LL |     println!(\"{:?}\", x);\n    |                      ^ `X` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n    |\n    = note: this error originates in the macro `$crate::format_args_nl` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider further restricting type parameter `X`\n+help: consider further restricting this bound\n    |\n-LL | fn test_many_bounds_where<X>(x: X) where X: Sized, X: Sized, X: std::fmt::Debug {\n-   |                                                            ++++++++++++++++++++\n+LL | fn test_many_bounds_where<X>(x: X) where X: Sized + std::fmt::Debug, X: Sized {\n+   |                                                   +++++++++++++++++\n \n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/bound-suggestions.rs:44:46"}, {"sha": "8ec7b7bf496581e19e3436cef18e3172f91f76d6", "filename": "src/test/ui/suggestions/impl-trait-with-missing-trait-bounds-in-arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-trait-bounds-in-arg.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -8,7 +8,7 @@ LL |     foo.hello();\n help: the following trait defines an item `hello`, perhaps you need to restrict type parameter `impl Foo` with it:\n    |\n LL | fn test(foo: impl Foo + Bar) {\n-   |              ~~~~~~~~~~~~~~\n+   |                       +++++\n \n error: aborting due to previous error\n "}, {"sha": "0a4aaa61bc784cfc3b441d853e8b6c377831d8aa", "filename": "src/test/ui/suggestions/issue-21673.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-21673.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -7,8 +7,8 @@ LL |     x.method()\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n help: the following trait defines an item `method`, perhaps you need to restrict type parameter `T` with it:\n    |\n-LL | fn call_method<T: Foo + std::fmt::Debug>(x: &T) {\n-   |                ~~~~~~~~\n+LL | fn call_method<T: std::fmt::Debug + Foo>(x: &T) {\n+   |                                   +++++\n \n error[E0599]: no method named `method` found for type parameter `T` in the current scope\n   --> $DIR/issue-21673.rs:10:7\n@@ -20,7 +20,7 @@ LL |     x.method()\n help: the following trait defines an item `method`, perhaps you need to restrict type parameter `T` with it:\n    |\n LL | fn call_method_2<T: Foo>(x: T) {\n-   |                  ~~~~~~\n+   |                   +++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5d195e5ff32f76eabfe1a4834151edba0b2d8ade", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature-2.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,8 +1,6 @@\n error[E0311]: the parameter type `T` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature-2.rs:20:9\n    |\n-LL | fn func<T: Test>(foo: &Foo, t: T) {\n-   |         -- help: consider adding an explicit lifetime bound...: `T: 'a +`\n LL |     foo.bar(move |_| {\n    |         ^^^\n    |\n@@ -21,6 +19,10 @@ note: ...that is required by this bound\n    |\n LL |         F: 'a,\n    |            ^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn func<T: Test + 'a>(foo: &Foo, t: T) {\n+   |                 ++++\n \n error: aborting due to previous error\n "}, {"sha": "ae9a020a099f49c1ba175f597a63656493878ba2", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -41,8 +41,11 @@ LL | fn bar<G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                     ^^^^^^^^^^^^^^^^^^\n help: consider introducing an explicit lifetime bound\n    |\n-LL | fn bar<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |        ~~~~~                                                   ++++\n+LL ~ fn bar<'a, G, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+LL |\n+LL | where\n+LL ~     G: Get<T> + 'a,\n+   |\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:48:45\n@@ -62,8 +65,8 @@ LL | fn qux<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                             ^^^^^^^^^^^^^^^^^^\n help: consider introducing an explicit lifetime bound\n    |\n-LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n-   |        +++     ~~~~~~~                                                  ++++\n+LL | fn qux<'b, 'a, G: 'a + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n+   |        +++           ++++                                               ++++\n \n error[E0311]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:60:58\n@@ -83,8 +86,8 @@ LL |     fn qux<'b, G: Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_\n    |                                                          ^^^^^^^^^^^^^^^^^^\n help: consider introducing an explicit lifetime bound\n    |\n-LL |     fn qux<'c, 'b, G: 'c + Get<T> + 'b, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'c {\n-   |            +++     ~~~~~~~                                                           ++++\n+LL |     fn qux<'c, 'b, G: Get<T> + 'b + 'c, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'c {\n+   |            +++                    ++++                                               ++++\n \n error[E0621]: explicit lifetime required in the type of `dest`\n   --> $DIR/missing-lifetimes-in-signature.rs:69:45\n@@ -98,9 +101,12 @@ error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:80:44\n    |\n LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n-   |            -                               ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:85:5: 87:6]` will meet its required lifetime bounds\n-   |            |\n-   |            help: consider adding an explicit lifetime bound...: `G: 'a`\n+   |                                            ^^^^^^^^^^^^^^^^^^ ...so that the type `[closure@$DIR/missing-lifetimes-in-signature.rs:85:5: 87:6]` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     G: Get<T> + 'a,\n+   |               ++++\n \n error: aborting due to 7 previous errors\n "}, {"sha": "01c2de7986419bed90a66cdce1f833ae9c503c4f", "filename": "src/test/ui/suggestions/restrict-type-argument.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frestrict-type-argument.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -85,8 +85,8 @@ LL | fn is_send<T: Send>(val: T) {}\n    |               ^^^^ required by this bound in `is_send`\n help: consider further restricting this bound\n    |\n-LL | fn use_bound_and_where<S: Sync>(val: S) where S: std::fmt::Debug + std::marker::Send {\n-   |                                                                  +++++++++++++++++++\n+LL | fn use_bound_and_where<S: Sync + std::marker::Send>(val: S) where S: std::fmt::Debug {\n+   |                                +++++++++++++++++++\n \n error[E0277]: `S` cannot be sent between threads safely\n   --> $DIR/restrict-type-argument.rs:28:13"}, {"sha": "4a99c3a14d7bbc9c7146e4fa36553e7e3c51f4fc", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,9 +1,6 @@\n error[E0310]: the parameter type `impl Debug` may not live long enough\n   --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n    |\n-LL | fn foo(d: impl Debug) {\n-   |           ---------- help: consider adding an explicit lifetime bound...: `impl Debug + 'static`\n-LL |\n LL |     bar(d);\n    |     ^^^ ...so that the type `impl Debug` will meet its required lifetime bounds...\n    |\n@@ -12,6 +9,10 @@ note: ...that is required by this bound\n    |\n LL | fn bar(d: impl Debug + 'static) {\n    |                        ^^^^^^^\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo(d: impl Debug + 'static) {\n+   |                      +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "35d41c6266761680735097ff32e80c8418f3ad32", "filename": "src/test/ui/traits/issue-65284-suggest-generic-trait-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-65284-suggest-generic-trait-bound.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -7,8 +7,8 @@ LL |     t.foo()\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n help: the following trait defines an item `foo`, perhaps you need to restrict type parameter `T` with it:\n    |\n-LL | fn do_stuff<T: Foo + Bar>(t : T) {\n-   |             ~~~~~~~~\n+LL | fn do_stuff<T : Bar + Foo>(t : T) {\n+   |                     +++++\n \n error: aborting due to previous error\n "}, {"sha": "0b06b9b6e01b6b6396d10f05b8d74be82ee84bc5", "filename": "src/test/ui/traits/issue-95898.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-95898.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -7,8 +7,8 @@ LL |     t.clone();\n    = help: items from traits can only be used if the type parameter is bounded by the trait\n help: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it:\n    |\n-LL | fn foo<T: Clone>(t: T) {\n-   |        ~~~~~~~~\n+LL | fn foo<T: Clone:>(t: T) {\n+   |         +++++++\n \n error: aborting due to previous error\n "}, {"sha": "920eef11da4b993dcdf66fb168602371b8145781", "filename": "src/test/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -2,7 +2,7 @@ warning: unnecessary lifetime parameter `'a`\n   --> $DIR/bounds-are-checked.rs:8:6\n    |\n LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n-   |      ^^^^^^^^^^^\n+   |      ^^\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n "}, {"sha": "593fb8af32f30400a1ce4f9bf9ed41a335b876a2", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.base.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.base.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -19,10 +19,13 @@ LL | type WrongGeneric<T> = impl 'static;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn wrong_generic<T: 'static>(t: T) -> WrongGeneric<T> {\n+   |                   +++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "593fb8af32f30400a1ce4f9bf9ed41a335b876a2", "filename": "src/test/ui/type-alias-impl-trait/generic_type_does_not_live_long_enough.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -19,10 +19,13 @@ LL | type WrongGeneric<T> = impl 'static;\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/generic_type_does_not_live_long_enough.rs:18:5\n    |\n-LL | fn wrong_generic<T>(t: T) -> WrongGeneric<T> {\n-   |                  - help: consider adding an explicit lifetime bound...: `T: 'static`\n LL |     t\n    |     ^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn wrong_generic<T: 'static>(t: T) -> WrongGeneric<T> {\n+   |                   +++++++++\n \n error: aborting due to 3 previous errors\n "}, {"sha": "b9d4857a3efde0d57ab0c92a8657a27e86377e9b", "filename": "src/test/ui/wf/wf-impl-associated-type-region.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-impl-associated-type-region.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,10 +1,13 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-impl-associated-type-region.rs:10:16\n    |\n-LL | impl<'a, T> Foo<'a> for T {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Bar = &'a T;\n    |                ^^^^^ ...so that the reference type `&'a T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Foo<'a> for T {\n+   |           ++++\n \n error: aborting due to previous error\n "}, {"sha": "73fbb9ca670b021cfb77b75010ea08c39b4a9353", "filename": "src/test/ui/wf/wf-in-fn-type-static.stderr", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-fn-type-static.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,20 +1,24 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:13:8\n    |\n-LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // needs T: 'static\n LL |     x: fn() -> &'static T\n    |        ^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-fn-type-static.rs:18:8\n    |\n-LL | struct Bar<T> {\n-   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // needs T: Copy\n LL |     x: fn(&'static T)\n    |        ^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Bar<T: 'static> {\n+   |             +++++++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c3ad42dd5d5ac0b878d73dbafb76c8daf45230d6", "filename": "src/test/ui/wf/wf-in-obj-type-static.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-in-obj-type-static.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,11 +1,13 @@\n error[E0310]: the parameter type `T` may not live long enough\n   --> $DIR/wf-in-obj-type-static.rs:14:8\n    |\n-LL | struct Foo<T> {\n-   |            - help: consider adding an explicit lifetime bound...: `T: 'static`\n-LL |     // needs T: 'static\n LL |     x: dyn Object<&'static T>\n    |        ^^^^^^^^^^^^^^^^^^^^^^ ...so that the reference type `&'static T` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | struct Foo<T: 'static> {\n+   |             +++++++++\n \n error: aborting due to previous error\n "}, {"sha": "4d4d8b2ab4d463e1d12e783828a001e6a1873c56", "filename": "src/test/ui/wf/wf-outlives-ty-in-fn-or-trait.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-outlives-ty-in-fn-or-trait.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -1,18 +1,24 @@\n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:9:16\n    |\n-LL | impl<'a, T> Trait<'a, T> for usize {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a fn(T);\n    |                ^^^^^^^^^ ...so that the reference type `&'a fn(T)` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for usize {\n+   |           ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n   --> $DIR/wf-outlives-ty-in-fn-or-trait.rs:19:16\n    |\n-LL | impl<'a, T> Trait<'a, T> for u32 {\n-   |          - help: consider adding an explicit lifetime bound...: `T: 'a`\n LL |     type Out = &'a dyn Baz<T>;\n    |                ^^^^^^^^^^^^^^ ...so that the reference type `&'a (dyn Baz<T> + 'a)` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<'a, T: 'a> Trait<'a, T> for u32 {\n+   |           ++++\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9143fb2c208a05604d86a10e3fdb59f569b7b3b6", "filename": "src/tools/clippy/tests/ui/extra_unused_lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fextra_unused_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fextra_unused_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fextra_unused_lifetimes.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -6,12 +6,6 @@ LL | fn unused_lt<'a>(x: u8) {}\n    |\n    = note: `-D clippy::extra-unused-lifetimes` implied by `-D warnings`\n \n-error: this lifetime isn't used in the function definition\n-  --> $DIR/extra_unused_lifetimes.rs:16:25\n-   |\n-LL | fn unused_lt_transitive<'a, 'b: 'a>(x: &'b u8) {\n-   |                         ^^\n-\n error: this lifetime isn't used in the function definition\n   --> $DIR/extra_unused_lifetimes.rs:41:10\n    |\n@@ -24,5 +18,5 @@ error: this lifetime isn't used in the function definition\n LL |         fn unused_lt<'a>(x: u8) {}\n    |                      ^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "a488bc01fffa289257f8cd7032c32eacf32ab3f3", "filename": "src/tools/clippy/tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bbb98019fc447c4afd71d03f6990dcc0c7f160/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_lifetimes.stderr?ref=03bbb98019fc447c4afd71d03f6990dcc0c7f160", "patch": "@@ -108,12 +108,6 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:307:5\n-   |\n-LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/needless_lifetimes.rs:310:5\n    |\n@@ -192,5 +186,5 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn lifetime_elsewhere_provided<'a>(self: Box<Self>, here: &'a ()) -> &'a () {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 31 previous errors\n "}]}