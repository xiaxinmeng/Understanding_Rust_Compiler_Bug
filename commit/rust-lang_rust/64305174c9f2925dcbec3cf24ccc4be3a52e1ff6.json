{"sha": "64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MzA1MTc0YzlmMjkyNWRjYmVjM2NmMjRjY2M0YmUzYTUyZTFmZjY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-16T00:59:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-16T01:15:02Z"}, "message": "librustc: Fix cross-crate reexports. rs=blocking-servo", "tree": {"sha": "02e6fd0029a95740c49474bd4622f9bde6467d0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02e6fd0029a95740c49474bd4622f9bde6467d0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "html_url": "https://github.com/rust-lang/rust/commit/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb355bf7ad63d087a558c0509dfe350016dd35ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb355bf7ad63d087a558c0509dfe350016dd35ba", "html_url": "https://github.com/rust-lang/rust/commit/cb355bf7ad63d087a558c0509dfe350016dd35ba"}], "stats": {"total": 83, "additions": 56, "deletions": 27}, "files": [{"sha": "726ea31e7daf5832be231e81fd2fd4e669e07ab1", "filename": "src/libcore/float.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "patch": "@@ -16,15 +16,15 @@\n \n use m_float = f64;\n \n-use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n-use f64::logarithm;\n-use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n-use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n-use f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n-use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n-use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n-use f64::signbit;\n-use f64::{j0, j1, jn, y0, y1, yn};\n+pub use f64::{add, sub, mul, div, rem, lt, le, eq, ne, ge, gt};\n+pub use f64::logarithm;\n+pub use f64::{acos, asin, atan2, cbrt, ceil, copysign, cosh, floor};\n+pub use f64::{erf, erfc, exp, expm1, exp2, abs_sub};\n+pub use f64::{mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp};\n+pub use f64::{lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix};\n+pub use f64::{modf, pow, round, sinh, tanh, tgamma, trunc};\n+pub use f64::signbit;\n+pub use f64::{j0, j1, jn, y0, y1, yn};\n use cmp::{Eq, Ord};\n use num::from_int;\n "}, {"sha": "6f67b948aa4085517659065c595788093afe0170", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 28, "deletions": 18, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "patch": "@@ -1687,7 +1687,7 @@ impl Resolver {\n                     // avoid creating cycles in the\n                     // module graph.\n \n-                    let resolution = @ImportResolution(Private, dummy_sp());\n+                    let resolution = @ImportResolution(Public, dummy_sp());\n                     resolution.outstanding_references = 0;\n \n                     match existing_module.parent_link {\n@@ -3199,23 +3199,26 @@ impl Resolver {\n     fn add_exports_of_namebindings(exports2: &mut ~[Export2],\n                                    ident: ident,\n                                    namebindings: @NameBindings,\n+                                   ns: Namespace,\n                                    reexport: bool) {\n-        for [ TypeNS, ValueNS ].each |ns| {\n-            match (namebindings.def_for_namespace(*ns),\n-                   namebindings.privacy_for_namespace(*ns)) {\n-                (Some(d), Some(Public)) => {\n-                    debug!(\"(computing exports) YES: %s '%s' \\\n-                            => %?\",\n-                           if reexport { ~\"reexport\" } else { ~\"export\"},\n-                           self.session.str_of(ident),\n-                           def_id_of_def(d));\n-                    exports2.push(Export2 {\n-                        reexport: reexport,\n-                        name: self.session.str_of(ident),\n-                        def_id: def_id_of_def(d)\n-                    });\n-                }\n-                _ => ()\n+        match (namebindings.def_for_namespace(ns),\n+               namebindings.privacy_for_namespace(ns)) {\n+            (Some(d), Some(Public)) => {\n+                debug!(\"(computing exports) YES: %s '%s' => %?\",\n+                       if reexport { ~\"reexport\" } else { ~\"export\"},\n+                       self.session.str_of(ident),\n+                       def_id_of_def(d));\n+                exports2.push(Export2 {\n+                    reexport: reexport,\n+                    name: self.session.str_of(ident),\n+                    def_id: def_id_of_def(d)\n+                });\n+            }\n+            (Some(_), Some(privacy)) => {\n+                debug!(\"(computing reexports) NO: privacy %?\", privacy);\n+            }\n+            (d_opt, p_opt) => {\n+                debug!(\"(computing reexports) NO: %?, %?\", d_opt, p_opt);\n             }\n         }\n     }\n@@ -3227,7 +3230,13 @@ impl Resolver {\n             self.add_exports_of_namebindings(exports2,\n                                              *ident,\n                                              *namebindings,\n-                                             false)\n+                                             TypeNS,\n+                                             false);\n+            self.add_exports_of_namebindings(exports2,\n+                                             *ident,\n+                                             *namebindings,\n+                                             ValueNS,\n+                                             false);\n         }\n \n         for module_.import_resolutions.each_ref |ident, importresolution| {\n@@ -3244,6 +3253,7 @@ impl Resolver {\n                         self.add_exports_of_namebindings(exports2,\n                                                          *ident,\n                                                          target.bindings,\n+                                                         *ns,\n                                                          true)\n                     }\n                     _ => ()"}, {"sha": "99a85c66b4ffb77035101297312b0a7ed03c0299", "filename": "src/test/auxiliary/pub_use_mods_xcrate.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs?ref=64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "patch": "@@ -0,0 +1,11 @@\n+pub mod a {\n+    pub mod b {\n+        pub mod c {\n+            fn f(){}\n+            fn g(){}\n+        }\n+    }\n+\n+    pub use b::c;\n+}\n+"}, {"sha": "ddba3e4a387c237a332028d2509bb63c92252f80", "filename": "src/test/run-pass/pub_use_mods_xcrate_exe.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Ftest%2Frun-pass%2Fpub_use_mods_xcrate_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64305174c9f2925dcbec3cf24ccc4be3a52e1ff6/src%2Ftest%2Frun-pass%2Fpub_use_mods_xcrate_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpub_use_mods_xcrate_exe.rs?ref=64305174c9f2925dcbec3cf24ccc4be3a52e1ff6", "patch": "@@ -0,0 +1,8 @@\n+// xfail-fast\n+// aux-build:pub_use_mods_xcrate.rs\n+\n+extern mod pub_use_mods_xcrate;\n+use pub_use_mods_xcrate::a::c;\n+\n+fn main(){}\n+"}]}