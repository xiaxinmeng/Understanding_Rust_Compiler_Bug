{"sha": "b04922184457b1f3b5457b73051d128d39e6beec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDkyMjE4NDQ1N2IxZjNiNTQ1N2I3MzA1MWQxMjhkMzllNmJlZWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T00:14:42Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-08-02T01:44:36Z"}, "message": "Address review comments", "tree": {"sha": "8c31c2d9c7662f7b9aa5be8047ea3837d9d9c4cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c31c2d9c7662f7b9aa5be8047ea3837d9d9c4cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04922184457b1f3b5457b73051d128d39e6beec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04922184457b1f3b5457b73051d128d39e6beec", "html_url": "https://github.com/rust-lang/rust/commit/b04922184457b1f3b5457b73051d128d39e6beec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04922184457b1f3b5457b73051d128d39e6beec/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0", "html_url": "https://github.com/rust-lang/rust/commit/a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0"}], "stats": {"total": 140, "additions": 24, "deletions": 116}, "files": [{"sha": "5fe8069e3326ac567785facba811dc97aa58c130", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -1929,7 +1929,7 @@ pub struct OpaqueTy {\n     pub origin: OpaqueTyOrigin,\n }\n \n-/// Where the opaque type came from\n+/// From whence the opaque type came.\n #[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub enum OpaqueTyOrigin {\n     /// `type Foo = impl Trait;`"}, {"sha": "315e9ac98066d87e1ced3f836608978212d479a6", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -565,17 +565,12 @@ impl<'a> State<'a> {\n                 self.s.word(\";\");\n                 self.end(); // end the outer ibox\n             }\n-            hir::ItemKind::OpaqueTy(ref exist) => {\n+            hir::ItemKind::OpaqueTy(ref opaque_ty) => {\n                 self.head(visibility_qualified(&item.vis, \"type\"));\n                 self.print_ident(item.ident);\n-                self.word_space(\"= impl\");\n-                self.print_generic_params(&exist.generics.params);\n-                self.end(); // end the inner ibox\n-\n-                self.print_where_clause(&exist.generics.where_clause);\n-                self.s.space();\n-                let mut real_bounds = Vec::with_capacity(exist.bounds.len());\n-                for b in exist.bounds.iter() {\n+                self.print_generic_params(&opaque_ty.generics.params);\n+                let mut real_bounds = Vec::with_capacity(opaque_ty.bounds.len());\n+                for b in opaque_ty.bounds.iter() {\n                     if let GenericBound::Trait(ref ptr, hir::TraitBoundModifier::Maybe) = *b {\n                         self.s.space();\n                         self.word_space(\"for ?\");\n@@ -584,7 +579,11 @@ impl<'a> State<'a> {\n                         real_bounds.push(b);\n                     }\n                 }\n-                self.print_bounds(\":\", real_bounds);\n+                self.print_bounds(\" = impl\", real_bounds);\n+\n+                self.end(); // end the inner ibox\n+\n+                self.print_where_clause(&opaque_ty.generics.where_clause);\n                 self.s.word(\";\");\n                 self.end(); // end the outer ibox\n             }"}, {"sha": "ca6603b58530d76a79d4f7ccd1e2a656316ae367", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -393,7 +393,7 @@ pub struct TypeckTables<'tcx> {\n     pub free_region_map: FreeRegionMap<'tcx>,\n \n     /// All the opaque types that are restricted to concrete types\n-    /// by this function\n+    /// by this function.\n     pub concrete_opaque_types: FxHashMap<DefId, ResolvedOpaqueTy<'tcx>>,\n \n     /// Given the closure ID this map provides the list of UpvarIDs used by it."}, {"sha": "cbfaf91cdfc998d4e7352cec4634371bfa7934a0", "filename": "src/librustc_save_analysis/sig.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_save_analysis%2Fsig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_save_analysis%2Fsig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fsig.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -438,28 +438,26 @@ impl Sig for ast::Item {\n                     refs: vec![],\n                 })\n             }\n-            ast::ItemKind::OpaqueTy(ref bounds, ref generics) => {\n+            ast::ItemKind::Ty(ref ty, ref generics) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n \n-                if !bounds.is_empty() {\n-                    sig.text.push_str(\" = impl \");\n-                    sig.text.push_str(&pprust::bounds_to_string(bounds));\n-                }\n+                sig.text.push_str(\" = \");\n+                let ty = ty.make(offset + sig.text.len(), id, scx)?;\n+                sig.text.push_str(&ty.text);\n                 sig.text.push(';');\n \n-                Ok(sig)\n+                Ok(merge_sigs(sig.text.clone(), vec![sig, ty]))\n             }\n-            ast::ItemKind::Ty(ref ty, ref generics) => {\n+            ast::ItemKind::OpaqueTy(ref bounds, ref generics) => {\n                 let text = \"type \".to_owned();\n                 let mut sig = name_and_generics(text, offset, generics, self.id, self.ident, scx)?;\n \n-                sig.text.push_str(\" = \");\n-                let ty = ty.make(offset + sig.text.len(), id, scx)?;\n-                sig.text.push_str(&ty.text);\n+                sig.text.push_str(\" = impl \");\n+                sig.text.push_str(&pprust::bounds_to_string(bounds));\n                 sig.text.push(';');\n \n-                Ok(merge_sigs(sig.text.clone(), vec![sig, ty]))\n+                Ok(sig)\n             }\n             ast::ItemKind::Enum(_, ref generics) => {\n                 let text = \"enum \".to_owned();"}, {"sha": "c1d8fde3be15b38462d97aeb123514c375bcb7a5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -219,7 +219,7 @@ fn check_associated_item(\n                 }\n             }\n             ty::AssocKind::OpaqueTy => {\n-                // do nothing, opaque types check themselves\n+                // Do nothing: opaque types check themselves.\n             }\n         }\n "}, {"sha": "6b288347ad00683875b77773b81034fc701451a5", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -296,7 +296,7 @@ pub fn check_explicit_predicates<'tcx>(\n         // struct MyStruct<'x, X> { field: Box<dyn Trait<'x, X>> }\n         // ```\n         //\n-        // The `where Self: 'a` predicate refers to the *opaque, hidden type*\n+        // The `where Self: 'a` predicate refers to the *existential, hidden type*\n         // that is represented by the `dyn Trait`, not to the `X` type parameter\n         // (or any other generic parameter) declared on `MyStruct`.\n         //"}, {"sha": "e2a88dec97f7c4c4da385965732ab7bcf554d2ae", "filename": "src/test/ui/issues/issue-60662.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-60662.stdout?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -10,5 +10,5 @@ extern crate std;\n trait Animal { }\n \n fn main() {\n-              pub type ServeFut= impl  : Animal;\n+              pub type ServeFut = impl Animal;\n           }"}, {"sha": "941f66c056104081da515f7994f1553eb62abd85", "filename": "src/test/ui/traits/trait-bounds-in-arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-bounds-in-arc.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n #![allow(unused_must_use)]\n-// Tests that a heterogeneous list of opaque types can be put inside an Arc\n+// Tests that a heterogeneous list of existential `dyn` types can be put inside an Arc\n // and shared between threads as long as all types fulfill Send.\n \n // ignore-emscripten no threads support"}, {"sha": "209134acf01f9723d50d9421bdf0caeb0074c306", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait-pass.rs", "status": "removed", "additions": 0, "deletions": 89, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait-pass.rs?ref=a45cde5ad0089bdd9043ba713c5e02ec27e6d2f0", "patch": "@@ -1,89 +0,0 @@\n-// run-pass\n-\n-#![allow(dead_code)]\n-#![allow(unused_assignments)]\n-#![allow(unused_variables)]\n-#![feature(type_alias_impl_trait)]\n-\n-fn main() {\n-    assert_eq!(foo().to_string(), \"foo\");\n-    assert_eq!(bar1().to_string(), \"bar1\");\n-    assert_eq!(bar2().to_string(), \"bar2\");\n-    let mut x = bar1();\n-    x = bar2();\n-    assert_eq!(boo::boo().to_string(), \"boo\");\n-    assert_eq!(my_iter(42u8).collect::<Vec<u8>>(), vec![42u8]);\n-}\n-\n-// single definition\n-type Foo = impl std::fmt::Display;\n-\n-fn foo() -> Foo {\n-    \"foo\"\n-}\n-\n-// two definitions\n-type Bar = impl std::fmt::Display;\n-\n-fn bar1() -> Bar {\n-    \"bar1\"\n-}\n-\n-fn bar2() -> Bar {\n-    \"bar2\"\n-}\n-\n-// definition in submodule\n-type Boo = impl std::fmt::Display;\n-\n-mod boo {\n-    pub fn boo() -> super::Boo {\n-        \"boo\"\n-    }\n-}\n-\n-type MyIter<T> = impl Iterator<Item = T>;\n-\n-fn my_iter<T>(t: T) -> MyIter<T> {\n-    std::iter::once(t)\n-}\n-\n-fn my_iter2<T>(t: T) -> MyIter<T> {\n-    std::iter::once(t)\n-}\n-\n-// param names should not have an effect!\n-fn my_iter3<U>(u: U) -> MyIter<U> {\n-    std::iter::once(u)\n-}\n-\n-// param position should not have an effect!\n-fn my_iter4<U, V>(_: U, v: V) -> MyIter<V> {\n-    std::iter::once(v)\n-}\n-\n-// param names should not have an effect!\n-type MyOtherIter<T> = impl Iterator<Item = T>;\n-\n-fn my_other_iter<U>(u: U) -> MyOtherIter<U> {\n-    std::iter::once(u)\n-}\n-\n-trait Trait {}\n-type GenericBound<'a, T: Trait> = impl Sized + 'a;\n-\n-fn generic_bound<'a, T: Trait + 'a>(t: T) -> GenericBound<'a, T> {\n-    t\n-}\n-\n-mod pass_through {\n-    pub type Passthrough<T> = impl Sized + 'static;\n-\n-    fn define_passthrough<T: 'static>(t: T) -> Passthrough<T> {\n-        t\n-    }\n-}\n-\n-fn use_passthrough(x: pass_through::Passthrough<u32>) -> pass_through::Passthrough<u32> {\n-    x\n-}"}, {"sha": "209134acf01f9723d50d9421bdf0caeb0074c306", "filename": "src/test/ui/type-alias-impl-trait/type-alias-impl-trait.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04922184457b1f3b5457b73051d128d39e6beec/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Ftype-alias-impl-trait.rs?ref=b04922184457b1f3b5457b73051d128d39e6beec", "previous_filename": "src/test/ui/type-alias-impl-trait.rs"}]}