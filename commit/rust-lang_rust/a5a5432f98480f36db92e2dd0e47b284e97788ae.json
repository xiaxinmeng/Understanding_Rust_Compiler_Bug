{"sha": "a5a5432f98480f36db92e2dd0e47b284e97788ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YTU0MzJmOTg0ODBmMzZkYjkyZTJkZDBlNDdiMjg0ZTk3Nzg4YWU=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-12T12:05:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2013-08-15T02:06:17Z"}, "message": "Switch metadata::encoder to <V:Visitor> trait.\n\nplacate make tidy.  Remove dead code.", "tree": {"sha": "6bf2887883e7158f9fe53a317d8247d2fe2b462e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf2887883e7158f9fe53a317d8247d2fe2b462e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5a5432f98480f36db92e2dd0e47b284e97788ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5a5432f98480f36db92e2dd0e47b284e97788ae", "html_url": "https://github.com/rust-lang/rust/commit/a5a5432f98480f36db92e2dd0e47b284e97788ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5a5432f98480f36db92e2dd0e47b284e97788ae/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d830106482e6096312404572486d11c6350a8f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d830106482e6096312404572486d11c6350a8f8", "html_url": "https://github.com/rust-lang/rust/commit/3d830106482e6096312404572486d11c6350a8f8"}], "stats": {"total": 130, "additions": 81, "deletions": 49}, "files": [{"sha": "4a3704dc3aa4e2a5198849d83b99847c2619b55e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 81, "deletions": 49, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/a5a5432f98480f36db92e2dd0e47b284e97788ae/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5a5432f98480f36db92e2dd0e47b284e97788ae/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a5a5432f98480f36db92e2dd0e47b284e97788ae", "patch": "@@ -39,7 +39,8 @@ use syntax::attr;\n use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::span_handler;\n use syntax::parse::token::special_idents;\n-use syntax::{ast_util, oldvisit};\n+use syntax::ast_util;\n+use syntax::visit;\n use syntax::parse::token;\n use syntax;\n use writer = extra::ebml::writer;\n@@ -1184,6 +1185,74 @@ fn encode_info_for_foreign_item(ecx: &EncodeContext,\n     ebml_w.end_tag();\n }\n \n+fn my_visit_expr(_e:@expr) { }\n+\n+fn my_visit_item(i:@item, items: ast_map::map, ebml_w:&writer::Encoder,\n+                 ecx_ptr:*int, index: @mut ~[entry<i64>]) {\n+    match items.get_copy(&i.id) {\n+        ast_map::node_item(_, pt) => {\n+            let mut ebml_w = ebml_w.clone();\n+            // See above\n+            let ecx : &EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n+            encode_info_for_item(ecx, &mut ebml_w, i, index, *pt);\n+        }\n+        _ => fail!(\"bad item\")\n+    }\n+}\n+\n+fn my_visit_foreign_item(ni:@foreign_item, items: ast_map::map, ebml_w:&writer::Encoder,\n+                         ecx_ptr:*int, index: @mut ~[entry<i64>]) {\n+    match items.get_copy(&ni.id) {\n+        ast_map::node_foreign_item(_, abi, _, pt) => {\n+            debug!(\"writing foreign item %s::%s\",\n+                   ast_map::path_to_str(\n+                       *pt,\n+                       token::get_ident_interner()),\n+                   token::ident_to_str(&ni.ident));\n+\n+            let mut ebml_w = ebml_w.clone();\n+            // See above\n+            let ecx : &EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n+            encode_info_for_foreign_item(ecx,\n+                                         &mut ebml_w,\n+                                         ni,\n+                                         index,\n+                                         pt,\n+                                         abi);\n+        }\n+        // case for separate item and foreign-item tables\n+        _ => fail!(\"bad foreign item\")\n+    }\n+}\n+\n+struct EncodeVisitor {\n+    ebml_w_for_visit_item: writer::Encoder,\n+    ebml_w_for_visit_foreign_item: writer::Encoder,\n+    ecx_ptr:*int,\n+    items: ast_map::map,\n+    index: @mut ~[entry<i64>],\n+}\n+\n+impl visit::Visitor<()> for EncodeVisitor {\n+    fn visit_expr(&mut self, ex:@expr, _:()) { my_visit_expr(ex); }\n+    fn visit_item(&mut self, i:@item, _:()) {\n+        visit::walk_item(self, i, ());\n+        my_visit_item(i,\n+                      self.items,\n+                      &self.ebml_w_for_visit_item,\n+                      self.ecx_ptr,\n+                      self.index);\n+    }\n+    fn visit_foreign_item(&mut self, ni:@foreign_item, _:()) {\n+        visit::walk_foreign_item(self, ni, ());\n+        my_visit_foreign_item(ni,\n+                              self.items,\n+                              &self.ebml_w_for_visit_foreign_item,\n+                              self.ecx_ptr,\n+                              self.index);\n+    }\n+}\n+\n fn encode_info_for_items(ecx: &EncodeContext,\n                          ebml_w: &mut writer::Encoder,\n                          crate: &Crate)\n@@ -1201,54 +1270,17 @@ fn encode_info_for_items(ecx: &EncodeContext,\n     let items = ecx.tcx.items;\n \n     // See comment in `encode_side_tables_for_ii` in astencode\n-    let ecx_ptr : *() = unsafe { cast::transmute(ecx) };\n-\n-    oldvisit::visit_crate(crate, ((), oldvisit::mk_vt(@oldvisit::Visitor {\n-        visit_expr: |_e, (_cx, _v)| { },\n-        visit_item: {\n-            let ebml_w = (*ebml_w).clone();\n-            |i, (cx, v)| {\n-                oldvisit::visit_item(i, (cx, v));\n-                match items.get_copy(&i.id) {\n-                    ast_map::node_item(_, pt) => {\n-                        let mut ebml_w = ebml_w.clone();\n-                        // See above\n-                        let ecx : &EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n-                        encode_info_for_item(ecx, &mut ebml_w, i, index, *pt);\n-                    }\n-                    _ => fail!(\"bad item\")\n-                }\n-            }\n-        },\n-        visit_foreign_item: {\n-            let ebml_w = (*ebml_w).clone();\n-            |ni, (cx, v)| {\n-                oldvisit::visit_foreign_item(ni, (cx, v));\n-                match items.get_copy(&ni.id) {\n-                    ast_map::node_foreign_item(_, abi, _, pt) => {\n-                        debug!(\"writing foreign item %s::%s\",\n-                               ast_map::path_to_str(\n-                                *pt,\n-                                token::get_ident_interner()),\n-                                token::ident_to_str(&ni.ident));\n-\n-                        let mut ebml_w = ebml_w.clone();\n-                        // See above\n-                        let ecx : &EncodeContext = unsafe { cast::transmute(ecx_ptr) };\n-                        encode_info_for_foreign_item(ecx,\n-                                                     &mut ebml_w,\n-                                                     ni,\n-                                                     index,\n-                                                     pt,\n-                                                     abi);\n-                    }\n-                    // case for separate item and foreign-item tables\n-                    _ => fail!(\"bad foreign item\")\n-                }\n-            }\n-        },\n-        ..*oldvisit::default_visitor()\n-    })));\n+    let ecx_ptr : *int = unsafe { cast::transmute(ecx) };\n+    let mut visitor = EncodeVisitor {\n+        index: index,\n+        items: items,\n+        ecx_ptr: ecx_ptr,\n+        ebml_w_for_visit_item: (*ebml_w).clone(),\n+        ebml_w_for_visit_foreign_item: (*ebml_w).clone(),\n+    };\n+\n+    visit::walk_crate(&mut visitor, crate, ());\n+\n     ebml_w.end_tag();\n     return /*bad*/(*index).clone();\n }"}]}