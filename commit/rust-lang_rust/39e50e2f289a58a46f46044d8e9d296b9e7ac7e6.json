{"sha": "39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZTUwZTJmMjg5YTU4YTQ2ZjQ2MDQ0ZDhlOWQyOTZiOWU3YWM3ZTY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T18:56:21Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:41:56Z"}, "message": "rustc: use ReifyShim for reifying Virtual call instances.", "tree": {"sha": "0d38df30866d8949cc5d84a3a466abad6ee28284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d38df30866d8949cc5d84a3a466abad6ee28284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "html_url": "https://github.com/rust-lang/rust/commit/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "html_url": "https://github.com/rust-lang/rust/commit/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe"}], "stats": {"total": 59, "additions": 34, "deletions": 25}, "files": [{"sha": "06fc168bd574003b49ae44abbd2b1696b50ce4d2", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "patch": "@@ -29,10 +29,15 @@ pub enum InstanceDef<'tcx> {\n \n     /// `fn()` pointer where the function itself cannot be turned into a pointer.\n     ///\n-    /// One example in the compiler today is functions annotated with `#[track_caller]`, which\n-    /// must have their implicit caller location argument populated for a call. Because this is a\n-    /// required part of the function's ABI but can't be tracked as a property of the function\n-    /// pointer, we create a single \"caller location\" at the site where the function is reified.\n+    /// One example is `<dyn Trait as Trait>::fn`, where the shim contains\n+    /// a virtual call, which codegen supports only via a direct call to the\n+    /// `<dyn Trait as Trait>::fn` instance (an `InstanceDef::Virtual`).\n+    ///\n+    /// Another example is functions annotated with `#[track_caller]`, which\n+    /// must have their implicit caller location argument populated for a call.\n+    /// Because this is a required part of the function's ABI but can't be tracked\n+    /// as a property of the function pointer, we use a single \"caller location\"\n+    /// (the definition of the function itself).\n     ReifyShim(DefId),\n \n     /// `<fn() as FnTrait>::call_*`\n@@ -194,7 +199,7 @@ impl<'tcx> fmt::Display for Instance<'tcx> {\n                 write!(f, \" - intrinsic\")\n             }\n             InstanceDef::Virtual(_, num) => {\n-                write!(f, \" - shim(#{})\", num)\n+                write!(f, \" - virtual#{}\", num)\n             }\n             InstanceDef::FnPtrShim(_, ty) => {\n                 write!(f, \" - shim({:?})\", ty)\n@@ -309,20 +314,23 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-        Instance::resolve(tcx, param_env, def_id, substs).map(|resolved| {\n+        Instance::resolve(tcx, param_env, def_id, substs).map(|mut resolved| {\n             let has_track_caller = |def| tcx.codegen_fn_attrs(def).flags\n                 .contains(CodegenFnAttrFlags::TRACK_CALLER);\n \n             match resolved.def {\n                 InstanceDef::Item(def_id) if has_track_caller(def_id) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n-                    Instance {\n-                        def: InstanceDef::ReifyShim(def_id),\n-                        substs,\n-                    }\n-                },\n-                _ => resolved,\n+                    resolved.def = InstanceDef::ReifyShim(def_id);\n+                }\n+                InstanceDef::Virtual(def_id, _) => {\n+                    debug!(\" => fn pointer created for virtual call\");\n+                    resolved.def = InstanceDef::ReifyShim(def_id);\n+                }\n+                _ => {}\n             }\n+\n+            resolved\n         })\n     }\n "}, {"sha": "93a76712b2869410948b877a665343cbe3f5cc72", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "patch": "@@ -741,23 +741,21 @@ fn visit_instance_use<'tcx>(\n     }\n \n     match instance.def {\n-        ty::InstanceDef::Intrinsic(def_id) => {\n+        ty::InstanceDef::Virtual(..) |\n+        ty::InstanceDef::Intrinsic(_) => {\n             if !is_direct_call {\n-                bug!(\"intrinsic {:?} being reified\", def_id);\n+                bug!(\"{:?} being reified\", instance);\n             }\n         }\n-        ty::InstanceDef::VtableShim(..) |\n-        ty::InstanceDef::ReifyShim(..) |\n-        ty::InstanceDef::Virtual(..) |\n         ty::InstanceDef::DropGlue(_, None) => {\n-            // Don't need to emit shim if we are calling directly.\n+            // Don't need to emit noop drop glue if we are calling directly.\n             if !is_direct_call {\n                 output.push(create_fn_mono_item(instance));\n             }\n         }\n-        ty::InstanceDef::DropGlue(_, Some(_)) => {\n-            output.push(create_fn_mono_item(instance));\n-        }\n+        ty::InstanceDef::DropGlue(_, Some(_)) |\n+        ty::InstanceDef::VtableShim(..) |\n+        ty::InstanceDef::ReifyShim(..) |\n         ty::InstanceDef::ClosureOnceShim { .. } |\n         ty::InstanceDef::Item(..) |\n         ty::InstanceDef::FnPtrShim(..) |"}, {"sha": "5b208dd85876377ab4a17443efbd98f3637b0325", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39e50e2f289a58a46f46044d8e9d296b9e7ac7e6/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=39e50e2f289a58a46f46044d8e9d296b9e7ac7e6", "patch": "@@ -67,10 +67,10 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n             )\n         }\n         // We are generating a call back to our def-id, which the\n-        // codegen backend knows to turn to an actual virtual call.\n-        ty::InstanceDef::Virtual(def_id, _) |\n-        // ...or we are generating a direct call to a function for which indirect calls must be\n-        // codegen'd differently than direct ones (example: #[track_caller])\n+        // codegen backend knows to turn to an actual call, be it\n+        // a virtual call, or a direct call to a function for which\n+        // indirect calls must be codegen'd differently than direct ones\n+        // (such as `#[track_caller]`).\n         ty::InstanceDef::ReifyShim(def_id) => {\n             build_call_shim(\n                 tcx,\n@@ -109,6 +109,9 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n                 bug!(\"builtin clone shim {:?} not supported\", instance)\n             }\n         }\n+        ty::InstanceDef::Virtual(..) => {\n+            bug!(\"InstanceDef::Virtual ({:?}) is for direct calls only\", instance)\n+        }\n         ty::InstanceDef::Intrinsic(_) => {\n             bug!(\"creating shims from intrinsics ({:?}) is unsupported\", instance)\n         }"}]}