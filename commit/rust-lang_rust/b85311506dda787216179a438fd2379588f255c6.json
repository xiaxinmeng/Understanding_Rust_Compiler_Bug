{"sha": "b85311506dda787216179a438fd2379588f255c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NTMxMTUwNmRkYTc4NzIxNjE3OWE0MzhmZDIzNzk1ODhmMjU1YzY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-27T16:40:31Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-12-08T15:00:35Z"}, "message": "prettify some statements", "tree": {"sha": "35da109c107b987847a6a4b1717dcc96fba06c88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35da109c107b987847a6a4b1717dcc96fba06c88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b85311506dda787216179a438fd2379588f255c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b85311506dda787216179a438fd2379588f255c6", "html_url": "https://github.com/rust-lang/rust/commit/b85311506dda787216179a438fd2379588f255c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b85311506dda787216179a438fd2379588f255c6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8864f2c83ac800881da34c3e835c931c081a8785", "url": "https://api.github.com/repos/rust-lang/rust/commits/8864f2c83ac800881da34c3e835c931c081a8785", "html_url": "https://github.com/rust-lang/rust/commit/8864f2c83ac800881da34c3e835c931c081a8785"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "a5b7eb8416e6fdd69c98a2a0d2a25b348242a4f7", "filename": "src/librustc_trans/trans/consts.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b85311506dda787216179a438fd2379588f255c6/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b85311506dda787216179a438fd2379588f255c6/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fconsts.rs?ref=b85311506dda787216179a438fd2379588f255c6", "patch": "@@ -287,27 +287,26 @@ pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                           -> Result<ValueRef, ConstEvalFailure> {\n     debug!(\"get_const_expr_as_global: {:?}\", expr.id);\n     // Special-case constants to cache a common global for all uses.\n-    match expr.node {\n-        hir::ExprPath(..) => {\n-            let def = ccx.tcx().def_map.borrow().get(&expr.id).unwrap().full_def();\n-            match def {\n-                def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n-                    if !ccx.tcx().tables.borrow().adjustments.contains_key(&expr.id) {\n-                        debug!(\"get_const_expr_as_global ({:?}): found const {:?}\",\n-                               expr.id, def_id);\n-                        return get_const_val(ccx, def_id, expr);\n-                    }\n+    if let hir::ExprPath(..) = expr.node {\n+        // `def` must be its own statement and cannot be in the `match`\n+        // otherwise the `def_map` will be borrowed for the entire match instead\n+        // of just to get the `def` value\n+        let def = ccx.tcx().def_map.borrow().get(&expr.id).unwrap().full_def();\n+        match def {\n+            def::DefConst(def_id) | def::DefAssociatedConst(def_id) => {\n+                if !ccx.tcx().tables.borrow().adjustments.contains_key(&expr.id) {\n+                    debug!(\"get_const_expr_as_global ({:?}): found const {:?}\",\n+                           expr.id, def_id);\n+                    return get_const_val(ccx, def_id, expr);\n                 }\n-                _ => {}\n-            }\n+            },\n+            _ => {},\n         }\n-        _ => {}\n     }\n \n     let key = (expr.id, param_substs);\n-    match ccx.const_values().borrow().get(&key) {\n-        Some(&val) => return Ok(val),\n-        None => {}\n+    if let Some(&val) = ccx.const_values().borrow().get(&key) {\n+        return Ok(val);\n     }\n     let ty = monomorphize::apply_param_substs(ccx.tcx(), param_substs,\n                                               &ccx.tcx().expr_ty(expr));\n@@ -316,10 +315,7 @@ pub fn get_const_expr_as_global<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // references, even when only the latter are correct.\n         try!(const_expr_unadjusted(ccx, expr, ty, param_substs, None, trueconst))\n     } else {\n-        match const_expr(ccx, expr, param_substs, None, trueconst) {\n-            Err(err) => return Err(err),\n-            Ok((ok, _)) => ok,\n-        }\n+        try!(const_expr(ccx, expr, param_substs, None, trueconst)).0\n     };\n \n     // boolean SSA values are i1, but they have to be stored in i8 slots,\n@@ -577,9 +573,7 @@ fn const_expr_unadjusted<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     };\n     let _icx = push_ctxt(\"const_expr\");\n     Ok(match e.node {\n-        hir::ExprLit(ref lit) => {\n-            const_lit(cx, e, &**lit)\n-        },\n+        hir::ExprLit(ref lit) => const_lit(cx, e, &**lit),\n         hir::ExprBinary(b, ref e1, ref e2) => {\n             /* Neither type is bottom, and we expect them to be unified\n              * already, so the following is safe. */"}]}