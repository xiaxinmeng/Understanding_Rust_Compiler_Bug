{"sha": "75734a9cd355a7d122bc60dd059a825cf9616c7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NzM0YTljZDM1NWE3ZDEyMmJjNjBkZDA1OWE4MjVjZjk2MTZjN2Q=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-04T00:40:29Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-08-04T22:11:56Z"}, "message": "std::rt: Run the tests for Local in a bare thread\n\nOtherwise interferes with the existing runtime", "tree": {"sha": "95c07f9792acb20acc900ec4bf082af6232da340", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95c07f9792acb20acc900ec4bf082af6232da340"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75734a9cd355a7d122bc60dd059a825cf9616c7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75734a9cd355a7d122bc60dd059a825cf9616c7d", "html_url": "https://github.com/rust-lang/rust/commit/75734a9cd355a7d122bc60dd059a825cf9616c7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75734a9cd355a7d122bc60dd059a825cf9616c7d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835e963dbd6514473bfa234eb4423c8ceb478d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/835e963dbd6514473bfa234eb4423c8ceb478d52", "html_url": "https://github.com/rust-lang/rust/commit/835e963dbd6514473bfa234eb4423c8ceb478d52"}], "stats": {"total": 81, "additions": 45, "deletions": 36}, "files": [{"sha": "131507196b1f2558e61d6d7276ba1ca613f827c3", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 45, "deletions": 36, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/75734a9cd355a7d122bc60dd059a825cf9616c7d/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75734a9cd355a7d122bc60dd059a825cf9616c7d/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=75734a9cd355a7d122bc60dd059a825cf9616c7d", "patch": "@@ -126,63 +126,72 @@ impl Local for IoFactoryObject {\n \n #[cfg(test)]\n mod test {\n+    use unstable::run_in_bare_thread;\n     use rt::test::*;\n     use super::*;\n     use rt::task::Task;\n     use rt::local_ptr;\n \n     #[test]\n     fn thread_local_task_smoke_test() {\n-        local_ptr::init_tls_key();\n-        let mut sched = ~new_test_uv_sched();\n-        let task = ~Task::new_root(&mut sched.stack_pool, || {});\n-        Local::put(task);\n-        let task: ~Task = Local::take();\n-        cleanup_task(task);\n+        do run_in_bare_thread {\n+            local_ptr::init_tls_key();\n+            let mut sched = ~new_test_uv_sched();\n+            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            Local::put(task);\n+            let task: ~Task = Local::take();\n+            cleanup_task(task);\n+        }\n     }\n \n     #[test]\n     fn thread_local_task_two_instances() {\n-        local_ptr::init_tls_key();\n-        let mut sched = ~new_test_uv_sched();\n-        let task = ~Task::new_root(&mut sched.stack_pool, || {});\n-        Local::put(task);\n-        let task: ~Task = Local::take();\n-        cleanup_task(task);\n-        let task = ~Task::new_root(&mut sched.stack_pool, || {});\n-        Local::put(task);\n-        let task: ~Task = Local::take();\n-        cleanup_task(task);\n+        do run_in_bare_thread {\n+            local_ptr::init_tls_key();\n+            let mut sched = ~new_test_uv_sched();\n+            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            Local::put(task);\n+            let task: ~Task = Local::take();\n+            cleanup_task(task);\n+            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            Local::put(task);\n+            let task: ~Task = Local::take();\n+            cleanup_task(task);\n+        }\n \n     }\n \n     #[test]\n     fn borrow_smoke_test() {\n-        local_ptr::init_tls_key();\n-        let mut sched = ~new_test_uv_sched();\n-        let task = ~Task::new_root(&mut sched.stack_pool, || {});\n-        Local::put(task);\n-\n-        unsafe {\n-            let _task: *mut Task = Local::unsafe_borrow();\n+        do run_in_bare_thread {\n+            local_ptr::init_tls_key();\n+            let mut sched = ~new_test_uv_sched();\n+            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            Local::put(task);\n+\n+            unsafe {\n+                let _task: *mut Task = Local::unsafe_borrow();\n+            }\n+            let task: ~Task = Local::take();\n+            cleanup_task(task);\n         }\n-        let task: ~Task = Local::take();\n-        cleanup_task(task);\n     }\n \n     #[test]\n     fn borrow_with_return() {\n-        local_ptr::init_tls_key();\n-        let mut sched = ~new_test_uv_sched();\n-        let task = ~Task::new_root(&mut sched.stack_pool, || {});\n-        Local::put(task);\n-\n-        let res = do Local::borrow::<Task,bool> |_task| {\n-            true\n-        };\n-        assert!(res)\n-        let task: ~Task = Local::take();\n-        cleanup_task(task);\n+        do run_in_bare_thread {\n+            local_ptr::init_tls_key();\n+            let mut sched = ~new_test_uv_sched();\n+            let task = ~Task::new_root(&mut sched.stack_pool, || {});\n+            Local::put(task);\n+\n+            let res = do Local::borrow::<Task,bool> |_task| {\n+                true\n+            };\n+            assert!(res)\n+                let task: ~Task = Local::take();\n+            cleanup_task(task);\n+        }\n     }\n \n }"}]}