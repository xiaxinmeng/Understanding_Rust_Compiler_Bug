{"sha": "11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjdjYjI2YzI3YzNlYjNhZjNmN2VmNGY5Y2RiODUzMjdlNmUwMzA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T15:41:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-05-07T15:41:27Z"}, "message": "When autoborrowing a fn in trans, adjust the type of the datum to be `&fn`.\n\nFixes #6141.", "tree": {"sha": "6e5727d8fd3529814c9a7d2ba64c2cdce7e9c91e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e5727d8fd3529814c9a7d2ba64c2cdce7e9c91e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "html_url": "https://github.com/rust-lang/rust/commit/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8", "html_url": "https://github.com/rust-lang/rust/commit/154f3b00e0617e379d005b3aa7f41e8f1bea7bd8"}], "stats": {"total": 125, "additions": 71, "deletions": 54}, "files": [{"sha": "3b885ae9b94ab93fe6c4e8767c31365f7a4b4ed3", "filename": "src/librustc/middle/trans/datum.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdatum.rs?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -548,11 +548,9 @@ pub impl Datum {\n     }\n \n     fn to_rptr(&self, bcx: block) -> Datum {\n-        //!\n-        //\n-        // Returns a new datum of region-pointer type containing the\n-        // the same ptr as this datum (after converting to by-ref\n-        // using `to_ref_llval()`).\n+        //! Returns a new datum of region-pointer type containing the\n+        //! the same ptr as this datum (after converting to by-ref\n+        //! using `to_ref_llval()`).\n \n         // Convert to ref, yielding lltype *T.  Then create a Rust\n         // type &'static T (which translates to *T).  Construct new"}, {"sha": "2c59d5c6bd635faf121645733c5e9607b0b6a4fa", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -183,30 +183,25 @@ fn drop_and_cancel_clean(bcx: block, dat: Datum) -> block {\n \n pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n     debug!(\"trans_to_datum(expr=%s)\", bcx.expr_to_str(expr));\n-    return match bcx.tcx().adjustments.find(&expr.id) {\n-        None => {\n-            trans_to_datum_unadjusted(bcx, expr)\n-        }\n-        Some(&@AutoAddEnv(*)) => {\n-            let mut bcx = bcx;\n-            let datum = unpack_datum!(bcx, {\n-                trans_to_datum_unadjusted(bcx, expr)\n-            });\n-            add_env(bcx, expr, datum)\n-        }\n-        Some(&@AutoDerefRef(ref adj)) => {\n-            let mut bcx = bcx;\n-            let mut datum = unpack_datum!(bcx, {\n-                trans_to_datum_unadjusted(bcx, expr)\n-            });\n-\n-            debug!(\"unadjusted datum: %s\", datum.to_str(bcx.ccx()));\n \n+    let mut bcx = bcx;\n+    let mut datum = unpack_datum!(bcx, trans_to_datum_unadjusted(bcx, expr));\n+    let adjustment = match bcx.tcx().adjustments.find_copy(&expr.id) {\n+        None => { return DatumBlock {bcx: bcx, datum: datum}; }\n+        Some(adj) => { adj }\n+    };\n+    debug!(\"unadjusted datum: %s\", datum.to_str(bcx.ccx()));\n+    match *adjustment {\n+        AutoAddEnv(*) => {\n+            datum = unpack_datum!(bcx, add_env(bcx, expr, datum));\n+        }\n+        AutoDerefRef(ref adj) => {\n             if adj.autoderefs > 0 {\n-                let DatumBlock { bcx: new_bcx, datum: new_datum } =\n-                    datum.autoderef(bcx, expr.span, expr.id, adj.autoderefs);\n-                datum = new_datum;\n-                bcx = new_bcx;\n+                datum =\n+                    unpack_datum!(\n+                        bcx,\n+                        datum.autoderef(bcx, expr.span,\n+                                        expr.id, adj.autoderefs));\n             }\n \n             datum = match adj.autoref {\n@@ -224,23 +219,31 @@ pub fn trans_to_datum(bcx: block, expr: @ast::expr) -> DatumBlock {\n                     unpack_datum!(bcx, auto_slice_and_ref(bcx, expr, datum))\n                 }\n                 Some(AutoBorrowFn(*)) => {\n-                    // currently, all closure types are\n-                    // represented precisely the same, so no\n-                    // runtime adjustment is required:\n-                    datum\n+                    let adjusted_ty = ty::adjust_ty(bcx.tcx(), expr.span,\n+                                                    datum.ty, Some(adjustment));\n+                    unpack_datum!(bcx, auto_borrow_fn(bcx, adjusted_ty, datum))\n                 }\n             };\n-\n-            debug!(\"after adjustments, datum=%s\", datum.to_str(bcx.ccx()));\n-\n-            return DatumBlock {bcx: bcx, datum: datum};\n         }\n-    };\n+    }\n+    debug!(\"after adjustments, datum=%s\", datum.to_str(bcx.ccx()));\n+    return DatumBlock {bcx: bcx, datum: datum};\n \n     fn auto_ref(bcx: block, datum: Datum) -> DatumBlock {\n         DatumBlock {bcx: bcx, datum: datum.to_rptr(bcx)}\n     }\n \n+    fn auto_borrow_fn(bcx: block,\n+                      adjusted_ty: ty::t,\n+                      datum: Datum) -> DatumBlock {\n+        // Currently, all closure types are represented precisely the\n+        // same, so no runtime adjustment is required, but we still\n+        // must patchup the type.\n+        DatumBlock {bcx: bcx,\n+                    datum: Datum {val: datum.val, ty: adjusted_ty,\n+                                  mode: datum.mode, source: datum.source}}\n+    }\n+\n     fn auto_slice(bcx: block, expr: @ast::expr, datum: Datum) -> DatumBlock {\n         // This is not the most efficient thing possible; since slices\n         // are two words it'd be better if this were compiled in"}, {"sha": "b6e024b011e2566d486649a0a2379b19ad47f8c8", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -2893,20 +2893,20 @@ pub fn expr_ty_adjusted(cx: ctxt, expr: @ast::expr) -> t {\n      */\n \n     let unadjusted_ty = expr_ty(cx, expr);\n-    adjust_ty(cx, expr.span, unadjusted_ty, cx.adjustments.find(&expr.id))\n+    adjust_ty(cx, expr.span, unadjusted_ty, cx.adjustments.find_copy(&expr.id))\n }\n \n pub fn adjust_ty(cx: ctxt,\n                  span: span,\n                  unadjusted_ty: ty::t,\n-                 adjustment: Option<&@AutoAdjustment>) -> ty::t\n+                 adjustment: Option<@AutoAdjustment>) -> ty::t\n {\n     /*! See `expr_ty_adjusted` */\n \n     return match adjustment {\n         None => unadjusted_ty,\n \n-        Some(&@AutoAddEnv(r, s)) => {\n+        Some(@AutoAddEnv(r, s)) => {\n             match ty::get(unadjusted_ty).sty {\n                 ty::ty_bare_fn(ref b) => {\n                     ty::mk_closure(\n@@ -2924,7 +2924,7 @@ pub fn adjust_ty(cx: ctxt,\n             }\n         }\n \n-        Some(&@AutoDerefRef(ref adj)) => {\n+        Some(@AutoDerefRef(ref adj)) => {\n             let mut adjusted_ty = unadjusted_ty;\n \n             for uint::range(0, adj.autoderefs) |i| {"}, {"sha": "2274259f18c196fe5b4d29260a70e57471768a23", "filename": "src/librustc/middle/typeck/check/regionck.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fregionck.rs?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -118,22 +118,37 @@ pub impl Rcx {\n     }\n \n     /// Try to resolve the type for the given node.\n+    #[config(stage0)]\n     fn resolve_expr_type_adjusted(@mut self, expr: @ast::expr) -> ty::t {\n         let ty_unadjusted = self.resolve_node_type(expr.id);\n         if ty::type_is_error(ty_unadjusted) || ty::type_is_bot(ty_unadjusted) {\n             ty_unadjusted\n         } else {\n             let tcx = self.fcx.tcx();\n             let adjustments = self.fcx.inh.adjustments;\n-            match adjustments.find(&expr.id) {\n+            match adjustments.find_copy(&expr.id) {\n                 None => ty_unadjusted,\n-                Some(&adjustment) => {\n-                    // FIXME(#3850) --- avoid region scoping errors\n-                    ty::adjust_ty(tcx, expr.span, ty_unadjusted, Some(&adjustment))\n+                Some(adjustment) => {\n+                    ty::adjust_ty(tcx, expr.span, ty_unadjusted,\n+                                  Some(adjustment))\n                 }\n             }\n         }\n     }\n+\n+    /// Try to resolve the type for the given node.\n+    #[config(not(stage0))]\n+    fn resolve_expr_type_adjusted(@mut self, expr: @ast::expr) -> ty::t {\n+        let ty_unadjusted = self.resolve_node_type(expr.id);\n+        if ty::type_is_error(ty_unadjusted) || ty::type_is_bot(ty_unadjusted) {\n+            ty_unadjusted\n+        } else {\n+            let tcx = self.fcx.tcx();\n+            let adjustments = self.fcx.inh.adjustments;\n+            ty::adjust_ty(tcx, expr.span, ty_unadjusted,\n+                          adjustments.find_copy(&expr.id))\n+        }\n+    }\n }\n \n pub fn regionck_expr(fcx: @mut FnCtxt, e: @ast::expr) {\n@@ -650,7 +665,7 @@ fn constrain_regions_in_type_of_node(\n     // is going to fail anyway, so just stop here and let typeck\n     // report errors later on in the writeback phase.\n     let ty0 = rcx.resolve_node_type(id);\n-    let adjustment = rcx.fcx.inh.adjustments.find(&id);\n+    let adjustment = rcx.fcx.inh.adjustments.find_copy(&id);\n     let ty = ty::adjust_ty(tcx, span, ty0, adjustment);\n     debug!(\"constrain_regions_in_type_of_node(\\\n             ty=%s, ty0=%s, id=%d, minimum_lifetime=%?, adjustment=%?)\","}, {"sha": "266c0652c6e59b141073bb9d8621a0344ec3d919", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -76,15 +76,8 @@ rust_task::delete_this()\n     assert(ref_count == 0); // ||\n     //   (ref_count == 1 && this == sched->root_task));\n \n-    if (borrow_list) {\n-        // NOTE should free borrow_list from within rust code!\n-        // If there is a pointer in there, it is a ~[BorrowRecord] pointer,\n-        // which are currently allocated with LIBC malloc/free. But this is\n-        // not really the right way to do this, we should be freeing this\n-        // pointer from Rust code.\n-        free(borrow_list);\n-        borrow_list = NULL;\n-    }\n+    // The borrow list should be freed in the task annihilator\n+    assert(!borrow_list);\n \n     sched_loop->release_task(this);\n }"}, {"sha": "fe11bb0a972ade5eb7d0586f2fcccfbc67e3ce6b", "filename": "src/test/run-pass/issue-6141-leaking-owned-fn.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6141-leaking-owned-fn.rs?ref=11f7cb26c27c3eb3af3f7ef4f9cdb85327e6e030", "patch": "@@ -0,0 +1,8 @@\n+fn run(f: &fn()) {\n+    f()\n+}\n+\n+fn main() {\n+    let f: ~fn() = || ();\n+    run(f);\n+}\n\\ No newline at end of file"}]}