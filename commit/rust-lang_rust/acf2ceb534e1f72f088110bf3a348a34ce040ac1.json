{"sha": "acf2ceb534e1f72f088110bf3a348a34ce040ac1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZjJjZWI1MzRlMWY3MmYwODgxMTBiZjNhMzQ4YTM0Y2UwNDBhYzE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-27T05:56:49Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-27T05:56:49Z"}, "message": "Check for undefinedness when reading from memory.", "tree": {"sha": "ac068950bfc5a4906c981f6e9a92fdaeeadaf165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac068950bfc5a4906c981f6e9a92fdaeeadaf165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acf2ceb534e1f72f088110bf3a348a34ce040ac1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acf2ceb534e1f72f088110bf3a348a34ce040ac1", "html_url": "https://github.com/rust-lang/rust/commit/acf2ceb534e1f72f088110bf3a348a34ce040ac1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acf2ceb534e1f72f088110bf3a348a34ce040ac1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ccf3904eb71a436c0abd9018efb6b33348f4b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ccf3904eb71a436c0abd9018efb6b33348f4b5", "html_url": "https://github.com/rust-lang/rust/commit/68ccf3904eb71a436c0abd9018efb6b33348f4b5"}], "stats": {"total": 27, "additions": 22, "deletions": 5}, "files": [{"sha": "08ef5a46ff2d499b4e40038c21319fd2000a7a25", "filename": "src/error.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acf2ceb534e1f72f088110bf3a348a34ce040ac1/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf2ceb534e1f72f088110bf3a348a34ce040ac1/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=acf2ceb534e1f72f088110bf3a348a34ce040ac1", "patch": "@@ -9,22 +9,28 @@ pub enum EvalError {\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n+    ReadUndefBytes,\n }\n \n pub type EvalResult<T> = Result<T, EvalError>;\n \n impl Error for EvalError {\n     fn description(&self) -> &str {\n         match *self {\n-            EvalError::DanglingPointerDeref => \"dangling pointer was dereferenced\",\n-            EvalError::InvalidBool => \"invalid boolean value read\",\n-            EvalError::PointerOutOfBounds => \"pointer offset outside bounds of allocation\",\n+            EvalError::DanglingPointerDeref =>\n+                \"dangling pointer was dereferenced\",\n+            EvalError::InvalidBool =>\n+                \"invalid boolean value read\",\n+            EvalError::PointerOutOfBounds =>\n+                \"pointer offset outside bounds of allocation\",\n             EvalError::ReadPointerAsBytes =>\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::ReadBytesAsPointer =>\n                 \"attempted to interpret some raw bytes as a pointer address\",\n             EvalError::InvalidPointerMath =>\n                 \"attempted to do math or a comparison on pointers into different allocations\",\n+            EvalError::ReadUndefBytes =>\n+                \"attempted to read undefined bytes\",\n         }\n     }\n "}, {"sha": "b44a412a5880fafe77f72684d61f59203ddae997", "filename": "src/memory.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/acf2ceb534e1f72f088110bf3a348a34ce040ac1/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acf2ceb534e1f72f088110bf3a348a34ce040ac1/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=acf2ceb534e1f72f088110bf3a348a34ce040ac1", "patch": "@@ -155,7 +155,7 @@ impl Memory {\n         if try!(self.relocations(ptr, size)).count() != 0 {\n             return Err(EvalError::ReadPointerAsBytes);\n         }\n-        // TODO(tsion): Track and check for undef bytes.\n+        try!(self.check_defined(ptr, size));\n         self.get_bytes_unchecked(ptr, size)\n     }\n \n@@ -170,7 +170,6 @@ impl Memory {\n     ////////////////////////////////////////////////////////////////////////////////\n \n     pub fn copy(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<()> {\n-        // TODO(tsion): Track and check for undef bytes.\n         try!(self.check_relocation_edges(src, size));\n \n         let src_bytes = try!(self.get_bytes_unchecked_mut(src, size)).as_mut_ptr();\n@@ -187,6 +186,7 @@ impl Memory {\n             }\n         }\n \n+        // TODO(tsion): Copy undef ranges from src to dest.\n         self.copy_relocations(src, dest, size)\n     }\n \n@@ -196,6 +196,7 @@ impl Memory {\n \n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<Pointer> {\n         let size = self.pointer_size;\n+        try!(self.check_defined(ptr, size));\n         let offset = try!(self.get_bytes_unchecked(ptr, size))\n             .read_uint::<NativeEndian>(size).unwrap() as usize;\n         let alloc = try!(self.get(ptr.alloc_id));\n@@ -291,6 +292,7 @@ impl Memory {\n         Ok(try!(self.get(ptr.alloc_id)).relocations.range(Included(&start), Excluded(&end)))\n     }\n \n+    // TODO(tsion): Mark partially-overwritten relocations as undefined.\n     fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n         let keys: Vec<_> = try!(self.relocations(ptr, size)).map(|(&k, _)| k).collect();\n         let alloc = try!(self.get_mut(ptr.alloc_id));\n@@ -324,6 +326,15 @@ impl Memory {\n     // Undefined bytes\n     ////////////////////////////////////////////////////////////////////////////////\n \n+    fn check_defined(&self, ptr: Pointer, size: usize) -> EvalResult<()> {\n+        let alloc = try!(self.get(ptr.alloc_id));\n+        if !alloc.is_range_defined(ptr.offset, ptr.offset + size) {\n+            panic!();\n+            return Err(EvalError::ReadUndefBytes);\n+        }\n+        Ok(())\n+    }\n+\n     fn mark_definedness(&mut self, ptr: Pointer, size: usize, new_state: bool) -> EvalResult<()> {\n         let mut alloc = try!(self.get_mut(ptr.alloc_id));\n         alloc.mark_definedness(ptr.offset, ptr.offset + size, new_state);"}]}