{"sha": "2f9ddf3bc7cfa79d272b1409be80905be946d831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOWRkZjNiYzdjZmE3OWQyNzJiMTQwOWJlODA5MDViZTk0NmQ4MzE=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T16:15:49Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T16:15:49Z"}, "message": "Fix typos \u201can\u201d\u2192\u201ca\u201d and a few different ones that appeared in the same search", "tree": {"sha": "a88f54853c40da892b1da6ae223176df5ba6469b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88f54853c40da892b1da6ae223176df5ba6469b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f9ddf3bc7cfa79d272b1409be80905be946d831", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f9ddf3bc7cfa79d272b1409be80905be946d831", "html_url": "https://github.com/rust-lang/rust/commit/2f9ddf3bc7cfa79d272b1409be80905be946d831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f9ddf3bc7cfa79d272b1409be80905be946d831/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "html_url": "https://github.com/rust-lang/rust/commit/2396fad0950980cd3bf53bc825cdfa79ec7fd85f"}], "stats": {"total": 86, "additions": 43, "deletions": 43}, "files": [{"sha": "e30c49295ba8c2b7054d5812651cc0a99ffb87ad", "filename": "compiler/rustc_codegen_llvm/src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fintrinsic.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1031,7 +1031,7 @@ fn generic_simd_intrinsic(\n         // vector mask and returns an unsigned integer containing the most\n         // significant bit (MSB) of each lane.\n \n-        // If the vector has less than 8 lanes, an u8 is returned with zeroed\n+        // If the vector has less than 8 lanes, a u8 is returned with zeroed\n         // trailing bits.\n         let expected_int_bits = in_len.max(8);\n         match ret_ty.kind() {"}, {"sha": "888d1c1832b09d2e00e4a6bc2c6b5676f5e6ee2f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -974,7 +974,7 @@ pub enum PatKind<'hir> {\n     /// Invariant: `pats.len() >= 2`.\n     Or(&'hir [Pat<'hir>]),\n \n-    /// A path pattern for an unit struct/variant or a (maybe-associated) constant.\n+    /// A path pattern for a unit struct/variant or a (maybe-associated) constant.\n     Path(QPath<'hir>),\n \n     /// A tuple pattern (e.g., `(a, b)`)."}, {"sha": "ef08189a7229a5e85a3575d4d567dea8fd5848a2", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -3371,7 +3371,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `unsupported_calling_conventions` lint is output whenever there is an use of the\n+    /// The `unsupported_calling_conventions` lint is output whenever there is a use of the\n     /// `stdcall`, `fastcall`, `thiscall`, `vectorcall` calling conventions (or their unwind\n     /// variants) on targets that cannot meaningfully be supported for the requested target.\n     ///"}, {"sha": "4e591b28f608781d8f4d13a61a3097034eab5643", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -62,7 +62,7 @@ crate struct CrateMetadata {\n     // --- Some data pre-decoded from the metadata blob, usually for performance ---\n     /// Properties of the whole crate.\n     /// NOTE(eddyb) we pass `'static` to a `'tcx` parameter because this\n-    /// lifetime is only used behind `Lazy`, and therefore acts like an\n+    /// lifetime is only used behind `Lazy`, and therefore acts like a\n     /// universal (`for<'tcx>`), that is paired up with whichever `TyCtxt`\n     /// is being used to decode those values.\n     root: CrateRoot<'static>,"}, {"sha": "cc31d8c2c18799301370ab4a8f39170e13b0f5e1", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -376,27 +376,27 @@ impl<'tcx, Tag: Provenance> Scalar<Tag> {\n         self.to_bits(sz)\n     }\n \n-    /// Converts the scalar to produce an `u8`. Fails if the scalar is a pointer.\n+    /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.\n     pub fn to_u8(self) -> InterpResult<'static, u8> {\n         self.to_unsigned_with_bit_width(8).map(|v| u8::try_from(v).unwrap())\n     }\n \n-    /// Converts the scalar to produce an `u16`. Fails if the scalar is a pointer.\n+    /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.\n     pub fn to_u16(self) -> InterpResult<'static, u16> {\n         self.to_unsigned_with_bit_width(16).map(|v| u16::try_from(v).unwrap())\n     }\n \n-    /// Converts the scalar to produce an `u32`. Fails if the scalar is a pointer.\n+    /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.\n     pub fn to_u32(self) -> InterpResult<'static, u32> {\n         self.to_unsigned_with_bit_width(32).map(|v| u32::try_from(v).unwrap())\n     }\n \n-    /// Converts the scalar to produce an `u64`. Fails if the scalar is a pointer.\n+    /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.\n     pub fn to_u64(self) -> InterpResult<'static, u64> {\n         self.to_unsigned_with_bit_width(64).map(|v| u64::try_from(v).unwrap())\n     }\n \n-    /// Converts the scalar to produce an `u128`. Fails if the scalar is a pointer.\n+    /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.\n     pub fn to_u128(self) -> InterpResult<'static, u128> {\n         self.to_unsigned_with_bit_width(128)\n     }"}, {"sha": "74d303cee5d1efc14c6689cecde1a9c651cb857d", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -265,7 +265,7 @@ impl BorrowKind {\n             BorrowKind::Shared => hir::Mutability::Not,\n \n             // We have no type corresponding to a unique imm borrow, so\n-            // use `&mut`. It gives all the capabilities of an `&uniq`\n+            // use `&mut`. It gives all the capabilities of a `&uniq`\n             // and hence is a safe \"over approximation\".\n             BorrowKind::Unique => hir::Mutability::Mut,\n "}, {"sha": "45ea3e3d9f35e1cbe27776c895661e347c14822a", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1202,7 +1202,7 @@ pub enum NonUseContext {\n     StorageDead,\n     /// User type annotation assertions for NLL.\n     AscribeUserTy,\n-    /// The data of an user variable, for debug info.\n+    /// The data of a user variable, for debug info.\n     VarDebugInfo,\n }\n "}, {"sha": "68de7f29193d8f61797996c481e82fbdfce92c7e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1733,7 +1733,7 @@ rustc_queries! {\n     }\n \n     /// Performs an HIR-based well-formed check on the item with the given `HirId`. If\n-    /// we get an `Umimplemented` error that matches the provided `Predicate`, return\n+    /// we get an `Unimplemented` error that matches the provided `Predicate`, return\n     /// the cause of the newly created obligation.\n     ///\n     /// This is only used by error-reporting code to get a better cause (in particular, a better"}, {"sha": "4eacb3c4176c990ea2fcbfdb0ac926926830dccd", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -434,7 +434,7 @@ impl BorrowKind {\n             ImmBorrow => hir::Mutability::Not,\n \n             // We have no type corresponding to a unique imm borrow, so\n-            // use `&mut`. It gives all the capabilities of an `&uniq`\n+            // use `&mut`. It gives all the capabilities of a `&uniq`\n             // and hence is a safe \"over approximation\".\n             UniqueImmBorrow => hir::Mutability::Mut,\n         }"}, {"sha": "36db258e92d200e41eacc6b5c55a9afda11f2643", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -209,7 +209,7 @@ where\n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n     #[allow(rustc::usage_of_ty_tykind)]\n     fn decode(decoder: &mut D) -> Result<Ty<'tcx>, D::Error> {\n-        // Handle shorthands first, if we have an usize > 0x80.\n+        // Handle shorthands first, if we have a usize > 0x80.\n         if decoder.positioned_at_shorthand() {\n             let pos = decoder.read_usize()?;\n             assert!(pos >= SHORTHAND_OFFSET);\n@@ -228,7 +228,7 @@ impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for Ty<'tcx> {\n impl<'tcx, D: TyDecoder<'tcx>> Decodable<D> for ty::Binder<'tcx, ty::PredicateKind<'tcx>> {\n     fn decode(decoder: &mut D) -> Result<ty::Binder<'tcx, ty::PredicateKind<'tcx>>, D::Error> {\n         let bound_vars = Decodable::decode(decoder)?;\n-        // Handle shorthands first, if we have an usize > 0x80.\n+        // Handle shorthands first, if we have a usize > 0x80.\n         Ok(ty::Binder::bind_with_vars(\n             if decoder.positioned_at_shorthand() {\n                 let pos = decoder.read_usize()?;"}, {"sha": "8e0a2d4a28df026167d7fada4d7c6083ea5bd951", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -239,7 +239,7 @@ static_assert_size!(TyKind<'_>, 32);\n ///   implements `CK<(u32, u32), Output = u32>`, where `CK` is the trait\n ///   specified above.\n /// - U is a type parameter representing the types of its upvars, tupled up\n-///   (borrowed, if appropriate; that is, if an U field represents a by-ref upvar,\n+///   (borrowed, if appropriate; that is, if a U field represents a by-ref upvar,\n ///    and the up-var has the type `Foo`, then that field of U will be `&Foo`).\n ///\n /// So, for example, given this function:"}, {"sha": "b0cd6405eb9014f2c8cfc3bc085a8be13cd64db2", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -857,7 +857,7 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n                 // types above, in `visit_primitive`.\n                 // In run-time mode, we accept pointers in here.  This is actually more\n                 // permissive than a per-element check would be, e.g., we accept\n-                // an &[u8] that contains a pointer even though bytewise checking would\n+                // a &[u8] that contains a pointer even though bytewise checking would\n                 // reject it.  However, that's good: We don't inherently want\n                 // to reject those pointers, we just do not have the machinery to\n                 // talk about parts of a pointer."}, {"sha": "4578f04c0345260a053bae3edef5a20f2de929a0", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -145,7 +145,7 @@ impl<'tcx> MirPass<'tcx> for ConstProp {\n \n         // FIXME(oli-obk, eddyb) Optimize locals (or even local paths) to hold\n         // constants, instead of just checking for const-folding succeeding.\n-        // That would require an uniform one-def no-mutation analysis\n+        // That would require a uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n         let mut optimization_finder = ConstPropagator::new(body, dummy_body, tcx);\n         optimization_finder.visit_body(body);"}, {"sha": "f4a1b0ddba53f2a3ecbf4db1c0e998d4afdd9cf6", "filename": "compiler/rustc_mir/src/transform/rustc_peek.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Frustc_peek.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -92,7 +92,7 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n /// \"rustc_peek: bit not set\".\n ///\n /// The intention is that one can write unit tests for dataflow by\n-/// putting code into an UI test and using `rustc_peek` to\n+/// putting code into a UI test and using `rustc_peek` to\n /// make observations about the results of dataflow static analyses.\n ///\n /// (If there are any calls to `rustc_peek` that do not match the"}, {"sha": "21c5a64f82337f0482c02c47ee60fca11f870d95", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -208,7 +208,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                     this.diverge_from(loop_block);\n \n-                    // The \u201creturn\u201d value of the loop body must always be an unit. We therefore\n+                    // The \u201creturn\u201d value of the loop body must always be a unit. We therefore\n                     // introduce a unit temporary as the destination for the loop body.\n                     let tmp = this.get_unit_temp();\n                     // Execute the body, branching back to the test."}, {"sha": "f1d882e1ddd7055d06e7b3e45aa99536e16620ab", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -788,7 +788,7 @@ impl<'tcx> Cx<'tcx> {\n                 self.user_substs_applied_to_ty_of_hir_id(hir_id)\n             }\n \n-            // `Self` is used in expression as a tuple struct constructor or an unit struct constructor\n+            // `Self` is used in expression as a tuple struct constructor or a unit struct constructor\n             Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),\n \n             _ => bug!(\"user_substs_applied_to_res: unexpected res {:?} at {:?}\", res, hir_id),"}, {"sha": "f700397fcdf0d28e220ec917a851500f1f87ffc1", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -100,7 +100,7 @@ pub trait FileLoader {\n     /// Query the existence of a file.\n     fn file_exists(&self, path: &Path) -> bool;\n \n-    /// Read the contents of an UTF-8 file into memory.\n+    /// Read the contents of a UTF-8 file into memory.\n     fn read_file(&self, path: &Path) -> io::Result<String>;\n }\n "}, {"sha": "95d3bb1172305b391992e1b32b9364938e2a4ed2", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -155,7 +155,7 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n         }\n \n         // If the extern crate isn't in the extern prelude,\n-        // there is no way it can be written as an `use`.\n+        // there is no way it can be written as a `use`.\n         let orig_name = extern_crate.orig_name.unwrap_or(item.ident.name);\n         if !extern_prelude.get(&orig_name).map_or(false, |from_item| !from_item) {\n             continue;"}, {"sha": "28e4f8bba05c8d5272e477f98ad4a00e57f5d3fd", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -46,7 +46,7 @@\n //!     }\n //! }\n //!\n-//! // Each node is represented as an `usize`, for a shorter implementation.\n+//! // Each node is represented as a `usize`, for a shorter implementation.\n //! struct Edge {\n //!     node: usize,\n //!     cost: usize,"}, {"sha": "9278dbb54989383e561e849a53fa0ef7938d0fa3", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1013,7 +1013,7 @@ extern \"rust-intrinsic\" {\n     /// let val_casts = unsafe { &mut *(ptr as *mut i32 as *mut u32) };\n     /// ```\n     ///\n-    /// Turning an `&str` into an `&[u8]`:\n+    /// Turning an `&str` into a `&[u8]`:\n     ///\n     /// ```\n     /// // this is not a good way to do this."}, {"sha": "84fd1a532c1aa300af2d3ada59394f0468f2abb7", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -660,7 +660,7 @@ pub unsafe fn zeroed<T>() -> T {\n #[rustc_diagnostic_item = \"mem_uninitialized\"]\n #[track_caller]\n pub unsafe fn uninitialized<T>() -> T {\n-    // SAFETY: the caller must guarantee that an unitialized value is valid for `T`.\n+    // SAFETY: the caller must guarantee that an uninitialized value is valid for `T`.\n     unsafe {\n         intrinsics::assert_uninit_valid::<T>();\n         MaybeUninit::uninit().assume_init()"}, {"sha": "02c9dadc0868dcb5067124963c8d3d8f5f760d31", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -767,7 +767,7 @@ pub const unsafe fn read<T>(src: *const T) -> T {\n ///\n /// # Examples\n ///\n-/// Read an usize value from a byte buffer:\n+/// Read a usize value from a byte buffer:\n ///\n /// ```\n /// use std::mem;\n@@ -960,7 +960,7 @@ pub const unsafe fn write<T>(dst: *mut T, src: T) {\n ///\n /// # Examples\n ///\n-/// Write an usize value to a byte buffer:\n+/// Write a usize value to a byte buffer:\n ///\n /// ```\n /// use std::mem;\n@@ -1232,7 +1232,7 @@ pub(crate) unsafe fn align_offset<T: Sized>(p: *const T, a: usize) -> usize {\n     let smoda = stride & a_minus_one;\n     // SAFETY: a is power-of-two hence non-zero. stride == 0 case is handled above.\n     let gcdpow = unsafe { intrinsics::cttz_nonzero(stride).min(intrinsics::cttz_nonzero(a)) };\n-    // SAFETY: gcdpow has an upper-bound that\u2019s at most the number of bits in an usize.\n+    // SAFETY: gcdpow has an upper-bound that\u2019s at most the number of bits in a usize.\n     let gcd = unsafe { unchecked_shl(1usize, gcdpow) };\n \n     // SAFETY: gcd is always greater or equal to 1."}, {"sha": "fe4e3af91ad0a6df1a738570ac6a33561a72bb56", "filename": "library/std/src/ffi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fmod.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -94,7 +94,7 @@\n //!\n //! * [`OsStr`] represents a borrowed reference to a string in a\n //! format that can be passed to the operating system. It can be\n-//! converted into an UTF-8 Rust string slice in a similar way to\n+//! converted into a UTF-8 Rust string slice in a similar way to\n //! [`OsString`].\n //!\n //! # Conversions"}, {"sha": "28254fea0d374209395981ea877ecf9339418285", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1150,7 +1150,7 @@ impl<'a> DerefMut for IoSliceMut<'a> {\n \n /// A buffer type used with `Write::write_vectored`.\n ///\n-/// It is semantically a wrapper around an `&[u8]`, but is guaranteed to be\n+/// It is semantically a wrapper around a `&[u8]`, but is guaranteed to be\n /// ABI compatible with the `iovec` type on Unix platforms and `WSABUF` on\n /// Windows.\n #[stable(feature = \"iovec\", since = \"1.36.0\")]"}, {"sha": "749a441d1826361e7c8b324c43db468659726d25", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -2289,7 +2289,7 @@ mod dyn_keyword {}\n /// }\n ///\n /// let mut u = IntOrFloat { f: 1.0 };\n-/// // Reading the fields of an union is always unsafe\n+/// // Reading the fields of a union is always unsafe\n /// assert_eq!(unsafe { u.i }, 1065353216);\n /// // Updating through any of the field will modify all of them\n /// u.i = 1073741824;"}, {"sha": "6f2618c63b5d553c1e1d2b380eda5399288e76c1", "filename": "library/std/src/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fstdio.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -162,7 +162,7 @@ impl io::Read for Stdin {\n         }\n \n         let mut utf16_buf = [0u16; MAX_BUFFER_SIZE / 2];\n-        // In the worst case, an UTF-8 string can take 3 bytes for every `u16` of an UTF-16. So\n+        // In the worst case, a UTF-8 string can take 3 bytes for every `u16` of a UTF-16. So\n         // we can read at most a third of `buf.len()` chars and uphold the guarantee no data gets\n         // lost.\n         let amount = cmp::min(buf.len() / 3, utf16_buf.len());"}, {"sha": "9508bd7da594b8853e207b517e089d87bfcc55f6", "filename": "library/std/src/sys_common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fwtf8.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -785,7 +785,7 @@ pub fn is_code_point_boundary(slice: &Wtf8, index: usize) -> bool {\n /// Copied from core::str::raw::slice_unchecked\n #[inline]\n pub unsafe fn slice_unchecked(s: &Wtf8, begin: usize, end: usize) -> &Wtf8 {\n-    // memory layout of an &[u8] and &Wtf8 are the same\n+    // memory layout of a &[u8] and &Wtf8 are the same\n     Wtf8::from_bytes_unchecked(slice::from_raw_parts(s.bytes.as_ptr().add(begin), end - begin))\n }\n "}, {"sha": "fa96b7abff6d61aa0920c52398e1d52c29e8b903", "filename": "library/std/src/time/monotonic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ftime%2Fmonotonic.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -84,7 +84,7 @@ pub mod inner {\n     pub(super) fn monotonize(raw: time::Instant) -> time::Instant {\n         let delta = raw.checked_sub_instant(&ZERO).unwrap();\n         // Split into seconds and nanos since Duration doesn't have a\n-        // constructor that takes an u128\n+        // constructor that takes a u128\n         let secs = delta.as_secs() as u128;\n         let nanos = delta.subsec_nanos() as u128;\n         let timestamp: u128 = secs << 64 | nanos;"}, {"sha": "a5fb0f640b24a0d178fe0600c96f3a48a4ec6a52", "filename": "src/test/mir-opt/dest-prop/copy_propagation_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcopy_propagation_arg.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -7,7 +7,7 @@ fn dummy(x: u8) -> u8 {\n \n // EMIT_MIR copy_propagation_arg.foo.DestinationPropagation.diff\n fn foo(mut x: u8) {\n-    // calling `dummy` to make an use of `x` that copyprop cannot eliminate\n+    // calling `dummy` to make a use of `x` that copyprop cannot eliminate\n     x = dummy(x); // this will assign a local to `x`\n }\n "}, {"sha": "48b140d91744ca955d21ea88ff45b5c180743e66", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -1,6 +1,6 @@\n // compile-flags: -Z unstable-options\n // NOTE: This test doesn't actually require `fulldeps`\n-// so we could instead use it as an `ui` test.\n+// so we could instead use it as a `ui` test.\n //\n // Considering that all other `internal-lints` are tested here\n // this seems like the cleaner solution though."}, {"sha": "3258c9fb3fed0ef244813e52bf47f6d3a65f9722", "filename": "src/tools/clippy/clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr_eq.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -74,7 +74,7 @@ impl LateLintPass<'_> for PtrEq {\n     }\n }\n \n-// If the given expression is a cast to an usize, return the lhs of the cast\n+// If the given expression is a cast to a usize, return the lhs of the cast\n // E.g., `foo as *const _ as usize` returns `foo as *const _`.\n fn expr_as_cast_to_usize<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     if cx.typeck_results().expr_ty(cast_expr) == cx.tcx.types.usize {"}, {"sha": "a9bc89544d820cd5c0b592fdc9ee4d74c0057ff3", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -401,7 +401,7 @@ fn rewrite_macro_inner(\n                 handle_vec_semi(context, shape, arg_vec, macro_name, style)\n             } else {\n                 // If we are rewriting `vec!` macro or other special macros,\n-                // then we can rewrite this as an usual array literal.\n+                // then we can rewrite this as a usual array literal.\n                 // Otherwise, we must preserve the original existence of trailing comma.\n                 let macro_name = &macro_name.as_str();\n                 let mut force_trailing_comma = if trailing_comma {"}, {"sha": "64ae15672df8ff1c88f3d749d6d2de14bff2f9c3", "filename": "src/tools/rustfmt/src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fstring.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -153,7 +153,7 @@ pub(crate) fn rewrite_string<'a>(\n     wrap_str(result, fmt.config.max_width(), fmt.shape)\n }\n \n-/// Returns the index to the end of the URL if the split at index of the given string includes an\n+/// Returns the index to the end of the URL if the split at index of the given string includes a\n /// URL or alike. Otherwise, returns `None`.\n fn detect_url(s: &[&str], index: usize) -> Option<usize> {\n     let start = match s[..=index].iter().rposition(|g| is_whitespace(g)) {"}, {"sha": "4c71a2c6ab90b655bf18504e81899faf21db815d", "filename": "src/tools/rustfmt/tests/source/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -2,7 +2,7 @@\n //!\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n-//! CPU and encodes them in an `usize` where each bit position represents\n+//! CPU and encodes them in a `usize` where each bit position represents\n //! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the"}, {"sha": "b985dd8caa1ffa0ecbdd9fc5e2945424567d0025", "filename": "src/tools/rustfmt/tests/target/cfg_if/detect/arch/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fcfg_if%2Fdetect%2Farch%2Fx86.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -2,7 +2,7 @@\n //!\n //! The features are detected using the `detect_features` function below.\n //! This function uses the CPUID instruction to read the feature flags from the\n-//! CPU and encodes them in an `usize` where each bit position represents\n+//! CPU and encodes them in a `usize` where each bit position represents\n //! whether a feature is available (bit is set) or unavaiable (bit is cleared).\n //!\n //! The enum `Feature` is used to map bit positions to feature names, and the"}, {"sha": "022a3dfde8217bcc173e4d9cd995daf8aa3fc3b2", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f9ddf3bc7cfa79d272b1409be80905be946d831/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=2f9ddf3bc7cfa79d272b1409be80905be946d831", "patch": "@@ -66,7 +66,7 @@ enum LIUState {\n     EXP_END,\n }\n \n-/// Returns `true` if `line` appears to be a line comment containing an URL,\n+/// Returns `true` if `line` appears to be a line comment containing a URL,\n /// possibly with a Markdown link label in front, and nothing else.\n /// The Markdown link label, if present, may not contain whitespace.\n /// Lines of this form are allowed to be overlength, because Markdown"}]}