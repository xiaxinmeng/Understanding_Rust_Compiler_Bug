{"sha": "31fa30145e15d57a17de8029e8950c60d28d6c8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxZmEzMDE0NWUxNWQ1N2ExN2RlODAyOWU4OTUwYzYwZDI4ZDZjOGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-20T00:02:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-20T00:02:33Z"}, "message": "Auto merge of #56049 - newpavlov:revert_51601, r=sfackler\n\nRevert #51601\n\nCloses: #55985\n\nSpecialization of `StepBy<Range(Inclusive)>` results in an incorrectly behaving code when `step_by` is combined with `skip` or `nth`.\n\nIf this will get merged we probably should reopen issues previously closed by #51601 (if there was any).", "tree": {"sha": "112430e63c6c229aa4da57a608c465f725bf45a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/112430e63c6c229aa4da57a608c465f725bf45a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31fa30145e15d57a17de8029e8950c60d28d6c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31fa30145e15d57a17de8029e8950c60d28d6c8f", "html_url": "https://github.com/rust-lang/rust/commit/31fa30145e15d57a17de8029e8950c60d28d6c8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31fa30145e15d57a17de8029e8950c60d28d6c8f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aff30734b0e1056b1003459fbb27af199f51822", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aff30734b0e1056b1003459fbb27af199f51822", "html_url": "https://github.com/rust-lang/rust/commit/5aff30734b0e1056b1003459fbb27af199f51822"}, {"sha": "6357021294614deebbcb3a1c9fbb64bb9aaa1a43", "url": "https://api.github.com/repos/rust-lang/rust/commits/6357021294614deebbcb3a1c9fbb64bb9aaa1a43", "html_url": "https://github.com/rust-lang/rust/commit/6357021294614deebbcb3a1c9fbb64bb9aaa1a43"}], "stats": {"total": 89, "additions": 14, "deletions": 75}, "files": [{"sha": "509068843d193b15cba6e168e8a3fd195baadf72", "filename": "src/libcore/iter/mod.rs", "status": "modified", "additions": 7, "deletions": 75, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/31fa30145e15d57a17de8029e8950c60d28d6c8f/src%2Flibcore%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa30145e15d57a17de8029e8950c60d28d6c8f/src%2Flibcore%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fmod.rs?ref=31fa30145e15d57a17de8029e8950c60d28d6c8f", "patch": "@@ -319,10 +319,9 @@\n use cmp;\n use fmt;\n use iter_private::TrustedRandomAccess;\n-use ops::{self, Try};\n+use ops::Try;\n use usize;\n use intrinsics;\n-use mem;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::iterator::Iterator;\n@@ -673,7 +672,12 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n \n     #[inline]\n     fn next(&mut self) -> Option<Self::Item> {\n-        <Self as StepBySpecIterator>::spec_next(self)\n+        if self.first_take {\n+            self.first_take = false;\n+            self.iter.next()\n+        } else {\n+            self.iter.nth(self.step)\n+        }\n     }\n \n     #[inline]\n@@ -733,78 +737,6 @@ impl<I> Iterator for StepBy<I> where I: Iterator {\n     }\n }\n \n-// hidden trait for specializing iterator methods\n-// could be generalized but is currently only used for StepBy\n-trait StepBySpecIterator {\n-    type Item;\n-    fn spec_next(&mut self) -> Option<Self::Item>;\n-}\n-\n-impl<I> StepBySpecIterator for StepBy<I>\n-where\n-    I: Iterator,\n-{\n-    type Item = I::Item;\n-\n-    #[inline]\n-    default fn spec_next(&mut self) -> Option<I::Item> {\n-        if self.first_take {\n-            self.first_take = false;\n-            self.iter.next()\n-        } else {\n-            self.iter.nth(self.step)\n-        }\n-    }\n-}\n-\n-impl<T> StepBySpecIterator for StepBy<ops::Range<T>>\n-where\n-    T: Step,\n-{\n-    #[inline]\n-    fn spec_next(&mut self) -> Option<Self::Item> {\n-        self.first_take = false;\n-        if !(self.iter.start < self.iter.end) {\n-            return None;\n-        }\n-        // add 1 to self.step to get original step size back\n-        // it was decremented for the general case on construction\n-        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n-            let next = mem::replace(&mut self.iter.start, n);\n-            Some(next)\n-        } else {\n-            let last = self.iter.start.clone();\n-            self.iter.start = self.iter.end.clone();\n-            Some(last)\n-        }\n-    }\n-}\n-\n-impl<T> StepBySpecIterator for StepBy<ops::RangeInclusive<T>>\n-where\n-    T: Step,\n-{\n-    #[inline]\n-    fn spec_next(&mut self) -> Option<Self::Item> {\n-        self.first_take = false;\n-        self.iter.compute_is_empty();\n-        if self.iter.is_empty.unwrap_or_default() {\n-            return None;\n-        }\n-        // add 1 to self.step to get original step size back\n-        // it was decremented for the general case on construction\n-        if let Some(n) = self.iter.start.add_usize(self.step+1) {\n-            self.iter.is_empty = Some(!(n <= self.iter.end));\n-            let next = mem::replace(&mut self.iter.start, n);\n-            Some(next)\n-        } else {\n-            let last = self.iter.start.clone();\n-            self.iter.is_empty = Some(true);\n-            Some(last)\n-        }\n-    }\n-}\n-\n // StepBy can only make the iterator shorter, so the len will still fit.\n #[stable(feature = \"iterator_step_by\", since = \"1.28.0\")]\n impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}"}, {"sha": "ec09071b3d0f06feb7645ba603d861f5ee378739", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/31fa30145e15d57a17de8029e8950c60d28d6c8f/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31fa30145e15d57a17de8029e8950c60d28d6c8f/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=31fa30145e15d57a17de8029e8950c60d28d6c8f", "patch": "@@ -1618,6 +1618,13 @@ fn test_range_step() {\n     assert_eq!((isize::MIN..isize::MAX).step_by(1).size_hint(), (usize::MAX, Some(usize::MAX)));\n }\n \n+#[test]\n+fn test_step_by_skip() {\n+    assert_eq!((0..640).step_by(128).skip(1).collect::<Vec<_>>(), [128, 256, 384, 512]);\n+    assert_eq!((0..=50).step_by(10).nth(3), Some(30));\n+    assert_eq!((200..=255u8).step_by(10).nth(3), Some(230));\n+}\n+\n #[test]\n fn test_range_inclusive_step() {\n     assert_eq!((0..=50).step_by(10).collect::<Vec<_>>(), [0, 10, 20, 30, 40, 50]);"}]}