{"sha": "7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "node_id": "C_kwDOAAsO6NoAKDdkNmZlYjQyMWVkMTU5ZWU4ZjExMDc0MWQ0ZmI4YTQzYjRiYTdmZjU", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-10-06T19:33:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T19:33:20Z"}, "message": "Rollup merge of #89506 - yaymukund:docblock-headings, r=GuillaumeGomez\n\nlibrustdoc: Use correct heading levels.\n\nCloses #89309\n\nThis fixes the `<h#>` header tags throughout the docs to reflect a semantic hierarchy.\n\n- I ran a script to manually check that we don't have any files with multiple `<h1>` tags.\n- Also checked that we never incorrectly nest e.g. a `<h2>` under an `<h3>`.\n- I also spot-checked a bunch of pages (`trait.Read`, `enum.Ordering`, `primitive.isize`, `trait.Iterator`).", "tree": {"sha": "7beae401b7e3df6a02d416d6891b059d2ebf1ae6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7beae401b7e3df6a02d416d6891b059d2ebf1ae6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXfoACRBK7hj4Ov3rIwAA7pcIAFwxH+ybrBqNvHt2qyvx5nzN\nrxAakcxqjb78UIk9c4bJM//Uae2ud4rWHVZmCui5lagnT/a/fqZc7K7jI7q2XaDC\nChBLwg+Pb+WD3F/vXXWB46vnosSrqWnwK0ZRmuda/iNsgLE56urVePNAqXwd/Lbg\n1u9hdhsT3mte2iyPoAXgj5Ak5HZAdphWWsY+8AsIf9JOX2YwZ0mxJLiabfvJjL1a\nXc75WamUB72RK44nVkErKaJuDU/qJ7xRtT4xzqnDZYwya7JiMCGPMjBNi3Ailqjb\n2+F8doJA6Gi1aKkF6KWqb9vD0SUoAtGDtlkAVF27aQ7GOPh2na01CtYUAlFyjWs=\n=kbpX\n-----END PGP SIGNATURE-----\n", "payload": "tree 7beae401b7e3df6a02d416d6891b059d2ebf1ae6\nparent b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8\nparent 1f86a8e2a058d7f12b25406a53576b08817677fe\nauthor Manish Goregaokar <manishsmail@gmail.com> 1633548800 -0700\ncommitter GitHub <noreply@github.com> 1633548800 -0700\n\nRollup merge of #89506 - yaymukund:docblock-headings, r=GuillaumeGomez\n\nlibrustdoc: Use correct heading levels.\n\nCloses #89309\n\nThis fixes the `<h#>` header tags throughout the docs to reflect a semantic hierarchy.\n\n- I ran a script to manually check that we don't have any files with multiple `<h1>` tags.\n- Also checked that we never incorrectly nest e.g. a `<h2>` under an `<h3>`.\n- I also spot-checked a bunch of pages (`trait.Read`, `enum.Ordering`, `primitive.isize`, `trait.Iterator`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "html_url": "https://github.com/rust-lang/rust/commit/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8", "html_url": "https://github.com/rust-lang/rust/commit/b01594051cdb7bcd2ccc9f3957fdd243c7d66ef8"}, {"sha": "1f86a8e2a058d7f12b25406a53576b08817677fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f86a8e2a058d7f12b25406a53576b08817677fe", "html_url": "https://github.com/rust-lang/rust/commit/1f86a8e2a058d7f12b25406a53576b08817677fe"}], "stats": {"total": 386, "additions": 264, "deletions": 122}, "files": [{"sha": "302fc5a677771ffe6b7957cdc512cbcf31815f18", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -1,4 +1,4 @@\n-use crate::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use crate::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n use crate::rustc_span::edition::Edition;\n use std::fs;\n use std::path::Path;\n@@ -39,14 +39,32 @@ impl ExternalHtml {\n         let bc = format!(\n             \"{}{}\",\n             bc,\n-            Markdown(&m_bc, &[], id_map, codes, edition, playground).into_string()\n+            Markdown {\n+                content: &m_bc,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_offset: HeadingOffset::H2,\n+            }\n+            .into_string()\n         );\n         let ac = load_external_files(after_content, diag)?;\n         let m_ac = load_external_files(md_after_content, diag)?;\n         let ac = format!(\n             \"{}{}\",\n             ac,\n-            Markdown(&m_ac, &[], id_map, codes, edition, playground).into_string()\n+            Markdown {\n+                content: &m_ac,\n+                links: &[],\n+                ids: id_map,\n+                error_codes: codes,\n+                edition,\n+                playground,\n+                heading_offset: HeadingOffset::H2,\n+            }\n+            .into_string()\n         );\n         Some(ExternalHtml { in_header: ih, before_content: bc, after_content: ac })\n     }"}, {"sha": "9f2e282fce1c386a7ddc32254671a31c5fac29a8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 55, "deletions": 17, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -8,11 +8,19 @@\n //! extern crate rustc_span;\n //!\n //! use rustc_span::edition::Edition;\n-//! use rustdoc::html::markdown::{IdMap, Markdown, ErrorCodes};\n+//! use rustdoc::html::markdown::{HeadingOffset, IdMap, Markdown, ErrorCodes};\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n-//! let md = Markdown(s, &[], &mut id_map, ErrorCodes::Yes, Edition::Edition2015, &None);\n+//! let md = Markdown {\n+//!     content: s,\n+//!     links: &[],\n+//!     ids: &mut id_map,\n+//!     error_codes: ErrorCodes::Yes,\n+//!     edition: Edition::Edition2015,\n+//!     playground: &None,\n+//!     heading_offset: HeadingOffset::H2,\n+//! };\n //! let html = md.into_string();\n //! // ... something using html\n //! ```\n@@ -47,6 +55,8 @@ use pulldown_cmark::{\n #[cfg(test)]\n mod tests;\n \n+const MAX_HEADER_LEVEL: u32 = 6;\n+\n /// Options for rendering Markdown in the main body of documentation.\n pub(crate) fn main_body_opts() -> Options {\n     Options::ENABLE_TABLES\n@@ -65,20 +75,33 @@ pub(crate) fn summary_opts() -> Options {\n         | Options::ENABLE_SMART_PUNCTUATION\n }\n \n+#[derive(Debug, Clone, Copy)]\n+pub enum HeadingOffset {\n+    H1 = 0,\n+    H2,\n+    H3,\n+    H4,\n+    H5,\n+    H6,\n+}\n+\n /// When `to_string` is called, this struct will emit the HTML corresponding to\n /// the rendered version of the contained markdown string.\n-pub struct Markdown<'a>(\n-    pub &'a str,\n+pub struct Markdown<'a> {\n+    pub content: &'a str,\n     /// A list of link replacements.\n-    pub &'a [RenderedLink],\n+    pub links: &'a [RenderedLink],\n     /// The current list of used header IDs.\n-    pub &'a mut IdMap,\n+    pub ids: &'a mut IdMap,\n     /// Whether to allow the use of explicit error codes in doctest lang strings.\n-    pub ErrorCodes,\n+    pub error_codes: ErrorCodes,\n     /// Default edition to use when parsing doctests (to add a `fn main`).\n-    pub Edition,\n-    pub &'a Option<Playground>,\n-);\n+    pub edition: Edition,\n+    pub playground: &'a Option<Playground>,\n+    /// Offset at which we render headings.\n+    /// E.g. if `heading_offset: HeadingOffset::H2`, then `# something` renders an `<h2>`.\n+    pub heading_offset: HeadingOffset,\n+}\n /// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n crate struct MarkdownWithToc<'a>(\n     crate &'a str,\n@@ -489,11 +512,17 @@ struct HeadingLinks<'a, 'b, 'ids, I> {\n     toc: Option<&'b mut TocBuilder>,\n     buf: VecDeque<SpannedEvent<'a>>,\n     id_map: &'ids mut IdMap,\n+    heading_offset: HeadingOffset,\n }\n \n impl<'a, 'b, 'ids, I> HeadingLinks<'a, 'b, 'ids, I> {\n-    fn new(iter: I, toc: Option<&'b mut TocBuilder>, ids: &'ids mut IdMap) -> Self {\n-        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids }\n+    fn new(\n+        iter: I,\n+        toc: Option<&'b mut TocBuilder>,\n+        ids: &'ids mut IdMap,\n+        heading_offset: HeadingOffset,\n+    ) -> Self {\n+        HeadingLinks { inner: iter, toc, buf: VecDeque::new(), id_map: ids, heading_offset }\n     }\n }\n \n@@ -530,6 +559,7 @@ impl<'a, 'b, 'ids, I: Iterator<Item = SpannedEvent<'a>>> Iterator\n                 self.buf.push_front((Event::Html(format!(\"{} \", sec).into()), 0..0));\n             }\n \n+            let level = std::cmp::min(level + (self.heading_offset as u32), MAX_HEADER_LEVEL);\n             self.buf.push_back((Event::Html(format!(\"</a></h{}>\", level).into()), 0..0));\n \n             let start_tags = format!(\n@@ -1005,7 +1035,15 @@ impl LangString {\n \n impl Markdown<'_> {\n     pub fn into_string(self) -> String {\n-        let Markdown(md, links, mut ids, codes, edition, playground) = self;\n+        let Markdown {\n+            content: md,\n+            links,\n+            mut ids,\n+            error_codes: codes,\n+            edition,\n+            playground,\n+            heading_offset,\n+        } = self;\n \n         // This is actually common enough to special-case\n         if md.is_empty() {\n@@ -1026,7 +1064,7 @@ impl Markdown<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids);\n+        let p = HeadingLinks::new(p, None, &mut ids, heading_offset);\n         let p = Footnotes::new(p);\n         let p = LinkReplacer::new(p.map(|(ev, _)| ev), links);\n         let p = TableWrapper::new(p);\n@@ -1048,7 +1086,7 @@ impl MarkdownWithToc<'_> {\n         let mut toc = TocBuilder::new();\n \n         {\n-            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids);\n+            let p = HeadingLinks::new(p, Some(&mut toc), &mut ids, HeadingOffset::H1);\n             let p = Footnotes::new(p);\n             let p = TableWrapper::new(p.map(|(ev, _)| ev));\n             let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1077,7 +1115,7 @@ impl MarkdownHtml<'_> {\n \n         let mut s = String::with_capacity(md.len() * 3 / 2);\n \n-        let p = HeadingLinks::new(p, None, &mut ids);\n+        let p = HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1);\n         let p = Footnotes::new(p);\n         let p = TableWrapper::new(p.map(|(ev, _)| ev));\n         let p = CodeBlocks::new(p, codes, edition, playground);\n@@ -1295,7 +1333,7 @@ crate fn markdown_links(md: &str) -> Vec<MarkdownLink> {\n     // There's no need to thread an IdMap through to here because\n     // the IDs generated aren't going to be emitted anywhere.\n     let mut ids = IdMap::new();\n-    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids));\n+    let iter = Footnotes::new(HeadingLinks::new(p, None, &mut ids, HeadingOffset::H1));\n \n     for ev in iter {\n         if let Event::Start(Tag::Link(kind, dest, _)) = ev.0 {"}, {"sha": "68ab002f138676d878902e4e4c14d7d434f49f09", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 34, "deletions": 18, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -1,5 +1,5 @@\n use super::{find_testable_code, plain_text_summary, short_markdown_summary};\n-use super::{ErrorCodes, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n+use super::{ErrorCodes, HeadingOffset, IdMap, Ignore, LangString, Markdown, MarkdownHtml};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n \n #[test]\n@@ -147,74 +147,90 @@ fn test_lang_string_tokenizer() {\n fn test_header() {\n     fn t(input: &str, expect: &str) {\n         let mut map = IdMap::new();\n-        let output =\n-            Markdown(input, &[], &mut map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: &mut map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_offset: HeadingOffset::H2,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\n         \"# Foo bar\",\n-        \"<h1 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h1>\",\n+        \"<h2 id=\\\"foo-bar\\\" class=\\\"section-header\\\"><a href=\\\"#foo-bar\\\">Foo bar</a></h2>\",\n     );\n     t(\n         \"## Foo-bar_baz qux\",\n-        \"<h2 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n-         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h2>\",\n+        \"<h3 id=\\\"foo-bar_baz-qux\\\" class=\\\"section-header\\\">\\\n+         <a href=\\\"#foo-bar_baz-qux\\\">Foo-bar_baz qux</a></h3>\",\n     );\n     t(\n         \"### **Foo** *bar* baz!?!& -_qux_-%\",\n-        \"<h3 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n+        \"<h4 id=\\\"foo-bar-baz--qux-\\\" class=\\\"section-header\\\">\\\n             <a href=\\\"#foo-bar-baz--qux-\\\"><strong>Foo</strong> \\\n             <em>bar</em> baz!?!&amp; -<em>qux</em>-%</a>\\\n-         </h3>\",\n+         </h4>\",\n     );\n     t(\n         \"#### **Foo?** & \\\\*bar?!*  _`baz`_ \u2764 #qux\",\n-        \"<h4 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n+        \"<h5 id=\\\"foo--bar--baz--qux\\\" class=\\\"section-header\\\">\\\n              <a href=\\\"#foo--bar--baz--qux\\\"><strong>Foo?</strong> &amp; *bar?!*  \\\n              <em><code>baz</code></em> \u2764 #qux</a>\\\n-         </h4>\",\n+         </h5>\",\n     );\n }\n \n #[test]\n fn test_header_ids_multiple_blocks() {\n     let mut map = IdMap::new();\n     fn t(map: &mut IdMap, input: &str, expect: &str) {\n-        let output =\n-            Markdown(input, &[], map, ErrorCodes::Yes, DEFAULT_EDITION, &None).into_string();\n+        let output = Markdown {\n+            content: input,\n+            links: &[],\n+            ids: map,\n+            error_codes: ErrorCodes::Yes,\n+            edition: DEFAULT_EDITION,\n+            playground: &None,\n+            heading_offset: HeadingOffset::H2,\n+        }\n+        .into_string();\n         assert_eq!(output, expect, \"original: {}\", input);\n     }\n \n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example\\\" class=\\\"section-header\\\"><a href=\\\"#example\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h1>\",\n+        \"<h2 id=\\\"panics\\\" class=\\\"section-header\\\"><a href=\\\"#panics\\\">Panics</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example-1\\\" class=\\\"section-header\\\"><a href=\\\"#example-1\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Main\",\n-        \"<h1 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h1>\",\n+        \"<h2 id=\\\"main-1\\\" class=\\\"section-header\\\"><a href=\\\"#main-1\\\">Main</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Example\",\n-        \"<h1 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h1>\",\n+        \"<h2 id=\\\"example-2\\\" class=\\\"section-header\\\"><a href=\\\"#example-2\\\">Example</a></h2>\",\n     );\n     t(\n         &mut map,\n         \"# Panics\",\n-        \"<h1 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h1>\",\n+        \"<h2 id=\\\"panics-1\\\" class=\\\"section-header\\\"><a href=\\\"#panics-1\\\">Panics</a></h2>\",\n     );\n }\n "}, {"sha": "11682afdf899ba0580be428629ebf1cb6a655c7d", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 60, "deletions": 30, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -67,7 +67,7 @@ use crate::html::format::{\n     href, print_abi_with_space, print_constness_with_space, print_default_space,\n     print_generic_bounds, print_where_clause, Buffer, HrefError, PrintWithSpace,\n };\n-use crate::html::markdown::{Markdown, MarkdownHtml, MarkdownSummaryLine};\n+use crate::html::markdown::{HeadingOffset, Markdown, MarkdownHtml, MarkdownSummaryLine};\n \n /// A pair of name and its optional document.\n crate type NameDoc = (String, Option<String>);\n@@ -470,32 +470,45 @@ fn settings(root_path: &str, suffix: &str, themes: &[StylePath]) -> Result<Strin\n     ))\n }\n \n-fn document(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, parent: Option<&clean::Item>) {\n+fn document(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    item: &clean::Item,\n+    parent: Option<&clean::Item>,\n+    heading_offset: HeadingOffset,\n+) {\n     if let Some(ref name) = item.name {\n         info!(\"Documenting {}\", name);\n     }\n     document_item_info(w, cx, item, parent);\n     if parent.is_none() {\n-        document_full_collapsible(w, item, cx);\n+        document_full_collapsible(w, item, cx, heading_offset);\n     } else {\n-        document_full(w, item, cx);\n+        document_full(w, item, cx, heading_offset);\n     }\n }\n \n /// Render md_text as markdown.\n-fn render_markdown(w: &mut Buffer, cx: &Context<'_>, md_text: &str, links: Vec<RenderedLink>) {\n+fn render_markdown(\n+    w: &mut Buffer,\n+    cx: &Context<'_>,\n+    md_text: &str,\n+    links: Vec<RenderedLink>,\n+    heading_offset: HeadingOffset,\n+) {\n     let mut ids = cx.id_map.borrow_mut();\n     write!(\n         w,\n         \"<div class=\\\"docblock\\\">{}</div>\",\n-        Markdown(\n-            md_text,\n-            &links,\n-            &mut ids,\n-            cx.shared.codes,\n-            cx.shared.edition(),\n-            &cx.shared.playground\n-        )\n+        Markdown {\n+            content: md_text,\n+            links: &links,\n+            ids: &mut ids,\n+            error_codes: cx.shared.codes,\n+            edition: cx.shared.edition(),\n+            playground: &cx.shared.playground,\n+            heading_offset,\n+        }\n         .into_string()\n     )\n }\n@@ -531,15 +544,31 @@ fn document_short(\n     }\n }\n \n-fn document_full_collapsible(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>) {\n-    document_full_inner(w, item, cx, true);\n+fn document_full_collapsible(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, true, heading_offset);\n }\n \n-fn document_full(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>) {\n-    document_full_inner(w, item, cx, false);\n+fn document_full(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    heading_offset: HeadingOffset,\n+) {\n+    document_full_inner(w, item, cx, false, heading_offset);\n }\n \n-fn document_full_inner(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_collapsible: bool) {\n+fn document_full_inner(\n+    w: &mut Buffer,\n+    item: &clean::Item,\n+    cx: &Context<'_>,\n+    is_collapsible: bool,\n+    heading_offset: HeadingOffset,\n+) {\n     if let Some(s) = cx.shared.maybe_collapsed_doc_value(item) {\n         debug!(\"Doc block: =====\\n{}\\n=====\", s);\n         if is_collapsible {\n@@ -549,10 +578,10 @@ fn document_full_inner(w: &mut Buffer, item: &clean::Item, cx: &Context<'_>, is_\n                      <span>Expand description</span>\\\n                 </summary>\",\n             );\n-            render_markdown(w, cx, &s, item.links(cx));\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n             w.write_str(\"</details>\");\n         } else {\n-            render_markdown(w, cx, &s, item.links(cx));\n+            render_markdown(w, cx, &s, item.links(cx), heading_offset);\n         }\n     }\n }\n@@ -1321,7 +1350,7 @@ fn render_impl(\n                         // because impls can't have a stability.\n                         if item.doc_value().is_some() {\n                             document_item_info(&mut info_buffer, cx, it, Some(parent));\n-                            document_full(&mut doc_buffer, item, cx);\n+                            document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                             short_documented = false;\n                         } else {\n                             // In case the item isn't documented,\n@@ -1339,7 +1368,7 @@ fn render_impl(\n                 } else {\n                     document_item_info(&mut info_buffer, cx, item, Some(parent));\n                     if rendering_params.show_def_docs {\n-                        document_full(&mut doc_buffer, item, cx);\n+                        document_full(&mut doc_buffer, item, cx, HeadingOffset::H5);\n                         short_documented = false;\n                     }\n                 }\n@@ -1573,14 +1602,15 @@ fn render_impl(\n             write!(\n                 w,\n                 \"<div class=\\\"docblock\\\">{}</div>\",\n-                Markdown(\n-                    &*dox,\n-                    &i.impl_item.links(cx),\n-                    &mut ids,\n-                    cx.shared.codes,\n-                    cx.shared.edition(),\n-                    &cx.shared.playground\n-                )\n+                Markdown {\n+                    content: &*dox,\n+                    links: &i.impl_item.links(cx),\n+                    ids: &mut ids,\n+                    error_codes: cx.shared.codes,\n+                    edition: cx.shared.edition(),\n+                    playground: &cx.shared.playground,\n+                    heading_offset: HeadingOffset::H2\n+                }\n                 .into_string()\n             );\n         }"}, {"sha": "1275fa4e1561769a0025de04798acd79cf9c99a4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -30,7 +30,7 @@ use crate::html::format::{\n };\n use crate::html::highlight;\n use crate::html::layout::Page;\n-use crate::html::markdown::MarkdownSummaryLine;\n+use crate::html::markdown::{HeadingOffset, MarkdownSummaryLine};\n \n const ITEM_TABLE_OPEN: &'static str = \"<div class=\\\"item-table\\\">\";\n const ITEM_TABLE_CLOSE: &'static str = \"</div>\";\n@@ -175,7 +175,7 @@ fn toggle_close(w: &mut Buffer) {\n }\n \n fn item_module(w: &mut Buffer, cx: &Context<'_>, item: &clean::Item, items: &[clean::Item]) {\n-    document(w, cx, item, None);\n+    document(w, cx, item, None, HeadingOffset::H2);\n \n     let mut indices = (0..items.len()).filter(|i| !items[*i].is_stripped()).collect::<Vec<usize>>();\n \n@@ -482,7 +482,7 @@ fn item_function(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, f: &clean::\n             notable_traits = notable_traits_decl(&f.decl, cx),\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Trait) {\n@@ -605,7 +605,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n     });\n \n     // Trait documentation\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     fn write_small_section_header(w: &mut Buffer, id: &str, title: &str, extra_content: &str) {\n         write!(\n@@ -623,7 +623,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let item_type = m.type_();\n         let id = cx.derive_id(format!(\"{}.{}\", item_type, name));\n         let mut content = Buffer::empty_from(w);\n-        document(&mut content, cx, m, Some(t));\n+        document(&mut content, cx, m, Some(t), HeadingOffset::H5);\n         let toggled = !content.is_empty();\n         if toggled {\n             write!(w, \"<details class=\\\"rustdoc-toggle\\\" open><summary>\");\n@@ -837,7 +837,7 @@ fn item_trait_alias(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clea\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -859,7 +859,7 @@ fn item_opaque_ty(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean:\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     // Render any items associated directly to this alias, as otherwise they\n     // won't be visible anywhere in the docs. It would be nice to also show\n@@ -890,7 +890,7 @@ fn item_typedef(\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let def_id = it.def_id.expect_def_id();\n     // Render any items associated directly to this alias, as otherwise they\n@@ -908,7 +908,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -941,7 +941,7 @@ fn item_union(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Uni\n             if let Some(stability_class) = field.stability_class(cx.tcx()) {\n                 write!(w, \"<span class=\\\"stab {stab}\\\"></span>\", stab = stability_class);\n             }\n-            document(w, cx, field, Some(it));\n+            document(w, cx, field, Some(it), HeadingOffset::H2);\n         }\n     }\n     let def_id = it.def_id.expect_def_id();\n@@ -1023,7 +1023,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     if !e.variants.is_empty() {\n         write!(\n@@ -1052,7 +1052,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n             w.write_str(\"</code>\");\n             render_stability_since(w, variant, it, cx.tcx());\n             w.write_str(\"</div>\");\n-            document(w, cx, variant, Some(it));\n+            document(w, cx, variant, Some(it), HeadingOffset::H2);\n             document_non_exhaustive(w, variant);\n \n             use crate::clean::Variant;\n@@ -1092,7 +1092,7 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                                 f = field.name.as_ref().unwrap(),\n                                 t = ty.print(cx)\n                             );\n-                            document(w, cx, field, Some(variant));\n+                            document(w, cx, field, Some(variant), HeadingOffset::H2);\n                         }\n                         _ => unreachable!(),\n                     }\n@@ -1119,7 +1119,7 @@ fn item_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Mac\n             None,\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean::ProcMacro) {\n@@ -1149,11 +1149,11 @@ fn item_proc_macro(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, m: &clean\n             });\n         }\n     }\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_primitive(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n@@ -1192,7 +1192,7 @@ fn item_constant(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, c: &clean::\n         }\n     });\n \n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::Struct) {\n@@ -1203,7 +1203,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n         });\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     let mut fields = s\n         .fields\n@@ -1239,7 +1239,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                     name = field_name,\n                     ty = ty.print(cx)\n                 );\n-                document(w, cx, field, Some(it));\n+                document(w, cx, field, Some(it), HeadingOffset::H2);\n             }\n         }\n     }\n@@ -1260,7 +1260,7 @@ fn item_static(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             typ = s.type_.print(cx)\n         );\n     });\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n@@ -1275,13 +1275,13 @@ fn item_foreign_type(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n         );\n     });\n \n-    document(w, cx, it, None);\n+    document(w, cx, it, None, HeadingOffset::H2);\n \n     render_assoc_items(w, cx, it, it.def_id.expect_def_id(), AssocItemRender::All)\n }\n \n fn item_keyword(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item) {\n-    document(w, cx, it, None)\n+    document(w, cx, it, None, HeadingOffset::H2)\n }\n \n /// Compare two strings treating multi-digit numbers as single units (i.e. natural sort order)."}, {"sha": "5d33681847a4131ae0bf3eed3f7a89459402bed2", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -126,7 +126,7 @@ h2 {\n h3 {\n \tfont-size: 1.3em;\n }\n-h1, h2, h3, h4 {\n+h1, h2, h3, h4, h5, h6 {\n \tfont-weight: 500;\n \tmargin: 20px 0 15px 0;\n \tpadding-bottom: 6px;\n@@ -179,7 +179,7 @@ div.impl-items > div {\n \tpadding-left: 0;\n }\n \n-h1, h2, h3, h4,\n+h1, h2, h3, h4, h5, h6,\n .sidebar, a.source, .search-input, .search-results .result-name,\n .content table td:first-child > a,\n .item-left > a,\n@@ -501,21 +501,20 @@ nav.sub {\n \twhite-space: pre-wrap;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom: 1px solid;\n }\n \n-.top-doc .docblock h1 { font-size: 1.3em; }\n-.top-doc .docblock h2 { font-size: 1.15em; }\n-.top-doc .docblock h3,\n+.top-doc .docblock h2 { font-size: 1.3em; }\n+.top-doc .docblock h3 { font-size: 1.15em; }\n .top-doc .docblock h4,\n-.top-doc .docblock h5 {\n+.top-doc .docblock h5,\n+.top-doc .docblock h6 {\n \tfont-size: 1em;\n }\n \n-.docblock h1 { font-size: 1em; }\n-.docblock h2 { font-size: 0.95em; }\n-.docblock h3, .docblock h4, .docblock h5 { font-size: 0.9em; }\n+.docblock h5 { font-size: 1em; }\n+.docblock h6 { font-size: 0.95em; }\n \n .docblock {\n \tmargin-left: 24px;"}, {"sha": "0fd6462a8f5dd82851928adc60e510088b4664d1", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -136,7 +136,7 @@ pre, .rustdoc.source .example-wrap {\n \tborder-right: 1px solid #ffb44c;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #5c6773;\n }\n "}, {"sha": "d863701dd73c7a320d570dbb695ec5661c7c2f43", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -93,7 +93,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #0a042f !important;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #DDD;\n }\n "}, {"sha": "28d2e99a3d07359fa8147753cc14ca3fddf78817", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -93,7 +93,7 @@ pre, .rustdoc.source .example-wrap {\n \tbackground-color: #f6fdb0 !important;\n }\n \n-.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5, .docblock h6 {\n \tborder-bottom-color: #ddd;\n }\n "}, {"sha": "47b24d40edc27ccaac299bfe59f804cd9ca4675d", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -10,7 +10,9 @@ use crate::config::{Options, RenderOptions};\n use crate::doctest::{Collector, TestOptions};\n use crate::html::escape::Escape;\n use crate::html::markdown;\n-use crate::html::markdown::{find_testable_code, ErrorCodes, IdMap, Markdown, MarkdownWithToc};\n+use crate::html::markdown::{\n+    find_testable_code, ErrorCodes, HeadingOffset, IdMap, Markdown, MarkdownWithToc,\n+};\n \n /// Separate any lines at the start of the file that begin with `# ` or `%`.\n fn extract_leading_metadata(s: &str) -> (Vec<&str>, &str) {\n@@ -70,7 +72,16 @@ crate fn render<P: AsRef<Path>>(\n     let text = if !options.markdown_no_toc {\n         MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n     } else {\n-        Markdown(text, &[], &mut ids, error_codes, edition, &playground).into_string()\n+        Markdown {\n+            content: text,\n+            links: &[],\n+            ids: &mut ids,\n+            error_codes,\n+            edition,\n+            playground: &playground,\n+            heading_offset: HeadingOffset::H1,\n+        }\n+        .into_string()\n     };\n \n     let err = write!("}, {"sha": "3f8e16882911ae3195db0a21e0311d3c956bcc63", "filename": "src/test/rustdoc/external-cross.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fexternal-cross.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fexternal-cross.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-cross.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -6,5 +6,5 @@\n extern crate external_cross;\n \n // @has host/struct.NeedMoreDocs.html\n-// @has - '//h1' 'Cross-crate imported docs'\n+// @has - '//h2' 'Cross-crate imported docs'\n pub use external_cross::NeedMoreDocs;"}, {"sha": "bd322d67a370d4ddbca64ffd4373a7195e43c510", "filename": "src/test/rustdoc/external-doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fexternal-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fexternal-doc.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -1,14 +1,14 @@\n // @has external_doc/struct.IncludeStrDocs.html\n-// @has - '//h1' 'External Docs'\n-// @has - '//h2' 'Inline Docs'\n+// @has - '//h2' 'External Docs'\n+// @has - '//h3' 'Inline Docs'\n #[doc = include_str!(\"auxiliary/external-doc.md\")]\n /// ## Inline Docs\n pub struct IncludeStrDocs;\n \n macro_rules! dir { () => { \"auxiliary\" } }\n \n // @has external_doc/struct.EagerExpansion.html\n-// @has - '//h1' 'External Docs'\n+// @has - '//h2' 'External Docs'\n #[doc = include_str!(concat!(dir!(), \"/external-doc.md\"))]\n /// ## Inline Docs\n pub struct EagerExpansion;"}, {"sha": "4944f8157014ed4a7562635f366ee1aaad8b541b", "filename": "src/test/rustdoc/issue-42760.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fissue-42760.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fissue-42760.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-42760.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -1,5 +1,5 @@\n // @has issue_42760/struct.NonGen.html\n-// @has - '//h1' 'Example'\n+// @has - '//h2' 'Example'\n \n /// Item docs.\n ///"}, {"sha": "bb706c28ffa51c32760acc534142ec592b835127", "filename": "src/test/rustdoc/issue-89309-heading-levels.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-89309-heading-levels.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -0,0 +1,29 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Read.html\n+// @has - '//h2' 'Trait examples'\n+/// # Trait examples\n+pub trait Read {\n+    // @has - '//h5' 'Function examples'\n+    /// # Function examples\n+    fn read(&mut self, buf: &mut [u8]) -> Result<usize, ()>;\n+}\n+\n+pub struct Foo;\n+\n+// @has foo/struct.Foo.html\n+impl Foo {\n+    // @has - '//h5' 'Implementation header'\n+    /// # Implementation header\n+    pub fn bar(&self) -> usize {\n+        1\n+    }\n+}\n+\n+impl Read for Foo {\n+    // @has - '//h5' 'Trait implementation header'\n+    /// # Trait implementation header\n+    fn read(&mut self, buf: &mut [u8]) -> Result<usize, ()> {\n+        Ok(1)\n+    }\n+}"}, {"sha": "17c44eab091a6fc79cde810baff664ff5ff4f45f", "filename": "src/test/rustdoc/short-docblock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fshort-docblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fshort-docblock.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -2,7 +2,7 @@\n \n // @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'fooo'\n // @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h1' 'fooo'\n-// @has foo/fn.foo.html '//h1[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n+// @has foo/fn.foo.html '//h2[@id=\"fooo\"]/a[@href=\"#fooo\"]' 'fooo'\n \n /// # fooo\n ///\n@@ -11,7 +11,7 @@ pub fn foo() {}\n \n // @has foo/index.html '//*[@class=\"item-right docblock-short\"]/p' 'mooood'\n // @!has foo/index.html '//*[@class=\"item-right docblock-short\"]/p/h2' 'mooood'\n-// @has foo/foo/index.html '//h2[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n+// @has foo/foo/index.html '//h3[@id=\"mooood\"]/a[@href=\"#mooood\"]' 'mooood'\n \n /// ## mooood\n ///"}, {"sha": "7ae5bd699457919018fce65274c802c68c393511", "filename": "src/test/rustdoc/smart-punct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftest%2Frustdoc%2Fsmart-punct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsmart-punct.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -21,7 +21,7 @@\n //! ```\n \n // @has \"foo/index.html\" \"//p\" \"This is the \u201cstart\u201d of the \u2018document\u2019! How\u2019d you know that \u201cit\u2019s\u201d the start?\"\n-// @has \"foo/index.html\" \"//h1\" \"Header with \u201csmart punct\u2019\u201d\"\n+// @has \"foo/index.html\" \"//h2\" \"Header with \u201csmart punct\u2019\u201d\"\n // @has \"foo/index.html\" '//a[@href=\"https://www.rust-lang.org\"]' \"link with \u201csmart punct\u2019\u201d \u2013 yessiree!\"\n // @has \"foo/index.html\" '//code' \"this inline code -- it shouldn't have \\\"smart punct\\\"\"\n // @has \"foo/index.html\" '//pre' \"let x = \\\"don't smart-punct me -- please!\\\";\""}, {"sha": "39498c99e64d658b8b8456e03a21300b020c14d6", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=7d6feb421ed159ee8f110741d4fb8a43b4ba7ff5", "patch": "@@ -14,7 +14,7 @@ use std::path::PathBuf;\n \n use rustc_span::edition::DEFAULT_EDITION;\n \n-use rustdoc::html::markdown::{ErrorCodes, IdMap, Markdown, Playground};\n+use rustdoc::html::markdown::{ErrorCodes, HeadingOffset, IdMap, Markdown, Playground};\n \n pub struct ErrorMetadata {\n     pub description: Option<String>,\n@@ -119,14 +119,15 @@ impl Formatter for HTMLFormatter {\n                 write!(\n                     output,\n                     \"{}\",\n-                    Markdown(\n-                        desc,\n-                        &[],\n-                        &mut id_map,\n-                        ErrorCodes::Yes,\n-                        DEFAULT_EDITION,\n-                        &Some(playground)\n-                    )\n+                    Markdown {\n+                        content: desc,\n+                        links: &[],\n+                        ids: &mut id_map,\n+                        error_codes: ErrorCodes::Yes,\n+                        edition: DEFAULT_EDITION,\n+                        playground: &Some(playground),\n+                        heading_offset: HeadingOffset::H1,\n+                    }\n                     .into_string()\n                 )?\n             }"}]}