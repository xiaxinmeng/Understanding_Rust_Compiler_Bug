{"sha": "49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZmJkNzZhNzY2N2ZiYTlkZmJmMjgzY2E3OTJhMGRjNjZjOWZiNWI=", "commit": {"author": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2019-06-15T06:47:19Z"}, "committer": {"name": "Michal 'vorner' Vaner", "email": "vorner@vorner.cz", "date": "2019-06-15T06:47:19Z"}, "message": "Make the Weak::{into,as}_raw methods\n\nBecause Weak doesn't Deref, so there's no reason for them to be only\nassociated methods.", "tree": {"sha": "5620790ec673cb3b4523a4afd466238a5e16f8ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5620790ec673cb3b4523a4afd466238a5e16f8ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEQ8wy/3jh6tM0kr/e9wDQwBnkxm8FAl0EmF4ACgkQ9wDQwBnk\nxm+/lA//UW76KJchFZLHwOQIaoGYyG33FnPTxbJrgYGace3eZnu8A45d16ygpsPB\n4rpbLo3LtyDHjXwN9lJAAx1z6rLGc5acDY6trqa8S20TQkS/rfQfRuB8vRWNCF5E\nHgYpc2idwcVE64EwXgM1RrZgJf1/BvqiMlExFiNxyqFd+3KSJ2nhGa+0i8YZaAyr\npRAgEJ+M72CdtLlaKEvtsu4Zj2TRc9zrjtpXWQfsK6/HtF/c/dD0mkL7okLD6HuR\nJpfh2Q5b96DvXTjcE/zc2JW/tzf3k8j0Lc5YpRBk/eROZqwg8xr/1fTnTO+BVYLT\nunzyzz0hAMFFiGDxAI+z+5LhPNu325C1Z87q0d0iHk2vSQgef9ugW7JRgWuoS97K\np7rkntvGNxb0jqH+9Mius+KIaDZqI9bUH1ywep2ZjdnldkYlX8qisPV7ifHTzMEY\nVzfOrH8TLBq9ksTRt6tpW400E0yF9xocqe+FjiJzpXQH3muF/MpYLlcjfhymXzB4\nQD6odQePpFAoc8YiNAfaQcCKWpG5vnLl0v19rt8ubDDXsieDyIBqRnxhZlQaqxfb\nxzaaYUvjElmUItNAU2j4zBCuecHiLWuoqAtCzyzbmwzbd+K8u6OA4EcrBrRsiuDp\nj+n+wGEI4YWvKNQfw3nB62qtW6h2dqoHsFnk4DqM8x9Pyibv780=\n=VcZH\n-----END PGP SIGNATURE-----", "payload": "tree 5620790ec673cb3b4523a4afd466238a5e16f8ba\nparent fc550d4295a654f9e7c621d957d81fbf1426c70b\nauthor Michal 'vorner' Vaner <vorner@vorner.cz> 1560581239 +0200\ncommitter Michal 'vorner' Vaner <vorner@vorner.cz> 1560581239 +0200\n\nMake the Weak::{into,as}_raw methods\n\nBecause Weak doesn't Deref, so there's no reason for them to be only\nassociated methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "html_url": "https://github.com/rust-lang/rust/commit/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b/comments", "author": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vorner", "id": 11783500, "node_id": "MDQ6VXNlcjExNzgzNTAw", "avatar_url": "https://avatars.githubusercontent.com/u/11783500?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vorner", "html_url": "https://github.com/vorner", "followers_url": "https://api.github.com/users/vorner/followers", "following_url": "https://api.github.com/users/vorner/following{/other_user}", "gists_url": "https://api.github.com/users/vorner/gists{/gist_id}", "starred_url": "https://api.github.com/users/vorner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vorner/subscriptions", "organizations_url": "https://api.github.com/users/vorner/orgs", "repos_url": "https://api.github.com/users/vorner/repos", "events_url": "https://api.github.com/users/vorner/events{/privacy}", "received_events_url": "https://api.github.com/users/vorner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc550d4295a654f9e7c621d957d81fbf1426c70b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc550d4295a654f9e7c621d957d81fbf1426c70b", "html_url": "https://github.com/rust-lang/rust/commit/fc550d4295a654f9e7c621d957d81fbf1426c70b"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "912f600e377da5c5443ac0edffb54abff7e00aad", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "patch": "@@ -1291,26 +1291,26 @@ impl<T> Weak<T> {\n     /// ```\n     /// #![feature(weak_into_raw)]\n     ///\n-    /// use std::rc::{Rc, Weak};\n+    /// use std::rc::Rc;\n     /// use std::ptr;\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     /// let weak = Rc::downgrade(&strong);\n     /// // Both point to the same object\n-    /// assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    /// assert!(ptr::eq(&*strong, weak.as_raw()));\n     /// // The strong here keeps it alive, so we can still access the object.\n-    /// assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     ///\n     /// drop(strong);\n-    /// // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n+    /// // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to\n     /// // undefined behaviour.\n-    /// // assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn as_raw(this: &Self) -> *const T {\n-        match this.inner() {\n+    pub fn as_raw(&self) -> *const T {\n+        match self.inner() {\n             None => ptr::null(),\n             Some(inner) => {\n                 let offset = data_offset_sized::<T>();\n@@ -1341,7 +1341,7 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     /// let weak = Rc::downgrade(&strong);\n-    /// let raw = Weak::into_raw(weak);\n+    /// let raw = weak.into_raw();\n     ///\n     /// assert_eq!(1, Rc::weak_count(&strong));\n     /// assert_eq!(\"hello\", unsafe { &*raw });\n@@ -1353,9 +1353,9 @@ impl<T> Weak<T> {\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_raw`]: struct.Weak.html#method.as_raw\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn into_raw(this: Self) -> *const T {\n-        let result = Self::as_raw(&this);\n-        mem::forget(this);\n+    pub fn into_raw(self) -> *const T {\n+        let result = self.as_raw();\n+        mem::forget(self);\n         result\n     }\n \n@@ -1382,18 +1382,18 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Rc::new(\"hello\".to_owned());\n     ///\n-    /// let raw_1 = Weak::into_raw(Rc::downgrade(&strong));\n-    /// let raw_2 = Weak::into_raw(Rc::downgrade(&strong));\n+    /// let raw_1 = Rc::downgrade(&strong).into_raw();\n+    /// let raw_2 = Rc::downgrade(&strong).into_raw();\n     ///\n     /// assert_eq!(2, Rc::weak_count(&strong));\n     ///\n-    /// assert_eq!(\"hello\", &*Weak::upgrade(&unsafe { Weak::from_raw(raw_1) }).unwrap());\n+    /// assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\n     /// assert_eq!(1, Rc::weak_count(&strong));\n     ///\n     /// drop(strong);\n     ///\n     /// // Decrement the last weak count.\n-    /// assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n+    /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html"}, {"sha": "f0fbcc55981acf729925982e0598f86425365a21", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=49fbd76a7667fba9dfbf283ca792a0dc66c9fb5b", "patch": "@@ -1080,26 +1080,26 @@ impl<T> Weak<T> {\n     /// ```\n     /// #![feature(weak_into_raw)]\n     ///\n-    /// use std::sync::{Arc, Weak};\n+    /// use std::sync::Arc;\n     /// use std::ptr;\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     /// let weak = Arc::downgrade(&strong);\n     /// // Both point to the same object\n-    /// assert!(ptr::eq(&*strong, Weak::as_raw(&weak)));\n+    /// assert!(ptr::eq(&*strong, weak.as_raw()));\n     /// // The strong here keeps it alive, so we can still access the object.\n-    /// assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     ///\n     /// drop(strong);\n-    /// // But not any more. We can do Weak::as_raw(&weak), but accessing the pointer would lead to\n+    /// // But not any more. We can do weak.as_raw(), but accessing the pointer would lead to\n     /// // undefined behaviour.\n-    /// // assert_eq!(\"hello\", unsafe { &*Weak::as_raw(&weak) });\n+    /// // assert_eq!(\"hello\", unsafe { &*weak.as_raw() });\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn as_raw(this: &Self) -> *const T {\n-        match this.inner() {\n+    pub fn as_raw(&self) -> *const T {\n+        match self.inner() {\n             None => ptr::null(),\n             Some(inner) => {\n                 let offset = data_offset_sized::<T>();\n@@ -1130,7 +1130,7 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     /// let weak = Arc::downgrade(&strong);\n-    /// let raw = Weak::into_raw(weak);\n+    /// let raw = weak.into_raw();\n     ///\n     /// assert_eq!(1, Arc::weak_count(&strong));\n     /// assert_eq!(\"hello\", unsafe { &*raw });\n@@ -1142,9 +1142,9 @@ impl<T> Weak<T> {\n     /// [`from_raw`]: struct.Weak.html#method.from_raw\n     /// [`as_raw`]: struct.Weak.html#method.as_raw\n     #[unstable(feature = \"weak_into_raw\", issue = \"60728\")]\n-    pub fn into_raw(this: Self) -> *const T {\n-        let result = Self::as_raw(&this);\n-        mem::forget(this);\n+    pub fn into_raw(self) -> *const T {\n+        let result = self.as_raw();\n+        mem::forget(self);\n         result\n     }\n \n@@ -1172,18 +1172,18 @@ impl<T> Weak<T> {\n     ///\n     /// let strong = Arc::new(\"hello\".to_owned());\n     ///\n-    /// let raw_1 = Weak::into_raw(Arc::downgrade(&strong));\n-    /// let raw_2 = Weak::into_raw(Arc::downgrade(&strong));\n+    /// let raw_1 = Arc::downgrade(&strong).into_raw();\n+    /// let raw_2 = Arc::downgrade(&strong).into_raw();\n     ///\n     /// assert_eq!(2, Arc::weak_count(&strong));\n     ///\n-    /// assert_eq!(\"hello\", &*Weak::upgrade(&unsafe { Weak::from_raw(raw_1) }).unwrap());\n+    /// assert_eq!(\"hello\", &*unsafe { Weak::from_raw(raw_1) }.upgrade().unwrap());\n     /// assert_eq!(1, Arc::weak_count(&strong));\n     ///\n     /// drop(strong);\n     ///\n     /// // Decrement the last weak count.\n-    /// assert!(Weak::upgrade(&unsafe { Weak::from_raw(raw_2) }).is_none());\n+    /// assert!(unsafe { Weak::from_raw(raw_2) }.upgrade().is_none());\n     /// ```\n     ///\n     /// [`null`]: ../../std/ptr/fn.null.html"}]}