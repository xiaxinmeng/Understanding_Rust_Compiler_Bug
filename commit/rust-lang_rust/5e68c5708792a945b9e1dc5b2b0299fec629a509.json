{"sha": "5e68c5708792a945b9e1dc5b2b0299fec629a509", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlNjhjNTcwODc5MmE5NDViOWUxZGM1YjJiMDI5OWZlYzYyOWE1MDk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-03T19:28:05Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-03T20:34:26Z"}, "message": "Use the correct state for poisoning a generator", "tree": {"sha": "8adad9c5973f35ddc4c729ce8d639eb11ff1115f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8adad9c5973f35ddc4c729ce8d639eb11ff1115f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e68c5708792a945b9e1dc5b2b0299fec629a509", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e68c5708792a945b9e1dc5b2b0299fec629a509", "html_url": "https://github.com/rust-lang/rust/commit/5e68c5708792a945b9e1dc5b2b0299fec629a509", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e68c5708792a945b9e1dc5b2b0299fec629a509/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7801908c6b8f142a0b31f0582e526fb7369833", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7801908c6b8f142a0b31f0582e526fb7369833", "html_url": "https://github.com/rust-lang/rust/commit/8a7801908c6b8f142a0b31f0582e526fb7369833"}], "stats": {"total": 55, "additions": 42, "deletions": 13}, "files": [{"sha": "38fc1243f24afd0ec7cba999e0337b94533e4b27", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c5708792a945b9e1dc5b2b0299fec629a509/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c5708792a945b9e1dc5b2b0299fec629a509/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5e68c5708792a945b9e1dc5b2b0299fec629a509", "patch": "@@ -26,7 +26,7 @@\n //!     }\n //!\n //! This pass computes the meaning of the state field and the MIR locals which are live\n-//! across a suspension point. There are however two hardcoded generator states:\n+//! across a suspension point. There are however three hardcoded generator states:\n //!     0 - Generator have not been resumed yet\n //!     1 - Generator has returned / is completed\n //!     2 - Generator has been poisoned\n@@ -144,6 +144,13 @@ fn self_arg() -> Local {\n     Local::new(1)\n }\n \n+/// Generator have not been resumed yet\n+const UNRESUMED: u32 = 0;\n+/// Generator has returned / is completed\n+const RETURNED: u32 = 1;\n+/// Generator has been poisoned\n+const POISONED: u32 = 2;\n+\n struct SuspensionPoint {\n     state: u32,\n     resume: BasicBlock,\n@@ -278,7 +285,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for TransformVisitor<'a, 'tcx> {\n \n                 state\n             } else { // Return\n-                 1 // state for returned\n+                RETURNED // state for returned\n             };\n             data.statements.push(self.set_state(state, source_info));\n             data.terminator.as_mut().unwrap().kind = TerminatorKind::Return;\n@@ -643,10 +650,10 @@ fn create_generator_drop_shim<'a, 'tcx>(\n \n     let mut cases = create_cases(&mut mir, transform, |point| point.drop);\n \n-    cases.insert(0, (0, drop_clean));\n+    cases.insert(0, (UNRESUMED, drop_clean));\n \n-    // The returned state (1) and the poisoned state (2) falls through to\n-    // the default case which is just to return\n+    // The returned state and the poisoned state fall through to the default\n+    // case which is just to return\n \n     insert_switch(tcx, &mut mir, cases, &transform, TerminatorKind::Return);\n \n@@ -762,7 +769,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n     for block in mir.basic_blocks_mut() {\n         let source_info = block.terminator().source_info;\n         if let &TerminatorKind::Resume = &block.terminator().kind {\n-            block.statements.push(transform.set_state(1, source_info));\n+            block.statements.push(transform.set_state(POISONED, source_info));\n         }\n     }\n \n@@ -773,12 +780,12 @@ fn create_generator_resume_function<'a, 'tcx>(\n         GeneratorResumedAfterReturn,\n     };\n \n-    // Jump to the entry point on the 0 state\n-    cases.insert(0, (0, BasicBlock::new(0)));\n-    // Panic when resumed on the returned (1) state\n-    cases.insert(1, (1, insert_panic_block(tcx, mir, GeneratorResumedAfterReturn)));\n-    // Panic when resumed on the poisoned (2) state\n-    cases.insert(2, (2, insert_panic_block(tcx, mir, GeneratorResumedAfterPanic)));\n+    // Jump to the entry point on the unresumed\n+    cases.insert(0, (UNRESUMED, BasicBlock::new(0)));\n+    // Panic when resumed on the returned state\n+    cases.insert(1, (RETURNED, insert_panic_block(tcx, mir, GeneratorResumedAfterReturn)));\n+    // Panic when resumed on the poisoned state\n+    cases.insert(2, (POISONED, insert_panic_block(tcx, mir, GeneratorResumedAfterPanic)));\n \n     insert_switch(tcx, mir, cases, &transform, TerminatorKind::Unreachable);\n \n@@ -942,7 +949,7 @@ impl MirPass for StateTransform {\n         mir.generator_layout = Some(layout);\n \n         // Insert `drop(generator_struct)` which is used to drop upvars for generators in\n-        // the unresumed (0) state.\n+        // the unresumed state.\n         // This is expanded to a drop ladder in `elaborate_generator_drops`.\n         let drop_clean = insert_clean_drop(mir);\n "}, {"sha": "910b4903bf6a36225e98e46538f17223ded00d82", "filename": "src/test/run-fail/generator-resume-after-panic.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5e68c5708792a945b9e1dc5b2b0299fec629a509/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e68c5708792a945b9e1dc5b2b0299fec629a509/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fgenerator-resume-after-panic.rs?ref=5e68c5708792a945b9e1dc5b2b0299fec629a509", "patch": "@@ -0,0 +1,22 @@\n+// error-pattern:generator resumed after panicking\n+\n+// Test that we get the correct message for resuming a panicked generator.\n+\n+#![feature(generators, generator_trait)]\n+\n+use std::{\n+    ops::Generator,\n+    pin::Pin,\n+    panic,\n+};\n+\n+fn main() {\n+    let mut g = || {\n+        panic!();\n+        yield;\n+    };\n+    panic::catch_unwind(panic::AssertUnwindSafe(|| {\n+        let x = Pin::new(&mut g).resume();\n+    }));\n+    Pin::new(&mut g).resume();\n+}"}]}