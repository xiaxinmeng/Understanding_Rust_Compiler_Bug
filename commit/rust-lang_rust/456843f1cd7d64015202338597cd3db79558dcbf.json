{"sha": "456843f1cd7d64015202338597cd3db79558dcbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Njg0M2YxY2Q3ZDY0MDE1MjAyMzM4NTk3Y2QzZGI3OTU1OGRjYmY=", "commit": {"author": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2018-10-15T03:07:21Z"}, "committer": {"name": "Owen Sanchez", "email": "pengowen816@gmail.com", "date": "2018-10-15T03:14:16Z"}, "message": "Swap order of methods in `needless_range_loop` suggestion in some cases", "tree": {"sha": "29e427827c38699902835631dfc201ba4eb87419", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e427827c38699902835631dfc201ba4eb87419"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/456843f1cd7d64015202338597cd3db79558dcbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/456843f1cd7d64015202338597cd3db79558dcbf", "html_url": "https://github.com/rust-lang/rust/commit/456843f1cd7d64015202338597cd3db79558dcbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/456843f1cd7d64015202338597cd3db79558dcbf/comments", "author": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pengowen123", "id": 12902948, "node_id": "MDQ6VXNlcjEyOTAyOTQ4", "avatar_url": "https://avatars.githubusercontent.com/u/12902948?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pengowen123", "html_url": "https://github.com/pengowen123", "followers_url": "https://api.github.com/users/pengowen123/followers", "following_url": "https://api.github.com/users/pengowen123/following{/other_user}", "gists_url": "https://api.github.com/users/pengowen123/gists{/gist_id}", "starred_url": "https://api.github.com/users/pengowen123/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pengowen123/subscriptions", "organizations_url": "https://api.github.com/users/pengowen123/orgs", "repos_url": "https://api.github.com/users/pengowen123/repos", "events_url": "https://api.github.com/users/pengowen123/events{/privacy}", "received_events_url": "https://api.github.com/users/pengowen123/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a", "html_url": "https://github.com/rust-lang/rust/commit/601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a"}], "stats": {"total": 76, "additions": 69, "deletions": 7}, "files": [{"sha": "3c4f06077d98039a4804454ca177e6e6dd6052eb", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 34, "deletions": 6, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/456843f1cd7d64015202338597cd3db79558dcbf/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456843f1cd7d64015202338597cd3db79558dcbf/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=456843f1cd7d64015202338597cd3db79558dcbf", "patch": "@@ -27,6 +27,7 @@ use crate::rustc::ty::subst::Subst;\n use crate::rustc_errors::Applicability;\n use crate::rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use std::iter::{once, Iterator};\n+use std::mem;\n use crate::syntax::ast;\n use crate::syntax::source_map::Span;\n use crate::syntax_pos::BytePos;\n@@ -1082,16 +1083,35 @@ fn check_for_loop_range<'a, 'tcx>(\n                     format!(\".skip({})\", snippet(cx, start.span, \"..\"))\n                 };\n \n+                let mut end_is_start_plus_val = false;\n+\n                 let take = if let Some(end) = *end {\n+                    let mut take_expr = end;\n+\n+                    if let ExprKind::Binary(ref op, ref left, ref right) = end.node {\n+                        if let BinOpKind::Add = op.node {\n+                            let start_equal_left = SpanlessEq::new(cx).eq_expr(start, left);\n+                            let start_equal_right = SpanlessEq::new(cx).eq_expr(start, right);\n+\n+                            if start_equal_left {\n+                                take_expr = right;\n+                            } else if start_equal_right {\n+                                take_expr = left;\n+                            }\n+\n+                            end_is_start_plus_val = start_equal_left | start_equal_right;\n+                        }\n+                    }\n+\n                     if is_len_call(end, indexed) {\n                         String::new()\n                     } else {\n                         match limits {\n                             ast::RangeLimits::Closed => {\n-                                let end = sugg::Sugg::hir(cx, end, \"<count>\");\n-                                format!(\".take({})\", end + sugg::ONE)\n+                                let take_expr = sugg::Sugg::hir(cx, take_expr, \"<count>\");\n+                                format!(\".take({})\", take_expr + sugg::ONE)\n                             },\n-                            ast::RangeLimits::HalfOpen => format!(\".take({})\", snippet(cx, end.span, \"..\")),\n+                            ast::RangeLimits::HalfOpen => format!(\".take({})\", snippet(cx, take_expr.span, \"..\")),\n                         }\n                     }\n                 } else {\n@@ -1104,6 +1124,14 @@ fn check_for_loop_range<'a, 'tcx>(\n                     (\"\", \"iter\")\n                 };\n \n+                let take_is_empty = take.is_empty();\n+                let mut method_1 = take;\n+                let mut method_2 = skip;\n+\n+                if end_is_start_plus_val {\n+                    mem::swap(&mut method_1, &mut method_2);\n+                }\n+\n                 if visitor.nonindex {\n                     span_lint_and_then(\n                         cx,\n@@ -1116,16 +1144,16 @@ fn check_for_loop_range<'a, 'tcx>(\n                                 \"consider using an iterator\".to_string(),\n                                 vec![\n                                     (pat.span, format!(\"({}, <item>)\", ident.name)),\n-                                    (arg.span, format!(\"{}.{}().enumerate(){}{}\", indexed, method, take, skip)),\n+                                    (arg.span, format!(\"{}.{}().enumerate(){}{}\", indexed, method, method_1, method_2)),\n                                 ],\n                             );\n                         },\n                     );\n                 } else {\n-                    let repl = if starts_at_zero && take.is_empty() {\n+                    let repl = if starts_at_zero && take_is_empty {\n                         format!(\"&{}{}\", ref_mut, indexed)\n                     } else {\n-                        format!(\"{}.{}(){}{}\", indexed, method, take, skip)\n+                        format!(\"{}.{}(){}{}\", indexed, method, method_1, method_2)\n                     };\n \n                     span_lint_and_then("}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/author/for_loop.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fauthor%2Ffor_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fauthor%2Ffor_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauthor%2Ffor_loop.stderr?ref=456843f1cd7d64015202338597cd3db79558dcbf"}, {"sha": "3da9267d38b9e4a0ed745237d8505de8f009f249", "filename": "tests/ui/needless_range_loop.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.rs?ref=456843f1cd7d64015202338597cd3db79558dcbf", "patch": "@@ -62,4 +62,18 @@ fn main() {\n         g[i] = g[i+1..].iter().sum();\n     }\n     assert_eq!(g, vec![20, 18, 15, 11, 6, 0]);\n+\n+    let x = 5;\n+    let mut vec = vec![0; 9];\n+\n+    for i in x..x + 4 {\n+        vec[i] += 1;\n+    }\n+\n+    let x = 5;\n+    let mut vec = vec![0; 10];\n+\n+    for i in x..=x + 4 {\n+        vec[i] += 1;\n+    }\n }"}, {"sha": "d62a0434d0b775cce1ecfbeb4d76515598a66c45", "filename": "tests/ui/needless_range_loop.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fneedless_range_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fneedless_range_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_range_loop.stderr?ref=456843f1cd7d64015202338597cd3db79558dcbf", "patch": "@@ -30,5 +30,25 @@ help: consider using an iterator\n 45 |     for <item> in &mut ms {\n    |         ^^^^^^    ^^^^^^^\n \n-error: aborting due to 3 previous errors\n+error: the loop variable `i` is only used to index `vec`.\n+  --> $DIR/needless_range_loop.rs:69:14\n+   |\n+69 |     for i in x..x + 4 {\n+   |              ^^^^^^^^\n+help: consider using an iterator\n+   |\n+69 |     for <item> in vec.iter_mut().skip(x).take(4) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the loop variable `i` is only used to index `vec`.\n+  --> $DIR/needless_range_loop.rs:76:14\n+   |\n+76 |     for i in x..=x + 4 {\n+   |              ^^^^^^^^^\n+help: consider using an iterator\n+   |\n+76 |     for <item> in vec.iter_mut().skip(x).take(4 + 1) {\n+   |         ^^^^^^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "filename": "tests/ui/ty_fn_sig.stderr", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fty_fn_sig.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/456843f1cd7d64015202338597cd3db79558dcbf/tests%2Fui%2Fty_fn_sig.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fty_fn_sig.stderr?ref=456843f1cd7d64015202338597cd3db79558dcbf"}]}