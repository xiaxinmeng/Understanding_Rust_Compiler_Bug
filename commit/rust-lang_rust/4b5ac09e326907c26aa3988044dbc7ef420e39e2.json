{"sha": "4b5ac09e326907c26aa3988044dbc7ef420e39e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNWFjMDllMzI2OTA3YzI2YWEzOTg4MDQ0ZGJjN2VmNDIwZTM5ZTI=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-28T13:18:18Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2021-07-28T13:32:23Z"}, "message": "add CI_ONLY_WHEN_CHANNEL and run x86_64-gnu-stable only on nightly", "tree": {"sha": "52f0facec7ac70e62cd830c8cdf99dd451bbb142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52f0facec7ac70e62cd830c8cdf99dd451bbb142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b5ac09e326907c26aa3988044dbc7ef420e39e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmEBXGcACgkQzXazX3c0\ndp7cbhAAgxJ1C5eSpIgtX0esEJ3h8pOJA64nfx+gOLbaQwiSxsTvSsSxtAoGa/e5\nJWBRF65TTGyCGhncALfkACxtPNiIUU6fARtI6wdIsXUWokEnAQUAdzjjL+nV1J0t\np8PBI4Xqrtvh4ER2OpcmacY0/KmLEejxoARU2RIlQ3V/x/Ac9ucp2WwShDi8dd2O\nqR1mJSixlpw4Nt9eoQPrfqsbMmxqs1xbrt3LmmBa8eDXIoOLWqL3iPmhZHKhCG+M\nRYo7dnkzEA8iOlbaU2mnoSt6h/VJqCCqErG3puAuoi9UEDz94HdVMzLf9b28fH69\nJwR6CcHWT2E1RySwyCWLzYNAFZKxu4B/wGeS926XhLe6bt2NSTLC7xK9gjam5oAr\nNuvJo/A4LbYCPql7BC5FRfBYaV5HFLo7ZEXHAeNEVfGHscDTMvlD3PN/V6jX57ea\nvfe0te7FwCD+UxKyuwJq9VEGHrpOSa79AlRwcJz3VSgZLiAVc5tBo4KfBWBvGRUx\nyX1hjI/ev2Z49yEzCdstvHiu75Rlw+DU1Yjt3FQkBFLgT+K8venrJJgW7Is9PmjI\nDBDGaQ3A5Liu6qzd7pyfjcNqxqlNhVYlZ6HQS19IibX4GekDS6JYr77HY7wRXtil\n9Y8gtb2TnjJJKklpvuex0ikansuAVl1rWyKU6xBHI43SPrVhcos=\n=wYm+\n-----END PGP SIGNATURE-----", "payload": "tree 52f0facec7ac70e62cd830c8cdf99dd451bbb142\nparent eba3228b2a9875d268ff3990903d04e19f6cdb0c\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1627478298 +0200\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1627479143 +0200\n\nadd CI_ONLY_WHEN_CHANNEL and run x86_64-gnu-stable only on nightly\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b5ac09e326907c26aa3988044dbc7ef420e39e2", "html_url": "https://github.com/rust-lang/rust/commit/4b5ac09e326907c26aa3988044dbc7ef420e39e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b5ac09e326907c26aa3988044dbc7ef420e39e2/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eba3228b2a9875d268ff3990903d04e19f6cdb0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/eba3228b2a9875d268ff3990903d04e19f6cdb0c", "html_url": "https://github.com/rust-lang/rust/commit/eba3228b2a9875d268ff3990903d04e19f6cdb0c"}], "stats": {"total": 67, "additions": 42, "deletions": 25}, "files": [{"sha": "fe67a14c0fe456fc761a0a5de8869239e833c94c", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b5ac09e326907c26aa3988044dbc7ef420e39e2/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4b5ac09e326907c26aa3988044dbc7ef420e39e2/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=4b5ac09e326907c26aa3988044dbc7ef420e39e2", "patch": "@@ -263,6 +263,7 @@ jobs:\n             env:\n               IMAGE: x86_64-gnu\n               RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+              CI_ONLY_WHEN_CHANNEL: nightly\n             os: ubuntu-latest-xl\n           - name: x86_64-gnu-aux\n             os: ubuntu-latest-xl"}, {"sha": "128897e580b68603dfe63be00b8d69ba8ce6b7bc", "filename": "src/ci/github-actions/ci.yml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b5ac09e326907c26aa3988044dbc7ef420e39e2/src%2Fci%2Fgithub-actions%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4b5ac09e326907c26aa3988044dbc7ef420e39e2/src%2Fci%2Fgithub-actions%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fgithub-actions%2Fci.yml?ref=4b5ac09e326907c26aa3988044dbc7ef420e39e2", "patch": "@@ -416,6 +416,10 @@ jobs:\n             env:\n               IMAGE: x86_64-gnu\n               RUST_CI_OVERRIDE_RELEASE_CHANNEL: stable\n+              # Only run this job on the nightly channel. Running this on beta\n+              # could cause failures when `dev: 1` in `stage0.txt`, and running\n+              # this on stable is useless.\n+              CI_ONLY_WHEN_CHANNEL: nightly\n             <<: *job-linux-xl\n \n           - name: x86_64-gnu-aux"}, {"sha": "bb48fcb5a216eaaef3da799ed4865186a2b3f6d1", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 37, "deletions": 25, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4b5ac09e326907c26aa3988044dbc7ef420e39e2/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4b5ac09e326907c26aa3988044dbc7ef420e39e2/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=4b5ac09e326907c26aa3988044dbc7ef420e39e2", "patch": "@@ -8,31 +8,43 @@ IFS=$'\\n\\t'\n \n source \"$(cd \"$(dirname \"$0\")\" && pwd)/../shared.sh\"\n \n-if [[ -z \"${CI_ONLY_WHEN_SUBMODULES_CHANGED+x}\" ]]; then\n-    echo \"Executing the job since there is no skip rule in effect\"\n-    exit 0\n+if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n+    git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n+    BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n+\n+    echo \"Searching for toolstate changes between $BASE_COMMIT and $(git rev-parse HEAD)\"\n+\n+    if git diff \"$BASE_COMMIT\" | grep --quiet \"^index .* 160000\"; then\n+        # Submodules pseudo-files inside git have the 160000 permissions, so when\n+        # those files are present in the diff a submodule was updated.\n+        echo \"Submodules were updated\"\n+    elif ! git diff --quiet \"$BASE_COMMIT\" -- src/tools/clippy src/tools/rustfmt; then\n+        # There is not an easy blanket search for subtrees. For now, manually list\n+        # the subtrees.\n+        echo \"Clippy or rustfmt subtrees were updated\"\n+    elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n+             src/test/rustdoc-gui \\\n+             src/librustdoc \\\n+             src/tools/rustdoc-gui); then\n+        # There was a change in either rustdoc or in its GUI tests.\n+        echo \"Rustdoc was updated\"\n+    else\n+        echo \"Not executing this job since no submodules nor subtrees were updated\"\n+        ciCommandSetEnv SKIP_JOB 1\n+        exit 0\n+    fi\n fi\n \n-git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n-BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n-\n-echo \"Searching for toolstate changes between $BASE_COMMIT and $(git rev-parse HEAD)\"\n-\n-if git diff \"$BASE_COMMIT\" | grep --quiet \"^index .* 160000\"; then\n-    # Submodules pseudo-files inside git have the 160000 permissions, so when\n-    # those files are present in the diff a submodule was updated.\n-    echo \"Executing the job since submodules are updated\"\n-elif ! git diff --quiet \"$BASE_COMMIT\" -- src/tools/clippy src/tools/rustfmt; then\n-    # There is not an easy blanket search for subtrees. For now, manually list\n-    # the subtrees.\n-    echo \"Executing the job since clippy or rustfmt subtree was updated\"\n-elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n-         src/test/rustdoc-gui \\\n-         src/librustdoc \\\n-         src/tools/rustdoc-gui); then\n-    # There was a change in either rustdoc or in its GUI tests.\n-    echo \"Executing the job since rustdoc was updated\"\n-else\n-    echo \"Not executing this job since no submodules nor subtrees were updated\"\n-    ciCommandSetEnv SKIP_JOB 1\n+if [[ -n \"${CI_ONLY_WHEN_CHANNEL-}\" ]]; then\n+    if [[ \"${CI_ONLY_WHEN_CHANNEL}\" = \"$(cat src/ci/channel)\" ]]; then\n+        echo \"The channel is the expected one\"\n+    else\n+        echo \"Not executing this job as the channel is not the expected one\"\n+        ciCommandSetEnv SKIP_JOB 1\n+        exit 0\n+    fi\n fi\n+\n+\n+echo \"Executing the job since there is no skip rule preventing the execution\"\n+exit 0"}]}