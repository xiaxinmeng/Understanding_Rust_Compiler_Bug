{"sha": "b2d404d19af4949c5159ec6353984413776b925b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyZDQwNGQxOWFmNDk0OWM1MTU5ZWM2MzUzOTg0NDEzNzc2YjkyNWI=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-29T00:59:49Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-01-29T00:59:49Z"}, "message": "Move posix_fadvise test to new libc test file", "tree": {"sha": "78d561abd55f3f54c2fd819859151e4c17e9967e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78d561abd55f3f54c2fd819859151e4c17e9967e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2d404d19af4949c5159ec6353984413776b925b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d404d19af4949c5159ec6353984413776b925b", "html_url": "https://github.com/rust-lang/rust/commit/b2d404d19af4949c5159ec6353984413776b925b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2d404d19af4949c5159ec6353984413776b925b/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e42e774834683570b1c0ca59ce5bb1a11119fb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e42e774834683570b1c0ca59ce5bb1a11119fb5", "html_url": "https://github.com/rust-lang/rust/commit/4e42e774834683570b1c0ca59ce5bb1a11119fb5"}], "stats": {"total": 50, "additions": 35, "deletions": 15}, "files": [{"sha": "81c56e4aafc7ee594e13a1800a40151f66e7d48d", "filename": "tests/run-pass/fs.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b2d404d19af4949c5159ec6353984413776b925b/tests%2Frun-pass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d404d19af4949c5159ec6353984413776b925b/tests%2Frun-pass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffs.rs?ref=b2d404d19af4949c5159ec6353984413776b925b", "patch": "@@ -1,13 +1,8 @@\n // ignore-windows: File handling is not implemented yet\n // compile-flags: -Zmiri-disable-isolation\n \n-#![feature(rustc_private)]\n-\n-extern crate libc;\n-\n use std::fs::{File, remove_file};\n use std::io::{Read, Write, ErrorKind, Result};\n-use std::os::unix::io::AsRawFd;\n use std::path::{PathBuf, Path};\n \n fn test_metadata(bytes: &[u8], path: &Path) -> Result<()> {\n@@ -45,16 +40,6 @@ fn main() {\n     file.read_to_end(&mut contents).unwrap();\n     assert_eq!(bytes, contents.as_slice());\n \n-    // Test calling posix_fadvise on the file.\n-    unsafe {\n-        libc::posix_fadvise(\n-            file.as_raw_fd(),\n-            0,\n-            bytes.len() as i64,\n-            libc::POSIX_FADV_DONTNEED,\n-        );\n-    }\n-\n     // Test that metadata of an absolute path is correct.\n     test_metadata(bytes, &path).unwrap();\n     // Test that metadata of a relative path is correct."}, {"sha": "8ba97e2e435635022c18a9f2eeb04626fa7a7f1a", "filename": "tests/run-pass/libc.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b2d404d19af4949c5159ec6353984413776b925b/tests%2Frun-pass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2d404d19af4949c5159ec6353984413776b925b/tests%2Frun-pass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Flibc.rs?ref=b2d404d19af4949c5159ec6353984413776b925b", "patch": "@@ -0,0 +1,35 @@\n+// ignore-windows: No libc on Windows\n+// compile-flags: -Zmiri-disable-isolation\n+\n+#![feature(rustc_private)]\n+\n+extern crate libc;\n+\n+use std::env::temp_dir;\n+use std::fs::{File, remove_file};\n+use std::io::Write;\n+use std::os::unix::io::AsRawFd;\n+\n+fn main() {\n+    let path = temp_dir().join(\"miri_test_libc.txt\");\n+    // Cleanup before test\n+    remove_file(&path).ok();\n+\n+    // Set up an open file\n+    let mut file = File::create(&path).unwrap();\n+    let bytes = b\"Hello, World!\\n\";\n+    file.write(bytes).unwrap();\n+\n+    // Test calling posix_fadvise on a file.\n+    let result = unsafe {\n+        libc::posix_fadvise(\n+            file.as_raw_fd(),\n+            0,\n+            bytes.len() as i64,\n+            libc::POSIX_FADV_DONTNEED,\n+        )\n+    };\n+    drop(file);\n+    remove_file(&path).unwrap();\n+    assert_eq!(result, 0);\n+}"}]}