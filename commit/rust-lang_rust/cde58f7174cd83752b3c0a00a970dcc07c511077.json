{"sha": "cde58f7174cd83752b3c0a00a970dcc07c511077", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZTU4ZjcxNzRjZDgzNzUyYjNjMGEwMGE5NzBkY2MwN2M1MTEwNzc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2021-04-07T11:07:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-07T11:07:14Z"}, "message": "Rollup merge of #83916 - Amanieu:asm_anonconst, r=petrochenkov\n\nUse AnonConst for asm! constants\n\nThis replaces the old system which used explicit promotion. See #83169 for more background.\n\nThe syntax for `const` operands is still the same as before: `const <expr>`.\n\nFixes #83169\n\nBecause the implementation is heavily based on inline consts, we suffer from the same issues:\n- We lose the ability to use expressions derived from generics. See the deleted tests in `src/test/ui/asm/const.rs`.\n- We are hitting the same ICEs as inline consts, for example #78174. It is unlikely that we will be able to stabilize this before inline consts are stabilized.", "tree": {"sha": "de23aed285e936e69e3af8ce1de8756a35921b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de23aed285e936e69e3af8ce1de8756a35921b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cde58f7174cd83752b3c0a00a970dcc07c511077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cde58f7174cd83752b3c0a00a970dcc07c511077", "html_url": "https://github.com/rust-lang/rust/commit/cde58f7174cd83752b3c0a00a970dcc07c511077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cde58f7174cd83752b3c0a00a970dcc07c511077/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e3ccb6dc08ca26efd980fc79d011ff1fcb2f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e3ccb6dc08ca26efd980fc79d011ff1fcb2f94", "html_url": "https://github.com/rust-lang/rust/commit/44e3ccb6dc08ca26efd980fc79d011ff1fcb2f94"}, {"sha": "879bfeca54a61c22b836905da1468ac2e37085b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/879bfeca54a61c22b836905da1468ac2e37085b5", "html_url": "https://github.com/rust-lang/rust/commit/879bfeca54a61c22b836905da1468ac2e37085b5"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "01a7627fc7f34d12dc8f687401ac63f5c07fc664", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=cde58f7174cd83752b3c0a00a970dcc07c511077", "patch": "@@ -142,12 +142,12 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n-                | InlineAsmOperand::Const { expr }\n                 | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n                 InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n                 },\n+                InlineAsmOperand::Const { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)"}, {"sha": "b3fe66ed4285eff8ba0a54f4e48275c70e0ee1ca", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=cde58f7174cd83752b3c0a00a970dcc07c511077", "patch": "@@ -306,7 +306,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }\n-                    | hir::InlineAsmOperand::Const { expr }\n                     | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -319,6 +318,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                             print_expr(cx, out_expr, indent + 1);\n                         }\n                     },\n+                    hir::InlineAsmOperand::Const { anon_const } => {\n+                        println!(\"{}anon_const:\", ind);\n+                        print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+                    }\n                 }\n             }\n         },"}, {"sha": "b30c0b7988194d20bc6835cc06c70325043d953f", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cde58f7174cd83752b3c0a00a970dcc07c511077/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=cde58f7174cd83752b3c0a00a970dcc07c511077", "patch": "@@ -663,7 +663,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                                 self.hash_expr(out_expr);\n                             }\n                         },\n-                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                        InlineAsmOperand::Const { anon_const } => self.hash_body(anon_const.body),\n+                        InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n                     }\n                 }\n             },"}]}