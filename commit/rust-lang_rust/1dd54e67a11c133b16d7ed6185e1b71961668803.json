{"sha": "1dd54e67a11c133b16d7ed6185e1b71961668803", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZDU0ZTY3YTExYzEzM2IxNmQ3ZWQ2MTg1ZTFiNzE5NjE2Njg4MDM=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-11-18T12:31:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-18T12:31:40Z"}, "message": "Prefer to break arguments over putting output type on the next line  (#3190)", "tree": {"sha": "3562d351c4b06c83113d31b9db495bb09fbce1d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3562d351c4b06c83113d31b9db495bb09fbce1d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dd54e67a11c133b16d7ed6185e1b71961668803", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb8VusCRBK7hj4Ov3rIwAAdHIIAGfC+qyyovmDaUsMLYazXfdF\n0i3cMnq8b3NmQ3xvjBkvFsSLB8hAUSztXBLhHQ0J24O8lhR46AZyU+FT+JWPe4u+\nxnSe88JWfHguJjN3jdu2+eVMdYvg57rLJc2raQAamBQSvJ8hZ1aKycMeJ9q7XYJZ\nRx++B1uGUCB+TX1KdCHqTlIka7rRGr5884JOW3cNVRevqgZ/fXs4wGK7o0WHBXbf\nkWVQ2LsG8nsFIQvBdhzkLSMZTFlVPz1YGTRgMARsxdLt/oG+qepZIMLFGKotZYwP\nVeQVs/JMv2hj+2Hy7PZXPdHvF+s2s00Gr5skXmWzmpD/OyNSjqHD6n4vEKSAioM=\n=bIA3\n-----END PGP SIGNATURE-----\n", "payload": "tree 3562d351c4b06c83113d31b9db495bb09fbce1d4\nparent ef4176a2ca0114389d732b2d8e01a7d7a369b525\nauthor Seiichi Uchida <seuchida@gmail.com> 1542544300 +0900\ncommitter GitHub <noreply@github.com> 1542544300 +0900\n\nPrefer to break arguments over putting output type on the next line  (#3190)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd54e67a11c133b16d7ed6185e1b71961668803", "html_url": "https://github.com/rust-lang/rust/commit/1dd54e67a11c133b16d7ed6185e1b71961668803", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dd54e67a11c133b16d7ed6185e1b71961668803/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef4176a2ca0114389d732b2d8e01a7d7a369b525", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef4176a2ca0114389d732b2d8e01a7d7a369b525", "html_url": "https://github.com/rust-lang/rust/commit/ef4176a2ca0114389d732b2d8e01a7d7a369b525"}], "stats": {"total": 123, "additions": 74, "deletions": 49}, "files": [{"sha": "7b23cd5191591cd20d3e8b3b8b9b97dfb9eb040e", "filename": "src/types.rs", "status": "modified", "additions": 39, "deletions": 36, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/1dd54e67a11c133b16d7ed6185e1b71961668803/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd54e67a11c133b16d7ed6185e1b71961668803/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=1dd54e67a11c133b16d7ed6185e1b71961668803", "patch": "@@ -289,6 +289,19 @@ where\n {\n     debug!(\"format_function_type {:#?}\", shape);\n \n+    let ty_shape = match context.config.indent_style() {\n+        // 4 = \" -> \"\n+        IndentStyle::Block => shape.offset_left(4)?,\n+        IndentStyle::Visual => shape.block_left(4)?,\n+    };\n+    let output = match *output {\n+        FunctionRetTy::Ty(ref ty) => {\n+            let type_str = ty.rewrite(context, ty_shape)?;\n+            format!(\" -> {}\", type_str)\n+        }\n+        FunctionRetTy::Default(..) => String::new(),\n+    };\n+\n     // Code for handling variadics is somewhat duplicated for items, but they\n     // are different enough to need some serious refactoring to share code.\n     enum ArgumentKind<T>\n@@ -307,19 +320,18 @@ where\n         None\n     };\n \n-    // 2 for ()\n-    let budget = shape.width.checked_sub(2)?;\n-    // 1 for (\n-    let offset = match context.config.indent_style() {\n-        IndentStyle::Block => {\n-            shape\n-                .block()\n-                .block_indent(context.config.tab_spaces())\n-                .indent\n-        }\n-        IndentStyle::Visual => shape.indent + 1,\n+    let list_shape = if context.use_block_indent() {\n+        Shape::indented(\n+            shape.block().indent.block_indent(context.config),\n+            context.config,\n+        )\n+    } else {\n+        // 2 for ()\n+        let budget = shape.width.checked_sub(2)?;\n+        // 1 for (\n+        let offset = shape.indent + 1;\n+        Shape::legacy(budget, offset)\n     };\n-    let list_shape = Shape::legacy(budget, offset);\n     let list_lo = context.snippet_provider.span_after(span, \"(\");\n     let items = itemize_list(\n         context.snippet_provider,\n@@ -345,12 +357,18 @@ where\n \n     let item_vec: Vec<_> = items.collect();\n \n-    let tactic = definitive_tactic(\n-        &*item_vec,\n-        ListTactic::HorizontalVertical,\n-        Separator::Comma,\n-        budget,\n-    );\n+    // If the return type is multi-lined, then force to use multiple lines for\n+    // arguments as well.\n+    let tactic = if output.contains('\\n') {\n+        DefinitiveListTactic::Vertical\n+    } else {\n+        definitive_tactic(\n+            &*item_vec,\n+            ListTactic::HorizontalVertical,\n+            Separator::Comma,\n+            shape.width.saturating_sub(2 + output.len()),\n+        )\n+    };\n     let trailing_separator = if !context.use_block_indent() || variadic {\n         SeparatorTactic::Never\n     } else {\n@@ -364,27 +382,12 @@ where\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n \n-    let ty_shape = match context.config.indent_style() {\n-        // 4 = \" -> \"\n-        IndentStyle::Block => shape.offset_left(4)?,\n-        IndentStyle::Visual => shape.block_left(4)?,\n-    };\n-    let output = match *output {\n-        FunctionRetTy::Ty(ref ty) => {\n-            let type_str = ty.rewrite(context, ty_shape)?;\n-            format!(\" -> {}\", type_str)\n-        }\n-        FunctionRetTy::Default(..) => String::new(),\n-    };\n-\n-    let args = if (!list_str.contains('\\n') || list_str.is_empty()) && !output.contains('\\n')\n-        || !context.use_block_indent()\n-    {\n+    let args = if tactic == DefinitiveListTactic::Horizontal || !context.use_block_indent() {\n         format!(\"({})\", list_str)\n     } else {\n         format!(\n             \"({}{}{})\",\n-            offset.to_string_with_newline(context.config),\n+            list_shape.indent.to_string_with_newline(context.config),\n             list_str,\n             shape.block().indent.to_string_with_newline(context.config),\n         )\n@@ -395,7 +398,7 @@ where\n         Some(format!(\n             \"{}\\n{}{}\",\n             args,\n-            offset.to_string(context.config),\n+            list_shape.indent.to_string(context.config),\n             output.trim_left()\n         ))\n     }"}, {"sha": "55eb05442d65b12ba9c286f1fca7452bc19e3541", "filename": "tests/source/type.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Fsource%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Fsource%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype.rs?ref=1dd54e67a11c133b16d7ed6185e1b71961668803", "patch": "@@ -129,3 +129,9 @@ fn issue3139() {\n         json!(  { \"test\": None  ::  <i32> }  )\n     );\n }\n+\n+// #3180\n+fn foo(a: SomeLongComplexType, b: SomeOtherLongComplexType) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>> {\n+}\n+\n+type MyFn = fn(a: SomeLongComplexType, b: SomeOtherLongComplexType,) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;"}, {"sha": "692739fa6a9f836a30eeb6cf96b56c2aaf08049b", "filename": "tests/target/fn-simple.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Ffn-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Ffn-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffn-simple.rs?ref=1dd54e67a11c133b16d7ed6185e1b71961668803", "patch": "@@ -9,8 +9,9 @@ fn simple(\n         x: Typ,\n         key: &[u8],\n         upd: Box<\n-            Fn(Option<&memcache::Item>)\n-                -> (memcache::Status, Result<memcache::Item, Option<String>>),\n+            Fn(\n+                Option<&memcache::Item>,\n+            ) -> (memcache::Status, Result<memcache::Item, Option<String>>),\n         >,\n     ) -> MapResult {\n     }"}, {"sha": "dbf92107ce23cc18934e248b91f963008b705809", "filename": "tests/target/issue-2164.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Fissue-2164.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Fissue-2164.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2164.rs?ref=1dd54e67a11c133b16d7ed6185e1b71961668803", "patch": "@@ -56,8 +56,10 @@ pub struct emacs_env_25 {\n         ) -> emacs_value,\n     >,\n     pub intern: ::std::option::Option<\n-        unsafe extern \"C\" fn(env: *mut emacs_env, symbol_name: *const ::libc::c_char)\n-            -> emacs_value,\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            symbol_name: *const ::libc::c_char,\n+        ) -> emacs_value,\n     >,\n     pub type_of: ::std::option::Option<\n         unsafe extern \"C\" fn(env: *mut emacs_env, value: emacs_value) -> emacs_value,\n@@ -87,15 +89,16 @@ pub struct emacs_env_25 {\n         ) -> bool,\n     >,\n     pub make_string: ::std::option::Option<\n-        unsafe extern \"C\" fn(env: *mut emacs_env, contents: *const ::libc::c_char, length: isize)\n-            -> emacs_value,\n+        unsafe extern \"C\" fn(\n+            env: *mut emacs_env,\n+            contents: *const ::libc::c_char,\n+            length: isize,\n+        ) -> emacs_value,\n     >,\n     pub make_user_ptr: ::std::option::Option<\n         unsafe extern \"C\" fn(\n             env: *mut emacs_env,\n-            fin: ::std::option::Option<\n-                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n-            >,\n+            fin: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut ::libc::c_void)>,\n             ptr: *mut ::libc::c_void,\n         ) -> emacs_value,\n     >,\n@@ -107,7 +110,9 @@ pub struct emacs_env_25 {\n     >,\n     pub get_user_finalizer: ::std::option::Option<\n         unsafe extern \"C\" fn(\n-            arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value\n+            arg1: *mut ::libc::c_void,\n+            env: *mut emacs_env,\n+            uptr: emacs_value,\n         ) -> ::std::option::Option<\n             unsafe extern \"C\" fn(arg1: *mut ::libc::c_void, env: *mut emacs_env, uptr: emacs_value),\n         >,\n@@ -116,9 +121,7 @@ pub struct emacs_env_25 {\n         unsafe extern \"C\" fn(\n             env: *mut emacs_env,\n             uptr: emacs_value,\n-            fin: ::std::option::Option<\n-                unsafe extern \"C\" fn(arg1: *mut ::libc::c_void),\n-            >,\n+            fin: ::std::option::Option<unsafe extern \"C\" fn(arg1: *mut ::libc::c_void)>,\n         ),\n     >,\n     pub vec_get: ::std::option::Option<"}, {"sha": "2afcc652c44a3e0f77c3133133a001d0fa326398", "filename": "tests/target/type.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dd54e67a11c133b16d7ed6185e1b71961668803/tests%2Ftarget%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype.rs?ref=1dd54e67a11c133b16d7ed6185e1b71961668803", "patch": "@@ -128,3 +128,15 @@ fn issue3139() {\n         json!({ \"test\": None::<i32> })\n     );\n }\n+\n+// #3180\n+fn foo(\n+    a: SomeLongComplexType,\n+    b: SomeOtherLongComplexType,\n+) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>> {\n+}\n+\n+type MyFn = fn(\n+    a: SomeLongComplexType,\n+    b: SomeOtherLongComplexType,\n+) -> Box<Future<Item = AnotherLongType, Error = ALongErrorType>>;"}]}