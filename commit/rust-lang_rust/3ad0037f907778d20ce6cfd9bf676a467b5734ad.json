{"sha": "3ad0037f907778d20ce6cfd9bf676a467b5734ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhZDAwMzdmOTA3Nzc4ZDIwY2U2Y2ZkOWJmNjc2YTQ2N2I1NzM0YWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T14:22:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-05T14:24:17Z"}, "message": "move hover implementation to ra_analysis", "tree": {"sha": "dd5b7a2f8e134c0452f88f8543cc16528cc1dc9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd5b7a2f8e134c0452f88f8543cc16528cc1dc9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ad0037f907778d20ce6cfd9bf676a467b5734ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ad0037f907778d20ce6cfd9bf676a467b5734ad", "html_url": "https://github.com/rust-lang/rust/commit/3ad0037f907778d20ce6cfd9bf676a467b5734ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ad0037f907778d20ce6cfd9bf676a467b5734ad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2560a9e8076d0b83f606af3029ea1a0c7bc48514", "url": "https://api.github.com/repos/rust-lang/rust/commits/2560a9e8076d0b83f606af3029ea1a0c7bc48514", "html_url": "https://github.com/rust-lang/rust/commit/2560a9e8076d0b83f606af3029ea1a0c7bc48514"}], "stats": {"total": 150, "additions": 83, "deletions": 67}, "files": [{"sha": "c3825f6ea8ffb4af4a7f8af8ffd3ca1369e5f1b2", "filename": "crates/ra_analysis/src/hover.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fhover.rs?ref=3ad0037f907778d20ce6cfd9bf676a467b5734ad", "patch": "@@ -0,0 +1,57 @@\n+use ra_db::{Cancelable, SyntaxDatabase};\n+use ra_syntax::{ast, AstNode};\n+\n+use crate::{db::RootDatabase, RangeInfo, FilePosition, FileRange};\n+\n+pub(crate) fn hover(\n+    db: &RootDatabase,\n+    position: FilePosition,\n+) -> Cancelable<Option<RangeInfo<String>>> {\n+    let mut res = Vec::new();\n+    let range = if let Some(rr) = db.approximately_resolve_symbol(position)? {\n+        for nav in rr.resolves_to {\n+            res.extend(db.doc_text_for(nav)?)\n+        }\n+        rr.reference_range\n+    } else {\n+        let file = db.source_file(position.file_id);\n+        let expr: ast::Expr = ctry!(ra_editor::find_node_at_offset(\n+            file.syntax(),\n+            position.offset\n+        ));\n+        let frange = FileRange {\n+            file_id: position.file_id,\n+            range: expr.syntax().range(),\n+        };\n+        res.extend(db.type_of(frange)?);\n+        expr.syntax().range()\n+    };\n+    if res.is_empty() {\n+        return Ok(None);\n+    }\n+    let res = RangeInfo::new(range, res.join(\"\\n\\n---\\n\"));\n+    Ok(Some(res))\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use ra_syntax::TextRange;\n+\n+    use crate::mock_analysis::single_file_with_position;\n+\n+    #[test]\n+    fn hover_shows_type_of_an_expression() {\n+        let (analysis, position) = single_file_with_position(\n+            \"\n+            pub fn foo() -> u32 { 1 }\n+\n+            fn main() {\n+                let foo_test = foo()<|>;\n+            }\n+        \",\n+        );\n+        let hover = analysis.hover(position).unwrap().unwrap();\n+        assert_eq!(hover.range, TextRange::from_to(95.into(), 100.into()));\n+        assert_eq!(hover.info, \"u32\");\n+    }\n+}"}, {"sha": "eae73c2c4907e59e2cc8b243b5ee6cea94449594", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=3ad0037f907778d20ce6cfd9bf676a467b5734ad", "patch": "@@ -269,32 +269,6 @@ impl db::RootDatabase {\n         Ok(result)\n     }\n \n-    pub(crate) fn hover(&self, position: FilePosition) -> Cancelable<Option<(TextRange, String)>> {\n-        let mut res = Vec::new();\n-        let range = if let Some(rr) = self.approximately_resolve_symbol(position)? {\n-            for nav in rr.resolves_to {\n-                res.extend(self.doc_text_for(nav)?)\n-            }\n-            rr.reference_range\n-        } else {\n-            let file = self.source_file(position.file_id);\n-            let expr: ast::Expr = ctry!(ra_editor::find_node_at_offset(\n-                file.syntax(),\n-                position.offset\n-            ));\n-            let frange = FileRange {\n-                file_id: position.file_id,\n-                range: expr.syntax().range(),\n-            };\n-            res.extend(self.type_of(frange)?);\n-            expr.syntax().range()\n-        };\n-        if res.is_empty() {\n-            return Ok(None);\n-        }\n-        Ok(Some((range, res.join(\"\\n\\n---\\n\"))))\n-    }\n-\n     pub(crate) fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         let syntax = self.source_file(file_id);\n "}, {"sha": "1904ff884b59e10bc8449f5603d03178d3002027", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=3ad0037f907778d20ce6cfd9bf676a467b5734ad", "patch": "@@ -21,6 +21,7 @@ mod runnables;\n \n mod extend_selection;\n mod syntax_highlighting;\n+mod hover;\n \n use std::{fmt, sync::Arc};\n \n@@ -260,6 +261,18 @@ impl NavigationTarget {\n     }\n }\n \n+#[derive(Debug)]\n+pub struct RangeInfo<T> {\n+    pub range: TextRange,\n+    pub info: T,\n+}\n+\n+impl<T> RangeInfo<T> {\n+    fn new(range: TextRange, info: T) -> RangeInfo<T> {\n+        RangeInfo { range, info }\n+    }\n+}\n+\n /// Result of \"goto def\" query.\n #[derive(Debug)]\n pub struct ReferenceResolution {\n@@ -394,6 +407,10 @@ impl Analysis {\n     pub fn doc_text_for(&self, nav: NavigationTarget) -> Cancelable<Option<String>> {\n         self.db.doc_text_for(nav)\n     }\n+    /// Returns a short text descrbing element at position.\n+    pub fn hover(&self, position: FilePosition) -> Cancelable<Option<RangeInfo<String>>> {\n+        hover::hover(&*self.db, position)\n+    }\n     /// Returns a `mod name;` declaration which created the current module.\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<NavigationTarget>> {\n         self.db.parent_module(position)"}, {"sha": "ffca3f51cbe11faccbfc66e8040f375f110b07dd", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ad0037f907778d20ce6cfd9bf676a467b5734ad/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3ad0037f907778d20ce6cfd9bf676a467b5734ad", "patch": "@@ -9,7 +9,7 @@ use languageserver_types::{\n     Range, WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover,\n     HoverContents, DocumentFormattingParams, DocumentHighlight,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity, NavigationTarget};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -509,36 +509,18 @@ pub fn handle_hover(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Hover>> {\n-    // TODO: Cut down on number of allocations\n     let position = params.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(position.file_id);\n-    let rr = match world.analysis().approximately_resolve_symbol(position)? {\n+    let info = match world.analysis().hover(position)? {\n         None => return Ok(None),\n-        Some(it) => it,\n+        Some(info) => info,\n     };\n-    let mut result = Vec::new();\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let file_range = FileRange {\n-        file_id,\n-        range: rr.reference_range,\n+    let line_index = world.analysis.file_line_index(position.file_id);\n+    let range = info.range.conv_with(&line_index);\n+    let res = Hover {\n+        contents: HoverContents::Scalar(MarkedString::String(info.info)),\n+        range: Some(range),\n     };\n-    if let Some(type_name) = get_type(&world, file_range) {\n-        result.push(type_name);\n-    }\n-    for nav in rr.resolves_to {\n-        if let Some(docs) = get_doc_text(&world, nav) {\n-            result.push(docs);\n-        }\n-    }\n-\n-    let range = rr.reference_range.conv_with(&line_index);\n-    if result.len() > 0 {\n-        return Ok(Some(Hover {\n-            contents: HoverContents::Scalar(MarkedString::String(result.join(\"\\n\\n---\\n\"))),\n-            range: Some(range),\n-        }));\n-    }\n-    Ok(None)\n+    Ok(Some(res))\n }\n \n /// Test doc comment\n@@ -762,17 +744,3 @@ fn to_diagnostic_severity(severity: Severity) -> DiagnosticSeverity {\n         WeakWarning => DiagnosticSeverity::Hint,\n     }\n }\n-\n-fn get_type(world: &ServerWorld, file_range: FileRange) -> Option<String> {\n-    match world.analysis().type_of(file_range) {\n-        Ok(result) => result,\n-        _ => None,\n-    }\n-}\n-\n-fn get_doc_text(world: &ServerWorld, nav: NavigationTarget) -> Option<String> {\n-    match world.analysis().doc_text_for(nav) {\n-        Ok(result) => result,\n-        _ => None,\n-    }\n-}"}]}