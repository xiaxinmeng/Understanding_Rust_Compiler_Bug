{"sha": "273fbf47ab1615f2cae416ba397f5b5a531eac65", "node_id": "C_kwDOAAsO6NoAKDI3M2ZiZjQ3YWIxNjE1ZjJjYWU0MTZiYTM5N2Y1YjVhNTMxZWFjNjU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-09T18:49:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-09T18:49:33Z"}, "message": "Rollup merge of #111282 - scottmcm:remove-unneeded-assumes, r=workingjubilee\n\nRemove some `assume`s from slice iterators that don't do anything\n\nBecause the start pointer is iterators is already a `NonNull`, we emit the appropriate `!nonnull` metadata when loading the pointer to tell LLVM that it's non-null.\n\nProbably the best way to see that it's the metadata that's important (and not the `assume`) is to observe that LLVM actually *removes* the `assume` from the optimized IR: <https://rust.godbolt.org/z/KhE6G963n>.\n\n(I also checked that, yes, the if-not-ZST `assume` on `end` is still doing something: it's how there's a `!nonnull` metadata on its load, even though it's an ordinary raw pointer.  The codegen test added in this PR fails if the other `assume` is  removed.)", "tree": {"sha": "44252c48cec0cb053be8a426c95685d93a223104", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44252c48cec0cb053be8a426c95685d93a223104"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/273fbf47ab1615f2cae416ba397f5b5a531eac65", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkWpW9CRBK7hj4Ov3rIwAAXNEIADJFjbM0QsgHEKLtctVA9rkt\noqnOFXNL4T2dqzm0IxlA4H/2PoFNyoED6Z6rVHma4TGlNM4+p3HR3M4PXJN47WCh\nVaoUx4bnfvYjRbFuCTEWZxOL0mnS440pWY4yPv/oLSSjE4bWZa66ao/UB3PYCRBb\nv1W1WgdVhxxC0vjgQzrq/PgvYIA6wJOnEfdvkzEUJ4xkCxjr5ZZJkZc9okyxrYp7\n1BrjPDMdkL5f+bYPRD4hyskYxPVK27d/wBEPfouapajmEeL1Kf7Gk8OPxNT5XiAF\noHfBjftB69dn+KZr91+kS9k6kzmnfa+64aIyhocDCEkitsvkwWB0A99fShKAEls=\n=R18u\n-----END PGP SIGNATURE-----\n", "payload": "tree 44252c48cec0cb053be8a426c95685d93a223104\nparent efe697e1331d1a5175750b0f6b464d573a9bd57a\nparent ec3a9bcdb7007491ee105fad034e1a83f1188ff6\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683658173 +0200\ncommitter GitHub <noreply@github.com> 1683658173 +0200\n\nRollup merge of #111282 - scottmcm:remove-unneeded-assumes, r=workingjubilee\n\nRemove some `assume`s from slice iterators that don't do anything\n\nBecause the start pointer is iterators is already a `NonNull`, we emit the appropriate `!nonnull` metadata when loading the pointer to tell LLVM that it's non-null.\n\nProbably the best way to see that it's the metadata that's important (and not the `assume`) is to observe that LLVM actually *removes* the `assume` from the optimized IR: <https://rust.godbolt.org/z/KhE6G963n>.\n\n(I also checked that, yes, the if-not-ZST `assume` on `end` is still doing something: it's how there's a `!nonnull` metadata on its load, even though it's an ordinary raw pointer.  The codegen test added in this PR fails if the other `assume` is  removed.)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/273fbf47ab1615f2cae416ba397f5b5a531eac65", "html_url": "https://github.com/rust-lang/rust/commit/273fbf47ab1615f2cae416ba397f5b5a531eac65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/273fbf47ab1615f2cae416ba397f5b5a531eac65/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efe697e1331d1a5175750b0f6b464d573a9bd57a", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe697e1331d1a5175750b0f6b464d573a9bd57a", "html_url": "https://github.com/rust-lang/rust/commit/efe697e1331d1a5175750b0f6b464d573a9bd57a"}, {"sha": "ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3a9bcdb7007491ee105fad034e1a83f1188ff6", "html_url": "https://github.com/rust-lang/rust/commit/ec3a9bcdb7007491ee105fad034e1a83f1188ff6"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "d2d0dd3387fbc890569da3f3289048e1934f7093", "filename": "library/core/src/slice/iter/macros.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/273fbf47ab1615f2cae416ba397f5b5a531eac65/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273fbf47ab1615f2cae416ba397f5b5a531eac65/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter%2Fmacros.rs?ref=273fbf47ab1615f2cae416ba397f5b5a531eac65", "patch": "@@ -124,12 +124,10 @@ macro_rules! iterator {\n             fn next(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer\n-                // must be non-null, and slices over non-ZSTs must also have a\n-                // non-null end pointer. The call to `next_unchecked!` is safe\n-                // since we check if the iterator is empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_unchecked!` is\n+                // safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }\n@@ -339,12 +337,10 @@ macro_rules! iterator {\n             fn next_back(&mut self) -> Option<$elem> {\n                 // could be implemented with slices, but this avoids bounds checks\n \n-                // SAFETY: `assume` calls are safe since a slice's start pointer must be non-null,\n-                // and slices over non-ZSTs must also have a non-null end pointer.\n-                // The call to `next_back_unchecked!` is safe since we check if the iterator is\n-                // empty first.\n+                // SAFETY: `assume` call is safe because slices over non-ZSTs must\n+                // have a non-null end pointer. The call to `next_back_unchecked!`\n+                // is safe since we check if the iterator is empty first.\n                 unsafe {\n-                    assume(!self.ptr.as_ptr().is_null());\n                     if !<T>::IS_ZST {\n                         assume(!self.end.is_null());\n                     }"}, {"sha": "392e433807640102b60e20dd3c5ce9c2a9e6a66a", "filename": "tests/codegen/slice-iter-nonnull.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/273fbf47ab1615f2cae416ba397f5b5a531eac65/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "raw_url": "https://github.com/rust-lang/rust/raw/273fbf47ab1615f2cae416ba397f5b5a531eac65/tests%2Fcodegen%2Fslice-iter-nonnull.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fslice-iter-nonnull.rs?ref=273fbf47ab1615f2cae416ba397f5b5a531eac65", "patch": "@@ -0,0 +1,42 @@\n+// no-system-llvm\n+// compile-flags: -O\n+// ignore-debug (these add extra checks that make it hard to verify)\n+#![crate_type = \"lib\"]\n+\n+// The slice iterator used to `assume` that the `start` pointer was non-null.\n+// That ought to be unneeded, though, since the type is `NonNull`, so this test\n+// confirms that the appropriate metadata is included to denote that.\n+\n+// CHECK-LABEL: @slice_iter_next(\n+#[no_mangle]\n+pub fn slice_iter_next<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %it,\n+\n+    it.next()\n+}\n+\n+// CHECK-LABEL: @slice_iter_next_back(\n+#[no_mangle]\n+pub fn slice_iter_next_back<'a>(it: &mut std::slice::Iter<'a, u32>) -> Option<&'a u32> {\n+    // CHECK: %[[ENDP:.+]] = getelementptr{{.+}}ptr %it,{{.+}} 1\n+    // CHECK: %[[END:.+]] = load ptr, ptr %[[ENDP]]\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: %[[START:.+]] = load ptr, ptr %it,\n+    // CHECK-SAME: !nonnull\n+    // CHECK-SAME: !noundef\n+    // CHECK: icmp eq ptr %[[START]], %[[END]]\n+\n+    // CHECK: store ptr{{.+}}, ptr %[[ENDP]],\n+\n+    it.next_back()\n+}"}]}