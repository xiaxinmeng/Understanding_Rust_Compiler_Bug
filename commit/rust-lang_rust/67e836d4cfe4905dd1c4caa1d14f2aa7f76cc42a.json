{"sha": "67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "node_id": "C_kwDOAAsO6NoAKDY3ZTgzNmQ0Y2ZlNDkwNWRkMWM0Y2FhMWQxNGYyYWE3Zjc2Y2M0MmE", "commit": {"author": {"name": "Robert Bastian", "email": "robertbastian@google.com", "date": "2023-04-06T14:06:56Z"}, "committer": {"name": "Robert Bastian", "email": "robertbastian@google.com", "date": "2023-04-06T14:31:50Z"}, "message": "fix", "tree": {"sha": "26f888bc7692408c9ce7a64f2db375e01f8933e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26f888bc7692408c9ce7a64f2db375e01f8933e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "html_url": "https://github.com/rust-lang/rust/commit/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/comments", "author": {"login": "robertbastian", "id": 4706271, "node_id": "MDQ6VXNlcjQ3MDYyNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4706271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertbastian", "html_url": "https://github.com/robertbastian", "followers_url": "https://api.github.com/users/robertbastian/followers", "following_url": "https://api.github.com/users/robertbastian/following{/other_user}", "gists_url": "https://api.github.com/users/robertbastian/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertbastian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertbastian/subscriptions", "organizations_url": "https://api.github.com/users/robertbastian/orgs", "repos_url": "https://api.github.com/users/robertbastian/repos", "events_url": "https://api.github.com/users/robertbastian/events{/privacy}", "received_events_url": "https://api.github.com/users/robertbastian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "robertbastian", "id": 4706271, "node_id": "MDQ6VXNlcjQ3MDYyNzE=", "avatar_url": "https://avatars.githubusercontent.com/u/4706271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/robertbastian", "html_url": "https://github.com/robertbastian", "followers_url": "https://api.github.com/users/robertbastian/followers", "following_url": "https://api.github.com/users/robertbastian/following{/other_user}", "gists_url": "https://api.github.com/users/robertbastian/gists{/gist_id}", "starred_url": "https://api.github.com/users/robertbastian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/robertbastian/subscriptions", "organizations_url": "https://api.github.com/users/robertbastian/orgs", "repos_url": "https://api.github.com/users/robertbastian/repos", "events_url": "https://api.github.com/users/robertbastian/events{/privacy}", "received_events_url": "https://api.github.com/users/robertbastian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "url": "https://api.github.com/repos/rust-lang/rust/commits/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf", "html_url": "https://github.com/rust-lang/rust/commit/de5c6d6b1ed50246cf3d5c93b8d6e0b467dfbddf"}], "stats": {"total": 113, "additions": 67, "deletions": 46}, "files": [{"sha": "6d3865080a68665c08ef0916ca554d7a32452d43", "filename": "clippy_lints/src/octal_escapes.rs", "status": "modified", "additions": 49, "deletions": 45, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/clippy_lints%2Fsrc%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/clippy_lints%2Fsrc%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foctal_escapes.rs?ref=67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "patch": "@@ -76,8 +76,8 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n         if ch == '\\\\' {\n             if let Some((_, '0')) = iter.next() {\n                 // collect up to two further octal digits\n-                if let Some((mut to, '0'..='7')) = iter.next() {\n-                    if let Some((_, '0'..='7')) = iter.peek() {\n+                if let Some((mut to, _)) = iter.next_if(|(_, ch)| matches!(ch, '0'..='7')) {\n+                    if iter.next_if(|(_, ch)| matches!(ch, '0'..='7')).is_some() {\n                         to += 1;\n                     }\n                     found.push((from, to + 1));\n@@ -90,32 +90,6 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n         return;\n     }\n \n-    // construct two suggestion strings, one with \\x escapes with octal meaning\n-    // as in C, and one with \\x00 for null bytes.\n-    let mut suggest_1 = if is_string { \"\\\"\" } else { \"b\\\"\" }.to_string();\n-    let mut suggest_2 = suggest_1.clone();\n-    let mut index = 0;\n-    for (from, to) in found {\n-        suggest_1.push_str(&contents[index..from]);\n-        suggest_2.push_str(&contents[index..from]);\n-\n-        // construct a replacement escape\n-        // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n-        if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n-            write!(suggest_1, \"\\\\x{n:02x}\").unwrap();\n-        }\n-\n-        // append the null byte as \\x00 and the following digits literally\n-        suggest_2.push_str(\"\\\\x00\");\n-        suggest_2.push_str(&contents[from + 2..to]);\n-\n-        index = to;\n-    }\n-    suggest_1.push_str(&contents[index..]);\n-    suggest_1.push('\"');\n-    suggest_2.push_str(&contents[index..]);\n-    suggest_2.push('\"');\n-\n     span_lint_and_then(\n         cx,\n         OCTAL_ESCAPES,\n@@ -129,23 +103,53 @@ fn check_lit(cx: &EarlyContext<'_>, lit: &Lit, span: Span, is_string: bool) {\n                 \"octal escapes are not supported, `\\\\0` is always a null {}\",\n                 if is_string { \"character\" } else { \"byte\" }\n             ));\n-            // suggestion 1: equivalent hex escape\n-            diag.span_suggestion(\n-                span,\n-                \"if an octal escape was intended, use the hexadecimal representation instead\",\n-                suggest_1,\n-                Applicability::MaybeIncorrect,\n-            );\n-            // suggestion 2: unambiguous null byte\n-            diag.span_suggestion(\n-                span,\n-                format!(\n-                    \"if the null {} is intended, disambiguate using\",\n-                    if is_string { \"character\" } else { \"byte\" }\n-                ),\n-                suggest_2,\n-                Applicability::MaybeIncorrect,\n-            );\n+\n+            // Generate suggestions if the string is not too long (~ 5 lines)\n+            if contents.len() < 400 {\n+                // construct two suggestion strings, one with \\x escapes with octal meaning\n+                // as in C, and one with \\x00 for null bytes.\n+                let mut suggest_1 = if is_string { \"\\\"\" } else { \"b\\\"\" }.to_string();\n+                let mut suggest_2 = suggest_1.clone();\n+                let mut index = 0;\n+                for (from, to) in found {\n+                    suggest_1.push_str(&contents[index..from]);\n+                    suggest_2.push_str(&contents[index..from]);\n+\n+                    // construct a replacement escape\n+                    // the maximum value is \\077, or \\x3f, so u8 is sufficient here\n+                    if let Ok(n) = u8::from_str_radix(&contents[from + 1..to], 8) {\n+                        write!(suggest_1, \"\\\\x{n:02x}\").unwrap();\n+                    }\n+\n+                    // append the null byte as \\x00 and the following digits literally\n+                    suggest_2.push_str(\"\\\\x00\");\n+                    suggest_2.push_str(&contents[from + 2..to]);\n+\n+                    index = to;\n+                }\n+                suggest_1.push_str(&contents[index..]);\n+                suggest_2.push_str(&contents[index..]);\n+\n+                suggest_1.push('\"');\n+                suggest_2.push('\"');\n+                // suggestion 1: equivalent hex escape\n+                diag.span_suggestion(\n+                    span,\n+                    \"if an octal escape was intended, use the hexadecimal representation instead\",\n+                    suggest_1,\n+                    Applicability::MaybeIncorrect,\n+                );\n+                // suggestion 2: unambiguous null byte\n+                diag.span_suggestion(\n+                    span,\n+                    format!(\n+                        \"if the null {} is intended, disambiguate using\",\n+                        if is_string { \"character\" } else { \"byte\" }\n+                    ),\n+                    suggest_2,\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n         },\n     );\n }"}, {"sha": "61ea96604577fdf37a9d0dcbaac89dcadc19eb1b", "filename": "tests/ui/octal_escapes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/tests%2Fui%2Foctal_escapes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/tests%2Fui%2Foctal_escapes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.rs?ref=67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "patch": "@@ -17,4 +17,5 @@ fn main() {\n     let _good3 = \"\\0\\0\";\n     let _good4 = \"X\\0\\0X\";\n     let _good5 = \"\u9508\\0\u9508\";\n+    let _good6 = \"\\0\\\\01\";\n }"}, {"sha": "aa362e96321bdb7cf984e9754c081ad585a04f16", "filename": "tests/ui/octal_escapes.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/tests%2Fui%2Foctal_escapes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a/tests%2Fui%2Foctal_escapes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Foctal_escapes.stderr?ref=67e836d4cfe4905dd1c4caa1d14f2aa7f76cc42a", "patch": "@@ -63,6 +63,22 @@ help: if the null character is intended, disambiguate using\n LL |     let _bad4 = \"/x001234567\";\n    |                 ~~~~~~~~~~~~~\n \n+error: octal-looking escape in string literal\n+  --> $DIR/octal_escapes.rs:9:17\n+   |\n+LL |     let _bad5 = \"/0/03\";\n+   |                 ^^^^^^^\n+   |\n+   = help: octal escapes are not supported, `/0` is always a null character\n+help: if an octal escape was intended, use the hexadecimal representation instead\n+   |\n+LL |     let _bad5 = \"/0/x03\";\n+   |                 ~~~~~~~~\n+help: if the null character is intended, disambiguate using\n+   |\n+LL |     let _bad5 = \"/0/x003\";\n+   |                 ~~~~~~~~~\n+\n error: octal-looking escape in string literal\n   --> $DIR/octal_escapes.rs:10:17\n    |\n@@ -127,5 +143,5 @@ help: if the null character is intended, disambiguate using\n LL |     let _bad9 = \"\u9508/x0011\u9508\";\n    |                 ~~~~~~~~~~~~\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 9 previous errors\n "}]}