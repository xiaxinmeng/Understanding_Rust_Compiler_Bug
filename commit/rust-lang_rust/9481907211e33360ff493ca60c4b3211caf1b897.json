{"sha": "9481907211e33360ff493ca60c4b3211caf1b897", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0ODE5MDcyMTFlMzMzNjBmZjQ5M2NhNjBjNGIzMjExY2FmMWI4OTc=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-28T00:26:37Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-28T00:30:26Z"}, "message": "Make pattern-alt drop the slots it initializes when binding slot patterns.  Undoes most of the hackiness in 5e77e784f006e36c06252d9beccbd7893eddac73 and replaces it with a more proper fix.", "tree": {"sha": "10030afc40df33e23cdc9ef1748ec749328ec87d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10030afc40df33e23cdc9ef1748ec749328ec87d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9481907211e33360ff493ca60c4b3211caf1b897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9481907211e33360ff493ca60c4b3211caf1b897", "html_url": "https://github.com/rust-lang/rust/commit/9481907211e33360ff493ca60c4b3211caf1b897", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9481907211e33360ff493ca60c4b3211caf1b897/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec8c210168120abc6cf95cf5bda5e0df824447a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec8c210168120abc6cf95cf5bda5e0df824447a", "html_url": "https://github.com/rust-lang/rust/commit/6ec8c210168120abc6cf95cf5bda5e0df824447a"}], "stats": {"total": 89, "additions": 52, "deletions": 37}, "files": [{"sha": "9e234a8fa25e9d04b367ce5be9bee1cb6b248d26", "filename": "src/boot/me/resolve.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Fresolve.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Fresolve.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fresolve.ml?ref=9481907211e33360ff493ca60c4b3211caf1b897", "patch": "@@ -122,9 +122,10 @@ let stmt_collecting_visitor\n                     htab_put slots key slot_id;\n                     htab_put cx.ctxt_slot_keys slot_id key\n                 | Ast.PAT_tag (_, pats) -> Array.iter (resolve_pat block) pats\n-                | Ast.PAT_lit _ | Ast.PAT_wild -> ()\n+                | Ast.PAT_lit _\n+                | Ast.PAT_wild -> ()\n             in\n-            Array.iter (fun { node = (p, b) } -> resolve_pat b p) arms\n+              Array.iter (fun { node = (p, b) } -> resolve_pat b p) arms\n         | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre stmt"}, {"sha": "385db253213248232ad58fde15b1412df92a3953", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=9481907211e33360ff493ca60c4b3211caf1b897", "patch": "@@ -4139,23 +4139,18 @@ let trans_visitor\n     let trans_arm arm : quad_idx =\n       let (pat, block) = arm.node in\n \n-      (* Translates the pattern and returns the following pair.\n-       *\n-       *   fst: The addresses of the branch instructions that are taken if\n-       *        the match fails.\n-       *   snd: The (cell, slot) pairs of any slots bound and initialized\n-       *        in PAT_slot pattern leaves.\n+      (* Translates the pattern and returns the addresses of the branch\n+       * instructions that are taken if the match fails.\n        *)\n       let rec trans_pat\n           (pat:Ast.pat)\n           (src_cell:Il.cell)\n           (src_ty:Ast.ty)\n-          : (quad_idx list) * ((Il.cell * Ast.slot) list) =\n+          : quad_idx list =\n \n         match pat with\n             Ast.PAT_lit lit ->\n-              (trans_compare_simple Il.JNE (trans_lit lit) (Il.Cell src_cell),\n-               [])\n+              trans_compare_simple Il.JNE (trans_lit lit) (Il.Cell src_cell)\n \n           | Ast.PAT_tag (lval, pats) ->\n               let tag_name = tag_ctor_name_to_tag_name (lval_to_name lval) in\n@@ -4185,19 +4180,18 @@ let trans_visitor\n \n               let tup_cell:Il.cell = get_variant_ptr union_cell tag_number in\n \n-              let trans_elem_pat i elem_pat\n-                  : (quad_idx list) * ((Il.cell * Ast.slot) list) =\n+              let trans_elem_pat i elem_pat : quad_idx list =\n                 let elem_cell =\n                   get_element_ptr_dyn_in_current_frame tup_cell i\n                 in\n                 let elem_ty = ty_tup.(i) in\n                   trans_pat elem_pat elem_cell elem_ty\n               in\n \n-              let (elem_jumps, bindings) =\n-                List.split (Array.to_list (Array.mapi trans_elem_pat pats))\n+              let elem_jumps =\n+                List.concat (Array.to_list (Array.mapi trans_elem_pat pats))\n               in\n-                (next_jumps @ (List.concat elem_jumps), List.concat bindings)\n+                next_jumps @ elem_jumps\n \n           | Ast.PAT_slot (dst, _) ->\n               let dst_slot = get_slot cx dst.id in\n@@ -4206,24 +4200,14 @@ let trans_visitor\n                   (get_ty_params_of_current_frame())\n                   CLONE_none dst_cell dst_slot\n                   src_cell src_ty;\n-                ([], [(dst_cell, dst_slot)])   (* irrefutable *)\n+                []                 (* irrefutable *)\n \n-          | Ast.PAT_wild -> ([], [])           (* irrefutable *)\n+          | Ast.PAT_wild -> []     (* irrefutable *)\n       in\n \n       let (lval_cell, lval_ty) = trans_lval at.Ast.alt_tag_lval in\n-      let (next_jumps, bindings) = trans_pat pat lval_cell lval_ty in\n+      let next_jumps = trans_pat pat lval_cell lval_ty in\n         trans_block block;\n-\n-        (* Drop any slots we initialized in the leaf slot bindings of\n-         * this arm's pattern.\n-         *\n-         * FIXME: Is `None` really correct to pass as the curr_iso?\n-         *)\n-        List.iter\n-          (fun (cell, slot) -> drop_slot_in_current_frame cell slot None)\n-          bindings;\n-\n         let last_jump = mark() in\n           emit (Il.jmp Il.JMP Il.CodeNone);\n           List.iter patch next_jumps;"}, {"sha": "4d65c809bb943939e89fea6cd7ef86d30f66794d", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 38, "deletions": 8, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/9481907211e33360ff493ca60c4b3211caf1b897/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=9481907211e33360ff493ca60c4b3211caf1b897", "patch": "@@ -1297,7 +1297,7 @@ let lifecycle_visitor\n   let (live_block_slots:(node_id, unit) Hashtbl.t) = Hashtbl.create 0 in\n   let (frame_blocks:frame_block_slots_stack) = Stack.create () in\n \n-  let (implicit_init_block_slots:(node_id,node_id) Hashtbl.t) =\n+  let (implicit_init_block_slots:(node_id,node_id list) Hashtbl.t) =\n     Hashtbl.create 0\n   in\n \n@@ -1315,9 +1315,12 @@ let lifecycle_visitor\n     begin\n       match htab_search implicit_init_block_slots b.id with\n           None -> ()\n-        | Some slot ->\n-            push_slot slot;\n-            mark_slot_live slot\n+        | Some slots ->\n+            List.iter\n+              (fun slot ->\n+                 push_slot slot;\n+                 mark_slot_live slot)\n+              slots\n     end;\n     inner.Walk.visit_block_pre b\n   in\n@@ -1425,7 +1428,7 @@ let lifecycle_visitor\n               Hashtbl.replace cx.ctxt_stmt_is_init s.id ();\n               htab_put implicit_init_block_slots\n                 f.Ast.for_body.id\n-                (fst f.Ast.for_slot).id\n+                [ (fst f.Ast.for_slot).id ]\n \n           | Ast.STMT_for_each f ->\n               log cx \"noting implicit init for slot %d in for_each-block %d\"\n@@ -1434,9 +1437,36 @@ let lifecycle_visitor\n               Hashtbl.replace cx.ctxt_stmt_is_init s.id ();\n               htab_put implicit_init_block_slots\n                 f.Ast.for_each_body.id\n-                (fst f.Ast.for_each_slot).id\n-\n-\n+                [ (fst f.Ast.for_each_slot).id ]\n+\n+          | Ast.STMT_alt_tag { Ast.alt_tag_arms = arms } ->\n+              let note_slot block slot_id =\n+                log cx\n+                  \"noting implicit init for slot %d in pattern-alt block %d\"\n+                  (int_of_node slot_id)\n+                  (int_of_node block.id);\n+              in\n+              let rec all_pat_slot_ids block pat =\n+                match pat with\n+                    Ast.PAT_slot ({ id = slot_id }, _) ->\n+                      [ slot_id ]\n+                  | Ast.PAT_tag (_, pats) ->\n+                      List.concat\n+                        (Array.to_list\n+                           (Array.map (all_pat_slot_ids block) pats))\n+                  | Ast.PAT_lit _\n+                  | Ast.PAT_wild -> []\n+              in\n+                Array.iter\n+                  begin\n+                    fun { node = (pat, block) } ->\n+                      let slot_ids = all_pat_slot_ids block pat in\n+                        List.iter (note_slot block) slot_ids;\n+                        htab_put implicit_init_block_slots\n+                          block.id\n+                          slot_ids\n+                  end\n+                  arms\n           | _ -> ()\n     end;\n     inner.Walk.visit_stmt_pre s"}]}