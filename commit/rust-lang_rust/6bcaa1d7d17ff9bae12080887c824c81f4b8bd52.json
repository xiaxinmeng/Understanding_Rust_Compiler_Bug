{"sha": "6bcaa1d7d17ff9bae12080887c824c81f4b8bd52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiY2FhMWQ3ZDE3ZmY5YmFlMTIwODA4ODdjODI0YzgxZjRiOGJkNTI=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-20T20:22:21Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-20T20:57:20Z"}, "message": "Fix text range bug and reorder", "tree": {"sha": "f06250e4cbbe3a01bcdbe774a5c6d030ca0a52b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06250e4cbbe3a01bcdbe774a5c6d030ca0a52b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52", "html_url": "https://github.com/rust-lang/rust/commit/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "622c843a4c598befaf459e64e9f75f31b4886a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/622c843a4c598befaf459e64e9f75f31b4886a5b", "html_url": "https://github.com/rust-lang/rust/commit/622c843a4c598befaf459e64e9f75f31b4886a5b"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "a3715b1d48ec986fa0aa3c70db9574994adc8460", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bcaa1d7d17ff9bae12080887c824c81f4b8bd52/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=6bcaa1d7d17ff9bae12080887c824c81f4b8bd52", "patch": "@@ -237,12 +237,16 @@ impl TokenIdAlloc {\n     fn open_delim(&mut self, open_abs_range: TextRange) -> tt::TokenId {\n         let token_id = tt::TokenId(self.next_id);\n         self.next_id += 1;\n-        self.map.insert_delim(token_id, open_abs_range, open_abs_range);\n+        self.map.insert_delim(\n+            token_id,\n+            open_abs_range - self.global_offset,\n+            open_abs_range - self.global_offset,\n+        );\n         token_id\n     }\n \n     fn close_delim(&mut self, id: tt::TokenId, close_abs_range: TextRange) {\n-        self.map.update_close_delim(id, close_abs_range);\n+        self.map.update_close_delim(id, close_abs_range - self.global_offset);\n     }\n }\n \n@@ -297,6 +301,7 @@ trait TokenConvertor {\n         }\n \n         result.push(if k.is_punct() {\n+            assert_eq!(range.len().to_usize(), 1);\n             let delim = match k {\n                 T!['('] => Some((tt::DelimiterKind::Parenthesis, T![')'])),\n                 T!['{'] => Some((tt::DelimiterKind::Brace, T!['}'])),\n@@ -461,25 +466,25 @@ impl TokenConvertor for Convertor {\n     }\n \n     fn bump(&mut self) -> Option<(Self::Token, TextRange)> {\n-        let curr = self.current.clone()?;\n-        if !curr.text_range().is_subrange(&self.range) {\n-            return None;\n-        }\n-\n         if let Some((punct, offset)) = self.punct_offset.clone() {\n             if offset.to_usize() + 1 < punct.text().len() {\n                 let offset = offset + TextUnit::from_usize(1);\n                 let range = punct.text_range();\n-                self.punct_offset = Some((punct, offset));\n+                self.punct_offset = Some((punct.clone(), offset));\n                 let range = TextRange::offset_len(range.start() + offset, TextUnit::from_usize(1));\n-                return Some((SynToken::Punch(curr, offset), range));\n+                return Some((SynToken::Punch(punct, offset), range));\n             }\n         }\n \n+        let curr = self.current.clone()?;\n+        if !curr.text_range().is_subrange(&self.range) {\n+            return None;\n+        }\n         self.current = curr.next_token();\n \n         let token = if curr.kind().is_punct() {\n             let range = curr.text_range();\n+            let range = TextRange::offset_len(range.start(), TextUnit::from_usize(1));\n             self.punct_offset = Some((curr.clone(), TextUnit::from_usize(0)));\n             (SynToken::Punch(curr, TextUnit::from_usize(0)), range)\n         } else {\n@@ -492,18 +497,18 @@ impl TokenConvertor for Convertor {\n     }\n \n     fn peek(&self) -> Option<Self::Token> {\n-        let curr = self.current.clone()?;\n-        if !curr.text_range().is_subrange(&self.range) {\n-            return None;\n-        }\n-\n         if let Some((punct, mut offset)) = self.punct_offset.clone() {\n             offset = offset + TextUnit::from_usize(1);\n             if offset.to_usize() < punct.text().len() {\n                 return Some(SynToken::Punch(punct, offset));\n             }\n         }\n \n+        let curr = self.current.clone()?;\n+        if !curr.text_range().is_subrange(&self.range) {\n+            return None;\n+        }\n+\n         let token = if curr.kind().is_punct() {\n             SynToken::Punch(curr, TextUnit::from_usize(0))\n         } else {"}]}