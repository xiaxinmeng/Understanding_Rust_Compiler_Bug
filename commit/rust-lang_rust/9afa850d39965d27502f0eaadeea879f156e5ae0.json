{"sha": "9afa850d39965d27502f0eaadeea879f156e5ae0", "node_id": "C_kwDOAAsO6NoAKDlhZmE4NTBkMzk5NjVkMjc1MDJmMGVhYWRlZWE4NzlmMTU2ZTVhZTA", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-12-03T03:51:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-03T03:51:29Z"}, "message": "Rollup merge of #105182 - aDotInTheVoid:rdj-no-foreign-traits, r=Enselic,GuillaumeGomez\n\nRustdoc-Json: Don't inline foreign traits\n\nIt wasn't done correctly, and [we want to move towards only having local items in the index, and making foreign items easier to resolved](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Rustdoc.20JSON.3A.20Include.20All.20Foreign.20Items.3F)\n\nFixes #105025. This means #105015 is included to test this\n\nFixes #105022\n\nr? `@GuillaumeGomez`", "tree": {"sha": "eaff43adecf7cd678c3df26bdde6ef4cbec17536", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaff43adecf7cd678c3df26bdde6ef4cbec17536"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9afa850d39965d27502f0eaadeea879f156e5ae0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjisfBCRBK7hj4Ov3rIwAAHtwIAEuRZs6QtOz9DDfQcp4VnPdz\nekmTxMEfgKbfpV0kWHXyAAaGkepfh1kla9WznU+kiXabvZ4bVeQZ+jYbrLs5gynf\nLHvqyhgnNBhiebj+NF+iULXXU4QN7v8LIBEaHeAoe/kJDCOuFkgx9gwrzSKRgqXv\n2IV3KjM5LrOWqNzWni/4kw3vEA+7sS7yDIWCT8pyWZbNPEsX81AFtrgPO01qbdba\nFeSYqhijGBfj4qpXT9zmiDRLuODQRwuF4CXV5+TsSFPHPZGEMKQIAkUXrx+J+iBJ\n4z/W3TH3SyjsyjVypcG+JUJI75sTDMP5ijLsDzW4ue2PX8RfzFj0zgyfpjPg824=\n=aG3y\n-----END PGP SIGNATURE-----\n", "payload": "tree eaff43adecf7cd678c3df26bdde6ef4cbec17536\nparent 8f368666b55e4573f1399eb71ac4ee024234dfbb\nparent 79d897b22a3b091f8300fffe96ffb68a0dbd1293\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1670039489 +0900\ncommitter GitHub <noreply@github.com> 1670039489 +0900\n\nRollup merge of #105182 - aDotInTheVoid:rdj-no-foreign-traits, r=Enselic,GuillaumeGomez\n\nRustdoc-Json: Don't inline foreign traits\n\nIt wasn't done correctly, and [we want to move towards only having local items in the index, and making foreign items easier to resolved](https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Rustdoc.20JSON.3A.20Include.20All.20Foreign.20Items.3F)\n\nFixes #105025. This means #105015 is included to test this\n\nFixes #105022\n\nr? `@GuillaumeGomez`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9afa850d39965d27502f0eaadeea879f156e5ae0", "html_url": "https://github.com/rust-lang/rust/commit/9afa850d39965d27502f0eaadeea879f156e5ae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9afa850d39965d27502f0eaadeea879f156e5ae0/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f368666b55e4573f1399eb71ac4ee024234dfbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f368666b55e4573f1399eb71ac4ee024234dfbb", "html_url": "https://github.com/rust-lang/rust/commit/8f368666b55e4573f1399eb71ac4ee024234dfbb"}, {"sha": "79d897b22a3b091f8300fffe96ffb68a0dbd1293", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d897b22a3b091f8300fffe96ffb68a0dbd1293", "html_url": "https://github.com/rust-lang/rust/commit/79d897b22a3b091f8300fffe96ffb68a0dbd1293"}], "stats": {"total": 156, "additions": 95, "deletions": 61}, "files": [{"sha": "1196f944faad2d26981b806023fe739cfaacc953", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -99,53 +99,6 @@ impl<'tcx> JsonRenderer<'tcx> {\n             })\n             .unwrap_or_default()\n     }\n-\n-    fn get_trait_items(&mut self) -> Vec<(types::Id, types::Item)> {\n-        debug!(\"Adding foreign trait items\");\n-        Rc::clone(&self.cache)\n-            .traits\n-            .iter()\n-            .filter_map(|(&id, trait_item)| {\n-                // only need to synthesize items for external traits\n-                if !id.is_local() {\n-                    for item in &trait_item.items {\n-                        trace!(\"Adding subitem to {id:?}: {:?}\", item.item_id);\n-                        self.item(item.clone()).unwrap();\n-                    }\n-                    let item_id = from_item_id(id.into(), self.tcx);\n-                    Some((\n-                        item_id.clone(),\n-                        types::Item {\n-                            id: item_id,\n-                            crate_id: id.krate.as_u32(),\n-                            name: self\n-                                .cache\n-                                .paths\n-                                .get(&id)\n-                                .unwrap_or_else(|| {\n-                                    self.cache\n-                                        .external_paths\n-                                        .get(&id)\n-                                        .expect(\"Trait should either be in local or external paths\")\n-                                })\n-                                .0\n-                                .last()\n-                                .map(|s| s.to_string()),\n-                            visibility: types::Visibility::Public,\n-                            inner: types::ItemEnum::Trait(trait_item.clone().into_tcx(self.tcx)),\n-                            span: None,\n-                            docs: Default::default(),\n-                            links: Default::default(),\n-                            attrs: Default::default(),\n-                            deprecation: Default::default(),\n-                        },\n-                    ))\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect()\n-    }\n }\n \n impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n@@ -276,11 +229,7 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n \n         let e = ExternalCrate { crate_num: LOCAL_CRATE };\n \n-        // FIXME(adotinthevoid): Remove this, as it's not consistent with not\n-        // inlining foreign items.\n-        let foreign_trait_items = self.get_trait_items();\n-        let mut index = (*self.index).clone().into_inner();\n-        index.extend(foreign_trait_items);\n+        let index = (*self.index).clone().into_inner();\n \n         debug!(\"Constructing Output\");\n         // This needs to be the default HashMap for compatibility with the public interface for"}, {"sha": "bfe85f59e8179645a1d9dd058d7b487d8df7a152", "filename": "src/test/rustdoc-json/intra-doc-links/auxiliary/enum_variant_in_trait_method.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fauxiliary%2Fenum_variant_in_trait_method.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -0,0 +1,8 @@\n+pub trait Trait {\n+    /// [`Enum::Variant`]\n+    fn method() {}\n+}\n+\n+pub enum Enum {\n+    Variant,\n+}"}, {"sha": "e29682313386806d718d89fb08bdf36a0743439e", "filename": "src/test/rustdoc-json/intra-doc-links/foreign_variant.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fintra-doc-links%2Fforeign_variant.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -0,0 +1,13 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/105025>\n+// aux-build: enum_variant_in_trait_method.rs\n+\n+extern crate enum_variant_in_trait_method;\n+\n+pub struct Local;\n+\n+/// local impl\n+impl enum_variant_in_trait_method::Trait for Local {}\n+\n+// @!has \"$.index[*][?(@.name == 'Trait')]\"\n+// @!has \"$.index[*][?(@.name == 'method')]\"\n+// @count \"$.index[*][?(@.docs == 'local impl')].inner.items[*]\" 0"}, {"sha": "1e87966b28aea55bc09dd8bae5385726c7e2cbe8", "filename": "src/test/rustdoc-json/reexport/auxiliary/trait_with_docs.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fauxiliary%2Ftrait_with_docs.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -0,0 +1,2 @@\n+/// The Docs\n+pub trait HasDocs {}"}, {"sha": "25a7c08d689225e9484e0f42c2255db78aaa5e3d", "filename": "src/test/rustdoc-json/reexport/synthesize_trait_with_docs.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Freexport%2Fsynthesize_trait_with_docs.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -0,0 +1,10 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/105022>\n+// aux-build: trait_with_docs.rs\n+\n+extern crate trait_with_docs;\n+\n+pub struct Local;\n+\n+impl trait_with_docs::HasDocs for Local {}\n+\n+// @!has \"$.index[*][?(@.name == 'HasDocs')]\""}, {"sha": "55a51f739ab236c03c9e2ba0a6eb05835fa46d96", "filename": "src/test/rustdoc-json/traits/uses_extern_trait.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Ftraits%2Fuses_extern_trait.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -1,12 +1,5 @@\n #![no_std]\n pub fn drop_default<T: core::default::Default>(_x: T) {}\n \n-// FIXME(adotinthevoid): Theses shouldn't be here\n-// @has \"$.index[*][?(@.name=='Debug')]\"\n-\n-// Debug may have several items. All we depend on here the that `fmt` is first. See\n-// https://github.com/rust-lang/rust/pull/104525#issuecomment-1331087852 for why we\n-// can't use [*].\n-\n-// @set Debug_fmt = \"$.index[*][?(@.name=='Debug')].inner.items[0]\"\n-// @has \"$.index[*][?(@.name=='fmt')].id\" $Debug_fmt\n+// @!has \"$.index[*][?(@.name=='Debug')]\"\n+// @!has \"$.index[*][?(@.name=='Default')]\""}, {"sha": "e15f5fe3ccc968d46d295534015c3831d0ebff85", "filename": "src/tools/jsondoclint/src/validator.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -60,6 +60,8 @@ impl<'a> Validator<'a> {\n \n     fn check_item(&mut self, id: &'a Id) {\n         if let Some(item) = &self.krate.index.get(id) {\n+            item.links.values().for_each(|id| self.add_any_id(id));\n+\n             match &item.inner {\n                 ItemEnum::Import(x) => self.check_import(x),\n                 ItemEnum::Union(x) => self.check_union(x),\n@@ -376,6 +378,10 @@ impl<'a> Validator<'a> {\n         }\n     }\n \n+    fn add_any_id(&mut self, id: &'a Id) {\n+        self.add_id_checked(id, |_| true, \"any kind of item\");\n+    }\n+\n     fn add_field_id(&mut self, id: &'a Id) {\n         self.add_id_checked(id, Kind::is_struct_field, \"StructField\");\n     }\n@@ -446,3 +452,6 @@ fn set_remove<T: Hash + Eq + Clone>(set: &mut HashSet<T>) -> Option<T> {\n         None\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "c4aeee9c53b760162af70925c189148d2fed723c", "filename": "src/tools/jsondoclint/src/validator/tests.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9afa850d39965d27502f0eaadeea879f156e5ae0/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fvalidator%2Ftests.rs?ref=9afa850d39965d27502f0eaadeea879f156e5ae0", "patch": "@@ -0,0 +1,50 @@\n+use std::collections::HashMap;\n+\n+use rustdoc_json_types::{Crate, Item, Visibility};\n+\n+use super::*;\n+\n+#[track_caller]\n+fn check(krate: &Crate, errs: &[Error]) {\n+    let mut validator = Validator::new(krate);\n+    validator.check_crate();\n+\n+    assert_eq!(errs, &validator.errs[..]);\n+}\n+\n+fn id(s: &str) -> Id {\n+    Id(s.to_owned())\n+}\n+\n+#[test]\n+fn errors_on_missing_links() {\n+    let k = Crate {\n+        root: id(\"0\"),\n+        crate_version: None,\n+        includes_private: false,\n+        index: HashMap::from_iter([(\n+            id(\"0\"),\n+            Item {\n+                name: Some(\"root\".to_owned()),\n+                id: id(\"\"),\n+                crate_id: 0,\n+                span: None,\n+                visibility: Visibility::Public,\n+                docs: None,\n+                links: HashMap::from_iter([(\"Not Found\".to_owned(), id(\"1\"))]),\n+                attrs: vec![],\n+                deprecation: None,\n+                inner: ItemEnum::Module(Module {\n+                    is_crate: true,\n+                    items: vec![],\n+                    is_stripped: false,\n+                }),\n+            },\n+        )]),\n+        paths: HashMap::new(),\n+        external_crates: HashMap::new(),\n+        format_version: rustdoc_json_types::FORMAT_VERSION,\n+    };\n+\n+    check(&k, &[Error { kind: ErrorKind::NotFound, id: id(\"1\") }]);\n+}"}]}