{"sha": "c7f424b80ab734cfeb5215be62cff3e48ed5da60", "node_id": "C_kwDOAAsO6NoAKGM3ZjQyNGI4MGFiNzM0Y2ZlYjUyMTViZTYyY2ZmM2U0OGVkNWRhNjA", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-02-21T22:25:35Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-13T13:31:54Z"}, "message": "resolve: Remove `fn_has_self_parameter_untracked`", "tree": {"sha": "db810d8691a153b7a0684b1fbb72bd0412058ff8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db810d8691a153b7a0684b1fbb72bd0412058ff8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7f424b80ab734cfeb5215be62cff3e48ed5da60", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f424b80ab734cfeb5215be62cff3e48ed5da60", "html_url": "https://github.com/rust-lang/rust/commit/c7f424b80ab734cfeb5215be62cff3e48ed5da60", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7f424b80ab734cfeb5215be62cff3e48ed5da60/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15", "html_url": "https://github.com/rust-lang/rust/commit/c05b7bd7d05125cfc9cc34a7426a3e20ad561a15"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "7e08ab0448cf06e0b23138034c74197652f368b7", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=c7f424b80ab734cfeb5215be62cff3e48ed5da60", "patch": "@@ -555,10 +555,6 @@ impl CStore {\n         )\n     }\n \n-    pub fn fn_has_self_parameter_untracked(&self, def: DefId, sess: &Session) -> bool {\n-        self.get_crate_data(def.krate).get_fn_has_self_parameter(def.index, sess)\n-    }\n-\n     pub fn crate_source_untracked(&self, cnum: CrateNum) -> Lrc<CrateSource> {\n         self.get_crate_data(cnum).source.clone()\n     }"}, {"sha": "61b8ae34848c37fd561050d39010e73f456786f0", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=c7f424b80ab734cfeb5215be62cff3e48ed5da60", "patch": "@@ -1008,11 +1008,6 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n         match res {\n             Res::Def(DefKind::Struct, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n-            Res::Def(DefKind::AssocFn, def_id) => {\n-                if self.r.cstore().fn_has_self_parameter_untracked(def_id, self.r.tcx.sess) {\n-                    self.r.has_self.insert(def_id);\n-                }\n-            }\n             _ => {}\n         }\n     }\n@@ -1411,7 +1406,7 @@ impl<'a, 'b, 'tcx> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n                 AssocItemKind::Const(..) => (DefKind::AssocConst, ValueNS),\n                 AssocItemKind::Fn(box Fn { ref sig, .. }) => {\n                     if sig.decl.has_self() {\n-                        self.r.has_self.insert(def_id);\n+                        self.r.has_self.insert(local_def_id);\n                     }\n                     (DefKind::AssocFn, ValueNS)\n                 }"}, {"sha": "2f0ff011d7627e2f1f581434f3a9966505215d89", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=c7f424b80ab734cfeb5215be62cff3e48ed5da60", "patch": "@@ -1649,7 +1649,17 @@ impl<'a: 'ast, 'ast, 'tcx> LateResolutionVisitor<'a, '_, 'ast, 'tcx> {\n             ) {\n                 let res = binding.res();\n                 if filter_fn(res) {\n-                    if self.r.has_self.contains(&res.def_id()) {\n+                    let def_id = res.def_id();\n+                    let has_self = match def_id.as_local() {\n+                        Some(def_id) => self.r.has_self.contains(&def_id),\n+                        None => self\n+                            .r\n+                            .tcx\n+                            .fn_arg_names(def_id)\n+                            .first()\n+                            .map_or(false, |ident| ident.name == kw::SelfLower),\n+                    };\n+                    if has_self {\n                         return Some(AssocSuggestion::MethodWithSelf { called });\n                     } else {\n                         match res {"}, {"sha": "02cf71f77c1e325ccc7f98919470ba19a1976506", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7f424b80ab734cfeb5215be62cff3e48ed5da60/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c7f424b80ab734cfeb5215be62cff3e48ed5da60", "patch": "@@ -35,7 +35,7 @@ use rustc_errors::{\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorOf, DefKind, DocLinkResMap, LifetimeRes, PartialRes, PerNS};\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LocalDefIdMap, LocalDefIdSet};\n use rustc_hir::def_id::{CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathData;\n use rustc_hir::TraitCandidate;\n@@ -881,7 +881,7 @@ pub struct Resolver<'a, 'tcx> {\n     extern_prelude: FxHashMap<Ident, ExternPreludeEntry<'a>>,\n \n     /// N.B., this is used only for better diagnostics, not name resolution itself.\n-    has_self: FxHashSet<DefId>,\n+    has_self: LocalDefIdSet,\n \n     /// Names of fields of an item `DefId` accessible with dot syntax.\n     /// Used for hints during error reporting.\n@@ -1249,7 +1249,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             prelude: None,\n             extern_prelude,\n \n-            has_self: FxHashSet::default(),\n+            has_self: Default::default(),\n             field_names: FxHashMap::default(),\n             field_visibility_spans: FxHashMap::default(),\n "}]}