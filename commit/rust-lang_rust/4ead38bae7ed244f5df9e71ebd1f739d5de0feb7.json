{"sha": "4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYWQzOGJhZTdlZDI0NGY1ZGY5ZTcxZWJkMWY3MzlkNWRlMGZlYjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-29T19:14:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-29T19:48:21Z"}, "message": "libsyntax: Implement the `impl Trait for Type` syntax", "tree": {"sha": "5a1423be681f5d028bf9b95ad910cb2fea68c271", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a1423be681f5d028bf9b95ad910cb2fea68c271"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "html_url": "https://github.com/rust-lang/rust/commit/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b021d5868411341b969bfb684c7f1892cb7e092", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b021d5868411341b969bfb684c7f1892cb7e092", "html_url": "https://github.com/rust-lang/rust/commit/1b021d5868411341b969bfb684c7f1892cb7e092"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "19a52c3550fa2e51d52086605f24d9b544721dac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 23, "deletions": 6, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "patch": "@@ -2791,8 +2791,9 @@ impl Parser {\n         (ident, item_trait(tps, traits, meths), None)\n     }\n \n-    // Parses four variants (with the region/type params always optional):\n+    // Parses two variants (with the region/type params always optional):\n     //    impl<T> ~[T] : to_str { ... }\n+    //    impl<T> to_str for ~[T] { ... }\n     fn parse_item_impl() -> item_info {\n         fn wrap_path(p: Parser, pt: @path) -> @Ty {\n             @Ty {\n@@ -2802,8 +2803,6 @@ impl Parser {\n             }\n         }\n \n-        // We do two separate paths here: old-style impls and new-style impls.\n-\n         // First, parse type parameters if necessary.\n         let mut tps;\n         if self.token == token::LT {\n@@ -2816,14 +2815,32 @@ impl Parser {\n         // XXX: clownshoes\n         let ident = special_idents::clownshoes_extensions;\n \n-        // Parse the type.\n-        let ty = self.parse_ty(false);\n-\n+        // Parse the type. (If this is `impl trait for type`, however, this\n+        // actually parses the trait.)\n+        let mut ty = self.parse_ty(false);\n \n         // Parse traits, if necessary.\n         let opt_trait = if self.token == token::COLON {\n+            // Old-style trait.\n             self.bump();\n             Some(self.parse_trait_ref())\n+        } else if self.eat_keyword(~\"for\") {\n+            // New-style trait. Reinterpret the type as a trait.\n+            let opt_trait_ref = match ty.node {\n+                ty_path(path, node_id) => {\n+                    Some(@trait_ref {\n+                        path: path,\n+                        ref_id: node_id\n+                    })\n+                }\n+                _ => {\n+                    self.span_err(copy self.span, ~\"not a trait\");\n+                    None\n+                }\n+            };\n+\n+            ty = self.parse_ty(false);\n+            opt_trait_ref\n         } else {\n             None\n         };"}, {"sha": "4cb30ffa213495082a1c29e175bcf686982a4a4d", "filename": "src/test/run-pass/new-impl-syntax.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ead38bae7ed244f5df9e71ebd1f739d5de0feb7/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-impl-syntax.rs?ref=4ead38bae7ed244f5df9e71ebd1f739d5de0feb7", "patch": "@@ -0,0 +1,26 @@\n+struct Thingy {\n+    x: int,\n+    y: int\n+}\n+\n+impl ToStr for Thingy {\n+    pure fn to_str() -> ~str {\n+        fmt!(\"{ x: %d, y: %d }\", self.x, self.y)\n+    }\n+}\n+\n+struct PolymorphicThingy<T> {\n+    x: T\n+}\n+\n+impl<T:ToStr> ToStr for PolymorphicThingy<T> {\n+    pure fn to_str() -> ~str {\n+        self.x.to_str()\n+    }\n+}\n+\n+fn main() {\n+    io::println(Thingy { x: 1, y: 2 }.to_str());\n+    io::println(PolymorphicThingy { x: Thingy { x: 1, y: 2 } }.to_str());\n+}\n+"}]}