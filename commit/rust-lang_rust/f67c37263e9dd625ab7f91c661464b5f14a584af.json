{"sha": "f67c37263e9dd625ab7f91c661464b5f14a584af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2N2MzNzI2M2U5ZGQ2MjVhYjdmOTFjNjYxNDY0YjVmMTRhNTg0YWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T01:17:05Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-12-29T01:17:05Z"}, "message": "test: Fix a bunch of run-pass tests. rs=bustage", "tree": {"sha": "dfebf877ec894fc88c84b310527a18cd8f78b5f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfebf877ec894fc88c84b310527a18cd8f78b5f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f67c37263e9dd625ab7f91c661464b5f14a584af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f67c37263e9dd625ab7f91c661464b5f14a584af", "html_url": "https://github.com/rust-lang/rust/commit/f67c37263e9dd625ab7f91c661464b5f14a584af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f67c37263e9dd625ab7f91c661464b5f14a584af/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e07a6385d2e170da905acc77871024e3fa06b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e07a6385d2e170da905acc77871024e3fa06b90", "html_url": "https://github.com/rust-lang/rust/commit/4e07a6385d2e170da905acc77871024e3fa06b90"}], "stats": {"total": 295, "additions": 135, "deletions": 160}, "files": [{"sha": "c22047287e624a41c53b3bc34b0e18344ec21e57", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -8,13 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[legacy_exports];\n-\n-export foo;\n-\n use core::oldcomm::*;\n \n-fn foo<T: Owned Copy>(x: T) -> Port<T> {\n+pub fn foo<T: Owned Copy>(x: T) -> Port<T> {\n     let p = Port();\n     let c = Chan(&p);\n     do task::spawn() |copy c, copy x| {"}, {"sha": "61bbd433f7b3bfc71795a28cacad19f070d3e8a5", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -14,15 +14,13 @@ use to_str::*;\n use to_str::ToStr;\n \n mod kitty {\n-    #[legacy_exports];\n-\n-struct cat {\n-  priv mut meows : uint,\n-  mut how_hungry : int,\n-  name : ~str,\n-}\n+    pub struct cat {\n+      priv mut meows : uint,\n+      mut how_hungry : int,\n+      name : ~str,\n+    }\n \n-    impl cat : ToStr {\n+    pub impl cat : ToStr {\n        pure fn to_str() -> ~str { copy self.name }\n     }\n \n@@ -37,7 +35,7 @@ struct cat {\n \n     }\n \n-    impl cat {\n+    pub impl cat {\n         fn speak() { self.meow(); }\n \n         fn eat() -> bool {\n@@ -52,14 +50,14 @@ struct cat {\n             }\n         }\n     }\n-fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n-    cat {\n-        meows: in_x,\n-        how_hungry: in_y,\n-        name: in_name\n-    }\n-}\n \n+    pub fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n+        cat {\n+            meows: in_x,\n+            how_hungry: in_y,\n+            name: in_name\n+        }\n+    }\n }\n \n "}, {"sha": "197ad8402349ba25211eb3e3c94480ea95aace84", "filename": "src/test/auxiliary/issue-2631-a.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-2631-a.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -10,17 +10,15 @@\n \n #[link(name = \"req\")];\n #[crate_type = \"lib\"];\n-#[legacy_exports];\n \n extern mod std;\n \n-use dvec::*;\n-use dvec::DVec;\n+use core::dvec::*;\n use std::map::HashMap;\n \n-type header_map = HashMap<~str, @DVec<@~str>>;\n+pub type header_map = HashMap<~str, @DVec<@~str>>;\n \n // the unused ty param is necessary so this gets monomorphized\n-fn request<T: Copy>(req: header_map) {\n+pub fn request<T: Copy>(req: header_map) {\n   let _x = copy *(copy *req.get(~\"METHOD\"))[0u];\n }"}, {"sha": "530309536d9df153762207164b1d629b973481b0", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -12,10 +12,8 @@\n        vers = \"0.1\")];\n \n #[crate_type = \"lib\"];\n-#[legacy_exports];\n-export read, readMaybe;\n \n-trait read {\n+pub trait read {\n     static fn readMaybe(s: ~str) -> Option<self>;\n }\n \n@@ -35,7 +33,7 @@ impl bool: read {\n     }\n }\n \n-fn read<T: read Copy>(s: ~str) -> T {\n+pub fn read<T: read Copy>(s: ~str) -> T {\n     match read::readMaybe(s) {\n       Some(x) => x,\n       _ => fail ~\"read failed!\""}, {"sha": "2a1cce54783fa407a7e854561431e657348a6a65", "filename": "src/test/auxiliary/static_fn_inline_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_inline_xc_aux.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -16,7 +16,7 @@ pub mod num {\n }\n \n pub mod float {\n-    impl float: num::Num2 {\n+    impl float: ::num::Num2 {\n         #[inline]\n         static pure fn from_int2(n: int) -> float { return n as float;  }\n     }"}, {"sha": "40659da8dae1bccb923f914ece7ce30c624f28d3", "filename": "src/test/auxiliary/static_fn_trait_xc_aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic_fn_trait_xc_aux.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -5,7 +5,7 @@ pub mod num {\n }\n \n pub mod float {\n-    impl float: num::Num2 {\n+    impl float: ::num::Num2 {\n         static pure fn from_int2(n: int) -> float { return n as float;  }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "72000f2f0a9f0df5644a4dfa2499369be96b25be", "filename": "src/test/auxiliary/test_comm.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Fauxiliary%2Ftest_comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftest_comm.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -13,12 +13,8 @@\n \n   Could probably be more minimal.\n  */\n-#[legacy_exports];\n \n-use libc::size_t;\n-\n-export port;\n-export recv;\n+use core::libc::size_t;\n \n \n /**\n@@ -28,12 +24,12 @@ export recv;\n  * transmitted. If a port value is copied, both copies refer to the same\n  * port.  Ports may be associated with multiple `chan`s.\n  */\n-enum port<T: Owned> {\n+pub enum port<T: Owned> {\n     port_t(@port_ptr<T>)\n }\n \n /// Constructs a port\n-fn port<T: Owned>() -> port<T> {\n+pub fn port<T: Owned>() -> port<T> {\n     port_t(@port_ptr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n }\n \n@@ -74,11 +70,11 @@ fn port_ptr<T: Owned>(po: *rust_port) -> port_ptr<T> {\n  * Receive from a port.  If no data is available on the port then the\n  * task will block until data becomes available.\n  */\n-fn recv<T: Owned>(p: port<T>) -> T { recv_((**p).po) }\n+pub fn recv<T: Owned>(p: port<T>) -> T { recv_((**p).po) }\n \n \n /// Receive on a raw port pointer\n-fn recv_<T: Owned>(p: *rust_port) -> T {\n+pub fn recv_<T: Owned>(p: *rust_port) -> T {\n     let yield = 0;\n     let yieldp = ptr::addr_of(&yield);\n     let mut res;"}, {"sha": "2bd00ddc4ef14e8ce167a51de56892e34125e036", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -26,12 +26,12 @@ use std::serialize::{Encodable, Decodable};\n use std::prettyprint;\n use std::time;\n \n-fn test_prettyprint<A: Encodable<prettyprint::Encoder>>(\n+fn test_prettyprint<A: Encodable<prettyprint::Serializer>>(\n     a: &A,\n     expected: &~str\n ) {\n     let s = do io::with_str_writer |w| {\n-        a.encode(&prettyprint::Encoder(w))\n+        a.encode(&prettyprint::Serializer(w))\n     };\n     debug!(\"s == %?\", s);\n     assert s == *expected;"}, {"sha": "a439d2af8fc020a715e7179d97f458d5c20db355", "filename": "src/test/run-pass/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_capture_clause.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -18,7 +18,7 @@\n \n extern mod cci_capture_clause;\n \n-use oldcomm::recv;\n+use core::oldcomm::recv;\n \n fn main() {\n     cci_capture_clause::foo(()).recv()"}, {"sha": "eb3728f2c6fc3cdbf1d17079883567c459896f32", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n // xfail-fast\n-use to_str::*;\n-use to_str::ToStr;\n+use core::to_str::*;\n \n struct cat {\n   priv mut meows : uint,"}, {"sha": "bdde94f5ef0247d051149a4a07af61cd4c370bc6", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -9,17 +9,11 @@\n // except according to those terms.\n \n mod foo {\n-    #[legacy_exports];\n-    export x;\n-\n-    fn x() { bar::x(); }\n+    pub fn x() { bar::x(); }\n }\n \n mod bar {\n-    #[legacy_exports];\n-    export x;\n-\n-    fn x() { debug!(\"x\"); }\n+    pub fn x() { debug!(\"x\"); }\n }\n \n fn main() { foo::x(); }"}, {"sha": "577ac67dd6a69e4f6d82822d2f25070c564e619f", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -28,14 +28,12 @@ use oldcomm::recv;\n fn map(filename: ~str, emit: map_reduce::putter) { emit(filename, ~\"1\"); }\n \n mod map_reduce {\n-    #[legacy_exports];\n-    export putter;\n-    export mapper;\n-    export map_reduce;\n+    use std::map;\n+    use std::map::HashMap;\n \n-    type putter = fn@(~str, ~str);\n+    pub type putter = fn@(~str, ~str);\n \n-    type mapper = extern fn(~str, putter);\n+    pub type mapper = extern fn(~str, putter);\n \n     enum ctrl_proto { find_reducer(~[u8], Chan<int>), mapper_done, }\n \n@@ -70,7 +68,7 @@ mod map_reduce {\n         send(ctrl, mapper_done);\n     }\n \n-    fn map_reduce(inputs: ~[~str]) {\n+    pub fn map_reduce(inputs: ~[~str]) {\n         let ctrl = Port();\n \n         // This task becomes the master control task. It spawns others"}, {"sha": "eba69134c4f0a280dce9e84d0d5c0ec114a7fd60", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -12,7 +12,7 @@\n \n \n extern mod std;\n-use vec::*;\n+use core::vec::*;\n \n fn main() {\n     let mut v = from_elem(0u, 0);"}, {"sha": "01da68ec3426fd97a10bf1c7fea4ed0e3b78376c", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -21,26 +21,24 @@ extern mod rusti {\n #[cfg(target_os = \"macos\")]\n #[cfg(target_os = \"freebsd\")]\n mod m {\n-    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 4u;\n+    pub fn main() {\n+        assert ::rusti::pref_align_of::<u64>() == 8u;\n+        assert ::rusti::min_align_of::<u64>() == 4u;\n     }\n \n     #[cfg(target_arch = \"x86_64\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 8u;\n+    pub fn main() {\n+        assert ::rusti::pref_align_of::<u64>() == 8u;\n+        assert ::rusti::min_align_of::<u64>() == 8u;\n     }\n }\n \n #[cfg(target_os = \"win32\")]\n mod m {\n-    #[legacy_exports];\n     #[cfg(target_arch = \"x86\")]\n-    fn main() {\n-        assert rusti::pref_align_of::<u64>() == 8u;\n-        assert rusti::min_align_of::<u64>() == 8u;\n+    pub fn main() {\n+        assert ::rusti::pref_align_of::<u64>() == 8u;\n+        assert ::rusti::min_align_of::<u64>() == 8u;\n     }\n }"}, {"sha": "efa6d05f9da767f460fdde69801685d6eef9055b", "filename": "src/test/run-pass/issue-2214.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-2214.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2214.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -10,8 +10,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{c_double, c_int};\n-use f64::*;\n+use core::cast;\n+use core::libc::{c_double, c_int};\n+use core::f64::*;\n \n fn to_c_int(v: &mut int) -> &mut c_int unsafe {\n     cast::reinterpret_cast(&v)\n@@ -24,13 +25,12 @@ fn lgamma(n: c_double, value: &mut int) -> c_double {\n #[link_name = \"m\"]\n #[abi = \"cdecl\"]\n extern mod m {\n-    #[legacy_exports];\n     #[cfg(unix)]\n-    #[link_name=\"lgamma_r\"] fn lgamma(n: c_double, sign: &mut c_int)\n+    #[link_name=\"lgamma_r\"] pub fn lgamma(n: c_double, sign: &mut c_int)\n       -> c_double;\n     #[cfg(windows)]\n-    #[link_name=\"__lgamma_r\"] fn lgamma(n: c_double,\n-                                        sign: &mut c_int) -> c_double;\n+    #[link_name=\"__lgamma_r\"] pub fn lgamma(n: c_double,\n+                                            sign: &mut c_int) -> c_double;\n \n }\n "}, {"sha": "71afce93421e054fdfd3d13af465021bd51b3292", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 58, "deletions": 55, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -11,31 +11,30 @@\n // except according to those terms.\n \n // tjc: I don't know why\n-mod pipes {\n-    #[legacy_exports];\n-    use cast::{forget, transmute};\n+pub mod pipes {\n+    use core::cast::{forget, transmute};\n \n-    enum state {\n+    pub enum state {\n         empty,\n         full,\n         blocked,\n         terminated\n     }\n \n-    impl state : cmp::Eq {\n+    pub impl state : cmp::Eq {\n         pure fn eq(&self, other: &state) -> bool {\n             ((*self) as uint) == ((*other) as uint)\n         }\n         pure fn ne(&self, other: &state) -> bool { !(*self).eq(other) }\n     }\n \n-    type packet<T: Owned> = {\n+    pub type packet<T: Owned> = {\n         mut state: state,\n         mut blocked_task: Option<task::Task>,\n         mut payload: Option<T>\n     };\n \n-    fn packet<T: Owned>() -> *packet<T> unsafe {\n+    pub fn packet<T: Owned>() -> *packet<T> unsafe {\n         let p: *packet<T> = cast::transmute(~{\n             mut state: empty,\n             mut blocked_task: None::<task::Task>,\n@@ -46,31 +45,30 @@ mod pipes {\n \n     #[abi = \"rust-intrinsic\"]\n     mod rusti {\n-        #[legacy_exports];\n-      fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail; }\n-      fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail; }\n-      fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail; }\n+      pub fn atomic_xchg(_dst: &mut int, _src: int) -> int { fail; }\n+      pub fn atomic_xchg_acq(_dst: &mut int, _src: int) -> int { fail; }\n+      pub fn atomic_xchg_rel(_dst: &mut int, _src: int) -> int { fail; }\n     }\n \n     // We should consider moving this to core::unsafe, although I\n     // suspect graydon would want us to use void pointers instead.\n-    unsafe fn uniquify<T>(+x: *T) -> ~T {\n+    pub unsafe fn uniquify<T>(+x: *T) -> ~T {\n         unsafe { cast::transmute(move x) }\n     }\n \n-    fn swap_state_acq(+dst: &mut state, src: state) -> state {\n+    pub fn swap_state_acq(+dst: &mut state, src: state) -> state {\n         unsafe {\n             transmute(rusti::atomic_xchg_acq(transmute(move dst), src as int))\n         }\n     }\n \n-    fn swap_state_rel(+dst: &mut state, src: state) -> state {\n+    pub fn swap_state_rel(+dst: &mut state, src: state) -> state {\n         unsafe {\n             transmute(rusti::atomic_xchg_rel(transmute(move dst), src as int))\n         }\n     }\n \n-    fn send<T: Owned>(-p: send_packet<T>, -payload: T) {\n+    pub fn send<T: Owned>(-p: send_packet<T>, -payload: T) {\n         let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         assert (*p).payload.is_none();\n@@ -96,7 +94,7 @@ mod pipes {\n         }\n     }\n \n-    fn recv<T: Owned>(-p: recv_packet<T>) -> Option<T> {\n+    pub fn recv<T: Owned>(-p: recv_packet<T>) -> Option<T> {\n         let p = p.unwrap();\n         let p = unsafe { uniquify(p) };\n         loop {\n@@ -117,7 +115,7 @@ mod pipes {\n         }\n     }\n \n-    fn sender_terminate<T: Owned>(p: *packet<T>) {\n+    pub fn sender_terminate<T: Owned>(p: *packet<T>) {\n         let p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty | blocked => {\n@@ -134,7 +132,7 @@ mod pipes {\n         }\n     }\n \n-    fn receiver_terminate<T: Owned>(p: *packet<T>) {\n+    pub fn receiver_terminate<T: Owned>(p: *packet<T>) {\n         let p = unsafe { uniquify(p) };\n         match swap_state_rel(&mut (*p).state, terminated) {\n           empty => {\n@@ -151,11 +149,11 @@ mod pipes {\n         }\n     }\n \n-    struct send_packet<T: Owned> {\n+    pub struct send_packet<T: Owned> {\n         mut p: Option<*packet<T>>,\n     }\n \n-    impl<T: Owned> send_packet<T> : Drop {\n+    pub impl<T: Owned> send_packet<T> : Drop {\n         fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;\n@@ -165,25 +163,25 @@ mod pipes {\n         }\n     }\n \n-    impl<T: Owned> send_packet<T> {\n+    pub impl<T: Owned> send_packet<T> {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n             option::unwrap(move p)\n         }\n     }\n \n-    fn send_packet<T: Owned>(p: *packet<T>) -> send_packet<T> {\n+    pub fn send_packet<T: Owned>(p: *packet<T>) -> send_packet<T> {\n         send_packet {\n             p: Some(p)\n         }\n     }\n \n-    struct recv_packet<T: Owned> {\n+    pub struct recv_packet<T: Owned> {\n         mut p: Option<*packet<T>>,\n     }\n \n-    impl<T: Owned> recv_packet<T> : Drop {\n+    pub impl<T: Owned> recv_packet<T> : Drop {\n         fn finalize(&self) {\n             if self.p != None {\n                 let mut p = None;\n@@ -193,90 +191,95 @@ mod pipes {\n         }\n     }\n \n-    impl<T: Owned> recv_packet<T> {\n+    pub impl<T: Owned> recv_packet<T> {\n         fn unwrap() -> *packet<T> {\n             let mut p = None;\n             p <-> self.p;\n             option::unwrap(move p)\n         }\n     }\n \n-    fn recv_packet<T: Owned>(p: *packet<T>) -> recv_packet<T> {\n+    pub fn recv_packet<T: Owned>(p: *packet<T>) -> recv_packet<T> {\n         recv_packet {\n             p: Some(p)\n         }\n     }\n \n-    fn entangle<T: Owned>() -> (send_packet<T>, recv_packet<T>) {\n+    pub fn entangle<T: Owned>() -> (send_packet<T>, recv_packet<T>) {\n         let p = packet();\n         (send_packet(p), recv_packet(p))\n     }\n }\n \n-mod pingpong {\n-    #[legacy_exports];\n-    enum ping = pipes::send_packet<pong>;\n-    enum pong = pipes::send_packet<ping>;\n+pub mod pingpong {\n+    use core::cast;\n+    use core::ptr;\n \n-    fn liberate_ping(-p: ping) -> pipes::send_packet<pong> unsafe {\n-        let addr : *pipes::send_packet<pong> = match &p {\n+    pub enum ping = ::pipes::send_packet<pong>;\n+    pub enum pong = ::pipes::send_packet<ping>;\n+\n+    pub fn liberate_ping(-p: ping) -> ::pipes::send_packet<pong> unsafe {\n+        let addr : *::pipes::send_packet<pong> = match &p {\n           &ping(ref x) => { cast::transmute(ptr::addr_of(x)) }\n         };\n         let liberated_value = move *addr;\n         cast::forget(move p);\n         move liberated_value\n     }\n \n-    fn liberate_pong(-p: pong) -> pipes::send_packet<ping> unsafe {\n-        let addr : *pipes::send_packet<ping> = match &p {\n+    pub fn liberate_pong(-p: pong) -> ::pipes::send_packet<ping> unsafe {\n+        let addr : *::pipes::send_packet<ping> = match &p {\n           &pong(ref x) => { cast::transmute(ptr::addr_of(x)) }\n         };\n         let liberated_value = move *addr;\n         cast::forget(move p);\n         move liberated_value\n     }\n \n-    fn init() -> (client::ping, server::ping) {\n-        pipes::entangle()\n+    pub fn init() -> (client::ping, server::ping) {\n+        ::pipes::entangle()\n     }\n \n-    mod client {\n-        #[legacy_exports];\n-        type ping = pipes::send_packet<pingpong::ping>;\n-        type pong = pipes::recv_packet<pingpong::pong>;\n+    pub mod client {\n+        use core::option;\n+        use pingpong;\n+\n+        pub type ping = ::pipes::send_packet<pingpong::ping>;\n+        pub type pong = ::pipes::recv_packet<pingpong::pong>;\n \n-        fn do_ping(-c: ping) -> pong {\n-            let (sp, rp) = pipes::entangle();\n+        pub fn do_ping(-c: ping) -> pong {\n+            let (sp, rp) = ::pipes::entangle();\n \n-            pipes::send(move c, ping(move sp));\n+            ::pipes::send(move c, ping(move sp));\n             move rp\n         }\n \n-        fn do_pong(-c: pong) -> (ping, ()) {\n-            let packet = pipes::recv(move c);\n+        pub fn do_pong(-c: pong) -> (ping, ()) {\n+            let packet = ::pipes::recv(move c);\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n             (liberate_pong(option::unwrap(move packet)), ())\n         }\n     }\n \n-    mod server {\n-        #[legacy_exports];\n-        type ping = pipes::recv_packet<pingpong::ping>;\n-        type pong = pipes::send_packet<pingpong::pong>;\n+    pub mod server {\n+        use pingpong;\n+\n+        pub type ping = ::pipes::recv_packet<pingpong::ping>;\n+        pub type pong = ::pipes::send_packet<pingpong::pong>;\n \n-        fn do_ping(-c: ping) -> (pong, ()) {\n-            let packet = pipes::recv(move c);\n+        pub fn do_ping(-c: ping) -> (pong, ()) {\n+            let packet = ::pipes::recv(move c);\n             if packet.is_none() {\n                 fail ~\"sender closed the connection\"\n             }\n             (liberate_ping(option::unwrap(move packet)), ())\n         }\n \n-        fn do_pong(-c: pong) -> ping {\n-            let (sp, rp) = pipes::entangle();\n-            pipes::send(move c, pong(move sp));\n+        pub fn do_pong(-c: pong) -> ping {\n+            let (sp, rp) = ::pipes::entangle();\n+            ::pipes::send(move c, pong(move sp));\n             move rp\n         }\n     }"}, {"sha": "505b9b65512f2b19991af162d8b930b0598403f6", "filename": "src/test/run-pass/issue-3559", "status": "modified", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3559", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3559", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559?ref=f67c37263e9dd625ab7f91c661464b5f14a584af"}, {"sha": "da7746681f281d449c9f6b8cfd574e7165c78979", "filename": "src/test/run-pass/issue-3559.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3559.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3559.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -12,7 +12,8 @@\n \n // rustc --test map_to_str.rs && ./map_to_str\n extern mod std;\n-use io::{WriterUtil};\n+\n+use core::io::{WriterUtil};\n use std::map::*;\n \n #[cfg(test)]"}, {"sha": "66c2a4672b4b0c8a90a43acbb3cd1da147660217", "filename": "src/test/run-pass/issue-3656.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fissue-3656.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3656.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -13,7 +13,7 @@\n // Incorrect struct size computation in the FFI, because of not taking\n // the alignment of elements into account.\n \n-use libc::*;\n+use core::libc::*;\n \n struct KEYGEN {\n     hash_algorithm: [c_uint * 2],"}, {"sha": "c71b8f46f3eb1bd4decdde968be8563015b8d16b", "filename": "src/test/run-pass/pipe-pingpong-bounded.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-bounded.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -18,8 +18,7 @@\n // This was generated initially by the pipe compiler, but it's been\n // modified in hopefully straightforward ways.\n mod pingpong {\n-    #[legacy_exports];\n-    use pipes::*;\n+    use core::pipes::*;\n \n     type packets = {\n         // This is probably a resolve bug, I forgot to export packet,\n@@ -42,11 +41,10 @@ mod pingpong {\n             ptr::addr_of(&(data.ping))\n         }\n     }\n-    enum ping = server::pong;\n-    enum pong = client::ping;\n-    mod client {\n-        #[legacy_exports];\n-        fn ping(+pipe: ping) -> pong {\n+    pub enum ping = server::pong;\n+    pub enum pong = client::ping;\n+    pub mod client {\n+        pub fn ping(+pipe: ping) -> pong {\n             {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.pong)));\n@@ -56,16 +54,15 @@ mod pingpong {\n                 move c\n             }\n         }\n-        type ping = pipes::SendPacketBuffered<pingpong::ping,\n+        pub type ping = pipes::SendPacketBuffered<pingpong::ping,\n         pingpong::packets>;\n-        type pong = pipes::RecvPacketBuffered<pingpong::pong,\n+        pub type pong = pipes::RecvPacketBuffered<pingpong::pong,\n         pingpong::packets>;\n     }\n-    mod server {\n-        #[legacy_exports];\n-        type ping = pipes::RecvPacketBuffered<pingpong::ping,\n+    pub mod server {\n+        pub type ping = pipes::RecvPacketBuffered<pingpong::ping,\n         pingpong::packets>;\n-        fn pong(+pipe: pong) -> ping {\n+        pub fn pong(+pipe: pong) -> ping {\n             {\n                 let b = pipe.reuse_buffer();\n                 let s = SendPacketBuffered(ptr::addr_of(&(b.buffer.data.ping)));\n@@ -75,17 +72,16 @@ mod pingpong {\n                 move c\n             }\n         }\n-        type pong = pipes::SendPacketBuffered<pingpong::pong,\n+        pub type pong = pipes::SendPacketBuffered<pingpong::pong,\n         pingpong::packets>;\n     }\n }\n \n mod test {\n-    #[legacy_exports];\n     use pipes::recv;\n     use pingpong::{ping, pong};\n \n-    fn client(-chan: pingpong::client::ping) {\n+    pub fn client(-chan: pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(move chan); return;\n@@ -94,7 +90,7 @@ mod test {\n         log(error, \"Received pong\");\n     }\n     \n-    fn server(-chan: pingpong::server::ping) {\n+    pub fn server(-chan: pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(move chan); return;"}, {"sha": "700e583fa7524e72aa6b6956b37539f9647d911e", "filename": "src/test/run-pass/pipe-pingpong-proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-pingpong-proto.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -12,6 +12,7 @@\n \n // An example to make sure the protocol parsing syntax extension works.\n \n+use core::option;\n \n proto! pingpong (\n     ping:send {\n@@ -24,11 +25,10 @@ proto! pingpong (\n )\n \n mod test {\n-    #[legacy_exports];\n-    use pipes::recv;\n+    use core::pipes::recv;\n     use pingpong::{ping, pong};\n \n-    fn client(-chan: pingpong::client::ping) {\n+    pub fn client(-chan: pingpong::client::ping) {\n         use pingpong::client;\n \n         let chan = client::ping(move chan);\n@@ -37,7 +37,7 @@ mod test {\n         log(error, ~\"Received pong\");\n     }\n     \n-    fn server(-chan: pingpong::server::ping) {\n+    pub fn server(-chan: pingpong::server::ping) {\n         use pingpong::server;\n \n         let ping(chan) = recv(move chan);"}, {"sha": "c2751145e6d0e542f8948e161309df738b8a62f2", "filename": "src/test/run-pass/trait-static-method-overwriting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f67c37263e9dd625ab7f91c661464b5f14a584af/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-static-method-overwriting.rs?ref=f67c37263e9dd625ab7f91c661464b5f14a584af", "patch": "@@ -17,7 +17,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl Foo : base::HasNew<Foo> {\n+    pub impl Foo : ::base::HasNew<Foo> {\n         static pure fn new() -> Foo {\n \t\t\tunsafe { io::println(\"Foo\"); }\n             Foo { dummy: () }\n@@ -28,7 +28,7 @@ mod base {\n         dummy: (),\n     }\n \n-    pub impl Bar : base::HasNew<Bar> {\n+    pub impl Bar : ::base::HasNew<Bar> {\n         static pure fn new() -> Bar {\n \t\t\tunsafe { io::println(\"Bar\"); }\n             Bar { dummy: () }"}]}