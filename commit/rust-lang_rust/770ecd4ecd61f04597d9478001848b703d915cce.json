{"sha": "770ecd4ecd61f04597d9478001848b703d915cce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc3MGVjZDRlY2Q2MWYwNDU5N2Q5NDc4MDAxODQ4YjcwM2Q5MTVjY2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-29T21:48:47Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2017-12-29T21:48:47Z"}, "message": "Cleanup character classes", "tree": {"sha": "6ca644dbc10bb8c183cd174fcd035545ec42f7b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ca644dbc10bb8c183cd174fcd035545ec42f7b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/770ecd4ecd61f04597d9478001848b703d915cce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/770ecd4ecd61f04597d9478001848b703d915cce", "html_url": "https://github.com/rust-lang/rust/commit/770ecd4ecd61f04597d9478001848b703d915cce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/770ecd4ecd61f04597d9478001848b703d915cce/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "171baf4c4863f035384c6c63a5f0ce531b01cf9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/171baf4c4863f035384c6c63a5f0ce531b01cf9d", "html_url": "https://github.com/rust-lang/rust/commit/171baf4c4863f035384c6c63a5f0ce531b01cf9d"}], "stats": {"total": 104, "additions": 73, "deletions": 31}, "files": [{"sha": "49b9c527c102da3bc32809874b78dcbab478dbf0", "filename": "grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/grammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/grammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/grammar.ron?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -1,6 +1,8 @@\n Grammar(\n     syntax_kinds: [\n+        \"ERROR\",\n         \"IDENT\",\n+        \"UNDERSCORE\",\n         \"WHITESPACE\",\n     ]\n )\n\\ No newline at end of file"}, {"sha": "7cc050bde4547e3e5da9391378c8a2e4d8817139", "filename": "src/lexer/classes.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fclasses.rs?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -0,0 +1,22 @@\n+use unicode_xid::UnicodeXID;\n+\n+pub fn is_ident_start(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || c == '_'\n+        || (c > '\\x7f' && UnicodeXID::is_xid_start(c))\n+}\n+\n+pub fn is_ident_continue(c: char) -> bool {\n+    (c >= 'a' && c <= 'z')\n+        || (c >= 'A' && c <= 'Z')\n+        || (c >= '0' && c <= '9')\n+        || c == '_'\n+        || (c > '\\x7f' && UnicodeXID::is_xid_continue(c))\n+}\n+\n+pub fn is_whitespace(c: char) -> bool {\n+    //FIXME: use is_pattern_whitespace\n+    //https://github.com/behnam/rust-unic/issues/192\n+    c.is_whitespace()\n+}"}, {"sha": "dd3e2896d26d3caa73bf76052d9c6a8e12408abe", "filename": "src/lexer/mod.rs", "status": "modified", "additions": 11, "deletions": 28, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fmod.rs?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -1,11 +1,12 @@\n-use unicode_xid::UnicodeXID;\n-\n use {Token, SyntaxKind};\n use syntax_kinds::*;\n \n mod ptr;\n use self::ptr::Ptr;\n \n+mod classes;\n+use self::classes::*;\n+\n pub fn next_token(text: &str) -> Token {\n     assert!(!text.is_empty());\n     let mut ptr = Ptr::new(text);\n@@ -19,38 +20,20 @@ fn next_token_inner(c: char, ptr: &mut Ptr) -> SyntaxKind {\n     // Note: r as in r\" or r#\" is part of a raw string literal,\n     // b as in b' is part of a byte literal.\n     // They are not identifiers, and are handled further down.\n-    let ident_start = ident_start(c) && !string_literal_start(c, ptr.next(), ptr.nnext());\n+    let ident_start = is_ident_start(c) && !string_literal_start(c, ptr.next(), ptr.nnext());\n     if ident_start {\n-        loop {\n-            match ptr.next() {\n-                Some(c) if ident_continue(c) => {\n-                    ptr.bump();\n-                },\n-                _ => break,\n-            }\n-        }\n-        IDENT\n-    } else {\n-        WHITESPACE\n+        ptr.bump_while(is_ident_continue);\n+        return IDENT;\n     }\n-}\n \n-fn ident_start(c: char) -> bool {\n-    (c >= 'a' && c <= 'z')\n-        || (c >= 'A' && c <= 'Z')\n-        || c == '_'\n-        || (c > '\\x7f' && UnicodeXID::is_xid_start(c))\n-}\n+    if is_whitespace(c) {\n+        ptr.bump_while(is_whitespace);\n+        return WHITESPACE;\n+    }\n \n-fn ident_continue(c: char) -> bool {\n-    (c >= 'a' && c <= 'z')\n-        || (c >= 'A' && c <= 'Z')\n-        || (c >= '0' && c <= '9')\n-        || c == '_'\n-        || (c > '\\x7f' && UnicodeXID::is_xid_continue(c))\n+    return ERROR\n }\n \n-\n fn string_literal_start(c: char, c1: Option<char>, c2: Option<char>) -> bool {\n     match (c, c1, c2) {\n         ('r', Some('\"'), _) |"}, {"sha": "e8aa6f37b4531f4031ab9feae92870148ce324fb", "filename": "src/lexer/ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/src%2Flexer%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flexer%2Fptr.rs?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -32,6 +32,17 @@ impl<'s> Ptr<'s> {\n         Some(ch)\n     }\n \n+    pub fn bump_while<F: Fn(char) -> bool>(&mut self, pred: F) {\n+        loop {\n+            match self.next() {\n+                Some(c) if pred(c) => {\n+                    self.bump();\n+                },\n+                _ => return,\n+            }\n+        }\n+    }\n+\n     fn chars(&self) -> Chars {\n         self.text[self.len.0 as usize ..].chars()\n     }"}, {"sha": "b9b47a2ede108fc9033cec4047699bc52fd67719", "filename": "src/syntax_kinds.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/src%2Fsyntax_kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/src%2Fsyntax_kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsyntax_kinds.rs?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -1,11 +1,15 @@\n // Generated from grammar.ron\n use tree::{SyntaxKind, SyntaxInfo};\n \n-pub const IDENT: SyntaxKind = SyntaxKind(0);\n-pub const WHITESPACE: SyntaxKind = SyntaxKind(1);\n+pub const ERROR: SyntaxKind = SyntaxKind(0);\n+pub const IDENT: SyntaxKind = SyntaxKind(1);\n+pub const UNDERSCORE: SyntaxKind = SyntaxKind(2);\n+pub const WHITESPACE: SyntaxKind = SyntaxKind(3);\n \n-static INFOS: [SyntaxInfo; 2] = [\n+static INFOS: [SyntaxInfo; 4] = [\n+    SyntaxInfo { name: \"ERROR\" },\n     SyntaxInfo { name: \"IDENT\" },\n+    SyntaxInfo { name: \"UNDERSCORE\" },\n     SyntaxInfo { name: \"WHITESPACE\" },\n ];\n "}, {"sha": "08fce1418a73608e5513f8173cc4a30749e8c1ea", "filename": "tests/data/lexer/0002_whitespace.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/tests%2Fdata%2Flexer%2F0002_whitespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/tests%2Fdata%2Flexer%2F0002_whitespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0002_whitespace.rs?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -0,0 +1,4 @@\n+a b  c\n+d\n+\n+e\tf"}, {"sha": "4b9885e4a2340b522d6fbfec2e167ee22a00109f", "filename": "tests/data/lexer/0002_whitespace.txt", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/tests%2Fdata%2Flexer%2F0002_whitespace.txt", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/tests%2Fdata%2Flexer%2F0002_whitespace.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Flexer%2F0002_whitespace.txt?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -0,0 +1,12 @@\n+IDENT 1\n+WHITESPACE 1\n+IDENT 1\n+WHITESPACE 2\n+IDENT 1\n+WHITESPACE 1\n+IDENT 1\n+WHITESPACE 2\n+IDENT 1\n+WHITESPACE 1\n+IDENT 1\n+WHITESPACE 1"}, {"sha": "9cfec5309f98dc1f3bfa0bca2400367f01e282f8", "filename": "validation.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/770ecd4ecd61f04597d9478001848b703d915cce/validation.md", "raw_url": "https://github.com/rust-lang/rust/raw/770ecd4ecd61f04597d9478001848b703d915cce/validation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/validation.md?ref=770ecd4ecd61f04597d9478001848b703d915cce", "patch": "@@ -0,0 +1,4 @@\n+Fixmes:\n+\n+* Fix `is_whitespace`, add more test\n+"}]}