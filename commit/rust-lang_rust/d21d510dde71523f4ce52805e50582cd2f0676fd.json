{"sha": "d21d510dde71523f4ce52805e50582cd2f0676fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMWQ1MTBkZGU3MTUyM2Y0Y2U1MjgwNWU1MDU4MmNkMmYwNjc2ZmQ=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-11-25T16:05:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-25T16:05:10Z"}, "message": "Rollup merge of #56207 - SimonSapin:int_to_from_bytes, r=nagisa\n\nStabilize the int_to_from_bytes feature\n\nFixes #52963\n\nFCP to merge completed: https://github.com/rust-lang/rust/issues/52963#issuecomment-416548327", "tree": {"sha": "501ee5cd16e9f542619b2ca024ff8385ebd3663f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/501ee5cd16e9f542619b2ca024ff8385ebd3663f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d21d510dde71523f4ce52805e50582cd2f0676fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb+sg2CRBK7hj4Ov3rIwAAdHIIALLrR0S3Br4M85n6pXLf63pO\n72rIYjb79T40NLknw0/e++x1xyionO48P4fDpcO8dedDXldFW1EjseiN3kKx+aV9\nR9qNbA3wQKqQoQ3UabzkAhNLwHhy1PkVD72mo0bZT6M7Z+90OOlHm6QoFY8PVQ+l\nePP8bh57rnoEXRZoiCzleWiafRZjSwHmWpsMSLDj87hLD4xPQiDnxj/ejUMGhmO4\n+PC4MTf2XrKNn5wRWOvpgynlRqi2UcgA2kdtHG8sdkcxjez9M+DEV3dRbXpN56xM\nUMRXXLhlz3DDIxoPFEeHiGz/VdGFy9eH6qTXnrwvUeGxAGDPW4en50obGz/jQBk=\n=wucQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 501ee5cd16e9f542619b2ca024ff8385ebd3663f\nparent dcae83b6a3fd0e48bf28a377761dfba1bfd678ab\nparent 68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06\nauthor Pietro Albini <pietro@pietroalbini.org> 1543161910 +0100\ncommitter GitHub <noreply@github.com> 1543161910 +0100\n\nRollup merge of #56207 - SimonSapin:int_to_from_bytes, r=nagisa\n\nStabilize the int_to_from_bytes feature\n\nFixes #52963\n\nFCP to merge completed: https://github.com/rust-lang/rust/issues/52963#issuecomment-416548327\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d21d510dde71523f4ce52805e50582cd2f0676fd", "html_url": "https://github.com/rust-lang/rust/commit/d21d510dde71523f4ce52805e50582cd2f0676fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d21d510dde71523f4ce52805e50582cd2f0676fd/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab", "html_url": "https://github.com/rust-lang/rust/commit/dcae83b6a3fd0e48bf28a377761dfba1bfd678ab"}, {"sha": "68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06", "html_url": "https://github.com/rust-lang/rust/commit/68a26ec647147d70bcd7f0e7f56a0bf9fedb5f06"}], "stats": {"total": 52, "additions": 14, "deletions": 38}, "files": [{"sha": "9deae12482976cf75b9ddca0abb3a3f8ce11ddf3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 12, "deletions": 36, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=d21d510dde71523f4ce52805e50582cd2f0676fd", "patch": "@@ -1921,12 +1921,10 @@ big-endian (network) byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1941,12 +1939,10 @@ little-endian byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1969,16 +1965,14 @@ instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -1993,12 +1987,10 @@ big endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -2014,12 +2006,10 @@ little endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -2041,16 +2031,14 @@ appropriate instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3663,12 +3651,10 @@ big-endian (network) byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_be_bytes();\n assert_eq!(bytes, \", $be_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_be_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3683,12 +3669,10 @@ little-endian byte order.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_le_bytes();\n assert_eq!(bytes, \", $le_bytes, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_le_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3711,16 +3695,14 @@ instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let bytes = \", $swap_op, stringify!($SelfT), \".to_ne_bytes();\n assert_eq!(bytes, if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n@@ -3735,12 +3717,10 @@ big endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_be_bytes(\", $be_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_be_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3756,12 +3736,10 @@ little endian.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_le_bytes(\", $le_bytes, \");\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_le_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n@@ -3783,16 +3761,14 @@ appropriate instead.\n # Examples\n \n ```\n-#![feature(int_to_from_bytes)]\n-\n let value = \", stringify!($SelfT), \"::from_ne_bytes(if cfg!(target_endian = \\\"big\\\") {\n         \", $be_bytes, \"\n     } else {\n         \", $le_bytes, \"\n     });\n assert_eq!(value, \", $swap_op, \");\n ```\"),\n-            #[unstable(feature = \"int_to_from_bytes\", issue = \"52963\")]\n+            #[stable(feature = \"int_to_from_bytes\", since = \"1.32.0\")]\n             #[rustc_const_unstable(feature = \"const_int_conversion\")]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {"}, {"sha": "e199c43858521bbc8e3e70ad913824f03076ccfc", "filename": "src/test/run-pass/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-conversion.rs?ref=d21d510dde71523f4ce52805e50582cd2f0676fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(const_int_conversion, const_int_ops, reverse_bits, int_to_from_bytes)]\n+#![feature(const_int_conversion, const_int_ops, reverse_bits)]\n \n const REVERSE: u32 = 0x12345678_u32.reverse_bits();\n const FROM_BE_BYTES: i32 = i32::from_be_bytes([0x12, 0x34, 0x56, 0x78]);"}, {"sha": "2a20f0df15ca2630512b713ab87c8fafe55c0a16", "filename": "src/test/ui/consts/const-int-conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d21d510dde71523f4ce52805e50582cd2f0676fd/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-int-conversion.rs?ref=d21d510dde71523f4ce52805e50582cd2f0676fd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(reverse_bits, int_to_from_bytes)]\n+#![feature(reverse_bits)]\n \n fn main() {\n     let x: &'static i32 = &(5_i32.reverse_bits());"}]}