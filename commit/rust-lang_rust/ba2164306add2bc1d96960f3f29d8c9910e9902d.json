{"sha": "ba2164306add2bc1d96960f3f29d8c9910e9902d", "node_id": "C_kwDOAAsO6NoAKGJhMjE2NDMwNmFkZDJiYzFkOTY5NjBmM2YyOWQ4Yzk5MTBlOTkwMmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-29T04:02:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-29T04:02:41Z"}, "message": "Rollup merge of #109367 - nnethercote:opt-fast-rejection, r=compiler-errors\n\nStreamline fast rejection\n\nSome reworkings of this code that make it a little nicer.\n\nr? `@lcnr`", "tree": {"sha": "a4de1d1357ad8c2683677f1557abee5bb5248ff5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4de1d1357ad8c2683677f1557abee5bb5248ff5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba2164306add2bc1d96960f3f29d8c9910e9902d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkI7hhCRBK7hj4Ov3rIwAAxEoIABQlzOO+L88MqXez2qT9PYUb\n3ig9pumrhA6NEOIYuvB89y/yP2d/j3Hq56nYU12GgUyorS0wBnkOCZimE6kUgPO3\ndKhfOC9GAWr8uKQu93rR8DoQ0JAjzJG/4CL61SdQaxivSw1lW0IbgK7/ut9xoRO/\nZ4C2ABVMwTYVM50Fg414UFRQUiGqUKCufNdcmvJrhEewyq9iW2gmOMUQIpZKM316\np++sLYbfHsklk7l+DMqHijSqQ37eTCguCmsjeehLeOk6mlFBIo3SeSQl/X7n359+\npLNpMqA/SqX7A3S/EbJ0e9Inn6EfE3s7R+21gcWprNVjNBCJk+nMta7SRVO1wOQ=\n=CSYI\n-----END PGP SIGNATURE-----\n", "payload": "tree a4de1d1357ad8c2683677f1557abee5bb5248ff5\nparent 23813d872070f3faeec5eded7c43850fbbb149e7\nparent 03923661afd565efbd9d000c1bc2eaa98206e2c8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1680062561 +0200\ncommitter GitHub <noreply@github.com> 1680062561 +0200\n\nRollup merge of #109367 - nnethercote:opt-fast-rejection, r=compiler-errors\n\nStreamline fast rejection\n\nSome reworkings of this code that make it a little nicer.\n\nr? `@lcnr`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba2164306add2bc1d96960f3f29d8c9910e9902d", "html_url": "https://github.com/rust-lang/rust/commit/ba2164306add2bc1d96960f3f29d8c9910e9902d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba2164306add2bc1d96960f3f29d8c9910e9902d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23813d872070f3faeec5eded7c43850fbbb149e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23813d872070f3faeec5eded7c43850fbbb149e7", "html_url": "https://github.com/rust-lang/rust/commit/23813d872070f3faeec5eded7c43850fbbb149e7"}, {"sha": "03923661afd565efbd9d000c1bc2eaa98206e2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/03923661afd565efbd9d000c1bc2eaa98206e2c8", "html_url": "https://github.com/rust-lang/rust/commit/03923661afd565efbd9d000c1bc2eaa98206e2c8"}], "stats": {"total": 73, "additions": 29, "deletions": 44}, "files": [{"sha": "0a6e94248e6e69ba4b12937589b0c57d6535eb45", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -1,6 +1,6 @@\n use crate::mir::Mutability;\n use crate::ty::subst::GenericArgKind;\n-use crate::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n+use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeVisitableExt};\n use rustc_hir::def_id::DefId;\n use std::fmt::Debug;\n use std::hash::Hash;\n@@ -188,22 +188,24 @@ pub struct DeepRejectCtxt {\n }\n \n impl DeepRejectCtxt {\n-    pub fn generic_args_may_unify<'tcx>(\n+    pub fn substs_refs_may_unify<'tcx>(\n         self,\n-        obligation_arg: ty::GenericArg<'tcx>,\n-        impl_arg: ty::GenericArg<'tcx>,\n+        obligation_substs: SubstsRef<'tcx>,\n+        impl_substs: SubstsRef<'tcx>,\n     ) -> bool {\n-        match (obligation_arg.unpack(), impl_arg.unpack()) {\n-            // We don't fast reject based on regions for now.\n-            (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => true,\n-            (GenericArgKind::Type(obl), GenericArgKind::Type(imp)) => {\n-                self.types_may_unify(obl, imp)\n-            }\n-            (GenericArgKind::Const(obl), GenericArgKind::Const(imp)) => {\n-                self.consts_may_unify(obl, imp)\n+        iter::zip(obligation_substs, impl_substs).all(|(obl, imp)| {\n+            match (obl.unpack(), imp.unpack()) {\n+                // We don't fast reject based on regions for now.\n+                (GenericArgKind::Lifetime(_), GenericArgKind::Lifetime(_)) => true,\n+                (GenericArgKind::Type(obl), GenericArgKind::Type(imp)) => {\n+                    self.types_may_unify(obl, imp)\n+                }\n+                (GenericArgKind::Const(obl), GenericArgKind::Const(imp)) => {\n+                    self.consts_may_unify(obl, imp)\n+                }\n+                _ => bug!(\"kind mismatch: {obl} {imp}\"),\n             }\n-            _ => bug!(\"kind mismatch: {obligation_arg} {impl_arg}\"),\n-        }\n+        })\n     }\n \n     pub fn types_may_unify<'tcx>(self, obligation_ty: Ty<'tcx>, impl_ty: Ty<'tcx>) -> bool {\n@@ -258,9 +260,7 @@ impl DeepRejectCtxt {\n             },\n             ty::Adt(obl_def, obl_substs) => match k {\n                 &ty::Adt(impl_def, impl_substs) => {\n-                    obl_def == impl_def\n-                        && iter::zip(obl_substs, impl_substs)\n-                            .all(|(obl, imp)| self.generic_args_may_unify(obl, imp))\n+                    obl_def == impl_def && self.substs_refs_may_unify(obl_substs, impl_substs)\n                 }\n                 _ => false,\n             },"}, {"sha": "91b56fe3522ca6e6ebecfad9457d17c1482097b8", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty::ProjectionPredicate;\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_middle::ty::{ToPredicate, TypeVisitableExt};\n use rustc_span::{sym, DUMMY_SP};\n-use std::iter;\n \n impl<'tcx> EvalCtxt<'_, 'tcx> {\n     #[instrument(level = \"debug\", skip(self), ret)]\n@@ -144,9 +143,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n         let goal_trait_ref = goal.predicate.projection_ty.trait_ref(tcx);\n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(goal_trait_ref.substs, impl_trait_ref.skip_binder().substs) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "f522a8f7e65d191d016e9d1745bc3b399d82e9e8", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -1,7 +1,5 @@\n //! Dealing with trait goals, i.e. `T: Trait<'a, U>`.\n \n-use std::iter;\n-\n use super::{assembly, EvalCtxt, SolverMode};\n use rustc_hir::def_id::DefId;\n use rustc_hir::LangItem;\n@@ -41,9 +39,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n \n         let impl_trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n         let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        if iter::zip(goal.predicate.trait_ref.substs, impl_trait_ref.skip_binder().substs)\n-            .any(|(goal, imp)| !drcx.generic_args_may_unify(goal, imp))\n-        {\n+        if !drcx.substs_refs_may_unify(\n+            goal.predicate.trait_ref.substs,\n+            impl_trait_ref.skip_binder().substs,\n+        ) {\n             return Err(NoSolution);\n         }\n "}, {"sha": "d360158fdf818421abb3fb7288acab49ae316667", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -79,8 +79,9 @@ pub fn overlapping_impls(\n     let impl1_ref = tcx.impl_trait_ref(impl1_def_id);\n     let impl2_ref = tcx.impl_trait_ref(impl2_def_id);\n     let may_overlap = match (impl1_ref, impl2_ref) {\n-        (Some(a), Some(b)) => iter::zip(a.skip_binder().substs, b.skip_binder().substs)\n-            .all(|(arg1, arg2)| drcx.generic_args_may_unify(arg1, arg2)),\n+        (Some(a), Some(b)) => {\n+            drcx.substs_refs_may_unify(a.skip_binder().substs, b.skip_binder().substs)\n+        }\n         (None, None) => {\n             let self_ty1 = tcx.type_of(impl1_def_id).skip_binder();\n             let self_ty2 = tcx.type_of(impl2_def_id).skip_binder();"}, {"sha": "47a351590b1de3ef1953ffa3f0745565a31adb75", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -11,7 +11,7 @@ use hir::LangItem;\n use rustc_hir as hir;\n use rustc_infer::traits::ObligationCause;\n use rustc_infer::traits::{Obligation, SelectionError, TraitObligation};\n-use rustc_middle::ty::fast_reject::TreatProjections;\n+use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams, TreatProjections};\n use rustc_middle::ty::{self, Ty, TypeVisitableExt};\n \n use crate::traits;\n@@ -344,6 +344,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             return;\n         }\n \n+        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n+        let obligation_substs = obligation.predicate.skip_binder().trait_ref.substs;\n         self.tcx().for_each_relevant_impl(\n             obligation.predicate.def_id(),\n             obligation.predicate.skip_binder().trait_ref.self_ty(),\n@@ -352,7 +354,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // consider a \"quick reject\". This avoids creating more types\n                 // and so forth that we need to.\n                 let impl_trait_ref = self.tcx().impl_trait_ref(impl_def_id).unwrap();\n-                if self.fast_reject_trait_refs(obligation, &impl_trait_ref.0) {\n+                if !drcx.substs_refs_may_unify(obligation_substs, impl_trait_ref.0.substs) {\n                     return;\n                 }\n                 if self.reject_fn_ptr_impls("}, {"sha": "3ed3dd2d20d84062f42a43458e7ca7ba948f630b", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba2164306add2bc1d96960f3f29d8c9910e9902d/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ba2164306add2bc1d96960f3f29d8c9910e9902d", "patch": "@@ -45,7 +45,6 @@ use rustc_infer::traits::TraitEngineExt;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::NotConstEvaluatable;\n-use rustc_middle::ty::fast_reject::{DeepRejectCtxt, TreatParams};\n use rustc_middle::ty::fold::BottomUpFolder;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::SubstsRef;\n@@ -2533,19 +2532,6 @@ impl<'tcx> SelectionContext<'_, 'tcx> {\n         Ok(Normalized { value: impl_substs, obligations: nested_obligations })\n     }\n \n-    fn fast_reject_trait_refs(\n-        &mut self,\n-        obligation: &TraitObligation<'tcx>,\n-        impl_trait_ref: &ty::TraitRef<'tcx>,\n-    ) -> bool {\n-        // We can avoid creating type variables and doing the full\n-        // substitution if we find that any of the input types, when\n-        // simplified, do not match.\n-        let drcx = DeepRejectCtxt { treat_obligation_params: TreatParams::ForLookup };\n-        iter::zip(obligation.predicate.skip_binder().trait_ref.substs, impl_trait_ref.substs)\n-            .any(|(obl, imp)| !drcx.generic_args_may_unify(obl, imp))\n-    }\n-\n     /// Normalize `where_clause_trait_ref` and try to match it against\n     /// `obligation`. If successful, return any predicates that\n     /// result from the normalization."}]}