{"sha": "65a2be49539375502ca95c8da455f50f580df2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTJiZTQ5NTM5Mzc1NTAyY2E5NWM4ZGE0NTVmNTBmNTgwZGYyZTM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T14:01:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T14:01:56Z"}, "message": "complete struct literals", "tree": {"sha": "f5e07db7d5ddbc920a5d768f516bf3b6097ad817", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5e07db7d5ddbc920a5d768f516bf3b6097ad817"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a2be49539375502ca95c8da455f50f580df2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a2be49539375502ca95c8da455f50f580df2e3", "html_url": "https://github.com/rust-lang/rust/commit/65a2be49539375502ca95c8da455f50f580df2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a2be49539375502ca95c8da455f50f580df2e3/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666303faf3c8b4215fde884451688084e298d6a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/666303faf3c8b4215fde884451688084e298d6a8", "html_url": "https://github.com/rust-lang/rust/commit/666303faf3c8b4215fde884451688084e298d6a8"}], "stats": {"total": 78, "additions": 78, "deletions": 0}, "files": [{"sha": "d92e01bfb2d78c044586ee5ae988085385bc4571", "filename": "crates/ra_ide_api/src/completion.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion.rs?ref=65a2be49539375502ca95c8da455f50f580df2e3", "patch": "@@ -2,6 +2,7 @@ mod completion_item;\n mod completion_context;\n \n mod complete_dot;\n+mod complete_struct_literal;\n mod complete_fn_param;\n mod complete_keyword;\n mod complete_snippet;\n@@ -59,6 +60,7 @@ pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Opti\n     complete_path::complete_path(&mut acc, &ctx);\n     complete_scope::complete_scope(&mut acc, &ctx);\n     complete_dot::complete_dot(&mut acc, &ctx);\n+    complete_struct_literal::complete_struct_literal(&mut acc, &ctx);\n     complete_postfix::complete_postfix(&mut acc, &ctx);\n     Some(acc)\n }"}, {"sha": "893056c2b933cb644c9688d896393ca57eb4fdda", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=65a2be49539375502ca95c8da455f50f580df2e3", "patch": "@@ -0,0 +1,64 @@\n+use hir::{Ty, AdtDef, Docs};\n+\n+use crate::completion::{CompletionContext, Completions, CompletionItem, CompletionItemKind};\n+use crate::completion::completion_item::CompletionKind;\n+\n+/// Complete dot accesses, i.e. fields or methods (currently only fields).\n+pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionContext) {\n+    let (function, struct_lit) = match (&ctx.function, ctx.struct_lit_syntax) {\n+        (Some(function), Some(struct_lit)) => (function, struct_lit),\n+        _ => return,\n+    };\n+    let infer_result = function.infer(ctx.db);\n+    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n+    let expr = match syntax_mapping.node_expr(struct_lit.into()) {\n+        Some(expr) => expr,\n+        None => return,\n+    };\n+    let ty = infer_result[expr].clone();\n+    let (adt, substs) = match ty {\n+        Ty::Adt { def_id, ref substs, .. } => (def_id, substs),\n+        _ => return,\n+    };\n+    match adt {\n+        AdtDef::Struct(s) => {\n+            for field in s.fields(ctx.db) {\n+                CompletionItem::new(\n+                    CompletionKind::Reference,\n+                    ctx.source_range(),\n+                    field.name(ctx.db).to_string(),\n+                )\n+                .kind(CompletionItemKind::Field)\n+                .detail(field.ty(ctx.db).subst(substs).to_string())\n+                .set_documentation(field.docs(ctx.db))\n+                .add_to(acc);\n+            }\n+        }\n+\n+        // TODO unions\n+        AdtDef::Enum(_) => (),\n+    };\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::completion::*;\n+    use crate::completion::completion_item::check_completion;\n+\n+    fn check_ref_completion(name: &str, code: &str) {\n+        check_completion(name, code, CompletionKind::Reference);\n+    }\n+\n+    #[test]\n+    fn test_struct_literal_field() {\n+        check_ref_completion(\n+            \"test_struct_literal_field\",\n+            r\"\n+            struct A { the_field: u32 }\n+            fn foo() {\n+               A { the<|> }\n+            }\n+            \",\n+        );\n+    }\n+}"}, {"sha": "d351be054b4abce02fc984fc3f339a05e99d844d", "filename": "crates/ra_ide_api/src/completion/completion_context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=65a2be49539375502ca95c8da455f50f580df2e3", "patch": "@@ -21,6 +21,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) function: Option<hir::Function>,\n     pub(super) function_syntax: Option<&'a ast::FnDef>,\n     pub(super) use_item_syntax: Option<&'a ast::UseItem>,\n+    pub(super) struct_lit_syntax: Option<&'a ast::StructLit>,\n     pub(super) is_param: bool,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n@@ -55,6 +56,7 @@ impl<'a> CompletionContext<'a> {\n             function: None,\n             function_syntax: None,\n             use_item_syntax: None,\n+            struct_lit_syntax: None,\n             is_param: false,\n             is_trivial_path: false,\n             path_prefix: None,\n@@ -108,6 +110,10 @@ impl<'a> CompletionContext<'a> {\n     }\n     fn classify_name_ref(&mut self, original_file: &'a SourceFile, name_ref: &ast::NameRef) {\n         let name_range = name_ref.syntax().range();\n+        if name_ref.syntax().parent().and_then(ast::NamedField::cast).is_some() {\n+            self.struct_lit_syntax = find_node_at_offset(original_file.syntax(), self.offset);\n+        }\n+\n         let top_node =\n             name_ref.syntax().ancestors().take_while(|it| it.range() == name_range).last().unwrap();\n "}, {"sha": "56fb7c20cfafea2e5c3839945294fa366eef521f", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a2be49539375502ca95c8da455f50f580df2e3/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=65a2be49539375502ca95c8da455f50f580df2e3", "patch": "@@ -724,6 +724,12 @@ impl LiteralExpr {\n     }\n }\n \n+impl NamedField {\n+    pub fn parent_struct_lit(&self) -> &StructLit {\n+        self.syntax().ancestors().find_map(StructLit::cast).unwrap()\n+    }\n+}\n+\n impl BindPat {\n     pub fn is_mutable(&self) -> bool {\n         self.syntax().children().any(|n| n.kind() == MUT_KW)"}]}