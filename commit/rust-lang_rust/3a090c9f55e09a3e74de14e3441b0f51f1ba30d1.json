{"sha": "3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "node_id": "C_kwDOAAsO6NoAKDNhMDkwYzlmNTVlMDlhM2U3NGRlMTRlMzQ0MWIwZjUxZjFiYTMwZDE", "commit": {"author": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-02-12T17:43:49Z"}, "committer": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-02-12T17:43:49Z"}, "message": "Merge remote-tracking branch 'upstream/master' into only_used_in_recursion", "tree": {"sha": "55a09c3730946d5f8e46be599b60b942674f8e37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55a09c3730946d5f8e46be599b60b942674f8e37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErNAvdl6JhsmcOZwWK4aJjMsqVIYFAmIH8dUACgkQK4aJjMsq\nVIbdng//Xn61rwlk9uBNCKew1qYGDbTB1BT1fSdp4D9ZzXr3rHVE/46YISnesiYH\nHnj4jMWlCv+dzbK8fy0WaWw/lmPrFoIGLATlcb5aWd3eGIH+9ChWOqxOKJyZgIlg\nFtmLwLA/BLyPHJPep+MUdniPXTziHF2KJw1kgf2TMNf0z1GlFjjLM/i6ZL7Jo5ud\nAy8Sl1j5rgxrOqeQzAKbt1XTulUz64OOLS5KhDjRMBI1shvSqqZk3dImyaM1ZsMo\nzOCRnCgW+BGleZRrBSKhLnMTNXrG7ZJjiIIP/Y2FgOPEqgu3s4x00NIAv5GdGk49\nWH/CeIjYixRyCesvnNwFN98Kt96EuiH9n5tV9XLCCfBhWp9ip6lX90Bah1/exJFw\n6vmOZcNrseysXTtTaU9X0YhSozTrjnKi1MYAdQ59gbAWZnlxrr6VfD/YlsVK3x72\n6pEoK53g9ADr+LzNdWxzfKIwXaZ8aolOnydS7ZljN9Fd93PhE9JHhlbhKAxSIE3G\nKPLf7PoUidkPj/u6fW8GxRuUd9HUKvbEA4S0ShBciVVzS+z6V0L0ExmxDkQrx11W\nHBpyCWrYHRfxYDMe/8NAg8ANd7Qigq5GYi0D9bLkaVEDHxvc8iEn1n0fm4KKIrSe\n1h0tav2stZGAPujca7rjHMSNkTnUf1MGg1Uks7pvc9D9BPs7GJM=\n=N+g8\n-----END PGP SIGNATURE-----", "payload": "tree 55a09c3730946d5f8e46be599b60b942674f8e37\nparent 9055f34b719b4a9f57ca8de1d7848312b7b74574\nparent c37d6eed067eb6fb4c126b4ac3c09499483071ec\nauthor Jaeyong Sung <jaeyong0201@gmail.com> 1644687829 +0900\ncommitter Jaeyong Sung <jaeyong0201@gmail.com> 1644687829 +0900\n\nMerge remote-tracking branch 'upstream/master' into only_used_in_recursion\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "html_url": "https://github.com/rust-lang/rust/commit/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/comments", "author": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9055f34b719b4a9f57ca8de1d7848312b7b74574", "url": "https://api.github.com/repos/rust-lang/rust/commits/9055f34b719b4a9f57ca8de1d7848312b7b74574", "html_url": "https://github.com/rust-lang/rust/commit/9055f34b719b4a9f57ca8de1d7848312b7b74574"}, {"sha": "c37d6eed067eb6fb4c126b4ac3c09499483071ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/c37d6eed067eb6fb4c126b4ac3c09499483071ec", "html_url": "https://github.com/rust-lang/rust/commit/c37d6eed067eb6fb4c126b4ac3c09499483071ec"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "7277e4080c5c0763ffa132a28a48dc4fd394486d", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{get_trait_def_id, is_automatically_derived, is_lint_allowed, match_def_path};\n+use clippy_utils::{is_automatically_derived, is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n@@ -12,6 +12,7 @@ use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -196,7 +197,7 @@ fn check_hash_peq<'tcx>(\n     if_chain! {\n         if let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait();\n         if let Some(def_id) = trait_ref.trait_def_id();\n-        if match_def_path(cx, def_id, &paths::HASH);\n+        if cx.tcx.is_diagnostic_item(sym::Hash, def_id);\n         then {\n             // Look for the PartialEq implementations for `ty`\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {\n@@ -247,7 +248,7 @@ fn check_ord_partial_ord<'tcx>(\n     ord_is_automatically_derived: bool,\n ) {\n     if_chain! {\n-        if let Some(ord_trait_def_id) = get_trait_def_id(cx, &paths::ORD);\n+        if let Some(ord_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Ord);\n         if let Some(partial_ord_trait_def_id) = cx.tcx.lang_items().partial_ord_trait();\n         if let Some(def_id) = &trait_ref.trait_def_id();\n         if *def_id == ord_trait_def_id;"}, {"sha": "09318f74527c2bf16485add7c10f1cf70981f30e", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -1,15 +1,14 @@\n+use clippy_utils::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet_with_applicability;\n-use clippy_utils::ty::match_type;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n-\n-use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::paths;\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -46,7 +45,7 @@ impl<'tcx> LateLintPass<'tcx> for DurationSubsec {\n         if_chain! {\n             if let ExprKind::Binary(Spanned { node: BinOpKind::Div, .. }, left, right) = expr.kind;\n             if let ExprKind::MethodCall(method_path, args, _) = left.kind;\n-            if match_type(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), &paths::DURATION);\n+            if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&args[0]).peel_refs(), sym::Duration);\n             if let Some((Constant::Int(divisor), _)) = constant(cx, cx.typeck_results(), right);\n             then {\n                 let suggested_fn = match (method_path.ident.as_str(), divisor) {"}, {"sha": "b2b9889f5dc74c21431c6bac8c98d842849044b7", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{get_trait_def_id, higher, match_def_path, path_def_id, paths};\n+use clippy_utils::{higher, match_def_path, path_def_id, paths};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -229,9 +229,12 @@ fn complete_infinite_iter(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(last) && args.len() == 1 {\n-                let not_double_ended = get_trait_def_id(cx, &paths::DOUBLE_ENDED_ITERATOR).map_or(false, |id| {\n-                    !implements_trait(cx, cx.typeck_results().expr_ty(&args[0]), id, &[])\n-                });\n+                let not_double_ended = cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::DoubleEndedIterator)\n+                    .map_or(false, |id| {\n+                        !implements_trait(cx, cx.typeck_results().expr_ty(&args[0]), id, &[])\n+                    });\n                 if not_double_ended {\n                     return is_infinite(cx, &args[0]);\n                 }"}, {"sha": "65d1f440b76391031109a7dbb7a1049cb9d869b3", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -1,10 +1,11 @@\n use clippy_utils::consts::{constant_simple, Constant};\n use clippy_utils::diagnostics::span_lint;\n-use clippy_utils::{match_def_path, match_trait_method, paths};\n+use clippy_utils::{match_trait_method, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n use std::cmp::Ordering;\n \n declare_clippy_lint! {\n@@ -73,14 +74,10 @@ fn min_max<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<(MinMax, Cons\n                 cx.typeck_results()\n                     .qpath_res(qpath, path.hir_id)\n                     .opt_def_id()\n-                    .and_then(|def_id| {\n-                        if match_def_path(cx, def_id, &paths::CMP_MIN) {\n-                            fetch_const(cx, args, MinMax::Min)\n-                        } else if match_def_path(cx, def_id, &paths::CMP_MAX) {\n-                            fetch_const(cx, args, MinMax::Max)\n-                        } else {\n-                            None\n-                        }\n+                    .and_then(|def_id| match cx.tcx.get_diagnostic_name(def_id) {\n+                        Some(sym::cmp_min) => fetch_const(cx, args, MinMax::Min),\n+                        Some(sym::cmp_max) => fetch_const(cx, args, MinMax::Max),\n+                        _ => None,\n                     })\n             } else {\n                 None"}, {"sha": "7c06906293b167f373356698b2d9af026c33e581", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n-use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, GenericArg, GenericBounds, GenericParamKind};\n use rustc_hir::{HirId, Lifetime, MutTy, Mutability, Node, QPath, TyKind};\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::BORROWED_BOX;\n \n@@ -89,7 +89,7 @@ fn is_any_trait(cx: &LateContext<'_>, t: &hir::Ty<'_>) -> bool {\n         if let Some(trait_did) = traits[0].trait_ref.trait_def_id();\n         // Only Send/Sync can be used as additional traits, so it is enough to\n         // check only the first trait.\n-        if match_def_path(cx, trait_did, &paths::ANY_TRAIT);\n+        if cx.tcx.is_diagnostic_item(sym::Any, trait_did);\n         then {\n             return true;\n         }"}, {"sha": "b9c5d28992477a5afbde8a0aef9dc814a2842b2f", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a090c9f55e09a3e74de14e3441b0f51f1ba30d1/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=3a090c9f55e09a3e74de14e3441b0f51f1ba30d1", "patch": "@@ -4,7 +4,6 @@\n //! Whenever possible, please consider diagnostic items over hardcoded paths.\n //! See <https://github.com/rust-lang/rust-clippy/issues/5393> for more information.\n \n-pub const ANY_TRAIT: [&str; 3] = [\"core\", \"any\", \"Any\"];\n #[cfg(feature = \"internal\")]\n pub const APPLICABILITY: [&str; 2] = [\"rustc_lint_defs\", \"Applicability\"];\n #[cfg(feature = \"internal\")]\n@@ -32,8 +31,6 @@ pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"\n pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n-pub const CMP_MAX: [&str; 3] = [\"core\", \"cmp\", \"max\"];\n-pub const CMP_MIN: [&str; 3] = [\"core\", \"cmp\", \"min\"];\n pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"std\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n@@ -42,9 +39,7 @@ pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\n pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n pub const DIR_BUILDER: [&str; 3] = [\"std\", \"fs\", \"DirBuilder\"];\n pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n-pub const DOUBLE_ENDED_ITERATOR: [&str; 4] = [\"core\", \"iter\", \"traits\", \"DoubleEndedIterator\"];\n pub const DROP: [&str; 3] = [\"core\", \"mem\", \"drop\"];\n-pub const DURATION: [&str; 3] = [\"core\", \"time\", \"Duration\"];\n #[cfg(feature = \"internal\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n #[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n@@ -59,15 +54,13 @@ pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n #[allow(clippy::invalid_paths)] // `check_path` does not seem to work for macros\n pub const FORMAT_ARGS_MACRO: [&str; 4] = [\"core\", \"macros\", \"builtin\", \"format_args\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n-pub const FROM_ITERATOR: [&str; 5] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\"];\n pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\", \"from_iter\"];\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n #[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCREADEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncReadExt\"];\n #[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCWRITEEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncWriteExt\"];\n-pub const HASH: [&str; 3] = [\"core\", \"hash\", \"Hash\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_INSERT: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"insert\"];"}]}