{"sha": "14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZGJhYzVmZDc4YTc2NTkyYmNmNGI5ZmJiNzFkYTNiYTEwMmUxZWM=", "commit": {"author": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-05T20:59:41Z"}, "committer": {"name": "Kamal Marhubi", "email": "kamal@marhubi.com", "date": "2016-02-09T03:52:44Z"}, "message": "config: Use write_mode from config\n\nThis commit tidies up handling of `write_mode` by setting it in the\nconfig at the start, and removing the `write_mode` parameter threaded\nthroughout the formatting process.", "tree": {"sha": "c28cc92739a5dc1c2a89f553a81c247659b26c10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28cc92739a5dc1c2a89f553a81c247659b26c10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "html_url": "https://github.com/rust-lang/rust/commit/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/comments", "author": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kamalmarhubi", "id": 50936, "node_id": "MDQ6VXNlcjUwOTM2", "avatar_url": "https://avatars.githubusercontent.com/u/50936?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kamalmarhubi", "html_url": "https://github.com/kamalmarhubi", "followers_url": "https://api.github.com/users/kamalmarhubi/followers", "following_url": "https://api.github.com/users/kamalmarhubi/following{/other_user}", "gists_url": "https://api.github.com/users/kamalmarhubi/gists{/gist_id}", "starred_url": "https://api.github.com/users/kamalmarhubi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kamalmarhubi/subscriptions", "organizations_url": "https://api.github.com/users/kamalmarhubi/orgs", "repos_url": "https://api.github.com/users/kamalmarhubi/repos", "events_url": "https://api.github.com/users/kamalmarhubi/events{/privacy}", "received_events_url": "https://api.github.com/users/kamalmarhubi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fb71d0d7db336a2f3fd8860011cabdf2908d424", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fb71d0d7db336a2f3fd8860011cabdf2908d424", "html_url": "https://github.com/rust-lang/rust/commit/0fb71d0d7db336a2f3fd8860011cabdf2908d424"}], "stats": {"total": 183, "additions": 79, "deletions": 104}, "files": [{"sha": "8a393ba399da24977b4aac1c2abed24f3544e280", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -24,13 +24,14 @@ use std::env;\n use std::fs::{self, File};\n use std::io::{self, ErrorKind, Read, Write};\n use std::path::{Path, PathBuf};\n+use std::str::FromStr;\n \n use getopts::{Matches, Options};\n \n /// Rustfmt operations.\n enum Operation {\n     /// Format files and their child modules.\n-    Format(Vec<PathBuf>, WriteMode, Option<PathBuf>),\n+    Format(Vec<PathBuf>, Option<PathBuf>),\n     /// Print the help message.\n     Help,\n     // Print version information\n@@ -40,7 +41,7 @@ enum Operation {\n     /// Invalid program input, including reason.\n     InvalidInput(String),\n     /// No file specified, read from stdin\n-    Stdin(String, WriteMode, Option<PathBuf>),\n+    Stdin(String, Option<PathBuf>),\n }\n \n /// Try to find a project file in the given directory and its parents. Returns the path of a the\n@@ -109,9 +110,19 @@ fn match_cli_path_or_file(config_path: Option<PathBuf>,\n     resolve_config(input_file)\n }\n \n-fn update_config(config: &mut Config, matches: &Matches) {\n+fn update_config(config: &mut Config, matches: &Matches) -> Result<(), String> {\n     config.verbose = matches.opt_present(\"verbose\");\n     config.skip_children = matches.opt_present(\"skip-children\");\n+\n+    let write_mode = matches.opt_str(\"write-mode\");\n+    match matches.opt_str(\"write-mode\").map(|wm| WriteMode::from_str(&wm)) {\n+        None => Ok(()),\n+        Some(Ok(write_mode)) => {\n+            config.write_mode = write_mode;\n+            Ok(())\n+        }\n+        Some(Err(_)) => Err(format!(\"Invalid write-mode: {}\", write_mode.expect(\"cannot happen\"))),\n+    }\n }\n \n fn execute() -> i32 {\n@@ -161,15 +172,18 @@ fn execute() -> i32 {\n             Config::print_docs();\n             0\n         }\n-        Operation::Stdin(input, write_mode, config_path) => {\n+        Operation::Stdin(input, config_path) => {\n             // try to read config from local directory\n-            let (config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n-                                  .expect(\"Error resolving config\");\n+            let (mut config, _) = match_cli_path_or_file(config_path, &env::current_dir().unwrap())\n+                                      .expect(\"Error resolving config\");\n \n-            run_from_stdin(input, write_mode, &config);\n+            // write_mode is always Plain for Stdin.\n+            config.write_mode = WriteMode::Plain;\n+\n+            run_from_stdin(input, &config);\n             0\n         }\n-        Operation::Format(files, write_mode, config_path) => {\n+        Operation::Format(files, config_path) => {\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -198,8 +212,11 @@ fn execute() -> i32 {\n                     config = config_tmp;\n                 }\n \n-                update_config(&mut config, &matches);\n-                run(&file, write_mode, &config);\n+                if let Err(e) = update_config(&mut config, &matches) {\n+                    print_usage(&opts, &e);\n+                    return 1;\n+                }\n+                run(&file, &config);\n             }\n             0\n         }\n@@ -267,21 +284,10 @@ fn determine_operation(matches: &Matches) -> Operation {\n             Err(e) => return Operation::InvalidInput(e.to_string()),\n         }\n \n-        // WriteMode is always plain for Stdin\n-        return Operation::Stdin(buffer, WriteMode::Plain, config_path);\n+        return Operation::Stdin(buffer, config_path);\n     }\n \n-    let write_mode = match matches.opt_str(\"write-mode\") {\n-        Some(mode) => {\n-            match mode.parse() {\n-                Ok(mode) => mode,\n-                Err(..) => return Operation::InvalidInput(\"Unrecognized write mode\".into()),\n-            }\n-        }\n-        None => WriteMode::Default,\n-    };\n-\n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n-    Operation::Format(files, write_mode, config_path)\n+    Operation::Format(files, config_path)\n }"}, {"sha": "da686ffac95f3daafc17fe2931fabb44ebe62d25", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -121,9 +121,6 @@ configuration_option_enum! { ReportTactic:\n }\n \n configuration_option_enum! { WriteMode:\n-    // Used internally to represent when no option is given\n-    // Treated as Replace.\n-    Default,\n     // Backsup the original file and overwrites the orignal.\n     Replace,\n     // Overwrites original file without backup.\n@@ -349,6 +346,6 @@ create_config! {\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n     match_wildcard_trailing_comma: bool, true, \"Put a trailing comma after a wildcard arm\";\n-    write_mode: WriteMode, WriteMode::Default,\n+    write_mode: WriteMode, WriteMode::Replace,\n         \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";\n }"}, {"sha": "34a30e948997ee6d8f148c0c66259e88f8a56a49", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -427,7 +427,7 @@ impl Rewrite for ast::Block {\n             return Some(user_str);\n         }\n \n-        let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n+        let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n         visitor.block_indent = context.block_indent;\n \n         let prefix = match self.rules {\n@@ -954,9 +954,7 @@ impl Rewrite for ast::Arm {\n         let attr_str = if !attrs.is_empty() {\n             // We only use this visitor for the attributes, should we use it for\n             // more?\n-            let mut attr_visitor = FmtVisitor::from_codemap(context.parse_session,\n-                                                            context.config,\n-                                                            None);\n+            let mut attr_visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n             attr_visitor.block_indent = context.block_indent;\n             attr_visitor.last_pos = attrs[0].span.lo;\n             if attr_visitor.visit_attrs(attrs) {"}, {"sha": "f41915b8cff5f0074cab228ae4bb10c621f272e1", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -31,18 +31,14 @@ pub fn append_newlines(file_map: &mut FileMap) {\n     }\n }\n \n-pub fn write_all_files<T>(file_map: &FileMap,\n-                          mut out: T,\n-                          mode: WriteMode,\n-                          config: &Config)\n-                          -> Result<(), io::Error>\n+pub fn write_all_files<T>(file_map: &FileMap, mut out: T, config: &Config) -> Result<(), io::Error>\n     where T: Write\n {\n-    output_header(&mut out, mode).ok();\n+    output_header(&mut out, config.write_mode).ok();\n     for filename in file_map.keys() {\n-        try!(write_file(&file_map[filename], filename, &mut out, mode, config));\n+        try!(write_file(&file_map[filename], filename, &mut out, config));\n     }\n-    output_footer(&mut out, mode).ok();\n+    output_footer(&mut out, config.write_mode).ok();\n \n     Ok(())\n }\n@@ -87,7 +83,6 @@ pub fn write_system_newlines<T>(writer: T,\n pub fn write_file<T>(text: &StringBuffer,\n                      filename: &str,\n                      out: &mut T,\n-                     mode: WriteMode,\n                      config: &Config)\n                      -> Result<Option<String>, io::Error>\n     where T: Write\n@@ -114,7 +109,7 @@ pub fn write_file<T>(text: &StringBuffer,\n         Ok(make_diff(&ori, &fmt, 3))\n     }\n \n-    match mode {\n+    match config.write_mode {\n         WriteMode::Replace => {\n             if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 if fmt != ori {\n@@ -157,9 +152,6 @@ pub fn write_file<T>(text: &StringBuffer,\n                            |line_num| format!(\"\\nDiff at line {}:\", line_num));\n             }\n         }\n-        WriteMode::Default => {\n-            unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n-        }\n         WriteMode::Checkstyle => {\n             let diff = try!(create_diff(filename, text, config));\n             try!(output_checkstyle_file(out, filename, diff));"}, {"sha": "d7c16c4561c24a68ebd2a7c363957bea3180e097", "filename": "src/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -530,7 +530,7 @@ pub fn format_impl(context: &RewriteContext, item: &ast::Item, offset: Indent) -\n         let open_pos = try_opt!(snippet.find_uncommented(\"{\")) + 1;\n \n         if !items.is_empty() || contains_comment(&snippet[open_pos..]) {\n-            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config, None);\n+            let mut visitor = FmtVisitor::from_codemap(context.parse_session, context.config);\n             visitor.block_indent = context.block_indent.block_indent(context.config);\n             visitor.last_pos = item.span.lo + BytePos(open_pos as u32);\n "}, {"sha": "ee671cf0baa25e85cc2ef429317a440c3485d070", "filename": "src/lib.rs", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -39,7 +39,7 @@ use std::fmt;\n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n use visitor::FmtVisitor;\n-use config::{Config, WriteMode};\n+use config::Config;\n \n #[macro_use]\n mod utils;\n@@ -264,8 +264,7 @@ impl fmt::Display for FormatReport {\n fn fmt_ast(krate: &ast::Crate,\n            parse_session: &ParseSess,\n            main_file: &Path,\n-           config: &Config,\n-           mode: WriteMode)\n+           config: &Config)\n            -> FileMap {\n     let mut file_map = FileMap::new();\n     for (path, module) in modules::list_files(krate, parse_session.codemap()) {\n@@ -276,7 +275,7 @@ fn fmt_ast(krate: &ast::Crate,\n         if config.verbose {\n             println!(\"Formatting {}\", path);\n         }\n-        let mut visitor = FmtVisitor::from_codemap(parse_session, config, Some(mode));\n+        let mut visitor = FmtVisitor::from_codemap(parse_session, config);\n         visitor.format_separate_mod(module);\n         file_map.insert(path.to_owned(), visitor.buffer);\n     }\n@@ -366,7 +365,7 @@ pub fn fmt_lines(file_map: &mut FileMap, config: &Config) -> FormatReport {\n     report\n }\n \n-pub fn format_string(input: String, config: &Config, mode: WriteMode) -> FileMap {\n+pub fn format_string(input: String, config: &Config) -> FileMap {\n     let path = \"stdin\";\n     let mut parse_session = ParseSess::new();\n     let krate = parse::parse_crate_from_source_str(path.to_owned(),\n@@ -383,7 +382,7 @@ pub fn format_string(input: String, config: &Config, mode: WriteMode) -> FileMap\n     let mut file_map = FileMap::new();\n \n     // do the actual formatting\n-    let mut visitor = FmtVisitor::from_codemap(&parse_session, config, Some(mode));\n+    let mut visitor = FmtVisitor::from_codemap(&parse_session, config);\n     visitor.format_separate_mod(&krate.module);\n \n     // append final newline\n@@ -393,15 +392,15 @@ pub fn format_string(input: String, config: &Config, mode: WriteMode) -> FileMap\n     file_map\n }\n \n-pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n+pub fn format(file: &Path, config: &Config) -> FileMap {\n     let mut parse_session = ParseSess::new();\n     let krate = parse::parse_crate_from_file(file, Vec::new(), &parse_session);\n \n     // Suppress error output after parsing.\n     let emitter = Box::new(EmitterWriter::new(Box::new(Vec::new()), None));\n     parse_session.span_diagnostic.handler = Handler::with_emitter(false, emitter);\n \n-    let mut file_map = fmt_ast(&krate, &parse_session, file, config, mode);\n+    let mut file_map = fmt_ast(&krate, &parse_session, file, config);\n \n     // For some reason, the codemap does not include terminating\n     // newlines so we must add one on for each file. This is sad.\n@@ -410,39 +409,25 @@ pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n     file_map\n }\n \n-// Make sure that we are using the correct WriteMode,\n-// preferring what is passed as an argument\n-fn check_write_mode(arg: WriteMode, config: WriteMode) -> WriteMode {\n-    match (arg, config) {\n-        (WriteMode::Default, WriteMode::Default) => WriteMode::Replace,\n-        (WriteMode::Default, mode) => mode,\n-        (mode, _) => mode,\n-    }\n-}\n-\n-// write_mode determines what happens to the result of running rustfmt, see\n-// WriteMode.\n-pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n-    let mode = check_write_mode(write_mode, config.write_mode);\n-    let mut result = format(file, config, mode);\n+pub fn run(file: &Path, config: &Config) {\n+    let mut result = format(file, config);\n \n     print!(\"{}\", fmt_lines(&mut result, config));\n     let out = stdout();\n-    let write_result = filemap::write_all_files(&result, out, mode, config);\n+    let write_result = filemap::write_all_files(&result, out, config);\n \n     if let Err(msg) = write_result {\n         println!(\"Error writing files: {}\", msg);\n     }\n }\n \n // Similar to run, but takes an input String instead of a file to format\n-pub fn run_from_stdin(input: String, write_mode: WriteMode, config: &Config) {\n-    let mode = check_write_mode(write_mode, config.write_mode);\n-    let mut result = format_string(input, config, mode);\n+pub fn run_from_stdin(input: String, config: &Config) {\n+    let mut result = format_string(input, config);\n     fmt_lines(&mut result, config);\n \n     let mut out = stdout();\n-    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, mode, config);\n+    let write_result = filemap::write_file(&result[\"stdin\"], \"stdin\", &mut out, config);\n \n     if let Err(msg) = write_result {\n         panic!(\"Error writing to stdout: {}\", msg);"}, {"sha": "092cc0093f170c5d506f91a9676c480a29e0a720", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -103,14 +103,9 @@ impl<'a> FmtVisitor<'a> {\n                   .collect()\n         }\n \n-        let replaced = match self.write_mode {\n-            Some(mode) => {\n-                match mode {\n-                    WriteMode::Coverage => replace_chars(old_snippet),\n-                    _ => old_snippet.to_owned(),\n-                }\n-            }\n-            None => old_snippet.to_owned(),\n+        let replaced = match self.config.write_mode {\n+            WriteMode::Coverage => replace_chars(old_snippet),\n+            _ => old_snippet.to_owned(),\n         };\n         let snippet = &*replaced;\n "}, {"sha": "f53ed2246d523dace5955224392faf8dcd2c1bfb", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -17,7 +17,7 @@ use strings::string_buffer::StringBuffer;\n \n use Indent;\n use utils;\n-use config::{Config, WriteMode};\n+use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;\n@@ -31,7 +31,6 @@ pub struct FmtVisitor<'a> {\n     // FIXME: use an RAII util or closure for indenting\n     pub block_indent: Indent,\n     pub config: &'a Config,\n-    pub write_mode: Option<WriteMode>,\n }\n \n impl<'a> FmtVisitor<'a> {\n@@ -380,10 +379,7 @@ impl<'a> FmtVisitor<'a> {\n         self.last_pos = span.hi;\n     }\n \n-    pub fn from_codemap(parse_session: &'a ParseSess,\n-                        config: &'a Config,\n-                        mode: Option<WriteMode>)\n-                        -> FmtVisitor<'a> {\n+    pub fn from_codemap(parse_session: &'a ParseSess, config: &'a Config) -> FmtVisitor<'a> {\n         FmtVisitor {\n             parse_session: parse_session,\n             codemap: parse_session.codemap(),\n@@ -394,7 +390,6 @@ impl<'a> FmtVisitor<'a> {\n                 alignment: 0,\n             },\n             config: config,\n-            write_mode: mode,\n         }\n     }\n "}, {"sha": "497583f9d672c85a0ebf40dce50b7ab4e08da518", "filename": "tests/system.rs", "status": "modified", "additions": 23, "deletions": 16, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=14dbac5fd78a76592bcf4b9fbb71da3ba102e1ec", "patch": "@@ -44,7 +44,7 @@ fn system_tests() {\n     // Turn a DirEntry into a String that represents the relative path to the\n     // file.\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, WriteMode::Default);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -57,7 +57,7 @@ fn system_tests() {\n fn coverage_tests() {\n     let files = fs::read_dir(\"tests/coverage-source\").expect(\"Couldn't read source dir\");\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, WriteMode::Coverage);\n+    let (_reports, count, fails) = check_files(files, Some(WriteMode::Coverage));\n \n     println!(\"Ran {} tests in coverage mode.\", count);\n     assert!(fails == 0, \"{} tests failed\", fails);\n@@ -67,19 +67,23 @@ fn coverage_tests() {\n fn checkstyle_test() {\n     let filename = \"tests/source/fn-single-line.rs\";\n     let expected_filename = \"tests/writemode/checkstyle.xml\";\n-    assert_output(filename, expected_filename, WriteMode::Checkstyle);\n+    assert_output(filename, expected_filename, Some(WriteMode::Checkstyle));\n }\n \n \n // Helper function for comparing the results of rustfmt\n // to a known output file generated by one of the write modes.\n-fn assert_output(source: &str, expected_filename: &str, write_mode: WriteMode) {\n-    let config = read_config(&source);\n+fn assert_output(source: &str, expected_filename: &str, write_mode: Option<WriteMode>) {\n     let file_map = run_rustfmt(source.to_string(), write_mode);\n \n+    let mut config = read_config(&source);\n+    if let Some(write_mode) = write_mode {\n+        config.write_mode = write_mode;\n+    }\n+\n     // Populate output by writing to a vec.\n     let mut out = vec![];\n-    let _ = filemap::write_all_files(&file_map, &mut out, write_mode, &config);\n+    let _ = filemap::write_all_files(&file_map, &mut out, &config);\n     let output = String::from_utf8(out).unwrap();\n \n     let mut expected_file = fs::File::open(&expected_filename).expect(\"Couldn't open target\");\n@@ -104,7 +108,7 @@ fn idempotence_tests() {\n     let files = fs::read_dir(\"tests/target\")\n                     .expect(\"Couldn't read target dir\")\n                     .map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, WriteMode::Default);\n+    let (_reports, count, fails) = check_files(files, None);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -122,7 +126,7 @@ fn self_tests() {\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n \n-    let (reports, count, fails) = check_files(files, WriteMode::Default);\n+    let (reports, count, fails) = check_files(files, None);\n     let mut warnings = 0;\n \n     // Display results.\n@@ -141,7 +145,7 @@ fn self_tests() {\n \n // For each file, run rustfmt and collect the output.\n // Returns the number of files checked and the number of failures.\n-fn check_files<I>(files: I, write_mode: WriteMode) -> (Vec<FormatReport>, u32, u32)\n+fn check_files<I>(files: I, write_mode: Option<WriteMode>) -> (Vec<FormatReport>, u32, u32)\n     where I: Iterator<Item = String>\n {\n     let mut count = 0;\n@@ -192,13 +196,16 @@ fn read_config(filename: &str) -> Config {\n }\n \n // Simulate run()\n-fn run_rustfmt(filename: String, write_mode: WriteMode) -> FileMap {\n-    let config = read_config(&filename);\n-    format(Path::new(&filename), &config, write_mode)\n+fn run_rustfmt(filename: String, write_mode: Option<WriteMode>) -> FileMap {\n+    let mut config = read_config(&filename);\n+    if let Some(write_mode) = write_mode {\n+        config.write_mode = write_mode;\n+    }\n+    format(Path::new(&filename), &config)\n }\n \n pub fn idempotent_check(filename: String,\n-                        write_mode: WriteMode)\n+                        write_mode: Option<WriteMode>)\n                         -> Result<FormatReport, HashMap<String, Vec<Mismatch>>> {\n     let sig_comments = read_significant_comments(&filename);\n     let config = read_config(&filename);\n@@ -266,7 +273,7 @@ fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n // TODO: needs a better name, more explanation.\n fn handle_result(result: HashMap<String, String>,\n                  target: Option<&str>,\n-                 write_mode: WriteMode)\n+                 write_mode: Option<WriteMode>)\n                  -> Result<(), HashMap<String, Vec<Mismatch>>> {\n     let mut failures = HashMap::new();\n \n@@ -292,10 +299,10 @@ fn handle_result(result: HashMap<String, String>,\n }\n \n // Map source file paths to their target paths.\n-fn get_target(file_name: &str, target: Option<&str>, write_mode: WriteMode) -> String {\n+fn get_target(file_name: &str, target: Option<&str>, write_mode: Option<WriteMode>) -> String {\n     let file_path = Path::new(file_name);\n     let (source_path_prefix, target_path_prefix) = match write_mode {\n-        WriteMode::Coverage => {\n+        Some(WriteMode::Coverage) => {\n             (Path::new(\"tests/coverage-source/\"),\n              \"tests/coverage-target/\")\n         }"}]}