{"sha": "8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNjlkMmYyNjZiNWU1ZjIxZDljYzg0NmIwYjhiOGRhYTE4MTJkY2M=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-15T00:34:18Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-11-15T00:34:50Z"}, "message": "Track character and byte positions together in the parser", "tree": {"sha": "bd3c033738fdaad9d929ce921ad8f17b90f12167", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd3c033738fdaad9d929ce921ad8f17b90f12167"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "html_url": "https://github.com/rust-lang/rust/commit/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f67bfe97389a256fc95216c29a2b8a066ee16a2c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f67bfe97389a256fc95216c29a2b8a066ee16a2c", "html_url": "https://github.com/rust-lang/rust/commit/f67bfe97389a256fc95216c29a2b8a066ee16a2c"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "fa01a15af5a4bc4f79450e878992dff42f184827", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "patch": "@@ -184,20 +184,20 @@ pub struct FileMap {\n pub impl FileMap {\n     static fn new_w_substr(+filename: FileName, +substr: FileSubstr,\n                            src: @~str,\n-                           +start_pos_ch: CharPos, +start_pos_byte: BytePos)\n+                           +start_pos: FilePos)\n         -> FileMap {\n         return FileMap {\n             name: filename, substr: substr, src: src,\n-            start_pos: FilePos {ch: start_pos_ch, byte: start_pos_byte},\n-            mut lines: ~[FilePos {ch: start_pos_ch, byte: start_pos_byte}]\n+            start_pos: start_pos,\n+            mut lines: ~[start_pos]\n         };\n     }\n \n     static fn new(+filename: FileName, src: @~str,\n-                  +start_pos_ch: CharPos, +start_pos_byte: BytePos)\n+                  +start_pos: FilePos)\n         -> FileMap {\n         return FileMap::new_w_substr(filename, FssNone, src,\n-                                     start_pos_ch, start_pos_byte);\n+                                     start_pos);\n     }\n \n     fn next_line(@self, +chpos: CharPos, +byte_pos: BytePos) {"}, {"sha": "fbd67e6ebce1be2b02c45073a7f5d229f36fe548", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "patch": "@@ -20,16 +20,15 @@ use util::interner;\n use diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n use lexer::{reader, string_reader};\n use parse::token::{ident_interner, mk_ident_interner};\n-use codemap::{CodeMap, FileMap, CharPos, BytePos};\n+use codemap::{CodeMap, FileMap, CharPos, BytePos, FilePos};\n \n type parse_sess = @{\n     cm: @codemap::CodeMap,\n     mut next_id: node_id,\n     span_diagnostic: span_handler,\n     interner: @ident_interner,\n-    // these two must be kept up to date\n-    mut chpos: CharPos,\n-    mut byte_pos: BytePos\n+    // must be kept up to date\n+    mut pos: FilePos\n };\n \n fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n@@ -38,7 +37,10 @@ fn new_parse_sess(demitter: Option<emitter>) -> parse_sess {\n              mut next_id: 1,\n              span_diagnostic: mk_span_handler(mk_handler(demitter), cm),\n              interner: mk_ident_interner(),\n-             mut chpos: CharPos(0u), mut byte_pos: BytePos(0u)};\n+             mut pos: FilePos {\n+                 ch: CharPos(0u),\n+                 byte: BytePos(0u)\n+             }};\n }\n \n fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n@@ -47,7 +49,10 @@ fn new_parse_sess_special_handler(sh: span_handler, cm: @codemap::CodeMap)\n              mut next_id: 1,\n              span_diagnostic: sh,\n              interner: mk_ident_interner(),\n-             mut chpos: CharPos(0u), mut byte_pos: BytePos(0u)};\n+             mut pos: FilePos {\n+                 ch: CharPos(0u),\n+                 byte: BytePos(0u)\n+             }};\n }\n \n fn parse_crate_from_file(input: &Path, cfg: ast::crate_cfg,\n@@ -71,8 +76,7 @@ fn parse_crate_from_crate_file(input: &Path, cfg: ast::crate_cfg,\n     let leading_attrs = p.parse_inner_attrs_and_next();\n     let { inner: crate_attrs, next: first_cdir_attr } = leading_attrs;\n     let cdirs = p.parse_crate_directives(token::EOF, first_cdir_attr);\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     let cx = @{sess: sess, cfg: /* FIXME (#2543) */ copy p.cfg};\n     let companionmod = input.filestem().map(|s| Path(*s));\n     let (m, attrs) = eval::eval_crate_directives_to_mod(\n@@ -92,8 +96,7 @@ fn parse_crate_from_source_file(input: &Path, cfg: ast::crate_cfg,\n     let (p, rdr) = new_parser_etc_from_file(sess, cfg, input,\n                                             parser::SOURCE_FILE);\n     let r = p.parse_crate_mod(cfg);\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     return r;\n }\n \n@@ -103,8 +106,7 @@ fn parse_crate_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                                                   codemap::FssNone, source);\n     let r = p.parse_crate_mod(cfg);\n     p.abort_if_errors();\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     return r;\n }\n \n@@ -114,8 +116,7 @@ fn parse_expr_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                                                   codemap::FssNone, source);\n     let r = p.parse_expr();\n     p.abort_if_errors();\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     return r;\n }\n \n@@ -126,8 +127,7 @@ fn parse_item_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                                                   codemap::FssNone, source);\n     let r = p.parse_item(attrs);\n     p.abort_if_errors();\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     return r;\n }\n \n@@ -138,8 +138,7 @@ fn parse_stmt_from_source_str(name: ~str, source: @~str, cfg: ast::crate_cfg,\n                                                   codemap::FssNone, source);\n     let r = p.parse_stmt(attrs);\n     p.abort_if_errors();\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     return r;\n }\n \n@@ -156,8 +155,7 @@ fn parse_from_source_str<T>(f: fn (p: Parser) -> T,\n         p.reader.fatal(~\"expected end-of-string\");\n     }\n     p.abort_if_errors();\n-    sess.chpos = rdr.chpos;\n-    sess.byte_pos = sess.byte_pos + rdr.pos;\n+    eval::update_parse_sess_position(&sess, &rdr);\n     move r\n }\n \n@@ -174,7 +172,7 @@ fn new_parser_etc_from_source_str(sess: parse_sess, cfg: ast::crate_cfg,\n                                   source: @~str) -> (Parser, string_reader) {\n     let ftype = parser::SOURCE_FILE;\n     let filemap = @FileMap::new_w_substr\n-        (name, ss, source, sess.chpos, sess.byte_pos);\n+        (name, ss, source, sess.pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n                                         sess.interner);\n@@ -199,7 +197,7 @@ fn new_parser_etc_from_file(sess: parse_sess, cfg: ast::crate_cfg,\n     }\n     let src = @result::unwrap(res);\n     let filemap = @FileMap::new(path.to_str(), src,\n-                                sess.chpos, sess.byte_pos);\n+                                sess.pos);\n     sess.cm.files.push(filemap);\n     let srdr = lexer::new_string_reader(sess.span_diagnostic, filemap,\n                                         sess.interner);"}, {"sha": "ba36e6f88e21158819829aaab981d5434ccffa59", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "patch": "@@ -292,9 +292,13 @@ fn gather_comments_and_literals(span_diagnostic: diagnostic::span_handler,\n    {cmnts: ~[cmnt], lits: ~[lit]} {\n     let src = @str::from_bytes(srdr.read_whole_stream());\n     let itr = parse::token::mk_fake_ident_interner();\n-    let rdr = lexer::new_low_level_string_reader\n-        (span_diagnostic, @FileMap::new(path, src,\n-                                        CharPos(0u), BytePos(0u)), itr);\n+    let filemap = @FileMap::new(path, src,\n+                                FilePos {\n+                                    ch: CharPos(0u),\n+                                    byte: BytePos(0u)\n+                                });\n+    let rdr = lexer::new_low_level_string_reader(\n+        span_diagnostic, filemap, itr);\n \n     let mut comments: ~[cmnt] = ~[];\n     let mut literals: ~[lit] = ~[];"}, {"sha": "bfbec5c530f7054d98f2d98dfd5c27615e7989cc", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=8069d2f266b5e5f21d9cc846b0b8b8daa1812dcc", "patch": "@@ -2,6 +2,7 @@ use parser::{Parser, SOURCE_FILE};\n use attr::parser_attr;\n \n export eval_crate_directives_to_mod;\n+export update_parse_sess_position;\n \n type ctx =\n     @{sess: parse::parse_sess,\n@@ -66,14 +67,20 @@ fn parse_companion_mod(cx: ctx, prefix: &Path, suffix: &Option<Path>)\n                                                 modpath, SOURCE_FILE);\n         let inner_attrs = p0.parse_inner_attrs_and_next();\n         let m0 = p0.parse_mod_items(token::EOF, inner_attrs.next);\n-        cx.sess.chpos = r0.chpos;\n-        cx.sess.byte_pos = cx.sess.byte_pos + r0.pos;\n+        update_parse_sess_position(&cx.sess, &r0);\n         return (m0.view_items, m0.items, inner_attrs.inner);\n     } else {\n         return (~[], ~[], ~[]);\n     }\n }\n \n+fn update_parse_sess_position(sess: &parse_sess, r: &lexer::string_reader) {\n+    sess.pos = FilePos {\n+        ch: r.chpos,\n+        byte: sess.pos.byte + r.pos\n+    };\n+}\n+\n fn cdir_path_opt(default: ~str, attrs: ~[ast::attribute]) -> ~str {\n     match ::attr::first_attr_value_str_by_name(attrs, ~\"path\") {\n       Some(d) => d,\n@@ -105,8 +112,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n                            /* FIXME (#2543) */ copy id,\n                            ast::item_mod(m0), vis, mod_attrs);\n         // Thread defids, chpos and byte_pos through the parsers\n-        cx.sess.chpos = r0.chpos;\n-        cx.sess.byte_pos = cx.sess.byte_pos + r0.pos;\n+        update_parse_sess_position(&cx.sess, &r0);\n         items.push(i);\n       }\n       ast::cdir_dir_mod(vis, id, cdirs, attrs) => {"}]}