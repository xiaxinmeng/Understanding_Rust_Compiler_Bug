{"sha": "f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyM2NiZWFiMWRkYWIyMmE4MWU4Y2M1ZGJjYTRhNGViMjA1NTAzZWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-31T16:57:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-31T16:57:47Z"}, "message": "miri unsizing: fix projecting into a field of an operand", "tree": {"sha": "659141cc7d0036f9aac145f12c93bdaf53999124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659141cc7d0036f9aac145f12c93bdaf53999124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea", "html_url": "https://github.com/rust-lang/rust/commit/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db4c783319d60ba2e4c93ac0b6a295f345a9c544", "url": "https://api.github.com/repos/rust-lang/rust/commits/db4c783319d60ba2e4c93ac0b6a295f345a9c544", "html_url": "https://github.com/rust-lang/rust/commit/db4c783319d60ba2e4c93ac0b6a295f345a9c544"}], "stats": {"total": 18, "additions": 3, "deletions": 15}, "files": [{"sha": "3dae259e99643fd87c403763e882212d61ad23a6", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=f23cbeab1ddab22a81e8cc5dbca4a4eb205503ea", "patch": "@@ -11,7 +11,7 @@ use rustc::mir::interpret::{\n use rustc::mir::CastKind;\n use rustc_apfloat::Float;\n \n-use super::{InterpretCx, Machine, PlaceTy, OpTy, ImmTy, Immediate};\n+use super::{InterpretCx, Machine, PlaceTy, OpTy, Immediate};\n \n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M> {\n     fn type_is_fat_ptr(&self, ty: Ty<'tcx>) -> bool {\n@@ -306,6 +306,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         src: OpTy<'tcx, M::PointerTag>,\n         dest: PlaceTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx> {\n+        trace!(\"Unsizing {:?} into {:?}\", src, dest);\n         match (&src.layout.ty.sty, &dest.layout.ty.sty) {\n             (&ty::Ref(_, s, _), &ty::Ref(_, d, _)) |\n             (&ty::Ref(_, s, _), &ty::RawPtr(TypeAndMut { ty: d, .. })) |\n@@ -335,20 +336,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                     if dst_field.layout.is_zst() {\n                         continue;\n                     }\n-                    let src_field = match src.try_as_mplace() {\n-                        Ok(mplace) => {\n-                            let src_field = self.mplace_field(mplace, i as u64)?;\n-                            src_field.into()\n-                        }\n-                        Err(..) => {\n-                            let src_field_layout = src.layout.field(self, i)?;\n-                            // this must be a field covering the entire thing\n-                            assert_eq!(src.layout.fields.offset(i).bytes(), 0);\n-                            assert_eq!(src_field_layout.size, src.layout.size);\n-                            // just sawp out the layout\n-                            OpTy::from(ImmTy { imm: src.to_immediate(), layout: src_field_layout })\n-                        }\n-                    };\n+                    let src_field = self.operand_field(src, i as u64)?;\n                     if src_field.layout.ty == dst_field.layout.ty {\n                         self.copy_op(src_field, dst_field)?;\n                     } else {"}]}