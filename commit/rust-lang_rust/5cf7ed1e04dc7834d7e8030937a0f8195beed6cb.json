{"sha": "5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "node_id": "C_kwDOAAsO6NoAKDVjZjdlZDFlMDRkYzc4MzRkN2U4MDMwOTM3YTBmODE5NWJlZWQ2Y2I", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T17:31:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-19T18:14:20Z"}, "message": "show where the interpreter was interpreting when an ICE occurs", "tree": {"sha": "46769c4a8d801df5515a856754738f3607e3a6d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46769c4a8d801df5515a856754738f3607e3a6d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "html_url": "https://github.com/rust-lang/rust/commit/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dba78a76b7343ac70321b4224746f5e412df088", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dba78a76b7343ac70321b4224746f5e412df088", "html_url": "https://github.com/rust-lang/rust/commit/9dba78a76b7343ac70321b4224746f5e412df088"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "1c6cfa096863fe7e7af063b6f0ebcc1edb620ba4", "filename": "src/diagnostics.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "patch": "@@ -505,4 +505,22 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n         });\n     }\n+\n+    /// We had a panic in Miri itself, try to print something useful.\n+    fn handle_ice(&self) {\n+        eprintln!();\n+        eprintln!(\n+            \"Miri caused an ICE during evaluation. Here's the interpreter backtrace at the time of the panic:\"\n+        );\n+        let this = self.eval_context_ref();\n+        let stacktrace = this.generate_stacktrace();\n+        report_msg(\n+            this,\n+            DiagLevel::Note,\n+            \"the place in the program where the ICE was triggered\",\n+            vec![],\n+            vec![],\n+            &stacktrace,\n+        );\n+    }\n }"}, {"sha": "87ee50387c2f249ad95ff2ff66800f6357f39f9c", "filename": "src/eval.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cf7ed1e04dc7834d7e8030937a0f8195beed6cb/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=5cf7ed1e04dc7834d7e8030937a0f8195beed6cb", "patch": "@@ -1,7 +1,10 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n+use std::collections::HashSet;\n use std::ffi::OsStr;\n use std::iter;\n+use std::panic::{self, AssertUnwindSafe};\n+use std::thread;\n \n use log::info;\n \n@@ -15,8 +18,6 @@ use rustc_target::spec::abi::Abi;\n \n use rustc_session::config::EntryFnType;\n \n-use std::collections::HashSet;\n-\n use crate::*;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -332,7 +333,7 @@ pub fn eval_entry<'tcx>(\n     };\n \n     // Perform the main execution.\n-    let res: InterpResult<'_, i64> = (|| {\n+    let res: thread::Result<InterpResult<'_, i64>> = panic::catch_unwind(AssertUnwindSafe(|| {\n         // Main loop.\n         loop {\n             let info = ecx.preprocess_diagnostics();\n@@ -362,7 +363,11 @@ pub fn eval_entry<'tcx>(\n         }\n         let return_code = ecx.read_scalar(&ret_place.into())?.to_machine_isize(&ecx)?;\n         Ok(return_code)\n-    })();\n+    }));\n+    let res = res.unwrap_or_else(|panic_payload| {\n+        ecx.handle_ice();\n+        panic::resume_unwind(panic_payload)\n+    });\n \n     // Machine cleanup.\n     // Execution of the program has halted so any memory access we do here"}]}