{"sha": "1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNzU2MWJlNGQyMDQ2YTZhNmI3OGFlNWRhYjJlNmZkM2JhOGRiODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T08:37:59Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-04-20T08:37:59Z"}, "message": "core::rt: Remove redundant copy of run_in_newsched_task", "tree": {"sha": "b745fb08178ea561a3ede66f28db50f34fd94498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b745fb08178ea561a3ede66f28db50f34fd94498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82", "html_url": "https://github.com/rust-lang/rust/commit/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eac629bf5c4b9efd0de3ff6a14d63584eb4a967d", "url": "https://api.github.com/repos/rust-lang/rust/commits/eac629bf5c4b9efd0de3ff6a14d63584eb4a967d", "html_url": "https://github.com/rust-lang/rust/commit/eac629bf5c4b9efd0de3ff6a14d63584eb4a967d"}], "stats": {"total": 21, "additions": 0, "deletions": 21}, "files": [{"sha": "cf896dd18f34cdfc80bc4401e66533caa39b99e9", "filename": "src/libcore/rt/mod.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82/src%2Flibcore%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82/src%2Flibcore%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frt%2Fmod.rs?ref=1a7561be4d2046a6a6b78ae5dab2e6fd3ba8db82", "patch": "@@ -164,24 +164,3 @@ fn test_context() {\n         sched.run();\n     }\n }\n-\n-// For setting up tests of the new scheduler\n-#[cfg(test)]\n-pub fn run_in_newsched_task(f: ~fn()) {\n-    use cell::Cell;\n-    use unstable::run_in_bare_thread;\n-    use self::sched::Task;\n-    use self::uvio::UvEventLoop;\n-\n-    let f = Cell(Cell(f));\n-\n-    do run_in_bare_thread {\n-        let mut sched = ~UvEventLoop::new_scheduler();\n-        let f = f.take();\n-        let task = ~do Task::new(&mut sched.stack_pool) {\n-            (f.take())();\n-        };\n-        sched.task_queue.push_back(task);\n-        sched.run();\n-    }\n-}"}]}