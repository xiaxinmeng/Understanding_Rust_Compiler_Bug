{"sha": "4c83bd03a9d94af35c97a6b8b595d40e291af84a", "node_id": "C_kwDOAAsO6NoAKDRjODNiZDAzYTlkOTRhZjM1Yzk3YTZiOGI1OTVkNDBlMjkxYWY4NGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T16:49:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-19T16:49:06Z"}, "message": "Auto merge of #107038 - compiler-errors:dont-wfcheck-non-local-rpit, r=oli-obk\n\nDon't wf-check non-local RPITs\n\nWe were using `ty::is_impl_trait_defn(..).is_none()` to check if we need to add WF obligations for an opaque type.\n\nThis is *supposed* to be checking if the type is a TAIT, since RPITs' wfness is implied by wf checking its parent item, but since `is_impl_trait_defn` returns `None` for non-local RPIT and async futures, we unnecessarily consider wf predicates for an RPIT if it is coming from a foreign crate.\n\nFixes #107036\n\nr? `@oli-obk` but feel free to reassign", "tree": {"sha": "a6e6436760b003ddd16d6e6b9f67f3f7ecfa340c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e6436760b003ddd16d6e6b9f67f3f7ecfa340c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c83bd03a9d94af35c97a6b8b595d40e291af84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c83bd03a9d94af35c97a6b8b595d40e291af84a", "html_url": "https://github.com/rust-lang/rust/commit/4c83bd03a9d94af35c97a6b8b595d40e291af84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c83bd03a9d94af35c97a6b8b595d40e291af84a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19423b59440f464c6cbe6be442d447e37b50fe3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/19423b59440f464c6cbe6be442d447e37b50fe3c", "html_url": "https://github.com/rust-lang/rust/commit/19423b59440f464c6cbe6be442d447e37b50fe3c"}, {"sha": "7e0b1f11154bc5e9af996b821b2c28680c3f46c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0b1f11154bc5e9af996b821b2c28680c3f46c8", "html_url": "https://github.com/rust-lang/rust/commit/7e0b1f11154bc5e9af996b821b2c28680c3f46c8"}], "stats": {"total": 64, "additions": 61, "deletions": 3}, "files": [{"sha": "ce72b78f42f93e7ac18674c70b1e6bdf792367de", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -2602,7 +2602,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         match path.res {\n             Res::Def(DefKind::OpaqueTy | DefKind::ImplTraitPlaceholder, did) => {\n                 // Check for desugared `impl Trait`.\n-                assert!(ty::is_impl_trait_defn(tcx, did).is_none());\n+                assert!(tcx.is_type_alias_impl_trait(did));\n                 let item_segment = path.segments.split_last().unwrap();\n                 self.prohibit_generics(item_segment.1.iter(), |err| {\n                     err.note(\"`impl Trait` types can't have type parameters\");"}, {"sha": "9be37dbe8c6b540e7d6995eed598de88d5632200", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -76,6 +76,7 @@ pub fn provide(providers: &mut Providers) {\n         is_foreign_item,\n         generator_kind,\n         collect_mod_item_types,\n+        is_type_alias_impl_trait,\n         ..*providers\n     };\n }\n@@ -1537,3 +1538,13 @@ fn generator_kind(tcx: TyCtxt<'_>, def_id: DefId) -> Option<hir::GeneratorKind>\n         _ => bug!(\"generator_kind applied to non-local def-id {:?}\", def_id),\n     }\n }\n+\n+fn is_type_alias_impl_trait<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n+    match tcx.hir().get_if_local(def_id) {\n+        Some(Node::Item(hir::Item { kind: hir::ItemKind::OpaqueTy(opaque), .. })) => {\n+            matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias)\n+        }\n+        Some(_) => bug!(\"tried getting opaque_ty_origin for non-opaque: {:?}\", def_id),\n+        _ => bug!(\"tried getting opaque_ty_origin for non-local def-id {:?}\", def_id),\n+    }\n+}"}, {"sha": "0d924f27c21a6a031d5a52ae92e51b7c5d37ec8c", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -223,6 +223,15 @@ provide! { tcx, def_id, other, cdata,\n     generator_kind => { table }\n     trait_def => { table }\n     deduced_param_attrs => { table }\n+    is_type_alias_impl_trait => {\n+        debug_assert_eq!(tcx.def_kind(def_id), DefKind::OpaqueTy);\n+        cdata\n+            .root\n+            .tables\n+            .is_type_alias_impl_trait\n+            .get(cdata, def_id.index)\n+            .is_some()\n+    }\n     collect_return_position_impl_trait_in_trait_tys => {\n         Ok(cdata\n             .root"}, {"sha": "ab2ad79b876d44e9848bd768b25d534e4f276d06", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -1512,8 +1512,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hir::ItemKind::Mod(ref m) => {\n                 return self.encode_info_for_mod(item.owner_id.def_id, m);\n             }\n-            hir::ItemKind::OpaqueTy(..) => {\n+            hir::ItemKind::OpaqueTy(ref opaque) => {\n                 self.encode_explicit_item_bounds(def_id);\n+                if matches!(opaque.origin, hir::OpaqueTyOrigin::TyAlias) {\n+                    self.tables.is_type_alias_impl_trait.set(def_id.index, ());\n+                }\n             }\n             hir::ItemKind::Enum(..) => {\n                 let adt_def = self.tcx.adt_def(def_id);"}, {"sha": "5066dbbb90f3a60168e3bd1a2829cc70d7bd1b16", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -404,6 +404,8 @@ define_tables! {\n     proc_macro: Table<DefIndex, MacroKind>,\n     module_reexports: Table<DefIndex, LazyArray<ModChild>>,\n     deduced_param_attrs: Table<DefIndex, LazyArray<DeducedParamAttrs>>,\n+    // Slot is full when opaque is TAIT.\n+    is_type_alias_impl_trait: Table<DefIndex, ()>,\n \n     trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n }"}, {"sha": "6bbf7fa3914e69ea746a5607cae04b6ad2db1f4e", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -177,6 +177,12 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n+    query is_type_alias_impl_trait(key: DefId) -> bool\n+    {\n+        desc { \"determine whether the opaque is a type-alias impl trait\" }\n+        separate_provide_extern\n+    }\n+\n     query analysis(key: ()) -> Result<(), ErrorGuaranteed> {\n         eval_always\n         desc { \"running analysis passes on this crate\" }"}, {"sha": "24f3d1acff1882e7d42deb256bbf4227c06d6cef", "filename": "compiler/rustc_middle/src/ty/parameterized.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fparameterized.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -52,6 +52,7 @@ trivially_parameterized_over_tcx! {\n     usize,\n     (),\n     u32,\n+    bool,\n     std::string::String,\n     crate::metadata::ModChild,\n     crate::middle::codegen_fn_attrs::CodegenFnAttrs,"}, {"sha": "12d4cb4fc6920a0d07438637415bff6980d058cb", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -654,7 +654,7 @@ impl<'tcx> WfPredicates<'tcx> {\n                     // All of the requirements on type parameters\n                     // have already been checked for `impl Trait` in\n                     // return position. We do need to check type-alias-impl-trait though.\n-                    if ty::is_impl_trait_defn(self.tcx, def_id).is_none() {\n+                    if self.tcx.is_type_alias_impl_trait(def_id) {\n                         let obligations = self.nominal_obligations(def_id, substs);\n                         self.out.extend(obligations);\n                     }"}, {"sha": "c3f6141b28403d2f7508274bb6c154cd4f516375", "filename": "tests/ui/async-await/auxiliary/issue-107036.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/tests%2Fui%2Fasync-await%2Fauxiliary%2Fissue-107036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/tests%2Fui%2Fasync-await%2Fauxiliary%2Fissue-107036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fauxiliary%2Fissue-107036.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -0,0 +1,12 @@\n+// edition:2021\n+\n+pub trait T {}\n+impl T for () {}\n+\n+pub struct S {}\n+\n+impl S {\n+    pub async fn f<'a>(&self) -> impl T + 'a {\n+        ()\n+    }\n+}"}, {"sha": "6a22de2c94354ae3e35df097442a0681b2ad1515", "filename": "tests/ui/async-await/issue-107036.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c83bd03a9d94af35c97a6b8b595d40e291af84a/tests%2Fui%2Fasync-await%2Fissue-107036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c83bd03a9d94af35c97a6b8b595d40e291af84a/tests%2Fui%2Fasync-await%2Fissue-107036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fissue-107036.rs?ref=4c83bd03a9d94af35c97a6b8b595d40e291af84a", "patch": "@@ -0,0 +1,14 @@\n+// aux-build:issue-107036.rs\n+// edition:2021\n+// check-pass\n+\n+extern crate issue_107036;\n+use issue_107036::S;\n+\n+async fn f() {\n+    S{}.f().await;\n+}\n+\n+fn main() {\n+    let _ = f();\n+}"}]}