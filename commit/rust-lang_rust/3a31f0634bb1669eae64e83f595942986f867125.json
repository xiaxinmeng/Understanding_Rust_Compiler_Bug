{"sha": "3a31f0634bb1669eae64e83f595942986f867125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMzFmMDYzNGJiMTY2OWVhZTY0ZTgzZjU5NTk0Mjk4NmY4NjcxMjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-05T19:04:52Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T11:04:33Z"}, "message": "Address review comments", "tree": {"sha": "522613175f75a523bdfbc0a4fcc111c8ac3cf786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/522613175f75a523bdfbc0a4fcc111c8ac3cf786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a31f0634bb1669eae64e83f595942986f867125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a31f0634bb1669eae64e83f595942986f867125", "html_url": "https://github.com/rust-lang/rust/commit/3a31f0634bb1669eae64e83f595942986f867125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a31f0634bb1669eae64e83f595942986f867125/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff40e37b98fb44366a329d1b0d9642d462cc6ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff40e37b98fb44366a329d1b0d9642d462cc6ab6", "html_url": "https://github.com/rust-lang/rust/commit/ff40e37b98fb44366a329d1b0d9642d462cc6ab6"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "7ab51c1eb20c9468d87a42f7ab3fc74fe2446fd2", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=3a31f0634bb1669eae64e83f595942986f867125", "patch": "@@ -130,9 +130,7 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt<'_>,\n     }\n \n     // Which arm's failure should we report? (the one furthest along)\n-    let mut best_fail_spot = DUMMY_SP;\n-    let mut best_fail_tok = None;\n-    let mut best_fail_text = None;\n+    let mut best_failure: Option<(Token, &str)> = None;\n \n     for (i, lhs) in lhses.iter().enumerate() { // try each arm's matchers\n         let lhs_tt = match *lhs {\n@@ -190,21 +188,20 @@ fn generic_extension<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                     arm_span,\n                 })\n             }\n-            Failure(token, msg) => if token.span.lo() >= best_fail_spot.lo() {\n-                best_fail_spot = token.span;\n-                best_fail_tok = Some(token.kind);\n-                best_fail_text = Some(msg);\n-            },\n+            Failure(token, msg) => match best_failure {\n+                Some((ref best_token, _)) if best_token.span.lo() >= token.span.lo() => {}\n+                _ => best_failure = Some((token, msg))\n+            }\n             Error(err_sp, ref msg) => {\n                 cx.span_fatal(err_sp.substitute_dummy(sp), &msg[..])\n             }\n         }\n     }\n \n-    let best_fail_msg = parse_failure_msg(best_fail_tok.expect(\"ran no matchers\"));\n-    let span = best_fail_spot.substitute_dummy(sp);\n-    let mut err = cx.struct_span_err(span, &best_fail_msg);\n-    err.span_label(span, best_fail_text.unwrap_or(&best_fail_msg));\n+    let (token, label) = best_failure.expect(\"ran no matchers\");\n+    let span = token.span.substitute_dummy(sp);\n+    let mut err = cx.struct_span_err(span, &parse_failure_msg(token.kind));\n+    err.span_label(span, label);\n     if let Some(sp) = def_span {\n         if cx.source_map().span_to_filename(sp).is_real() && !sp.is_dummy() {\n             err.span_label(cx.source_map().def_span(sp), \"when calling this macro\");"}, {"sha": "d2a614c4a54ac320a803a6aa84c62ee7de43124d", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=3a31f0634bb1669eae64e83f595942986f867125", "patch": "@@ -604,6 +604,8 @@ pub fn noop_visit_token<T: MutVisitor>(t: &mut Token, vis: &mut T) {\n             let mut ident = Ident::new(*name, *span);\n             vis.visit_ident(&mut ident);\n             *name = ident.name;\n+            *span = ident.span;\n+            return; // avoid visiting the span for the second time\n         }\n         token::Interpolated(nt) => {\n             let mut nt = Lrc::make_mut(nt);"}, {"sha": "43e7c9330e418ead1b52b47b1d22de011e33bcc6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a31f0634bb1669eae64e83f595942986f867125/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3a31f0634bb1669eae64e83f595942986f867125", "patch": "@@ -197,13 +197,17 @@ enum PrevTokenKind {\n #[derive(Clone)]\n pub struct Parser<'a> {\n     pub sess: &'a ParseSess,\n-    /// The current token.\n+    /// The current normalized token.\n+    /// \"Normalized\" means that some interpolated tokens\n+    /// (`$i: ident` and `$l: lifetime` meta-variables) are replaced\n+    /// with non-interpolated identifier and lifetime tokens they refer to.\n+    /// Perhaps the normalized / non-normalized setup can be simplified somehow.\n     pub token: Token,\n-    /// The span of the previous token.\n+    /// Span of the current non-normalized token.\n     meta_var_span: Option<Span>,\n-    /// The span of the previous token.\n+    /// Span of the previous non-normalized token.\n     pub prev_span: Span,\n-    /// The previous token kind.\n+    /// Kind of the previous normalized token (in simplified form).\n     prev_token_kind: PrevTokenKind,\n     restrictions: Restrictions,\n     /// Used to determine the path to externally loaded source files."}]}