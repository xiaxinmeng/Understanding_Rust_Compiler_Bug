{"sha": "07caa224501817c93be3f5c57a013ed5db6c04e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3Y2FhMjI0NTAxODE3YzkzYmUzZjVjNTdhMDEzZWQ1ZGI2YzA0ZTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:20:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T18:03:12Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "4a7df32c0c34f78282e842b308c2751f3d3cd5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a7df32c0c34f78282e842b308c2751f3d3cd5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07caa224501817c93be3f5c57a013ed5db6c04e1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07caa224501817c93be3f5c57a013ed5db6c04e1", "html_url": "https://github.com/rust-lang/rust/commit/07caa224501817c93be3f5c57a013ed5db6c04e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07caa224501817c93be3f5c57a013ed5db6c04e1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a289ebefb8c3584d91484f0bb62f696dffadda02", "url": "https://api.github.com/repos/rust-lang/rust/commits/a289ebefb8c3584d91484f0bb62f696dffadda02", "html_url": "https://github.com/rust-lang/rust/commit/a289ebefb8c3584d91484f0bb62f696dffadda02"}], "stats": {"total": 83, "additions": 39, "deletions": 44}, "files": [{"sha": "44e7a304e671dfa1a98c55f194e97795ffaabd35", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -3274,7 +3274,7 @@ The machine types are the following:\n \n * The signed two's complement word types `i8`, `i16`, `i32` and `i64`, with\n   values drawn from the integer intervals [-(2^(7)), 2^7 - 1],\n-  [-(2^(15)), 2^15 - 1], $[-(2^(31)), 2^31 - 1], [-(2^(63)), 2^63 - 1]\n+  [-(2^(15)), 2^15 - 1], [-(2^(31)), 2^31 - 1], [-(2^(63)), 2^63 - 1]\n   respectively.\n \n * The IEEE 754-2008 `binary32` and `binary64` floating-point types: `f32` and"}, {"sha": "459015445eb6ac0881b0a170a46e9199adcdbadf", "filename": "src/libcore/any.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fany.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -149,7 +149,6 @@ mod tests {\n     use prelude::*;\n     use super::*;\n     use owned::Box;\n-    use str::StrSlice;\n     use realstd::str::StrAllocating;\n \n     #[deriving(Eq, Show)]\n@@ -275,17 +274,10 @@ mod tests {\n \n     #[test]\n     fn test_show() {\n-<<<<<<< HEAD\n-        let a = box 8u as Box<Any>;\n-        let b = box Test as Box<Any>;\n+        let a = box 8u as Box<::realcore::any::Any>;\n+        let b = box Test as Box<::realcore::any::Any>;\n         assert_eq!(format!(\"{}\", a), \"Box<Any>\".to_owned());\n         assert_eq!(format!(\"{}\", b), \"Box<Any>\".to_owned());\n-=======\n-        let a = ~8u as ~::realcore::any::Any;\n-        let b = ~Test as ~::realcore::any::Any;\n-        assert_eq!(format!(\"{}\", a), \"~Any\".to_owned());\n-        assert_eq!(format!(\"{}\", b), \"~Any\".to_owned());\n->>>>>>> core: Get coretest working\n \n         let a = &8u as &::realcore::any::Any;\n         let b = &Test as &::realcore::any::Any;"}, {"sha": "06cbaf19812804fe65a09bc500bb93a6406bbefd", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -129,6 +129,7 @@ extern_fn_clone!(A, B, C, D, E, F, G, H)\n #[cfg(test)]\n mod test {\n     use prelude::*;\n+    use owned::Box;\n \n     #[test]\n     fn test_owned_clone() {\n@@ -154,8 +155,8 @@ mod test {\n \n     #[test]\n     fn test_clone_from() {\n-        let a = ~5;\n-        let mut b = ~10;\n+        let a = box 5;\n+        let mut b = box 10;\n         b.clone_from(&a);\n         assert_eq!(*b, 5);\n     }"}, {"sha": "af611cd94e506e656fac8b532082e3e2fa0d8a8b", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -193,6 +193,7 @@ pub fn max<T: TotalOrd>(v1: T, v2: T) -> T {\n #[cfg(not(test))]\n mod impls {\n     use cmp::{Ord, TotalOrd, Eq, TotalEq, Ordering};\n+    use owned::Box;\n \n     // & pointers\n     impl<'a, T: Eq> Eq for &'a T {\n@@ -240,28 +241,28 @@ mod impls {\n     }\n     impl<T: TotalEq> TotalEq for @T {}\n \n-    // ~ pointers\n-    impl<T:Eq> Eq for ~T {\n+    // box pointers\n+    impl<T:Eq> Eq for Box<T> {\n         #[inline]\n-        fn eq(&self, other: &~T) -> bool { *(*self) == *(*other) }\n+        fn eq(&self, other: &Box<T>) -> bool { *(*self) == *(*other) }\n         #[inline]\n-        fn ne(&self, other: &~T) -> bool { *(*self) != *(*other) }\n+        fn ne(&self, other: &Box<T>) -> bool { *(*self) != *(*other) }\n     }\n-    impl<T:Ord> Ord for ~T {\n+    impl<T:Ord> Ord for Box<T> {\n         #[inline]\n-        fn lt(&self, other: &~T) -> bool { *(*self) < *(*other) }\n+        fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n         #[inline]\n-        fn le(&self, other: &~T) -> bool { *(*self) <= *(*other) }\n+        fn le(&self, other: &Box<T>) -> bool { *(*self) <= *(*other) }\n         #[inline]\n-        fn ge(&self, other: &~T) -> bool { *(*self) >= *(*other) }\n+        fn ge(&self, other: &Box<T>) -> bool { *(*self) >= *(*other) }\n         #[inline]\n-        fn gt(&self, other: &~T) -> bool { *(*self) > *(*other) }\n+        fn gt(&self, other: &Box<T>) -> bool { *(*self) > *(*other) }\n     }\n-    impl<T: TotalOrd> TotalOrd for ~T {\n+    impl<T: TotalOrd> TotalOrd for Box<T> {\n         #[inline]\n-        fn cmp(&self, other: &~T) -> Ordering { (**self).cmp(*other) }\n+        fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n     }\n-    impl<T: TotalEq> TotalEq for ~T {}\n+    impl<T: TotalEq> TotalEq for Box<T> {}\n }\n \n #[cfg(test)]"}, {"sha": "53de765b89c1d43569ef5d6f880f205325912f88", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -27,9 +27,10 @@\n #[phase(syntax, link)] #[cfg(test)] extern crate realstd = \"std\";\n #[phase(syntax, link)] #[cfg(test)] extern crate log;\n \n-#[cfg(test)] pub use kinds = realcore::kinds;\n #[cfg(test)] pub use cmp = realcore::cmp;\n+#[cfg(test)] pub use kinds = realcore::kinds;\n #[cfg(test)] pub use ops = realcore::ops;\n+#[cfg(test)] pub use owned = realcore::owned;\n #[cfg(test)] pub use ty = realcore::ty;\n \n #[cfg(not(test))]\n@@ -73,6 +74,7 @@ pub mod ptr;\n #[cfg(not(test))] pub mod ops;\n #[cfg(not(test))] pub mod ty;\n #[cfg(not(test))] pub mod cmp;\n+#[cfg(not(test))] pub mod owned;\n pub mod clone;\n pub mod default;\n pub mod container;"}, {"sha": "d5cdd9c39b67c22550a0952f5cecb6b2a60c3af1", "filename": "src/libcore/owned.rs", "status": "renamed", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibcore%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fowned.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -10,6 +10,11 @@\n \n //! Operations on unique pointer types\n \n+// FIXME: this module should not exist in libcore. It must currently because the\n+//        Box implementation is quite ad-hoc in the compiler. Once there is\n+//        proper support in the compiler this type will be able to be defined in\n+//        its own module.\n+\n /// A value that represents the global exchange heap. This is the default\n /// place that the `box` keyword allocates into when no place is supplied.\n ///", "previous_filename": "src/libstd/owned.rs"}, {"sha": "df0c6f3b8d3974f1a83f984d00f86c56d48d97fd", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -981,7 +981,6 @@ mod test {\n \n     use native;\n     use os;\n-    use owned::Box;\n     use super::*;\n \n     pub fn stress_factor() -> uint {\n@@ -1516,7 +1515,6 @@ mod test {\n mod sync_tests {\n     use prelude::*;\n     use os;\n-    use owned::Box;\n \n     pub fn stress_factor() -> uint {\n         match os::getenv(\"RUST_TEST_STRESS\") {"}, {"sha": "72d41ae1dd2911f7ce4b0b8baef1140874b1bf67", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -133,9 +133,10 @@ extern crate core;\n #[cfg(test)] pub use ty = realstd::ty;\n #[cfg(test)] pub use owned = realstd::owned;\n \n+#[cfg(not(test))] pub use cmp = core::cmp;\n #[cfg(not(test))] pub use kinds = core::kinds;\n #[cfg(not(test))] pub use ops = core::ops;\n-#[cfg(not(test))] pub use cmp = core::cmp;\n+#[cfg(not(test))] pub use owned = core::owned;\n #[cfg(not(test))] pub use ty = core::ty;\n \n pub use core::any;\n@@ -206,10 +207,6 @@ pub mod ascii;\n pub mod rc;\n pub mod gc;\n \n-/* Core language traits */\n-\n-#[cfg(not(test))] pub mod owned;\n-\n /* Common traits */\n \n pub mod from_str;"}, {"sha": "8fbcd529b63b7a6abfa1449c8d6b4e17a1e3d5ab", "filename": "src/libstd/option.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -54,7 +54,7 @@\n //!\n //! Rust's pointer types must always point to a valid location; there are\n //! no \"null\" pointers. Instead, Rust has *optional* pointers, like\n-//! the optional owned box, `Option<~T>`.\n+//! the optional owned box, `Option<Box<T>>`.\n //!\n //! The following example uses `Option` to create an optional box of\n //! `int`. Notice that in order to use the inner `int` value first the\n@@ -63,13 +63,13 @@\n //! not (`None`).\n //!\n //! ```\n-//! let optional: Option<~int> = None;\n+//! let optional: Option<Box<int>> = None;\n //! check_optional(&optional);\n //!\n-//! let optional: Option<~int> = Some(~9000);\n+//! let optional: Option<Box<int>> = Some(box 9000);\n //! check_optional(&optional);\n //!\n-//! fn check_optional(optional: &Option<~int>) {\n+//! fn check_optional(optional: &Option<Box<int>>) {\n //!     match *optional {\n //!         Some(ref p) => println!(\"have value {}\", p),\n //!         None => println!(\"have no value\")\n@@ -79,7 +79,7 @@\n //!\n //! This usage of `Option` to create safe nullable pointers is so\n //! common that Rust does special optimizations to make the\n-//! representation of `Option<~T>` a single pointer. Optional pointers\n+//! representation of `Option<Box<T>>` a single pointer. Optional pointers\n //! in Rust are stored as efficiently as any other pointer type.\n //!\n //! # Examples"}, {"sha": "809757aaf4d0281a6445038a9f84d6d6cc64b245", "filename": "src/libstd/os.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -81,6 +81,8 @@ pub fn getcwd() -> Path {\n pub fn getcwd() -> Path {\n     use libc::DWORD;\n     use libc::GetCurrentDirectoryW;\n+    use option::Expect;\n+\n     let mut buf = [0 as u16, ..BUF_BYTES];\n     unsafe {\n         if libc::GetCurrentDirectoryW(buf.len() as DWORD, buf.as_mut_ptr()) == 0 as DWORD {\n@@ -96,11 +98,11 @@ pub mod win32 {\n     use iter::Iterator;\n     use libc::types::os::arch::extra::DWORD;\n     use libc;\n-    use option::{None, Option};\n+    use option::{None, Option, Expect};\n     use option;\n     use os::TMPBUF_SZ;\n     use slice::{MutableVector, ImmutableVector, OwnedVector};\n-    use str::StrSlice;\n+    use str::{StrSlice, StrAllocating};\n     use str;\n     use vec::Vec;\n \n@@ -182,7 +184,6 @@ pub fn env_as_bytes() -> ~[(~[u8],~[u8])] {\n         #[cfg(windows)]\n         unsafe fn get_env_pairs() -> Vec<~[u8]> {\n             use c_str;\n-            use str::StrSlice;\n \n             use libc::funcs::extra::kernel32::{\n                 GetEnvironmentStringsA,\n@@ -830,6 +831,7 @@ fn real_args() -> ~[~str] {\n #[cfg(windows)]\n fn real_args() -> ~[~str] {\n     use slice;\n+    use option::Expect;\n \n     let mut nArgs: c_int = 0;\n     let lpArgCount: *mut c_int = &mut nArgs;"}, {"sha": "35c5cbc85c3a2a2c604d52bfffa8cc02ff5d4c32", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -625,7 +625,6 @@ fn test_repr() {\n     use io::stdio::println;\n     use char::is_alphabetic;\n     use mem::swap;\n-    use owned::Box;\n \n     fn exact_test<T>(t: &T, e:&str) {\n         let mut m = io::MemWriter::new();"}, {"sha": "c7cefbb28eef9d0e1a143f919db3f720f2723c3b", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -1577,7 +1577,6 @@ mod tests {\n     #[test]\n     #[should_fail]\n     fn test_from_elem_fail() {\n-        use cast;\n         use cell::Cell;\n         use rc::Rc;\n "}, {"sha": "2df5031b4826cbabb066c8f6169330a149f66f2d", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07caa224501817c93be3f5c57a013ed5db6c04e1/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=07caa224501817c93be3f5c57a013ed5db6c04e1", "patch": "@@ -162,7 +162,6 @@ impl<T: Send> Clone for Queue<T> {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use option::*;\n     use super::Queue;\n     use native;\n "}]}