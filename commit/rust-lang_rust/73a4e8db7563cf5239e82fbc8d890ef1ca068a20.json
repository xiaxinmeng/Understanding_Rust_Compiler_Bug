{"sha": "73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYTRlOGRiNzU2M2NmNTIzOWU4MmZiYzhkODkwZWYxY2EwNjhhMjA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-15T20:19:44Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-09-19T13:00:59Z"}, "message": "apply various nits", "tree": {"sha": "09ff6214b0c4aa1369cb397ab4ae5b72bc415653", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09ff6214b0c4aa1369cb397ab4ae5b72bc415653"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "html_url": "https://github.com/rust-lang/rust/commit/73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44e45d9fea9cae9b76927cf50bc05da3626244bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/44e45d9fea9cae9b76927cf50bc05da3626244bc", "html_url": "https://github.com/rust-lang/rust/commit/44e45d9fea9cae9b76927cf50bc05da3626244bc"}], "stats": {"total": 89, "additions": 46, "deletions": 43}, "files": [{"sha": "a5a184ed48c5c0338fea18ae667162c7ad084c6c", "filename": "src/librustc/README.md", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FREADME.md?ref=73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "patch": "@@ -57,11 +57,12 @@ rustc_trans    rustc_borrowck   ...  rustc_metadata\n            syntax_pos  syntax_ext\n ```                    \n \n-\n-The idea is that `rustc_driver`, at the top of this lattice, basically\n-defines the overall control-flow of the compiler. It doesn't have much\n-\"real code\", but instead ties together all of the code defined in the\n-other crates and defines the overall flow of execution.\n+The `rustc_driver` crate, at the top of this lattice, is effectively\n+the \"main\" function for the rust compiler. It doesn't have much \"real\n+code\", but instead ties together all of the code defined in the other\n+crates and defines the overall flow of execution. (As we transition\n+more and more to the [query model](ty/maps/README.md), however, the\n+\"flow\" of compilation is becoming less centrally defined.)\n \n At the other extreme, the `rustc` crate defines the common and\n pervasive data structures that all the rest of the compiler uses"}, {"sha": "c832a897dee8b69389bea5402cef5b42b526afa9", "filename": "src/librustc/hir/README.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fhir%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fhir%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2FREADME.md?ref=73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "patch": "@@ -45,10 +45,10 @@ The other reason to setup the representation this way is for better\n integration with incremental compilation. This way, if you gain access\n to a `&hir::Item` (e.g. for the mod `foo`), you do not immediately\n gain access to the contents of the function `bar()`. Instead, you only\n-gain access to the **id** for `bar()`, and you must some function to\n-lookup the contents of `bar()` given its id; this gives us a change to\n-observe that you accessed the data for `bar()` and record the\n-dependency.\n+gain access to the **id** for `bar()`, and you must invoke some\n+function to lookup the contents of `bar()` given its id; this gives us\n+a chance to observe that you accessed the data for `bar()` and record\n+the dependency.\n \n ### Identifiers in the HIR\n \n@@ -117,7 +117,3 @@ associated with an **owner**, which is typically some kind of item\n (e.g., `|x, y| x + y`). You can use the HIR map to find find the body\n associated with a given def-id (`maybe_body_owned_by()`) or to find\n the owner of a body (`body_owner_def_id()`).\n-\n-\n-\n-"}, {"sha": "c250695f361a644076fae40eb196ff9f660f5226", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "patch": "@@ -416,6 +416,7 @@ pub type CrateConfig = HirVec<P<MetaItem>>;\n /// The top-level data structure that stores the entire contents of\n /// the crate currently being compiled.\n ///\n+/// For more details, see [the module-level README](README.md).\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Crate {\n     pub module: Mod,\n@@ -935,9 +936,9 @@ pub struct BodyId {\n /// (which is an expression), but also the argument patterns, since\n /// those are something that the caller doesn't really care about.\n ///\n-/// Example:\n+/// # Examples\n ///\n-/// ```rust\n+/// ```\n /// fn foo((x, y): (u32, u32)) -> u32 {\n ///     x + y\n /// }"}, {"sha": "4f63912a1e0d1a8f8269a5a6d491d4e6827bd322", "filename": "src/librustc/ty/README.md", "status": "modified", "additions": 29, "deletions": 23, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fty%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fty%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2FREADME.md?ref=73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "patch": "@@ -21,7 +21,7 @@ tcx: TyCtxt<'a, 'gcx, 'tcx>\n \n As you can see, the `TyCtxt` type takes three lifetime parameters.\n These lifetimes are perhaps the most complex thing to understand about\n-the tcx. During rust compilation, we allocate most of our memory in\n+the tcx. During Rust compilation, we allocate most of our memory in\n **arenas**, which are basically pools of memory that get freed all at\n once. When you see a reference with a lifetime like `'tcx` or `'gcx`,\n you know that it refers to arena-allocated data (or data that lives as\n@@ -70,18 +70,24 @@ fn maybe_in_inference<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>, def_id: DefId\n \n ### Allocating and working with types\n \n-Rust types are represented using the `ty::Ty<'tcx>` type. This is in fact a simple type alias\n-for a reference with `'tcx` lifetime:\n+Rust types are represented using the `Ty<'tcx>` defined in the `ty`\n+module (not to be confused with the `Ty` struct from [the HIR]). This\n+is in fact a simple type alias for a reference with `'tcx` lifetime:\n \n ```rust\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n ```\n \n-The `TyS` struct defines the actual details of how a type is\n-represented. The most interesting part of it is the `sty` field, which\n-contains an enum that lets us test what sort of type this is. For\n-example, it is very common to see code that tests what sort of type you have\n-that looks roughly like so:\n+[the HIR]: ../hir/README.md\n+\n+You can basically ignore the `TyS` struct -- you will basically never\n+access it explicitly. We always pass it by reference using the\n+`Ty<'tcx>` alias -- the only exception I think is to define inherent\n+methods on types. Instances of `TyS` are only ever allocated in one of\n+the rustc arenas (never e.g. on the stack).\n+\n+One common operation on types is to **match** and see what kinds of\n+types they are. This is done by doing `match ty.sty`, sort of like this:\n \n ```rust\n fn test_type<'tcx>(ty: Ty<'tcx>) {\n@@ -92,10 +98,14 @@ fn test_type<'tcx>(ty: Ty<'tcx>) {\n }\n ```\n \n-(Note though that doing such low-level tests on types during inference\n-can be risky, as there are may be inference variables and other things\n-to consider, or sometimes types are not yet known that will become\n-known later.).\n+The `sty` field (the origin of this name is unclear to me; perhaps\n+structural type?) is of type `TypeVariants<'tcx>`, which is an enum\n+definined all of the different kinds of types in the compiler.\n+\n+> NB: inspecting the `sty` field on types during type inference can be\n+> risky, as there are may be inference variables and other things to\n+> consider, or sometimes types are not yet known that will become\n+> known later.).\n \n To allocate a new type, you can use the various `mk_` methods defined\n on the `tcx`. These have names that correpond mostly to the various kinds\n@@ -114,13 +124,13 @@ any inference variables or other \"temporary\" types, they will be\n allocated in the global arena). However, the lifetime `'tcx` is always\n a safe approximation, so that is what you get back.\n \n-NB. Because types are interned, it is possible to compare them for\n-equality efficiently using `==` -- however, this is almost never what\n-you want to do unless you happen to be hashing and looking for\n-duplicates. This is because often in Rust there are multiple ways to\n-represent the same type, particularly once inference is involved. If\n-you are going to be testing for type equality, you probably need to\n-start looking into the inference code to do it right.\n+> NB. Because types are interned, it is possible to compare them for\n+> equality efficiently using `==` -- however, this is almost never what\n+> you want to do unless you happen to be hashing and looking for\n+> duplicates. This is because often in Rust there are multiple ways to\n+> represent the same type, particularly once inference is involved. If\n+> you are going to be testing for type equality, you probably need to\n+> start looking into the inference code to do it right.\n \n You can also find various common types in the tcx itself by accessing\n `tcx.types.bool`, `tcx.types.char`, etc (see `CommonTypes` for more).\n@@ -153,7 +163,3 @@ In particular, since they are so common, the `Ty` and `TyCtxt` types\n are imported directly. Other types are often referenced with an\n explicit `ty::` prefix (e.g., `ty::TraitRef<'tcx>`). But some modules\n choose to import a larger or smaller set of names explicitly.\n-\n-\n-\n-"}, {"sha": "874bb426dc509f893006e180f2a9a270deb4057f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a4e8db7563cf5239e82fbc8d890ef1ca068a20/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=73a4e8db7563cf5239e82fbc8d890ef1ca068a20", "patch": "@@ -793,11 +793,10 @@ impl<'tcx> CommonTypes<'tcx> {\n     }\n }\n \n-/// The central data structure of the compiler. Keeps track of all the\n-/// information that typechecker generates so that so that it can be\n-/// reused and doesn't have to be redone later on.\n-///\n-/// See [the README](README.md) for more deatils.\n+/// The central data structure of the compiler. It stores references\n+/// to the various **arenas** and also houses the results of the\n+/// various **compiler queries** that have been performed. See [the\n+/// README](README.md) for more deatils.\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     gcx: &'a GlobalCtxt<'gcx>,"}]}