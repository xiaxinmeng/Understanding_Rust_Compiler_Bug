{"sha": "014e22c836b649229023451af79c60fff1185888", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNGUyMmM4MzZiNjQ5MjI5MDIzNDUxYWY3OWM2MGZmZjExODU4ODg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-28T21:11:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-28T21:11:45Z"}, "message": "Rollup merge of #87451 - GuillaumeGomez:tuple-struct-field-doc, r=jyn514\n\nAdd support for tuple struct field documentation\n\nFixes  #42615.\nThis is #80320 updated to new codebase and with added tests.\nPart of https://github.com/rust-lang/rust/issues/83255.\n\ncc ```@camelid``` (since you were involved on the original PR).\nr? ```@jyn514```", "tree": {"sha": "7fc864cba45274448a949df2f9eb764a427f2053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fc864cba45274448a949df2f9eb764a427f2053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/014e22c836b649229023451af79c60fff1185888", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhAcgRCRBK7hj4Ov3rIwAAdF0IAEUyFGoPxj9mZ9cjAlsxuPzT\nK/HI/KV4O0DchI93oya2v4wo637qPzbMBZ3RPVdBGM0Juverloyz9Kb7/sR3iRsV\nriEPfGyT606xPwxpI4QsV9J+T5TYvVVO9iruUCag1QDgCZN8dVErkzITVvudkL5+\nEWEnCHicpTBWBan01JblbMB31tsiqnJow8rj9YTFCAm7wvGyEc53PIlLWbBWgArA\n/mYzhrdMj5+Jro+JKFYZfQbJ+n79EmTESHSg64sO69/ZPC+W0VuqEuGxJYu3KNFa\npj/zd0YApNXNzeTHXKyPXTjYJ/yoD7NwnHxymWGitecWQX+DGdPYlvVZGo2+5Aw=\n=UHp1\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fc864cba45274448a949df2f9eb764a427f2053\nparent 92229846364b983e6ac424c39a6e711ccfa8056b\nparent c4aa73525bbfef6895612599170a5b297e1625ba\nauthor Yuki Okushi <jtitor@2k36.org> 1627506705 +0900\ncommitter GitHub <noreply@github.com> 1627506705 +0900\n\nRollup merge of #87451 - GuillaumeGomez:tuple-struct-field-doc, r=jyn514\n\nAdd support for tuple struct field documentation\n\nFixes  #42615.\nThis is #80320 updated to new codebase and with added tests.\nPart of https://github.com/rust-lang/rust/issues/83255.\n\ncc ```@camelid``` (since you were involved on the original PR).\nr? ```@jyn514```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/014e22c836b649229023451af79c60fff1185888", "html_url": "https://github.com/rust-lang/rust/commit/014e22c836b649229023451af79c60fff1185888", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/014e22c836b649229023451af79c60fff1185888/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92229846364b983e6ac424c39a6e711ccfa8056b", "url": "https://api.github.com/repos/rust-lang/rust/commits/92229846364b983e6ac424c39a6e711ccfa8056b", "html_url": "https://github.com/rust-lang/rust/commit/92229846364b983e6ac424c39a6e711ccfa8056b"}, {"sha": "c4aa73525bbfef6895612599170a5b297e1625ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4aa73525bbfef6895612599170a5b297e1625ba", "html_url": "https://github.com/rust-lang/rust/commit/c4aa73525bbfef6895612599170a5b297e1625ba"}], "stats": {"total": 85, "additions": 66, "deletions": 19}, "files": [{"sha": "fd79292477cab9c371c11c8423cfbc9953cf34d6", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -1730,9 +1730,13 @@ impl Clean<Variant> for hir::VariantData<'_> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Variant {\n         match self {\n             hir::VariantData::Struct(..) => Variant::Struct(self.clean(cx)),\n-            hir::VariantData::Tuple(..) => {\n-                Variant::Tuple(self.fields().iter().map(|x| x.ty.clean(cx)).collect())\n-            }\n+            // Important note here: `Variant::Tuple` is used on tuple structs which are not in an\n+            // enum (so where converting from `ty::VariantDef`). In case we are in an enum, the kind\n+            // is provided by the `Variant` wrapper directly, and since we need the fields' name\n+            // (even for a tuple struct variant!), it's simpler to just store it as a\n+            // `Variant::Struct` instead of a `Variant::Tuple` (otherwise it would force us to make\n+            // a lot of changes when rendering them to generate the name as well).\n+            hir::VariantData::Tuple(..) => Variant::Struct(self.clean(cx)),\n             hir::VariantData::Unit(..) => Variant::CLike,\n         }\n     }"}, {"sha": "c05ea81ac1f36ca772e81e9362de6163beeef3bd", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -2007,6 +2007,9 @@ fn sidebar_struct(cx: &Context<'_>, buf: &mut Buffer, it: &clean::Item, s: &clea\n             }\n \n             sidebar.push_str(\"</div>\");\n+        } else if let CtorKind::Fn = s.struct_type {\n+            sidebar\n+                .push_str(\"<h3 class=\\\"sidebar-title\\\"><a href=\\\"#fields\\\">Tuple Fields</a></h3>\");\n         }\n     }\n "}, {"sha": "5c30d8bbd173ceb46249add58f346fd9fec05ad4", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -1037,8 +1037,9 @@ fn item_enum(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, e: &clean::Enum\n                 write!(w, \"<div class=\\\"sub-variant\\\" id=\\\"{id}\\\">\", id = variant_id);\n                 write!(\n                     w,\n-                    \"<h3>Fields of <b>{name}</b></h3><div>\",\n-                    name = variant.name.as_ref().unwrap()\n+                    \"<h3>{extra}Fields of <b>{name}</b></h3><div>\",\n+                    extra = if s.struct_type == CtorKind::Fn { \"Tuple \" } else { \"\" },\n+                    name = variant.name.as_ref().unwrap(),\n                 );\n                 for field in &s.fields {\n                     use crate::clean::StructFieldItem;\n@@ -1176,21 +1177,21 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n             _ => None,\n         })\n         .peekable();\n-    if let CtorKind::Fictive = s.struct_type {\n+    if let CtorKind::Fictive | CtorKind::Fn = s.struct_type {\n         if fields.peek().is_some() {\n             write!(\n                 w,\n                 \"<h2 id=\\\"fields\\\" class=\\\"fields small-section-header\\\">\\\n-                       Fields{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a></h2>\",\n+                     {}{}<a href=\\\"#fields\\\" class=\\\"anchor\\\"></a>\\\n+                 </h2>\",\n+                if let CtorKind::Fictive = s.struct_type { \"Fields\" } else { \"Tuple Fields\" },\n                 document_non_exhaustive_header(it)\n             );\n             document_non_exhaustive(w, it);\n-            for (field, ty) in fields {\n-                let id = cx.derive_id(format!(\n-                    \"{}.{}\",\n-                    ItemType::StructField,\n-                    field.name.as_ref().unwrap()\n-                ));\n+            for (index, (field, ty)) in fields.enumerate() {\n+                let field_name =\n+                    field.name.map_or_else(|| index.to_string(), |sym| (*sym.as_str()).to_string());\n+                let id = cx.derive_id(format!(\"{}.{}\", ItemType::StructField, field_name));\n                 write!(\n                     w,\n                     \"<span id=\\\"{id}\\\" class=\\\"{item_type} small-section-header\\\">\\\n@@ -1199,7 +1200,7 @@ fn item_struct(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, s: &clean::St\n                      </span>\",\n                     item_type = ItemType::StructField,\n                     id = id,\n-                    name = field.name.as_ref().unwrap(),\n+                    name = field_name,\n                     ty = ty.print(cx)\n                 );\n                 document(w, cx, field, Some(it));\n@@ -1507,7 +1508,10 @@ fn render_struct(\n             if let Some(g) = g {\n                 write!(w, \"{}\", print_where_clause(g, cx, 0, false),)\n             }\n-            w.write_str(\";\");\n+            // We only want a \";\" when we are displaying a tuple struct, not a variant tuple struct.\n+            if structhead {\n+                w.write_str(\";\");\n+            }\n         }\n         CtorKind::Const => {\n             // Needed for PhantomData."}, {"sha": "414d60c86d3083b80d9558f659823b01d7ec106a", "filename": "src/test/rustdoc-ui/coverage/enums.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcoverage%2Fenums.stdout?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -1,7 +1,7 @@\n +-------------------------------------+------------+------------+------------+------------+\n | File                                | Documented | Percentage |   Examples | Percentage |\n +-------------------------------------+------------+------------+------------+------------+\n-| ...est/rustdoc-ui/coverage/enums.rs |          6 |      75.0% |          0 |       0.0% |\n+| ...est/rustdoc-ui/coverage/enums.rs |          6 |      66.7% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+\n-| Total                               |          6 |      75.0% |          0 |       0.0% |\n+| Total                               |          6 |      66.7% |          0 |       0.0% |\n +-------------------------------------+------------+------------+------------+------------+"}, {"sha": "ae871e79d7f6b0b62e24abed3d2c667962c03683", "filename": "src/test/rustdoc/toggle-item-contents.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftoggle-item-contents.rs?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -81,8 +81,8 @@ pub enum EnumStructVariant {\n }\n \n // @has 'toggle_item_contents/enum.LargeEnum.html'\n-// @count - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n-// @has - '//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 variants'\n+// @count - '//*[@class=\"rust enum\"]//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 1\n+// @has - '//*[@class=\"rust enum\"]//details[@class=\"rustdoc-toggle type-contents-toggle\"]' 'Show 13 variants'\n pub enum LargeEnum {\n     A, B, C, D, E, F(u8), G, H, I, J, K, L, M\n }"}, {"sha": "f3d8e39ea2d266824e0695b2046d02926c383458", "filename": "src/test/rustdoc/tuple-struct-fields-doc.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/014e22c836b649229023451af79c60fff1185888/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftuple-struct-fields-doc.rs?ref=014e22c836b649229023451af79c60fff1185888", "patch": "@@ -0,0 +1,36 @@\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @has - '//h2[@id=\"fields\"]' 'Tuple Fields'\n+// @has - '//h3[@class=\"sidebar-title\"]/a[@href=\"#fields\"]' 'Tuple Fields'\n+// @has - '//*[@id=\"structfield.0\"]' '0: u32'\n+// @has - '//*[@id=\"main\"]/div[@class=\"docblock\"]' 'hello'\n+// @!has - '//*[@id=\"structfield.1\"]'\n+// @has - '//*[@id=\"structfield.2\"]' '2: char'\n+// @has - '//*[@id=\"structfield.3\"]' '3: i8'\n+// @has - '//*[@id=\"main\"]/div[@class=\"docblock\"]' 'not hello'\n+pub struct Foo(\n+    /// hello\n+    pub u32,\n+    char,\n+    pub char,\n+    /// not hello\n+    pub i8,\n+);\n+\n+// @has foo/enum.Bar.html\n+// @has - '//pre[@class=\"rust enum\"]' 'BarVariant(String),'\n+// @matches - '//*[@id=\"variant.BarVariant.fields\"]/h3' '^Tuple Fields of BarVariant$'\n+// @has - '//*[@id=\"variant.BarVariant.field.0\"]' '0: String'\n+// @has - '//*[@id=\"variant.BarVariant.fields\"]//*[@class=\"docblock\"]' 'Hello docs'\n+// @matches - '//*[@id=\"variant.FooVariant.fields\"]/h3' '^Fields of FooVariant$'\n+pub enum Bar {\n+    BarVariant(\n+        /// Hello docs\n+        String\n+    ),\n+    FooVariant {\n+       /// hello\n+       x: u32,\n+    },\n+}"}]}