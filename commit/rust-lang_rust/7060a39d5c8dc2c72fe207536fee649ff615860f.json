{"sha": "7060a39d5c8dc2c72fe207536fee649ff615860f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjBhMzlkNWM4ZGMyYzcyZmUyMDc1MzZmZWU2NDlmZjYxNTg2MGY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T13:12:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-21T13:12:15Z"}, "message": "simplify trait bounds", "tree": {"sha": "33fc9206a9ee2f2f1c64eeb85748bf5e9cd1c3f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33fc9206a9ee2f2f1c64eeb85748bf5e9cd1c3f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7060a39d5c8dc2c72fe207536fee649ff615860f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7060a39d5c8dc2c72fe207536fee649ff615860f", "html_url": "https://github.com/rust-lang/rust/commit/7060a39d5c8dc2c72fe207536fee649ff615860f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7060a39d5c8dc2c72fe207536fee649ff615860f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b51b71bf258c6520ee60f865a3658b30ce44ef18", "url": "https://api.github.com/repos/rust-lang/rust/commits/b51b71bf258c6520ee60f865a3658b30ce44ef18", "html_url": "https://github.com/rust-lang/rust/commit/b51b71bf258c6520ee60f865a3658b30ce44ef18"}], "stats": {"total": 30, "additions": 18, "deletions": 12}, "files": [{"sha": "4d54ae6148d5a0aea1b9c58d90da368a1cef6f17", "filename": "crates/ra_syntax/src/syntax_node.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7060a39d5c8dc2c72fe207536fee649ff615860f/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7060a39d5c8dc2c72fe207536fee649ff615860f/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_node.rs?ref=7060a39d5c8dc2c72fe207536fee649ff615860f", "patch": "@@ -6,7 +6,10 @@\n //! The *real* implementation is in the (language-agnostic) `rowan` crate, this\n //! modules just wraps its API.\n \n-use std::{fmt::{self, Write}, borrow::Borrow};\n+use std::{\n+    fmt::{self, Write},\n+    borrow::Borrow,\n+};\n \n use rowan::{Types, TransparentNewType};\n \n@@ -24,34 +27,37 @@ impl Types for RaTypes {\n     type RootData = Vec<SyntaxError>;\n }\n \n-pub type GreenNode = rowan::GreenNode<RaTypes>;\n+pub(crate) type GreenNode = rowan::GreenNode<RaTypes>;\n+\n+/// Marker trait for CST and AST nodes\n+pub trait SyntaxNodeWrapper: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>> {}\n+impl<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>> SyntaxNodeWrapper for T {}\n \n+/// An owning smart pointer for CST or AST node.\n #[derive(PartialEq, Eq, Hash)]\n-pub struct TreeArc<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>>(\n-    pub(crate) rowan::TreeArc<RaTypes, T>,\n-);\n+pub struct TreeArc<T: SyntaxNodeWrapper>(pub(crate) rowan::TreeArc<RaTypes, T>);\n \n-impl<T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>> Borrow<T> for TreeArc<T> {\n+impl<T: SyntaxNodeWrapper> Borrow<T> for TreeArc<T> {\n     fn borrow(&self) -> &T {\n         &*self\n     }\n }\n \n impl<T> TreeArc<T>\n where\n-    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+    T: SyntaxNodeWrapper,\n {\n     pub(crate) fn cast<U>(this: TreeArc<T>) -> TreeArc<U>\n     where\n-        U: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+        U: SyntaxNodeWrapper,\n     {\n         TreeArc(rowan::TreeArc::cast(this.0))\n     }\n }\n \n impl<T> std::ops::Deref for TreeArc<T>\n where\n-    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+    T: SyntaxNodeWrapper,\n {\n     type Target = T;\n     fn deref(&self) -> &T {\n@@ -61,7 +67,7 @@ where\n \n impl<T> PartialEq<T> for TreeArc<T>\n where\n-    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+    T: SyntaxNodeWrapper,\n     T: PartialEq<T>,\n {\n     fn eq(&self, other: &T) -> bool {\n@@ -72,7 +78,7 @@ where\n \n impl<T> Clone for TreeArc<T>\n where\n-    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+    T: SyntaxNodeWrapper,\n {\n     fn clone(&self) -> TreeArc<T> {\n         TreeArc(self.0.clone())\n@@ -81,7 +87,7 @@ where\n \n impl<T> fmt::Debug for TreeArc<T>\n where\n-    T: TransparentNewType<Repr = rowan::SyntaxNode<RaTypes>>,\n+    T: SyntaxNodeWrapper,\n     T: fmt::Debug,\n {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {"}]}