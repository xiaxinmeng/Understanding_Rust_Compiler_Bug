{"sha": "f7ab07c7806bb4a7418f228c1cf266cdf011a878", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3YWIwN2M3ODA2YmI0YTc0MThmMjI4YzFjZjI2NmNkZjAxMWE4Nzg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T07:38:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-07-25T07:40:58Z"}, "message": "Put the struct passed to unwinding functions into a static\n\nProduces very clean asm, but makes bigger binaries.", "tree": {"sha": "c853221738a02faadde1721054d81b70379a04cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c853221738a02faadde1721054d81b70379a04cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7ab07c7806bb4a7418f228c1cf266cdf011a878", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ab07c7806bb4a7418f228c1cf266cdf011a878", "html_url": "https://github.com/rust-lang/rust/commit/f7ab07c7806bb4a7418f228c1cf266cdf011a878", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7ab07c7806bb4a7418f228c1cf266cdf011a878/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4636b32a42ea3111f53048197092e7ac08e6f792", "url": "https://api.github.com/repos/rust-lang/rust/commits/4636b32a42ea3111f53048197092e7ac08e6f792", "html_url": "https://github.com/rust-lang/rust/commit/4636b32a42ea3111f53048197092e7ac08e6f792"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "26bb69943f8a5eea2118d4e036f59613c37062e4", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7ab07c7806bb4a7418f228c1cf266cdf011a878/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ab07c7806bb4a7418f228c1cf266cdf011a878/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=f7ab07c7806bb4a7418f228c1cf266cdf011a878", "patch": "@@ -33,7 +33,8 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::core::failure::begin_unwind(fmt, &(file!(), line!()))\n+            static file_line: (&'static str, uint) = (file!(), line!());\n+            ::core::failure::begin_unwind(fmt, &file_line)\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}, {"sha": "9ce142836cf60add1fcf7829bb32676a6027858e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7ab07c7806bb4a7418f228c1cf266cdf011a878/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7ab07c7806bb4a7418f228c1cf266cdf011a878/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=f7ab07c7806bb4a7418f228c1cf266cdf011a878", "patch": "@@ -38,12 +38,16 @@\n /// ```\n #[macro_export]\n macro_rules! fail(\n-    () => (\n-        ::std::rt::begin_unwind_no_time_to_explain(&(file!(), line!()))\n-    );\n-    ($msg:expr) => (\n-        ::std::rt::begin_unwind($msg, file!(), line!())\n-    );\n+    () => ({\n+        // static requires less code at runtime, more constant data\n+        static file_line: (&'static str, uint) = (file!(), line!());\n+        ::std::rt::begin_unwind_no_time_to_explain(&file_line)\n+    });\n+    ($msg:expr) => ({\n+        static file_line: (&'static str, uint) = (file!(), line!());\n+        let (file, line) = file_line;\n+        ::std::rt::begin_unwind($msg, file, line)\n+    });\n     ($fmt:expr, $($arg:tt)*) => ({\n         // a closure can't have return type !, so we need a full\n         // function to pass to format_args!, *and* we need the\n@@ -58,7 +62,8 @@ macro_rules! fail(\n         // up with the number of calls to fail!()\n         #[inline(always)]\n         fn run_fmt(fmt: &::std::fmt::Arguments) -> ! {\n-            ::std::rt::begin_unwind_fmt(fmt, &(file!(), line!()))\n+            static file_line: (&'static str, uint) = (file!(), line!());\n+            ::std::rt::begin_unwind_fmt(fmt, &file_line)\n         }\n         format_args!(run_fmt, $fmt, $($arg)*)\n     });"}]}