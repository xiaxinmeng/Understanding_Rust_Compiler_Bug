{"sha": "1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "node_id": "C_kwDOAAsO6NoAKDFiODE0MWI1NGNiNWY4OWJkM2RlZTdiZmJhYjQxMTA5ZDFiNDhjYjY", "commit": {"author": {"name": "Ian Chamberlain", "email": "ichamberlain@juniper.net", "date": "2023-01-03T15:16:16Z"}, "committer": {"name": "Ian Chamberlain", "email": "ichamberlain@juniper.net", "date": "2023-01-09T16:46:29Z"}, "message": "Parse + decorate rendered ANSI cargo output\n\nUse ANSI control characters to display text decorations matching the\nVScode terminal theme, and strip them out when providing text content\nfor rustc diagnostics.\n\nThis adds the small `anser` library to parse the control codes, and it\nalso supports HTML output so it should be fairly easy to switch to a\nrendered HTML/webview implementation if desired.", "tree": {"sha": "8b4a5f2270fa6e807cf0cf76174b1800e8c07315", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b4a5f2270fa6e807cf0cf76174b1800e8c07315"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEUeJtpptES4xNVu97vXsl1YFw4SQFAmO8ROUACgkQvXsl1YFw\n4SRX8AwAkpswYvdK1ozJKDLNqHW4Zbe8z8joHLQTYKcN6ZrXMMYnQuJao1usxu8Z\nMUEq8MCApsjPQMdHtS9ZrMVlSXig8DxAhUHjKGtB9aZdNqgJTDOaZXXUsBeBy0Qh\n5rwt95xySsTxg/PN1tBlxNcQDCfvA2d145Hi595ZyKGGJ1O3WLApaX9AUMC+QSN5\nj4Q1g3bEYMXedJIvWSKDhltiFeTT/iU9Y8cHjE5HtA9s1wYCYhPNYHo5nOwTTzev\n/h+wGg0syyBrnmy1ytYVAHu4uHiHCyX0YDKUEKRWXm4rH1ZL/W1iwILFsPPI0TIu\nNr9imecHKlpE6UrgFCVW66zKu4RG8YM2XeguLzNmtQo3KQrOETM5VzMQ+n4s4Xy0\npLmKIYuKKa9cqjevhPos8S44kxiEuJRnhGp6GVHoYuj9+2Yjrs3YDlkVBWhH1IdO\n6ftZxpXd0SGwZBOg/Btr4VQmzP7KbKEKa/o96h9pi5d9Z9XNM613mmTemOuTy5GN\n8hp43/sD\n=VGJI\n-----END PGP SIGNATURE-----", "payload": "tree 8b4a5f2270fa6e807cf0cf76174b1800e8c07315\nparent f32e20edb99a15d42984ec89f6b3986248845929\nauthor Ian Chamberlain <ichamberlain@juniper.net> 1672758976 -0500\ncommitter Ian Chamberlain <ichamberlain@juniper.net> 1673282789 -0500\n\nParse + decorate rendered ANSI cargo output\n\nUse ANSI control characters to display text decorations matching the\nVScode terminal theme, and strip them out when providing text content\nfor rustc diagnostics.\n\nThis adds the small `anser` library to parse the control codes, and it\nalso supports HTML output so it should be fairly easy to switch to a\nrendered HTML/webview implementation if desired.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "html_url": "https://github.com/rust-lang/rust/commit/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/comments", "author": {"login": "ian-h-chamberlain", "id": 11131775, "node_id": "MDQ6VXNlcjExMTMxNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/11131775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-h-chamberlain", "html_url": "https://github.com/ian-h-chamberlain", "followers_url": "https://api.github.com/users/ian-h-chamberlain/followers", "following_url": "https://api.github.com/users/ian-h-chamberlain/following{/other_user}", "gists_url": "https://api.github.com/users/ian-h-chamberlain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-h-chamberlain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-h-chamberlain/subscriptions", "organizations_url": "https://api.github.com/users/ian-h-chamberlain/orgs", "repos_url": "https://api.github.com/users/ian-h-chamberlain/repos", "events_url": "https://api.github.com/users/ian-h-chamberlain/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-h-chamberlain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ian-h-chamberlain", "id": 11131775, "node_id": "MDQ6VXNlcjExMTMxNzc1", "avatar_url": "https://avatars.githubusercontent.com/u/11131775?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ian-h-chamberlain", "html_url": "https://github.com/ian-h-chamberlain", "followers_url": "https://api.github.com/users/ian-h-chamberlain/followers", "following_url": "https://api.github.com/users/ian-h-chamberlain/following{/other_user}", "gists_url": "https://api.github.com/users/ian-h-chamberlain/gists{/gist_id}", "starred_url": "https://api.github.com/users/ian-h-chamberlain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ian-h-chamberlain/subscriptions", "organizations_url": "https://api.github.com/users/ian-h-chamberlain/orgs", "repos_url": "https://api.github.com/users/ian-h-chamberlain/repos", "events_url": "https://api.github.com/users/ian-h-chamberlain/events{/privacy}", "received_events_url": "https://api.github.com/users/ian-h-chamberlain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f32e20edb99a15d42984ec89f6b3986248845929", "url": "https://api.github.com/repos/rust-lang/rust/commits/f32e20edb99a15d42984ec89f6b3986248845929", "html_url": "https://github.com/rust-lang/rust/commit/f32e20edb99a15d42984ec89f6b3986248845929"}], "stats": {"total": 296, "additions": 272, "deletions": 24}, "files": [{"sha": "4844837a06f3ca11ff0b35367957e2854518c785", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "patch": "@@ -9,6 +9,7 @@\n             \"version\": \"0.5.0-dev\",\n             \"license\": \"MIT OR Apache-2.0\",\n             \"dependencies\": {\n+                \"anser\": \"^2.1.1\",\n                 \"d3\": \"^7.6.1\",\n                 \"d3-graphviz\": \"^5.0.2\",\n                 \"vscode-languageclient\": \"^8.0.2\"\n@@ -394,6 +395,11 @@\n                 \"url\": \"https://github.com/sponsors/epoberezkin\"\n             }\n         },\n+        \"node_modules/anser\": {\n+            \"version\": \"2.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/anser/-/anser-2.1.1.tgz\",\n+            \"integrity\": \"sha512-nqLm4HxOTpeLOxcmB3QWmV5TcDFhW9y/fyQ+hivtDFcK4OQ+pQ5fzPnXHM1Mfcm0VkLtvVi1TCPr++Qy0Q/3EQ==\"\n+        },\n         \"node_modules/ansi-regex\": {\n             \"version\": \"5.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\n@@ -4096,6 +4102,11 @@\n                 \"uri-js\": \"^4.2.2\"\n             }\n         },\n+        \"anser\": {\n+            \"version\": \"2.1.1\",\n+            \"resolved\": \"https://registry.npmjs.org/anser/-/anser-2.1.1.tgz\",\n+            \"integrity\": \"sha512-nqLm4HxOTpeLOxcmB3QWmV5TcDFhW9y/fyQ+hivtDFcK4OQ+pQ5fzPnXHM1Mfcm0VkLtvVi1TCPr++Qy0Q/3EQ==\"\n+        },\n         \"ansi-regex\": {\n             \"version\": \"5.0.1\",\n             \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\","}, {"sha": "3fe189e2b3b1e7da44f5fef3b3cad06b2cdd9c04", "filename": "editors/code/package.json", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "patch": "@@ -35,6 +35,7 @@\n         \"test\": \"cross-env TEST_VARIABLE=test node ./out/tests/runTests.js\"\n     },\n     \"dependencies\": {\n+        \"anser\": \"^2.1.1\",\n         \"d3\": \"^7.6.1\",\n         \"d3-graphviz\": \"^5.0.2\",\n         \"vscode-languageclient\": \"^8.0.2\""}, {"sha": "74cf44f42f71606e1b87d6167558641f00152ceb", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "patch": "@@ -3,6 +3,7 @@ import * as vscode from \"vscode\";\n import * as ra from \"../src/lsp_ext\";\n import * as Is from \"vscode-languageclient/lib/common/utils/is\";\n import { assert } from \"./util\";\n+import * as diagnostics from \"./diagnostics\";\n import { WorkspaceEdit } from \"vscode\";\n import { Config, substituteVSCodeVariables } from \"./config\";\n import { randomUUID } from \"crypto\";\n@@ -120,12 +121,12 @@ export async function createClient(\n             },\n             async handleDiagnostics(\n                 uri: vscode.Uri,\n-                diagnostics: vscode.Diagnostic[],\n+                diagnosticList: vscode.Diagnostic[],\n                 next: lc.HandleDiagnosticsSignature\n             ) {\n                 const preview = config.previewRustcOutput;\n                 const errorCode = config.useRustcErrorCode;\n-                diagnostics.forEach((diag, idx) => {\n+                diagnosticList.forEach((diag, idx) => {\n                     // Abuse the fact that VSCode leaks the LSP diagnostics data field through the\n                     // Diagnostic class, if they ever break this we are out of luck and have to go\n                     // back to the worst diagnostics experience ever:)\n@@ -154,16 +155,16 @@ export async function createClient(\n                         }\n                         diag.code = {\n                             target: vscode.Uri.from({\n-                                scheme: \"rust-analyzer-diagnostics-view\",\n-                                path: \"/diagnostic message\",\n+                                scheme: diagnostics.URI_SCHEME,\n+                                path: `/diagnostic message [${idx.toString()}]`,\n                                 fragment: uri.toString(),\n                                 query: idx.toString(),\n                             }),\n                             value: value ?? \"Click for full compiler diagnostic\",\n                         };\n                     }\n                 });\n-                return next(uri, diagnostics);\n+                return next(uri, diagnosticList);\n             },\n             async provideHover(\n                 document: vscode.TextDocument,"}, {"sha": "9695d8bf26d5f38af02c4da5fbd37c0291c74d11", "filename": "editors/code/src/diagnostics.ts", "status": "added", "additions": 212, "deletions": 0, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fdiagnostics.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fdiagnostics.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdiagnostics.ts?ref=1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "patch": "@@ -0,0 +1,212 @@\n+import * as anser from \"anser\";\n+import * as vscode from \"vscode\";\n+import { ProviderResult, Range, TextEditorDecorationType, ThemeColor, window } from \"vscode\";\n+import { Ctx } from \"./ctx\";\n+\n+export const URI_SCHEME = \"rust-analyzer-diagnostics-view\";\n+\n+export class TextDocumentProvider implements vscode.TextDocumentContentProvider {\n+    private _onDidChange = new vscode.EventEmitter<vscode.Uri>();\n+\n+    public constructor(private readonly ctx: Ctx) {}\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this._onDidChange.event;\n+    }\n+\n+    triggerUpdate(uri: vscode.Uri) {\n+        if (uri.scheme === URI_SCHEME) {\n+            this._onDidChange.fire(uri);\n+        }\n+    }\n+\n+    dispose() {\n+        this._onDidChange.dispose();\n+    }\n+\n+    async provideTextDocumentContent(uri: vscode.Uri): Promise<string> {\n+        const contents = getRenderedDiagnostic(this.ctx, uri);\n+        return anser.ansiToText(contents);\n+    }\n+}\n+\n+function getRenderedDiagnostic(ctx: Ctx, uri: vscode.Uri): string {\n+    const diags = ctx.client?.diagnostics?.get(vscode.Uri.parse(uri.fragment, true));\n+    if (!diags) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+\n+    const diag = diags[parseInt(uri.query)];\n+    if (!diag) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+    const rendered = (diag as unknown as { data?: { rendered?: string } }).data?.rendered;\n+\n+    if (!rendered) {\n+        return \"Unable to find original rustc diagnostic\";\n+    }\n+\n+    return rendered;\n+}\n+\n+interface AnserStyle {\n+    fg: string;\n+    bg: string;\n+    fg_truecolor: string;\n+    bg_truecolor: string;\n+    decorations: Array<anser.DecorationName>;\n+}\n+\n+export class AnsiDecorationProvider implements vscode.Disposable {\n+    private _decorationTypes = new Map<AnserStyle, TextEditorDecorationType>();\n+\n+    public constructor(private readonly ctx: Ctx) {}\n+\n+    dispose(): void {\n+        for (const decorationType of this._decorationTypes.values()) {\n+            decorationType.dispose();\n+        }\n+\n+        this._decorationTypes.clear();\n+    }\n+\n+    async provideDecorations(editor: vscode.TextEditor) {\n+        if (editor.document.uri.scheme !== URI_SCHEME) {\n+            return;\n+        }\n+\n+        const decorations = (await this._getDecorations(editor.document.uri)) || [];\n+        for (const [decorationType, ranges] of decorations) {\n+            editor.setDecorations(decorationType, ranges);\n+        }\n+    }\n+\n+    private _getDecorations(\n+        uri: vscode.Uri\n+    ): ProviderResult<[TextEditorDecorationType, Range[]][]> {\n+        const stringContents = getRenderedDiagnostic(this.ctx, uri);\n+        const lines = stringContents.split(\"\\n\");\n+\n+        const result = new Map<TextEditorDecorationType, Range[]>();\n+        // Populate all known decoration types in the result. This forces any\n+        // lingering decorations to be cleared if the text content changes to\n+        // something without ANSI codes for a given decoration type.\n+        for (const decorationType of this._decorationTypes.values()) {\n+            result.set(decorationType, []);\n+        }\n+\n+        for (const [lineNumber, line] of lines.entries()) {\n+            const totalEscapeLength = 0;\n+\n+            // eslint-disable-next-line camelcase\n+            const parsed = anser.ansiToJson(line, { use_classes: true });\n+\n+            let offset = 0;\n+\n+            for (const span of parsed) {\n+                const { content, ...style } = span;\n+\n+                const range = new Range(\n+                    lineNumber,\n+                    offset - totalEscapeLength,\n+                    lineNumber,\n+                    offset + content.length - totalEscapeLength\n+                );\n+\n+                offset += content.length;\n+\n+                const decorationType = this._getDecorationType(style);\n+\n+                if (!result.has(decorationType)) {\n+                    result.set(decorationType, []);\n+                }\n+\n+                result.get(decorationType)!.push(range);\n+            }\n+        }\n+\n+        return [...result];\n+    }\n+\n+    private _getDecorationType(style: AnserStyle): TextEditorDecorationType {\n+        let decorationType = this._decorationTypes.get(style);\n+\n+        if (decorationType) {\n+            return decorationType;\n+        }\n+\n+        const fontWeight = style.decorations.find((s) => s === \"bold\");\n+        const fontStyle = style.decorations.find((s) => s === \"italic\");\n+        const textDecoration = style.decorations.find((s) => s === \"underline\");\n+\n+        decorationType = window.createTextEditorDecorationType({\n+            backgroundColor: AnsiDecorationProvider._convertColor(style.bg, style.bg_truecolor),\n+            color: AnsiDecorationProvider._convertColor(style.fg, style.fg_truecolor),\n+            fontWeight,\n+            fontStyle,\n+            textDecoration,\n+        });\n+\n+        this._decorationTypes.set(style, decorationType);\n+\n+        return decorationType;\n+    }\n+\n+    // NOTE: This could just be a kebab-case to camelCase conversion, but I think it's\n+    // a short enough list to just write these by hand\n+    static readonly _anserToThemeColor: Record<string, ThemeColor> = {\n+        \"ansi-black\": \"ansiBlack\",\n+        \"ansi-white\": \"ansiWhite\",\n+        \"ansi-red\": \"ansiRed\",\n+        \"ansi-green\": \"ansiGreen\",\n+        \"ansi-yellow\": \"ansiYellow\",\n+        \"ansi-blue\": \"ansiBlue\",\n+        \"ansi-magenta\": \"ansiMagenta\",\n+        \"ansi-cyan\": \"ansiCyan\",\n+\n+        \"ansi-bright-black\": \"ansiBrightBlack\",\n+        \"ansi-bright-white\": \"ansiBrightWhite\",\n+        \"ansi-bright-red\": \"ansiBrightRed\",\n+        \"ansi-bright-green\": \"ansiBrightGreen\",\n+        \"ansi-bright-yellow\": \"ansiBrightYellow\",\n+        \"ansi-bright-blue\": \"ansiBrightBlue\",\n+        \"ansi-bright-magenta\": \"ansiBrightMagenta\",\n+        \"ansi-bright-cyan\": \"ansiBrightCyan\",\n+    };\n+\n+    private static _convertColor(\n+        color?: string,\n+        truecolor?: string\n+    ): ThemeColor | string | undefined {\n+        if (!color) {\n+            return undefined;\n+        }\n+\n+        if (color === \"ansi-truecolor\") {\n+            if (!truecolor) {\n+                return undefined;\n+            }\n+            return `rgb(${truecolor})`;\n+        }\n+\n+        const paletteMatch = color.match(/ansi-palette-(.+)/);\n+        if (paletteMatch) {\n+            const paletteColor = paletteMatch[1];\n+            // anser won't return both the RGB and the color name at the same time,\n+            // so just fake a single foreground control char with the palette number:\n+            const spans = anser.ansiToJson(`\\x1b[38;5;${paletteColor}m`);\n+            const rgb = spans[1].fg;\n+\n+            if (rgb) {\n+                return `rgb(${rgb})`;\n+            }\n+        }\n+\n+        const themeColor = AnsiDecorationProvider._anserToThemeColor[color];\n+        if (themeColor) {\n+            return new ThemeColor(\"terminal.\" + themeColor);\n+        }\n+\n+        return undefined;\n+    }\n+}"}, {"sha": "dd439317c709238c230c81f5b0459797a7b5099e", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=1b8141b54cb5f89bd3dee7bfbab41109d1b48cb6", "patch": "@@ -3,6 +3,7 @@ import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n import { CommandFactory, Ctx, fetchWorkspace } from \"./ctx\";\n+import * as diagnostics from \"./diagnostics\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n \n@@ -48,30 +49,52 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n+    const diagnosticProvider = new diagnostics.TextDocumentProvider(ctx);\n     ctx.pushExtCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\n-            \"rust-analyzer-diagnostics-view\",\n-            new (class implements vscode.TextDocumentContentProvider {\n-                async provideTextDocumentContent(uri: vscode.Uri): Promise<string> {\n-                    const diags = ctx.client?.diagnostics?.get(\n-                        vscode.Uri.parse(uri.fragment, true)\n-                    );\n-                    if (!diags) {\n-                        return \"Unable to find original rustc diagnostic\";\n-                    }\n-\n-                    const diag = diags[parseInt(uri.query)];\n-                    if (!diag) {\n-                        return \"Unable to find original rustc diagnostic\";\n-                    }\n-                    const rendered = (diag as unknown as { data?: { rendered?: string } }).data\n-                        ?.rendered;\n-                    return rendered ?? \"Unable to find original rustc diagnostic\";\n-                }\n-            })()\n+            diagnostics.URI_SCHEME,\n+            diagnosticProvider\n         )\n     );\n \n+    const decorationProvider = new diagnostics.AnsiDecorationProvider(ctx);\n+    ctx.pushExtCleanup(decorationProvider);\n+\n+    async function decorateVisibleEditors(document: vscode.TextDocument) {\n+        for (const editor of vscode.window.visibleTextEditors) {\n+            if (document === editor.document) {\n+                await decorationProvider.provideDecorations(editor);\n+            }\n+        }\n+    }\n+\n+    vscode.workspace.onDidChangeTextDocument(\n+        async (event) => await decorateVisibleEditors(event.document),\n+        null,\n+        ctx.subscriptions\n+    );\n+    vscode.workspace.onDidOpenTextDocument(decorateVisibleEditors, null, ctx.subscriptions);\n+    vscode.window.onDidChangeActiveTextEditor(\n+        async (editor) => {\n+            if (editor) {\n+                diagnosticProvider.triggerUpdate(editor.document.uri);\n+                await decorateVisibleEditors(editor.document);\n+            }\n+        },\n+        null,\n+        ctx.subscriptions\n+    );\n+    vscode.window.onDidChangeVisibleTextEditors(\n+        async (visibleEditors) => {\n+            for (const editor of visibleEditors) {\n+                diagnosticProvider.triggerUpdate(editor.document.uri);\n+                await decorationProvider.provideDecorations(editor);\n+            }\n+        },\n+        null,\n+        ctx.subscriptions\n+    );\n+\n     vscode.workspace.onDidChangeWorkspaceFolders(\n         async (_) => ctx.onWorkspaceFolderChanges(),\n         null,"}]}