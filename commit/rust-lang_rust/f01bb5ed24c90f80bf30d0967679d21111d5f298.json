{"sha": "f01bb5ed24c90f80bf30d0967679d21111d5f298", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwMWJiNWVkMjRjOTBmODBiZjMwZDA5Njc2NzlkMjExMTFkNWYyOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-23T12:36:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-23T12:36:28Z"}, "message": "Auto merge of #33092 - alexcrichton:rustbuild-docs, r=brson\n\nrustbuild: Run all markdown documentation tests\n\nThis commit adds support to rustbuild to run all documentation tests, basically\nrunning `rustdoc --test` over all our documentation.", "tree": {"sha": "ec5ac6079d0a6abebb8f657606e32942cc080fd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec5ac6079d0a6abebb8f657606e32942cc080fd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f01bb5ed24c90f80bf30d0967679d21111d5f298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f01bb5ed24c90f80bf30d0967679d21111d5f298", "html_url": "https://github.com/rust-lang/rust/commit/f01bb5ed24c90f80bf30d0967679d21111d5f298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f01bb5ed24c90f80bf30d0967679d21111d5f298/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef57fb714402286532932371b667abda5fe874f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef57fb714402286532932371b667abda5fe874f3", "html_url": "https://github.com/rust-lang/rust/commit/ef57fb714402286532932371b667abda5fe874f3"}, {"sha": "ede8944ea778e33b0c268fdd0545cb2b15b9cf24", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede8944ea778e33b0c268fdd0545cb2b15b9cf24", "html_url": "https://github.com/rust-lang/rust/commit/ede8944ea778e33b0c268fdd0545cb2b15b9cf24"}], "stats": {"total": 224, "additions": 140, "deletions": 84}, "files": [{"sha": "32164080947a6edd43fa39e39183f2c422418208", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n use std::fs;\n-use std::path::PathBuf;\n+use std::path::{PathBuf, Path};\n+use std::process::Command;\n \n use build::{Build, Compiler};\n \n@@ -113,3 +114,42 @@ pub fn compiletest(build: &Build,\n \n     build.run(&mut cmd);\n }\n+\n+pub fn docs(build: &Build, compiler: &Compiler) {\n+    let mut stack = vec![build.src.join(\"src/doc\")];\n+\n+    while let Some(p) = stack.pop() {\n+        if p.is_dir() {\n+            stack.extend(t!(p.read_dir()).map(|p| t!(p).path()));\n+            continue\n+        }\n+\n+        if p.extension().and_then(|s| s.to_str()) != Some(\"md\") {\n+            continue\n+        }\n+\n+        println!(\"doc tests for: {}\", p.display());\n+        markdown_test(build, compiler, &p);\n+    }\n+}\n+\n+pub fn error_index(build: &Build, compiler: &Compiler) {\n+    println!(\"Testing error-index stage{}\", compiler.stage);\n+\n+    let output = testdir(build, compiler.host).join(\"error-index.md\");\n+    build.run(build.tool_cmd(compiler, \"error_index_generator\")\n+                   .arg(\"markdown\")\n+                   .arg(&output)\n+                   .env(\"CFG_BUILD\", &build.config.build));\n+\n+    markdown_test(build, compiler, &output);\n+}\n+\n+fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n+    let mut cmd = Command::new(build.rustdoc(compiler));\n+    build.add_rustc_lib_path(compiler, &mut cmd);\n+    cmd.arg(\"--test\");\n+    cmd.arg(markdown);\n+    cmd.arg(\"--test-args\").arg(build.flags.args.join(\" \"));\n+    build.run(&mut cmd);\n+}"}, {"sha": "3c3add3d9a16229bf861498c3114925cbacab354", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -308,6 +308,12 @@ impl Build {\n                     check::compiletest(self, &compiler, target.target,\n                                        \"compile-fail\", \"compile-fail-fulldeps\")\n                 }\n+                CheckDocs { compiler } => {\n+                    check::docs(self, &compiler);\n+                }\n+                CheckErrorIndex { compiler } => {\n+                    check::error_index(self, &compiler);\n+                }\n \n                 DistDocs { stage } => dist::docs(self, stage, target.target),\n                 DistMingw { _dummy } => dist::mingw(self, target.target),"}, {"sha": "133ae702869a4818ba3d0a651603b18a0523d8b2", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -96,6 +96,8 @@ macro_rules! targets {\n             (check_rpass_valgrind, CheckRPassValgrind { compiler: Compiler<'a> }),\n             (check_rpass_full, CheckRPassFull { compiler: Compiler<'a> }),\n             (check_cfail_full, CheckCFailFull { compiler: Compiler<'a> }),\n+            (check_docs, CheckDocs { compiler: Compiler<'a> }),\n+            (check_error_index, CheckErrorIndex { compiler: Compiler<'a> }),\n \n             // Distribution targets, creating tarballs\n             (dist, Dist { stage: u32 }),\n@@ -341,7 +343,10 @@ impl<'a> Step<'a> {\n                     self.check_rpass_valgrind(compiler),\n                     self.check_rpass_full(compiler),\n                     self.check_cfail_full(compiler),\n+                    self.check_error_index(compiler),\n+                    self.check_docs(compiler),\n                     self.check_linkcheck(stage),\n+                    self.check_tidy(stage),\n                     self.dist(stage),\n                 ]\n             }\n@@ -383,6 +388,12 @@ impl<'a> Step<'a> {\n                 vec![self.librustc(compiler),\n                      self.tool_compiletest(compiler.stage)]\n             }\n+            Source::CheckDocs { compiler } => {\n+                vec![self.libstd(compiler)]\n+            }\n+            Source::CheckErrorIndex { compiler } => {\n+                vec![self.libstd(compiler), self.tool_error_index(compiler.stage)]\n+            }\n \n             Source::ToolLinkchecker { stage } |\n             Source::ToolTidy { stage } => {"}, {"sha": "e1d95732b467caf043ae901fc7777090f385b6d3", "filename": "src/doc/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2FREADME.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -9,7 +9,7 @@ libraries.\n \n To generate HTML documentation from one source file/crate, do something like:\n \n-~~~~\n+~~~~text\n rustdoc --output html-doc/ --output-format html ../src/libstd/path.rs\n ~~~~\n \n@@ -20,7 +20,7 @@ rustdoc --output html-doc/ --output-format html ../src/libstd/path.rs\n To generate an HTML version of a doc from Markdown manually, you can do\n something like:\n \n-~~~~\n+~~~~text\n rustdoc reference.md\n ~~~~\n "}, {"sha": "269f2a289464a1a73fc62a6287804b2bca745b77", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -9,7 +9,7 @@ pattern.\n \n Prefer\n \n-```rust\n+```rust,ignore\n use std::io::{File, Open, Write, IoError};\n \n struct Info {\n@@ -31,7 +31,7 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n \n over\n \n-```rust\n+```rust,ignore\n use std::io::{File, Open, Write, IoError};\n \n struct Info {"}, {"sha": "a3559ca3e7b6b213ea24be103ca461536dcb671b", "filename": "src/doc/style/features/functions-and-methods/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2FREADME.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,15 +4,15 @@\n \n Prefer\n \n-```rust\n+```rust,ignore\n impl Foo {\n     pub fn frob(&self, w: widget) { ... }\n }\n ```\n \n over\n \n-```rust\n+```rust,ignore\n pub fn frob(foo: &Foo, w: widget) { ... }\n ```\n "}, {"sha": "5b63a4514443c47ea17943d4b1ad0d8bee3dcd6e", "filename": "src/doc/style/features/functions-and-methods/input.md", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Finput.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -6,15 +6,15 @@\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn foo(b: Bar) {\n    // use b as owned, directly\n }\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn foo(b: &Bar) {\n     let b = b.clone();\n     // use b as owned after cloning\n@@ -33,13 +33,13 @@ needed, not as a way of signaling that copies should be cheap to make.\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn foo(b: Bar) -> Bar { ... }\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn foo(b: Box<Bar>) -> Box<Bar> { ... }\n ```\n \n@@ -56,13 +56,13 @@ it becomes.\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn foo<T: Iterator<i32>>(c: T) { ... }\n ```\n \n over any of\n \n-```rust\n+```rust,ignore\n fn foo(c: &[i32]) { ... }\n fn foo(c: &Vec<i32>) { ... }\n fn foo(c: &SomeOtherCollection<i32>) { ... }\n@@ -83,14 +83,14 @@ concrete nor overly abstract. See the discussion on\n \n Prefer either of\n \n-```rust\n+```rust,ignore\n fn foo(b: &Bar) { ... }\n fn foo(b: &mut Bar) { ... }\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn foo(b: Bar) { ... }\n ```\n \n@@ -101,13 +101,13 @@ ownership is actually needed.\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn foo() -> (Bar, Bar)\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn foo(output: &mut Bar) -> Bar\n ```\n \n@@ -120,7 +120,7 @@ multiple values, it should do so via one of these types.\n The primary exception: sometimes a function is meant to modify data\n that the caller already owns, for example to re-use a buffer:\n \n-```rust\n+```rust,ignore\n fn read(&mut self, buf: &mut [u8]) -> std::io::Result<usize>\n ```\n \n@@ -146,7 +146,7 @@ Choose an argument type that rules out bad inputs.\n \n For example, prefer\n \n-```rust\n+```rust,ignore\n enum FooMode {\n     Mode1,\n     Mode2,\n@@ -157,7 +157,7 @@ fn foo(mode: FooMode) { ... }\n \n over\n \n-```rust\n+```rust,ignore\n fn foo(mode2: bool, mode3: bool) {\n     assert!(!mode2 || !mode3);\n     ..."}, {"sha": "e26eee53367cf80e4638bb2279c2e90ce200f495", "filename": "src/doc/style/features/functions-and-methods/output.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ffunctions-and-methods%2Foutput.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -16,7 +16,7 @@ API.\n \n Prefer\n \n-```rust\n+```rust,ignore\n struct SearchResult {\n     found: bool,          // item in container?\n     expected_index: usize // what would the item's index be?\n@@ -26,27 +26,27 @@ fn binary_search(&self, k: Key) -> SearchResult\n ```\n or\n \n-```rust\n+```rust,ignore\n fn binary_search(&self, k: Key) -> (bool, usize)\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn binary_search(&self, k: Key) -> bool\n ```\n \n #### Yield back ownership:\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn from_utf8_owned(vv: Vec<u8>) -> Result<String, Vec<u8>>\n ```\n \n over\n \n-```rust\n+```rust,ignore\n fn from_utf8_owned(vv: Vec<u8>) -> Option<String>\n ```\n "}, {"sha": "ba9787b45f13c2310ab78f3b12b578219e6bc09d", "filename": "src/doc/style/features/let.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Flet.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,7 +4,7 @@\n \n Prefer\n \n-```rust\n+```rust,ignore\n fn use_mutex(m: sync::mutex::Mutex<i32>) {\n     let guard = m.lock();\n     do_work(guard);\n@@ -15,7 +15,7 @@ fn use_mutex(m: sync::mutex::Mutex<i32>) {\n \n over\n \n-```rust\n+```rust,ignore\n fn use_mutex(m: sync::mutex::Mutex<i32>) {\n     do_work(m.lock());\n     // do other work\n@@ -32,7 +32,7 @@ explicitly `let`-bound to make the lifetime clear. Consider using an explicit\n \n Prefer\n \n-```rust\n+```rust,ignore\n let foo = match bar {\n     Baz => 0,\n     Quux => 1\n@@ -41,7 +41,7 @@ let foo = match bar {\n \n over\n \n-```rust\n+```rust,ignore\n let foo;\n match bar {\n     Baz => {\n@@ -60,14 +60,14 @@ conditional expression.\n \n Prefer\n \n-```rust\n+```rust,ignore\n let v = s.iter().map(|x| x * 2)\n                 .collect::<Vec<_>>();\n ```\n \n over\n \n-```rust\n+```rust,ignore\n let v: Vec<_> = s.iter().map(|x| x * 2)\n                         .collect();\n ```\n@@ -87,7 +87,7 @@ the type by explicit generics instantiation, which is usually more clear.\n \n Use `mut` bindings to signal the span during which a value is mutated:\n \n-```rust\n+```rust,ignore\n let mut v = Vec::new();\n // push things onto v\n let v = v;"}, {"sha": "0d5a1184a0e876f7ad8d544ab97c8b50cb5ca72f", "filename": "src/doc/style/features/match.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Fmatch.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Fmatch.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Fmatch.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,7 +4,7 @@\n \n Prefer\n \n-~~~~\n+~~~~ignore\n match *foo {\n     X(...) => ...\n     Y(...) => ...\n@@ -13,7 +13,7 @@ match *foo {\n \n over\n \n-~~~~\n+~~~~ignore\n match foo {\n     box X(...) => ...\n     box Y(...) => ..."}, {"sha": "995c5fda8a0aa65f123be724c1d0078567083e86", "filename": "src/doc/style/features/modules.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Fmodules.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -35,7 +35,7 @@ module hierarchy match, instead.\n For all except very short modules (<100 lines) and [tests](../testing/README.md),\n place the module `foo` in a separate file, as in:\n \n-```rust\n+```rust,ignore\n pub mod foo;\n \n // in foo.rs or foo/mod.rs\n@@ -45,7 +45,7 @@ pub fn bar() { println!(\"...\"); }\n \n rather than declaring it inline:\n \n-```rust\n+```rust,ignore\n pub mod foo {\n     pub fn bar() { println!(\"...\"); }\n     /* ... */\n@@ -67,7 +67,7 @@ On the other hand,\n [`io::net`](https://doc.rust-lang.org/std/io/net/)\n contains submodules, so it lives in a separate directory:\n \n-```\n+```text\n io/mod.rs\n    io/extensions.rs\n    io/fs.rs\n@@ -120,7 +120,7 @@ and\n [`BufWriter`](https://doc.rust-lang.org/std/io/struct.BufWriter.html),\n but these are re-exported in `io/mod.rs` at the top level of the module:\n \n-```rust\n+```rust,ignore\n // libstd/io/mod.rs\n \n pub use self::mem::{MemReader, BufReader, MemWriter, BufWriter};"}, {"sha": "e8699c75229d36fc6286d54c7add8114b919aedf", "filename": "src/doc/style/features/traits/common.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fcommon.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fcommon.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fcommon.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -19,7 +19,7 @@ workaround; see [newtype for views](../types/newtype.md))\n \n The most important common traits to implement from `std` are:\n \n-```rust\n+```text\n Clone, Debug, Hash, Eq\n ```\n "}, {"sha": "f9dac1272c33405406922fcba844e4295b7119fd", "filename": "src/doc/style/features/traits/generics.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fgenerics.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,7 +4,7 @@ The most widespread use of traits is for writing generic functions or types. For\n example, the following signature describes a function for consuming any iterator\n yielding items of type `A` to produce a collection of `A`:\n \n-```rust\n+```rust,ignore\n fn from_iter<T: Iterator<A>>(iterator: T) -> SomeCollection<A>\n ```\n \n@@ -32,7 +32,7 @@ explicitly implement to be used by this generic function.\n   implementing a trait, it is possible to be precise about places where that\n   exact type is required or produced. For example, a function\n \n-  ```rust\n+  ```rust,ignore\n   fn binary<T: Trait>(x: T, y: T) -> T\n   ```\n "}, {"sha": "34712ed1ae7f131c414aa9ae8ac67cb10947ab50", "filename": "src/doc/style/features/traits/objects.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fobjects.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fobjects.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftraits%2Fobjects.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -6,7 +6,7 @@ Trait objects are useful primarily when _heterogeneous_ collections of objects\n need to be treated uniformly; it is the closest that Rust comes to\n object-oriented programming.\n \n-```rust\n+```rust,ignore\n struct Frame  { ... }\n struct Button { ... }\n struct Label  { ... }"}, {"sha": "d3b95d8a6e719d3df1ab956c733636e0e3698d60", "filename": "src/doc/style/features/types/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2FREADME.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,13 +4,13 @@\n \n Prefer\n \n-```rust\n+```rust,ignore\n let w = Widget::new(Small, Round)\n ```\n \n over\n \n-```rust\n+```rust,ignore\n let w = Widget::new(true, false)\n ```\n "}, {"sha": "9646e3e82aa5384e73f81c6f44d898e8b9661567", "filename": "src/doc/style/features/types/newtype.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ffeatures%2Ftypes%2Fnewtype.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -13,7 +13,7 @@ underlying type.\n For example, a `f64` value might be used to represent a quantity in miles or in\n kilometers. Using newtypes, we can keep track of the intended interpretation:\n \n-```rust\n+```rust,ignore\n struct Miles(pub f64);\n struct Kilometers(pub f64);\n \n@@ -28,7 +28,7 @@ impl Kilometers {\n Once we have separated these two types, we can statically ensure that we do not\n confuse them. For example, the function\n \n-```rust\n+```rust,ignore\n fn are_we_there_yet(distance_travelled: Miles) -> bool { ... }\n ```\n \n@@ -46,7 +46,7 @@ type `Enumerate<Skip<vec::MoveItems<T>>>`. We wish to hide this type from the\n client, so that the client's view of the return type is roughly `Iterator<(usize,\n T)>`. We can do so using the newtype pattern:\n \n-```rust\n+```rust,ignore\n struct MyTransformResult<T>(Enumerate<Skip<vec::MoveItems<T>>>);\n impl<T> Iterator<(usize, T)> for MyTransformResult<T> { ... }\n "}, {"sha": "3422591233275317e416c11bdeb2295f97ecf307", "filename": "src/doc/style/ownership/builders.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fownership%2Fbuilders.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -35,7 +35,7 @@ be consumed. The follow variant on\n [`std::process::Command`](https://doc.rust-lang.org/stable/std/process/struct.Command.html)\n is one example:\n \n-```rust\n+```rust,ignore\n // NOTE: the actual Command API does not use owned Strings;\n // this is a simplified version.\n \n@@ -94,7 +94,7 @@ methods take and return a mutable borrow of `self`.\n By using borrows throughout, `Command` can be used conveniently for both\n one-liner and more complex constructions:\n \n-```rust\n+```rust,ignore\n // One-liners\n Command::new(\"/bin/cat\").arg(\"file.txt\").spawn();\n \n@@ -114,7 +114,7 @@ cmd.spawn();\n Sometimes builders must transfer ownership when constructing the final type\n `T`, meaning that the terminal methods must take `self` rather than `&self`:\n \n-```rust\n+```rust,ignore\n // A simplified excerpt from std::thread::Builder\n \n impl ThreadBuilder {\n@@ -156,7 +156,7 @@ Under the rubric of making easy things easy and hard things possible, _all_\n builder methods for a consuming builder should take and returned an owned\n `self`. Then client code works as follows:\n \n-```rust\n+```rust,ignore\n // One-liners\n ThreadBuilder::new().named(\"my_thread\").spawn(proc() { ... });\n "}, {"sha": "51fc74ac1158aa47f0db1147133b8066285abbb9", "filename": "src/doc/style/ownership/constructors.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fownership%2Fconstructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fownership%2Fconstructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fownership%2Fconstructors.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,7 +4,7 @@\n \n In Rust, \"constructors\" are just a convention:\n \n-```rust\n+```rust,ignore\n impl<T> Vec<T> {\n     pub fn new() -> Vec<T> { ... }\n }\n@@ -15,7 +15,7 @@ construct. Combined with the practice of\n [fully importing type names](../style/imports.md), this convention leads to\n informative but concise construction:\n \n-```rust\n+```rust,ignore\n use vec::Vec;\n \n // construct a new vector\n@@ -29,7 +29,7 @@ than `new`).\n \n Given the `struct`\n \n-```rust\n+```rust,ignore\n pub struct Config {\n     pub color: Color,\n     pub size:  Size,\n@@ -39,7 +39,7 @@ pub struct Config {\n \n provide a constructor if there are sensible defaults:\n \n-```rust\n+```rust,ignore\n impl Config {\n     pub fn new() -> Config {\n         Config {\n@@ -53,7 +53,7 @@ impl Config {\n \n which then allows clients to concisely override using `struct` update syntax:\n \n-```rust\n+```rust,ignore\n Config { color: Red, .. Config::new() };\n ```\n "}, {"sha": "80323dba1d4c247e088cca5ed115205fe54f8231", "filename": "src/doc/style/style/braces.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fbraces.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fbraces.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fbraces.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -2,7 +2,7 @@\n \n ### Opening braces always go on the same line.\n \n-``` rust\n+```rust,ignore\n fn foo() {\n     ...\n }\n@@ -30,7 +30,7 @@ frob(|x| {\n \n ### `match` arms get braces, except for single-line expressions.\n \n-``` rust\n+```rust,ignore\n match foo {\n     bar => baz,\n     quux => {\n@@ -42,7 +42,7 @@ match foo {\n \n ### `return` statements get semicolons.\n \n-``` rust\n+```rust,ignore\n fn foo() {\n     do_something();\n \n@@ -62,7 +62,7 @@ fn foo() {\n > One possible rule: a trailing comma should be included whenever the\n > closing delimiter appears on a separate line:\n \n-```rust\n+```rust,ignore\n Foo { bar: 0, baz: 1 }\n \n Foo {"}, {"sha": "bf8cf653dbb168519c05747ea7090d8f12910543", "filename": "src/doc/style/style/comments.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fcomments.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fcomments.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fcomments.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -4,7 +4,7 @@\n \n Use line comments:\n \n-``` rust\n+```rust\n // Wait for the main thread to return, and set the process error code\n // appropriately.\n ```\n@@ -51,7 +51,7 @@ Basically, this means write \"Returns\" instead of \"Return\".\n \n For example:\n \n-``` rust\n+```rust,ignore\n /// Sets up a default runtime configuration, given compiler-supplied arguments.\n ///\n /// This function will block until the entire pool of M:N schedulers has\n@@ -80,7 +80,7 @@ For example:\n \n Use inner doc comments _only_ to document crates and file-level modules:\n \n-``` rust\n+```rust,ignore\n //! The core library.\n //!\n //! The core library is a something something...\n@@ -92,7 +92,7 @@ Rust doesn't have special constructors, only functions that return new\n instances.  These aren't visible in the automatically generated documentation\n for a type, so you should specifically link to them:\n \n-``` rust\n+```rust,ignore\n /// An iterator that yields `None` forever after the underlying iterator\n /// yields `None` once.\n ///"}, {"sha": "578270fbdc256898c0573d40a74a384230993842", "filename": "src/doc/style/style/features.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Ffeatures.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -2,7 +2,7 @@\n \n Terminate `return` statements with semicolons:\n \n-``` rust\n+``` rust,ignore\n fn foo(bar: i32) -> Option<i32> {\n     if some_condition() {\n         return None;"}, {"sha": "c958875ddb92616fb0450d6daa67691e6ebfdec6", "filename": "src/doc/style/style/imports.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fimports.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -10,7 +10,7 @@ sections, in order, with a blank space between each:\n \n For example:\n \n-```rust\n+```rust,ignore\n // Crates.\n extern crate getopts;\n extern crate mylib;\n@@ -40,7 +40,7 @@ as a convenience.\n \n For example:\n \n-```rust\n+```rust,ignore\n use option::Option;\n use mem;\n "}, {"sha": "6d88a838f5f5322d0b21e18c23e5952e6c695c05", "filename": "src/doc/style/style/naming/README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2FREADME.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -69,15 +69,15 @@ Names of items within a module should not be prefixed with that module's name:\n \n Prefer\n \n-``` rust\n+```rust,ignore\n mod foo {\n     pub struct Error { ... }\n }\n ```\n \n over\n \n-``` rust\n+```rust,ignore\n mod foo {\n     pub struct FooError { ... }\n }"}, {"sha": "c352a5b1bf1912df19f8db867f828886183586ba", "filename": "src/doc/style/style/naming/containers.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fcontainers.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fcontainers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fcontainers.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -13,7 +13,7 @@ appropriate. This name is chosen rather than names like `find` or\n \n For a container with keys/indexes of type `K` and elements of type `V`:\n \n-```rust\n+```rust,ignore\n // Look up element without failing\n fn get(&self, key: K) -> Option<&V>\n fn get_mut(&mut self, key: K) -> Option<&mut V>\n@@ -31,7 +31,7 @@ impl IndexMut<K, V> for Container { ... }\n Prefer specific conversion functions like `as_bytes` or `into_vec` whenever\n possible. Otherwise, use:\n \n-```rust\n+```rust,ignore\n // Extract contents without failing\n fn get(&self) -> &V\n fn get_mut(&mut self) -> &mut V\n@@ -40,7 +40,7 @@ fn unwrap(self) -> V\n \n #### Wrappers/Cells around `Copy` data\n \n-```rust\n+```rust,ignore\n // Extract contents without failing\n fn get(&self) -> V\n ```\n@@ -52,15 +52,15 @@ play a special role for failure.\n \n For `Option<V>`:\n \n-```rust\n+```rust,ignore\n // Extract contents or fail if not available\n fn assert(self) -> V\n fn expect(self, &str) -> V\n ```\n \n For `Result<V, E>`:\n \n-```rust\n+```rust,ignore\n // Extract the contents of Ok variant; fail if Err\n fn assert(self) -> V\n "}, {"sha": "945cbe4800cb089a2b420536ce6b05a95d29a1ec", "filename": "src/doc/style/style/naming/iterators.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fiterators.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fiterators.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fnaming%2Fiterators.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -6,7 +6,7 @@\n \n For a container with elements of type `U`, iterator methods should be named:\n \n-```rust\n+```rust,ignore\n fn iter(&self) -> T           // where T implements Iterator<&U>\n fn iter_mut(&mut self) -> T   // where T implements Iterator<&mut U>\n fn into_iter(self) -> T       // where T implements Iterator<U>"}, {"sha": "c33c17c8e42a28be24ae1fa24e65336aefb14d56", "filename": "src/doc/style/style/whitespace.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Fstyle%2Fwhitespace.md?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -8,7 +8,7 @@\n \n * Use spaces around binary operators, including the equals sign in attributes:\n \n-``` rust\n+```rust,ignore\n #[deprecated = \"Use `bar` instead.\"]\n fn foo(a: usize, b: usize) -> usize {\n     a + b\n@@ -17,7 +17,7 @@ fn foo(a: usize, b: usize) -> usize {\n \n * Use a space after colons and commas:\n \n-``` rust\n+```rust,ignore\n fn foo(a: Bar);\n \n MyStruct { foo: 3, bar: 4 }\n@@ -28,7 +28,7 @@ foo(bar, baz);\n * Use a space after the opening and before the closing brace for\n   single line blocks or `struct` expressions:\n \n-``` rust\n+```rust,ignore\n spawn(proc() { do_something(); })\n \n Point { x: 0.1, y: 0.3 }\n@@ -39,7 +39,7 @@ Point { x: 0.1, y: 0.3 }\n * For multiline function signatures, each new line should align with the\n   first parameter. Multiple parameters per line are permitted:\n \n-``` rust\n+```rust,ignore\n fn frobnicate(a: Bar, b: Bar,\n               c: Bar, d: Bar)\n               -> Bar {\n@@ -59,7 +59,7 @@ fn foo<T: This,\n   signatures. However, if the final argument begins a new block, the\n   contents of the block may begin on a new line, indented one level:\n \n-``` rust\n+```rust,ignore\n fn foo_bar(a: Bar, b: Bar,\n            c: |Bar|) -> Bar {\n     ...\n@@ -77,7 +77,7 @@ foo_bar(x, y, |z| {\n \n > **[FIXME]** Do we also want to allow the following?\n >\n-> ```rust\n+> ```rust,ignore\n > frobnicate(\n >     arg1,\n >     arg2,\n@@ -92,7 +92,7 @@ foo_bar(x, y, |z| {\n > * **[Deprecated]** If you have multiple patterns in a single `match`\n >   arm, write each pattern on a separate line:\n >\n->     ``` rust\n+>     ```rust,ignore\n >     match foo {\n >         bar(_)\n >         | baz => quux,\n@@ -110,7 +110,7 @@ Idiomatic code should not use extra whitespace in the middle of a line\n to provide alignment.\n \n \n-``` rust\n+```rust,ignore\n // Good\n struct Foo {\n     short: f64,"}, {"sha": "a3b0c885d69355737de8bc73bfe63a9f76b1bef0", "filename": "src/rustc/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Frustc%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f01bb5ed24c90f80bf30d0967679d21111d5f298/src%2Frustc%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.lock?ref=f01bb5ed24c90f80bf30d0967679d21111d5f298", "patch": "@@ -268,7 +268,6 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"log 0.0.0\",\n  \"rustc 0.0.0\",\n- \"rustc_bitflags 0.0.0\",\n  \"syntax 0.0.0\",\n ]\n "}]}