{"sha": "cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGEyMzFlYjhiNzMwMTI4YzViN2U4OWM4ZWFjOWVhYjM2NjQyYzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T19:51:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-17T19:51:57Z"}, "message": "auto merge of #8433 : brson/rust/rm-more-oldrt-crud, r=brson\n\nJust deleting more stuff.", "tree": {"sha": "cba701818d1dfa1e69d07d2658c6df620c2b6045", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba701818d1dfa1e69d07d2658c6df620c2b6045"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "html_url": "https://github.com/rust-lang/rust/commit/cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7503396070a8d69040e9998faf667c29c6a6f2cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/7503396070a8d69040e9998faf667c29c6a6f2cb", "html_url": "https://github.com/rust-lang/rust/commit/7503396070a8d69040e9998faf667c29c6a6f2cb"}, {"sha": "a4d171e009813a4fef8aebeb3c6c7759064aafe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d171e009813a4fef8aebeb3c6c7759064aafe2", "html_url": "https://github.com/rust-lang/rust/commit/a4d171e009813a4fef8aebeb3c6c7759064aafe2"}], "stats": {"total": 831, "additions": 115, "deletions": 716}, "files": [{"sha": "e6969a79f5a79abe95a97dd70a37a231e01b424b", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -68,9 +68,7 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n-              rt/rust_env.cpp \\\n               rt/rust_rng.cpp \\\n-              rt/rust_stack.cpp \\\n               rt/rust_upcall.cpp \\\n               rt/rust_uv.cpp \\\n               rt/rust_crate_map.cpp \\"}, {"sha": "ae9d3d5ec0e0b390186d768b5a5d7dbeebca7562", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 42, "deletions": 48, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -57,28 +57,27 @@ pub enum LangItem {\n \n     StrEqFnLangItem,                   // 19\n     UniqStrEqFnLangItem,               // 20\n-    AnnihilateFnLangItem,              // 21\n-    LogTypeFnLangItem,                 // 22\n-    FailFnLangItem,                    // 23\n-    FailBoundsCheckFnLangItem,         // 24\n-    ExchangeMallocFnLangItem,          // 25\n-    ClosureExchangeMallocFnLangItem,   // 26\n-    ExchangeFreeFnLangItem,            // 27\n-    MallocFnLangItem,                  // 28\n-    FreeFnLangItem,                    // 29\n-    BorrowAsImmFnLangItem,             // 30\n-    BorrowAsMutFnLangItem,             // 31\n-    ReturnToMutFnLangItem,             // 32\n-    CheckNotBorrowedFnLangItem,        // 33\n-    StrDupUniqFnLangItem,              // 34\n-    RecordBorrowFnLangItem,            // 35\n-    UnrecordBorrowFnLangItem,          // 36\n-\n-    StartFnLangItem,                   // 37\n-\n-    TyDescStructLangItem,              // 38\n-    TyVisitorTraitLangItem,            // 39\n-    OpaqueStructLangItem,              // 40\n+    LogTypeFnLangItem,                 // 21\n+    FailFnLangItem,                    // 22\n+    FailBoundsCheckFnLangItem,         // 23\n+    ExchangeMallocFnLangItem,          // 24\n+    ClosureExchangeMallocFnLangItem,   // 25\n+    ExchangeFreeFnLangItem,            // 26\n+    MallocFnLangItem,                  // 27\n+    FreeFnLangItem,                    // 28\n+    BorrowAsImmFnLangItem,             // 29\n+    BorrowAsMutFnLangItem,             // 30\n+    ReturnToMutFnLangItem,             // 31\n+    CheckNotBorrowedFnLangItem,        // 32\n+    StrDupUniqFnLangItem,              // 33\n+    RecordBorrowFnLangItem,            // 34\n+    UnrecordBorrowFnLangItem,          // 35\n+\n+    StartFnLangItem,                   // 36\n+\n+    TyDescStructLangItem,              // 37\n+    TyVisitorTraitLangItem,            // 38\n+    OpaqueStructLangItem,              // 39\n }\n \n pub struct LanguageItems {\n@@ -122,28 +121,27 @@ impl LanguageItems {\n \n             19 => \"str_eq\",\n             20 => \"uniq_str_eq\",\n-            21 => \"annihilate\",\n-            22 => \"log_type\",\n-            23 => \"fail_\",\n-            24 => \"fail_bounds_check\",\n-            25 => \"exchange_malloc\",\n-            26 => \"closure_exchange_malloc\",\n-            27 => \"exchange_free\",\n-            28 => \"malloc\",\n-            29 => \"free\",\n-            30 => \"borrow_as_imm\",\n-            31 => \"borrow_as_mut\",\n-            32 => \"return_to_mut\",\n-            33 => \"check_not_borrowed\",\n-            34 => \"strdup_uniq\",\n-            35 => \"record_borrow\",\n-            36 => \"unrecord_borrow\",\n-\n-            37 => \"start\",\n-\n-            38 => \"ty_desc\",\n-            39 => \"ty_visitor\",\n-            40 => \"opaque\",\n+            21 => \"log_type\",\n+            22 => \"fail_\",\n+            23 => \"fail_bounds_check\",\n+            24 => \"exchange_malloc\",\n+            25 => \"closure_exchange_malloc\",\n+            26 => \"exchange_free\",\n+            27 => \"malloc\",\n+            28 => \"free\",\n+            29 => \"borrow_as_imm\",\n+            30 => \"borrow_as_mut\",\n+            31 => \"return_to_mut\",\n+            32 => \"check_not_borrowed\",\n+            33 => \"strdup_uniq\",\n+            34 => \"record_borrow\",\n+            35 => \"unrecord_borrow\",\n+\n+            36 => \"start\",\n+\n+            37 => \"ty_desc\",\n+            38 => \"ty_visitor\",\n+            39 => \"opaque\",\n \n             _ => \"???\"\n         }\n@@ -226,9 +224,6 @@ impl LanguageItems {\n     pub fn uniq_str_eq_fn(&self) -> Option<def_id> {\n         self.items[UniqStrEqFnLangItem as uint]\n     }\n-    pub fn annihilate_fn(&self) -> Option<def_id> {\n-        self.items[AnnihilateFnLangItem as uint]\n-    }\n     pub fn log_type_fn(&self) -> Option<def_id> {\n         self.items[LogTypeFnLangItem as uint]\n     }\n@@ -327,7 +322,6 @@ impl<'self> LanguageItemCollector<'self> {\n \n         item_refs.insert(@\"str_eq\", StrEqFnLangItem as uint);\n         item_refs.insert(@\"uniq_str_eq\", UniqStrEqFnLangItem as uint);\n-        item_refs.insert(@\"annihilate\", AnnihilateFnLangItem as uint);\n         item_refs.insert(@\"log_type\", LogTypeFnLangItem as uint);\n         item_refs.insert(@\"fail_\", FailFnLangItem as uint);\n         item_refs.insert(@\"fail_bounds_check\","}, {"sha": "8fd5f7703676d859303b750ac35ae7cb5b6f17b7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -2906,24 +2906,12 @@ pub fn fill_crate_map(ccx: @mut CrateContext, map: ValueRef) {\n     }\n     subcrates.push(C_int(ccx, 0));\n \n-    let llannihilatefn = match ccx.tcx.lang_items.annihilate_fn() {\n-        Some(annihilate_def_id) => {\n-            if annihilate_def_id.crate == ast::LOCAL_CRATE {\n-                get_item_val(ccx, annihilate_def_id.node)\n-            } else {\n-                let annihilate_fn_type = csearch::get_type(ccx.tcx,\n-                                                           annihilate_def_id).ty;\n-                trans_external_path(ccx, annihilate_def_id, annihilate_fn_type)\n-            }\n-        }\n-        None => { C_null(Type::i8p()) }\n-    };\n-\n     unsafe {\n         let mod_map = create_module_map(ccx);\n         llvm::LLVMSetInitializer(map, C_struct(\n             [C_i32(1),\n-             lib::llvm::llvm::LLVMConstPointerCast(llannihilatefn, Type::i8p().to_ref()),\n+             // FIXME #8431 This used to be the annihilate function, now it's nothing\n+             C_null(Type::i8p()),\n              p2i(ccx, mod_map),\n              C_array(ccx.int_type, subcrates)]));\n     }"}, {"sha": "e47a3c49f96bfc6a101f9ae47b3ef4ac7f36d586", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -92,11 +92,6 @@ pub unsafe fn check_not_borrowed(a: *u8,\n     borrowck::check_not_borrowed(a, file, line)\n }\n \n-#[lang=\"annihilate\"]\n-pub unsafe fn annihilate() {\n-    ::cleanup::annihilate()\n-}\n-\n #[lang=\"start\"]\n pub fn start(main: *u8, argc: int, argv: **c_char,\n              crate_map: *u8) -> int {"}, {"sha": "064648a9671a171d39b04696f7934a539f35524e", "filename": "src/rt/boxed_region.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Fboxed_region.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Fboxed_region.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fboxed_region.cpp?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -11,7 +11,6 @@\n #include \"memory_region.h\"\n #include \"boxed_region.h\"\n #include \"rust_globals.h\"\n-#include \"rust_env.h\"\n #include \"rust_util.h\"\n \n // #define DUMP_BOXED_REGION"}, {"sha": "c95a4737d17c255e7a65827b1f2a8a79569f23c1", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -571,7 +571,47 @@ rust_running_on_valgrind() {\n     return RUNNING_ON_VALGRIND;\n }\n \n-extern int get_num_cpus();\n+#if defined(__WIN32__)\n+int\n+get_num_cpus() {\n+    SYSTEM_INFO sysinfo;\n+    GetSystemInfo(&sysinfo);\n+\n+    return (int) sysinfo.dwNumberOfProcessors;\n+}\n+#elif defined(__BSD__)\n+int\n+get_num_cpus() {\n+    /* swiped from http://stackoverflow.com/questions/150355/\n+       programmatically-find-the-number-of-cores-on-a-machine */\n+\n+    unsigned int numCPU;\n+    int mib[4];\n+    size_t len = sizeof(numCPU);\n+\n+    /* set the mib for hw.ncpu */\n+    mib[0] = CTL_HW;\n+    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n+\n+    /* get the number of CPUs from the system */\n+    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n+\n+    if( numCPU < 1 ) {\n+        mib[1] = HW_NCPU;\n+        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n+\n+        if( numCPU < 1 ) {\n+            numCPU = 1;\n+        }\n+    }\n+    return numCPU;\n+}\n+#elif defined(__GNUC__)\n+int\n+get_num_cpus() {\n+    return sysconf(_SC_NPROCESSORS_ONLN);\n+}\n+#endif\n \n extern \"C\" CDECL uintptr_t\n rust_get_num_cpus() {\n@@ -629,6 +669,28 @@ rust_get_task() {\n     return 0;\n }\n \n+static lock_and_signal env_lock;\n+\n+extern \"C\" CDECL void\n+rust_take_env_lock() {\n+    env_lock.lock();\n+}\n+\n+extern \"C\" CDECL void\n+rust_drop_env_lock() {\n+    env_lock.unlock();\n+}\n+\n+extern \"C\" CDECL unsigned int\n+rust_valgrind_stack_register(void *start, void *end) {\n+  return VALGRIND_STACK_REGISTER(start, end);\n+}\n+\n+extern \"C\" CDECL void\n+rust_valgrind_stack_deregister(unsigned int id) {\n+  VALGRIND_STACK_DEREGISTER(id);\n+}\n+\n //\n // Local Variables:\n // mode: C++"}, {"sha": "1a29cae2c8b7d3b5fb46eb12708ad679862bec0b", "filename": "src/rt/rust_env.cpp", "status": "removed", "additions": 0, "deletions": 163, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,163 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// The runtime wants to pull a number of variables out of the\n-// environment but calling getenv is not threadsafe, so every value\n-// that might come from the environment is loaded here, once, during\n-// init.\n-\n-#include \"sync/lock_and_signal.h\"\n-#include \"rust_env.h\"\n-\n-// The environment variables that the runtime knows about\n-#define RUST_THREADS \"RUST_THREADS\"\n-#define RUST_MIN_STACK \"RUST_MIN_STACK\"\n-#define RUST_MAX_STACK \"RUST_MAX_STACK\"\n-#define RUST_LOG \"RUST_LOG\"\n-#define DETAILED_LEAKS \"DETAILED_LEAKS\"\n-#define RUST_SEED \"RUST_SEED\"\n-#define RUST_POISON_ON_FREE \"RUST_POISON_ON_FREE\"\n-#define RUST_DEBUG_MEM \"RUST_DEBUG_MEM\"\n-#define RUST_DEBUG_BORROW \"RUST_DEBUG_BORROW\"\n-\n-#define DEFAULT_RUST_MIN_STACK_32 0x300\n-#define DEFAULT_RUST_MIN_STACK_64 0x400000\n-\n-static lock_and_signal env_lock;\n-\n-extern \"C\" CDECL void\n-rust_take_env_lock() {\n-    env_lock.lock();\n-}\n-\n-extern \"C\" CDECL void\n-rust_drop_env_lock() {\n-    env_lock.unlock();\n-}\n-\n-#if defined(__WIN32__)\n-int\n-get_num_cpus() {\n-    SYSTEM_INFO sysinfo;\n-    GetSystemInfo(&sysinfo);\n-\n-    return (int) sysinfo.dwNumberOfProcessors;\n-}\n-#elif defined(__BSD__)\n-int\n-get_num_cpus() {\n-    /* swiped from http://stackoverflow.com/questions/150355/\n-       programmatically-find-the-number-of-cores-on-a-machine */\n-\n-    unsigned int numCPU;\n-    int mib[4];\n-    size_t len = sizeof(numCPU);\n-\n-    /* set the mib for hw.ncpu */\n-    mib[0] = CTL_HW;\n-    mib[1] = HW_AVAILCPU;  // alternatively, try HW_NCPU;\n-\n-    /* get the number of CPUs from the system */\n-    sysctl(mib, 2, &numCPU, &len, NULL, 0);\n-\n-    if( numCPU < 1 ) {\n-        mib[1] = HW_NCPU;\n-        sysctl( mib, 2, &numCPU, &len, NULL, 0 );\n-\n-        if( numCPU < 1 ) {\n-            numCPU = 1;\n-        }\n-    }\n-    return numCPU;\n-}\n-#elif defined(__GNUC__)\n-int\n-get_num_cpus() {\n-    return sysconf(_SC_NPROCESSORS_ONLN);\n-}\n-#endif\n-\n-static int\n-get_num_threads()\n-{\n-    char *env = getenv(RUST_THREADS);\n-    if(env) {\n-        int num = atoi(env);\n-        if(num > 0)\n-            return num;\n-    }\n-    return get_num_cpus();\n-}\n-\n-static size_t\n-get_min_stk_size() {\n-    char *minsz = getenv(RUST_MIN_STACK);\n-    if(minsz) {\n-        return strtol(minsz, NULL, 0);\n-    }\n-    else if (sizeof(size_t) > 4) {\n-        return DEFAULT_RUST_MIN_STACK_64;\n-    } else {\n-        return DEFAULT_RUST_MIN_STACK_32;\n-    }\n-}\n-\n-static size_t\n-get_max_stk_size() {\n-    char *maxsz = getenv(RUST_MAX_STACK);\n-    if (maxsz) {\n-        return strtol(maxsz, NULL, 0);\n-    }\n-    else {\n-        return 1024*1024*1024;\n-    }\n-}\n-\n-static char*\n-copyenv(const char* name) {\n-    char *envvar = getenv(name);\n-    if (!envvar) {\n-        return NULL;\n-    } else {\n-        size_t slen = strlen(envvar);\n-        size_t buflen = slen + 1;\n-        char *var = (char*)malloc(buflen);\n-        memset(var, 0, buflen);\n-        strncpy(var, envvar, slen);\n-        return var;\n-    }\n-}\n-\n-rust_env*\n-load_env(int argc, char **argv) {\n-    scoped_lock with(env_lock);\n-\n-    rust_env *env = (rust_env*)malloc(sizeof(rust_env));\n-\n-    env->num_sched_threads = (size_t)get_num_threads();\n-    env->min_stack_size = get_min_stk_size();\n-    env->max_stack_size = get_max_stk_size();\n-    env->logspec = copyenv(RUST_LOG);\n-    env->detailed_leaks = getenv(DETAILED_LEAKS) != NULL;\n-    env->rust_seed = copyenv(RUST_SEED);\n-    env->poison_on_free = getenv(RUST_POISON_ON_FREE) != NULL;\n-    env->argc = argc;\n-    env->argv = argv;\n-    env->debug_mem = getenv(RUST_DEBUG_MEM) != NULL;\n-    env->debug_borrow = getenv(RUST_DEBUG_BORROW) != NULL;\n-    return env;\n-}\n-\n-void\n-free_env(rust_env *env) {\n-    free(env->logspec);\n-    free(env->rust_seed);\n-    free(env);\n-}"}, {"sha": "b897f0c09a90b7f625667d2a1b753ccf5fc5a981", "filename": "src/rt/rust_env.h", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_env.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_env.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,37 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#ifndef RUST_ENV_H\n-#define RUST_ENV_H\n-\n-#include \"rust_globals.h\"\n-\n-// Avoiding 'bool' type here since I'm not sure it has a standard size\n-typedef uint8_t rust_bool;\n-\n-struct rust_env {\n-    size_t num_sched_threads;\n-    size_t min_stack_size;\n-    size_t max_stack_size;\n-    char* logspec;\n-    rust_bool detailed_leaks;\n-    char* rust_seed;\n-    rust_bool poison_on_free;\n-    int argc;\n-    char **argv;\n-    rust_bool debug_mem;\n-    rust_bool debug_borrow;\n-};\n-\n-rust_env* load_env(int argc, char **argv);\n-void free_env(rust_env *rust_env);\n-\n-#endif"}, {"sha": "9dc790b43f2593b9871722c23b3b2050a7194c04", "filename": "src/rt/rust_globals.h", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_globals.h", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_globals.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_globals.h?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -81,15 +81,12 @@ extern \"C\" {\n #define CDECL __cdecl\n #endif\n #ifndef FASTCALL\n-#define FASTCALL __fastcall\n #endif\n #else\n #define CDECL __attribute__((cdecl))\n-#define FASTCALL __attribute__((fastcall))\n #endif\n #else\n #define CDECL\n-#define FASTCALL\n #endif\n \n #define CHECKED(call)                                               \\\n@@ -104,22 +101,4 @@ extern \"C\" {\n         }                                                           \\\n     }\n \n-#define MUST_CHECK __attribute__((warn_unused_result))\n-\n-#define PTR \"0x%\" PRIxPTR\n-\n-// This accounts for logging buffers.\n-static size_t const BUF_BYTES = 2048;\n-\n-#define INIT_TASK_ID 1\n-\n-// The error status to use when the process fails\n-#define PROC_FAIL_CODE 101\n-\n-// A cond(ition) is something we can block on. This can be a channel\n-// (writing), a port (reading) or a task (waiting).\n-struct rust_cond { };\n-\n-extern void* global_crate_map;\n-\n #endif /* RUST_GLOBALS_H */"}, {"sha": "7653635acd9befb5b4a56db54aafcfbb8fe58859", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 6, "deletions": 42, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -13,7 +13,6 @@\n  */\n \n \n-#include \"rust_log.h\"\n #include \"rust_crate_map.h\"\n #include \"util/array_list.h\"\n #include \"rust_util.h\"\n@@ -25,6 +24,12 @@ struct log_directive {\n     size_t level;\n };\n \n+\n+const uint32_t log_err = 1;\n+const uint32_t log_warn = 2;\n+const uint32_t log_info = 3;\n+const uint32_t log_debug = 4;\n+\n const size_t max_log_directives = 255;\n const size_t max_log_level = 255;\n const size_t default_log_level = log_err;\n@@ -84,12 +89,6 @@ static void update_entry(const mod_entry* entry, void *cookie) {\n     }\n }\n \n-void update_module_map(const mod_entry* map, log_directive* dirs,\n-                       size_t n_dirs, size_t *n_matches) {\n-    update_entry_args args = { dirs, n_dirs, n_matches };\n-    iter_module_map(map, update_entry, &args);\n-}\n-\n void update_crate_map(const cratemap* map, log_directive* dirs,\n                       size_t n_dirs, size_t *n_matches) {\n     update_entry_args args = { dirs, n_dirs, n_matches };\n@@ -104,40 +103,6 @@ void print_crate_log_map(const cratemap* map) {\n     iter_crate_map(map, print_mod_name, NULL);\n }\n \n-// These are pseudo-modules used to control logging in the runtime.\n-\n-uint32_t log_rt_mem;\n-uint32_t log_rt_box;\n-uint32_t log_rt_comm;\n-uint32_t log_rt_task;\n-uint32_t log_rt_dom;\n-uint32_t log_rt_trace;\n-uint32_t log_rt_cache;\n-uint32_t log_rt_upcall;\n-uint32_t log_rt_timer;\n-uint32_t log_rt_gc;\n-uint32_t log_rt_stdlib;\n-uint32_t log_rt_kern;\n-uint32_t log_rt_backtrace;\n-uint32_t log_rt_callback;\n-\n-static const mod_entry _rt_module_map[] =\n-    {{\"::rt::mem\", &log_rt_mem},\n-     {\"::rt::box\", &log_rt_box},\n-     {\"::rt::comm\", &log_rt_comm},\n-     {\"::rt::task\", &log_rt_task},\n-     {\"::rt::dom\", &log_rt_dom},\n-     {\"::rt::trace\", &log_rt_trace},\n-     {\"::rt::cache\", &log_rt_cache},\n-     {\"::rt::upcall\", &log_rt_upcall},\n-     {\"::rt::timer\", &log_rt_timer},\n-     {\"::rt::gc\", &log_rt_gc},\n-     {\"::rt::stdlib\", &log_rt_stdlib},\n-     {\"::rt::kern\", &log_rt_kern},\n-     {\"::rt::backtrace\", &log_rt_backtrace},\n-     {\"::rt::callback\", &log_rt_callback},\n-     {NULL, NULL}};\n-\n void update_log_settings(void* crate_map, char* settings) {\n     char* buffer = NULL;\n     log_directive dirs[256];\n@@ -160,7 +125,6 @@ void update_log_settings(void* crate_map, char* settings) {\n     }\n \n     size_t n_matches = 0;\n-    update_module_map(_rt_module_map, &dirs[0], n_dirs, &n_matches);\n     update_crate_map((const cratemap*)crate_map, &dirs[0],\n                      n_dirs, &n_matches);\n "}, {"sha": "e3d61b8ab5d5a7c829ea5bcbcf5f2f622ec5f1f4", "filename": "src/rt/rust_log.h", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,38 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_LOG_H\n-#define RUST_LOG_H\n-\n-#include \"rust_globals.h\"\n-\n-const uint32_t log_err = 1;\n-const uint32_t log_warn = 2;\n-const uint32_t log_info = 3;\n-const uint32_t log_debug = 4;\n-\n-void update_log_settings(void* crate_map, char* settings);\n-\n-extern uint32_t log_rt_mem;\n-extern uint32_t log_rt_box;\n-extern uint32_t log_rt_comm;\n-extern uint32_t log_rt_task;\n-extern uint32_t log_rt_dom;\n-extern uint32_t log_rt_trace;\n-extern uint32_t log_rt_cache;\n-extern uint32_t log_rt_upcall;\n-extern uint32_t log_rt_timer;\n-extern uint32_t log_rt_gc;\n-extern uint32_t log_rt_stdlib;\n-extern uint32_t log_rt_kern;\n-extern uint32_t log_rt_backtrace;\n-extern uint32_t log_rt_callback;\n-\n-#endif /* RUST_LOG_H */"}, {"sha": "1ed05ec8339598279b25798cd78864fc4c7644dd", "filename": "src/rt/rust_refcount.h", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_refcount.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_refcount.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_refcount.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,31 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#ifndef RUST_REFCOUNT_H\n-#define RUST_REFCOUNT_H\n-\n-#include \"sync/sync.h\"\n-\n-// Refcounting defines\n-typedef unsigned long ref_cnt_t;\n-\n-#define RUST_ATOMIC_REFCOUNT()                                             \\\n-private:                                                                   \\\n-   intptr_t ref_count;                                                     \\\n-public:                                                                    \\\n-   void ref() {                                                            \\\n-       intptr_t old = sync::increment(ref_count);                          \\\n-       assert(old > 0);                                                    \\\n-   }                                                                       \\\n-   void deref() { if(0 == sync::decrement(ref_count)) { delete_this(); } } \\\n-   intptr_t get_ref_count() { return sync::read(ref_count); }\n-\n-#endif"}, {"sha": "4281092f83511e73415ace1b8a8975f92dc1765c", "filename": "src/rt/rust_signal.h", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_signal.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_signal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_signal.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,27 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_SIGNAL_H\n-#define RUST_SIGNAL_H\n-\n-// Just an abstract class that represents something that can be signalled\n-class rust_signal {\n-public:\n-    virtual void signal() = 0;\n-    virtual ~rust_signal() {}\n-    rust_signal() {}\n-\n-private:\n-    // private and undefined to disable copying\n-    rust_signal(const rust_signal& rhs);\n-    rust_signal& operator=(const rust_signal& rhs);\n-};\n-\n-#endif /* RUST_SIGNAL_H */"}, {"sha": "a609ac573245d625e9831404ec8b821edb275fe0", "filename": "src/rt/rust_stack.cpp", "status": "removed", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_stack.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_stack.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.cpp?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,105 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-#include \"rust_stack.h\"\n-#include \"vg/valgrind.h\"\n-#include \"vg/memcheck.h\"\n-\n-#include <cstdio>\n-\n-#ifdef _LP64\n-const uintptr_t canary_value = 0xABCDABCDABCDABCD;\n-#else\n-const uintptr_t canary_value = 0xABCDABCD;\n-#endif\n-\n-void\n-register_valgrind_stack(stk_seg *stk) {\n-    stk->valgrind_id =\n-        VALGRIND_STACK_REGISTER(&stk->data[0],\n-                                stk->end);\n-}\n-\n-void\n-reuse_valgrind_stack(stk_seg *stk, uint8_t *sp) {\n-    // Establish that the stack is accessible.  This must be done when reusing\n-    // old stack segments, since the act of popping the stack previously\n-    // caused valgrind to consider the whole thing inaccessible.\n-    assert(sp >= stk->data && sp <= (uint8_t*) stk->end\n-           && \"Stack pointer must be inside stack segment\");\n-    size_t sz = stk->end - (uintptr_t)sp;\n-    (void) VALGRIND_MAKE_MEM_UNDEFINED(sp, sz);\n-    (void) sz;\n-}\n-\n-void\n-deregister_valgrind_stack(stk_seg *stk) {\n-    VALGRIND_STACK_DEREGISTER(stk->valgrind_id);\n-}\n-\n-void\n-add_stack_canary(stk_seg *stk) {\n-    stk->canary = canary_value;\n-}\n-\n-void\n-check_stack_canary(stk_seg *stk) {\n-    assert(stk->canary == canary_value && \"Somebody killed the canary\");\n-}\n-\n-// XXX: Duplication here between the local and exchange heap constructors\n-\n-stk_seg *\n-create_stack(memory_region *region, size_t sz) {\n-    size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)region->malloc(total_sz, \"stack\");\n-    memset(stk, 0, sizeof(stk_seg));\n-    stk->end = (uintptr_t) &stk->data[sz];\n-    stk->is_big = 0;\n-    add_stack_canary(stk);\n-    register_valgrind_stack(stk);\n-    return stk;\n-}\n-\n-void\n-destroy_stack(memory_region *region, stk_seg *stk) {\n-    deregister_valgrind_stack(stk);\n-    region->free(stk);\n-}\n-\n-stk_seg *\n-create_exchange_stack(rust_exchange_alloc *exchange, size_t sz) {\n-    size_t total_sz = sizeof(stk_seg) + sz;\n-    stk_seg *stk = (stk_seg *)exchange->malloc(total_sz);\n-    memset(stk, 0, sizeof(stk_seg));\n-    stk->end = (uintptr_t) &stk->data[sz];\n-    stk->is_big = 0;\n-    add_stack_canary(stk);\n-    register_valgrind_stack(stk);\n-    return stk;\n-}\n-\n-void\n-destroy_exchange_stack(rust_exchange_alloc *exchange, stk_seg *stk) {\n-    deregister_valgrind_stack(stk);\n-    exchange->free(stk);\n-}\n-\n-\n-extern \"C\" CDECL unsigned int\n-rust_valgrind_stack_register(void *start, void *end) {\n-  return VALGRIND_STACK_REGISTER(start, end);\n-}\n-\n-extern \"C\" CDECL void\n-rust_valgrind_stack_deregister(unsigned int id) {\n-  VALGRIND_STACK_DEREGISTER(id);\n-}"}, {"sha": "3b34b91e309cf55ba27c7c760de7a75a87e4cd83", "filename": "src/rt/rust_stack.h", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_stack.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_stack.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_stack.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,54 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_STACK_H\n-#define RUST_STACK_H\n-\n-#include \"rust_globals.h\"\n-#include \"rust_exchange_alloc.h\"\n-#include \"memory_region.h\"\n-\n-struct rust_task;\n-\n-struct stk_seg {\n-    stk_seg *prev;\n-    stk_seg *next;\n-    uintptr_t end;\n-    unsigned int valgrind_id;\n-    uint8_t is_big;\n-\n-    rust_task *task;\n-    uintptr_t canary;\n-\n-    uint8_t data[];\n-};\n-\n-stk_seg *\n-create_stack(memory_region *region, size_t sz);\n-\n-void\n-destroy_stack(memory_region *region, stk_seg *stk);\n-\n-stk_seg *\n-create_exchange_stack(rust_exchange_alloc *exchange, size_t sz);\n-\n-void\n-destroy_exchange_stack(rust_exchange_alloc *exchange, stk_seg *stk);\n-\n-// Must be called before each time a stack is reused to tell valgrind\n-// that the stack is accessible.\n-void\n-reuse_valgrind_stack(stk_seg *stk, uint8_t *sp);\n-\n-// Run a sanity check\n-void\n-check_stack_canary(stk_seg *stk);\n-\n-#endif /* RUST_STACK_H */"}, {"sha": "0ac9bc6abff98a58d77004f73dc73ecc837d8b1c", "filename": "src/rt/rust_type.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_type.h", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_type.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_type.h?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -13,7 +13,6 @@\n #define RUST_TYPE_H\n \n #include \"rust_globals.h\"\n-#include \"rust_refcount.h\"\n \n struct rust_opaque_box;\n \n@@ -28,6 +27,8 @@ struct type_desc;\n typedef void CDECL (glue_fn)(void *,\n                              void *);\n \n+typedef unsigned long ref_cnt_t;\n+\n // Corresponds to the boxed data in the @ region.  The body follows the\n // header; you can obtain a ptr via box_body() below.\n struct rust_opaque_box {\n@@ -61,8 +62,6 @@ struct type_desc {\n     size_t borrow_offset;\n };\n \n-extern \"C\" type_desc *rust_clone_type_desc(type_desc*);\n-\n #endif\n \n //"}, {"sha": "21c0d219242613d91a75518af7b2ae391404115c", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -17,7 +17,6 @@\n  */\n \n #include \"rust_globals.h\"\n-#include \"rust_upcall.h\"\n #include \"rust_util.h\"\n \n //Unwinding ABI declarations."}, {"sha": "0cd7aa102c5da6e9c765d05ef77a02bdb94187de", "filename": "src/rt/rust_upcall.h", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_upcall.h", "raw_url": "https://github.com/rust-lang/rust/raw/7503396070a8d69040e9998faf667c29c6a6f2cb/src%2Frt%2Frust_upcall.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.h?ref=7503396070a8d69040e9998faf667c29c6a6f2cb", "patch": "@@ -1,14 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#ifndef RUST_UPCALL_H\n-#define RUST_UPCALL_H\n-\n-#endif"}, {"sha": "7c531297ccddc4fc8e23e6e73d641a5b7a0accbd", "filename": "src/rt/rust_util.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_util.h", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_util.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_util.h?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -14,7 +14,6 @@\n #include <limits.h>\n #include \"rust_exchange_alloc.h\"\n #include \"rust_type.h\"\n-#include \"rust_env.h\"\n \n extern struct type_desc str_body_tydesc;\n "}, {"sha": "0462789af9ff90daac3fdf7622b9bd01df7d9876", "filename": "src/rt/rust_uv.cpp", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -17,34 +17,6 @@\n \n #include \"rust_globals.h\"\n \n-// extern fn pointers\n-typedef void (*extern_async_op_cb)(uv_loop_t* loop, void* data,\n-        uv_async_t* op_handle);\n-typedef void (*extern_simple_cb)(uint8_t* id_buf, void* loop_data);\n-typedef void (*extern_close_cb)(uint8_t* id_buf, void* handle,\n-        void* data);\n-\n-// data types\n-#define RUST_UV_HANDLE_LEN 16\n-\n-struct handle_data {\n-    uint8_t id_buf[RUST_UV_HANDLE_LEN];\n-    extern_simple_cb cb;\n-    extern_close_cb close_cb;\n-};\n-\n-static void\n-foreign_timer_cb(uv_timer_t* handle, int status) {\n-    handle_data* handle_d = (handle_data*)handle->data;\n-    void* loop_data = handle->loop->data;\n-    handle_d->cb(handle_d->id_buf, loop_data);\n-}\n-\n-static void\n-foreign_close_cb(uv_handle_t* handle) {\n-    handle_data* data = (handle_data*)handle->data;\n-    data->close_cb(data->id_buf, handle, handle->loop->data);\n-}\n extern \"C\" void*\n rust_uv_loop_new() {\n     return (void*)uv_loop_new();\n@@ -91,13 +63,6 @@ rust_uv_walk(uv_loop_t* loop, uv_walk_cb cb, void* arg) {\n     uv_walk(loop, cb, arg);\n }\n \n-extern \"C\" void\n-rust_uv_hilvl_close(uv_handle_t* handle, extern_close_cb cb) {\n-    handle_data* data = (handle_data*)handle->data;\n-    data->close_cb = cb;\n-    uv_close(handle, foreign_close_cb);\n-}\n-\n extern \"C\" void\n rust_uv_async_send(uv_async_t* handle) {\n     uv_async_send(handle);\n@@ -110,12 +75,6 @@ rust_uv_async_init(uv_loop_t* loop_handle,\n     return uv_async_init(loop_handle, async_handle, cb);\n }\n \n-extern \"C\" void\n-rust_uv_hilvl_timer_start(uv_timer_t* the_timer, uint32_t timeout,\n-        uint32_t repeat) {\n-    uv_timer_start(the_timer, foreign_timer_cb, timeout, repeat);\n-}\n-\n extern \"C\" int\n rust_uv_timer_init(uv_loop_t* loop, uv_timer_t* timer) {\n     return uv_timer_init(loop, timer);\n@@ -301,58 +260,6 @@ rust_uv_accept(uv_stream_t* server, uv_stream_t* client) {\n     return uv_accept(server, client);\n }\n \n-extern \"C\" size_t\n-rust_uv_helper_uv_tcp_t_size() {\n-    return sizeof(uv_tcp_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_connect_t_size() {\n-    return sizeof(uv_connect_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_buf_t_size() {\n-    return sizeof(uv_buf_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_write_t_size() {\n-    return sizeof(uv_write_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_err_t_size() {\n-    return sizeof(uv_err_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_sockaddr_in_size() {\n-    return sizeof(sockaddr_in);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_sockaddr_in6_size() {\n-    return sizeof(sockaddr_in6);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_async_t_size() {\n-    return sizeof(uv_async_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_timer_t_size() {\n-    return sizeof(uv_timer_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_addr_in_size() {\n-    return sizeof(sockaddr_in6);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_uv_getaddrinfo_t_size() {\n-    return sizeof(uv_getaddrinfo_t);\n-}\n-extern \"C\" size_t\n-rust_uv_helper_addrinfo_size() {\n-    return sizeof(addrinfo);\n-}\n-extern \"C\" unsigned int\n-rust_uv_helper_get_INADDR_NONE() {\n-    return INADDR_NONE;\n-}\n extern \"C\" uv_stream_t*\n rust_uv_get_stream_handle_from_connect_req(uv_connect_t* connect) {\n     return connect->handle;"}, {"sha": "ecf22d72b128e9e1af36f067b9f4078b5be4eb6e", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/cb8a231eb8b730128c5b7e89c8eac9eab36642c4/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=cb8a231eb8b730128c5b7e89c8eac9eab36642c4", "patch": "@@ -40,10 +40,8 @@ rust_uv_walk\n rust_uv_loop_set_data\n rust_uv_run\n rust_uv_close\n-rust_uv_hilvl_close\n rust_uv_async_send\n rust_uv_async_init\n-rust_uv_hilvl_timer_start\n rust_uv_timer_init\n rust_uv_timer_start\n rust_uv_timer_stop\n@@ -92,19 +90,6 @@ rust_uv_is_ipv6_addrinfo\n rust_uv_get_next_addrinfo\n rust_uv_addrinfo_as_sockaddr_in\n rust_uv_addrinfo_as_sockaddr_in6\n-rust_uv_helper_uv_tcp_t_size\n-rust_uv_helper_uv_connect_t_size\n-rust_uv_helper_uv_buf_t_size\n-rust_uv_helper_uv_write_t_size\n-rust_uv_helper_uv_err_t_size\n-rust_uv_helper_sockaddr_in_size\n-rust_uv_helper_sockaddr_in6_size\n-rust_uv_helper_addr_in_size\n-rust_uv_helper_addrinfo_size\n-rust_uv_helper_uv_getaddrinfo_t_size\n-rust_uv_helper_get_INADDR_NONE\n-rust_uv_helper_uv_async_t_size\n-rust_uv_helper_uv_timer_t_size\n rust_uv_get_stream_handle_from_connect_req\n rust_uv_get_stream_handle_from_write_req\n rust_uv_get_loop_for_uv_handle"}]}