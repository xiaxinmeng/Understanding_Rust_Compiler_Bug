{"sha": "8e7ef03141c40e34bd740bfe521b656387af9d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlN2VmMDMxNDFjNDBlMzRiZDc0MGJmZTUyMWI2NTYzODdhZjlkNTY=", "commit": {"author": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-06T04:32:35Z"}, "committer": {"name": "Matthias Einwag", "email": "matthias.einwag@live.com", "date": "2019-02-06T04:32:35Z"}, "message": "Move ArcWake in common test file.", "tree": {"sha": "b59abed2acf0b87773f118cb0accbb0f0b0ddad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59abed2acf0b87773f118cb0accbb0f0b0ddad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e7ef03141c40e34bd740bfe521b656387af9d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e7ef03141c40e34bd740bfe521b656387af9d56", "html_url": "https://github.com/rust-lang/rust/commit/8e7ef03141c40e34bd740bfe521b656387af9d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e7ef03141c40e34bd740bfe521b656387af9d56/comments", "author": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Matthias247", "id": 6330334, "node_id": "MDQ6VXNlcjYzMzAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6330334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Matthias247", "html_url": "https://github.com/Matthias247", "followers_url": "https://api.github.com/users/Matthias247/followers", "following_url": "https://api.github.com/users/Matthias247/following{/other_user}", "gists_url": "https://api.github.com/users/Matthias247/gists{/gist_id}", "starred_url": "https://api.github.com/users/Matthias247/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Matthias247/subscriptions", "organizations_url": "https://api.github.com/users/Matthias247/orgs", "repos_url": "https://api.github.com/users/Matthias247/repos", "events_url": "https://api.github.com/users/Matthias247/events{/privacy}", "received_events_url": "https://api.github.com/users/Matthias247/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "363e992b9885e2ce55b389ab274f9cd88598104d", "url": "https://api.github.com/repos/rust-lang/rust/commits/363e992b9885e2ce55b389ab274f9cd88598104d", "html_url": "https://github.com/rust-lang/rust/commit/363e992b9885e2ce55b389ab274f9cd88598104d"}], "stats": {"total": 183, "additions": 73, "deletions": 110}, "files": [{"sha": "1843feed927a23ede730677397cdf7196c78b8a8", "filename": "src/test/run-pass/async-await.rs", "status": "modified", "additions": 5, "deletions": 55, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Fasync-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasync-await.rs?ref=8e7ef03141c40e34bd740bfe521b656387af9d56", "patch": "@@ -1,70 +1,20 @@\n // edition:2018\n+// aux-build:arc_wake.rs\n \n #![feature(arbitrary_self_types, async_await, await_macro, futures_api)]\n \n+extern crate arc_wake;\n+\n use std::pin::Pin;\n use std::future::Future;\n use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n use std::task::{\n-    Poll, Waker, RawWaker, RawWakerVTable,\n+    Poll, Waker,\n };\n-\n-macro_rules! waker_vtable {\n-    ($ty:ident) => {\n-        &RawWakerVTable {\n-            clone: clone_arc_raw::<$ty>,\n-            drop: drop_arc_raw::<$ty>,\n-            wake: wake_arc_raw::<$ty>,\n-        }\n-    };\n-}\n-\n-pub trait ArcWake {\n-    fn wake(arc_self: &Arc<Self>);\n-\n-    fn into_waker(wake: Arc<Self>) -> Waker where Self: Sized\n-    {\n-        let ptr = Arc::into_raw(wake) as *const();\n-\n-        unsafe {\n-            Waker::new_unchecked(RawWaker{\n-                data: ptr,\n-                vtable: waker_vtable!(Self),\n-            })\n-        }\n-    }\n-}\n-\n-unsafe fn increase_refcount<T: ArcWake>(data: *const()) {\n-    // Retain Arc by creating a copy\n-    let arc: Arc<T> = Arc::from_raw(data as *const T);\n-    let arc_clone = arc.clone();\n-    // Forget the Arcs again, so that the refcount isn't decrased\n-    let _ = Arc::into_raw(arc);\n-    let _ = Arc::into_raw(arc_clone);\n-}\n-\n-unsafe fn clone_arc_raw<T: ArcWake>(data: *const()) -> RawWaker {\n-    increase_refcount::<T>(data);\n-    RawWaker {\n-        data: data,\n-        vtable: waker_vtable!(T),\n-    }\n-}\n-\n-unsafe fn drop_arc_raw<T: ArcWake>(data: *const()) {\n-    // Drop Arc\n-    let _: Arc<T> = Arc::from_raw(data as *const T);\n-}\n-\n-unsafe fn wake_arc_raw<T: ArcWake>(data: *const()) {\n-    let arc: Arc<T> = Arc::from_raw(data as *const T);\n-    ArcWake::wake(&arc);\n-    let _ = Arc::into_raw(arc);\n-}\n+use arc_wake::ArcWake;\n \n struct Counter {\n     wakes: AtomicUsize,"}, {"sha": "0baaa378046f3a676a41d9de0e78e2a161c76ff0", "filename": "src/test/run-pass/auxiliary/arc_wake.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Farc_wake.rs?ref=8e7ef03141c40e34bd740bfe521b656387af9d56", "patch": "@@ -0,0 +1,62 @@\n+// edition:2018\n+\n+#![feature(arbitrary_self_types, futures_api)]\n+\n+use std::sync::Arc;\n+use std::task::{\n+    Poll, Waker, RawWaker, RawWakerVTable,\n+};\n+\n+macro_rules! waker_vtable {\n+    ($ty:ident) => {\n+        &RawWakerVTable {\n+            clone: clone_arc_raw::<$ty>,\n+            drop: drop_arc_raw::<$ty>,\n+            wake: wake_arc_raw::<$ty>,\n+        }\n+    };\n+}\n+\n+pub trait ArcWake {\n+    fn wake(arc_self: &Arc<Self>);\n+\n+    fn into_waker(wake: Arc<Self>) -> Waker where Self: Sized\n+    {\n+        let ptr = Arc::into_raw(wake) as *const();\n+\n+        unsafe {\n+            Waker::new_unchecked(RawWaker{\n+                data: ptr,\n+                vtable: waker_vtable!(Self),\n+            })\n+        }\n+    }\n+}\n+\n+unsafe fn increase_refcount<T: ArcWake>(data: *const()) {\n+    // Retain Arc by creating a copy\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    let arc_clone = arc.clone();\n+    // Forget the Arcs again, so that the refcount isn't decrased\n+    let _ = Arc::into_raw(arc);\n+    let _ = Arc::into_raw(arc_clone);\n+}\n+\n+unsafe fn clone_arc_raw<T: ArcWake>(data: *const()) -> RawWaker {\n+    increase_refcount::<T>(data);\n+    RawWaker {\n+        data: data,\n+        vtable: waker_vtable!(T),\n+    }\n+}\n+\n+unsafe fn drop_arc_raw<T: ArcWake>(data: *const()) {\n+    // Drop Arc\n+    let _: Arc<T> = Arc::from_raw(data as *const T);\n+}\n+\n+unsafe fn wake_arc_raw<T: ArcWake>(data: *const()) {\n+    let arc: Arc<T> = Arc::from_raw(data as *const T);\n+    ArcWake::wake(&arc);\n+    let _ = Arc::into_raw(arc);\n+}"}, {"sha": "fd4b585d3457273026d65391dcf3c03d3981ad36", "filename": "src/test/run-pass/futures-api.rs", "status": "modified", "additions": 6, "deletions": 55, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e7ef03141c40e34bd740bfe521b656387af9d56/src%2Ftest%2Frun-pass%2Ffutures-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffutures-api.rs?ref=8e7ef03141c40e34bd740bfe521b656387af9d56", "patch": "@@ -1,69 +1,20 @@\n+// aux-build:arc_wake.rs\n+\n #![feature(arbitrary_self_types, futures_api)]\n #![allow(unused)]\n \n+extern crate arc_wake;\n+\n use std::future::Future;\n use std::pin::Pin;\n use std::sync::{\n     Arc,\n     atomic::{self, AtomicUsize},\n };\n use std::task::{\n-    Poll, Waker, RawWaker, RawWakerVTable,\n+    Poll, Waker,\n };\n-\n-macro_rules! waker_vtable {\n-    ($ty:ident) => {\n-        &RawWakerVTable {\n-            clone: clone_arc_raw::<$ty>,\n-            drop: drop_arc_raw::<$ty>,\n-            wake: wake_arc_raw::<$ty>,\n-        }\n-    };\n-}\n-\n-pub trait ArcWake {\n-    fn wake(arc_self: &Arc<Self>);\n-\n-    fn into_waker(wake: Arc<Self>) -> Waker where Self: Sized\n-    {\n-        let ptr = Arc::into_raw(wake) as *const();\n-\n-        unsafe {\n-            Waker::new_unchecked(RawWaker{\n-                data: ptr,\n-                vtable: waker_vtable!(Self),\n-            })\n-        }\n-    }\n-}\n-\n-unsafe fn increase_refcount<T: ArcWake>(data: *const()) {\n-    // Retain Arc by creating a copy\n-    let arc: Arc<T> = Arc::from_raw(data as *const T);\n-    let arc_clone = arc.clone();\n-    // Forget the Arcs again, so that the refcount isn't decrased\n-    let _ = Arc::into_raw(arc);\n-    let _ = Arc::into_raw(arc_clone);\n-}\n-\n-unsafe fn clone_arc_raw<T: ArcWake>(data: *const()) -> RawWaker {\n-    increase_refcount::<T>(data);\n-    RawWaker {\n-        data: data,\n-        vtable: waker_vtable!(T),\n-    }\n-}\n-\n-unsafe fn drop_arc_raw<T: ArcWake>(data: *const()) {\n-    // Drop Arc\n-    let _: Arc<T> = Arc::from_raw(data as *const T);\n-}\n-\n-unsafe fn wake_arc_raw<T: ArcWake>(data: *const()) {\n-    let arc: Arc<T> = Arc::from_raw(data as *const T);\n-    ArcWake::wake(&arc);\n-    let _ = Arc::into_raw(arc);\n-}\n+use arc_wake::ArcWake;\n \n struct Counter {\n     wakes: AtomicUsize,"}]}