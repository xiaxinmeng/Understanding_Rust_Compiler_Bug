{"sha": "eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMzhkNDI2YzQxYWE4NDg3ZThjYjhhOWRhZmJmY2YzNTI4MjAxZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-10-20T05:05:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-20T05:05:13Z"}, "message": "Auto merge of #36973 - nnethercote:dep_graph, r=nikomatsakis\n\nDon't enqueue onto a disabled dep_graph.\n\nThis commit guards all calls to `DepGraphThreadData::enqueue` with a\ncheck to make sure it is enabled. This avoids some useless allocation\nand vector manipulations when it is disabled (i.e. when incremental\ncompilation is off) which improves speed by 1--2% on most of the\nrustc-benchmarks.\n\nThis commit has an observable functional change: when the dep_graph is\ndisabled its `shadow_graph` will no longer receive messages. This should\nbe ok because these message are only used when debug assertions are\nenabled.\n\nr? @nikomatsakis", "tree": {"sha": "e5251319dd8ead508ecfaa188122ac862afc2465", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5251319dd8ead508ecfaa188122ac862afc2465"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "html_url": "https://github.com/rust-lang/rust/commit/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd98ebd3e862d6fe23519fc6605d03a1c146914", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd98ebd3e862d6fe23519fc6605d03a1c146914", "html_url": "https://github.com/rust-lang/rust/commit/dfd98ebd3e862d6fe23519fc6605d03a1c146914"}, {"sha": "cde42cd7803308793a9902022413a5e34557f9a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde42cd7803308793a9902022413a5e34557f9a9", "html_url": "https://github.com/rust-lang/rust/commit/cde42cd7803308793a9902022413a5e34557f9a9"}], "stats": {"total": 71, "additions": 47, "deletions": 24}, "files": [{"sha": "fac3586afc7b965f80f5e7e24c778f7cd82ca579", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "patch": "@@ -51,22 +51,15 @@ impl DepGraph {\n         }\n     }\n \n-    /// True if we are actually building a dep-graph. If this returns false,\n-    /// then the other methods on this `DepGraph` will have no net effect.\n-    #[inline]\n-    pub fn enabled(&self) -> bool {\n-        self.data.thread.enabled()\n-    }\n-\n     pub fn query(&self) -> DepGraphQuery<DefId> {\n         self.data.thread.query()\n     }\n \n-    pub fn in_ignore<'graph>(&'graph self) -> raii::IgnoreTask<'graph> {\n+    pub fn in_ignore<'graph>(&'graph self) -> Option<raii::IgnoreTask<'graph>> {\n         raii::IgnoreTask::new(&self.data.thread)\n     }\n \n-    pub fn in_task<'graph>(&'graph self, key: DepNode<DefId>) -> raii::DepTask<'graph> {\n+    pub fn in_task<'graph>(&'graph self, key: DepNode<DefId>) -> Option<raii::DepTask<'graph>> {\n         raii::DepTask::new(&self.data.thread, key)\n     }\n \n@@ -85,11 +78,15 @@ impl DepGraph {\n     }\n \n     pub fn read(&self, v: DepNode<DefId>) {\n-        self.data.thread.enqueue(DepMessage::Read(v));\n+        if self.data.thread.is_enqueue_enabled() {\n+            self.data.thread.enqueue(DepMessage::Read(v));\n+        }\n     }\n \n     pub fn write(&self, v: DepNode<DefId>) {\n-        self.data.thread.enqueue(DepMessage::Write(v));\n+        if self.data.thread.is_enqueue_enabled() {\n+            self.data.thread.enqueue(DepMessage::Write(v));\n+        }\n     }\n \n     /// Indicates that a previous work product exists for `v`. This is"}, {"sha": "e39797599acfdc2512bc3afe04ca02115e38557e", "filename": "src/librustc/dep_graph/raii.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fraii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fraii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fraii.rs?ref=eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "patch": "@@ -19,15 +19,21 @@ pub struct DepTask<'graph> {\n \n impl<'graph> DepTask<'graph> {\n     pub fn new(data: &'graph DepGraphThreadData, key: DepNode<DefId>)\n-               -> DepTask<'graph> {\n-        data.enqueue(DepMessage::PushTask(key.clone()));\n-        DepTask { data: data, key: Some(key) }\n+               -> Option<DepTask<'graph>> {\n+        if data.is_enqueue_enabled() {\n+            data.enqueue(DepMessage::PushTask(key.clone()));\n+            Some(DepTask { data: data, key: Some(key) })\n+        } else {\n+            None\n+        }\n     }\n }\n \n impl<'graph> Drop for DepTask<'graph> {\n     fn drop(&mut self) {\n-        self.data.enqueue(DepMessage::PopTask(self.key.take().unwrap()));\n+        if self.data.is_enqueue_enabled() {\n+            self.data.enqueue(DepMessage::PopTask(self.key.take().unwrap()));\n+        }\n     }\n }\n \n@@ -36,15 +42,21 @@ pub struct IgnoreTask<'graph> {\n }\n \n impl<'graph> IgnoreTask<'graph> {\n-    pub fn new(data: &'graph DepGraphThreadData) -> IgnoreTask<'graph> {\n-        data.enqueue(DepMessage::PushIgnore);\n-        IgnoreTask { data: data }\n+    pub fn new(data: &'graph DepGraphThreadData) -> Option<IgnoreTask<'graph>> {\n+        if data.is_enqueue_enabled() {\n+            data.enqueue(DepMessage::PushIgnore);\n+            Some(IgnoreTask { data: data })\n+        } else {\n+            None\n+        }\n     }\n }\n \n impl<'graph> Drop for IgnoreTask<'graph> {\n     fn drop(&mut self) {\n-        self.data.enqueue(DepMessage::PopIgnore);\n+        if self.data.is_enqueue_enabled() {\n+            self.data.enqueue(DepMessage::PopIgnore);\n+        }\n     }\n }\n "}, {"sha": "06def4bf19af31ea5b573ae6540d6722288c2b6b", "filename": "src/librustc/dep_graph/shadow.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fshadow.rs?ref=eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "patch": "@@ -64,6 +64,11 @@ impl ShadowGraph {\n         }\n     }\n \n+    #[inline]\n+    pub fn enabled(&self) -> bool {\n+        ENABLED\n+    }\n+\n     pub fn enqueue(&self, message: &DepMessage) {\n         if ENABLED {\n             match self.stack.borrow_state() {"}, {"sha": "9f755cf86e4e4e59c2ec15c3479850b3785c2291", "filename": "src/librustc/dep_graph/thread.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb38d426c41aa8487e8cb8a9dafbfcf3528201f9/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fthread.rs?ref=eb38d426c41aa8487e8cb8a9dafbfcf3528201f9", "patch": "@@ -88,15 +88,24 @@ impl DepGraphThreadData {\n         }\n     }\n \n+    /// True if we are actually building the full dep-graph.\n     #[inline]\n-    pub fn enabled(&self) -> bool {\n+    pub fn is_fully_enabled(&self) -> bool {\n         self.enabled\n     }\n \n+    /// True if (a) we are actually building the full dep-graph, or (b) we are\n+    /// only enqueuing messages in order to sanity-check them (which happens\n+    /// when debug assertions are enabled).\n+    #[inline]\n+    pub fn is_enqueue_enabled(&self) -> bool {\n+        self.is_fully_enabled() || self.shadow_graph.enabled()\n+    }\n+\n     /// Sends the current batch of messages to the thread. Installs a\n     /// new vector of messages.\n     fn swap(&self) {\n-        assert!(self.enabled, \"should never swap if not enabled\");\n+        assert!(self.is_fully_enabled(), \"should never swap if not fully enabled\");\n \n         // should be a buffer waiting for us (though of course we may\n         // have to wait for depgraph thread to finish processing the\n@@ -112,7 +121,7 @@ impl DepGraphThreadData {\n     }\n \n     pub fn query(&self) -> DepGraphQuery<DefId> {\n-        assert!(self.enabled, \"cannot query if dep graph construction not enabled\");\n+        assert!(self.is_fully_enabled(), \"should never query if not fully enabled\");\n         self.enqueue(DepMessage::Query);\n         self.swap();\n         self.query_in.recv().unwrap()\n@@ -122,9 +131,9 @@ impl DepGraphThreadData {\n     /// the buffer is full, this may swap.)\n     #[inline]\n     pub fn enqueue(&self, message: DepMessage) {\n+        assert!(self.is_enqueue_enabled(), \"should never enqueue if not enqueue-enabled\");\n         self.shadow_graph.enqueue(&message);\n-\n-        if self.enabled {\n+        if self.is_fully_enabled() {\n             self.enqueue_enabled(message);\n         }\n     }"}]}