{"sha": "bf72b64b96a70b04d1a20096138856f525aaa7cf", "node_id": "C_kwDOAAsO6NoAKGJmNzJiNjRiOTZhNzBiMDRkMWEyMDA5NjEzODg1NmY1MjVhYWE3Y2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-05-04T17:18:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-04T17:18:18Z"}, "message": "Rollup merge of #110651 - durin42:xunit-stdout, r=cuviper\n\nlibtest: include test output in junit xml reports\n\nFixes #110336.", "tree": {"sha": "7f28337146cc8cc561964c133983b31132c2065a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f28337146cc8cc561964c133983b31132c2065a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf72b64b96a70b04d1a20096138856f525aaa7cf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkU+jaCRBK7hj4Ov3rIwAALwcIACVCCs59g5bqEpipFAZNUsTC\nkeyFu5cl3vO03rOt5c0DK8d9Oa4RBB6Nks8iQo7c1c1rc3Y4uPD8fU/9UK45VOyJ\nGPRKXtkuYrNrtp2Rbgx9Tlcddedi7KYBflZBVTHSlxukUqz7cguGUvPR2BJs+shd\nOZj2bkGbIafJ0b/fHH2GNWVvWrF6rIizXRKlo4cpF6mNzR1A9oNniA6UTZAkm7Z4\nO4QaYyoVcuqW3mpLKTWs1VJ50HkCrxM6nb1jPZtx5/PWXYCB31F3lzZFQP4fw1n+\n6DMa3IlCpGZ8KMbw1cHfk5R0iX2PUQH9PYD0nbgcgMZVuJQ3XOBJBMIroI5nnm0=\n=6NA+\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f28337146cc8cc561964c133983b31132c2065a\nparent 0098cd4e83574a9e8771b2ac643d85e5e07e44a9\nparent 58537cde0607eb3ca4076e00b8e2cfac52827ca1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1683220698 +0200\ncommitter GitHub <noreply@github.com> 1683220698 +0200\n\nRollup merge of #110651 - durin42:xunit-stdout, r=cuviper\n\nlibtest: include test output in junit xml reports\n\nFixes #110336.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf72b64b96a70b04d1a20096138856f525aaa7cf", "html_url": "https://github.com/rust-lang/rust/commit/bf72b64b96a70b04d1a20096138856f525aaa7cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf72b64b96a70b04d1a20096138856f525aaa7cf/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0098cd4e83574a9e8771b2ac643d85e5e07e44a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0098cd4e83574a9e8771b2ac643d85e5e07e44a9", "html_url": "https://github.com/rust-lang/rust/commit/0098cd4e83574a9e8771b2ac643d85e5e07e44a9"}, {"sha": "58537cde0607eb3ca4076e00b8e2cfac52827ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/58537cde0607eb3ca4076e00b8e2cfac52827ca1", "html_url": "https://github.com/rust-lang/rust/commit/58537cde0607eb3ca4076e00b8e2cfac52827ca1"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "9f5bf24367eaa9fa2399076a5526adbe72fdcc80", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -11,7 +11,7 @@ use crate::{\n \n pub struct JunitFormatter<T> {\n     out: OutputLocation<T>,\n-    results: Vec<(TestDesc, TestResult, Duration)>,\n+    results: Vec<(TestDesc, TestResult, Duration, Vec<u8>)>,\n }\n \n impl<T: Write> JunitFormatter<T> {\n@@ -26,6 +26,18 @@ impl<T: Write> JunitFormatter<T> {\n     }\n }\n \n+fn str_to_cdata(s: &str) -> String {\n+    // Drop the stdout in a cdata. Unfortunately, you can't put either of `]]>` or\n+    // `<?'` in a CDATA block, so the escaping gets a little weird.\n+    let escaped_output = s.replace(\"]]>\", \"]]]]><![CDATA[>\");\n+    let escaped_output = escaped_output.replace(\"<?\", \"<]]><![CDATA[?\");\n+    // We also smuggle newlines as &#xa so as to keep all the output on one line\n+    let escaped_output = escaped_output.replace(\"\\n\", \"]]>&#xA;<![CDATA[\");\n+    // Prune empty CDATA blocks resulting from any escaping\n+    let escaped_output = escaped_output.replace(\"<![CDATA[]]>\", \"\");\n+    format!(\"<![CDATA[{}]]>\", escaped_output)\n+}\n+\n impl<T: Write> OutputFormatter for JunitFormatter<T> {\n     fn write_discovery_start(&mut self) -> io::Result<()> {\n         Err(io::Error::new(io::ErrorKind::NotFound, \"Not yet implemented!\"))\n@@ -63,14 +75,14 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         desc: &TestDesc,\n         result: &TestResult,\n         exec_time: Option<&time::TestExecTime>,\n-        _stdout: &[u8],\n+        stdout: &[u8],\n         _state: &ConsoleTestState,\n     ) -> io::Result<()> {\n         // Because the testsuite node holds some of the information as attributes, we can't write it\n         // until all of the tests have finished. Instead of writing every result as they come in, we add\n         // them to a Vec and write them all at once when run is complete.\n         let duration = exec_time.map(|t| t.0).unwrap_or_default();\n-        self.results.push((desc.clone(), result.clone(), duration));\n+        self.results.push((desc.clone(), result.clone(), duration, stdout.to_vec()));\n         Ok(())\n     }\n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n@@ -85,7 +97,7 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n              >\",\n             state.failed, state.total, state.ignored\n         ))?;\n-        for (desc, result, duration) in std::mem::take(&mut self.results) {\n+        for (desc, result, duration, stdout) in std::mem::take(&mut self.results) {\n             let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n@@ -98,6 +110,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -110,6 +127,11 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                         duration.as_secs_f64()\n                     ))?;\n                     self.write_message(&format!(\"<failure message=\\\"{m}\\\" type=\\\"assert\\\"/>\"))?;\n+                    if !stdout.is_empty() {\n+                        self.write_message(\"<system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                    }\n                     self.write_message(\"</testcase>\")?;\n                 }\n \n@@ -136,11 +158,19 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n                 TestResult::TrOk => {\n                     self.write_message(&format!(\n                         \"<testcase classname=\\\"{}\\\" \\\n-                         name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n+                         name=\\\"{}\\\" time=\\\"{}\\\"\",\n                         class_name,\n                         test_name,\n                         duration.as_secs_f64()\n                     ))?;\n+                    if stdout.is_empty() || !state.options.display_output {\n+                        self.write_message(\"/>\")?;\n+                    } else {\n+                        self.write_message(\"><system-out>\")?;\n+                        self.write_message(&str_to_cdata(&String::from_utf8_lossy(&stdout)))?;\n+                        self.write_message(\"</system-out>\")?;\n+                        self.write_message(\"</testcase>\")?;\n+                    }\n                 }\n             }\n         }"}, {"sha": "d97cafccf1fd46163e53487af6f93dbc5f1c9d17", "filename": "tests/run-make/libtest-junit/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2FMakefile?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -0,0 +1,19 @@\n+# ignore-cross-compile\n+include ../tools.mk\n+\n+# Test expected libtest's junit output\n+\n+OUTPUT_FILE_DEFAULT := $(TMPDIR)/libtest-junit-output-default.xml\n+OUTPUT_FILE_STDOUT_SUCCESS := $(TMPDIR)/libtest-junit-output-stdout-success.xml\n+\n+all: f.rs validate_junit.py output-default.xml output-stdout-success.xml\n+\t$(RUSTC) --test f.rs\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit > $(OUTPUT_FILE_DEFAULT) || true\n+\tRUST_BACKTRACE=0 $(call RUN,f) -Z unstable-options --test-threads=1 --format=junit --show-output > $(OUTPUT_FILE_STDOUT_SUCCESS) || true\n+\n+\tcat $(OUTPUT_FILE_DEFAULT) | \"$(PYTHON)\" validate_junit.py\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | \"$(PYTHON)\" validate_junit.py\n+\n+\t# Normalize the actual output and compare to expected output file\n+\tcat $(OUTPUT_FILE_DEFAULT) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-default.xml -\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | sed 's/time=\"[0-9.]*\"/time=\"$$TIME\"/g' | diff output-stdout-success.xml -"}, {"sha": "d360d77317d78543451ababb0f5ff3297883b14e", "filename": "tests/run-make/libtest-junit/f.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Ff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Ff.rs?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -0,0 +1,23 @@\n+#[test]\n+fn a() {\n+    println!(\"print from successful test\");\n+    // Should pass\n+}\n+\n+#[test]\n+fn b() {\n+    println!(\"print from failing test\");\n+    assert!(false);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn c() {\n+    assert!(false);\n+}\n+\n+#[test]\n+#[ignore = \"msg\"]\n+fn d() {\n+    assert!(false);\n+}"}, {"sha": "d59e07b8ad89db255369254be0586328ddd0ce24", "filename": "tests/run-make/libtest-junit/output-default.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-default.xml?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"/><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"/><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "0c300611e1f76c1fd71957f51c4f24af77b636bb", "filename": "tests/run-make/libtest-junit/output-stdout-success.xml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Foutput-stdout-success.xml?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -0,0 +1 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?><testsuites><testsuite name=\"test\" package=\"test\" id=\"0\" errors=\"0\" failures=\"1\" tests=\"4\" skipped=\"1\" ><testcase classname=\"unknown\" name=\"a\" time=\"$TIME\"><system-out><![CDATA[print from successful test]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"b\" time=\"$TIME\"><failure type=\"assert\"/><system-out><![CDATA[print from failing test]]>&#xA;<![CDATA[thread 'b' panicked at 'assertion failed: false', f.rs:10:5]]>&#xA;<![CDATA[note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace]]>&#xA;<![CDATA[]]></system-out></testcase><testcase classname=\"unknown\" name=\"c\" time=\"$TIME\"><system-out><![CDATA[thread 'c' panicked at 'assertion failed: false', f.rs:16:5]]>&#xA;<![CDATA[]]></system-out></testcase><system-out/><system-err/></testsuite></testsuites>"}, {"sha": "47a8e70ccc38c522fceecd99c899d0a875f6fa7f", "filename": "tests/run-make/libtest-junit/validate_junit.py", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "raw_url": "https://github.com/rust-lang/rust/raw/bf72b64b96a70b04d1a20096138856f525aaa7cf/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Flibtest-junit%2Fvalidate_junit.py?ref=bf72b64b96a70b04d1a20096138856f525aaa7cf", "patch": "@@ -0,0 +1,12 @@\n+#!/usr/bin/env python\n+\n+import sys\n+import xml.etree.ElementTree as ET\n+\n+# Try to decode line in order to ensure it is a valid XML document\n+for line in sys.stdin:\n+    try:\n+        ET.fromstring(line)\n+    except ET.ParseError as pe:\n+        print(\"Invalid xml: %r\" % line)\n+        raise"}]}