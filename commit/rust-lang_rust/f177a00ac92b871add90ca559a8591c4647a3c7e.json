{"sha": "f177a00ac92b871add90ca559a8591c4647a3c7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxNzdhMDBhYzkyYjg3MWFkZDkwY2E1NTlhODU5MWM0NjQ3YTNjN2U=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-15T10:17:24Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-20T12:36:41Z"}, "message": "Refactor `P<ast::MetaItem>` -> `ast::MetaItem`.", "tree": {"sha": "3ffa11f80acfe58fb5073ed1cf2d53d00877d02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ffa11f80acfe58fb5073ed1cf2d53d00877d02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f177a00ac92b871add90ca559a8591c4647a3c7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f177a00ac92b871add90ca559a8591c4647a3c7e", "html_url": "https://github.com/rust-lang/rust/commit/f177a00ac92b871add90ca559a8591c4647a3c7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f177a00ac92b871add90ca559a8591c4647a3c7e/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e97686d048141d8a514337531f72f9471bc7c424", "url": "https://api.github.com/repos/rust-lang/rust/commits/e97686d048141d8a514337531f72f9471bc7c424", "html_url": "https://github.com/rust-lang/rust/commit/e97686d048141d8a514337531f72f9471bc7c424"}], "stats": {"total": 112, "additions": 54, "deletions": 58}, "files": [{"sha": "2ca2f69cf22db97b5ffdc685be573bfd44f349ce", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -93,7 +93,7 @@ pub enum NativeLibraryKind {\n pub struct NativeLibrary {\n     pub kind: NativeLibraryKind,\n     pub name: String,\n-    pub cfg: Option<P<ast::MetaItem>>,\n+    pub cfg: Option<ast::MetaItem>,\n }\n \n /// The data we save and restore about an inlined item or method.  This is not"}, {"sha": "9035c2ab3c236e05cf85fb26813a69dab174bbee", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -11,7 +11,6 @@\n use borrowck::BorrowckCtxt;\n \n use syntax::ast::{self, MetaItem};\n-use syntax::ptr::P;\n use syntax_pos::{Span, DUMMY_SP};\n \n use rustc::hir;\n@@ -35,7 +34,7 @@ use self::dataflow::{MaybeInitializedLvals, MaybeUninitializedLvals};\n use self::dataflow::{DefinitelyInitializedLvals};\n use self::gather_moves::{MoveData, MovePathIndex, LookupResult};\n \n-fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<P<MetaItem>> {\n+fn has_rustc_mir_with(attrs: &[ast::Attribute], name: &str) -> Option<MetaItem> {\n     for attr in attrs {\n         if attr.check_name(\"rustc_mir\") {\n             let items = attr.meta_item_list();"}, {"sha": "a1a7c05f774b61b0fbabe9d518fcd892e9c85341", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             if !attr.is_sugared_doc &&\n                !IGNORED_ATTRIBUTES.contains(&&*attr.value.name().as_str()) {\n                 SawAttribute(attr.style).hash(self.st);\n-                self.hash_meta_item(&*attr.value);\n+                self.hash_meta_item(&attr.value);\n             }\n         }\n     }"}, {"sha": "45970a63ab4a5e9ffd458d47cc1ffcac80ba5337", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -505,7 +505,7 @@ pub type NestedMetaItem = Spanned<NestedMetaItemKind>;\n #[derive(Clone, Eq, RustcEncodable, RustcDecodable, Hash, Debug, PartialEq)]\n pub enum NestedMetaItemKind {\n     /// A full MetaItem, for recursive meta items.\n-    MetaItem(P<MetaItem>),\n+    MetaItem(MetaItem),\n     /// A literal.\n     ///\n     /// E.g. \"foo\", 64, true\n@@ -1758,7 +1758,7 @@ pub struct AttrId(pub usize);\n pub struct Attribute {\n     pub id: AttrId,\n     pub style: AttrStyle,\n-    pub value: P<MetaItem>,\n+    pub value: MetaItem,\n     pub is_sugared_doc: bool,\n     pub span: Span,\n }"}, {"sha": "cd93b8e96e455b324f310707c7cfdcdf93b26e16", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -107,7 +107,7 @@ pub fn is_known(attr: &Attribute) -> bool {\n \n impl NestedMetaItem {\n     /// Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.\n-    pub fn meta_item(&self) -> Option<&P<MetaItem>> {\n+    pub fn meta_item(&self) -> Option<&MetaItem> {\n         match self.node {\n             NestedMetaItemKind::MetaItem(ref item) => Some(&item),\n             _ => None\n@@ -145,7 +145,7 @@ impl NestedMetaItem {\n     }\n \n     /// Returns a MetaItem if self is a MetaItem with Kind Word.\n-    pub fn word(&self) -> Option<&P<MetaItem>> {\n+    pub fn word(&self) -> Option<&MetaItem> {\n         self.meta_item().and_then(|meta_item| if meta_item.is_word() {\n             Some(meta_item)\n         } else {\n@@ -294,37 +294,37 @@ impl Attribute {\n \n /* Constructors */\n \n-pub fn mk_name_value_item_str(name: Name, value: InternedString) -> P<MetaItem> {\n+pub fn mk_name_value_item_str(name: Name, value: InternedString) -> MetaItem {\n     let value_lit = dummy_spanned(ast::LitKind::Str(value, ast::StrStyle::Cooked));\n     mk_spanned_name_value_item(DUMMY_SP, name, value_lit)\n }\n \n-pub fn mk_name_value_item(name: Name, value: ast::Lit) -> P<MetaItem> {\n+pub fn mk_name_value_item(name: Name, value: ast::Lit) -> MetaItem {\n     mk_spanned_name_value_item(DUMMY_SP, name, value)\n }\n \n-pub fn mk_list_item(name: Name, items: Vec<NestedMetaItem>) -> P<MetaItem> {\n+pub fn mk_list_item(name: Name, items: Vec<NestedMetaItem>) -> MetaItem {\n     mk_spanned_list_item(DUMMY_SP, name, items)\n }\n \n pub fn mk_list_word_item(name: Name) -> ast::NestedMetaItem {\n     dummy_spanned(NestedMetaItemKind::MetaItem(mk_spanned_word_item(DUMMY_SP, name)))\n }\n \n-pub fn mk_word_item(name: Name) -> P<MetaItem> {\n+pub fn mk_word_item(name: Name) -> MetaItem {\n     mk_spanned_word_item(DUMMY_SP, name)\n }\n \n-pub fn mk_spanned_name_value_item(sp: Span, name: Name, value: ast::Lit) -> P<MetaItem> {\n-    P(MetaItem { span: sp, name: name, node: MetaItemKind::NameValue(value) })\n+pub fn mk_spanned_name_value_item(sp: Span, name: Name, value: ast::Lit) -> MetaItem {\n+    MetaItem { span: sp, name: name, node: MetaItemKind::NameValue(value) }\n }\n \n-pub fn mk_spanned_list_item(sp: Span, name: Name, items: Vec<NestedMetaItem>) -> P<MetaItem> {\n-    P(MetaItem { span: sp, name: name, node: MetaItemKind::List(items) })\n+pub fn mk_spanned_list_item(sp: Span, name: Name, items: Vec<NestedMetaItem>) -> MetaItem {\n+    MetaItem { span: sp, name: name, node: MetaItemKind::List(items) }\n }\n \n-pub fn mk_spanned_word_item(sp: Span, name: Name) -> P<MetaItem> {\n-    P(MetaItem { span: sp, name: name, node: MetaItemKind::Word })\n+pub fn mk_spanned_word_item(sp: Span, name: Name) -> MetaItem {\n+    MetaItem { span: sp, name: name, node: MetaItemKind::Word }\n }\n \n \n@@ -341,12 +341,12 @@ pub fn mk_attr_id() -> AttrId {\n }\n \n /// Returns an inner attribute with the given value.\n-pub fn mk_attr_inner(id: AttrId, item: P<MetaItem>) -> Attribute {\n+pub fn mk_attr_inner(id: AttrId, item: MetaItem) -> Attribute {\n     mk_spanned_attr_inner(DUMMY_SP, id, item)\n }\n \n /// Returns an innter attribute with the given value and span.\n-pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: P<MetaItem>) -> Attribute {\n+pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: MetaItem) -> Attribute {\n     Attribute {\n         id: id,\n         style: ast::AttrStyle::Inner,\n@@ -358,12 +358,12 @@ pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: P<MetaItem>) -> Attribu\n \n \n /// Returns an outer attribute with the given value.\n-pub fn mk_attr_outer(id: AttrId, item: P<MetaItem>) -> Attribute {\n+pub fn mk_attr_outer(id: AttrId, item: MetaItem) -> Attribute {\n     mk_spanned_attr_outer(DUMMY_SP, id, item)\n }\n \n /// Returns an outer attribute with the given value and span.\n-pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: P<MetaItem>) -> Attribute {\n+pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: MetaItem) -> Attribute {\n     Attribute {\n         id: id,\n         style: ast::AttrStyle::Outer,\n@@ -373,7 +373,7 @@ pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: P<MetaItem>) -> Attribu\n     }\n }\n \n-pub fn mk_doc_attr_outer(id: AttrId, item: P<MetaItem>, is_sugared_doc: bool) -> Attribute {\n+pub fn mk_doc_attr_outer(id: AttrId, item: MetaItem, is_sugared_doc: bool) -> Attribute {\n     Attribute {\n         id: id,\n         style: ast::AttrStyle::Outer,\n@@ -390,11 +390,11 @@ pub fn mk_sugared_doc_attr(id: AttrId, text: InternedString, lo: BytePos, hi: By\n     Attribute {\n         id: id,\n         style: style,\n-        value: P(MetaItem {\n+        value: MetaItem {\n             span: mk_sp(lo, hi),\n             name: token::intern(\"doc\"),\n             node: MetaItemKind::NameValue(lit),\n-        }),\n+        },\n         is_sugared_doc: true,\n         span: mk_sp(lo, hi),\n     }\n@@ -423,8 +423,7 @@ pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: &str)\n         .and_then(|at| at.value_str())\n }\n \n-pub fn last_meta_item_value_str_by_name(items: &[P<MetaItem>], name: &str)\n-                                     -> Option<InternedString> {\n+pub fn last_meta_item_value_str_by_name(items: &[MetaItem], name: &str) -> Option<InternedString> {\n     items.iter()\n          .rev()\n          .find(|mi| mi.check_name(name))\n@@ -859,7 +858,7 @@ pub fn find_deprecation(diagnostic: &Handler, attrs: &[Attribute],\n     find_deprecation_generic(diagnostic, attrs.iter(), item_sp)\n }\n \n-pub fn require_unique_names(diagnostic: &Handler, metas: &[P<MetaItem>]) {\n+pub fn require_unique_names(diagnostic: &Handler, metas: &[MetaItem]) {\n     let mut set = HashSet::new();\n     for meta in metas {\n         let name = meta.name();"}, {"sha": "f488e1cf95c3711d2d7bbaf982261b94772096f7", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -275,22 +275,22 @@ pub trait AstBuilder {\n                     generics: Generics) -> P<ast::Item>;\n     fn item_ty(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> P<ast::Item>;\n \n-    fn attribute(&self, sp: Span, mi: P<ast::MetaItem>) -> ast::Attribute;\n+    fn attribute(&self, sp: Span, mi: ast::MetaItem) -> ast::Attribute;\n \n-    fn meta_word(&self, sp: Span, w: ast::Name) -> P<ast::MetaItem>;\n+    fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem;\n \n     fn meta_list_item_word(&self, sp: Span, w: ast::Name) -> ast::NestedMetaItem;\n \n     fn meta_list(&self,\n                  sp: Span,\n                  name: ast::Name,\n                  mis: Vec<ast::NestedMetaItem> )\n-                 -> P<ast::MetaItem>;\n+                 -> ast::MetaItem;\n     fn meta_name_value(&self,\n                        sp: Span,\n                        name: ast::Name,\n                        value: ast::LitKind)\n-                       -> P<ast::MetaItem>;\n+                       -> ast::MetaItem;\n \n     fn item_use(&self, sp: Span,\n                 vis: ast::Visibility, vp: P<ast::ViewPath>) -> P<ast::Item>;\n@@ -1146,11 +1146,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.item_ty_poly(span, name, ty, Generics::default())\n     }\n \n-    fn attribute(&self, sp: Span, mi: P<ast::MetaItem>) -> ast::Attribute {\n+    fn attribute(&self, sp: Span, mi: ast::MetaItem) -> ast::Attribute {\n         attr::mk_spanned_attr_outer(sp, attr::mk_attr_id(), mi)\n     }\n \n-    fn meta_word(&self, sp: Span, w: ast::Name) -> P<ast::MetaItem> {\n+    fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem {\n         attr::mk_spanned_word_item(sp, w)\n     }\n \n@@ -1159,12 +1159,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn meta_list(&self, sp: Span, name: ast::Name, mis: Vec<ast::NestedMetaItem>)\n-                 -> P<ast::MetaItem> {\n+                 -> ast::MetaItem {\n         attr::mk_spanned_list_item(sp, name, mis)\n     }\n \n     fn meta_name_value(&self, sp: Span, name: ast::Name, value: ast::LitKind)\n-                       -> P<ast::MetaItem> {\n+                       -> ast::MetaItem {\n         attr::mk_spanned_name_value_item(sp, name, respan(sp, value))\n     }\n "}, {"sha": "fa38f21e9b37c9ca1d0df23ec402c0c6a6f8c11d", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -211,7 +211,7 @@ pub mod rt {\n     impl_to_tokens_slice! { P<ast::Item>, [] }\n     impl_to_tokens_slice! { ast::Arg, [TokenTree::Token(DUMMY_SP, token::Comma)] }\n \n-    impl ToTokens for P<ast::MetaItem> {\n+    impl ToTokens for ast::MetaItem {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n             let nt = token::NtMeta(self.clone());\n             vec![TokenTree::Token(DUMMY_SP, token::Interpolated(Rc::new(nt)))]\n@@ -405,7 +405,7 @@ pub fn parse_block_panic(parser: &mut Parser) -> P<Block> {\n     panictry!(parser.parse_block())\n }\n \n-pub fn parse_meta_item_panic(parser: &mut Parser) -> P<ast::MetaItem> {\n+pub fn parse_meta_item_panic(parser: &mut Parser) -> ast::MetaItem {\n     panictry!(parser.parse_meta_item())\n }\n "}, {"sha": "19f5e860b27e70f1a1184997d3dd7375e940b38f", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -995,7 +995,7 @@ fn contains_novel_literal(item: &ast::MetaItem) -> bool {\n         NameValue(ref lit) => !lit.node.is_str(),\n         List(ref list) => list.iter().any(|li| {\n             match li.node {\n-                MetaItem(ref mi) => contains_novel_literal(&**mi),\n+                MetaItem(ref mi) => contains_novel_literal(&mi),\n                 Literal(_) => true,\n             }\n         }),\n@@ -1013,7 +1013,7 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n             self.context.check_attribute(attr, false);\n         }\n \n-        if contains_novel_literal(&*(attr.value)) {\n+        if contains_novel_literal(&attr.value) {\n             gate_feature_post!(&self, attr_literals, attr.span,\n                                \"non-string literals in attributes, or string \\\n                                literals in top-level positions, are experimental\");"}, {"sha": "b6c87155d6b1cb75f7ebc134de67c314668a20af", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -43,15 +43,15 @@ pub trait Folder : Sized {\n         noop_fold_crate(c, self)\n     }\n \n-    fn fold_meta_items(&mut self, meta_items: Vec<P<MetaItem>>) -> Vec<P<MetaItem>> {\n+    fn fold_meta_items(&mut self, meta_items: Vec<MetaItem>) -> Vec<MetaItem> {\n         noop_fold_meta_items(meta_items, self)\n     }\n \n     fn fold_meta_list_item(&mut self, list_item: NestedMetaItem) -> NestedMetaItem {\n         noop_fold_meta_list_item(list_item, self)\n     }\n \n-    fn fold_meta_item(&mut self, meta_item: P<MetaItem>) -> P<MetaItem> {\n+    fn fold_meta_item(&mut self, meta_item: MetaItem) -> MetaItem {\n         noop_fold_meta_item(meta_item, self)\n     }\n \n@@ -293,8 +293,7 @@ pub trait Folder : Sized {\n     }\n }\n \n-pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<P<MetaItem>>, fld: &mut T)\n-                                       -> Vec<P<MetaItem>> {\n+pub fn noop_fold_meta_items<T: Folder>(meta_items: Vec<MetaItem>, fld: &mut T) -> Vec<MetaItem> {\n     meta_items.move_map(|x| fld.fold_meta_item(x))\n }\n \n@@ -519,18 +518,18 @@ pub fn noop_fold_meta_list_item<T: Folder>(li: NestedMetaItem, fld: &mut T)\n     }\n }\n \n-pub fn noop_fold_meta_item<T: Folder>(mi: P<MetaItem>, fld: &mut T) -> P<MetaItem> {\n-    mi.map(|MetaItem { name, node, span }| MetaItem {\n-        name: name,\n-        node: match node {\n+pub fn noop_fold_meta_item<T: Folder>(mi: MetaItem, fld: &mut T) -> MetaItem {\n+    MetaItem {\n+        name: mi.name,\n+        node: match mi.node {\n             MetaItemKind::Word => MetaItemKind::Word,\n             MetaItemKind::List(mis) => {\n                 MetaItemKind::List(mis.move_map(|e| fld.fold_meta_list_item(e)))\n             },\n             MetaItemKind::NameValue(s) => MetaItemKind::NameValue(s),\n         },\n-        span: fld.new_span(span)\n-    })\n+        span: fld.new_span(mi.span)\n+    }\n }\n \n pub fn noop_fold_arg<T: Folder>(Arg {id, pat, ty}: Arg, fld: &mut T) -> Arg {"}, {"sha": "a6e40d70e2fc13cdfa16e451b2e2884b0d2ee3be", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -16,7 +16,6 @@ use parse::common::SeqSep;\n use parse::PResult;\n use parse::token;\n use parse::parser::{Parser, TokenType};\n-use ptr::P;\n \n #[derive(PartialEq, Eq, Debug)]\n enum InnerAttributeParsePolicy<'a> {\n@@ -211,7 +210,7 @@ impl<'a> Parser<'a> {\n     ///\n     /// meta_item : IDENT ( '=' UNSUFFIXED_LIT | '(' meta_item_inner? ')' )? ;\n     /// meta_item_inner : (meta_item | UNSUFFIXED_LIT) (',' meta_item_inner)? ;\n-    pub fn parse_meta_item(&mut self) -> PResult<'a, P<ast::MetaItem>> {\n+    pub fn parse_meta_item(&mut self) -> PResult<'a, ast::MetaItem> {\n         let nt_meta = match self.token {\n             token::Interpolated(ref nt) => match **nt {\n                 token::NtMeta(ref e) => Some(e.clone()),\n@@ -235,7 +234,7 @@ impl<'a> Parser<'a> {\n             ast::MetaItemKind::Word\n         };\n         let hi = self.prev_span.hi;\n-        Ok(P(ast::MetaItem { name: ident.name, node: node, span: mk_sp(lo, hi) }))\n+        Ok(ast::MetaItem { name: ident.name, node: node, span: mk_sp(lo, hi) })\n     }\n \n     /// matches meta_item_inner : (meta_item | UNSUFFIXED_LIT) ;"}, {"sha": "19e8b711ba485076f311a767b67ea34c55657303", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -117,7 +117,7 @@ pub fn parse_item_from_source_str<'a>(name: String, source: String, sess: &'a Pa\n }\n \n pub fn parse_meta_from_source_str<'a>(name: String, source: String, sess: &'a ParseSess)\n-                                      -> PResult<'a, P<ast::MetaItem>> {\n+                                      -> PResult<'a, ast::MetaItem> {\n     new_parser_from_source_str(sess, name, source).parse_meta_item()\n }\n "}, {"sha": "4aaa028ef75e233d5ffed44e74ea15c740e22818", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -301,7 +301,7 @@ pub enum Nonterminal {\n     NtTy(P<ast::Ty>),\n     NtIdent(ast::SpannedIdent),\n     /// Stuff inside brackets for attributes\n-    NtMeta(P<ast::MetaItem>),\n+    NtMeta(ast::MetaItem),\n     NtPath(ast::Path),\n     NtTT(tokenstream::TokenTree),\n     // These are not exposed to macros, but are used by quasiquote."}, {"sha": "166d95911b96cf54b96e52ab6e3d6b414f8fdaa5", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -69,11 +69,11 @@ pub fn maybe_inject_crates_ref(sess: &ParseSess,\n     krate.module.items.insert(0, P(ast::Item {\n         attrs: vec![ast::Attribute {\n             style: ast::AttrStyle::Outer,\n-            value: P(ast::MetaItem {\n+            value: ast::MetaItem {\n                 name: token::intern(\"prelude_import\"),\n                 node: ast::MetaItemKind::Word,\n                 span: span,\n-            }),\n+            },\n             id: attr::mk_attr_id(),\n             is_sugared_doc: false,\n             span: span,"}, {"sha": "ef4c02931ab4821ee0cb7b024b1bef501b41a359", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f177a00ac92b871add90ca559a8591c4647a3c7e/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=f177a00ac92b871add90ca559a8591c4647a3c7e", "patch": "@@ -116,7 +116,7 @@ pub fn expand_derive(cx: &mut ExtCtxt,\n     // Expand `#[derive]`s after other attribute macro invocations.\n     if cx.resolver.find_attr_invoc(&mut item.attrs.clone()).is_some() {\n         return vec![Annotatable::Item(item.map_attrs(|mut attrs| {\n-            attrs.push(cx.attribute(span, P(mitem.clone())));\n+            attrs.push(cx.attribute(span, mitem.clone()));\n             attrs.extend(derive_attrs);\n             attrs\n         }))];"}]}