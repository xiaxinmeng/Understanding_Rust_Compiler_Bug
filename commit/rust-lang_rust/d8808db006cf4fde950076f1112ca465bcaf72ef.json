{"sha": "d8808db006cf4fde950076f1112ca465bcaf72ef", "node_id": "C_kwDOAAsO6NoAKGQ4ODA4ZGIwMDZjZjRmZGU5NTAwNzZmMTExMmNhNDY1YmNhZjcyZWY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-06T15:58:30Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-19T14:54:55Z"}, "message": "Move `VerboseFileReads` into `Methods` lint pass", "tree": {"sha": "fa7593746fa6f1b1fd402c79d1c342c8a495cf92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa7593746fa6f1b1fd402c79d1c342c8a495cf92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8808db006cf4fde950076f1112ca465bcaf72ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8808db006cf4fde950076f1112ca465bcaf72ef", "html_url": "https://github.com/rust-lang/rust/commit/d8808db006cf4fde950076f1112ca465bcaf72ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8808db006cf4fde950076f1112ca465bcaf72ef/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "html_url": "https://github.com/rust-lang/rust/commit/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6"}], "stats": {"total": 157, "additions": 65, "deletions": 92}, "files": [{"sha": "db475950086d0c30f7b0e8f3fd07f281f66507ab", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=d8808db006cf4fde950076f1112ca465bcaf72ef", "patch": "@@ -370,6 +370,7 @@ store.register_lints(&[\n     methods::UNWRAP_USED,\n     methods::USELESS_ASREF,\n     methods::VEC_RESIZE_TO_ZERO,\n+    methods::VERBOSE_FILE_READS,\n     methods::WRONG_SELF_CONVENTION,\n     methods::ZST_OFFSET,\n     minmax::MIN_MAX,\n@@ -585,7 +586,6 @@ store.register_lints(&[\n     useless_conversion::USELESS_CONVERSION,\n     vec::USELESS_VEC,\n     vec_init_then_push::VEC_INIT_THEN_PUSH,\n-    verbose_file_reads::VERBOSE_FILE_READS,\n     wildcard_imports::ENUM_GLOB_USE,\n     wildcard_imports::WILDCARD_IMPORTS,\n     write::POSITIONAL_NAMED_FORMAT_PARAMETERS,"}, {"sha": "dd1e1e1a8e33d82088578a75adcaa49cf7db7128", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=d8808db006cf4fde950076f1112ca465bcaf72ef", "patch": "@@ -40,6 +40,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(methods::GET_UNWRAP),\n     LintId::of(methods::MAP_ERR_IGNORE),\n     LintId::of(methods::UNWRAP_USED),\n+    LintId::of(methods::VERBOSE_FILE_READS),\n     LintId::of(misc_early::SEPARATED_LITERAL_SUFFIX),\n     LintId::of(misc_early::UNNEEDED_FIELD_PATTERN),\n     LintId::of(misc_early::UNSEPARATED_LITERAL_SUFFIX),\n@@ -81,7 +82,6 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(unicode::NON_ASCII_LITERAL),\n     LintId::of(unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS),\n     LintId::of(unwrap_in_result::UNWRAP_IN_RESULT),\n-    LintId::of(verbose_file_reads::VERBOSE_FILE_READS),\n     LintId::of(write::PRINT_STDERR),\n     LintId::of(write::PRINT_STDOUT),\n     LintId::of(write::USE_DEBUG),"}, {"sha": "dbea55a04d62d8ae78bb7ae766009b078c4b06ec", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d8808db006cf4fde950076f1112ca465bcaf72ef", "patch": "@@ -391,7 +391,6 @@ mod use_self;\n mod useless_conversion;\n mod vec;\n mod vec_init_then_push;\n-mod verbose_file_reads;\n mod wildcard_imports;\n mod write;\n mod zero_div_zero;\n@@ -792,7 +791,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n     store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n-    store.register_late_pass(|| Box::new(verbose_file_reads::VerboseFileReads));\n     store.register_late_pass(|| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n     store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n     store.register_late_pass(move || Box::new(dereference::Dereferencing::new(msrv)));"}, {"sha": "1cfe8c4191efab8bae143d30f57d090e6ab92e17", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d8808db006cf4fde950076f1112ca465bcaf72ef", "patch": "@@ -91,6 +91,7 @@ mod unwrap_used;\n mod useless_asref;\n mod utils;\n mod vec_resize_to_zero;\n+mod verbose_file_reads;\n mod wrong_self_convention;\n mod zst_offset;\n \n@@ -2930,6 +2931,33 @@ declare_clippy_lint! {\n     \"emptying a vector with `resize(0, an_int)` instead of `clear()` is probably an argument inversion mistake\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for use of File::read_to_end and File::read_to_string.\n+    ///\n+    /// ### Why is this bad?\n+    /// `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\n+    /// See also: [fs::read docs](https://doc.rust-lang.org/std/fs/fn.read.html), [fs::read_to_string docs](https://doc.rust-lang.org/std/fs/fn.read_to_string.html)\n+    ///\n+    /// ### Example\n+    /// ```rust,no_run\n+    /// # use std::io::Read;\n+    /// # use std::fs::File;\n+    /// let mut f = File::open(\"foo.txt\").unwrap();\n+    /// let mut bytes = Vec::new();\n+    /// f.read_to_end(&mut bytes).unwrap();\n+    /// ```\n+    /// Can be written more concisely as\n+    /// ```rust,no_run\n+    /// # use std::fs;\n+    /// let mut bytes = fs::read(\"foo.txt\").unwrap();\n+    /// ```\n+    #[clippy::version = \"1.44.0\"]\n+    pub VERBOSE_FILE_READS,\n+    restriction,\n+    \"use of `File::read_to_end` or `File::read_to_string`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -3050,6 +3078,7 @@ impl_lint_pass!(Methods => [\n     UNIT_HASH,\n     UNNECESSARY_SORT_BY,\n     VEC_RESIZE_TO_ZERO,\n+    VERBOSE_FILE_READS,\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -3441,6 +3470,12 @@ impl Methods {\n                 (\"push\", [arg]) => {\n                     path_buf_push_overwrite::check(cx, expr, arg);\n                 },\n+                (\"read_to_end\", [_]) => {\n+                    verbose_file_reads::check(cx, expr, recv, verbose_file_reads::READ_TO_END_MSG);\n+                },\n+                (\"read_to_string\", [_]) => {\n+                    verbose_file_reads::check(cx, expr, recv, verbose_file_reads::READ_TO_STRING_MSG);\n+                },\n                 (\"repeat\", [arg]) => {\n                     repeat_once::check(cx, expr, recv, arg);\n                 },"}, {"sha": "2fe5ae9a9ad8fda3a9c80f8143ac603764d1ad8b", "filename": "clippy_lints/src/methods/verbose_file_reads.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Fmethods%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8808db006cf4fde950076f1112ca465bcaf72ef/clippy_lints%2Fsrc%2Fmethods%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fverbose_file_reads.rs?ref=d8808db006cf4fde950076f1112ca465bcaf72ef", "patch": "@@ -0,0 +1,28 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::LateContext;\n+use rustc_span::sym;\n+\n+use super::VERBOSE_FILE_READS;\n+\n+pub(super) const READ_TO_END_MSG: (&str, &str) = (\"use of `File::read_to_end`\", \"consider using `fs::read` instead\");\n+pub(super) const READ_TO_STRING_MSG: (&str, &str) = (\n+    \"use of `File::read_to_string`\",\n+    \"consider using `fs::read_to_string` instead\",\n+);\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    recv: &'tcx Expr<'_>,\n+    (msg, help): (&str, &str),\n+) {\n+    if is_trait_method(cx, expr, sym::IoRead)\n+        && matches!(recv.kind, ExprKind::Path(QPath::Resolved(None, _)))\n+        && is_type_diagnostic_item(cx, cx.typeck_results().expr_ty_adjusted(recv).peel_refs(), sym::File)\n+    {\n+        span_lint_and_help(cx, VERBOSE_FILE_READS, expr.span, msg, None, help);\n+    }\n+}"}, {"sha": "afd0077a658049160feb972d23c7a0391769602c", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "removed", "additions": 0, "deletions": 88, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=8acc4d2f1e255e0e97e48b7a285a7d6db4a03bd6", "patch": "@@ -1,88 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::paths;\n-use clippy_utils::ty::match_type;\n-use if_chain::if_chain;\n-use rustc_hir::{Expr, ExprKind, QPath};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for use of File::read_to_end and File::read_to_string.\n-    ///\n-    /// ### Why is this bad?\n-    /// `fs::{read, read_to_string}` provide the same functionality when `buf` is empty with fewer imports and no intermediate values.\n-    /// See also: [fs::read docs](https://doc.rust-lang.org/std/fs/fn.read.html), [fs::read_to_string docs](https://doc.rust-lang.org/std/fs/fn.read_to_string.html)\n-    ///\n-    /// ### Example\n-    /// ```rust,no_run\n-    /// # use std::io::Read;\n-    /// # use std::fs::File;\n-    /// let mut f = File::open(\"foo.txt\").unwrap();\n-    /// let mut bytes = Vec::new();\n-    /// f.read_to_end(&mut bytes).unwrap();\n-    /// ```\n-    /// Can be written more concisely as\n-    /// ```rust,no_run\n-    /// # use std::fs;\n-    /// let mut bytes = fs::read(\"foo.txt\").unwrap();\n-    /// ```\n-    #[clippy::version = \"1.44.0\"]\n-    pub VERBOSE_FILE_READS,\n-    restriction,\n-    \"use of `File::read_to_end` or `File::read_to_string`\"\n-}\n-\n-declare_lint_pass!(VerboseFileReads => [VERBOSE_FILE_READS]);\n-\n-impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if is_file_read_to_end(cx, expr) {\n-            span_lint_and_help(\n-                cx,\n-                VERBOSE_FILE_READS,\n-                expr.span,\n-                \"use of `File::read_to_end`\",\n-                None,\n-                \"consider using `fs::read` instead\",\n-            );\n-        } else if is_file_read_to_string(cx, expr) {\n-            span_lint_and_help(\n-                cx,\n-                VERBOSE_FILE_READS,\n-                expr.span,\n-                \"use of `File::read_to_string`\",\n-                None,\n-                \"consider using `fs::read_to_string` instead\",\n-            );\n-        }\n-    }\n-}\n-\n-fn is_file_read_to_end<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_name, [recv, ..], _) = expr.kind;\n-        if method_name.ident.as_str() == \"read_to_end\";\n-        if let ExprKind::Path(QPath::Resolved(None, _)) = &recv.kind;\n-        let ty = cx.typeck_results().expr_ty(recv);\n-        if match_type(cx, ty, &paths::FILE);\n-        then {\n-            return true\n-        }\n-    }\n-    false\n-}\n-\n-fn is_file_read_to_string<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> bool {\n-    if_chain! {\n-        if let ExprKind::MethodCall(method_name, exprs, _) = expr.kind;\n-        if method_name.ident.as_str() == \"read_to_string\";\n-        if let ExprKind::Path(QPath::Resolved(None, _)) = &exprs[0].kind;\n-        let ty = cx.typeck_results().expr_ty(&exprs[0]);\n-        if match_type(cx, ty, &paths::FILE);\n-        then {\n-            return true\n-        }\n-    }\n-    false\n-}"}]}