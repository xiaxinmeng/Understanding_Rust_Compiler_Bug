{"sha": "2238d1951556af3f54cd102b79fe017143f96ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMzhkMTk1MTU1NmFmM2Y1NGNkMTAyYjc5ZmUwMTcxNDNmOTZjY2Q=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-05T10:11:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-05T10:11:14Z"}, "message": "Rollup merge of #64063 - JohnTitor:fix-const-err, r=oli-obk\n\nFix const_err with `-(-0.0)`\n\nFixes #64059\n\nr? @oli-obk", "tree": {"sha": "03c80051ba5d2e795c3765ca526e64459d81f295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03c80051ba5d2e795c3765ca526e64459d81f295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2238d1951556af3f54cd102b79fe017143f96ccd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdcN9CCRBK7hj4Ov3rIwAAdHIIAGX+Y3EPbK7N7UW2inYItP7R\nZ4BXanSW5U0H5x/MjnOAYGr64QoC9260ypVgiJtSKhvSZuD14THsm9Yi/aIwvzOv\nk47Fz8XxsKl/HEiX3GwuIcceb8dtBNow3pScSFlRob+mXgokq097bKS4EH//9try\nPt1k/e/wC4o3M34DjbQ69jov4w7EH94T2tYutBMQaYpPCJ+X9TEXfiedR8RdbbT+\neR7dWZbKl04N05IiyHyI03eRWATl1IoFchUNEGa2auGXjKEFZU2/hWzh4UV4bSCI\n1a6VJuK5KNyFncsoBXtjiyeBjDuOtzJc++NvSWOybdv0Mek8Ig9p8f4/hz1LJkI=\n=yyuf\n-----END PGP SIGNATURE-----\n", "payload": "tree 03c80051ba5d2e795c3765ca526e64459d81f295\nparent 043159f9185281585cf03c8ea5c3ead9a3222f3a\nparent 41deb835498391623388555b8d44fa358c804be7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567678274 +0200\ncommitter GitHub <noreply@github.com> 1567678274 +0200\n\nRollup merge of #64063 - JohnTitor:fix-const-err, r=oli-obk\n\nFix const_err with `-(-0.0)`\n\nFixes #64059\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2238d1951556af3f54cd102b79fe017143f96ccd", "html_url": "https://github.com/rust-lang/rust/commit/2238d1951556af3f54cd102b79fe017143f96ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2238d1951556af3f54cd102b79fe017143f96ccd/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043159f9185281585cf03c8ea5c3ead9a3222f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/043159f9185281585cf03c8ea5c3ead9a3222f3a", "html_url": "https://github.com/rust-lang/rust/commit/043159f9185281585cf03c8ea5c3ead9a3222f3a"}, {"sha": "41deb835498391623388555b8d44fa358c804be7", "url": "https://api.github.com/repos/rust-lang/rust/commits/41deb835498391623388555b8d44fa358c804be7", "html_url": "https://github.com/rust-lang/rust/commit/41deb835498391623388555b8d44fa358c804be7"}], "stats": {"total": 530, "additions": 477, "deletions": 53}, "files": [{"sha": "e4b186736e2a199e822868d3519abab101e553bc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -405,13 +405,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n \n                 let arg = self.eval_operand(arg, source_info)?;\n+                let oflo_check = self.tcx.sess.overflow_checks();\n                 let val = self.use_ecx(source_info, |this| {\n                     let prim = this.ecx.read_immediate(arg)?;\n                     match op {\n                         UnOp::Neg => {\n-                            // Need to do overflow check here: For actual CTFE, MIR\n-                            // generation emits code that does this before calling the op.\n-                            if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n+                            // We check overflow in debug mode already\n+                            // so should only check in release mode.\n+                            if !oflo_check\n+                            && prim.layout.ty.is_signed()\n+                            && prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n                                 throw_panic!(OverflowNeg)\n                             }\n                         }\n@@ -485,7 +488,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         Scalar::from_bool(overflow).into(),\n                     )\n                 } else {\n-                    if overflow {\n+                    // We check overflow in debug mode already\n+                    // so should only check in release mode.\n+                    if !self.tcx.sess.overflow_checks() && overflow {\n                         let err = err_panic!(Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "ecbcc2a4b496f882e1414066a7e75dff2884adab", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -5,6 +5,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n+\n #![deny(const_err)]\n \n fn black_box<T>(_: T) {\n@@ -21,7 +22,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR index out of bounds\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "1d84d44dc27b3c834400ad29840aae4a0e9d54d3", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -1,35 +1,35 @@\n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:15:13\n+  --> $DIR/const-err2.rs:16:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n note: lint level defined here\n-  --> $DIR/const-err2.rs:8:9\n+  --> $DIR/const-err2.rs:9:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:17:13\n+  --> $DIR/const-err2.rs:18:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:19:13\n+  --> $DIR/const-err2.rs:20:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:21:13\n+  --> $DIR/const-err2.rs:22:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:23:14\n+  --> $DIR/const-err2.rs:24:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^"}, {"sha": "a9cf04cda7a5aed0be90fdfdd085e39b30b7d1f6", "filename": "src/test/ui/consts/const-err3.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,30 @@\n+// needed because negating int::MIN will behave differently between\n+// optimized compilation and unoptimized compilation and thus would\n+// lead to different lints being emitted\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![feature(rustc_attrs)]\n+#![allow(exceeding_bitshifts)]\n+\n+#![deny(const_err)]\n+\n+fn black_box<T>(_: T) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let a = -std::i8::MIN;\n+    //~^ ERROR const_err\n+    let b = 200u8 + 200u8 + 200u8;\n+    //~^ ERROR const_err\n+    let c = 200u8 * 4;\n+    //~^ ERROR const_err\n+    let d = 42u8 - (42u8 + 1);\n+    //~^ ERROR const_err\n+    let _e = [5u8][1];\n+    //~^ ERROR const_err\n+    black_box(a);\n+    black_box(b);\n+    black_box(c);\n+    black_box(d);\n+}"}, {"sha": "0602707be70408458efe8ba4b1f7f4882e7cab05", "filename": "src/test/ui/consts/const-err3.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,38 @@\n+error: attempt to negate with overflow\n+  --> $DIR/const-err3.rs:16:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/const-err3.rs:9:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to add with overflow\n+  --> $DIR/const-err3.rs:18:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^\n+\n+error: attempt to multiply with overflow\n+  --> $DIR/const-err3.rs:20:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/const-err3.rs:22:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err3.rs:24:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "45941398f4b66bfd9c7f5b489ccec99140faa946", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~^ ERROR const_err\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]"}, {"sha": "7adb394144bdd93bc5eea640da8fdd8c3d0a3178", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+fn main() {\n+    println!(\"{}\", 0u32 - 1);\n+    //~^ ERROR attempt to subtract with overflow\n+    let _x = 0u32 - 1;\n+    //~^ ERROR attempt to subtract with overflow\n+    println!(\"{}\", 1/(1-1));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(1-1);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+    println!(\"{}\", 1/(false as u32));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(false as u32);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+}"}, {"sha": "2819e6e8fdbe0dd7b351e2e4761473c54ac95f44", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,68 @@\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:6:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/promoted_errors2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:8:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "38911c3dcf69298c4dc2c21a2018865d4a0a3e6d", "filename": "src/test/ui/consts/issue-64059-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -C overflow-checks=on -O\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "c4c895fef66cff0695daeeceb28dcd49f6ef2cb3", "filename": "src/test/ui/consts/issue-64059.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,5 @@\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "4637814b277a4fa253d5b1fd92298d488de731c6", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -O\n+\n #![deny(const_err)]\n \n use std::{isize, i8, i16, i32, i64};"}, {"sha": "7e5a22e651ee53b1991674ca656f70d5c6cf20b9", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -1,245 +1,245 @@\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-8460-const.rs:1:9\n+  --> $DIR/issue-8460-const.rs:3:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero"}, {"sha": "c3f53e3298b2b40eb4c68c2d2d2499a20aad6459", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,59 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+use std::{isize, i8, i16, i32, i64};\n+use std::thread;\n+\n+fn main() {\n+    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+}"}, {"sha": "b688ec136779487dbca7b86cd1bddbcde4c21e60", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2238d1951556af3f54cd102b79fe017143f96ccd/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=2238d1951556af3f54cd102b79fe017143f96ccd", "patch": "@@ -0,0 +1,188 @@\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:9:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-8460-const2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:11:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:13:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:15:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:17:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 30 previous errors\n+"}]}