{"sha": "ce994b633d9143dd00140c64fe53194a2927dff1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlOTk0YjYzM2Q5MTQzZGQwMDE0MGM2NGZlNTMxOTRhMjkyN2RmZjE=", "commit": {"author": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-14T15:31:59Z"}, "committer": {"name": "Duddino", "email": "rezziandrea106@gmail.com", "date": "2020-04-14T18:50:26Z"}, "message": "Provide better compiler output when using `?` on `Option` in fn returning `Result` and vice-versa", "tree": {"sha": "358d89c83c98026e65ead09a9411c76b1d2ebc2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/358d89c83c98026e65ead09a9411c76b1d2ebc2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce994b633d9143dd00140c64fe53194a2927dff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce994b633d9143dd00140c64fe53194a2927dff1", "html_url": "https://github.com/rust-lang/rust/commit/ce994b633d9143dd00140c64fe53194a2927dff1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce994b633d9143dd00140c64fe53194a2927dff1/comments", "author": null, "committer": null, "parents": [{"sha": "6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb", "html_url": "https://github.com/rust-lang/rust/commit/6805906fba0bca2bc77da9ad09cc9f91c3cea3eb"}], "stats": {"total": 69, "additions": 68, "deletions": 1}, "files": [{"sha": "a77ea33bcde091a5c326fc359988dd37ce42d1b1", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ce994b633d9143dd00140c64fe53194a2927dff1", "patch": "@@ -292,7 +292,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n-                                     conversion on the error value using the `From` trait\"\n+                                        conversion on the error value using the `From` trait\"\n                                         .to_owned(),\n                                 ),\n                             )\n@@ -312,6 +312,27 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             ))\n                         );\n \n+                        let should_convert_option_to_result =\n+                            format!(\"{}\", trait_ref.print_only_trait_path())\n+                                .starts_with(\"std::convert::From<std::option::NoneError\");\n+                        let should_convert_result_to_option = format!(\"{}\", trait_ref)\n+                            .starts_with(\"<std::option::NoneError as std::convert::From<\");\n+                        if is_try && is_from && should_convert_option_to_result {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                \"consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\",\n+                                \".ok_or_else(|_| /* error value */)\".to_string(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        } else if is_try && is_from && should_convert_result_to_option {\n+                            err.span_suggestion_verbose(\n+                                span.shrink_to_lo(),\n+                                \"consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\",\n+                                \".ok()\".to_string(),\n+                                Applicability::HasPlaceholders,\n+                            );\n+                        }\n+\n                         let explanation =\n                             if obligation.cause.code == ObligationCauseCode::MainFunctionType {\n                                 \"consider using `()`, or a `Result`\".to_owned()"}, {"sha": "00e8b5244c54a418883fbc1b2818bd35d9b556f0", "filename": "src/test/ui/option-to-result.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Foption-to-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Foption-to-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.rs?ref=ce994b633d9143dd00140c64fe53194a2927dff1", "patch": "@@ -0,0 +1,13 @@\n+fn main(){ }\n+\n+fn test_result() -> Result<(),()> {\n+    let a:Option<()> = Some(());\n+    a?;//~ ERROR `?` couldn't convert the error\n+    Ok(())\n+}\n+\n+fn test_option() -> Option<i32>{\n+    let a:Result<i32, i32> = Ok(5);\n+    a?;//~ ERROR `?` couldn't convert the error\n+    Some(5)\n+}"}, {"sha": "3c51bcece570b4eb51fdd779ee03b913be804ced", "filename": "src/test/ui/option-to-result.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Foption-to-result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Foption-to-result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foption-to-result.stderr?ref=ce994b633d9143dd00140c64fe53194a2927dff1", "patch": "@@ -0,0 +1,29 @@\n+error[E0277]: `?` couldn't convert the error to `()`\n+  --> $DIR/option-to-result.rs:5:6\n+   |\n+LL |     a?;\n+   |      ^ the trait `std::convert::From<std::option::NoneError>` is not implemented for `()`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = note: required by `std::convert::From::from`\n+help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n+   |\n+LL |     a.ok_or_else(|_| /* error value */)?;\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0277]: `?` couldn't convert the error to `std::option::NoneError`\n+  --> $DIR/option-to-result.rs:11:6\n+   |\n+LL |     a?;\n+   |      ^ the trait `std::convert::From<i32>` is not implemented for `std::option::NoneError`\n+   |\n+   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n+   = note: required by `std::convert::From::from`\n+help: consider converting the `Result<T, _>` into an `Option<T>` using `Result::ok`\n+   |\n+LL |     a.ok()?;\n+   |      ^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "d1c0276a67ad2a69c54eb849fb3305a5b5133dab", "filename": "src/test/ui/try-on-option.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Ftry-on-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce994b633d9143dd00140c64fe53194a2927dff1/src%2Ftest%2Fui%2Ftry-on-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-on-option.stderr?ref=ce994b633d9143dd00140c64fe53194a2927dff1", "patch": "@@ -6,6 +6,10 @@ LL |     x?;\n    |\n    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait\n    = note: required by `std::convert::From::from`\n+help: consider converting the `Option<T>` into a `Result<T, _>` using `Option::ok_or` or `Option::ok_or_else`\n+   |\n+LL |     x.ok_or_else(|_| /* error value */)?;\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `std::ops::Try`)\n   --> $DIR/try-on-option.rs:13:5"}]}