{"sha": "c67db1b952d476ec11decb9fbb5f69bd697cd0f8", "node_id": "C_kwDOAAsO6NoAKGM2N2RiMWI5NTJkNDc2ZWMxMWRlY2I5ZmJiNWY2OWJkNjk3Y2QwZjg", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-15T16:05:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-15T16:05:15Z"}, "message": "Merge #10543\n\n10543: Narrow add_missing_match_arms assist range r=Veykril a=antonfirsov\n\nContributes to #10220 with logic borrowed from #10267.\r\n\r\nNote: if anyone has recommendations for further analyzers to check, I'm happy to (hard to do it on my own, I'm completely new to the language).\n\nCo-authored-by: Anton Firszov <antonfir@gmail.com>", "tree": {"sha": "7b4dfd800b52a5334479d45ae78ca104af178973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b4dfd800b52a5334479d45ae78ca104af178973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67db1b952d476ec11decb9fbb5f69bd697cd0f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhaaa7CRBK7hj4Ov3rIwAAZE8IAA3+WhDDjKTha9pqq2u+Kl8o\n+T/m48USnIJfrRDw1t2vjoIIZTht+zcFVCiXp6XbL8FFkYOYqsLCZRlpax2iCsfW\nAtRog2dnpJ0YnOJMLPfcODJnpYX2tGuy4ldkqti0lf5NxUK6O/FLFiBTKQ9Xocol\nRVNvR566TvJCPO0SJY519TagqAMGZFtVWJC7pbLxMgwzJFtmw7OPRWr9X+5A5880\nsCiJ6uqLZkBDxRf2VmzyGoZ7tcA9FWPeBK0JbvWBISZugQTQxxgSfNsyZI+lJZ4X\nqhCPdXA+i1WyzTf5X/FphFmVNleqJoopWcuPUBRl//DVWJY275NSdN0nSOsUg+E=\n=bW7E\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b4dfd800b52a5334479d45ae78ca104af178973\nparent 0ff5e0ac5a0a003d14145fda4937a823960cb28b\nparent 3d9ce6b6cee657f9625c24cde78dc17a413d3559\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1634313915 +0000\ncommitter GitHub <noreply@github.com> 1634313915 +0000\n\nMerge #10543\n\n10543: Narrow add_missing_match_arms assist range r=Veykril a=antonfirsov\n\nContributes to #10220 with logic borrowed from #10267.\r\n\r\nNote: if anyone has recommendations for further analyzers to check, I'm happy to (hard to do it on my own, I'm completely new to the language).\n\nCo-authored-by: Anton Firszov <antonfir@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67db1b952d476ec11decb9fbb5f69bd697cd0f8", "html_url": "https://github.com/rust-lang/rust/commit/c67db1b952d476ec11decb9fbb5f69bd697cd0f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67db1b952d476ec11decb9fbb5f69bd697cd0f8/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ff5e0ac5a0a003d14145fda4937a823960cb28b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ff5e0ac5a0a003d14145fda4937a823960cb28b", "html_url": "https://github.com/rust-lang/rust/commit/0ff5e0ac5a0a003d14145fda4937a823960cb28b"}, {"sha": "3d9ce6b6cee657f9625c24cde78dc17a413d3559", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9ce6b6cee657f9625c24cde78dc17a413d3559", "html_url": "https://github.com/rust-lang/rust/commit/3d9ce6b6cee657f9625c24cde78dc17a413d3559"}], "stats": {"total": 126, "additions": 118, "deletions": 8}, "files": [{"sha": "4573a6098931da06475167a886b0d18047aa42f1", "filename": "crates/ide_assists/src/handlers/add_missing_match_arms.rs", "status": "modified", "additions": 118, "deletions": 8, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/c67db1b952d476ec11decb9fbb5f69bd697cd0f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67db1b952d476ec11decb9fbb5f69bd697cd0f8/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_missing_match_arms.rs?ref=c67db1b952d476ec11decb9fbb5f69bd697cd0f8", "patch": "@@ -5,7 +5,8 @@ use hir::{Adt, HasSource, ModuleDef, Semantics};\n use ide_db::helpers::{mod_path_to_ast, FamousDefs};\n use ide_db::RootDatabase;\n use itertools::Itertools;\n-use syntax::ast::{self, make, AstNode, HasName, MatchArm, Pat};\n+use syntax::ast::{self, make, AstNode, HasName, MatchArm, MatchArmList, MatchExpr, Pat};\n+use syntax::TextRange;\n \n use crate::{\n     utils::{self, render_snippet, Cursor},\n@@ -39,6 +40,22 @@ use crate::{\n pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let match_expr = ctx.find_node_at_offset_with_descend::<ast::MatchExpr>()?;\n     let match_arm_list = match_expr.match_arm_list()?;\n+    let target_range: TextRange;\n+\n+    if let None = cursor_at_trivial_match_arm_list(&ctx, &match_expr, &match_arm_list) {\n+        target_range = TextRange::new(\n+            ctx.sema.original_range(match_expr.syntax()).range.start(),\n+            ctx.sema.original_range(match_arm_list.syntax()).range.start(),\n+        );\n+\n+        let cursor_in_range = target_range.contains_range(ctx.selection_trimmed());\n+        if !cursor_in_range {\n+            cov_mark::hit!(not_applicable_outside_of_range_right);\n+            return None;\n+        }\n+    } else {\n+        target_range = ctx.sema.original_range(match_expr.syntax()).range;\n+    }\n \n     let expr = match_expr.expr()?;\n \n@@ -121,11 +138,10 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n         return None;\n     }\n \n-    let target = ctx.sema.original_range(match_expr.syntax()).range;\n     acc.add(\n         AssistId(\"add_missing_match_arms\", AssistKind::QuickFix),\n         \"Fill match arms\",\n-        target,\n+        target_range,\n         |builder| {\n             let new_match_arm_list = match_arm_list.clone_for_update();\n             let missing_arms = missing_pats\n@@ -177,6 +193,29 @@ pub(crate) fn add_missing_match_arms(acc: &mut Assists, ctx: &AssistContext) ->\n     )\n }\n \n+fn cursor_at_trivial_match_arm_list(\n+    ctx: &AssistContext,\n+    match_expr: &MatchExpr,\n+    match_arm_list: &MatchArmList,\n+) -> Option<()> {\n+    // match x { $0 }\n+    if match_arm_list.arms().next() == None {\n+        cov_mark::hit!(add_missing_match_arms_empty_body);\n+        return Some(());\n+    }\n+\n+    // match { _$0 => {...} }\n+    let wild_pat = ctx.find_node_at_offset_with_descend::<ast::WildcardPat>()?;\n+    let arm = wild_pat.syntax().parent().and_then(ast::MatchArm::cast)?;\n+    let arm_match_expr = arm.syntax().ancestors().nth(2).and_then(ast::MatchExpr::cast)?;\n+    if arm_match_expr == *match_expr {\n+        cov_mark::hit!(add_missing_match_arms_trivial_arm);\n+        return Some(());\n+    }\n+\n+    None\n+}\n+\n fn is_variant_missing(existing_pats: &[Pat], var: &Pat) -> bool {\n     !existing_pats.iter().any(|pat| does_pat_match_variant(pat, var))\n }\n@@ -306,6 +345,39 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn not_applicable_outside_of_range_left() {\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+            r#\"\n+enum A { X, Y }\n+\n+fn foo(a: A) {\n+    $0 match a {\n+        A::X => { }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn not_applicable_outside_of_range_right() {\n+        cov_mark::check!(not_applicable_outside_of_range_right);\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+            r#\"\n+enum A { X, Y }\n+\n+fn foo(a: A) {\n+    match a {$0\n+        A::X => { }\n+    }\n+}\n+        \"#,\n+        );\n+    }\n+\n     #[test]\n     fn all_boolean_match_arms_provided() {\n         check_assist_not_applicable(\n@@ -583,14 +655,15 @@ fn main() {\n \n     #[test]\n     fn add_missing_match_arms_empty_body() {\n+        cov_mark::check!(add_missing_match_arms_empty_body);\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n enum A { As, Bs, Cs(String), Ds(String, String), Es { x: usize, y: usize } }\n \n fn main() {\n     let a = A::As;\n-    match a$0 {}\n+    match a {$0}\n }\n \"#,\n             r#\"\n@@ -853,7 +926,7 @@ fn foo(a: &mut A) {\n     }\n \n     #[test]\n-    fn add_missing_match_arms_target() {\n+    fn add_missing_match_arms_target_simple() {\n         check_assist_target(\n             add_missing_match_arms,\n             r#\"\n@@ -867,8 +940,26 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn add_missing_match_arms_target_complex() {\n+        check_assist_target(\n+            add_missing_match_arms,\n+            r#\"\n+enum E { X, Y }\n+\n+fn main() {\n+    match E::X$0 {\n+        E::X => {}\n+    }\n+}\n+\"#,\n+            \"match E::X \",\n+        );\n+    }\n+\n     #[test]\n     fn add_missing_match_arms_trivial_arm() {\n+        cov_mark::check!(add_missing_match_arms_trivial_arm);\n         check_assist(\n             add_missing_match_arms,\n             r#\"\n@@ -893,6 +984,25 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn wildcard_inside_expression_not_applicable() {\n+        check_assist_not_applicable(\n+            add_missing_match_arms,\n+            r#\"\n+enum E { X, Y }\n+\n+fn foo(e : E) {\n+    match e {\n+        _ => {\n+            println!(\"1\");$0\n+            println!(\"2\");\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn add_missing_match_arms_qualifies_path() {\n         check_assist(\n@@ -928,8 +1038,8 @@ fn main() {\n             r#\"\n enum A { One, Two }\n fn foo(a: A) {\n-    match a {\n-        // foo bar baz$0\n+    match a $0 {\n+        // foo bar baz\n         A::One => {}\n         // This is where the rest should be\n     }\n@@ -938,7 +1048,7 @@ fn foo(a: A) {\n             r#\"\n enum A { One, Two }\n fn foo(a: A) {\n-    match a {\n+    match a  {\n         // foo bar baz\n         A::One => {}\n         $0A::Two => todo!(),"}]}