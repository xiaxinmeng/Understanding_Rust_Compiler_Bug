{"sha": "2d3c22ae590a6ceadd612fbf775f258ca64baa90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkM2MyMmFlNTkwYTZjZWFkZDYxMmZiZjc3NWYyNThjYTY0YmFhOTA=", "commit": {"author": {"name": "ILyoan", "email": "ilyoan@gmail.com", "date": "2012-12-20T09:26:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-01-08T22:35:28Z"}, "message": "arrange core::os::consts", "tree": {"sha": "1c8dd845b01d38b5eb2a37ee8109fcbc7b93a951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8dd845b01d38b5eb2a37ee8109fcbc7b93a951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d3c22ae590a6ceadd612fbf775f258ca64baa90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d3c22ae590a6ceadd612fbf775f258ca64baa90", "html_url": "https://github.com/rust-lang/rust/commit/2d3c22ae590a6ceadd612fbf775f258ca64baa90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d3c22ae590a6ceadd612fbf775f258ca64baa90/comments", "author": {"login": "ILyoan", "id": 2672194, "node_id": "MDQ6VXNlcjI2NzIxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2672194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ILyoan", "html_url": "https://github.com/ILyoan", "followers_url": "https://api.github.com/users/ILyoan/followers", "following_url": "https://api.github.com/users/ILyoan/following{/other_user}", "gists_url": "https://api.github.com/users/ILyoan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ILyoan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ILyoan/subscriptions", "organizations_url": "https://api.github.com/users/ILyoan/orgs", "repos_url": "https://api.github.com/users/ILyoan/repos", "events_url": "https://api.github.com/users/ILyoan/events{/privacy}", "received_events_url": "https://api.github.com/users/ILyoan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5", "html_url": "https://github.com/rust-lang/rust/commit/9f7dc1cb33599ea3c6b7e554e36888e8b20441b5"}], "stats": {"total": 160, "additions": 105, "deletions": 55}, "files": [{"sha": "730e863d04d4e9ec5a7e8d30fee39934a9ff079f", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -82,7 +82,7 @@ fn is_test_ignored(config: config, testfile: &Path) -> bool {\n     return found;\n \n     fn xfail_target() -> ~str {\n-        ~\"xfail-\" + os::sysname()\n+        ~\"xfail-\" + str::from_slice(os::SYSNAME)\n     }\n }\n "}, {"sha": "a7dbfb9a3b2799b50d29e8e53f3bc0ee0d316047", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -501,7 +501,8 @@ fn make_lib_name(config: config, auxfile: &Path, testfile: &Path) -> Path {\n }\n \n fn make_exe_name(config: config, testfile: &Path) -> Path {\n-    Path(output_base_name(config, testfile).to_str() + os::exe_suffix())\n+    Path(output_base_name(config, testfile).to_str() +\n+            str::from_slice(os::EXE_SUFFIX))\n }\n \n fn make_run_args(config: config, _props: test_props, testfile: &Path) ->"}, {"sha": "8d81f75e0da79e3e35992a629b079ed3965079b4", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -805,7 +805,7 @@ fn install_one_crate(c: &Cargo, path: &Path, cf: &Path) {\n       Some(bp) => bp\n     };\n     let newv = os::list_dir_path(&buildpath);\n-    let exec_suffix = os::exe_suffix();\n+    let exec_suffix = str::from_slice(os::EXE_SUFFIX);\n     for newv.each |ct| {\n         if (exec_suffix != ~\"\" && str::ends_with(ct.to_str(),\n                                                  exec_suffix)) ||"}, {"sha": "b42d6d363e35874143fcb4c4466a8f7defe57fbb", "filename": "src/libcore/os.rs", "status": "modified", "additions": 71, "deletions": 41, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -382,13 +382,8 @@ fn dup2(src: c_int, dst: c_int) -> c_int {\n \n \n pub fn dll_filename(base: &str) -> ~str {\n-    return pre() + str::from_slice(base) + dll_suffix();\n-\n-    #[cfg(unix)]\n-    fn pre() -> ~str { ~\"lib\" }\n-\n-    #[cfg(windows)]\n-    fn pre() -> ~str { ~\"\" }\n+    return str::from_slice(DLL_PREFIX) + str::from_slice(base) +\n+           str::from_slice(DLL_SUFFIX)\n }\n \n \n@@ -878,48 +873,83 @@ extern {\n     pub fn _NSGetArgv() -> ***c_char;\n }\n \n-#[cfg(unix)]\n-pub fn family() -> ~str { ~\"unix\" }\n+mod consts {\n \n-#[cfg(windows)]\n-pub fn family() -> ~str { ~\"windows\" }\n+    #[cfg(unix)]\n+    use os::consts::unix::*;\n \n-#[cfg(target_os = \"macos\")]\n-mod consts {\n-    pub fn sysname() -> ~str { ~\"macos\" }\n-    pub fn exe_suffix() -> ~str { ~\"\" }\n-    pub fn dll_suffix() -> ~str { ~\".dylib\" }\n-}\n+    #[cfg(windows)]\n+    use os::consts::windows::*;\n \n-#[cfg(target_os = \"freebsd\")]\n-mod consts {\n-    pub fn sysname() -> ~str { ~\"freebsd\" }\n-    pub fn exe_suffix() -> ~str { ~\"\" }\n-    pub fn dll_suffix() -> ~str { ~\".so\" }\n-}\n+    pub mod unix {\n+        pub const FAMILY: &str = \"unix\";\n+    }\n \n-#[cfg(target_os = \"linux\")]\n-mod consts {\n-    pub fn sysname() -> ~str { ~\"linux\" }\n-    pub fn exe_suffix() -> ~str { ~\"\" }\n-    pub fn dll_suffix() -> ~str { ~\".so\" }\n-}\n+    pub mod windows {\n+        pub const FAMILY: &str = \"windows\";\n+    }\n \n-#[cfg(target_os = \"win32\")]\n-mod consts {\n-    pub fn sysname() -> ~str { ~\"win32\" }\n-    pub fn exe_suffix() -> ~str { ~\".exe\" }\n-    pub fn dll_suffix() -> ~str { ~\".dll\" }\n-}\n \n-#[cfg(target_arch = \"x86\")]\n-pub fn arch() -> ~str { ~\"x86\" }\n+    #[cfg(target_os = \"macos\")]\n+    use os::consts::macos::*;\n+\n+    #[cfg(target_os = \"freebsd\")]\n+    use os::consts::freebsd::*;\n+\n+    #[cfg(target_os = \"linux\")]\n+    use os::consts::linux::*;\n+\n+    #[cfg(target_os = \"win32\")]\n+    use os::consts::win32::*;\n \n-#[cfg(target_arch = \"x86_64\")]\n-pub fn arch() -> ~str { ~\"x86_64\" }\n+    pub mod macos {\n+        pub const SYSNAME: &str = \"macos\";\n+        pub const DLL_PREFIX: &str = \"lib\";\n+        pub const DLL_SUFFIX: &str = \".dylib\";\n+        pub const EXE_SUFFIX: &str = \"\";\n+    }\n+\n+    pub mod freebsd {\n+        pub const SYSNAME: &str = \"freebsd\";\n+        pub const DLL_PREFIX: &str = \"lib\";\n+        pub const DLL_SUFFIX: &str = \".so\";\n+        pub const EXE_SUFFIX: &str = \"\";\n+    }\n+\n+    pub mod linux {\n+        pub const SYSNAME: &str = \"linux\";\n+        pub const DLL_PREFIX: &str = \"lib\";\n+        pub const DLL_SUFFIX: &str = \".so\";\n+        pub const EXE_SUFFIX: &str = \"\";\n+    }\n \n-#[cfg(target_arch = \"arm\")]\n-pub fn arch() -> str { ~\"arm\" }\n+    pub mod win32 {\n+        pub const SYSNAME: &str = \"win32\";\n+        pub const DLL_PREFIX: &str = \"\";\n+        pub const DLL_SUFFIX: &str = \".dll\";\n+        pub const EXE_SUFFIX: &str = \".exe\";\n+    }\n+\n+\n+    #[cfg(target_arch = \"x86\")]\n+    use os::consts::x86::*;\n+\n+    #[cfg(target_arch = \"x86_64\")]\n+    use os::consts::x86_64::*;\n+\n+    #[cfg(target_arch = \"arm\")]\n+    use os::consts::arm::*;\n+\n+    pub mod x86 {\n+        pub const ARCH: &str = \"x86\";\n+    }\n+    pub mod x86_64 {\n+        pub const ARCH: &str = \"x86_64\";\n+    }\n+    pub mod arm {\n+        pub const ARCH: &str = \"arm\";\n+    }\n+}\n \n #[cfg(test)]\n #[allow(non_implicitly_copyable_typarams)]"}, {"sha": "59d9886455aa894b314fc88bdb0d6614d358bdf2", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -41,6 +41,8 @@ use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n \n+use core::os::consts::{macos, freebsd, linux, win32};\n+\n enum output_type {\n     output_type_none,\n     output_type_bitcode,\n@@ -676,6 +678,19 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, +flav: ~str) -> ~str {\n     return fmt!(\"%s_%u\", flav, (ccx.names)(flav).repr);\n }\n \n+\n+fn output_dll_filename(os: session::os, lm: &link_meta) -> ~str {\n+    let libname = fmt!(\"%s-%s-%s\", lm.name, lm.extras_hash, lm.vers);\n+    let (dll_prefix, dll_suffix) = match os {\n+        session::os_win32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n+        session::os_macos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n+        session::os_linux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+        session::os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+    };\n+    return str::from_slice(dll_prefix) + libname +\n+           str::from_slice(dll_suffix);\n+}\n+\n // If the user wants an exe generated we need to invoke\n // cc to link the object file with some libs\n fn link_binary(sess: Session,\n@@ -693,9 +708,7 @@ fn link_binary(sess: Session,\n     }\n \n     let output = if sess.building_library {\n-        let long_libname =\n-            os::dll_filename(fmt!(\"%s-%s-%s\",\n-                                  lm.name, lm.extras_hash, lm.vers));\n+        let long_libname = output_dll_filename(sess.targ_cfg.os, &lm);\n         debug!(\"link_meta.name:  %s\", lm.name);\n         debug!(\"long_libname: %s\", long_libname);\n         debug!(\"out_filename: %s\", out_filename.to_str());"}, {"sha": "3212adf29ac3413e6a09c45dcadd7bc0137fd1d9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -86,9 +86,9 @@ fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n     };\n \n     return ~[ // Target bindings.\n-         attr::mk_word_item(os::family()),\n-         mk(~\"target_os\", os::sysname()),\n-         mk(~\"target_family\", os::family()),\n+         attr::mk_word_item(str::from_slice(os::FAMILY)),\n+         mk(~\"target_os\", str::from_slice(os::SYSNAME)),\n+         mk(~\"target_family\", str::from_slice(os::FAMILY)),\n          mk(~\"target_arch\", arch),\n          mk(~\"target_word_size\", wordsz),\n          mk(~\"target_libc\", libc),"}, {"sha": "fa858f9e9a33eececadd2a434f68a73274ec1d03", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d3c22ae590a6ceadd612fbf775f258ca64baa90/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=2d3c22ae590a6ceadd612fbf775f258ca64baa90", "patch": "@@ -32,6 +32,8 @@ use core::str;\n use core::uint;\n use core::vec;\n \n+use core::os::consts::{macos, freebsd, linux, win32};\n+\n export os;\n export os_macos, os_win32, os_linux, os_freebsd;\n export ctxt;\n@@ -79,11 +81,15 @@ fn find_library_crate(cx: ctxt) -> Option<{ident: ~str, data: @~[u8]}> {\n \n fn libname(cx: ctxt) -> {prefix: ~str, suffix: ~str} {\n     if cx.static { return {prefix: ~\"lib\", suffix: ~\".rlib\"}; }\n-    match cx.os {\n-      os_win32 => return {prefix: ~\"\", suffix: ~\".dll\"},\n-      os_macos => return {prefix: ~\"lib\", suffix: ~\".dylib\"},\n-      os_linux => return {prefix: ~\"lib\", suffix: ~\".so\"},\n-      os_freebsd => return {prefix: ~\"lib\", suffix: ~\".so\"}\n+    let (dll_prefix, dll_suffix) = match cx.os {\n+        os_win32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n+        os_macos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n+        os_linux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+        os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n+    };\n+    return {\n+        prefix: str::from_slice(dll_prefix),\n+        suffix: str::from_slice(dll_suffix)\n     }\n }\n "}]}