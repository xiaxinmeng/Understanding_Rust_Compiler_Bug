{"sha": "ab17068662e430a86b08d26d31638d59c748ba15", "node_id": "C_kwDOAAsO6NoAKGFiMTcwNjg2NjJlNDMwYTg2YjA4ZDI2ZDMxNjM4ZDU5Yzc0OGJhMTU", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-13T19:19:29Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-10-20T15:10:45Z"}, "message": "Consider negative polarity on trait selection", "tree": {"sha": "780774332c31cda1cbfa0bc6ddc8530912ea1387", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/780774332c31cda1cbfa0bc6ddc8530912ea1387"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab17068662e430a86b08d26d31638d59c748ba15", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmFwMXUACgkQgTGiTgx5\n76/zMA//ZAHSDwp8U4pZNBDmsd4XWaGlG2IiZvVPSllPHI5iigPKnygiYcgCxpvt\nwWCmQu7uL4gW90l5qASsJLIuOUp8H4TVwpormuSMJikZWpKQDAnPqctZZBgV5Atl\nnXEz7McajCl1CV22rYP1gJBz1qh5Lon3Usvo1H6YmzR/PUg130AAtVm0gF3nBz0a\n4fL2FoHsm6+d34nz1i5PLlS17EqEdxFcKNB0gQ4T8m7Ws/Kw6tIinAQQFqKq2UR2\n4/Mda0leDGl+CWc69g3hhlctRWoIcOMf/+hbl5IKjLKFerCSpFuy770LYusvlg+l\nNtUnvdVyW8jeH6kAikaPWmgF4scFeYJFLdXGKi3oW6H7PsDzqEC1a7utdvrioVcF\nUl+DadyxVIFNxDOltszQozDtonObsD4uRn8WyeP1g8gM8kcXAKYP+oc3b5y9n4I3\npHTcd8AWvZjo4WzfDymo8PnxOYHGta09lIOh13E8Z2rpBxIsESYaiZTDepZStyEP\n8MCH/4N10srnQ3l9arFTLB22WhQRIO2i/gY5NgdmwfzrxA2S8NSMlsnC3KnSTvkV\nDf0nW4984msRZMflj4RIeeTgjEnqn1lpoNasCHmIc2o/jNLlyCAhDWoaa7xyTrop\nQeYLbnOR5okjPVvPG9ZL7m1ELUQc56ogbdpuGNBFR5UbNukm9rY=\n=DDgc\n-----END PGP SIGNATURE-----", "payload": "tree 780774332c31cda1cbfa0bc6ddc8530912ea1387\nparent 8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2\nauthor Santiago Pastorino <spastorino@gmail.com> 1634152769 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1634742645 -0300\n\nConsider negative polarity on trait selection\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab17068662e430a86b08d26d31638d59c748ba15", "html_url": "https://github.com/rust-lang/rust/commit/ab17068662e430a86b08d26d31638d59c748ba15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab17068662e430a86b08d26d31638d59c748ba15/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2", "html_url": "https://github.com/rust-lang/rust/commit/8b0bfb0dcb6b644dabb6daedd88dc8834f3d1cb2"}], "stats": {"total": 48, "additions": 23, "deletions": 25}, "files": [{"sha": "8a768b16729887630bef319df1aeeb648307710a", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ab17068662e430a86b08d26d31638d59c748ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab17068662e430a86b08d26d31638d59c748ba15/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=ab17068662e430a86b08d26d31638d59c748ba15", "patch": "@@ -1127,34 +1127,32 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n         // Treat negative impls as unimplemented, and reservation impls as ambiguity.\n         if let ImplCandidate(def_id) = candidate {\n-            match tcx.impl_polarity(def_id) {\n-                ty::ImplPolarity::Negative if !self.allow_negative_impls => {\n-                    return Err(Unimplemented);\n-                }\n-                ty::ImplPolarity::Reservation => {\n-                    if let Some(intercrate_ambiguity_clauses) =\n-                        &mut self.intercrate_ambiguity_causes\n-                    {\n-                        let attrs = tcx.get_attrs(def_id);\n-                        let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);\n-                        let value = attr.and_then(|a| a.value_str());\n-                        if let Some(value) = value {\n-                            debug!(\n-                                \"filter_impls: \\\n+            if let ty::ImplPolarity::Reservation = tcx.impl_polarity(def_id) {\n+                if let Some(intercrate_ambiguity_clauses) = &mut self.intercrate_ambiguity_causes {\n+                    let attrs = tcx.get_attrs(def_id);\n+                    let attr = tcx.sess.find_by_name(&attrs, sym::rustc_reservation_impl);\n+                    let value = attr.and_then(|a| a.value_str());\n+                    if let Some(value) = value {\n+                        debug!(\n+                            \"filter_impls: \\\n                                  reservation impl ambiguity on {:?}\",\n-                                def_id\n-                            );\n-                            intercrate_ambiguity_clauses.push(\n-                                IntercrateAmbiguityCause::ReservationImpl {\n-                                    message: value.to_string(),\n-                                },\n-                            );\n-                        }\n+                            def_id\n+                        );\n+                        intercrate_ambiguity_clauses.push(\n+                            IntercrateAmbiguityCause::ReservationImpl {\n+                                message: value.to_string(),\n+                            },\n+                        );\n                     }\n-                    return Ok(None);\n                 }\n-                _ => {}\n-            };\n+                return Ok(None);\n+            }\n+\n+            if !self.allow_negative_impls {\n+                if obligation.predicate.skip_binder().polarity != tcx.impl_polarity(def_id) {\n+                    return Err(Unimplemented);\n+                }\n+            }\n         }\n         Ok(Some(candidate))\n     }"}]}