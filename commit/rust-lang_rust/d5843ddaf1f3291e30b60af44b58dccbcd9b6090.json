{"sha": "d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "node_id": "C_kwDOAAsO6NoAKGQ1ODQzZGRhZjFmMzI5MWUzMGI2MGFmNDRiNThkY2NiY2Q5YjYwOTA", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-04-24T15:31:32Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-05-09T14:08:40Z"}, "message": "Limit lifetime of format_args!() with inlined args.", "tree": {"sha": "36b8999c98f1cd3135d43971bbf80a4b07482722", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b8999c98f1cd3135d43971bbf80a4b07482722"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "html_url": "https://github.com/rust-lang/rust/commit/d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecd3dbab4ed82abfa05e22069261e565239449cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecd3dbab4ed82abfa05e22069261e565239449cf", "html_url": "https://github.com/rust-lang/rust/commit/ecd3dbab4ed82abfa05e22069261e565239449cf"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "afcf8b15cd80053910711345b36d6a8542f80fa5", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "patch": "@@ -446,7 +446,30 @@ fn expand_format_args<'hir>(\n         && argmap.iter().enumerate().all(|(i, (&(j, _), _))| i == j)\n         && arguments.iter().skip(1).all(|arg| !may_contain_yield_point(&arg.expr));\n \n-    let args = if use_simple_array {\n+    let args = if arguments.is_empty() {\n+        // Generate:\n+        //    &<core::fmt::Argument>::none()\n+        //\n+        // Note:\n+        //     `none()` just returns `[]`. We use `none()` rather than `[]` to limit the lifetime.\n+        //\n+        //     This makes sure that this still fails to compile, even when the argument is inlined:\n+        //\n+        //     ```\n+        //     let f = format_args!(\"{}\", \"a\");\n+        //     println!(\"{f}\"); // error E0716\n+        //     ```\n+        //\n+        //     Cases where keeping the object around is allowed, such as `format_args!(\"a\")`,\n+        //     are handled above by the `allow_const` case.\n+        let none_fn = ctx.arena.alloc(ctx.expr_lang_item_type_relative(\n+            macsp,\n+            hir::LangItem::FormatArgument,\n+            sym::none,\n+        ));\n+        let none = ctx.expr_call(macsp, none_fn, &[]);\n+        ctx.expr(macsp, hir::ExprKind::AddrOf(hir::BorrowKind::Ref, hir::Mutability::Not, none))\n+    } else if use_simple_array {\n         // Generate:\n         //     &[\n         //         <core::fmt::Argument>::new_display(&arg0),"}, {"sha": "60efcb768cb076b7e18513ddff42738ca6201bc1", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "patch": "@@ -1033,6 +1033,7 @@ symbols! {\n         non_exhaustive_omitted_patterns_lint,\n         non_lifetime_binders,\n         non_modrs_mods,\n+        none,\n         nontemporal_store,\n         noop_method_borrow,\n         noop_method_clone,"}, {"sha": "d37888c27bde3644d087812acc285722e2186835", "filename": "library/core/src/fmt/rt.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5843ddaf1f3291e30b60af44b58dccbcd9b6090/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Frt.rs?ref=d5843ddaf1f3291e30b60af44b58dccbcd9b6090", "patch": "@@ -152,6 +152,21 @@ impl<'a> Argument<'a> {\n             None\n         }\n     }\n+\n+    /// Used by `format_args` when all arguments are gone after inlining,\n+    /// when using `&[]` would incorrectly allow for a bigger lifetime.\n+    ///\n+    /// This fails without format argument inlining, and that shouldn't be different\n+    /// when the argument is inlined:\n+    ///\n+    /// ```compile_fail,E0716\n+    /// let f = format_args!(\"{}\", \"a\");\n+    /// println!(\"{f}\");\n+    /// ```\n+    #[inline(always)]\n+    pub fn none() -> [Self; 0] {\n+        []\n+    }\n }\n \n /// This struct represents the unsafety of constructing an `Arguments`."}]}