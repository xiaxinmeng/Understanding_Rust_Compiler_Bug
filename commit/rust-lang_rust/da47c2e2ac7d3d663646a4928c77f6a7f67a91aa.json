{"sha": "da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNDdjMmUyYWM3ZDNkNjYzNjQ2YTQ5MjhjNzdmNmE3ZjY3YTkxYWE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-10-29T10:19:59Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2016-11-28T02:18:10Z"}, "message": "rustc_typeck: save the type cache for rustdoc and save-analysis.", "tree": {"sha": "a7136612d09f76a6ab1deb3f64ec92bf8037b3cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7136612d09f76a6ab1deb3f64ec92bf8037b3cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "html_url": "https://github.com/rust-lang/rust/commit/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "962633cdbbe2ce87c1311edbaa0d4e0aca022b6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/962633cdbbe2ce87c1311edbaa0d4e0aca022b6d", "html_url": "https://github.com/rust-lang/rust/commit/962633cdbbe2ce87c1311edbaa0d4e0aca022b6d"}], "stats": {"total": 192, "additions": 111, "deletions": 81}, "files": [{"sha": "3719090e922d0ee6f88f77cba81e3780545a4944", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -29,8 +29,7 @@ use ty;\n use ty::subst::{Subst, Substs};\n use ty::walk::TypeWalker;\n use util::common::MemoizationMap;\n-use util::nodemap::NodeSet;\n-use util::nodemap::{FxHashMap, FxHashSet};\n+use util::nodemap::{NodeSet, NodeMap, FxHashMap, FxHashSet};\n \n use serialize::{self, Encodable, Encoder};\n use std::borrow::Cow;\n@@ -111,12 +110,13 @@ pub type Disr = ConstInt;\n /// The complete set of all analyses described in this module. This is\n /// produced by the driver and fed to trans and later passes.\n #[derive(Clone)]\n-pub struct CrateAnalysis<'a> {\n+pub struct CrateAnalysis<'tcx> {\n     pub export_map: ExportMap,\n     pub access_levels: middle::privacy::AccessLevels,\n     pub reachable: NodeSet,\n-    pub name: &'a str,\n+    pub name: String,\n     pub glob_map: Option<hir::GlobMap>,\n+    pub hir_ty_to_ty: NodeMap<Ty<'tcx>>,\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "0b148771f4fc84b6e8c7f562a3f02b4439c84e4b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 44, "deletions": 42, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -25,7 +25,7 @@ use rustc::middle::{self, dependency_format, stability, reachable};\n use rustc::middle::privacy::AccessLevels;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::time;\n-use rustc::util::nodemap::NodeSet;\n+use rustc::util::nodemap::{NodeSet, NodeMap};\n use rustc_borrowck as borrowck;\n use rustc_incremental::{self, IncrementalHashesMap};\n use rustc_resolve::{MakeGlobMap, Resolver};\n@@ -332,31 +332,31 @@ impl<'a> PhaseController<'a> {\n /// State that is passed to a callback. What state is available depends on when\n /// during compilation the callback is made. See the various constructor methods\n /// (`state_*`) in the impl to see which data is provided for any given entry point.\n-pub struct CompileState<'a, 'b, 'ast: 'a, 'tcx: 'b> where 'ast: 'tcx {\n+pub struct CompileState<'a, 'tcx: 'a> {\n     pub input: &'a Input,\n-    pub session: &'ast Session,\n+    pub session: &'tcx Session,\n     pub krate: Option<ast::Crate>,\n     pub registry: Option<Registry<'a>>,\n     pub cstore: Option<&'a CStore>,\n     pub crate_name: Option<&'a str>,\n     pub output_filenames: Option<&'a OutputFilenames>,\n     pub out_dir: Option<&'a Path>,\n     pub out_file: Option<&'a Path>,\n-    pub arenas: Option<&'ast ty::CtxtArenas<'ast>>,\n+    pub arenas: Option<&'tcx ty::CtxtArenas<'tcx>>,\n     pub expanded_crate: Option<&'a ast::Crate>,\n     pub hir_crate: Option<&'a hir::Crate>,\n-    pub ast_map: Option<&'a hir_map::Map<'ast>>,\n+    pub ast_map: Option<&'a hir_map::Map<'tcx>>,\n     pub resolutions: Option<&'a Resolutions>,\n-    pub analysis: Option<&'a ty::CrateAnalysis<'a>>,\n-    pub tcx: Option<TyCtxt<'b, 'tcx, 'tcx>>,\n+    pub analysis: Option<&'a ty::CrateAnalysis<'tcx>>,\n+    pub tcx: Option<TyCtxt<'a, 'tcx, 'tcx>>,\n     pub trans: Option<&'a trans::CrateTranslation>,\n }\n \n-impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n+impl<'a, 'tcx> CompileState<'a, 'tcx> {\n     fn empty(input: &'a Input,\n-             session: &'ast Session,\n+             session: &'tcx Session,\n              out_dir: &'a Option<PathBuf>)\n-             -> CompileState<'a, 'b, 'ast, 'tcx> {\n+             -> Self {\n         CompileState {\n             input: input,\n             session: session,\n@@ -379,12 +379,12 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_after_parse(input: &'a Input,\n-                         session: &'ast Session,\n+                         session: &'tcx Session,\n                          out_dir: &'a Option<PathBuf>,\n                          out_file: &'a Option<PathBuf>,\n                          krate: ast::Crate,\n                          cstore: &'a CStore)\n-                         -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                         -> Self {\n         CompileState {\n             // Initialize the registry before moving `krate`\n             registry: Some(Registry::new(&session, krate.span)),\n@@ -396,13 +396,13 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_after_expand(input: &'a Input,\n-                          session: &'ast Session,\n+                          session: &'tcx Session,\n                           out_dir: &'a Option<PathBuf>,\n                           out_file: &'a Option<PathBuf>,\n                           cstore: &'a CStore,\n                           expanded_crate: &'a ast::Crate,\n                           crate_name: &'a str)\n-                          -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                          -> Self {\n         CompileState {\n             crate_name: Some(crate_name),\n             cstore: Some(cstore),\n@@ -413,18 +413,18 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_after_hir_lowering(input: &'a Input,\n-                                session: &'ast Session,\n+                                session: &'tcx Session,\n                                 out_dir: &'a Option<PathBuf>,\n                                 out_file: &'a Option<PathBuf>,\n-                                arenas: &'ast ty::CtxtArenas<'ast>,\n+                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                 cstore: &'a CStore,\n-                                hir_map: &'a hir_map::Map<'ast>,\n-                                analysis: &'a ty::CrateAnalysis,\n+                                hir_map: &'a hir_map::Map<'tcx>,\n+                                analysis: &'a ty::CrateAnalysis<'static>,\n                                 resolutions: &'a Resolutions,\n                                 krate: &'a ast::Crate,\n                                 hir_crate: &'a hir::Crate,\n                                 crate_name: &'a str)\n-                                -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                                -> Self {\n         CompileState {\n             crate_name: Some(crate_name),\n             arenas: Some(arenas),\n@@ -440,15 +440,15 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_after_analysis(input: &'a Input,\n-                            session: &'ast Session,\n+                            session: &'tcx Session,\n                             out_dir: &'a Option<PathBuf>,\n                             out_file: &'a Option<PathBuf>,\n                             krate: Option<&'a ast::Crate>,\n                             hir_crate: &'a hir::Crate,\n-                            analysis: &'a ty::CrateAnalysis<'a>,\n-                            tcx: TyCtxt<'b, 'tcx, 'tcx>,\n+                            analysis: &'a ty::CrateAnalysis<'tcx>,\n+                            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             crate_name: &'a str)\n-                            -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                            -> Self {\n         CompileState {\n             analysis: Some(analysis),\n             tcx: Some(tcx),\n@@ -462,11 +462,11 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n \n \n     fn state_after_llvm(input: &'a Input,\n-                        session: &'ast Session,\n+                        session: &'tcx Session,\n                         out_dir: &'a Option<PathBuf>,\n                         out_file: &'a Option<PathBuf>,\n                         trans: &'a trans::CrateTranslation)\n-                        -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                        -> Self {\n         CompileState {\n             trans: Some(trans),\n             out_file: out_file.as_ref().map(|s| &**s),\n@@ -475,10 +475,10 @@ impl<'a, 'b, 'ast, 'tcx> CompileState<'a, 'b, 'ast, 'tcx> {\n     }\n \n     fn state_when_compilation_done(input: &'a Input,\n-                                    session: &'ast Session,\n+                                    session: &'tcx Session,\n                                     out_dir: &'a Option<PathBuf>,\n                                     out_file: &'a Option<PathBuf>)\n-                                    -> CompileState<'a, 'b, 'ast, 'tcx> {\n+                                    -> Self {\n         CompileState {\n             out_file: out_file.as_ref().map(|s| &**s),\n             ..CompileState::empty(input, session, out_dir)\n@@ -532,10 +532,10 @@ fn count_nodes(krate: &ast::Crate) -> usize {\n // For continuing compilation after a parsed crate has been\n // modified\n \n-pub struct ExpansionResult<'a> {\n+pub struct ExpansionResult {\n     pub expanded_crate: ast::Crate,\n     pub defs: hir_map::Definitions,\n-    pub analysis: ty::CrateAnalysis<'a>,\n+    pub analysis: ty::CrateAnalysis<'static>,\n     pub resolutions: Resolutions,\n     pub hir_forest: hir_map::Forest,\n }\n@@ -547,15 +547,15 @@ pub struct ExpansionResult<'a> {\n /// standard library and prelude, and name resolution.\n ///\n /// Returns `None` if we're aborting after handling -W help.\n-pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n-                                           cstore: &CStore,\n-                                           krate: ast::Crate,\n-                                           registry: Option<Registry>,\n-                                           crate_name: &'a str,\n-                                           addl_plugins: Option<Vec<String>>,\n-                                           make_glob_map: MakeGlobMap,\n-                                           after_expand: F)\n-                                           -> Result<ExpansionResult<'a>, usize>\n+pub fn phase_2_configure_and_expand<F>(sess: &Session,\n+                                       cstore: &CStore,\n+                                       krate: ast::Crate,\n+                                       registry: Option<Registry>,\n+                                       crate_name: &str,\n+                                       addl_plugins: Option<Vec<String>>,\n+                                       make_glob_map: MakeGlobMap,\n+                                       after_expand: F)\n+                                       -> Result<ExpansionResult, usize>\n     where F: FnOnce(&ast::Crate) -> CompileResult,\n {\n     let time_passes = sess.time_passes();\n@@ -789,8 +789,9 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n             export_map: resolver.export_map,\n             access_levels: AccessLevels::default(),\n             reachable: NodeSet(),\n-            name: crate_name,\n+            name: crate_name.to_string(),\n             glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n+            hir_ty_to_ty: NodeMap(),\n         },\n         resolutions: Resolutions {\n             def_map: resolver.def_map,\n@@ -807,14 +808,14 @@ pub fn phase_2_configure_and_expand<'a, F>(sess: &Session,\n /// structures carrying the results of the analysis.\n pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                                                hir_map: hir_map::Map<'tcx>,\n-                                               mut analysis: ty::CrateAnalysis,\n+                                               mut analysis: ty::CrateAnalysis<'tcx>,\n                                                resolutions: Resolutions,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                name: &str,\n                                                f: F)\n                                                -> Result<R, usize>\n     where F: for<'a> FnOnce(TyCtxt<'a, 'tcx, 'tcx>,\n-                            ty::CrateAnalysis,\n+                            ty::CrateAnalysis<'tcx>,\n                             IncrementalHashesMap,\n                             CompileResult) -> R\n {\n@@ -886,7 +887,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n              || rustc_incremental::load_dep_graph(tcx, &incremental_hashes_map));\n \n         // passes are timed inside typeck\n-        try_with_f!(typeck::check_crate(tcx), (tcx, analysis, incremental_hashes_map));\n+        analysis.hir_ty_to_ty =\n+            try_with_f!(typeck::check_crate(tcx), (tcx, analysis, incremental_hashes_map));\n \n         time(time_passes,\n              \"const checking\","}, {"sha": "4759394aff169f37693a6e1f1c44f6698cb231ea", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -200,7 +200,7 @@ impl PpSourceMode {\n     fn call_with_pp_support_hir<'tcx, A, B, F>(&self,\n                                                sess: &'tcx Session,\n                                                ast_map: &hir_map::Map<'tcx>,\n-                                               analysis: &ty::CrateAnalysis,\n+                                               analysis: &ty::CrateAnalysis<'tcx>,\n                                                resolutions: &Resolutions,\n                                                arenas: &'tcx ty::CtxtArenas<'tcx>,\n                                                id: &str,\n@@ -817,7 +817,7 @@ pub fn print_after_parsing(sess: &Session,\n \n pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                                 ast_map: &hir_map::Map<'tcx>,\n-                                                analysis: &ty::CrateAnalysis,\n+                                                analysis: &ty::CrateAnalysis<'tcx>,\n                                                 resolutions: &Resolutions,\n                                                 input: &Input,\n                                                 krate: &ast::Crate,\n@@ -934,7 +934,7 @@ pub fn print_after_hir_lowering<'tcx, 'a: 'tcx>(sess: &'a Session,\n // Instead, we call that function ourselves.\n fn print_with_analysis<'tcx, 'a: 'tcx>(sess: &'a Session,\n                                        ast_map: &hir_map::Map<'tcx>,\n-                                       analysis: &ty::CrateAnalysis,\n+                                       analysis: &ty::CrateAnalysis<'tcx>,\n                                        resolutions: &Resolutions,\n                                        crate_name: &str,\n                                        arenas: &'tcx ty::CtxtArenas<'tcx>,"}, {"sha": "c3b1649662a45086db8d8f4424eacb5ccfccaeb7", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -68,7 +68,6 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n     save_ctxt: SaveContext<'l, 'tcx>,\n     sess: &'l Session,\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n-    analysis: &'l ty::CrateAnalysis<'l>,\n     dumper: &'ll mut D,\n \n     span: SpanUtils<'l>,\n@@ -84,17 +83,14 @@ pub struct DumpVisitor<'l, 'tcx: 'l, 'll, D: 'll> {\n }\n \n impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n-    pub fn new(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n-               save_ctxt: SaveContext<'l, 'tcx>,\n-               analysis: &'l ty::CrateAnalysis<'l>,\n+    pub fn new(save_ctxt: SaveContext<'l, 'tcx>,\n                dumper: &'ll mut D)\n                -> DumpVisitor<'l, 'tcx, 'll, D> {\n-        let span_utils = SpanUtils::new(&tcx.sess);\n+        let span_utils = SpanUtils::new(&save_ctxt.tcx.sess);\n         DumpVisitor {\n-            sess: &tcx.sess,\n-            tcx: tcx,\n+            sess: &save_ctxt.tcx.sess,\n+            tcx: save_ctxt.tcx,\n             save_ctxt: save_ctxt,\n-            analysis: analysis,\n             dumper: dumper,\n             span: span_utils.clone(),\n             cur_scope: CRATE_NODE_ID,\n@@ -1207,7 +1203,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     ast::ViewPathGlob(ref path) => {\n                         // Make a comma-separated list of names of imported modules.\n                         let mut names = vec![];\n-                        let glob_map = &self.analysis.glob_map;\n+                        let glob_map = &self.save_ctxt.analysis.glob_map;\n                         let glob_map = glob_map.as_ref().unwrap();\n                         if glob_map.contains_key(&item.id) {\n                             for n in glob_map.get(&item.id).unwrap() {"}, {"sha": "389892193c330cf289134a5e409d59ca907768d5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 22, "deletions": 7, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -85,6 +85,7 @@ pub mod recorder {\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n+    analysis: &'l ty::CrateAnalysis<'tcx>,\n     span_utils: SpanUtils<'tcx>,\n }\n \n@@ -93,16 +94,20 @@ macro_rules! option_try(\n );\n \n impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'l, 'tcx, 'tcx>) -> SaveContext<'l, 'tcx> {\n+    pub fn new(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n+               analysis: &'l ty::CrateAnalysis<'tcx>)\n+               -> SaveContext<'l, 'tcx> {\n         let span_utils = SpanUtils::new(&tcx.sess);\n-        SaveContext::from_span_utils(tcx, span_utils)\n+        SaveContext::from_span_utils(tcx, analysis, span_utils)\n     }\n \n     pub fn from_span_utils(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n+                           analysis: &'l ty::CrateAnalysis<'tcx>,\n                            span_utils: SpanUtils<'tcx>)\n                            -> SaveContext<'l, 'tcx> {\n         SaveContext {\n             tcx: tcx,\n+            analysis: analysis,\n             span_utils: span_utils,\n         }\n     }\n@@ -520,8 +525,18 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                 match *qpath {\n                     hir::QPath::Resolved(_, ref path) => path.def,\n                     hir::QPath::TypeRelative(..) => {\n-                        // FIXME(eddyb) Avoid keeping associated type resolutions.\n-                        self.tcx.tables().type_relative_path_defs[&id]\n+                        if let Some(ty) = self.analysis.hir_ty_to_ty.get(&id) {\n+                            if let ty::TyProjection(proj) = ty.sty {\n+                                for item in self.tcx.associated_items(proj.trait_ref.def_id) {\n+                                    if item.kind == ty::AssociatedKind::Type {\n+                                        if item.name == proj.item_name {\n+                                            return Def::AssociatedTy(item.def_id);\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        Def::Err\n                     }\n                 }\n             }\n@@ -799,7 +814,7 @@ impl Format {\n \n pub fn process_crate<'l, 'tcx>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n                                krate: &ast::Crate,\n-                               analysis: &'l ty::CrateAnalysis<'l>,\n+                               analysis: &'l ty::CrateAnalysis<'tcx>,\n                                cratename: &str,\n                                odir: Option<&Path>,\n                                format: Format) {\n@@ -847,12 +862,12 @@ pub fn process_crate<'l, 'tcx>(tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     root_path.pop();\n     let output = &mut output_file;\n \n-    let save_ctxt = SaveContext::new(tcx);\n+    let save_ctxt = SaveContext::new(tcx, analysis);\n \n     macro_rules! dump {\n         ($new_dumper: expr) => {{\n             let mut dumper = $new_dumper;\n-            let mut visitor = DumpVisitor::new(tcx, save_ctxt, analysis, &mut dumper);\n+            let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n             visitor.dump_crate_info(cratename, krate);\n             visit::walk_crate(&mut visitor, krate);"}, {"sha": "c94c25e0b056cb2bcb78b11e360d5552fca139b8", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -1545,7 +1545,7 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.sess.opts.debug_assertions\n     };\n \n-    let link_meta = link::build_link_meta(incremental_hashes_map, name);\n+    let link_meta = link::build_link_meta(incremental_hashes_map, &name);\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              export_map,"}, {"sha": "1e26d1b80d31e5df3544d291eaf970a47d9657c8", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -43,6 +43,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_liberated_fn_sigs();\n         wbcx.visit_fru_field_types();\n         wbcx.visit_deferred_obligations(item_id);\n+        wbcx.visit_type_nodes();\n     }\n \n     pub fn resolve_type_vars_in_fn(&self,\n@@ -67,6 +68,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         wbcx.visit_fru_field_types();\n         wbcx.visit_anon_types();\n         wbcx.visit_deferred_obligations(item_id);\n+        wbcx.visit_type_nodes();\n     }\n }\n \n@@ -478,6 +480,13 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn visit_type_nodes(&self) {\n+        for (&id, ty) in self.fcx.ast_ty_to_ty_cache.borrow().iter() {\n+            let ty = self.resolve(ty, ResolvingTyNode(id));\n+            self.fcx.ccx.ast_ty_to_ty_cache.borrow_mut().insert(id, ty);\n+        }\n+    }\n+\n     fn resolve<T>(&self, x: &T, reason: ResolveReason) -> T::Lifted\n         where T: TypeFoldable<'tcx> + ty::Lift<'gcx>\n     {\n@@ -505,6 +514,7 @@ enum ResolveReason {\n     ResolvingFieldTypes(ast::NodeId),\n     ResolvingAnonTy(DefId),\n     ResolvingDeferredObligation(Span),\n+    ResolvingTyNode(ast::NodeId),\n }\n \n impl<'a, 'gcx, 'tcx> ResolveReason {\n@@ -516,10 +526,9 @@ impl<'a, 'gcx, 'tcx> ResolveReason {\n             ResolvingUpvar(upvar_id) => {\n                 tcx.expr_span(upvar_id.closure_expr_id)\n             }\n-            ResolvingFnSig(id) => {\n-                tcx.map.span(id)\n-            }\n-            ResolvingFieldTypes(id) => {\n+            ResolvingFnSig(id) |\n+            ResolvingFieldTypes(id) |\n+            ResolvingTyNode(id) => {\n                 tcx.map.span(id)\n             }\n             ResolvingClosure(did) |\n@@ -601,7 +610,8 @@ impl<'cx, 'gcx, 'tcx> Resolver<'cx, 'gcx, 'tcx> {\n \n                 ResolvingFnSig(_) |\n                 ResolvingFieldTypes(_) |\n-                ResolvingDeferredObligation(_) => {\n+                ResolvingDeferredObligation(_) |\n+                ResolvingTyNode(_) => {\n                     // any failures here should also fail when\n                     // resolving the patterns, closure types, or\n                     // something else."}, {"sha": "049add6f0620cd40b070b5b9a65e526df181901e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -111,7 +111,7 @@ use rustc::infer::InferOk;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc::traits::{self, ObligationCause, ObligationCauseCode, Reveal};\n-use session::{config, CompileResult};\n+use session::config;\n use util::common::time;\n \n use syntax::ast;\n@@ -314,7 +314,7 @@ fn check_for_entry_fn(ccx: &CrateCtxt) {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                             -> CompileResult {\n+                             -> Result<NodeMap<Ty<'tcx>>, usize> {\n     let time_passes = tcx.sess.time_passes();\n     let ccx = CrateCtxt {\n         ast_ty_to_ty_cache: RefCell::new(NodeMap()),\n@@ -358,7 +358,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>)\n \n     let err_count = tcx.sess.err_count();\n     if err_count == 0 {\n-        Ok(())\n+        Ok(ccx.ast_ty_to_ty_cache.into_inner())\n     } else {\n         Err(err_count)\n     }"}, {"sha": "e233613ee629e8844652371a4fd86ec96ec82f99", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -1782,13 +1782,16 @@ impl Clean<Type> for hir::Ty {\n                 }\n             }\n             TyPath(hir::QPath::TypeRelative(ref qself, ref segment)) => {\n+                let mut def = Def::Err;\n+                if let Some(ty) = cx.hir_ty_to_ty.get(&self.id) {\n+                    if let ty::TyProjection(proj) = ty.sty {\n+                        def = Def::Trait(proj.trait_ref.def_id);\n+                    }\n+                }\n                 let trait_path = hir::Path {\n                     span: self.span,\n                     global: false,\n-                    def: cx.tcx_opt().map_or(Def::Err, |tcx| {\n-                        let def_id = tcx.tables().type_relative_path_defs[&self.id].def_id();\n-                        Def::Trait(tcx.associated_item(def_id).container.id())\n-                    }),\n+                    def: def,\n                     segments: vec![].into(),\n                 };\n                 Type::QPath {"}, {"sha": "4c2487e2b42a0b855f565caf4c87562955dcc250", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da47c2e2ac7d3d663646a4928c77f6a7f67a91aa/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=da47c2e2ac7d3d663646a4928c77f6a7f67a91aa", "patch": "@@ -15,10 +15,10 @@ use rustc::session::{self, config};\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::{Def, ExportMap};\n use rustc::middle::privacy::AccessLevels;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty::{self, TyCtxt, Ty};\n use rustc::hir::map as hir_map;\n use rustc::lint;\n-use rustc::util::nodemap::FxHashMap;\n+use rustc::util::nodemap::{FxHashMap, NodeMap};\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n use rustc_metadata::cstore::CStore;\n@@ -65,6 +65,9 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<ast::NodeId, clean::Lifetime>>,\n     pub export_map: ExportMap,\n+\n+    /// Table from HIR Ty nodes to their resolved Ty.\n+    pub hir_ty_to_ty: NodeMap<Ty<'tcx>>,\n }\n \n impl<'a, 'tcx> DocContext<'a, 'tcx> {\n@@ -172,7 +175,7 @@ pub fn run_core(search_paths: SearchPaths,\n             sess.fatal(\"Compilation failed, aborting rustdoc\");\n         }\n \n-        let ty::CrateAnalysis { access_levels, export_map, .. } = analysis;\n+        let ty::CrateAnalysis { access_levels, export_map, hir_ty_to_ty, .. } = analysis;\n \n         // Convert from a NodeId set to a DefId set since we don't always have easy access\n         // to the map from defid -> nodeid\n@@ -192,6 +195,7 @@ pub fn run_core(search_paths: SearchPaths,\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n             export_map: export_map,\n+            hir_ty_to_ty: hir_ty_to_ty,\n         };\n         debug!(\"crate: {:?}\", tcx.map.krate());\n "}]}