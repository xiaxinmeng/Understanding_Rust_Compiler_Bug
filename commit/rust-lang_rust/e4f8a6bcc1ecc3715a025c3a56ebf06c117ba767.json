{"sha": "e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0ZjhhNmJjYzFlY2MzNzE1YTAyNWMzYTU2ZWJmMDZjMTE3YmE3Njc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-18T13:53:25Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-24T06:50:46Z"}, "message": "hir: remove NodeId from GenericParam", "tree": {"sha": "071760ed2cdca313245d1c1d09fde975b13215fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/071760ed2cdca313245d1c1d09fde975b13215fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "html_url": "https://github.com/rust-lang/rust/commit/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c18ac1f65ad87709e962176fb84a17d570cafb9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c18ac1f65ad87709e962176fb84a17d570cafb9", "html_url": "https://github.com/rust-lang/rust/commit/1c18ac1f65ad87709e962176fb84a17d570cafb9"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "f551eb48c6cc8c257b47fc59d8acb5b1b4450164", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -780,7 +780,6 @@ impl<'a> LoweringContext<'a> {\n                 );\n \n                 hir::GenericParam {\n-                    id: node_id,\n                     hir_id,\n                     name: hir_name,\n                     attrs: hir_vec![],\n@@ -1300,7 +1299,6 @@ impl<'a> LoweringContext<'a> {\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str(&pprust::ty_to_string(t)).with_span_pos(span);\n                         in_band_ty_params.push(hir::GenericParam {\n-                            id: def_node_id,\n                             hir_id,\n                             name: ParamName::Plain(ident),\n                             pure_wrt_drop: false,\n@@ -1567,7 +1565,6 @@ impl<'a> LoweringContext<'a> {\n                     };\n \n                     self.output_lifetime_params.push(hir::GenericParam {\n-                        id: def_node_id,\n                         hir_id,\n                         name,\n                         span: lifetime.span,\n@@ -2519,10 +2516,9 @@ impl<'a> LoweringContext<'a> {\n             }\n         };\n \n-        let LoweredNodeId { node_id, hir_id } = self.lower_node_id(param.id);\n+        let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(param.id);\n \n         hir::GenericParam {\n-            id: node_id,\n             hir_id,\n             name,\n             span: param.ident.span,"}, {"sha": "052802810f09566e236278bec00395d980e89b79", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -395,9 +395,14 @@ impl<'hir> Map<'hir> {\n             }\n             Node::GenericParam(param) => {\n                 Some(match param.kind {\n-                    GenericParamKind::Lifetime { .. } => Def::Local(param.id),\n-                    GenericParamKind::Type { .. } => Def::TyParam(self.local_def_id(param.id)),\n-                    GenericParamKind::Const { .. } => Def::ConstParam(self.local_def_id(param.id)),\n+                    GenericParamKind::Lifetime { .. } => {\n+                        let node_id = self.hir_to_node_id(param.hir_id);\n+                        Def::Local(node_id)\n+                    },\n+                    GenericParamKind::Type { .. } => Def::TyParam(\n+                        self.local_def_id_from_hir_id(param.hir_id)),\n+                    GenericParamKind::Const { .. } => Def::ConstParam(\n+                        self.local_def_id_from_hir_id(param.hir_id)),\n                 })\n             }\n         }"}, {"sha": "a5b61f002f7745c8f0d70d77272cb3b3b81a952a", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -420,7 +420,7 @@ impl GenericArg {\n         match self {\n             GenericArg::Lifetime(l) => l.hir_id,\n             GenericArg::Type(t) => t.hir_id,\n-            GenericArg::Const(c) => c.value.id,\n+            GenericArg::Const(c) => c.value.hir_id,\n         }\n     }\n }\n@@ -552,7 +552,6 @@ pub enum GenericParamKind {\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub struct GenericParam {\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub name: ParamName,\n     pub attrs: HirVec<Attribute>,"}, {"sha": "0bee2a6f260aa233fadbd9e80a181b8bfd8173a0", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -206,7 +206,6 @@ impl_stable_hash_for!(enum hir::TraitBoundModifier {\n });\n \n impl_stable_hash_for!(struct hir::GenericParam {\n-    id,\n     hir_id,\n     name,\n     pure_wrt_drop,"}, {"sha": "31e9eb9b7463ca861c25b2aa0f2ae77ed57798c1", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -13,7 +13,7 @@ use crate::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n \n use crate::rustc::lint;\n use crate::session::Session;\n-use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, NodeMap, NodeSet};\n+use crate::util::nodemap::{DefIdMap, FxHashMap, FxHashSet, HirIdMap, HirIdSet, NodeMap};\n use errors::{Applicability, DiagnosticBuilder};\n use rustc_data_structures::sync::Lrc;\n use std::borrow::Cow;\n@@ -83,15 +83,15 @@ impl Region {\n     fn early(hir_map: &Map<'_>, index: &mut u32, param: &GenericParam) -> (ParamName, Region) {\n         let i = *index;\n         *index += 1;\n-        let def_id = hir_map.local_def_id(param.id);\n+        let def_id = hir_map.local_def_id_from_hir_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\"Region::early: index={} def_id={:?}\", i, def_id);\n         (param.name.modern(), Region::EarlyBound(i, def_id, origin))\n     }\n \n     fn late(hir_map: &Map<'_>, param: &GenericParam) -> (ParamName, Region) {\n         let depth = ty::INNERMOST;\n-        let def_id = hir_map.local_def_id(param.id);\n+        let def_id = hir_map.local_def_id_from_hir_id(param.hir_id);\n         let origin = LifetimeDefOrigin::from_param(param);\n         debug!(\n             \"Region::late: param={:?} depth={:?} def_id={:?} origin={:?}\",\n@@ -200,7 +200,7 @@ struct NamedRegionMap {\n     // the set of lifetime def ids that are late-bound; a region can\n     // be late-bound if (a) it does NOT appear in a where-clause and\n     // (b) it DOES appear in the arguments.\n-    pub late_bound: NodeSet,\n+    pub late_bound: HirIdSet,\n \n     // For each type and trait definition, maps type parameters\n     // to the trait object lifetime defaults computed from them.\n@@ -389,8 +389,7 @@ fn resolve_lifetimes<'tcx>(\n         let map = rl.defs.entry(hir_id.owner_local_def_id()).or_default();\n         Lrc::get_mut(map).unwrap().insert(hir_id.local_id, v);\n     }\n-    for k in named_region_map.late_bound {\n-        let hir_id = tcx.hir().node_to_hir_id(k);\n+    for hir_id in named_region_map.late_bound {\n         let map = rl.late_bound\n             .entry(hir_id.owner_local_def_id())\n             .or_default();\n@@ -1338,7 +1337,7 @@ fn object_lifetime_defaults_for_item(\n \n                 add_bounds(&mut set, &param.bounds);\n \n-                let param_def_id = tcx.hir().local_def_id(param.id);\n+                let param_def_id = tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                 for predicate in &generics.where_clause.predicates {\n                     // Look for `type: ...` where clauses.\n                     let data = match *predicate {\n@@ -1373,7 +1372,7 @@ fn object_lifetime_defaults_for_item(\n                                 .iter()\n                                 .filter_map(|param| match param.kind {\n                                     GenericParamKind::Lifetime { .. } => Some((\n-                                        param.id,\n+                                        param.hir_id,\n                                         hir::LifetimeName::Param(param.name),\n                                         LifetimeDefOrigin::from_param(param),\n                                     )),\n@@ -1382,7 +1381,7 @@ fn object_lifetime_defaults_for_item(\n                                 .enumerate()\n                                 .find(|&(_, (_, lt_name, _))| lt_name == name)\n                                 .map_or(Set1::Many, |(i, (id, _, origin))| {\n-                                    let def_id = tcx.hir().local_def_id(id);\n+                                    let def_id = tcx.hir().local_def_id_from_hir_id(id);\n                                     Set1::One(Region::EarlyBound(i as u32, def_id, origin))\n                                 })\n                         }\n@@ -1707,7 +1706,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         let mut non_lifetime_count = 0;\n         let lifetimes = generics.params.iter().filter_map(|param| match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n-                if self.map.late_bound.contains(&param.id) {\n+                if self.map.late_bound.contains(&param.hir_id) {\n                     Some(Region::late(&self.tcx.hir(), param))\n                 } else {\n                     Some(Region::early(&self.tcx.hir(), &mut index, param))\n@@ -2792,11 +2791,11 @@ fn insert_late_bound_lifetimes(\n         debug!(\n             \"insert_late_bound_lifetimes: lifetime {:?} with id {:?} is late-bound\",\n             param.name.ident(),\n-            param.id\n+            param.hir_id\n         );\n \n-        let inserted = map.late_bound.insert(param.id);\n-        assert!(inserted, \"visited lifetime {:?} twice\", param.id);\n+        let inserted = map.late_bound.insert(param.hir_id);\n+        assert!(inserted, \"visited lifetime {:?} twice\", param.hir_id);\n     }\n \n     return;"}, {"sha": "ef2cca708d17385d4632a0e2119babcac7cd58eb", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -1702,13 +1702,13 @@ impl<'a, 'b, 'tcx> IndexBuilder<'a, 'b, 'tcx> {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n                 hir::GenericParamKind::Type { ref default, .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                     let has_default = Untracked(default.is_some());\n                     let encode_info = IsolatedEncoder::encode_info_for_ty_param;\n                     self.record(def_id, encode_info, (def_id, has_default));\n                 }\n                 hir::GenericParamKind::Const { .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                     let encode_info = IsolatedEncoder::encode_info_for_const_param;\n                     self.record(def_id, encode_info, def_id);\n                 }"}, {"sha": "2ef6aaf4f0499c964532ef28d30b41251dcf0fa0", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -129,12 +129,12 @@ impl<'a, 'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'a, 'tcx> {\n                 hir::GenericParamKind::Type {\n                     default: Some(_), ..\n                 } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                     self.tcx.type_of(def_id);\n                 }\n                 hir::GenericParamKind::Type { .. } => {}\n                 hir::GenericParamKind::Const { .. } => {\n-                    let def_id = self.tcx.hir().local_def_id(param.id);\n+                    let def_id = self.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                     self.tcx.type_of(def_id);\n                 }\n             }\n@@ -322,9 +322,10 @@ fn type_param_predicates<'a, 'tcx>(\n     };\n \n     let icx = ItemCtxt::new(tcx, item_def_id);\n+    let param_hir_id = tcx.hir().node_to_hir_id(param_id);\n     Lrc::make_mut(&mut result)\n         .predicates\n-        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_id, ty,\n+        .extend(icx.type_parameter_bounds_in_generics(ast_generics, param_hir_id, ty,\n             OnlySelfBounds(true)));\n     result\n }\n@@ -337,15 +338,15 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n     fn type_parameter_bounds_in_generics(\n         &self,\n         ast_generics: &hir::Generics,\n-        param_id: ast::NodeId,\n+        param_id: hir::HirId,\n         ty: Ty<'tcx>,\n         only_self_bounds: OnlySelfBounds,\n     ) -> Vec<(ty::Predicate<'tcx>, Span)> {\n         let from_ty_params = ast_generics\n             .params\n             .iter()\n             .filter_map(|param| match param.kind {\n-                GenericParamKind::Type { .. } if param.id == param_id => Some(&param.bounds),\n+                GenericParamKind::Type { .. } if param.hir_id == param_id => Some(&param.bounds),\n                 _ => None,\n             })\n             .flat_map(|bounds| bounds.iter())\n@@ -382,12 +383,12 @@ impl<'a, 'tcx> ItemCtxt<'a, 'tcx> {\n fn is_param<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ast_ty: &hir::Ty,\n-    param_id: ast::NodeId,\n+    param_id: hir::HirId,\n ) -> bool {\n     if let hir::TyKind::Path(hir::QPath::Resolved(None, ref path)) = ast_ty.node {\n         match path.def {\n             Def::SelfTy(Some(def_id), None) | Def::TyParam(def_id) => {\n-                def_id == tcx.hir().local_def_id(param_id)\n+                def_id == tcx.hir().local_def_id_from_hir_id(param_id)\n             }\n             _ => false,\n         }\n@@ -721,7 +722,7 @@ fn super_predicates_of<'a, 'tcx>(\n     // as one of its \"superpredicates\".\n     let is_trait_alias = tcx.is_trait_alias(trait_def_id);\n     let superbounds2 = icx.type_parameter_bounds_in_generics(\n-        generics, item.id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n+        generics, item.hir_id, self_param_ty, OnlySelfBounds(!is_trait_alias));\n \n     // Combine the two lists to form the complete set of superbounds:\n     let superbounds: Vec<_> = superbounds1.into_iter().chain(superbounds2).collect();\n@@ -987,7 +988,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n             .map(|(i, param)| ty::GenericParamDef {\n                 name: param.name.ident().as_interned_str(),\n                 index: own_start + i as u32,\n-                def_id: tcx.hir().local_def_id(param.id),\n+                def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n                 pure_wrt_drop: param.pure_wrt_drop,\n                 kind: ty::GenericParamDefKind::Lifetime,\n             }),\n@@ -1018,9 +1019,9 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n \n                     if !allow_defaults && default.is_some() {\n                         if !tcx.features().default_type_parameter_fallback {\n-                            tcx.lint_node(\n+                            tcx.lint_hir(\n                                 lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n-                                param.id,\n+                                param.hir_id,\n                                 param.span,\n                                 &format!(\n                                     \"defaults for type parameters are only allowed in \\\n@@ -1033,7 +1034,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n                     let ty_param = ty::GenericParamDef {\n                         index: type_start + i as u32,\n                         name: param.name.ident().as_interned_str(),\n-                        def_id: tcx.hir().local_def_id(param.id),\n+                        def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n                         pure_wrt_drop: param.pure_wrt_drop,\n                         kind: ty::GenericParamDefKind::Type {\n                             has_default: default.is_some(),\n@@ -1704,8 +1705,7 @@ fn early_bound_lifetimes_from_generics<'a, 'tcx>(\n         .iter()\n         .filter(move |param| match param.kind {\n             GenericParamKind::Lifetime { .. } => {\n-                let hir_id = tcx.hir().node_to_hir_id(param.id);\n-                !tcx.is_late_bound(hir_id)\n+                !tcx.is_late_bound(param.hir_id)\n             }\n             _ => false,\n         })\n@@ -1942,7 +1942,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     let mut index = parent_count + has_own_self as u32;\n     for param in early_bound_lifetimes_from_generics(tcx, ast_generics) {\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n-            def_id: tcx.hir().local_def_id(param.id),\n+            def_id: tcx.hir().local_def_id_from_hir_id(param.hir_id),\n             index,\n             name: param.name.ident().as_interned_str(),\n         }));"}, {"sha": "03f248f41adf7bd29edfe099f0d5c33a08b86794", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e4f8a6bcc1ecc3715a025c3a56ebf06c117ba767", "patch": "@@ -1511,15 +1511,15 @@ impl Clean<GenericParamDef> for hir::GenericParam {\n             }\n             hir::GenericParamKind::Type { ref default, synthetic } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Type {\n-                    did: cx.tcx.hir().local_def_id(self.id),\n+                    did: cx.tcx.hir().local_def_id_from_hir_id(self.hir_id),\n                     bounds: self.bounds.clean(cx),\n                     default: default.clean(cx),\n                     synthetic: synthetic,\n                 })\n             }\n             hir::GenericParamKind::Const { ref ty } => {\n                 (self.name.ident().name.clean(cx), GenericParamDefKind::Const {\n-                    did: cx.tcx.hir().local_def_id(self.id),\n+                    did: cx.tcx.hir().local_def_id_from_hir_id(self.hir_id),\n                     ty: ty.clean(cx),\n                 })\n             }\n@@ -2597,15 +2597,16 @@ impl Clean<Type> for hir::Ty {\n                                     if let Some(lt) = lifetime.cloned() {\n                                         if !lt.is_elided() {\n                                             let lt_def_id =\n-                                                cx.tcx.hir().local_def_id(param.id);\n+                                                cx.tcx.hir().local_def_id_from_hir_id(param.hir_id);\n                                             lt_substs.insert(lt_def_id, lt.clean(cx));\n                                         }\n                                     }\n                                     indices.lifetimes += 1;\n                                 }\n                                 hir::GenericParamKind::Type { ref default, .. } => {\n                                     let ty_param_def =\n-                                        Def::TyParam(cx.tcx.hir().local_def_id(param.id));\n+                                        Def::TyParam(\n+                                            cx.tcx.hir().local_def_id_from_hir_id(param.hir_id));\n                                     let mut j = 0;\n                                     let type_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {\n@@ -2629,7 +2630,8 @@ impl Clean<Type> for hir::Ty {\n                                 }\n                                 hir::GenericParamKind::Const { .. } => {\n                                     let const_param_def =\n-                                        Def::ConstParam(cx.tcx.hir().local_def_id(param.id));\n+                                        Def::ConstParam(\n+                                            cx.tcx.hir().local_def_id_from_hir_id(param.hir_id));\n                                     let mut j = 0;\n                                     let const_ = generic_args.args.iter().find_map(|arg| {\n                                         match arg {"}]}