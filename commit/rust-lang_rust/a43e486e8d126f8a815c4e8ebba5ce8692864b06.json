{"sha": "a43e486e8d126f8a815c4e8ebba5ce8692864b06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0M2U0ODZlOGQxMjZmOGE4MTVjNGU4ZWJiYTVjZTg2OTI4NjRiMDY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-03T04:16:17Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-13T18:05:13Z"}, "message": "Add MIR phase and query for drop elaboration", "tree": {"sha": "36e17df96f3f58b90b53c65e73b89203e767b2c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36e17df96f3f58b90b53c65e73b89203e767b2c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a43e486e8d126f8a815c4e8ebba5ce8692864b06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a43e486e8d126f8a815c4e8ebba5ce8692864b06", "html_url": "https://github.com/rust-lang/rust/commit/a43e486e8d126f8a815c4e8ebba5ce8692864b06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a43e486e8d126f8a815c4e8ebba5ce8692864b06/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5370faa6c37c565eee5ae83509302f3ed16fc3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5370faa6c37c565eee5ae83509302f3ed16fc3d", "html_url": "https://github.com/rust-lang/rust/commit/f5370faa6c37c565eee5ae83509302f3ed16fc3d"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "21f5d9e7dd4c6b678467edff5b37a07f03f459ee", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=a43e486e8d126f8a815c4e8ebba5ce8692864b06", "patch": "@@ -76,7 +76,8 @@ pub enum MirPhase {\n     Build = 0,\n     Const = 1,\n     Validated = 2,\n-    Optimized = 3,\n+    DropElab = 3,\n+    Optimized = 4,\n }\n \n impl MirPhase {"}, {"sha": "9e3881b28b6936b39719349f0462cc66a1ac8411", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=a43e486e8d126f8a815c4e8ebba5ce8692864b06", "patch": "@@ -190,6 +190,12 @@ rustc_queries! {\n             no_hash\n         }\n \n+        query mir_drops_elaborated_and_const_checked(key: LocalDefId) -> Steal<mir::Body<'tcx>> {\n+            storage(ArenaCacheSelector<'tcx>)\n+            no_hash\n+            desc { |tcx| \"elaborating drops for `{}`\", tcx.def_path_str(key.to_def_id()) }\n+        }\n+\n         query mir_validated(key: LocalDefId) ->\n             (\n                 Steal<mir::Body<'tcx>>,"}, {"sha": "4240b528a6124c2be08d34ddcbb8ad0b55466b19", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 40, "deletions": 9, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a43e486e8d126f8a815c4e8ebba5ce8692864b06/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=a43e486e8d126f8a815c4e8ebba5ce8692864b06", "patch": "@@ -49,6 +49,7 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n         mir_const,\n         mir_const_qualif,\n         mir_validated,\n+        mir_drops_elaborated_and_const_checked,\n         optimized_mir,\n         is_mir_available,\n         promoted_mir,\n@@ -294,12 +295,31 @@ fn mir_validated(\n     (tcx.alloc_steal_mir(body), tcx.alloc_steal_promoted(promoted))\n }\n \n-fn run_optimization_passes<'tcx>(\n+fn mir_drops_elaborated_and_const_checked<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+) -> Steal<Body<'tcx>> {\n+    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n+    // execute before we can steal.\n+    tcx.ensure().mir_borrowck(def_id);\n+\n+    let (body, _) = tcx.mir_validated(def_id);\n+    let mut body = body.steal();\n+\n+    run_post_borrowck_cleanup_passes(tcx, &mut body, def_id, None);\n+    check_consts::post_drop_elaboration::check_live_drops(tcx, def_id, &body);\n+    tcx.alloc_steal_mir(body)\n+}\n+\n+/// After this series of passes, no lifetime analysis based on borrowing can be done.\n+fn run_post_borrowck_cleanup_passes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &mut Body<'tcx>,\n     def_id: LocalDefId,\n     promoted: Option<Promoted>,\n ) {\n+    debug!(\"post_borrowck_cleanup({:?})\", def_id);\n+\n     let post_borrowck_cleanup: &[&dyn MirPass<'tcx>] = &[\n         // Remove all things only needed by analysis\n         &no_landing_pads::NoLandingPads::new(tcx),\n@@ -318,9 +338,24 @@ fn run_optimization_passes<'tcx>(\n         // but before optimizations begin.\n         &add_retag::AddRetag,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n-        // No lifetime analysis based on borrowing can be done from here on out.\n     ];\n \n+    run_passes(\n+        tcx,\n+        body,\n+        InstanceDef::Item(def_id.to_def_id()),\n+        promoted,\n+        MirPhase::DropElab,\n+        &[post_borrowck_cleanup],\n+    );\n+}\n+\n+fn run_optimization_passes<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    body: &mut Body<'tcx>,\n+    def_id: LocalDefId,\n+    promoted: Option<Promoted>,\n+) {\n     let optimizations: &[&dyn MirPass<'tcx>] = &[\n         &unreachable_prop::UnreachablePropagation,\n         &uninhabited_enum_branching::UninhabitedEnumBranching,\n@@ -368,14 +403,14 @@ fn run_optimization_passes<'tcx>(\n \n     let mir_opt_level = tcx.sess.opts.debugging_opts.mir_opt_level;\n \n+    #[rustfmt::skip]\n     run_passes(\n         tcx,\n         body,\n         InstanceDef::Item(def_id.to_def_id()),\n         promoted,\n         MirPhase::Optimized,\n         &[\n-            post_borrowck_cleanup,\n             if mir_opt_level > 0 { optimizations } else { no_optimizations },\n             pre_codegen_cleanup,\n         ],\n@@ -393,12 +428,7 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n \n     let def_id = def_id.expect_local();\n \n-    // (Mir-)Borrowck uses `mir_validated`, so we have to force it to\n-    // execute before we can steal.\n-    tcx.ensure().mir_borrowck(def_id);\n-\n-    let (body, _) = tcx.mir_validated(def_id);\n-    let mut body = body.steal();\n+    let mut body = tcx.mir_drops_elaborated_and_const_checked(def_id).steal();\n     run_optimization_passes(tcx, &mut body, def_id, None);\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n@@ -418,6 +448,7 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> IndexVec<Promoted, Body<'_>>\n     let mut promoted = promoted.steal();\n \n     for (p, mut body) in promoted.iter_enumerated_mut() {\n+        run_post_borrowck_cleanup_passes(tcx, &mut body, def_id, Some(p));\n         run_optimization_passes(tcx, &mut body, def_id, Some(p));\n     }\n "}]}