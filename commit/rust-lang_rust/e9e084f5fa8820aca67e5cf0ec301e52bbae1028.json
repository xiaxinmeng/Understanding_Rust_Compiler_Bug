{"sha": "e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5ZTA4NGY1ZmE4ODIwYWNhNjdlNWNmMGVjMzAxZTUyYmJhZTEwMjg=", "commit": {"author": {"name": "Dan Robertson", "email": "danlrobertson89@gmail.com", "date": "2018-10-23T23:25:58Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2018-11-26T22:56:20Z"}, "message": "test: Add basic test for VaList", "tree": {"sha": "771e9ce7ce5f9742cdad851cd8120317b5d4f78a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/771e9ce7ce5f9742cdad851cd8120317b5d4f78a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAlv8ehQACgkQRcSmUsR+\nQqUqMhAAs2bS62vBfWtpgh5F/cbLFpAEuILj4dw/irt6HMFG6JAnQowx/2kHsg92\n4VFGk8ZtwbDFNdy7/YkEBFm5811sdqDXNB/nb5WCgwjYecTr0pdGnyr+rODEYBsh\nW6iL03Ukdilo+jL4a69tIH0zS4N3F85KaXUrEUqY/6Cxy8dBj9cDHSPtOUT8cF0I\nxNe6E/LGw72TArbb1G4SU4SzS5v1oKcseswV5IVlkWx/jPLK+HVy9N+UjwiTdg2a\nbCUy5MVpvfMGIC7FYRGxeFA5mncN4iIZW9LI2A2rzAr/LiwjP/bGoEdMfJrdK42Q\net1i6yxFR3GmsNUN1mR0Dt0bopPrMwhza4Kv9mJJSgUACXeubeBITOU4HAoG14EE\nFNkwVug6XdBWcTkIPdkmMaZZaR/IHKAdv1EXQv+SxH5hacIHdDdSVG84FCgbiy6U\nfeSwosaAdl4xZCy5iIXVQ9XEbZbFSLbpuPehsNJR0Cm+VX0WEuhjwlK/N77RiDiA\n/t7SS4GnHrZyI6aifWvNz7ULO0v09T9R+8EJ9s+2Z8TAWxxBjs5P3d2ESxiYEjF1\nPvP1j+0+0kehlJ+jk5rGnzcXcUPB86ysF5tnKl4eQLIT9wGptOOFLerp+u9wfbFj\nOinHKdboC1fLw0KhV5LWn1AIUsZuiHa5Um3g6J/ybL12sxm+vWA=\n=9hj9\n-----END PGP SIGNATURE-----", "payload": "tree 771e9ce7ce5f9742cdad851cd8120317b5d4f78a\nparent 08140878fefaa4b16939b904bf825b7107069b42\nauthor Dan Robertson <danlrobertson89@gmail.com> 1540337158 +0000\ncommitter Dan Robertson <dan@dlrobertson.com> 1543272980 +0000\n\ntest: Add basic test for VaList\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "html_url": "https://github.com/rust-lang/rust/commit/e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/comments", "author": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08140878fefaa4b16939b904bf825b7107069b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/08140878fefaa4b16939b904bf825b7107069b42", "html_url": "https://github.com/rust-lang/rust/commit/08140878fefaa4b16939b904bf825b7107069b42"}], "stats": {"total": 243, "additions": 243, "deletions": 0}, "files": [{"sha": "f124ca2ab614ae3a20adcba48776792c51b9fb0a", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/Makefile", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2FMakefile?ref=e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "patch": "@@ -0,0 +1,6 @@\n+-include ../tools.mk\n+\n+all:\n+\t$(RUSTC) checkrust.rs\n+\t$(CC) test.c $(call STATICLIB,checkrust) $(call OUT_EXE,test) $(EXTRACFLAGS)\n+\t$(call RUN,test)"}, {"sha": "d4cc4a0ed5e2b08ca27d439aa56b7840c4c19839", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/checkrust.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Fcheckrust.rs?ref=e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "patch": "@@ -0,0 +1,142 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"staticlib\"]\n+#![feature(c_variadic)]\n+#![feature(libc)]\n+\n+extern crate libc;\n+\n+use libc::{c_char, c_double, c_int, c_long, c_longlong};\n+use std::ffi::VaList;\n+use std::slice;\n+use std::ffi::CStr;\n+\n+#[repr(C)]\n+#[derive(Clone, Copy, Debug)]\n+pub enum AnswerType {\n+    Double,\n+    Long,\n+    LongLong,\n+    Int,\n+    Byte,\n+    CStr,\n+    Skip,\n+}\n+\n+#[repr(C)]\n+pub union AnswerData {\n+    pub double: c_double,\n+    pub long: c_long,\n+    pub longlong: c_longlong,\n+    pub int: c_int,\n+    pub byte: c_char,\n+    pub cstr: *const c_char,\n+    pub skip_ty: AnswerType,\n+}\n+\n+#[repr(C)]\n+pub struct Answer {\n+    tag: AnswerType,\n+    data: AnswerData,\n+}\n+\n+#[no_mangle]\n+pub unsafe fn compare_answers(answers: &[Answer], mut ap: VaList) -> usize {\n+    for (i, answer) in answers.iter().enumerate() {\n+        match answer {\n+            Answer { tag: AnswerType::Double, data: AnswerData { double: d } } => {\n+                let tmp = ap.arg::<c_double>();\n+                if d.floor() != tmp.floor() {\n+                    println!(\"Double: {} != {}\", d, tmp);\n+                    return i + 1;\n+                }\n+            }\n+            Answer { tag: AnswerType::Long, data: AnswerData { long: l } } => {\n+                let tmp =  ap.arg::<c_long>();\n+                if *l != tmp {\n+                    println!(\"Long: {} != {}\", l, tmp);\n+                    return i + 1;\n+                }\n+            }\n+            Answer { tag: AnswerType::LongLong, data: AnswerData { longlong: l } } => {\n+                let tmp =  ap.arg::<c_longlong>();\n+                if *l != tmp {\n+                    println!(\"Long Long: {} != {}\", l, tmp);\n+                    return i + 1;\n+                }\n+            }\n+            Answer { tag: AnswerType::Int, data: AnswerData { int: n } } => {\n+                let tmp = ap.arg::<c_int>();\n+                if *n != tmp {\n+                    println!(\"Int: {} != {}\", n, tmp);\n+                    return i + 1;\n+                }\n+            }\n+            Answer { tag: AnswerType::Byte, data: AnswerData { byte: b } } => {\n+                let tmp = ap.arg::<c_char>();\n+                if *b != tmp {\n+                    println!(\"Byte: {} != {}\", b, tmp);\n+                    return i + 1;\n+                }\n+            }\n+            Answer { tag: AnswerType::CStr, data: AnswerData { cstr: c0 } } => {\n+                let c1 = ap.arg::<*const c_char>();\n+                let cstr0 = CStr::from_ptr(*c0);\n+                let cstr1 = CStr::from_ptr(c1);\n+                if cstr0 != cstr1 {\n+                    println!(\"C String: {:?} != {:?}\", cstr0, cstr1);\n+                    return i + 1;\n+                }\n+            }\n+            _ => {\n+                println!(\"Unknown type!\");\n+                return i + 1;\n+            }\n+        }\n+    }\n+    return 0;\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_rust(argc: usize, answers: *const Answer, ap: VaList) -> usize {\n+    let slice = slice::from_raw_parts(answers, argc);\n+    compare_answers(slice, ap)\n+}\n+\n+#[no_mangle]\n+pub unsafe extern \"C\" fn check_rust_copy(argc: usize, answers: *const Answer,\n+                                         mut ap: VaList) -> usize {\n+    let slice = slice::from_raw_parts(answers, argc);\n+    let mut skip_n = 0;\n+    for (i, answer) in slice.iter().enumerate() {\n+        match answer {\n+            Answer { tag: AnswerType::Skip, data: AnswerData { skip_ty } } => {\n+                match skip_ty {\n+                    AnswerType::Double => { ap.arg::<c_double>(); }\n+                    AnswerType::Long => { ap.arg::<c_long>(); }\n+                    AnswerType::LongLong => { ap.arg::<c_longlong>(); }\n+                    AnswerType::Int => { ap.arg::<c_int>(); }\n+                    AnswerType::Byte => { ap.arg::<c_char>(); }\n+                    AnswerType::CStr => { ap.arg::<*const c_char>(); }\n+                    _ => { return i; }\n+                };\n+            }\n+            _ => {\n+                skip_n = i;\n+                break;\n+            }\n+        }\n+    }\n+\n+    ap.copy(|ap| {\n+        compare_answers(&slice[skip_n..], ap)\n+    })\n+}"}, {"sha": "80d9a48014203544ab7df4972dee5afc7e8d4abe", "filename": "src/test/run-make-fulldeps/c-link-to-rust-va-list-fn/test.c", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/e9e084f5fa8820aca67e5cf0ec301e52bbae1028/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fc-link-to-rust-va-list-fn%2Ftest.c?ref=e9e084f5fa8820aca67e5cf0ec301e52bbae1028", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#include <stdarg.h>\n+#include <assert.h>\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+typedef enum {\n+    TAG_DOUBLE,\n+    TAG_LONG,\n+    TAG_LONGLONG,\n+    TAG_INT,\n+    TAG_BYTE,\n+    TAG_CSTR,\n+    TAG_SKIP,\n+} tag;\n+\n+typedef struct {\n+    tag answer_type;\n+    union {\n+        double double_precision;\n+        long num_long;\n+        long long num_longlong;\n+        int num_int;\n+        int8_t byte;\n+        char* cstr;\n+        tag skip_ty;\n+    } answer_data;\n+} answer;\n+\n+#define MK_DOUBLE(n) \\\n+    { TAG_DOUBLE, { .double_precision = n } }\n+#define MK_LONG(n) \\\n+    { TAG_LONG, { .num_long = n } }\n+#define MK_LONGLONG(n) \\\n+    { TAG_LONGLONG, { .num_longlong = n } }\n+#define MK_INT(n) \\\n+    { TAG_INT, { .num_int = n } }\n+#define MK_BYTE(b) \\\n+    { TAG_BYTE, { .byte = b } }\n+#define MK_CSTR(s) \\\n+    { TAG_CSTR, { .cstr = s } }\n+#define MK_SKIP(ty) \\\n+    { TAG_SKIP, { .skip_ty = TAG_ ## ty } }\n+\n+extern size_t check_rust(size_t argc, const answer* answers, va_list ap);\n+extern size_t check_rust_copy(size_t argc, const answer* answers, va_list ap);\n+\n+size_t test_check_rust(size_t argc, const answer* answers, ...) {\n+    size_t ret = 0;\n+    va_list ap;\n+    va_start(ap, answers);\n+    ret = check_rust(argc, answers, ap);\n+    va_end(ap);\n+    return ret;\n+}\n+\n+size_t test_check_rust_copy(size_t argc, const answer* answers, ...) {\n+    size_t ret = 0;\n+    va_list ap;\n+    va_start(ap, answers);\n+    ret = check_rust_copy(argc, answers, ap);\n+    va_end(ap);\n+    return ret;\n+}\n+\n+int main(int argc, char* argv[]) {\n+    answer test_alignment0[] = {MK_LONGLONG(0x01LL), MK_INT(0x02), MK_LONGLONG(0x03LL)};\n+    assert(test_check_rust(3, test_alignment0, 0x01LL, 0x02, 0x03LL) == 0);\n+\n+    answer test_alignment1[] = {MK_INT(-1), MK_BYTE('A'), MK_BYTE('4'), MK_BYTE(';'),\n+                                MK_INT(0x32), MK_INT(0x10000001), MK_CSTR(\"Valid!\")};\n+    assert(test_check_rust(7, test_alignment1, -1, 'A', '4', ';', 0x32, 0x10000001,\n+                           \"Valid!\") == 0);\n+\n+    answer basic_answers[] = {MK_DOUBLE(3.14), MK_LONG(12l), MK_BYTE('a'),\n+                              MK_DOUBLE(6.28), MK_CSTR(\"Hello\"), MK_INT(42),\n+                              MK_CSTR(\"World\")};\n+    assert(test_check_rust(7, basic_answers, 3.14, 12l, 'a', 6.28, \"Hello\",\n+                           42, \"World\") == 0);\n+\n+    answer copy_answers[] = { MK_SKIP(DOUBLE), MK_SKIP(INT), MK_SKIP(BYTE), MK_SKIP(CSTR),\n+                              MK_CSTR(\"Correctly skipped and copied list\") };\n+    assert(test_check_rust_copy(5, copy_answers, 6.28, 16, 'A', \"Skip Me!\",\n+                                \"Correctly skipped and copied list\") == 0);\n+    return 0;\n+}"}]}