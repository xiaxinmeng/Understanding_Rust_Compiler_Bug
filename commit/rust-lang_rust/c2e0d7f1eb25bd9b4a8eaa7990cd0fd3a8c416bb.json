{"sha": "c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyZTBkN2YxZWIyNWJkOWI0YThlYWE3OTkwY2QwZmQzYThjNDE2YmI=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-04-03T22:44:49Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-04-03T22:44:49Z"}, "message": "Never return uninhabited values at all\n\nFunctions with uninhabited return values are already marked `noreturn`,\nbut we were still generating return instructions for this. When running\nwith `-C passes=lint`, LLVM prints:\n\n    Unusual: Return statement in function with noreturn attribute\n\nThe LLVM manual makes a stronger statement about `noreturn` though:\n\n> This produces undefined behavior at runtime if the function ever does\ndynamically return.\n\nWe now emit an `abort` anywhere that would have tried to return an\nuninhabited value.", "tree": {"sha": "f9e3adc79aa84e1dc9059233e789da70ea05ff05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9e3adc79aa84e1dc9059233e789da70ea05ff05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "html_url": "https://github.com/rust-lang/rust/commit/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e008e4fde837313d4a72da603ef492a721afc998", "url": "https://api.github.com/repos/rust-lang/rust/commits/e008e4fde837313d4a72da603ef492a721afc998", "html_url": "https://github.com/rust-lang/rust/commit/e008e4fde837313d4a72da603ef492a721afc998"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "aaa0be20412f267bc5c6d8d8b11ff5939fb4cffd", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "patch": "@@ -238,6 +238,13 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n         }\n+        if self.fn_ty.ret.layout.abi.is_uninhabited() {\n+            // Functions with uninhabited return values are marked `noreturn`,\n+            // so we should make sure that we never actually do.\n+            bx.abort();\n+            bx.unreachable();\n+            return;\n+        }\n         let llval = match self.fn_ty.ret.mode {\n             PassMode::Ignore(IgnoreMode::Zst) | PassMode::Indirect(..) => {\n                 bx.ret_void();"}, {"sha": "1b65da9f2877a74e98b85297e3d2ecfcd80adaa1", "filename": "src/test/codegen/noreturn-uninhabited.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnoreturn-uninhabited.rs?ref=c2e0d7f1eb25bd9b4a8eaa7990cd0fd3a8c416bb", "patch": "@@ -0,0 +1,32 @@\n+// compile-flags: -g -C no-prepopulate-passes\n+// ignore-tidy-linelength\n+\n+#![crate_type = \"lib\"]\n+\n+#[derive(Clone, Copy)]\n+pub enum EmptyEnum {}\n+\n+#[no_mangle]\n+pub fn empty(x: &EmptyEnum) -> EmptyEnum {\n+    // CHECK: @empty({{.*}}) unnamed_addr #0\n+    // CHECK-NOT: ret void\n+    // CHECK: call void @llvm.trap()\n+    // CHECK: unreachable\n+    *x\n+}\n+\n+pub struct Foo(String, EmptyEnum);\n+\n+#[no_mangle]\n+pub fn foo(x: String, y: &EmptyEnum) -> Foo {\n+    // CHECK: @foo({{.*}}) unnamed_addr #0\n+    // CHECK-NOT: ret %Foo\n+    // CHECK: call void @llvm.trap()\n+    // CHECK: unreachable\n+    Foo(x, *y)\n+}\n+\n+// CHECK: attributes #0 = {{{.*}} noreturn {{.*}}}\n+\n+// CHECK: DISubprogram(name: \"empty\", {{.*}} DIFlagNoReturn\n+// CHECK: DISubprogram(name: \"foo\", {{.*}} DIFlagNoReturn"}]}