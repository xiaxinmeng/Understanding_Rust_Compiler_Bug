{"sha": "6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "node_id": "C_kwDOAAsO6NoAKDZiMDhhNzQ1YTRkNTllOWJmNTFkMmQ1OTFjNTY5YzllNzU4YmQwMmE", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-19T09:30:11Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-21T12:28:09Z"}, "message": "Rename `forget_ref` lint to `forgetting_references`", "tree": {"sha": "a76b8c68be69e58e5a04ddbd3256e74f6b500834", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a76b8c68be69e58e5a04ddbd3256e74f6b500834"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "html_url": "https://github.com/rust-lang/rust/commit/6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c93d9c1794eb8d57fd2f108547192c3aeb92b505", "url": "https://api.github.com/repos/rust-lang/rust/commits/c93d9c1794eb8d57fd2f108547192c3aeb92b505", "html_url": "https://github.com/rust-lang/rust/commit/c93d9c1794eb8d57fd2f108547192c3aeb92b505"}], "stats": {"total": 54, "additions": 27, "deletions": 27}, "files": [{"sha": "e1658d3ff82b7fe2f56cc37d855b32bd98431601", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -529,7 +529,7 @@ lint_dropping_copy_types = calls to `std::mem::drop` with a value that implement\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n \n-lint_forget_ref = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n+lint_forgetting_references = calls to `std::mem::forget` with a reference instead of an owned value does nothing\n     .label = argument has type `{$arg_ty}`\n     .note = use `let _ = ...` to ignore the expression or result\n "}, {"sha": "ed2b384805e056a9a0d2c605e8a5af74972f86bc", "filename": "compiler/rustc_lint/src/drop_forget_useless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fdrop_forget_useless.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -35,7 +35,7 @@ declare_lint! {\n }\n \n declare_lint! {\n-    /// The `forget_ref` lint checks for calls to `std::mem::forget` with a reference\n+    /// The `forgetting_references` lint checks for calls to `std::mem::forget` with a reference\n     /// instead of an owned value.\n     ///\n     /// ### Example\n@@ -52,7 +52,7 @@ declare_lint! {\n     /// Calling `forget` on a reference will only forget the\n     /// reference itself, which is a no-op. It will not forget the underlying\n     /// referenced value, which is likely what was intended.\n-    pub FORGET_REF,\n+    pub FORGETTING_REFERENCES,\n     Warn,\n     \"calls to `std::mem::forget` with a reference instead of an owned value\"\n }\n@@ -109,7 +109,7 @@ declare_lint! {\n     \"calls to `std::mem::forget` with a value that implements Copy\"\n }\n \n-declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGET_REF, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES]);\n+declare_lint_pass!(DropForgetUseless => [DROPPING_REFERENCES, FORGETTING_REFERENCES, DROPPING_COPY_TYPES, FORGETTING_COPY_TYPES]);\n \n impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetUseless {\n                     cx.emit_spanned_lint(DROPPING_REFERENCES, expr.span, DropRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_forget if arg_ty.is_ref() => {\n-                    cx.emit_spanned_lint(FORGET_REF, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n+                    cx.emit_spanned_lint(FORGETTING_REFERENCES, expr.span, ForgetRefDiag { arg_ty, label: arg.span });\n                 },\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => {\n                     cx.emit_spanned_lint(DROPPING_COPY_TYPES, expr.span, DropCopyDiag { arg_ty, label: arg.span });"}, {"sha": "de1c2be287576287cac7cc59358c40aded7d9851", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -682,7 +682,7 @@ pub struct DropCopyDiag<'a> {\n }\n \n #[derive(LintDiagnostic)]\n-#[diag(lint_forget_ref)]\n+#[diag(lint_forgetting_references)]\n #[note]\n pub struct ForgetRefDiag<'a> {\n     pub arg_ty: Ty<'a>,"}, {"sha": "9c60edb179415b62140008d8f9f60e4347d1fc4d", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                // early return for uplifted lints: dropping_references, dropping_copy_types, forget_ref, forgetting_copy_types\n+                // early return for uplifted lints: dropping_references, dropping_copy_types, forgetting_references, forgetting_copy_types\n                 sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => return,\n                 sym::mem_forget if arg_ty.is_ref() => return,\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => return,"}, {"sha": "b0db56bb417ea37a6d2fb04413ade1ebe686ed6a", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -39,7 +39,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::for_loop_over_result\", \"for_loops_over_fallibles\"),\n     (\"clippy::for_loops_over_fallibles\", \"for_loops_over_fallibles\"),\n     (\"clippy::forget_copy\", \"forgetting_copy_types\"),\n-    (\"clippy::forget_ref\", \"forget_ref\"),\n+    (\"clippy::forget_ref\", \"forgetting_references\"),\n     (\"clippy::into_iter_on_array\", \"array_into_iter\"),\n     (\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\"),\n     (\"clippy::invalid_ref\", \"invalid_value\"),"}, {"sha": "dfe45dec8a7456f33b7f70bcb4f1c0260a31d27c", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -34,7 +34,7 @@\n #![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n #![allow(forgetting_copy_types)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]\n@@ -83,7 +83,7 @@\n #![warn(for_loops_over_fallibles)]\n #![warn(for_loops_over_fallibles)]\n #![warn(forgetting_copy_types)]\n-#![warn(forget_ref)]\n+#![warn(forgetting_references)]\n #![warn(array_into_iter)]\n #![warn(invalid_atomic_ordering)]\n #![warn(invalid_value)]"}, {"sha": "ce8eca5a3081c8959f027c105ea89651614c55f3", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -34,7 +34,7 @@\n #![allow(dropping_references)]\n #![allow(for_loops_over_fallibles)]\n #![allow(forgetting_copy_types)]\n-#![allow(forget_ref)]\n+#![allow(forgetting_references)]\n #![allow(array_into_iter)]\n #![allow(invalid_atomic_ordering)]\n #![allow(invalid_value)]"}, {"sha": "3fca60aa2ebd33baaa438e14b3e2f371805fc6ec", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -222,11 +222,11 @@ error: lint `clippy::forget_copy` has been renamed to `forgetting_copy_types`\n LL | #![warn(clippy::forget_copy)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_copy_types`\n \n-error: lint `clippy::forget_ref` has been renamed to `forget_ref`\n+error: lint `clippy::forget_ref` has been renamed to `forgetting_references`\n   --> $DIR/rename.rs:86:9\n    |\n LL | #![warn(clippy::forget_ref)]\n-   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forget_ref`\n+   |         ^^^^^^^^^^^^^^^^^^ help: use the new name: `forgetting_references`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n   --> $DIR/rename.rs:87:9"}, {"sha": "36d1ef5c53e930fcd8cb0dbc05b0bc1dc02cd76e", "filename": "tests/ui/lint/forgetting_copy_types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_copy_types.stderr?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -32,7 +32,7 @@ LL |     forget(s3);\n    |            argument has type `&SomeStruct`\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n-   = note: `#[warn(forget_ref)]` on by default\n+   = note: `#[warn(forgetting_references)]` on by default\n \n warning: calls to `std::mem::forget` with a value that implements `Copy` does nothing\n   --> $DIR/forgetting_copy_types.rs:37:5"}, {"sha": "bd51e98003159df98c4bddd9867118f283aa5509", "filename": "tests/ui/lint/forgetting_references.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.rs?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![warn(forget_ref)]\n+#![warn(forgetting_references)]\n \n use std::mem::forget;\n ", "previous_filename": "tests/ui/lint/forget_ref.rs"}, {"sha": "5624b690789f88d257cff55a16a3ad5b05fcd4c9", "filename": "tests/ui/lint/forgetting_references.stderr", "status": "renamed", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b08a745a4d59e9bf51d2d591c569c9e758bd02a/tests%2Fui%2Flint%2Fforgetting_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Fforgetting_references.stderr?ref=6b08a745a4d59e9bf51d2d591c569c9e758bd02a", "patch": "@@ -1,5 +1,5 @@\n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:10:5\n+  --> $DIR/forgetting_references.rs:10:5\n    |\n LL |     forget(&SomeStruct);\n    |     ^^^^^^^-----------^\n@@ -8,13 +8,13 @@ LL |     forget(&SomeStruct);\n    |\n    = note: use `let _ = ...` to ignore the expression or result\n note: the lint level is defined here\n-  --> $DIR/forget_ref.rs:3:9\n+  --> $DIR/forgetting_references.rs:3:9\n    |\n-LL | #![warn(forget_ref)]\n-   |         ^^^^^^^^^^\n+LL | #![warn(forgetting_references)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:13:5\n+  --> $DIR/forgetting_references.rs:13:5\n    |\n LL |     forget(&owned);\n    |     ^^^^^^^------^\n@@ -24,7 +24,7 @@ LL |     forget(&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:14:5\n+  --> $DIR/forgetting_references.rs:14:5\n    |\n LL |     forget(&&owned);\n    |     ^^^^^^^-------^\n@@ -34,7 +34,7 @@ LL |     forget(&&owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:15:5\n+  --> $DIR/forgetting_references.rs:15:5\n    |\n LL |     forget(&mut owned);\n    |     ^^^^^^^----------^\n@@ -44,7 +44,7 @@ LL |     forget(&mut owned);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:19:5\n+  --> $DIR/forgetting_references.rs:19:5\n    |\n LL |     forget(&*reference1);\n    |     ^^^^^^^------------^\n@@ -54,7 +54,7 @@ LL |     forget(&*reference1);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:22:5\n+  --> $DIR/forgetting_references.rs:22:5\n    |\n LL |     forget(reference2);\n    |     ^^^^^^^----------^\n@@ -64,7 +64,7 @@ LL |     forget(reference2);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:25:5\n+  --> $DIR/forgetting_references.rs:25:5\n    |\n LL |     forget(reference3);\n    |     ^^^^^^^----------^\n@@ -74,7 +74,7 @@ LL |     forget(reference3);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:30:5\n+  --> $DIR/forgetting_references.rs:30:5\n    |\n LL |     forget(&val);\n    |     ^^^^^^^----^\n@@ -84,7 +84,7 @@ LL |     forget(&val);\n    = note: use `let _ = ...` to ignore the expression or result\n \n warning: calls to `std::mem::forget` with a reference instead of an owned value does nothing\n-  --> $DIR/forget_ref.rs:38:5\n+  --> $DIR/forgetting_references.rs:38:5\n    |\n LL |     std::mem::forget(&SomeStruct);\n    |     ^^^^^^^^^^^^^^^^^-----------^", "previous_filename": "tests/ui/lint/forget_ref.stderr"}]}