{"sha": "9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhYjJhZjU2YWE0YThiNmYxMWE0Mjc1NjcxZmQ3OTQ3YzAyNTFhMGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-04T14:04:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-03-04T14:04:28Z"}, "message": "Rustup to rustc 1.43.0-nightly (4ad624882 2020-03-03)", "tree": {"sha": "d82bdd0d9b951eec11095a167b481118005928cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d82bdd0d9b951eec11095a167b481118005928cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "html_url": "https://github.com/rust-lang/rust/commit/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc1165300d7d63040904012d09a2556222c8aedd", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc1165300d7d63040904012d09a2556222c8aedd", "html_url": "https://github.com/rust-lang/rust/commit/dc1165300d7d63040904012d09a2556222c8aedd"}], "stats": {"total": 40, "additions": 19, "deletions": 21}, "files": [{"sha": "abfcf301a53476ef3dcc2940897cfab81f6f3807", "filename": "build_sysroot/alloc_system/lib.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/build_sysroot%2Falloc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/build_sysroot%2Falloc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_sysroot%2Falloc_system%2Flib.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -72,12 +72,14 @@ pub struct System;\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n unsafe impl AllocRef for System {\n     #[inline]\n-    unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc(self, layout)).ok_or(AllocErr)\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n+        NonNull::new(GlobalAlloc::alloc(self, layout)).ok_or(AllocErr).map(|p| (p, layout.size()))\n     }\n     #[inline]\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {\n-        NonNull::new(GlobalAlloc::alloc_zeroed(self, layout)).ok_or(AllocErr)\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<(NonNull<u8>, usize), AllocErr> {\n+        NonNull::new(GlobalAlloc::alloc_zeroed(self, layout))\n+        .ok_or(AllocErr)\n+        .map(|p| (p, layout.size()))\n     }\n     #[inline]\n     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout) {\n@@ -87,8 +89,10 @@ unsafe impl AllocRef for System {\n     unsafe fn realloc(&mut self,\n                       ptr: NonNull<u8>,\n                       layout: Layout,\n-                      new_size: usize) -> Result<NonNull<u8>, AllocErr> {\n-        NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size)).ok_or(AllocErr)\n+                      new_size: usize) -> Result<(NonNull<u8>, usize), AllocErr> {\n+        NonNull::new(GlobalAlloc::realloc(self, ptr.as_ptr(), layout, new_size))\n+            .ok_or(AllocErr)\n+            .map(|p| (p, layout.size()))\n     }\n }\n #[cfg(any(windows, unix, target_os = \"cloudabi\", target_os = \"redox\"))]"}, {"sha": "382ba99538d805ec227e4d3cd91d9bbfb41244f6", "filename": "example/mini_core_hello_world.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fmini_core_hello_world.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -1,7 +1,7 @@\n // Adapted from https://github.com/sunfishcode/mir2cranelift/blob/master/rust-examples/nocore-hello-world.rs\n \n #![feature(\n-    no_core, unboxed_closures, start, lang_items, box_syntax, slice_patterns, never_type, linkage,\n+    no_core, unboxed_closures, start, lang_items, box_syntax, never_type, linkage,\n     extern_types, thread_local\n )]\n #![no_core]"}, {"sha": "baf9a9c526eb5dce54a5cc53fdc7f9095b049d1e", "filename": "example/std_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -84,7 +84,7 @@ fn main() {\n     let empty: [i32; 0] = [];\n     assert!(empty.is_sorted());\n \n-    println!(\"{:?}\", unsafe { std::intrinsics::caller_location() });\n+    println!(\"{:?}\", std::intrinsics::caller_location());\n \n     unsafe {\n         test_simd();"}, {"sha": "2cb84786f56d02e55dc36d9c5515e5bf499c2309", "filename": "example/subslice-patterns-const-eval.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fsubslice-patterns-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/example%2Fsubslice-patterns-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fsubslice-patterns-const-eval.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -4,8 +4,6 @@\n \n // run-pass\n \n-#![feature(slice_patterns)]\n-\n #[derive(PartialEq, Debug, Clone)]\n struct N(u8);\n "}, {"sha": "5b13884152fa584c556775849ed56d09009f9ee5", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -1 +1 @@\n-nightly-2020-02-29\n+nightly-2020-03-04"}, {"sha": "eeead3050d8b016c6de0160da5ba5200c673e75c", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -10,7 +10,7 @@\n \n use crate::prelude::*;\n \n-use syntax::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n+use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n \n /// Returns whether an allocator shim was created\n pub fn codegen(tcx: TyCtxt<'_>, module: &mut Module<impl Backend + 'static>) -> bool {"}, {"sha": "19ca3ea770306e23b4d257009ca4e96a0a99754e", "filename": "src/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Farchive.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -94,7 +94,7 @@ impl<'a> ArchiveBuilder<'a> for ArArchiveBuilder<'a> {\n         ));\n     }\n \n-    fn add_native_library(&mut self, name: syntax::ast::Name) {\n+    fn add_native_library(&mut self, name: rustc_ast::ast::Name) {\n         let location = find_library(name, &self.config.lib_search_paths, self.config.sess);\n         self.add_archive(location.clone(), |_| false)\n             .unwrap_or_else(|e| {"}, {"sha": "ddd3c3cef0788701bf3b6811b23c0fb076d1873f", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -555,7 +555,7 @@ fn trans_stmt<'tcx>(\n         | StatementKind::AscribeUserType(..) => {}\n \n         StatementKind::InlineAsm(asm) => {\n-            use syntax::ast::Name;\n+            use rustc_ast::ast::Name;\n             let InlineAsm {\n                 asm,\n                 outputs: _,\n@@ -568,7 +568,7 @@ fn trans_stmt<'tcx>(\n                 clobbers,      // Vec<Name>\n                 volatile,      // bool\n                 alignstack,    // bool\n-                dialect: _,    // syntax::ast::AsmDialect\n+                dialect: _,    // rustc_ast::ast::AsmDialect\n                 asm_str_style: _,\n             } = asm;\n             match &*asm_code.as_str() {"}, {"sha": "e82ddaaf7492553bf0d9fdf5e119442f40270255", "filename": "src/constant.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -439,10 +439,6 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for TransPlaceInterpreter {\n         panic!();\n     }\n \n-    fn find_foreign_static(_: TyCtxt<'tcx>, _: DefId) -> InterpResult<'tcx, Cow<'tcx, Allocation>> {\n-        panic!();\n-    }\n-\n     fn binary_ptr_op(\n         _: &InterpCx<'mir, 'tcx, Self>,\n         _: mir::BinOp,"}, {"sha": "85e0fb047e4daef7055cb168e20a804da3fd5810", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ab2af56aa4a8b6f11a4275671fd7947c0251a0b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9ab2af56aa4a8b6f11a4275671fd7947c0251a0b", "patch": "@@ -17,7 +17,7 @@ extern crate rustc_mir;\n extern crate rustc_session;\n extern crate rustc_span;\n extern crate rustc_target;\n-extern crate syntax;\n+extern crate rustc_ast;\n \n use std::any::Any;\n \n@@ -67,7 +67,7 @@ mod prelude {\n     pub use std::collections::{HashMap, HashSet};\n     pub use std::convert::{TryFrom, TryInto};\n \n-    pub use syntax::ast::{FloatTy, IntTy, UintTy};\n+    pub use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n     pub use rustc_span::{Pos, Span};\n \n     pub use rustc::bug;"}]}