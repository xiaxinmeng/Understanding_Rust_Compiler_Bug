{"sha": "0788cd23ea6e3f1b05240d591870899b9d38f5f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3ODhjZDIzZWE2ZTNmMWIwNTI0MGQ1OTE4NzA4OTliOWQzOGY1ZjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T06:58:59Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-03-08T19:52:10Z"}, "message": "rustbuild: Use an enum to indicate destination\n\nInstead of using a `is_std: bool`, instead use a more well-typed and\nself-documenting enum to indicate the mode in which Cargo is being invoked.", "tree": {"sha": "4475a5f4b48fbf34373f1b16b818fdc0f94473a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4475a5f4b48fbf34373f1b16b818fdc0f94473a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0788cd23ea6e3f1b05240d591870899b9d38f5f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0788cd23ea6e3f1b05240d591870899b9d38f5f4", "html_url": "https://github.com/rust-lang/rust/commit/0788cd23ea6e3f1b05240d591870899b9d38f5f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0788cd23ea6e3f1b05240d591870899b9d38f5f4/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee6df13f0c25ce567b12459d1f34216334832920", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6df13f0c25ce567b12459d1f34216334832920", "html_url": "https://github.com/rust-lang/rust/commit/ee6df13f0c25ce567b12459d1f34216334832920"}], "stats": {"total": 104, "additions": 61, "deletions": 43}, "files": [{"sha": "db8c3e50907bed7eaeb02dc9ab6ab6676cbd4029", "filename": "src/bootstrap/build/compile.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcompile.rs?ref=0788cd23ea6e3f1b05240d591870899b9d38f5f4", "patch": "@@ -16,7 +16,7 @@ use std::process::Command;\n use build_helper::output;\n \n use build::util::{exe, staticlib, libdir, mtime, is_dylib};\n-use build::{Build, Compiler};\n+use build::{Build, Compiler, Mode};\n \n /// Build the standard library.\n ///\n@@ -39,9 +39,10 @@ pub fn std<'a>(build: &'a Build, stage: u32, target: &str,\n \n     build_startup_objects(build, target, &libdir);\n \n-    let out_dir = build.cargo_out(stage, &host, true, target);\n+    let out_dir = build.cargo_out(stage, &host, Mode::Libstd, target);\n     build.clear_if_dirty(&out_dir, &build.compiler_path(compiler));\n-    let mut cargo = build.cargo(stage, compiler, true, target, \"build\");\n+    let mut cargo = build.cargo(stage, compiler, Mode::Libstd, Some(target),\n+                                \"build\");\n     cargo.arg(\"--features\").arg(build.std_features())\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"));\n@@ -71,7 +72,7 @@ pub fn std_link(build: &Build,\n                 compiler: &Compiler,\n                 host: &str) {\n     let libdir = build.sysroot_libdir(stage, host, target);\n-    let out_dir = build.cargo_out(stage, compiler.host, true, target);\n+    let out_dir = build.cargo_out(stage, compiler.host, Mode::Libstd, target);\n \n     // If we're linking one compiler host's output into another, then we weren't\n     // called from the `std` method above. In that case we clean out what's\n@@ -135,10 +136,11 @@ pub fn rustc<'a>(build: &'a Build, stage: u32, target: &str,\n     println!(\"Building stage{} compiler artifacts ({} -> {})\", stage,\n              host, target);\n \n-    let out_dir = build.cargo_out(stage, &host, false, target);\n+    let out_dir = build.cargo_out(stage, &host, Mode::Librustc, target);\n     build.clear_if_dirty(&out_dir, &libstd_shim(build, stage, &host, target));\n \n-    let mut cargo = build.cargo(stage, compiler, false, target, \"build\");\n+    let mut cargo = build.cargo(stage, compiler, Mode::Librustc, Some(target),\n+                                \"build\");\n     cargo.arg(\"--features\").arg(build.rustc_features(stage))\n          .arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/Cargo.toml\"));\n@@ -200,14 +202,14 @@ pub fn rustc_link(build: &Build,\n                   compiler: &Compiler,\n                   host: &str) {\n     let libdir = build.sysroot_libdir(stage, host, target);\n-    let out_dir = build.cargo_out(stage, compiler.host, false, target);\n+    let out_dir = build.cargo_out(stage, compiler.host, Mode::Librustc, target);\n     add_to_sysroot(&out_dir, &libdir);\n }\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n fn libstd_shim(build: &Build, stage: u32, host: &str, target: &str) -> PathBuf {\n-    build.cargo_out(stage, host, true, target).join(\"libstd_shim.rlib\")\n+    build.cargo_out(stage, host, Mode::Libstd, target).join(\"libstd_shim.rlib\")\n }\n \n fn compiler_file(compiler: &Path, file: &str) -> String {\n@@ -239,7 +241,8 @@ pub fn assemble_rustc(build: &Build, stage: u32, host: &str) {\n         }\n     }\n \n-    let out_dir = build.cargo_out(stage - 1, &build.config.build, false, host);\n+    let out_dir = build.cargo_out(stage - 1, &build.config.build,\n+                                  Mode::Librustc, host);\n \n     // Link the compiler binary itself into place\n     let rustc = out_dir.join(exe(\"rustc\", host));"}, {"sha": "5107b4e1353745fa043f15151598833c14a0c35a", "filename": "src/bootstrap/build/doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fdoc.rs?ref=0788cd23ea6e3f1b05240d591870899b9d38f5f4", "patch": "@@ -12,7 +12,7 @@ use std::path::Path;\n use std::fs::{self, File};\n use std::io::prelude::*;\n \n-use build::{Build, Compiler};\n+use build::{Build, Compiler, Mode};\n use build::util::{up_to_date, cp_r};\n \n pub fn rustbook(build: &Build, stage: u32, host: &str, name: &str, out: &Path) {\n@@ -106,14 +106,14 @@ pub fn standalone(build: &Build, stage: u32, host: &str, out: &Path) {\n pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n     println!(\"Documenting stage{} std ({})\", stage, host);\n     let compiler = Compiler::new(stage, host);\n-    let out_dir = build.stage_out(stage, host, true)\n+    let out_dir = build.stage_out(stage, host, Mode::Libstd)\n                        .join(host).join(\"doc\");\n     let rustdoc = build.tool(&compiler, \"rustdoc\");\n     if !up_to_date(&rustdoc, &out_dir.join(\"std/index.html\")) {\n         t!(fs::remove_dir_all(&out_dir));\n     }\n \n-    let mut cargo = build.cargo(stage, &compiler, true, host,\n+    let mut cargo = build.cargo(stage, &compiler, Mode::Libstd, Some(host),\n                                 \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/std_shim/Cargo.toml\"))\n@@ -125,13 +125,13 @@ pub fn std(build: &Build, stage: u32, host: &str, out: &Path) {\n pub fn rustc(build: &Build, stage: u32, host: &str, out: &Path) {\n     println!(\"Documenting stage{} compiler ({})\", stage, host);\n     let compiler = Compiler::new(stage, host);\n-    let out_dir = build.stage_out(stage, host, false)\n+    let out_dir = build.stage_out(stage, host, Mode::Librustc)\n                        .join(host).join(\"doc\");\n     let rustdoc = build.tool(&compiler, \"rustdoc\");\n     if !up_to_date(&rustdoc, &out_dir.join(\"rustc/index.html\")) {\n         t!(fs::remove_dir_all(&out_dir));\n     }\n-    let mut cargo = build.cargo(stage, &compiler, false, host,\n+    let mut cargo = build.cargo(stage, &compiler, Mode::Librustc, Some(host),\n                                 \"doc\");\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(\"src/rustc/Cargo.toml\"))"}, {"sha": "3acd34b4e94d9aca87f800a9667091b4e9244809", "filename": "src/bootstrap/build/mod.rs", "status": "modified", "additions": 44, "deletions": 29, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0788cd23ea6e3f1b05240d591870899b9d38f5f4/src%2Fbootstrap%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fmod.rs?ref=0788cd23ea6e3f1b05240d591870899b9d38f5f4", "patch": "@@ -83,6 +83,12 @@ pub struct Build {\n     compiler_rt_built: RefCell<HashMap<String, PathBuf>>,\n }\n \n+pub enum Mode {\n+    Libstd,\n+    Librustc,\n+    Tool,\n+}\n+\n impl Build {\n     pub fn new(flags: Flags, config: Config) -> Build {\n         let cwd = t!(env::current_dir());\n@@ -241,14 +247,17 @@ impl Build {\n     /// Cargo for the specified stage, whether or not the standard library is\n     /// being built, and using the specified compiler targeting `target`.\n     // FIXME: aren't stage/compiler duplicated?\n-    fn cargo(&self, stage: u32, compiler: &Compiler, is_std: bool,\n-             target: &str, cmd: &str) -> Command {\n+    fn cargo(&self,\n+             stage: u32,\n+             compiler: &Compiler,\n+             mode: Mode,\n+             target: Option<&str>,\n+             cmd: &str) -> Command {\n         let mut cargo = Command::new(&self.cargo);\n         let host = compiler.host;\n-        let out_dir = self.stage_out(stage, host, is_std);\n+        let out_dir = self.stage_out(stage, host, mode);\n         cargo.env(\"CARGO_TARGET_DIR\", out_dir)\n              .arg(cmd)\n-             .arg(\"--target\").arg(target)\n              .arg(\"-j\").arg(self.jobs().to_string());\n \n         // Customize the compiler we're running. Specify the compiler to cargo\n@@ -265,24 +274,28 @@ impl Build {\n              .env(\"RUSTC_SNAPSHOT\", &self.rustc)\n              .env(\"RUSTC_SYSROOT\", self.sysroot(stage, host))\n              .env(\"RUSTC_SNAPSHOT_LIBDIR\", self.rustc_snapshot_libdir())\n-             .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"))\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.tool(compiler, \"rustdoc\"));\n \n-        // Specify some variuos options for build scripts used throughout the\n-        // build.\n-        //\n-        // FIXME: the guard against msvc shouldn't need to be here\n-        if !target.contains(\"msvc\") {\n-            cargo.env(format!(\"CC_{}\", target), self.cc(target))\n-                 .env(format!(\"AR_{}\", target), self.ar(target))\n-                 .env(format!(\"CFLAGS_{}\", target), self.cflags(target));\n-        }\n+        if let Some(target) = target {\n+             cargo.env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n+             cargo.arg(\"--target\").arg(target);\n+\n+            // Specify some various options for build scripts used throughout\n+            // the build.\n+            //\n+            // FIXME: the guard against msvc shouldn't need to be here\n+            if !target.contains(\"msvc\") {\n+                cargo.env(format!(\"CC_{}\", target), self.cc(target))\n+                     .env(format!(\"AR_{}\", target), self.ar(target))\n+                     .env(format!(\"CFLAGS_{}\", target), self.cflags(target));\n+            }\n \n-        // Environment variables *required* needed throughout the build\n-        //\n-        // FIXME: should update code to not require this env vars\n-        cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n+            // Environment variables *required* needed throughout the build\n+            //\n+            // FIXME: should update code to not require this env vars\n+            cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n+        }\n \n         if self.config.verbose || self.flags.verbose {\n             cargo.arg(\"-v\");\n@@ -306,7 +319,7 @@ impl Build {\n \n     /// Get the specified tool next to the specified compiler\n     fn tool(&self, compiler: &Compiler, tool: &str) -> PathBuf {\n-        self.stage_out(compiler.stage, compiler.host, false)\n+        self.stage_out(compiler.stage, compiler.host, Mode::Tool)\n             .join(self.cargo_dir())\n             .join(exe(tool, compiler.host))\n     }\n@@ -319,8 +332,8 @@ impl Build {\n         let host = compiler.host;\n         let stage = compiler.stage;\n         let paths = vec![\n-            self.cargo_out(stage, host, true, host).join(\"deps\"),\n-            self.cargo_out(stage, host, false, host).join(\"deps\"),\n+            self.cargo_out(stage, host, Mode::Libstd, host).join(\"deps\"),\n+            self.cargo_out(stage, host, Mode::Librustc, host).join(\"deps\"),\n         ];\n         add_lib_path(paths, &mut cmd);\n         return cmd\n@@ -363,7 +376,7 @@ impl Build {\n \n     fn sysroot(&self, stage: u32, host: &str) -> PathBuf {\n         if stage == 0 {\n-            self.stage_out(stage, host, false)\n+            self.stage_out(stage, host, Mode::Librustc)\n         } else {\n             self.out.join(host).join(format!(\"stage{}\", stage))\n         }\n@@ -377,19 +390,21 @@ impl Build {\n     /// Returns the root directory for all output generated in a particular\n     /// stage when running with a particular host compiler.\n     ///\n-    /// The `is_std` flag indicates whether the root directory is for the\n-    /// bootstrap of the standard library or for the compiler.\n-    fn stage_out(&self, stage: u32, host: &str, is_std: bool) -> PathBuf {\n-        self.out.join(host)\n-            .join(format!(\"stage{}{}\", stage, if is_std {\"-std\"} else {\"-rustc\"}))\n+    /// The mode indicates what the root directory is for.\n+    fn stage_out(&self, stage: u32, host: &str, mode: Mode) -> PathBuf {\n+        let suffix = match mode {\n+            Mode::Libstd => \"-std\",\n+            _ => \"-rustc\",\n+        };\n+        self.out.join(host).join(format!(\"stage{}{}\", stage, suffix))\n     }\n \n     /// Returns the root output directory for all Cargo output in a given stage,\n     /// running a particular comipler, wehther or not we're building the\n     /// standard library, and targeting the specified architecture.\n-    fn cargo_out(&self, stage: u32, host: &str, is_std: bool,\n+    fn cargo_out(&self, stage: u32, host: &str, mode: Mode,\n                  target: &str) -> PathBuf {\n-        self.stage_out(stage, host, is_std).join(target).join(self.cargo_dir())\n+        self.stage_out(stage, host, mode).join(target).join(self.cargo_dir())\n     }\n \n     /// Root output directory for LLVM compiled for `target`"}]}