{"sha": "cdd805506e7a01d60906f8b153afb697d687609d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZDgwNTUwNmU3YTAxZDYwOTA2ZjhiMTUzYWZiNjk3ZDY4NzYwOWQ=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-07T13:57:11Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-17T13:29:46Z"}, "message": "Replace DiagnosticBuilder with Diagnostic when emitting error", "tree": {"sha": "6658569a67824f7f59aeea3b3a1c395a2f05d7e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6658569a67824f7f59aeea3b3a1c395a2f05d7e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdd805506e7a01d60906f8b153afb697d687609d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdd805506e7a01d60906f8b153afb697d687609d", "html_url": "https://github.com/rust-lang/rust/commit/cdd805506e7a01d60906f8b153afb697d687609d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdd805506e7a01d60906f8b153afb697d687609d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5670d048c0f88af9976b5505c7853b23dd06770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5670d048c0f88af9976b5505c7853b23dd06770d", "html_url": "https://github.com/rust-lang/rust/commit/5670d048c0f88af9976b5505c7853b23dd06770d"}], "stats": {"total": 86, "additions": 60, "deletions": 26}, "files": [{"sha": "af9cb5a0941e5698e5348890c352a5df6cf0b89d", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -1040,6 +1040,7 @@ fn default_emitter(\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n+    let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n     match (sopts.error_format, emitter_dest) {\n         (config::ErrorOutputType::HumanReadable(kind), dst) => {\n             let (short, color_config) = kind.unzip();\n@@ -1048,6 +1049,7 @@ fn default_emitter(\n                 let emitter = AnnotateSnippetEmitterWriter::new(\n                     Some(source_map.clone()),\n                     short,\n+                    external_macro_backtrace,\n                 );\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n             } else {\n@@ -1058,6 +1060,7 @@ fn default_emitter(\n                         short,\n                         sopts.debugging_opts.teach,\n                         sopts.debugging_opts.terminal_width,\n+                        external_macro_backtrace,\n                     ),\n                     Some(dst) => EmitterWriter::new(\n                         dst,\n@@ -1066,6 +1069,7 @@ fn default_emitter(\n                         false, // no teach messages when writing to a buffer\n                         false, // no colors when writing to a buffer\n                         None,  // no terminal width\n+                        external_macro_backtrace,\n                     ),\n                 };\n                 Box::new(emitter.ui_testing(sopts.debugging_opts.ui_testing))\n@@ -1077,6 +1081,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n+                external_macro_backtrace,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n         (config::ErrorOutputType::Json { pretty, json_rendered }, Some(dst)) => Box::new(\n@@ -1086,6 +1091,7 @@ fn default_emitter(\n                 source_map.clone(),\n                 pretty,\n                 json_rendered,\n+                external_macro_backtrace,\n             ).ui_testing(sopts.debugging_opts.ui_testing),\n         ),\n     }\n@@ -1382,10 +1388,10 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Fatal);\n@@ -1396,10 +1402,10 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n-            Box::new(EmitterWriter::stderr(color_config, None, short, false, None))\n+            Box::new(EmitterWriter::stderr(color_config, None, short, false, None, false))\n         }\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n-            Box::new(JsonEmitter::basic(pretty, json_rendered)),\n+            Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n     handler.emit(&MultiSpan::new(), msg, errors::Level::Warning);"}, {"sha": "38a0818d290bd8ff08081fc24249cbad7cccf77f", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -22,7 +22,7 @@ use rustc::util::common::{time_depth, set_time_depth, print_time_passes_entry};\n use rustc::util::profiling::SelfProfiler;\n use rustc_fs_util::link_or_copy;\n use rustc_data_structures::svh::Svh;\n-use rustc_errors::{Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n+use rustc_errors::{Handler, Level, FatalError, DiagnosticId};\n use rustc_errors::emitter::{Emitter};\n use rustc_target::spec::MergeFunctions;\n use syntax::attr;\n@@ -1725,7 +1725,7 @@ impl SharedEmitter {\n }\n \n impl Emitter for SharedEmitter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &rustc_errors::Diagnostic) {\n         drop(self.sender.send(SharedEmitterMessage::Diagnostic(Diagnostic {\n             msg: db.message(),\n             code: db.code.clone(),"}, {"sha": "3a09f459e9c1fab692b39854c4d7a2c7ec8fc338", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -1196,6 +1196,7 @@ pub fn report_ice(info: &panic::PanicInfo<'_>, bug_report_url: &str) {\n         false,\n         false,\n         None,\n+        false,\n     ));\n     let handler = errors::Handler::with_emitter(true, None, emitter);\n "}, {"sha": "0281d10fd930ee1ac290f77a5848176e0201b52c", "filename": "src/librustc_errors/annotate_snippet_emitter_writer.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fannotate_snippet_emitter_writer.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -7,7 +7,7 @@\n \n use syntax_pos::{SourceFile, MultiSpan, Loc};\n use crate::{\n-    Level, CodeSuggestion, DiagnosticBuilder, Emitter,\n+    Level, CodeSuggestion, Diagnostic, Emitter,\n     SourceMapperDyn, SubDiagnostic, DiagnosticId\n };\n use crate::emitter::FileWithAnnotatedLines;\n@@ -25,19 +25,21 @@ pub struct AnnotateSnippetEmitterWriter {\n     short_message: bool,\n     /// If true, will normalize line numbers with `LL` to prevent noise in UI test diffs.\n     ui_testing: bool,\n+\n+    external_macro_backtrace: bool,\n }\n \n impl Emitter for AnnotateSnippetEmitterWriter {\n     /// The entry point for the diagnostics generation\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         self.fix_multispans_in_std_macros(&self.source_map,\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler().flags.external_macro_backtrace);\n+                                          self.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    db.message(),\n@@ -163,12 +165,14 @@ impl<'a>  DiagnosticConverter<'a> {\n impl AnnotateSnippetEmitterWriter {\n     pub fn new(\n         source_map: Option<Lrc<SourceMapperDyn>>,\n-        short_message: bool\n+        short_message: bool,\n+        external_macro_backtrace: bool,\n     ) -> Self {\n         Self {\n             source_map,\n             short_message,\n             ui_testing: false,\n+            external_macro_backtrace,\n         }\n     }\n "}, {"sha": "c5274c7e99a514c5ef4952a43e02714c064b77ae", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -12,7 +12,7 @@ use Destination::*;\n use syntax_pos::{SourceFile, Span, MultiSpan};\n \n use crate::{\n-    Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic,\n+    Level, CodeSuggestion, Diagnostic, SubDiagnostic,\n     SuggestionStyle, SourceMapperDyn, DiagnosticId,\n };\n use crate::Level::Error;\n@@ -52,10 +52,12 @@ impl HumanReadableErrorType {\n         source_map: Option<Lrc<SourceMapperDyn>>,\n         teach: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let (short, color_config) = self.unzip();\n         let color = color_config.suggests_using_colors();\n-        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width)\n+        EmitterWriter::new(dst, source_map, short, teach, color, terminal_width,\n+            external_macro_backtrace)\n     }\n }\n \n@@ -180,7 +182,7 @@ const ANONYMIZED_LINE_NUM: &str = \"LL\";\n /// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>);\n+    fn emit_diagnostic(&mut self, db: &Diagnostic);\n \n     /// Emit a notification that an artifact has been output.\n     /// This is currently only supported for the JSON format,\n@@ -204,7 +206,7 @@ pub trait Emitter {\n     ///   we return the original `primary_span` and the original suggestions.\n     fn primary_span_formatted<'a>(\n         &mut self,\n-        db: &'a DiagnosticBuilder<'_>\n+        db: &'a Diagnostic\n     ) -> (MultiSpan, &'a [CodeSuggestion]) {\n         let mut primary_span = db.span.clone();\n         if let Some((sugg, rest)) = db.suggestions.split_first() {\n@@ -377,15 +379,15 @@ pub trait Emitter {\n }\n \n impl Emitter for EmitterWriter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n+    fn emit_diagnostic(&mut self, db: &Diagnostic) {\n         let mut children = db.children.clone();\n         let (mut primary_span, suggestions) = self.primary_span_formatted(&db);\n \n         self.fix_multispans_in_std_macros(&self.sm,\n                                           &mut primary_span,\n                                           &mut children,\n                                           &db.level,\n-                                          db.handler().flags.external_macro_backtrace);\n+                                          self.external_macro_backtrace);\n \n         self.emit_messages_default(&db.level,\n                                    &db.styled_message(),\n@@ -449,6 +451,8 @@ pub struct EmitterWriter {\n     teach: bool,\n     ui_testing: bool,\n     terminal_width: Option<usize>,\n+\n+    external_macro_backtrace: bool,\n }\n \n #[derive(Debug)]\n@@ -465,6 +469,7 @@ impl EmitterWriter {\n         short_message: bool,\n         teach: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         let dst = Destination::from_stderr(color_config);\n         EmitterWriter {\n@@ -474,6 +479,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n+            external_macro_backtrace,\n         }\n     }\n \n@@ -484,6 +490,7 @@ impl EmitterWriter {\n         teach: bool,\n         colored: bool,\n         terminal_width: Option<usize>,\n+        external_macro_backtrace: bool,\n     ) -> EmitterWriter {\n         EmitterWriter {\n             dst: Raw(dst, colored),\n@@ -492,6 +499,7 @@ impl EmitterWriter {\n             teach,\n             ui_testing: false,\n             terminal_width,\n+            external_macro_backtrace,\n         }\n     }\n "}, {"sha": "4ff18578bca6a807c58007c70d7f0746d0c1ffab", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -383,7 +383,8 @@ impl Handler {\n                                       cm: Option<Lrc<SourceMapperDyn>>,\n                                       flags: HandlerFlags)\n                                       -> Handler {\n-        let emitter = Box::new(EmitterWriter::stderr(color_config, cm, false, false, None));\n+        let emitter = Box::new(EmitterWriter::stderr(\n+            color_config, cm, false, false, None, flags.external_macro_backtrace));\n         Handler::with_emitter_and_flags(emitter, flags)\n     }\n "}, {"sha": "010e4cf6cd0d53c8bee7bc78224a6dedb63d7799", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -193,6 +193,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     short,\n                     sessopts.debugging_opts.teach,\n                     sessopts.debugging_opts.terminal_width,\n+                    false,\n                 ).ui_testing(ui_testing)\n             )\n         },\n@@ -205,6 +206,7 @@ pub fn new_handler(error_format: ErrorOutputType,\n                     source_map,\n                     pretty,\n                     json_rendered,\n+                    false,\n                 ).ui_testing(ui_testing)\n             )\n         },"}, {"sha": "424239c9982373b25a4981f800dd8a07b8ff1992", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -401,7 +401,7 @@ pub fn make_test(s: &str,\n         // Any errors in parsing should also appear when the doctest is compiled for real, so just\n         // send all the errors that libsyntax emits directly into a `Sink` instead of stderr.\n         let cm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n-        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None);\n+        let emitter = EmitterWriter::new(box io::sink(), None, false, false, false, None, false);\n         // FIXME(misdreavus): pass `-Z treat-err-as-bug` to the doctest parser\n         let handler = Handler::with_emitter(false, None, box emitter);\n         let sess = ParseSess::with_span_handler(handler, cm);"}, {"sha": "5cdea3aabbe11f7552ae0d5e17f40347272ac3b9", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -12,7 +12,7 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n \n use errors::registry::Registry;\n-use errors::{DiagnosticBuilder, SubDiagnostic, CodeSuggestion, SourceMapper};\n+use errors::{SubDiagnostic, CodeSuggestion, SourceMapper};\n use errors::{DiagnosticId, Applicability};\n use errors::emitter::{Emitter, HumanReadableErrorType};\n \n@@ -32,6 +32,7 @@ pub struct JsonEmitter {\n     pretty: bool,\n     ui_testing: bool,\n     json_rendered: HumanReadableErrorType,\n+    external_macro_backtrace: bool,\n }\n \n impl JsonEmitter {\n@@ -40,6 +41,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst: Box::new(io::stderr()),\n@@ -48,13 +50,18 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            external_macro_backtrace,\n         }\n     }\n \n-    pub fn basic(pretty: bool, json_rendered: HumanReadableErrorType) -> JsonEmitter {\n+    pub fn basic(\n+        pretty: bool,\n+        json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n+    ) -> JsonEmitter {\n         let file_path_mapping = FilePathMapping::empty();\n         JsonEmitter::stderr(None, Lrc::new(SourceMap::new(file_path_mapping)),\n-                            pretty, json_rendered)\n+                            pretty, json_rendered, external_macro_backtrace)\n     }\n \n     pub fn new(\n@@ -63,6 +70,7 @@ impl JsonEmitter {\n         source_map: Lrc<SourceMap>,\n         pretty: bool,\n         json_rendered: HumanReadableErrorType,\n+        external_macro_backtrace: bool,\n     ) -> JsonEmitter {\n         JsonEmitter {\n             dst,\n@@ -71,6 +79,7 @@ impl JsonEmitter {\n             pretty,\n             ui_testing: false,\n             json_rendered,\n+            external_macro_backtrace,\n         }\n     }\n \n@@ -80,8 +89,8 @@ impl JsonEmitter {\n }\n \n impl Emitter for JsonEmitter {\n-    fn emit_diagnostic(&mut self, db: &DiagnosticBuilder<'_>) {\n-        let data = Diagnostic::from_diagnostic_builder(db, self);\n+    fn emit_diagnostic(&mut self, db: &errors::Diagnostic) {\n+        let data = Diagnostic::from_errors_diagnostic(db, self);\n         let result = if self.pretty {\n             writeln!(&mut self.dst, \"{}\", as_pretty_json(&data))\n         } else {\n@@ -189,7 +198,7 @@ struct ArtifactNotification<'a> {\n }\n \n impl Diagnostic {\n-    fn from_diagnostic_builder(db: &DiagnosticBuilder<'_>,\n+    fn from_errors_diagnostic(db: &errors::Diagnostic,\n                                je: &JsonEmitter)\n                                -> Diagnostic {\n         let sugg = db.suggestions.iter().map(|sugg| {\n@@ -219,8 +228,9 @@ impl Diagnostic {\n         }\n         let buf = BufWriter::default();\n         let output = buf.clone();\n-        je.json_rendered.new_emitter(Box::new(buf), Some(je.sm.clone()), false, None)\n-            .ui_testing(je.ui_testing).emit_diagnostic(db);\n+        je.json_rendered.new_emitter(\n+            Box::new(buf), Some(je.sm.clone()), false, None, je.external_macro_backtrace\n+        ).ui_testing(je.ui_testing).emit_diagnostic(db);\n         let output = Arc::try_unwrap(output.0).unwrap().into_inner().unwrap();\n         let output = String::from_utf8(output).unwrap();\n "}, {"sha": "de301b1fc499d9aa43048174657fc88cbdacc67d", "filename": "src/libsyntax/parse/lexer/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Ftests.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -18,6 +18,7 @@ fn mk_sess(sm: Lrc<SourceMap>) -> ParseSess {\n         false,\n         false,\n         None,\n+        false,\n     );\n     ParseSess::with_span_handler(Handler::with_emitter(true, None, Box::new(emitter)), sm)\n }"}, {"sha": "f510ac9273d097ab45ff6f6220b61ce899c781fb", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdd805506e7a01d60906f8b153afb697d687609d/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=cdd805506e7a01d60906f8b153afb697d687609d", "patch": "@@ -147,6 +147,7 @@ fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &\n             false,\n             false,\n             None,\n+            false,\n         );\n         let handler = Handler::with_emitter(true, None, Box::new(emitter));\n         handler.span_err(msp, \"foo\");"}]}