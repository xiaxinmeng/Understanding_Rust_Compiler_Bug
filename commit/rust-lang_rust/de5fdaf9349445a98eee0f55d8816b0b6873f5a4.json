{"sha": "de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNWZkYWY5MzQ5NDQ1YTk4ZWVlMGY1NWQ4ODE2YjBiNjg3M2Y1YTQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-14T15:34:21Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:52Z"}, "message": "convert ast::meta_items to take @~strs", "tree": {"sha": "6d9510b7e62398b493d4f93257246b85adc39888", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d9510b7e62398b493d4f93257246b85adc39888"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "html_url": "https://github.com/rust-lang/rust/commit/de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b754788d5cef4b03eee0af6137e0195ef5680c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b754788d5cef4b03eee0af6137e0195ef5680c", "html_url": "https://github.com/rust-lang/rust/commit/a2b754788d5cef4b03eee0af6137e0195ef5680c"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "32c88bbbd2e5a4f06f47334a5302617a2d0f471e", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -499,15 +499,15 @@ pub fn build_link_meta(sess: Session, c: &ast::crate, output: &Path,\n \n         fn hash(symbol_hasher: &hash::State, m: &@ast::meta_item) {\n             match m.node {\n-              ast::meta_name_value(ref key, value) => {\n-                symbol_hasher.write_str(len_and_str((*key)));\n+              ast::meta_name_value(key, value) => {\n+                symbol_hasher.write_str(len_and_str(*key));\n                 symbol_hasher.write_str(len_and_str_lit(value));\n               }\n-              ast::meta_word(ref name) => {\n-                symbol_hasher.write_str(len_and_str((*name)));\n+              ast::meta_word(name) => {\n+                symbol_hasher.write_str(len_and_str(*name));\n               }\n-              ast::meta_list(ref name, ref mis) => {\n-                symbol_hasher.write_str(len_and_str((*name)));\n+              ast::meta_list(name, ref mis) => {\n+                symbol_hasher.write_str(len_and_str(*name));\n                 for mis.each |m_| {\n                     hash(symbol_hasher, m_);\n                 }"}, {"sha": "49b9f834275887c41f79c0b755143f832431845e", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -346,7 +346,7 @@ pub mod test {\n             style: ast::attr_outer,\n             value: codemap::respan(codemap::dummy_sp(),\n                 ast::meta_name_value(\n-                    ~\"crate_type\",\n+                    @~\"crate_type\",\n                     codemap::respan(codemap::dummy_sp(),\n                                      ast::lit_str(@t)))),\n             is_sugared_doc: false"}, {"sha": "281d1ea7305926ce96ad5f885cf1914f6ae57622", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -51,7 +51,7 @@ fn inject_libcore_ref(sess: Session,\n                     spanned(ast::attribute_ {\n                         style: ast::attr_inner,\n                         value: spanned(ast::meta_name_value(\n-                            ~\"vers\",\n+                            @~\"vers\",\n                             spanned(ast::lit_str(@CORE_VERSION.to_str()))\n                         )),\n                         is_sugared_doc: false"}, {"sha": "ddd09a8b83735c38cb49621aa7404029fb8ad0d8", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -262,7 +262,7 @@ mod __test {\n fn mk_std(cx: &TestCtxt) -> @ast::view_item {\n     let vers = ast::lit_str(@~\"0.6\");\n     let vers = nospan(vers);\n-    let mi = ast::meta_name_value(~\"vers\", vers);\n+    let mi = ast::meta_name_value(@~\"vers\", vers);\n     let mi = nospan(mi);\n     let id_std = cx.sess.ident_of(~\"std\");\n     let vi = if is_std(cx) {"}, {"sha": "2956b0579f5010c5e5437131d876def3d3d99dc0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -1017,19 +1017,19 @@ fn write_int(writer: io::Writer, &&n: int) {\n \n fn encode_meta_item(ebml_w: writer::Encoder, mi: meta_item) {\n     match mi.node {\n-      meta_word(ref name) => {\n+      meta_word(name) => {\n         ebml_w.start_tag(tag_meta_item_word);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::to_bytes((*name)));\n+        ebml_w.writer.write(str::to_bytes(*name));\n         ebml_w.end_tag();\n         ebml_w.end_tag();\n       }\n-      meta_name_value(ref name, value) => {\n+      meta_name_value(name, value) => {\n         match value.node {\n           lit_str(value) => {\n             ebml_w.start_tag(tag_meta_item_name_value);\n             ebml_w.start_tag(tag_meta_item_name);\n-            ebml_w.writer.write(str::to_bytes((*name)));\n+            ebml_w.writer.write(str::to_bytes(*name));\n             ebml_w.end_tag();\n             ebml_w.start_tag(tag_meta_item_value);\n             ebml_w.writer.write(str::to_bytes(*value));\n@@ -1039,10 +1039,10 @@ fn encode_meta_item(ebml_w: writer::Encoder, mi: meta_item) {\n           _ => {/* FIXME (#623): encode other variants */ }\n         }\n       }\n-      meta_list(ref name, ref items) => {\n+      meta_list(name, ref items) => {\n         ebml_w.start_tag(tag_meta_item_list);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::to_bytes((*name)));\n+        ebml_w.writer.write(str::to_bytes(*name));\n         ebml_w.end_tag();\n         for items.each |inner_item| {\n             encode_meta_item(ebml_w, **inner_item);\n@@ -1127,7 +1127,7 @@ fn encode_crate_deps(ecx: @encode_ctxt,\n         let mut deps = ~[];\n         do cstore::iter_crate_data(cstore) |key, val| {\n             let dep = {cnum: key,\n-                       name: ecx.tcx.sess.ident_of(/*bad*/copy val.name),\n+                       name: ecx.tcx.sess.ident_of(/*bad*/ copy val.name),\n                        vers: decoder::get_crate_vers(val.data),\n                        hash: decoder::get_crate_hash(val.data)};\n             deps.push(dep);"}, {"sha": "7bb2e7e4c16161c6ccc0164d75a4e835e1c36c0a", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -321,7 +321,7 @@ impl LanguageItemCollector {\n                 match literal.node {\n                     lit_str(value) => {\n                         self.match_and_collect_item(item_def_id,\n-                                                    (/*bad*/copy *key),\n+                                                    (/*bad*/copy **key),\n                                                     /*bad*/copy *value);\n                     }\n                     _ => {} // Skip."}, {"sha": "ea9cb579753650dad2714988d3c24c60449b8365", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -346,13 +346,13 @@ impl ctxt {\n \n         for triples.each |pair| {\n             let (meta, level, lintname) = /*bad*/copy *pair;\n-            match self.dict.find(&lintname) {\n+            match self.dict.find(&*lintname) {\n               None => {\n                 self.span_lint(\n                     new_ctxt.get_level(unrecognized_lint),\n                     meta.span,\n                     fmt!(\"unknown `%s` attribute: `%s`\",\n-                         level_to_str(level), lintname));\n+                         level_to_str(level), *lintname));\n               }\n               Some(lint) => {\n \n@@ -363,7 +363,7 @@ impl ctxt {\n                         meta.span,\n                         fmt!(\"%s(%s) overruled by outer forbid(%s)\",\n                              level_to_str(level),\n-                             lintname, lintname));\n+                             *lintname, *lintname));\n                 }\n \n                 // we do multiple unneeded copies of the"}, {"sha": "3dfe128951946e753aed012a7470c6f04659e90c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -783,11 +783,11 @@ pub fn mk_ctxt(s: session::Session,\n     let mut legacy_records = false;\n     for crate.node.attrs.each |attribute| {\n         match attribute.node.value.node {\n-            ast::meta_word(ref w) if (*w) == ~\"legacy_modes\" => {\n+            ast::meta_word(w) if *w == ~\"legacy_modes\" => {\n                 legacy_modes = true;\n                 if legacy_records { break; }\n             }\n-            ast::meta_word(ref w) if (*w) == ~\"legacy_records\" => {\n+            ast::meta_word(w) if *w == ~\"legacy_records\" => {\n                 legacy_records = true;\n                 if legacy_modes { break; }\n             }"}, {"sha": "98ce4052eeb038e6c57bc08d89b45848355c2d51", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -89,7 +89,7 @@ impl PackageScript {\n                     ast::meta_name_value(v, spanned {\n                                                 node: ast::lit_str(s),\n                                                 span: _}) => {\n-                        match v {\n+                        match *v {\n                             ~\"id\" => id = Some(*s),\n                             ~\"vers\" => vers = Some(*s),\n                             _ => ()\n@@ -112,7 +112,7 @@ impl PackageScript {\n                     ast::meta_name_value(v, spanned {\n                                                 node: ast::lit_str(s),\n                                                 span: _}) => {\n-                        match v {\n+                        match *v {\n                             ~\"url\" => url = Some(*s),\n                             ~\"target\" => target = Some(*s),\n                             _ => ()\n@@ -133,7 +133,7 @@ impl PackageScript {\n                     ast::meta_name_value(v, spanned {\n                                                 node: ast::lit_str(s),\n                                                 span: _}) => {\n-                        match v {\n+                        match *v {\n                             ~\"file\" => file = Some(*s),\n                             _ => ()\n                         }\n@@ -148,7 +148,7 @@ impl PackageScript {\n         for crate.node.attrs.each |a| {\n             match a.node.value.node {\n                 ast::meta_list(v, mis) => {\n-                    match v {\n+                    match *v {\n                         ~\"pkg\" => {\n                             let (i, v) = load_pkg_attr(mis);\n "}, {"sha": "7f7b3e75b6fc11e762a156bfde96e2087581f619", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -110,7 +110,7 @@ fn fold_item(ctx: @ReadyCtx, item: @ast::item,\n                 ast::meta_list(_, mis) => {\n                     for mis.each |mi| {\n                         match mi.node {\n-                            ast::meta_word(cmd) => cmds.push(cmd),\n+                            ast::meta_word(cmd) => cmds.push(copy *cmd),\n                             _ => {}\n                         };\n                     }\n@@ -639,7 +639,7 @@ pub fn compile_input(sysroot: Option<Path>, input: driver::input, dir: &Path,\n             match a.node {\n                 ast::meta_name_value(v, spanned {node: ast::lit_str(s),\n                                          span: _}) => {\n-                    match v {\n+                    match *v {\n                         ~\"name\" => name = Some(*s),\n                         ~\"vers\" => vers = Some(*s),\n                         ~\"uuid\" => uuid = Some(*s),\n@@ -657,13 +657,13 @@ pub fn compile_input(sysroot: Option<Path>, input: driver::input, dir: &Path,\n         match a.node.value.node {\n             ast::meta_name_value(v, spanned {node: ast::lit_str(s),\n                                      span: _}) => {\n-                match v {\n+                match *v {\n                     ~\"crate_type\" => crate_type = Some(*s),\n                     _ => {}\n                 }\n             }\n             ast::meta_list(v, mis) => {\n-                match v {\n+                match *v {\n                     ~\"link\" => {\n                         let (n, v, u) = load_link_attr(mis);\n "}, {"sha": "234cef5f6eb4da5ed1b95d119251cdc7ae076c54", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -173,9 +173,9 @@ pub type meta_item = spanned<meta_item_>;\n #[auto_decode]\n #[deriving_eq]\n pub enum meta_item_ {\n-    meta_word(~str),\n-    meta_list(~str, ~[@meta_item]),\n-    meta_name_value(~str, lit),\n+    meta_word(@~str),\n+    meta_list(@~str, ~[@meta_item]),\n+    meta_name_value(@~str, lit),\n }\n \n pub type blk = spanned<blk_>;"}, {"sha": "14ffb1cab5da417e947fc82d5c3854e30c6cc00b", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -37,16 +37,16 @@ pub fn mk_name_value_item_str(name: @~str, value: @~str)\n \n pub fn mk_name_value_item(name: @~str, +value: ast::lit)\n         -> @ast::meta_item {\n-    @dummy_spanned(ast::meta_name_value(/*bad*/ copy *name, value))\n+    @dummy_spanned(ast::meta_name_value(name, value))\n }\n \n pub fn mk_list_item(name: @~str, +items: ~[@ast::meta_item]) ->\n    @ast::meta_item {\n-    @dummy_spanned(ast::meta_list(/*bad*/ copy *name, items))\n+    @dummy_spanned(ast::meta_list(name, items))\n }\n \n pub fn mk_word_item(name: @~str) -> @ast::meta_item {\n-    @dummy_spanned(ast::meta_word(/*bad*/ copy *name))\n+    @dummy_spanned(ast::meta_word(name))\n }\n \n pub fn mk_attr(item: @ast::meta_item) -> ast::attribute {\n@@ -60,7 +60,7 @@ pub fn mk_sugared_doc_attr(text: ~str,\n     let lit = spanned(lo, hi, ast::lit_str(@text));\n     let attr = ast::attribute_ {\n         style: doc_comment_style(text),\n-        value: spanned(lo, hi, ast::meta_name_value(~\"doc\", lit)),\n+        value: spanned(lo, hi, ast::meta_name_value(@~\"doc\", lit)),\n         is_sugared_doc: true\n     };\n     spanned(lo, hi, attr)\n@@ -96,9 +96,9 @@ pub pure fn get_attr_name(attr: &ast::attribute) -> @~str {\n \n pub pure fn get_meta_item_name(meta: @ast::meta_item) -> @~str {\n     match meta.node {\n-        ast::meta_word(ref n) => @/*bad*/ copy *n,\n-        ast::meta_name_value(ref n, _) => @/*bad*/ copy *n,\n-        ast::meta_list(ref n, _) => @/*bad*/ copy *n,\n+        ast::meta_word(n) => n,\n+        ast::meta_name_value(n, _) => n,\n+        ast::meta_list(n, _) => n,\n     }\n }\n \n@@ -343,8 +343,8 @@ pub fn find_inline_attr(attrs: &[ast::attribute]) -> inline_attr {\n     // FIXME (#2809)---validate the usage of #[inline] and #[inline(always)]\n     do vec::foldl(ia_none, attrs) |ia,attr| {\n         match attr.node.value.node {\n-          ast::meta_word(~\"inline\") => ia_hint,\n-          ast::meta_list(~\"inline\", items) => {\n+          ast::meta_word(@~\"inline\") => ia_hint,\n+          ast::meta_list(@~\"inline\", items) => {\n             if !vec::is_empty(find_meta_items_by_name(items, ~\"always\")) {\n                 ia_always\n             } else if !vec::is_empty("}, {"sha": "f4d0e57c5958d2d5faf60e7e305720144e76f3ff", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -228,9 +228,10 @@ pub impl ext_ctxt_ast_builder for ext_ctxt {\n         let non_camel_case_attribute = respan(dummy_sp(), ast::attribute_ {\n             style: ast::attr_outer,\n             value: respan(dummy_sp(),\n-                          ast::meta_list(~\"allow\", ~[\n+                          ast::meta_list(@~\"allow\", ~[\n                               @respan(dummy_sp(),\n-                                      ast::meta_word(~\"non_camel_case_types\"))\n+                                      ast::meta_word(\n+                                         @~\"non_camel_case_types\"))\n                           ])),\n             is_sugared_doc: false\n         });"}, {"sha": "34ac5c16841a11b0ffb381aa5b55b4e943c098cb", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -126,23 +126,23 @@ impl parser_attr for Parser {\n \n     fn parse_meta_item() -> @ast::meta_item {\n         let lo = self.span.lo;\n-        let name = *self.id_to_str(self.parse_ident());\n+        let name = self.id_to_str(self.parse_ident());\n         match self.token {\n-          token::EQ => {\n-            self.bump();\n-            let lit = self.parse_lit();\n-            let mut hi = self.span.hi;\n-            return @spanned(lo, hi, ast::meta_name_value(name, lit));\n-          }\n-          token::LPAREN => {\n-            let inner_items = self.parse_meta_seq();\n-            let mut hi = self.span.hi;\n-            return @spanned(lo, hi, ast::meta_list(name, inner_items));\n-          }\n-          _ => {\n-            let mut hi = self.span.hi;\n-            return @spanned(lo, hi, ast::meta_word(name));\n-          }\n+            token::EQ => {\n+                self.bump();\n+                let lit = self.parse_lit();\n+                let mut hi = self.span.hi;\n+                @spanned(lo, hi, ast::meta_name_value(name, lit))\n+            }\n+            token::LPAREN => {\n+                let inner_items = self.parse_meta_seq();\n+                let mut hi = self.span.hi;\n+                @spanned(lo, hi, ast::meta_list(name, inner_items))\n+            }\n+            _ => {\n+                let mut hi = self.span.hi;\n+                @spanned(lo, hi, ast::meta_word(name))\n+            }\n         }\n     }\n "}, {"sha": "6fea6fd82bb9ff5f57f807283e21fd83816dd942", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de5fdaf9349445a98eee0f55d8816b0b6873f5a4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=de5fdaf9349445a98eee0f55d8816b0b6873f5a4", "patch": "@@ -1816,13 +1816,13 @@ pub fn print_type_params(s: @ps, &&params: ~[ast::ty_param]) {\n pub fn print_meta_item(s: @ps, &&item: @ast::meta_item) {\n     ibox(s, indent_unit);\n     match item.node {\n-      ast::meta_word(ref name) => word(s.s, *name),\n-      ast::meta_name_value(ref name, value) => {\n+      ast::meta_word(name) => word(s.s, *name),\n+      ast::meta_name_value(name, value) => {\n         word_space(s, *name);\n         word_space(s, ~\"=\");\n         print_literal(s, @value);\n       }\n-      ast::meta_list(ref name, ref items) => {\n+      ast::meta_list(name, ref items) => {\n         word(s.s, *name);\n         popen(s);\n         commasep("}]}