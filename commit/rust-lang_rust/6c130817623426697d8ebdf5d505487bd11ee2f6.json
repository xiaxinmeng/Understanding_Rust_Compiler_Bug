{"sha": "6c130817623426697d8ebdf5d505487bd11ee2f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjMTMwODE3NjIzNDI2Njk3ZDhlYmRmNWQ1MDU0ODdiZDExZWUyZjY=", "commit": {"author": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-07-31T18:35:14Z"}, "committer": {"name": "ksqsf", "email": "i@ksqsf.moe", "date": "2019-07-31T18:35:14Z"}, "message": "Rename {copied,cloned} to {copied,cloned}_ok, and add {copied,cloned} to copy/clone both Ok and Err", "tree": {"sha": "f4d153d22fa8d758a3d7b3da53a457a218951f01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d153d22fa8d758a3d7b3da53a457a218951f01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c130817623426697d8ebdf5d505487bd11ee2f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c130817623426697d8ebdf5d505487bd11ee2f6", "html_url": "https://github.com/rust-lang/rust/commit/6c130817623426697d8ebdf5d505487bd11ee2f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c130817623426697d8ebdf5d505487bd11ee2f6/comments", "author": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ksqsf", "id": 23358293, "node_id": "MDQ6VXNlcjIzMzU4Mjkz", "avatar_url": "https://avatars.githubusercontent.com/u/23358293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ksqsf", "html_url": "https://github.com/ksqsf", "followers_url": "https://api.github.com/users/ksqsf/followers", "following_url": "https://api.github.com/users/ksqsf/following{/other_user}", "gists_url": "https://api.github.com/users/ksqsf/gists{/gist_id}", "starred_url": "https://api.github.com/users/ksqsf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ksqsf/subscriptions", "organizations_url": "https://api.github.com/users/ksqsf/orgs", "repos_url": "https://api.github.com/users/ksqsf/repos", "events_url": "https://api.github.com/users/ksqsf/events{/privacy}", "received_events_url": "https://api.github.com/users/ksqsf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a36b0dba1d7a350bba04b1abf256f057b3d1079", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a36b0dba1d7a350bba04b1abf256f057b3d1079", "html_url": "https://github.com/rust-lang/rust/commit/5a36b0dba1d7a350bba04b1abf256f057b3d1079"}], "stats": {"total": 144, "additions": 140, "deletions": 4}, "files": [{"sha": "0aa8fcb69b9c6406022750b2bf1201da2041407c", "filename": "src/libcore/result.rs", "status": "modified", "additions": 140, "deletions": 4, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/6c130817623426697d8ebdf5d505487bd11ee2f6/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c130817623426697d8ebdf5d505487bd11ee2f6/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=6c130817623426697d8ebdf5d505487bd11ee2f6", "patch": "@@ -835,7 +835,7 @@ impl<T: Copy, E> Result<&T, E> {\n     /// assert_eq!(copied, Ok(12));\n     /// ```\n     #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn copied(self) -> Result<T, E> {\n+    pub fn copied_ok(self) -> Result<T, E> {\n         self.map(|&t| t)\n     }\n }\n@@ -855,7 +855,7 @@ impl<T: Copy, E> Result<&mut T, E> {\n     /// assert_eq!(copied, Ok(12));\n     /// ```\n     #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn copied(self) -> Result<T, E> {\n+    pub fn copied_ok(self) -> Result<T, E> {\n         self.map(|&mut t| t)\n     }\n }\n@@ -900,6 +900,74 @@ impl<T, E: Copy> Result<T, &mut E> {\n     }\n }\n \n+impl<T: Copy, E: Copy> Result<&T, &E> {\n+    /// Maps a `Result<&T, &E>` to a `Result<T, E>` by copying the\n+    /// contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// assert_eq!(Err(&1), Err(1));\n+    /// assert_eq!(Ok(&42), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.copied_ok().copied_err()\n+    }\n+}\n+\n+impl<T: Copy, E: Copy> Result<&mut T, &E> {\n+    /// Maps a `Result<&mut T, &E>` to a `Result<T, E>` by copying the\n+    /// contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// assert_eq!(Err(&1), Err(1));\n+    /// assert_eq!(Ok(&mut 42), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.copied_ok().copied_err()\n+    }\n+}\n+\n+impl<T: Copy, E: Copy> Result<&T, &mut E> {\n+    /// Maps a `Result<&T, &mut E>` to a `Result<T, E>` by copying the\n+    /// contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// assert_eq!(Err(&mut 1), Err(1));\n+    /// assert_eq!(Ok(&42), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.copied_ok().copied_err()\n+    }\n+}\n+\n+impl<T: Copy, E: Copy> Result<&mut T, &mut E> {\n+    /// Maps a `Result<&mut T, &mut E>` to a `Result<T, E>` by copying\n+    /// the contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_copied)]\n+    /// assert_eq!(Err(&mut 1), Err(1));\n+    /// assert_eq!(Ok(&mut 42), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_copied\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn copied(self) -> Result<T, E> {\n+        self.copied_ok().copied_err()\n+    }\n+}\n+\n impl<T: Clone, E> Result<&T, E> {\n     /// Maps a `Result<&T, E>` to a `Result<T, E>` by cloning the contents of the\n     /// `Ok` part.\n@@ -915,7 +983,7 @@ impl<T: Clone, E> Result<&T, E> {\n     /// assert_eq!(cloned, Ok(12));\n     /// ```\n     #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn cloned(self) -> Result<T, E> {\n+    pub fn cloned_ok(self) -> Result<T, E> {\n         self.map(|t| t.clone())\n     }\n }\n@@ -935,7 +1003,7 @@ impl<T: Clone, E> Result<&mut T, E> {\n     /// assert_eq!(cloned, Ok(12));\n     /// ```\n     #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n-    pub fn cloned(self) -> Result<T, E> {\n+    pub fn cloned_ok(self) -> Result<T, E> {\n         self.map(|t| t.clone())\n     }\n }\n@@ -980,6 +1048,74 @@ impl<T, E: Clone> Result<T, &mut E> {\n     }\n }\n \n+impl<T: Clone, E: Clone> Result<&T, &E> {\n+    /// Maps a `Result<&T, &E>` to a `Result<T, E>` by cloning the contents of the\n+    /// result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// assert_eq!(Err(&1).cloned(), Err(1));\n+    /// assert_eq!(Ok(&42).cloned(), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.cloned_ok().cloned_err()\n+    }\n+}\n+\n+impl<T: Clone, E: Clone> Result<&mut T, &E> {\n+    /// Maps a `Result<&mut T, &E>` to a `Result<T, E>` by cloning the\n+    /// contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// assert_eq!(Err(&1).cloned(), Err(1));\n+    /// assert_eq!(Ok(&mut 42).cloned(), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.cloned_ok().cloned_err()\n+    }\n+}\n+\n+impl<T: Clone, E: Clone> Result<&T, &mut E> {\n+    /// Maps a `Result<&T, &mut E>` to a `Result<T, E>` by cloning the\n+    /// contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// assert_eq!(Err(&mut 1).cloned(), Err(1));\n+    /// assert_eq!(Ok(&42).cloned(), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.cloned_ok().cloned_err()\n+    }\n+}\n+\n+impl<T: Clone, E: Clone> Result<&mut T, &mut E> {\n+    /// Maps a `Result<&mut T, &mut E>` to a `Result<T, E>` by cloning\n+    /// the contents of the result.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(result_cloned)]\n+    /// assert_eq!(Err(&mut 1).cloned(), Err(1));\n+    /// assert_eq!(Ok(&mut 42).cloned(), Ok(42));\n+    /// ```\n+    #[unstable(feature = \"result_cloned\", reason = \"newly added\", issue = \"63168\")]\n+    pub fn cloned(self) -> Result<T, E> {\n+        self.cloned_ok().cloned_err()\n+    }\n+}\n+\n impl<T, E: fmt::Debug> Result<T, E> {\n     /// Unwraps a result, yielding the content of an [`Ok`].\n     ///"}]}