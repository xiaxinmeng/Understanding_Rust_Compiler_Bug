{"sha": "5ea3c96938e6defa894c4ae646a75ba00c4dce22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYTNjOTY5MzhlNmRlZmE4OTRjNGFlNjQ2YTc1YmEwMGM0ZGNlMjI=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-03T15:07:26Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-03T15:18:40Z"}, "message": "Wire in resolution of param bounds for method calls\n\nIssue #1227", "tree": {"sha": "29e1f046ab8e0ef64a3f18c763a0dae4a3c73809", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29e1f046ab8e0ef64a3f18c763a0dae4a3c73809"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ea3c96938e6defa894c4ae646a75ba00c4dce22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3c96938e6defa894c4ae646a75ba00c4dce22", "html_url": "https://github.com/rust-lang/rust/commit/5ea3c96938e6defa894c4ae646a75ba00c4dce22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ea3c96938e6defa894c4ae646a75ba00c4dce22/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506a6ec38b4e5f5fc80d8c6bfc388e5cdba4d772", "url": "https://api.github.com/repos/rust-lang/rust/commits/506a6ec38b4e5f5fc80d8c6bfc388e5cdba4d772", "html_url": "https://github.com/rust-lang/rust/commit/506a6ec38b4e5f5fc80d8c6bfc388e5cdba4d772"}], "stats": {"total": 76, "additions": 61, "deletions": 15}, "files": [{"sha": "1b1eb83c4a21b92b69a980e9cd35d9a7b67def90", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=5ea3c96938e6defa894c4ae646a75ba00c4dce22", "patch": "@@ -1462,8 +1462,6 @@ fn constrs_eq(cs: [@constr], ds: [@constr]) -> bool {\n // Type lookups\n fn node_id_to_ty_param_substs_opt_and_ty(cx: ctxt, id: ast::node_id) ->\n    ty_param_substs_opt_and_ty {\n-\n-\n     // Pull out the node type table.\n     alt smallintmap::find(*cx.node_types, id as uint) {\n       none. {"}, {"sha": "662516141dc80d1afee0d8995ccd6896eb9c56de", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5ea3c96938e6defa894c4ae646a75ba00c4dce22", "patch": "@@ -2875,11 +2875,21 @@ type dict_map = hashmap<ast::node_id, dict_res>;\n // Detect points where an interface-bounded type parameter is instantiated,\n // resolve the impls for the parameters.\n fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n-                   crate: @ast::crate) -> dict_map {\n+                 method_map: method_map, crate: @ast::crate) -> dict_map {\n     type ccx = {tcx: ty::ctxt,\n                 impl_map: resolve::impl_map,\n+                method_map: method_map,\n                 dict_map: dict_map};\n-    let cx = {tcx: tcx, impl_map: impl_map, dict_map: new_int_hash()};\n+    let cx = {tcx: tcx, impl_map: impl_map,\n+              method_map: method_map, dict_map: new_int_hash()};\n+    \n+    fn has_iface_bounds(tps: [ty::param_bounds]) -> bool {\n+        vec::any(tps, {|bs|\n+            vec::any(*bs, {|b|\n+                alt b { ty::bound_iface(_) { true } _ { false } }\n+            })\n+        })\n+    }\n     fn resolve_expr(ex: @ast::expr, cx: ccx, v: visit::vt<ccx>) {\n         alt ex.node {\n           ast::expr_path(_) {\n@@ -2889,14 +2899,25 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n               some(ts) {\n                 let did = ast_util::def_id_of_def(cx.tcx.def_map.get(ex.id));\n                 let item_ty = ty::lookup_item_type(cx.tcx, did);\n-                if vec::any(*item_ty.bounds, {|bs|\n-                    vec::any(*bs, {|b|\n-                        alt b { ty::bound_iface(_) { true } _ { false } }\n-                    })\n-                }) {\n+                if has_iface_bounds(*item_ty.bounds) {\n                     let impls = cx.impl_map.get(ex.id);\n                     cx.dict_map.insert(ex.id, lookup_dicts(\n-                        cx.tcx, impls, ex.span, *item_ty.bounds, ts));\n+                        cx.tcx, impls, ex.span, item_ty.bounds, ts));\n+                }\n+              }\n+              _ {}\n+            }\n+          }\n+          // Must resolve bounds on methods with bounded params\n+          ast::expr_field(_, _, _) {\n+            alt cx.method_map.find(ex.id) {\n+              some(method_static(did)) {\n+                let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n+                if has_iface_bounds(*bounds) {\n+                    let tys = ty::node_id_to_type_params(cx.tcx, ex.id);\n+                    let iscs = cx.impl_map.get(ex.id);\n+                    cx.dict_map.insert(ex.id, lookup_dicts(\n+                        cx.tcx, iscs, ex.span, bounds, tys));\n                 }\n               }\n               _ {}\n@@ -2906,8 +2927,9 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n         }\n         visit::visit_expr(ex, cx, v);\n     }\n+\n     fn lookup_dicts(tcx: ty::ctxt, isc: resolve::iscopes, sp: span,\n-                      bounds: [ty::param_bounds], tys: [ty::t])\n+                    bounds: @[ty::param_bounds], tys: [ty::t])\n         -> dict_res {\n         let result = [], i = 0u;\n         for ty in tys {\n@@ -2923,6 +2945,7 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n         }\n         @result\n     }\n+\n     fn lookup_dict(tcx: ty::ctxt, isc: resolve::iscopes, sp: span,\n                      ty: ty::t, iface_ty: ty::t) -> dict_origin {\n         let iface_id = alt ty::struct(tcx, iface_ty) {\n@@ -2951,6 +2974,7 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n                 for im in *impls {\n                     if im.iface_did == some(iface_id) {\n                         let self_ty = impl_self_ty(tcx, im.did).ty;\n+                        let im_bs = ty::lookup_item_type(tcx, im.did).bounds;\n                         let params = @mutable [mutable];\n                         alt ty::unify::unify(ty, self_ty,\n                                              ty::unify::bind_params(params),\n@@ -2963,9 +2987,10 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n                             } else {\n                                 let params = vec::map_mut(\n                                     *params, {|p| option::get(p)});\n-                                // FIXME[impl] check for sub-bounds\n-                                found = some(dict_static(\n-                                    im.did, params, @[]));\n+                                let subres = lookup_dicts(tcx, isc, sp,\n+                                                          im_bs, params);\n+                                found = some(dict_static(im.did, params,\n+                                                         subres));\n                             }\n                           }\n                           _ {}\n@@ -2985,6 +3010,7 @@ fn resolve_dicts(tcx: ty::ctxt, impl_map: resolve::impl_map,\n             ty_to_str(tcx, iface_ty) + \" for \" +\n             ty_to_str(tcx, ty));\n     }\n+\n     visit::visit_crate(*crate, cx, visit::mk_vt(@{\n         visit_expr: resolve_expr\n         with *visit::default_visitor()\n@@ -3006,7 +3032,7 @@ fn check_crate(tcx: ty::ctxt, impl_map: resolve::impl_map,\n                                        bind check_native_item(ccx, _)\n                                    with *visit::default_simple_visitor()});\n     visit::visit_crate(*crate, (), visit);\n-    let dict_map = resolve_dicts(tcx, impl_map, crate);\n+    let dict_map = resolve_dicts(tcx, impl_map, ccx.method_map, crate);\n     check_for_main_fn(tcx, crate);\n     tcx.sess.abort_if_errors();\n     (ccx.method_map, dict_map)"}, {"sha": "406dae0ba38e53f2842cbe2ab99984e4f35edd3c", "filename": "src/test/run-pass/iface-to-str.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ea3c96938e6defa894c4ae646a75ba00c4dce22/src%2Ftest%2Frun-pass%2Fiface-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fiface-to-str.rs?ref=5ea3c96938e6defa894c4ae646a75ba00c4dce22", "patch": "@@ -0,0 +1,22 @@\n+iface to_str {\n+    fn to_str() -> str;\n+}\n+\n+impl of to_str for int {\n+    fn to_str() -> str { int::str(self) }\n+}\n+\n+impl <T: to_str> of to_str for [T] {\n+    fn to_str() -> str {\n+        \"[\" + str::connect(vec::map(self, {|e| e.to_str()}), \", \") + \"]\"\n+    }\n+}\n+\n+fn main() {\n+    fn indirect<T: to_str>(x: T) -> str {\n+        x.to_str() + \"!\"\n+    }\n+    assert 1.to_str() == \"1\";\n+    assert [2, 3, 4].to_str() == \"[2, 3, 4]\";\n+    assert indirect([10, 20]) == \"[10, 20]!\";\n+}"}]}