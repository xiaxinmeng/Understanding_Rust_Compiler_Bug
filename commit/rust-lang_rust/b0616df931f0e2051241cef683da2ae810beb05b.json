{"sha": "b0616df931f0e2051241cef683da2ae810beb05b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjE2ZGY5MzFmMGUyMDUxMjQxY2VmNjgzZGEyYWU4MTBiZWIwNWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-28T18:04:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-10-28T18:04:25Z"}, "message": "Merge branch 'pr-2140'", "tree": {"sha": "77a41b2be2fbe5371582631ae6800be552c00747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77a41b2be2fbe5371582631ae6800be552c00747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0616df931f0e2051241cef683da2ae810beb05b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0616df931f0e2051241cef683da2ae810beb05b", "html_url": "https://github.com/rust-lang/rust/commit/b0616df931f0e2051241cef683da2ae810beb05b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0616df931f0e2051241cef683da2ae810beb05b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f724b9951a732a80143190fbf41df4a2cf5222cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f724b9951a732a80143190fbf41df4a2cf5222cd", "html_url": "https://github.com/rust-lang/rust/commit/f724b9951a732a80143190fbf41df4a2cf5222cd"}, {"sha": "da14435ed2b97a96dc6df3f84df851c001a3e93f", "url": "https://api.github.com/repos/rust-lang/rust/commits/da14435ed2b97a96dc6df3f84df851c001a3e93f", "html_url": "https://github.com/rust-lang/rust/commit/da14435ed2b97a96dc6df3f84df851c001a3e93f"}], "stats": {"total": 21, "additions": 11, "deletions": 10}, "files": [{"sha": "7cfe2c1cdcbcf8d27e2908acea238e25fa896810", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=b0616df931f0e2051241cef683da2ae810beb05b", "patch": "@@ -66,7 +66,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx ImplItem) {\n         if let ImplItemKind::Method(ref sig, id) = item.node {\n-            check_fn_inner(cx, &sig.decl, Some(id), &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, Some(id), &item.generics, item.span);\n         }\n     }\n \n@@ -76,7 +76,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LifetimePass {\n                 TraitMethod::Required(_) => None,\n                 TraitMethod::Provided(id) => Some(id),\n             };\n-            check_fn_inner(cx, &sig.decl, body, &sig.generics, item.span);\n+            check_fn_inner(cx, &sig.decl, body, &item.generics, item.span);\n         }\n     }\n }"}, {"sha": "caccfccdda201a22a953a5d4dd054c8a3c8bf3a1", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=b0616df931f0e2051241cef683da2ae810beb05b", "patch": "@@ -746,7 +746,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if name == method_name &&\n                        sig.decl.inputs.len() == n_args &&\n                        out_type.matches(&sig.decl.output) &&\n-                       self_kind.matches(first_arg_ty, first_arg, self_ty, false, &sig.generics) {\n+                       self_kind.matches(first_arg_ty, first_arg, self_ty, false, &implitem.generics) {\n                         span_lint(cx, SHOULD_IMPLEMENT_TRAIT, implitem.span, &format!(\n                             \"defining a method called `{}` on this type; consider implementing \\\n                              the `{}` trait or choosing a less ambiguous name\", name, trait_name));\n@@ -760,7 +760,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                 for &(ref conv, self_kinds) in &CONVENTIONS {\n                     if_chain! {\n                         if conv.check(&name.as_str());\n-                        if !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &sig.generics));\n+                        if !self_kinds.iter().any(|k| k.matches(first_arg_ty, first_arg, self_ty, is_copy, &implitem.generics));\n                         then {\n                             let lint = if item.vis == hir::Visibility::Public {\n                                 WRONG_PUB_SELF_CONVENTION"}, {"sha": "2fc6695fa8b7918b2ff072adb2c06cca16adad12", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0616df931f0e2051241cef683da2ae810beb05b/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=b0616df931f0e2051241cef683da2ae810beb05b", "patch": "@@ -108,12 +108,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NewWithoutDefault {\n                 // can't be implemented by default\n                 return;\n             }\n-            if !sig.generics.ty_params.is_empty() {\n-                // when the result of `new()` depends on a type parameter we should not require\n-                // an\n-                // impl of `Default`\n-                return;\n-            }\n+            //TODO: There is no sig.generics anymore and I don't know how to fix this.\n+            //if !sig.generics.ty_params.is_empty() {\n+            //    // when the result of `new()` depends on a type parameter we should not require\n+            //    // an\n+            //    // impl of `Default`\n+            //    return;\n+            //}\n             if decl.inputs.is_empty() && name == \"new\" && cx.access_levels.is_reachable(id) {\n                 let self_ty = cx.tcx\n                     .type_of(cx.tcx.hir.local_def_id(cx.tcx.hir.get_parent(id)));"}]}