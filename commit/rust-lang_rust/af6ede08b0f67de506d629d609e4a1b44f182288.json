{"sha": "af6ede08b0f67de506d629d609e4a1b44f182288", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNmVkZTA4YjBmNjdkZTUwNmQ2MjlkNjA5ZTRhMWI0NGYxODIyODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-12T09:08:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-12T09:08:20Z"}, "message": "Merge branch 'master' into deps", "tree": {"sha": "0703c58b9c8c0b4fa8963535e849bc6e6c42fbd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0703c58b9c8c0b4fa8963535e849bc6e6c42fbd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af6ede08b0f67de506d629d609e4a1b44f182288", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRxqECRBK7hj4Ov3rIwAAdHIIAAaCGIOrxrgdwNKsnMBYwwHn\npPlsUA1hTKC3HzDEF5aVosDNRrw+NFBdql1/63DJWiRVr8suOBlo+57olRkmzloI\nsWqZiMRsy8cVg0iZuwExGHE+cdstTpXwF5UQ4dc2H14m4aYc8Cm3JYaK0kHLOwWa\n5jAH6MkiBakGZG2MpSqfQUEsJFUrO8r5yKgBuYyJMRNfYsfox3bP+j6ZN0VNSMMt\n2WQCf7AQXVwKYnkSCeFOPrbAENx0Sf1BxgcD/1hpFwE2NxaczBneFu54JvUoUcyD\nOpnL+r06NMVB0CwLfqpIeAGF2ltBrmuFXmrlEUotAgU0MPrD2jyZ7qmFcmkW/W8=\n=Vrlu\n-----END PGP SIGNATURE-----\n", "payload": "tree 0703c58b9c8c0b4fa8963535e849bc6e6c42fbd5\nparent 5fc990cebdf2c3732b65ab921f9c7e2c8ba79dc3\nparent f8fabe4ed1fc6e221cd664322e0126059a2b9c15\nauthor Ralf Jung <post@ralfj.de> 1531386500 +0200\ncommitter GitHub <noreply@github.com> 1531386500 +0200\n\nMerge branch 'master' into deps"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af6ede08b0f67de506d629d609e4a1b44f182288", "html_url": "https://github.com/rust-lang/rust/commit/af6ede08b0f67de506d629d609e4a1b44f182288", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af6ede08b0f67de506d629d609e4a1b44f182288/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fc990cebdf2c3732b65ab921f9c7e2c8ba79dc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fc990cebdf2c3732b65ab921f9c7e2c8ba79dc3", "html_url": "https://github.com/rust-lang/rust/commit/5fc990cebdf2c3732b65ab921f9c7e2c8ba79dc3"}, {"sha": "f8fabe4ed1fc6e221cd664322e0126059a2b9c15", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fabe4ed1fc6e221cd664322e0126059a2b9c15", "html_url": "https://github.com/rust-lang/rust/commit/f8fabe4ed1fc6e221cd664322e0126059a2b9c15"}], "stats": {"total": 43, "additions": 25, "deletions": 18}, "files": [{"sha": "38bf1147dab03e813f60960b194c1c7835784202", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -70,7 +70,7 @@ RUSTFLAGS='-Zalways-encode-mir' xargo build\n Now you can run miri against the libstd compiled by xargo:\n \n ```sh\n-MIRI_SYSROOT=~/.xargo/HOST cargo run --bin miri tests/run-pass-fullmir/vecs.rs\n+MIRI_SYSROOT=~/.xargo/HOST cargo run --bin miri tests/run-pass-fullmir/hashmap.rs\n ```\n \n Notice that you will have to re-run the last step of the preparations above when"}, {"sha": "4b89f0ac70c79a6b7cc793c410280758a48257e5", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 2));\n     }\n }"}, {"sha": "3a74245816c469afdee9f172fd699e23a5934fd3", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(2, 1));\n     }\n }"}, {"sha": "613edf3c6af95d81768c7e9ee0d269a5ee464e4e", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n     }"}, {"sha": "0d45d70eb781ac7564c209fd3564a61642deca33", "filename": "tests/compile-fail/match_char.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test FIXME: we are not checking these things on match any more?\n+\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error [E0080]"}, {"sha": "c03cf50eb27f613f6100a24ef02163c61a8cfe70", "filename": "tests/compile-fail/memleak.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: leak detection is disabled\n //error-pattern: the evaluated program leaked memory\n \n fn main() {"}, {"sha": "da3a58118a2a5671f295b67f0af108889988c70a", "filename": "tests/compile-fail/memleak_rc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmemleak_rc.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: leak detection is disabled\n //error-pattern: the evaluated program leaked memory\n \n use std::rc::Rc;"}, {"sha": "967c8b020cca099781347a769c233d13f45d4585", "filename": "tests/compile-fail/overflowing-rsh-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverflowing-rsh-2.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -13,5 +13,5 @@\n fn main() {\n     // Make sure we catch overflows that would be hidden by first casting the RHS to u32\n     let _n = 1i64 >> (u32::max_value() as i64 + 1); //~ ERROR constant evaluation error [E0080]\n-    //~^ NOTE suiriuruihrihue\n+    //~^ NOTE attempt to shift right with overflow\n }"}, {"sha": "1f9e8f6e1d0b0b3af0eee73d145713785e6c8fd0", "filename": "tests/compile-fail/panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpanic.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -1,3 +1,4 @@\n+//ignore-windows\n // FIXME: Something in panic handling fails validation with full-MIR\n // compile-flags: -Zmir-emit-validate=0\n //error-pattern: the evaluated program panicked"}, {"sha": "f85b651e857304a41e774244b288fbd2a98e6c74", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -9,7 +9,7 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1);\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(2, 1), 1).unwrap();\n     }\n }"}, {"sha": "03040cd178da2009010ad0ae5ef816bd7f849fea", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -7,9 +7,9 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n-        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n-        let _z = *(x as *mut u8); //~ ERROR constant evaluation error [E0080]\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n+        let _y = Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n+        let _z = *(x.as_ptr() as *mut u8); //~ ERROR constant evaluation error [E0080]\n         //~^ NOTE dangling pointer was dereferenced\n     }\n }"}, {"sha": "6dfb7fe2b9663b6cc637e58514ff8a079d06c37c", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -9,8 +9,8 @@ use std::alloc::*;\n \n fn main() {\n     unsafe {\n-        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1));\n+        let x = Global.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();\n         Global.dealloc(x, Layout::from_size_align_unchecked(1, 1));\n-        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1);\n+        Global.realloc(x, Layout::from_size_align_unchecked(1, 1), 1).unwrap();\n     }\n }"}, {"sha": "a85ff545ee4239e36552db4e5df696acf8b579fd", "filename": "tests/compile-fail/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstatic_memory_modification.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -1,3 +1,4 @@\n+// ignore-test FIXME: we are not making these statics read-only any more?\n static X: usize = 5;\n \n #[allow(mutable_transmutes)]"}, {"sha": "24718bce7db96bb04147b4e13fe8a480dabcb43e", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -4,6 +4,7 @@\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) };\n-    let x = undef + 1; //~ ERROR: attempted to read undefined bytes\n+    let x = undef + 1; //~ ERROR: error\n+    //~^ NOTE attempted to read undefined bytes\n     panic!(\"this should never print: {}\", x);\n }", "previous_filename": "tests/compile-fail-fullmir/undefined_byte_read.rs"}, {"sha": "d5ed02504ab670698c058dc9826f7d6410bb7d04", "filename": "tests/compiletest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -192,7 +192,9 @@ fn run_pass_miri_noopt() {\n }\n \n #[test]\n-#[ignore] // FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n+#[ignore]\n+// FIXME: Disabled for now, as the optimizer is pretty broken and crashes...\n+// See https://github.com/rust-lang/rust/issues/50411\n fn run_pass_miri_opt() {\n     run_pass_miri(true);\n }\n@@ -204,13 +206,11 @@ fn run_pass_rustc() {\n }\n \n #[test]\n-#[should_panic] // TODO: update test errors\n fn compile_fail_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();\n \n     // FIXME: run tests for other targets, too\n     compile_fail(&sysroot, \"tests/compile-fail\", &host, &host, true);\n-\n-    compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n+    //compile_fail(&sysroot, \"tests/compile-fail-fullmir\", &host, &host, true);\n }"}, {"sha": "917d51d0e4b654b71de324efebf5fc2dac7c9053", "filename": "tests/run-pass/heap.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "previous_filename": "tests/run-pass-fullmir/heap.rs"}, {"sha": "4a84f2bc5d62d60fa29453dc6eeef69450ad8be1", "filename": "tests/run-pass/issue-15080.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fissue-15080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fissue-15080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-15080.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "previous_filename": "tests/run-pass-fullmir/issue-15080.rs"}, {"sha": "f3c656623765fedbdede95cfa23a62ad35ecffaa", "filename": "tests/run-pass/move-arg-2-unique.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fmove-arg-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmove-arg-2-unique.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "previous_filename": "tests/run-pass-fullmir/move-arg-2-unique.rs"}, {"sha": "74e94ddbf84f6b0b35b6c217a63e69e55bdb4171", "filename": "tests/run-pass/regions-mock-trans.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fregions-mock-trans.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: We handle uninitialzied storage here, which currently makes validation fail.\n+// FIXME: We handle uninitialized storage here, which currently makes validation fail.\n // compile-flags: -Zmir-emit-validate=0\n \n //ignore-msvc", "previous_filename": "tests/run-pass-fullmir/regions-mock-trans.rs"}, {"sha": "9a8912a6b98897cc527c2e2c5a85aef216e5f23e", "filename": "tests/run-pass/vecs.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af6ede08b0f67de506d629d609e4a1b44f182288/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=af6ede08b0f67de506d629d609e4a1b44f182288", "previous_filename": "tests/run-pass-fullmir/vecs.rs"}]}