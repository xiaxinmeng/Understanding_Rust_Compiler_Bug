{"sha": "ca88e9c536457172cded98701d51ffafd1feb333", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhODhlOWM1MzY0NTcxNzJjZGVkOTg3MDFkNTFmZmFmZDFmZWIzMzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-07T14:17:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2015-12-07T14:17:41Z"}, "message": "Remove some unnecessary indirection from HIR structures", "tree": {"sha": "87ecc30f53bd71b38ee71e4da826b1e4c42ae85e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87ecc30f53bd71b38ee71e4da826b1e4c42ae85e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca88e9c536457172cded98701d51ffafd1feb333", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca88e9c536457172cded98701d51ffafd1feb333", "html_url": "https://github.com/rust-lang/rust/commit/ca88e9c536457172cded98701d51ffafd1feb333", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca88e9c536457172cded98701d51ffafd1feb333/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0e84522437331f9a06d04a5842acf0234cc86e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0e84522437331f9a06d04a5842acf0234cc86e", "html_url": "https://github.com/rust-lang/rust/commit/ac0e84522437331f9a06d04a5842acf0234cc86e"}], "stats": {"total": 369, "additions": 176, "deletions": 193}, "files": [{"sha": "17f75074ef230e454f31d4ef995fd31b3674e1a1", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -140,7 +140,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                 for v in &enum_definition.variants {\n                     let variant_def_index =\n                         self.insert_def(v.node.data.id(),\n-                                        NodeVariant(&**v),\n+                                        NodeVariant(v),\n                                         DefPathData::EnumVariant(v.node.name));\n \n                     for field in v.node.data.fields() {"}, {"sha": "cbda1e8880b66c4532f902aeaea3211265dd1aa1", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -852,13 +852,13 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n         II::Item(i) => II::Item(i.map(|i| fld.fold_item(i))),\n         II::TraitItem(d, ti) => {\n             II::TraitItem(fld.fold_ops.new_def_id(d),\n-                          fld.fold_trait_item(ti))\n+                          ti.map(|ti| fld.fold_trait_item(ti)))\n         }\n         II::ImplItem(d, ii) => {\n             II::ImplItem(fld.fold_ops.new_def_id(d),\n-                         fld.fold_impl_item(ii))\n+                         ii.map(|ii| fld.fold_impl_item(ii)))\n         }\n-        II::Foreign(i) => II::Foreign(fld.fold_foreign_item(i))\n+        II::Foreign(i) => II::Foreign(i.map(|i| fld.fold_foreign_item(i)))\n     };\n \n     let ii_parent = map.forest.inlined_items.alloc(InlinedParent {"}, {"sha": "3b436907ac50a1de438fc29f97bac26a2b53e442", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n     fn block(&mut self, blk: &hir::Block, pred: CFGIndex) -> CFGIndex {\n         let mut stmts_exit = pred;\n         for stmt in &blk.stmts {\n-            stmts_exit = self.stmt(&**stmt, stmts_exit);\n+            stmts_exit = self.stmt(stmt, stmts_exit);\n         }\n \n         let expr_exit = self.opt_expr(&blk.expr, stmts_exit);"}, {"sha": "18460bca287298cd341cd1cd523b0456d874b0cb", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -61,7 +61,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n                             enum_def: DefId,\n                             variant_def: DefId)\n                             -> Option<&'a Expr> {\n-    fn variant_expr<'a>(variants: &'a [P<hir::Variant>], id: ast::NodeId)\n+    fn variant_expr<'a>(variants: &'a [hir::Variant], id: ast::NodeId)\n                         -> Option<&'a Expr> {\n         for variant in variants {\n             if variant.node.data.id() == id {\n@@ -77,7 +77,7 @@ fn lookup_variant_by_id<'a>(tcx: &'a ty::ctxt,\n             None => None,\n             Some(ast_map::NodeItem(it)) => match it.node {\n                 hir::ItemEnum(hir::EnumDef { ref variants }, _) => {\n-                    variant_expr(&variants[..], variant_node_id)\n+                    variant_expr(variants, variant_node_id)\n                 }\n                 _ => None\n             },"}, {"sha": "899bad982eba5359ec5cc9c63d0890565cd449bd", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -637,7 +637,7 @@ impl<'d,'t,'a,'tcx> ExprUseVisitor<'d,'t,'a,'tcx> {\n         debug!(\"walk_block(blk.id={})\", blk.id);\n \n         for stmt in &blk.stmts {\n-            self.walk_stmt(&**stmt);\n+            self.walk_stmt(stmt);\n         }\n \n         if let Some(ref tail_expr) = blk.expr {"}, {"sha": "12cd79440666e4e28628b737a6ce969ddedcd610", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -1501,15 +1501,15 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     self.rebuild_arg_ty_or_output(&**t, lifetime, anon_nums, region_names)\n                 });\n                 let new_bindings = data.bindings.map(|b| {\n-                    P(hir::TypeBinding {\n+                    hir::TypeBinding {\n                         id: b.id,\n                         name: b.name,\n                         ty: self.rebuild_arg_ty_or_output(&*b.ty,\n                                                           lifetime,\n                                                           anon_nums,\n                                                           region_names),\n                         span: b.span\n-                    })\n+                    }\n                 });\n                 hir::AngleBracketedParameters(hir::AngleBracketedParameterData {\n                     lifetimes: new_lts,"}, {"sha": "c56858fcd1cac6bddc6928a77871ad320e9f5c5f", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -866,7 +866,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                                -> LiveNode {\n         let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| {\n-            self.propagate_through_stmt(&**stmt, succ)\n+            self.propagate_through_stmt(stmt, succ)\n         })\n     }\n "}, {"sha": "403466c34ad22091889cf1af1a6e3e2cbce33589", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -720,7 +720,7 @@ fn resolve_block(visitor: &mut RegionResolutionVisitor, blk: &hir::Block) {\n                     parent: stmt_extent,\n                 };\n             }\n-            visitor.visit_stmt(&**statement)\n+            visitor.visit_stmt(statement)\n         }\n         walk_list!(visitor, visit_expr, &blk.expr);\n     }"}, {"sha": "9ab26e0bfa38ea3b982a4a1e175bee40aa6e9402", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 98, "deletions": 111, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -47,7 +47,7 @@ pub trait Folder : Sized {\n         noop_fold_view_path(view_path, self)\n     }\n \n-    fn fold_foreign_item(&mut self, ni: P<ForeignItem>) -> P<ForeignItem> {\n+    fn fold_foreign_item(&mut self, ni: ForeignItem) -> ForeignItem {\n         noop_fold_foreign_item(ni, self)\n     }\n \n@@ -67,11 +67,11 @@ pub trait Folder : Sized {\n         noop_fold_item_underscore(i, self)\n     }\n \n-    fn fold_trait_item(&mut self, i: P<TraitItem>) -> P<TraitItem> {\n+    fn fold_trait_item(&mut self, i: TraitItem) -> TraitItem {\n         noop_fold_trait_item(i, self)\n     }\n \n-    fn fold_impl_item(&mut self, i: P<ImplItem>) -> P<ImplItem> {\n+    fn fold_impl_item(&mut self, i: ImplItem) -> ImplItem {\n         noop_fold_impl_item(i, self)\n     }\n \n@@ -83,7 +83,7 @@ pub trait Folder : Sized {\n         noop_fold_block(b, self)\n     }\n \n-    fn fold_stmt(&mut self, s: P<Stmt>) -> P<Stmt> {\n+    fn fold_stmt(&mut self, s: Stmt) -> Stmt {\n         noop_fold_stmt(s, self)\n     }\n \n@@ -107,7 +107,7 @@ pub trait Folder : Sized {\n         noop_fold_ty(t, self)\n     }\n \n-    fn fold_ty_binding(&mut self, t: P<TypeBinding>) -> P<TypeBinding> {\n+    fn fold_ty_binding(&mut self, t: TypeBinding) -> TypeBinding {\n         noop_fold_ty_binding(t, self)\n     }\n \n@@ -119,7 +119,7 @@ pub trait Folder : Sized {\n         noop_fold_foreign_mod(nm, self)\n     }\n \n-    fn fold_variant(&mut self, v: P<Variant>) -> P<Variant> {\n+    fn fold_variant(&mut self, v: Variant) -> Variant {\n         noop_fold_variant(v, self)\n     }\n \n@@ -333,15 +333,13 @@ pub fn noop_fold_decl<T: Folder>(d: P<Decl>, fld: &mut T) -> P<Decl> {\n     })\n }\n \n-pub fn noop_fold_ty_binding<T: Folder>(b: P<TypeBinding>, fld: &mut T) -> P<TypeBinding> {\n-    b.map(|TypeBinding { id, name, ty, span }| {\n-        TypeBinding {\n-            id: fld.new_id(id),\n-            name: name,\n-            ty: fld.fold_ty(ty),\n-            span: fld.new_span(span),\n-        }\n-    })\n+pub fn noop_fold_ty_binding<T: Folder>(b: TypeBinding, fld: &mut T) -> TypeBinding {\n+    TypeBinding {\n+        id: fld.new_id(b.id),\n+        name: b.name,\n+        ty: fld.fold_ty(b.ty),\n+        span: fld.new_span(b.span),\n+    }\n }\n \n pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n@@ -402,18 +400,16 @@ pub fn noop_fold_foreign_mod<T: Folder>(ForeignMod { abi, items }: ForeignMod,\n     }\n }\n \n-pub fn noop_fold_variant<T: Folder>(v: P<Variant>, fld: &mut T) -> P<Variant> {\n-    v.map(|Spanned { node: Variant_ { name, attrs, data, disr_expr }, span }| {\n-        Spanned {\n-            node: Variant_ {\n-                name: name,\n-                attrs: fold_attrs(attrs, fld),\n-                data: fld.fold_variant_data(data),\n-                disr_expr: disr_expr.map(|e| fld.fold_expr(e)),\n-            },\n-            span: fld.new_span(span),\n-        }\n-    })\n+pub fn noop_fold_variant<T: Folder>(v: Variant, fld: &mut T) -> Variant {\n+    Spanned {\n+        node: Variant_ {\n+            name: v.node.name,\n+            attrs: fold_attrs(v.node.attrs, fld),\n+            data: fld.fold_variant_data(v.node.data),\n+            disr_expr: v.node.disr_expr.map(|e| fld.fold_expr(e)),\n+        },\n+        span: fld.new_span(v.span),\n+    }\n }\n \n pub fn noop_fold_name<T: Folder>(n: Name, _: &mut T) -> Name {\n@@ -814,51 +810,47 @@ pub fn noop_fold_item_underscore<T: Folder>(i: Item_, folder: &mut T) -> Item_ {\n     }\n }\n \n-pub fn noop_fold_trait_item<T: Folder>(i: P<TraitItem>,\n+pub fn noop_fold_trait_item<T: Folder>(i: TraitItem,\n                                        folder: &mut T)\n-                                       -> P<TraitItem> {\n-    i.map(|TraitItem { id, name, attrs, node, span }| {\n-        TraitItem {\n-            id: folder.new_id(id),\n-            name: folder.fold_name(name),\n-            attrs: fold_attrs(attrs, folder),\n-            node: match node {\n-                ConstTraitItem(ty, default) => {\n-                    ConstTraitItem(folder.fold_ty(ty), default.map(|x| folder.fold_expr(x)))\n-                }\n-                MethodTraitItem(sig, body) => {\n-                    MethodTraitItem(noop_fold_method_sig(sig, folder),\n-                                    body.map(|x| folder.fold_block(x)))\n-                }\n-                TypeTraitItem(bounds, default) => {\n-                    TypeTraitItem(folder.fold_bounds(bounds),\n-                                  default.map(|x| folder.fold_ty(x)))\n-                }\n-            },\n-            span: folder.new_span(span),\n-        }\n-    })\n+                                       -> TraitItem {\n+    TraitItem {\n+        id: folder.new_id(i.id),\n+        name: folder.fold_name(i.name),\n+        attrs: fold_attrs(i.attrs, folder),\n+        node: match i.node {\n+            ConstTraitItem(ty, default) => {\n+                ConstTraitItem(folder.fold_ty(ty), default.map(|x| folder.fold_expr(x)))\n+            }\n+            MethodTraitItem(sig, body) => {\n+                MethodTraitItem(noop_fold_method_sig(sig, folder),\n+                                body.map(|x| folder.fold_block(x)))\n+            }\n+            TypeTraitItem(bounds, default) => {\n+                TypeTraitItem(folder.fold_bounds(bounds),\n+                              default.map(|x| folder.fold_ty(x)))\n+            }\n+        },\n+        span: folder.new_span(i.span),\n+    }\n }\n \n-pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T) -> P<ImplItem> {\n-    i.map(|ImplItem { id, name, attrs, node, vis, span }| {\n-        ImplItem {\n-            id: folder.new_id(id),\n-            name: folder.fold_name(name),\n-            attrs: fold_attrs(attrs, folder),\n-            vis: vis,\n-            node: match node {\n-                ImplItemKind::Const(ty, expr) => {\n-                    ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n-                }\n-                ImplItemKind::Method(sig, body) => {\n-                    ImplItemKind::Method(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n-                }\n-                ImplItemKind::Type(ty) => ImplItemKind::Type(folder.fold_ty(ty)),\n-            },\n-            span: folder.new_span(span),\n-        }\n-    })\n+pub fn noop_fold_impl_item<T: Folder>(i: ImplItem, folder: &mut T) -> ImplItem {\n+    ImplItem {\n+        id: folder.new_id(i.id),\n+        name: folder.fold_name(i.name),\n+        attrs: fold_attrs(i.attrs, folder),\n+        vis: i.vis,\n+        node: match i.node {\n+            ImplItemKind::Const(ty, expr) => {\n+                ImplItemKind::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n+            }\n+            ImplItemKind::Method(sig, body) => {\n+                ImplItemKind::Method(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n+            }\n+            ImplItemKind::Type(ty) => ImplItemKind::Type(folder.fold_ty(ty)),\n+        },\n+        span: folder.new_span(i.span),\n+    }\n }\n \n pub fn noop_fold_mod<T: Folder>(Mod { inner, item_ids }: Mod, folder: &mut T) -> Mod {\n@@ -935,24 +927,22 @@ pub fn noop_fold_item<T: Folder>(item: Item, folder: &mut T) -> Item {\n     }\n }\n \n-pub fn noop_fold_foreign_item<T: Folder>(ni: P<ForeignItem>, folder: &mut T) -> P<ForeignItem> {\n-    ni.map(|ForeignItem { id, name, attrs, node, span, vis }| {\n-        ForeignItem {\n-            id: folder.new_id(id),\n-            name: folder.fold_name(name),\n-            attrs: fold_attrs(attrs, folder),\n-            node: match node {\n-                ForeignItemFn(fdec, generics) => {\n-                    ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n-                }\n-                ForeignItemStatic(t, m) => {\n-                    ForeignItemStatic(folder.fold_ty(t), m)\n-                }\n-            },\n-            vis: vis,\n-            span: folder.new_span(span),\n-        }\n-    })\n+pub fn noop_fold_foreign_item<T: Folder>(ni: ForeignItem, folder: &mut T) -> ForeignItem {\n+    ForeignItem {\n+        id: folder.new_id(ni.id),\n+        name: folder.fold_name(ni.name),\n+        attrs: fold_attrs(ni.attrs, folder),\n+        node: match ni.node {\n+            ForeignItemFn(fdec, generics) => {\n+                ForeignItemFn(folder.fold_fn_decl(fdec), folder.fold_generics(generics))\n+            }\n+            ForeignItemStatic(t, m) => {\n+                ForeignItemStatic(folder.fold_ty(t), m)\n+            }\n+        },\n+        vis: ni.vis,\n+        span: folder.new_span(ni.span),\n+    }\n }\n \n pub fn noop_fold_method_sig<T: Folder>(sig: MethodSig, folder: &mut T) -> MethodSig {\n@@ -1147,32 +1137,29 @@ pub fn noop_fold_expr<T: Folder>(Expr { id, node, span, attrs }: Expr, folder: &\n     }\n }\n \n-pub fn noop_fold_stmt<T: Folder>(stmt: P<Stmt>, folder: &mut T)\n-                                 -> P<Stmt> {\n-    stmt.map(|Spanned { node, span }| {\n-        let span = folder.new_span(span);\n-        match node {\n-            StmtDecl(d, id) => {\n-                let id = folder.new_id(id);\n-                Spanned {\n-                    node: StmtDecl(folder.fold_decl(d), id),\n-                    span: span\n-                }\n+pub fn noop_fold_stmt<T: Folder>(stmt: Stmt, folder: &mut T) -> Stmt {\n+    let span = folder.new_span(stmt.span);\n+    match stmt.node {\n+        StmtDecl(d, id) => {\n+            let id = folder.new_id(id);\n+            Spanned {\n+                node: StmtDecl(folder.fold_decl(d), id),\n+                span: span\n             }\n-            StmtExpr(e, id) => {\n-                let id = folder.new_id(id);\n-                Spanned {\n-                    node: StmtExpr(folder.fold_expr(e), id),\n-                    span: span,\n-                }\n+        }\n+        StmtExpr(e, id) => {\n+            let id = folder.new_id(id);\n+            Spanned {\n+                node: StmtExpr(folder.fold_expr(e), id),\n+                span: span,\n             }\n-            StmtSemi(e, id) => {\n-                let id = folder.new_id(id);\n-                Spanned {\n-                    node: StmtSemi(folder.fold_expr(e), id),\n-                    span: span,\n-                }\n+        }\n+        StmtSemi(e, id) => {\n+            let id = folder.new_id(id);\n+            Spanned {\n+                node: StmtSemi(folder.fold_expr(e), id),\n+                span: span,\n             }\n         }\n-    })\n+    }\n }"}, {"sha": "dae7e38a2bf58f98899c1b0f08dedb0407df25d8", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -183,7 +183,7 @@ impl PathParameters {\n         }\n     }\n \n-    pub fn bindings(&self) -> Vec<&P<TypeBinding>> {\n+    pub fn bindings(&self) -> Vec<&TypeBinding> {\n         match *self {\n             AngleBracketedParameters(ref data) => {\n                 data.bindings.iter().collect()\n@@ -204,7 +204,7 @@ pub struct AngleBracketedParameterData {\n     pub types: OwnedSlice<P<Ty>>,\n     /// Bindings (equality constraints) on associated types, if present.\n     /// E.g., `Foo<A=Bar>`.\n-    pub bindings: OwnedSlice<P<TypeBinding>>,\n+    pub bindings: OwnedSlice<TypeBinding>,\n }\n \n impl AngleBracketedParameterData {\n@@ -379,7 +379,7 @@ pub struct MacroDef {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Block {\n     /// Statements in a block\n-    pub stmts: Vec<P<Stmt>>,\n+    pub stmts: Vec<Stmt>,\n     /// An expression at the end of the block\n     /// without a semicolon, if any\n     pub expr: Option<P<Expr>>,\n@@ -1031,12 +1031,12 @@ pub struct Mod {\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct ForeignMod {\n     pub abi: Abi,\n-    pub items: Vec<P<ForeignItem>>,\n+    pub items: Vec<ForeignItem>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct EnumDef {\n-    pub variants: Vec<P<Variant>>,\n+    pub variants: Vec<Variant>,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -1287,7 +1287,7 @@ pub enum Item_ {\n     /// A struct definition, e.g. `struct Foo<A> {x: A}`\n     ItemStruct(VariantData, Generics),\n     /// Represents a Trait Declaration\n-    ItemTrait(Unsafety, Generics, TyParamBounds, Vec<P<TraitItem>>),\n+    ItemTrait(Unsafety, Generics, TyParamBounds, Vec<TraitItem>),\n \n     // Default trait implementations\n     ///\n@@ -1299,7 +1299,7 @@ pub enum Item_ {\n              Generics,\n              Option<TraitRef>, // (optional) trait this impl implements\n              P<Ty>, // self\n-             Vec<P<ImplItem>>),\n+             Vec<ImplItem>),\n }\n \n impl Item_ {"}, {"sha": "5a169095fa90bfa94f9571e31b35358578f2a894", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -199,13 +199,13 @@ pub fn lower_decl(lctx: &LoweringContext, d: &Decl) -> P<hir::Decl> {\n     }\n }\n \n-pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> P<hir::TypeBinding> {\n-    P(hir::TypeBinding {\n+pub fn lower_ty_binding(lctx: &LoweringContext, b: &TypeBinding) -> hir::TypeBinding {\n+    hir::TypeBinding {\n         id: b.id,\n         name: b.ident.name,\n         ty: lower_ty(lctx, &b.ty),\n         span: b.span,\n-    })\n+    }\n }\n \n pub fn lower_ty(lctx: &LoweringContext, t: &Ty) -> P<hir::Ty> {\n@@ -264,16 +264,16 @@ pub fn lower_foreign_mod(lctx: &LoweringContext, fm: &ForeignMod) -> hir::Foreig\n     }\n }\n \n-pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> P<hir::Variant> {\n-    P(Spanned {\n+pub fn lower_variant(lctx: &LoweringContext, v: &Variant) -> hir::Variant {\n+    Spanned {\n         node: hir::Variant_ {\n             name: v.node.name.name,\n             attrs: v.node.attrs.clone(),\n             data: lower_variant_data(lctx, &v.node.data),\n             disr_expr: v.node.disr_expr.as_ref().map(|e| lower_expr(lctx, e)),\n         },\n         span: v.span,\n-    })\n+    }\n }\n \n pub fn lower_path(lctx: &LoweringContext, p: &Path) -> hir::Path {\n@@ -650,8 +650,8 @@ pub fn lower_item_underscore(lctx: &LoweringContext, i: &Item_) -> hir::Item_ {\n     }\n }\n \n-pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> P<hir::TraitItem> {\n-    P(hir::TraitItem {\n+pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> hir::TraitItem {\n+    hir::TraitItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n@@ -670,11 +670,11 @@ pub fn lower_trait_item(lctx: &LoweringContext, i: &TraitItem) -> P<hir::TraitIt\n             }\n         },\n         span: i.span,\n-    })\n+    }\n }\n \n-pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem> {\n-    P(hir::ImplItem {\n+pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> hir::ImplItem {\n+    hir::ImplItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n@@ -690,7 +690,7 @@ pub fn lower_impl_item(lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem>\n             ImplItemKind::Macro(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,\n-    })\n+    }\n }\n \n pub fn lower_mod(lctx: &LoweringContext, m: &Mod) -> hir::Mod {\n@@ -760,8 +760,8 @@ pub fn lower_item(lctx: &LoweringContext, i: &Item) -> hir::Item {\n     }\n }\n \n-pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> P<hir::ForeignItem> {\n-    P(hir::ForeignItem {\n+pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> hir::ForeignItem {\n+    hir::ForeignItem {\n         id: i.id,\n         name: i.ident.name,\n         attrs: i.attrs.clone(),\n@@ -775,7 +775,7 @@ pub fn lower_foreign_item(lctx: &LoweringContext, i: &ForeignItem) -> P<hir::For\n         },\n         vis: lower_visibility(lctx, i.vis),\n         span: i.span,\n-    })\n+    }\n }\n \n pub fn lower_method_sig(lctx: &LoweringContext, sig: &MethodSig) -> hir::MethodSig {\n@@ -1054,7 +1054,7 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n                         let place = expr_ident(lctx, e.span, place_ident, None);\n                         let call = make_call(lctx, &inplace_finalize, vec![place]);\n                         signal_block_expr(lctx,\n-                                          vec![P(call_move_val_init)],\n+                                          vec![call_move_val_init],\n                                           call,\n                                           e.span,\n                                           hir::PushUnsafeBlock(hir::CompilerGenerated), None)\n@@ -1484,25 +1484,25 @@ pub fn lower_expr(lctx: &LoweringContext, e: &Expr) -> P<hir::Expr> {\n     })\n }\n \n-pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> P<hir::Stmt> {\n+pub fn lower_stmt(lctx: &LoweringContext, s: &Stmt) -> hir::Stmt {\n     match s.node {\n         StmtDecl(ref d, id) => {\n-            P(Spanned {\n+            Spanned {\n                 node: hir::StmtDecl(lower_decl(lctx, d), id),\n                 span: s.span,\n-            })\n+            }\n         }\n         StmtExpr(ref e, id) => {\n-            P(Spanned {\n+            Spanned {\n                 node: hir::StmtExpr(lower_expr(lctx, e), id),\n                 span: s.span,\n-            })\n+            }\n         }\n         StmtSemi(ref e, id) => {\n-            P(Spanned {\n+            Spanned {\n                 node: hir::StmtSemi(lower_expr(lctx, e), id),\n                 span: s.span,\n-            })\n+            }\n         }\n         StmtMac(..) => panic!(\"Shouldn't exist here\"),\n     }\n@@ -1644,7 +1644,7 @@ fn stmt_let(lctx: &LoweringContext,\n             ident: Ident,\n             ex: P<hir::Expr>,\n             attrs: ThinAttributes)\n-            -> P<hir::Stmt> {\n+            -> hir::Stmt {\n     let pat = if mutbl {\n         pat_ident_binding_mode(lctx, sp, ident, hir::BindByValue(hir::MutMutable))\n     } else {\n@@ -1659,7 +1659,7 @@ fn stmt_let(lctx: &LoweringContext,\n         attrs: attrs,\n     });\n     let decl = respan(sp, hir::DeclLocal(local));\n-    P(respan(sp, hir::StmtDecl(P(decl), lctx.next_id())))\n+    respan(sp, hir::StmtDecl(P(decl), lctx.next_id()))\n }\n \n fn block_expr(lctx: &LoweringContext, expr: P<hir::Expr>) -> P<hir::Block> {\n@@ -1668,7 +1668,7 @@ fn block_expr(lctx: &LoweringContext, expr: P<hir::Expr>) -> P<hir::Block> {\n \n fn block_all(lctx: &LoweringContext,\n              span: Span,\n-             stmts: Vec<P<hir::Stmt>>,\n+             stmts: Vec<hir::Stmt>,\n              expr: Option<P<hir::Expr>>)\n              -> P<hir::Block> {\n     P(hir::Block {\n@@ -1748,7 +1748,7 @@ fn path_all(sp: Span,\n             mut idents: Vec<Ident>,\n             lifetimes: Vec<hir::Lifetime>,\n             types: Vec<P<hir::Ty>>,\n-            bindings: Vec<P<hir::TypeBinding>>)\n+            bindings: Vec<hir::TypeBinding>)\n             -> hir::Path {\n     let last_identifier = idents.pop().unwrap();\n     let mut segments: Vec<hir::PathSegment> = idents.into_iter()\n@@ -1791,7 +1791,7 @@ fn core_path(lctx: &LoweringContext, span: Span, components: &[&str]) -> hir::Pa\n }\n \n fn signal_block_expr(lctx: &LoweringContext,\n-                     stmts: Vec<P<hir::Stmt>>,\n+                     stmts: Vec<hir::Stmt>,\n                      expr: P<hir::Expr>,\n                      span: Span,\n                      rule: hir::BlockCheckMode,"}, {"sha": "721d60999e12de5c237ded9d43fad36d2c5879ef", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -473,7 +473,7 @@ impl<'a> State<'a> {\n                              -> io::Result<()> {\n         try!(self.print_inner_attributes(attrs));\n         for item in &nmod.items {\n-            try!(self.print_foreign_item(&**item));\n+            try!(self.print_foreign_item(item));\n         }\n         Ok(())\n     }\n@@ -878,7 +878,7 @@ impl<'a> State<'a> {\n     }\n \n     pub fn print_variants(&mut self,\n-                          variants: &[P<hir::Variant>],\n+                          variants: &[hir::Variant],\n                           span: codemap::Span)\n                           -> io::Result<()> {\n         try!(self.bopen());\n@@ -887,7 +887,7 @@ impl<'a> State<'a> {\n             try!(self.maybe_print_comment(v.span.lo));\n             try!(self.print_outer_attributes(&v.node.attrs));\n             try!(self.ibox(indent_unit));\n-            try!(self.print_variant(&**v));\n+            try!(self.print_variant(v));\n             try!(word(&mut self.s, \",\"));\n             try!(self.end());\n             try!(self.maybe_print_trailing_comment(v.span, None));\n@@ -1107,7 +1107,7 @@ impl<'a> State<'a> {\n         try!(self.print_inner_attributes(attrs));\n \n         for st in &blk.stmts {\n-            try!(self.print_stmt(&**st));\n+            try!(self.print_stmt(st));\n         }\n         match blk.expr {\n             Some(ref expr) => {"}, {"sha": "9de7b3b0cc52511e13453d683b7bca6f8d21e8a5", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -394,13 +394,13 @@ fn simplify_ast(ii: InlinedItemRef) -> InlinedItem {\n             InlinedItem::Item(P(fold::noop_fold_item(i.clone(), &mut fld)))\n         }\n         InlinedItemRef::TraitItem(d, ti) => {\n-            InlinedItem::TraitItem(d, fold::noop_fold_trait_item(P(ti.clone()), &mut fld))\n+            InlinedItem::TraitItem(d, P(fold::noop_fold_trait_item(ti.clone(), &mut fld)))\n         }\n         InlinedItemRef::ImplItem(d, ii) => {\n-            InlinedItem::ImplItem(d, fold::noop_fold_impl_item(P(ii.clone()), &mut fld))\n+            InlinedItem::ImplItem(d, P(fold::noop_fold_impl_item(ii.clone(), &mut fld)))\n         }\n         InlinedItemRef::Foreign(i) => {\n-            InlinedItem::Foreign(fold::noop_fold_foreign_item(P(i.clone()), &mut fld))\n+            InlinedItem::Foreign(P(fold::noop_fold_foreign_item(i.clone(), &mut fld)))\n         }\n     }\n }"}, {"sha": "86ab7edf8dda6049f635ca51eba102466c5edf66", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -1156,7 +1156,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n         let num_implemented_methods = ast_items.len();\n         for (i, &trait_item_def_id) in items.iter().enumerate() {\n             let ast_item = if i < num_implemented_methods {\n-                Some(&*ast_items[i])\n+                Some(&ast_items[i])\n             } else {\n                 None\n             };\n@@ -1321,7 +1321,7 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n                 }\n             }\n \n-            let trait_item = &*ms[i];\n+            let trait_item = &ms[i];\n             encode_attributes(rbml_w, &trait_item.attrs);\n             match trait_item.node {\n                 hir::ConstTraitItem(_, ref default) => {"}, {"sha": "49617ed5171bdd39e100bc8cc8185e120c83f952", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -14,7 +14,6 @@ use hair::cx::to_ref::ToRef;\n use rustc::middle::region::{BlockRemainder, CodeExtentData};\n use rustc_front::hir;\n use syntax::ast;\n-use syntax::ptr::P;\n \n impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n     type Output = Block<'tcx>;\n@@ -36,7 +35,7 @@ fn mirror_stmts<'a,'tcx:'a,STMTS>(cx: &mut Cx<'a,'tcx>,\n                                   block_id: ast::NodeId,\n                                   mut stmts: STMTS)\n                                   -> Vec<StmtRef<'tcx>>\n-    where STMTS: Iterator<Item=(usize, &'tcx P<hir::Stmt>)>\n+    where STMTS: Iterator<Item=(usize, &'tcx hir::Stmt)>\n {\n     let mut result = vec![];\n     while let Some((index, stmt)) = stmts.next() {"}, {"sha": "766a6d361ddf61bf2931b44a5fd1db3f899462d3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -392,7 +392,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n \n                 for variant in &(*enum_definition).variants {\n                     let item_def_id = self.ast_map.local_def_id(item.id);\n-                    self.build_reduced_graph_for_variant(&**variant, item_def_id, &module);\n+                    self.build_reduced_graph_for_variant(variant, item_def_id, &module);\n                 }\n                 parent.clone()\n             }"}, {"sha": "469ec14a1a0d2de7b4323c69e208cd6f5d97e644", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -69,7 +69,6 @@ use syntax::ast::{TyUs, TyU8, TyU16, TyU32, TyU64, TyF64, TyF32};\n use syntax::attr::AttrMetaMethods;\n use syntax::ext::mtwt;\n use syntax::parse::token::{self, special_names, special_idents};\n-use syntax::ptr::P;\n use syntax::codemap::{self, Span, Pos};\n use syntax::util::lev_distance::{lev_distance, max_suggestion_distance};\n \n@@ -1907,7 +1906,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                             opt_trait_ref,\n                                             &**self_type,\n                                             item.id,\n-                                            &impl_items[..]);\n+                                            impl_items);\n             }\n \n             ItemTrait(_, ref generics, ref bounds, ref trait_items) => {\n@@ -2223,7 +2222,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                               opt_trait_reference: &Option<TraitRef>,\n                               self_type: &Ty,\n                               item_id: NodeId,\n-                              impl_items: &[P<ImplItem>]) {\n+                              impl_items: &[ImplItem]) {\n         // If applicable, create a rib for the type parameters.\n         self.with_type_parameter_rib(HasTypeParameters(generics,\n                                                        TypeSpace,"}, {"sha": "252bcb1abbf16a010f14da67f9daf803d6bed4ae", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -2378,7 +2378,7 @@ pub fn trans_item(ccx: &CrateContext, item: &hir::Item) {\n             }\n         }\n         hir::ItemImpl(_, _, ref generics, _, _, ref impl_items) => {\n-            meth::trans_impl(ccx, item.name, &impl_items[..], generics, item.id);\n+            meth::trans_impl(ccx, item.name, impl_items, generics, item.id);\n         }\n         hir::ItemMod(_) => {\n             // modules have no equivalent at runtime, they just affect"}, {"sha": "45f46410068beb711ed45cd1e70f9428238b26ca", "filename": "src/librustc_trans/trans/controlflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontrolflow.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -110,7 +110,7 @@ pub fn trans_block<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     fcx.push_ast_cleanup_scope(cleanup_debug_loc);\n \n     for s in &b.stmts {\n-        bcx = trans_stmt(bcx, &**s);\n+        bcx = trans_stmt(bcx, s);\n     }\n \n     if dest != expr::Ignore {"}, {"sha": "3296495453e80c7a07725fe02d6fa66e979ee13d", "filename": "src/librustc_trans/trans/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fcreate_scope_map.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -117,7 +117,7 @@ fn walk_block(cx: &CrateContext,\n \n     // The interesting things here are statements and the concluding expression.\n     for statement in &block.stmts {\n-        scope_map.insert(rustc_front::util::stmt_id(&**statement),\n+        scope_map.insert(rustc_front::util::stmt_id(statement),\n                          scope_stack.last().unwrap().scope_metadata);\n \n         match statement.node {"}, {"sha": "9012ecaa2134fe5cde58e5e2dc7edc5fc4b55c6c", "filename": "src/librustc_trans/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fforeign.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -481,7 +481,7 @@ fn gate_simd_ffi(tcx: &ty::ctxt, decl: &hir::FnDecl, ty: &ty::BareFnTy) {\n pub fn trans_foreign_mod(ccx: &CrateContext, foreign_mod: &hir::ForeignMod) {\n     let _icx = push_ctxt(\"foreign::trans_foreign_mod\");\n     for foreign_item in &foreign_mod.items {\n-        let lname = link_name(&**foreign_item);\n+        let lname = link_name(foreign_item);\n \n         if let hir::ForeignItemFn(ref decl, _) = foreign_item.node {\n             match foreign_mod.abi {"}, {"sha": "123bd9f9c37653864cb05c3fcfbe1572f5a72faa", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -41,7 +41,6 @@ use middle::ty::MethodCall;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::DUMMY_SP;\n-use syntax::ptr::P;\n \n use rustc_front::hir;\n \n@@ -54,7 +53,7 @@ const VTABLE_OFFSET: usize = 3;\n /// see `trans::base::lval_static_fn()` or `trans::base::monomorphic_fn()`.\n pub fn trans_impl(ccx: &CrateContext,\n                   name: ast::Name,\n-                  impl_items: &[P<hir::ImplItem>],\n+                  impl_items: &[hir::ImplItem],\n                   generics: &hir::Generics,\n                   id: ast::NodeId) {\n     let _icx = push_ctxt(\"meth::trans_impl\");"}, {"sha": "b890a62783f2d8f7b02dbddd874004ced1fa3746", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -711,11 +711,11 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n       hir::ItemForeignMod(ref m) => {\n         if m.abi == abi::RustIntrinsic {\n             for item in &m.items {\n-                intrinsic::check_intrinsic_type(ccx, &**item);\n+                intrinsic::check_intrinsic_type(ccx, item);\n             }\n         } else if m.abi == abi::PlatformIntrinsic {\n             for item in &m.items {\n-                intrinsic::check_platform_intrinsic_type(ccx, &**item);\n+                intrinsic::check_platform_intrinsic_type(ccx, item);\n             }\n         } else {\n             for item in &m.items {\n@@ -880,7 +880,7 @@ fn check_method_body<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                             impl_span: Span,\n                                             impl_trait_ref: &ty::TraitRef<'tcx>,\n-                                            impl_items: &[P<hir::ImplItem>]) {\n+                                            impl_items: &[hir::ImplItem]) {\n     // Locate trait methods\n     let tcx = ccx.tcx;\n     let trait_items = tcx.trait_items(impl_trait_ref.def_id);\n@@ -4024,8 +4024,8 @@ fn check_block_with_expected<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     let mut any_diverges = false;\n     let mut any_err = false;\n     for s in &blk.stmts {\n-        check_stmt(fcx, &**s);\n-        let s_id = ::rustc_front::util::stmt_id(&**s);\n+        check_stmt(fcx, s);\n+        let s_id = ::rustc_front::util::stmt_id(s);\n         let s_ty = fcx.node_ty(s_id);\n         if any_diverges && !warned && match s.node {\n             hir::StmtDecl(ref decl, _) => {\n@@ -4193,7 +4193,7 @@ pub fn check_simd(tcx: &ty::ctxt, sp: Span, id: ast::NodeId) {\n \n pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                                     sp: Span,\n-                                    vs: &'tcx [P<hir::Variant>],\n+                                    vs: &'tcx [hir::Variant],\n                                     id: ast::NodeId) {\n \n     fn disr_in_range(ccx: &CrateCtxt,\n@@ -4224,7 +4224,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     }\n \n     fn do_check<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n-                          vs: &'tcx [P<hir::Variant>],\n+                          vs: &'tcx [hir::Variant],\n                           id: ast::NodeId,\n                           hint: attr::ReprAttr) {\n         #![allow(trivial_numeric_casts)]"}, {"sha": "a9bd0e3926811a4dace94bdcc60caac3d28514a5", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -24,7 +24,6 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap::{Span};\n use syntax::parse::token::{special_idents};\n-use syntax::ptr::P;\n use rustc_front::intravisit::{self, Visitor};\n use rustc_front::hir;\n \n@@ -225,7 +224,7 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n \n     fn check_trait(&mut self,\n                    item: &hir::Item,\n-                   items: &[P<hir::TraitItem>])\n+                   items: &[hir::TraitItem])\n     {\n         let trait_def_id = self.tcx().map.local_def_id(item.id);\n "}, {"sha": "86a56e718b5cf74bb958d3bdc80b7369c8bd27c5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -1061,7 +1061,7 @@ fn convert_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                         def: ty::AdtDefMaster<'tcx>,\n                                         scheme: ty::TypeScheme<'tcx>,\n                                         predicates: ty::GenericPredicates<'tcx>,\n-                                        variants: &[P<hir::Variant>]) {\n+                                        variants: &[hir::Variant]) {\n     // fill the field types\n     for (variant, ty_variant) in variants.iter().zip(def.variants.iter()) {\n         for (f, ty_f) in variant.node.data.fields().iter().zip(ty_variant.fields.iter()) {\n@@ -1479,7 +1479,7 @@ fn convert_trait_predicates<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>, it: &hir::Item)\n                                                  ast_generics: &hir::Generics,\n                                                  trait_predicates: &ty::GenericPredicates<'tcx>,\n                                                  self_trait_ref: ty::TraitRef<'tcx>,\n-                                                 trait_items: &[P<hir::TraitItem>])\n+                                                 trait_items: &[hir::TraitItem])\n                                                  -> Vec<ty::Predicate<'tcx>>\n     {\n         trait_items.iter().flat_map(|trait_item| {\n@@ -2410,7 +2410,7 @@ fn enforce_impl_params_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n fn enforce_impl_lifetimes_are_constrained<'tcx>(tcx: &ty::ctxt<'tcx>,\n                                                 ast_generics: &hir::Generics,\n                                                 impl_def_id: DefId,\n-                                                impl_items: &[P<hir::ImplItem>])\n+                                                impl_items: &[hir::ImplItem])\n {\n     // Every lifetime used in an associated type must be constrained.\n     let impl_scheme = tcx.lookup_item_type(impl_def_id);"}, {"sha": "0129ab43cefd87bb33255f6f2f1ad79dcc2ea623", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca88e9c536457172cded98701d51ffafd1feb333/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=ca88e9c536457172cded98701d51ffafd1feb333", "patch": "@@ -176,7 +176,7 @@ pub struct Constant {\n pub struct Trait {\n     pub unsafety: hir::Unsafety,\n     pub name: Name,\n-    pub items: Vec<P<hir::TraitItem>>, //should be TraitItem\n+    pub items: Vec<hir::TraitItem>,\n     pub generics: hir::Generics,\n     pub bounds: Vec<hir::TyParamBound>,\n     pub attrs: Vec<ast::Attribute>,\n@@ -192,7 +192,7 @@ pub struct Impl {\n     pub generics: hir::Generics,\n     pub trait_: Option<hir::TraitRef>,\n     pub for_: P<hir::Ty>,\n-    pub items: Vec<P<hir::ImplItem>>,\n+    pub items: Vec<hir::ImplItem>,\n     pub attrs: Vec<ast::Attribute>,\n     pub whence: Span,\n     pub vis: hir::Visibility,"}]}