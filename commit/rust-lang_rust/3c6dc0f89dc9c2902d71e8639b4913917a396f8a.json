{"sha": "3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNmRjMGY4OWRjOWMyOTAyZDcxZTg2MzliNDkxMzkxN2EzOTZmOGE=", "commit": {"author": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-03T09:45:10Z"}, "committer": {"name": "Clemens Wasser", "email": "clemens.wasser@gmail.com", "date": "2021-06-03T09:46:03Z"}, "message": "Apply a few clippy suggestions", "tree": {"sha": "6a1acfe280a8e9369a753b4e7bb829b8b9ff6317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a1acfe280a8e9369a753b4e7bb829b8b9ff6317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "html_url": "https://github.com/rust-lang/rust/commit/3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/comments", "author": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clemenswasser", "id": 26170289, "node_id": "MDQ6VXNlcjI2MTcwMjg5", "avatar_url": "https://avatars.githubusercontent.com/u/26170289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clemenswasser", "html_url": "https://github.com/clemenswasser", "followers_url": "https://api.github.com/users/clemenswasser/followers", "following_url": "https://api.github.com/users/clemenswasser/following{/other_user}", "gists_url": "https://api.github.com/users/clemenswasser/gists{/gist_id}", "starred_url": "https://api.github.com/users/clemenswasser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clemenswasser/subscriptions", "organizations_url": "https://api.github.com/users/clemenswasser/orgs", "repos_url": "https://api.github.com/users/clemenswasser/repos", "events_url": "https://api.github.com/users/clemenswasser/events{/privacy}", "received_events_url": "https://api.github.com/users/clemenswasser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e14e1b13b76aaa643bc3beffb9c52bc5228d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e14e1b13b76aaa643bc3beffb9c52bc5228d24", "html_url": "https://github.com/rust-lang/rust/commit/e8e14e1b13b76aaa643bc3beffb9c52bc5228d24"}], "stats": {"total": 168, "additions": 121, "deletions": 47}, "files": [{"sha": "abdfca1feb59629effb0f7e832ddc5101fe195fe", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "patch": "@@ -252,12 +252,10 @@ fn closure_expr(p: &mut Parser) -> CompletedMarker {\n         // test lambda_ret_block\n         // fn main() { || -> i32 { 92 }(); }\n         block_expr(p);\n+    } else if p.at_ts(EXPR_FIRST) {\n+        expr(p);\n     } else {\n-        if p.at_ts(EXPR_FIRST) {\n-            expr(p);\n-        } else {\n-            p.error(\"expected expression\");\n-        }\n+        p.error(\"expected expression\");\n     }\n     m.complete(p, CLOSURE_EXPR)\n }"}, {"sha": "be2dfbbea1cdcf07ac660bc49d8e68abc413ad63", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 106, "deletions": 23, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "patch": "@@ -260,33 +260,116 @@ pub enum SyntaxKind {\n use self::SyntaxKind::*;\n impl SyntaxKind {\n     pub fn is_keyword(self) -> bool {\n-        match self {\n-            AS_KW | ASYNC_KW | AWAIT_KW | BOX_KW | BREAK_KW | CONST_KW | CONTINUE_KW | CRATE_KW\n-            | DYN_KW | ELSE_KW | ENUM_KW | EXTERN_KW | FALSE_KW | FN_KW | FOR_KW | IF_KW\n-            | IMPL_KW | IN_KW | LET_KW | LOOP_KW | MACRO_KW | MATCH_KW | MOD_KW | MOVE_KW\n-            | MUT_KW | PUB_KW | REF_KW | RETURN_KW | SELF_KW | STATIC_KW | STRUCT_KW | SUPER_KW\n-            | TRAIT_KW | TRUE_KW | TRY_KW | TYPE_KW | UNSAFE_KW | USE_KW | WHERE_KW | WHILE_KW\n-            | YIELD_KW | AUTO_KW | DEFAULT_KW | EXISTENTIAL_KW | UNION_KW | RAW_KW\n-            | MACRO_RULES_KW => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            AS_KW\n+                | ASYNC_KW\n+                | AWAIT_KW\n+                | BOX_KW\n+                | BREAK_KW\n+                | CONST_KW\n+                | CONTINUE_KW\n+                | CRATE_KW\n+                | DYN_KW\n+                | ELSE_KW\n+                | ENUM_KW\n+                | EXTERN_KW\n+                | FALSE_KW\n+                | FN_KW\n+                | FOR_KW\n+                | IF_KW\n+                | IMPL_KW\n+                | IN_KW\n+                | LET_KW\n+                | LOOP_KW\n+                | MACRO_KW\n+                | MATCH_KW\n+                | MOD_KW\n+                | MOVE_KW\n+                | MUT_KW\n+                | PUB_KW\n+                | REF_KW\n+                | RETURN_KW\n+                | SELF_KW\n+                | STATIC_KW\n+                | STRUCT_KW\n+                | SUPER_KW\n+                | TRAIT_KW\n+                | TRUE_KW\n+                | TRY_KW\n+                | TYPE_KW\n+                | UNSAFE_KW\n+                | USE_KW\n+                | WHERE_KW\n+                | WHILE_KW\n+                | YIELD_KW\n+                | AUTO_KW\n+                | DEFAULT_KW\n+                | EXISTENTIAL_KW\n+                | UNION_KW\n+                | RAW_KW\n+                | MACRO_RULES_KW\n+        )\n     }\n     pub fn is_punct(self) -> bool {\n-        match self {\n-            SEMICOLON | COMMA | L_PAREN | R_PAREN | L_CURLY | R_CURLY | L_BRACK | R_BRACK\n-            | L_ANGLE | R_ANGLE | AT | POUND | TILDE | QUESTION | DOLLAR | AMP | PIPE | PLUS\n-            | STAR | SLASH | CARET | PERCENT | UNDERSCORE | DOT | DOT2 | DOT3 | DOT2EQ | COLON\n-            | COLON2 | EQ | EQ2 | FAT_ARROW | BANG | NEQ | MINUS | THIN_ARROW | LTEQ | GTEQ\n-            | PLUSEQ | MINUSEQ | PIPEEQ | AMPEQ | CARETEQ | SLASHEQ | STAREQ | PERCENTEQ | AMP2\n-            | PIPE2 | SHL | SHR | SHLEQ | SHREQ => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self,\n+            SEMICOLON\n+                | COMMA\n+                | L_PAREN\n+                | R_PAREN\n+                | L_CURLY\n+                | R_CURLY\n+                | L_BRACK\n+                | R_BRACK\n+                | L_ANGLE\n+                | R_ANGLE\n+                | AT\n+                | POUND\n+                | TILDE\n+                | QUESTION\n+                | DOLLAR\n+                | AMP\n+                | PIPE\n+                | PLUS\n+                | STAR\n+                | SLASH\n+                | CARET\n+                | PERCENT\n+                | UNDERSCORE\n+                | DOT\n+                | DOT2\n+                | DOT3\n+                | DOT2EQ\n+                | COLON\n+                | COLON2\n+                | EQ\n+                | EQ2\n+                | FAT_ARROW\n+                | BANG\n+                | NEQ\n+                | MINUS\n+                | THIN_ARROW\n+                | LTEQ\n+                | GTEQ\n+                | PLUSEQ\n+                | MINUSEQ\n+                | PIPEEQ\n+                | AMPEQ\n+                | CARETEQ\n+                | SLASHEQ\n+                | STAREQ\n+                | PERCENTEQ\n+                | AMP2\n+                | PIPE2\n+                | SHL\n+                | SHR\n+                | SHLEQ\n+                | SHREQ\n+        )\n     }\n     pub fn is_literal(self) -> bool {\n-        match self {\n-            INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING => true,\n-            _ => false,\n-        }\n+        matches!(self, INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE | STRING | BYTE_STRING)\n     }\n     pub fn from_keyword(ident: &str) -> Option<SyntaxKind> {\n         let kw = match ident {"}, {"sha": "ac5a9509d89106da32994ef5b5b0078c717efd40", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "patch": "@@ -238,14 +238,9 @@ fn extract_line_annotations(mut line: &str) -> Vec<LineAnnotation> {\n     let mut res = Vec::new();\n     let mut offset: TextSize = 0.into();\n     let marker: fn(char) -> bool = if line.contains('^') { |c| c == '^' } else { |c| c == '|' };\n-    loop {\n-        match line.find(marker) {\n-            Some(idx) => {\n-                offset += TextSize::try_from(idx).unwrap();\n-                line = &line[idx..];\n-            }\n-            None => break,\n-        };\n+    while let Some(idx) = line.find(marker) {\n+        offset += TextSize::try_from(idx).unwrap();\n+        line = &line[idx..];\n \n         let mut len = line.chars().take_while(|&it| it == '^').count();\n         let mut continuation = false;"}, {"sha": "b0b9e30db2a7f9a4c60a62e692847cd25f210e31", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6dc0f89dc9c2902d71e8639b4913917a396f8a/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=3c6dc0f89dc9c2902d71e8639b4913917a396f8a", "patch": "@@ -94,18 +94,16 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             support::children(&self.syntax)\n                         }\n                     }\n-                } else {\n-                    if let Some(token_kind) = field.token_kind() {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::token(&self.syntax, #token_kind)\n-                            }\n+                } else if let Some(token_kind) = field.token_kind() {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::token(&self.syntax, #token_kind)\n                         }\n-                    } else {\n-                        quote! {\n-                            pub fn #method_name(&self) -> Option<#ty> {\n-                                support::child(&self.syntax)\n-                            }\n+                    }\n+                } else {\n+                    quote! {\n+                        pub fn #method_name(&self) -> Option<#ty> {\n+                            support::child(&self.syntax)\n                         }\n                     }\n                 }"}]}