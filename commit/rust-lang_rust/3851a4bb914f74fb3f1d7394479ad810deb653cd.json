{"sha": "3851a4bb914f74fb3f1d7394479ad810deb653cd", "node_id": "C_kwDOAAsO6NoAKDM4NTFhNGJiOTE0Zjc0ZmIzZjFkNzM5NDQ3OWFkODEwZGViNjUzY2Q", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-11T11:25:01Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-05-11T12:21:10Z"}, "message": "Improve error for `self: Box<self>`", "tree": {"sha": "75fa8b4d41626091011676d70d6b9175f8a2210b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75fa8b4d41626091011676d70d6b9175f8a2210b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3851a4bb914f74fb3f1d7394479ad810deb653cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3851a4bb914f74fb3f1d7394479ad810deb653cd", "html_url": "https://github.com/rust-lang/rust/commit/3851a4bb914f74fb3f1d7394479ad810deb653cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3851a4bb914f74fb3f1d7394479ad810deb653cd/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d941cd9812891af3b83dd4de64aa7d8ee99641a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d941cd9812891af3b83dd4de64aa7d8ee99641a", "html_url": "https://github.com/rust-lang/rust/commit/4d941cd9812891af3b83dd4de64aa7d8ee99641a"}], "stats": {"total": 88, "additions": 63, "deletions": 25}, "files": [{"sha": "bcb51db9bcf90091de39e10ea0d1430c8f2db9d6", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -1253,7 +1253,7 @@ pub enum ExplicitSelf<'tcx> {\n \n impl<'tcx> ExplicitSelf<'tcx> {\n     /// Categorizes an explicit self declaration like `self: SomeType`\n-    /// into either `self`, `&self`, `&mut self`, `Box<self>`, or\n+    /// into either `self`, `&self`, `&mut self`, `Box<Self>`, or\n     /// `Other`.\n     /// This is mainly used to require the arbitrary_self_types feature\n     /// in the case of `Other`, to improve error messages in the common cases,"}, {"sha": "345255c4c693531cddb90e5472475c5f323444bb", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -199,6 +199,10 @@ resolve_invalid_asm_sym =\n     .label = is a local variable\n     .help = `sym` operands must refer to either a function or a static\n \n+resolve_lowercase_self =\n+    attempt to use a non-constant value in a constant\n+    .suggestion = try using `Self`\n+\n resolve_trait_impl_duplicate =\n     duplicate definitions with name `{$name}`:\n     .label = duplicate definition"}, {"sha": "6675b8ed59b268cafac42a813ba3a57e757119c8", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -948,6 +948,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             ResolutionError::InvalidAsmSym => {\n                 self.tcx.sess.create_err(errs::InvalidAsmSym { span })\n             }\n+            ResolutionError::LowercaseSelf => {\n+                self.tcx.sess.create_err(errs::LowercaseSelf { span })\n+            }\n         }\n     }\n "}, {"sha": "2ab55f12637c84dfa0e2be7f203bbe5012aef751", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -442,6 +442,14 @@ pub(crate) struct InvalidAsmSym {\n     pub(crate) span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(resolve_lowercase_self)]\n+pub(crate) struct LowercaseSelf {\n+    #[primary_span]\n+    #[suggestion(code = \"Self\", applicability = \"maybe-incorrect\", style = \"short\")]\n+    pub(crate) span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(resolve_trait_impl_duplicate, code = \"E0201\")]\n pub(crate) struct TraitImplDuplicate {"}, {"sha": "755acdd81fe5cb725b1ecd1d964e1318f6162239", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 20, "deletions": 24, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -15,8 +15,7 @@ use std::ptr;\n \n use crate::errors::{ParamKindInEnumDiscriminant, ParamKindInNonTrivialAnonConst};\n use crate::late::{\n-    ConstantHasGenerics, ConstantItemKind, HasGenericParams, NoConstantGenericsReason, PathSource,\n-    Rib, RibKind,\n+    ConstantHasGenerics, HasGenericParams, NoConstantGenericsReason, PathSource, Rib, RibKind,\n };\n use crate::macros::{sub_namespace_match, MacroRulesScope};\n use crate::{errors, AmbiguityError, AmbiguityErrorMisc, AmbiguityKind, Determinacy, Finalize};\n@@ -1127,28 +1126,25 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         RibKind::ConstantItem(_, item) => {\n                             // Still doesn't deal with upvars\n                             if let Some(span) = finalize {\n-                                let (span, resolution_error) =\n-                                    if let Some((ident, constant_item_kind)) = item {\n-                                        let kind_str = match constant_item_kind {\n-                                            ConstantItemKind::Const => \"const\",\n-                                            ConstantItemKind::Static => \"static\",\n-                                        };\n-                                        (\n-                                            span,\n-                                            AttemptToUseNonConstantValueInConstant(\n-                                                ident, \"let\", kind_str,\n-                                            ),\n-                                        )\n-                                    } else {\n-                                        (\n-                                            rib_ident.span,\n-                                            AttemptToUseNonConstantValueInConstant(\n-                                                original_rib_ident_def,\n-                                                \"const\",\n-                                                \"let\",\n-                                            ),\n-                                        )\n-                                    };\n+                                let (span, resolution_error) = match item {\n+                                    None if rib_ident.as_str() == \"self\" => (span, LowercaseSelf),\n+                                    None => (\n+                                        rib_ident.span,\n+                                        AttemptToUseNonConstantValueInConstant(\n+                                            original_rib_ident_def,\n+                                            \"const\",\n+                                            \"let\",\n+                                        ),\n+                                    ),\n+                                    Some((ident, kind)) => (\n+                                        span,\n+                                        AttemptToUseNonConstantValueInConstant(\n+                                            ident,\n+                                            \"let\",\n+                                            kind.as_str(),\n+                                        ),\n+                                    ),\n+                                };\n                                 self.report_error(span, resolution_error);\n                             }\n                             return Res::Err;"}, {"sha": "0aa0c74b45a8c1466bb22e0935674fda128aab79", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -150,6 +150,15 @@ pub(crate) enum ConstantItemKind {\n     Static,\n }\n \n+impl ConstantItemKind {\n+    pub(crate) fn as_str(&self) -> &'static str {\n+        match self {\n+            Self::Const => \"const\",\n+            Self::Static => \"static\",\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum RecordPartialRes {\n     Yes,"}, {"sha": "c12dc2f5d92a545bfe95c0c895659c4fa726611b", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -251,6 +251,8 @@ enum ResolutionError<'a> {\n     TraitImplDuplicate { name: Symbol, trait_item_span: Span, old_span: Span },\n     /// Inline asm `sym` operand must refer to a `fn` or `static`.\n     InvalidAsmSym,\n+    /// `self` used instead of `Self` in a generic parameter\n+    LowercaseSelf,\n }\n \n enum VisResolutionError<'a> {"}, {"sha": "7171bd8a42dd2dbbff6380d268037c0503951f1f", "filename": "tests/ui/resolve/explicit-self-lowercase-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.rs?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -0,0 +1,8 @@\n+struct Foo;\n+\n+impl Foo {\n+    fn do_nothing(self: Box<self>) {} //~ ERROR attempt to use a non-constant value in a constant\n+    //~^ HELP try using `Self`\n+}\n+\n+fn main() {}"}, {"sha": "cd64dbb3854afc9a0e140cff01c6aae03374e4be", "filename": "tests/ui/resolve/explicit-self-lowercase-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3851a4bb914f74fb3f1d7394479ad810deb653cd/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3851a4bb914f74fb3f1d7394479ad810deb653cd/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fexplicit-self-lowercase-param.stderr?ref=3851a4bb914f74fb3f1d7394479ad810deb653cd", "patch": "@@ -0,0 +1,8 @@\n+error: attempt to use a non-constant value in a constant\n+  --> $DIR/explicit-self-lowercase-param.rs:4:29\n+   |\n+LL |     fn do_nothing(self: Box<self>) {}\n+   |                             ^^^^ help: try using `Self`\n+\n+error: aborting due to previous error\n+"}]}