{"sha": "d744f36ea2f63a1f3f022885c30163c3835347b5", "node_id": "C_kwDOAAsO6NoAKGQ3NDRmMzZlYTJmNjNhMWYzZjAyMjg4NWMzMDE2M2MzODM1MzQ3YjU", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-09T17:41:49Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-08-22T10:53:26Z"}, "message": "Fix wf check on `#[const_trait]` return types", "tree": {"sha": "55e62b3ee6152fb7116f1d74085d23a1d2598be9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e62b3ee6152fb7116f1d74085d23a1d2598be9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d744f36ea2f63a1f3f022885c30163c3835347b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d744f36ea2f63a1f3f022885c30163c3835347b5", "html_url": "https://github.com/rust-lang/rust/commit/d744f36ea2f63a1f3f022885c30163c3835347b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d744f36ea2f63a1f3f022885c30163c3835347b5/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9bb589cd678e034d194193fa892942315b10e2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bb589cd678e034d194193fa892942315b10e2a", "html_url": "https://github.com/rust-lang/rust/commit/a9bb589cd678e034d194193fa892942315b10e2a"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "654a981d506e91ff52f47e58d26c005ea8f42ea6", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d744f36ea2f63a1f3f022885c30163c3835347b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744f36ea2f63a1f3f022885c30163c3835347b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=d744f36ea2f63a1f3f022885c30163c3835347b5", "patch": "@@ -66,12 +66,18 @@ impl<'tcx> WfCheckingCtxt<'_, 'tcx> {\n         span: Span,\n         loc: Option<WellFormedLoc>,\n         arg: ty::GenericArg<'tcx>,\n+        override_constness: Option<hir::Constness>,\n     ) {\n         let cause =\n             traits::ObligationCause::new(span, self.body_id, ObligationCauseCode::WellFormed(loc));\n+        let param_env = if let Some(constness) = override_constness {\n+            self.param_env.with_constness(constness)\n+        } else {\n+            self.param_env\n+        };\n         self.ocx.register_obligation(traits::Obligation::new(\n             cause,\n-            self.param_env,\n+            param_env,\n             ty::Binder::dummy(ty::PredicateKind::WellFormed(arg)).to_predicate(self.tcx()),\n         ));\n     }\n@@ -985,7 +991,7 @@ fn check_associated_item(\n             ty::AssocKind::Const => {\n                 let ty = tcx.type_of(item.def_id);\n                 let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n-                wfcx.register_wf_obligation(span, loc, ty.into());\n+                wfcx.register_wf_obligation(span, loc, ty.into(), None);\n             }\n             ty::AssocKind::Fn => {\n                 let sig = tcx.fn_sig(item.def_id);\n@@ -1006,7 +1012,7 @@ fn check_associated_item(\n                 if item.defaultness(tcx).has_value() {\n                     let ty = tcx.type_of(item.def_id);\n                     let ty = wfcx.normalize(span, Some(WellFormedLoc::Ty(item_id)), ty);\n-                    wfcx.register_wf_obligation(span, loc, ty.into());\n+                    wfcx.register_wf_obligation(span, loc, ty.into(), None);\n                 }\n             }\n         }\n@@ -1042,6 +1048,7 @@ fn check_type_defn<'tcx, F>(\n                     field.span,\n                     Some(WellFormedLoc::Ty(field.def_id)),\n                     field.ty.into(),\n+                    None,\n                 )\n             }\n \n@@ -1191,7 +1198,12 @@ fn check_item_type(tcx: TyCtxt<'_>, item_id: LocalDefId, ty_span: Span, allow_fo\n             }\n         }\n \n-        wfcx.register_wf_obligation(ty_span, Some(WellFormedLoc::Ty(item_id)), item_ty.into());\n+        wfcx.register_wf_obligation(\n+            ty_span,\n+            Some(WellFormedLoc::Ty(item_id)),\n+            item_ty.into(),\n+            None,\n+        );\n         if forbid_unsized {\n             wfcx.register_bound(\n                 traits::ObligationCause::new(ty_span, wfcx.body_id, traits::WellFormed(None)),\n@@ -1260,6 +1272,7 @@ fn check_impl<'tcx>(\n                     ast_self_ty.span,\n                     Some(WellFormedLoc::Ty(item.hir_id().expect_owner())),\n                     self_ty.into(),\n+                    None,\n                 );\n             }\n         }\n@@ -1300,7 +1313,12 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                     // parameter includes another (e.g., `<T, U = T>`). In those cases, we can't\n                     // be sure if it will error or not as user might always specify the other.\n                     if !ty.needs_subst() {\n-                        wfcx.register_wf_obligation(tcx.def_span(param.def_id), None, ty.into());\n+                        wfcx.register_wf_obligation(\n+                            tcx.def_span(param.def_id),\n+                            None,\n+                            ty.into(),\n+                            None,\n+                        );\n                     }\n                 }\n             }\n@@ -1316,6 +1334,7 @@ fn check_where_clauses<'tcx>(wfcx: &WfCheckingCtxt<'_, 'tcx>, span: Span, def_id\n                             tcx.def_span(param.def_id),\n                             None,\n                             default_ct.into(),\n+                            None,\n                         );\n                     }\n                 }\n@@ -1496,10 +1515,17 @@ fn check_fn_or_method<'tcx>(\n             ty.span,\n             Some(WellFormedLoc::Param { function: def_id, param_idx: i.try_into().unwrap() }),\n             input_ty.into(),\n+            None,\n         );\n     }\n \n-    wfcx.register_wf_obligation(hir_decl.output.span(), None, sig.output().into());\n+    // override the env when checking the return type. `~const` bounds can be fulfilled with non-const implementations.\n+    wfcx.register_wf_obligation(\n+        hir_decl.output.span(),\n+        None,\n+        sig.output().into(),\n+        Some(hir::Constness::NotConst),\n+    );\n \n     check_where_clauses(wfcx, span, def_id);\n }"}, {"sha": "40517ecdd6ce42cb09eebce1aab1d62974aa9569", "filename": "src/test/ui/rfc-2632-const-trait-impl/issue-100222.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d744f36ea2f63a1f3f022885c30163c3835347b5/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d744f36ea2f63a1f3f022885c30163c3835347b5/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fissue-100222.rs?ref=d744f36ea2f63a1f3f022885c30163c3835347b5", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(const_trait_impl)]\n+\n+#[const_trait]\n+pub trait Index {\n+    type Output;\n+}\n+\n+#[const_trait]\n+pub trait IndexMut where Self: Index {\n+    fn foo(&mut self) -> <Self as Index>::Output;\n+}\n+\n+fn main() {}"}]}