{"sha": "314194ef1785b130bfb85589fa44b6d53f50c565", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNDE5NGVmMTc4NWIxMzBiZmI4NTU4OWZhNDRiNmQ1M2Y1MGM1NjU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-05-28T12:04:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2019-06-21T07:48:43Z"}, "message": "rustc-book: Add documentation on how to use PGO.", "tree": {"sha": "7c86214e38118a959a8bc796faad939b11417fb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c86214e38118a959a8bc796faad939b11417fb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/314194ef1785b130bfb85589fa44b6d53f50c565", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/314194ef1785b130bfb85589fa44b6d53f50c565", "html_url": "https://github.com/rust-lang/rust/commit/314194ef1785b130bfb85589fa44b6d53f50c565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/314194ef1785b130bfb85589fa44b6d53f50c565/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbec74ffa7982de8e066a93969ce70a891d7908b", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbec74ffa7982de8e066a93969ce70a891d7908b", "html_url": "https://github.com/rust-lang/rust/commit/dbec74ffa7982de8e066a93969ce70a891d7908b"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "3cda8d927973ca64c7210d37ecd750093f838ca7", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=314194ef1785b130bfb85589fa44b6d53f50c565", "patch": "@@ -13,5 +13,6 @@\n - [Targets](targets/index.md)\n     - [Built-in Targets](targets/built-in.md)\n     - [Custom Targets](targets/custom.md)\n+- [Profile-guided Optimization](profile-guided-optimization.md)\n - [Linker-plugin based LTO](linker-plugin-lto.md)\n - [Contributing to `rustc`](contributing.md)"}, {"sha": "3773a7783020f8d226b0716e5a9bf9eaf6d78680", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=314194ef1785b130bfb85589fa44b6d53f50c565", "patch": "@@ -214,3 +214,20 @@ This option lets you control what happens when the code panics.\n ## incremental\n \n This flag allows you to enable incremental compilation.\n+\n+## profile-generate\n+\n+This flag allows for creating instrumented binaries that will collect\n+profiling data for use with profile-guided optimization (PGO). The flag takes\n+an optional argument which is the path to a directory into which the\n+instrumented binary will emit the collected data. See the chapter on\n+[profile-guided optimization](profile-guided-optimization.html) for more\n+information.\n+\n+## profile-use\n+\n+This flag specifies the profiling data file to be used for profile-guided\n+optimization (PGO). The flag takes a mandatory argument which is the path\n+to a valid `.profdata` file. See the chapter on\n+[profile-guided optimization](profile-guided-optimization.html) for more\n+information."}, {"sha": "38be07a6440dab772e199f81687e2f4c3304812b", "filename": "src/doc/rustc/src/profile-guided-optimization.md", "status": "added", "additions": 136, "deletions": 0, "changes": 136, "blob_url": "https://github.com/rust-lang/rust/blob/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "raw_url": "https://github.com/rust-lang/rust/raw/314194ef1785b130bfb85589fa44b6d53f50c565/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fprofile-guided-optimization.md?ref=314194ef1785b130bfb85589fa44b6d53f50c565", "patch": "@@ -0,0 +1,136 @@\n+# Profile Guided Optimization\n+\n+`rustc` supports doing profile-guided optimization (PGO).\n+This chapter describes what PGO is, what it is good for, and how it can be used.\n+\n+## What Is Profiled-Guided Optimization?\n+\n+The basic concept of PGO is to collect data about the typical execution of\n+a program (e.g. which branches it is likely to take) and then use this data\n+to inform optimizations such as inlining, machine-code layout,\n+register allocation, etc.\n+\n+There are different ways of collecting data about a program's execution.\n+One is to run the program inside a profiler (such as `perf`) and another\n+is to create an instrumented binary, that is, a binary that has data\n+collection built into it, and run that.\n+The latter usually provides more accurate data and it is also what is\n+supported by `rustc`.\n+\n+## Usage\n+\n+Generating a PGO-optimized program involves following a workflow with four steps:\n+\n+1. Compile the program with instrumentation enabled\n+   (e.g. `rustc -Cprofile-generate=/tmp/pgo-data main.rs`)\n+2. Run the instrumented program (e.g. `./main`) which generates a\n+   `default_<id>.profraw` file\n+3. Convert the `.profraw` file into a `.profdata` file using\n+   LLVM's `llvm-profdata` tool\n+4. Compile the program again, this time making use of the profiling data\n+   (for example `rustc -Cprofile-use=merged.profdata main.rs`)\n+\n+An instrumented program will create one or more `.profraw` files, one for each\n+instrumented binary. E.g. an instrumented executable that loads two instrumented\n+dynamic libraries at runtime will generate three `.profraw` files. Running an\n+instrumented binary multiple times, on the other hand, will re-use the\n+respective `.profraw` files, updating them in place.\n+\n+These `.profraw` files have to be post-processed before they can be fed back\n+into the compiler. This is done by the `llvm-profdata` tool. This tool\n+is most easily installed via\n+\n+```bash\n+rustup component add llvm-tools-preview\n+```\n+\n+Note that installing the `llvm-tools-preview` component won't add\n+`llvm-profdata` to the `PATH`. Rather, the tool can be found in:\n+\n+```bash\n+~/.rustup/toolchains/<toolchain>/lib/rustlib/<target-triple>/bin/\n+```\n+\n+Alternatively, an `llvm-profdata` coming with a recent LLVM or Clang\n+version usually works too.\n+\n+The `llvm-profdata` tool merges multiple `.profraw` files into a single\n+`.profdata` file that can then be fed back into the compiler via\n+`-Cprofile-use`:\n+\n+```bash\n+# STEP 1: Compile the binary with instrumentation\n+rustc -Cprofile-generate=/tmp/pgo-data -O ./main.rs\n+\n+# STEP 2: Run the binary a few times, maybe with common sets of args.\n+#         Each run will create or update `.profraw` files in /tmp/pgo-data\n+./main mydata1.csv\n+./main mydata2.csv\n+./main mydata3.csv\n+\n+# STEP 3: Merge and post-process all the `.profraw` files in /tmp/pgo-data\n+llvm-profdata merge -o ./merged.profdata /tmp/pgo-data\n+\n+# STEP 4: Use the merged `.profdata` file during optimization. All `rustc`\n+#         flags have to be the same.\n+rustc -Cprofile-use=./merged.profdata -O ./main.rs\n+```\n+\n+### A Complete Cargo Workflow\n+\n+Using this feature with Cargo works very similar to using it with `rustc`\n+directly. Again, we generate an instrumented binary, run it to produce data,\n+merge the data, and feed it back into the compiler. Some things of note:\n+\n+- We use the `RUSTFLAGS` environment variable in order to pass the PGO compiler\n+  flags to the compilation of all crates in the program.\n+\n+- We pass the `--target` flag to Cargo, which prevents the `RUSTFLAGS`\n+  arguments to be passed to Cargo build scripts. We don't want the build\n+  scripts to generate a bunch of `.profraw` files.\n+\n+- We pass `--release` to Cargo because that's where PGO makes the most sense.\n+  In theory, PGO can also be done on debug builds but there is little reason\n+  to do so.\n+\n+- It is recommended to use *absolute paths* for the argument of\n+  `-Cprofile-generate` and `-Cprofile-use`. Cargo can invoke `rustc` with\n+  varying working directories, meaning that `rustc` will not be able to find\n+  the supplied `.profdata` file. With absolute paths this is not an issue.\n+\n+- It is good practice to make sure that there is no left-over profiling data\n+  from previous compilation sessions. Just deleting the directory is a simple\n+  way of doing so (see `STEP 0` below).\n+\n+This is what the entire workflow looks like:\n+\n+```bash\n+# STEP 0: Make sure there is no left-over profiling data from previous runs\n+rm -rf /tmp/pgo-data\n+\n+# STEP 1: Build the instrumented binaries\n+RUSTFLAGS=\"-Cprofile-generate=/tmp/pgo-data\" \\\n+    cargo build --release --target=x86_64-unknown-linux-gnu\n+\n+# STEP 2: Run the instrumented binaries with some typical data\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata1.csv\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata2.csv\n+./target/x86_64-unknown-linux-gnu/release/myprogram mydata3.csv\n+\n+# STEP 3: Merge the `.profraw` files into a `.profdata` file\n+llvm-profdata merge -o /tmp/pgo-data/merged.profdata /tmp/pgo-data\n+\n+# STEP 4: Use the `.profdata` file for guiding optimizations\n+RUSTFLAGS=\"-Cprofile-use=/tmp/pgo-data/merged.profdata\" \\\n+    cargo build --release --target=x86_64-unknown-linux-gnu\n+```\n+\n+## Further Reading\n+\n+`rustc`'s PGO support relies entirely on LLVM's implementation of the feature\n+and is equivalent to what Clang offers via the `-fprofile-generate` /\n+`-fprofile-use` flags. The [Profile Guided Optimization][clang-pgo] section\n+in Clang's documentation is therefore an interesting read for anyone who wants\n+to use PGO with Rust.\n+\n+[clang-pgo]: https://clang.llvm.org/docs/UsersManual.html#profile-guided-optimization"}]}