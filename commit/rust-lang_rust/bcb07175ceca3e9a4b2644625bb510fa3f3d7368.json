{"sha": "bcb07175ceca3e9a4b2644625bb510fa3f3d7368", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYjA3MTc1Y2VjYTNlOWE0YjI2NDQ2MjViYjUxMGZhM2YzZDczNjg=", "commit": {"author": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2014-08-26T18:41:25Z"}, "committer": {"name": "SiegeLord", "email": "slabode@aim.com", "date": "2014-08-26T18:41:25Z"}, "message": "Always insert methods into the search index, even if we're currently in a private module.\n\nPreviously, this caused methods of re-exported types to not be inserted into\nthe search index. This fix may introduce some false positives, but in my\ntesting they appear as orphaned methods and end up not being inserted into the\nfinal search index at a later stage.\n\nFixes issue #11943", "tree": {"sha": "37e6e78e334d5883576ea4889a47456646210273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37e6e78e334d5883576ea4889a47456646210273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb07175ceca3e9a4b2644625bb510fa3f3d7368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb07175ceca3e9a4b2644625bb510fa3f3d7368", "html_url": "https://github.com/rust-lang/rust/commit/bcb07175ceca3e9a4b2644625bb510fa3f3d7368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb07175ceca3e9a4b2644625bb510fa3f3d7368/comments", "author": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SiegeLord", "id": 480550, "node_id": "MDQ6VXNlcjQ4MDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/480550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SiegeLord", "html_url": "https://github.com/SiegeLord", "followers_url": "https://api.github.com/users/SiegeLord/followers", "following_url": "https://api.github.com/users/SiegeLord/following{/other_user}", "gists_url": "https://api.github.com/users/SiegeLord/gists{/gist_id}", "starred_url": "https://api.github.com/users/SiegeLord/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SiegeLord/subscriptions", "organizations_url": "https://api.github.com/users/SiegeLord/orgs", "repos_url": "https://api.github.com/users/SiegeLord/repos", "events_url": "https://api.github.com/users/SiegeLord/events{/privacy}", "received_events_url": "https://api.github.com/users/SiegeLord/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7932b719ec2b65acfa8c3e74aad29346d47ee992", "url": "https://api.github.com/repos/rust-lang/rust/commits/7932b719ec2b65acfa8c3e74aad29346d47ee992", "html_url": "https://github.com/rust-lang/rust/commit/7932b719ec2b65acfa8c3e74aad29346d47ee992"}], "stats": {"total": 18, "additions": 10, "deletions": 8}, "files": [{"sha": "3ddeef7e05818f3fa153e771c845aec7a1bcfa47", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bcb07175ceca3e9a4b2644625bb510fa3f3d7368/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb07175ceca3e9a4b2644625bb510fa3f3d7368/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=bcb07175ceca3e9a4b2644625bb510fa3f3d7368", "patch": "@@ -819,16 +819,17 @@ impl DocFolder for Cache {\n         // Index this method for searching later on\n         match item.name {\n             Some(ref s) => {\n-                let parent = match item.inner {\n+                let (parent, is_method) = match item.inner {\n                     clean::TyMethodItem(..) |\n                     clean::StructFieldItem(..) |\n                     clean::VariantItem(..) => {\n-                        (Some(*self.parent_stack.last().unwrap()),\n-                         Some(self.stack.slice_to(self.stack.len() - 1)))\n+                        ((Some(*self.parent_stack.last().unwrap()),\n+                          Some(self.stack.slice_to(self.stack.len() - 1))),\n+                          false)\n                     }\n                     clean::MethodItem(..) => {\n                         if self.parent_stack.len() == 0 {\n-                            (None, None)\n+                            ((None, None), false)\n                         } else {\n                             let last = self.parent_stack.last().unwrap();\n                             let did = *last;\n@@ -844,17 +845,18 @@ impl DocFolder for Cache {\n                                 Some(..) => Some(self.stack.as_slice()),\n                                 None => None\n                             };\n-                            (Some(*last), path)\n+                            ((Some(*last), path), true)\n                         }\n                     }\n-                    _ => (None, Some(self.stack.as_slice()))\n+                    _ => ((None, Some(self.stack.as_slice())), false)\n                 };\n                 let hidden_field = match item.inner {\n                     clean::StructFieldItem(clean::HiddenStructField) => true,\n                     _ => false\n                 };\n+\n                 match parent {\n-                    (parent, Some(path)) if !self.privmod && !hidden_field => {\n+                    (parent, Some(path)) if is_method || (!self.privmod && !hidden_field) => {\n                         self.search_index.push(IndexItem {\n                             ty: shortty(&item),\n                             name: s.to_string(),\n@@ -863,7 +865,7 @@ impl DocFolder for Cache {\n                             parent: parent,\n                         });\n                     }\n-                    (Some(parent), None) if !self.privmod => {\n+                    (Some(parent), None) if is_method || (!self.privmod && !hidden_field)=> {\n                         if ast_util::is_local(parent) {\n                             // We have a parent, but we don't know where they're\n                             // defined yet. Wait for later to index this item."}]}