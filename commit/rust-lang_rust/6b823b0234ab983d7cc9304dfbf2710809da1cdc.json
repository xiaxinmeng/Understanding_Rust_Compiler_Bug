{"sha": "6b823b0234ab983d7cc9304dfbf2710809da1cdc", "node_id": "C_kwDOAAsO6NoAKDZiODIzYjAyMzRhYjk4M2Q3Y2M5MzA0ZGZiZjI3MTA4MDlkYTFjZGM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-14T20:56:56Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-14T20:56:56Z"}, "message": "fix: Fix imports being inserted before doc comments in inline modules", "tree": {"sha": "7343b3e4f143378cfd9b28c21bd034d5d22541ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7343b3e4f143378cfd9b28c21bd034d5d22541ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b823b0234ab983d7cc9304dfbf2710809da1cdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b823b0234ab983d7cc9304dfbf2710809da1cdc", "html_url": "https://github.com/rust-lang/rust/commit/6b823b0234ab983d7cc9304dfbf2710809da1cdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b823b0234ab983d7cc9304dfbf2710809da1cdc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "url": "https://api.github.com/repos/rust-lang/rust/commits/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505", "html_url": "https://github.com/rust-lang/rust/commit/5af3ef527c803d8ed5df41b0cff7e0a8f46a1505"}], "stats": {"total": 61, "additions": 37, "deletions": 24}, "files": [{"sha": "c14182279d05eabe404b8b8f2131d6bcc1070fb5", "filename": "crates/ide-db/src/imports/insert_use.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b823b0234ab983d7cc9304dfbf2710809da1cdc/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b823b0234ab983d7cc9304dfbf2710809da1cdc/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use.rs?ref=6b823b0234ab983d7cc9304dfbf2710809da1cdc", "patch": "@@ -396,10 +396,19 @@ fn insert_use_(\n         }\n     }\n \n+    let l_curly = match scope {\n+        ImportScope::File(_) => None,\n+        // don't insert the imports before the item list/block expr's opening curly brace\n+        ImportScope::Module(item_list) => item_list.l_curly_token(),\n+        // don't insert the imports before the item list's opening curly brace\n+        ImportScope::Block(block) => block.l_curly_token(),\n+    };\n     // there are no imports in this file at all\n     // so put the import after all inner module attributes and possible license header comments\n     if let Some(last_inner_element) = scope_syntax\n         .children_with_tokens()\n+        // skip the curly brace\n+        .skip(l_curly.is_some() as usize)\n         .take_while(|child| match child {\n             NodeOrToken::Node(node) => is_inner_attribute(node.clone()),\n             NodeOrToken::Token(token) => {\n@@ -413,30 +422,21 @@ fn insert_use_(\n         cov_mark::hit!(insert_empty_inner_attr);\n         ted::insert(ted::Position::after(&last_inner_element), use_item.syntax());\n         ted::insert(ted::Position::after(last_inner_element), make::tokens::single_newline());\n-        return;\n-    }\n-    let l_curly = match scope {\n-        ImportScope::File(_) => {\n-            cov_mark::hit!(insert_empty_file);\n-            ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n-            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n-            return;\n-        }\n-        // don't insert the imports before the item list/block expr's opening curly brace\n-        ImportScope::Module(item_list) => item_list.l_curly_token(),\n-        // don't insert the imports before the item list's opening curly brace\n-        ImportScope::Block(block) => block.l_curly_token(),\n-    };\n-    match l_curly {\n-        Some(b) => {\n-            cov_mark::hit!(insert_empty_module);\n-            ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n-            ted::insert(ted::Position::after(&b), use_item.syntax());\n-        }\n-        None => {\n-            // This should never happens, broken module syntax node\n-            ted::insert(ted::Position::first_child_of(scope_syntax), make::tokens::blank_line());\n-            ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+    } else {\n+        match l_curly {\n+            Some(b) => {\n+                cov_mark::hit!(insert_empty_module);\n+                ted::insert(ted::Position::after(&b), make::tokens::single_newline());\n+                ted::insert(ted::Position::after(&b), use_item.syntax());\n+            }\n+            None => {\n+                cov_mark::hit!(insert_empty_file);\n+                ted::insert(\n+                    ted::Position::first_child_of(scope_syntax),\n+                    make::tokens::blank_line(),\n+                );\n+                ted::insert(ted::Position::first_child_of(scope_syntax), use_item.syntax());\n+            }\n         }\n     }\n }"}, {"sha": "59673af3204e6da5632324f8b26a43a5598dbdfa", "filename": "crates/ide-db/src/imports/insert_use/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6b823b0234ab983d7cc9304dfbf2710809da1cdc/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b823b0234ab983d7cc9304dfbf2710809da1cdc/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fimports%2Finsert_use%2Ftests.rs?ref=6b823b0234ab983d7cc9304dfbf2710809da1cdc", "patch": "@@ -441,6 +441,19 @@ fn inserts_after_single_line_inner_comments() {\n \n use foo::bar::Baz;\"#,\n     );\n+    check_none(\n+        \"foo::bar::Baz\",\n+        r\"mod foo {\n+    //! Single line inner comments do not allow any code before them.\n+$0\n+}\",\n+        r\"mod foo {\n+    //! Single line inner comments do not allow any code before them.\n+\n+    use foo::bar::Baz;\n+\n+}\",\n+    );\n }\n \n #[test]"}]}