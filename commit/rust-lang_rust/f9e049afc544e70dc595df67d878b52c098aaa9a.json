{"sha": "f9e049afc544e70dc595df67d878b52c098aaa9a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZTA0OWFmYzU0NGU3MGRjNTk1ZGY2N2Q4NzhiNTJjMDk4YWFhOWE=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-23T17:57:18Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2018-02-23T17:57:18Z"}, "message": "add info about sync", "tree": {"sha": "b478db5d0bd1532b2d212cc504ea65a76243629e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b478db5d0bd1532b2d212cc504ea65a76243629e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9e049afc544e70dc595df67d878b52c098aaa9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9e049afc544e70dc595df67d878b52c098aaa9a", "html_url": "https://github.com/rust-lang/rust/commit/f9e049afc544e70dc595df67d878b52c098aaa9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9e049afc544e70dc595df67d878b52c098aaa9a/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "238bb38a948ddf3d782f8138b39868cb08356c91", "url": "https://api.github.com/repos/rust-lang/rust/commits/238bb38a948ddf3d782f8138b39868cb08356c91", "html_url": "https://github.com/rust-lang/rust/commit/238bb38a948ddf3d782f8138b39868cb08356c91"}], "stats": {"total": 4, "additions": 3, "deletions": 1}, "files": [{"sha": "1067b6ff0c11e9dfc4757a6333b055e3e086bec4", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9e049afc544e70dc595df67d878b52c098aaa9a/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9e049afc544e70dc595df67d878b52c098aaa9a/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f9e049afc544e70dc595df67d878b52c098aaa9a", "patch": "@@ -22,7 +22,9 @@\n //!\n //! Shareable mutable containers exist to permit mutability in presence of aliasing in a \n //! controlled manner. Both `Cell<T>` and `RefCell<T>` allows to do this in a single threaded\n-//! way. For multiple threads is possible to use `Mutex`, `RwLock` or `AtomicXXX`.\n+//! way, you can mutate them using an inmutable reference. However, neither `Cell<T>` nor \n+//! `RefCell<T>` are thread safe (they do not implement `Sync`), if you need to do Aliasing and \n+//! Mutation between multiple threads is possible to use `Mutex`, `RwLock` or `AtomicXXX`.\n //!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)"}]}