{"sha": "2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "node_id": "C_kwDOAAsO6NoAKDIwMTEzMTZlNTk2YzE5YThiNWFlOGNjMDAxMDI2NjdjMmNkYjFlZjc", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-13T21:49:54Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-01-04T00:56:05Z"}, "message": "Mirror metadata changes in layout sanity check", "tree": {"sha": "0063c958e4e65c2ba1a7088ffa487d1246629d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0063c958e4e65c2ba1a7088ffa487d1246629d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "html_url": "https://github.com/rust-lang/rust/commit/2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2011316e596c19a8b5ae8cc00102667c2cdb1ef7/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b25da9ce6dd28d13c85911e0630d019403b7f5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b25da9ce6dd28d13c85911e0630d019403b7f5f3", "html_url": "https://github.com/rust-lang/rust/commit/b25da9ce6dd28d13c85911e0630d019403b7f5f3"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "112f15c6f9e6c9c0fd70702757e36d92ff51e6ab", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/2011316e596c19a8b5ae8cc00102667c2cdb1ef7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2011316e596c19a8b5ae8cc00102667c2cdb1ef7/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=2011316e596c19a8b5ae8cc00102667c2cdb1ef7", "patch": "@@ -670,13 +670,24 @@ where\n                         });\n                     }\n \n-                    match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n-                        ty::Slice(_) | ty::Str => TyMaybeWithLayout::Ty(tcx.types.usize),\n-                        ty::Dynamic(_, _, ty::Dyn) => {\n-                            TyMaybeWithLayout::Ty(tcx.mk_imm_ref(\n+                    let metadata = if let Some(metadata_def_id) = tcx.lang_items().metadata_type() {\n+                        let metadata = tcx.normalize_erasing_regions(\n+                            cx.param_env(),\n+                            tcx.mk_projection(metadata_def_id, [pointee]),\n+                        );\n+\n+                        // Map `Metadata = DynMetadata<dyn Trait>` back to a vtable, since it\n+                        // offers better information than `std::ptr::metadata::VTable`,\n+                        // and we rely on this layout information to trigger a panic in\n+                        // `std::mem::uninitialized::<&dyn Trait>()`, for example.\n+                        if let ty::Adt(def, substs) = metadata.kind()\n+                            && Some(def.did()) == tcx.lang_items().dyn_metadata()\n+                            && substs.type_at(0).is_trait()\n+                        {\n+                            tcx.mk_imm_ref(\n                                 tcx.lifetimes.re_static,\n                                 tcx.mk_array(tcx.types.usize, 3),\n-                            ))\n+                            )\n                             /* FIXME: use actual fn pointers\n                             Warning: naively computing the number of entries in the\n                             vtable by counting the methods on the trait + methods on\n@@ -690,9 +701,36 @@ where\n                                 tcx.mk_array(Option<fn()>),\n                             ])\n                             */\n+                        } else {\n+                            metadata\n                         }\n-                        _ => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n-                    }\n+                    } else {\n+                        match tcx.struct_tail_erasing_lifetimes(pointee, cx.param_env()).kind() {\n+                            ty::Slice(_) | ty::Str => tcx.types.usize,\n+                            ty::Dynamic(_, _, ty::Dyn) => {\n+                                tcx.mk_imm_ref(\n+                                    tcx.lifetimes.re_static,\n+                                    tcx.mk_array(tcx.types.usize, 3),\n+                                )\n+                                /* FIXME: use actual fn pointers\n+                                Warning: naively computing the number of entries in the\n+                                vtable by counting the methods on the trait + methods on\n+                                all parent traits does not work, because some methods can\n+                                be not object safe and thus excluded from the vtable.\n+                                Increase this counter if you tried to implement this but\n+                                failed to do it without duplicating a lot of code from\n+                                other places in the compiler: 2\n+                                tcx.mk_tup(&[\n+                                    tcx.mk_array(tcx.types.usize, 3),\n+                                    tcx.mk_array(Option<fn()>),\n+                                ])\n+                                */\n+                            }\n+                            _ => bug!(\"TyAndLayout::field({:?}): not applicable\", this),\n+                        }\n+                    };\n+\n+                    TyMaybeWithLayout::Ty(metadata)\n                 }\n \n                 // Arrays and slices."}]}