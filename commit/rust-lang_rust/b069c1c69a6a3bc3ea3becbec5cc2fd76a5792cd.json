{"sha": "b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNjljMWM2OWE2YTNiYzNlYTNiZWNiZWM1Y2MyZmQ3NmE1NzkyY2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-29T12:42:09Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-29T12:42:09Z"}, "message": "More style advice", "tree": {"sha": "b0de6544a21b99fb7222e56a65f642231a9c6feb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0de6544a21b99fb7222e56a65f642231a9c6feb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "html_url": "https://github.com/rust-lang/rust/commit/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b674f9ab491fdd01278c21f539e65239518e296", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b674f9ab491fdd01278c21f539e65239518e296", "html_url": "https://github.com/rust-lang/rust/commit/7b674f9ab491fdd01278c21f539e65239518e296"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "bcd86fd3f07bca1241ce11eec30c3ab74cd0ff7f", "filename": "docs/dev/style.md", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=b069c1c69a6a3bc3ea3becbec5cc2fd76a5792cd", "patch": "@@ -197,6 +197,43 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n+Avoid preconditions that spawn function boundaries:\n+\n+\n+```rust\n+// Good\n+fn string_literal_contents(s: &str) -> Option<&str> {\n+    if s.starts_with('\"') && s.ends_with('\"') {\n+        Some(&s[1..s.len() - 1])\n+    } else {\n+        None\n+    }\n+}\n+\n+fn foo() {\n+    let s: &str = ...;\n+    if let Some(contents) = string_literal_contents(s) {\n+\n+    }\n+}\n+\n+// Not as good\n+fn is_string_literal(s: &str) -> Option<&str> {\n+    s.starts_with('\"') && s.ends_with('\"')\n+    Some()\n+}\n+\n+fn foo() {\n+    let s: &str = ...;\n+    if is_string_literal(s) {\n+        let contents = &s[1..s.len() - 1];\n+    }\n+}\n+```\n+\n+In the \"Not as good\" version, the precondition that `1` is a valid char boundary is checked in `is_string_literal` and utilized in `foo`.\n+In the \"Good\" version, precondition check and usage are checked in the same block, and then encoded in the types.\n+\n # Early Returns\n \n Do use early returns\n@@ -271,6 +308,21 @@ if words.len() != 2 {\n }\n ```\n \n+If allocation is inevitable, let the caller allocate the resource:\n+\n+```rust\n+// Good\n+fn frobnicate(s: String) {\n+    ...\n+}\n+\n+// Not as good\n+fn frobnicate(s: &str) {\n+    let s = s.to_string();\n+    ...\n+}\n+```\n+\n # Avoid Monomorphization\n \n Rust uses monomorphization to compile generic code, meaning that for each instantiation of a generic functions with concrete types, the function is compiled afresh, *per crate*."}]}