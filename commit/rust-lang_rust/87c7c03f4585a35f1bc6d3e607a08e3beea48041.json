{"sha": "87c7c03f4585a35f1bc6d3e607a08e3beea48041", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YzdjMDNmNDU4NWEzNWYxYmM2ZDNlNjA3YTA4ZTNiZWVhNDgwNDE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T05:27:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T20:48:03Z"}, "message": "syntax: Don't parameterize the the pretty printer\n\nThe pretty printer constitues an enormous amount of code, there's no reason for\nit to be generic. This just least to a huge amount of metadata which isn't\nnecessary. Instead, this change migrates the pretty printer to using a trait\nobject instead.\n\nCloses #12985", "tree": {"sha": "57e1d8d8e56e26507032d2176864d51693391926", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57e1d8d8e56e26507032d2176864d51693391926"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87c7c03f4585a35f1bc6d3e607a08e3beea48041", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87c7c03f4585a35f1bc6d3e607a08e3beea48041", "html_url": "https://github.com/rust-lang/rust/commit/87c7c03f4585a35f1bc6d3e607a08e3beea48041", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87c7c03f4585a35f1bc6d3e607a08e3beea48041/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f0bc29355ac990595e1771c4bb9a3b7e358d30", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f0bc29355ac990595e1771c4bb9a3b7e358d30", "html_url": "https://github.com/rust-lang/rust/commit/92f0bc29355ac990595e1771c4bb9a3b7e358d30"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "94965e7e0dc3f1d8d7009dd5cf51e17ce614caa9", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=87c7c03f4585a35f1bc6d3e607a08e3beea48041", "patch": "@@ -596,15 +596,15 @@ struct IdentifiedAnnotation;\n \n impl pprust::PpAnn for IdentifiedAnnotation {\n     fn pre(&self,\n-           s: &mut pprust::State<IdentifiedAnnotation>,\n+           s: &mut pprust::State,\n            node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n             pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n     fn post(&self,\n-            s: &mut pprust::State<IdentifiedAnnotation>,\n+            s: &mut pprust::State,\n             node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n             pprust::NodeItem(item) => {\n@@ -634,15 +634,15 @@ struct TypedAnnotation {\n \n impl pprust::PpAnn for TypedAnnotation {\n     fn pre(&self,\n-           s: &mut pprust::State<TypedAnnotation>,\n+           s: &mut pprust::State,\n            node: pprust::AnnNode) -> io::IoResult<()> {\n         match node {\n             pprust::NodeExpr(_) => s.popen(),\n             _ => Ok(())\n         }\n     }\n     fn post(&self,\n-            s: &mut pprust::State<TypedAnnotation>,\n+            s: &mut pprust::State,\n             node: pprust::AnnNode) -> io::IoResult<()> {\n         let tcx = &self.analysis.ty_cx;\n         match node {"}, {"sha": "be49784cba1891438b5f491dd1e5640b4cee9dfb", "filename": "src/librustc/middle/dataflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibrustc%2Fmiddle%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdataflow.rs?ref=87c7c03f4585a35f1bc6d3e607a08e3beea48041", "patch": "@@ -85,7 +85,7 @@ struct LoopScope<'a> {\n \n impl<'a, O:DataFlowOperator> pprust::PpAnn for DataFlowContext<'a, O> {\n     fn pre(&self,\n-           ps: &mut pprust::State<DataFlowContext<'a, O>>,\n+           ps: &mut pprust::State,\n            node: pprust::AnnNode) -> io::IoResult<()> {\n         let id = match node {\n             pprust::NodeExpr(expr) => expr.id,"}, {"sha": "d9510ddad4b16cfcc9fbddf82c3eeb00ee82b09c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=87c7c03f4585a35f1bc6d3e607a08e3beea48041", "patch": "@@ -880,8 +880,8 @@ mod test {\n     use super::*;\n \n     // this version doesn't care about getting comments or docstrings in.\n-    fn fake_print_crate<A: pprust::PpAnn>(s: &mut pprust::State<A>,\n-                                          krate: &ast::Crate) -> io::IoResult<()> {\n+    fn fake_print_crate(s: &mut pprust::State,\n+                        krate: &ast::Crate) -> io::IoResult<()> {\n         s.print_mod(&krate.module, krate.attrs.as_slice())\n     }\n "}, {"sha": "2f96a71cc0fdb5ef3ffaa54fe715996775665074", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87c7c03f4585a35f1bc6d3e607a08e3beea48041/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=87c7c03f4585a35f1bc6d3e607a08e3beea48041", "patch": "@@ -43,8 +43,8 @@ pub enum AnnNode<'a> {\n }\n \n pub trait PpAnn {\n-    fn pre(&self, _state: &mut State<Self>, _node: AnnNode) -> IoResult<()> { Ok(()) }\n-    fn post(&self, _state: &mut State<Self>, _node: AnnNode) -> IoResult<()> { Ok(()) }\n+    fn pre(&self, _state: &mut State, _node: AnnNode) -> IoResult<()> { Ok(()) }\n+    fn post(&self, _state: &mut State, _node: AnnNode) -> IoResult<()> { Ok(()) }\n }\n \n pub struct NoAnn;\n@@ -56,23 +56,24 @@ pub struct CurrentCommentAndLiteral {\n     cur_lit: uint,\n }\n \n-pub struct State<'a, A> {\n+pub struct State<'a> {\n     s: pp::Printer,\n     cm: Option<&'a CodeMap>,\n     intr: @token::IdentInterner,\n     comments: Option<Vec<comments::Comment> >,\n     literals: Option<Vec<comments::Literal> >,\n     cur_cmnt_and_lit: CurrentCommentAndLiteral,\n     boxes: RefCell<Vec<pp::Breaks> >,\n-    ann: &'a A\n+    ann: &'a PpAnn\n }\n \n-pub fn rust_printer(writer: ~io::Writer) -> State<'static, NoAnn> {\n+pub fn rust_printer(writer: ~io::Writer) -> State<'static> {\n     static NO_ANN: NoAnn = NoAnn;\n     rust_printer_annotated(writer, &NO_ANN)\n }\n \n-pub fn rust_printer_annotated<'a, A: PpAnn>(writer: ~io::Writer, ann: &'a A) -> State<'a, A> {\n+pub fn rust_printer_annotated<'a>(writer: ~io::Writer,\n+                                  ann: &'a PpAnn) -> State<'a> {\n     State {\n         s: pp::mk_printer(writer, default_columns),\n         cm: None,\n@@ -95,14 +96,14 @@ pub static default_columns: uint = 78u;\n // Requires you to pass an input filename and reader so that\n // it can scan the input text for comments and literals to\n // copy forward.\n-pub fn print_crate<'a, A: PpAnn>(cm: &'a CodeMap,\n-                                 span_diagnostic: &diagnostic::SpanHandler,\n-                                 krate: &ast::Crate,\n-                                 filename: ~str,\n-                                 input: &mut io::Reader,\n-                                 out: ~io::Writer,\n-                                 ann: &'a A,\n-                                 is_expanded: bool) -> IoResult<()> {\n+pub fn print_crate<'a>(cm: &'a CodeMap,\n+                       span_diagnostic: &diagnostic::SpanHandler,\n+                       krate: &ast::Crate,\n+                       filename: ~str,\n+                       input: &mut io::Reader,\n+                       out: ~io::Writer,\n+                       ann: &'a PpAnn,\n+                       is_expanded: bool) -> IoResult<()> {\n     let (cmnts, lits) = comments::gather_comments_and_literals(\n         span_diagnostic,\n         filename,\n@@ -133,7 +134,7 @@ pub fn print_crate<'a, A: PpAnn>(cm: &'a CodeMap,\n     eof(&mut s.s)\n }\n \n-pub fn to_str(f: |&mut State<NoAnn>| -> IoResult<()>) -> ~str {\n+pub fn to_str(f: |&mut State| -> IoResult<()>) -> ~str {\n     let mut s = rust_printer(~MemWriter::new());\n     f(&mut s).unwrap();\n     eof(&mut s.s).unwrap();\n@@ -237,7 +238,7 @@ pub fn visibility_qualified(vis: ast::Visibility, s: &str) -> ~str {\n     }\n }\n \n-impl<'a, A: PpAnn> State<'a, A> {\n+impl<'a> State<'a> {\n     pub fn ibox(&mut self, u: uint) -> IoResult<()> {\n         self.boxes.borrow_mut().get().push(pp::Inconsistent);\n         pp::ibox(&mut self.s, u)\n@@ -365,7 +366,7 @@ impl<'a, A: PpAnn> State<'a, A> {\n     }\n \n     pub fn commasep<T>(&mut self, b: Breaks, elts: &[T],\n-                       op: |&mut State<A>, &T| -> IoResult<()>)\n+                       op: |&mut State, &T| -> IoResult<()>)\n         -> IoResult<()> {\n         try!(self.rbox(0u, b));\n         let mut first = true;\n@@ -381,7 +382,7 @@ impl<'a, A: PpAnn> State<'a, A> {\n                          &mut self,\n                          b: Breaks,\n                          elts: &[T],\n-                         op: |&mut State<A>, &T| -> IoResult<()>,\n+                         op: |&mut State, &T| -> IoResult<()>,\n                          get_span: |&T| -> codemap::Span) -> IoResult<()> {\n         try!(self.rbox(0u, b));\n         let len = elts.len();"}]}