{"sha": "335e8af98ad40aa1a426edae5b20851abf6c9c2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNWU4YWY5OGFkNDBhYTFhNDI2ZWRhZTViMjA4NTFhYmY2YzljMmE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-27T16:54:04Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-01-27T16:54:04Z"}, "message": "Rollup merge of #21625 - carols10cents:sliceext-examples, r=alexcrichton\n\nHi! I added some examples to some SliceExt methods that didn't have any.\r\n\r\nI'm looking forward to feedback and I'm happy to change anything-- it looks like the doc conventions are still a bit in flux, based on the discussions going on in [rfc 505](https://github.com/rust-lang/rfcs/pull/505).\r\n\r\nI was most unsure about examples for methods that return iterators over slices... I wanted to use asserts on the result of calling `.next()` like in [this permutations example](https://github.com/carols10cents/rust/blob/804c1446b3b0afd84851339d8ee2be1dca8f7713/src/libcollections/slice.rs#L608-L617), but then it gets all cluttered up with lifetime stuff... so I went with iterating and printing and mentioning what the expected printed output is like in [this chunks example](https://github.com/carols10cents/rust/blob/804c1446b3b0afd84851339d8ee2be1dca8f7713/src/libcollections/slice.rs#L297-L304)... any ideas for the best ways to do this are appreciated.\r\n\r\nThank you! :heart:", "tree": {"sha": "3ca6cdddddf045670b49f3895793d84a94f16683", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca6cdddddf045670b49f3895793d84a94f16683"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/335e8af98ad40aa1a426edae5b20851abf6c9c2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/335e8af98ad40aa1a426edae5b20851abf6c9c2a", "html_url": "https://github.com/rust-lang/rust/commit/335e8af98ad40aa1a426edae5b20851abf6c9c2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/335e8af98ad40aa1a426edae5b20851abf6c9c2a/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4af4b377a0217b063f9da673ef2d0fbd083ac24d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4af4b377a0217b063f9da673ef2d0fbd083ac24d", "html_url": "https://github.com/rust-lang/rust/commit/4af4b377a0217b063f9da673ef2d0fbd083ac24d"}, {"sha": "ebd2d8db76ca29a728ee31d6eb2c7a9e4900e74f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebd2d8db76ca29a728ee31d6eb2c7a9e4900e74f", "html_url": "https://github.com/rust-lang/rust/commit/ebd2d8db76ca29a728ee31d6eb2c7a9e4900e74f"}], "stats": {"total": 109, "additions": 105, "deletions": 4}, "files": [{"sha": "300c1d0323b67b42b15cc89f9f47638c8afe2dc4", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 105, "deletions": 4, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/335e8af98ad40aa1a426edae5b20851abf6c9c2a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/335e8af98ad40aa1a426edae5b20851abf6c9c2a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=335e8af98ad40aa1a426edae5b20851abf6c9c2a", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -174,7 +174,7 @@ pub trait SliceExt {\n     fn slice(&self, start: uint, end: uint) -> &[Self::Item];\n \n     /// Deprecated: use `&s[start..]` notation instead.\n-    #[deprecated = \"use &s[start..] isntead\"]\n+    #[deprecated = \"use &s[start..] instead\"]\n     fn slice_from(&self, start: uint) -> &[Self::Item];\n \n     /// Deprecated: use `&s[..end]` notation instead.\n@@ -188,22 +188,55 @@ pub trait SliceExt {\n     /// indices from `[mid, len)` (excluding the index `len` itself).\n     ///\n     /// Panics if `mid > len`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 50];\n+    /// let (v1, v2) = v.split_at(2);\n+    /// assert_eq!([10, 40], v1);\n+    /// assert_eq!([30, 20, 50], v2);\n+    /// ```\n     #[stable]\n     fn split_at(&self, mid: uint) -> (&[Self::Item], &[Self::Item]);\n \n-    /// Returns an iterator over the slice\n+    /// Returns an iterator over the slice.\n     #[stable]\n     fn iter(&self) -> Iter<Self::Item>;\n \n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`.  The matched element is not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split by numbers divisible by 3 (i.e. `[10, 40]`,\n+    /// `[20]`, `[50]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.split(|num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn split<F>(&self, pred: F) -> Split<Self::Item, F>\n                 where F: FnMut(&Self::Item) -> bool;\n \n     /// Returns an iterator over subslices separated by elements that match\n     /// `pred`, limited to splitting at most `n` times.  The matched element is\n     /// not contained in the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split once by numbers divisible by 3 (i.e. `[10, 40]`,\n+    /// `[20, 60, 50]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.splitn(1, |num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn splitn<F>(&self, n: uint, pred: F) -> SplitN<Self::Item, F>\n                  where F: FnMut(&Self::Item) -> bool;\n@@ -212,6 +245,18 @@ pub trait SliceExt {\n     /// `pred` limited to splitting at most `n` times. This starts at the end of\n     /// the slice and works backwards.  The matched element is not contained in\n     /// the subslices.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Print the slice split once, starting from the end, by numbers divisible\n+    /// by 3 (i.e. `[50]`, `[10, 40, 30, 20]`):\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30, 20, 60, 50];\n+    /// for group in v.rsplitn(1, |num| *num % 3 == 0) {\n+    ///     println!(\"{:?}\", group);\n+    /// }\n+    /// ```\n     #[stable]\n     fn rsplitn<F>(&self, n: uint, pred: F) -> RSplitN<Self::Item, F>\n                   where F: FnMut(&Self::Item) -> bool;\n@@ -263,10 +308,28 @@ pub trait SliceExt {\n \n     /// Returns the element of a slice at the given index, or `None` if the\n     /// index is out of bounds.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&40), v.get(1));\n+    /// assert_eq!(None, v.get(3));\n+    /// ```\n     #[stable]\n     fn get(&self, index: uint) -> Option<&Self::Item>;\n \n     /// Returns the first element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&10), v.first());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(None, w.first());\n+    /// ```\n     #[stable]\n     fn first(&self) -> Option<&Self::Item>;\n \n@@ -279,6 +342,16 @@ pub trait SliceExt {\n     fn init(&self) -> &[Self::Item];\n \n     /// Returns the last element of a slice, or `None` if it is empty.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert_eq!(Some(&30), v.last());\n+    ///\n+    /// let w: &[i32] = &[];\n+    /// assert_eq!(None, w.last());\n+    /// ```\n     #[stable]\n     fn last(&self) -> Option<&Self::Item>;\n \n@@ -658,15 +731,43 @@ pub trait SliceExt {\n     #[unstable]\n     fn rposition_elem(&self, t: &Self::Item) -> Option<uint> where Self::Item: PartialEq;\n \n-    /// Return true if the slice contains an element with the given value.\n+    /// Returns true if the slice contains an element with the given value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.contains(&30));\n+    /// assert!(!v.contains(&50));\n+    /// ```\n     #[stable]\n     fn contains(&self, x: &Self::Item) -> bool where Self::Item: PartialEq;\n \n     /// Returns true if `needle` is a prefix of the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.starts_with(&[10]));\n+    /// assert!(v.starts_with(&[10, 40]));\n+    /// assert!(!v.starts_with(&[50]));\n+    /// assert!(!v.starts_with(&[10, 50]));\n+    /// ```\n     #[stable]\n     fn starts_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n \n     /// Returns true if `needle` is a suffix of the slice.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let v = [10, 40, 30];\n+    /// assert!(v.ends_with(&[30]));\n+    /// assert!(v.ends_with(&[40, 30]));\n+    /// assert!(!v.ends_with(&[50]));\n+    /// assert!(!v.ends_with(&[50, 30]));\n+    /// ```\n     #[stable]\n     fn ends_with(&self, needle: &[Self::Item]) -> bool where Self::Item: PartialEq;\n "}]}