{"sha": "9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGU2YjZkOTZjY2I3NjgyNWM4ZTNiY2E1NGMyODcyN2NlZWVkNjM=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-24T14:23:36Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-24T14:23:43Z"}, "message": "rustc: expose the common DUMMY_SP query case as tcx methods.", "tree": {"sha": "7acf09f51e047a8d03ddac1f23a8232f1fd8ea4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7acf09f51e047a8d03ddac1f23a8232f1fd8ea4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "html_url": "https://github.com/rust-lang/rust/commit/9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "612bb1f54e8c6c424b6664e16301354c545be34d", "url": "https://api.github.com/repos/rust-lang/rust/commits/612bb1f54e8c6c424b6664e16301354c545be34d", "html_url": "https://github.com/rust-lang/rust/commit/612bb1f54e8c6c424b6664e16301354c545be34d"}], "stats": {"total": 147, "additions": 39, "deletions": 108}, "files": [{"sha": "6947e7c3f4085ce579d75f7a32f1bfd86f07bb3b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -43,7 +43,7 @@ use std::fmt;\n use syntax::attr;\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span};\n use errors::{self, Diagnostic, DiagnosticBuilder};\n use hir;\n use hir::def_id::LOCAL_CRATE;\n@@ -1234,7 +1234,7 @@ fn check_lint_name_cmdline(sess: &Session, lint_cx: &LintStore,\n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let _task = tcx.dep_graph.in_task(DepNode::LateLintCheck);\n \n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let krate = tcx.hir.krate();\n "}, {"sha": "0840495ff77a893a3205b62a712c8690a6571329", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -26,7 +26,6 @@ use util::nodemap::FxHashSet;\n \n use syntax::{ast, codemap};\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n use syntax_pos;\n \n // Any local node that may call something in its body block should be\n@@ -593,7 +592,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DeadVisitor<'a, 'tcx> {\n }\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n     let krate = tcx.hir.krate();\n     let live_symbols = find_live(tcx, access_levels, krate);\n     let mut visitor = DeadVisitor { tcx: tcx, live_symbols: live_symbols };"}, {"sha": "431760b6fcd65187bca5eafec3f080bc1bea4cc1", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -28,7 +28,6 @@ use util::nodemap::{NodeSet, FxHashSet};\n use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n-use syntax::codemap::DUMMY_SP;\n use hir;\n use hir::def_id::LOCAL_CRATE;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n@@ -364,13 +363,13 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n }\n \n pub fn find_reachable<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<NodeSet> {\n-    ty::queries::reachable_set::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+    tcx.reachable_set(LOCAL_CRATE)\n }\n \n fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> Rc<NodeSet> {\n     debug_assert!(crate_num == LOCAL_CRATE);\n \n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let any_library = tcx.sess.crate_types.borrow().iter().any(|ty| {\n         *ty == config::CrateTypeRlib || *ty == config::CrateTypeDylib ||"}, {"sha": "7431eb3fe96efd73e498dc53aca4def967de04bb", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -656,7 +656,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n pub fn check_unused_or_stable_features<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let sess = &tcx.sess;\n \n-    let access_levels = &ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     if tcx.stability.borrow().staged_api[&LOCAL_CRATE] && tcx.sess.features.borrow().staged_api {\n         let krate = tcx.hir.krate();"}, {"sha": "3023e006d1b170ec0a51f1b7d229f8703cbb630c", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -351,6 +351,13 @@ macro_rules! define_maps {\n             }\n         })*\n \n+        impl<'a, $tcx, 'lcx> TyCtxt<'a, $tcx, 'lcx> {\n+            $($(#[$attr])*\n+            pub fn $name(self, key: $K) -> $V {\n+                queries::$name::get(self, DUMMY_SP, key)\n+            })*\n+        }\n+\n         pub struct Providers<$tcx> {\n             $(pub $name: for<'a> fn(TyCtxt<'a, $tcx, $tcx>, $K) -> $V),*\n         }"}, {"sha": "9af8e2a3fc220b1c47b09642cb57d02b79961207", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 5, "deletions": 74, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -1686,7 +1686,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n             let mut discr = prev_discr.map_or(initial, |d| d.wrap_incr());\n             if let VariantDiscr::Explicit(expr_did) = v.discr {\n                 let substs = Substs::empty();\n-                match queries::const_eval::get(tcx, DUMMY_SP, (expr_did, substs)) {\n+                match tcx.const_eval((expr_did, substs)) {\n                     Ok(ConstVal::Integral(v)) => {\n                         discr = v;\n                     }\n@@ -1725,7 +1725,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 }\n                 ty::VariantDiscr::Explicit(expr_did) => {\n                     let substs = Substs::empty();\n-                    match queries::const_eval::get(tcx, DUMMY_SP, (expr_did, substs)) {\n+                    match tcx.const_eval((expr_did, substs)) {\n                         Ok(ConstVal::Integral(v)) => {\n                             explicit_value = v;\n                             break;\n@@ -1760,7 +1760,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n     }\n \n     pub fn destructor(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Option<Destructor> {\n-        queries::adt_destructor::get(tcx, DUMMY_SP, self.did)\n+        tcx.adt_destructor(self.did)\n     }\n \n     /// Returns a list of types such that `Self: Sized` if and only\n@@ -2045,10 +2045,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.typeck_tables_of(self.hir.body_owner_def_id(body))\n     }\n \n-    pub fn typeck_tables_of(self, def_id: DefId) -> &'gcx TypeckTables<'gcx> {\n-        queries::typeck_tables_of::get(self, DUMMY_SP, def_id)\n-    }\n-\n     pub fn expr_span(self, id: NodeId) -> Span {\n         match self.hir.find(id) {\n             Some(hir_map::NodeExpr(e)) => {\n@@ -2136,24 +2132,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             .collect()\n     }\n \n-    pub fn impl_polarity(self, id: DefId) -> hir::ImplPolarity {\n-        queries::impl_polarity::get(self, DUMMY_SP, id)\n-    }\n-\n     pub fn trait_relevant_for_never(self, did: DefId) -> bool {\n         self.associated_items(did).any(|item| {\n             item.relevant_for_never()\n         })\n     }\n \n-    pub fn coerce_unsized_info(self, did: DefId) -> adjustment::CoerceUnsizedInfo {\n-        queries::coerce_unsized_info::get(self, DUMMY_SP, did)\n-    }\n-\n-    pub fn associated_item(self, def_id: DefId) -> AssociatedItem {\n-        queries::associated_item::get(self, DUMMY_SP, def_id)\n-    }\n-\n     fn associated_item_from_trait_item_ref(self,\n                                            parent_def_id: DefId,\n                                            trait_item_ref: &hir::TraitItemRef)\n@@ -2207,23 +2191,13 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn associated_item_def_ids(self, def_id: DefId) -> Rc<Vec<DefId>> {\n-        queries::associated_item_def_ids::get(self, DUMMY_SP, def_id)\n-    }\n-\n     #[inline] // FIXME(#35870) Avoid closures being unexported due to impl Trait.\n     pub fn associated_items(self, def_id: DefId)\n                             -> impl Iterator<Item = ty::AssociatedItem> + 'a {\n         let def_ids = self.associated_item_def_ids(def_id);\n         (0..def_ids.len()).map(move |i| self.associated_item(def_ids[i]))\n     }\n \n-    /// Returns the trait-ref corresponding to a given impl, or None if it is\n-    /// an inherent impl.\n-    pub fn impl_trait_ref(self, id: DefId) -> Option<TraitRef<'gcx>> {\n-        queries::impl_trait_ref::get(self, DUMMY_SP, id)\n-    }\n-\n     /// Returns true if the impls are the same polarity and are implementing\n     /// a trait which contains no items\n     pub fn impls_are_allowed_to_overlap(self, def_id1: DefId, def_id2: DefId) -> bool {\n@@ -2325,40 +2299,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    // If the given item is in an external crate, looks up its type and adds it to\n-    // the type cache. Returns the type parameters and type.\n-    pub fn type_of(self, did: DefId) -> Ty<'gcx> {\n-        queries::type_of::get(self, DUMMY_SP, did)\n-    }\n-\n-    /// Given the did of a trait, returns its canonical trait ref.\n-    pub fn trait_def(self, did: DefId) -> &'gcx TraitDef {\n-        queries::trait_def::get(self, DUMMY_SP, did)\n-    }\n-\n-    /// Given the did of an ADT, return a reference to its definition.\n-    pub fn adt_def(self, did: DefId) -> &'gcx AdtDef {\n-        queries::adt_def::get(self, DUMMY_SP, did)\n-    }\n-\n-    /// Given the did of an item, returns its generics.\n-    pub fn generics_of(self, did: DefId) -> &'gcx Generics {\n-        queries::generics_of::get(self, DUMMY_SP, did)\n-    }\n-\n-    /// Given the did of an item, returns its full set of predicates.\n-    pub fn predicates_of(self, did: DefId) -> GenericPredicates<'gcx> {\n-        queries::predicates_of::get(self, DUMMY_SP, did)\n-    }\n-\n-    /// Given the did of a trait, returns its superpredicates.\n-    pub fn super_predicates_of(self, did: DefId) -> GenericPredicates<'gcx> {\n-        queries::super_predicates_of::get(self, DUMMY_SP, did)\n-    }\n-\n     /// Given the did of an item, returns its MIR, borrowed immutably.\n     pub fn item_mir(self, did: DefId) -> Ref<'gcx, Mir<'gcx>> {\n-        queries::mir::get(self, DUMMY_SP, did).borrow()\n+        self.mir(did).borrow()\n     }\n \n     /// Return the possibly-auto-generated MIR of a (DefId, Subst) pair.\n@@ -2367,7 +2310,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         match instance {\n             ty::InstanceDef::Item(did) if true => self.item_mir(did),\n-            _ => queries::mir_shims::get(self, DUMMY_SP, instance).borrow(),\n+            _ => self.mir_shims(instance).borrow(),\n         }\n     }\n \n@@ -2399,10 +2342,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.get_attrs(did).iter().any(|item| item.check_name(attr))\n     }\n \n-    pub fn variances_of(self, item_id: DefId) -> Rc<Vec<ty::Variance>> {\n-        queries::variances_of::get(self, DUMMY_SP, item_id)\n-    }\n-\n     pub fn trait_has_default_impl(self, trait_def_id: DefId) -> bool {\n         let def = self.trait_def(trait_def_id);\n         def.flags.get().intersects(TraitFlags::HAS_DEFAULT_IMPL)\n@@ -2437,14 +2376,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         def.flags.set(def.flags.get() | TraitFlags::HAS_REMOTE_IMPLS);\n     }\n \n-    pub fn closure_kind(self, def_id: DefId) -> ty::ClosureKind {\n-        queries::closure_kind::get(self, DUMMY_SP, def_id)\n-    }\n-\n-    pub fn closure_type(self, def_id: DefId) -> ty::PolyFnSig<'tcx> {\n-        queries::closure_type::get(self, DUMMY_SP, def_id)\n-    }\n-\n     /// Given the def_id of an impl, return the def_id of the trait it implements.\n     /// If it implements no trait, return `None`.\n     pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {"}, {"sha": "54e00efc08e7736cc1d54403680c09dd1dcacec9", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -369,7 +369,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         };\n \n-        ty::queries::coherent_trait::get(self, DUMMY_SP, (LOCAL_CRATE, drop_trait));\n+        self.coherent_trait((LOCAL_CRATE, drop_trait));\n \n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);"}, {"sha": "401c878cd4010446e0233a2a8faafe976bfa57dd", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -42,7 +42,7 @@ use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n-use syntax_pos::{DUMMY_SP, MultiSpan, Span};\n+use syntax_pos::{MultiSpan, Span};\n use errors::DiagnosticBuilder;\n \n use rustc::hir;\n@@ -63,7 +63,7 @@ pub type LoanDataFlow<'a, 'tcx> = DataFlowContext<'a, 'tcx, LoanDataFlowOperator\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.visit_all_bodies_in_krate(|body_owner_def_id, _body_id| {\n-        ty::queries::borrowck::get(tcx, DUMMY_SP, body_owner_def_id);\n+        tcx.borrowck(body_owner_def_id);\n     });\n }\n "}, {"sha": "e7ccf3cbdb8f2762f5411c48565cf7619f8055f8", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -27,7 +27,7 @@ use rustc::util::nodemap::DefIdMap;\n \n use syntax::ast;\n use rustc::hir::{self, Expr};\n-use syntax_pos::{Span, DUMMY_SP};\n+use syntax_pos::Span;\n \n use std::cmp::Ordering;\n \n@@ -773,7 +773,7 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     };\n \n     let body = if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n-        ty::queries::mir_const_qualif::get(tcx, DUMMY_SP, def_id);\n+        tcx.mir_const_qualif(def_id);\n         tcx.hir.body(tcx.hir.body_owned_by(id))\n     } else {\n         tcx.sess.cstore.item_body(tcx, def_id)"}, {"sha": "4fd8d478717aff66f7950b50043b813367d196d5", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -36,7 +36,7 @@ use syntax::ast::{self, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::attr;\n use syntax::symbol::Symbol;\n-use syntax_pos::{self, DUMMY_SP};\n+use syntax_pos;\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -1169,7 +1169,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> EntryBuilder<'a, 'b, 'tcx> {\n         let body = tcx.hir.body_owned_by(id);\n \n         Entry {\n-            kind: EntryKind::Const(ty::queries::mir_const_qualif::get(tcx, DUMMY_SP, def_id)),\n+            kind: EntryKind::Const(tcx.mir_const_qualif(def_id)),\n             visibility: self.lazy(&ty::Visibility::Public),\n             span: self.lazy(&tcx.def_span(def_id)),\n             attributes: LazySeq::empty(),"}, {"sha": "48f70c2685129f76dfb43e80111a0cea0d03c5ff", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -959,7 +959,7 @@ impl<'tcx> MirMapPass<'tcx> for QualifyAndPromoteConstants {\n             let src = MirSource::from_node(tcx, id);\n \n             if let MirSource::Const(_) = src {\n-                ty::queries::mir_const_qualif::get(tcx, DUMMY_SP, def_id);\n+                tcx.mir_const_qualif(def_id);\n                 continue;\n             }\n "}, {"sha": "06685665dd1d714b332356e0a43d77c4246722c7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -38,7 +38,7 @@ use rustc::ty::fold::TypeVisitor;\n use rustc::ty::maps::Providers;\n use rustc::util::nodemap::NodeSet;\n use syntax::ast;\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n \n use std::cmp;\n use std::mem::replace;\n@@ -1222,7 +1222,7 @@ pub fn provide(providers: &mut Providers) {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Rc<AccessLevels> {\n     tcx.dep_graph.with_ignore(|| { // FIXME\n-        ty::queries::privacy_access_levels::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+        tcx.privacy_access_levels(LOCAL_CRATE)\n     })\n }\n "}, {"sha": "78e0a524ef2dc833b4912f9393833d78c1f9c0be", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -21,9 +21,8 @@ use declare;\n use llvm::{self, ValueRef};\n use monomorphize::{self, Instance};\n use rustc::hir::def_id::DefId;\n-use rustc::ty::{self, TypeFoldable};\n+use rustc::ty::TypeFoldable;\n use rustc::ty::subst::Substs;\n-use syntax_pos::DUMMY_SP;\n use trans_item::TransItem;\n use type_of;\n \n@@ -105,7 +104,7 @@ pub fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         // *in Rust code* may unwind. Foreign items like `extern \"C\" {\n         // fn foo(); }` are assumed not to unwind **unless** they have\n         // a `#[unwind]` attribute.\n-        if !ty::queries::is_foreign_item::get(tcx, DUMMY_SP, instance.def_id()) {\n+        if !tcx.is_foreign_item(instance.def_id()) {\n             attributes::unwind(llfn, true);\n             unsafe {\n                 llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);"}, {"sha": "1c0c68ae7d7cb14998795c08a98944393c66010c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -621,7 +621,7 @@ pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult\n }\n \n pub fn check_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> CompileResult {\n-    ty::queries::typeck_item_bodies::get(tcx, DUMMY_SP, LOCAL_CRATE)\n+    tcx.typeck_item_bodies(LOCAL_CRATE)\n }\n \n fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) -> CompileResult {"}, {"sha": "45881bb3b783a66ab27106582a0b859e99da2a8f", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -26,7 +26,7 @@ use rustc::util::nodemap::DefIdMap;\n \n use std::rc::Rc;\n use syntax::ast;\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n pub fn crate_inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -67,7 +67,7 @@ pub fn inherent_impls<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // [the plan]: https://github.com/rust-lang/rust-roadmap/issues/4\n \n     let result = tcx.dep_graph.with_ignore(|| {\n-        let crate_map = ty::queries::crate_inherent_impls::get(tcx, DUMMY_SP, ty_def_id.krate);\n+        let crate_map = tcx.crate_inherent_impls(ty_def_id.krate);\n         match crate_map.inherent_impls.get(&ty_def_id) {\n             Some(v) => v.clone(),\n             None => Rc::new(vec![]),"}, {"sha": "34aec8ef1ac8c1f8e9961228ecdad38afd357aed", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -14,8 +14,6 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::traits::{self, Reveal};\n use rustc::ty::{self, TyCtxt};\n \n-use syntax_pos::DUMMY_SP;\n-\n pub fn crate_inherent_impls_overlap_check<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                     crate_num: CrateNum) {\n     assert_eq!(crate_num, LOCAL_CRATE);\n@@ -68,7 +66,7 @@ impl<'a, 'tcx> InherentOverlapChecker<'a, 'tcx> {\n     }\n \n     fn check_for_overlapping_inherent_impls(&self, ty_def_id: DefId) {\n-        let impls = ty::queries::inherent_impls::get(self.tcx, DUMMY_SP, ty_def_id);\n+        let impls = self.tcx.inherent_impls(ty_def_id);\n \n         for (i, &impl1_def_id) in impls.iter().enumerate() {\n             for &impl2_def_id in &impls[(i + 1)..] {"}, {"sha": "56ae9d545751f56c1eae0aed72d6e8592ca70a87", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -16,11 +16,10 @@\n // mappings. That mapping code resides here.\n \n use hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n-use rustc::ty::{self, TyCtxt, TypeFoldable};\n+use rustc::ty::{TyCtxt, TypeFoldable};\n use rustc::ty::maps::Providers;\n \n use syntax::ast;\n-use syntax_pos::DUMMY_SP;\n \n mod builtin;\n mod inherent_impls;\n@@ -132,14 +131,14 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir.krate().trait_impls.keys() {\n-        ty::queries::coherent_trait::get(tcx, DUMMY_SP, (LOCAL_CRATE, trait_def_id));\n+        tcx.coherent_trait((LOCAL_CRATE, trait_def_id));\n     }\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n     overlap::check_default_impls(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n-    ty::queries::crate_inherent_impls::get(tcx, DUMMY_SP, LOCAL_CRATE);\n-    ty::queries::crate_inherent_impls_overlap_check::get(tcx, DUMMY_SP, LOCAL_CRATE);\n+    tcx.crate_inherent_impls(LOCAL_CRATE);\n+    tcx.crate_inherent_impls_overlap_check(LOCAL_CRATE);\n }"}, {"sha": "71bb53e9b81c74be8f0d72bb86f45fc9fd2e968b", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bde6b6d96ccb76825c8e3bca54c28727ceeed63/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=9bde6b6d96ccb76825c8e3bca54c28727ceeed63", "patch": "@@ -15,7 +15,6 @@ use std::io;\n use std::iter::once;\n \n use syntax::ast;\n-use syntax_pos::DUMMY_SP;\n use rustc::hir;\n \n use rustc::hir::def::{Def, CtorKind};\n@@ -234,7 +233,7 @@ pub fn build_impls(cx: &DocContext, did: DefId) -> Vec<clean::Item> {\n     let tcx = cx.tcx;\n     let mut impls = Vec::new();\n \n-    for &did in ty::queries::inherent_impls::get(tcx, DUMMY_SP, did).iter() {\n+    for &did in tcx.inherent_impls(did).iter() {\n         build_impl(cx, did, &mut impls);\n     }\n "}]}