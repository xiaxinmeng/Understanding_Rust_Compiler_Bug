{"sha": "3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDNhZjE1ZDhkZGI0OTdlNWFhNzZjYjFhZTA1MzAxOThjNjNmOTY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-17T00:30:31Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-04-19T00:40:42Z"}, "message": "rustc: Anti-copy police\n\nIn this case, some copies are still necessary to convert from\na mutable to an immutable @-box. It's still an improvement,\nI hope.", "tree": {"sha": "69ea13b8a3adb5f9869d8ac66cf86319decb3854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69ea13b8a3adb5f9869d8ac66cf86319decb3854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "html_url": "https://github.com/rust-lang/rust/commit/3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18db9a2954450cdc5ace4c91a147804824aa153b", "url": "https://api.github.com/repos/rust-lang/rust/commits/18db9a2954450cdc5ace4c91a147804824aa153b", "html_url": "https://github.com/rust-lang/rust/commit/18db9a2954450cdc5ace4c91a147804824aa153b"}], "stats": {"total": 65, "additions": 33, "deletions": 32}, "files": [{"sha": "355bc13766648177f189b5700f234ed09cbd9182", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -898,9 +898,9 @@ mod test {\n                              getopts::fail_str(f))\n             };\n         let sessopts = build_session_options(\n-            ~\"rustc\", matches, diagnostic::emit);\n+            @~\"rustc\", matches, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, ~\"whatever\", str_input(~\"\"));\n+        let cfg = build_configuration(sess, @~\"whatever\", str_input(~\"\"));\n         assert!((attr::contains_name(cfg, ~\"test\")));\n     }\n \n@@ -917,9 +917,9 @@ mod test {\n               }\n             };\n         let sessopts = build_session_options(\n-            ~\"rustc\", matches, diagnostic::emit);\n+            @~\"rustc\", matches, diagnostic::emit);\n         let sess = build_session(sessopts, diagnostic::emit);\n-        let cfg = build_configuration(sess, ~\"whatever\", str_input(~\"\"));\n+        let cfg = build_configuration(sess, @~\"whatever\", str_input(~\"\"));\n         let test_items = attr::find_meta_items_by_name(cfg, ~\"test\");\n         assert!((vec::len(test_items) == 1u));\n     }"}, {"sha": "cec9a95671e4319cb02b08bd713b2b1a234f7549", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -184,7 +184,7 @@ pub struct CrateContext {\n      monomorphized: @mut HashMap<mono_id, ValueRef>,\n      monomorphizing: @mut HashMap<ast::def_id, uint>,\n      // Cache computed type parameter uses (see type_use.rs)\n-     type_use_cache: @mut HashMap<ast::def_id, ~[type_use::type_uses]>,\n+     type_use_cache: @mut HashMap<ast::def_id, @~[type_use::type_uses]>,\n      // Cache generated vtables\n      vtables: @mut HashMap<mono_id, ValueRef>,\n      // Cache of constant strings,"}, {"sha": "c6ade350e0bbac9eb8aabc2cb97a72d5020f4094", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -342,7 +342,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n                     substs: &[ty::t],\n                     vtables: Option<typeck::vtable_res>,\n                     impl_did_opt: Option<ast::def_id>,\n-                    +param_uses: Option<~[type_use::type_uses]>) -> mono_id {\n+                    param_uses: Option<@~[type_use::type_uses]>) -> mono_id {\n     let precise_param_ids = match vtables {\n       Some(vts) => {\n         let item_ty = ty::lookup_item_type(ccx.tcx, item);\n@@ -353,12 +353,12 @@ pub fn make_mono_id(ccx: @CrateContext,\n                 match *bound {\n                   ty::bound_trait(_) => {\n                     v.push(meth::vtable_id(ccx, /*bad*/copy vts[i]));\n-                    i += 1u;\n+                    i += 1;\n                   }\n                   _ => ()\n                 }\n             }\n-            (*subst, if v.len() > 0u { Some(v) } else { None })\n+            (*subst, if !v.is_empty() { Some(v) } else { None })\n         })\n       }\n       None => {\n@@ -367,7 +367,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n     };\n     let param_ids = match param_uses {\n       Some(ref uses) => {\n-        vec::map2(precise_param_ids, *uses, |id, uses| {\n+        vec::map2(precise_param_ids, **uses, |id, uses| {\n             if ccx.sess.no_monomorphic_collapse() {\n                 match copy *id {\n                     (a, b) => mono_precise(a, b)\n@@ -377,7 +377,7 @@ pub fn make_mono_id(ccx: @CrateContext,\n                     // XXX: Bad copy.\n                     (a, copy b@Some(_)) => mono_precise(a, b),\n                     (subst, None) => {\n-                        if *uses == 0u {\n+                        if *uses == 0 {\n                             mono_any\n                         } else if *uses == type_use::use_repr &&\n                             !ty::type_needs_drop(ccx.tcx, subst)"}, {"sha": "4094c597bbbefc2f7bad4466ad2e3679d6971988", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -47,19 +47,19 @@ use syntax::ast_util;\n use syntax::visit;\n \n pub type type_uses = uint; // Bitmask\n-pub static use_repr: uint = 1u;   /* Dependency on size/alignment/mode and\n+pub static use_repr: uint = 1;   /* Dependency on size/alignment/mode and\n                                      take/drop glue */\n-pub static use_tydesc: uint = 2u; /* Takes the tydesc, or compares */\n+pub static use_tydesc: uint = 2; /* Takes the tydesc, or compares */\n \n pub struct Context {\n     ccx: @CrateContext,\n     uses: @mut ~[type_uses]\n }\n \n pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n-    -> ~[type_uses] {\n+    -> @~[type_uses] {\n     match ccx.type_use_cache.find(&fn_id) {\n-      Some(uses) => return /*bad*/ copy *uses,\n+      Some(uses) => return *uses,\n       None => ()\n     }\n \n@@ -70,11 +70,11 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n     };\n \n     // Conservatively assume full use for recursive loops\n-    ccx.type_use_cache.insert(fn_id, vec::from_elem(n_tps, 3u));\n+    ccx.type_use_cache.insert(fn_id, @vec::from_elem(n_tps, 3u));\n \n     let cx = Context {\n         ccx: ccx,\n-        uses: @mut vec::from_elem(n_tps, 0u)\n+        uses: @mut vec::from_elem(n_tps, 0)\n     };\n     match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n         ty::ty_bare_fn(ty::BareFnTy {sig: ref sig, _}) |\n@@ -92,8 +92,9 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n     }\n \n     if fn_id_loc.crate != local_crate {\n-        let uses = copy *cx.uses;\n-        ccx.type_use_cache.insert(fn_id, copy uses);\n+        let Context { uses: @uses, _ } = cx;\n+        let uses = @uses; // mutability\n+        ccx.type_use_cache.insert(fn_id, uses);\n         return uses;\n     }\n     let map_node = match ccx.tcx.items.find(&fn_id_loc.node) {\n@@ -179,9 +180,9 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                                 ccx.tcx.sess.parse_sess.interner)));\n       }\n     }\n-    // XXX: Bad copies, use @vec instead?\n-    let uses = copy *cx.uses;\n-    ccx.type_use_cache.insert(fn_id, copy uses);\n+    let Context { uses: @uses, _ } = cx;\n+    let uses = @uses; // mutability\n+    ccx.type_use_cache.insert(fn_id, uses);\n     uses\n }\n \n@@ -253,7 +254,7 @@ pub fn mark_for_method_call(cx: Context, e_id: node_id, callee_id: node_id) {\n                 //               before stage2\n                 let ts = /*bad*/ copy **ts;\n                 let type_uses = type_uses_for(cx.ccx, did, ts.len());\n-                for vec::each2(type_uses, ts) |uses, subst| {\n+                for vec::each2(*type_uses, ts) |uses, subst| {\n                     type_needs(cx, *uses, *subst)\n                 }\n             }\n@@ -302,7 +303,7 @@ pub fn mark_for_expr(cx: Context, e: @expr) {\n             let ts = copy **ts;\n             let id = ast_util::def_id_of_def(*cx.ccx.tcx.def_map.get(&e.id));\n             let uses_for_ts = type_uses_for(cx.ccx, id, ts.len());\n-            for vec::each2(uses_for_ts, ts) |uses, subst| {\n+            for vec::each2(*uses_for_ts, ts) |uses, subst| {\n                 type_needs(cx, *uses, *subst)\n             }\n         }"}, {"sha": "6c759e935b9313bda5ffc5e45c3c7614a04022d1", "filename": "src/librustdoc/parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustdoc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustdoc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fparse.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -39,5 +39,5 @@ pub fn from_str_sess(sess: session::Session, source: ~str) -> @ast::crate {\n }\n \n fn cfg(sess: session::Session, input: driver::input) -> ast::crate_cfg {\n-    driver::build_configuration(sess, ~\"rustdoc\", input)\n+    driver::build_configuration(sess, @~\"rustdoc\", input)\n }"}, {"sha": "e14a6e0e7409e91a441ee9967f2a20d3eaa09ce8", "filename": "src/librusti/rusti.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rc?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -127,7 +127,7 @@ fn record(repl: Repl, blk: @ast::blk, intr: @token::ident_interner) -> Repl {\n fn run(repl: Repl, input: ~str) -> Repl {\n     let options = @session::options {\n         crate_type: session::unknown_crate,\n-        binary: repl.binary,\n+        binary: @repl.binary,\n         addl_lib_search_paths: repl.lib_search_paths.map(|p| Path(*p)),\n         jit: true,\n         .. *session::basic_options()\n@@ -146,7 +146,7 @@ fn run(repl: Repl, input: ~str) -> Repl {\n \n     debug!(\"building driver configuration\");\n     let cfg = driver::build_configuration(sess,\n-                                          repl.binary,\n+                                          @repl.binary,\n                                           wrapped);\n \n     let outputs = driver::build_output_filenames(wrapped, &None, &None, sess);\n@@ -191,14 +191,14 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n     match do task::try {\n         let src_path = Path(src_filename);\n         let options = @session::options {\n-            binary: binary,\n+            binary: @binary,\n             addl_lib_search_paths: ~[os::getcwd()],\n             .. *session::basic_options()\n         };\n         let input = driver::file_input(src_path);\n         let sess = driver::build_session(options, diagnostic::emit);\n         *sess.building_library = true;\n-        let cfg = driver::build_configuration(sess, binary, input);\n+        let cfg = driver::build_configuration(sess, @binary, input);\n         let outputs = driver::build_output_filenames(\n             input, &None, &None, sess);\n         // If the library already exists and is newer than the source"}, {"sha": "c28e790338db7e71b510df464ce58e357a6b2dfb", "filename": "src/librustpkg/rustpkg.rc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustpkg%2Frustpkg.rc", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustpkg%2Frustpkg.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Frustpkg.rc?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -76,13 +76,13 @@ impl PkgScript {\n         // Build the rustc session data structures to pass\n         // to the compiler\n         let options = @session::options {\n-            binary: binary,\n+            binary: @binary,\n             crate_type: session::bin_crate,\n             .. *session::basic_options()\n         };\n         let input = driver::file_input(script);\n         let sess = driver::build_session(options, diagnostic::emit);\n-        let cfg = driver::build_configuration(sess, binary, input);\n+        let cfg = driver::build_configuration(sess, @binary, input);\n         let (crate, _) = driver::compile_upto(sess, cfg, input,\n                                               driver::cu_parse, None);\n         let work_dir = dest_dir(id);"}, {"sha": "c61a0025ff6defe57f8743292bc29c57cc134664", "filename": "src/librustpkg/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustpkg%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43af15d8ddb497e5aa76cb1ae0530198c63f96/src%2Flibrustpkg%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Futil.rs?ref=3d43af15d8ddb497e5aa76cb1ae0530198c63f96", "patch": "@@ -467,7 +467,7 @@ pub fn compile_input(sysroot: Option<Path>,\n         test: test,\n         maybe_sysroot: sysroot,\n         addl_lib_search_paths: ~[copy *out_dir],\n-        .. *driver::build_session_options(binary, &matches, diagnostic::emit)\n+        .. *driver::build_session_options(@binary, &matches, diagnostic::emit)\n     };\n     let mut crate_cfg = options.cfg;\n \n@@ -499,7 +499,7 @@ pub fn compile_crate_from_input(input: driver::input, build_dir_opt: Option<Path\n     debug!(\"Calling build_output_filenames with %?\", build_dir_opt);\n     let outputs = driver::build_output_filenames(input, &build_dir_opt, &None, sess);\n     debug!(\"Outputs are %? and output type = %?\", outputs, sess.opts.output_type);\n-    let cfg = driver::build_configuration(sess, binary, input);\n+    let cfg = driver::build_configuration(sess, @binary, input);\n     match crate_opt {\n         Some(c) => {\n             debug!(\"Calling compile_rest, outputs = %?\", outputs);"}]}