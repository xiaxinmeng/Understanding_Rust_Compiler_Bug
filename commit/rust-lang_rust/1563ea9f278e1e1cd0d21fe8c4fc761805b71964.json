{"sha": "1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjNlYTlmMjc4ZTFlMWNkMGQyMWZlOGM0ZmM3NjE4MDViNzE5NjQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T22:39:46Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T22:39:46Z"}, "message": "rustc: Remove f{32,64} % from the language\n\nThis commit removes the compiler support for floating point modulus operations,\nas well as from the language. An implementation for this operator is now\nrequired to be provided by libraries.\n\nFloating point modulus is rarely used, doesn't exist in C, and is always lowered\nto an fmod library call by LLVM, and LLVM is considering removing support\nentirely.\n\nCloses #12278", "tree": {"sha": "fcbaf8041e5416abcecd878ccbb5970d7acb0f60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fcbaf8041e5416abcecd878ccbb5970d7acb0f60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "html_url": "https://github.com/rust-lang/rust/commit/1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02f51211eddbbaf6c6e02cecc78957ce1d5b4600", "url": "https://api.github.com/repos/rust-lang/rust/commits/02f51211eddbbaf6c6e02cecc78957ce1d5b4600", "html_url": "https://github.com/rust-lang/rust/commit/02f51211eddbbaf6c6e02cecc78957ce1d5b4600"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "fb48fded2a56536d1bcc94c798fea26405b6d49c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "patch": "@@ -4125,14 +4125,15 @@ pub fn is_binopable(cx: &ctxt, ty: t, op: ast::BinOp) -> bool {\n     static opcat_eq: int = 5;\n     static opcat_bit: int = 6;\n     static opcat_logic: int = 7;\n+    static opcat_mod: int = 8;\n \n     fn opcat(op: ast::BinOp) -> int {\n         match op {\n           ast::BiAdd => opcat_add,\n           ast::BiSub => opcat_sub,\n           ast::BiMul => opcat_mult,\n           ast::BiDiv => opcat_mult,\n-          ast::BiRem => opcat_mult,\n+          ast::BiRem => opcat_mod,\n           ast::BiAnd => opcat_logic,\n           ast::BiOr => opcat_logic,\n           ast::BiBitXor => opcat_bit,\n@@ -4168,14 +4169,14 @@ pub fn is_binopable(cx: &ctxt, ty: t, op: ast::BinOp) -> bool {\n     static f: bool = false;\n \n     let tbl = [\n-    //           +, -, *, shift, rel, ==, bit, logic\n-    /*other*/   [f, f, f, f,     f,   f,  f,   f],\n-    /*bool*/    [f, f, f, f,     t,   t,  t,   t],\n-    /*char*/    [f, f, f, f,     t,   t,  f,   f],\n-    /*int*/     [t, t, t, t,     t,   t,  t,   f],\n-    /*float*/   [t, t, t, f,     t,   t,  f,   f],\n-    /*bot*/     [t, t, t, t,     t,   t,  t,   t],\n-    /*raw ptr*/ [f, f, f, f,     t,   t,  f,   f]];\n+    //           +, -, *, shift, rel, ==, bit, logic, mod\n+    /*other*/   [f, f, f, f,     f,   f,  f,   f,     f],\n+    /*bool*/    [f, f, f, f,     t,   t,  t,   t,     f],\n+    /*char*/    [f, f, f, f,     t,   t,  f,   f,     f],\n+    /*int*/     [t, t, t, t,     t,   t,  t,   f,     t],\n+    /*float*/   [t, t, t, f,     t,   t,  f,   f,     f],\n+    /*bot*/     [t, t, t, t,     t,   t,  t,   t,     t],\n+    /*raw ptr*/ [f, f, f, f,     t,   t,  f,   f,     f]];\n \n     return tbl[tycat(cx, ty) as uint ][opcat(op) as uint];\n }"}, {"sha": "cf457763513c23de3b5b36e12437fc4090cbf3da", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "patch": "@@ -41,6 +41,7 @@ mod cmath {\n         pub fn frexpf(n: c_float, value: &mut c_int) -> c_float;\n         pub fn fmaxf(a: c_float, b: c_float) -> c_float;\n         pub fn fminf(a: c_float, b: c_float) -> c_float;\n+        pub fn fmodf(a: c_float, b: c_float) -> c_float;\n         pub fn nextafterf(x: c_float, y: c_float) -> c_float;\n         pub fn hypotf(x: c_float, y: c_float) -> c_float;\n         pub fn ldexpf(x: c_float, n: c_int) -> c_float;\n@@ -201,7 +202,9 @@ impl Div<f32,f32> for f32 {\n #[cfg(not(test))]\n impl Rem<f32,f32> for f32 {\n     #[inline]\n-    fn rem(&self, other: &f32) -> f32 { *self % *other }\n+    fn rem(&self, other: &f32) -> f32 {\n+        unsafe { cmath::fmodf(*self, *other) }\n+    }\n }\n \n #[cfg(not(test))]"}, {"sha": "4a751988d3655ec48ecfc24a40e9bb48450b330a", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1563ea9f278e1e1cd0d21fe8c4fc761805b71964/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=1563ea9f278e1e1cd0d21fe8c4fc761805b71964", "patch": "@@ -40,6 +40,7 @@ mod cmath {\n         pub fn fdim(a: c_double, b: c_double) -> c_double;\n         pub fn fmax(a: c_double, b: c_double) -> c_double;\n         pub fn fmin(a: c_double, b: c_double) -> c_double;\n+        pub fn fmod(a: c_double, b: c_double) -> c_double;\n         pub fn nextafter(x: c_double, y: c_double) -> c_double;\n         pub fn frexp(n: c_double, value: &mut c_int) -> c_double;\n         pub fn hypot(x: c_double, y: c_double) -> c_double;\n@@ -210,7 +211,9 @@ impl Div<f64,f64> for f64 {\n #[cfg(not(test))]\n impl Rem<f64,f64> for f64 {\n     #[inline]\n-    fn rem(&self, other: &f64) -> f64 { *self % *other }\n+    fn rem(&self, other: &f64) -> f64 {\n+        unsafe { cmath::fmod(*self, *other) }\n+    }\n }\n #[cfg(not(test))]\n impl Neg<f64> for f64 {"}]}