{"sha": "35314c93fa07a21aea18548f59886285a303c696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1MzE0YzkzZmEwN2EyMWFlYTE4NTQ4ZjU5ODg2Mjg1YTMwM2M2OTY=", "commit": {"author": {"name": "Jed Estep", "email": "aje@jhu.edu", "date": "2013-06-26T15:38:29Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-26T22:08:56Z"}, "message": "Moving implementation details to a macro", "tree": {"sha": "9917836158890f2acb1ffa92a5d126da3fa1a6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9917836158890f2acb1ffa92a5d126da3fa1a6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35314c93fa07a21aea18548f59886285a303c696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35314c93fa07a21aea18548f59886285a303c696", "html_url": "https://github.com/rust-lang/rust/commit/35314c93fa07a21aea18548f59886285a303c696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35314c93fa07a21aea18548f59886285a303c696/comments", "author": {"login": "jedestep", "id": 1072527, "node_id": "MDQ6VXNlcjEwNzI1Mjc=", "avatar_url": "https://avatars.githubusercontent.com/u/1072527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedestep", "html_url": "https://github.com/jedestep", "followers_url": "https://api.github.com/users/jedestep/followers", "following_url": "https://api.github.com/users/jedestep/following{/other_user}", "gists_url": "https://api.github.com/users/jedestep/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedestep/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedestep/subscriptions", "organizations_url": "https://api.github.com/users/jedestep/orgs", "repos_url": "https://api.github.com/users/jedestep/repos", "events_url": "https://api.github.com/users/jedestep/events{/privacy}", "received_events_url": "https://api.github.com/users/jedestep/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "096fb795de0c194b439a9e332ca30d3d5886ddbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/096fb795de0c194b439a9e332ca30d3d5886ddbb", "html_url": "https://github.com/rust-lang/rust/commit/096fb795de0c194b439a9e332ca30d3d5886ddbb"}], "stats": {"total": 95, "additions": 28, "deletions": 67}, "files": [{"sha": "ba9f12ad37a37603957f7f5a09c81e7fd762943d", "filename": "src/libextra/deque.rs", "status": "modified", "additions": 28, "deletions": 67, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/35314c93fa07a21aea18548f59886285a303c696/src%2Flibextra%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35314c93fa07a21aea18548f59886285a303c696/src%2Flibextra%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdeque.rs?ref=35314c93fa07a21aea18548f59886285a303c696", "patch": "@@ -14,6 +14,7 @@ use core::prelude::*;\n use core::uint;\n use core::util::replace;\n use core::vec;\n+use core::cast::transmute;\n \n static initial_capacity: uint = 32u; // 2^5\n \n@@ -174,13 +175,36 @@ impl<T> Deque<T> {\n     }\n }\n \n+macro_rules! iterator {\n+    (impl $name:ident -> $elem:ty, $step:expr) => {\n+        impl<'self, T> Iterator<$elem> for $name<'self, T> {\n+            #[inline]\n+            fn next(&mut self) -> Option<$elem> {\n+                if self.used >= self.nelts {\n+                    return None;\n+                }\n+                let ret = unsafe { \n+                    match self.vec[self.idx % self.vec.len()] {\n+                        Some(ref e) => Some(transmute(e)),\n+                        None => None\n+                    }\n+                };\n+                self.idx += $step;\n+                self.used += 1;\n+                ret\n+            }\n+        }\n+    }\n+}\n+\n /// Deque iterator\n pub struct DequeIterator<'self, T> {\n     priv idx: uint,\n     priv nelts: uint,\n     priv used: uint,\n     priv vec: &'self [Option<T>]\n }\n+iterator!{impl DequeIterator -> &'self T, 1}\n \n /// Deque reverse iterator\n pub struct DequeRevIterator<'self, T> {\n@@ -189,6 +213,8 @@ pub struct DequeRevIterator<'self, T> {\n     priv used: uint,\n     priv vec: &'self [Option<T>]\n }\n+iterator!{impl DequeRevIterator -> &'self T, -1}\n+\n /// Deque mutable iterator\n pub struct DequeMutIterator<'self, T> {\n     priv idx: uint,\n@@ -197,6 +223,7 @@ pub struct DequeMutIterator<'self, T> {\n     priv vec: &'self mut [Option<T>]\n \n }\n+iterator!{impl DequeMutIterator -> &'self mut T, 1}\n \n /// Deque mutable reverse iterator\n pub struct DequeMutRevIterator<'self, T> {\n@@ -205,73 +232,7 @@ pub struct DequeMutRevIterator<'self, T> {\n     priv used: uint,\n     priv vec: &'self mut [Option<T>]\n }\n-\n-/// Iterator visiting elements of the deque from front to back\n-impl<'self, T> Iterator<&'self T> for DequeIterator<'self, T> {\n-    fn next(&mut self) -> Option<&'self T> {\n-        if self.used >= self.nelts {\n-            return None;\n-        }\n-        let ret = match self.vec[self.idx % self.vec.len()] {\n-            Some(ref e) => Some(e),\n-            None => None\n-        };\n-        self.idx += 1;\n-        self.used += 1;\n-        ret\n-    }\n-}\n-\n-/// Iterator visiting elements of the deque mutably from front to back\n-impl<'self, T> Iterator<&'self mut T> for DequeMutIterator<'self, T> {\n-    fn next(&mut self) -> Option<&'self mut T> {\n-        if self.used >= self.nelts {\n-            return None;\n-        }\n-        let ret = match self.vec[self.idx % self.vec.len()] {\n-            Some(ref mut e) => Some(e),\n-            None => None\n-        };\n-        self.idx += 1;\n-        self.used += 1;\n-        ret\n-    }\n-}\n-\n-/// Iterator visiting elements of the deque from back to front\n-impl<'self, T> Iterator<&'self T> for DequeRevIterator<'self, T> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self T> {\n-        if self.used >= self.nelts {\n-            return None;\n-        }\n-        let ret = match self.vec[self.idx % self.vec.len()] {\n-            Some(ref e) => Some(e),\n-            None => None\n-        };\n-        self.idx -= 1;\n-        self.used += 1;\n-        ret\n-\n-    }\n-}\n-\n-/// Iterator visiting elements of the deque mutably from back to front\n-impl<'self, T> Iterator<&'self mut T> for DequeMutRevIterator<'self, T> {\n-    #[inline]\n-    fn next(&mut self) -> Option<&'self mut T> {\n-        if self.used >= self.nelts {\n-            return None;\n-        }\n-        let ret = match self.vec[self.idx % self.vec.len()] {\n-            Some(ref mut e) => Some(e),\n-            None => None\n-        };\n-        self.idx -= 1;\n-        self.used += 1;\n-        ret\n-    }\n-}\n+iterator!{impl DequeMutRevIterator -> &'self mut T, -1}\n \n /// Grow is only called on full elts, so nelts is also len(elts), unlike\n /// elsewhere."}]}