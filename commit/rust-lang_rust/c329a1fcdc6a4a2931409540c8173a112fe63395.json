{"sha": "c329a1fcdc6a4a2931409540c8173a112fe63395", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjlhMWZjZGM2YTRhMjkzMTQwOTU0MGM4MTczYTExMmZlNjMzOTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T18:46:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-23T18:46:26Z"}, "message": "auto merge of #14313 : kballard/rust/tuple_dotdot_match_ice, r=cmr\n\nFixes #14308.", "tree": {"sha": "c81b663450e85bd0715f082db909d9ab4efad449", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c81b663450e85bd0715f082db909d9ab4efad449"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c329a1fcdc6a4a2931409540c8173a112fe63395", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c329a1fcdc6a4a2931409540c8173a112fe63395", "html_url": "https://github.com/rust-lang/rust/commit/c329a1fcdc6a4a2931409540c8173a112fe63395", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c329a1fcdc6a4a2931409540c8173a112fe63395/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad775be8b48f82d19356942a4fc6fcadc56d3e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad775be8b48f82d19356942a4fc6fcadc56d3e7e", "html_url": "https://github.com/rust-lang/rust/commit/ad775be8b48f82d19356942a4fc6fcadc56d3e7e"}, {"sha": "0718259ae05e661c7f62bac6a02c6cba80d3f1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0718259ae05e661c7f62bac6a02c6cba80d3f1f9", "html_url": "https://github.com/rust-lang/rust/commit/0718259ae05e661c7f62bac6a02c6cba80d3f1f9"}], "stats": {"total": 37, "additions": 36, "deletions": 1}, "files": [{"sha": "adad6cd3a70db6a6e475f4dc44c21cece035452b", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c329a1fcdc6a4a2931409540c8173a112fe63395/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c329a1fcdc6a4a2931409540c8173a112fe63395/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=c329a1fcdc6a4a2931409540c8173a112fe63395", "patch": "@@ -810,6 +810,9 @@ fn enter_tuple_struct<'a, 'b>(\n             ast::PatEnum(_, Some(ref elts)) => {\n                 Some(elts.iter().map(|x| (*x)).collect())\n             }\n+            ast::PatEnum(_, None) => {\n+                Some(Vec::from_elem(n_elts, dummy))\n+            }\n             _ => {\n                 assert_is_binding_or_wild(bcx, p);\n                 Some(Vec::from_elem(n_elts, dummy))\n@@ -1117,7 +1120,7 @@ fn any_tuple_struct_pat(bcx: &Block, m: &[Match], col: uint) -> bool {\n     m.iter().any(|br| {\n         let pat = *br.pats.get(col);\n         match pat.node {\n-            ast::PatEnum(_, Some(_)) => {\n+            ast::PatEnum(_, _) => {\n                 match bcx.tcx().def_map.borrow().find(&pat.id) {\n                     Some(&ast::DefFn(..)) |\n                     Some(&ast::DefStruct(..)) => true,"}, {"sha": "0e4b4a2c9cf326ca260c26a6189bc7520c1cf06b", "filename": "src/test/run-pass/issue-14308.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c329a1fcdc6a4a2931409540c8173a112fe63395/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c329a1fcdc6a4a2931409540c8173a112fe63395/src%2Ftest%2Frun-pass%2Fissue-14308.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14308.rs?ref=c329a1fcdc6a4a2931409540c8173a112fe63395", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct A(int);\n+struct B;\n+\n+fn main() {\n+    let x = match A(3) {\n+        A(..) => 1\n+    };\n+    assert_eq!(x, 1);\n+    let x = match A(4) {\n+        A(1) => 1,\n+        A(..) => 2\n+    };\n+    assert_eq!(x, 2);\n+\n+    // This next test uses a (..) wildcard match on a nullary struct.\n+    // There's no particularly good reason to support this, but it's currently allowed,\n+    // and this makes sure it doesn't ICE or break LLVM.\n+    let x = match B {\n+        B(..) => 3\n+    };\n+    assert_eq!(x, 3);\n+}"}]}