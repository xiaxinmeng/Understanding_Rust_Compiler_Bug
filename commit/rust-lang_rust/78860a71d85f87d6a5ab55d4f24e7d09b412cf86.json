{"sha": "78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ODYwYTcxZDg1Zjg3ZDZhNWFiNTVkNGYyNGU3ZDA5YjQxMmNmODY=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-13T07:24:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-13T07:24:55Z"}, "message": "Merge pull request #3298 from devonhollowood/pedantic-dogfood-naming\n\nPedantic dogfood: naming and docs", "tree": {"sha": "04d7dbbe19aa235184abc942ff2b7bbf4a6f665e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04d7dbbe19aa235184abc942ff2b7bbf4a6f665e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwZ3HCRBK7hj4Ov3rIwAAdHIIAJ3om1SL8vb8i6FtFLWYY8Dx\nE3FiKFfDrCnWM19e3pjXlJya9OD1Kyamj7udCDAKxDw7648Tp1DeUSuxPV+7CBuy\nhkLMMS8ePQciZ3WQbDrCHGvn0+APh75tmv6BhFrh/FdJGPo9exywOLAK0UOFGfJF\nG57NL+oBSHEQNOc0Q72ngZ3HGEJ5zBIOf6gpNVJzOZaD0r2ouxSbTH5PXYLQv2EU\noMq1cYHJFC/BacwES+KrSfyzuBUThY4hZDABpldck9qH1/LhK7nwN+og4BiNhrMW\ntNoAc69k9q1Ed+adnX2VUjZTGLjePOPHa+b1lCCZawcrq9wE0PePE9URJth7Ppc=\n=e+e1\n-----END PGP SIGNATURE-----\n", "payload": "tree 04d7dbbe19aa235184abc942ff2b7bbf4a6f665e\nparent 7efd4a585c20868d4b0fe209928f1393109fb6d9\nparent 335bc1e820c2fd1316e3c225189361b43f2654c3\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1539415495 +0200\ncommitter GitHub <noreply@github.com> 1539415495 +0200\n\nMerge pull request #3298 from devonhollowood/pedantic-dogfood-naming\n\nPedantic dogfood: naming and docs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "html_url": "https://github.com/rust-lang/rust/commit/78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7efd4a585c20868d4b0fe209928f1393109fb6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7efd4a585c20868d4b0fe209928f1393109fb6d9", "html_url": "https://github.com/rust-lang/rust/commit/7efd4a585c20868d4b0fe209928f1393109fb6d9"}, {"sha": "335bc1e820c2fd1316e3c225189361b43f2654c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/335bc1e820c2fd1316e3c225189361b43f2654c3", "html_url": "https://github.com/rust-lang/rust/commit/335bc1e820c2fd1316e3c225189361b43f2654c3"}], "stats": {"total": 99, "additions": 55, "deletions": 44}, "files": [{"sha": "0171ac1e784f08f94aea51843fbfaed12e7f96fc", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -40,15 +40,16 @@ declare_clippy_lint! {\n     \"unnecessary double comparisons that can be simplified\"\n }\n \n-pub struct DoubleComparisonPass;\n+pub struct Pass;\n \n-impl LintPass for DoubleComparisonPass {\n+impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(DOUBLE_COMPARISONS)\n     }\n }\n \n-impl<'a, 'tcx> DoubleComparisonPass {\n+impl<'a, 'tcx> Pass {\n+    #[allow(clippy::similar_names)]\n     fn check_binop(\n         &self,\n         cx: &LateContext<'a, 'tcx>,\n@@ -87,7 +88,7 @@ impl<'a, 'tcx> DoubleComparisonPass {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DoubleComparisonPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Binary(ref kind, ref lhs, ref rhs) = expr.node {\n             self.check_binop(cx, kind.node, lhs, rhs, expr.span);"}, {"sha": "315bc54cd17931e9a8c6a4ead314b0306e0a8be4", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -63,16 +63,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                 let variant = &var.node;\n                 if let Some(ref anon_const) = variant.disr_expr {\n                     let param_env = ty::ParamEnv::empty();\n-                    let did = cx.tcx.hir.body_owner_def_id(anon_const.body);\n-                    let substs = Substs::identity_for_item(cx.tcx.global_tcx(), did);\n-                    let instance = ty::Instance::new(did, substs);\n-                    let cid = GlobalId {\n+                    let def_id = cx.tcx.hir.body_owner_def_id(anon_const.body);\n+                    let substs = Substs::identity_for_item(cx.tcx.global_tcx(), def_id);\n+                    let instance = ty::Instance::new(def_id, substs);\n+                    let c_id = GlobalId {\n                         instance,\n                         promoted: None\n                     };\n-                    let constant = cx.tcx.const_eval(param_env.and(cid)).ok();\n+                    let constant = cx.tcx.const_eval(param_env.and(c_id)).ok();\n                     if let Some(Constant::Int(val)) = constant.and_then(|c| miri_to_const(cx.tcx, c)) {\n-                        let mut ty = cx.tcx.type_of(did);\n+                        let mut ty = cx.tcx.type_of(def_id);\n                         if let ty::Adt(adt, _) = ty.sty {\n                             if adt.is_enum() {\n                                 ty = adt.repr.discr_type().to_ty(cx.tcx);"}, {"sha": "16d1e40484d0b7507923df7ab620d10208c22805", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -16,7 +16,7 @@ use crate::syntax::ast::*;\n use crate::syntax::source_map::Span;\n use crate::syntax::symbol::LocalInternedString;\n use crate::utils::{span_help_and_lint, span_lint};\n-use crate::utils::{camel_case_from, camel_case_until, in_macro};\n+use crate::utils::{camel_case, in_macro};\n \n /// **What it does:** Detects enumeration variants that are prefixed or suffixed\n /// by the same characters.\n@@ -184,19 +184,19 @@ fn check_variant(\n         }\n     }\n     let first = var2str(&def.variants[0]);\n-    let mut pre = &first[..camel_case_until(&*first)];\n-    let mut post = &first[camel_case_from(&*first)..];\n+    let mut pre = &first[..camel_case::until(&*first)];\n+    let mut post = &first[camel_case::from(&*first)..];\n     for var in &def.variants {\n         let name = var2str(var);\n \n         let pre_match = partial_match(pre, &name);\n         pre = &pre[..pre_match];\n-        let pre_camel = camel_case_until(pre);\n+        let pre_camel = camel_case::until(pre);\n         pre = &pre[..pre_camel];\n         while let Some((next, last)) = name[pre.len()..].chars().zip(pre.chars().rev()).next() {\n             if next.is_lowercase() {\n                 let last = pre.len() - last.len_utf8();\n-                let last_camel = camel_case_until(&pre[..last]);\n+                let last_camel = camel_case::until(&pre[..last]);\n                 pre = &pre[..last_camel];\n             } else {\n                 break;\n@@ -206,7 +206,7 @@ fn check_variant(\n         let post_match = partial_rmatch(post, &name);\n         let post_end = post.len() - post_match;\n         post = &post[post_end..];\n-        let post_camel = camel_case_from(post);\n+        let post_camel = camel_case::from(post);\n         post = &post[post_camel..];\n     }\n     let (what, value) = match (pre.is_empty(), post.is_empty()) {\n@@ -255,6 +255,7 @@ impl EarlyLintPass for EnumVariantNames {\n         assert!(last.is_some());\n     }\n \n+    #[allow(clippy::similar_names)]\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n         let item_name = item.ident.as_str();\n         let item_name_chars = item_name.chars().count();"}, {"sha": "dfe0c0180a77ab89d575832efeb6cc503e20a899", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -63,6 +63,7 @@ impl LintPass for EqOp {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n+    #[allow(clippy::similar_names)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Binary(op, ref left, ref right) = e.node {\n             if in_macro(e.span) {"}, {"sha": "15a8d47337aadd3f917f3ed181b4d6992835b0b7", "filename": "clippy_lints/src/excessive_precision.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_precision.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -108,6 +108,7 @@ impl ExcessivePrecision {\n     }\n }\n \n+#[allow(clippy::doc_markdown)]\n /// Should we exclude the float because it has a `.0` or `.` suffix\n /// Ex 1_000_000_000.0\n /// Ex 1_000_000_000."}, {"sha": "bced0c9552d003614b178c353db495d6b2384265", "filename": "clippy_lints/src/if_let_redundant_pattern_matching.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_redundant_pattern_matching.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -56,6 +56,7 @@ impl LintPass for Pass {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n+    #[allow(clippy::similar_names)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprKind::Match(ref op, ref arms, MatchSource::IfLetDesugar { .. }) = expr.node {\n             if arms[0].pats.len() == 1 {"}, {"sha": "683d21322435d4bfd0f23af746ee83600368a8d0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -430,8 +430,8 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry<'_>, conf: &Conf) {\n     reg.register_late_lint_pass(box fallible_impl_from::FallibleImplFrom);\n     reg.register_late_lint_pass(box replace_consts::ReplaceConsts);\n     reg.register_late_lint_pass(box types::UnitArg);\n-    reg.register_late_lint_pass(box double_comparison::DoubleComparisonPass);\n-    reg.register_late_lint_pass(box question_mark::QuestionMarkPass);\n+    reg.register_late_lint_pass(box double_comparison::Pass);\n+    reg.register_late_lint_pass(box question_mark::Pass);\n     reg.register_late_lint_pass(box suspicious_trait_impl::SuspiciousImpl);\n     reg.register_early_lint_pass(box multiple_crate_versions::Pass);\n     reg.register_late_lint_pass(box map_unit_fn::Pass);"}, {"sha": "503a2ee7032e0a4fdae28aa384141d94aeedb835", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -179,7 +179,7 @@ fn unit_closure<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'a hir::Expr) -> Op\n     None\n }\n \n-/// Builds a name for the let binding variable (var_arg)\n+/// Builds a name for the let binding variable (`var_arg`)\n ///\n /// `x.field` => `x_field`\n /// `y` => `_y`"}, {"sha": "72d33e58cd30b58b227bc65a2f568703b988cbb0", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -45,15 +45,15 @@ declare_clippy_lint!{\n }\n \n #[derive(Copy, Clone)]\n-pub struct QuestionMarkPass;\n+pub struct Pass;\n \n-impl LintPass for QuestionMarkPass {\n+impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(QUESTION_MARK)\n     }\n }\n \n-impl QuestionMarkPass {\n+impl Pass {\n     /// Check if the given expression on the given context matches the following structure:\n     ///\n     /// ```ignore\n@@ -145,7 +145,7 @@ impl QuestionMarkPass {\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for QuestionMarkPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         Self::check_is_none_and_early_return_none(cx, expr);\n     }"}, {"sha": "801b6db63f5e0c9fa3de9f94026178557bd9bdc1", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -227,6 +227,7 @@ impl LintPass for Transmute {\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n+    #[allow(clippy::similar_names)]\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprKind::Call(ref path_expr, ref args) = e.node {\n             if let ExprKind::Path(ref qpath) = path_expr.node {"}, {"sha": "5ce1e08d8b53347b403c9776db9d8aadcbf621f4", "filename": "clippy_lints/src/utils/camel_case.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcamel_case.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -10,7 +10,7 @@\n \n /// Return the index of the character after the first camel-case component of\n /// `s`.\n-pub fn camel_case_until(s: &str) -> usize {\n+pub fn until(s: &str) -> usize {\n     let mut iter = s.char_indices();\n     if let Some((_, first)) = iter.next() {\n         if !first.is_uppercase() {\n@@ -43,7 +43,7 @@ pub fn camel_case_until(s: &str) -> usize {\n }\n \n /// Return index of the last camel-case component of `s`.\n-pub fn camel_case_from(s: &str) -> usize {\n+pub fn from(s: &str) -> usize {\n     let mut iter = s.char_indices().rev();\n     if let Some((_, first)) = iter.next() {\n         if !first.is_lowercase() {\n@@ -73,52 +73,52 @@ pub fn camel_case_from(s: &str) -> usize {\n \n #[cfg(test)]\n mod test {\n-    use super::{camel_case_from, camel_case_until};\n+    use super::{from, until};\n \n     #[test]\n     fn from_full() {\n-        assert_eq!(camel_case_from(\"AbcDef\"), 0);\n-        assert_eq!(camel_case_from(\"Abc\"), 0);\n+        assert_eq!(from(\"AbcDef\"), 0);\n+        assert_eq!(from(\"Abc\"), 0);\n     }\n \n     #[test]\n     fn from_partial() {\n-        assert_eq!(camel_case_from(\"abcDef\"), 3);\n-        assert_eq!(camel_case_from(\"aDbc\"), 1);\n+        assert_eq!(from(\"abcDef\"), 3);\n+        assert_eq!(from(\"aDbc\"), 1);\n     }\n \n     #[test]\n     fn from_not() {\n-        assert_eq!(camel_case_from(\"AbcDef_\"), 7);\n-        assert_eq!(camel_case_from(\"AbcDD\"), 5);\n+        assert_eq!(from(\"AbcDef_\"), 7);\n+        assert_eq!(from(\"AbcDD\"), 5);\n     }\n \n     #[test]\n     fn from_caps() {\n-        assert_eq!(camel_case_from(\"ABCD\"), 4);\n+        assert_eq!(from(\"ABCD\"), 4);\n     }\n \n     #[test]\n     fn until_full() {\n-        assert_eq!(camel_case_until(\"AbcDef\"), 6);\n-        assert_eq!(camel_case_until(\"Abc\"), 3);\n+        assert_eq!(until(\"AbcDef\"), 6);\n+        assert_eq!(until(\"Abc\"), 3);\n     }\n \n     #[test]\n     fn until_not() {\n-        assert_eq!(camel_case_until(\"abcDef\"), 0);\n-        assert_eq!(camel_case_until(\"aDbc\"), 0);\n+        assert_eq!(until(\"abcDef\"), 0);\n+        assert_eq!(until(\"aDbc\"), 0);\n     }\n \n     #[test]\n     fn until_partial() {\n-        assert_eq!(camel_case_until(\"AbcDef_\"), 6);\n-        assert_eq!(camel_case_until(\"CallTypeC\"), 8);\n-        assert_eq!(camel_case_until(\"AbcDD\"), 3);\n+        assert_eq!(until(\"AbcDef_\"), 6);\n+        assert_eq!(until(\"CallTypeC\"), 8);\n+        assert_eq!(until(\"AbcDD\"), 3);\n     }\n \n     #[test]\n     fn until_caps() {\n-        assert_eq!(camel_case_until(\"ABCD\"), 0);\n+        assert_eq!(until(\"ABCD\"), 0);\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "7a0b28d15d875f47b53d78caed01d7bb1f5f47f0", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -73,6 +73,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n             && both(&left.expr, &right.expr, |l, r| self.eq_expr(l, r))\n     }\n \n+    #[allow(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr, right: &Expr) -> bool {\n         if self.ignore_fn && differing_macro_contexts(left.span, right.span) {\n             return false;\n@@ -208,6 +209,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n+    #[allow(clippy::similar_names)]\n     fn eq_qpath(&mut self, left: &QPath, right: &QPath) -> bool {\n         match (left, right) {\n             (&QPath::Resolved(ref lty, ref lpath), &QPath::Resolved(ref rty, ref rpath)) => {\n@@ -262,6 +264,7 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n         self.eq_ty_kind(&left.node, &right.node)\n     }\n \n+    #[allow(clippy::similar_names)]\n     pub fn eq_ty_kind(&mut self, left: &TyKind, right: &TyKind) -> bool {\n         match (left, right) {\n             (&TyKind::Slice(ref l_vec), &TyKind::Slice(ref r_vec)) => self.eq_ty(l_vec, r_vec),"}, {"sha": "ea48aa9ab5e7d76e1ccb27a9751d9e6f7027116f", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -166,6 +166,7 @@ fn print_decl(cx: &LateContext<'_, '_>, decl: &hir::Decl) {\n     }\n }\n \n+#[allow(clippy::similar_names)]\n fn print_expr(cx: &LateContext<'_, '_>, expr: &hir::Expr, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);\n@@ -424,6 +425,7 @@ fn print_item(cx: &LateContext<'_, '_>, item: &hir::Item) {\n     }\n }\n \n+#[allow(clippy::similar_names)]\n fn print_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);"}, {"sha": "05356f8d3856f7d6c4f93f8d16d1b9afbbc54217", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -33,8 +33,7 @@ use crate::syntax::source_map::{Span, DUMMY_SP};\n use crate::syntax::errors::DiagnosticBuilder;\n use crate::syntax::symbol::keywords;\n \n-mod camel_case;\n-pub use self::camel_case::{camel_case_from, camel_case_until};\n+pub mod camel_case;\n \n pub mod comparisons;\n pub mod conf;"}, {"sha": "f3af698ffa2f7ecd1864d1e60ed573fa01cc030d", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78860a71d85f87d6a5ab55d4f24e7d09b412cf86/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=78860a71d85f87d6a5ab55d4f24e7d09b412cf86", "patch": "@@ -54,6 +54,7 @@ struct MutVarsDelegate {\n }\n \n impl<'tcx> MutVarsDelegate {\n+    #[allow(clippy::similar_names)]\n     fn update(&mut self, cat: &'tcx Categorization<'_>) {\n         match *cat {\n             Categorization::Local(id) => {"}]}