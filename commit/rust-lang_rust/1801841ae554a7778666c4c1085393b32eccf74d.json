{"sha": "1801841ae554a7778666c4c1085393b32eccf74d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MDE4NDFhZTU1NGE3Nzc4NjY2YzRjMTA4NTM5M2IzMmVjY2Y3NGQ=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-26T16:40:42Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-26T16:43:12Z"}, "message": "Add test cases for broader coverage", "tree": {"sha": "432467f992f119c4ace73010e9f179f39f6bc766", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/432467f992f119c4ace73010e9f179f39f6bc766"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1801841ae554a7778666c4c1085393b32eccf74d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1801841ae554a7778666c4c1085393b32eccf74d", "html_url": "https://github.com/rust-lang/rust/commit/1801841ae554a7778666c4c1085393b32eccf74d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1801841ae554a7778666c4c1085393b32eccf74d/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "705bfdcc467c0ddd7eb61d3adb24809b27bae891", "url": "https://api.github.com/repos/rust-lang/rust/commits/705bfdcc467c0ddd7eb61d3adb24809b27bae891", "html_url": "https://github.com/rust-lang/rust/commit/705bfdcc467c0ddd7eb61d3adb24809b27bae891"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "7fa97b246991219c204d6087949c3ecb9cc85c27", "filename": "clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1801841ae554a7778666c4c1085393b32eccf74d/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1801841ae554a7778666c4c1085393b32eccf74d/clippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=1801841ae554a7778666c4c1085393b32eccf74d", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"Useless conversion to the same type\",\n+                            \"useless conversion to the same type\",\n                             \"consider removing `.into()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -87,7 +87,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                             cx,\n                             USELESS_CONVERSION,\n                             e.span,\n-                            \"Useless conversion to the same type\",\n+                            \"useless conversion to the same type\",\n                             \"consider removing `.into_iter()`\",\n                             sugg,\n                             Applicability::MachineApplicable, // snippet\n@@ -108,7 +108,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                                 cx,\n                                 USELESS_CONVERSION,\n                                 e.span,\n-                                \"Useless conversion to the same type\",\n+                                \"useless conversion to the same type\",\n                                 None,\n                                 \"consider removing `.try_into()`\",\n                             );\n@@ -139,7 +139,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"Useless conversion to the same type\",\n+                                    \"useless conversion to the same type\",\n                                     None,\n                                     &hint,\n                                 );\n@@ -158,7 +158,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessConversion {\n                                     cx,\n                                     USELESS_CONVERSION,\n                                     e.span,\n-                                    \"Useless conversion to the same type\",\n+                                    \"useless conversion to the same type\",\n                                     &sugg_msg,\n                                     sugg,\n                                     Applicability::MachineApplicable, // snippet"}, {"sha": "84ec53702788c12592f02387ec2deaef7f5c36c0", "filename": "tests/ui/useless_conversion.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.stderr?ref=1801841ae554a7778666c4c1085393b32eccf74d", "patch": "@@ -1,4 +1,4 @@\n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:6:13\n    |\n LL |     let _ = T::from(val);\n@@ -10,55 +10,55 @@ note: the lint level is defined here\n LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:7:5\n    |\n LL |     val.into()\n    |     ^^^^^^^^^^ help: consider removing `.into()`: `val`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:19:22\n    |\n LL |         let _: i32 = 0i32.into();\n    |                      ^^^^^^^^^^^ help: consider removing `.into()`: `0i32`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:51:21\n    |\n LL |     let _: String = \"foo\".to_string().into();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into()`: `\"foo\".to_string()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:52:21\n    |\n LL |     let _: String = From::from(\"foo\".to_string());\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `From::from()`: `\"foo\".to_string()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:53:13\n    |\n LL |     let _ = String::from(\"foo\".to_string());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `\"foo\".to_string()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:54:13\n    |\n LL |     let _ = String::from(format!(\"A: {:04}\", 123));\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `String::from()`: `format!(\"A: {:04}\", 123)`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:55:13\n    |\n LL |     let _ = \"\".lines().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `\"\".lines()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:56:13\n    |\n LL |     let _ = vec![1, 2, 3].into_iter().into_iter();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider removing `.into_iter()`: `vec![1, 2, 3].into_iter()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion.rs:57:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").into();"}, {"sha": "3787ea991445cc45f9ff2baac1436883486a0008", "filename": "tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.rs?ref=1801841ae554a7778666c4c1085393b32eccf74d", "patch": "@@ -31,4 +31,12 @@ fn main() {\n     let _ = String::try_from(\"foo\".to_string()).unwrap();\n     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n+    let _: String = \"\".to_owned().try_into().unwrap();\n+    let _: String = match String::from(\"_\").try_into() {\n+        Ok(a) => a,\n+        Err(_) => \"\".into(),\n+    };\n+    // FIXME this is a false negative\n+    #[allow(clippy::cmp_owned)]\n+    if String::from(\"a\") == TryInto::<String>::try_into(String::from(\"a\")).unwrap() {}\n }"}, {"sha": "b765727c168f5a5273cf55890b05ceebcf26a8a5", "filename": "tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1801841ae554a7778666c4c1085393b32eccf74d/tests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion_try.stderr?ref=1801841ae554a7778666c4c1085393b32eccf74d", "patch": "@@ -1,4 +1,4 @@\n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:6:13\n    |\n LL |     let _ = T::try_from(val).unwrap();\n@@ -11,53 +11,69 @@ LL | #![deny(clippy::useless_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = help: consider removing `T::try_from()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:7:5\n    |\n LL |     val.try_into().unwrap()\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:29:21\n    |\n LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:30:21\n    |\n LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `TryFrom::try_from()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:31:13\n    |\n LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:32:13\n    |\n LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n-error: Useless conversion to the same type\n+error: useless conversion to the same type\n   --> $DIR/useless_conversion_try.rs:33:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n-error: aborting due to 7 previous errors\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:34:21\n+   |\n+LL |     let _: String = \"\".to_owned().try_into().unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: useless conversion to the same type\n+  --> $DIR/useless_conversion_try.rs:35:27\n+   |\n+LL |     let _: String = match String::from(\"_\").try_into() {\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider removing `.try_into()`\n+\n+error: aborting due to 9 previous errors\n "}]}