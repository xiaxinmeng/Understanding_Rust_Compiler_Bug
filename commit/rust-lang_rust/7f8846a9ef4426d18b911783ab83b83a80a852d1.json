{"sha": "7f8846a9ef4426d18b911783ab83b83a80a852d1", "node_id": "C_kwDOAAsO6NoAKDdmODg0NmE5ZWY0NDI2ZDE4YjkxMTc4M2FiODNiODNhODBhODUyZDE", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-13T15:12:45Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2023-05-26T22:16:47Z"}, "message": "Uplift clippy::invalid_utf8_in_unchecked as invalid_from_utf8_unchecked", "tree": {"sha": "6462f0292bbaa8e53944f2a7dce755fb68ff444b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6462f0292bbaa8e53944f2a7dce755fb68ff444b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f8846a9ef4426d18b911783ab83b83a80a852d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f8846a9ef4426d18b911783ab83b83a80a852d1", "html_url": "https://github.com/rust-lang/rust/commit/7f8846a9ef4426d18b911783ab83b83a80a852d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f8846a9ef4426d18b911783ab83b83a80a852d1/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5f8bce74ee432f7cc3aa131bc3d6920e06de10", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5f8bce74ee432f7cc3aa131bc3d6920e06de10", "html_url": "https://github.com/rust-lang/rust/commit/1a5f8bce74ee432f7cc3aa131bc3d6920e06de10"}], "stats": {"total": 211, "additions": 211, "deletions": 0}, "files": [{"sha": "35edb458478080996d48d61e25a184e8ab3a148d", "filename": "compiler/rustc_lint/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fmessages.ftl?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -304,6 +304,10 @@ lint_improper_ctypes_union_layout_help = consider adding a `#[repr(C)]` or `#[re\n lint_improper_ctypes_union_layout_reason = this union has unspecified layout\n lint_improper_ctypes_union_non_exhaustive = this union is non-exhaustive\n \n+# FIXME: we should ordinalize $valid_up_to when we add support for doing so\n+lint_invalid_from_utf8_unchecked = calls to `{$method}` with a invalid literal are undefined behavior\n+    .label = the literal was valid UTF-8 up to the {$valid_up_to} bytes\n+\n lint_lintpass_by_hand = implementing `LintPass` by hand\n     .help = try using `declare_lint_pass!` or `impl_lint_pass!` instead\n "}, {"sha": "2118deba5c7182114ad9af7b8425a0b3406f5c2b", "filename": "compiler/rustc_lint/src/invalid_from_utf8.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finvalid_from_utf8.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -0,0 +1,85 @@\n+use std::str::Utf8Error;\n+\n+use rustc_ast::{BorrowKind, LitKind};\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_span::source_map::Spanned;\n+use rustc_span::sym;\n+\n+use crate::lints::InvalidFromUtf8UncheckedDiag;\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+declare_lint! {\n+    /// The `invalid_from_utf8_unchecked` lint checks for calls to\n+    /// `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`\n+    /// with an invalid UTF-8 literal.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// # #[allow(unused)]\n+    /// unsafe {\n+    ///     std::str::from_utf8_unchecked(b\"Ru\\x82st\");\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// Creating such a `str` would result in undefined behavior as per documentation\n+    /// for `std::str::from_utf8_unchecked` and `std::str::from_utf8_unchecked_mut`.\n+    pub INVALID_FROM_UTF8_UNCHECKED,\n+    Deny,\n+    \"using a non UTF-8 literal in `std::str::from_utf8_unchecked`\"\n+}\n+\n+declare_lint_pass!(InvalidFromUtf8 => [INVALID_FROM_UTF8_UNCHECKED]);\n+\n+impl<'tcx> LateLintPass<'tcx> for InvalidFromUtf8 {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if let ExprKind::Call(path, [arg]) = expr.kind\n+            && let ExprKind::Path(ref qpath) = path.kind\n+            && let Some(def_id) = cx.qpath_res(qpath, path.hir_id).opt_def_id()\n+            && let Some(diag_item) = cx.tcx.get_diagnostic_name(def_id)\n+            && [sym::str_from_utf8_unchecked, sym::str_from_utf8_unchecked_mut].contains(&diag_item)\n+        {\n+            let lint = |utf8_error: Utf8Error| {\n+                let method = diag_item.as_str().strip_prefix(\"str_\").unwrap();\n+                cx.emit_spanned_lint(INVALID_FROM_UTF8_UNCHECKED, expr.span, InvalidFromUtf8UncheckedDiag {\n+                    method: format!(\"std::str::{method}\"),\n+                    valid_up_to: utf8_error.valid_up_to(),\n+                    label: arg.span,\n+                })\n+            };\n+\n+            match &arg.kind {\n+                ExprKind::Lit(Spanned { node: lit, .. }) => {\n+                    if let LitKind::ByteStr(bytes, _) = &lit\n+                        && let Err(utf8_error) = std::str::from_utf8(bytes)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                },\n+                ExprKind::AddrOf(BorrowKind::Ref, _, Expr { kind: ExprKind::Array(args), .. }) => {\n+                    let elements = args.iter().map(|e|{\n+                        match &e.kind {\n+                            ExprKind::Lit(Spanned { node: lit, .. }) => match lit {\n+                                LitKind::Byte(b) => Some(*b),\n+                                LitKind::Int(b, _) => Some(*b as u8),\n+                                _ => None\n+                            }\n+                            _ => None\n+                        }\n+                    }).collect::<Option<Vec<_>>>();\n+\n+                    if let Some(elements) = elements\n+                        && let Err(utf8_error) = std::str::from_utf8(&elements)\n+                    {\n+                        lint(utf8_error);\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+    }\n+}"}, {"sha": "c62109b298629db779e807036da59ac73c467efa", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -60,6 +60,7 @@ mod expect;\n mod for_loops_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n+mod invalid_from_utf8;\n mod late;\n mod let_underscore;\n mod levels;\n@@ -102,6 +103,7 @@ use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use for_loops_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n+use invalid_from_utf8::*;\n use let_underscore::*;\n use map_unit_fn::*;\n use methods::*;\n@@ -207,6 +209,7 @@ late_lint_methods!(\n             HardwiredLints: HardwiredLints,\n             ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n             ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n+            InvalidFromUtf8: InvalidFromUtf8,\n             VariantSizeDifferences: VariantSizeDifferences,\n             BoxPointers: BoxPointers,\n             PathStatements: PathStatements,"}, {"sha": "5969bc5ca5a3c19024259eb7d28f67424873fe40", "filename": "compiler/rustc_lint/src/lints.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_lint%2Fsrc%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flints.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -699,6 +699,16 @@ pub struct ForgetCopyDiag<'a> {\n     pub label: Span,\n }\n \n+// invalid_from_utf8.rs\n+#[derive(LintDiagnostic)]\n+#[diag(lint_invalid_from_utf8_unchecked)]\n+pub struct InvalidFromUtf8UncheckedDiag {\n+    pub method: String,\n+    pub valid_up_to: usize,\n+    #[label]\n+    pub label: Span,\n+}\n+\n // hidden_unicode_codepoints.rs\n #[derive(LintDiagnostic)]\n #[diag(lint_hidden_unicode_codepoints)]"}, {"sha": "4fc73c4ae86462d7d006b04ec747086de2e58bf2", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -1454,6 +1454,8 @@ symbols! {\n         stop_after_dataflow,\n         store,\n         str,\n+        str_from_utf8_unchecked,\n+        str_from_utf8_unchecked_mut,\n         str_split_whitespace,\n         str_trim,\n         str_trim_end,"}, {"sha": "12fac0567cb4368482a07259528db1cde5974474", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -167,6 +167,7 @@ pub const fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"const_str_from_utf8_unchecked\", since = \"1.55.0\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked\"]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout.\n@@ -194,6 +195,7 @@ pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n #[must_use]\n #[stable(feature = \"str_mut_extras\", since = \"1.20.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked_mut\", issue = \"91005\")]\n+#[rustc_diagnostic_item = \"str_from_utf8_unchecked_mut\"]\n pub const unsafe fn from_utf8_unchecked_mut(v: &mut [u8]) -> &mut str {\n     // SAFETY: the caller must guarantee that the bytes `v`\n     // are valid UTF-8, thus the cast to `*mut str` is safe."}, {"sha": "4a27c659c73d4b6a0e8956eb2fbf780771faee40", "filename": "tests/ui/lint/invalid_from_utf8.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/tests%2Fui%2Flint%2Finvalid_from_utf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.rs?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -0,0 +1,49 @@\n+// check-pass\n+\n+#![feature(concat_bytes)]\n+#![warn(invalid_from_utf8_unchecked)]\n+\n+pub fn from_utf8_unchecked_mut() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'i', b'p', b'p', b'y']);\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked_mut(&mut [0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+        std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked_mut`\n+    }\n+}\n+\n+pub fn from_utf8_unchecked() {\n+    // Valid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 105, 112, 112, 121]);\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'i', b'p', b'p', b'y']);\n+        std::str::from_utf8_unchecked(b\"clippy\");\n+\n+        let x = 0xA0;\n+        std::str::from_utf8_unchecked(&[0xC0, x]);\n+    }\n+\n+    // Invalid\n+    unsafe {\n+        std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+        std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+        //~^ WARN calls to `std::str::from_utf8_unchecked`\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "63cd906237dd7489299ee0f6dd8dd0d9621acc74", "filename": "tests/ui/lint/invalid_from_utf8.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7f8846a9ef4426d18b911783ab83b83a80a852d1/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7f8846a9ef4426d18b911783ab83b83a80a852d1/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_from_utf8.stderr?ref=7f8846a9ef4426d18b911783ab83b83a80a852d1", "patch": "@@ -0,0 +1,56 @@\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:18:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+   |\n+note: the lint level is defined here\n+  --> $DIR/invalid_from_utf8.rs:4:9\n+   |\n+LL | #![warn(invalid_from_utf8_unchecked)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+warning: calls to `std::str::from_utf8_unchecked_mut` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:20:9\n+   |\n+LL |         std::str::from_utf8_unchecked_mut(&mut [b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^--------------------------------------------------^\n+   |                                           |\n+   |                                           the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:38:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[99, 108, 130, 105, 112, 112, 121]);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-----------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:40:9\n+   |\n+LL |         std::str::from_utf8_unchecked(&[b'c', b'l', b'\\x82', b'i', b'p', b'p', b'y']);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^----------------------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:42:9\n+   |\n+LL |         std::str::from_utf8_unchecked(b\"cl\\x82ippy\");\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: calls to `std::str::from_utf8_unchecked` with a invalid literal are undefined behavior\n+  --> $DIR/invalid_from_utf8.rs:44:9\n+   |\n+LL |         std::str::from_utf8_unchecked(concat_bytes!(b\"cl\", b\"\\x82ippy\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---------------------------------^\n+   |                                       |\n+   |                                       the literal was valid UTF-8 up to the 2 bytes\n+\n+warning: 6 warnings emitted\n+"}]}