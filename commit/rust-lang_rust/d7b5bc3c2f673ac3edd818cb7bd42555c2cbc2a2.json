{"sha": "d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YjViYzNjMmY2NzNhYzNlZGQ4MThjYjdiZDQyNTU1YzJjYmMyYTI=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-13T11:58:37Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-17T21:19:21Z"}, "message": "Update the libraries to reflect Send loosing the 'static bound.\n\nIn most places this preserves the current API by adding an explicit\n`'static` bound.\n\nNotably absent are some impls like `unsafe impl<T: Send> Send for\nFoo<T>` and the `std::thread` module. It is likely that it will be\npossible to remove these after auditing the code to ensure restricted\nlifetimes are safe.\n\nMore progress on #22251.", "tree": {"sha": "9fc5d0740225f18a41e9dda8ef5bfbc132a858c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc5d0740225f18a41e9dda8ef5bfbc132a858c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "html_url": "https://github.com/rust-lang/rust/commit/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae969e2a755bd7e8ec22758a8a02146ddb599a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae969e2a755bd7e8ec22758a8a02146ddb599a4", "html_url": "https://github.com/rust-lang/rust/commit/cae969e2a755bd7e8ec22758a8a02146ddb599a4"}], "stats": {"total": 164, "additions": 83, "deletions": 81}, "files": [{"sha": "72486fc55d48ee91ef09c3e4a73b3908c9d395d0", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -20,7 +20,7 @@ use mem;\n use thunk::Thunk;\n use sys_common::mutex::{Mutex, MUTEX_INIT};\n \n-type Queue = Vec<Thunk>;\n+type Queue = Vec<Thunk<'static>>;\n \n // NB these are specifically not types from `std::sync` as they currently rely\n // on poisoning and this module needs to operate at a lower level than requiring\n@@ -65,7 +65,7 @@ pub fn cleanup() {\n     }\n }\n \n-pub fn push(f: Thunk) {\n+pub fn push(f: Thunk<'static>) {\n     unsafe {\n         LOCK.lock();\n         init();"}, {"sha": "42cca73e5e24128e2b40b92b64615277aa01da82", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -148,7 +148,7 @@ fn lang_start(main: *const u8, argc: int, argv: *const *const u8) -> int {\n ///\n /// It is forbidden for procedures to register more `at_exit` handlers when they\n /// are running, and doing so will lead to a process abort.\n-pub fn at_exit<F:FnOnce()+Send>(f: F) {\n+pub fn at_exit<F:FnOnce()+Send+'static>(f: F) {\n     at_exit_imp::push(Thunk::new(f));\n }\n "}, {"sha": "1f5eb3af695be8e09040c92463db3ce950031e97", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -74,7 +74,7 @@ use rt::libunwind as uw;\n \n struct Exception {\n     uwe: uw::_Unwind_Exception,\n-    cause: Option<Box<Any + Send>>,\n+    cause: Option<Box<Any + Send + 'static>>,\n }\n \n pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: uint);\n@@ -161,7 +161,7 @@ pub fn panicking() -> bool {\n #[inline(never)]\n #[no_mangle]\n #[allow(private_no_mangle_fns)]\n-fn rust_panic(cause: Box<Any + Send>) -> ! {\n+fn rust_panic(cause: Box<Any + Send + 'static>) -> ! {\n     rtdebug!(\"begin_unwind()\");\n \n     unsafe {"}, {"sha": "ae2a8db0342c68fa7e9bcd5d42bbe858d4714aad", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -46,7 +46,7 @@ pub struct Future<A> {\n }\n \n enum FutureState<A> {\n-    Pending(Thunk<(),A>),\n+    Pending(Thunk<'static,(),A>),\n     Evaluating,\n     Forced(A)\n }\n@@ -103,7 +103,7 @@ impl<A> Future<A> {\n     }\n \n     pub fn from_fn<F>(f: F) -> Future<A>\n-        where F : FnOnce() -> A, F : Send\n+        where F : FnOnce() -> A, F : Send + 'static\n     {\n         /*!\n          * Create a future from a function.\n@@ -117,7 +117,7 @@ impl<A> Future<A> {\n     }\n }\n \n-impl<A:Send> Future<A> {\n+impl<A:Send+'static> Future<A> {\n     pub fn from_receiver(rx: Receiver<A>) -> Future<A> {\n         /*!\n          * Create a future from a port\n@@ -132,7 +132,7 @@ impl<A:Send> Future<A> {\n     }\n \n     pub fn spawn<F>(blk: F) -> Future<A>\n-        where F : FnOnce() -> A, F : Send\n+        where F : FnOnce() -> A, F : Send + 'static\n     {\n         /*!\n          * Create a future from a unique closure."}, {"sha": "4ba4e5447644815a72faf0b5fd8bb74ea4a96de7", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -345,7 +345,7 @@ pub struct Receiver<T> {\n \n // The receiver port can be sent from place to place, so long as it\n // is not used to receive non-sendable things.\n-unsafe impl<T:Send> Send for Receiver<T> { }\n+unsafe impl<T: Send + 'static> Send for Receiver<T> { }\n \n /// An iterator over messages on a receiver, this iterator will block\n /// whenever `next` is called, waiting for a new message, and `None` will be\n@@ -364,7 +364,7 @@ pub struct Sender<T> {\n \n // The send port can be sent from place to place, so long as it\n // is not used to send non-sendable things.\n-unsafe impl<T:Send> Send for Sender<T> { }\n+unsafe impl<T: Send + 'static> Send for Sender<T> { }\n \n /// The sending-half of Rust's synchronous channel type. This half can only be\n /// owned by one task, but it can be cloned to send to other tasks.\n@@ -373,7 +373,7 @@ pub struct SyncSender<T> {\n     inner: Arc<UnsafeCell<sync::Packet<T>>>,\n }\n \n-unsafe impl<T:Send> Send for SyncSender<T> {}\n+unsafe impl<T: Send + 'static> Send for SyncSender<T> {}\n \n impl<T> !Sync for SyncSender<T> {}\n \n@@ -485,7 +485,7 @@ impl<T> UnsafeFlavor<T> for Receiver<T> {\n /// println!(\"{:?}\", rx.recv().unwrap());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n+pub fn channel<T: Send + 'static>() -> (Sender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(oneshot::Packet::new()));\n     (Sender::new(Flavor::Oneshot(a.clone())), Receiver::new(Flavor::Oneshot(a)))\n }\n@@ -525,7 +525,7 @@ pub fn channel<T: Send>() -> (Sender<T>, Receiver<T>) {\n /// assert_eq!(rx.recv().unwrap(), 2);\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n+pub fn sync_channel<T: Send + 'static>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n     let a = Arc::new(UnsafeCell::new(sync::Packet::new(bound)));\n     (SyncSender::new(a.clone()), Receiver::new(Flavor::Sync(a)))\n }\n@@ -534,7 +534,7 @@ pub fn sync_channel<T: Send>(bound: uint) -> (SyncSender<T>, Receiver<T>) {\n // Sender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Sender<T> {\n+impl<T: Send + 'static> Sender<T> {\n     fn new(inner: Flavor<T>) -> Sender<T> {\n         Sender {\n             inner: UnsafeCell::new(inner),\n@@ -616,7 +616,7 @@ impl<T: Send> Sender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for Sender<T> {\n+impl<T: Send + 'static> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n             Flavor::Oneshot(ref p) => {\n@@ -662,7 +662,7 @@ impl<T: Send> Clone for Sender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Sender<T> {\n+impl<T: Send + 'static> Drop for Sender<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_chan(); },\n@@ -677,7 +677,7 @@ impl<T: Send> Drop for Sender<T> {\n // SyncSender\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> SyncSender<T> {\n+impl<T: Send + 'static> SyncSender<T> {\n     fn new(inner: Arc<UnsafeCell<sync::Packet<T>>>) -> SyncSender<T> {\n         SyncSender { inner: inner }\n     }\n@@ -717,7 +717,7 @@ impl<T: Send> SyncSender<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Clone for SyncSender<T> {\n+impl<T: Send + 'static> Clone for SyncSender<T> {\n     fn clone(&self) -> SyncSender<T> {\n         unsafe { (*self.inner.get()).clone_chan(); }\n         return SyncSender::new(self.inner.clone());\n@@ -726,7 +726,7 @@ impl<T: Send> Clone for SyncSender<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for SyncSender<T> {\n+impl<T: Send + 'static> Drop for SyncSender<T> {\n     fn drop(&mut self) {\n         unsafe { (*self.inner.get()).drop_chan(); }\n     }\n@@ -736,7 +736,7 @@ impl<T: Send> Drop for SyncSender<T> {\n // Receiver\n ////////////////////////////////////////////////////////////////////////////////\n \n-impl<T: Send> Receiver<T> {\n+impl<T: Send + 'static> Receiver<T> {\n     fn new(inner: Flavor<T>) -> Receiver<T> {\n         Receiver { inner: UnsafeCell::new(inner) }\n     }\n@@ -855,7 +855,7 @@ impl<T: Send> Receiver<T> {\n     }\n }\n \n-impl<T: Send> select::Packet for Receiver<T> {\n+impl<T: Send + 'static> select::Packet for Receiver<T> {\n     fn can_recv(&self) -> bool {\n         loop {\n             let new_port = match *unsafe { self.inner() } {\n@@ -942,15 +942,15 @@ impl<T: Send> select::Packet for Receiver<T> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T: Send> Iterator for Iter<'a, T> {\n+impl<'a, T: Send + 'static> Iterator for Iter<'a, T> {\n     type Item = T;\n \n     fn next(&mut self) -> Option<T> { self.rx.recv().ok() }\n }\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Receiver<T> {\n+impl<T: Send + 'static> Drop for Receiver<T> {\n     fn drop(&mut self) {\n         match *unsafe { self.inner_mut() } {\n             Flavor::Oneshot(ref mut p) => unsafe { (*p.get()).drop_port(); },"}, {"sha": "dceef683c2d8455f34cd18b8807e6b04cb115282", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -78,7 +78,7 @@ pub struct Queue<T> {\n }\n \n unsafe impl<T:Send> Send for Queue<T> { }\n-unsafe impl<T:Send> Sync for Queue<T> { }\n+unsafe impl<T: Send + 'static> Sync for Queue<T> { }\n \n impl<T> Node<T> {\n     unsafe fn new(v: Option<T>) -> *mut Node<T> {\n@@ -89,7 +89,7 @@ impl<T> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T: Send + 'static> Queue<T> {\n     /// Creates a new queue that is safe to share among multiple producers and\n     /// one consumer.\n     pub fn new() -> Queue<T> {\n@@ -140,7 +140,7 @@ impl<T: Send> Queue<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T: Send + 'static> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.tail.get();"}, {"sha": "55b2caf7c6d4cccea53aa2331ea3defaf0113524", "filename": "src/libstd/sync/mpsc/oneshot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Foneshot.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -88,7 +88,7 @@ enum MyUpgrade<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             data: None,\n@@ -368,7 +368,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.state.load(Ordering::SeqCst), DISCONNECTED);\n     }"}, {"sha": "820b2da15acf58f6d8cd3cba51bcb655ad36e58f", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -134,7 +134,7 @@ impl Select {\n     /// Creates a new handle into this receiver set for a new receiver. Note\n     /// that this does *not* add the receiver to the receiver set, for that you\n     /// must call the `add` method on the handle itself.\n-    pub fn handle<'a, T: Send>(&'a self, rx: &'a Receiver<T>) -> Handle<'a, T> {\n+    pub fn handle<'a, T: Send + 'static>(&'a self, rx: &'a Receiver<T>) -> Handle<'a, T> {\n         let id = self.next_id.get();\n         self.next_id.set(id + 1);\n         Handle {\n@@ -251,7 +251,7 @@ impl Select {\n     fn iter(&self) -> Packets { Packets { cur: self.head } }\n }\n \n-impl<'rx, T: Send> Handle<'rx, T> {\n+impl<'rx, T: Send + 'static> Handle<'rx, T> {\n     /// Retrieve the id of this handle.\n     #[inline]\n     pub fn id(&self) -> uint { self.id }\n@@ -322,7 +322,7 @@ impl Drop for Select {\n }\n \n #[unsafe_destructor]\n-impl<'rx, T: Send> Drop for Handle<'rx, T> {\n+impl<'rx, T: Send + 'static> Drop for Handle<'rx, T> {\n     fn drop(&mut self) {\n         unsafe { self.remove() }\n     }"}, {"sha": "3db98a44dd53fa72c16b90c13bb915543d3138e5", "filename": "src/libstd/sync/mpsc/shared.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fshared.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -64,7 +64,7 @@ pub enum Failure {\n     Disconnected,\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     // Creation of a packet *must* be followed by a call to postinit_lock\n     // and later by inherit_blocker\n     pub fn new() -> Packet<T> {\n@@ -474,7 +474,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "8e9a14ffafd232c13a9deba0cb8eb9e81daadc40", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -74,11 +74,11 @@ pub struct Queue<T> {\n     cache_subtractions: AtomicUsize,\n }\n \n-unsafe impl<T: Send> Send for Queue<T> { }\n+unsafe impl<T: Send + 'static> Send for Queue<T> { }\n \n-unsafe impl<T: Send> Sync for Queue<T> { }\n+unsafe impl<T: Send + 'static> Sync for Queue<T> { }\n \n-impl<T: Send> Node<T> {\n+impl<T: Send + 'static> Node<T> {\n     fn new() -> *mut Node<T> {\n         unsafe {\n             mem::transmute(box Node {\n@@ -89,7 +89,7 @@ impl<T: Send> Node<T> {\n     }\n }\n \n-impl<T: Send> Queue<T> {\n+impl<T: Send + 'static> Queue<T> {\n     /// Creates a new queue.\n     ///\n     /// This is unsafe as the type system doesn't enforce a single\n@@ -227,7 +227,7 @@ impl<T: Send> Queue<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Queue<T> {\n+impl<T: Send + 'static> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n             let mut cur = *self.first.get();"}, {"sha": "395819404c8e29649d365a39cf4a72ce159eb040", "filename": "src/libstd/sync/mpsc/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fstream.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -74,7 +74,7 @@ enum Message<T> {\n     GoUp(Receiver<T>),\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new() -> Packet<T> {\n         Packet {\n             queue: unsafe { spsc::Queue::new(128) },\n@@ -472,7 +472,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         // Note that this load is not only an assert for correctness about\n         // disconnection, but also a proper fence before the read of"}, {"sha": "ae96a2491dc267ee06066c369ee6cfb838e3c204", "filename": "src/libstd/sync/mpsc/sync.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fsync.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -55,9 +55,9 @@ pub struct Packet<T> {\n     lock: Mutex<State<T>>,\n }\n \n-unsafe impl<T:Send> Send for Packet<T> { }\n+unsafe impl<T: Send + 'static> Send for Packet<T> { }\n \n-unsafe impl<T:Send> Sync for Packet<T> { }\n+unsafe impl<T: Send + 'static> Sync for Packet<T> { }\n \n struct State<T> {\n     disconnected: bool, // Is the channel disconnected yet?\n@@ -75,7 +75,7 @@ struct State<T> {\n     canceled: Option<&'static mut bool>,\n }\n \n-unsafe impl<T: Send> Send for State<T> {}\n+unsafe impl<T: Send + 'static> Send for State<T> {}\n \n /// Possible flavors of threads who can be blocked on this channel.\n enum Blocker {\n@@ -113,7 +113,7 @@ pub enum Failure {\n \n /// Atomically blocks the current thread, placing it into `slot`, unlocking `lock`\n /// in the meantime. This re-locks the mutex upon returning.\n-fn wait<'a, 'b, T: Send>(lock: &'a Mutex<State<T>>,\n+fn wait<'a, 'b, T: Send + 'static>(lock: &'a Mutex<State<T>>,\n                          mut guard: MutexGuard<'b, State<T>>,\n                          f: fn(SignalToken) -> Blocker)\n                          -> MutexGuard<'a, State<T>>\n@@ -136,7 +136,7 @@ fn wakeup<T>(token: SignalToken, guard: MutexGuard<State<T>>) {\n     token.signal();\n }\n \n-impl<T: Send> Packet<T> {\n+impl<T: Send + 'static> Packet<T> {\n     pub fn new(cap: uint) -> Packet<T> {\n         Packet {\n             channels: AtomicUsize::new(1),\n@@ -412,7 +412,7 @@ impl<T: Send> Packet<T> {\n }\n \n #[unsafe_destructor]\n-impl<T: Send> Drop for Packet<T> {\n+impl<T: Send + 'static> Drop for Packet<T> {\n     fn drop(&mut self) {\n         assert_eq!(self.channels.load(Ordering::SeqCst), 0);\n         let mut guard = self.lock.lock().unwrap();"}, {"sha": "7e27f13f515c2dfdc0e01f68f4ee1d3e53ede77a", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -120,9 +120,9 @@ pub struct Mutex<T> {\n     data: UnsafeCell<T>,\n }\n \n-unsafe impl<T:Send> Send for Mutex<T> { }\n+unsafe impl<T: Send + 'static> Send for Mutex<T> { }\n \n-unsafe impl<T:Send> Sync for Mutex<T> { }\n+unsafe impl<T: Send + 'static> Sync for Mutex<T> { }\n \n /// The static mutex type is provided to allow for static allocation of mutexes.\n ///\n@@ -180,7 +180,7 @@ pub const MUTEX_INIT: StaticMutex = StaticMutex {\n     poison: poison::FLAG_INIT,\n };\n \n-impl<T: Send> Mutex<T> {\n+impl<T: Send + 'static> Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn new(t: T) -> Mutex<T> {\n@@ -243,7 +243,7 @@ impl<T: Send> Mutex<T> {\n \n #[unsafe_destructor]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Send> Drop for Mutex<T> {\n+impl<T: Send + 'static> Drop for Mutex<T> {\n     fn drop(&mut self) {\n         // This is actually safe b/c we know that there is no further usage of\n         // this mutex (it's up to the user to arrange for a mutex to get"}, {"sha": "831c4d315b13808a0ecfd917eeebdebfb6270e43", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -24,12 +24,12 @@ use thread::Thread;\n use thunk::Thunk;\n \n struct Sentinel<'a> {\n-    jobs: &'a Arc<Mutex<Receiver<Thunk>>>,\n+    jobs: &'a Arc<Mutex<Receiver<Thunk<'static>>>>,\n     active: bool\n }\n \n impl<'a> Sentinel<'a> {\n-    fn new(jobs: &Arc<Mutex<Receiver<Thunk>>>) -> Sentinel {\n+    fn new(jobs: &'a Arc<Mutex<Receiver<Thunk<'static>>>>) -> Sentinel<'a> {\n         Sentinel {\n             jobs: jobs,\n             active: true\n@@ -80,7 +80,7 @@ pub struct TaskPool {\n     //\n     // This is the only such Sender, so when it is dropped all subthreads will\n     // quit.\n-    jobs: Sender<Thunk>\n+    jobs: Sender<Thunk<'static>>\n }\n \n impl TaskPool {\n@@ -105,13 +105,13 @@ impl TaskPool {\n \n     /// Executes the function `job` on a thread in the pool.\n     pub fn execute<F>(&self, job: F)\n-        where F : FnOnce(), F : Send\n+        where F : FnOnce(), F : Send + 'static\n     {\n         self.jobs.send(Thunk::new(job)).unwrap();\n     }\n }\n \n-fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n+fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk<'static>>>>) {\n     Thread::spawn(move || {\n         // Will spawn a new thread on panic unless it is cancelled.\n         let sentinel = Sentinel::new(&jobs);"}, {"sha": "ad2f733165e2d669c18d72a5f49b556e2ad3c14e", "filename": "src/libstd/sys/common/helper_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fhelper_thread.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -81,7 +81,7 @@ impl<M: Send> Helper<M> {\n     ///\n     /// This function is safe to be called many times.\n     pub fn boot<T, F>(&'static self, f: F, helper: fn(helper_signal::signal, Receiver<M>, T)) where\n-        T: Send,\n+        T: Send + 'static,\n         F: FnOnce() -> T,\n     {\n         unsafe {"}, {"sha": "3b758c83980ca380ead0cea19f7e2c526b939ebb", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -175,9 +175,9 @@ pub struct Builder {\n     // The size of the stack for the spawned thread\n     stack_size: Option<uint>,\n     // Thread-local stdout\n-    stdout: Option<Box<Writer + Send>>,\n+    stdout: Option<Box<Writer + Send + 'static>>,\n     // Thread-local stderr\n-    stderr: Option<Box<Writer + Send>>,\n+    stderr: Option<Box<Writer + Send + 'static>>,\n }\n \n impl Builder {\n@@ -211,15 +211,15 @@ impl Builder {\n     /// Redirect thread-local stdout.\n     #[unstable(feature = \"std_misc\",\n                reason = \"Will likely go away after proc removal\")]\n-    pub fn stdout(mut self, stdout: Box<Writer + Send>) -> Builder {\n+    pub fn stdout(mut self, stdout: Box<Writer + Send + 'static>) -> Builder {\n         self.stdout = Some(stdout);\n         self\n     }\n \n     /// Redirect thread-local stderr.\n     #[unstable(feature = \"std_misc\",\n                reason = \"Will likely go away after proc removal\")]\n-    pub fn stderr(mut self, stderr: Box<Writer + Send>) -> Builder {\n+    pub fn stderr(mut self, stderr: Box<Writer + Send + 'static>) -> Builder {\n         self.stderr = Some(stderr);\n         self\n     }\n@@ -469,11 +469,11 @@ impl thread_info::NewThread for Thread {\n ///\n /// A thread that completes without panicking is considered to exit successfully.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub type Result<T> = ::result::Result<T, Box<Any + Send>>;\n+pub type Result<T> = ::result::Result<T, Box<Any + Send + 'static>>;\n \n struct Packet<T>(Arc<UnsafeCell<Option<Result<T>>>>);\n \n-unsafe impl<T:'static+Send> Send for Packet<T> {}\n+unsafe impl<T:Send> Send for Packet<T> {}\n unsafe impl<T> Sync for Packet<T> {}\n \n /// An RAII-style guard that will block until thread termination when dropped.\n@@ -515,7 +515,7 @@ impl<'a, T: Send + 'a> JoinGuard<'a, T> {\n     }\n }\n \n-impl<T: Send> JoinGuard<'static, T> {\n+impl<T: Send + 'static> JoinGuard<'static, T> {\n     /// Detaches the child thread, allowing it to outlive its parent.\n     #[unstable(feature = \"std_misc\",\n                reason = \"unsure whether this API imposes limitations elsewhere\")]"}, {"sha": "1412dbd70b9c6850470fa819439439648bed21ce", "filename": "src/libstd/thunk.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fthunk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibstd%2Fthunk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthunk.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -16,21 +16,24 @@ use alloc::boxed::Box;\n use core::marker::Send;\n use core::ops::FnOnce;\n \n-pub struct Thunk<A=(),R=()> {\n-    invoke: Box<Invoke<A,R>+Send>\n+pub struct Thunk<'a, A=(),R=()> {\n+    #[cfg(stage0)] // // SNAP ac134f7 remove after stage0\n+    invoke: Box<Invoke<A,R>+Send>,\n+    #[cfg(not(stage0))]\n+    invoke: Box<Invoke<A,R>+Send + 'a>,\n }\n \n-impl<R> Thunk<(),R> {\n-    pub fn new<F>(func: F) -> Thunk<(),R>\n-        where F : FnOnce() -> R, F : Send\n+impl<'a, R> Thunk<'a,(),R> {\n+    pub fn new<F>(func: F) -> Thunk<'a,(),R>\n+        where F : FnOnce() -> R, F : Send + 'a\n     {\n         Thunk::with_arg(move|()| func())\n     }\n }\n \n-impl<A,R> Thunk<A,R> {\n-    pub fn with_arg<F>(func: F) -> Thunk<A,R>\n-        where F : FnOnce(A) -> R, F : Send\n+impl<'a,A,R> Thunk<'a,A,R> {\n+    pub fn with_arg<F>(func: F) -> Thunk<'a,A,R>\n+        where F : FnOnce(A) -> R, F : Send + 'a\n     {\n         Thunk {\n             invoke: box func"}, {"sha": "b978d2d8054e566212eb33868777ad3d9d1924ea", "filename": "src/libterm/terminfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fmod.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -72,7 +72,7 @@ pub struct TerminfoTerminal<T> {\n     ti: Box<TermInfo>\n }\n \n-impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> Terminal<T> for TerminfoTerminal<T> {\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         let color = self.dim_if_necessary(color);\n         if self.num_colors > color {\n@@ -164,11 +164,11 @@ impl<T: Writer+Send> Terminal<T> for TerminfoTerminal<T> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.out }\n }\n \n-impl<T: Writer+Send> UnwrappableTerminal<T> for TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> UnwrappableTerminal<T> for TerminfoTerminal<T> {\n     fn unwrap(self) -> T { self.out }\n }\n \n-impl<T: Writer+Send> TerminfoTerminal<T> {\n+impl<T: Writer+Send+'static> TerminfoTerminal<T> {\n     /// Returns `None` whenever the terminal cannot be created for some\n     /// reason.\n     pub fn new(out: T) -> Option<Box<Terminal<T>+Send+'static>> {\n@@ -229,4 +229,3 @@ impl<T: Writer> Writer for TerminfoTerminal<T> {\n         self.out.flush()\n     }\n }\n-"}, {"sha": "e93b956dc7c835eaee3f11af0606a8bcf7437ba2", "filename": "src/libterm/win.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -86,7 +86,7 @@ fn bits_to_color(bits: u16) -> color::Color {\n     color | (bits & 0x8) // copy the hi-intensity bit\n }\n \n-impl<T: Writer+Send> WinConsole<T> {\n+impl<T: Writer+Send+'static> WinConsole<T> {\n     fn apply(&mut self) {\n         let _unused = self.buf.flush();\n         let mut accum: libc::WORD = 0;\n@@ -139,7 +139,7 @@ impl<T: Writer> Writer for WinConsole<T> {\n     }\n }\n \n-impl<T: Writer+Send> Terminal<T> for WinConsole<T> {\n+impl<T: Writer+Send+'static> Terminal<T> for WinConsole<T> {\n     fn fg(&mut self, color: color::Color) -> IoResult<bool> {\n         self.foreground = color;\n         self.apply();\n@@ -192,6 +192,6 @@ impl<T: Writer+Send> Terminal<T> for WinConsole<T> {\n     fn get_mut<'a>(&'a mut self) -> &'a mut T { &mut self.buf }\n }\n \n-impl<T: Writer+Send> UnwrappableTerminal<T> for WinConsole<T> {\n+impl<T: Writer+Send+'static> UnwrappableTerminal<T> for WinConsole<T> {\n     fn unwrap(self) -> T { self.buf }\n }"}, {"sha": "fea92256f9be611a86aea9e8602c422b7c1dd388", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=d7b5bc3c2f673ac3edd818cb7bd42555c2cbc2a2", "patch": "@@ -154,7 +154,7 @@ pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n     StaticMetricFn(fn(&mut MetricMap)),\n-    DynTestFn(Thunk),\n+    DynTestFn(Thunk<'static>),\n     DynMetricFn(Box<for<'a> Invoke<&'a mut MetricMap>+'static>),\n     DynBenchFn(Box<TDynBenchFn+'static>)\n }\n@@ -878,7 +878,7 @@ pub fn run_test(opts: &TestOpts,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       nocapture: bool,\n-                      testfn: Thunk) {\n+                      testfn: Thunk<'static>) {\n         Thread::spawn(move || {\n             let (tx, rx) = channel();\n             let mut reader = ChanReader::new(rx);"}]}