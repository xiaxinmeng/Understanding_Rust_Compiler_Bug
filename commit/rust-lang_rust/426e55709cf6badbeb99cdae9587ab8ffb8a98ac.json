{"sha": "426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyNmU1NTcwOWNmNmJhZGJlYjk5Y2RhZTk1ODdhYjhmZmI4YTk4YWM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T16:41:59Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-09-29T16:41:59Z"}, "message": "Replace CG_CLIF_JIT with --jit", "tree": {"sha": "be225b25e8b2a74312e8a5f770977e4018072375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be225b25e8b2a74312e8a5f770977e4018072375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "html_url": "https://github.com/rust-lang/rust/commit/426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "838dd17a67b750bce9fcca149759db236f145eea", "url": "https://api.github.com/repos/rust-lang/rust/commits/838dd17a67b750bce9fcca149759db236f145eea", "html_url": "https://github.com/rust-lang/rust/commit/838dd17a67b750bce9fcca149759db236f145eea"}], "stats": {"total": 92, "additions": 69, "deletions": 23}, "files": [{"sha": "41159b66af8f06852aad38d4db4ea023396a61b7", "filename": "Readme.md", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -36,7 +36,24 @@ If you compiled cg_clif in debug mode (aka you didn't pass `--release` to `./tes\n > You should prefer using the Cargo method.\n \n ```bash\n-$ rustc +$(cat $cg_clif_dir/rust-toolchain) -Cpanic=abort -Zcodegen-backend=$cg_clif_dir/target/release/librustc_codegen_cranelift.so --sysroot $cg_clif_dir/build_sysroot/sysroot my_crate.rs\n+$ $cg_clif_dir/target/release/cg_clif my_crate.rs\n+```\n+\n+### Jit mode\n+\n+In jit mode cg_clif will immediately execute your code without creating an executable file.\n+This requires all dependencies to be available as dynamic library.\n+The easiest way to achieve this is by creating a new dylib crate that has all your dependencies as dependencies of itself.\n+Rustc will then link all your rlib dependencies into the dylib.\n+\n+```bash\n+$ $cg_clif_dir/cargo.sh jit\n+```\n+\n+or\n+\n+```bash\n+$ $cg_clif_dir/target/release/cg_clif --jit my_crate.rs\n ```\n \n ### Shell\n@@ -45,7 +62,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | CG_CLIF_JIT=1 rustc -Zcodegen-backend=$cg_clif_dir/target/release/librustc_codegen_cranelift.so --sysroot $cg_clif_dir/build_sysroot/sysroot - -Cprefer-dynamic\n+    echo \"$@\" | $cg_clif_dir/target/release/cg_clif - --jit\n }\n \n function jit() {"}, {"sha": "cebc3e67363a885c7ea223acb8236686e42ef5c8", "filename": "cargo.sh", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/cargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/cargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo.sh?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -12,12 +12,11 @@ TOOLCHAIN=$(cat rust-toolchain)\n \n popd >/dev/null\n \n-if [[ $(rustc -V) != $(rustc +${TOOLCHAIN} -V) ]]; then\n-    echo \"rustc_codegen_cranelift is build for $(rustc +${TOOLCHAIN} -V) but the default rustc version is $(rustc -V).\"\n-    echo \"Using $(rustc +${TOOLCHAIN} -V).\"\n-fi\n-\n cmd=$1\n shift\n \n+if [[ \"$cmd\" = \"jit\" ]]; then\n+cargo +${TOOLCHAIN} rustc $@ -- --jit\n+else\n cargo +${TOOLCHAIN} $cmd $@\n+fi"}, {"sha": "07b75622a58ef2dac71189a7e1063bbc7ba5d9b3", "filename": "docs/env_vars.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/docs%2Fenv_vars.md", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/docs%2Fenv_vars.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fenv_vars.md?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -1,8 +1,6 @@\n # List of env vars recognized by cg_clif\n \n <dl>\n-    <dt>CG_CLIF_JIT</dt>\n-    <dd>Enable JIT mode to immediately run a program instead of writing an executable file.</dd>\n     <dt>CG_CLIF_JIT_ARGS</dt>\n     <dd>When JIT mode is enable pass these arguments to the program.</dd>\n     <dt>CG_CLIF_INCR_CACHE_DISABLED</dt>"}, {"sha": "c70c3ec47f31fac0fe6a4cd07b6f21edd811a824", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -5,7 +5,7 @@ CHANNEL=\"release\"\n pushd $(dirname \"$0\")/../\n source scripts/config.sh\n popd\n-CG_CLIF_JIT=1 PROFILE=$1 OUTPUT=$2 exec rustc $RUSTFLAGS $0 --crate-type bin -Cprefer-dynamic\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "8a39e9b0590ed49a0080dadcfa25d9f517e16068", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -50,7 +50,9 @@ fn main() {\n     let mut callbacks = TimePassesCallbacks::default();\n     rustc_driver::install_ice_hook();\n     let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let args = std::env::args_os()\n+        let mut use_jit = false;\n+\n+        let mut args = std::env::args_os()\n             .enumerate()\n             .map(|(i, arg)| {\n                 arg.into_string().unwrap_or_else(|arg| {\n@@ -60,14 +62,29 @@ fn main() {\n                     )\n                 })\n             })\n+            .filter(|arg| {\n+                if arg == \"--jit\" {\n+                    use_jit = true;\n+                    false\n+                } else {\n+                    true\n+                }\n+            })\n             .collect::<Vec<_>>();\n+        if use_jit {\n+            args.push(\"-Cprefer-dynamic\".to_string());\n+        }\n         rustc_driver::run_compiler(\n             &args,\n             &mut callbacks,\n             None,\n             None,\n-            Some(Box::new(|_| {\n-                rustc_codegen_cranelift::__rustc_codegen_backend()\n+            Some(Box::new(move |_| {\n+                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n+                    config: rustc_codegen_cranelift::BackendConfig {\n+                        use_jit,\n+                    }\n+                })\n             })),\n         )\n     });"}, {"sha": "5a899afb97ca4bd7fbe511a330556b15d92c41d6", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -87,7 +87,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n-    println!(\"Rustc codegen cranelift will JIT run the executable, because the CG_CLIF_JIT env var is set\");\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_main) };"}, {"sha": "881221c010541bd520469b7b6f0df7885fdea269", "filename": "src/driver/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -16,15 +16,19 @@ pub(crate) fn codegen_crate(\n     tcx: TyCtxt<'_>,\n     metadata: EncodedMetadata,\n     need_metadata_module: bool,\n+    config: crate::BackendConfig,\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    if std::env::var(\"CG_CLIF_JIT\").is_ok()\n-        && tcx\n+    if config.use_jit {\n+        let is_executable = tcx\n             .sess\n             .crate_types()\n-            .contains(&rustc_session::config::CrateType::Executable)\n-    {\n+            .contains(&rustc_session::config::CrateType::Executable);\n+        if !is_executable {\n+            tcx.sess.fatal(\"can't jit non-executable crate\");\n+        }\n+\n         #[cfg(feature = \"jit\")]\n         let _: ! = jit::run_jit(tcx);\n "}, {"sha": "52845b11da0e548e08dafe3a570761b307db7257", "filename": "src/lib.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -181,7 +181,14 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n     }\n }\n \n-struct CraneliftCodegenBackend;\n+#[derive(Copy, Clone, Debug)]\n+pub struct BackendConfig {\n+    pub use_jit: bool,\n+}\n+\n+pub struct CraneliftCodegenBackend {\n+    pub config: BackendConfig,\n+}\n \n impl CodegenBackend for CraneliftCodegenBackend {\n     fn init(&self, sess: &Session) {\n@@ -223,7 +230,7 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module);\n+        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, self.config);\n \n         rustc_symbol_mangling::test::report_symbol_names(tcx);\n \n@@ -345,5 +352,9 @@ fn build_isa(sess: &Session, enable_pic: bool) -> Box<dyn isa::TargetIsa + 'stat\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    Box::new(CraneliftCodegenBackend)\n+    Box::new(CraneliftCodegenBackend {\n+        config: BackendConfig {\n+            use_jit: false,\n+        }\n+    })\n }"}, {"sha": "0d2b5c6a392b2822a5ac05ddaa6cacb98c5bea1a", "filename": "test.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/426e55709cf6badbeb99cdae9587ab8ffb8a98ac/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=426e55709cf6badbeb99cdae9587ab8ffb8a98ac", "patch": "@@ -29,7 +29,7 @@ $RUSTC example/example.rs --crate-type lib --target $TARGET_TRIPLE\n \n if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n     echo \"[JIT] mini_core_hello_world\"\n-    CG_CLIF_JIT=1 CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --crate-type bin -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n+    CG_CLIF_JIT_ARGS=\"abc bcd\" $RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target $HOST_TRIPLE\n else\n     echo \"[JIT] mini_core_hello_world (skipped)\"\n fi\n@@ -52,7 +52,7 @@ $RUN_WRAPPER ./target/out/alloc_example\n \n if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n     echo \"[JIT] std_example\"\n-    CG_CLIF_JIT=1 $RUSTC --crate-type bin -Cprefer-dynamic example/std_example.rs --target $HOST_TRIPLE\n+    $RUSTC --jit example/std_example.rs --target $HOST_TRIPLE\n else\n     echo \"[JIT] std_example (skipped)\"\n fi"}]}