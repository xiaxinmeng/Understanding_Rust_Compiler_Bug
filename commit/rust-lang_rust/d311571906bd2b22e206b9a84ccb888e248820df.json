{"sha": "d311571906bd2b22e206b9a84ccb888e248820df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMTE1NzE5MDZiZDJiMjJlMjA2YjlhODRjY2I4ODhlMjQ4ODIwZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-01T12:45:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-01T12:45:52Z"}, "message": "Auto merge of #55275 - petrochenkov:extself, r=eddyb\n\nexperiment: Support aliasing local crate root in extern prelude\n\nThis PR provides some minimally invasive solution for the 2018 edition migration issue described in https://github.com/rust-lang/rust/issues/54647 and affecting proc macro crates.\n\n`extern crate NAME as RENAME;` now accepts `NAME`=`self` and interprets it as referring to the local crate.\nAs with other `extern crate` items, `RENAME` in this case gets into extern prelude in accordance with https://github.com/rust-lang/rust/pull/54658, thus resolving https://github.com/rust-lang/rust/issues/54647.\n```rust\nextern crate self as serde; // Adds local crate to extern prelude as `serde`\n```\nThis solution doesn't introduce any new syntax and has minimal maintenance cost, so it can be easily deprecated if something better is found in the future.\n\nCloses https://github.com/rust-lang/rust/issues/54647", "tree": {"sha": "15de266b8c52d7b39700d344996438d3433dc66b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15de266b8c52d7b39700d344996438d3433dc66b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d311571906bd2b22e206b9a84ccb888e248820df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d311571906bd2b22e206b9a84ccb888e248820df", "html_url": "https://github.com/rust-lang/rust/commit/d311571906bd2b22e206b9a84ccb888e248820df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d311571906bd2b22e206b9a84ccb888e248820df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3ed34824c31f303b98855fee6fc9213dff1f295", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3ed34824c31f303b98855fee6fc9213dff1f295", "html_url": "https://github.com/rust-lang/rust/commit/d3ed34824c31f303b98855fee6fc9213dff1f295"}, {"sha": "549bd45e9eb13e501416e17887b65ad4189ebe6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/549bd45e9eb13e501416e17887b65ad4189ebe6b", "html_url": "https://github.com/rust-lang/rust/commit/549bd45e9eb13e501416e17887b65ad4189ebe6b"}], "stats": {"total": 99, "additions": 89, "deletions": 10}, "files": [{"sha": "0fa41cb484fc9a827fd3152292d08a9b80e11885", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -40,7 +40,7 @@ use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n-use syntax::feature_gate::is_builtin_attr;\n+use syntax::feature_gate::{is_builtin_attr, emit_feature_err, GateIssue};\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n@@ -344,9 +344,23 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n             }\n \n             ItemKind::ExternCrate(orig_name) => {\n-                let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);\n-                let module =\n-                    self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n+                let module = if orig_name.is_none() && ident.name == keywords::SelfValue.name() {\n+                    self.session\n+                        .struct_span_err(item.span, \"`extern crate self;` requires renaming\")\n+                        .span_suggestion(item.span, \"try\", \"extern crate self as name;\".into())\n+                        .emit();\n+                    return;\n+                } else if orig_name == Some(keywords::SelfValue.name()) {\n+                    if !self.session.features_untracked().extern_crate_self {\n+                        emit_feature_err(&self.session.parse_sess, \"extern_crate_self\", item.span,\n+                                         GateIssue::Language, \"`extern crate self` is unstable\");\n+                    }\n+                    self.graph_root\n+                } else {\n+                    let crate_id = self.crate_loader.process_extern_crate(item, &self.definitions);\n+                    self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX })\n+                };\n+\n                 self.populate_module_if_necessary(module);\n                 if injected_crate_name().map_or(false, |name| ident.name == name) {\n                     self.injected_crate = Some(module);\n@@ -768,6 +782,12 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     span_err!(self.session, item.span, E0468,\n                         \"an `extern crate` loading macros must be at the crate root\");\n                 }\n+                if let ItemKind::ExternCrate(Some(orig_name)) = item.node {\n+                    if orig_name == keywords::SelfValue.name() {\n+                        self.session.span_err(attr.span,\n+                            \"`macro_use` is not supported on `extern crate self`\");\n+                    }\n+                }\n                 let ill_formed = |span| span_err!(self.session, span, E0466, \"bad macro import\");\n                 match attr.meta() {\n                     Some(meta) => match meta.node {"}, {"sha": "9c1860fb82ee4255dc19e6c5fe16a19e6f86daef", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -113,11 +113,12 @@ fn unused_crates_lint<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>) {\n             true\n         })\n         .filter(|&&(def_id, _)| {\n-            let cnum = tcx.extern_mod_stmt_cnum(def_id).unwrap();\n-            !tcx.is_compiler_builtins(cnum)\n-                && !tcx.is_panic_runtime(cnum)\n-                && !tcx.has_global_allocator(cnum)\n-                && !tcx.has_panic_handler(cnum)\n+            tcx.extern_mod_stmt_cnum(def_id).map_or(true, |cnum| {\n+                !tcx.is_compiler_builtins(cnum) &&\n+                !tcx.is_panic_runtime(cnum) &&\n+                !tcx.has_global_allocator(cnum) &&\n+                !tcx.has_panic_handler(cnum)\n+            })\n         })\n         .cloned()\n         .collect();"}, {"sha": "d0c4d1c7dce0aab7128482694c20fece2a5704b5", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -492,6 +492,9 @@ declare_features! (\n \n     // `reason = ` in lint attributes and `expect` lint attribute\n     (active, lint_reasons, \"1.31.0\", Some(54503), None),\n+\n+    // `extern crate self as foo;` puts local crate root into extern prelude under name `foo`.\n+    (active, extern_crate_self, \"1.31.0\", Some(54658), None),\n );\n \n declare_features! ("}, {"sha": "33715f206dedf07d9c8624a51478e4d04e387cca", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -6783,7 +6783,11 @@ impl<'a> Parser<'a> {\n         let error_msg = \"crate name using dashes are not valid in `extern crate` statements\";\n         let suggestion_msg = \"if the original crate name uses dashes you need to use underscores \\\n                               in the code\";\n-        let mut ident = self.parse_ident()?;\n+        let mut ident = if self.token.is_keyword(keywords::SelfValue) {\n+            self.parse_path_segment_ident()\n+        } else {\n+            self.parse_ident()\n+        }?;\n         let mut idents = vec![];\n         let mut replacement = vec![];\n         let mut fixed_crate_name = false;"}, {"sha": "2161932c2f6aa187b48eeffa02f02dbb97e8505d", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -0,0 +1,3 @@\n+extern crate self as foo; //~ ERROR `extern crate self` is unstable\n+\n+fn main() {}"}, {"sha": "61cc68477830ddd03e5a8d56d0e2c29049fee267", "filename": "src/test/ui/feature-gates/feature-gate-extern_crate_self.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-extern_crate_self.stderr?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: `extern crate self` is unstable (see issue #54658)\n+  --> $DIR/feature-gate-extern_crate_self.rs:1:1\n+   |\n+LL | extern crate self as foo; //~ ERROR `extern crate self` is unstable\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add #![feature(extern_crate_self)] to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "eab7b7032aa07b4149de60b39b45fd39c52820fc", "filename": "src/test/ui/imports/extern-crate-self-fail.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -0,0 +1,8 @@\n+#![feature(extern_crate_self)]\n+\n+extern crate self; //~ ERROR `extern crate self;` requires renaming\n+\n+#[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n+extern crate self as foo;\n+\n+fn main() {}"}, {"sha": "0ca0d89eaf08ec3730554908bc22d8765522e35b", "filename": "src/test/ui/imports/extern-crate-self-fail.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-fail.stderr?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -0,0 +1,14 @@\n+error: `extern crate self;` requires renaming\n+  --> $DIR/extern-crate-self-fail.rs:3:1\n+   |\n+LL | extern crate self; //~ ERROR `extern crate self;` requires renaming\n+   | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n+\n+error: `macro_use` is not supported on `extern crate self`\n+  --> $DIR/extern-crate-self-fail.rs:5:1\n+   |\n+LL | #[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n+   | ^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bf255bb6b8194bbfc64ba6d388104568fd11e58d", "filename": "src/test/ui/imports/extern-crate-self-pass.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d311571906bd2b22e206b9a84ccb888e248820df/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self-pass.rs?ref=d311571906bd2b22e206b9a84ccb888e248820df", "patch": "@@ -0,0 +1,15 @@\n+// compile-pass\n+\n+#![feature(extern_crate_self)]\n+\n+extern crate self as foo;\n+\n+struct S;\n+\n+mod m {\n+    fn check() {\n+        foo::S; // OK\n+    }\n+}\n+\n+fn main() {}"}]}