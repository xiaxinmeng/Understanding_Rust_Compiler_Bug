{"sha": "9315ed45c5d221b868848f8db9ba4a5be155e008", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMTVlZDQ1YzVkMjIxYjg2ODg0OGY4ZGI5YmE0YTViZTE1NWUwMDg=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-01T11:17:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:33Z"}, "message": "Hot plug rustc_trans", "tree": {"sha": "a12d3595828160adbadc9e21377f5ca692168890", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a12d3595828160adbadc9e21377f5ca692168890"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9315ed45c5d221b868848f8db9ba4a5be155e008", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9315ed45c5d221b868848f8db9ba4a5be155e008", "html_url": "https://github.com/rust-lang/rust/commit/9315ed45c5d221b868848f8db9ba4a5be155e008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9315ed45c5d221b868848f8db9ba4a5be155e008/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6dffaa9175449fa771e456210f339cdabe9d0c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6dffaa9175449fa771e456210f339cdabe9d0c6d", "html_url": "https://github.com/rust-lang/rust/commit/6dffaa9175449fa771e456210f339cdabe9d0c6d"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "1deb89092e6cc78dfe0510d097d738baec5abbd3", "filename": "src/Cargo.lock", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -1021,6 +1021,16 @@ dependencies = [\n  \"pkg-config 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"libloading\"\n+version = \"0.4.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"libssh2-sys\"\n version = \"0.2.6\"\n@@ -2128,6 +2138,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"ar 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libloading 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc_back 0.0.0\",\n@@ -2971,6 +2982,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum lazycell 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3b585b7a6811fb03aa10e74b278a0f00f8dd9b45dc681f148bb29fa5cb61859b\"\n \"checksum libc 0.2.36 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1e5d97d6708edaa407429faa671b942dc0f2727222fb6b6539bf1db936e4b121\"\n \"checksum libgit2-sys 0.6.19 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6eeae66e7b1c995de45cb4e65c5ab438a96a7b4077e448645d4048dc753ad357\"\n+\"checksum libloading 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fd38073de8f7965d0c17d30546d4bb6da311ab428d1c7a3fc71dff7f9d4979b9\"\n \"checksum libssh2-sys 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0db4ec23611747ef772db1c4d650f8bd762f07b461727ec998f953c614024b75\"\n \"checksum libz-sys 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87f737ad6cc6fd6eefe3d9dc5412f1573865bded441300904d2f42269e140f16\"\n \"checksum log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e19e8d5c34a3e0e2223db8e060f9e8264aeeb5c5fc64a4ee9965c062211c024b\""}, {"sha": "b5619a0eac07d522daa18b5d02161c946134e1a8", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -197,6 +197,9 @@ pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n         Some(\"metadata_only\") => {\n             rustc_trans_utils::trans_crate::MetadataOnlyTransCrate::new(&sess)\n         }\n+        Some(filename) if filename.starts_with(\"/\") => {\n+            rustc_trans_utils::trans_crate::ExternTransCrate::new(&sess, filename)\n+        }\n         Some(trans_name) => sess.fatal(&format!(\"Invalid trans {}\", trans_name)),\n     }\n }"}, {"sha": "d03086481a43f0ca85cdbda3e7767834e7bef8f7", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -56,6 +56,7 @@ extern crate rustc_demangle;\n extern crate rustc_incremental;\n extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n+#[macro_use]\n extern crate rustc_trans_utils;\n \n #[macro_use] extern crate log;\n@@ -250,6 +251,8 @@ impl TransCrate for LlvmTransCrate {\n     }\n }\n \n+hot_pluggable_trans_crate!(|sess| { LlvmTransCrate::new(sess) });\n+\n struct ModuleTranslation {\n     /// The name of the module. When the crate may be saved between\n     /// compilations, incremental compilation requires that name be"}, {"sha": "6d433bdef3e01582428813ff5f7272fe703a2cda", "filename": "src/librustc_trans_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2FCargo.toml?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -13,6 +13,7 @@ test = false\n ar = \"0.3.0\"\n flate2 = \"1.0\"\n log = \"0.4\"\n+libloading = \"0.4\"\n \n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "029a14a46e6b6a6aba6bcfced54131e029eaca32", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -31,6 +31,7 @@ extern crate ar;\n extern crate flate2;\n #[macro_use]\n extern crate log;\n+extern crate libloading;\n \n #[macro_use]\n extern crate rustc;\n@@ -42,6 +43,8 @@ extern crate syntax;\n extern crate syntax_pos;\n extern crate rustc_data_structures;\n \n+pub extern crate rustc as __rustc;\n+\n use rustc::ty::{TyCtxt, Instance};\n use rustc::hir;\n use rustc::hir::def_id::LOCAL_CRATE;\n@@ -50,6 +53,7 @@ use rustc::util::nodemap::NodeSet;\n \n pub mod diagnostics;\n pub mod link;\n+#[macro_export]\n pub mod trans_crate;\n pub mod symbol_names;\n pub mod symbol_names_test;"}, {"sha": "31bfe5b02a263f8fc1b577d3264cf1f503aec8f0", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 181, "deletions": 0, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9315ed45c5d221b868848f8db9ba4a5be155e008/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=9315ed45c5d221b868848f8db9ba4a5be155e008", "patch": "@@ -24,6 +24,7 @@\n use std::any::Any;\n use std::io::prelude::*;\n use std::io::{self, Cursor};\n+use std::ffi::OsStr;\n use std::fs::File;\n use std::path::Path;\n use std::sync::mpsc;\n@@ -73,6 +74,186 @@ pub trait TransCrate {\n     ) -> Result<(), CompileIncomplete>;\n }\n \n+#[macro_export]\n+macro_rules! hot_pluggable_trans_crate {\n+    (|$sess:ident| { $body:expr }) => {\n+        use $crate::__rustc::ty::maps::Providers;\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_new($sess: &Session) -> *mut Box<TransCrate> {\n+            let trans_crate = { $body };\n+            Box::into_raw(Box::new(trans_crate))\n+        }\n+\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_metadata_loader(\n+            trans_crate: *const Box<TransCrate>\n+        ) -> *mut Box<MetadataLoader> {\n+            let trans_crate = unsafe { &*trans_crate };\n+            let metadata_loader = trans_crate.metadata_loader();\n+            Box::into_raw(Box::new(metadata_loader))\n+        }\n+\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_provide(\n+            trans_crate: *const Box<TransCrate>,\n+            providers: *mut Providers\n+        ) {\n+            let trans_crate = unsafe { &*trans_crate };\n+            let providers = unsafe { &mut *providers };\n+            trans_crate.provide(providers);\n+        }\n+\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_provide_extern(\n+            trans_crate: *const Box<TransCrate>,\n+            providers: *mut Providers\n+        ) {\n+            let trans_crate = unsafe { &*trans_crate };\n+            let providers = unsafe { &mut *providers };\n+            trans_crate.provide_extern(providers);\n+        }\n+\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_trans_crate<'a, 'tcx: 'a>(\n+            trans_crate: *const Box<TransCrate>,\n+            tcx: *mut TyCtxt<'a, 'tcx, 'tcx>,\n+            rx: *mut mpsc::Receiver<Box<Any + Send>>\n+        ) -> *mut Box<Any> {\n+            let trans_crate = unsafe { &*trans_crate };\n+            let tcx = unsafe { *tcx };\n+            let rx = unsafe { *Box::from_raw(rx) };\n+            let trans = trans_crate.trans_crate(tcx, rx);\n+            Box::into_raw(Box::new(trans))\n+        }\n+\n+        #[no_mangle]\n+        pub extern \"C\" fn __rustc_backend_join_trans_and_link(\n+            trans_crate: *const Box<TransCrate>,\n+            trans: *mut Box<Any>,\n+            sess: *const Session,\n+            dep_graph: *const DepGraph,\n+            outputs: *const OutputFilenames\n+        ) -> *mut Result<(), CompileIncomplete> {\n+            let trans_crate = unsafe { &*trans_crate };\n+            let trans = unsafe { *Box::from_raw(trans) };\n+            let sess = unsafe { &*sess };\n+            let dep_graph = unsafe { &*dep_graph };\n+            let outputs = unsafe { &*outputs };\n+            let result = trans_crate.join_trans_and_link(trans, sess, dep_graph, outputs);\n+            Box::into_raw(Box::new(result))\n+        }\n+    }\n+}\n+\n+pub struct ExternTransCrate {\n+    lib: ::libloading::Library,\n+    backend: Box<Box<TransCrate>>,\n+}\n+\n+macro_rules! get_symbol {\n+    (($lib:expr) . $name:ident : $type:ty) => {\n+        let $name: ::libloading::Symbol<$type> = $lib.get(stringify!($name).as_bytes()).unwrap();\n+    }\n+}\n+\n+impl ExternTransCrate {\n+    pub fn new<P: AsRef<OsStr>>(sess: &Session, filename: P) -> Box<TransCrate> {\n+        use libloading::*;\n+        let filename = filename.as_ref();\n+        match Library::new(filename) {\n+            Ok(lib) => {\n+                let backend = unsafe {\n+                    get_symbol!((lib).__rustc_backend_new:\n+                        unsafe extern \"C\" fn(&Session) -> *mut Box<TransCrate>);\n+                    Box::from_raw(__rustc_backend_new(sess))\n+                };\n+                Box::new(ExternTransCrate {\n+                    lib,\n+                    backend,\n+                })\n+            }\n+            Err(err) => {\n+                sess.fatal(&format!(\"Couldnt load codegen backend {:?}: {:?}\", filename, err));\n+            }\n+        }\n+    }\n+}\n+\n+impl TransCrate for ExternTransCrate {\n+    fn metadata_loader(&self) -> Box<MetadataLoader> {\n+        unsafe {\n+            get_symbol!((self.lib).__rustc_backend_metadata_loader:\n+                unsafe extern \"C\" fn(*const Box<TransCrate>) -> *mut Box<MetadataLoader>);\n+            *Box::from_raw(__rustc_backend_metadata_loader(self.backend.as_ref() as *const _))\n+        }\n+    }\n+\n+    fn provide(&self, providers: &mut Providers) {\n+        unsafe {\n+            get_symbol!((self.lib).__rustc_backend_provide:\n+                unsafe extern \"C\" fn(*const Box<TransCrate>, *mut Providers));\n+            __rustc_backend_provide(self.backend.as_ref() as *const _, providers as *mut _);\n+        }\n+    }\n+\n+    fn provide_extern(&self, providers: &mut Providers) {\n+        unsafe {\n+            get_symbol!((self.lib).__rustc_backend_provide_extern:\n+                unsafe extern \"C\" fn(*const Box<TransCrate>, *mut Providers));\n+            __rustc_backend_provide_extern(self.backend.as_ref() as *const _, providers as *mut _);\n+        }\n+    }\n+\n+    fn trans_crate<'a, 'tcx>(\n+        &self,\n+        mut tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        rx: mpsc::Receiver<Box<Any + Send>>\n+    ) -> Box<Any> {\n+        unsafe {\n+            get_symbol!((self.lib).__rustc_backend_trans_crate:\n+                unsafe extern \"C\" fn(\n+                    *const Box<TransCrate>,\n+                    *mut TyCtxt<'a, 'tcx, 'tcx>,\n+                    *mut mpsc::Receiver<Box<Any + Send>>\n+                ) -> *mut Box<Any>\n+            );\n+            let rx = Box::new(rx);\n+            *Box::from_raw(__rustc_backend_trans_crate(\n+                self.backend.as_ref() as *const _,\n+                &mut tcx as *mut _,\n+                Box::into_raw(rx) as *mut _\n+            ))\n+        }\n+    }\n+\n+    fn join_trans_and_link(\n+        &self,\n+        trans: Box<Any>,\n+        sess: &Session,\n+        dep_graph: &DepGraph,\n+        outputs: &OutputFilenames,\n+    ) -> Result<(), CompileIncomplete> {\n+        unsafe {\n+            get_symbol!((self.lib).__rustc_backend_join_trans_and_link:\n+                unsafe extern \"C\" fn(\n+                    *const Box<TransCrate>,\n+                    *mut Box<Any>,\n+                    *const Session,\n+                    *const DepGraph,\n+                    *const OutputFilenames\n+                ) -> *mut Result<(), CompileIncomplete>\n+            );\n+            *Box::from_raw(__rustc_backend_join_trans_and_link(\n+                self.backend.as_ref() as *const _,\n+                Box::into_raw(Box::new(trans)) as *mut _,\n+                sess as *const _,\n+                dep_graph as *const _,\n+                outputs as *const _\n+            ))\n+        }\n+    }\n+}\n+\n pub struct DummyTransCrate;\n \n impl TransCrate for DummyTransCrate {"}]}