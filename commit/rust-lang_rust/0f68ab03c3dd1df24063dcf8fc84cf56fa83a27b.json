{"sha": "0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjhhYjAzYzNkZDFkZjI0MDYzZGNmOGZjODRjZjU2ZmE4M2EyN2I=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T01:21:21Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T21:18:57Z"}, "message": "separate out an arena for HIR", "tree": {"sha": "7c3570d107f1e16323625989f9c64017fdc350b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c3570d107f1e16323625989f9c64017fdc350b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "html_url": "https://github.com/rust-lang/rust/commit/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c28d68bc36fb5fc34fda59808b656f17106991d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c28d68bc36fb5fc34fda59808b656f17106991d", "html_url": "https://github.com/rust-lang/rust/commit/4c28d68bc36fb5fc34fda59808b656f17106991d"}], "stats": {"total": 107, "additions": 66, "deletions": 41}, "files": [{"sha": "e256ccfd44639b35ff90c09c435ec50329098efa", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -3477,6 +3477,7 @@ dependencies = [\n name = \"rustc_ast_lowering\"\n version = \"0.0.0\"\n dependencies = [\n+ \"arena\",\n  \"log\",\n  \"rustc\",\n  \"rustc_ast\","}, {"sha": "0f0bd617f439c6cd8491b57addf70682e2582936", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -624,7 +624,8 @@ macro_rules! declare_arena {\n         }\n \n         $(\n-            impl ArenaAllocatable for $ty {}\n+            #[allow(unused_lifetimes)]\n+            impl<$tcx> ArenaAllocatable for $ty {}\n             unsafe impl<$tcx> ArenaField<$tcx> for $ty {\n                 #[inline]\n                 fn arena<'a>(_arena: &'a Arena<$tcx>) -> Option<&'a $crate::TypedArena<Self>> {\n@@ -653,7 +654,7 @@ macro_rules! declare_arena {\n                 self.dropless.alloc_slice(value)\n             }\n \n-            pub fn alloc_from_iter<T: ArenaAllocatable>(\n+            pub fn alloc_from_iter<'a, T: ArenaAllocatable>(\n                 &'a self,\n                 iter: impl ::std::iter::IntoIterator<Item = T>,\n             ) -> &'a mut [T] {"}, {"sha": "c4214a0f5a2f800ea38eab698be885480b4a1efb", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -120,40 +120,6 @@ macro_rules! arena_types {\n             // Interned types\n             [] tys: rustc::ty::TyS<$tcx>,\n \n-            // HIR types\n-            [few] hir_krate: rustc_hir::Crate<$tcx>,\n-            [] arm: rustc_hir::Arm<$tcx>,\n-            [] attribute: rustc_ast::ast::Attribute,\n-            [] block: rustc_hir::Block<$tcx>,\n-            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n-            [few] global_asm: rustc_hir::GlobalAsm,\n-            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n-            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n-            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n-            [] generic_param: rustc_hir::GenericParam<$tcx>,\n-            [] expr: rustc_hir::Expr<$tcx>,\n-            [] field: rustc_hir::Field<$tcx>,\n-            [] field_pat: rustc_hir::FieldPat<$tcx>,\n-            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n-            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n-            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n-            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n-            [] local: rustc_hir::Local<$tcx>,\n-            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n-            [] param: rustc_hir::Param<$tcx>,\n-            [] pat: rustc_hir::Pat<$tcx>,\n-            [] path: rustc_hir::Path<$tcx>,\n-            [] path_segment: rustc_hir::PathSegment<$tcx>,\n-            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n-            [] qpath: rustc_hir::QPath<$tcx>,\n-            [] stmt: rustc_hir::Stmt<$tcx>,\n-            [] struct_field: rustc_hir::StructField<$tcx>,\n-            [] trait_item_ref: rustc_hir::TraitItemRef,\n-            [] ty: rustc_hir::Ty<$tcx>,\n-            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n-            [] variant: rustc_hir::Variant<$tcx>,\n-            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n-\n             // HIR query types\n             [few] indexed_hir: rustc::hir::map::IndexedHir<$tcx>,\n             [few] hir_definitions: rustc::hir::map::definitions::Definitions,"}, {"sha": "cbbc937ed7d31427975605919f0e3459ca1a7494", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -396,6 +396,7 @@ macro_rules! implement_ty_decoder {\n             // the caller to pick any lifetime for `'tcx`, including `'static`,\n             // by using the unspecialized proxies to them.\n \n+            rustc_hir::arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n             arena_types!(impl_arena_allocatable_decoders, [$DecoderName [$($typaram),*]], 'tcx);\n \n             impl<$($typaram),*> SpecializedDecoder<CrateNum>"}, {"sha": "75547ccb814cbd9c4d7832312141f9f81aab7399", "filename": "src/librustc_ast_lowering/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2FCargo.toml?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -10,6 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n+arena = { path = \"../libarena\" }\n log = { version = \"0.4\", features = [\"release_max_level_info\", \"std\"] }\n rustc = { path = \"../librustc\" }\n rustc_ast_pretty = { path = \"../librustc_ast_pretty\" }"}, {"sha": "bf78d6e4aecf78f764eaad49eeb061102fa96676", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -1,7 +1,7 @@\n use super::{AnonymousLifetimeMode, LoweringContext, ParamMode};\n use super::{ImplTraitContext, ImplTraitPosition, ImplTraitTypeIdVisitor};\n+use crate::Arena;\n \n-use rustc::arena::Arena;\n use rustc::bug;\n use rustc_ast::ast::*;\n use rustc_ast::attr;"}, {"sha": "c541ddb7398cdb36bcf0fbb0dc0dd959e0c8d81c", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -32,9 +32,10 @@\n \n #![feature(array_value_iter)]\n #![feature(crate_visibility_modifier)]\n+#![feature(marker_trait_attr)]\n+#![feature(specialization)]\n #![recursion_limit = \"256\"]\n \n-use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n use rustc::{bug, span_bug};\n@@ -85,6 +86,8 @@ mod path;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n+rustc_hir::arena_types!(::arena::declare_arena, [], 'tcx);\n+\n struct LoweringContext<'a, 'hir: 'a> {\n     crate_root: Option<Symbol>,\n "}, {"sha": "978565a4c39d740a88103f0dde93286cfd94e00c", "filename": "src/librustc_hir/arena.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -0,0 +1,49 @@\n+/// This declares a list of types which can be allocated by `Arena`.\n+///\n+/// The `few` modifier will cause allocation to use the shared arena and recording the destructor.\n+/// This is faster and more memory efficient if there's only a few allocations of the type.\n+/// Leaving `few` out will cause the type to get its own dedicated `TypedArena` which is\n+/// faster and more memory efficient if there is lots of allocations.\n+///\n+/// Specifying the `decode` modifier will add decode impls for &T and &[T] where T is the type\n+/// listed. These impls will appear in the implement_ty_decoder! macro.\n+#[macro_export]\n+macro_rules! arena_types {\n+    ($macro:path, $args:tt, $tcx:lifetime) => (\n+        $macro!($args, [\n+            // HIR types\n+            [few] hir_krate: rustc_hir::Crate<$tcx>,\n+            [] arm: rustc_hir::Arm<$tcx>,\n+            [] attribute: rustc_ast::ast::Attribute,\n+            [] block: rustc_hir::Block<$tcx>,\n+            [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,\n+            [few] global_asm: rustc_hir::GlobalAsm,\n+            [] generic_arg: rustc_hir::GenericArg<$tcx>,\n+            [] generic_args: rustc_hir::GenericArgs<$tcx>,\n+            [] generic_bound: rustc_hir::GenericBound<$tcx>,\n+            [] generic_param: rustc_hir::GenericParam<$tcx>,\n+            [] expr: rustc_hir::Expr<$tcx>,\n+            [] field: rustc_hir::Field<$tcx>,\n+            [] field_pat: rustc_hir::FieldPat<$tcx>,\n+            [] fn_decl: rustc_hir::FnDecl<$tcx>,\n+            [] foreign_item: rustc_hir::ForeignItem<$tcx>,\n+            [] impl_item_ref: rustc_hir::ImplItemRef<$tcx>,\n+            [] inline_asm: rustc_hir::InlineAsm<$tcx>,\n+            [] local: rustc_hir::Local<$tcx>,\n+            [few] macro_def: rustc_hir::MacroDef<$tcx>,\n+            [] param: rustc_hir::Param<$tcx>,\n+            [] pat: rustc_hir::Pat<$tcx>,\n+            [] path: rustc_hir::Path<$tcx>,\n+            [] path_segment: rustc_hir::PathSegment<$tcx>,\n+            [] poly_trait_ref: rustc_hir::PolyTraitRef<$tcx>,\n+            [] qpath: rustc_hir::QPath<$tcx>,\n+            [] stmt: rustc_hir::Stmt<$tcx>,\n+            [] struct_field: rustc_hir::StructField<$tcx>,\n+            [] trait_item_ref: rustc_hir::TraitItemRef,\n+            [] ty: rustc_hir::Ty<$tcx>,\n+            [] type_binding: rustc_hir::TypeBinding<$tcx>,\n+            [] variant: rustc_hir::Variant<$tcx>,\n+            [] where_predicate: rustc_hir::WherePredicate<$tcx>,\n+        ], $tcx);\n+    )\n+}"}, {"sha": "826d8df8374d9e73e92410802999d1f18cbe1745", "filename": "src/librustc_hir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_hir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_hir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Flib.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -13,6 +13,7 @@\n #[macro_use]\n extern crate rustc_data_structures;\n \n+mod arena;\n pub mod def;\n pub use rustc_span::def_id;\n mod hir;"}, {"sha": "c331b1e3d1e5539c4c78a96ccd3ed8a2b42f25e7", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -437,7 +437,7 @@ pub fn lower_to_hir<'res, 'tcx>(\n     resolver: &'res mut Resolver<'_>,\n     dep_graph: &'res DepGraph,\n     krate: &'res ast::Crate,\n-    arena: &'tcx Arena<'tcx>,\n+    arena: &'tcx rustc_ast_lowering::Arena<'tcx>,\n ) -> Crate<'tcx> {\n     // Lower AST to HIR.\n     let hir_crate = rustc_ast_lowering::lower_crate("}, {"sha": "b0eeb57173fa33532bde0e5cec707bee68d7b7ef", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=0f68ab03c3dd1df24063dcf8fc84cf56fa83a27b", "patch": "@@ -68,6 +68,7 @@ pub struct Queries<'tcx> {\n     gcx: Once<GlobalCtxt<'tcx>>,\n \n     arena: WorkerLocal<Arena<'tcx>>,\n+    hir_arena: WorkerLocal<rustc_ast_lowering::Arena<'tcx>>,\n \n     dep_graph_future: Query<Option<DepGraphFuture>>,\n     parse: Query<ast::Crate>,\n@@ -87,6 +88,7 @@ impl<'tcx> Queries<'tcx> {\n             compiler,\n             gcx: Once::new(),\n             arena: WorkerLocal::new(|_| Arena::default()),\n+            hir_arena: WorkerLocal::new(|_| rustc_ast_lowering::Arena::default()),\n             dep_graph_future: Default::default(),\n             parse: Default::default(),\n             crate_name: Default::default(),\n@@ -218,10 +220,10 @@ impl<'tcx> Queries<'tcx> {\n                     resolver,\n                     &*self.dep_graph()?.peek(),\n                     &krate,\n-                    &self.arena,\n+                    &self.hir_arena,\n                 ))\n             })?;\n-            let hir = self.arena.alloc(hir);\n+            let hir = self.hir_arena.alloc(hir);\n             Ok((hir, Steal::new(BoxedResolver::to_resolver_outputs(resolver))))\n         })\n     }"}]}