{"sha": "3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NTRhYzY4YmU0ZjFkOGU5YzNjNGU0NWYzMjgyZGQ3OGRjNGJkNzM=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-08T06:02:48Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-06-08T06:21:33Z"}, "message": "Add visit_attribute to Visitor, use it for unused_attribute\n\nThe lint was missing a *lot* of cases previously.", "tree": {"sha": "4fc61560edf0351065a455b08311afacdf3366b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc61560edf0351065a455b08311afacdf3366b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "html_url": "https://github.com/rust-lang/rust/commit/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbd448a27c37dd95a9551c45606f865bff411a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbd448a27c37dd95a9551c45606f865bff411a47", "html_url": "https://github.com/rust-lang/rust/commit/bbd448a27c37dd95a9551c45606f865bff411a47"}], "stats": {"total": 151, "additions": 120, "deletions": 31}, "files": [{"sha": "748c29cd92c42d56ffc1d2dfbcba3a1d9d46f040", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "patch": "@@ -187,11 +187,11 @@ impl<'a> LanguageItemCollector<'a> {\n \n pub fn extract(attrs: &[ast::Attribute]) -> Option<InternedString> {\n     for attribute in attrs.iter() {\n-        match attribute.name_str_pair() {\n-            Some((ref key, ref value)) if key.equiv(&(\"lang\")) => {\n-                return Some((*value).clone());\n+        match attribute.value_str() {\n+            Some(ref value) if attribute.check_name(\"lang\") => {\n+                return Some(value.clone());\n             }\n-            Some(..) | None => {}\n+            _ => {}\n         }\n     }\n "}, {"sha": "f9ee65a2c499abf6c52fb40e1ecdbdb0af476f65", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "patch": "@@ -1183,7 +1183,7 @@ fn check_attrs_usage(cx: &Context, attrs: &[ast::Attribute]) {\n     }\n }\n \n-fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n+fn check_unused_attribute(cx: &Context, attr: &ast::Attribute) {\n     static ATTRIBUTE_WHITELIST: &'static [&'static str] = &'static [\n         // FIXME: #14408 whitelist docs since rustdoc looks at them\n         \"doc\",\n@@ -1218,17 +1218,16 @@ fn check_unused_attribute(cx: &Context, attrs: &[ast::Attribute]) {\n         \"stable\",\n         \"unstable\",\n     ];\n-    for attr in attrs.iter() {\n-        for &name in ATTRIBUTE_WHITELIST.iter() {\n-            if attr.check_name(name) {\n-                break;\n-            }\n-        }\n \n-        if !attr::is_used(attr) {\n-            cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");\n+    for &name in ATTRIBUTE_WHITELIST.iter() {\n+        if attr.check_name(name) {\n+            break;\n         }\n     }\n+\n+    if !attr::is_used(attr) {\n+        cx.span_lint(UnusedAttribute, attr.span, \"unused attribute\");\n+    }\n }\n \n fn check_heap_expr(cx: &Context, e: &ast::Expr) {\n@@ -1836,7 +1835,6 @@ impl<'a> Visitor<()> for Context<'a> {\n             check_heap_item(cx, it);\n             check_missing_doc_item(cx, it);\n             check_attrs_usage(cx, it.attrs.as_slice());\n-            check_unused_attribute(cx, it.attrs.as_slice());\n             check_raw_ptr_deriving(cx, it);\n \n             cx.visit_ids(|v| v.visit_item(it, ()));\n@@ -2003,6 +2001,10 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     // FIXME(#10894) should continue recursing\n     fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {}\n+\n+    fn visit_attribute(&mut self, attr: &ast::Attribute, _: ()) {\n+        check_unused_attribute(self, attr);\n+    }\n }\n \n impl<'a> IdVisitingOperation for Context<'a> {\n@@ -2054,7 +2056,6 @@ pub fn check_crate(tcx: &ty::ctxt,\n         check_crate_attrs_usage(cx, krate.attrs.as_slice());\n         // since the root module isn't visited as an item (because it isn't an item), warn for it\n         // here.\n-        check_unused_attribute(cx, krate.attrs.as_slice());\n         check_missing_doc_attrs(cx,\n                                 None,\n                                 krate.attrs.as_slice(),"}, {"sha": "906f0c16f396478e0b904bc496962bf048a1c03d", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "patch": "@@ -128,6 +128,7 @@ pub trait Visitor<E: Clone> {\n     fn visit_path(&mut self, path: &Path, _id: ast::NodeId, e: E) {\n         walk_path(self, path, e)\n     }\n+    fn visit_attribute(&mut self, _attr: &Attribute, _e: E) {}\n }\n \n pub fn walk_inlined_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -142,7 +143,10 @@ pub fn walk_inlined_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n \n \n pub fn walk_crate<E: Clone, V: Visitor<E>>(visitor: &mut V, krate: &Crate, env: E) {\n-    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID, env)\n+    visitor.visit_mod(&krate.module, krate.span, CRATE_NODE_ID, env.clone());\n+    for attr in krate.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_mod<E: Clone, V: Visitor<E>>(visitor: &mut V, module: &Mod, env: E) {\n@@ -158,7 +162,7 @@ pub fn walk_mod<E: Clone, V: Visitor<E>>(visitor: &mut V, module: &Mod, env: E)\n pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, env: E) {\n     match vi.node {\n         ViewItemExternCrate(name, _, _) => {\n-            visitor.visit_ident(vi.span, name, env)\n+            visitor.visit_ident(vi.span, name, env.clone())\n         }\n         ViewItemUse(ref vp) => {\n             match vp.node {\n@@ -178,6 +182,9 @@ pub fn walk_view_item<E: Clone, V: Visitor<E>>(visitor: &mut V, vi: &ViewItem, e\n             }\n         }\n     }\n+    for attr in vi.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_local<E: Clone, V: Visitor<E>>(visitor: &mut V, local: &Local, env: E) {\n@@ -213,18 +220,18 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n     match item.node {\n         ItemStatic(typ, _, expr) => {\n             visitor.visit_ty(typ, env.clone());\n-            visitor.visit_expr(expr, env);\n+            visitor.visit_expr(expr, env.clone());\n         }\n         ItemFn(declaration, fn_style, abi, ref generics, body) => {\n             visitor.visit_fn(&FkItemFn(item.ident, generics, fn_style, abi),\n                              declaration,\n                              body,\n                              item.span,\n                              item.id,\n-                             env)\n+                             env.clone())\n         }\n         ItemMod(ref module) => {\n-            visitor.visit_mod(module, item.span, item.id, env)\n+            visitor.visit_mod(module, item.span, item.id, env.clone())\n         }\n         ItemForeignMod(ref foreign_module) => {\n             for view_item in foreign_module.view_items.iter() {\n@@ -236,11 +243,11 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n         }\n         ItemTy(typ, ref type_parameters) => {\n             visitor.visit_ty(typ, env.clone());\n-            visitor.visit_generics(type_parameters, env)\n+            visitor.visit_generics(type_parameters, env.clone())\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters, env.clone());\n-            walk_enum_def(visitor, enum_definition, type_parameters, env)\n+            walk_enum_def(visitor, enum_definition, type_parameters, env.clone())\n         }\n         ItemImpl(ref type_parameters,\n                  ref trait_reference,\n@@ -263,7 +270,7 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n                                      item.ident,\n                                      generics,\n                                      item.id,\n-                                     env)\n+                                     env.clone())\n         }\n         ItemTrait(ref generics, _, ref trait_paths, ref methods) => {\n             visitor.visit_generics(generics, env.clone());\n@@ -276,7 +283,10 @@ pub fn walk_item<E: Clone, V: Visitor<E>>(visitor: &mut V, item: &Item, env: E)\n                 visitor.visit_trait_method(method, env.clone())\n             }\n         }\n-        ItemMac(ref macro) => visitor.visit_mac(macro, env),\n+        ItemMac(ref macro) => visitor.visit_mac(macro, env.clone()),\n+    }\n+    for attr in item.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n     }\n }\n \n@@ -310,9 +320,12 @@ pub fn walk_variant<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         }\n     }\n     match variant.node.disr_expr {\n-        Some(expr) => visitor.visit_expr(expr, env),\n+        Some(expr) => visitor.visit_expr(expr, env.clone()),\n         None => ()\n     }\n+    for attr in variant.node.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn skip_ty<E, V: Visitor<E>>(_: &mut V, _: &Ty, _: E) {\n@@ -469,9 +482,13 @@ pub fn walk_foreign_item<E: Clone, V: Visitor<E>>(visitor: &mut V,\n     match foreign_item.node {\n         ForeignItemFn(function_declaration, ref generics) => {\n             walk_fn_decl(visitor, function_declaration, env.clone());\n-            visitor.visit_generics(generics, env)\n+            visitor.visit_generics(generics, env.clone())\n         }\n-        ForeignItemStatic(typ, _) => visitor.visit_ty(typ, env),\n+        ForeignItemStatic(typ, _) => visitor.visit_ty(typ, env.clone()),\n+    }\n+\n+    for attr in foreign_item.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n     }\n }\n \n@@ -525,7 +542,10 @@ pub fn walk_method_helper<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                      method.body,\n                      method.span,\n                      method.id,\n-                     env)\n+                     env.clone());\n+    for attr in method.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_fn<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -560,7 +580,10 @@ pub fn walk_ty_method<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         visitor.visit_ty(argument_type.ty, env.clone())\n     }\n     visitor.visit_generics(&method_type.generics, env.clone());\n-    visitor.visit_ty(method_type.decl.output, env);\n+    visitor.visit_ty(method_type.decl.output, env.clone());\n+    for attr in method_type.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_trait_method<E: Clone, V: Visitor<E>>(visitor: &mut V,\n@@ -596,7 +619,11 @@ pub fn walk_struct_field<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         _ => {}\n     }\n \n-    visitor.visit_ty(struct_field.node.ty, env)\n+    visitor.visit_ty(struct_field.node.ty, env.clone());\n+\n+    for attr in struct_field.node.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }\n \n pub fn walk_block<E: Clone, V: Visitor<E>>(visitor: &mut V, block: &Block, env: E) {\n@@ -784,5 +811,8 @@ pub fn walk_arm<E: Clone, V: Visitor<E>>(visitor: &mut V, arm: &Arm, env: E) {\n         visitor.visit_pat(*pattern, env.clone())\n     }\n     walk_expr_opt(visitor, arm.guard, env.clone());\n-    visitor.visit_expr(arm.body, env)\n+    visitor.visit_expr(arm.body, env.clone());\n+    for attr in arm.attrs.iter() {\n+        visitor.visit_attribute(attr, env.clone());\n+    }\n }"}, {"sha": "750dcdf2c5f20de880abc6f15629e3366179f7de", "filename": "src/test/compile-fail/unused-attr.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73/src%2Ftest%2Fcompile-fail%2Funused-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-attr.rs?ref=3654ac68be4f1d8e9c3c4e45f3282dd78dc4bd73", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#![deny(unused_attribute)]\n+#![allow(attribute_usage, dead_code, unused_imports)]\n+\n+#![foo] //~ ERROR unused attribute\n+\n+#[foo] //~ ERROR unused attribute\n+extern crate std;\n+\n+#[foo] //~ ERROR unused attribute\n+use std::collections;\n+\n+#[foo] //~ ERROR unused attribute\n+extern \"C\" {\n+    #[foo] //~ ERROR unused attribute\n+    fn foo();\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+mod foo {\n+    #[foo] //~ ERROR unused attribute\n+    pub enum Foo {\n+        #[foo] //~ ERROR unused attribute\n+        Bar,\n+    }\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+fn bar(f: foo::Foo) {\n+    match f {\n+        #[foo] //~ ERROR unused attribute\n+        foo::Bar => {}\n+    }\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+struct Foo {\n+    #[foo] //~ ERROR unused attribute\n+    a: int\n+}\n+\n+#[foo] //~ ERROR unused attribute\n+trait Baz {\n+    #[foo] //~ ERROR unused attribute\n+    fn blah();\n+    #[foo] //~ ERROR unused attribute\n+    fn blah2() {}\n+}\n+\n+fn main() {}"}]}