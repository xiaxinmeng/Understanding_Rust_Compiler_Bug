{"sha": "65a16c000720f286c91747b91e6d9caa7b1bb63c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YTE2YzAwMDcyMGYyODZjOTE3NDdiOTFlNmQ5Y2FhN2IxYmI2M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T23:26:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-21T23:26:32Z"}, "message": "Auto merge of #49283 - varkor:combining-chars-escape_debug, r=SimonSapin\n\nEscape combining characters in char::Debug\n\nAlthough combining characters are technically printable, they make little sense to print on their own with `Debug`: it'd be better to escape them like non-printable characters.\n\nThis is a breaking change, but I imagine the fact `escape_debug` is rare and almost certainly primarily used for debugging that this is an acceptable change.\nResolves #41922.\n\nr? @alexcrichton\ncc @clarcharr", "tree": {"sha": "dac2c0cbe77971b03cd52bc44f4d20ae9f0b7bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dac2c0cbe77971b03cd52bc44f4d20ae9f0b7bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65a16c000720f286c91747b91e6d9caa7b1bb63c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65a16c000720f286c91747b91e6d9caa7b1bb63c", "html_url": "https://github.com/rust-lang/rust/commit/65a16c000720f286c91747b91e6d9caa7b1bb63c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65a16c000720f286c91747b91e6d9caa7b1bb63c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8", "html_url": "https://github.com/rust-lang/rust/commit/cb20f68d0f9e1c1bf49df22991b5a0d1a43146e8"}, {"sha": "b6539372e9d4dddb1c9f8c894f23bd4c3e8d9489", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6539372e9d4dddb1c9f8c894f23bd4c3e8d9489", "html_url": "https://github.com/rust-lang/rust/commit/b6539372e9d4dddb1c9f8c894f23bd4c3e8d9489"}], "stats": {"total": 230, "additions": 197, "deletions": 33}, "files": [{"sha": "2f65ee3e777a33cd5c807b976af4605817f300fd", "filename": ".gitignore", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -74,13 +74,13 @@ __pycache__/\n /obj/\n /rt/\n /rustllvm/\n-/src/libstd_unicode/DerivedCoreProperties.txt\n-/src/libstd_unicode/DerivedNormalizationProps.txt\n-/src/libstd_unicode/PropList.txt\n-/src/libstd_unicode/ReadMe.txt\n-/src/libstd_unicode/Scripts.txt\n-/src/libstd_unicode/SpecialCasing.txt\n-/src/libstd_unicode/UnicodeData.txt\n+/src/libcore/unicode/DerivedCoreProperties.txt\n+/src/libcore/unicode/DerivedNormalizationProps.txt\n+/src/libcore/unicode/PropList.txt\n+/src/libcore/unicode/ReadMe.txt\n+/src/libcore/unicode/Scripts.txt\n+/src/libcore/unicode/SpecialCasing.txt\n+/src/libcore/unicode/UnicodeData.txt\n /stage[0-9]+/\n /target\n target/"}, {"sha": "823e56b64e398b83030e13550104aef2935c45db", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -372,12 +372,21 @@ impl str {\n \n     /// Escapes each char in `s` with [`char::escape_debug`].\n     ///\n+    /// Note: only extended grapheme codepoints that begin the string will be\n+    /// escaped.\n+    ///\n     /// [`char::escape_debug`]: primitive.char.html#method.escape_debug\n     #[unstable(feature = \"str_escape\",\n                reason = \"return type may change to be an iterator\",\n                issue = \"27791\")]\n     pub fn escape_debug(&self) -> String {\n-        self.chars().flat_map(|c| c.escape_debug()).collect()\n+        let mut string = String::with_capacity(self.len());\n+        let mut chars = self.chars();\n+        if let Some(first) = chars.next() {\n+            string.extend(first.escape_debug_ext(true))\n+        }\n+        string.extend(chars.flat_map(|c| c.escape_debug_ext(false)));\n+        string\n     }\n \n     /// Escapes each char in `s` with [`char::escape_default`]."}, {"sha": "d11bf5dc3e9a65f9532f0984600a35748c831d9c", "filename": "src/liballoc/tests/str.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Fliballoc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Fliballoc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstr.rs?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -989,6 +989,12 @@ fn test_escape_unicode() {\n \n #[test]\n fn test_escape_debug() {\n+    // Note that there are subtleties with the number of backslashes\n+    // on the left- and right-hand sides. In particular, Unicode code points\n+    // are usually escaped with two backslashes on the right-hand side, as\n+    // they are escaped. However, when the character is unescaped (e.g. for\n+    // printable characters), only a single backslash appears (as the character\n+    // itself appears in the debug string).\n     assert_eq!(\"abc\".escape_debug(), \"abc\");\n     assert_eq!(\"a c\".escape_debug(), \"a c\");\n     assert_eq!(\"\u00e9\u00e8\u00ea\".escape_debug(), \"\u00e9\u00e8\u00ea\");\n@@ -999,6 +1005,7 @@ fn test_escape_debug() {\n     assert_eq!(\"\\u{10000}\\u{10ffff}\".escape_debug(), \"\\u{10000}\\\\u{10ffff}\");\n     assert_eq!(\"ab\\u{200b}\".escape_debug(), \"ab\\\\u{200b}\");\n     assert_eq!(\"\\u{10d4ea}\\r\".escape_debug(), \"\\\\u{10d4ea}\\\\r\");\n+    assert_eq!(\"\\u{301}a\\u{301}b\u00e9\\u{e000}\".escape_debug(), \"\\\\u{301}a\\u{301}b\u00e9\\\\u{e000}\");\n }\n \n #[test]"}, {"sha": "f6b201fe06dea429e44b9b6e8006bb5b500db179", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 31, "deletions": 9, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -187,6 +187,27 @@ impl char {\n         }\n     }\n \n+    /// An extended version of `escape_debug` that optionally permits escaping\n+    /// Extended Grapheme codepoints. This allows us to format characters like\n+    /// nonspacing marks better when they're at the start of a string.\n+    #[doc(hidden)]\n+    #[unstable(feature = \"str_internals\", issue = \"0\")]\n+    #[inline]\n+    pub fn escape_debug_ext(self, escape_grapheme_extended: bool) -> EscapeDebug {\n+        let init_state = match self {\n+            '\\t' => EscapeDefaultState::Backslash('t'),\n+            '\\r' => EscapeDefaultState::Backslash('r'),\n+            '\\n' => EscapeDefaultState::Backslash('n'),\n+            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n+            _ if escape_grapheme_extended && self.is_grapheme_extended() => {\n+                EscapeDefaultState::Unicode(self.escape_unicode())\n+            }\n+            _ if is_printable(self) => EscapeDefaultState::Char(self),\n+            _ => EscapeDefaultState::Unicode(self.escape_unicode()),\n+        };\n+        EscapeDebug(EscapeDefault { state: init_state })\n+    }\n+\n     /// Returns an iterator that yields the literal escape code of a character\n     /// as `char`s.\n     ///\n@@ -224,15 +245,7 @@ impl char {\n     #[stable(feature = \"char_escape_debug\", since = \"1.20.0\")]\n     #[inline]\n     pub fn escape_debug(self) -> EscapeDebug {\n-        let init_state = match self {\n-            '\\t' => EscapeDefaultState::Backslash('t'),\n-            '\\r' => EscapeDefaultState::Backslash('r'),\n-            '\\n' => EscapeDefaultState::Backslash('n'),\n-            '\\\\' | '\\'' | '\"' => EscapeDefaultState::Backslash(self),\n-            c if is_printable(c) => EscapeDefaultState::Char(c),\n-            c => EscapeDefaultState::Unicode(c.escape_unicode()),\n-        };\n-        EscapeDebug(EscapeDefault { state: init_state })\n+        self.escape_debug_ext(true)\n     }\n \n     /// Returns an iterator that yields the literal escape code of a character\n@@ -692,6 +705,15 @@ impl char {\n         general_category::Cc(self)\n     }\n \n+    /// Returns true if this `char` is an extended grapheme character, and false otherwise.\n+    ///\n+    /// 'Extended grapheme character' is defined in terms of the Unicode Shaping and Rendering\n+    /// Category `Grapheme_Extend`.\n+    #[inline]\n+    pub(crate) fn is_grapheme_extended(self) -> bool {\n+        derived_property::Grapheme_Extend(self)\n+    }\n+\n     /// Returns true if this `char` is numeric, and false otherwise.\n     ///\n     /// 'Numeric'-ness is defined in terms of the Unicode General Categories"}, {"sha": "d2a9ed75be658abd1de4a8b2920700ede283ecb6", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -181,6 +181,7 @@ fn test_escape_debug() {\n     assert_eq!(string('\\u{ff}'), \"\\u{ff}\");\n     assert_eq!(string('\\u{11b}'), \"\\u{11b}\");\n     assert_eq!(string('\\u{1d4b6}'), \"\\u{1d4b6}\");\n+    assert_eq!(string('\\u{301}'), \"\\\\u{301}\");     // combining character\n     assert_eq!(string('\\u{200b}'),\"\\\\u{200b}\");      // zero width space\n     assert_eq!(string('\\u{e000}'), \"\\\\u{e000}\");     // private use 1\n     assert_eq!(string('\\u{100000}'), \"\\\\u{100000}\"); // private use 2"}, {"sha": "e3d27474b9a7185ccbc43aa6b462f4a48fd7151b", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 122, "deletions": 1, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -549,6 +549,127 @@ pub mod derived_property {\n         Cased_table.lookup(c)\n     }\n \n+    pub const Grapheme_Extend_table: &super::BoolTrie = &super::BoolTrie {\n+        r1: [\n+            0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n+            0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n+            0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,\n+            0xffffffffffffffff, 0x0000ffffffffffff, 0x0000000000000000, 0x0000000000000000,\n+            0x0000000000000000, 0x0000000000000000, 0x00000000000003f8, 0x0000000000000000,\n+            0x0000000000000000, 0x0000000000000000, 0xbffffffffffe0000, 0x00000000000000b6,\n+            0x0000000007ff0000, 0x00010000fffff800, 0x0000000000000000, 0x00003d9f9fc00000,\n+            0xffff000000020000, 0x00000000000007ff, 0x0001ffc000000000, 0x000ff80000000000\n+        ],\n+        r2: [\n+            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 7, 2, 20, 21,\n+            22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 32, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 33, 34, 35, 36, 37, 2, 38, 2, 39, 2, 2, 2, 40, 41, 42, 2, 43,\n+            44, 45, 46, 47, 2, 2, 48, 2, 2, 2, 49, 2, 2, 2, 2, 2, 2, 2, 2, 50, 2, 2, 51, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 52, 2, 53, 2, 54, 2, 2, 2, 2, 2, 2, 2, 2, 55,\n+            2, 56, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 57, 58, 59, 2, 2, 2, 2, 60, 2, 2, 61, 62, 63, 64, 65, 66, 67,\n+            68, 69, 2, 2, 2, 70, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 71, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 72, 2, 2, 2, 2, 2, 58, 2\n+        ],\n+        r3: &[\n+            0x00003eeffbc00000, 0x000000000e000000, 0x0000000000000000, 0xfffffffbfff00000,\n+            0x1400000000000007, 0x0000000c00fe21fe, 0x5000000000000002, 0x0000000c0080201e,\n+            0x1000000000000006, 0x0023000000023986, 0xfc00000c000021be, 0xd000000000000002,\n+            0x0000000c00c0201e, 0x4000000000000004, 0x0000000000802001, 0xc000000000000001,\n+            0x0000000c00603dc1, 0x9000000000000002, 0x0000000c00603044, 0x5800000000000003,\n+            0x00000000805c8400, 0x07f2000000000000, 0x0000000000007f80, 0x1bf2000000000000,\n+            0x0000000000003f00, 0x02a0000003000000, 0x7ffe000000000000, 0x1ffffffffeffe0df,\n+            0x0000000000000040, 0x66fde00000000000, 0x001e0001c3000000, 0x0000000020002064,\n+            0x00000000e0000000, 0x001c0000001c0000, 0x000c0000000c0000, 0x3fb0000000000000,\n+            0x00000000200ffe40, 0x0000000000003800, 0x0000020000000060, 0x0e04018700000000,\n+            0x0000000009800000, 0x9ff81fe57f400000, 0x7fff000000000000, 0x17d000000000000f,\n+            0x000ff80000000004, 0x00003b3c00000003, 0x0003a34000000000, 0x00cff00000000000,\n+            0x031021fdfff70000, 0xfbffffffffffffff, 0x0000000000001000, 0x0001ffffffff0000,\n+            0x0003800000000000, 0x8000000000000000, 0xffffffff00000000, 0x0000fc0000000000,\n+            0x0000000006000000, 0x3ff7800000000000, 0x00000000c0000000, 0x0003000000000000,\n+            0x0000006000000844, 0x0003ffff00000030, 0x00003fc000000000, 0x000000000003ff80,\n+            0x13c8000000000007, 0x0000002000000000, 0x00667e0000000000, 0x1000000000001008,\n+            0xc19d000000000000, 0x0040300000000002, 0x0000212000000000, 0x0000000040000000,\n+            0x0000ffff0000ffff\n+        ],\n+        r4: [\n+            0, 1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n+            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2\n+        ],\n+        r5: &[\n+            0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 6, 7, 8, 0, 9, 10, 11, 12, 13, 0, 0, 14, 15, 16, 0, 0, 17, 18, 19, 20,\n+            0, 0, 21, 22, 23, 24, 25, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 28, 29, 0, 0, 0,\n+            0, 0, 30, 0, 31, 0, 32, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 39, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 42, 43, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 45, 0, 46, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 47, 48, 0, 0, 48, 48,\n+            48, 49, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n+        ],\n+        r6: &[\n+            0x0000000000000000, 0x2000000000000000, 0x0000000100000000, 0x07c0000000000000,\n+            0x870000000000f06e, 0x0000006000000000, 0xff00000000000002, 0x800000000000007f,\n+            0x0678000000000003, 0x001fef8000000007, 0x0008000000000000, 0x7fc0000000000003,\n+            0x0000000000001c00, 0x40d3800000000000, 0x000007f880000000, 0x5000000000000003,\n+            0x001f1fc000800001, 0xff00000000000000, 0x000000000000005c, 0xa5f9000000000000,\n+            0x000000000000000d, 0xb03c800000000000, 0x0000000030000001, 0xa7f8000000000000,\n+            0x0000000000000001, 0x00bf280000000000, 0x00000fbce0000000, 0x79f800000000067e,\n+            0x000000000e7e0080, 0x00000000037ffc00, 0xbf7f000000000000, 0x006dfcfffffc0000,\n+            0xb47e000000000000, 0x00000000000000bf, 0x001f000000000000, 0x007f000000000000,\n+            0x0000000000078000, 0x0000000060000000, 0xf807c3a000000000, 0x00003c0000000fe7,\n+            0x000000000000001c, 0xf87fffffffffffff, 0x00201fffffffffff, 0x0000fffef8000010,\n+            0x000007dbf9ffff7f, 0x00000000007f0000, 0x00000000000007f0, 0xffffffff00000000,\n+            0xffffffffffffffff, 0x0000ffffffffffff\n+        ],\n+    };\n+\n+    pub fn Grapheme_Extend(c: char) -> bool {\n+        Grapheme_Extend_table.lookup(c)\n+    }\n+\n     pub const Lowercase_table: &super::BoolTrie = &super::BoolTrie {\n         r1: [\n             0x0000000000000000, 0x07fffffe00000000, 0x0420040000000000, 0xff7fffff80000000,"}, {"sha": "be0970b544406e5ac9cfe6e2d0b41bb4aa76217a", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/65a16c000720f286c91747b91e6d9caa7b1bb63c/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=65a16c000720f286c91747b91e6d9caa7b1bb63c", "patch": "@@ -21,11 +21,14 @@\n # - UnicodeData.txt\n #\n # Since this should not require frequent updates, we just store this\n-# out-of-line and check the unicode.rs file into git.\n+# out-of-line and check the tables.rs file into git.\n \n-import fileinput, re, os, sys, operator, math\n+import fileinput, re, os, sys, operator, math, datetime\n \n-preamble = '''// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n+# The directory in which this file resides.\n+fdir = os.path.dirname(os.path.realpath(__file__)) + \"/\"\n+\n+preamble = '''// Copyright 2012-{year} The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -40,8 +43,8 @@\n #![allow(missing_docs, non_upper_case_globals, non_snake_case)]\n \n use unicode::version::UnicodeVersion;\n-use unicode::bool_trie::{BoolTrie, SmallBoolTrie};\n-'''\n+use unicode::bool_trie::{{BoolTrie, SmallBoolTrie}};\n+'''.format(year = datetime.datetime.now().year)\n \n # Mapping taken from Table 12 from:\n # http://www.unicode.org/reports/tr44/#General_Category_Values\n@@ -61,11 +64,11 @@\n surrogate_codepoints = (0xd800, 0xdfff)\n \n def fetch(f):\n-    if not os.path.exists(os.path.basename(f)):\n-        os.system(\"curl -O http://www.unicode.org/Public/UNIDATA/%s\"\n-                  % f)\n+    path = fdir + os.path.basename(f)\n+    if not os.path.exists(path):\n+        os.system(\"curl -o {0}{1} ftp://ftp.unicode.org/Public/UNIDATA/{1}\".format(fdir, f))\n \n-    if not os.path.exists(os.path.basename(f)):\n+    if not os.path.exists(path):\n         sys.stderr.write(\"cannot load %s\" % f)\n         exit(1)\n \n@@ -84,7 +87,7 @@ def load_unicode_data(f):\n \n     udict = {}\n     range_start = -1\n-    for line in fileinput.input(f):\n+    for line in fileinput.input(fdir + f):\n         data = line.split(';')\n         if len(data) != 15:\n             continue\n@@ -156,7 +159,7 @@ def load_unicode_data(f):\n \n def load_special_casing(f, to_upper, to_lower, to_title):\n     fetch(f)\n-    for line in fileinput.input(f):\n+    for line in fileinput.input(fdir + f):\n         data = line.split('#')[0].split(';')\n         if len(data) == 5:\n             code, lower, title, upper, _comment = data\n@@ -243,7 +246,7 @@ def load_properties(f, interestingprops):\n     re1 = re.compile(\"^ *([0-9A-F]+) *; *(\\w+)\")\n     re2 = re.compile(\"^ *([0-9A-F]+)\\.\\.([0-9A-F]+) *; *(\\w+)\")\n \n-    for line in fileinput.input(os.path.basename(f)):\n+    for line in fileinput.input(fdir + os.path.basename(f)):\n         prop = None\n         d_lo = 0\n         d_hi = 0\n@@ -456,7 +459,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n     canon_comp_keys = sorted(canon_comp.keys())\n \n if __name__ == \"__main__\":\n-    r = \"tables.rs\"\n+    r = fdir + \"tables.rs\"\n     if os.path.exists(r):\n         os.remove(r)\n     with open(r, \"w\") as rf:\n@@ -465,7 +468,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n \n         # download and parse all the data\n         fetch(\"ReadMe.txt\")\n-        with open(\"ReadMe.txt\") as readme:\n+        with open(fdir + \"ReadMe.txt\") as readme:\n             pattern = \"for Version (\\d+)\\.(\\d+)\\.(\\d+) of the Unicode\"\n             unicode_version = re.search(pattern, readme.read()).groups()\n         rf.write(\"\"\"\n@@ -483,7 +486,7 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n                 to_upper, to_lower, to_title) = load_unicode_data(\"UnicodeData.txt\")\n         load_special_casing(\"SpecialCasing.txt\", to_upper, to_lower, to_title)\n         want_derived = [\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\",\n-                        \"Cased\", \"Case_Ignorable\"]\n+                        \"Cased\", \"Case_Ignorable\", \"Grapheme_Extend\"]\n         derived = load_properties(\"DerivedCoreProperties.txt\", want_derived)\n         scripts = load_properties(\"Scripts.txt\", [])\n         props = load_properties(\"PropList.txt\",\n@@ -500,3 +503,4 @@ def emit_norm_module(f, canon, compat, combine, norm_props):\n         # normalizations and conversions module\n         emit_norm_module(rf, canon_decomp, compat_decomp, combines, norm_props)\n         emit_conversions_module(rf, to_upper, to_lower, to_title)\n+    print(\"Regenerated tables.rs.\")"}]}