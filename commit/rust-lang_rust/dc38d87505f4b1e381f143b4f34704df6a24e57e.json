{"sha": "dc38d87505f4b1e381f143b4f34704df6a24e57e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMzhkODc1MDVmNGIxZTM4MWYxNDNiNGYzNDcwNGRmNmEyNGU1N2U=", "commit": {"author": {"name": "Aris Merchant", "email": "wizkarim@gmail.com", "date": "2021-06-03T05:53:03Z"}, "committer": {"name": "inquisitivecrystal", "email": "22333129+inquisitivecrystal@users.noreply.github.com", "date": "2021-07-10T06:24:36Z"}, "message": "Fix linker error\n\nThis makes `fs::hard_link` use weak! for some platforms,\nthereby preventing a linker error.", "tree": {"sha": "942ea729fd03e8bc7cbeb2e3ea6d884a13e37230", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/942ea729fd03e8bc7cbeb2e3ea6d884a13e37230"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc38d87505f4b1e381f143b4f34704df6a24e57e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc38d87505f4b1e381f143b4f34704df6a24e57e", "html_url": "https://github.com/rust-lang/rust/commit/dc38d87505f4b1e381f143b4f34704df6a24e57e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc38d87505f4b1e381f143b4f34704df6a24e57e/comments", "author": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "inquisitivecrystal", "id": 22333129, "node_id": "MDQ6VXNlcjIyMzMzMTI5", "avatar_url": "https://avatars.githubusercontent.com/u/22333129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/inquisitivecrystal", "html_url": "https://github.com/inquisitivecrystal", "followers_url": "https://api.github.com/users/inquisitivecrystal/followers", "following_url": "https://api.github.com/users/inquisitivecrystal/following{/other_user}", "gists_url": "https://api.github.com/users/inquisitivecrystal/gists{/gist_id}", "starred_url": "https://api.github.com/users/inquisitivecrystal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/inquisitivecrystal/subscriptions", "organizations_url": "https://api.github.com/users/inquisitivecrystal/orgs", "repos_url": "https://api.github.com/users/inquisitivecrystal/repos", "events_url": "https://api.github.com/users/inquisitivecrystal/events{/privacy}", "received_events_url": "https://api.github.com/users/inquisitivecrystal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eae2eb1d31da4b0bbdb80dcf2625535c3f147ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eae2eb1d31da4b0bbdb80dcf2625535c3f147ae", "html_url": "https://github.com/rust-lang/rust/commit/8eae2eb1d31da4b0bbdb80dcf2625535c3f147ae"}], "stats": {"total": 41, "additions": 30, "deletions": 11}, "files": [{"sha": "4bbf334fc13d22b66f38f81ca6c658558376b25d", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 30, "deletions": 11, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dc38d87505f4b1e381f143b4f34704df6a24e57e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc38d87505f4b1e381f143b4f34704df6a24e57e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=dc38d87505f4b1e381f143b4f34704df6a24e57e", "patch": "@@ -14,6 +14,12 @@ use crate::sys_common::{AsInner, FromInner};\n \n use libc::{c_int, mode_t};\n \n+#[cfg(any(\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+    all(target_os = \"linux\", target_env = \"gnu\")\n+))]\n+use libc::c_char;\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"android\"))]\n use libc::dirfd;\n #[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n@@ -92,7 +98,7 @@ cfg_has_statx! {{\n     // Default `stat64` contains no creation time.\n     unsafe fn try_statx(\n         fd: c_int,\n-        path: *const libc::c_char,\n+        path: *const c_char,\n         flags: i32,\n         mask: u32,\n     ) -> Option<io::Result<FileAttr>> {\n@@ -107,7 +113,7 @@ cfg_has_statx! {{\n         syscall! {\n             fn statx(\n                 fd: c_int,\n-                pathname: *const libc::c_char,\n+                pathname: *const c_char,\n                 flags: c_int,\n                 mask: libc::c_uint,\n                 statxbuf: *mut libc::statx\n@@ -756,7 +762,7 @@ impl File {\n         cfg_has_statx! {\n             if let Some(ret) = unsafe { try_statx(\n                 fd,\n-                b\"\\0\" as *const _ as *const libc::c_char,\n+                b\"\\0\" as *const _ as *const c_char,\n                 libc::AT_EMPTY_PATH | libc::AT_STATX_SYNC_AS_STAT,\n                 libc::STATX_ALL,\n             ) } {\n@@ -1087,15 +1093,28 @@ pub fn link(original: &Path, link: &Path) -> io::Result<()> {\n     let link = cstr(link)?;\n     cfg_if::cfg_if! {\n         if #[cfg(any(target_os = \"vxworks\", target_os = \"redox\", target_os = \"android\"))] {\n-            // VxWorks, Redox, and old versions of Android lack `linkat`, so use\n-            // `link` instead. POSIX leaves it implementation-defined whether\n-            // `link` follows symlinks, so rely on the `symlink_hard_link` test\n-            // in library/std/src/fs/tests.rs to check the behavior.\n+            // VxWorks and Redox lack `linkat`, so use `link` instead. POSIX leaves\n+            // it implementation-defined whether `link` follows symlinks, so rely on the\n+            // `symlink_hard_link` test in library/std/src/fs/tests.rs to check the behavior.\n+            // Android has `linkat` on newer versions, but we happen to know `link`\n+            // always has the correct behavior, so it's here as well.\n             cvt(unsafe { libc::link(original.as_ptr(), link.as_ptr()) })?;\n+        } else if #[cfg(target_os = \"macos\")] {\n+            // On MacOS, older versions (<=10.9) lack support for linkat while newer\n+            // versions have it. We want to use linkat if it is available, so we use weak!\n+            // to check. `linkat` is preferable to `link` ecause it gives us a flag to\n+            // specify how symlinks should be handled. We pass 0 as the flags argument,\n+            // meaning it shouldn't follow symlinks.\n+            weak!(fn linkat(c_int, *const c_char, c_int, *const c_char, c_int) -> c_int);\n+\n+            if let Some(f) = linkat.get() {\n+                cvt(unsafe { f(libc::AT_FDCWD, original.as_ptr(), libc::AT_FDCWD, link.as_ptr(), 0) })?;\n+            } else {\n+                cvt(unsafe { libc::link(original.as_ptr(), link.as_ptr()) })?;\n+            };\n         } else {\n-            // Use `linkat` with `AT_FDCWD` instead of `link` as `linkat` gives\n-            // us a flag to specify how symlinks should be handled. Pass 0 as\n-            // the flags argument, meaning don't follow symlinks.\n+            // Where we can, use `linkat` instead of `link`; see the comment above\n+            // this one for details on why.\n             cvt(unsafe { libc::linkat(libc::AT_FDCWD, original.as_ptr(), libc::AT_FDCWD, link.as_ptr(), 0) })?;\n         }\n     }\n@@ -1278,7 +1297,7 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         fn fclonefileat(\n             srcfd: libc::c_int,\n             dst_dirfd: libc::c_int,\n-            dst: *const libc::c_char,\n+            dst: *const c_char,\n             flags: libc::c_int\n         ) -> libc::c_int\n     }"}]}