{"sha": "8b8f6653cfd54525714f02efe7af0a0f830e185c", "node_id": "C_kwDOAAsO6NoAKDhiOGY2NjUzY2ZkNTQ1MjU3MTRmMDJlZmU3YWYwYTBmODMwZTE4NWM", "commit": {"author": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2022-04-24T12:08:23Z"}, "committer": {"name": "Emil Gardstr\u00f6m", "email": "emil.gardstrom@gmail.com", "date": "2022-04-24T16:33:06Z"}, "message": "add `DefId` to unsafety violations and display function path in E0133\n\nthis enables consumers to access the function definition that was reported to be unsafe", "tree": {"sha": "08350f3a61cde865ec0fa0ca084b874e88a389f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08350f3a61cde865ec0fa0ca084b874e88a389f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b8f6653cfd54525714f02efe7af0a0f830e185c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRVsF4dMy9m92mNijsIqrtPgMP6xgUCYmV7wgAKCRAIqrtPgMP6\nxmmMAP9w1MJ8qrB1JX9fg/pk6IbcxzDq/uajEjQDN2aTym/eqAD9GITDYPnrN9NZ\ntPvru871e3RvzUrvJCSAn0vuxb9KLgg=\n=mIQO\n-----END PGP SIGNATURE-----", "payload": "tree 08350f3a61cde865ec0fa0ca084b874e88a389f3\nparent d8e59edbfa47ff38e23e6dedab6bedd3b41895e0\nauthor Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1650802103 +0200\ncommitter Emil Gardstr\u00f6m <emil.gardstrom@gmail.com> 1650817986 +0200\n\nadd `DefId` to unsafety violations and display function path in E0133\n\nthis enables consumers to access the function definition that was reported to be unsafe\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8f6653cfd54525714f02efe7af0a0f830e185c", "html_url": "https://github.com/rust-lang/rust/commit/8b8f6653cfd54525714f02efe7af0a0f830e185c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b8f6653cfd54525714f02efe7af0a0f830e185c/comments", "author": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emilgardis", "id": 1502855, "node_id": "MDQ6VXNlcjE1MDI4NTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1502855?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emilgardis", "html_url": "https://github.com/Emilgardis", "followers_url": "https://api.github.com/users/Emilgardis/followers", "following_url": "https://api.github.com/users/Emilgardis/following{/other_user}", "gists_url": "https://api.github.com/users/Emilgardis/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emilgardis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emilgardis/subscriptions", "organizations_url": "https://api.github.com/users/Emilgardis/orgs", "repos_url": "https://api.github.com/users/Emilgardis/repos", "events_url": "https://api.github.com/users/Emilgardis/events{/privacy}", "received_events_url": "https://api.github.com/users/Emilgardis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8e59edbfa47ff38e23e6dedab6bedd3b41895e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8e59edbfa47ff38e23e6dedab6bedd3b41895e0", "html_url": "https://github.com/rust-lang/rust/commit/d8e59edbfa47ff38e23e6dedab6bedd3b41895e0"}], "stats": {"total": 428, "additions": 228, "deletions": 200}, "files": [{"sha": "a37091ed3631b11db62bc9f130710073ea0e7be6", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -12,6 +12,7 @@ use rustc_index::vec::IndexVec;\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n+use std::borrow::Cow;\n use std::cell::Cell;\n use std::fmt::{self, Debug};\n \n@@ -28,7 +29,7 @@ pub enum UnsafetyViolationKind {\n \n #[derive(Copy, Clone, PartialEq, TyEncodable, TyDecodable, HashStable, Debug)]\n pub enum UnsafetyViolationDetails {\n-    CallToUnsafeFunction,\n+    CallToUnsafeFunction(Option<DefId>),\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     CastOfPointerToInt,\n@@ -39,66 +40,74 @@ pub enum UnsafetyViolationDetails {\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n-    CallToFunctionWith,\n+    CallToFunctionWith(DefId),\n }\n \n impl UnsafetyViolationDetails {\n-    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n         use UnsafetyViolationDetails::*;\n         match self {\n-            CallToUnsafeFunction => (\n-                \"call to unsafe function\",\n+            CallToUnsafeFunction(did) => (\n+                if let Some(did) = did {\n+                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n+                } else {\n+                    Cow::Borrowed(\"call to unsafe function\")\n+                },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                \"use of inline assembly\",\n+                Cow::Borrowed(\"use of inline assembly\"),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                Cow::Borrowed(\"initializing type with `rustc_layout_scalar_valid_range` attr\"),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n-            CastOfPointerToInt => {\n-                (\"cast of pointer to int\", \"casting pointers to integers in constants\")\n-            }\n+            CastOfPointerToInt => (\n+                Cow::Borrowed(\"cast of pointer to int\"),\n+                \"casting pointers to integers in constants\",\n+            ),\n             UseOfMutableStatic => (\n-                \"use of mutable static\",\n+                Cow::Borrowed(\"use of mutable static\"),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                \"use of extern static\",\n+                Cow::Borrowed(\"use of extern static\"),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                \"dereference of raw pointer\",\n+                Cow::Borrowed(\"dereference of raw pointer\"),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                \"assignment to union field that might need dropping\",\n+                Cow::Borrowed(\"assignment to union field that might need dropping\"),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                \"access to union field\",\n+                Cow::Borrowed(\"access to union field\"),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                \"mutation of layout constrained field\",\n+                Cow::Borrowed(\"mutation of layout constrained field\"),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                \"borrow of layout constrained field with interior mutability\",\n+                Cow::Borrowed(\"borrow of layout constrained field with interior mutability\"),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),\n-            CallToFunctionWith => (\n-                \"call to function with `#[target_feature]`\",\n+            CallToFunctionWith(did) => (\n+                Cow::from(format!(\n+                    \"call to function `{}` with `#[target_feature]`\",\n+                    tcx.def_path_str(*did)\n+                )),\n                 \"can only be called if the required target features are available\",\n             ),\n         }"}, {"sha": "5e5a728a04a02c4b24c86c4038f18bea9558c524", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 33, "deletions": 19, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -12,6 +12,7 @@ use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n+use std::borrow::Cow;\n use std::ops::Bound;\n \n struct UnsafetyVisitor<'a, 'tcx> {\n@@ -70,7 +71,6 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n     }\n \n     fn requires_unsafe(&mut self, span: Span, kind: UnsafeOpKind) {\n-        let (description, note) = kind.description_and_note();\n         let unsafe_op_in_unsafe_fn_allowed = self.unsafe_op_in_unsafe_fn_allowed();\n         match self.safety_context {\n             SafetyContext::BuiltinUnsafeBlock => {}\n@@ -82,6 +82,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n             }\n             SafetyContext::UnsafeFn if unsafe_op_in_unsafe_fn_allowed => {}\n             SafetyContext::UnsafeFn => {\n+                let (description, note) = kind.description_and_note(self.tcx);\n                 // unsafe_op_in_unsafe_fn is disallowed\n                 self.tcx.struct_span_lint_hir(\n                     UNSAFE_OP_IN_UNSAFE_FN,\n@@ -99,6 +100,7 @@ impl<'tcx> UnsafetyVisitor<'_, 'tcx> {\n                 )\n             }\n             SafetyContext::Safe => {\n+                let (description, note) = kind.description_and_note(self.tcx);\n                 let fn_sugg = if unsafe_op_in_unsafe_fn_allowed { \" function or\" } else { \"\" };\n                 struct_span_err!(\n                     self.tcx.sess,\n@@ -350,7 +352,12 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             }\n             ExprKind::Call { fun, ty: _, args: _, from_hir_call: _, fn_span: _ } => {\n                 if self.thir[fun].ty.fn_sig(self.tcx).unsafety() == hir::Unsafety::Unsafe {\n-                    self.requires_unsafe(expr.span, CallToUnsafeFunction);\n+                    let func_id = if let ty::FnDef(func_id, _) = self.thir[fun].ty.kind() {\n+                        Some(*func_id)\n+                    } else {\n+                        None\n+                    };\n+                    self.requires_unsafe(expr.span, CallToUnsafeFunction(func_id));\n                 } else if let &ty::FnDef(func_did, _) = self.thir[fun].ty.kind() {\n                     // If the called function has target features the calling function hasn't,\n                     // the call requires `unsafe`. Don't check this on wasm\n@@ -364,7 +371,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                             .iter()\n                             .all(|feature| self.body_target_features.contains(feature))\n                     {\n-                        self.requires_unsafe(expr.span, CallToFunctionWith);\n+                        self.requires_unsafe(expr.span, CallToFunctionWith(func_did));\n                     }\n                 }\n             }\n@@ -523,7 +530,7 @@ impl BodyUnsafety {\n \n #[derive(Clone, Copy, PartialEq)]\n enum UnsafeOpKind {\n-    CallToUnsafeFunction,\n+    CallToUnsafeFunction(Option<DefId>),\n     UseOfInlineAssembly,\n     InitializingTypeWith,\n     UseOfMutableStatic,\n@@ -533,64 +540,71 @@ enum UnsafeOpKind {\n     AccessToUnionField,\n     MutationOfLayoutConstrainedField,\n     BorrowOfLayoutConstrainedField,\n-    CallToFunctionWith,\n+    CallToFunctionWith(DefId),\n }\n \n use UnsafeOpKind::*;\n \n impl UnsafeOpKind {\n-    pub fn description_and_note(&self) -> (&'static str, &'static str) {\n+    pub fn description_and_note(&self, tcx: TyCtxt<'_>) -> (Cow<'static, str>, &'static str) {\n         match self {\n-            CallToUnsafeFunction => (\n-                \"call to unsafe function\",\n+            CallToUnsafeFunction(did) => (\n+                if let Some(did) = did {\n+                    Cow::from(format!(\"call to unsafe function `{}`\", tcx.def_path_str(*did)))\n+                } else {\n+                    Cow::Borrowed(\"call to unsafe function\")\n+                },\n                 \"consult the function's documentation for information on how to avoid undefined \\\n                  behavior\",\n             ),\n             UseOfInlineAssembly => (\n-                \"use of inline assembly\",\n+                Cow::Borrowed(\"use of inline assembly\"),\n                 \"inline assembly is entirely unchecked and can cause undefined behavior\",\n             ),\n             InitializingTypeWith => (\n-                \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                Cow::Borrowed(\"initializing type with `rustc_layout_scalar_valid_range` attr\"),\n                 \"initializing a layout restricted type's field with a value outside the valid \\\n                  range is undefined behavior\",\n             ),\n             UseOfMutableStatic => (\n-                \"use of mutable static\",\n+                Cow::Borrowed(\"use of mutable static\"),\n                 \"mutable statics can be mutated by multiple threads: aliasing violations or data \\\n                  races will cause undefined behavior\",\n             ),\n             UseOfExternStatic => (\n-                \"use of extern static\",\n+                Cow::Borrowed(\"use of extern static\"),\n                 \"extern statics are not controlled by the Rust type system: invalid data, \\\n                  aliasing violations or data races will cause undefined behavior\",\n             ),\n             DerefOfRawPointer => (\n-                \"dereference of raw pointer\",\n+                Cow::Borrowed(\"dereference of raw pointer\"),\n                 \"raw pointers may be null, dangling or unaligned; they can violate aliasing rules \\\n                  and cause data races: all of these are undefined behavior\",\n             ),\n             AssignToDroppingUnionField => (\n-                \"assignment to union field that might need dropping\",\n+                Cow::Borrowed(\"assignment to union field that might need dropping\"),\n                 \"the previous content of the field will be dropped, which causes undefined \\\n                  behavior if the field was not properly initialized\",\n             ),\n             AccessToUnionField => (\n-                \"access to union field\",\n+                Cow::Borrowed(\"access to union field\"),\n                 \"the field may not be properly initialized: using uninitialized data will cause \\\n                  undefined behavior\",\n             ),\n             MutationOfLayoutConstrainedField => (\n-                \"mutation of layout constrained field\",\n+                Cow::Borrowed(\"mutation of layout constrained field\"),\n                 \"mutating layout constrained fields cannot statically be checked for valid values\",\n             ),\n             BorrowOfLayoutConstrainedField => (\n-                \"borrow of layout constrained field with interior mutability\",\n+                Cow::Borrowed(\"borrow of layout constrained field with interior mutability\"),\n                 \"references to fields of layout constrained fields lose the constraints. Coupled \\\n                  with interior mutability, the field can be changed to invalid values\",\n             ),\n-            CallToFunctionWith => (\n-                \"call to function with `#[target_feature]`\",\n+            CallToFunctionWith(did) => (\n+                Cow::from(format!(\n+                    \"call to function `{}` with `#[target_feature]`\",\n+                    tcx.def_path_str(*did)\n+                )),\n                 \"can only be called if the required target features are available\",\n             ),\n         }"}, {"sha": "33b83d90e0f637139d235105632e597434202948", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -70,15 +70,17 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n \n             TerminatorKind::Call { ref func, .. } => {\n                 let func_ty = func.ty(self.body, self.tcx);\n+                let func_id =\n+                    if let ty::FnDef(func_id, _) = func_ty.kind() { Some(func_id) } else { None };\n                 let sig = func_ty.fn_sig(self.tcx);\n                 if let hir::Unsafety::Unsafe = sig.unsafety() {\n                     self.require_unsafe(\n                         UnsafetyViolationKind::General,\n-                        UnsafetyViolationDetails::CallToUnsafeFunction,\n+                        UnsafetyViolationDetails::CallToUnsafeFunction(func_id.copied()),\n                     )\n                 }\n \n-                if let ty::FnDef(func_id, _) = func_ty.kind() {\n+                if let Some(func_id) = func_id {\n                     self.check_target_features(*func_id);\n                 }\n             }\n@@ -379,7 +381,7 @@ impl<'tcx> UnsafetyChecker<'_, 'tcx> {\n         if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n             self.require_unsafe(\n                 UnsafetyViolationKind::General,\n-                UnsafetyViolationDetails::CallToFunctionWith,\n+                UnsafetyViolationDetails::CallToFunctionWith(func_did),\n             )\n         }\n     }\n@@ -578,7 +580,8 @@ pub fn check_unsafety(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     let UnsafetyCheckResult { violations, unused_unsafes, .. } = tcx.unsafety_check_result(def_id);\n \n     for &UnsafetyViolation { source_info, lint_root, kind, details } in violations.iter() {\n-        let (description, note) = details.description_and_note();\n+        let (description, note) =\n+            ty::print::with_no_trimmed_paths!(details.description_and_note(tcx));\n \n         // Report an error.\n         let unsafe_fn_msg ="}, {"sha": "b094aa198e89782b1948fc24fcc1201499021c87", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,32 +1,32 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `S::f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:19:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `S::f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:20:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "2605905ff76f1989febb154bb417b939fdcaa09b", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -11,11 +11,11 @@ impl S {\n async unsafe fn f() {}\n \n async fn g() {\n-    S::f(); //~ ERROR call to unsafe function is unsafe\n-    f(); //~ ERROR call to unsafe function is unsafe\n+    S::f(); //~ ERROR call to unsafe function `S::f` is unsafe\n+    f(); //~ ERROR call to unsafe function `f` is unsafe\n }\n \n fn main() {\n-    S::f(); //[mir]~ ERROR call to unsafe function is unsafe\n-    f(); //[mir]~ ERROR call to unsafe function is unsafe\n+    S::f(); //[mir]~ ERROR call to unsafe function `S::f` is unsafe\n+    f(); //[mir]~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "3d57ca5f55ef5bd332c9107e14db71f3bedb224f", "filename": "src/test/ui/async-await/async-unsafe-fn-call-in-safe.thir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-unsafe-fn-call-in-safe.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,16 +1,16 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `S::f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:14:5\n    |\n LL |     S::f();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `S::f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/async-unsafe-fn-call-in-safe.rs:15:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "9a43711a4f03ce7ce795f4365ba8be9bdd932b2c", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::pin::Pin::<P>::new_unchecked` is unsafe and requires unsafe function or block\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::pin::Pin::<P>::new_unchecked`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "9405f6a8e9ecc740dc481fcfa02e45d74709fc33", "filename": "src/test/ui/closures/coerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-closure-to-unsafe-fn-ptr.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `Pin::<P>::new_unchecked` is unsafe and requires unsafe function or block\n   --> $DIR/coerce-unsafe-closure-to-unsafe-fn-ptr.rs:5:31\n    |\n LL |     let _: unsafe fn() = || { ::std::pin::Pin::new_unchecked(&0_u8); };\n-   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `Pin::<P>::new_unchecked`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "bedb934ab1cb9a04ffb8c26abc453f148f102f3c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.mir.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,16 +1,16 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function\n+   |                 ^^^^^ call to unsafe function `foo`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:11:5\n    |\n LL |     foo();\n-   |     ^^^^^ call to unsafe function\n+   |     ^^^^^ call to unsafe function `foo`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "b4cf729703ab8ef6e8d30b960fcd3e55678a473c", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -7,7 +7,7 @@ const unsafe extern \"C\" fn foo() -> usize { 5 }\n \n fn main() {\n     let a: [u8; foo()];\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    //~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n     foo();\n-    //[mir]~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+    //[mir]~^ ERROR call to unsafe function `foo` is unsafe and requires unsafe function or block\n }"}, {"sha": "f5361f355e10631f347891d7da643ab5b0c99962", "filename": "src/test/ui/consts/const-extern-fn/const-extern-fn-requires-unsafe.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-extern-fn%2Fconst-extern-fn-requires-unsafe.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `foo` is unsafe and requires unsafe function or block\n   --> $DIR/const-extern-fn-requires-unsafe.rs:9:17\n    |\n LL |     let a: [u8; foo()];\n-   |                 ^^^^^ call to unsafe function\n+   |                 ^^^^^ call to unsafe function `foo`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "7d6dc0c7f09e69a763e5f1551612bb4eda6194e1", "filename": "src/test/ui/error-codes/E0133.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "7d6dc0c7f09e69a763e5f1551612bb4eda6194e1", "filename": "src/test/ui/error-codes/E0133.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0133.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/E0133.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "cb5252361d33e76f387cf1eb8692020c8a0cac2d", "filename": "src/test/ui/foreign-unsafe-fn-called.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe function or block\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n-   |     ^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^ call to unsafe function `test::free`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "cd084a1620afe8c05cad3d8dbddb0c3cdc2ff13f", "filename": "src/test/ui/foreign-unsafe-fn-called.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -9,5 +9,5 @@ mod test {\n \n fn main() {\n     test::free();\n-    //~^ ERROR call to unsafe function is unsafe\n+    //~^ ERROR call to unsafe function `test::free` is unsafe\n }"}, {"sha": "cb5252361d33e76f387cf1eb8692020c8a0cac2d", "filename": "src/test/ui/foreign-unsafe-fn-called.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fforeign-unsafe-fn-called.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `test::free` is unsafe and requires unsafe function or block\n   --> $DIR/foreign-unsafe-fn-called.rs:11:5\n    |\n LL |     test::free();\n-   |     ^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^ call to unsafe function `test::free`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "e67e81cdc4ea180b75049490c9224cc9bc244398", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.mir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,24 +1,24 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_add` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_add`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_sub`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::intrinsics::unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::intrinsics::unchecked_mul`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "50aaef8694f09073f7754b63639cc879d0db8de3", "filename": "src/test/ui/intrinsics/unchecked_math_unsafe.thir.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Funchecked_math_unsafe.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,24 +1,24 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_add` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:8:15\n    |\n LL |     let add = std::intrinsics::unchecked_add(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_add`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_sub` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:9:15\n    |\n LL |     let sub = std::intrinsics::unchecked_sub(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_sub`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unchecked_mul` is unsafe and requires unsafe function or block\n   --> $DIR/unchecked_math_unsafe.rs:10:15\n    |\n LL |     let mul = std::intrinsics::unchecked_mul(x, y);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `unchecked_mul`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "bb82a0f4c6059c94184571bfbb721d63223fa028", "filename": "src/test/ui/issues/issue-28776.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::ptr::write`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "bb82a0f4c6059c94184571bfbb721d63223fa028", "filename": "src/test/ui/issues/issue-28776.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28776.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::ptr::write` is unsafe and requires unsafe function or block\n   --> $DIR/issue-28776.rs:7:5\n    |\n LL |     (&ptr::write)(1 as *mut _, 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::ptr::write`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "b1401b9d39356e976e6ee565877f610711678cf9", "filename": "src/test/ui/issues/issue-3080.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n-   |     ^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^ call to unsafe function `X::with`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "b1401b9d39356e976e6ee565877f610711678cf9", "filename": "src/test/ui/issues/issue-3080.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3080.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `X::with` is unsafe and requires unsafe function or block\n   --> $DIR/issue-3080.rs:10:5\n    |\n LL |     X(()).with();\n-   |     ^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^ call to unsafe function `X::with`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "a4141495fa0dc7e3fe095981532f02e700d82cf0", "filename": "src/test/ui/issues/issue-5844.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `issue_5844_aux::rand` is unsafe and requires unsafe function or block\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `issue_5844_aux::rand`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "0e28e42b928daa772f1b7a8eeebe53ca44636a3a", "filename": "src/test/ui/issues/issue-5844.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5844.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `rand` is unsafe and requires unsafe function or block\n   --> $DIR/issue-5844.rs:8:5\n    |\n LL |     issue_5844_aux::rand();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `rand`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "38d4510567967a6aafd96c48a656b1f827d0134d", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.mir.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,80 +1,80 @@\n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n-   |                  ^^^^^^ call to function with `#[target_feature]`\n+   |                  ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n "}, {"sha": "ec10fca96f9d1ab396df51e0f81180bf3c6329b8", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -20,30 +20,30 @@ impl Quux {\n }\n \n fn foo() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"sse2\")]\n fn bar() {\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n fn baz() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n-    avx_bmi2();          //~ ERROR call to function with `#[target_feature]` is unsafe\n-    Quux.avx_bmi2();     //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n+    avx_bmi2();          //~ ERROR call to function `avx_bmi2` with `#[target_feature]` is unsafe\n+    Quux.avx_bmi2();     //~ ERROR call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe\n }\n \n #[target_feature(enable = \"avx\")]\n #[target_feature(enable = \"bmi2\")]\n fn qux() {\n-    sse2();              //~ ERROR call to function with `#[target_feature]` is unsafe\n+    sse2();              //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n }\n \n-const name: () = sse2(); //~ ERROR call to function with `#[target_feature]` is unsafe\n+const name: () = sse2(); //~ ERROR call to function `sse2` with `#[target_feature]` is unsafe\n \n fn main() {}"}, {"sha": "38d4510567967a6aafd96c48a656b1f827d0134d", "filename": "src/test/ui/rfcs/rfc-2396-target_feature-11/safe-calls.thir.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfcs%2Frfc-2396-target_feature-11%2Fsafe-calls.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,80 +1,80 @@\n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:23:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:24:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:25:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:30:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:31:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:36:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:37:5\n    |\n LL |     avx_bmi2();\n-   |     ^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^ call to function `avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `Quux::avx_bmi2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:38:5\n    |\n LL |     Quux.avx_bmi2();\n-   |     ^^^^^^^^^^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^^^^^^^^^^ call to function `Quux::avx_bmi2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:44:5\n    |\n LL |     sse2();\n-   |     ^^^^^^ call to function with `#[target_feature]`\n+   |     ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n \n-error[E0133]: call to function with `#[target_feature]` is unsafe and requires unsafe function or block\n+error[E0133]: call to function `sse2` with `#[target_feature]` is unsafe and requires unsafe function or block\n   --> $DIR/safe-calls.rs:47:18\n    |\n LL | const name: () = sse2();\n-   |                  ^^^^^^ call to function with `#[target_feature]`\n+   |                  ^^^^^^ call to function `sse2` with `#[target_feature]`\n    |\n    = note: can only be called if the required target features are available\n "}, {"sha": "897a0e4591190d2f5c3ddfef7cc0360740fa3463", "filename": "src/test/ui/threads-sendsync/issue-43733.mir.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,16 +1,16 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `std::thread::__FastLocalKeyInner::<T>::get` is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::thread::__FastLocalKeyInner::<T>::get`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:22:42\n+error[E0133]: call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `std::thread::LocalKey::<T>::new`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "f5e10ec4ecb5f7d6c117b44de7a6fc6104dcd341", "filename": "src/test/ui/threads-sendsync/issue-43733.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -16,11 +16,14 @@ static __KEY: std::thread::__FastLocalKeyInner<Foo> = std::thread::__FastLocalKe\n static __KEY: std::thread::__OsLocalKeyInner<Foo> = std::thread::__OsLocalKeyInner::new();\n \n fn __getit(_: Option<&mut Option<RefCell<String>>>) -> std::option::Option<&'static Foo> {\n-    __KEY.get(Default::default) //~ ERROR call to unsafe function is unsafe\n+    __KEY.get(Default::default)\n+    //[mir]~^ ERROR call to unsafe function `std::thread::__FastLocalKeyInner::<T>::get` is unsafe\n+    //[thir]~^^ ERROR call to unsafe function `__FastLocalKeyInner::<T>::get` is unsafe\n }\n \n static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-//~^ ERROR call to unsafe function is unsafe\n+//[mir]~^ ERROR call to unsafe function `std::thread::LocalKey::<T>::new` is unsafe\n+//[thir]~^^ ERROR call to unsafe function `LocalKey::<T>::new` is unsafe\n \n fn main() {\n     FOO.with(|foo| println!(\"{}\", foo.borrow()));"}, {"sha": "98f46c90ce002357e9f8af6152124e969a476c10", "filename": "src/test/ui/threads-sendsync/issue-43733.thir.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Fissue-43733.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,16 +1,16 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `__FastLocalKeyInner::<T>::get` is unsafe and requires unsafe function or block\n   --> $DIR/issue-43733.rs:19:5\n    |\n LL |     __KEY.get(Default::default)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `__FastLocalKeyInner::<T>::get`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/issue-43733.rs:22:42\n+error[E0133]: call to unsafe function `LocalKey::<T>::new` is unsafe and requires unsafe function or block\n+  --> $DIR/issue-43733.rs:24:42\n    |\n LL | static FOO: std::thread::LocalKey<Foo> = std::thread::LocalKey::new(__getit);\n-   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ call to unsafe function `LocalKey::<T>::new`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "84704a211372bc7f9b0bfca8831fd63669f4ca4e", "filename": "src/test/ui/threads-sendsync/tls-dtors-are-run-in-a-static-binary.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthreads-sendsync%2Ftls-dtors-are-run-in-a-static-binary.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n // no-prefer-dynamic\n // ignore-emscripten no threads support\n-\n static mut HIT: bool = false;\n \n struct Foo;"}, {"sha": "23d7a8bb17adcc7ab626c8c2f537be13d22ba02b", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n@@ -39,11 +39,11 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n@@ -113,19 +113,19 @@ note: the lint level is defined here\n LL |     #[allow(unsafe_op_in_unsafe_fn)]\n    |             ^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();\n-   |         ^^^^^^ call to unsafe function\n+   |         ^^^^^^ call to unsafe function `unsf`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "aedb27a38da4af86e8d7da17cbf59ea9e3d802f2", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -10,7 +10,7 @@ static mut VOID: () = ();\n \n unsafe fn deny_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -25,7 +25,7 @@ unsafe fn deny_level() {\n #[deny(warnings)]\n unsafe fn warning_level() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     *PTR;\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n@@ -74,10 +74,10 @@ unsafe fn nested_allow_level() {\n \n fn main() {\n     unsf();\n-    //~^ ERROR call to unsafe function is unsafe and requires unsafe block\n+    //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe block\n     #[allow(unsafe_op_in_unsafe_fn)]\n     {\n         unsf();\n-        //~^ ERROR call to unsafe function is unsafe and requires unsafe function or block\n+        //~^ ERROR call to unsafe function `unsf` is unsafe and requires unsafe function or block\n     }\n }"}, {"sha": "35243e7687edea7ec14baecf2de1ba71de72d1f4", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:12:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:4:9\n@@ -39,11 +39,11 @@ note: the lint level is defined here\n LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n-error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+error: call to unsafe function `unsf` is unsafe and requires unsafe block (error E0133)\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n note: the lint level is defined here\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:8\n@@ -101,19 +101,19 @@ LL | unsafe fn nested_allow_level() {\n LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:76:5\n    |\n LL |     unsf();\n-   |     ^^^^^^ call to unsafe function\n+   |     ^^^^^^ call to unsafe function `unsf`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `unsf` is unsafe and requires unsafe function or block\n   --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:80:9\n    |\n LL |         unsf();\n-   |         ^^^^^^ call to unsafe function\n+   |         ^^^^^^ call to unsafe function `unsf`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "6c6879f3a8b418d52ece0ee1ff811a4dcaffa35a", "filename": "src/test/ui/unsafe/unsafe-const-fn.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n-   |                  ^^^^^^^^^^^^^ call to unsafe function\n+   |                  ^^^^^^^^^^^^^ call to unsafe function `dummy`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "6c6879f3a8b418d52ece0ee1ff811a4dcaffa35a", "filename": "src/test/ui/unsafe/unsafe-const-fn.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-const-fn.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `dummy` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-const-fn.rs:10:18\n    |\n LL | const VAL: u32 = dummy(0xFFFF);\n-   |                  ^^^^^^^^^^^^^ call to unsafe function\n+   |                  ^^^^^^^^^^^^^ call to unsafe function `dummy`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "0abe86489eb50ca96c1bab36a752105643b3f453", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "37b5c92587c9c049575567dbd3afc59dc29f9d95", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -4,5 +4,5 @@\n unsafe fn f() { return; }\n \n fn main() {\n-    f(); //~ ERROR call to unsafe function is unsafe\n+    f(); //~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "0abe86489eb50ca96c1bab36a752105643b3f453", "filename": "src/test/ui/unsafe/unsafe-fn-called-from-safe.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-called-from-safe.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-called-from-safe.rs:7:5\n    |\n LL |     f();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "7cdf614089c40ff14329578c7d0fe31d81de7353", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.mir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}, {"sha": "883a9f96d7bd6cbac255b1748d1fbe10471752d1", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.rs?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -5,5 +5,5 @@ unsafe fn f() { return; }\n \n fn main() {\n     let x = f;\n-    x();    //~ ERROR call to unsafe function is unsafe\n+    x(); //~ ERROR call to unsafe function `f` is unsafe\n }"}, {"sha": "7cdf614089c40ff14329578c7d0fe31d81de7353", "filename": "src/test/ui/unsafe/unsafe-fn-used-as-value.thir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8b8f6653cfd54525714f02efe7af0a0f830e185c/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Funsafe-fn-used-as-value.thir.stderr?ref=8b8f6653cfd54525714f02efe7af0a0f830e185c", "patch": "@@ -1,8 +1,8 @@\n-error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n+error[E0133]: call to unsafe function `f` is unsafe and requires unsafe function or block\n   --> $DIR/unsafe-fn-used-as-value.rs:8:5\n    |\n LL |     x();\n-   |     ^^^ call to unsafe function\n+   |     ^^^ call to unsafe function `f`\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n "}]}