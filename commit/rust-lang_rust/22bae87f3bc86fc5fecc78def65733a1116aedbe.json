{"sha": "22bae87f3bc86fc5fecc78def65733a1116aedbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYmFlODdmM2JjODZmYzVmZWNjNzhkZWY2NTczM2ExMTE2YWVkYmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-10T04:41:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-04-10T04:41:15Z"}, "message": "Auto merge of #41178 - llogiq:collections-doc-markdown, r=frewsxcv\n\nApply clippy's doc_markdown improvements to libcollections\n\nSince my last PR led to linker failure, I'm now taking much smaller steps.\nThis only fixes some doc_markdown warnings; as they are in comments only,\nwe shouldn't get any problems building.", "tree": {"sha": "0016b354a5c6643a24e809027324c8c8a34334e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0016b354a5c6643a24e809027324c8c8a34334e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22bae87f3bc86fc5fecc78def65733a1116aedbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22bae87f3bc86fc5fecc78def65733a1116aedbe", "html_url": "https://github.com/rust-lang/rust/commit/22bae87f3bc86fc5fecc78def65733a1116aedbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22bae87f3bc86fc5fecc78def65733a1116aedbe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13744ca91c93c17340e63290abd42479a3bafc1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13744ca91c93c17340e63290abd42479a3bafc1a", "html_url": "https://github.com/rust-lang/rust/commit/13744ca91c93c17340e63290abd42479a3bafc1a"}, {"sha": "0867981f5e5dafa80135314fba3e989dc1bd6209", "url": "https://api.github.com/repos/rust-lang/rust/commits/0867981f5e5dafa80135314fba3e989dc1bd6209", "html_url": "https://github.com/rust-lang/rust/commit/0867981f5e5dafa80135314fba3e989dc1bd6209"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "b30700c3f694e58482f7ba308509e8548051f772", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=22bae87f3bc86fc5fecc78def65733a1116aedbe", "patch": "@@ -262,7 +262,7 @@ impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>\n     }\n }\n \n-/// An iterator over a BTreeMap's entries.\n+/// An iterator over a `BTreeMap`'s entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, K: 'a, V: 'a> {\n     range: Range<'a, K, V>,\n@@ -276,15 +276,15 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Iter<'a, K, V> {\n     }\n }\n \n-/// A mutable iterator over a BTreeMap's entries.\n+/// A mutable iterator over a `BTreeMap`'s entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Debug)]\n pub struct IterMut<'a, K: 'a, V: 'a> {\n     range: RangeMut<'a, K, V>,\n     length: usize,\n }\n \n-/// An owning iterator over a BTreeMap's entries.\n+/// An owning iterator over a `BTreeMap`'s entries.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<K, V> {\n     front: Handle<NodeRef<marker::Owned, K, V, marker::Leaf>, marker::Edge>,\n@@ -303,7 +303,7 @@ impl<K: fmt::Debug, V: fmt::Debug> fmt::Debug for IntoIter<K, V> {\n     }\n }\n \n-/// An iterator over a BTreeMap's keys.\n+/// An iterator over a `BTreeMap`'s keys.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Keys<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -316,7 +316,7 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Keys<'a, K, V> {\n     }\n }\n \n-/// An iterator over a BTreeMap's values.\n+/// An iterator over a `BTreeMap`'s values.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Values<'a, K: 'a, V: 'a> {\n     inner: Iter<'a, K, V>,\n@@ -329,14 +329,14 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Values<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a BTreeMap's values.\n+/// A mutable iterator over a `BTreeMap`'s values.\n #[stable(feature = \"map_values_mut\", since = \"1.10.0\")]\n #[derive(Debug)]\n pub struct ValuesMut<'a, K: 'a, V: 'a> {\n     inner: IterMut<'a, K, V>,\n }\n \n-/// An iterator over a sub-range of BTreeMap's entries.\n+/// An iterator over a sub-range of `BTreeMap`'s entries.\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct Range<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Immut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -350,7 +350,7 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for Range<'a, K, V>\n     }\n }\n \n-/// A mutable iterator over a sub-range of BTreeMap's entries.\n+/// A mutable iterator over a sub-range of `BTreeMap`'s entries.\n #[stable(feature = \"btree_range\", since = \"1.17.0\")]\n pub struct RangeMut<'a, K: 'a, V: 'a> {\n     front: Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, marker::Edge>,\n@@ -378,12 +378,12 @@ impl<'a, K: 'a + fmt::Debug, V: 'a + fmt::Debug> fmt::Debug for RangeMut<'a, K,\n /// [`entry`]: struct.BTreeMap.html#method.entry\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum Entry<'a, K: 'a, V: 'a> {\n-    /// A vacant Entry\n+    /// A vacant `Entry`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Vacant(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n            VacantEntry<'a, K, V>),\n \n-    /// An occupied Entry\n+    /// An occupied `Entry`\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     Occupied(#[stable(feature = \"rust1\", since = \"1.0.0\")]\n              OccupiedEntry<'a, K, V>),\n@@ -403,7 +403,7 @@ impl<'a, K: 'a + Debug + Ord, V: 'a + Debug> Debug for Entry<'a, K, V> {\n     }\n }\n \n-/// A vacant Entry. It is part of the [`Entry`] enum.\n+/// A vacant `Entry`. It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -425,7 +425,7 @@ impl<'a, K: 'a + Debug + Ord, V: 'a> Debug for VacantEntry<'a, K, V> {\n     }\n }\n \n-/// An occupied Entry. It is part of the [`Entry`] enum.\n+/// An occupied `Entry`. It is part of the [`Entry`] enum.\n ///\n /// [`Entry`]: enum.Entry.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "ebee75d1a1a6451a99b9cac7a306f018bbff81f0", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=22bae87f3bc86fc5fecc78def65733a1116aedbe", "patch": "@@ -215,7 +215,7 @@ impl<E: CLike> BitXor for EnumSet<E> {\n     }\n }\n \n-/// An iterator over an EnumSet\n+/// An iterator over an `EnumSet`\n pub struct Iter<E> {\n     index: usize,\n     bits: usize,"}, {"sha": "79ae2d411b6fd5128c75ba96685cd5db0760b162", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=22bae87f3bc86fc5fecc78def65733a1116aedbe", "patch": "@@ -10,8 +10,8 @@\n \n //! Collection types.\n //!\n-//! See [std::collections](../std/collections/index.html) for a detailed discussion of\n-//! collections in Rust.\n+//! See [`std::collections`](../std/collections/index.html) for a detailed\n+//! discussion of collections in Rust.\n \n #![crate_name = \"collections\"]\n #![crate_type = \"rlib\"]"}, {"sha": "8f3209d015b159ad955f6a31ee7eac0109bd45b6", "filename": "src/libcollections/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Frange.rs?ref=22bae87f3bc86fc5fecc78def65733a1116aedbe", "patch": "@@ -17,7 +17,7 @@\n use core::ops::{RangeFull, Range, RangeTo, RangeFrom, RangeInclusive, RangeToInclusive};\n use Bound::{self, Excluded, Included, Unbounded};\n \n-/// **RangeArgument** is implemented by Rust's built-in range types, produced\n+/// `RangeArgument` is implemented by Rust's built-in range types, produced\n /// by range syntax like `..`, `a..`, `..b` or `c..d`.\n pub trait RangeArgument<T: ?Sized> {\n     /// Start index bound."}, {"sha": "f1ea0010e98c2c2248cafae732884fce2b3d7bec", "filename": "src/libcollections/vec_deque.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22bae87f3bc86fc5fecc78def65733a1116aedbe/src%2Flibcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_deque.rs?ref=22bae87f3bc86fc5fecc78def65733a1116aedbe", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! VecDeque is a double-ended queue, which is implemented with the help of a\n+//! `VecDeque` is a double-ended queue, which is implemented with the help of a\n //! growing ring buffer.\n //!\n //! This queue has `O(1)` amortized inserts and removals from both ends of the\n@@ -1847,7 +1847,7 @@ fn wrap_index(index: usize, size: usize) -> usize {\n     index & (size - 1)\n }\n \n-/// Returns the two slices that cover the VecDeque's valid range\n+/// Returns the two slices that cover the `VecDeque`'s valid range\n trait RingSlices: Sized {\n     fn slice(self, from: usize, to: usize) -> Self;\n     fn split_at(self, i: usize) -> (Self, Self);\n@@ -2047,7 +2047,7 @@ impl<'a, T> ExactSizeIterator for IterMut<'a, T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<'a, T> FusedIterator for IterMut<'a, T> {}\n \n-/// A by-value VecDeque iterator\n+/// A by-value `VecDeque` iterator\n #[derive(Clone)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IntoIter<T> {\n@@ -2097,7 +2097,7 @@ impl<T> ExactSizeIterator for IntoIter<T> {\n #[unstable(feature = \"fused\", issue = \"35602\")]\n impl<T> FusedIterator for IntoIter<T> {}\n \n-/// A draining VecDeque iterator\n+/// A draining `VecDeque` iterator\n #[stable(feature = \"drain\", since = \"1.6.0\")]\n pub struct Drain<'a, T: 'a> {\n     after_tail: usize,"}]}