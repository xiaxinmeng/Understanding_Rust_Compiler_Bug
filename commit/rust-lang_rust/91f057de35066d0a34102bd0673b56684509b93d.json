{"sha": "91f057de35066d0a34102bd0673b56684509b93d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZjA1N2RlMzUwNjZkMGEzNDEwMmJkMDY3M2I1NjY4NDUwOWI5M2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-09-04T21:03:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-09-04T21:03:01Z"}, "message": "Auto merge of #36203 - petrochenkov:uvsdot, r=nrc\n\nReplace `_, _` with `..` in patterns\n\nThis is how https://github.com/rust-lang/rust/issues/33627 looks in action.\n\nLooks especially nice in leftmost/rightmost positions `(first, ..)`/`(.., last)`.\nI haven't touched libsyntax intentionally because the feature is still unstable.", "tree": {"sha": "6255961cbdaab893926148f0919c39be1c279e14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6255961cbdaab893926148f0919c39be1c279e14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91f057de35066d0a34102bd0673b56684509b93d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91f057de35066d0a34102bd0673b56684509b93d", "html_url": "https://github.com/rust-lang/rust/commit/91f057de35066d0a34102bd0673b56684509b93d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91f057de35066d0a34102bd0673b56684509b93d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9cc430d2cf90a38880e02bb319a5563cbe07a40c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc430d2cf90a38880e02bb319a5563cbe07a40c", "html_url": "https://github.com/rust-lang/rust/commit/9cc430d2cf90a38880e02bb319a5563cbe07a40c"}, {"sha": "e05e74ac831bc8438f5daeb98432a29285ed9514", "url": "https://api.github.com/repos/rust-lang/rust/commits/e05e74ac831bc8438f5daeb98432a29285ed9514", "html_url": "https://github.com/rust-lang/rust/commit/e05e74ac831bc8438f5daeb98432a29285ed9514"}], "stats": {"total": 766, "additions": 392, "deletions": 374}, "files": [{"sha": "42200795bb3a53c9e38721845d2ff5ee40858008", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -279,7 +279,7 @@ impl OptGroup {\n                                   }],\n                 }\n             }\n-            (_, _) => panic!(\"something is wrong with the long-form opt\"),\n+            _ => panic!(\"something is wrong with the long-form opt\"),\n         }\n     }\n }"}, {"sha": "25a73226473b7556e3179a7ca77108cf98db7b15", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -99,7 +99,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n     fn pat(&mut self, pat: &hir::Pat, pred: CFGIndex) -> CFGIndex {\n         match pat.node {\n-            PatKind::Binding(_, _, None) |\n+            PatKind::Binding(.., None) |\n             PatKind::Path(..) |\n             PatKind::Lit(..) |\n             PatKind::Range(..) |\n@@ -109,7 +109,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n \n             PatKind::Box(ref subpat) |\n             PatKind::Ref(ref subpat, _) |\n-            PatKind::Binding(_, _, Some(ref subpat)) => {\n+            PatKind::Binding(.., Some(ref subpat)) => {\n                 let subpat_exit = self.pat(&subpat, pred);\n                 self.add_ast_node(pat.id, &[subpat_exit])\n             }\n@@ -306,7 +306,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.call(expr, pred, &func, args.iter().map(|e| &**e))\n             }\n \n-            hir::ExprMethodCall(_, _, ref args) => {\n+            hir::ExprMethodCall(.., ref args) => {\n                 self.call(expr, pred, &args[0], args[1..].iter().map(|e| &**e))\n             }\n "}, {"sha": "a270be4f1dfdaca21dbf27d1db2932afdd3bca5c", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -104,7 +104,7 @@ impl Def {\n     pub fn var_id(&self) -> ast::NodeId {\n         match *self {\n             Def::Local(_, id) |\n-            Def::Upvar(_, id, _, _) => {\n+            Def::Upvar(_, id, ..) => {\n                 id\n             }\n \n@@ -124,7 +124,7 @@ impl Def {\n             Def::Variant(_, id) | Def::Enum(id) | Def::TyAlias(id) | Def::AssociatedTy(_, id) |\n             Def::TyParam(id) | Def::Struct(id) | Def::Union(id) | Def::Trait(id) |\n             Def::Method(id) | Def::Const(id) | Def::AssociatedConst(id) |\n-            Def::Local(id, _) | Def::Upvar(id, _, _, _) => {\n+            Def::Local(id, _) | Def::Upvar(id, ..) => {\n                 id\n             }\n "}, {"sha": "f0caa971d9699ba679cd0386f347b679a8df7d61", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -49,8 +49,8 @@ pub enum FnKind<'a> {\n impl<'a> FnKind<'a> {\n     pub fn attrs(&self) -> &'a [Attribute] {\n         match *self {\n-            FnKind::ItemFn(_, _, _, _, _, _, attrs) => attrs,\n-            FnKind::Method(_, _, _, attrs) => attrs,\n+            FnKind::ItemFn(.., attrs) => attrs,\n+            FnKind::Method(.., attrs) => attrs,\n             FnKind::Closure(attrs) => attrs,\n         }\n     }\n@@ -341,7 +341,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_id(item.id);\n             visitor.visit_trait_ref(trait_ref)\n         }\n-        ItemImpl(_, _, ref type_parameters, ref opt_trait_reference, ref typ, ref impl_items) => {\n+        ItemImpl(.., ref type_parameters, ref opt_trait_reference, ref typ, ref impl_items) => {\n             visitor.visit_id(item.id);\n             visitor.visit_generics(type_parameters);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n@@ -622,10 +622,10 @@ pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declarat\n \n pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) {\n     match function_kind {\n-        FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+        FnKind::ItemFn(_, generics, ..) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, _, _) => {\n+        FnKind::Method(_, sig, ..) => {\n             visitor.visit_generics(&sig.generics);\n         }\n         FnKind::Closure(_) => {}"}, {"sha": "d4e1eb70ae8f96ab14325999c751373ad0297c38", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -109,7 +109,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n                         this.insert(struct_def.id(), NodeStructCtor(struct_def));\n                     }\n                 }\n-                ItemTrait(_, _, ref bounds, _) => {\n+                ItemTrait(.., ref bounds, _) => {\n                     for b in bounds.iter() {\n                         if let TraitTyParamBound(ref t, TraitBoundModifier::None) = *b {\n                             this.insert(t.trait_ref.ref_id, NodeItem(i));"}, {"sha": "e22c9869ab17654edf3386dc84cb15da693ea5ca", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -469,7 +469,7 @@ impl Pat {\n         }\n \n         match self.node {\n-            PatKind::Binding(_, _, Some(ref p)) => p.walk_(it),\n+            PatKind::Binding(.., Some(ref p)) => p.walk_(it),\n             PatKind::Struct(_, ref fields, _) => {\n                 fields.iter().all(|field| field.node.pat.walk_(it))\n             }\n@@ -486,7 +486,7 @@ impl Pat {\n             }\n             PatKind::Wild |\n             PatKind::Lit(_) |\n-            PatKind::Range(_, _) |\n+            PatKind::Range(..) |\n             PatKind::Binding(..) |\n             PatKind::Path(..) => {\n                 true"}, {"sha": "a63bf14cb0238af83123a776e8f9e95c65e5cae9", "filename": "src/librustc/hir/pat_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fhir%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fpat_util.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -53,7 +53,7 @@ impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n \n pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n     match pat.node {\n-        PatKind::Lit(_) | PatKind::Range(_, _) | PatKind::Path(Some(..), _) => true,\n+        PatKind::Lit(_) | PatKind::Range(..) | PatKind::Path(Some(..), _) => true,\n         PatKind::TupleStruct(..) |\n         PatKind::Path(..) |\n         PatKind::Struct(..) => {\n@@ -62,7 +62,7 @@ pub fn pat_is_refutable(dm: &DefMap, pat: &hir::Pat) -> bool {\n                 _ => false\n             }\n         }\n-        PatKind::Vec(_, _, _) => true,\n+        PatKind::Vec(..) => true,\n         _ => false\n     }\n }"}, {"sha": "38f3f055cbb245d4cb3627bdd5df4b3f91a3c431", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -140,9 +140,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     Some(ast_map::NodeExpr(expr)) => match expr.node {\n                         hir::ExprCall(..) => \"call\",\n                         hir::ExprMethodCall(..) => \"method call\",\n-                        hir::ExprMatch(_, _, hir::MatchSource::IfLetDesugar { .. }) => \"if let\",\n-                        hir::ExprMatch(_, _, hir::MatchSource::WhileLetDesugar) =>  \"while let\",\n-                        hir::ExprMatch(_, _, hir::MatchSource::ForLoopDesugar) =>  \"for\",\n+                        hir::ExprMatch(.., hir::MatchSource::IfLetDesugar { .. }) => \"if let\",\n+                        hir::ExprMatch(.., hir::MatchSource::WhileLetDesugar) =>  \"while let\",\n+                        hir::ExprMatch(.., hir::MatchSource::ForLoopDesugar) =>  \"for\",\n                         hir::ExprMatch(..) => \"match\",\n                         _ => \"expression\",\n                     },\n@@ -1787,7 +1787,7 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     let method_id_opt = match tcx.map.find(parent) {\n         Some(node) => match node {\n             ast_map::NodeItem(item) => match item.node {\n-                hir::ItemFn(_, _, _, _, ref gen, _) => {\n+                hir::ItemFn(.., ref gen, _) => {\n                     taken.extend_from_slice(&gen.lifetimes);\n                     None\n                 },\n@@ -1811,7 +1811,7 @@ fn lifetimes_in_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         if let Some(node) = tcx.map.find(parent) {\n             match node {\n                 ast_map::NodeItem(item) => match item.node {\n-                    hir::ItemImpl(_, _, ref gen, _, _, _) => {\n+                    hir::ItemImpl(_, _, ref gen, ..) => {\n                         taken.extend_from_slice(&gen.lifetimes);\n                     }\n                     _ => ()"}, {"sha": "322752ccea3e5cec1bb6c11c9ab13138e2fc6c98", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -684,7 +684,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             warnings.extend(\n                                 match self.region_vars.var_origin(vid) {\n                                     LateBoundRegion(_,\n-                                                    ty::BrNamed(_, _, wc),\n+                                                    ty::BrNamed(.., wc),\n                                                     _) => Some(wc),\n                                     _ => None,\n                                 });"}, {"sha": "59431f3f02dceda2eb34ea865c4a089e2033105a", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -225,7 +225,7 @@ impl TypeOrigin {\n             &TypeOrigin::RelateOutputImplTypes(_) |\n             &TypeOrigin::ExprAssignable(_) => \"mismatched types\",\n             &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n-            &TypeOrigin::MatchExpressionArm(_, _, source) => match source {\n+            &TypeOrigin::MatchExpressionArm(.., source) => match source {\n                 hir::MatchSource::IfLetDesugar{..} => \"`if let` arms have incompatible types\",\n                 _ => \"match arms have incompatible types\",\n             },\n@@ -248,7 +248,7 @@ impl TypeOrigin {\n             &TypeOrigin::RelateOutputImplTypes(_) => {\n                 \"trait type parameters matches those specified on the impl\"\n             }\n-            &TypeOrigin::MatchExpressionArm(_, _, _) => \"match arms have compatible types\",\n+            &TypeOrigin::MatchExpressionArm(..) => \"match arms have compatible types\",\n             &TypeOrigin::IfExpression(_) => \"if and else have compatible types\",\n             &TypeOrigin::IfExpressionWithNoElse(_) => \"if missing an else returns ()\",\n             &TypeOrigin::RangeExpression(_) => \"start and end of range have compatible types\",\n@@ -1712,7 +1712,7 @@ impl TypeOrigin {\n             TypeOrigin::ExprAssignable(span) => span,\n             TypeOrigin::Misc(span) => span,\n             TypeOrigin::RelateOutputImplTypes(span) => span,\n-            TypeOrigin::MatchExpressionArm(match_span, _, _) => match_span,\n+            TypeOrigin::MatchExpressionArm(match_span, ..) => match_span,\n             TypeOrigin::IfExpression(span) => span,\n             TypeOrigin::IfExpressionWithNoElse(span) => span,\n             TypeOrigin::RangeExpression(span) => span,\n@@ -1765,7 +1765,7 @@ impl RegionVariableOrigin {\n             Autoref(a) => a,\n             Coercion(a) => a,\n             EarlyBoundRegion(a, _) => a,\n-            LateBoundRegion(a, _, _) => a,\n+            LateBoundRegion(a, ..) => a,\n             BoundRegionInCoherence(_) => syntax_pos::DUMMY_SP,\n             UpvarRegion(_, a) => a\n         }"}, {"sha": "ef36ffa83192117e10a2435e79b378e479214e90", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -605,15 +605,15 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                                  undo_entry: &UndoLogEntry<'tcx>)\n                                  -> bool {\n             match undo_entry {\n-                &AddConstraint(ConstrainVarSubVar(_, _)) =>\n+                &AddConstraint(ConstrainVarSubVar(..)) =>\n                     false,\n                 &AddConstraint(ConstrainRegSubVar(a, _)) =>\n                     skols.contains(&a),\n                 &AddConstraint(ConstrainVarSubReg(_, b)) =>\n                     skols.contains(&b),\n                 &AddConstraint(ConstrainRegSubReg(a, b)) =>\n                     skols.contains(&a) || skols.contains(&b),\n-                &AddGiven(_, _) =>\n+                &AddGiven(..) =>\n                     false,\n                 &AddVerify(_) =>\n                     false,\n@@ -1372,7 +1372,7 @@ impl<'a, 'gcx, 'tcx> RegionVarBindings<'a, 'gcx, 'tcx> {\n                 (&ReFree(..), &ReFree(..)) => Equal,\n                 (&ReFree(..), _) => Less,\n                 (_, &ReFree(..)) => Greater,\n-                (_, _) => Equal,\n+                (..) => Equal,\n             }\n         }\n         lower_bounds.sort_by(|a, b| free_regions_first(a, b));"}, {"sha": "da9fd1cff2b46ea7da15a33bdf675a3c5b538f9c", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -267,7 +267,7 @@ impl<'tcx> TypeVariableTable<'tcx> {\n                     debug!(\"NewElem({}) new_elem_threshold={}\", index, new_elem_threshold);\n                 }\n \n-                sv::UndoLog::Other(SpecifyVar(vid, _, _)) => {\n+                sv::UndoLog::Other(SpecifyVar(vid, ..)) => {\n                     if vid.index < new_elem_threshold {\n                         // quick check to see if this variable was\n                         // created since the snapshot started or not."}, {"sha": "f70349d0ee08bd80b80becca173598ecb950fc6d", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -30,6 +30,7 @@\n #![feature(conservative_impl_trait)]\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(enumset)]\n #![feature(libc)]\n #![feature(nonzero)]"}, {"sha": "8cb362c1625a586a9b7bec09d41a8eac4938abe1", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -344,7 +344,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n                 self.worklist.extend(enum_def.variants.iter()\n                                                       .map(|variant| variant.node.data.id()));\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     match trait_item.node {\n                         hir::ConstTraitItem(_, Some(_)) |\n@@ -357,7 +357,7 @@ impl<'v> Visitor<'v> for LifeSeeder {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, ref opt_trait, _, ref impl_items) => {\n+            hir::ItemImpl(.., ref opt_trait, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     if opt_trait.is_some() ||\n                             has_allow_dead_code_or_lang_attr(&impl_item.attrs) {"}, {"sha": "a7af0b50b849416f6c8902539c301b88b5cd4aa3", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -43,7 +43,7 @@ enum RootUnsafeContext {\n \n fn type_is_unsafe_function(ty: Ty) -> bool {\n     match ty.sty {\n-        ty::TyFnDef(_, _, ref f) |\n+        ty::TyFnDef(.., ref f) |\n         ty::TyFnPtr(ref f) => f.unsafety == hir::Unsafety::Unsafe,\n         _ => false,\n     }\n@@ -83,9 +83,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v hir::Block, span: Span, id: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            FnKind::ItemFn(_, _, unsafety, _, _, _, _) =>\n+            FnKind::ItemFn(_, _, unsafety, ..) =>\n                 (true, unsafety == hir::Unsafety::Unsafe),\n-            FnKind::Method(_, sig, _, _) =>\n+            FnKind::Method(_, sig, ..) =>\n                 (true, sig.unsafety == hir::Unsafety::Unsafe),\n             _ => (false, false),\n         };\n@@ -143,7 +143,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n \n     fn visit_expr(&mut self, expr: &hir::Expr) {\n         match expr.node {\n-            hir::ExprMethodCall(_, _, _) => {\n+            hir::ExprMethodCall(..) => {\n                 let method_call = MethodCall::expr(expr.id);\n                 let base_type = self.tcx.tables.borrow().method_map[&method_call].ty;\n                 debug!(\"effect: method call case, base type is {:?}\","}, {"sha": "d32954d3800ad5643e5490e41295dbdafde18e80", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_exprs(args);\n             }\n \n-            hir::ExprMethodCall(_, _, ref args) => { // callee.m(args)\n+            hir::ExprMethodCall(.., ref args) => { // callee.m(args)\n                 self.consume_exprs(args);\n             }\n \n@@ -544,7 +544,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_expr(&count);\n             }\n \n-            hir::ExprClosure(_, _, _, fn_decl_span) => {\n+            hir::ExprClosure(.., fn_decl_span) => {\n                 self.walk_captures(expr, fn_decl_span)\n             }\n \n@@ -940,9 +940,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                pat);\n         return_if_err!(self.mc.cat_pattern(cmt_discr, pat, |_mc, cmt_pat, pat| {\n             match pat.node {\n-                PatKind::Binding(hir::BindByRef(..), _, _) =>\n+                PatKind::Binding(hir::BindByRef(..), ..) =>\n                     mode.lub(BorrowingMatch),\n-                PatKind::Binding(hir::BindByValue(..), _, _) => {\n+                PatKind::Binding(hir::BindByValue(..), ..) => {\n                     match copy_or_move(self.mc.infcx, &cmt_pat, PatBindingMove) {\n                         Copy => mode.lub(CopyingMatch),\n                         Move(..) => mode.lub(MovingMatch),\n@@ -964,7 +964,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let infcx = self.mc.infcx;\n         let delegate = &mut self.delegate;\n         return_if_err!(mc.cat_pattern(cmt_discr.clone(), pat, |mc, cmt_pat, pat| {\n-            if let PatKind::Binding(bmode, _, _) = pat.node {\n+            if let PatKind::Binding(bmode, ..) = pat.node {\n                 debug!(\"binding cmt_pat={:?} pat={:?} match_mode={:?}\", cmt_pat, pat, match_mode);\n \n                 // pat_ty: the type of the binding being produced."}, {"sha": "61bcc05bbb4f4d25c6549cb285f17b42c26edc3f", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -52,7 +52,7 @@ struct ExprVisitor<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n impl<'a, 'gcx, 'tcx> ExprVisitor<'a, 'gcx, 'tcx> {\n     fn def_id_is_transmute(&self, def_id: DefId) -> bool {\n         let intrinsic = match self.infcx.tcx.lookup_item_type(def_id).ty.sty {\n-            ty::TyFnDef(_, _, ref bfty) => bfty.abi == RustIntrinsic,\n+            ty::TyFnDef(.., ref bfty) => bfty.abi == RustIntrinsic,\n             _ => return false\n         };\n         intrinsic && self.infcx.tcx.item_name(def_id).as_str() == \"transmute\"\n@@ -160,7 +160,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for ExprVisitor<'a, 'gcx, 'tcx> {\n                 Def::Fn(did) if self.def_id_is_transmute(did) => {\n                     let typ = self.infcx.tcx.node_id_to_type(expr.id);\n                     match typ.sty {\n-                        ty::TyFnDef(_, _, ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n+                        ty::TyFnDef(.., ref bare_fn_ty) if bare_fn_ty.abi == RustIntrinsic => {\n                             let from = bare_fn_ty.sig.0.inputs[0];\n                             let to = bare_fn_ty.sig.0.output;\n                             self.check_transmute(expr.span, from, to, expr.id);"}, {"sha": "b579c69cd05c088276b510ebe000b1dde47f6489", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -482,7 +482,7 @@ fn visit_expr(ir: &mut IrMaps, expr: &Expr) {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         intravisit::walk_expr(ir, expr);\n       }\n-      hir::ExprBinary(op, _, _) if op.node.is_lazy() => {\n+      hir::ExprBinary(op, ..) if op.node.is_lazy() => {\n         ir.add_live_node_for_node(expr.id, ExprNode(expr.span));\n         intravisit::walk_expr(ir, expr);\n       }\n@@ -943,7 +943,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n               self.propagate_through_expr(&e, succ)\n           }\n \n-          hir::ExprClosure(_, _, ref blk, _) => {\n+          hir::ExprClosure(.., ref blk, _) => {\n               debug!(\"{} is an ExprClosure\",\n                      expr_to_string(expr));\n \n@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&f, succ)\n           }\n \n-          hir::ExprMethodCall(_, _, ref args) => {\n+          hir::ExprMethodCall(.., ref args) => {\n             let method_call = ty::MethodCall::expr(expr.id);\n             let method_ty = self.ir.tcx.tables.borrow().method_map[&method_call].ty;\n             // FIXME(canndrew): This is_never should really be an is_uninhabited"}, {"sha": "f8eb0d4a0ece8dc1a46fb0d839413da28e72582d", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -228,7 +228,7 @@ fn deref_kind(t: Ty, context: DerefKindContext) -> McResult<deref_kind> {\n             Ok(deref_interior(InteriorField(PositionalField(0))))\n         }\n \n-        ty::TyArray(_, _) | ty::TySlice(_) => {\n+        ty::TyArray(..) | ty::TySlice(_) => {\n             // no deref of indexed content without supplying InteriorOffsetKind\n             if let Some(context) = context {\n                 Ok(deref_interior(InteriorElement(context, ElementKind::VecElement)))\n@@ -318,7 +318,7 @@ impl MutabilityCategory {\n     fn from_local(tcx: TyCtxt, id: ast::NodeId) -> MutabilityCategory {\n         let ret = match tcx.map.get(id) {\n             ast_map::NodeLocal(p) => match p.node {\n-                PatKind::Binding(bind_mode, _, _) => {\n+                PatKind::Binding(bind_mode, ..) => {\n                     if bind_mode == hir::BindByValue(hir::MutMutable) {\n                         McDeclared\n                     } else {\n@@ -419,7 +419,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n         // *being borrowed* is.  But ideally we would put in a more\n         // fundamental fix to this conflated use of the node id.\n         let ret_ty = match pat.node {\n-            PatKind::Binding(hir::BindByRef(_), _, _) => {\n+            PatKind::Binding(hir::BindByRef(_), ..) => {\n                 // a bind-by-ref means that the base_ty will be the type of the ident itself,\n                 // but what we want here is the type of the underlying value being borrowed.\n                 // So peel off one-level, turning the &T into T.\n@@ -761,7 +761,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             };\n \n             match fn_expr.node {\n-                hir::ExprClosure(_, _, ref body, _) => body.id,\n+                hir::ExprClosure(.., ref body, _) => body.id,\n                 _ => bug!()\n             }\n         };\n@@ -1185,7 +1185,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n           }\n \n-          PatKind::Binding(_, _, Some(ref subpat)) => {\n+          PatKind::Binding(.., Some(ref subpat)) => {\n               self.cat_pattern_(cmt, &subpat, op)?;\n           }\n \n@@ -1225,7 +1225,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n             }\n           }\n \n-          PatKind::Path(..) | PatKind::Binding(_, _, None) |\n+          PatKind::Path(..) | PatKind::Binding(.., None) |\n           PatKind::Lit(..) | PatKind::Range(..) | PatKind::Wild => {\n             // always ok\n           }\n@@ -1275,9 +1275,9 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Rvalue(..) |\n             Categorization::StaticItem |\n             Categorization::Local(..) |\n-            Categorization::Deref(_, _, UnsafePtr(..)) |\n-            Categorization::Deref(_, _, BorrowedPtr(..)) |\n-            Categorization::Deref(_, _, Implicit(..)) |\n+            Categorization::Deref(.., UnsafePtr(..)) |\n+            Categorization::Deref(.., BorrowedPtr(..)) |\n+            Categorization::Deref(.., Implicit(..)) |\n             Categorization::Upvar(..) => {\n                 Rc::new((*self).clone())\n             }\n@@ -1320,7 +1320,7 @@ impl<'tcx> cmt_<'tcx> {\n             Categorization::Rvalue(..) |\n             Categorization::Local(..) |\n             Categorization::Upvar(..) |\n-            Categorization::Deref(_, _, UnsafePtr(..)) => { // yes, it's aliasable, but...\n+            Categorization::Deref(.., UnsafePtr(..)) => { // yes, it's aliasable, but...\n                 NonAliasable\n             }\n \n@@ -1349,9 +1349,9 @@ impl<'tcx> cmt_<'tcx> {\n         match self.note {\n             NoteClosureEnv(..) | NoteUpvarRef(..) => {\n                 Some(match self.cat {\n-                    Categorization::Deref(ref inner, _, _) => {\n+                    Categorization::Deref(ref inner, ..) => {\n                         match inner.cat {\n-                            Categorization::Deref(ref inner, _, _) => inner.clone(),\n+                            Categorization::Deref(ref inner, ..) => inner.clone(),\n                             Categorization::Upvar(..) => inner.clone(),\n                             _ => bug!()\n                         }\n@@ -1379,7 +1379,7 @@ impl<'tcx> cmt_<'tcx> {\n                     \"local variable\".to_string()\n                 }\n             }\n-            Categorization::Deref(_, _, pk) => {\n+            Categorization::Deref(.., pk) => {\n                 let upvar = self.upvar();\n                 match upvar.as_ref().map(|i| &i.cat) {\n                     Some(&Categorization::Upvar(ref var)) => {"}, {"sha": "beffaff1e5b8a491f254593c2b080c28a070cb26", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -46,8 +46,8 @@ fn item_might_be_inlined(item: &hir::Item) -> bool {\n     }\n \n     match item.node {\n-        hir::ItemImpl(_, _, ref generics, _, _, _) |\n-        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+        hir::ItemImpl(_, _, ref generics, ..) |\n+        hir::ItemFn(.., ref generics, _) => {\n             generics_require_inlining(generics)\n         }\n         _ => false,\n@@ -187,7 +187,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             // does too.\n                             let impl_node_id = self.tcx.map.as_local_node_id(impl_did).unwrap();\n                             match self.tcx.map.expect_item(impl_node_id).node {\n-                                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                                hir::ItemImpl(_, _, ref generics, ..) => {\n                                     generics_require_inlining(generics)\n                                 }\n                                 _ => false\n@@ -226,7 +226,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n             if let ast_map::NodeItem(item) = *node {\n-                let reachable = if let hir::ItemFn(_, _, _, abi, _, _) = item.node {\n+                let reachable = if let hir::ItemFn(.., abi, _, _) = item.node {\n                     abi != Abi::Rust\n                 } else {\n                     false\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n         match *node {\n             ast_map::NodeItem(item) => {\n                 match item.node {\n-                    hir::ItemFn(_, _, _, _, _, ref search_block) => {\n+                    hir::ItemFn(.., ref search_block) => {\n                         if item_might_be_inlined(&item) {\n                             intravisit::walk_block(self, &search_block)\n                         }\n@@ -265,7 +265,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                     // inherently and their children are already in the\n                     // worklist, as determined by the privacy pass\n                     hir::ItemExternCrate(_) | hir::ItemUse(_) |\n-                    hir::ItemTy(..) | hir::ItemStatic(_, _, _) |\n+                    hir::ItemTy(..) | hir::ItemStatic(..) |\n                     hir::ItemMod(..) | hir::ItemForeignMod(..) |\n                     hir::ItemImpl(..) | hir::ItemTrait(..) |\n                     hir::ItemStruct(..) | hir::ItemEnum(..) |\n@@ -329,7 +329,7 @@ struct CollectPrivateImplItemsVisitor<'a> {\n impl<'a, 'v> Visitor<'v> for CollectPrivateImplItemsVisitor<'a> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         // We need only trait impls here, not inherent impls, and only non-exported ones\n-        if let hir::ItemImpl(_, _, _, Some(_), _, ref impl_items) = item.node {\n+        if let hir::ItemImpl(.., Some(_), _, ref impl_items) = item.node {\n             if !self.access_levels.is_reachable(item.id) {\n                 for impl_item in impl_items {\n                     self.worklist.push(impl_item.id);"}, {"sha": "fb99820f7c85591ca505c7036c205664967a1006", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -956,7 +956,7 @@ fn resolve_local(visitor: &mut RegionResolutionVisitor, local: &hir::Local) {\n     ///        | box P&\n     fn is_binding_pat(pat: &hir::Pat) -> bool {\n         match pat.node {\n-            PatKind::Binding(hir::BindByRef(_), _, _) => true,\n+            PatKind::Binding(hir::BindByRef(_), ..) => true,\n \n             PatKind::Struct(_, ref field_pats, _) => {\n                 field_pats.iter().any(|fp| is_binding_pat(&fp.node.pat))"}, {"sha": "e897b16efab5a64c6a4eff3fc65e58c7b6a527a5", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -157,8 +157,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n                 hir::ItemEnum(_, ref generics) |\n                 hir::ItemStruct(_, ref generics) |\n                 hir::ItemUnion(_, ref generics) |\n-                hir::ItemTrait(_, ref generics, _, _) |\n-                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                hir::ItemTrait(_, ref generics, ..) |\n+                hir::ItemImpl(_, _, ref generics, ..) => {\n                     // These kinds of items have only early bound lifetime parameters.\n                     let lifetimes = &generics.lifetimes;\n                     let start = if let hir::ItemTrait(..) = item.node {\n@@ -204,12 +204,12 @@ impl<'a, 'tcx, 'v> Visitor<'v> for LifetimeContext<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: FnKind<'v>, decl: &'v hir::FnDecl,\n                 b: &'v hir::Block, s: Span, fn_id: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_early_late(fn_id,decl, generics, |this| {\n                     this.add_scope_and_walk_fn(fk, decl, b, s, fn_id)\n                 })\n             }\n-            FnKind::Method(_, sig, _, _) => {\n+            FnKind::Method(_, sig, ..) => {\n                 self.visit_early_late(\n                     fn_id,\n                     decl,\n@@ -455,7 +455,7 @@ fn extract_labels(ctxt: &mut LifetimeContext, b: &hir::Block) {\n \n     fn expression_label(ex: &hir::Expr) -> Option<(ast::Name, Span)> {\n         match ex.node {\n-            hir::ExprWhile(_, _, Some(label)) |\n+            hir::ExprWhile(.., Some(label)) |\n             hir::ExprLoop(_, Some(label)) => Some((label.node, label.span)),\n             _ => None,\n         }\n@@ -499,11 +499,11 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                                  fn_id: ast::NodeId) {\n \n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }\n-            FnKind::Method(_, sig, _, _) => {\n+            FnKind::Method(_, sig, ..) => {\n                 intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(&sig.generics);\n             }\n@@ -583,8 +583,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 start += 1; // Self comes first.\n             }\n             match parent.node {\n-                hir::ItemTrait(_, ref generics, _, _) |\n-                hir::ItemImpl(_, _, ref generics, _, _, _) => {\n+                hir::ItemTrait(_, ref generics, ..) |\n+                hir::ItemImpl(_, _, ref generics, ..) => {\n                     start += generics.lifetimes.len() + generics.ty_params.len();\n                 }\n                 _ => {}"}, {"sha": "c62c99c3b70626bd1b11751ab8a18d7ae3857666", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -252,11 +252,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for Annotator<'a, 'tcx> {\n             // they don't have their own stability. They still can be annotated as unstable\n             // and propagate this unstability to children, but this annotation is completely\n             // optional. They inherit stability from their parents when unannotated.\n-            hir::ItemImpl(_, _, _, None, _, _) | hir::ItemForeignMod(..) => {\n+            hir::ItemImpl(.., None, _, _) | hir::ItemForeignMod(..) => {\n                 self.in_trait_impl = false;\n                 kind = AnnotationKind::Container;\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 self.in_trait_impl = true;\n             }\n             hir::ItemStruct(ref sd, _) => {\n@@ -528,7 +528,7 @@ pub fn check_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // For implementations of traits, check the stability of each item\n         // individually as it's possible to have a stable trait with unstable\n         // items.\n-        hir::ItemImpl(_, _, _, Some(ref t), _, ref impl_items) => {\n+        hir::ItemImpl(.., Some(ref t), _, ref impl_items) => {\n             let trait_did = tcx.expect_def(t.ref_id).def_id();\n             let trait_items = tcx.trait_items(trait_did);\n \n@@ -553,7 +553,7 @@ pub fn check_expr<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, e: &hir::Expr,\n                                            &Option<DeprecationEntry>)) {\n     let span;\n     let id = match e.node {\n-        hir::ExprMethodCall(i, _, _) => {\n+        hir::ExprMethodCall(i, ..) => {\n             span = i.span;\n             let method_call = ty::MethodCall::expr(e.id);\n             tcx.tables.borrow().method_map[&method_call].def_id"}, {"sha": "c82e723525b45d7b26fd6013687a70f07137f74d", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -153,7 +153,7 @@ impl<'tcx> Rvalue<'tcx> {\n                 ))\n             }\n             &Rvalue::Len(..) => Some(tcx.types.usize),\n-            &Rvalue::Cast(_, _, ty) => Some(ty),\n+            &Rvalue::Cast(.., ty) => Some(ty),\n             &Rvalue::BinaryOp(op, ref lhs, ref rhs) => {\n                 let lhs_ty = lhs.ty(mir, tcx);\n                 let rhs_ty = rhs.ty(mir, tcx);"}, {"sha": "f3fd4c6186e76b170a069c1a8aca4021e8c009a1", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1539,8 +1539,8 @@ pub fn get_unstable_features_setting() -> UnstableFeatures {\n     let bootstrap_provided_key = env::var(\"RUSTC_BOOTSTRAP_KEY\").ok();\n     match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n         (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n-        (true, _, _) => UnstableFeatures::Disallow,\n-        (false, _, _) => UnstableFeatures::Allow\n+        (true, ..) => UnstableFeatures::Disallow,\n+        (false, ..) => UnstableFeatures::Allow\n     }\n }\n "}, {"sha": "3f2bc8cbd13c5074a1ab3331d5d43644da5ea3a0", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1379,7 +1379,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // provide an impl, but only for suitable `fn` pointers\n-            ty::TyFnDef(_, _, &ty::BareFnTy {\n+            ty::TyFnDef(.., &ty::BareFnTy {\n                 unsafety: hir::Unsafety::Normal,\n                 abi: Abi::Rust,\n                 sig: ty::Binder(ty::FnSig {\n@@ -1635,7 +1635,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n \n             // [T; n] -> [T].\n-            (&ty::TyArray(_, _), &ty::TySlice(_)) => true,\n+            (&ty::TyArray(..), &ty::TySlice(_)) => true,\n \n             // Struct<T> -> Struct<U>.\n             (&ty::TyStruct(def_id_a, _), &ty::TyStruct(def_id_b, _)) => {"}, {"sha": "3386d894196fa8212d742d70774a0ddc94a6fc61", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -160,7 +160,7 @@ impl<'a, 'gcx, 'tcx> ty::TyS<'tcx> {\n \n                     AdjustReifyFnPointer => {\n                         match self.sty {\n-                            ty::TyFnDef(_, _, f) => tcx.mk_fn_ptr(f),\n+                            ty::TyFnDef(.., f) => tcx.mk_fn_ptr(f),\n                             _ => {\n                                 bug!(\"AdjustReifyFnPointer adjustment on non-fn-item: {:?}\",\n                                      self);"}, {"sha": "e0e8a329e6e1dc01026420f9399163160b2580d1", "filename": "src/librustc/ty/contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fcontents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fcontents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontents.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> ty::TyS<'tcx> {\n                     TC::None\n                 }\n \n-                ty::TyRef(_, _) => {\n+                ty::TyRef(..) => {\n                     TC::None\n                 }\n "}, {"sha": "84f34a640dd8e40ffe6e2370c24a965c796be2e9", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -90,7 +90,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyTuple(ref tys) => {\n             Some(TupleSimplifiedType(tys.len()))\n         }\n-        ty::TyFnDef(_, _, ref f) | ty::TyFnPtr(ref f) => {\n+        ty::TyFnDef(.., ref f) | ty::TyFnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.sig.0.inputs.len()))\n         }\n         ty::TyProjection(_) | ty::TyParam(_) => {"}, {"sha": "ddb0a6970cba5227659cb0d2c1cb7d238c7ffca6", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -337,7 +337,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n                                    .filter_map(|ty| characteristic_def_id_of_type(ty))\n                                    .next(),\n \n-        ty::TyFnDef(def_id, _, _) |\n+        ty::TyFnDef(def_id, ..) |\n         ty::TyClosure(def_id, _) => Some(def_id),\n \n         ty::TyBool |"}, {"sha": "dfe24d5627bf19c9f1550e4b331f9f17d3ea2ed4", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1269,7 +1269,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n         match tcx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::ImplItemKind::Type(_) | hir::ImplItemKind::Const(_, _) => {\n+                    hir::ImplItemKind::Type(_) | hir::ImplItemKind::Const(..) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = tcx.map.get_parent(id);\n@@ -1336,7 +1336,7 @@ impl<'a, 'tcx> ParameterEnvironment<'tcx> {\n             }\n             Some(ast_map::NodeItem(item)) => {\n                 match item.node {\n-                    hir::ItemFn(_, _, _, _, _, ref body) => {\n+                    hir::ItemFn(.., ref body) => {\n                         // We assume this is a function.\n                         let fn_def_id = tcx.map.local_def_id(id);\n \n@@ -2262,7 +2262,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn provided_trait_methods(self, id: DefId) -> Vec<Rc<Method<'gcx>>> {\n         if let Some(id) = self.map.as_local_node_id(id) {\n-            if let ItemTrait(_, _, _, ref ms) = self.map.expect_item(id).node {\n+            if let ItemTrait(.., ref ms) = self.map.expect_item(id).node {\n                 ms.iter().filter_map(|ti| {\n                     if let hir::MethodTraitItem(_, Some(_)) = ti.node {\n                         match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n@@ -2288,9 +2288,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn associated_consts(self, id: DefId) -> Vec<Rc<AssociatedConst<'gcx>>> {\n         if let Some(id) = self.map.as_local_node_id(id) {\n             match self.map.expect_item(id).node {\n-                ItemTrait(_, _, _, ref tis) => {\n+                ItemTrait(.., ref tis) => {\n                     tis.iter().filter_map(|ti| {\n-                        if let hir::ConstTraitItem(_, _) = ti.node {\n+                        if let hir::ConstTraitItem(..) = ti.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ti.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {\n@@ -2304,9 +2304,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                         }\n                     }).collect()\n                 }\n-                ItemImpl(_, _, _, _, _, ref iis) => {\n+                ItemImpl(.., ref iis) => {\n                     iis.iter().filter_map(|ii| {\n-                        if let hir::ImplItemKind::Const(_, _) = ii.node {\n+                        if let hir::ImplItemKind::Const(..) = ii.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ii.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {\n@@ -2334,7 +2334,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             match self.map.find(id) {\n                 Some(ast_map::NodeItem(item)) => {\n                     match item.node {\n-                        hir::ItemImpl(_, polarity, _, _, _, _) => Some(polarity),\n+                        hir::ItemImpl(_, polarity, ..) => Some(polarity),\n                         _ => None\n                     }\n                 }"}, {"sha": "7ded2b05f3b5b3e19dfdbdcdf6980d91da28528a", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1171,15 +1171,15 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> {\n         match self.sty {\n-            TyFnDef(_, _, ref f) | TyFnPtr(ref f) => &f.sig,\n+            TyFnDef(.., ref f) | TyFnPtr(ref f) => &f.sig,\n             _ => bug!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n         }\n     }\n \n     /// Returns the ABI of the given function.\n     pub fn fn_abi(&self) -> abi::Abi {\n         match self.sty {\n-            TyFnDef(_, _, ref f) | TyFnPtr(ref f) => f.abi,\n+            TyFnDef(.., ref f) | TyFnPtr(ref f) => f.abi,\n             _ => bug!(\"Ty::fn_abi() called on non-fn type\"),\n         }\n     }\n@@ -1252,7 +1252,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyFloat(_) |\n             TyBox(_) |\n             TyStr |\n-            TyArray(_, _) |\n+            TyArray(..) |\n             TySlice(_) |\n             TyRawPtr(_) |\n             TyNever |"}, {"sha": "51ca6bfeb5affc4a11b8fe8c5330f5811f077f40", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -439,7 +439,7 @@ impl<'a, 'gcx, 'tcx> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx> {\n             TyRef(_, m) => self.hash(m.mutbl),\n             TyClosure(def_id, _) |\n             TyAnon(def_id, _) |\n-            TyFnDef(def_id, _, _) => self.def_id(def_id),\n+            TyFnDef(def_id, ..) => self.def_id(def_id),\n             TyFnPtr(f) => {\n                 self.hash(f.unsafety);\n                 self.hash(f.abi);"}, {"sha": "6f4c48d632a7a64ca24bdcf515dde7ff8d81de73", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -56,7 +56,7 @@ fn owned_ptr_base_path<'a, 'tcx>(loan_path: &'a LoanPath<'tcx>) -> &'a LoanPath<\n                 }\n             }\n             LpDowncast(ref lp_base, _) |\n-            LpExtend(ref lp_base, _, _) => helper(&lp_base)\n+            LpExtend(ref lp_base, ..) => helper(&lp_base)\n         }\n     }\n }\n@@ -80,7 +80,7 @@ fn owned_ptr_base_path_rc<'tcx>(loan_path: &Rc<LoanPath<'tcx>>) -> Rc<LoanPath<'\n                 }\n             }\n             LpDowncast(ref lp_base, _) |\n-            LpExtend(ref lp_base, _, _) => helper(lp_base)\n+            LpExtend(ref lp_base, ..) => helper(lp_base)\n         }\n     }\n }\n@@ -312,7 +312,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                     break;\n                 }\n                 LpDowncast(ref lp_base, _) |\n-                LpExtend(ref lp_base, _, _) => {\n+                LpExtend(ref lp_base, ..) => {\n                     loan_path = &lp_base;\n                 }\n             }\n@@ -542,7 +542,7 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n                     err\n                 }\n \n-                (_, _) => {\n+                (..) => {\n                     let mut err = struct_span_err!(self.bccx, new_loan.span, E0502,\n                                                    \"cannot borrow `{}`{} as {} because \\\n                                                    {} is also borrowed as {}{}\","}, {"sha": "45f5c3288a6d063eca5ba97dddffa651fbbbf185", "filename": "src/librustc_borrowck/borrowck/fragments.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Ffragments.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -365,9 +365,9 @@ fn add_fragment_siblings<'a, 'tcx>(this: &MoveData<'tcx>,\n         }\n \n         // *LV for unsafe and borrowed pointers do not consume their loan path, so stop here.\n-        LpExtend(_, _, LpDeref(mc::UnsafePtr(..)))   |\n-        LpExtend(_, _, LpDeref(mc::Implicit(..)))    |\n-        LpExtend(_, _, LpDeref(mc::BorrowedPtr(..))) => {}\n+        LpExtend(.., LpDeref(mc::UnsafePtr(..)))   |\n+        LpExtend(.., LpDeref(mc::Implicit(..)))    |\n+        LpExtend(.., LpDeref(mc::BorrowedPtr(..))) => {}\n \n         // FIXME (pnkfelix): LV[j] should be tracked, at least in the\n         // sense of we will track the remaining drop obligation of the\n@@ -378,7 +378,7 @@ fn add_fragment_siblings<'a, 'tcx>(this: &MoveData<'tcx>,\n         // bind.\n         //\n         // Anyway, for now: LV[j] is not tracked precisely\n-        LpExtend(_, _, LpInterior(_, InteriorElement(..))) => {\n+        LpExtend(.., LpInterior(_, InteriorElement(..))) => {\n             let mp = this.move_path(tcx, lp.clone());\n             gathered_fragments.push(AllButOneFrom(mp));\n         }"}, {"sha": "5f2d6c406c4b99187ecbd84383e099cdc83704ec", "filename": "src/librustc_borrowck/borrowck/gather_loans/gather_moves.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fgather_moves.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -161,9 +161,9 @@ fn check_and_get_illegal_move_origin<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                                cmt: &mc::cmt<'tcx>)\n                                                -> Option<mc::cmt<'tcx>> {\n     match cmt.cat {\n-        Categorization::Deref(_, _, mc::BorrowedPtr(..)) |\n-        Categorization::Deref(_, _, mc::Implicit(..)) |\n-        Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n+        Categorization::Deref(.., mc::BorrowedPtr(..)) |\n+        Categorization::Deref(.., mc::Implicit(..)) |\n+        Categorization::Deref(.., mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n             Some(cmt.clone())\n         }"}, {"sha": "5970d6e4f2f657217012a1729c90d1880e68a14e", "filename": "src/librustc_borrowck/borrowck/gather_loans/lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Flifetime.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -74,9 +74,9 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n             Categorization::Rvalue(..) |\n             Categorization::Local(..) |                         // L-Local\n             Categorization::Upvar(..) |\n-            Categorization::Deref(_, _, mc::BorrowedPtr(..)) |  // L-Deref-Borrowed\n-            Categorization::Deref(_, _, mc::Implicit(..)) |\n-            Categorization::Deref(_, _, mc::UnsafePtr(..)) => {\n+            Categorization::Deref(.., mc::BorrowedPtr(..)) |  // L-Deref-Borrowed\n+            Categorization::Deref(.., mc::Implicit(..)) |\n+            Categorization::Deref(.., mc::UnsafePtr(..)) => {\n                 self.check_scope(self.scope(cmt))\n             }\n \n@@ -119,11 +119,11 @@ impl<'a, 'tcx> GuaranteeLifetimeContext<'a, 'tcx> {\n                     self.bccx.tcx.region_maps.var_scope(local_id)))\n             }\n             Categorization::StaticItem |\n-            Categorization::Deref(_, _, mc::UnsafePtr(..)) => {\n+            Categorization::Deref(.., mc::UnsafePtr(..)) => {\n                 self.bccx.tcx.mk_region(ty::ReStatic)\n             }\n-            Categorization::Deref(_, _, mc::BorrowedPtr(_, r)) |\n-            Categorization::Deref(_, _, mc::Implicit(_, r)) => {\n+            Categorization::Deref(.., mc::BorrowedPtr(_, r)) |\n+            Categorization::Deref(.., mc::Implicit(_, r)) => {\n                 r\n             }\n             Categorization::Downcast(ref cmt, _) |"}, {"sha": "763c012a8f8abb313ab7932ec1bcad227d44bd08", "filename": "src/librustc_borrowck/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -205,7 +205,7 @@ fn check_aliasability<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                         alias_cause);\n             Err(())\n         }\n-        (_, _) => {\n+        (..) => {\n             Ok(())\n         }\n     }"}, {"sha": "bda68a1cd1ceb9e8c5d512d634ac44d02d0c9ff4", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -117,9 +117,9 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                                        move_from: mc::cmt<'tcx>)\n                                        -> DiagnosticBuilder<'a> {\n     match move_from.cat {\n-        Categorization::Deref(_, _, mc::BorrowedPtr(..)) |\n-        Categorization::Deref(_, _, mc::Implicit(..)) |\n-        Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n+        Categorization::Deref(.., mc::BorrowedPtr(..)) |\n+        Categorization::Deref(.., mc::Implicit(..)) |\n+        Categorization::Deref(.., mc::UnsafePtr(..)) |\n         Categorization::StaticItem => {\n             let mut err = struct_span_err!(bccx, move_from.span, E0507,\n                              \"cannot move out of {}\","}, {"sha": "9c462feeaadd7f0a7967b20433d4df0c8c8c1201", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -67,8 +67,8 @@ pub fn borrowck_mir<'a, 'tcx: 'a>(\n     id: ast::NodeId,\n     attributes: &[ast::Attribute]) {\n     match fk {\n-        FnKind::ItemFn(name, _, _, _, _, _, _) |\n-        FnKind::Method(name, _, _, _) => {\n+        FnKind::ItemFn(name, ..) |\n+        FnKind::Method(name, ..) => {\n             debug!(\"borrowck_mir({}) UNIMPLEMENTED\", name);\n         }\n         FnKind::Closure(_) => {"}, {"sha": "5d62629b648109d638d92c93a90a112f982453a3", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -142,7 +142,7 @@ fn borrowck_item(this: &mut BorrowckCtxt, item: &hir::Item) {\n     // loan step is intended for things that have a data\n     // flow dependent conditions.\n     match item.node {\n-        hir::ItemStatic(_, _, ref ex) |\n+        hir::ItemStatic(.., ref ex) |\n         hir::ItemConst(_, ref ex) => {\n             gather_loans::gather_loans_in_static_initializer(this, item.id, &ex);\n         }\n@@ -422,7 +422,7 @@ pub fn closure_to_block(closure_id: ast::NodeId,\n                         tcx: TyCtxt) -> ast::NodeId {\n     match tcx.map.get(closure_id) {\n         hir_map::NodeExpr(expr) => match expr.node {\n-            hir::ExprClosure(_, _, ref block, _) => {\n+            hir::ExprClosure(.., ref block, _) => {\n                 block.id\n             }\n             _ => {\n@@ -442,7 +442,7 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n                 tcx.region_maps.node_extent(block_id)\n             }\n             LpDowncast(ref base, _) |\n-            LpExtend(ref base, _, _) => base.kill_scope(tcx),\n+            LpExtend(ref base, ..) => base.kill_scope(tcx),\n         }\n     }\n \n@@ -464,7 +464,7 @@ impl<'a, 'tcx> LoanPath<'tcx> {\n     fn depth(&self) -> usize {\n         match self.kind {\n             LpExtend(ref base, _, LpDeref(_)) => base.depth(),\n-            LpExtend(ref base, _, LpInterior(_, _)) => base.depth() + 1,\n+            LpExtend(ref base, _, LpInterior(..)) => base.depth() + 1,\n             _ => 0,\n         }\n     }\n@@ -711,7 +711,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n             move_data::Captured =>\n                 (match self.tcx.map.expect_expr(the_move.id).node {\n-                    hir::ExprClosure(_, _, _, fn_decl_span) => fn_decl_span,\n+                    hir::ExprClosure(.., fn_decl_span) => fn_decl_span,\n                     ref r => bug!(\"Captured({}) maps to non-closure: {:?}\",\n                                   the_move.id, r),\n                 }, \" (into closure)\"),\n@@ -1177,7 +1177,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                 out.push(')');\n             }\n \n-            LpVar(..) | LpUpvar(..) | LpExtend(_, _, LpInterior(..)) => {\n+            LpVar(..) | LpUpvar(..) | LpExtend(.., LpInterior(..)) => {\n                 self.append_loan_path_to_string(loan_path, out)\n             }\n         }"}, {"sha": "0c9261df54870055df825021a49d8201bcd5dd02", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -197,7 +197,7 @@ fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n         LpVar(_) | LpUpvar(_) => {\n             true\n         }\n-        LpExtend(_, _, LpInterior(_, InteriorKind::InteriorElement(..))) => {\n+        LpExtend(.., LpInterior(_, InteriorKind::InteriorElement(..))) => {\n             // Paths involving element accesses a[i] do not refer to a unique\n             // location, as there is no accurate tracking of the indices.\n             //\n@@ -207,7 +207,7 @@ fn loan_path_is_precise(loan_path: &LoanPath) -> bool {\n             false\n         }\n         LpDowncast(ref lp_base, _) |\n-        LpExtend(ref lp_base, _, _) => {\n+        LpExtend(ref lp_base, ..) => {\n             loan_path_is_precise(&lp_base)\n         }\n     }\n@@ -295,7 +295,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n             }\n \n             LpDowncast(ref base, _) |\n-            LpExtend(ref base, _, _) => {\n+            LpExtend(ref base, ..) => {\n                 let parent_index = self.move_path(tcx, base.clone());\n \n                 let index = MovePathIndex(self.paths.borrow().len());\n@@ -351,7 +351,7 @@ impl<'a, 'tcx> MoveData<'tcx> {\n                 match lp.kind {\n                     LpVar(..) | LpUpvar(..) => { }\n                     LpDowncast(ref b, _) |\n-                    LpExtend(ref b, _, _) => {\n+                    LpExtend(ref b, ..) => {\n                         self.add_existing_base_paths(b, result);\n                     }\n                 }"}, {"sha": "22b590592fe168d3277d3f7a4e31b28b4706debc", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -19,6 +19,7 @@\n \n #![allow(non_camel_case_types)]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "e49011d88737063ee901f8c0121a499fd630c4e9", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -372,8 +372,8 @@ fn check_arms(cx: &MatchCheckCtxt,\n /// Checks for common cases of \"catchall\" patterns that may not be intended as such.\n fn pat_is_catchall(dm: &DefMap, p: &Pat) -> bool {\n     match p.node {\n-        PatKind::Binding(_, _, None) => true,\n-        PatKind::Binding(_, _, Some(ref s)) => pat_is_catchall(dm, &s),\n+        PatKind::Binding(.., None) => true,\n+        PatKind::Binding(.., Some(ref s)) => pat_is_catchall(dm, &s),\n         PatKind::Ref(ref s, _) => pat_is_catchall(dm, &s),\n         PatKind::Tuple(ref v, _) => v.iter().all(|p| pat_is_catchall(dm, &p)),\n         _ => false\n@@ -382,7 +382,7 @@ fn pat_is_catchall(dm: &DefMap, p: &Pat) -> bool {\n \n fn raw_pat(p: &Pat) -> &Pat {\n     match p.node {\n-        PatKind::Binding(_, _, Some(ref s)) => raw_pat(&s),\n+        PatKind::Binding(.., Some(ref s)) => raw_pat(&s),\n         _ => p\n     }\n }\n@@ -804,7 +804,7 @@ fn pat_constructors(cx: &MatchCheckCtxt, p: &Pat,\n             vec![ConstantRange(eval_const_expr(cx.tcx, &lo), eval_const_expr(cx.tcx, &hi))],\n         PatKind::Vec(ref before, ref slice, ref after) =>\n             match left_ty.sty {\n-                ty::TyArray(_, _) => vec![Single],\n+                ty::TyArray(..) => vec![Single],\n                 ty::TySlice(_) if slice.is_some() => {\n                     (before.len() + after.len()..max_slice_length+1)\n                         .map(|length| Slice(length))\n@@ -866,7 +866,7 @@ fn wrap_pat<'a, 'b, 'tcx>(cx: &MatchCheckCtxt<'b, 'tcx>,\n {\n     let pat_ty = cx.tcx.pat_ty(pat);\n     (pat, Some(match pat.node {\n-        PatKind::Binding(hir::BindByRef(..), _, _) => {\n+        PatKind::Binding(hir::BindByRef(..), ..) => {\n             pat_ty.builtin_deref(false, NoPreference).unwrap().ty\n         }\n         _ => pat_ty\n@@ -1217,7 +1217,7 @@ struct AtBindingPatternVisitor<'a, 'b:'a, 'tcx:'b> {\n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for AtBindingPatternVisitor<'a, 'b, 'tcx> {\n     fn visit_pat(&mut self, pat: &Pat) {\n         match pat.node {\n-            PatKind::Binding(_, _, ref subpat) => {\n+            PatKind::Binding(.., ref subpat) => {\n                 if !self.bindings_allowed {\n                     span_err!(self.cx.tcx.sess, pat.span, E0303,\n                               \"pattern bindings are not allowed after an `@`\");"}, {"sha": "30e5a0cacf551654b60d4096aeab8628c15ac331", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -106,7 +106,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeTraitItem(ti)) => match ti.node {\n-                hir::ConstTraitItem(_, _) => {\n+                hir::ConstTraitItem(..) => {\n                     if let Some(substs) = substs {\n                         // If we have a trait item and the substitutions for it,\n                         // `resolve_trait_associated_const` will select an impl\n@@ -151,7 +151,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 _ => None\n             },\n             Some((&InlinedItem::TraitItem(trait_id, ref ti), _)) => match ti.node {\n-                hir::ConstTraitItem(_, _) => {\n+                hir::ConstTraitItem(..) => {\n                     used_substs = true;\n                     if let Some(substs) = substs {\n                         // As mentioned in the comments above for in-crate\n@@ -228,10 +228,10 @@ pub fn lookup_const_fn_by_id<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefI\n     };\n \n     match fn_like.kind() {\n-        FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => {\n+        FnKind::ItemFn(_, _, _, hir::Constness::Const, ..) => {\n             Some(fn_like)\n         }\n-        FnKind::Method(_, m, _, _) => {\n+        FnKind::Method(_, m, ..) => {\n             if m.constness == hir::Constness::Const {\n                 Some(fn_like)\n             } else {"}, {"sha": "f926fef065ea6c228fed4cc17a473a5ac0e7930f", "filename": "src/librustc_const_eval/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_const_eval%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -22,7 +22,7 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n-\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n #![feature(rustc_diagnostic_macros)]"}, {"sha": "fbd48fc42c92d294e64e2db7e8470ff9c7599c01", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -24,6 +24,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(libc)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n@@ -805,7 +806,7 @@ Available lint options:\n     let (plugin_groups, builtin_groups): (Vec<_>, _) = lint_store.get_lint_groups()\n                                                                  .iter()\n                                                                  .cloned()\n-                                                                 .partition(|&(_, _, p)| p);\n+                                                                 .partition(|&(.., p)| p);\n     let plugin_groups = sort_lint_groups(plugin_groups);\n     let builtin_groups = sort_lint_groups(builtin_groups);\n \n@@ -880,7 +881,7 @@ Available lint options:\n             println!(\"Compiler plugins can provide additional lints and lint groups. To see a \\\n                       listing of these, re-run `rustc -W help` with a crate filename.\");\n         }\n-        (false, _, _) => panic!(\"didn't load lint plugins but got them anyway!\"),\n+        (false, ..) => panic!(\"didn't load lint plugins but got them anyway!\"),\n         (true, 0, 0) => println!(\"This crate does not load any lint plugins or lint groups.\"),\n         (true, l, g) => {\n             if l > 0 {"}, {"sha": "bd96ae69ffbc817a2120ff0e3bd5a0e6e1cccb23", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -196,7 +196,7 @@ fn check_paths<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let targets = match then_this_would_need.get(id) {\n             Some(targets) => targets,\n             None => {\n-                for &(source_span, _, _) in sources.iter().take(1) {\n+                for &(source_span, ..) in sources.iter().take(1) {\n                     tcx.sess.span_err(\n                         source_span,\n                         &format!(\"no targets for id `{}`\", id));"}, {"sha": "3b7a97dd763d652f25d09d3d793f3658de0be6cc", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -158,7 +158,7 @@ fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n         ExprCall(..)             => SawExprCall,\n         ExprMethodCall(..)       => SawExprMethodCall,\n         ExprTup(..)              => SawExprTup,\n-        ExprBinary(op, _, _)     => SawExprBinary(op.node),\n+        ExprBinary(op, ..)       => SawExprBinary(op.node),\n         ExprUnary(op, _)         => SawExprUnary(op),\n         ExprLit(ref lit)         => SawExprLit(lit.node.clone()),\n         ExprCast(..)             => SawExprCast,\n@@ -170,7 +170,7 @@ fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n         ExprClosure(..)          => SawExprClosure,\n         ExprBlock(..)            => SawExprBlock,\n         ExprAssign(..)           => SawExprAssign,\n-        ExprAssignOp(op, _, _)   => SawExprAssignOp(op.node),\n+        ExprAssignOp(op, ..)     => SawExprAssignOp(op.node),\n         ExprField(_, name)       => SawExprField(name.node.as_str()),\n         ExprTupField(_, id)      => SawExprTupField(id.node),\n         ExprIndex(..)            => SawExprIndex,\n@@ -179,7 +179,7 @@ fn saw_expr<'a>(node: &'a Expr_) -> SawExprComponent<'a> {\n         ExprBreak(id)            => SawExprBreak(id.map(|id| id.node.as_str())),\n         ExprAgain(id)            => SawExprAgain(id.map(|id| id.node.as_str())),\n         ExprRet(..)              => SawExprRet,\n-        ExprInlineAsm(ref a,_,_) => SawExprInlineAsm(a),\n+        ExprInlineAsm(ref a,..)  => SawExprInlineAsm(a),\n         ExprStruct(..)           => SawExprStruct,\n         ExprRepeat(..)           => SawExprRepeat,\n     }"}, {"sha": "c866014c767282f3f8c573eb00d876ddd21f0fe8", "filename": "src/librustc_incremental/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -19,6 +19,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(question_mark)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "8166045be5f6f9158031c0e02b1969bcb0e11f27", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -880,12 +880,12 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n fn all_except_most_recent(deletion_candidates: Vec<(SystemTime, PathBuf, Option<flock::Lock>)>)\n                           -> FnvHashMap<PathBuf, Option<flock::Lock>> {\n     let most_recent = deletion_candidates.iter()\n-                                         .map(|&(timestamp, _, _)| timestamp)\n+                                         .map(|&(timestamp, ..)| timestamp)\n                                          .max();\n \n     if let Some(most_recent) = most_recent {\n         deletion_candidates.into_iter()\n-                           .filter(|&(timestamp, _, _)| timestamp != most_recent)\n+                           .filter(|&(timestamp, ..)| timestamp != most_recent)\n                            .map(|(_, path, lock)| (path, lock))\n                            .collect()\n     } else {"}, {"sha": "84d65308f952ffbbdd613ec43cff0bbeb5158b5a", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -239,7 +239,7 @@ impl LateLintPass for NonSnakeCase {\n                 fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            FnKind::Method(name, _, _, _) => match method_context(cx, id, span) {\n+            FnKind::Method(name, ..) => match method_context(cx, id, span) {\n                 MethodLateContext::PlainImpl => {\n                     self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n                 },\n@@ -248,7 +248,7 @@ impl LateLintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            FnKind::ItemFn(name, _, _, _, _, _, _) => {\n+            FnKind::ItemFn(name, ..) => {\n                 self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))\n             },\n             FnKind::Closure(_) => (),"}, {"sha": "a73930fa52517d058b4e46b115d7b84fea53bbdb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -72,7 +72,7 @@ impl LintPass for WhileTrue {\n \n impl LateLintPass for WhileTrue {\n     fn check_expr(&mut self, cx: &LateContext, e: &hir::Expr) {\n-        if let hir::ExprWhile(ref cond, _, _) = e.node {\n+        if let hir::ExprWhile(ref cond, ..) = e.node {\n             if let hir::ExprLit(ref lit) = cond.node {\n                 if let ast::LitKind::Bool(true) = lit.node {\n                     cx.span_lint(WHILE_TRUE, e.span,\n@@ -203,10 +203,10 @@ impl LateLintPass for UnsafeCode {\n \n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemTrait(hir::Unsafety::Unsafe, _, _, _) =>\n+            hir::ItemTrait(hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, it.span, \"declaration of an `unsafe` trait\"),\n \n-            hir::ItemImpl(hir::Unsafety::Unsafe, _, _, _, _, _) =>\n+            hir::ItemImpl(hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, it.span, \"implementation of an `unsafe` trait\"),\n \n             _ => return,\n@@ -216,10 +216,10 @@ impl LateLintPass for UnsafeCode {\n     fn check_fn(&mut self, cx: &LateContext, fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, _, _, _, _) =>\n+            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, ..) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n-            FnKind::Method(_, sig, _, _) => {\n+            FnKind::Method(_, sig, ..) => {\n                 if sig.unsafety == hir::Unsafety::Unsafe {\n                     cx.span_lint(UNSAFE_CODE, span, \"implementation of an `unsafe` method\")\n                 }\n@@ -351,7 +351,7 @@ impl LateLintPass for MissingDoc {\n             hir::ItemEnum(..) => \"an enum\",\n             hir::ItemStruct(..) => \"a struct\",\n             hir::ItemUnion(..) => \"a union\",\n-            hir::ItemTrait(_, _, _, ref items) => {\n+            hir::ItemTrait(.., ref items) => {\n                 // Issue #11592, traits are always considered exported, even when private.\n                 if it.vis == hir::Visibility::Inherited {\n                     self.private_traits.insert(it.id);\n@@ -363,7 +363,7 @@ impl LateLintPass for MissingDoc {\n                 \"a trait\"\n             },\n             hir::ItemTy(..) => \"a type alias\",\n-            hir::ItemImpl(_, _, _, Some(ref trait_ref), _, ref impl_items) => {\n+            hir::ItemImpl(.., Some(ref trait_ref), _, ref impl_items) => {\n                 // If the trait is private, add the impl items to private_traits so they don't get\n                 // reported for missing docs.\n                 let real_trait = cx.tcx.expect_def(trait_ref.ref_id).def_id();\n@@ -1037,7 +1037,7 @@ impl LintPass for InvalidNoMangleItems {\n impl LateLintPass for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n-            hir::ItemFn(_, _, _, _, ref generics, _) => {\n+            hir::ItemFn(.., ref generics, _) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n                     if !cx.access_levels.is_reachable(it.id) {\n                         let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n@@ -1116,7 +1116,7 @@ impl LateLintPass for MutableTransmutes {\n                 }\n                 let typ = cx.tcx.node_id_to_type(expr.id);\n                 match typ.sty {\n-                    ty::TyFnDef(_, _, ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n+                    ty::TyFnDef(.., ref bare_fn) if bare_fn.abi == RustIntrinsic => {\n                         let from = bare_fn.sig.0.inputs[0];\n                         let to = bare_fn.sig.0.output;\n                         return Some((&from.sty, &to.sty));\n@@ -1129,7 +1129,7 @@ impl LateLintPass for MutableTransmutes {\n \n         fn def_id_is_transmute(cx: &LateContext, def_id: DefId) -> bool {\n             match cx.tcx.lookup_item_type(def_id).ty.sty {\n-                ty::TyFnDef(_, _, ref bfty) if bfty.abi == RustIntrinsic => (),\n+                ty::TyFnDef(.., ref bfty) if bfty.abi == RustIntrinsic => (),\n                 _ => return false\n             }\n             cx.tcx.item_name(def_id).as_str() == \"transmute\""}, {"sha": "b9817cc6ff45a11402e894dbfa426463bfe533c6", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -31,6 +31,7 @@\n #![cfg_attr(test, feature(test))]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]"}, {"sha": "f07720f5202bd15b8cb69e38ab6da7b18f1c7d47", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -334,7 +334,7 @@ impl UnusedParens {\n                     contains_exterior_struct_lit(&x)\n                 }\n \n-                ast::ExprKind::MethodCall(_, _, ref exprs) => {\n+                ast::ExprKind::MethodCall(.., ref exprs) => {\n                     // X { y: 1 }.bar(...)\n                     contains_exterior_struct_lit(&exprs[0])\n                 }\n@@ -355,15 +355,15 @@ impl EarlyLintPass for UnusedParens {\n     fn check_expr(&mut self, cx: &EarlyContext, e: &ast::Expr) {\n         use syntax::ast::ExprKind::*;\n         let (value, msg, struct_lit_needs_parens) = match e.node {\n-            If(ref cond, _, _) => (cond, \"`if` condition\", true),\n-            While(ref cond, _, _) => (cond, \"`while` condition\", true),\n-            IfLet(_, ref cond, _, _) => (cond, \"`if let` head expression\", true),\n-            WhileLet(_, ref cond, _, _) => (cond, \"`while let` head expression\", true),\n-            ForLoop(_, ref cond, _, _) => (cond, \"`for` head expression\", true),\n+            If(ref cond, ..) => (cond, \"`if` condition\", true),\n+            While(ref cond, ..) => (cond, \"`while` condition\", true),\n+            IfLet(_, ref cond, ..) => (cond, \"`if let` head expression\", true),\n+            WhileLet(_, ref cond, ..) => (cond, \"`while let` head expression\", true),\n+            ForLoop(_, ref cond, ..) => (cond, \"`for` head expression\", true),\n             Match(ref head, _) => (head, \"`match` head expression\", true),\n             Ret(Some(ref value)) => (value, \"`return` value\", false),\n             Assign(_, ref value) => (value, \"assigned value\", false),\n-            AssignOp(_, _, ref value) => (value, \"assigned value\", false),\n+            AssignOp(.., ref value) => (value, \"assigned value\", false),\n             InPlace(_, ref value) => (value, \"emplacement value\", false),\n             _ => return\n         };"}, {"sha": "fb7e1c0f7895e73d79a51cea0aad868e9a630180", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -303,7 +303,7 @@ impl Folder for NestedItemsDropper {\n         blk.and_then(|hir::Block {id, stmts, expr, rules, span, ..}| {\n             let stmts_sans_items = stmts.into_iter().filter_map(|stmt| {\n                 let use_stmt = match stmt.node {\n-                    hir::StmtExpr(_, _) | hir::StmtSemi(_, _) => true,\n+                    hir::StmtExpr(..) | hir::StmtSemi(..) => true,\n                     hir::StmtDecl(ref decl, _) => {\n                         match decl.node {\n                             hir::DeclLocal(_) => true,"}, {"sha": "a1ade43f6475018bff8e62b7a486452f235a20b6", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -490,7 +490,7 @@ impl<'a> CrateReader<'a> {\n         // numbers\n         let map: FnvHashMap<_, _> = decoder::get_crate_deps(cdata).iter().map(|dep| {\n             debug!(\"resolving dep crate {} hash: `{}`\", dep.name, dep.hash);\n-            let (local_cnum, _, _) = self.resolve_crate(root,\n+            let (local_cnum, ..) = self.resolve_crate(root,\n                                                         &dep.name,\n                                                         &dep.name,\n                                                         Some(&dep.hash),\n@@ -1003,13 +1003,13 @@ impl<'a> LocalCrateReader<'a> {\n                     if !info.should_link {\n                         return;\n                     }\n-                    let (cnum, _, _) = self.creader.resolve_crate(&None,\n-                                                                  &info.ident,\n-                                                                  &info.name,\n-                                                                  None,\n-                                                                  i.span,\n-                                                                  PathKind::Crate,\n-                                                                  true);\n+                    let (cnum, ..) = self.creader.resolve_crate(&None,\n+                                                                &info.ident,\n+                                                                &info.name,\n+                                                                None,\n+                                                                i.span,\n+                                                                PathKind::Crate,\n+                                                                true);\n \n                     let def_id = self.definitions.opt_local_def_id(i.id).unwrap();\n                     let len = self.definitions.def_path(def_id.index).data.len();"}, {"sha": "6b48b4dfabcfd2d5eb418ba9fcb03a4bae489641", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -492,7 +492,7 @@ pub fn get_adt_def<'a, 'tcx>(cdata: Cmd,\n                    variant.name,\n                    ctor_ty);\n             let field_tys = match ctor_ty.sty {\n-                ty::TyFnDef(_, _, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                ty::TyFnDef(.., &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                     ref inputs, ..\n                 }), ..}) => {\n                     // tuple-struct constructors don't have escaping regions\n@@ -952,7 +952,7 @@ pub fn get_impl_or_trait_item<'a, 'tcx>(cdata: Cmd, id: DefIndex, tcx: TyCtxt<'a\n             let predicates = doc_predicates(item_doc, tcx, cdata, tag_item_predicates);\n             let ity = tcx.lookup_item_type(def_id).ty;\n             let fty = match ity.sty {\n-                ty::TyFnDef(_, _, fty) => fty,\n+                ty::TyFnDef(.., fty) => fty,\n                 _ => bug!(\n                     \"the type {:?} of the method {:?} is not a function?\",\n                     ity, name)"}, {"sha": "23398a0400c51743b5f6555d45deae1bb8cbba6c", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -915,7 +915,7 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                 encode_deprecation(self.rbml_w, depr);\n                 encode_attributes(self.rbml_w, &item.attrs);\n             }\n-            hir::ItemConst(_, _) => {\n+            hir::ItemConst(..) => {\n                 encode_def_id_and_key(ecx, self.rbml_w, def_id);\n                 encode_family(self.rbml_w, 'C');\n                 self.encode_bounds_and_type_for_item(item.id);\n@@ -1065,7 +1065,7 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                 let trait_ref = tcx.impl_trait_ref(ecx.tcx.map.local_def_id(item.id)).unwrap();\n                 encode_trait_ref(self.rbml_w, ecx, trait_ref, tag_item_trait_ref);\n             }\n-            hir::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+            hir::ItemImpl(unsafety, polarity, ..) => {\n                 // We need to encode information about the default methods we\n                 // have inherited, so we drive self based on the impl structure.\n                 let impl_items = tcx.impl_items.borrow();\n@@ -1129,7 +1129,7 @@ impl<'a, 'tcx, 'encoder> ItemContentBuilder<'a, 'tcx, 'encoder> {\n                 encode_stability(self.rbml_w, stab);\n                 encode_deprecation(self.rbml_w, depr);\n             }\n-            hir::ItemTrait(_, _, _, _) => {\n+            hir::ItemTrait(..) => {\n                 encode_def_id_and_key(ecx, self.rbml_w, def_id);\n                 encode_family(self.rbml_w, 'I');\n                 encode_item_variances(self.rbml_w, ecx, item.id);\n@@ -1209,10 +1209,10 @@ impl<'a, 'tcx, 'encoder> IndexBuilder<'a, 'tcx, 'encoder> {\n             hir::ItemUnion(..) => {\n                 self.encode_addl_union_info(def_id);\n             }\n-            hir::ItemImpl(_, _, _, _, _, ref ast_items) => {\n+            hir::ItemImpl(.., ref ast_items) => {\n                 self.encode_addl_impl_info(def_id, item.id, ast_items);\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 self.encode_addl_trait_info(def_id, trait_items);\n             }\n         }"}, {"sha": "84323d464660770cb01df4521722f3e900e59e5f", "filename": "src/librustc_metadata/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_metadata%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -18,6 +18,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(box_patterns)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(enumset)]\n #![feature(question_mark)]\n #![feature(quote)]"}, {"sha": "8812287c34294ba9dd49844bd852dab99ff9d4e0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -217,7 +217,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n \n     let kind = match expr.node {\n         // Here comes the interesting stuff:\n-        hir::ExprMethodCall(_, _, ref args) => {\n+        hir::ExprMethodCall(.., ref args) => {\n             // Rewrite a.b(c) into UFCS form like Trait::b(a, c)\n             let expr = method_callee(cx, expr, ty::MethodCall::expr(expr.id));\n             let args = args.iter()\n@@ -242,7 +242,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                 let method = method_callee(cx, expr, ty::MethodCall::expr(expr.id));\n \n                 let sig = match method.ty.sty {\n-                    ty::TyFnDef(_, _, fn_ty) => &fn_ty.sig,\n+                    ty::TyFnDef(.., fn_ty) => &fn_ty.sig,\n                     _ => span_bug!(expr.span, \"type of method is not an fn\")\n                 };\n \n@@ -743,7 +743,7 @@ fn convert_var<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let body_id = match cx.tcx.map.find(closure_expr_id) {\n                 Some(map::NodeExpr(expr)) => {\n                     match expr.node {\n-                        hir::ExprClosure(_, _, ref body, _) => body.id,\n+                        hir::ExprClosure(.., ref body, _) => body.id,\n                         _ => {\n                             span_bug!(expr.span, \"closure expr is not a closure expr\");\n                         }"}, {"sha": "8dd33ad2f9c7a1e2b371254cc3ff5911ab0ca8ce", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -53,8 +53,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n             MirSource::Fn(id) => {\n                 let fn_like = FnLikeNode::from_node(infcx.tcx.map.get(id));\n                 match fn_like.map(|f| f.kind()) {\n-                    Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => c,\n-                    Some(FnKind::Method(_, m, _, _)) => m.constness,\n+                    Some(FnKind::ItemFn(_, _, _, c, ..)) => c,\n+                    Some(FnKind::Method(_, m, ..)) => m.constness,\n                     _ => hir::Constness::NotConst\n                 }\n             }"}, {"sha": "f580ceeee5d7f9462d33489beefb7de4385060a4", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -22,6 +22,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n \n #![feature(associated_consts)]\n #![feature(box_patterns)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]"}, {"sha": "a3f8f7a63eeab8136fff3fdc7091881ef1dfeea3", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -120,10 +120,10 @@ fn is_const_fn(tcx: TyCtxt, def_id: DefId) -> bool {\n     if let Some(node_id) = tcx.map.as_local_node_id(def_id) {\n         let fn_like = FnLikeNode::from_node(tcx.map.get(node_id));\n         match fn_like.map(|f| f.kind()) {\n-            Some(FnKind::ItemFn(_, _, _, c, _, _, _)) => {\n+            Some(FnKind::ItemFn(_, _, _, c, ..)) => {\n                 c == hir::Constness::Const\n             }\n-            Some(FnKind::Method(_, m, _, _)) => {\n+            Some(FnKind::Method(_, m, ..)) => {\n                 m.constness == hir::Constness::Const\n             }\n             _ => false\n@@ -609,9 +609,9 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             Rvalue::Repeat(..) |\n             Rvalue::UnaryOp(..) |\n             Rvalue::CheckedBinaryOp(..) |\n-            Rvalue::Cast(CastKind::ReifyFnPointer, _, _) |\n-            Rvalue::Cast(CastKind::UnsafeFnPointer, _, _) |\n-            Rvalue::Cast(CastKind::Unsize, _, _) => {}\n+            Rvalue::Cast(CastKind::ReifyFnPointer, ..) |\n+            Rvalue::Cast(CastKind::UnsafeFnPointer, ..) |\n+            Rvalue::Cast(CastKind::Unsize, ..) => {}\n \n             Rvalue::Len(_) => {\n                 // Static lvalues in consts would have errored already,\n@@ -738,7 +738,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n             }\n \n             Rvalue::Aggregate(ref kind, _) => {\n-                if let AggregateKind::Adt(def, _, _, _) = *kind {\n+                if let AggregateKind::Adt(def, ..) = *kind {\n                     if def.has_dtor() {\n                         self.add(Qualif::NEEDS_DROP);\n                         self.deny_drop();"}, {"sha": "e260b1d262aed17e2b633d22f9dab2b02171acd8", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let func_ty = func.ty(mir, tcx);\n                 debug!(\"check_terminator: call, func_ty={:?}\", func_ty);\n                 let func_ty = match func_ty.sty {\n-                    ty::TyFnDef(_, _, func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n+                    ty::TyFnDef(.., func_ty) | ty::TyFnPtr(func_ty) => func_ty,\n                     _ => {\n                         span_mirbug!(self, term, \"call to non-function {:?}\", func_ty);\n                         return;"}, {"sha": "6275639a9adfff9649c41192389deb2e76f5ae2c", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -98,10 +98,10 @@ impl<'a> Visitor for AstValidator<'a> {\n \n     fn visit_expr(&mut self, expr: &Expr) {\n         match expr.node {\n-            ExprKind::While(_, _, Some(ident)) |\n+            ExprKind::While(.., Some(ident)) |\n             ExprKind::Loop(_, Some(ident)) |\n-            ExprKind::WhileLet(_, _, _, Some(ident)) |\n-            ExprKind::ForLoop(_, _, _, Some(ident)) |\n+            ExprKind::WhileLet(.., Some(ident)) |\n+            ExprKind::ForLoop(.., Some(ident)) |\n             ExprKind::Break(Some(ident)) |\n             ExprKind::Continue(Some(ident)) => {\n                 self.check_label(ident.node, ident.span, expr.id);\n@@ -155,7 +155,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                         .span_err(path.span, \"type or lifetime parameters in import path\");\n                 }\n             }\n-            ItemKind::Impl(_, _, _, Some(..), _, ref impl_items) => {\n+            ItemKind::Impl(.., Some(..), _, ref impl_items) => {\n                 self.invalid_visibility(&item.vis, item.span, None);\n                 for impl_item in impl_items {\n                     self.invalid_visibility(&impl_item.vis, impl_item.span, None);\n@@ -164,7 +164,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Impl(_, _, _, None, _, _) => {\n+            ItemKind::Impl(.., None, _, _) => {\n                 self.invalid_visibility(&item.vis,\n                                         item.span,\n                                         Some(\"place qualifiers on individual impl items instead\"));\n@@ -185,7 +185,7 @@ impl<'a> Visitor for AstValidator<'a> {\n                     }\n                 }\n             }\n-            ItemKind::Trait(_, _, _, ref trait_items) => {\n+            ItemKind::Trait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     if let TraitItemKind::Method(ref sig, _) = trait_item.node {\n                         self.check_trait_fn_not_const(sig.constness);"}, {"sha": "d4e8eb51cde27b30d96febcb91c9e627dc5c6726", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -147,9 +147,9 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n         }\n \n         let mode = match fk {\n-            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _)\n+            FnKind::ItemFn(_, _, _, hir::Constness::Const, ..)\n                 => Mode::ConstFn,\n-            FnKind::Method(_, m, _, _) => {\n+            FnKind::Method(_, m, ..) => {\n                 if m.constness == hir::Constness::Const {\n                     Mode::ConstFn\n                 } else {\n@@ -307,8 +307,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                         hir::DeclItem(_) => continue,\n                     }\n                 }\n-                hir::StmtExpr(_, _) => {}\n-                hir::StmtSemi(_, _) => {}\n+                hir::StmtExpr(..) => {}\n+                hir::StmtSemi(..) => {}\n             }\n             self.add_qualif(ConstQualif::NOT_CONST);\n         }\n@@ -671,7 +671,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n                 Categorization::StaticItem => {\n                     break;\n                 }\n-                Categorization::Deref(ref cmt, _, _) |\n+                Categorization::Deref(ref cmt, ..) |\n                 Categorization::Downcast(ref cmt, _) |\n                 Categorization::Interior(ref cmt, _) => cur = cmt,\n \n@@ -716,7 +716,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n                         // type of the expression.  `&mut [1]` has exactly the\n                         // same representation as &mut 1.\n                         match cmt.ty.sty {\n-                            ty::TyArray(_, _) |\n+                            ty::TyArray(..) |\n                             ty::TySlice(_) => break,\n                             _ => {}\n                         }\n@@ -727,7 +727,7 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n                 Categorization::StaticItem => {\n                     break;\n                 }\n-                Categorization::Deref(ref cmt, _, _) |\n+                Categorization::Deref(ref cmt, ..) |\n                 Categorization::Downcast(ref cmt, _) |\n                 Categorization::Interior(ref cmt, _) => {\n                     cur = cmt;"}, {"sha": "a4657251c9ce2f16a9497b5a2ec5f2ef4fcf6ee1", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -23,6 +23,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(staged_api)]\n #![feature(rustc_private)]"}, {"sha": "e942707acd56b94e9cb7409887b71b25a48a135f", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -53,7 +53,7 @@ impl<'a, 'v> Visitor<'v> for CheckLoopVisitor<'a> {\n             hir::ExprLoop(ref b, _) => {\n                 self.with_context(Loop, |v| v.visit_block(&b));\n             }\n-            hir::ExprClosure(_, _, ref b, _) => {\n+            hir::ExprClosure(.., ref b, _) => {\n                 self.with_context(Closure, |v| v.visit_block(&b));\n             }\n             hir::ExprBreak(_) => self.require_loop(\"break\", e.span),"}, {"sha": "8c72933c4ce46a4d3d508372ff6385eef27703ec", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -17,6 +17,7 @@\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -125,10 +126,10 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &hir::Item) {\n         let inherited_item_level = match item.node {\n             // Impls inherit level from their types and traits\n-            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n+            hir::ItemImpl(.., None, ref ty, _) => {\n                 self.ty_level(&ty)\n             }\n-            hir::ItemImpl(_, _, _, Some(ref trait_ref), ref ty, _) => {\n+            hir::ItemImpl(.., Some(ref trait_ref), ref ty, _) => {\n                 cmp::min(self.ty_level(&ty), self.trait_level(trait_ref))\n             }\n             hir::ItemDefaultImpl(_, ref trait_ref) => {\n@@ -157,19 +158,19 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, None, _, ref impl_items) => {\n+            hir::ItemImpl(.., None, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     if impl_item.vis == hir::Public {\n                         self.update(impl_item.id, item_level);\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, ref impl_items) => {\n+            hir::ItemImpl(.., Some(_), _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     self.update(impl_item.id, item_level);\n                 }\n             }\n-            hir::ItemTrait(_, _, _, ref trait_items) => {\n+            hir::ItemTrait(.., ref trait_items) => {\n                 for trait_item in trait_items {\n                     self.update(trait_item.id, item_level);\n                 }\n@@ -204,7 +205,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             hir::ItemUse(..) => {}\n             // Visit everything\n             hir::ItemConst(..) | hir::ItemStatic(..) | hir::ItemFn(..) |\n-            hir::ItemTrait(..) | hir::ItemTy(..) | hir::ItemImpl(_, _, _, Some(..), _, _) => {\n+            hir::ItemTrait(..) | hir::ItemTy(..) | hir::ItemImpl(.., Some(..), _, _) => {\n                 if item_level.is_some() {\n                     self.reach().visit_item(item);\n                 }\n@@ -248,7 +249,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // The interface is empty\n             hir::ItemDefaultImpl(..) => {}\n             // Visit everything except for private impl items\n-            hir::ItemImpl(_, _, ref generics, None, _, ref impl_items) => {\n+            hir::ItemImpl(.., ref generics, None, _, ref impl_items) => {\n                 if item_level.is_some() {\n                     self.reach().visit_generics(generics);\n                     for impl_item in impl_items {\n@@ -453,7 +454,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 if let Def::Struct(..) = self.tcx.expect_def(expr.id) {\n                     let expr_ty = self.tcx.expr_ty(expr);\n                     let def = match expr_ty.sty {\n-                        ty::TyFnDef(_, _, &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n+                        ty::TyFnDef(.., &ty::BareFnTy { sig: ty::Binder(ty::FnSig {\n                             output: ty, ..\n                         }), ..}) => ty,\n                         _ => expr_ty\n@@ -643,7 +644,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n             // namespace (the contents have their own privacies).\n             hir::ItemForeignMod(_) => {}\n \n-            hir::ItemTrait(_, _, ref bounds, _) => {\n+            hir::ItemTrait(.., ref bounds, _) => {\n                 if !self.trait_is_public(item.id) {\n                     return\n                 }\n@@ -658,7 +659,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx>\n             // (i.e. we could just return here to not check them at\n             // all, or some worse estimation of whether an impl is\n             // publicly visible).\n-            hir::ItemImpl(_, _, ref g, ref trait_ref, ref self_, ref impl_items) => {\n+            hir::ItemImpl(.., ref g, ref trait_ref, ref self_, ref impl_items) => {\n                 // `impl [... for] Private` is never visible.\n                 let self_contains_private;\n                 // impl [... for] Public<...>, but not `impl [... for]\n@@ -1090,7 +1091,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n             hir::ItemDefaultImpl(..) => {}\n             // An inherent impl is public when its type is public\n             // Subitems of inherent impls have their own publicity\n-            hir::ItemImpl(_, _, ref generics, None, ref ty, ref impl_items) => {\n+            hir::ItemImpl(.., ref generics, None, ref ty, ref impl_items) => {\n                 let ty_vis = self.ty_visibility(ty);\n                 check.required_visibility = ty_vis;\n                 check.visit_generics(generics);\n@@ -1104,7 +1105,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivateItemsInPublicInterfacesVisitor<'a, 'tc\n             }\n             // A trait impl is public when both its type and its trait are public\n             // Subitems of trait impls have inherited publicity\n-            hir::ItemImpl(_, _, ref generics, Some(ref trait_ref), ref ty, ref impl_items) => {\n+            hir::ItemImpl(.., ref generics, Some(ref trait_ref), ref ty, ref impl_items) => {\n                 let vis = min(self.ty_visibility(ty), self.trait_ref_visibility(trait_ref));\n                 check.required_visibility = vis;\n                 check.visit_generics(generics);"}, {"sha": "ad750ccc0129998d306841eda7ed2cc4683a785c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -228,11 +228,11 @@ impl<'b> Resolver<'b> {\n                 let def = Def::Static(self.definitions.local_def_id(item.id), mutbl);\n                 self.define(parent, name, ValueNS, (def, sp, vis));\n             }\n-            ItemKind::Const(_, _) => {\n+            ItemKind::Const(..) => {\n                 let def = Def::Const(self.definitions.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, vis));\n             }\n-            ItemKind::Fn(_, _, _, _, _, _) => {\n+            ItemKind::Fn(..) => {\n                 let def = Def::Fn(self.definitions.local_def_id(item.id));\n                 self.define(parent, name, ValueNS, (def, sp, vis));\n             }\n@@ -292,9 +292,9 @@ impl<'b> Resolver<'b> {\n                 self.structs.insert(item_def_id, field_names);\n             }\n \n-            ItemKind::DefaultImpl(_, _) | ItemKind::Impl(..) => {}\n+            ItemKind::DefaultImpl(..) | ItemKind::Impl(..) => {}\n \n-            ItemKind::Trait(_, _, _, ref items) => {\n+            ItemKind::Trait(.., ref items) => {\n                 let def_id = self.definitions.local_def_id(item.id);\n \n                 // Add all the items within to a new module."}, {"sha": "93abe07128fa1d5bb0dfa19cf2b3e5c2256a6e08", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'b> Visitor for UnusedImportCheckVisitor<'a, 'b> {\n             }\n             ast::ItemKind::Use(ref p) => {\n                 match p.node {\n-                    ViewPathSimple(_, _) => {\n+                    ViewPathSimple(..) => {\n                         self.check_import(item.id, p.span)\n                     }\n "}, {"sha": "0420fa8026884b0a8d88ad07676786a529e398fc", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -19,6 +19,7 @@\n \n #![feature(associated_consts)]\n #![feature(borrow_state)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -380,7 +381,7 @@ fn resolve_struct_error<'b, 'a: 'b, 'c>(resolver: &'b Resolver<'a>,\n                                     module = path,\n                                     ident = ident.node)\n                         }\n-                        Some(&ExprKind::MethodCall(ident, _, _)) => {\n+                        Some(&ExprKind::MethodCall(ident, ..)) => {\n                             format!(\"to call a function from the `{module}` module, \\\n                                      use `{module}::{ident}(..)`\",\n                                     module = path,\n@@ -599,7 +600,7 @@ impl<'a> Visitor for Resolver<'a> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, ..) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n@@ -1634,15 +1635,15 @@ impl<'a> Resolver<'a> {\n             ItemKind::Ty(_, ref generics) |\n             ItemKind::Struct(_, ref generics) |\n             ItemKind::Union(_, ref generics) |\n-            ItemKind::Fn(_, _, _, _, ref generics, _) => {\n+            ItemKind::Fn(.., ref generics, _) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n                                              |this| visit::walk_item(this, item));\n             }\n \n             ItemKind::DefaultImpl(_, ref trait_ref) => {\n                 self.with_optional_trait_ref(Some(trait_ref), |_, _| {});\n             }\n-            ItemKind::Impl(_, _, ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n+            ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n                 self.resolve_implementation(generics,\n                                             opt_trait_ref,\n                                             &self_type,\n@@ -2368,7 +2369,7 @@ impl<'a> Resolver<'a> {\n                     self.record_def(pat.id, resolution);\n                 }\n \n-                PatKind::TupleStruct(ref path, _, _) => {\n+                PatKind::TupleStruct(ref path, ..) => {\n                     self.resolve_pattern_path(pat.id, None, path, ValueNS, |def| {\n                         match def {\n                             Def::Struct(..) | Def::Variant(..) => true,\n@@ -2387,7 +2388,7 @@ impl<'a> Resolver<'a> {\n                     }, \"variant, struct or constant\");\n                 }\n \n-                PatKind::Struct(ref path, _, _) => {\n+                PatKind::Struct(ref path, ..) => {\n                     self.resolve_pattern_path(pat.id, None, path, TypeNS, |def| {\n                         match def {\n                             Def::Struct(..) | Def::Union(..) | Def::Variant(..) |\n@@ -2962,7 +2963,7 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Struct(ref path, _, _) => {\n+            ExprKind::Struct(ref path, ..) => {\n                 // Resolve the path to the structure it goes to. We don't\n                 // check to ensure that the path is actually a structure; that\n                 // is checked later during typeck.\n@@ -2984,7 +2985,7 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Loop(_, Some(label)) | ExprKind::While(_, _, Some(label)) => {\n+            ExprKind::Loop(_, Some(label)) | ExprKind::While(.., Some(label)) => {\n                 self.with_label_rib(|this| {\n                     let def = Def::Label(expr.id);\n \n@@ -3076,7 +3077,7 @@ impl<'a> Resolver<'a> {\n                 let traits = self.get_traits_containing_item(name.node.name);\n                 self.trait_map.insert(expr.id, traits);\n             }\n-            ExprKind::MethodCall(name, _, _) => {\n+            ExprKind::MethodCall(name, ..) => {\n                 debug!(\"(recording candidate traits for expr) recording traits for {}\",\n                        expr.id);\n                 let traits = self.get_traits_containing_item(name.node.name);\n@@ -3240,7 +3241,7 @@ impl<'a> Resolver<'a> {\n                     if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n                         // add the module to the lookup\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n-                        if !worklist.iter().any(|&(m, _, _)| m.def == module.def) {\n+                        if !worklist.iter().any(|&(m, ..)| m.def == module.def) {\n                             worklist.push((module, path_segments, is_extern));\n                         }\n                     }"}, {"sha": "9f8571e50a2cf44ff46950baba04d1c3a914e726", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -312,7 +312,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                     qualname: String::new()\n                 }.lower(self.tcx));\n             }\n-            Def::Static(_, _) |\n+            Def::Static(..) |\n             Def::Const(_) |\n             Def::AssociatedConst(..) |\n             Def::Local(..) |\n@@ -351,7 +351,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n             let mut collector = PathCollector::new();\n             collector.visit_pat(&arg.pat);\n             let span_utils = self.span.clone();\n-            for &(id, ref p, _, _) in &collector.collected_paths {\n+            for &(id, ref p, ..) in &collector.collected_paths {\n                 let typ = self.tcx.node_types().get(&id).unwrap().to_string();\n                 // get the span only for the name of the variable (I hope the path is only ever a\n                 // variable name, but who knows?)\n@@ -893,7 +893,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump + 'll> DumpVisitor<'l, 'tcx, 'll, D> {\n                 }\n             }\n             Def::Local(..) |\n-            Def::Static(_,_) |\n+            Def::Static(..) |\n             Def::Const(..) |\n             Def::AssociatedConst(..) |\n             Def::Struct(..) |\n@@ -1206,15 +1206,15 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     }.lower(self.tcx));\n                 }\n             }\n-            Fn(ref decl, _, _, _, ref ty_params, ref body) =>\n+            Fn(ref decl, .., ref ty_params, ref body) =>\n                 self.process_fn(item, &decl, ty_params, &body),\n             Static(ref typ, _, ref expr) =>\n                 self.process_static_or_const_item(item, typ, expr),\n             Const(ref typ, ref expr) =>\n                 self.process_static_or_const_item(item, &typ, &expr),\n             Struct(ref def, ref ty_params) => self.process_struct(item, def, ty_params),\n             Enum(ref def, ref ty_params) => self.process_enum(item, def, ty_params),\n-            Impl(_, _,\n+            Impl(..,\n                           ref ty_params,\n                           ref trait_ref,\n                           ref typ,\n@@ -1306,7 +1306,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                 let def = self.tcx.expect_def(hir_expr.id);\n                 self.process_struct_lit(ex, path, fields, adt.variant_of_def(def), base)\n             }\n-            ast::ExprKind::MethodCall(_, _, ref args) => self.process_method_call(ex, args),\n+            ast::ExprKind::MethodCall(.., ref args) => self.process_method_call(ex, args),\n             ast::ExprKind::Field(ref sub_ex, _) => {\n                 self.visit_expr(&sub_ex);\n \n@@ -1437,7 +1437,7 @@ impl<'l, 'tcx: 'l, 'll, D: Dump +'ll> Visitor for DumpVisitor<'l, 'tcx, 'll, D>\n                     paths_to_process.push((id, p.clone(), Some(ref_kind)))\n                 }\n                 // FIXME(nrc) what are these doing here?\n-                Def::Static(_, _) |\n+                Def::Static(..) |\n                 Def::Const(..) |\n                 Def::AssociatedConst(..) => {}\n                 def => error!(\"unexpected definition kind when processing collected paths: {:?}\","}, {"sha": "04cd72ac2d3647de31dc91b94bc15fc5762b2b89", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -18,6 +18,7 @@\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(custom_attribute)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![allow(unused_attributes)]\n #![feature(rustc_private)]\n #![feature(staged_api)]\n@@ -126,7 +127,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n \n     pub fn get_item_data(&self, item: &ast::Item) -> Option<Data> {\n         match item.node {\n-            ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n+            ast::ItemKind::Fn(ref decl, .., ref generics, _) => {\n                 let qualname = format!(\"::{}\", self.tcx.node_path_str(item.id));\n                 let sub_span = self.span_utils.sub_span_after_keyword(item.span, keywords::Fn);\n                 filter!(self.span_utils, sub_span, item.span, None);\n@@ -227,7 +228,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     visibility: From::from(&item.vis),\n                 }))\n             }\n-            ast::ItemKind::Impl(_, _, _, ref trait_ref, ref typ, _) => {\n+            ast::ItemKind::Impl(.., ref trait_ref, ref typ, _) => {\n                 let mut type_data = None;\n                 let sub_span;\n \n@@ -307,7 +308,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             Some(impl_id) => match self.tcx.map.get_if_local(impl_id) {\n                 Some(NodeItem(item)) => {\n                     match item.node {\n-                        hir::ItemImpl(_, _, _, _, ref ty, _) => {\n+                        hir::ItemImpl(.., ref ty, _) => {\n                             let mut result = String::from(\"<\");\n                             result.push_str(&rustc::hir::print::ty_to_string(&ty));\n \n@@ -436,7 +437,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     }\n                 }\n             }\n-            ast::ExprKind::Struct(ref path, _, _) => {\n+            ast::ExprKind::Struct(ref path, ..) => {\n                 match self.tcx.expr_ty_adjusted(&hir_node).sty {\n                     ty::TyStruct(def, _) | ty::TyUnion(def, _) => {\n                         let sub_span = self.span_utils.span_for_last_ident(path.span);\n@@ -708,11 +709,11 @@ impl PathCollector {\n impl Visitor for PathCollector {\n     fn visit_pat(&mut self, p: &ast::Pat) {\n         match p.node {\n-            PatKind::Struct(ref path, _, _) => {\n+            PatKind::Struct(ref path, ..) => {\n                 self.collected_paths.push((p.id, path.clone(),\n                                            ast::Mutability::Mutable, recorder::TypeRef));\n             }\n-            PatKind::TupleStruct(ref path, _, _) |\n+            PatKind::TupleStruct(ref path, ..) |\n             PatKind::Path(_, ref path) => {\n                 self.collected_paths.push((p.id, path.clone(),\n                                            ast::Mutability::Mutable, recorder::VarRef));"}, {"sha": "9eeefa079fb634614c1e516a5cbb4d3933b949b0", "filename": "src/librustc_trans/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fadt.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -701,7 +701,7 @@ fn generic_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     debug!(\"adt::generic_type_of r: {:?} name: {:?} sizing: {} dst: {}\",\n            r, name, sizing, dst);\n     match *r {\n-        CEnum(ity, _, _) => ll_inttype(cx, ity),\n+        CEnum(ity, ..) => ll_inttype(cx, ity),\n         RawNullablePointer { nnty, .. } =>\n             type_of::sizing_type_of(cx, nnty),\n         StructWrappedNullablePointer { nonnull: ref st, .. } => {\n@@ -839,7 +839,7 @@ pub fn trans_switch<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n \n pub fn is_discr_signed<'tcx>(r: &Repr<'tcx>) -> bool {\n     match *r {\n-        CEnum(ity, _, _) => ity.is_signed(),\n+        CEnum(ity, ..) => ity.is_signed(),\n         General(ity, _) => ity.is_signed(),\n         Univariant(..) | UntaggedUnion(..) => false,\n         RawNullablePointer { .. } => false,\n@@ -918,7 +918,7 @@ fn load_discr(bcx: Block, ity: IntType, ptr: ValueRef, min: Disr, max: Disr,\n pub fn trans_case<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, r: &Repr, discr: Disr)\n                               -> ValueRef {\n     match *r {\n-        CEnum(ity, _, _) => {\n+        CEnum(ity, ..) => {\n             C_integral(ll_inttype(bcx.ccx(), ity), discr.0, true)\n         }\n         General(ity, _) => {"}, {"sha": "04b814e2b9772fd3b162454650a349e8aca7b5ef", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1130,10 +1130,10 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n     // inline with lifetime intrinsics, and O2+ we add an inliner with a\n     // thresholds copied from clang.\n     match (opt_level, opt_size, inline_threshold) {\n-        (_, _, Some(t)) => {\n+        (.., Some(t)) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, t as u32);\n         }\n-        (llvm::CodeGenOptLevel::Aggressive, _, _) => {\n+        (llvm::CodeGenOptLevel::Aggressive, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 275);\n         }\n         (_, llvm::CodeGenOptSizeDefault, _) => {\n@@ -1142,16 +1142,16 @@ pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n         (_, llvm::CodeGenOptSizeAggressive, _) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 25);\n         }\n-        (llvm::CodeGenOptLevel::None, _, _) => {\n+        (llvm::CodeGenOptLevel::None, ..) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, false);\n         }\n-        (llvm::CodeGenOptLevel::Less, _, _) => {\n+        (llvm::CodeGenOptLevel::Less, ..) => {\n             llvm::LLVMRustAddAlwaysInlinePass(builder, true);\n         }\n-        (llvm::CodeGenOptLevel::Default, _, _) => {\n+        (llvm::CodeGenOptLevel::Default, ..) => {\n             llvm::LLVMPassManagerBuilderUseInlinerWithThreshold(builder, 225);\n         }\n-        (llvm::CodeGenOptLevel::Other, _, _) => {\n+        (llvm::CodeGenOptLevel::Other, ..) => {\n             bug!(\"CodeGenOptLevel::Other selected\")\n         }\n     }"}, {"sha": "c94de08118089a7e5d6789cc866f7eda767821eb", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -924,7 +924,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                block_arena: &'blk TypedArena<common::BlockS<'blk, 'tcx>>)\n                -> FunctionContext<'blk, 'tcx> {\n         let (param_substs, def_id) = match definition {\n-            Some((instance, _, _)) => {\n+            Some((instance, ..)) => {\n                 common::validate_substs(instance.substs);\n                 (instance.substs, Some(instance.def))\n             }"}, {"sha": "eb67f4ca6185a36b257352b389b1c00f7079f6f7", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -182,7 +182,7 @@ fn classify_ty(ty: Type) -> Vec<RegClass> {\n             (SSEDs,       SSEUp) |\n             (SSEInt(_),   SSEUp) => return,\n \n-            (_,           _) => newv\n+            (..) => newv\n         };\n         cls[i] = to_write;\n     }"}, {"sha": "a6b92b949e0fc0e664428aed6acea9035f370ec7", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> Callee<'tcx> {\n         }\n \n         let fn_ty = def_ty(ccx.shared(), def_id, substs);\n-        if let ty::TyFnDef(_, _, f) = fn_ty.sty {\n+        if let ty::TyFnDef(.., f) = fn_ty.sty {\n             if f.abi == Abi::RustIntrinsic || f.abi == Abi::PlatformIntrinsic {\n                 return Callee {\n                     data: Intrinsic,\n@@ -314,7 +314,7 @@ pub fn trans_fn_pointer_shim<'a, 'tcx>(\n     // Construct the \"tuply\" version of `bare_fn_ty`. It takes two arguments: `self`,\n     // which is the fn pointer, and `args`, which is the arguments tuple.\n     let sig = match bare_fn_ty.sty {\n-        ty::TyFnDef(_, _,\n+        ty::TyFnDef(..,\n                     &ty::BareFnTy { unsafety: hir::Unsafety::Normal,\n                                     abi: Abi::Rust,\n                                     ref sig }) |\n@@ -442,7 +442,7 @@ fn get_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     // other weird situations. Annoying.\n \n     let fn_ptr_ty = match fn_ty.sty {\n-        ty::TyFnDef(_, _, fty) => {\n+        ty::TyFnDef(.., fty) => {\n             // Create a fn pointer with the substituted signature.\n             tcx.mk_fn_ptr(fty)\n         }"}, {"sha": "704fac5ce7e5391b3a21b618c365cc25ce52ef7d", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -628,7 +628,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                                               def_id: DefId)\n                                               -> bool {\n             if !match tcx.lookup_item_type(def_id).ty.sty {\n-                ty::TyFnDef(def_id, _, _) => {\n+                ty::TyFnDef(def_id, ..) => {\n                     // Some constructors also have type TyFnDef but they are\n                     // always instantiated inline and don't result in\n                     // translation item. Same for FFI functions.\n@@ -1152,7 +1152,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                 // const items only generate translation items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n             }\n-            hir::ItemFn(_, _, _, _, ref generics, _) => {\n+            hir::ItemFn(.., ref generics, _) => {\n                 if !generics.is_type_parameterized() {\n                     let def_id = self.scx.tcx().map.local_def_id(item.id);\n \n@@ -1179,7 +1179,7 @@ impl<'b, 'a, 'v> hir_visit::Visitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let parent_node_id = hir_map.get_parent_node(ii.id);\n                 let is_impl_generic = match hir_map.expect_item(parent_node_id) {\n                     &hir::Item {\n-                        node: hir::ItemImpl(_, _, ref generics, _, _, _),\n+                        node: hir::ItemImpl(_, _, ref generics, ..),\n                         ..\n                     } => {\n                         generics.is_type_parameterized()\n@@ -1214,8 +1214,7 @@ fn create_trans_items_for_default_impls<'a, 'tcx>(scx: &SharedCrateContext<'a, '\n         hir::ItemImpl(_,\n                       _,\n                       ref generics,\n-                      _,\n-                      _,\n+                      ..,\n                       ref items) => {\n             if generics.is_type_parameterized() {\n                 return"}, {"sha": "1bf1023dcd895104be750811bcbf90ab05a1ad44", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -252,7 +252,7 @@ impl<'tcx> TypeMap<'tcx> {\n                                        principal.substs,\n                                        &mut unique_type_id);\n             },\n-            ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+            ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n             ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n                 if unsafety == hir::Unsafety::Unsafe {\n                     unique_type_id.push_str(\"unsafe \");\n@@ -756,7 +756,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                 }\n             }\n         }\n-        ty::TyFnDef(_, _, ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n+        ty::TyFnDef(.., ref barefnty) | ty::TyFnPtr(ref barefnty) => {\n             let fn_metadata = subroutine_type_metadata(cx,\n                                                        unique_type_id,\n                                                        &barefnty.sig,\n@@ -1679,7 +1679,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let type_rep = adt::represent_type(cx, enum_type);\n \n     let discriminant_type_metadata = match *type_rep {\n-        adt::CEnum(inttype, _, _) => {\n+        adt::CEnum(inttype, ..) => {\n             return FinalMetadata(discriminant_type_metadata(inttype))\n         },\n         adt::RawNullablePointer { .. }           |\n@@ -1962,4 +1962,4 @@ pub fn extend_scope_to_file(ccx: &CrateContext,\n             scope_metadata,\n             file_metadata)\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8291f84054d0ccd4190c73d6493d67744ef80067", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -100,7 +100,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             push_item_name(cx, principal.def_id, false, output);\n             push_type_params(cx, principal.substs, output);\n         },\n-        ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n         ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");"}, {"sha": "c0ff6c508bf3e02ebc4e117ec436b5948bebdb19", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -544,7 +544,7 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n \n         }\n \n-        (_, _) => {\n+        (..) => {\n             let intr = match Intrinsic::find(&name) {\n                 Some(intr) => intr,\n                 None => bug!(\"unknown intrinsic '{}'\", name),"}, {"sha": "6f5bac840a1dc8d184b9f455cf3e6f56089d5ea4", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -27,6 +27,7 @@\n #![feature(box_syntax)]\n #![feature(const_fn)]\n #![feature(custom_attribute)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![allow(unused_attributes)]\n #![feature(libc)]\n #![feature(quote)]"}, {"sha": "fbd04d7b380293e343578cc12101bdeb953d6d1e", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -406,7 +406,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match (&callee.ty.sty, &callee.data) {\n-                    (&ty::TyFnDef(def_id, _, _), &Intrinsic) => {\n+                    (&ty::TyFnDef(def_id, ..), &Intrinsic) => {\n                         Some(bcx.tcx().item_name(def_id).as_str())\n                     }\n                     _ => None\n@@ -880,7 +880,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 // FIXME #19925 Remove this hack after a release cycle.\n                 let f = Callee::def(bcx.ccx(), def_id, substs);\n                 let ty = match f.ty.sty {\n-                    ty::TyFnDef(_, _, f) => bcx.tcx().mk_fn_ptr(f),\n+                    ty::TyFnDef(.., f) => bcx.tcx().mk_fn_ptr(f),\n                     _ => f.ty\n                 };\n                 val = OperandRef {"}, {"sha": "3d85da42a6dc6fd0741faddf1ac138a7046ddfaf", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -454,7 +454,7 @@ pub fn push_unique_type_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              &trait_data.projection_bounds,\n                              output);\n         },\n-        ty::TyFnDef(_, _, &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n+        ty::TyFnDef(.., &ty::BareFnTy{ unsafety, abi, ref sig } ) |\n         ty::TyFnPtr(&ty::BareFnTy{ unsafety, abi, ref sig } ) => {\n             if unsafety == hir::Unsafety::Unsafe {\n                 output.push_str(\"unsafe \");"}, {"sha": "5925d222b446635867af87ed89a7309deea12abf", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1358,7 +1358,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             // `ty::trait_items` used below requires information generated\n             // by type collection, which may be in progress at this point.\n             match tcx.map.expect_item(trait_id).node {\n-                hir::ItemTrait(_, _, _, ref trait_items) => {\n+                hir::ItemTrait(.., ref trait_items) => {\n                     let item = trait_items.iter()\n                                           .find(|i| i.name == assoc_name)\n                                           .expect(\"missing associated type\");"}, {"sha": "49db56d2dabd9ecc0d9b4001365d7046c11ce123", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -186,7 +186,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let error_fn_sig;\n \n         let fn_sig = match callee_ty.sty {\n-            ty::TyFnDef(_, _, &ty::BareFnTy {ref sig, ..}) |\n+            ty::TyFnDef(.., &ty::BareFnTy {ref sig, ..}) |\n             ty::TyFnPtr(&ty::BareFnTy {ref sig, ..}) => {\n                 sig\n             }"}, {"sha": "1fda38d8a3305d1e7c4b21e0272aca4fae3464e7", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -319,7 +319,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             (Some(t_from), Some(t_cast)) => (t_from, t_cast),\n             // Function item types may need to be reified before casts.\n             (None, Some(t_cast)) => {\n-                if let ty::TyFnDef(_, _, f) = self.expr_ty.sty {\n+                if let ty::TyFnDef(.., f) = self.expr_ty.sty {\n                     // Attempt a coercion to a fn pointer type.\n                     let res = fcx.try_coerce(self.expr, fcx.tcx.mk_fn_ptr(f));\n                     if !res.is_ok() {"}, {"sha": "60ca9309eea00dd6a5d1b942cba991985e058a12", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -195,7 +195,7 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         }\n \n         match a.sty {\n-            ty::TyFnDef(_, _, a_f) => {\n+            ty::TyFnDef(.., a_f) => {\n                 // Function items are coercible to any closure\n                 // type; function pointers are not (that would\n                 // require double indirection)."}, {"sha": "eb87c230b74adc748abd86c25c9a28cfb43af025", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -53,7 +53,7 @@ fn equate_intrinsic_type<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n     if i_n_tps != n_tps {\n         let span = match it.node {\n             hir::ForeignItemFn(_, ref generics) => generics.span,\n-            hir::ForeignItemStatic(_, _) => it.span\n+            hir::ForeignItemStatic(..) => it.span\n         };\n \n         struct_span_err!(tcx.sess, span, E0094,"}, {"sha": "dbf74e371df45c0b3c73bd8583b10687f8ea3071", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -501,7 +501,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n                                 assert!(adr.unsize.is_none());\n                                 (adr.autoderefs, None)\n                             }\n-                            Some(AutoPtr(_, _)) => {\n+                            Some(AutoPtr(..)) => {\n                                 (adr.autoderefs, adr.unsize.map(|target| {\n                                     target.builtin_deref(false, NoPreference)\n                                             .expect(\"fixup: AutoPtr is not &T\").ty"}, {"sha": "058049992dc00b21f56b42846048b092722496f3", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1314,8 +1314,8 @@ impl<'tcx> Candidate<'tcx> {\n         Pick {\n             item: self.item.clone(),\n             kind: match self.kind {\n-                InherentImplCandidate(_, _) => InherentImplPick,\n-                ExtensionImplCandidate(def_id, _, _) => {\n+                InherentImplCandidate(..) => InherentImplPick,\n+                ExtensionImplCandidate(def_id, ..) => {\n                     ExtensionImplPick(def_id)\n                 }\n                 ObjectCandidate => ObjectPick,\n@@ -1340,10 +1340,10 @@ impl<'tcx> Candidate<'tcx> {\n \n     fn to_source(&self) -> CandidateSource {\n         match self.kind {\n-            InherentImplCandidate(_, _) => {\n+            InherentImplCandidate(..) => {\n                 ImplSource(self.item.container().id())\n             }\n-            ExtensionImplCandidate(def_id, _, _) => ImplSource(def_id),\n+            ExtensionImplCandidate(def_id, ..) => ImplSource(def_id),\n             ObjectCandidate |\n             TraitCandidate |\n             WhereClauseCandidate(_) => TraitSource(self.item.container().id()),"}, {"sha": "0aa523e9d5e47f0fd8fb2602fb2a4811b51ffa84", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -536,7 +536,7 @@ fn check_bare_fn<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                            fn_id: ast::NodeId) {\n     let raw_fty = ccx.tcx.lookup_item_type(ccx.tcx.map.local_def_id(fn_id)).ty;\n     let fn_ty = match raw_fty.sty {\n-        ty::TyFnDef(_, _, f) => f,\n+        ty::TyFnDef(.., f) => f,\n         _ => span_bug!(body.span, \"check_bare_fn: function type expected\")\n     };\n \n@@ -732,7 +732,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n     let _indenter = indenter();\n     match it.node {\n       // Consts can play a role in type-checking, so they are included here.\n-      hir::ItemStatic(_, _, ref e) |\n+      hir::ItemStatic(.., ref e) |\n       hir::ItemConst(_, ref e) => check_const(ccx, &e, it.id),\n       hir::ItemEnum(ref enum_definition, _) => {\n         check_enum_variants(ccx,\n@@ -741,7 +741,7 @@ pub fn check_item_type<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n                             it.id);\n       }\n       hir::ItemFn(..) => {} // entirely within check_item_body\n-      hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+      hir::ItemImpl(.., ref impl_items) => {\n           debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n           let impl_def_id = ccx.tcx.map.local_def_id(it.id);\n           match ccx.tcx.impl_trait_ref(impl_def_id) {\n@@ -808,10 +808,10 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n            ccx.tcx.item_path_str(ccx.tcx.map.local_def_id(it.id)));\n     let _indenter = indenter();\n     match it.node {\n-      hir::ItemFn(ref decl, _, _, _, _, ref body) => {\n+      hir::ItemFn(ref decl, .., ref body) => {\n         check_bare_fn(ccx, &decl, &body, it.id);\n       }\n-      hir::ItemImpl(_, _, _, _, _, ref impl_items) => {\n+      hir::ItemImpl(.., ref impl_items) => {\n         debug!(\"ItemImpl {} with id {}\", it.name, it.id);\n \n         for impl_item in impl_items {\n@@ -828,7 +828,7 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n             }\n         }\n       }\n-      hir::ItemTrait(_, _, _, ref trait_items) => {\n+      hir::ItemTrait(.., ref trait_items) => {\n         for trait_item in trait_items {\n             match trait_item.node {\n                 hir::ConstTraitItem(_, Some(ref expr)) => {\n@@ -2410,7 +2410,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             self.tcx.types.err\n         } else {\n             match method_fn_ty.sty {\n-                ty::TyFnDef(_, _, ref fty) => {\n+                ty::TyFnDef(.., ref fty) => {\n                     // HACK(eddyb) ignore self in the definition (see above).\n                     let expected_arg_tys = self.expected_types_for_fn_args(sp, expected,\n                                                                            fty.sig.0.output,\n@@ -2647,7 +2647,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                            t)\n                         }, arg_ty);\n                     }\n-                    ty::TyFnDef(_, _, f) => {\n+                    ty::TyFnDef(.., f) => {\n                         let ptr_ty = self.tcx.mk_fn_ptr(f);\n                         let ptr_ty = self.resolve_type_vars_if_possible(&ptr_ty);\n                         self.type_error_message(arg.span,\n@@ -3983,7 +3983,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                         _ => false,\n                     }\n                 }\n-                hir::StmtExpr(_, _) | hir::StmtSemi(_, _) => true,\n+                hir::StmtExpr(..) | hir::StmtSemi(..) => true,\n             } {\n                 self.tcx\n                     .sess\n@@ -4209,7 +4209,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.tcx.prohibit_type_params(&segments[..segments.len() - poly_segments]);\n \n         match def {\n-            Def::Local(_, nid) | Def::Upvar(_, nid, _, _) => {\n+            Def::Local(_, nid) | Def::Upvar(_, nid, ..) => {\n                 let ty = self.local_ty(span, nid);\n                 let ty = self.normalize_associated_types_in(span, &ty);\n                 self.write_ty(node_id, ty);"}, {"sha": "939deee27c60234b084aa61dcd5829c6b05601cb", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -576,7 +576,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for RegionCtxt<'a, 'gcx, 'tcx> {\n                     }\n                 }\n                 /*\n-                adjustment::AutoObject(_, ref bounds, _, _) => {\n+                adjustment::AutoObject(_, ref bounds, ..) => {\n                     // Determine if we are casting `expr` to a trait\n                     // instance. If so, we have to be sure that the type\n                     // of the source obeys the new region bound.\n@@ -643,7 +643,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for RegionCtxt<'a, 'gcx, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n             }\n \n-            hir::ExprMethodCall(_, _, ref args) => {\n+            hir::ExprMethodCall(.., ref args) => {\n                 self.constrain_call(expr, Some(&args[0]),\n                                     args[1..].iter().map(|e| &**e), false);\n \n@@ -758,7 +758,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for RegionCtxt<'a, 'gcx, 'tcx> {\n                 intravisit::walk_expr(self, expr);\n             }\n \n-            hir::ExprClosure(_, _, ref body, _) => {\n+            hir::ExprClosure(.., ref body, _) => {\n                 self.check_expr_fn_block(expr, &body);\n             }\n \n@@ -1156,7 +1156,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n     let _ = mc.cat_pattern(discr_cmt, root_pat, |_, sub_cmt, sub_pat| {\n                 match sub_pat.node {\n                     // `ref x` pattern\n-                    PatKind::Binding(hir::BindByRef(mutbl), _, _) => {\n+                    PatKind::Binding(hir::BindByRef(mutbl), ..) => {\n                         self.link_region_from_node_type(sub_pat.span, sub_pat.id,\n                                                         mutbl, sub_cmt);\n                     }\n@@ -1269,7 +1269,7 @@ impl<'a, 'gcx, 'tcx> RegionCtxt<'a, 'gcx, 'tcx> {\n                     borrow_kind = borrow_kind;\n                 }\n \n-                Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n+                Categorization::Deref(.., mc::UnsafePtr(..)) |\n                 Categorization::StaticItem |\n                 Categorization::Upvar(..) |\n                 Categorization::Local(..) |"}, {"sha": "f4a0df4611d33452fda5f9c16d8bb1d8ef34f1da", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -283,8 +283,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         debug!(\"adjust_upvar_borrow_kind_for_consume: guarantor={:?}\",\n                guarantor);\n         match guarantor.cat {\n-            Categorization::Deref(_, _, mc::BorrowedPtr(..)) |\n-            Categorization::Deref(_, _, mc::Implicit(..)) => {\n+            Categorization::Deref(.., mc::BorrowedPtr(..)) |\n+            Categorization::Deref(.., mc::Implicit(..)) => {\n                 match cmt.note {\n                     mc::NoteUpvarRef(upvar_id) => {\n                         debug!(\"adjust_upvar_borrow_kind_for_consume: \\\n@@ -344,7 +344,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n+            Categorization::Deref(.., mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n             Categorization::Rvalue(_) |\n             Categorization::Local(_) |\n@@ -376,7 +376,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            Categorization::Deref(_, _, mc::UnsafePtr(..)) |\n+            Categorization::Deref(.., mc::UnsafePtr(..)) |\n             Categorization::StaticItem |\n             Categorization::Rvalue(_) |\n             Categorization::Local(_) |"}, {"sha": "6e87c29c4b36365884421af98f1387742ed0edfb", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -112,7 +112,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                           ref trait_ref, ref self_ty, _) => {\n                 self.check_impl(item, self_ty, trait_ref);\n             }\n-            hir::ItemImpl(_, hir::ImplPolarity::Negative, _, Some(_), _, _) => {\n+            hir::ItemImpl(_, hir::ImplPolarity::Negative, _, Some(_), ..) => {\n                 // FIXME(#27579) what amount of WF checking do we need for neg impls?\n \n                 let trait_ref = ccx.tcx.impl_trait_ref(ccx.tcx.map.local_def_id(item.id)).unwrap();\n@@ -126,7 +126,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n                     }\n                 }\n             }\n-            hir::ItemFn(_, _, _, _, _, ref body) => {\n+            hir::ItemFn(.., ref body) => {\n                 self.check_item_fn(item, body);\n             }\n             hir::ItemStatic(..) => {\n@@ -156,7 +156,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n \n                 self.check_variances_for_type_defn(item, ast_generics);\n             }\n-            hir::ItemTrait(_, _, _, ref items) => {\n+            hir::ItemTrait(.., ref items) => {\n                 self.check_trait(item, items);\n             }\n             _ => {}\n@@ -286,7 +286,7 @@ impl<'ccx, 'gcx> CheckTypeWellFormedVisitor<'ccx, 'gcx> {\n             let type_scheme = fcx.tcx.lookup_item_type(fcx.tcx.map.local_def_id(item.id));\n             let item_ty = fcx.instantiate_type_scheme(item.span, free_substs, &type_scheme.ty);\n             let bare_fn_ty = match item_ty.sty {\n-                ty::TyFnDef(_, _, ref bare_fn_ty) => bare_fn_ty,\n+                ty::TyFnDef(.., ref bare_fn_ty) => bare_fn_ty,\n                 _ => {\n                     span_bug!(item.span, \"Fn item without fn type\");\n                 }"}, {"sha": "4be032c6f7f095767818efad7498ecd65fbb33b2", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -201,7 +201,7 @@ impl<'cx, 'gcx, 'tcx, 'v> Visitor<'v> for WritebackCx<'cx, 'gcx, 'tcx> {\n         self.visit_method_map_entry(ResolvingExpr(e.span),\n                                     MethodCall::expr(e.id));\n \n-        if let hir::ExprClosure(_, ref decl, _, _) = e.node {\n+        if let hir::ExprClosure(_, ref decl, ..) = e.node {\n             for input in &decl.inputs {\n                 self.visit_node_id(ResolvingExpr(e.span), input.id);\n             }\n@@ -323,7 +323,7 @@ impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {\n \n                     // Free regions that come from early-bound regions are valid.\n                     ty::ReFree(ty::FreeRegion {\n-                        bound_region: ty::BoundRegion::BrNamed(def_id, _, _), ..\n+                        bound_region: ty::BoundRegion::BrNamed(def_id, ..), ..\n                     }) if self.free_to_bound_regions.contains_key(&def_id) => {\n                         self.free_to_bound_regions[&def_id]\n                     }"}, {"sha": "d2b7f07b9ce6ca0102dc44c79afa444d16e3ddce", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -86,7 +86,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n             TyBool | TyChar | TyInt(..) | TyUint(..) | TyFloat(..) |\n             TyStr | TyArray(..) | TySlice(..) | TyFnDef(..) | TyFnPtr(_) |\n             TyTuple(..) | TyParam(..) | TyError | TyNever |\n-            TyRawPtr(_) | TyRef(_, _) | TyProjection(..) => {\n+            TyRawPtr(_) | TyRef(..) | TyProjection(..) => {\n                 None\n             }\n \n@@ -195,7 +195,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n     // Converts an implementation in the AST to a vector of items.\n     fn create_impl_from_item(&self, item: &Item) -> Vec<ImplOrTraitItemId> {\n         match item.node {\n-            ItemImpl(_, _, _, _, _, ref impl_items) => {\n+            ItemImpl(.., ref impl_items) => {\n                 impl_items.iter().map(|impl_item| {\n                     let impl_def_id = self.crate_context.tcx.map.local_def_id(impl_item.id);\n                     match impl_item.node {\n@@ -252,7 +252,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                         match tcx.map.find(impl_node_id) {\n                             Some(hir_map::NodeItem(item)) => {\n                                 let span = match item.node {\n-                                    ItemImpl(_, _, _, _, ref ty, _) => {\n+                                    ItemImpl(.., ref ty, _) => {\n                                         ty.span\n                                     },\n                                     _ => item.span\n@@ -324,7 +324,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                 }\n                 Err(CopyImplementationError::InfrigingVariant(name)) => {\n                     let item = tcx.map.expect_item(impl_node_id);\n-                    let span = if let ItemImpl(_, _, _, Some(ref tr), _, _) = item.node {\n+                    let span = if let ItemImpl(.., Some(ref tr), _, _) = item.node {\n                         tr.path.span\n                     } else {\n                         span\n@@ -338,7 +338,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                 }\n                 Err(CopyImplementationError::NotAnAdt) => {\n                     let item = tcx.map.expect_item(impl_node_id);\n-                    let span = if let ItemImpl(_, _, _, _, ref ty, _) = item.node {\n+                    let span = if let ItemImpl(.., ref ty, _) = item.node {\n                         ty.span\n                     } else {\n                         span\n@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> CoherenceChecker<'a, 'gcx, 'tcx> {\n                             return;\n                         } else if diff_fields.len() > 1 {\n                             let item = tcx.map.expect_item(impl_node_id);\n-                            let span = if let ItemImpl(_, _, _, Some(ref t), _, _) = item.node {\n+                            let span = if let ItemImpl(.., Some(ref t), _, _) = item.node {\n                                 t.path.span\n                             } else {\n                                 tcx.map.span(impl_node_id)"}, {"sha": "cb424eb48e9328057e34ed1ebf2e6c87db6f9529", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -68,7 +68,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n     fn check_item(&self, item: &hir::Item) {\n         let def_id = self.tcx.map.local_def_id(item.id);\n         match item.node {\n-            hir::ItemImpl(_, _, _, None, ref ty, _) => {\n+            hir::ItemImpl(.., None, ref ty, _) => {\n                 // For inherent impls, self type must be a nominal type\n                 // defined in this crate.\n                 debug!(\"coherence2::orphan check: inherent impl {}\",\n@@ -222,7 +222,7 @@ impl<'cx, 'tcx> OrphanChecker<'cx, 'tcx> {\n                     }\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 // \"Trait\" impl\n                 debug!(\"coherence2::orphan check: trait impl {}\",\n                        self.tcx.map.node_to_string(item.id));"}, {"sha": "890b6c72e6fee5baeae296751b6aef687cabf543", "filename": "src/librustc_typeck/coherence/overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Foverlap.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -122,7 +122,7 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for OverlapChecker<'cx, 'tcx> {\n                     err.emit();\n                 }\n             }\n-            hir::ItemImpl(_, _, _, Some(_), _, _) => {\n+            hir::ItemImpl(.., Some(_), _, _) => {\n                 let impl_def_id = self.tcx.map.local_def_id(item.id);\n                 let trait_ref = self.tcx.impl_trait_ref(impl_def_id).unwrap();\n                 let trait_def_id = trait_ref.def_id;"}, {"sha": "cdf5478e692b2bc84bd6a10db881f817a0946613", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -81,7 +81,7 @@ impl<'cx, 'tcx,'v> intravisit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n             hir::ItemDefaultImpl(unsafety, _) => {\n                 self.check_unsafety_coherence(item, unsafety, hir::ImplPolarity::Positive);\n             }\n-            hir::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+            hir::ItemImpl(unsafety, polarity, ..) => {\n                 self.check_unsafety_coherence(item, unsafety, polarity);\n             }\n             _ => { }"}, {"sha": "fcc0b09e31acf158db22235f004e7910f3c464d8", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -740,7 +740,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             tcx.impl_trait_refs.borrow_mut().insert(ccx.tcx.map.local_def_id(it.id),\n                                                     Some(trait_ref));\n         }\n-        hir::ItemImpl(_, _,\n+        hir::ItemImpl(..,\n                       ref generics,\n                       ref opt_trait_ref,\n                       ref selfty,\n@@ -850,7 +850,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             enforce_impl_lifetimes_are_constrained(ccx, generics, def_id, impl_items);\n         },\n-        hir::ItemTrait(_, _, _, ref trait_items) => {\n+        hir::ItemTrait(.., ref trait_items) => {\n             let trait_def = trait_def_of_item(ccx, it);\n             let def_id = trait_def.trait_ref.def_id;\n             let _: Result<(), ErrorReported> = // any error is already reported, can ignore\n@@ -1311,7 +1311,7 @@ fn trait_defines_associated_type_named(ccx: &CrateCtxt,\n     };\n \n     let trait_items = match item.node {\n-        hir::ItemTrait(_, _, _, ref trait_items) => trait_items,\n+        hir::ItemTrait(.., ref trait_items) => trait_items,\n         _ => bug!(\"trait_node_id {} is not a trait\", trait_node_id)\n     };\n \n@@ -1445,8 +1445,8 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n             NodeItem(item) => {\n                 match item.node {\n-                    ItemFn(_, _, _, _, ref generics, _) |\n-                    ItemImpl(_, _, ref generics, _, _, _) => generics,\n+                    ItemFn(.., ref generics, _) |\n+                    ItemImpl(_, _, ref generics, ..) => generics,\n \n                     ItemTy(_, ref generics) |\n                     ItemEnum(_, ref generics) |\n@@ -1456,7 +1456,7 @@ fn generics_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                         generics\n                     }\n \n-                    ItemTrait(_, ref generics, _, _) => {\n+                    ItemTrait(_, ref generics, ..) => {\n                         // Add in the self type parameter.\n                         //\n                         // Something of a hack: use the node id for the trait, also as\n@@ -1566,7 +1566,7 @@ fn type_of_def_id<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n         let ty = match ccx.tcx.map.get(node_id) {\n             NodeItem(item) => {\n                 match item.node {\n-                    ItemStatic(ref t, _, _) | ItemConst(ref t, _) => {\n+                    ItemStatic(ref t, ..) | ItemConst(ref t, _) => {\n                         ccx.icx(&()).to_ty(&ElidableRscope::new(ty::ReStatic), &t)\n                     }\n                     ItemFn(ref decl, unsafety, _, abi, ref generics, _) => {\n@@ -1651,7 +1651,7 @@ fn predicates_of_item<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n \n     let no_generics = hir::Generics::empty();\n     let generics = match it.node {\n-        hir::ItemFn(_, _, _, _, ref generics, _) |\n+        hir::ItemFn(.., ref generics, _) |\n         hir::ItemTy(_, ref generics) |\n         hir::ItemEnum(_, ref generics) |\n         hir::ItemStruct(_, ref generics) |"}, {"sha": "d2e2d578fcedbae8821ba3649a7775e070b88778", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -76,6 +76,7 @@ This API is completely unstable and subject to change.\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(rustc_private)]\n@@ -215,7 +216,7 @@ fn check_main_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(main_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_, _, _, _, ref generics, _) => {\n+                        hir::ItemFn(.., ref generics, _) => {\n                             if generics.is_parameterized() {\n                                 struct_span_err!(ccx.tcx.sess, generics.span, E0131,\n                                          \"main function is not allowed to have type parameters\")\n@@ -267,7 +268,7 @@ fn check_start_fn_ty(ccx: &CrateCtxt,\n             match tcx.map.find(start_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(_,_,_,_,ref ps,_)\n+                        hir::ItemFn(..,ref ps,_)\n                         if ps.is_parameterized() => {\n                             struct_span_err!(tcx.sess, ps.span, E0132,\n                                 \"start function is not allowed to have type parameters\")"}, {"sha": "1e38f464651b9a008c1cc4394e5282c333638f09", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -415,7 +415,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 }\n             }\n \n-            ty::TyFnDef(_, _, &ty::BareFnTy { ref sig, .. }) |\n+            ty::TyFnDef(.., &ty::BareFnTy { ref sig, .. }) |\n             ty::TyFnPtr(&ty::BareFnTy { ref sig, .. }) => {\n                 self.add_constraints_from_sig(generics, sig, variance);\n             }"}, {"sha": "577a47a35e1251ae41e258eb2089d61eba05ccbb", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -238,7 +238,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for TermsContext<'a, 'tcx> {\n             hir::ItemUnion(_, ref generics) => {\n                 self.add_inferreds_for_item(item.id, false, generics);\n             }\n-            hir::ItemTrait(_, ref generics, _, _) => {\n+            hir::ItemTrait(_, ref generics, ..) => {\n                 // Note: all inputs for traits are ultimately\n                 // constrained to be invariant. See `visit_item` in\n                 // the impl for `ConstraintContext` in `constraints.rs`."}, {"sha": "18c12f98fb428cd1f939d263c3367f273d1f6475", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -180,7 +180,7 @@ fn build_external_function<'a, 'tcx>(cx: &DocContext, tcx: TyCtxt<'a, 'tcx, 'tcx\n                                      did: DefId) -> clean::Function {\n     let t = tcx.lookup_item_type(did);\n     let (decl, style, abi) = match t.ty.sty {\n-        ty::TyFnDef(_, _, ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n+        ty::TyFnDef(.., ref f) => ((did, &f.sig).clean(cx), f.unsafety, f.abi),\n         _ => panic!(\"bad function\"),\n     };\n "}, {"sha": "4bab79ea8a99b800785d5c59daabd3e1ad8f4971", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -642,7 +642,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<DefId>, has_self: boo\n                 output: output\n             }\n         },\n-        (_, _) => {\n+        (..) => {\n             PathParameters::AngleBracketed {\n                 lifetimes: lifetimes,\n                 types: types.clean(cx),\n@@ -717,7 +717,7 @@ impl<'tcx> Clean<TyParamBound> for ty::TraitRef<'tcx> {\n             if let ty::TyTuple(ts) = ty_s.sty {\n                 for &ty_s in ts {\n                     if let ty::TyRef(ref reg, _) = ty_s.sty {\n-                        if let &ty::Region::ReLateBound(_, _) = *reg {\n+                        if let &ty::Region::ReLateBound(..) = *reg {\n                             debug!(\"  hit an ReLateBound {:?}\", reg);\n                             if let Some(lt) = reg.clean(cx) {\n                                 late_bounds.push(lt);\n@@ -1794,7 +1794,7 @@ impl<'tcx> Clean<Type> for ty::Ty<'tcx> {\n                 mutability: mt.mutbl.clean(cx),\n                 type_: box mt.ty.clean(cx),\n             },\n-            ty::TyFnDef(_, _, ref fty) |\n+            ty::TyFnDef(.., ref fty) |\n             ty::TyFnPtr(ref fty) => BareFunction(box BareFunctionDecl {\n                 unsafety: fty.unsafety,\n                 generics: Generics {\n@@ -2699,7 +2699,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     match p.node {\n         PatKind::Wild => \"_\".to_string(),\n         PatKind::Binding(_, ref p, _) => p.node.to_string(),\n-        PatKind::TupleStruct(ref p, _, _) | PatKind::Path(None, ref p) => path_to_string(p),\n+        PatKind::TupleStruct(ref p, ..) | PatKind::Path(None, ref p) => path_to_string(p),\n         PatKind::Path(..) => panic!(\"tried to get argument name from qualified PatKind::Path, \\\n                                      which is not allowed in function arguments\"),\n         PatKind::Struct(ref name, ref fields, etc) => {"}, {"sha": "61b80be969980a249aed9ba9219022b51fb9638d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -1891,7 +1891,7 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n                     (false, &Some(ref tracker_url), Some(issue_no)) if issue_no > 0 =>\n                         format!(\" (<a href=\\\"{}{}\\\">#{}</a>)\", Escape(&tracker_url), issue_no,\n                                 issue_no),\n-                    (true, _, _) =>\n+                    (true, ..) =>\n                         format!(\" (<code>{}</code>)\", Escape(&stab.feature)),\n                     _ => String::new(),\n                 }"}, {"sha": "cc5cdf9f4e74cb19337732523bc8bc1df62f37cc", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -20,6 +20,7 @@\n \n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(libc)]\n #![feature(rustc_private)]\n #![feature(set_stdio)]\n@@ -420,7 +421,7 @@ fn rust_input(cratefile: &str, externs: Externs, matches: &getopts::Matches) ->\n     let mut pm = plugins::PluginManager::new(PathBuf::from(path));\n     for pass in &passes {\n         let plugin = match PASSES.iter()\n-                                 .position(|&(p, _, _)| {\n+                                 .position(|&(p, ..)| {\n                                      p == *pass\n                                  }) {\n             Some(i) => PASSES[i].1,"}, {"sha": "b5b344e8d5f24a4ea39912dd12f139bb1eae797e", "filename": "src/libserialize/hex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibserialize%2Fhex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibserialize%2Fhex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fhex.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -82,7 +82,7 @@ impl fmt::Display for FromHexError {\n impl error::Error for FromHexError {\n     fn description(&self) -> &str {\n         match *self {\n-            InvalidHexCharacter(_, _) => \"invalid character\",\n+            InvalidHexCharacter(..) => \"invalid character\",\n             InvalidHexLength => \"invalid length\",\n         }\n     }"}, {"sha": "4a637b5cfcff7275b93625f900fa247f8a74ad45", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -227,6 +227,7 @@\n #![feature(const_fn)]\n #![feature(core_float)]\n #![feature(core_intrinsics)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(dropck_parametricity)]\n #![feature(float_extras)]\n #![feature(float_from_str_radix)]"}, {"sha": "0a9c77f2538484415735259941b2fb077e33ff27", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -332,7 +332,7 @@ impl<'a> Prefix<'a> {\n     pub fn is_verbatim(&self) -> bool {\n         use self::Prefix::*;\n         match *self {\n-            Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(_, _) => true,\n+            Verbatim(_) | VerbatimDisk(_) | VerbatimUNC(..) => true,\n             _ => false,\n         }\n     }"}, {"sha": "90a16853d56dd43c60894d2648ffd5818b14bc3a", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -200,7 +200,7 @@ impl OpenOptions {\n         const ERROR_INVALID_PARAMETER: i32 = 87;\n \n         match (self.read, self.write, self.append, self.access_mode) {\n-            (_, _, _, Some(mode)) => Ok(mode),\n+            (.., Some(mode)) => Ok(mode),\n             (true,  false, false, None) => Ok(c::GENERIC_READ),\n             (false, true,  false, None) => Ok(c::GENERIC_WRITE),\n             (true,  true,  false, None) => Ok(c::GENERIC_READ | c::GENERIC_WRITE),"}, {"sha": "105f911dd575c4e8e29633574e6efb04c7e51f6c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -561,8 +561,8 @@ impl Pat {\n             }\n             PatKind::Wild |\n             PatKind::Lit(_) |\n-            PatKind::Range(_, _) |\n-            PatKind::Ident(_, _, _) |\n+            PatKind::Range(..) |\n+            PatKind::Ident(..) |\n             PatKind::Path(..) |\n             PatKind::Mac(_) => {\n                 true"}, {"sha": "b0696a986e3c04a3cf4d00e586fd32cef372ffcb", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -156,7 +156,7 @@ pub fn count_names(ms: &[TokenTree]) -> usize {\n             TokenTree::Token(_, MatchNt(..)) => {\n                 1\n             }\n-            TokenTree::Token(_, _) => 0,\n+            TokenTree::Token(..) => 0,\n         }\n     })\n }\n@@ -231,7 +231,7 @@ pub fn nameize(p_s: &ParseSess, ms: &[TokenTree], res: &[Rc<NamedMatch>])\n             TokenTree::Token(sp, SubstNt(..)) => {\n                 return Err((sp, \"missing fragment specifier\".to_string()))\n             }\n-            TokenTree::Token(_, _) => (),\n+            TokenTree::Token(..) => (),\n         }\n \n         Ok(())"}, {"sha": "ff01d37581544575cb46bdaa3bfaf7d14fcd1ad5", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -180,7 +180,7 @@ impl Token {\n             Ident(..)                   => true,\n             Underscore                  => true,\n             Tilde                       => true,\n-            Literal(_, _)               => true,\n+            Literal(..)                 => true,\n             Not                         => true,\n             BinOp(Minus)                => true,\n             BinOp(Star)                 => true,\n@@ -202,8 +202,8 @@ impl Token {\n     /// Returns `true` if the token is any literal\n     pub fn is_lit(&self) -> bool {\n         match *self {\n-            Literal(_, _) => true,\n-            _             => false,\n+            Literal(..) => true,\n+            _           => false,\n         }\n     }\n "}, {"sha": "77425b809de1dc9a9db8e402c58021f79b4c61e4", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -233,7 +233,7 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n                     p.bump();\n                     state = st;\n                 }\n-                (&token::Eof, _, _) => break 'statement,\n+                (&token::Eof, ..) => break 'statement,\n                 _ => break,\n             }\n         }"}, {"sha": "f367fed9cc2ceb52b788b75b5d40e6d960b86b5a", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -78,7 +78,7 @@ fn show_substructure(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<E\n \n     let mut stmts = match *substr.fields {\n         Struct(_, ref fields) |\n-        EnumMatching(_, _, ref fields) => {\n+        EnumMatching(.., ref fields) => {\n             let mut stmts = vec![];\n             if !is_struct {\n                 // tuple struct/\"normal\" variant"}, {"sha": "600f5d335c4727db3bbf05110fbb0dccc1e144ce", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -976,7 +976,7 @@ impl<'a> MethodDef<'a> {\n                         other: other_fields.iter_mut()\n                             .map(|l| {\n                                 match l.next().unwrap() {\n-                                    (_, _, ex, _) => ex,\n+                                    (.., ex, _) => ex,\n                                 }\n                             })\n                             .collect(),\n@@ -1527,7 +1527,7 @@ impl<'a> TraitDef<'a> {\n             VariantData::Struct(..) => {\n                 let field_pats = subpats.into_iter()\n                     .zip(&ident_exprs)\n-                    .map(|(pat, &(sp, ident, _, _))| {\n+                    .map(|(pat, &(sp, ident, ..))| {\n                         if ident.is_none() {\n                             cx.span_bug(sp, \"a braced struct with unnamed fields in `derive`\");\n                         }\n@@ -1583,7 +1583,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n     where F: FnMut(&mut ExtCtxt, Span, P<Expr>, P<Expr>, &[P<Expr>]) -> P<Expr>\n {\n     match *substructure.fields {\n-        EnumMatching(_, _, ref all_fields) |\n+        EnumMatching(.., ref all_fields) |\n         Struct(_, ref all_fields) => {\n             if use_foldl {\n                 all_fields.iter().fold(base, |old, field| {\n@@ -1623,7 +1623,7 @@ pub fn cs_same_method<F>(f: F,\n     where F: FnOnce(&mut ExtCtxt, Span, Vec<P<Expr>>) -> P<Expr>\n {\n     match *substructure.fields {\n-        EnumMatching(_, _, ref all_fields) |\n+        EnumMatching(.., ref all_fields) |\n         Struct(_, ref all_fields) => {\n             // call self_n.method(other_1_n, other_2_n, ...)\n             let called = all_fields.iter()"}, {"sha": "97d7f2ce8003ea8c77481da3104e4647a773b0c1", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -82,7 +82,7 @@ fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure)\n \n     let fields = match *substr.fields {\n         Struct(_, ref fs) => fs,\n-        EnumMatching(_, _, ref fs) => {\n+        EnumMatching(.., ref fs) => {\n             let variant_value = deriving::call_intrinsic(cx,\n                                                          trait_span,\n                                                          \"discriminant_value\","}, {"sha": "2065d92fd6ed7fbc86cd5b79324d984971857217", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -19,6 +19,7 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_macro_lib)]\n #![feature(rustc_macro_internals)]\n #![feature(rustc_private)]"}, {"sha": "bd5ab92e8b078fd14d9b873351a3f8ac5e2e2949", "filename": "src/libterm/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibterm%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Flibterm%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparm.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -199,7 +199,7 @@ pub fn expand(cap: &[u8], params: &[Param], vars: &mut Variables) -> Result<Vec<\n                                 mparams[0] = Number(x + 1);\n                                 mparams[1] = Number(y + 1);\n                             }\n-                            (_, _) => {\n+                            _ => {\n                                 return Err(\"first two params not numbers with %i\".to_string())\n                             }\n                         }"}, {"sha": "5b1ecfed24278ed3f5fdc76db2f618a7c91bcc27", "filename": "src/test/compile-fail-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -10,6 +10,7 @@\n \n // force-host\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n@@ -75,7 +76,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::ImplItem(_) => {\n             quote_item!(cx, impl X { fn foo(&self) -> i32 { 42 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Impl(_, _, _, _, _, mut items) => {\n+                    ItemKind::Impl(.., mut items) => {\n                         Annotatable::ImplItem(P(items.pop().expect(\"impl method not found\")))\n                     }\n                     _ => unreachable!(\"impl parsed to something other than impl\")\n@@ -85,7 +86,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::TraitItem(_) => {\n             quote_item!(cx, trait X { fn foo(&self) -> i32 { 0 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Trait(_, _, _, mut items) => {\n+                    ItemKind::Trait(.., mut items) => {\n                         Annotatable::TraitItem(P(items.pop().expect(\"trait method not found\")))\n                     }\n                     _ => unreachable!(\"trait parsed to something other than trait\")"}, {"sha": "3f36ebe649234515dcd0b6cde4aee530d1948f7c", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -10,9 +10,9 @@\n \n #![ crate_name = \"test\" ]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_private)]\n \n-\n extern crate graphviz;\n // A simple rust project\n \n@@ -206,7 +206,7 @@ fn matchSomeEnum(val: SomeEnum) {\n     match val {\n         SomeEnum::Ints(int1, int2) => { println(&(int1+int2).to_string()); }\n         SomeEnum::Floats(float1, float2) => { println(&(float2*float1).to_string()); }\n-        SomeEnum::Strings(_, _, s3) => { println(s3); }\n+        SomeEnum::Strings(.., s3) => { println(s3); }\n         SomeEnum::MyTypes(mt1, mt2) => { println(&(mt1.field1 - mt2.field1).to_string()); }\n     }\n }\n@@ -225,7 +225,7 @@ fn matchSomeStructEnum2(se: SomeStructEnum) {\n     match se {\n         EnumStruct{a: ref aaa, ..} => println(&aaa.to_string()),\n         EnumStruct2{f1, f2: f2} => println(&f1.field1.to_string()),\n-        EnumStruct3{f1, f3: SomeEnum::Ints(_, _), f2} => println(&f1.field1.to_string()),\n+        EnumStruct3{f1, f3: SomeEnum::Ints(..), f2} => println(&f1.field1.to_string()),\n         _ => {},\n     }\n }\n@@ -435,4 +435,4 @@ fn test_format_args() {\n     print!(\"Hello {0}\", name);\n     print!(\"{0} + {} = {}\", x, y);\n     print!(\"x is {}, y is {1}, name is {n}\", x, y, n = name);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "5df95ba5facbf391b94d4ac07bb9762c9c758d88", "filename": "src/test/run-pass-fulldeps/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -12,6 +12,7 @@\n \n #![feature(plugin_registrar)]\n #![feature(box_syntax)]\n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(rustc_private)]\n \n extern crate syntax;\n@@ -75,7 +76,7 @@ fn expand(cx: &mut ExtCtxt,\n fn totalsum_substructure(cx: &mut ExtCtxt, trait_span: Span,\n                          substr: &Substructure) -> P<ast::Expr> {\n     let fields = match *substr.fields {\n-        Struct(_, ref fs) | EnumMatching(_, _, ref fs) => fs,\n+        Struct(_, ref fs) | EnumMatching(.., ref fs) => fs,\n         _ => cx.span_bug(trait_span, \"impossible substructure\")\n     };\n "}, {"sha": "4885863122c3bd86d969a18bb75ff868d5c17fcf", "filename": "src/test/run-pass-fulldeps/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91f057de35066d0a34102bd0673b56684509b93d/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fmacro_crate_test.rs?ref=91f057de35066d0a34102bd0673b56684509b93d", "patch": "@@ -10,6 +10,7 @@\n \n // force-host\n \n+#![feature(dotdot_in_tuple_patterns)]\n #![feature(plugin_registrar, quote, rustc_private)]\n \n extern crate syntax;\n@@ -81,7 +82,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::ImplItem(_it) => vec![\n             quote_item!(cx, impl X { fn foo(&self) -> i32 { 42 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Impl(_, _, _, _, _, mut items) => {\n+                    ItemKind::Impl(.., mut items) => {\n                         Annotatable::ImplItem(P(items.pop().expect(\"impl method not found\")))\n                     }\n                     _ => unreachable!(\"impl parsed to something other than impl\")\n@@ -91,7 +92,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n         Annotatable::TraitItem(_it) => vec![\n             quote_item!(cx, trait X { fn foo(&self) -> i32 { 0 } }).unwrap().and_then(|i| {\n                 match i.node {\n-                    ItemKind::Trait(_, _, _, mut items) => {\n+                    ItemKind::Trait(.., mut items) => {\n                         Annotatable::TraitItem(P(items.pop().expect(\"trait method not found\")))\n                     }\n                     _ => unreachable!(\"trait parsed to something other than trait\")\n@@ -165,7 +166,7 @@ fn expand_caller(cx: &mut ExtCtxt,\n                  push: &mut FnMut(Annotatable)) {\n     let (orig_fn_name, ret_type) = match *it {\n         Annotatable::Item(ref item) => match item.node {\n-            ItemKind::Fn(ref decl, _, _, _, _, _) => {\n+            ItemKind::Fn(ref decl, ..) => {\n                 (item.ident, &decl.output)\n             }\n             _ => cx.span_fatal(item.span, \"Only functions with return types can be annotated.\")"}]}