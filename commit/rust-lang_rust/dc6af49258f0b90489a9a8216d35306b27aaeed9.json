{"sha": "dc6af49258f0b90489a9a8216d35306b27aaeed9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNmFmNDkyNThmMGI5MDQ4OWE5YTgyMTZkMzUzMDZiMjdhYWVlZDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T09:43:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-08T09:43:13Z"}, "message": "use the derived Debug rather than our custom written ones\n\nThat encoding that the custom Debugs was using is rather inscrutable,\nand incomplete.", "tree": {"sha": "490a3cf45383a4d44b0782de8f726ac072502018", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/490a3cf45383a4d44b0782de8f726ac072502018"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6af49258f0b90489a9a8216d35306b27aaeed9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6af49258f0b90489a9a8216d35306b27aaeed9", "html_url": "https://github.com/rust-lang/rust/commit/dc6af49258f0b90489a9a8216d35306b27aaeed9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6af49258f0b90489a9a8216d35306b27aaeed9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a17e72462fcf4c4b8699fba086ab5363b0bba3bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/a17e72462fcf4c4b8699fba086ab5363b0bba3bb", "html_url": "https://github.com/rust-lang/rust/commit/a17e72462fcf4c4b8699fba086ab5363b0bba3bb"}], "stats": {"total": 65, "additions": 5, "deletions": 60}, "files": [{"sha": "3e3404f3a7095630ece0828b34a211c83fb59363", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 60, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/dc6af49258f0b90489a9a8216d35306b27aaeed9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6af49258f0b90489a9a8216d35306b27aaeed9/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=dc6af49258f0b90489a9a8216d35306b27aaeed9", "patch": "@@ -88,7 +88,7 @@ use std::fmt;\n use std::rc::Rc;\n use util::nodemap::ItemLocalMap;\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub enum Categorization<'tcx> {\n     Rvalue(ty::Region<'tcx>),              // temporary val, argument is its scope\n     StaticItem,\n@@ -109,7 +109,7 @@ pub struct Upvar {\n }\n \n // different kinds of pointers:\n-#[derive(Clone, Copy, PartialEq, Eq, Hash)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub enum PointerKind<'tcx> {\n     /// `Box<T>`\n     Unique,\n@@ -177,7 +177,7 @@ pub enum Note {\n // dereference, but its type is the type *before* the dereference\n // (`@T`). So use `cmt.ty` to find the type of the value in a consistent\n // fashion. For more details, see the method `cat_pattern`\n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Debug, PartialEq)]\n pub struct cmt_<'tcx> {\n     pub id: ast::NodeId,           // id of expr/pat producing this value\n     pub span: Span,                // span of same expr/pat\n@@ -750,12 +750,13 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n \n         let kind = match self.node_ty(fn_hir_id)?.sty {\n             ty::TyGenerator(..) => ty::ClosureKind::FnOnce,\n-            _ => {\n+            ty::TyClosure(..) => {\n                 match self.tables.closure_kinds().get(fn_hir_id) {\n                     Some(&(kind, _)) => kind,\n                     None => span_bug!(span, \"missing closure kind\"),\n                 }\n             }\n+            ref t => span_bug!(span, \"unexpected type for fn in mem_categorization: {:?}\", t),\n         };\n \n         let closure_expr_def_index = self.tcx.hir.local_def_id(fn_node_id).index;\n@@ -1499,41 +1500,6 @@ impl<'tcx> cmt_<'tcx> {\n     }\n }\n \n-impl<'tcx> fmt::Debug for cmt_<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{{{:?} id:{} m:{:?} ty:{:?}}}\",\n-               self.cat,\n-               self.id,\n-               self.mutbl,\n-               self.ty)\n-    }\n-}\n-\n-impl<'tcx> fmt::Debug for Categorization<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Categorization::StaticItem => write!(f, \"static\"),\n-            Categorization::Rvalue(r) => { write!(f, \"rvalue({:?})\", r) }\n-            Categorization::Local(id) => {\n-               let name = ty::tls::with(|tcx| tcx.hir.name(id));\n-               write!(f, \"local({})\", name)\n-            }\n-            Categorization::Upvar(upvar) => {\n-                write!(f, \"upvar({:?})\", upvar)\n-            }\n-            Categorization::Deref(ref cmt, ptr) => {\n-                write!(f, \"{:?}-{:?}->\", cmt.cat, ptr)\n-            }\n-            Categorization::Interior(ref cmt, interior) => {\n-                write!(f, \"{:?}.{:?}\", cmt.cat, interior)\n-            }\n-            Categorization::Downcast(ref cmt, _) => {\n-                write!(f, \"{:?}->(enum)\", cmt.cat)\n-            }\n-        }\n-    }\n-}\n-\n pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     match ptr {\n         Unique => \"Box\",\n@@ -1547,27 +1513,6 @@ pub fn ptr_sigil(ptr: PointerKind) -> &'static str {\n     }\n }\n \n-impl<'tcx> fmt::Debug for PointerKind<'tcx> {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            Unique => write!(f, \"Box\"),\n-            BorrowedPtr(ty::ImmBorrow, ref r) |\n-            Implicit(ty::ImmBorrow, ref r) => {\n-                write!(f, \"&{:?}\", r)\n-            }\n-            BorrowedPtr(ty::MutBorrow, ref r) |\n-            Implicit(ty::MutBorrow, ref r) => {\n-                write!(f, \"&{:?} mut\", r)\n-            }\n-            BorrowedPtr(ty::UniqueImmBorrow, ref r) |\n-            Implicit(ty::UniqueImmBorrow, ref r) => {\n-                write!(f, \"&{:?} uniq\", r)\n-            }\n-            UnsafePtr(_) => write!(f, \"*\")\n-        }\n-    }\n-}\n-\n impl fmt::Debug for InteriorKind {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}