{"sha": "315e7022f315a344971f4f83cc3a834b42eb0458", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxNWU3MDIyZjMxNWEzNDQ5NzFmNGY4M2NjM2E4MzRiNDJlYjA0NTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T17:48:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-26T17:48:29Z"}, "message": "Auto merge of #44082 - pnkfelix:issue-43457, r=eddyb\n\nFix destruction extent lookup during HIR -> HAIR translation\n\nMy method for finding the destruction extent, if any, from cbed41a174aad44e069bec09bf1e502591c132ae (in #39409), was buggy in that it sometimes failed to find an extent that was nonetheless present.\n\nThis fixes that, and is cleaner code to boot.\n\nFix #43457", "tree": {"sha": "7005273f0e1949cbf419d2fb1892a08515a21319", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7005273f0e1949cbf419d2fb1892a08515a21319"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/315e7022f315a344971f4f83cc3a834b42eb0458", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/315e7022f315a344971f4f83cc3a834b42eb0458", "html_url": "https://github.com/rust-lang/rust/commit/315e7022f315a344971f4f83cc3a834b42eb0458", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/315e7022f315a344971f4f83cc3a834b42eb0458/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32f60560798a9cec098f13de3af0c350e6dc7485", "url": "https://api.github.com/repos/rust-lang/rust/commits/32f60560798a9cec098f13de3af0c350e6dc7485", "html_url": "https://github.com/rust-lang/rust/commit/32f60560798a9cec098f13de3af0c350e6dc7485"}, {"sha": "d1a15cdfb119b42e5333a56f0345d657d7cbd60d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1a15cdfb119b42e5333a56f0345d657d7cbd60d", "html_url": "https://github.com/rust-lang/rust/commit/d1a15cdfb119b42e5333a56f0345d657d7cbd60d"}], "stats": {"total": 65, "additions": 57, "deletions": 8}, "files": [{"sha": "61d128fc847827d2a3adcb7c6dd38d86d46aa614", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/315e7022f315a344971f4f83cc3a834b42eb0458/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315e7022f315a344971f4f83cc3a834b42eb0458/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=315e7022f315a344971f4f83cc3a834b42eb0458", "patch": "@@ -22,10 +22,7 @@ impl<'tcx> Mirror<'tcx> for &'tcx hir::Block {\n         // We have to eagerly translate the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = mirror_stmts(cx, self.id, &*self.stmts);\n-        let opt_def_id = cx.tcx.hir.opt_local_def_id(self.id);\n-        let opt_destruction_extent = opt_def_id.and_then(|def_id| {\n-            cx.tcx.region_maps(def_id).opt_destruction_extent(self.id)\n-        });\n+        let opt_destruction_extent = cx.region_maps.opt_destruction_extent(self.id);\n         Block {\n             targeted_by_break: self.targeted_by_break,\n             extent: CodeExtent::Misc(self.id),\n@@ -42,11 +39,8 @@ fn mirror_stmts<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                 stmts: &'tcx [hir::Stmt])\n                                 -> Vec<StmtRef<'tcx>> {\n     let mut result = vec![];\n-    let opt_def_id = cx.tcx.hir.opt_local_def_id(block_id);\n     for (index, stmt) in stmts.iter().enumerate() {\n-        let opt_dxn_ext = opt_def_id.and_then(|def_id| {\n-            cx.tcx.region_maps(def_id).opt_destruction_extent(stmt.node.id())\n-        });\n+        let opt_dxn_ext = cx.region_maps.opt_destruction_extent(stmt.node.id());\n         match stmt.node {\n             hir::StmtExpr(ref expr, id) |\n             hir::StmtSemi(ref expr, id) => {"}, {"sha": "708784df317a6842800ce3d735752843dda0bbcc", "filename": "src/test/mir-opt/issue-43457.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/315e7022f315a344971f4f83cc3a834b42eb0458/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "raw_url": "https://github.com/rust-lang/rust/raw/315e7022f315a344971f4f83cc3a834b42eb0458/src%2Ftest%2Fmir-opt%2Fissue-43457.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue-43457.rs?ref=315e7022f315a344971f4f83cc3a834b42eb0458", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z identify_regions -Z span_free_formats\n+// ignore-tidy-linelength\n+\n+// Regression test for #43457: an `EndRegion` was missing from output\n+// because compiler was using a faulty means for region map lookup.\n+\n+use std::cell::RefCell;\n+\n+fn rc_refcell_test(r: RefCell<i32>) {\n+    r.borrow_mut();\n+}\n+\n+fn main() { }\n+\n+// END RUST SOURCE\n+// START rustc.node5.SimplifyCfg-qualify-consts.after.mir\n+//\n+// fn rc_refcell_test(_1: std::cell::RefCell<i32>) -> () {\n+//     let mut _0: ();\n+//     scope 1 {\n+//         let _2: std::cell::RefCell<i32>;\n+//     }\n+//     let mut _3: std::cell::RefMut<'17dce, i32>;\n+//     let mut _4: &'17dce std::cell::RefCell<i32>;\n+//\n+//     bb0: {\n+//         StorageLive(_2);\n+//         _2 = _1;\n+//         StorageLive(_4);\n+//         _4 = &'17dce _2;\n+//         _3 = const <std::cell::RefCell<T>>::borrow_mut(_4) -> bb1;\n+//     }\n+//\n+//     bb1: {\n+//         drop(_3) -> bb2;\n+//     }\n+//\n+//     bb2: {\n+//         StorageDead(_4);\n+//         EndRegion('17dce);\n+//         _0 = ();\n+//         StorageDead(_2);\n+//         return;\n+//     }\n+// }"}]}