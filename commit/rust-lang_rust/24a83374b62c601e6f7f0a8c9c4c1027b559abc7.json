{"sha": "24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YTgzMzc0YjYyYzYwMWU2ZjdmMGE4YzljNGMxMDI3YjU1OWFiYzc=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T19:18:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-11T19:18:41Z"}, "message": "Rollup merge of #63433 - RalfJung:miri-call, r=oli-obk\n\nMiri shouldn't look at types\n\nr? @oli-obk\n\nFixes https://github.com/rust-lang/rust/issues/62137", "tree": {"sha": "623af8813a00163face063a5b74ddee349d004b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/623af8813a00163face063a5b74ddee349d004b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdUGoSCRBK7hj4Ov3rIwAAdHIIADza6npvRKf5ZYn1leQhFyVW\nyEutRVTZHLffxGYOqUy+3swmO6kt69ad3ZX8za8bn3l1ZIcTiTyaDx34Hs23dD6K\nFCEV2H5OiLJUGdYmYtRbzOJV6VJcmqao2N412GRJhYS5N1MAL60BEivvPh03vudV\nT4N0Ovx0bKPMHR3djYoqHo51UdZCBaxTCpoDmluZm9Whj4y9LXTPALKTB4f3cl/x\n/eHWWNnptjKx7f7wvWYkRf2n1+EhKonYFJ2ktDqmGnUA4FbNsdCtldMM34JRbLJe\nAIbtLvptTnnB+kry8mecsHGHgAodNz6+MIplURSCEcHzKkjNRsH/Ap7MSVtIplo=\n=lU5a\n-----END PGP SIGNATURE-----\n", "payload": "tree 623af8813a00163face063a5b74ddee349d004b5\nparent 061245e2b1a111ed46a60ad3d88fadf4eb48dcc6\nparent 62f1e8a7f12c864f97c49faf4bf49940aac266a6\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1565551121 -0400\ncommitter GitHub <noreply@github.com> 1565551121 -0400\n\nRollup merge of #63433 - RalfJung:miri-call, r=oli-obk\n\nMiri shouldn't look at types\n\nr? @oli-obk\n\nFixes https://github.com/rust-lang/rust/issues/62137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "html_url": "https://github.com/rust-lang/rust/commit/24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "061245e2b1a111ed46a60ad3d88fadf4eb48dcc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/061245e2b1a111ed46a60ad3d88fadf4eb48dcc6", "html_url": "https://github.com/rust-lang/rust/commit/061245e2b1a111ed46a60ad3d88fadf4eb48dcc6"}, {"sha": "62f1e8a7f12c864f97c49faf4bf49940aac266a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/62f1e8a7f12c864f97c49faf4bf49940aac266a6", "html_url": "https://github.com/rust-lang/rust/commit/62f1e8a7f12c864f97c49faf4bf49940aac266a6"}], "stats": {"total": 79, "additions": 67, "deletions": 12}, "files": [{"sha": "6f4227ed34cc425adf44effc31669c81098b541b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "patch": "@@ -385,15 +385,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         local: mir::Local,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> InterpResult<'tcx, TyLayout<'tcx>> {\n-        match frame.locals[local].layout.get() {\n+        // `const_prop` runs into this with an invalid (empty) frame, so we\n+        // have to support that case (mostly by skipping all caching).\n+        match frame.locals.get(local).and_then(|state| state.layout.get()) {\n             None => {\n                 let layout = crate::interpret::operand::from_known_layout(layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty = self.monomorphize_with_substs(local_ty, frame.instance.substs)?;\n                     self.layout_of(local_ty)\n                 })?;\n-                // Layouts of locals are requested a lot, so we cache them.\n-                frame.locals[local].layout.set(Some(layout));\n+                if let Some(state) = frame.locals.get(local) {\n+                    // Layouts of locals are requested a lot, so we cache them.\n+                    state.layout.set(Some(layout));\n+                }\n                 Ok(layout)\n             }\n             Some(layout) => Ok(layout),"}, {"sha": "1d6b48e9da4c4e38d9813defeb91075b41b19227", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "patch": "@@ -405,9 +405,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                         }\n                     } else {\n                         let local = mir::RETURN_PLACE;\n-                        let ty = self.frame().body.local_decls[local].ty;\n-                        if !self.tcx.is_ty_uninhabited_from_any_module(ty) {\n-                            throw_unsup!(FunctionRetMismatch(self.tcx.types.never, ty))\n+                        let callee_layout = self.layout_of_local(self.frame(), local, None)?;\n+                        if !callee_layout.abi.is_uninhabited() {\n+                            throw_unsup!(FunctionRetMismatch(\n+                                self.tcx.types.never, callee_layout.ty\n+                            ))\n                         }\n                     }\n                     Ok(())"}, {"sha": "4509ebc6338a87f7f543b61f91f7d7db6b6caafb", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.rs?ref=24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "patch": "@@ -1,11 +1,11 @@\n // compile-fail\n \n pub const unsafe fn fake_type<T>() -> T {\n-    hint_unreachable()\n+    hint_unreachable() //~ ERROR any use of this value will cause an error\n }\n \n pub const unsafe fn hint_unreachable() -> ! {\n-    fake_type() //~ ERROR any use of this value will cause an error\n+    fake_type()\n }\n \n trait Const {"}, {"sha": "f390676fda6d08b4d3fd2e98a148745849bf3e08", "filename": "src/test/ui/consts/uninhabited-const-issue-61744.stderr", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24a83374b62c601e6f7f0a8c9c4c1027b559abc7/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funinhabited-const-issue-61744.stderr?ref=24a83374b62c601e6f7f0a8c9c4c1027b559abc7", "patch": "@@ -1,11 +1,60 @@\n error: any use of this value will cause an error\n-  --> $DIR/uninhabited-const-issue-61744.rs:8:5\n+  --> $DIR/uninhabited-const-issue-61744.rs:4:5\n    |\n-LL |     fake_type()\n-   |     ^^^^^^^^^^^\n+LL |     hint_unreachable()\n+   |     ^^^^^^^^^^^^^^^^^^\n    |     |\n-   |     tried to call a function with return type T passing return place of type !\n+   |     reached the configured maximum number of stack frames\n    |     inside call to `hint_unreachable` at $DIR/uninhabited-const-issue-61744.rs:4:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n+   |     inside call to `fake_type::<!>` at $DIR/uninhabited-const-issue-61744.rs:8:5\n    |     inside call to `fake_type::<i32>` at $DIR/uninhabited-const-issue-61744.rs:12:36\n ...\n LL |     const CONSTANT: i32 = unsafe { fake_type() };"}]}