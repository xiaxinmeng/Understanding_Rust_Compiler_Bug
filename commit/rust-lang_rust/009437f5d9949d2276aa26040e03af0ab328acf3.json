{"sha": "009437f5d9949d2276aa26040e03af0ab328acf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwOTQzN2Y1ZDk5NDlkMjI3NmFhMjYwNDBlMDNhZjBhYjMyOGFjZjM=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-03T16:07:56Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-12-03T16:07:56Z"}, "message": "Replace `ra_hir_expand::either` with crate", "tree": {"sha": "74a889d70e201d6997c6baf179261ab3ed8bf23c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74a889d70e201d6997c6baf179261ab3ed8bf23c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/009437f5d9949d2276aa26040e03af0ab328acf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/009437f5d9949d2276aa26040e03af0ab328acf3", "html_url": "https://github.com/rust-lang/rust/commit/009437f5d9949d2276aa26040e03af0ab328acf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/009437f5d9949d2276aa26040e03af0ab328acf3/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15f143f0c33cbd382a2ad7a407d9601cb843d164", "url": "https://api.github.com/repos/rust-lang/rust/commits/15f143f0c33cbd382a2ad7a407d9601cb843d164", "html_url": "https://github.com/rust-lang/rust/commit/15f143f0c33cbd382a2ad7a407d9601cb843d164"}], "stats": {"total": 181, "additions": 69, "deletions": 112}, "files": [{"sha": "23c9e25436b078dbe3e08d5dbdb1f669b235b133", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -944,6 +944,7 @@ dependencies = [\n name = \"ra_hir\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_db 0.1.0\",\n  \"ra_hir_def 0.1.0\",\n@@ -957,6 +958,7 @@ dependencies = [\n name = \"ra_hir_def\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -976,6 +978,7 @@ dependencies = [\n name = \"ra_hir_expand\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_arena 0.1.0\",\n  \"ra_db 0.1.0\",\n@@ -1012,6 +1015,7 @@ dependencies = [\n name = \"ra_ide\"\n version = \"0.1.0\"\n dependencies = [\n+ \"either 1.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"format-buf 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fst 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"insta 0.12.0 (registry+https://github.com/rust-lang/crates.io-index)\","}, {"sha": "6ca9cc2e7de5b55b444bbfc06be15e9f4f857773", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -10,6 +10,7 @@ doctest = false\n [dependencies]\n log = \"0.4.5\"\n rustc-hash = \"1.0\"\n+either = \"1.5\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "5877afefa2ce807557d5c716346f24d344affe22", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -4,6 +4,7 @@ pub(crate) mod src;\n \n use std::sync::Arc;\n \n+use either::Either;\n use hir_def::{\n     adt::VariantData,\n     body::{Body, BodySourceMap},\n@@ -30,7 +31,7 @@ use crate::{\n     db::{DefDatabase, HirDatabase},\n     ty::display::HirFormatter,\n     ty::{self, InEnvironment, InferenceResult, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk},\n-    CallableDef, Either, HirDisplay, InFile, Name,\n+    CallableDef, HirDisplay, InFile, Name,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -905,7 +906,9 @@ impl Local {\n         let (_body, source_map) = db.body_with_source_map(self.parent.into());\n         let src = source_map.pat_syntax(self.pat_id).unwrap(); // Hmm...\n         let root = src.file_syntax(db);\n-        src.map(|ast| ast.map(|it| it.cast().unwrap().to_node(&root), |it| it.to_node(&root)))\n+        src.map(|ast| {\n+            ast.map_left(|it| it.cast().unwrap().to_node(&root)).map_right(|it| it.to_node(&root))\n+        })\n     }\n }\n "}, {"sha": "36cfbc8f12b27083fd358187992cfd0c68132723", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -1,10 +1,10 @@\n //! FIXME: write short doc here\n \n+use either::Either;\n use hir_def::{\n     src::{HasChildSource, HasSource as _},\n     AstItemDef, Lookup, VariantId,\n };\n-use hir_expand::either::Either;\n use ra_syntax::ast;\n \n use crate::{\n@@ -27,8 +27,8 @@ impl Module {\n         let def_map = db.crate_def_map(self.id.krate);\n         let src = def_map[self.id.local_id].definition_source(db);\n         src.map(|it| match it {\n-            Either::A(it) => ModuleSource::SourceFile(it),\n-            Either::B(it) => ModuleSource::Module(it),\n+            Either::Left(it) => ModuleSource::SourceFile(it),\n+            Either::Right(it) => ModuleSource::Module(it),\n         })\n     }\n \n@@ -46,8 +46,8 @@ impl HasSource for StructField {\n         let var = VariantId::from(self.parent);\n         let src = var.child_source(db);\n         src.map(|it| match it[self.id].clone() {\n-            Either::A(it) => FieldSource::Pos(it),\n-            Either::B(it) => FieldSource::Named(it),\n+            Either::Left(it) => FieldSource::Pos(it),\n+            Either::Right(it) => FieldSource::Named(it),\n         })\n     }\n }\n@@ -126,6 +126,6 @@ impl HasSource for Import {\n         let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n         let root = db.parse_or_expand(src.file_id).unwrap();\n         let ptr = source_map.get(self.id);\n-        src.with_value(ptr.map(|it| it.to_node(&root), |it| it.to_node(&root)))\n+        src.with_value(ptr.map_left(|it| it.to_node(&root)).map_right(|it| it.to_node(&root)))\n     }\n }"}, {"sha": "853760cb1a43432294689c463f4a60881c218f77", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -63,5 +63,5 @@ pub use hir_def::{\n     type_ref::Mutability,\n };\n pub use hir_expand::{\n-    either::Either, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile,\n+    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, MacroDefId, MacroFile,\n };"}, {"sha": "28d41b647489b9d15ec9fa5b37781a9d08cb840c", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -7,6 +7,7 @@\n //! purely for \"IDE needs\".\n use std::sync::Arc;\n \n+use either::Either;\n use hir_def::{\n     body::{\n         scope::{ExprScopes, ScopeId},\n@@ -33,8 +34,8 @@ use crate::{\n         method_resolution::{self, implements_trait},\n         InEnvironment, TraitEnvironment, Ty,\n     },\n-    Adt, AssocItem, Const, DefWithBody, Either, Enum, EnumVariant, FromSource, Function,\n-    GenericParam, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n+    Adt, AssocItem, Const, DefWithBody, Enum, EnumVariant, FromSource, Function, GenericParam,\n+    Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n };\n \n fn try_get_resolver_for_node(db: &impl HirDatabase, node: InFile<&SyntaxNode>) -> Option<Resolver> {\n@@ -349,7 +350,7 @@ impl SourceAnalyzer {\n     // should switch to general reference search infra there.\n     pub fn find_all_refs(&self, pat: &ast::BindPat) -> Vec<ReferenceDescriptor> {\n         let fn_def = pat.syntax().ancestors().find_map(ast::FnDef::cast).unwrap();\n-        let ptr = Either::A(AstPtr::new(&ast::Pat::from(pat.clone())));\n+        let ptr = Either::Left(AstPtr::new(&ast::Pat::from(pat.clone())));\n         fn_def\n             .syntax()\n             .descendants()"}, {"sha": "cf3a446fccd394291bd27dec0569b9490241357b", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -11,6 +11,7 @@ doctest = false\n log = \"0.4.5\"\n once_cell = \"1.0.1\"\n rustc-hash = \"1.0\"\n+either = \"1.5\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "db3e63ef82860f8dd41f6ce0d1e2cc18466258b1", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -2,8 +2,8 @@\n \n use std::sync::Arc;\n \n+use either::Either;\n use hir_expand::{\n-    either::Either,\n     name::{AsName, Name},\n     InFile,\n };\n@@ -184,7 +184,7 @@ fn lower_struct(\n         ast::StructKind::Tuple(fl) => {\n             for (i, fd) in fl.fields().enumerate() {\n                 trace.alloc(\n-                    || Either::A(fd.clone()),\n+                    || Either::Left(fd.clone()),\n                     || StructFieldData {\n                         name: Name::new_tuple_field(i),\n                         type_ref: TypeRef::from_ast_opt(fd.type_ref()),\n@@ -196,7 +196,7 @@ fn lower_struct(\n         ast::StructKind::Record(fl) => {\n             for fd in fl.fields() {\n                 trace.alloc(\n-                    || Either::B(fd.clone()),\n+                    || Either::Right(fd.clone()),\n                     || StructFieldData {\n                         name: fd.name().map(|n| n.as_name()).unwrap_or_else(Name::missing),\n                         type_ref: TypeRef::from_ast_opt(fd.ascribed_type()),"}, {"sha": "7f9a6e7ca88795fdb0b1bcc7accad08f2df5fde5", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -2,7 +2,8 @@\n \n use std::{ops, sync::Arc};\n \n-use hir_expand::{either::Either, hygiene::Hygiene, AstId, InFile};\n+use either::Either;\n+use hir_expand::{hygiene::Hygiene, AstId, InFile};\n use mbe::ast_to_token_tree;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner},\n@@ -45,8 +46,8 @@ impl Attrs {\n             AttrDefId::StructFieldId(it) => {\n                 let src = it.parent.child_source(db);\n                 match &src.value[it.local_id] {\n-                    Either::A(_tuple) => Attrs::default(),\n-                    Either::B(record) => Attrs::from_attrs_owner(db, src.with_value(record)),\n+                    Either::Left(_tuple) => Attrs::default(),\n+                    Either::Right(record) => Attrs::from_attrs_owner(db, src.with_value(record)),\n                 }\n             }\n             AttrDefId::EnumVariantId(var_id) => {"}, {"sha": "ef18168363ee8d049e2ea5038960167f7b7a9a9b", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -5,9 +5,8 @@ pub mod scope;\n \n use std::{ops::Index, sync::Arc};\n \n-use hir_expand::{\n-    either::Either, hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId, MacroFileKind,\n-};\n+use either::Either;\n+use hir_expand::{hygiene::Hygiene, AstId, HirFileId, InFile, MacroDefId, MacroFileKind};\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n@@ -210,7 +209,7 @@ impl BodySourceMap {\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n-        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        let src = node.map(|it| Either::Left(AstPtr::new(it)));\n         self.expr_map.get(&src).cloned()\n     }\n \n@@ -219,7 +218,7 @@ impl BodySourceMap {\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {\n-        let src = node.map(|it| Either::A(AstPtr::new(it)));\n+        let src = node.map(|it| Either::Left(AstPtr::new(it)));\n         self.pat_map.get(&src).cloned()\n     }\n "}, {"sha": "71c08f024702dbb74a2b7780dfa3c0878f158f54", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -1,10 +1,8 @@\n //! Transforms `ast::Expr` into an equivalent `hir_def::expr::Expr`\n //! representation.\n \n-use hir_expand::{\n-    either::Either,\n-    name::{self, AsName, Name},\n-};\n+use either::Either;\n+use hir_expand::name::{self, AsName, Name};\n use ra_arena::Arena;\n use ra_syntax::{\n     ast::{\n@@ -74,7 +72,7 @@ where\n                         mode: BindingAnnotation::Unannotated,\n                         subpat: None,\n                     },\n-                    Either::B(ptr),\n+                    Either::Right(ptr),\n                 );\n                 self.body.params.push(param_pat);\n             }\n@@ -94,7 +92,7 @@ where\n     }\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n-        let ptr = Either::A(ptr);\n+        let ptr = Either::Left(ptr);\n         let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n         self.source_map.expr_map.insert(src, id);\n@@ -107,7 +105,7 @@ where\n         self.body.exprs.alloc(expr)\n     }\n     fn alloc_expr_field_shorthand(&mut self, expr: Expr, ptr: AstPtr<ast::RecordField>) -> ExprId {\n-        let ptr = Either::B(ptr);\n+        let ptr = Either::Right(ptr);\n         let id = self.body.exprs.alloc(expr);\n         let src = self.expander.to_source(ptr);\n         self.source_map.expr_map.insert(src, id);\n@@ -277,7 +275,7 @@ where\n             ast::Expr::ParenExpr(e) => {\n                 let inner = self.collect_expr_opt(e.expr());\n                 // make the paren expr point to the inner expression as well\n-                let src = self.expander.to_source(Either::A(syntax_ptr));\n+                let src = self.expander.to_source(Either::Left(syntax_ptr));\n                 self.source_map.expr_map.insert(src, inner);\n                 inner\n             }\n@@ -550,7 +548,7 @@ where\n             ast::Pat::SlicePat(_) | ast::Pat::RangePat(_) => Pat::Missing,\n         };\n         let ptr = AstPtr::new(&pat);\n-        self.alloc_pat(pattern, Either::A(ptr))\n+        self.alloc_pat(pattern, Either::Left(ptr))\n     }\n \n     fn collect_pat_opt(&mut self, pat: Option<ast::Pat>) -> PatId {"}, {"sha": "3fc6d6934ce09acd6ce2fc2eb5b7ea488d4fbcf4", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -5,7 +5,7 @@\n \n use std::sync::Arc;\n \n-use hir_expand::either::Either;\n+use either::Either;\n use ra_syntax::ast;\n \n use crate::{\n@@ -46,8 +46,8 @@ impl Documentation {\n             AttrDefId::StructFieldId(it) => {\n                 let src = it.parent.child_source(db);\n                 match &src.value[it.local_id] {\n-                    Either::A(_tuple) => None,\n-                    Either::B(record) => docs_from_ast(record),\n+                    Either::Left(_tuple) => None,\n+                    Either::Right(record) => docs_from_ast(record),\n                 }\n             }\n             AttrDefId::AdtId(it) => match it {"}, {"sha": "faf3566f447513170268fa085710e6932cc8f417", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -57,9 +57,9 @@ mod tests;\n \n use std::sync::Arc;\n \n+use either::Either;\n use hir_expand::{\n-    ast_id_map::FileAstId, diagnostics::DiagnosticSink, either::Either, name::Name, InFile,\n-    MacroDefId,\n+    ast_id_map::FileAstId, diagnostics::DiagnosticSink, name::Name, InFile, MacroDefId,\n };\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n@@ -287,10 +287,10 @@ impl ModuleData {\n     ) -> InFile<Either<ast::SourceFile, ast::Module>> {\n         if let Some(file_id) = self.definition {\n             let sf = db.parse(file_id).tree();\n-            return InFile::new(file_id.into(), Either::A(sf));\n+            return InFile::new(file_id.into(), Either::Left(sf));\n         }\n         let decl = self.declaration.unwrap();\n-        InFile::new(decl.file_id, Either::B(decl.to_node(db)))\n+        InFile::new(decl.file_id, Either::Right(decl.to_node(db)))\n     }\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`."}, {"sha": "de4e706c29b1ae63e3a1e31560e351ec90bde7e9", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -7,10 +7,10 @@\n \n use std::{ops::Index, sync::Arc};\n \n+use either::Either;\n use hir_expand::{\n     ast_id_map::AstIdMap,\n     db::AstDatabase,\n-    either::Either,\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n@@ -324,7 +324,7 @@ impl RawItemsCollector {\n                     is_extern_crate: false,\n                     is_macro_use: false,\n                 };\n-                buf.push((import_data, Either::A(AstPtr::new(use_tree))));\n+                buf.push((import_data, Either::Left(AstPtr::new(use_tree))));\n             },\n         );\n         for (import_data, ptr) in buf {\n@@ -355,7 +355,7 @@ impl RawItemsCollector {\n                 current_module,\n                 attrs,\n                 import_data,\n-                Either::B(AstPtr::new(&extern_crate)),\n+                Either::Right(AstPtr::new(&extern_crate)),\n             );\n         }\n     }"}, {"sha": "3030dcdf6ea40b333c3ba5422f29214b31ef325e", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -2,8 +2,8 @@\n \n use std::{iter, sync::Arc};\n \n+use either::Either;\n use hir_expand::{\n-    either::Either,\n     hygiene::Hygiene,\n     name::{self, AsName, Name},\n };\n@@ -111,7 +111,7 @@ impl Path {\n                 ast::PathSegmentKind::Name(name_ref) => {\n                     // FIXME: this should just return name\n                     match hygiene.name_ref_to_name(name_ref) {\n-                        Either::A(name) => {\n+                        Either::Left(name) => {\n                             let args = segment\n                                 .type_arg_list()\n                                 .and_then(GenericArgs::from_ast)\n@@ -125,7 +125,7 @@ impl Path {\n                             let segment = PathSegment { name, args_and_bindings: args };\n                             segments.push(segment);\n                         }\n-                        Either::B(crate_id) => {\n+                        Either::Right(crate_id) => {\n                             kind = PathKind::DollarCrate(crate_id);\n                             break;\n                         }\n@@ -347,7 +347,7 @@ fn convert_path(prefix: Option<Path>, path: ast::Path, hygiene: &Hygiene) -> Opt\n     let res = match segment.kind()? {\n         ast::PathSegmentKind::Name(name_ref) => {\n             match hygiene.name_ref_to_name(name_ref) {\n-                Either::A(name) => {\n+                Either::Left(name) => {\n                     // no type args in use\n                     let mut res = prefix.unwrap_or_else(|| Path {\n                         kind: PathKind::Plain,\n@@ -359,7 +359,7 @@ fn convert_path(prefix: Option<Path>, path: ast::Path, hygiene: &Hygiene) -> Opt\n                     });\n                     res\n                 }\n-                Either::B(crate_id) => {\n+                Either::Right(crate_id) => {\n                     return Some(Path::from_simple_segments(\n                         PathKind::DollarCrate(crate_id),\n                         iter::empty(),"}, {"sha": "3ae4376dc7036ebfd6b50c5c1a9379f755c64feb", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -9,6 +9,7 @@ doctest = false\n \n [dependencies]\n log = \"0.4.5\"\n+either = \"1.5\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "83583ef8bd3ca81e587a106e6bb60053f1deb3e9", "filename": "crates/ra_hir_expand/src/either.rs", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_expand%2Fsrc%2Feither.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f143f0c33cbd382a2ad7a407d9601cb843d164/crates%2Fra_hir_expand%2Fsrc%2Feither.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Feither.rs?ref=15f143f0c33cbd382a2ad7a407d9601cb843d164", "patch": "@@ -1,54 +0,0 @@\n-//! FIXME: write short doc here\n-\n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub enum Either<A, B> {\n-    A(A),\n-    B(B),\n-}\n-\n-impl<A, B> Either<A, B> {\n-    pub fn either<R, F1, F2>(self, f1: F1, f2: F2) -> R\n-    where\n-        F1: FnOnce(A) -> R,\n-        F2: FnOnce(B) -> R,\n-    {\n-        match self {\n-            Either::A(a) => f1(a),\n-            Either::B(b) => f2(b),\n-        }\n-    }\n-    pub fn map<U, V, F1, F2>(self, f1: F1, f2: F2) -> Either<U, V>\n-    where\n-        F1: FnOnce(A) -> U,\n-        F2: FnOnce(B) -> V,\n-    {\n-        match self {\n-            Either::A(a) => Either::A(f1(a)),\n-            Either::B(b) => Either::B(f2(b)),\n-        }\n-    }\n-    pub fn map_a<U, F>(self, f: F) -> Either<U, B>\n-    where\n-        F: FnOnce(A) -> U,\n-    {\n-        self.map(f, |it| it)\n-    }\n-    pub fn a(self) -> Option<A> {\n-        match self {\n-            Either::A(it) => Some(it),\n-            Either::B(_) => None,\n-        }\n-    }\n-    pub fn b(self) -> Option<B> {\n-        match self {\n-            Either::A(_) => None,\n-            Either::B(it) => Some(it),\n-        }\n-    }\n-    pub fn as_ref(&self) -> Either<&A, &B> {\n-        match self {\n-            Either::A(it) => Either::A(it),\n-            Either::B(it) => Either::B(it),\n-        }\n-    }\n-}"}, {"sha": "64c8b06c6e9ebbb38ffd6b9e355f0eccd01cf276", "filename": "crates/ra_hir_expand/src/hygiene.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fhygiene.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -2,12 +2,12 @@\n //!\n //! Specifically, `ast` + `Hygiene` allows you to create a `Name`. Note that, at\n //! this moment, this is horribly incomplete and handles only `$crate`.\n+use either::Either;\n use ra_db::CrateId;\n use ra_syntax::ast;\n \n use crate::{\n     db::AstDatabase,\n-    either::Either,\n     name::{AsName, Name},\n     HirFileId, HirFileIdRepr, MacroDefKind,\n };\n@@ -41,9 +41,9 @@ impl Hygiene {\n     pub fn name_ref_to_name(&self, name_ref: ast::NameRef) -> Either<Name, CrateId> {\n         if let Some(def_crate) = self.def_crate {\n             if name_ref.text() == \"$crate\" {\n-                return Either::B(def_crate);\n+                return Either::Right(def_crate);\n             }\n         }\n-        Either::A(name_ref.as_name())\n+        Either::Left(name_ref.as_name())\n     }\n }"}, {"sha": "3be9bdf8693ee52625bd50310e78056074f88953", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -6,7 +6,6 @@\n \n pub mod db;\n pub mod ast_id_map;\n-pub mod either;\n pub mod name;\n pub mod hygiene;\n pub mod diagnostics;"}, {"sha": "d2bd64e5ccc2702ac87a9a03ac7c21a3c6929416", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n         let (_, source_map) = db.body_with_source_map(self.func.into());\n \n         if let Some(source_ptr) = source_map.expr_syntax(id) {\n-            if let Some(expr) = source_ptr.value.a() {\n+            if let Some(expr) = source_ptr.value.left() {\n                 let root = source_ptr.file_syntax(db);\n                 if let ast::Expr::RecordLit(record_lit) = expr.to_node(&root) {\n                     if let Some(field_list) = record_lit.record_field_list() {\n@@ -142,7 +142,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Some(source_ptr) = source_map.expr_syntax(id) {\n-                if let Some(expr) = source_ptr.value.a() {\n+                if let Some(expr) = source_ptr.value.left() {\n                     self.sink.push(MissingOkInTailExpr { file: source_ptr.file_id, expr });\n                 }\n             }"}, {"sha": "e3439ae3134ca94f5b918881e4ad403977209b34", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -11,6 +11,7 @@ doctest = false\n wasm = []\n \n [dependencies]\n+either = \"1.5\"\n format-buf = \"1.0.0\"\n itertools = \"0.8.0\"\n join_to_string = \"0.1.3\""}, {"sha": "28f94e0a776762df2e2e6a18e1efc471fb14f78c", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, Either, HasSource, PathResolution};\n+use either::Either;\n+use hir::{Adt, HasSource, PathResolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -27,7 +28,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n                 if Some(module) == ctx.module {\n                     if let Some(import) = import {\n-                        if let Either::A(use_tree) = import.source(ctx.db).value {\n+                        if let Either::Left(use_tree) = import.source(ctx.db).value {\n                             if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);"}, {"sha": "f920d3db627a0a52878af3036b4270ed659e76da", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/009437f5d9949d2276aa26040e03af0ab328acf3/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=009437f5d9949d2276aa26040e03af0ab328acf3", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n-use hir::{AssocItem, Either, FieldSource, HasSource, InFile, ModuleSource};\n+use either::Either;\n+use hir::{AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n@@ -342,10 +343,10 @@ impl ToNav for hir::Local {\n     fn to_nav(&self, db: &RootDatabase) -> NavigationTarget {\n         let src = self.source(db);\n         let (full_range, focus_range) = match src.value {\n-            Either::A(it) => {\n+            Either::Left(it) => {\n                 (it.syntax().text_range(), it.name().map(|it| it.syntax().text_range()))\n             }\n-            Either::B(it) => (it.syntax().text_range(), Some(it.self_kw_token().text_range())),\n+            Either::Right(it) => (it.syntax().text_range(), Some(it.self_kw_token().text_range())),\n         };\n         let name = match self.name(db) {\n             Some(it) => it.to_string().into(),"}]}