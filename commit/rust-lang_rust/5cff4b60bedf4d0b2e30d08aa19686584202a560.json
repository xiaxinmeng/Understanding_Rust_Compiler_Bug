{"sha": "5cff4b60bedf4d0b2e30d08aa19686584202a560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjZmY0YjYwYmVkZjRkMGIyZTMwZDA4YWExOTY4NjU4NDIwMmE1NjA=", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-17T17:22:14Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2020-08-20T18:34:53Z"}, "message": "Fix importing private modules in expand glob import", "tree": {"sha": "25d71346b0105a525b857e6be21e8335f5eaeaa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25d71346b0105a525b857e6be21e8335f5eaeaa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cff4b60bedf4d0b2e30d08aa19686584202a560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cff4b60bedf4d0b2e30d08aa19686584202a560", "html_url": "https://github.com/rust-lang/rust/commit/5cff4b60bedf4d0b2e30d08aa19686584202a560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cff4b60bedf4d0b2e30d08aa19686584202a560/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d28dec7b93aad54866c80213358fb3eb28153be", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d28dec7b93aad54866c80213358fb3eb28153be", "html_url": "https://github.com/rust-lang/rust/commit/5d28dec7b93aad54866c80213358fb3eb28153be"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "eb6dd68bbcc945361ebd51f703818ff5d57cf7a1", "filename": "crates/assists/src/handlers/expand_glob_import.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5cff4b60bedf4d0b2e30d08aa19686584202a560/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cff4b60bedf4d0b2e30d08aa19686584202a560/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fexpand_glob_import.rs?ref=5cff4b60bedf4d0b2e30d08aa19686584202a560", "patch": "@@ -162,11 +162,28 @@ fn find_refs_in_mod(\n     module: Module,\n     visible_from: Option<Module>,\n ) -> Option<Refs> {\n+    if let Some(from) = visible_from {\n+        if !is_mod_visible_from(ctx, module, from) {\n+            return None;\n+        }\n+    }\n+\n     let module_scope = module.scope(ctx.db(), visible_from);\n     let refs = module_scope.into_iter().filter_map(|(n, d)| Ref::from_scope_def(n, d)).collect();\n     Some(Refs(refs))\n }\n \n+fn is_mod_visible_from(ctx: &AssistContext, module: Module, from: Module) -> bool {\n+    match module.parent(ctx.db()) {\n+        Some(parent) => {\n+            parent.visibility_of(ctx.db(), &ModuleDef::Module(module)).map_or(true, |vis| {\n+                vis.is_visible_from(ctx.db(), from.into()) && is_mod_visible_from(ctx, parent, from)\n+            })\n+        }\n+        None => true,\n+    }\n+}\n+\n // looks for name refs in parent use block's siblings\n //\n // mod bar {\n@@ -815,6 +832,41 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn expanding_is_not_applicable_if_target_module_is_not_accessible_from_current_scope() {\n+        check_assist_not_applicable(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub struct Bar;\n+    }\n+}\n+\n+use foo::bar::*<|>;\n+\n+fn baz(bar: Bar) {}\n+\",\n+        );\n+\n+        check_assist_not_applicable(\n+            expand_glob_import,\n+            r\"\n+mod foo {\n+    mod bar {\n+        pub mod baz {\n+            pub struct Baz;\n+        }\n+    }\n+}\n+\n+use foo::bar::baz::*<|>;\n+\n+fn qux(baz: Baz) {}\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn expanding_is_not_applicable_if_cursor_is_not_in_star_token() {\n         check_assist_not_applicable("}]}