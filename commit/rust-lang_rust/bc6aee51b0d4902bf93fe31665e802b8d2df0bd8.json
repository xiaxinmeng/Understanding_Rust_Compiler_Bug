{"sha": "bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "node_id": "C_kwDOAAsO6NoAKGJjNmFlZTUxYjBkNDkwMmJmOTNmZTMxNjY1ZTgwMmI4ZDJkZjBiZDg", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-08-16T08:07:19Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:05:58Z"}, "message": "init partialord", "tree": {"sha": "cc69b3511e450c031506c1eab13c6ce24226fb20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc69b3511e450c031506c1eab13c6ce24226fb20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "html_url": "https://github.com/rust-lang/rust/commit/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cca1fa5bff7bdb4060be938a949380df4e210c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cca1fa5bff7bdb4060be938a949380df4e210c7", "html_url": "https://github.com/rust-lang/rust/commit/1cca1fa5bff7bdb4060be938a949380df4e210c7"}], "stats": {"total": 166, "additions": 166, "deletions": 0}, "files": [{"sha": "5ec8adc2d4cf9bd3a8f310a214e0342ec5b3aac8", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 166, "deletions": 0, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc6aee51b0d4902bf93fe31665e802b8d2df0bd8/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=bc6aee51b0d4902bf93fe31665e802b8d2df0bd8", "patch": "@@ -21,6 +21,7 @@ pub(crate) fn gen_trait_fn_body(\n         \"Default\" => gen_default_impl(adt, func),\n         \"Hash\" => gen_hash_impl(adt, func),\n         \"PartialEq\" => gen_partial_eq(adt, func),\n+        \"PartialOrd\" => gen_partial_ord(adt, func),\n         _ => None,\n     }\n }\n@@ -572,6 +573,171 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n     Some(())\n }\n \n+fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n+        match expr {\n+            Some(expr) => Some(make::expr_op(ast::BinOp::BooleanAnd, expr, cmp)),\n+            None => Some(cmp),\n+        }\n+    }\n+\n+    fn gen_record_pat_field(field_name: &str, pat_name: &str) -> ast::RecordPatField {\n+        let pat = make::ext::simple_ident_pat(make::name(&pat_name));\n+        let name_ref = make::name_ref(field_name);\n+        make::record_pat_field(name_ref, pat.into())\n+    }\n+\n+    fn gen_record_pat(record_name: ast::Path, fields: Vec<ast::RecordPatField>) -> ast::RecordPat {\n+        let list = make::record_pat_field_list(fields);\n+        make::record_pat_with_fields(record_name, list)\n+    }\n+\n+    fn gen_variant_path(variant: &ast::Variant) -> Option<ast::Path> {\n+        make::ext::path_from_idents([\"Self\", &variant.name()?.to_string()])\n+    }\n+\n+    fn gen_tuple_field(field_name: &String) -> ast::Pat {\n+        ast::Pat::IdentPat(make::ident_pat(false, false, make::name(field_name)))\n+    }\n+\n+    // FIXME: return `None` if the trait carries a generic type; we can only\n+    // generate this code `Self` for the time being.\n+\n+    let body = match adt {\n+        // `Hash` cannot be derived for unions, so no default impl can be provided.\n+        ast::Adt::Union(_) => return None,\n+\n+        ast::Adt::Enum(enum_) => {\n+            // => std::mem::discriminant(self) == std::mem::discriminant(other)\n+            let lhs_name = make::expr_path(make::ext::ident_path(\"self\"));\n+            let lhs = make::expr_call(make_discriminant()?, make::arg_list(Some(lhs_name.clone())));\n+            let rhs_name = make::expr_path(make::ext::ident_path(\"other\"));\n+            let rhs = make::expr_call(make_discriminant()?, make::arg_list(Some(rhs_name.clone())));\n+            let eq_check = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+\n+            let mut case_count = 0;\n+            let mut arms = vec![];\n+            for variant in enum_.variant_list()?.variants() {\n+                case_count += 1;\n+                match variant.field_list() {\n+                    // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n+                    Some(ast::FieldList::RecordFieldList(list)) => {\n+                        let mut expr = None;\n+                        let mut l_fields = vec![];\n+                        let mut r_fields = vec![];\n+\n+                        for field in list.fields() {\n+                            let field_name = field.name()?.to_string();\n+\n+                            let l_name = &format!(\"l_{}\", field_name);\n+                            l_fields.push(gen_record_pat_field(&field_name, &l_name));\n+\n+                            let r_name = &format!(\"r_{}\", field_name);\n+                            r_fields.push(gen_record_pat_field(&field_name, &r_name));\n+\n+                            let lhs = make::expr_path(make::ext::ident_path(l_name));\n+                            let rhs = make::expr_path(make::ext::ident_path(r_name));\n+                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                            expr = gen_eq_chain(expr, cmp);\n+                        }\n+\n+                        let left = gen_record_pat(gen_variant_path(&variant)?, l_fields);\n+                        let right = gen_record_pat(gen_variant_path(&variant)?, r_fields);\n+                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n+\n+                        if let Some(expr) = expr {\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n+                        }\n+                    }\n+\n+                    Some(ast::FieldList::TupleFieldList(list)) => {\n+                        let mut expr = None;\n+                        let mut l_fields = vec![];\n+                        let mut r_fields = vec![];\n+\n+                        for (i, _) in list.fields().enumerate() {\n+                            let field_name = format!(\"{}\", i);\n+\n+                            let l_name = format!(\"l{}\", field_name);\n+                            l_fields.push(gen_tuple_field(&l_name));\n+\n+                            let r_name = format!(\"r{}\", field_name);\n+                            r_fields.push(gen_tuple_field(&r_name));\n+\n+                            let lhs = make::expr_path(make::ext::ident_path(&l_name));\n+                            let rhs = make::expr_path(make::ext::ident_path(&r_name));\n+                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                            expr = gen_eq_chain(expr, cmp);\n+                        }\n+\n+                        let left = make::tuple_struct_pat(gen_variant_path(&variant)?, l_fields);\n+                        let right = make::tuple_struct_pat(gen_variant_path(&variant)?, r_fields);\n+                        let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n+\n+                        if let Some(expr) = expr {\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n+                        }\n+                    }\n+                    None => continue,\n+                }\n+            }\n+\n+            let expr = match arms.len() {\n+                0 => eq_check,\n+                _ => {\n+                    if case_count > arms.len() {\n+                        let lhs = make::wildcard_pat().into();\n+                        arms.push(make::match_arm(Some(lhs), None, eq_check));\n+                    }\n+\n+                    let match_target = make::expr_tuple(vec![lhs_name, rhs_name]);\n+                    let list = make::match_arm_list(arms).indent(ast::edit::IndentLevel(1));\n+                    make::expr_match(match_target, list)\n+                }\n+            };\n+\n+            make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+        }\n+        ast::Adt::Struct(strukt) => match strukt.field_list() {\n+            Some(ast::FieldList::RecordFieldList(field_list)) => {\n+                let mut expr = None;\n+                for field in field_list.fields() {\n+                    let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let lhs = make::expr_field(lhs, &field.name()?.to_string());\n+                    let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+                    let rhs = make::expr_field(rhs, &field.name()?.to_string());\n+                    let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                    expr = gen_eq_chain(expr, cmp);\n+                }\n+                make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            Some(ast::FieldList::TupleFieldList(field_list)) => {\n+                let mut expr = None;\n+                for (i, _) in field_list.fields().enumerate() {\n+                    let idx = format!(\"{}\", i);\n+                    let lhs = make::expr_path(make::ext::ident_path(\"self\"));\n+                    let lhs = make::expr_field(lhs, &idx);\n+                    let rhs = make::expr_path(make::ext::ident_path(\"other\"));\n+                    let rhs = make::expr_field(rhs, &idx);\n+                    let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n+                    expr = gen_eq_chain(expr, cmp);\n+                }\n+                make::block_expr(None, expr).indent(ast::edit::IndentLevel(1))\n+            }\n+\n+            // No fields in the body means there's nothing to hash.\n+            None => {\n+                let expr = make::expr_literal(\"true\").into();\n+                make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))\n+            }\n+        },\n+    };\n+\n+    ted::replace(func.body()?.syntax(), body.clone_for_update().syntax());\n+    Some(())\n+}\n+\n fn make_discriminant() -> Option<ast::Expr> {\n     Some(make::expr_path(make::ext::path_from_idents([\"core\", \"mem\", \"discriminant\"])?))\n }"}]}