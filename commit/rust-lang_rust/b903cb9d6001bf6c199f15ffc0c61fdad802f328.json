{"sha": "b903cb9d6001bf6c199f15ffc0c61fdad802f328", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MDNjYjlkNjAwMWJmNmMxOTlmMTVmZmMwYzYxZmRhZDgwMmYzMjg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-11T18:56:59Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-01T19:05:02Z"}, "message": "Move the `Unevaluated` constant arm upwards in the type structure", "tree": {"sha": "02ae3b3547307e44694660ed5780ea10d7e28100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ae3b3547307e44694660ed5780ea10d7e28100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b903cb9d6001bf6c199f15ffc0c61fdad802f328", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b903cb9d6001bf6c199f15ffc0c61fdad802f328", "html_url": "https://github.com/rust-lang/rust/commit/b903cb9d6001bf6c199f15ffc0c61fdad802f328", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b903cb9d6001bf6c199f15ffc0c61fdad802f328/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae164753f557f668cb75610abda4f790981e5e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae164753f557f668cb75610abda4f790981e5e6", "html_url": "https://github.com/rust-lang/rust/commit/cae164753f557f668cb75610abda4f790981e5e6"}], "stats": {"total": 721, "additions": 405, "deletions": 316}, "files": [{"sha": "57a53d3f09a2ec8691309de2759c48ea1103abae", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -301,7 +301,6 @@ impl_stable_hash_for!(struct ty::FieldDef {\n \n impl_stable_hash_for!(\n     impl<'tcx> for enum mir::interpret::ConstValue<'tcx> [ mir::interpret::ConstValue ] {\n-        Unevaluated(def_id, substs),\n         Scalar(val),\n         ScalarPair(a, b),\n         ByRef(id, alloc, offset),\n@@ -378,6 +377,11 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n     val\n });\n \n+impl_stable_hash_for!(impl<'tcx> for enum ty::LazyConst<'tcx> [ty::LazyConst] {\n+    Unevaluated(did, substs),\n+    Evaluated(c)\n+});\n+\n impl_stable_hash_for!(enum mir::interpret::ErrorHandled {\n     Reported,\n     TooGeneric"}, {"sha": "26a8e63254008d7de9226e0ae14f83a5f788a793", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,7 +1,6 @@\n use std::fmt;\n \n-use crate::ty::{Ty, subst::Substs, layout::{HasDataLayout, Size}};\n-use crate::hir::def_id::DefId;\n+use crate::ty::{Ty, layout::{HasDataLayout, Size}};\n \n use super::{EvalResult, Pointer, PointerArithmetic, Allocation, AllocId, sign_extend, truncate};\n \n@@ -18,12 +17,6 @@ pub struct RawConst<'tcx> {\n /// matches the LocalValue optimizations for easy conversions between Value and ConstValue.\n #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n-    /// Never returned from the `const_eval` query, but the HIR contains these frequently in order\n-    /// to allow HIR creation to happen for everything before needing to be able to run constant\n-    /// evaluation\n-    /// FIXME: The query should then return a type that does not even have this variant.\n-    Unevaluated(DefId, &'tcx Substs<'tcx>),\n-\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs\n     ///\n     /// Not using the enum `Value` to encode that this must not be `Undef`\n@@ -43,7 +36,6 @@ impl<'tcx> ConstValue<'tcx> {\n     #[inline]\n     pub fn try_to_scalar(&self) -> Option<Scalar> {\n         match *self {\n-            ConstValue::Unevaluated(..) |\n             ConstValue::ByRef(..) |\n             ConstValue::ScalarPair(..) => None,\n             ConstValue::Scalar(val) => Some(val),"}, {"sha": "eafae6d9c9e8de10accf61bd2c1f7b60f9c2c2d2", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -2154,7 +2154,9 @@ impl<'tcx> Operand<'tcx> {\n             span,\n             ty,\n             user_ty: None,\n-            literal: ty::Const::zero_sized(tcx, ty),\n+            literal: tcx.intern_lazy_const(\n+                ty::LazyConst::Evaluated(ty::Const::zero_sized(tcx, ty)),\n+            ),\n         })\n     }\n \n@@ -2457,7 +2459,7 @@ pub struct Constant<'tcx> {\n     /// Needed for NLL to impose user-given type constraints.\n     pub user_ty: Option<UserTypeAnnotationIndex>,\n \n-    pub literal: &'tcx ty::Const<'tcx>,\n+    pub literal: &'tcx ty::LazyConst<'tcx>,\n }\n \n /// A collection of projections into user types.\n@@ -2655,7 +2657,15 @@ newtype_index! {\n impl<'tcx> Debug for Constant<'tcx> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"const \")?;\n-        fmt_const_val(fmt, self.literal)\n+        fmt_lazy_const_val(fmt, self.literal)\n+    }\n+}\n+\n+/// Write a `ConstValue` in a way closer to the original source code than the `Debug` output.\n+pub fn fmt_lazy_const_val(f: &mut impl Write, const_val: &ty::LazyConst<'_>) -> fmt::Result {\n+    match const_val {\n+        ty::LazyConst::Unevaluated(..) => write!(f, \"{:?}\", const_val),\n+        ty::LazyConst::Evaluated(c) => fmt_const_val(f, c),\n     }\n }\n "}, {"sha": "6dda1933bbafa6ea56826535d483657f4d2c8883", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -114,7 +114,7 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                 PlaceTy::Ty {\n                     ty: match ty.sty {\n                         ty::Array(inner, size) => {\n-                            let size = size.unwrap_usize(tcx);\n+                            let size = size.unwrap_evaluated().unwrap_usize(tcx);\n                             let len = size - (from as u64) - (to as u64);\n                             tcx.mk_array(inner, len)\n                         }"}, {"sha": "a0fae3aa927ce3f5f6d72eca981e9c453a44ea41", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -233,7 +233,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_const(&mut self,\n-                           constant: & $($mutability)* &'tcx ty::Const<'tcx>,\n+                           constant: & $($mutability)* &'tcx ty::LazyConst<'tcx>,\n                            _: Location) {\n                 self.super_const(constant);\n             }\n@@ -892,7 +892,7 @@ macro_rules! make_mir_visitor {\n             fn super_region(&mut self, _region: & $($mutability)* ty::Region<'tcx>) {\n             }\n \n-            fn super_const(&mut self, _const: & $($mutability)* &'tcx ty::Const<'tcx>) {\n+            fn super_const(&mut self, _const: & $($mutability)* &'tcx ty::LazyConst<'tcx>) {\n             }\n \n             fn super_substs(&mut self, _substs: & $($mutability)* &'tcx Substs<'tcx>) {"}, {"sha": "f66dcb8dffda5bd49ce2cde87e5c60c08d68b79f", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -418,18 +418,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     Some(format!(\"[{}]\", self.tcx.type_of(def.did).to_string())),\n                 ));\n                 let tcx = self.tcx;\n-                if let Some(len) = len.val.try_to_scalar().and_then(|scalar| {\n-                    scalar.to_usize(&tcx).ok()\n-                }) {\n-                    flags.push((\n-                        \"_Self\".to_owned(),\n-                        Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),\n-                    ));\n-                } else {\n-                    flags.push((\n-                        \"_Self\".to_owned(),\n-                        Some(format!(\"[{}; _]\", self.tcx.type_of(def.did).to_string())),\n-                    ));\n+                if let ty::LazyConst::Evaluated(len) = len {\n+                    if let Some(len) = len.val.try_to_scalar().and_then(|scalar| {\n+                        scalar.to_usize(&tcx).ok()\n+                    }) {\n+                        flags.push((\n+                            \"_Self\".to_owned(),\n+                            Some(format!(\"[{}; {}]\", self.tcx.type_of(def.did).to_string(), len)),\n+                        ));\n+                    } else {\n+                        flags.push((\n+                            \"_Self\".to_owned(),\n+                            Some(format!(\"[{}; _]\", self.tcx.type_of(def.did).to_string())),\n+                        ));\n+                    }\n                 }\n             }\n         }"}, {"sha": "87e9c3b2c888a6a0fd6ed322bba8f0b45d39082e", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -15,7 +15,6 @@ use super::util;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n-use mir::interpret::ConstValue;\n use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::ast::Ident;\n@@ -410,8 +409,8 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n         }\n     }\n \n-    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+    fn fold_const(&mut self, constant: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        if let ty::LazyConst::Unevaluated(def_id, substs) = *constant {\n             let tcx = self.selcx.tcx().global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_placeholders() {\n@@ -423,8 +422,9 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                             promoted: None\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let evaluated = evaluated.subst(self.tcx(), substs);\n-                            return self.fold_const(evaluated);\n+                            let substs = tcx.lift_to_global(&substs).unwrap();\n+                            let evaluated = evaluated.subst(tcx, substs);\n+                            return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                         }\n                     }\n                 } else {\n@@ -436,7 +436,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                                 promoted: None\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return self.fold_const(evaluated)\n+                                return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                             }\n                         }\n                     }"}, {"sha": "be05445cfc61a47069363c562958266050ad4630", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -5,7 +5,7 @@\n use infer::at::At;\n use infer::canonical::OriginalQueryValues;\n use infer::{InferCtxt, InferOk};\n-use mir::interpret::{ConstValue, GlobalId};\n+use mir::interpret::GlobalId;\n use traits::project::Normalized;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -188,8 +188,8 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n         }\n     }\n \n-    fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+    fn fold_const(&mut self, constant: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        if let ty::LazyConst::Unevaluated(def_id, substs) = *constant {\n             let tcx = self.infcx.tcx.global_tcx();\n             if let Some(param_env) = self.tcx().lift_to_global(&self.param_env) {\n                 if substs.needs_infer() || substs.has_placeholders() {\n@@ -201,8 +201,9 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                             promoted: None,\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                            let evaluated = evaluated.subst(self.tcx(), substs);\n-                            return self.fold_const(evaluated);\n+                            let substs = tcx.lift_to_global(&substs).unwrap();\n+                            let evaluated = evaluated.subst(tcx, substs);\n+                            return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                         }\n                     }\n                 } else {\n@@ -214,7 +215,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                                 promoted: None,\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return self.fold_const(evaluated)\n+                                return tcx.intern_lazy_const(ty::LazyConst::Evaluated(evaluated));\n                             }\n                         }\n                     }"}, {"sha": "57b99db0c7d54afc418b13e590d4d7d04d882c75", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -255,6 +255,15 @@ pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n     Ok(decoder.tcx().mk_const(Decodable::decode(decoder)?))\n }\n \n+#[inline]\n+pub fn decode_lazy_const<'a, 'tcx, D>(decoder: &mut D)\n+                                 -> Result<&'tcx ty::LazyConst<'tcx>, D::Error>\n+    where D: TyDecoder<'a, 'tcx>,\n+          'tcx: 'a,\n+{\n+    Ok(decoder.tcx().intern_lazy_const(Decodable::decode(decoder)?))\n+}\n+\n #[inline]\n pub fn decode_allocation<'a, 'tcx, D>(decoder: &mut D)\n     -> Result<&'tcx Allocation, D::Error>\n@@ -396,6 +405,13 @@ macro_rules! implement_ty_decoder {\n                 }\n             }\n \n+            impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::LazyConst<'tcx>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<&'tcx ty::LazyConst<'tcx>, Self::Error> {\n+                    decode_lazy_const(self)\n+                }\n+            }\n+\n             impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::mir::interpret::Allocation>\n             for $DecoderName<$($typaram),*> {\n                 fn specialized_decode("}, {"sha": "715e7367fada7c03ffd4a3df77422cdded1ce6ef", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -29,7 +29,7 @@ use traits;\n use traits::{Clause, Clauses, GoalKind, Goal, Goals};\n use ty::{self, Ty, TypeAndMut};\n use ty::{TyS, TyKind, List};\n-use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const};\n+use ty::{AdtKind, AdtDef, ClosureSubsts, GeneratorSubsts, Region, Const, LazyConst};\n use ty::{PolyFnSig, InferTy, ParamTy, ProjectionTy, ExistentialPredicate, Predicate};\n use ty::RegionKind;\n use ty::{TyVar, TyVid, IntVar, IntVid, FloatVar, FloatVid};\n@@ -1112,6 +1112,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         })\n     }\n \n+    pub fn intern_lazy_const(self, c: ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        self.global_interners.arena.alloc(c)\n+    }\n+\n     pub fn intern_layout(self, layout: LayoutDetails) -> &'gcx LayoutDetails {\n         self.layout_interner.borrow_mut().intern(layout, |layout| {\n             self.global_arenas.layout.alloc(layout)\n@@ -1814,6 +1818,21 @@ impl<'a, 'tcx> Lift<'tcx> for &'a List<Clause<'a>> {\n     }\n }\n \n+impl<'a, 'tcx> Lift<'tcx> for &'a LazyConst<'a> {\n+    type Lifted = &'tcx LazyConst<'tcx>;\n+    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx LazyConst<'tcx>> {\n+        if tcx.interners.arena.in_arena(*self as *const _) {\n+            return Some(unsafe { mem::transmute(*self) });\n+        }\n+        // Also try in the global tcx if we're not that.\n+        if !tcx.is_global() {\n+            self.lift_to_tcx(tcx.global_tcx())\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n impl<'a, 'tcx> Lift<'tcx> for &'a Const<'a> {\n     type Lifted = &'tcx Const<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<&'tcx Const<'tcx>> {\n@@ -2683,7 +2702,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, ty::Const::from_usize(self, n)))\n+        self.mk_ty(Array(ty, self.intern_lazy_const(\n+            ty::LazyConst::Evaluated(ty::Const::from_usize(self.global_tcx(), n))\n+        )))\n     }\n \n     #[inline]"}, {"sha": "67ff21e2a52d63403411af166b57a3202f2f2421", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -167,11 +167,12 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n \n             ty::Adt(def, _) => format!(\"{} `{}`\", def.descr(), tcx.item_path_str(def.did)).into(),\n             ty::Foreign(def_id) => format!(\"extern type `{}`\", tcx.item_path_str(def_id)).into(),\n-            ty::Array(_, n) => {\n-                match n.assert_usize(tcx) {\n+            ty::Array(_, n) => match n {\n+                ty::LazyConst::Evaluated(n) => match n.assert_usize(tcx) {\n                     Some(n) => format!(\"array of {} elements\", n).into(),\n                     None => \"array\".into(),\n-                }\n+                },\n+                ty::LazyConst::Unevaluated(..) => \"array\".into(),\n             }\n             ty::Slice(_) => \"slice\".into(),\n             ty::RawPtr(_) => \"*-ptr\".into(),"}, {"sha": "4fa13a01d5a927d77a8ac6884a97e8700b2f57ac", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,4 +1,3 @@\n-use mir::interpret::ConstValue;\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n \n@@ -173,7 +172,10 @@ impl FlagComputation {\n \n             &ty::Array(tt, len) => {\n                 self.add_ty(tt);\n-                self.add_const(len);\n+                if let ty::LazyConst::Unevaluated(_, substs) = len {\n+                    self.add_flags(TypeFlags::HAS_PROJECTION);\n+                    self.add_substs(substs);\n+                }\n             }\n \n             &ty::Slice(tt) => {\n@@ -230,14 +232,6 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_const(&mut self, constant: &ty::Const<'_>) {\n-        self.add_ty(constant.ty);\n-        if let ConstValue::Unevaluated(_, substs) = constant.val {\n-            self.add_flags(TypeFlags::HAS_PROJECTION);\n-            self.add_substs(substs);\n-        }\n-    }\n-\n     fn add_existential_projection(&mut self, projection: &ty::ExistentialProjection<'_>) {\n         self.add_substs(projection.substs);\n         self.add_ty(projection.ty);"}, {"sha": "4495e9654c984d6df19f3e713976975ae30f567c", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -29,7 +29,6 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use mir::interpret::ConstValue;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n \n@@ -164,7 +163,7 @@ pub trait TypeFolder<'gcx: 'tcx, 'tcx> : Sized {\n         r.super_fold_with(self)\n     }\n \n-    fn fold_const(&mut self, c: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n+    fn fold_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n         c.super_fold_with(self)\n     }\n }\n@@ -182,7 +181,7 @@ pub trait TypeVisitor<'tcx> : Sized {\n         r.super_visit_with(self)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n+    fn visit_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> bool {\n         c.super_visit_with(self)\n     }\n }\n@@ -864,8 +863,8 @@ impl<'tcx> TypeVisitor<'tcx> for HasTypeFlagsVisitor {\n         flags.intersects(self.flags)\n     }\n \n-    fn visit_const(&mut self, c: &'tcx ty::Const<'tcx>) -> bool {\n-        if let ConstValue::Unevaluated(..) = c.val {\n+    fn visit_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> bool {\n+        if let ty::LazyConst::Unevaluated(..) = c {\n             let projection_flags = TypeFlags::HAS_NORMALIZABLE_PROJECTION |\n                 TypeFlags::HAS_PROJECTION;\n             if projection_flags.intersects(self.flags) {"}, {"sha": "6dfc9681cfd864eceac0ed00877a922e1990abdd", "filename": "src/librustc/ty/inhabitedness/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finhabitedness%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,6 +1,6 @@\n use ty::context::TyCtxt;\n use ty::{AdtDef, VariantDef, FieldDef, Ty, TyS};\n-use ty::{DefId, Substs};\n+use ty::{self, DefId, Substs};\n use ty::{AdtKind, Visibility};\n use ty::TyKind::*;\n \n@@ -213,11 +213,14 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             }\n \n             Array(ty, len) => {\n-                match len.assert_usize(tcx) {\n-                    // If the array is definitely non-empty, it's uninhabited if\n-                    // the type of its elements is uninhabited.\n-                    Some(n) if n != 0 => ty.uninhabited_from(tcx),\n-                    _ => DefIdForest::empty()\n+                match len {\n+                    ty::LazyConst::Unevaluated(..) => DefIdForest::empty(),\n+                    ty::LazyConst::Evaluated(len) => match len.assert_usize(tcx) {\n+                        // If the array is definitely non-empty, it's uninhabited if\n+                        // the type of its elements is uninhabited.\n+                        Some(n) if n != 0 => ty.uninhabited_from(tcx),\n+                        _ => DefIdForest::empty()\n+                    },\n                 }\n             }\n "}, {"sha": "1f25925a8e1d1caf18845b4caab79bbf433c5c16", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -543,7 +543,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n \n                 let element = self.layout_of(element)?;\n-                let count = count.unwrap_usize(tcx);\n+                let count = count.unwrap_evaluated().unwrap_usize(tcx);\n                 let size = element.size.checked_mul(count, dl)\n                     .ok_or(LayoutError::SizeOverflow(ty))?;\n "}, {"sha": "20167bd41fb871a9b6539d478e9e2b03efe73674", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -59,7 +59,7 @@ pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};\n pub use self::sty::{TraitRef, TyKind, PolyTraitRef};\n pub use self::sty::{ExistentialTraitRef, PolyExistentialTraitRef};\n-pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const};\n+pub use self::sty::{ExistentialProjection, PolyExistentialProjection, Const, LazyConst};\n pub use self::sty::{BoundRegion, EarlyBoundRegion, FreeRegion, Region};\n pub use self::sty::RegionKind;\n pub use self::sty::{TyVid, IntVid, FloatVid, RegionVid};"}, {"sha": "6d310a9500a620bea1477d73a685e63f96fc5443", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -5,7 +5,6 @@\n //! subtyping, type equality, etc.\n \n use hir::def_id::DefId;\n-use mir::interpret::ConstValue;\n use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};\n@@ -480,14 +479,9 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         (&ty::Array(a_t, sz_a), &ty::Array(b_t, sz_b)) =>\n         {\n             let t = relation.relate(&a_t, &b_t)?;\n-            assert_eq!(sz_a.ty, tcx.types.usize);\n-            assert_eq!(sz_b.ty, tcx.types.usize);\n-            let to_u64 = |x: &'tcx ty::Const<'tcx>| -> Result<u64, ErrorReported> {\n-                if let Some(s) = x.assert_usize(tcx) {\n-                    return Ok(s);\n-                }\n-                match x.val {\n-                    ConstValue::Unevaluated(def_id, substs) => {\n+            let to_u64 = |x: ty::LazyConst<'tcx>| -> Result<u64, ErrorReported> {\n+                match x {\n+                    ty::LazyConst::Unevaluated(def_id, substs) => {\n                         // FIXME(eddyb) get the right param_env.\n                         let param_env = ty::ParamEnv::empty();\n                         if let Some(substs) = tcx.lift_to_global(&substs) {\n@@ -513,14 +507,14 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n                             \"array length could not be evaluated\");\n                         Err(ErrorReported)\n                     }\n-                    _ => {\n+                    ty::LazyConst::Evaluated(c) => c.assert_usize(tcx).ok_or_else(|| {\n                         tcx.sess.delay_span_bug(DUMMY_SP,\n-                            &format!(\"arrays should not have {:?} as length\", x));\n-                        Err(ErrorReported)\n-                    }\n+                            \"array length could not be evaluated\");\n+                        ErrorReported\n+                    })\n                 }\n             };\n-            match (to_u64(sz_a), to_u64(sz_b)) {\n+            match (to_u64(*sz_a), to_u64(*sz_b)) {\n                 (Ok(sz_a_u64), Ok(sz_b_u64)) => {\n                     if sz_a_u64 == sz_b_u64 {\n                         Ok(tcx.mk_ty(ty::Array(t, sz_a)))"}, {"sha": "28184725b1c81bdf333953a239936fd53b8742d0", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -53,6 +53,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::ty::UniverseIndex,\n     ::ty::Variance,\n     ::syntax_pos::Span,\n+    ConstValue<'tcx>,\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -1020,26 +1021,31 @@ EnumTypeFoldableImpl! {\n     }\n }\n \n-impl<'tcx> TypeFoldable<'tcx> for ConstValue<'tcx> {\n+impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::LazyConst<'tcx> {\n     fn super_fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        match *self {\n-            ConstValue::Scalar(v) => ConstValue::Scalar(v),\n-            ConstValue::ScalarPair(a, b) => ConstValue::ScalarPair(a, b),\n-            ConstValue::ByRef(id, alloc, offset) => ConstValue::ByRef(id, alloc, offset),\n-            ConstValue::Unevaluated(def_id, substs) => {\n-                ConstValue::Unevaluated(def_id, substs.fold_with(folder))\n+        let new = match self {\n+            ty::LazyConst::Evaluated(v) => ty::LazyConst::Evaluated(v.fold_with(folder)),\n+            ty::LazyConst::Unevaluated(def_id, substs) => {\n+                ty::LazyConst::Unevaluated(*def_id, substs.fold_with(folder))\n             }\n-        }\n+        };\n+        folder.tcx().intern_lazy_const(new)\n+    }\n+\n+    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n+        folder.fold_const(*self)\n     }\n \n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         match *self {\n-            ConstValue::Scalar(_) |\n-            ConstValue::ScalarPair(_, _) |\n-            ConstValue::ByRef(_, _, _) => false,\n-            ConstValue::Unevaluated(_, substs) => substs.visit_with(visitor),\n+            ty::LazyConst::Evaluated(c) => c.visit_with(visitor),\n+            ty::LazyConst::Unevaluated(_, substs) => substs.visit_with(visitor),\n         }\n     }\n+\n+    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n+        visitor.visit_const(self)\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n@@ -1052,15 +1058,7 @@ impl<'tcx> TypeFoldable<'tcx> for &'tcx ty::Const<'tcx> {\n         })\n     }\n \n-    fn fold_with<'gcx: 'tcx, F: TypeFolder<'gcx, 'tcx>>(&self, folder: &mut F) -> Self {\n-        folder.fold_const(*self)\n-    }\n-\n     fn super_visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n         self.ty.visit_with(visitor) || self.val.visit_with(visitor)\n     }\n-\n-    fn visit_with<V: TypeVisitor<'tcx>>(&self, visitor: &mut V) -> bool {\n-        visitor.visit_const(self)\n-    }\n }"}, {"sha": "ba380dfc7c81e83d6177ed5613115100b8fd4a24", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -113,7 +113,7 @@ pub enum TyKind<'tcx> {\n     Str,\n \n     /// An array with the given length. Written as `[T; n]`.\n-    Array(Ty<'tcx>, &'tcx ty::Const<'tcx>),\n+    Array(Ty<'tcx>, &'tcx ty::LazyConst<'tcx>),\n \n     /// The pointee of an array slice.  Written as `[T]`.\n     Slice(Ty<'tcx>),\n@@ -2013,6 +2013,36 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+/// Used in the HIR by using `Unevaluated` everywhere and later normalizing to `Evaluated` if the\n+/// code is monomorphic enough for that.\n+pub enum LazyConst<'tcx> {\n+    Unevaluated(DefId, &'tcx Substs<'tcx>),\n+    Evaluated(&'tcx Const<'tcx>),\n+}\n+\n+static_assert!(MEM_SIZE_OF_LAZY_CONST: ::std::mem::size_of::<LazyConst<'_>>() == 24);\n+\n+impl<'tcx> LazyConst<'tcx> {\n+    pub fn unwrap_evaluated(self) -> &'tcx Const<'tcx> {\n+        match self {\n+            LazyConst::Evaluated(c) => c,\n+            LazyConst::Unevaluated(..) => bug!(\"unexpected unevaluated constant\"),\n+        }\n+    }\n+\n+    pub fn map_evaluated<R>(self, f: impl FnOnce(&'tcx Const<'tcx>) -> Option<R>) -> Option<R> {\n+        match self {\n+            LazyConst::Evaluated(c) => f(c),\n+            LazyConst::Unevaluated(..) => None,\n+        }\n+    }\n+\n+    pub fn assert_usize(self, tcx: TyCtxt<'_, '_, 'tcx>) -> Option<u64> {\n+        self.map_evaluated(|c| c.assert_usize(tcx))\n+    }\n+}\n+\n /// Typed constant value.\n #[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n pub struct Const<'tcx> {\n@@ -2022,18 +2052,6 @@ pub struct Const<'tcx> {\n }\n \n impl<'tcx> Const<'tcx> {\n-    pub fn unevaluated(\n-        tcx: TyCtxt<'_, '_, 'tcx>,\n-        def_id: DefId,\n-        substs: &'tcx Substs<'tcx>,\n-        ty: Ty<'tcx>,\n-    ) -> &'tcx Self {\n-        tcx.mk_const(Const {\n-            val: ConstValue::Unevaluated(def_id, substs),\n-            ty,\n-        })\n-    }\n-\n     #[inline]\n     pub fn from_const_value(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n@@ -2149,3 +2167,4 @@ impl<'tcx> Const<'tcx> {\n }\n \n impl<'tcx> serialize::UseSpecializedDecodable for &'tcx Const<'tcx> {}\n+impl<'tcx> serialize::UseSpecializedDecodable for &'tcx LazyConst<'tcx> {}"}, {"sha": "6887d092fcd6208a2700595d9002268de2d1dcb3", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,7 +1,6 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use mir::interpret::ConstValue;\n use ty::{self, Ty};\n use smallvec::{self, SmallVec};\n \n@@ -75,7 +74,9 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Placeholder(..) | ty::Bound(..) | ty::Foreign(..) => {\n         }\n         ty::Array(ty, len) => {\n-            push_const(stack, len);\n+            if let ty::LazyConst::Unevaluated(_, substs) = len {\n+                stack.extend(substs.types().rev());\n+            }\n             stack.push(ty);\n         }\n         ty::Slice(ty) => {\n@@ -128,10 +129,3 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         }\n     }\n }\n-\n-fn push_const<'tcx>(stack: &mut TypeWalkerStack<'tcx>, constant: &'tcx ty::Const<'tcx>) {\n-    if let ConstValue::Unevaluated(_, substs) = constant.val {\n-        stack.extend(substs.types().rev());\n-    }\n-    stack.push(constant.ty);\n-}"}, {"sha": "517cfd9edfaf9fbeac50d7fca0e6b67f52a06e89", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,5 +1,4 @@\n use hir::def_id::DefId;\n-use mir::interpret::ConstValue;\n use infer::InferCtxt;\n use ty::subst::Substs;\n use traits;\n@@ -202,11 +201,10 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Pushes the obligations required for a constant value to be WF\n+    /// Pushes the obligations required for an array length to be WF\n     /// into `self.out`.\n-    fn compute_const(&mut self, constant: &'tcx ty::Const<'tcx>) {\n-        self.require_sized(constant.ty, traits::ConstSized);\n-        if let ConstValue::Unevaluated(def_id, substs) = constant.val {\n+    fn compute_array_len(&mut self, constant: ty::LazyConst<'tcx>) {\n+        if let ty::LazyConst::Unevaluated(def_id, substs) = constant {\n             let obligations = self.nominal_obligations(def_id, substs);\n             self.out.extend(obligations);\n \n@@ -260,8 +258,7 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n \n                 ty::Array(subty, len) => {\n                     self.require_sized(subty, traits::SliceOrArrayElem);\n-                    assert_eq!(len.ty, self.infcx.tcx.types.usize);\n-                    self.compute_const(len);\n+                    self.compute_array_len(*len);\n                 }\n \n                 ty::Tuple(ref tys) => {"}, {"sha": "1356fbb6489cc719ef9c750db0c430fd1c65e92f", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,6 +1,5 @@\n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n-use mir::interpret::ConstValue;\n use middle::region;\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};\n@@ -1272,12 +1271,12 @@ define_print! {\n                 }),\n                 Array(ty, sz) => {\n                     print!(f, cx, write(\"[\"), print(ty), write(\"; \"))?;\n-                    match sz.val {\n-                        ConstValue::Unevaluated(_def_id, _substs) => {\n+                    match sz {\n+                        ty::LazyConst::Unevaluated(_def_id, _substs) => {\n                             write!(f, \"_\")?;\n                         }\n-                        _ => ty::tls::with(|tcx| {\n-                            write!(f, \"{}\", sz.unwrap_usize(tcx))\n+                        ty::LazyConst::Evaluated(c) => ty::tls::with(|tcx| {\n+                            write!(f, \"{}\", c.unwrap_usize(tcx))\n                         })?,\n                     }\n                     write!(f, \"]\")"}, {"sha": "bec0cfa0d862f5b3ac18315930baae5ba8edf11a", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -302,7 +302,7 @@ fn fixed_vec_metadata(\n \n     let upper_bound = match array_or_slice_type.sty {\n         ty::Array(_, len) => {\n-            len.unwrap_usize(cx.tcx) as c_longlong\n+            len.unwrap_evaluated().unwrap_usize(cx.tcx) as c_longlong\n         }\n         _ => -1\n     };"}, {"sha": "c1309569c795582373011440dbac231bd048f5ad", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -88,7 +88,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         ty::Array(inner_type, len) => {\n             output.push('[');\n             push_debuginfo_type_name(cx, inner_type, true, output);\n-            output.push_str(&format!(\"; {}\", len.unwrap_usize(cx.tcx)));\n+            output.push_str(&format!(\"; {}\", len.unwrap_evaluated().unwrap_usize(cx.tcx)));\n             output.push(']');\n         },\n         ty::Slice(inner_type) => {"}, {"sha": "166655f6a80619b6108d2be23b8414d0bf9a78dc", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -171,7 +171,7 @@ pub fn unsized_info<'tcx, Cx: CodegenMethods<'tcx>>(\n     let (source, target) = cx.tcx().struct_lockstep_tails(source, target);\n     match (&source.sty, &target.sty) {\n         (&ty::Array(_, len), &ty::Slice(_)) => {\n-            cx.const_usize(len.unwrap_usize(cx.tcx()))\n+            cx.const_usize(len.unwrap_evaluated().unwrap_usize(cx.tcx()))\n         }\n         (&ty::Dynamic(..), &ty::Dynamic(..)) => {\n             // For now, upcasts are limited to changes in marker"}, {"sha": "58325e3443266e9ea4a0d6c98c6a3a5e374c3018", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -2,7 +2,7 @@ use rustc::mir::interpret::ErrorHandled;\n use rustc_mir::const_eval::const_field;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc::mir::interpret::{GlobalId, ConstValue};\n+use rustc::mir::interpret::GlobalId;\n use rustc::ty::{self, Ty};\n use rustc::ty::layout;\n use syntax::source_map::Span;\n@@ -14,10 +14,10 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     fn fully_evaluate(\n         &mut self,\n         bx: &Bx,\n-        constant: &'tcx ty::Const<'tcx>,\n+        constant: &'tcx ty::LazyConst<'tcx>,\n     ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n-        match constant.val {\n-            ConstValue::Unevaluated(def_id, ref substs) => {\n+        match *constant {\n+            ty::LazyConst::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n                 let param_env = ty::ParamEnv::reveal_all();\n                 let instance = ty::Instance::resolve(tcx, param_env, def_id, substs).unwrap();\n@@ -27,7 +27,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 };\n                 tcx.const_eval(param_env.and(cid))\n             },\n-            _ => Ok(constant),\n+            ty::LazyConst::Evaluated(constant) => Ok(constant),\n         }\n     }\n \n@@ -52,7 +52,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             .and_then(|c| {\n                 let field_ty = c.ty.builtin_index().unwrap();\n                 let fields = match c.ty.sty {\n-                    ty::Array(_, n) => n.unwrap_usize(bx.tcx()),\n+                    ty::Array(_, n) => n.unwrap_evaluated().unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n                 let values: Result<Vec<_>, ErrorHandled> = (0..fields).map(|field| {"}, {"sha": "bb55bf3b46cd4caa41e302c949ce3c23a26e734d", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -76,7 +76,6 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n         }\n \n         let val = match val.val {\n-            ConstValue::Unevaluated(..) => bug!(),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,"}, {"sha": "404ee86c6a11746865f4e02799fa69dae831acb5", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -537,7 +537,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         if let mir::Place::Local(index) = *place {\n             if let LocalRef::Operand(Some(op)) = self.locals[index] {\n                 if let ty::Array(_, n) = op.layout.ty.sty {\n-                    let n = n.unwrap_usize(bx.cx().tcx());\n+                    let n = n.unwrap_evaluated().unwrap_usize(bx.cx().tcx());\n                     return bx.cx().const_usize(n);\n                 }\n             }"}, {"sha": "ab5a16a474437a3fb691c769ef397ba8a02f05d4", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1380,7 +1380,10 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         );\n         if let TerminatorKind::Call {\n             func: Operand::Constant(box Constant {\n-                literal: ty::Const { ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  }, ..  },\n+                literal: ty::LazyConst::Evaluated(ty::Const {\n+                    ty: &ty::TyS { sty: ty::TyKind::FnDef(id, _), ..  },\n+                    ..\n+                }),\n                 ..\n             }),\n             args,"}, {"sha": "63bf6faed40d462b1b65eba022ef64aef6f1e12f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -468,13 +468,13 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                             Terminator {\n                                 kind: TerminatorKind::Call {\n                                     func: Operand::Constant(box Constant {\n-                                        literal: Const {\n+                                        literal: ty::LazyConst::Evaluated(Const {\n                                             ty: &TyS {\n                                                 sty: TyKind::FnDef(id, substs),\n                                                 ..\n                                             },\n                                             ..\n-                                        },\n+                                        }),\n                                         ..\n                                     }),\n                                     .."}, {"sha": "5c24da7621b2d827626fd7b7d799d0a0841a50d2", "filename": "src/librustc_mir/borrow_check/nll/renumber.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Frenumber.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n         debug!(\"visit_region: region={:?}\", region);\n     }\n \n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _location: Location) {\n+    fn visit_const(&mut self, constant: &mut &'tcx ty::LazyConst<'tcx>, _location: Location) {\n         *constant = self.renumber_regions(&*constant);\n     }\n "}, {"sha": "3681c3d74ebd1e91cc16cf7dd0862c06d4bee91e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -382,6 +382,11 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             constant, location\n         );\n \n+        let literal = match constant.literal {\n+            ty::LazyConst::Evaluated(lit) => lit,\n+            ty::LazyConst::Unevaluated(..) => return,\n+        };\n+\n         // FIXME(#46702) -- We need some way to get the predicates\n         // associated with the \"pre-evaluated\" form of the\n         // constant. For example, consider that the constant\n@@ -390,7 +395,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n         // constraints on `'a` and `'b`. These constraints\n         // would be lost if we just look at the normalized\n         // value.\n-        if let ty::FnDef(def_id, substs) = constant.literal.ty.sty {\n+        if let ty::FnDef(def_id, substs) = literal.ty.sty {\n             let tcx = self.tcx();\n             let type_checker = &mut self.cx;\n \n@@ -411,10 +416,10 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             );\n         }\n \n-        debug!(\"sanitize_constant: expected_ty={:?}\", constant.literal.ty);\n+        debug!(\"sanitize_constant: expected_ty={:?}\", literal.ty);\n \n         if let Err(terr) = self.cx.eq_types(\n-            constant.literal.ty,\n+            literal.ty,\n             constant.ty,\n             location.to_locations(),\n             ConstraintCategory::Boring,\n@@ -424,7 +429,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                 constant,\n                 \"constant {:?} should have type {:?} but has {:?} ({:?})\",\n                 constant,\n-                constant.literal.ty,\n+                literal.ty,\n                 constant.ty,\n                 terr,\n             );\n@@ -563,7 +568,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n             ProjectionElem::Subslice { from, to } => PlaceTy::Ty {\n                 ty: match base_ty.sty {\n                     ty::Array(inner, size) => {\n-                        let size = size.unwrap_usize(tcx);\n+                        let size = size.unwrap_evaluated().unwrap_usize(tcx);\n                         let min_size = (from as u64) + (to as u64);\n                         if let Some(rest_size) = size.checked_sub(min_size) {\n                             tcx.mk_array(inner, rest_size)"}, {"sha": "88c27a869c0892876da271f5bd5d49d9d0dc9f79", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -388,7 +388,7 @@ fn place_element_conflict<'a, 'gcx: 'tcx, 'tcx>(\n         (Place::Promoted(p1), Place::Promoted(p2)) => {\n             if p1.0 == p2.0 {\n                 if let ty::Array(_, size) = p1.1.sty {\n-                    if size.unwrap_usize(tcx) == 0 {\n+                    if size.unwrap_evaluated().unwrap_usize(tcx) == 0 {\n                         // Ignore conflicts with promoted [T; 0].\n                         debug!(\"place_element_conflict: IGNORE-LEN-0-PROMOTED\");\n                         return Overlap::Disjoint;"}, {"sha": "a66da50c484379cb0be70f52c1b946b23ffa6f77", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -270,11 +270,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             span: expr_span,\n                             ty: this.hir.tcx().types.u32,\n                             user_ty: None,\n-                            literal: ty::Const::from_bits(\n-                                this.hir.tcx(),\n-                                0,\n-                                ty::ParamEnv::empty().and(this.hir.tcx().types.u32),\n-                            ),\n+                            literal: this.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+                                ty::Const::from_bits(\n+                                    this.hir.tcx(),\n+                                    0,\n+                                    ty::ParamEnv::empty().and(this.hir.tcx().types.u32),\n+                                ),\n+                            )),\n                         }));\n                         box AggregateKind::Generator(closure_id, substs, movability)\n                     }"}, {"sha": "f601e38717f2d035d249cf931cb5ca29806f87ae", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -302,6 +302,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                     let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n+                    let method = self.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(method));\n \n                     // take the argument by reference\n                     let region_scope = self.topmost_scope();"}, {"sha": "0689dcfceea250d3bf844340963d5d75e81e648b", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             span,\n             ty,\n             user_ty: None,\n-            literal,\n+            literal: self.hir.tcx().intern_lazy_const(ty::LazyConst::Evaluated(literal)),\n         };\n         Operand::Constant(constant)\n     }"}, {"sha": "727b769cf4d4443931087f8ea7ef25e716fc81d7", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'gcx: 'tcx, 'tcx> MutVisitor<'tcx> for GlobalizeMir<'a, 'gcx> {\n         }\n     }\n \n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _: Location) {\n+    fn visit_const(&mut self, constant: &mut &'tcx ty::LazyConst<'tcx>, _: Location) {\n         if let Some(lifted) = self.tcx.lift(constant) {\n             *constant = lifted;\n         } else {"}, {"sha": "58a0f13733ea864c16b591fff27e45251c9f31bd", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -136,12 +136,14 @@ pub fn op_to_const<'tcx>(\n     };\n     Ok(ty::Const::from_const_value(ecx.tcx.tcx, val, op.layout.ty))\n }\n+\n pub fn const_to_op<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n-    cnst: &ty::Const<'tcx>,\n+    cnst: ty::LazyConst<'tcx>,\n+    ty: ty::Ty<'tcx>,\n ) -> EvalResult<'tcx, OpTy<'tcx>> {\n-    let op = ecx.const_value_to_op(cnst.val)?;\n-    Ok(OpTy { op, layout: ecx.layout_of(cnst.ty)? })\n+    let op = ecx.const_value_to_op(cnst)?;\n+    Ok(OpTy { op, layout: ecx.layout_of(ty)? })\n }\n \n fn eval_body_and_ecx<'a, 'mir, 'tcx>(\n@@ -514,7 +516,7 @@ pub fn const_field<'a, 'tcx>(\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n         // get the operand again\n-        let op = const_to_op(&ecx, value)?;\n+        let op = const_to_op(&ecx, ty::LazyConst::Evaluated(value), value.ty)?;\n         // downcast\n         let down = match variant {\n             None => op,\n@@ -541,7 +543,7 @@ pub fn const_variant_index<'a, 'tcx>(\n ) -> EvalResult<'tcx, VariantIdx> {\n     trace!(\"const_variant_index: {:?}, {:?}\", instance, val);\n     let ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n-    let op = const_to_op(&ecx, val)?;\n+    let op = const_to_op(&ecx, ty::LazyConst::Evaluated(val), val.ty)?;\n     Ok(ecx.read_discriminant(op)?.1)\n }\n "}, {"sha": "e2d0f6b0ae6255486891ba01a9bd8d8b263c7cc2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -356,7 +356,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n \n         hir::ExprKind::Lit(ref lit) => ExprKind::Literal {\n-            literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, false),\n+            literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                cx.const_eval_literal(&lit.node, expr_ty, lit.span, false)\n+            )),\n             user_ty: None,\n         },\n \n@@ -454,7 +456,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             } else {\n                 if let hir::ExprKind::Lit(ref lit) = arg.node {\n                     ExprKind::Literal {\n-                        literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n+                        literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                            cx.const_eval_literal(&lit.node, expr_ty, lit.span, true)\n+                        )),\n                         user_ty: None,\n                     }\n                 } else {\n@@ -711,24 +715,22 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         temp_lifetime,\n                         ty: var_ty,\n                         span: expr.span,\n-                        kind: ExprKind::Literal { literal, user_ty: None },\n+                        kind: ExprKind::Literal {\n+                            literal: cx.tcx.intern_lazy_const(literal),\n+                            user_ty: None\n+                        },\n                     }.to_ref();\n-                    let offset = mk_const(ty::Const::from_bits(\n+                    let offset = mk_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n                         cx.tcx,\n                         offset as u128,\n                         cx.param_env.and(var_ty),\n-                    ));\n+                    )));\n                     match did {\n                         Some(did) => {\n                             // in case we are offsetting from a computed discriminant\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = Substs::identity_for_item(cx.tcx(), did);\n-                            let lhs = mk_const(ty::Const::unevaluated(\n-                                cx.tcx(),\n-                                did,\n-                                substs,\n-                                var_ty,\n-                            ));\n+                            let lhs = mk_const(ty::LazyConst::Unevaluated(did, substs));\n                             let bin = ExprKind::Binary {\n                                 op: BinOp::Add,\n                                 lhs,\n@@ -868,7 +870,9 @@ fn method_callee<'a, 'gcx, 'tcx>(\n         ty,\n         span,\n         kind: ExprKind::Literal {\n-            literal: ty::Const::zero_sized(cx.tcx(), ty),\n+            literal: cx.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::zero_sized(cx.tcx(), ty)\n+            )),\n             user_ty,\n         },\n     }\n@@ -928,10 +932,10 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n-                literal: ty::Const::zero_sized(\n+                literal: cx.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::zero_sized(\n                     cx.tcx,\n                     cx.tables().node_id_to_type(expr.hir_id),\n-                ),\n+                ))),\n                 user_ty,\n             }\n         },\n@@ -941,12 +945,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"convert_path_expr: (const) user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n-                literal: ty::Const::unevaluated(\n-                    cx.tcx,\n-                    def_id,\n-                    substs,\n-                    cx.tables().node_id_to_type(expr.hir_id),\n-                ),\n+                literal: cx.tcx.intern_lazy_const(ty::LazyConst::Unevaluated(def_id, substs)),\n                 user_ty,\n             }\n         },"}, {"sha": "5681237c14b3e05e1e5b15c4a7c1c7ff5ffe401c", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -108,8 +108,8 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         self.tcx.types.usize\n     }\n \n-    pub fn usize_literal(&mut self, value: u64) -> &'tcx ty::Const<'tcx> {\n-        ty::Const::from_usize(self.tcx, value)\n+    pub fn usize_literal(&mut self, value: u64) -> &'tcx ty::LazyConst<'tcx> {\n+        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_usize(self.tcx, value)))\n     }\n \n     pub fn bool_ty(&mut self) -> Ty<'tcx> {\n@@ -120,12 +120,12 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         self.tcx.mk_unit()\n     }\n \n-    pub fn true_literal(&mut self) -> &'tcx ty::Const<'tcx> {\n-        ty::Const::from_bool(self.tcx, true)\n+    pub fn true_literal(&mut self) -> &'tcx ty::LazyConst<'tcx> {\n+        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, true)))\n     }\n \n-    pub fn false_literal(&mut self) -> &'tcx ty::Const<'tcx> {\n-        ty::Const::from_bool(self.tcx, false)\n+    pub fn false_literal(&mut self) -> &'tcx ty::LazyConst<'tcx> {\n+        self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bool(self.tcx, false)))\n     }\n \n     pub fn const_eval_literal("}, {"sha": "676b98457489f81d76bf62982e99cf35b926e7f2", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -9,7 +9,7 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::canonical::Canonical;\n use rustc::middle::region;\n use rustc::ty::subst::Substs;\n-use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty, Const, UserTypeAnnotation};\n+use rustc::ty::{AdtDef, UpvarSubsts, Region, Ty, Const, LazyConst, UserTypeAnnotation};\n use rustc::ty::layout::VariantIdx;\n use rustc::hir;\n use syntax::ast;\n@@ -288,7 +288,7 @@ pub enum ExprKind<'tcx> {\n         movability: Option<hir::GeneratorMovability>,\n     },\n     Literal {\n-        literal: &'tcx Const<'tcx>,\n+        literal: &'tcx LazyConst<'tcx>,\n         user_ty: Option<Canonical<'tcx, UserTypeAnnotation<'tcx>>>,\n     },\n     InlineAsm {"}, {"sha": "176c2f6564361ad8daf027179e6b75647f23e6a1", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -635,7 +635,7 @@ fn all_constructors<'a, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n             }).collect()\n         }\n         ty::Array(ref sub_ty, len) if len.assert_usize(cx.tcx).is_some() => {\n-            let len = len.unwrap_usize(cx.tcx);\n+            let len = len.unwrap_evaluated().unwrap_usize(cx.tcx);\n             if len != 0 && cx.is_uninhabited(sub_ty) {\n                 vec![]\n             } else {\n@@ -1310,7 +1310,7 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n             )]),\n         PatternKind::Array { .. } => match pcx.ty.sty {\n             ty::Array(_, length) => Some(vec![\n-                Slice(length.unwrap_usize(cx.tcx))\n+                Slice(length.unwrap_evaluated().unwrap_usize(cx.tcx))\n             ]),\n             _ => span_bug!(pat.span, \"bad ty {:?} for array pattern\", pcx.ty)\n         },\n@@ -1751,23 +1751,23 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                     // necessarily point to memory, they are usually just integers. The only time\n                     // they should be pointing to memory is when they are subslices of nonzero\n                     // slices\n-                    let (opt_ptr, n, ty) = match (value.val, &value.ty.sty) {\n-                        (ConstValue::ByRef(id, alloc, offset), ty::TyKind::Array(t, n)) => (\n-                            Some((\n-                                Pointer::new(id, offset),\n-                                alloc,\n-                            )),\n-                            n.unwrap_usize(cx.tcx),\n-                            t,\n-                        ),\n-                        (ConstValue::ScalarPair(ptr, n), ty::TyKind::Slice(t)) => (\n-                            ptr.to_ptr().ok().map(|ptr| (\n-                                ptr,\n-                                cx.tcx.alloc_map.lock().unwrap_memory(ptr.alloc_id),\n-                            )),\n-                            n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64,\n-                            t,\n-                        ),\n+                    let (opt_ptr, n, ty) = match value.ty.builtin_deref(false).unwrap().ty.sty {\n+                        ty::TyKind::Array(t, n) =>\n+                            (value.to_ptr(), n.unwrap_evaluated().unwrap_usize(cx.tcx), t),\n+                        ty::TyKind::Slice(t) => {\n+                            match value.val {\n+                                ConstValue::ScalarPair(ptr, n) => (\n+                                    ptr.to_ptr().ok(),\n+                                    n.to_bits(cx.tcx.data_layout.pointer_size).unwrap() as u64,\n+                                    t,\n+                                ),\n+                                _ => span_bug!(\n+                                    pat.span,\n+                                    \"slice pattern constant must be scalar pair but is {:?}\",\n+                                    value,\n+                                ),\n+                            }\n+                        },\n                         _ => span_bug!(\n                             pat.span,\n                             \"unexpected const-val {:?} with ctor {:?}\","}, {"sha": "d7eeaf43651027edd34ba2f1721b0cfecae3c790", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -650,7 +650,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n             ty::Array(_, len) => {\n                 // fixed-length array\n-                let len = len.unwrap_usize(self.tcx);\n+                let len = len.unwrap_evaluated().unwrap_usize(self.tcx);\n                 assert!(len >= prefix.len() as u64 + suffix.len() as u64);\n                 PatternKind::Array { prefix: prefix, slice: slice, suffix: suffix }\n             }\n@@ -934,7 +934,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n             }\n             ty::Array(_, n) => {\n                 PatternKind::Array {\n-                    prefix: (0..n.unwrap_usize(self.tcx))\n+                    prefix: (0..n.unwrap_evaluated().unwrap_usize(self.tcx))\n                         .map(|i| adt_subpattern(i as usize, None))\n                         .collect(),\n                     slice: None,"}, {"sha": "37c5340e0a26c1a3572c1059f5ebf5a7f984e0d7", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                 // u64 cast is from usize to u64, which is always good\n                 let val = Immediate::new_slice(\n                     ptr,\n-                    length.unwrap_usize(self.tcx.tcx),\n+                    length.unwrap_evaluated().unwrap_usize(self.tcx.tcx),\n                     self,\n                 );\n                 self.write_immediate(val, dest)"}, {"sha": "04e0955ad617263f3dcbbaf3c4ead5dcfbbed905", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -3,7 +3,7 @@\n \n use std::convert::TryInto;\n \n-use rustc::mir;\n+use rustc::{mir, ty};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout, HasDataLayout, IntegerExt, VariantIdx};\n \n use rustc::mir::interpret::{\n@@ -517,7 +517,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n                     let ty = self.monomorphize(mir_op.ty(self.mir(), *self.tcx), self.substs());\n                     self.layout_of(ty)\n                 })?;\n-                let op = self.const_value_to_op(constant.literal.val)?;\n+                let op = self.const_value_to_op(*constant.literal)?;\n                 OpTy { op, layout }\n             }\n         };\n@@ -540,17 +540,20 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     // `eval_operand`, ideally).\n     pub(crate) fn const_value_to_op(\n         &self,\n-        val: ConstValue<'tcx>,\n+        val: ty::LazyConst<'tcx>,\n     ) -> EvalResult<'tcx, Operand<M::PointerTag>> {\n         trace!(\"const_value_to_op: {:?}\", val);\n-        match val {\n-            ConstValue::Unevaluated(def_id, substs) => {\n+        let val = match val {\n+            ty::LazyConst::Unevaluated(def_id, substs) => {\n                 let instance = self.resolve(def_id, substs)?;\n-                Ok(*OpTy::from(self.const_eval_raw(GlobalId {\n+                return Ok(*OpTy::from(self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: None,\n-                })?))\n-            }\n+                })?));\n+            },\n+            ty::LazyConst::Evaluated(c) => c,\n+        };\n+        match val.val {\n             ConstValue::ByRef(id, alloc, offset) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes\n                 // where none should happen -- and for `static mut`, we copy on demand anyway."}, {"sha": "757f94f2076acd3117cc16e4b976c72dc7be962a", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 40, "deletions": 35, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -381,7 +381,7 @@ fn collect_items_rec<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             let param_env = ty::ParamEnv::reveal_all();\n \n             if let Ok(val) = tcx.const_eval(param_env.and(cid)) {\n-                collect_const(tcx, val, instance.substs, &mut neighbors);\n+                collect_const(tcx, val, &mut neighbors);\n             }\n         }\n         MonoItem::Fn(instance) => {\n@@ -583,10 +583,10 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n-    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n+    fn visit_const(&mut self, constant: &&'tcx ty::LazyConst<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n-        collect_const(self.tcx, constant, self.param_substs, self.output);\n+        collect_lazy_const(self.tcx, constant, self.param_substs, self.output);\n \n         self.super_const(constant);\n     }\n@@ -987,7 +987,7 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n                 let param_env = ty::ParamEnv::reveal_all();\n \n                 if let Ok(val) = self.tcx.const_eval(param_env.and(cid)) {\n-                    collect_const(self.tcx, val, instance.substs, &mut self.output);\n+                    collect_const(self.tcx, val, &mut self.output);\n                 }\n             }\n             hir::ItemKind::Fn(..) => {\n@@ -1198,7 +1198,7 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             promoted: Some(i),\n         };\n         match tcx.const_eval(param_env.and(cid)) {\n-            Ok(val) => collect_const(tcx, val, instance.substs, output),\n+            Ok(val) => collect_const(tcx, val, output),\n             Err(ErrorHandled::Reported) => {},\n             Err(ErrorHandled::TooGeneric) => span_bug!(\n                 mir.promoted[i].span, \"collection encountered polymorphic constant\",\n@@ -1216,43 +1216,48 @@ fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     output\n }\n \n+fn collect_lazy_const<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    constant: &ty::LazyConst<'tcx>,\n+    param_substs: &'tcx Substs<'tcx>,\n+    output: &mut Vec<MonoItem<'tcx>>,\n+) {\n+    let (def_id, substs) = match *constant {\n+        ty::LazyConst::Evaluated(c) => return collect_const(tcx, c, output),\n+        ty::LazyConst::Unevaluated(did, substs) => (did, substs),\n+    };\n+    let param_env = ty::ParamEnv::reveal_all();\n+    let substs = tcx.subst_and_normalize_erasing_regions(\n+        param_substs,\n+        param_env,\n+        &substs,\n+    );\n+    let instance = ty::Instance::resolve(tcx,\n+                                        param_env,\n+                                        def_id,\n+                                        substs).unwrap();\n+\n+    let cid = GlobalId {\n+        instance,\n+        promoted: None,\n+    };\n+    match tcx.const_eval(param_env.and(cid)) {\n+        Ok(val) => collect_const(tcx, val, output),\n+        Err(ErrorHandled::Reported) => {},\n+        Err(ErrorHandled::TooGeneric) => span_bug!(\n+            tcx.def_span(def_id), \"collection encountered polymorphic constant\",\n+        ),\n+    }\n+}\n+\n fn collect_const<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     constant: &ty::Const<'tcx>,\n-    param_substs: &'tcx Substs<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     debug!(\"visiting const {:?}\", *constant);\n \n-    let val = match constant.val {\n-        ConstValue::Unevaluated(def_id, substs) => {\n-            let param_env = ty::ParamEnv::reveal_all();\n-            let substs = tcx.subst_and_normalize_erasing_regions(\n-                param_substs,\n-                param_env,\n-                &substs,\n-            );\n-            let instance = ty::Instance::resolve(tcx,\n-                                                param_env,\n-                                                def_id,\n-                                                substs).unwrap();\n-\n-            let cid = GlobalId {\n-                instance,\n-                promoted: None,\n-            };\n-            match tcx.const_eval(param_env.and(cid)) {\n-                Ok(val) => val.val,\n-                Err(ErrorHandled::Reported) => return,\n-                Err(ErrorHandled::TooGeneric) => span_bug!(\n-                    tcx.def_span(def_id), \"collection encountered polymorphic constant\",\n-                ),\n-            }\n-        },\n-        _ => constant.val,\n-    };\n-    match val {\n-        ConstValue::Unevaluated(..) => bug!(\"const eval yielded unevaluated const\"),\n+    match constant.val {\n         ConstValue::ScalarPair(Scalar::Ptr(a), Scalar::Ptr(b)) => {\n             collect_miri(tcx, a.alloc_id, output);\n             collect_miri(tcx, b.alloc_id, output);"}, {"sha": "8cd8eb3ad64c25660c226b29c793bf0086acde9b", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -295,7 +295,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             ty::Array(inner_type, len) => {\n                 output.push('[');\n                 self.push_type_name(inner_type, output);\n-                write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n+                write!(output, \"; {}\", len.unwrap_evaluated().unwrap_usize(self.tcx)).unwrap();\n                 output.push(']');\n             },\n             ty::Slice(inner_type) => {"}, {"sha": "835a5dede742fbb82cff6c7ed507f394f99212bb", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -318,7 +318,7 @@ fn build_clone_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     match self_ty.sty {\n         _ if is_copy => builder.copy_shim(),\n         ty::Array(ty, len) => {\n-            let len = len.unwrap_usize(tcx);\n+            let len = len.unwrap_evaluated().unwrap_usize(tcx);\n             builder.array_shim(dest, src, ty, len)\n         }\n         ty::Closure(def_id, substs) => {\n@@ -459,7 +459,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: func_ty,\n             user_ty: None,\n-            literal: ty::Const::zero_sized(self.tcx, func_ty),\n+            literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::zero_sized(self.tcx, func_ty),\n+            )),\n         });\n \n         let ref_loc = self.make_place(\n@@ -519,7 +521,9 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: self.tcx.types.usize,\n             user_ty: None,\n-            literal: ty::Const::from_usize(self.tcx, value),\n+            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::from_usize(self.tcx, value),\n+            )),\n         }\n     }\n \n@@ -755,7 +759,9 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 span,\n                 ty,\n                 user_ty: None,\n-                literal: ty::Const::zero_sized(tcx, ty),\n+                literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                    ty::Const::zero_sized(tcx, ty)\n+                )),\n              }),\n              vec![rcvr])\n         }"}, {"sha": "a2a416e54d8caefed75da389118bb0eddd14d4f7", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -255,7 +255,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         source_info: SourceInfo,\n     ) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = source_info.span;\n-        match const_to_op(&self.ecx, c.literal) {\n+        match const_to_op(&self.ecx, *c.literal, c.ty) {\n             Ok(op) => {\n                 Some((op, c.span))\n             },"}, {"sha": "06e16de8b43bcd0130718f1f9cba6442cd1d5c0e", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -533,7 +533,9 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             span,\n             ty: self.tcx.types.bool,\n             user_ty: None,\n-            literal: ty::Const::from_bool(self.tcx, val),\n+            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::from_bool(self.tcx, val),\n+            )),\n         })))\n     }\n "}, {"sha": "b464b7d65e4661b614e9ede69093bf3843eb2a10", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> MutVisitor<'tcx> for EraseRegionsVisitor<'a, 'tcx> {\n         *region = self.tcx.types.re_erased;\n     }\n \n-    fn visit_const(&mut self, constant: &mut &'tcx ty::Const<'tcx>, _: Location) {\n+    fn visit_const(&mut self, constant: &mut &'tcx ty::LazyConst<'tcx>, _: Location) {\n         *constant = self.tcx.erase_regions(constant);\n     }\n "}, {"sha": "808c3aad2920102dc155af6a38cadb1535d1d1db", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -171,11 +171,11 @@ impl<'a, 'tcx> TransformVisitor<'a, 'tcx> {\n             span: source_info.span,\n             ty: self.tcx.types.u32,\n             user_ty: None,\n-            literal: ty::Const::from_bits(\n+            literal: self.tcx.intern_lazy_const(ty::LazyConst::Evaluated(ty::Const::from_bits(\n                 self.tcx,\n                 state_disc.into(),\n                 ty::ParamEnv::empty().and(self.tcx.types.u32)\n-            ),\n+            ))),\n         });\n         Statement {\n             source_info,\n@@ -717,7 +717,9 @@ fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             span: mir.span,\n             ty: tcx.types.bool,\n             user_ty: None,\n-            literal: ty::Const::from_bool(tcx, false),\n+            literal: tcx.intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::from_bool(tcx, false),\n+            )),\n         }),\n         expected: true,\n         msg: message,"}, {"sha": "209c26a0c6c4636312e2570c7fbb92a2f0b54bc7", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -11,7 +11,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::mir::interpret::ConstValue;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;\n@@ -625,20 +624,20 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 }\n             }\n             Operand::Constant(ref constant) => {\n-                if let ConstValue::Unevaluated(def_id, _) = constant.literal.val {\n+                if let ty::LazyConst::Unevaluated(def_id, _) = constant.literal {\n                     // Don't peek inside trait associated constants.\n-                    if self.tcx.trait_of_item(def_id).is_some() {\n-                        self.add_type(constant.literal.ty);\n+                    if self.tcx.trait_of_item(*def_id).is_some() {\n+                        self.add_type(constant.ty);\n                     } else {\n-                        let (bits, _) = self.tcx.at(constant.span).mir_const_qualif(def_id);\n+                        let (bits, _) = self.tcx.at(constant.span).mir_const_qualif(*def_id);\n \n                         let qualif = Qualif::from_bits(bits).expect(\"invalid mir_const_qualif\");\n                         self.add(qualif);\n \n                         // Just in case the type is more specific than\n                         // the definition, e.g., impl associated const\n                         // with type parameters, take it into account.\n-                        self.qualif.restrict(constant.literal.ty, self.tcx, self.param_env);\n+                        self.qualif.restrict(constant.ty, self.tcx, self.param_env);\n                     }\n                 }\n             }\n@@ -713,7 +712,8 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                     } else if let ty::Array(_, len) = ty.sty {\n                         // FIXME(eddyb) the `self.mode == Mode::Fn` condition\n                         // seems unnecessary, given that this is merely a ZST.\n-                        if len.unwrap_usize(self.tcx) == 0 && self.mode == Mode::Fn {\n+                        let len = len.unwrap_evaluated().unwrap_usize(self.tcx);\n+                        if len == 0 && self.mode == Mode::Fn {\n                             forbidden_mut = false;\n                         }\n                     }"}, {"sha": "1d5bc4f9cc31b7a6dbe8baf9cd40ce392b3c565a", "filename": "src/librustc_mir/transform/simplify_branches.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_branches.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1,6 +1,6 @@\n //! A pass that simplifies branches when their condition is known.\n \n-use rustc::ty::{TyCtxt, ParamEnv};\n+use rustc::ty::{self, TyCtxt, ParamEnv};\n use rustc::mir::*;\n use transform::{MirPass, MirSource};\n \n@@ -30,23 +30,28 @@ impl MirPass for SimplifyBranches {\n                     discr: Operand::Constant(ref c), switch_ty, ref values, ref targets, ..\n                 } => {\n                     let switch_ty = ParamEnv::empty().and(switch_ty);\n-                    if let Some(constint) = c.literal.assert_bits(tcx, switch_ty) {\n-                        let (otherwise, targets) = targets.split_last().unwrap();\n-                        let mut ret = TerminatorKind::Goto { target: *otherwise };\n-                        for (&v, t) in values.iter().zip(targets.iter()) {\n-                            if v == constint {\n-                                ret = TerminatorKind::Goto { target: *t };\n-                                break;\n+                    if let ty::LazyConst::Evaluated(c) = c.literal {\n+                        let c = c.assert_bits(tcx, switch_ty);\n+                        if let Some(constant) = c {\n+                            let (otherwise, targets) = targets.split_last().unwrap();\n+                            let mut ret = TerminatorKind::Goto { target: *otherwise };\n+                            for (&v, t) in values.iter().zip(targets.iter()) {\n+                                if v == constant {\n+                                    ret = TerminatorKind::Goto { target: *t };\n+                                    break;\n+                                }\n                             }\n+                            ret\n+                        } else {\n+                            continue\n                         }\n-                        ret\n                     } else {\n                         continue\n                     }\n                 },\n                 TerminatorKind::Assert {\n                     target, cond: Operand::Constant(ref c), expected, ..\n-                } if (c.literal.assert_bool(tcx) == Some(true)) == expected => {\n+                } if (c.literal.unwrap_evaluated().assert_bool(tcx) == Some(true)) == expected => {\n                     TerminatorKind::Goto { target }\n                 },\n                 TerminatorKind::FalseEdges { real_target, .. } => {"}, {"sha": "172993daa9a1c18d89bb216dbd3d7802cfc0c9dd", "filename": "src/librustc_mir/transform/uniform_array_move_out.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Funiform_array_move_out.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UniformArrayMoveOutVisitor<'a, 'tcx> {\n                 } else {\n                     let place_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n                     if let ty::Array(item_ty, const_size) = place_ty.sty {\n-                        if let Some(size) = const_size.assert_usize(self.tcx) {\n+                        if let Some(size) = const_size.unwrap_evaluated().assert_usize(self.tcx) {\n                             assert!(size <= u32::max_value() as u64,\n                                     \"uniform array move out doesn't supported\n                                      for array bigger then u32\");\n@@ -193,7 +193,7 @@ impl MirPass for RestoreSubsliceArrayMoveOut {\n                         let opt_size = opt_src_place.and_then(|src_place| {\n                             let src_ty = src_place.ty(mir, tcx).to_ty(tcx);\n                             if let ty::Array(_, ref size_o) = src_ty.sty {\n-                                size_o.assert_usize(tcx)\n+                                size_o.unwrap_evaluated().assert_usize(tcx)\n                             } else {\n                                 None\n                             }"}, {"sha": "221c2d55eec970f00edfaef345c4965828faad21", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -809,7 +809,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n             ty::Array(ety, size) => {\n-                let size = size.assert_usize(self.tcx());\n+                let size = size.unwrap_evaluated().assert_usize(self.tcx());\n                 self.open_drop_for_array(ety, size)\n             },\n             ty::Slice(ety) => self.open_drop_for_array(ety, None),\n@@ -963,7 +963,9 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             span: self.source_info.span,\n             ty: self.tcx().types.usize,\n             user_ty: None,\n-            literal: ty::Const::from_usize(self.tcx(), val.into()),\n+            literal: self.tcx().intern_lazy_const(ty::LazyConst::Evaluated(\n+                ty::Const::from_usize(self.tcx(), val.into())\n+            )),\n         })\n     }\n "}, {"sha": "fca208b340d2ac5e8a240eb557a17a1246b652d5", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -399,12 +399,21 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n         self.push(&format!(\"+ literal: {:?}\", literal));\n     }\n \n-    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n+    fn visit_const(&mut self, constant: &&'tcx ty::LazyConst<'tcx>, _: Location) {\n         self.super_const(constant);\n-        let ty::Const { ty, val, .. } = constant;\n-        self.push(\"ty::Const\");\n-        self.push(&format!(\"+ ty: {:?}\", ty));\n-        self.push(&format!(\"+ val: {:?}\", val));\n+        match constant {\n+            ty::LazyConst::Evaluated(constant) => {\n+                let ty::Const { ty, val, .. } = constant;\n+                self.push(\"ty::Const\");\n+                self.push(&format!(\"+ ty: {:?}\", ty));\n+                self.push(&format!(\"+ val: {:?}\", val));\n+            },\n+            ty::LazyConst::Unevaluated(did, substs) => {\n+                self.push(\"ty::LazyConst::Unevaluated\");\n+                self.push(&format!(\"+ did: {:?}\", did));\n+                self.push(&format!(\"+ substs: {:?}\", substs));\n+            },\n+        }\n     }\n \n     fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {"}, {"sha": "71f4945fd648df3f7f51096e3a70883a83e6766d", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -239,7 +239,7 @@ fn wf_clause_for_slice<'tcx>(tcx: ty::TyCtxt<'_, '_, 'tcx>) -> Clauses<'tcx> {\n \n fn wf_clause_for_array<'tcx>(\n     tcx: ty::TyCtxt<'_, '_, 'tcx>,\n-    length: &'tcx ty::Const<'tcx>\n+    length: &'tcx ty::LazyConst<'tcx>\n ) -> Clauses<'tcx> {\n     let ty = generic_types::bound(tcx, 0);\n     let array_ty = tcx.mk_ty(ty::Array(ty, length));"}, {"sha": "e018aa3b26d91c985e3c2311a950651b78e55b54", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -1772,7 +1772,8 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             hir::TyKind::Array(ref ty, ref length) => {\n                 let length_def_id = tcx.hir().local_def_id(length.id);\n                 let substs = Substs::identity_for_item(tcx, length_def_id);\n-                let length = ty::Const::unevaluated(tcx, length_def_id, substs, tcx.types.usize);\n+                let length = ty::LazyConst::Unevaluated(length_def_id, substs);\n+                let length = tcx.intern_lazy_const(length);\n                 let array_ty = tcx.mk_ty(ty::Array(self.ast_ty_to_ty(&ty), length));\n                 self.normalize_ty(ast_ty.span, array_ty)\n             }"}, {"sha": "13311a2efd5a3eb6e3efd4b2958e0ce049d8fd93", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -377,7 +377,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 let expected_ty = self.structurally_resolved_type(pat.span, expected);\n                 let (inner_ty, slice_ty) = match expected_ty.sty {\n                     ty::Array(inner_ty, size) => {\n-                        let size = size.unwrap_usize(tcx);\n+                        let size = size.unwrap_evaluated().unwrap_usize(tcx);\n                         let min_len = before.len() as u64 + after.len() as u64;\n                         if slice.is_none() {\n                             if min_len != size {"}, {"sha": "d664eed0a34832c52d6e4f58b2f938a2fba90a6c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -3453,7 +3453,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     }\n                     ty::Array(_, len) => {\n                         if let (Some(len), Ok(user_index)) = (\n-                            len.assert_usize(self.tcx),\n+                            len.unwrap_evaluated().assert_usize(self.tcx),\n                             field.as_str().parse::<u64>()\n                         ) {\n                             let base = self.tcx.sess.source_map()\n@@ -4442,7 +4442,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if element_ty.references_error() {\n                     tcx.types.err\n                 } else if let Ok(count) = count {\n-                    tcx.mk_ty(ty::Array(t, count))\n+                    tcx.mk_ty(ty::Array(t, tcx.intern_lazy_const(ty::LazyConst::Evaluated(count))))\n                 } else {\n                     tcx.types.err\n                 }"}, {"sha": "3aa752b35adcf5c45275f9c1edb7efcd45176380", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b903cb9d6001bf6c199f15ffc0c61fdad802f328/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b903cb9d6001bf6c199f15ffc0c61fdad802f328", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n use rustc::infer::region_constraints::{RegionConstraintData, Constraint};\n-use rustc::mir::interpret::ConstValue;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::middle::stability;\n@@ -2420,10 +2419,10 @@ impl Clean<Type> for hir::Ty {\n                     instance: ty::Instance::new(def_id, substs),\n                     promoted: None\n                 };\n-                let length = cx.tcx.const_eval(param_env.and(cid)).unwrap_or_else(|_| {\n-                    ty::Const::unevaluated(cx.tcx, def_id, substs, cx.tcx.types.usize)\n-                });\n-                let length = print_const(cx, length);\n+                let length = match cx.tcx.const_eval(param_env.and(cid)) {\n+                    Ok(length) => print_const(cx, ty::LazyConst::Evaluated(length)),\n+                    Err(_) => \"_\".to_string(),\n+                };\n                 Array(box ty.clean(cx), length)\n             },\n             TyKind::Tup(ref tys) => Tuple(tys.clean(cx)),\n@@ -2583,15 +2582,15 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Str => Primitive(PrimitiveType::Str),\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n-                let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n-                if let ConstValue::Unevaluated(def_id, substs) = n.val {\n+                let mut n = *cx.tcx.lift(&n).expect(\"array lift failed\");\n+                if let ty::LazyConst::Unevaluated(def_id, substs) = n {\n                     let param_env = cx.tcx.param_env(def_id);\n                     let cid = GlobalId {\n                         instance: ty::Instance::new(def_id, substs),\n                         promoted: None\n                     };\n                     if let Ok(new_n) = cx.tcx.const_eval(param_env.and(cid)) {\n-                        n = new_n;\n+                        n = ty::LazyConst::Evaluated(new_n);\n                     }\n                 };\n                 let n = print_const(cx, n);\n@@ -3691,16 +3690,16 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     }\n }\n \n-fn print_const(cx: &DocContext, n: &ty::Const) -> String {\n-    match n.val {\n-        ConstValue::Unevaluated(def_id, _) => {\n+fn print_const(cx: &DocContext, n: ty::LazyConst) -> String {\n+    match n {\n+        ty::LazyConst::Unevaluated(def_id, _) => {\n             if let Some(node_id) = cx.tcx.hir().as_local_node_id(def_id) {\n                 print_const_expr(cx, cx.tcx.hir().body_owned_by(node_id))\n             } else {\n                 inline::print_inlined_const(cx, def_id)\n             }\n         },\n-        _ => {\n+        ty::LazyConst::Evaluated(n) => {\n             let mut s = String::new();\n             ::rustc::mir::fmt_const_val(&mut s, n).expect(\"fmt_const_val failed\");\n             // array lengths are obviously usize"}]}