{"sha": "8e8fd024198a059b759ae8472d6a29ba6a206b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOGZkMDI0MTk4YTA1OWI3NTlhZTg0NzJkNmEyOWJhNmEyMDZiMDE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-05T22:32:54Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-07-08T06:55:55Z"}, "message": "Factorize some macros in iter/range.rs", "tree": {"sha": "2d0a06950cb5e4888a564e062d0ba22d4ea0425b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d0a06950cb5e4888a564e062d0ba22d4ea0425b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e8fd024198a059b759ae8472d6a29ba6a206b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fd024198a059b759ae8472d6a29ba6a206b01", "html_url": "https://github.com/rust-lang/rust/commit/8e8fd024198a059b759ae8472d6a29ba6a206b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e8fd024198a059b759ae8472d6a29ba6a206b01/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f", "html_url": "https://github.com/rust-lang/rust/commit/d1ec6c22d1895eb42fbf20bd9b577b6a721c6b5f"}], "stats": {"total": 85, "additions": 28, "deletions": 57}, "files": [{"sha": "983101919129143626653472f7cef9f3bb9b913b", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 28, "deletions": 57, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/8e8fd024198a059b759ae8472d6a29ba6a206b01/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e8fd024198a059b759ae8472d6a29ba6a206b01/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=8e8fd024198a059b759ae8472d6a29ba6a206b01", "patch": "@@ -42,6 +42,31 @@ pub trait Step: PartialOrd + Sized {\n     fn sub_one(&self) -> Self;\n }\n \n+// These are still macro-generated because the integer literals resolve to different types.\n+macro_rules! step_identical_methods {\n+    () => {\n+        #[inline]\n+        fn replace_one(&mut self) -> Self {\n+            mem::replace(self, 1)\n+        }\n+\n+        #[inline]\n+        fn replace_zero(&mut self) -> Self {\n+            mem::replace(self, 0)\n+        }\n+\n+        #[inline]\n+        fn add_one(&self) -> Self {\n+            Add::add(*self, 1)\n+        }\n+\n+        #[inline]\n+        fn sub_one(&self) -> Self {\n+            Sub::sub(*self, 1)\n+        }\n+    }\n+}\n+\n macro_rules! step_impl_unsigned {\n     ($($t:ty)*) => ($(\n         #[unstable(feature = \"step_trait\",\n@@ -59,25 +84,7 @@ macro_rules! step_impl_unsigned {\n                 }\n             }\n \n-            #[inline]\n-            fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 1)\n-            }\n-\n-            #[inline]\n-            fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 0)\n-            }\n-\n-            #[inline]\n-            fn add_one(&self) -> Self {\n-                Add::add(*self, 1)\n-            }\n-\n-            #[inline]\n-            fn sub_one(&self) -> Self {\n-                Sub::sub(*self, 1)\n-            }\n+            step_identical_methods!();\n         }\n     )*)\n }\n@@ -100,25 +107,7 @@ macro_rules! step_impl_signed {\n                 }\n             }\n \n-            #[inline]\n-            fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 1)\n-            }\n-\n-            #[inline]\n-            fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 0)\n-            }\n-\n-            #[inline]\n-            fn add_one(&self) -> Self {\n-                Add::add(*self, 1)\n-            }\n-\n-            #[inline]\n-            fn sub_one(&self) -> Self {\n-                Sub::sub(*self, 1)\n-            }\n+            step_identical_methods!();\n         }\n     )*)\n }\n@@ -134,25 +123,7 @@ macro_rules! step_impl_no_between {\n                 None\n             }\n \n-            #[inline]\n-            fn replace_one(&mut self) -> Self {\n-                mem::replace(self, 1)\n-            }\n-\n-            #[inline]\n-            fn replace_zero(&mut self) -> Self {\n-                mem::replace(self, 0)\n-            }\n-\n-            #[inline]\n-            fn add_one(&self) -> Self {\n-                Add::add(*self, 1)\n-            }\n-\n-            #[inline]\n-            fn sub_one(&self) -> Self {\n-                Sub::sub(*self, 1)\n-            }\n+            step_identical_methods!();\n         }\n     )*)\n }"}]}