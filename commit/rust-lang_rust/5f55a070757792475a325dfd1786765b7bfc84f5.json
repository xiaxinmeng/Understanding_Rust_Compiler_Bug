{"sha": "5f55a070757792475a325dfd1786765b7bfc84f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNTVhMDcwNzU3NzkyNDc1YTMyNWRmZDE3ODY3NjViN2JmYzg0ZjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T15:15:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-03-05T15:15:53Z"}, "message": "auto merge of #5237 : thestinger/rust/iter, r=nikomatsakis", "tree": {"sha": "824093025b9f48f1c323238534425607e8831a5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/824093025b9f48f1c323238534425607e8831a5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f55a070757792475a325dfd1786765b7bfc84f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f55a070757792475a325dfd1786765b7bfc84f5", "html_url": "https://github.com/rust-lang/rust/commit/5f55a070757792475a325dfd1786765b7bfc84f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f55a070757792475a325dfd1786765b7bfc84f5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ec7f3fa2252261b647c99ead9d6ebec0b959e05", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ec7f3fa2252261b647c99ead9d6ebec0b959e05", "html_url": "https://github.com/rust-lang/rust/commit/9ec7f3fa2252261b647c99ead9d6ebec0b959e05"}, {"sha": "17b5a14c4ca09656eb9105424b3f919182126895", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b5a14c4ca09656eb9105424b3f919182126895", "html_url": "https://github.com/rust-lang/rust/commit/17b5a14c4ca09656eb9105424b3f919182126895"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "bb9eb1e6e690755dec3c11c7e7e5c1185c412c90", "filename": "src/libcore/trie.rs", "status": "modified", "additions": 91, "deletions": 12, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/5f55a070757792475a325dfd1786765b7bfc84f5/src%2Flibcore%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f55a070757792475a325dfd1786765b7bfc84f5/src%2Flibcore%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftrie.rs?ref=5f55a070757792475a325dfd1786765b7bfc84f5", "patch": "@@ -32,7 +32,7 @@ impl<T> BaseIter<(uint, &T)> for TrieMap<T> {\n     /// Visit all key-value pairs in order\n     #[inline(always)]\n     pure fn each(&self, f: fn(&(uint, &self/T)) -> bool) {\n-        self.root.each(f)\n+        self.root.each(f);\n     }\n     #[inline(always)]\n     pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n@@ -42,7 +42,7 @@ impl<T> ReverseIter<(uint, &T)> for TrieMap<T> {\n     /// Visit all key-value pairs in reverse order\n     #[inline(always)]\n     pure fn each_reverse(&self, f: fn(&(uint, &self/T)) -> bool) {\n-        self.root.each_reverse(f)\n+        self.root.each_reverse(f);\n     }\n }\n \n@@ -149,7 +149,7 @@ impl<T> TrieMap<T> {\n \n     /// Iterate over the map and mutate the contained values\n     fn mutate_values(&mut self, f: fn(uint, &mut T) -> bool) {\n-        self.root.mutate_values(f)\n+        self.root.mutate_values(f);\n     }\n }\n \n@@ -217,34 +217,39 @@ impl<T: Copy> TrieNode<T> {\n }\n \n impl<T> TrieNode<T> {\n-    pure fn each(&self, f: fn(&(uint, &self/T)) -> bool) {\n+    pure fn each(&self, f: fn(&(uint, &self/T)) -> bool) -> bool {\n         for uint::range(0, self.children.len()) |idx| {\n             match self.children[idx] {\n-                Internal(ref x) => x.each(f),\n-                External(k, ref v) => if !f(&(k, v)) { return },\n+                Internal(ref x) => if !x.each(f) { return false },\n+                External(k, ref v) => if !f(&(k, v)) { return false },\n                 Nothing => ()\n             }\n         }\n+        true\n     }\n \n-    pure fn each_reverse(&self, f: fn(&(uint, &self/T)) -> bool) {\n+    pure fn each_reverse(&self, f: fn(&(uint, &self/T)) -> bool) -> bool {\n         for uint::range_rev(self.children.len(), 0) |idx| {\n             match self.children[idx - 1] {\n-                Internal(ref x) => x.each(f),\n-                External(k, ref v) => if !f(&(k, v)) { return },\n+                Internal(ref x) => if !x.each_reverse(f) { return false },\n+                External(k, ref v) => if !f(&(k, v)) { return false },\n                 Nothing => ()\n             }\n         }\n+        true\n     }\n \n-    fn mutate_values(&mut self, f: fn(uint, &mut T) -> bool) {\n+    fn mutate_values(&mut self, f: fn(uint, &mut T) -> bool) -> bool {\n         for vec::each_mut(self.children) |child| {\n             match *child {\n-                Internal(ref mut x) => x.mutate_values(f),\n-                External(k, ref mut v) => if !f(k, v) { return },\n+                Internal(ref mut x) => if !x.mutate_values(f) {\n+                    return false\n+                },\n+                External(k, ref mut v) => if !f(k, v) { return false },\n                 Nothing => ()\n             }\n         }\n+        true\n     }\n }\n \n@@ -366,4 +371,78 @@ mod tests {\n             check_integrity(&trie.root);\n         }\n     }\n+\n+    #[test]\n+    fn test_each() {\n+        let mut m = TrieMap::new();\n+\n+        assert m.insert(3, 6);\n+        assert m.insert(0, 0);\n+        assert m.insert(4, 8);\n+        assert m.insert(2, 4);\n+        assert m.insert(1, 2);\n+\n+        let mut n = 0;\n+        for m.each |&(k, v)| {\n+            assert k == n;\n+            assert *v == n * 2;\n+            n += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_each_break() {\n+        let mut m = TrieMap::new();\n+\n+        for uint::range_rev(uint::max_value, uint::max_value - 10000) |x| {\n+            m.insert(x, x / 2);\n+        }\n+\n+        let mut n = uint::max_value - 9999;\n+        for m.each |&(k, v)| {\n+            if n == uint::max_value - 5000 { break }\n+            assert n < uint::max_value - 5000;\n+\n+            assert k == n;\n+            assert *v == n / 2;\n+            n += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_each_reverse() {\n+        let mut m = TrieMap::new();\n+\n+        assert m.insert(3, 6);\n+        assert m.insert(0, 0);\n+        assert m.insert(4, 8);\n+        assert m.insert(2, 4);\n+        assert m.insert(1, 2);\n+\n+        let mut n = 4;\n+        for m.each_reverse |&(k, v)| {\n+            assert k == n;\n+            assert *v == n * 2;\n+            n -= 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_each_reverse_break() {\n+        let mut m = TrieMap::new();\n+\n+        for uint::range_rev(uint::max_value, uint::max_value - 10000) |x| {\n+            m.insert(x, x / 2);\n+        }\n+\n+        let mut n = uint::max_value;\n+        for m.each_reverse |&(k, v)| {\n+            if n == uint::max_value - 5000 { break }\n+            assert n > uint::max_value - 5000;\n+\n+            assert k == n;\n+            assert *v == n / 2;\n+            n -= 1;\n+        }\n+    }\n }"}]}