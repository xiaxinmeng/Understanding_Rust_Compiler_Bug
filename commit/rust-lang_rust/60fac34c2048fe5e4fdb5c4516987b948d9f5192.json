{"sha": "60fac34c2048fe5e4fdb5c4516987b948d9f5192", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZmFjMzRjMjA0OGZlNWU0ZmRiNWM0NTE2OTg3Yjk0OGQ5ZjUxOTI=", "commit": {"author": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T11:10:38Z"}, "committer": {"name": "Lzu Tao", "email": "taolzu@gmail.com", "date": "2020-07-19T13:43:30Z"}, "message": "Rewrite extract_llvm_version", "tree": {"sha": "731c96cc27663ebf535fe896e6752c64ecb8cb1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731c96cc27663ebf535fe896e6752c64ecb8cb1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60fac34c2048fe5e4fdb5c4516987b948d9f5192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60fac34c2048fe5e4fdb5c4516987b948d9f5192", "html_url": "https://github.com/rust-lang/rust/commit/60fac34c2048fe5e4fdb5c4516987b948d9f5192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60fac34c2048fe5e4fdb5c4516987b948d9f5192/comments", "author": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tesuji", "id": 15225902, "node_id": "MDQ6VXNlcjE1MjI1OTAy", "avatar_url": "https://avatars.githubusercontent.com/u/15225902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tesuji", "html_url": "https://github.com/tesuji", "followers_url": "https://api.github.com/users/tesuji/followers", "following_url": "https://api.github.com/users/tesuji/following{/other_user}", "gists_url": "https://api.github.com/users/tesuji/gists{/gist_id}", "starred_url": "https://api.github.com/users/tesuji/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tesuji/subscriptions", "organizations_url": "https://api.github.com/users/tesuji/orgs", "repos_url": "https://api.github.com/users/tesuji/repos", "events_url": "https://api.github.com/users/tesuji/events{/privacy}", "received_events_url": "https://api.github.com/users/tesuji/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "url": "https://api.github.com/repos/rust-lang/rust/commits/99e3a3cdeaf9d6b42d329254b5d2752833c0c562", "html_url": "https://github.com/rust-lang/rust/commit/99e3a3cdeaf9d6b42d329254b5d2752833c0c562"}], "stats": {"total": 106, "additions": 49, "deletions": 57}, "files": [{"sha": "c1c07e0bc00a0a13c2819fe471064274bc71f508", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=60fac34c2048fe5e4fdb5c4516987b948d9f5192", "patch": "@@ -274,7 +274,7 @@ pub struct Config {\n     pub lldb_native_rust: bool,\n \n     /// Version of LLVM\n-    pub llvm_version: Option<String>,\n+    pub llvm_version: Option<u32>,\n \n     /// Is LLVM a system LLVM\n     pub system_llvm: bool,"}, {"sha": "4b5c44bca875b95055e543a34f50e5a96686e990", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=60fac34c2048fe5e4fdb5c4516987b948d9f5192", "patch": "@@ -181,69 +181,35 @@ impl EarlyProps {\n             if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n                 return true;\n             }\n-            if let Some(ref actual_version) = config.llvm_version {\n-                let actual_version = version_to_int(actual_version);\n-                if line.starts_with(\"min-llvm-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed llvm version directive\");\n+            if let Some(actual_version) = config.llvm_version {\n+                if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n+                    let min_version = extract_llvm_version(rest).unwrap();\n                     // Ignore if actual version is smaller the minimum required\n                     // version\n-                    actual_version < version_to_int(min_version)\n-                } else if line.starts_with(\"min-system-llvm-version\") {\n-                    let min_version = line\n-                        .trim_end()\n-                        .rsplit(' ')\n-                        .next()\n-                        .expect(\"Malformed llvm version directive\");\n+                    actual_version < min_version\n+                } else if let Some(rest) =\n+                    line.strip_prefix(\"min-system-llvm-version:\").map(str::trim)\n+                {\n+                    let min_version = extract_llvm_version(rest).unwrap();\n                     // Ignore if using system LLVM and actual version\n                     // is smaller the minimum required version\n-                    config.system_llvm && actual_version < version_to_int(min_version)\n-                } else if line.starts_with(\"ignore-llvm-version\") {\n-                    // Syntax is: \"ignore-llvm-version <version1> [- <version2>]\"\n-                    let range_components = line\n-                        .split(' ')\n-                        .skip(1) // Skip the directive.\n-                        .map(|s| s.trim())\n-                        .filter(|word| !word.is_empty() && word != &\"-\")\n-                        .take(3) // 3 or more = invalid, so take at most 3.\n-                        .collect::<Vec<&str>>();\n-                    match range_components.len() {\n-                        1 => actual_version == version_to_int(range_components[0]),\n-                        2 => {\n-                            let v_min = version_to_int(range_components[0]);\n-                            let v_max = version_to_int(range_components[1]);\n-                            if v_max < v_min {\n-                                panic!(\"Malformed LLVM version range: max < min\")\n-                            }\n-                            // Ignore if version lies inside of range.\n-                            actual_version >= v_min && actual_version <= v_max\n-                        }\n-                        _ => panic!(\"Malformed LLVM version directive\"),\n+                    config.system_llvm && actual_version < min_version\n+                } else if let Some(rest) = line.strip_prefix(\"ignore-llvm-version:\").map(str::trim)\n+                {\n+                    // Syntax is: \"ignore-llvm-version: <version1> [- <version2>]\"\n+                    let (v_min, v_max) = extract_version_range(rest, extract_llvm_version);\n+                    if v_max < v_min {\n+                        panic!(\"Malformed LLVM version range: max < min\")\n                     }\n+                    // Ignore if version lies inside of range.\n+                    actual_version >= v_min && actual_version <= v_max\n                 } else {\n                     false\n                 }\n             } else {\n                 false\n             }\n         }\n-\n-        fn version_to_int(version: &str) -> u32 {\n-            let version_without_suffix = version.trim_end_matches(\"git\").split('-').next().unwrap();\n-            let components: Vec<u32> = version_without_suffix\n-                .split('.')\n-                .map(|s| s.parse().expect(\"Malformed version component\"))\n-                .collect();\n-            match components.len() {\n-                1 => components[0] * 10000,\n-                2 => components[0] * 10000 + components[1] * 100,\n-                3 => components[0] * 10000 + components[1] * 100 + components[2],\n-                _ => panic!(\"Malformed version\"),\n-            }\n-        }\n     }\n }\n \n@@ -954,6 +920,21 @@ fn parse_normalization_string(line: &mut &str) -> Option<String> {\n     Some(result)\n }\n \n+pub fn extract_llvm_version(version: &str) -> Option<u32> {\n+    let version_without_suffix = version.trim_end_matches(\"git\").split('-').next().unwrap();\n+    let components: Vec<u32> = version_without_suffix\n+        .split('.')\n+        .map(|s| s.parse().expect(\"Malformed version component\"))\n+        .collect();\n+    let version = match *components {\n+        [a] => a * 10_000,\n+        [a, b] => a * 10_000 + b * 100,\n+        [a, b, c] => a * 10_000 + b * 100 + c,\n+        _ => panic!(\"Malformed version\"),\n+    };\n+    Some(version)\n+}\n+\n // Takes a directive of the form \"<version1> [- <version2>]\",\n // returns the numeric representation of <version1> and <version2> as\n // tuple: (<version1> as u32, <version2> as u32)"}, {"sha": "adcd8691d0f580e77c81b3d5ee665765bb038048", "filename": "src/tools/compiletest/src/header/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader%2Ftests.rs?ref=60fac34c2048fe5e4fdb5c4516987b948d9f5192", "patch": "@@ -119,16 +119,16 @@ fn no_system_llvm() {\n fn llvm_version() {\n     let mut config = config();\n \n-    config.llvm_version = Some(\"8.1.2-rust\".to_owned());\n+    config.llvm_version = Some(80102);\n     assert!(parse_rs(&config, \"// min-llvm-version: 9.0\").ignore);\n \n-    config.llvm_version = Some(\"9.0.1-rust-1.43.0-dev\".to_owned());\n+    config.llvm_version = Some(90001);\n     assert!(parse_rs(&config, \"// min-llvm-version: 9.2\").ignore);\n \n-    config.llvm_version = Some(\"9.3.1-rust-1.43.0-dev\".to_owned());\n+    config.llvm_version = Some(90301);\n     assert!(!parse_rs(&config, \"// min-llvm-version: 9.2\").ignore);\n \n-    config.llvm_version = Some(\"10.0.0-rust\".to_owned());\n+    config.llvm_version = Some(100000);\n     assert!(!parse_rs(&config, \"// min-llvm-version: 9.0\").ignore);\n }\n "}, {"sha": "0b46aace4994453d5baa21eabf17a8e625f05f71", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=60fac34c2048fe5e4fdb5c4516987b948d9f5192", "patch": "@@ -177,6 +177,8 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         Some(\"never\") => ColorConfig::NeverColor,\n         Some(x) => panic!(\"argument for --color must be auto, always, or never, but found `{}`\", x),\n     };\n+    let llvm_version =\n+        matches.opt_str(\"llvm-version\").as_deref().and_then(header::extract_llvm_version);\n \n     let src_base = opt_path(matches, \"src-base\");\n     let run_ignored = matches.opt_present(\"ignored\");\n@@ -217,7 +219,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n         gdb_native_rust,\n         lldb_version,\n         lldb_native_rust,\n-        llvm_version: matches.opt_str(\"llvm-version\"),\n+        llvm_version,\n         system_llvm: matches.opt_present(\"system-llvm\"),\n         android_cross_path,\n         adb_path: opt_str2(matches.opt_str(\"adb-path\")),"}, {"sha": "ea9bc1c1a5b7f5a7413c26b0939db1bec0767d98", "filename": "src/tools/compiletest/src/tests.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60fac34c2048fe5e4fdb5c4516987b948d9f5192/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ftests.rs?ref=60fac34c2048fe5e4fdb5c4516987b948d9f5192", "patch": "@@ -1,3 +1,4 @@\n+use super::header::extract_llvm_version;\n use super::*;\n \n #[test]\n@@ -60,3 +61,11 @@ fn is_test_test() {\n     assert_eq!(false, is_test(&OsString::from(\"#a_dog_gif\")));\n     assert_eq!(false, is_test(&OsString::from(\"~a_temp_file\")));\n }\n+\n+#[test]\n+fn test_extract_llvm_version() {\n+    assert_eq!(extract_llvm_version(\"8.1.2-rust\"), Some(80102));\n+    assert_eq!(extract_llvm_version(\"9.0.1-rust-1.43.0-dev\"), Some(90001));\n+    assert_eq!(extract_llvm_version(\"9.3.1-rust-1.43.0-dev\"), Some(90301));\n+    assert_eq!(extract_llvm_version(\"10.0.0-rust\"), Some(100000));\n+}"}]}