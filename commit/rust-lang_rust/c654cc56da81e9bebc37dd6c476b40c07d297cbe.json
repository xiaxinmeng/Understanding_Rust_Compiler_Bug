{"sha": "c654cc56da81e9bebc37dd6c476b40c07d297cbe", "node_id": "C_kwDOAAsO6NoAKGM2NTRjYzU2ZGE4MWU5YmViYzM3ZGQ2YzQ3NmI0MGMwN2QyOTdjYmU", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-19T00:41:27Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-19T00:41:27Z"}, "message": "One more test + final tidying", "tree": {"sha": "a88d1dfec0f939edcf4b2162212335f83dbc8d8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88d1dfec0f939edcf4b2162212335f83dbc8d8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c654cc56da81e9bebc37dd6c476b40c07d297cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c654cc56da81e9bebc37dd6c476b40c07d297cbe", "html_url": "https://github.com/rust-lang/rust/commit/c654cc56da81e9bebc37dd6c476b40c07d297cbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c654cc56da81e9bebc37dd6c476b40c07d297cbe/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6303d2d075131641ef325344124c71052d2bd3eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6303d2d075131641ef325344124c71052d2bd3eb", "html_url": "https://github.com/rust-lang/rust/commit/6303d2d075131641ef325344124c71052d2bd3eb"}], "stats": {"total": 107, "additions": 53, "deletions": 54}, "files": [{"sha": "88ec471184cf7668939dc7edb32d75f15f5e2a66", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 18, "deletions": 37, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c654cc56da81e9bebc37dd6c476b40c07d297cbe/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654cc56da81e9bebc37dd6c476b40c07d297cbe/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs?ref=c654cc56da81e9bebc37dd6c476b40c07d297cbe", "patch": "@@ -1,11 +1,7 @@\n-use clippy_utils::{\n-    diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then},\n-    source::{indent_of, snippet},\n-};\n-use rustc_errors::Applicability;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{HirId, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::ty::{Const, TyS};\n+use rustc_middle::ty::Const;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -40,54 +36,39 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutRepr => [TRAILING_ZERO_SIZED_ARR\n \n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutRepr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n-        dbg!(item.ident);\n         if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.hir_id()) {\n-            let help_msg = format!(\n-                \"consider annotating {} with `#[repr(C)]` or another `repr` attribute\",\n-                cx.tcx\n-                    .type_of(item.def_id)\n-                    .ty_adt_def()\n-                    .map(|adt_def| cx.tcx.def_path_str(adt_def.did))\n-                    .unwrap_or_else(\n-                        // I don't think this will ever be the case, since we made it through\n-                        // `is_struct_with_trailing_zero_sized_array`, but I don't feel comfortable putting an `unwrap`\n-                        || \"the struct definition\".to_string()\n-                    )\n-            );\n-\n             span_lint_and_help(\n                 cx,\n                 TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n                 item.span,\n                 \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n                 None,\n-                &help_msg,\n+                &format!(\n+                    \"consider annotating `{}` with `#[repr(C)]` or another `repr` attribute\",\n+                    cx.tcx.def_path_str(item.def_id.to_def_id())\n+                ),\n             );\n         }\n     }\n }\n \n fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n-    // TODO: when finalized, replace with an `if_chain`. I have it like this because my rust-analyzer\n-    // doesn't work when it's an `if_chain`.\n+    if_chain! {\n+        // First check if last field is an array\n+        if let ItemKind::Struct(data, _) = &item.kind;\n+        if let Some(last_field) = data.fields().last();\n+        if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind;\n \n-    // First check if last field is an array\n-    if let ItemKind::Struct(data, _) = &item.kind {\n-        if let Some(last_field) = data.fields().last() {\n-            if let rustc_hir::TyKind::Array(_, length) = last_field.ty.kind {\n-                // Then check if that that array zero-sized\n-                let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n-                let length = Const::from_anon_const(cx.tcx, length_ldid);\n-                let length = length.try_eval_usize(cx.tcx, cx.param_env);\n-                length == Some(0)\n-            } else {\n-                false\n-            }\n+        // Then check if that that array zero-sized\n+        let length_ldid = cx.tcx.hir().local_def_id(length.hir_id);\n+        let length = Const::from_anon_const(cx.tcx, length_ldid);\n+        let length = length.try_eval_usize(cx.tcx, cx.param_env);\n+        if let Some(length) = length;\n+        then {\n+            length == 0\n         } else {\n             false\n         }\n-    } else {\n-        false\n     }\n }\n "}, {"sha": "dee7f81154000de5560ef6562b8e3c873f849427", "filename": "tests/ui/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c654cc56da81e9bebc37dd6c476b40c07d297cbe/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c654cc56da81e9bebc37dd6c476b40c07d297cbe/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.rs?ref=c654cc56da81e9bebc37dd6c476b40c07d297cbe", "patch": "@@ -46,6 +46,14 @@ struct ZeroSizedWithConstFunction {\n     last: [usize; compute_zero()],\n }\n \n+const fn compute_zero_from_arg(x: usize) -> usize {\n+    x - 1\n+}\n+struct ZeroSizedWithConstFunction2 {\n+    field: i32,\n+    last: [usize; compute_zero_from_arg(1)],\n+}\n+\n struct ZeroSizedArrayWrapper([usize; 0]);\n \n struct TupleStruct(i32, [usize; 0]);"}, {"sha": "93c607bbf38fd1952843f39227de325e7fd28bfb", "filename": "tests/ui/trailing_zero_sized_array_without_repr.stderr", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c654cc56da81e9bebc37dd6c476b40c07d297cbe/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c654cc56da81e9bebc37dd6c476b40c07d297cbe/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrailing_zero_sized_array_without_repr.stderr?ref=c654cc56da81e9bebc37dd6c476b40c07d297cbe", "patch": "@@ -8,7 +8,7 @@ LL | | }\n    | |_^\n    |\n    = note: `-D clippy::trailing-zero-sized-array-without-repr` implied by `-D warnings`\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `RarelyUseful` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_zero_sized_array_without_repr.rs:11:1\n@@ -18,7 +18,7 @@ LL | |     first_and_last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `OnlyField` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_zero_sized_array_without_repr.rs:15:1\n@@ -29,19 +29,18 @@ LL | |     last: [T; 0],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `GenericArrayType` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_zero_sized_array_without_repr.rs:20:1\n+  --> $DIR/trailing_zero_sized_array_without_repr.rs:21:1\n    |\n-LL | / #[must_use]\n-LL | | struct OnlyAnotherAttribute {\n+LL | / struct OnlyAnotherAttribute {\n LL | |     field: i32,\n LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `OnlyAnotherAttribute` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_zero_sized_array_without_repr.rs:29:1\n@@ -52,7 +51,7 @@ LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `OnlyADeriveAttribute` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_zero_sized_array_without_repr.rs:35:1\n@@ -63,7 +62,7 @@ LL | |     last: [usize; ZERO],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `ZeroSizedWithConst` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n   --> $DIR/trailing_zero_sized_array_without_repr.rs:44:1\n@@ -74,26 +73,37 @@ LL | |     last: [usize; compute_zero()],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `ZeroSizedWithConstFunction` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_zero_sized_array_without_repr.rs:49:1\n+  --> $DIR/trailing_zero_sized_array_without_repr.rs:52:1\n+   |\n+LL | / struct ZeroSizedWithConstFunction2 {\n+LL | |     field: i32,\n+LL | |     last: [usize; compute_zero_from_arg(1)],\n+LL | | }\n+   | |_^\n+   |\n+   = help: consider annotating `ZeroSizedWithConstFunction2` with `#[repr(C)]` or another `repr` attribute\n+\n+error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n+  --> $DIR/trailing_zero_sized_array_without_repr.rs:57:1\n    |\n LL | struct ZeroSizedArrayWrapper([usize; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `ZeroSizedArrayWrapper` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_zero_sized_array_without_repr.rs:51:1\n+  --> $DIR/trailing_zero_sized_array_without_repr.rs:59:1\n    |\n LL | struct TupleStruct(i32, [usize; 0]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `TupleStruct` with `#[repr(C)]` or another `repr` attribute\n \n error: trailing zero-sized array in a struct which is not marked with a `repr` attribute\n-  --> $DIR/trailing_zero_sized_array_without_repr.rs:53:1\n+  --> $DIR/trailing_zero_sized_array_without_repr.rs:61:1\n    |\n LL | / struct LotsOfFields {\n LL | |     f1: u32,\n@@ -104,7 +114,7 @@ LL | |     last: [usize; 0],\n LL | | }\n    | |_^\n    |\n-   = help: consider annotating the struct definition with `#[repr(C)]` or another `repr` attribute\n+   = help: consider annotating `LotsOfFields` with `#[repr(C)]` or another `repr` attribute\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n "}]}