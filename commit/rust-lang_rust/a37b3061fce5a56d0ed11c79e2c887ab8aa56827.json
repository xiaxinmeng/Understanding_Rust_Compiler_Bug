{"sha": "a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "node_id": "C_kwDOAAsO6NoAKGEzN2IzMDYxZmNlNWE1NmQwZWQxMWM3OWUyYzg4N2FiOGFhNTY4Mjc", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2023-01-31T20:59:29Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2023-01-31T20:59:29Z"}, "message": "Extend `-Z print-type-sizes` to distinguish generator upvars and locals from \"normal\" ADT fields.", "tree": {"sha": "bb2b06dae9f6dca618a1b0c3fe2123c5d1e0bad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb2b06dae9f6dca618a1b0c3fe2123c5d1e0bad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "html_url": "https://github.com/rust-lang/rust/commit/a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a64ef7d07d0411315be85a646586cb85eeb9c136", "url": "https://api.github.com/repos/rust-lang/rust/commits/a64ef7d07d0411315be85a646586cb85eeb9c136", "html_url": "https://github.com/rust-lang/rust/commit/a64ef7d07d0411315be85a646586cb85eeb9c136"}], "stats": {"total": 33, "additions": 27, "deletions": 6}, "files": [{"sha": "f0cd7d9322be2e292061c0821c1ecdea77de2108", "filename": "compiler/rustc_session/src/code_stats.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcode_stats.rs?ref=a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "patch": "@@ -19,8 +19,26 @@ pub enum SizeKind {\n     Min,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n+pub enum FieldKind {\n+    AdtField,\n+    Upvar,\n+    GeneratorLocal,\n+}\n+\n+impl std::fmt::Display for FieldKind {\n+    fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            FieldKind::AdtField => { write!(w, \"field\") }\n+            FieldKind::Upvar => { write!(w, \"upvar\") }\n+            FieldKind::GeneratorLocal => { write!(w, \"local\") }\n+        }\n+    }\n+}\n+\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug)]\n pub struct FieldInfo {\n+    pub kind: FieldKind,\n     pub name: Symbol,\n     pub offset: u64,\n     pub size: u64,\n@@ -145,7 +163,7 @@ impl CodeStats {\n                 fields.sort_by_key(|f| (f.offset, f.size));\n \n                 for field in fields {\n-                    let FieldInfo { ref name, offset, size, align } = field;\n+                    let FieldInfo { kind, ref name, offset, size, align } = field;\n \n                     if offset > min_offset {\n                         let pad = offset - min_offset;\n@@ -155,16 +173,16 @@ impl CodeStats {\n                     if offset < min_offset {\n                         // If this happens it's probably a union.\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   offset: {offset} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     } else if info.packed || offset == min_offset {\n-                        println!(\"print-type-size {indent}field `.{name}`: {size} bytes\");\n+                        println!(\"print-type-size {indent}{kind} `.{name}`: {size} bytes\");\n                     } else {\n                         // Include field alignment in output only if it caused padding injection\n                         println!(\n-                            \"print-type-size {indent}field `.{name}`: {size} bytes, \\\n+                            \"print-type-size {indent}{kind} `.{name}`: {size} bytes, \\\n                                   alignment: {align} bytes\"\n                         );\n                     }"}, {"sha": "7cf9b0fd1fa09d2ba04fc1a794b51ff7d4dabdbc", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "patch": "@@ -1,6 +1,6 @@\n use crate::cgu_reuse_tracker::CguReuseTracker;\n use crate::code_stats::CodeStats;\n-pub use crate::code_stats::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+pub use crate::code_stats::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use crate::config::Input;\n use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, SwitchWithOptPath};\n use crate::errors::{"}, {"sha": "93c9c675c9a6be2cfb88826ca27b7c5e35e13b0c", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a37b3061fce5a56d0ed11c79e2c887ab8aa56827/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=a37b3061fce5a56d0ed11c79e2c887ab8aa56827", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty::layout::{\n use rustc_middle::ty::{\n     self, subst::SubstsRef, AdtDef, EarlyBinder, ReprOptions, Ty, TyCtxt, TypeVisitable,\n };\n-use rustc_session::{DataTypeKind, FieldInfo, SizeKind, VariantInfo};\n+use rustc_session::{DataTypeKind, FieldInfo, FieldKind, SizeKind, VariantInfo};\n use rustc_span::symbol::Symbol;\n use rustc_span::DUMMY_SP;\n use rustc_target::abi::*;\n@@ -881,6 +881,7 @@ fn variant_info_for_adt<'tcx>(\n                 let offset = layout.fields.offset(i);\n                 min_size = min_size.max(offset + field_layout.size);\n                 FieldInfo {\n+                    kind: FieldKind::AdtField,\n                     name,\n                     offset: offset.bytes(),\n                     size: field_layout.size.bytes(),\n@@ -960,6 +961,7 @@ fn variant_info_for_generator<'tcx>(\n             let offset = layout.fields.offset(field_idx);\n             upvars_size = upvars_size.max(offset + field_layout.size);\n             FieldInfo {\n+                kind: FieldKind::Upvar,\n                 name: Symbol::intern(&name),\n                 offset: offset.bytes(),\n                 size: field_layout.size.bytes(),\n@@ -983,6 +985,7 @@ fn variant_info_for_generator<'tcx>(\n                     // The struct is as large as the last field's end\n                     variant_size = variant_size.max(offset + field_layout.size);\n                     FieldInfo {\n+                        kind: FieldKind::GeneratorLocal,\n                         name: state_specific_names.get(*local).copied().flatten().unwrap_or(\n                             Symbol::intern(&format!(\".generator_field{}\", local.as_usize())),\n                         ),"}]}