{"sha": "76650174c70ca443936d2187a2edecff6dbd5d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NjUwMTc0YzcwY2E0NDM5MzZkMjE4N2EyZWRlY2ZmNmRiZDVkMjU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-19T14:20:43Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-09-19T14:20:43Z"}, "message": "Combine chain items only when the item will get orphaned", "tree": {"sha": "4436ea1351b653f38e0d947634c91153278b8dcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4436ea1351b653f38e0d947634c91153278b8dcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76650174c70ca443936d2187a2edecff6dbd5d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76650174c70ca443936d2187a2edecff6dbd5d25", "html_url": "https://github.com/rust-lang/rust/commit/76650174c70ca443936d2187a2edecff6dbd5d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76650174c70ca443936d2187a2edecff6dbd5d25/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "594774b4e5044f5700e43f7439bf0575cc6bd6bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/594774b4e5044f5700e43f7439bf0575cc6bd6bf", "html_url": "https://github.com/rust-lang/rust/commit/594774b4e5044f5700e43f7439bf0575cc6bd6bf"}], "stats": {"total": 41, "additions": 13, "deletions": 28}, "files": [{"sha": "56bd8574fc9dde1c9ab6b08609980d1fa5d97474", "filename": "src/chains.rs", "status": "modified", "additions": 13, "deletions": 28, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/76650174c70ca443936d2187a2edecff6dbd5d25/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76650174c70ca443936d2187a2edecff6dbd5d25/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=76650174c70ca443936d2187a2edecff6dbd5d25", "patch": "@@ -80,7 +80,6 @@ use utils::{\n \n use std::borrow::Cow;\n use std::cmp::min;\n-use std::iter;\n \n use syntax::source_map::{BytePos, Span};\n use syntax::{ast, ptr};\n@@ -132,8 +131,8 @@ impl ChainItemKind {\n     fn is_block_like(&self, context: &RewriteContext, reps: &str) -> bool {\n         match self {\n             ChainItemKind::Parent(ref expr) => is_block_expr(context, expr, reps),\n-            ChainItemKind::MethodCall(..) => reps.contains('\\n'),\n-            ChainItemKind::StructField(..)\n+            ChainItemKind::MethodCall(..)\n+            | ChainItemKind::StructField(..)\n             | ChainItemKind::TupleField(..)\n             | ChainItemKind::Comment(..) => false,\n         }\n@@ -625,12 +624,7 @@ impl<'a> ChainFormatterShared<'a> {\n         Some(())\n     }\n \n-    fn join_rewrites(\n-        &self,\n-        context: &RewriteContext,\n-        child_shape: Shape,\n-        block_like_iter: impl Iterator<Item = bool>,\n-    ) -> Option<String> {\n+    fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n         let connector = if self.fits_single_line {\n             // Yay, we can put everything on one line.\n             Cow::from(\"\")\n@@ -645,17 +639,13 @@ impl<'a> ChainFormatterShared<'a> {\n         let mut rewrite_iter = self.rewrites.iter();\n         let mut result = rewrite_iter.next().unwrap().clone();\n         let children_iter = self.children.iter();\n-        let iter = rewrite_iter.zip(block_like_iter).zip(children_iter);\n+        let iter = rewrite_iter.zip(children_iter);\n \n-        for ((rewrite, prev_is_block_like), chain_item) in iter {\n+        for (rewrite, chain_item) in iter {\n             match chain_item.kind {\n                 ChainItemKind::Comment(_, CommentPosition::Back) => result.push(' '),\n                 ChainItemKind::Comment(_, CommentPosition::Top) => result.push_str(&connector),\n-                _ => {\n-                    if !prev_is_block_like {\n-                        result.push_str(&connector);\n-                    }\n-                }\n+                _ => result.push_str(&connector),\n             }\n             result.push_str(&rewrite);\n         }\n@@ -667,15 +657,14 @@ impl<'a> ChainFormatterShared<'a> {\n // Formats a chain using block indent.\n struct ChainFormatterBlock<'a> {\n     shared: ChainFormatterShared<'a>,\n-    // For each rewrite, whether the corresponding item is block-like.\n-    is_block_like: Vec<bool>,\n+    root_ends_with_block: bool,\n }\n \n impl<'a> ChainFormatterBlock<'a> {\n     fn new(chain: &'a Chain) -> ChainFormatterBlock<'a> {\n         ChainFormatterBlock {\n             shared: ChainFormatterShared::new(chain),\n-            is_block_like: Vec::with_capacity(chain.children.len() + 1),\n+            root_ends_with_block: false,\n         }\n     }\n }\n@@ -703,21 +692,21 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n                 None => break,\n             }\n \n-            root_ends_with_block = item.kind.is_block_like(context, &root_rewrite);\n+            root_ends_with_block = last_line_extendable(&root_rewrite);\n \n             self.shared.children = &self.shared.children[1..];\n             if self.shared.children.is_empty() {\n                 break;\n             }\n         }\n-        self.is_block_like.push(root_ends_with_block);\n         self.shared.rewrites.push(root_rewrite);\n+        self.root_ends_with_block = root_ends_with_block;\n         Some(())\n     }\n \n     fn child_shape(&self, context: &RewriteContext, shape: Shape) -> Option<Shape> {\n         Some(\n-            if self.is_block_like[0] {\n+            if self.root_ends_with_block {\n                 shape.block_indent(0)\n             } else {\n                 shape.block_indent(context.config.tab_spaces())\n@@ -728,8 +717,6 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     fn format_children(&mut self, context: &RewriteContext, child_shape: Shape) -> Option<()> {\n         for item in &self.shared.children[..self.shared.children.len() - 1] {\n             let rewrite = item.rewrite(context, child_shape)?;\n-            self.is_block_like\n-                .push(item.kind.is_block_like(context, &rewrite));\n             self.shared.rewrites.push(rewrite);\n         }\n         Some(())\n@@ -746,8 +733,7 @@ impl<'a> ChainFormatter for ChainFormatterBlock<'a> {\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared\n-            .join_rewrites(context, child_shape, self.is_block_like.iter().cloned())\n+        self.shared.join_rewrites(context, child_shape)\n     }\n \n     fn pure_root(&mut self) -> Option<String> {\n@@ -841,8 +827,7 @@ impl<'a> ChainFormatter for ChainFormatterVisual<'a> {\n     }\n \n     fn join_rewrites(&self, context: &RewriteContext, child_shape: Shape) -> Option<String> {\n-        self.shared\n-            .join_rewrites(context, child_shape, iter::repeat(false))\n+        self.shared.join_rewrites(context, child_shape)\n     }\n \n     fn pure_root(&mut self) -> Option<String> {"}]}