{"sha": "31ab57305227576646174b952e30969907f98986", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxYWI1NzMwNTIyNzU3NjY0NjE3NGI5NTJlMzA5Njk5MDdmOTg5ODY=", "commit": {"author": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-06-01T18:08:04Z"}, "committer": {"name": "Christian Poveda", "email": "christianpoveda@protonmail.com", "date": "2019-06-04T04:53:46Z"}, "message": "Add const-eval support for indirects", "tree": {"sha": "fa9860b0519b2089ce53e2710066de3f45ae7388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa9860b0519b2089ce53e2710066de3f45ae7388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31ab57305227576646174b952e30969907f98986", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31ab57305227576646174b952e30969907f98986", "html_url": "https://github.com/rust-lang/rust/commit/31ab57305227576646174b952e30969907f98986", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31ab57305227576646174b952e30969907f98986/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a6bef0cbd01227bbcf593e8504164120a984fdc", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a6bef0cbd01227bbcf593e8504164120a984fdc", "html_url": "https://github.com/rust-lang/rust/commit/3a6bef0cbd01227bbcf593e8504164120a984fdc"}], "stats": {"total": 73, "additions": 59, "deletions": 14}, "files": [{"sha": "5c75c323ddd7d773ffb80d1bcb9fc07c247733c8", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/31ab57305227576646174b952e30969907f98986/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ab57305227576646174b952e30969907f98986/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=31ab57305227576646174b952e30969907f98986", "patch": "@@ -268,7 +268,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     /// Note that for a given layout, this operation will either always fail or always\n     /// succeed!  Whether it succeeds depends on whether the layout can be represented\n     /// in a `Immediate`, not on which data is stored there currently.\n-    pub(super) fn try_read_immediate(\n+    pub(crate) fn try_read_immediate(\n         &self,\n         src: OpTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, Result<Immediate<M::PointerTag>, MemPlace<M::PointerTag>>> {"}, {"sha": "ded294ec290cdd7db7240c3b8b68dd72e82eb062", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 32, "deletions": 11, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/31ab57305227576646174b952e30969907f98986/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ab57305227576646174b952e30969907f98986/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=31ab57305227576646174b952e30969907f98986", "patch": "@@ -3,8 +3,8 @@\n \n use rustc::hir::def::DefKind;\n use rustc::mir::{\n-    AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue, Local,\n-    NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n+    AggregateKind, Constant, Location, Place, PlaceBase, Body, Operand, Rvalue,\n+    Local, NullOp, UnOp, StatementKind, Statement, LocalKind, Static, StaticKind,\n     TerminatorKind, Terminator,  ClearCrossCrate, SourceInfo, BinOp, ProjectionElem,\n     SourceScope, SourceScopeLocalData, LocalDecl, Promoted,\n };\n@@ -21,7 +21,9 @@ use rustc::ty::layout::{\n     HasTyCtxt, TargetDataLayout, HasDataLayout,\n };\n \n-use crate::interpret::{self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind};\n+use crate::interpret::{\n+    self, InterpretCx, ScalarMaybeUndef, Immediate, OpTy, ImmTy, MemoryKind,\n+};\n use crate::const_eval::{\n     CompileTimeInterpreter, error_to_const_error, eval_promoted, mk_eval_cx,\n };\n@@ -516,19 +518,30 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         ))\n     }\n \n-    fn replace_with_const(&self, rval: &mut Rvalue<'tcx>, value: Const<'tcx>, span: Span) {\n+    fn replace_with_const(\n+        &mut self,\n+        rval: &mut Rvalue<'tcx>,\n+        value: Const<'tcx>,\n+        source_info: SourceInfo,\n+        ) {\n         trace!(\"attepting to replace {:?} with {:?}\", rval, value);\n         self.ecx.validate_operand(\n             value,\n             vec![],\n             None,\n             true,\n-        ).expect(\"value should already be a valid const\");\n+            ).expect(\"value should already be a valid const\");\n \n-        if let interpret::Operand::Immediate(im) = *value {\n-            match im {\n+        // FIXME> figure out what tho do when try_read_immediate fails\n+        let imm = self.use_ecx(source_info, |this| {\n+            this.ecx.try_read_immediate(value)\n+        });\n+\n+        if let Some(Ok(imm)) = imm {\n+            match imm {\n                 interpret::Immediate::Scalar(ScalarMaybeUndef::Scalar(scalar)) => {\n-                    *rval = Rvalue::Use(self.operand_from_scalar(scalar, value.layout.ty, span));\n+                    *rval = Rvalue::Use(\n+                        self.operand_from_scalar(scalar, value.layout.ty, source_info.span));\n                 },\n                 Immediate::ScalarPair(\n                     ScalarMaybeUndef::Scalar(one),\n@@ -539,8 +552,12 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                         *rval = Rvalue::Aggregate(\n                             Box::new(AggregateKind::Tuple),\n                             vec![\n-                                self.operand_from_scalar(one, substs[0].expect_ty(), span),\n-                                self.operand_from_scalar(two, substs[1].expect_ty(), span),\n+                                self.operand_from_scalar(\n+                                    one, substs[0].expect_ty(), source_info.span\n+                                ),\n+                                self.operand_from_scalar(\n+                                    two, substs[1].expect_ty(), source_info.span\n+                                ),\n                             ],\n                         );\n                     }\n@@ -655,7 +672,11 @@ impl<'b, 'a, 'tcx> MutVisitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n                             self.places[local] = Some(value);\n \n                             if self.should_const_prop() {\n-                                self.replace_with_const(rval, value, statement.source_info.span);\n+                                self.replace_with_const(\n+                                    rval,\n+                                    value,\n+                                    statement.source_info,\n+                                );\n                             }\n                         }\n                     }"}, {"sha": "85ed8d55b243beca6c6238ef81cd2c51f23cdff1", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/31ab57305227576646174b952e30969907f98986/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ab57305227576646174b952e30969907f98986/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.rs?ref=31ab57305227576646174b952e30969907f98986", "patch": "@@ -23,8 +23,9 @@ fn main() {\n // START rustc.main.ConstProp.after.mir\n //  bb0: {\n //      ...\n-//      _3 = _4;\n-//      _2 = move _3 as *const i32 (Misc);\n+//      _4 = const Scalar(AllocId(1).0x0) : &i32;\n+//      _3 = const Scalar(AllocId(1).0x0) : &i32;\n+//      _2 = const Scalar(AllocId(1).0x0) : *const i32;\n //      ...\n //      _1 = move _2 as usize (Misc);\n //      ..."}, {"sha": "b4ee18ed1b53bfaf4d9bef642ae86ec76719d260", "filename": "src/test/mir-opt/const_prop/indirect.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/31ab57305227576646174b952e30969907f98986/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31ab57305227576646174b952e30969907f98986/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Findirect.rs?ref=31ab57305227576646174b952e30969907f98986", "patch": "@@ -0,0 +1,23 @@\n+// compile-flags: -C overflow-checks=on\n+\n+fn main() {\n+    let x = (2u32 as u8) + 1;\n+}\n+\n+// END RUST SOURCE\n+// START rustc.main.ConstProp.before.mir\n+// bb0: {\n+//     ...\n+//     _2 = const 2u32 as u8 (Misc);\n+//     _3 = CheckedAdd(move _2, const 1u8);\n+//     assert(!move (_3.1: bool), \"attempt to add with overflow\") -> bb1;\n+//}\n+// END rustc.main.ConstProp.before.mir\n+// START rustc.main.ConstProp.after.mir\n+// bb0: {\n+//     ...\n+//     _2 = const 2u8;\n+//     _3 = (const 3u8, const false);\n+//     assert(!const false, \"attempt to add with overflow\") -> bb1;\n+// }\n+// END rustc.main.ConstProp.after.mir"}]}