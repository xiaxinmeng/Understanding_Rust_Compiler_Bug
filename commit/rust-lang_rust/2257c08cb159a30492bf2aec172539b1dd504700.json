{"sha": "2257c08cb159a30492bf2aec172539b1dd504700", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyNTdjMDhjYjE1OWEzMDQ5MmJmMmFlYzE3MjUzOWIxZGQ1MDQ3MDA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T18:11:17Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-28T18:11:17Z"}, "message": "Add ret type", "tree": {"sha": "3346d52224b9444e975314e1af32f4490baf91c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3346d52224b9444e975314e1af32f4490baf91c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2257c08cb159a30492bf2aec172539b1dd504700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2257c08cb159a30492bf2aec172539b1dd504700", "html_url": "https://github.com/rust-lang/rust/commit/2257c08cb159a30492bf2aec172539b1dd504700", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2257c08cb159a30492bf2aec172539b1dd504700/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00a4d43ecd4af49a2870718a9d5b8d49084a285", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00a4d43ecd4af49a2870718a9d5b8d49084a285", "html_url": "https://github.com/rust-lang/rust/commit/b00a4d43ecd4af49a2870718a9d5b8d49084a285"}], "stats": {"total": 285, "additions": 208, "deletions": 77}, "files": [{"sha": "65527db629c58de98e003b525b58262298524629", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 105, "deletions": 18, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -12,7 +12,8 @@ use {\n };\n \n #[derive(Debug)]\n-pub struct CompletionItem {\n+pub struct\n+       CompletionItem {\n     pub name: String,\n     pub snippet: Option<String>\n }\n@@ -25,10 +26,17 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n         file.incremental_reparse(&edit)?\n     };\n     let name_ref = find_node_at_offset::<ast::NameRef>(file.syntax(), offset)?;\n+    if !is_ident_expr(name_ref) {\n+        return None;\n+    }\n+\n     let mut res = Vec::new();\n     if let Some(fn_def) = ancestors(name_ref.syntax()).filter_map(ast::FnDef::cast).next() {\n+        complete_keywords(&file, Some(fn_def), name_ref, &mut res);\n         let scopes = FnScopes::new(fn_def);\n         complete_fn(name_ref, &scopes, &mut res);\n+    } else {\n+        complete_keywords(&file, None, name_ref, &mut res);\n     }\n     if let Some(root) = ancestors(name_ref.syntax()).filter_map(ast::Root::cast).next() {\n         let scope = ModuleScope::new(root);\n@@ -43,6 +51,42 @@ pub fn scope_completion(file: &File, offset: TextUnit) -> Option<Vec<CompletionI\n     Some(res)\n }\n \n+fn is_ident_expr(name_ref: ast::NameRef) -> bool {\n+    match ancestors(name_ref.syntax()).filter_map(ast::Expr::cast).next() {\n+        None => false,\n+        Some(expr) => {\n+            expr.syntax().range() == name_ref.syntax().range()\n+        }\n+    }\n+}\n+\n+fn complete_keywords(file: &File, fn_def: Option<ast::FnDef>, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n+    acc.push(keyword(\"if\", \"if $0 { }\"));\n+    acc.push(keyword(\"match\", \"match $0 { }\"));\n+    acc.push(keyword(\"while\", \"while $0 { }\"));\n+    acc.push(keyword(\"loop\", \"loop {$0}\"));\n+\n+    if let Some(off) = name_ref.syntax().range().start().checked_sub(2.into()) {\n+        if let Some(if_expr) = find_node_at_offset::<ast::IfExpr>(file.syntax(), off) {\n+            if if_expr.syntax().range().end() < name_ref.syntax().range().start() {\n+                acc.push(keyword(\"else\", \"else {$0}\"));\n+                acc.push(keyword(\"else if\", \"else if $0 { }\"));\n+            }\n+        }\n+    }\n+\n+    // if let Some(fn_def) = fn_def {\n+    //     acc.push(keyword(\"return\", \"\"))\n+    // }\n+\n+    fn keyword(kw: &str, snip: &str) -> CompletionItem {\n+        CompletionItem {\n+            name: kw.to_string(),\n+            snippet: Some(snip.to_string()),\n+        }\n+    }\n+}\n+\n fn complete_fn(name_ref: ast::NameRef, scopes: &FnScopes, acc: &mut Vec<CompletionItem>) {\n     acc.extend(\n         scopes.scope_chain(name_ref.syntax())\n@@ -59,29 +103,44 @@ mod tests {\n     use super::*;\n     use test_utils::{assert_eq_dbg, extract_offset};\n \n-    fn do_check(code: &str, expected_completions: &str) {\n+    fn check_scope_completion(code: &str, expected_completions: &str) {\n         let (off, code) = extract_offset(&code);\n         let file = File::parse(&code);\n-        let completions = scope_completion(&file, off).unwrap();\n+        let completions = scope_completion(&file, off)\n+            .unwrap()\n+            .into_iter()\n+            .filter(|c| c.snippet.is_none())\n+            .collect::<Vec<_>>();\n+        assert_eq_dbg(expected_completions, &completions);\n+    }\n+\n+    fn check_snippet_completion(code: &str, expected_completions: &str) {\n+        let (off, code) = extract_offset(&code);\n+        let file = File::parse(&code);\n+        let completions = scope_completion(&file, off)\n+            .unwrap()\n+            .into_iter()\n+            .filter(|c| c.snippet.is_some())\n+            .collect::<Vec<_>>();\n         assert_eq_dbg(expected_completions, &completions);\n     }\n \n     #[test]\n     fn test_completion_let_scope() {\n-        do_check(r\"\n+        check_scope_completion(r\"\n             fn quux(x: i32) {\n                 let y = 92;\n                 1 + <|>;\n                 let z = ();\n             }\n-            \", r#\"[CompletionItem { name: \"y\" },\n-                   CompletionItem { name: \"x\" },\n-                   CompletionItem { name: \"quux\" }]\"#);\n+            \", r#\"[CompletionItem { name: \"y\", snippet: None },\n+                   CompletionItem { name: \"x\", snippet: None },\n+                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n     }\n \n     #[test]\n     fn test_completion_if_let_scope() {\n-        do_check(r\"\n+        check_scope_completion(r\"\n             fn quux() {\n                 if let Some(x) = foo() {\n                     let y = 92;\n@@ -91,33 +150,61 @@ mod tests {\n                     1 + <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"b\" },\n-                   CompletionItem { name: \"a\" },\n-                   CompletionItem { name: \"quux\" }]\"#);\n+            \", r#\"[CompletionItem { name: \"b\", snippet: None },\n+                   CompletionItem { name: \"a\", snippet: None },\n+                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n     }\n \n     #[test]\n     fn test_completion_for_scope() {\n-        do_check(r\"\n+        check_scope_completion(r\"\n             fn quux() {\n                 for x in &[1, 2, 3] {\n                     <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"x\" },\n-                   CompletionItem { name: \"quux\" }]\"#);\n+            \", r#\"[CompletionItem { name: \"x\", snippet: None },\n+                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n     }\n \n     #[test]\n     fn test_completion_mod_scope() {\n-        do_check(r\"\n+        check_scope_completion(r\"\n             struct Foo;\n             enum Baz {}\n             fn quux() {\n                 <|>\n             }\n-            \", r#\"[CompletionItem { name: \"Foo\" },\n-                   CompletionItem { name: \"Baz\" },\n-                   CompletionItem { name: \"quux\" }]\"#);\n+            \", r#\"[CompletionItem { name: \"Foo\", snippet: None },\n+                   CompletionItem { name: \"Baz\", snippet: None },\n+                   CompletionItem { name: \"quux\", snippet: None }]\"#);\n+    }\n+\n+    #[test]\n+    fn test_completion_kewords() {\n+        check_snippet_completion(r\"\n+            fn quux() {\n+                <|>\n+            }\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") }]\"#);\n+    }\n+\n+    #[test]\n+    fn test_completion_else() {\n+        check_snippet_completion(r\"\n+            fn quux() {\n+                if true {\n+                    ()\n+                } <|>\n+            }\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+                   CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n+                   CompletionItem { name: \"else\", snippet: Some(\"else {$0}\") },\n+                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 { }\") }]\"#);\n     }\n }"}, {"sha": "3e5a83290e220ceb020cdae82ab61858b8052e8c", "filename": "crates/libsyntax2/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2FCargo.toml?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -6,7 +6,7 @@ license = \"MIT OR Apache-2.0\"\n \n [dependencies]\n unicode-xid = \"0.1.0\"\n-text_unit = \"0.1.3\"\n+text_unit = \"0.1.4\"\n itertools = \"0.7.8\"\n drop_bomb = \"0.1.4\"\n parking_lot = \"0.6.0\""}, {"sha": "e8743caa8d86f102c97b6472c95a6059edbcc148", "filename": "crates/libsyntax2/src/ast/generated.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fast%2Fgenerated.rs?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -523,6 +523,10 @@ impl<'a> FnDef<'a> {\n     pub fn body(self) -> Option<Block<'a>> {\n         super::child_opt(self)\n     }\n+\n+    pub fn ret_type(self) -> Option<RetType<'a>> {\n+        super::child_opt(self)\n+    }\n }\n \n // FnPointerType\n@@ -1412,6 +1416,24 @@ impl<'a> AstNode<'a> for ReferenceType<'a> {\n \n impl<'a> ReferenceType<'a> {}\n \n+// RetType\n+#[derive(Debug, Clone, Copy)]\n+pub struct RetType<'a> {\n+    syntax: SyntaxNodeRef<'a>,\n+}\n+\n+impl<'a> AstNode<'a> for RetType<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            RET_TYPE => Some(RetType { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<'a> RetType<'a> {}\n+\n // ReturnExpr\n #[derive(Debug, Clone, Copy)]\n pub struct ReturnExpr<'a> {"}, {"sha": "f1907d1ce23bfb2d0b90d7fd6b93ee8759d6aec4", "filename": "crates/libsyntax2/src/grammar.ron", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar.ron?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -119,6 +119,7 @@ Grammar(\n         \"STRUCT_DEF\",\n         \"ENUM_DEF\",\n         \"FN_DEF\",\n+        \"RET_TYPE\",\n         \"EXTERN_CRATE_ITEM\",\n         \"MODULE\",\n         \"USE_ITEM\",\n@@ -252,8 +253,10 @@ Grammar(\n             options: [\n                 [\"param_list\", \"ParamList\"],\n                 [\"body\", \"Block\"],\n+                [\"ret_type\", \"RetType\"]\n             ],\n         ),\n+        \"RetType\": (),\n         \"StructDef\": (\n             traits: [\n                 \"NameOwner\","}, {"sha": "1acecac410b120df529933d40a74f4c56cba9091", "filename": "crates/libsyntax2/src/grammar/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fgrammar%2Fmod.rs?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -119,8 +119,10 @@ fn abi(p: &mut Parser) {\n \n fn opt_fn_ret_type(p: &mut Parser) -> bool {\n     if p.at(THIN_ARROW) {\n+        let m = p.start();\n         p.bump();\n         types::type_(p);\n+        m.complete(p, RET_TYPE);\n         true\n     } else {\n         false"}, {"sha": "7882bded91c4e1ceb978de5ba07bf4ae3a8083c6", "filename": "crates/libsyntax2/src/syntax_kinds/generated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -119,6 +119,7 @@ pub enum SyntaxKind {\n     STRUCT_DEF,\n     ENUM_DEF,\n     FN_DEF,\n+    RET_TYPE,\n     EXTERN_CRATE_ITEM,\n     MODULE,\n     USE_ITEM,\n@@ -380,6 +381,7 @@ impl SyntaxKind {\n             STRUCT_DEF => &SyntaxInfo { name: \"STRUCT_DEF\" },\n             ENUM_DEF => &SyntaxInfo { name: \"ENUM_DEF\" },\n             FN_DEF => &SyntaxInfo { name: \"FN_DEF\" },\n+            RET_TYPE => &SyntaxInfo { name: \"RET_TYPE\" },\n             EXTERN_CRATE_ITEM => &SyntaxInfo { name: \"EXTERN_CRATE_ITEM\" },\n             MODULE => &SyntaxInfo { name: \"MODULE\" },\n             USE_ITEM => &SyntaxInfo { name: \"USE_ITEM\" },"}, {"sha": "edd801599ba2f030e23477572f23f3fcf7098e6e", "filename": "crates/libsyntax2/tests/data/parser/err/0010_unsafe_lambda_block.txt", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Ferr%2F0010_unsafe_lambda_block.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -17,13 +17,14 @@ ROOT@[0; 42)\n             PIPE@[16; 17)\n             PIPE@[17; 18)\n           WHITESPACE@[18; 19)\n-          THIN_ARROW@[19; 21)\n-          WHITESPACE@[21; 22)\n-          TUPLE_TYPE@[22; 24)\n-            L_PAREN@[22; 23)\n-            R_PAREN@[23; 24)\n-            err: `expected a block`\n-            err: `expected SEMI`\n+          RET_TYPE@[19; 24)\n+            THIN_ARROW@[19; 21)\n+            WHITESPACE@[21; 22)\n+            TUPLE_TYPE@[22; 24)\n+              L_PAREN@[22; 23)\n+              R_PAREN@[23; 24)\n+              err: `expected a block`\n+              err: `expected SEMI`\n       WHITESPACE@[24; 25)\n       EXPR_STMT@[25; 39)\n         BLOCK_EXPR@[25; 38)"}, {"sha": "203839636da1c01f5aea49235697f067fa982f15", "filename": "crates/libsyntax2/tests/data/parser/inline/0030_fn_pointer_type_with_ret.txt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0030_fn_pointer_type_with_ret.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -13,10 +13,11 @@ ROOT@[0; 21)\n         L_PAREN@[11; 12)\n         R_PAREN@[12; 13)\n       WHITESPACE@[13; 14)\n-      THIN_ARROW@[14; 16)\n-      WHITESPACE@[16; 17)\n-      TUPLE_TYPE@[17; 19)\n-        L_PAREN@[17; 18)\n-        R_PAREN@[18; 19)\n+      RET_TYPE@[14; 19)\n+        THIN_ARROW@[14; 16)\n+        WHITESPACE@[16; 17)\n+        TUPLE_TYPE@[17; 19)\n+          L_PAREN@[17; 18)\n+          R_PAREN@[18; 19)\n     SEMI@[19; 20)\n   WHITESPACE@[20; 21)"}, {"sha": "f6b962b2c9b0f8089414ffd015aefc81a426df46", "filename": "crates/libsyntax2/tests/data/parser/inline/0031_for_type.txt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0031_for_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0031_for_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0031_for_type.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -21,10 +21,11 @@ ROOT@[0; 29)\n           L_PAREN@[19; 20)\n           R_PAREN@[20; 21)\n         WHITESPACE@[21; 22)\n-        THIN_ARROW@[22; 24)\n-        WHITESPACE@[24; 25)\n-        TUPLE_TYPE@[25; 27)\n-          L_PAREN@[25; 26)\n-          R_PAREN@[26; 27)\n+        RET_TYPE@[22; 27)\n+          THIN_ARROW@[22; 24)\n+          WHITESPACE@[24; 25)\n+          TUPLE_TYPE@[25; 27)\n+            L_PAREN@[25; 26)\n+            R_PAREN@[26; 27)\n     SEMI@[27; 28)\n   WHITESPACE@[28; 29)"}, {"sha": "a3d235ce114724bf347e9089c958198380521a91", "filename": "crates/libsyntax2/tests/data/parser/inline/0038_function_ret_type.txt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0038_function_ret_type.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0038_function_ret_type.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0038_function_ret_type.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -21,11 +21,12 @@ ROOT@[0; 30)\n       L_PAREN@[18; 19)\n       R_PAREN@[19; 20)\n     WHITESPACE@[20; 21)\n-    THIN_ARROW@[21; 23)\n-    WHITESPACE@[23; 24)\n-    TUPLE_TYPE@[24; 26)\n-      L_PAREN@[24; 25)\n-      R_PAREN@[25; 26)\n+    RET_TYPE@[21; 26)\n+      THIN_ARROW@[21; 23)\n+      WHITESPACE@[23; 24)\n+      TUPLE_TYPE@[24; 26)\n+        L_PAREN@[24; 25)\n+        R_PAREN@[25; 26)\n     WHITESPACE@[26; 27)\n     BLOCK@[27; 29)\n       L_CURLY@[27; 28)"}, {"sha": "6f8304db35d6c2fa737ad31b0258a5d32bba6a2f", "filename": "crates/libsyntax2/tests/data/parser/inline/0066_lambda_expr.txt", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0066_lambda_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0066_lambda_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0066_lambda_expr.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -28,13 +28,14 @@ ROOT@[0; 79)\n             PIPE@[26; 27)\n             PIPE@[27; 28)\n           WHITESPACE@[28; 29)\n-          THIN_ARROW@[29; 31)\n-          WHITESPACE@[31; 32)\n-          PATH_TYPE@[32; 35)\n-            PATH@[32; 35)\n-              PATH_SEGMENT@[32; 35)\n-                NAME_REF@[32; 35)\n-                  IDENT@[32; 35) \"i32\"\n+          RET_TYPE@[29; 35)\n+            THIN_ARROW@[29; 31)\n+            WHITESPACE@[31; 32)\n+            PATH_TYPE@[32; 35)\n+              PATH@[32; 35)\n+                PATH_SEGMENT@[32; 35)\n+                  NAME_REF@[32; 35)\n+                    IDENT@[32; 35) \"i32\"\n           WHITESPACE@[35; 36)\n           BLOCK@[36; 42)\n             L_CURLY@[36; 37)"}, {"sha": "26a690d3ad16d418a9bbc973a5bd91539d604878", "filename": "crates/libsyntax2/tests/data/parser/inline/0093_path_fn_trait_args.txt", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0093_path_fn_trait_args.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0093_path_fn_trait_args.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0093_path_fn_trait_args.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -35,11 +35,12 @@ ROOT@[0; 32)\n                                 IDENT@[19; 22) \"i32\"\n                       R_PAREN@[22; 23)\n                     WHITESPACE@[23; 24)\n-                    THIN_ARROW@[24; 26)\n-                    WHITESPACE@[26; 27)\n-                    TUPLE_TYPE@[27; 29)\n-                      L_PAREN@[27; 28)\n-                      R_PAREN@[28; 29)\n+                    RET_TYPE@[24; 29)\n+                      THIN_ARROW@[24; 26)\n+                      WHITESPACE@[26; 27)\n+                      TUPLE_TYPE@[27; 29)\n+                        L_PAREN@[27; 28)\n+                        R_PAREN@[28; 29)\n             R_ANGLE@[29; 30)\n     SEMI@[30; 31)\n   WHITESPACE@[31; 32)"}, {"sha": "4b864f74150e95d9643cee104c20f6bc1155b774", "filename": "crates/libsyntax2/tests/data/parser/inline/0095_path_type_with_bounds.txt", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0095_path_type_with_bounds.txt", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0095_path_type_with_bounds.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibsyntax2%2Ftests%2Fdata%2Fparser%2Finline%2F0095_path_type_with_bounds.txt?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -8,26 +8,27 @@ ROOT@[0; 27)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n     WHITESPACE@[8; 9)\n-    THIN_ARROW@[9; 11)\n-    WHITESPACE@[11; 12)\n-    PATH_TYPE@[12; 23)\n-      PATH@[12; 23)\n-        PATH_SEGMENT@[12; 23)\n-          NAME_REF@[12; 15)\n-            IDENT@[12; 15) \"Box\"\n-          TYPE_ARG_LIST@[15; 23)\n-            L_ANGLE@[15; 16)\n-            TYPE_ARG@[16; 22)\n-              PATH_TYPE@[16; 22)\n-                PATH@[16; 17)\n-                  PATH_SEGMENT@[16; 17)\n-                    NAME_REF@[16; 17)\n-                      IDENT@[16; 17) \"T\"\n-                WHITESPACE@[17; 18)\n-                PLUS@[18; 19)\n-                WHITESPACE@[19; 20)\n-                LIFETIME@[20; 22) \"'f\"\n-            R_ANGLE@[22; 23)\n+    RET_TYPE@[9; 23)\n+      THIN_ARROW@[9; 11)\n+      WHITESPACE@[11; 12)\n+      PATH_TYPE@[12; 23)\n+        PATH@[12; 23)\n+          PATH_SEGMENT@[12; 23)\n+            NAME_REF@[12; 15)\n+              IDENT@[12; 15) \"Box\"\n+            TYPE_ARG_LIST@[15; 23)\n+              L_ANGLE@[15; 16)\n+              TYPE_ARG@[16; 22)\n+                PATH_TYPE@[16; 22)\n+                  PATH@[16; 17)\n+                    PATH_SEGMENT@[16; 17)\n+                      NAME_REF@[16; 17)\n+                        IDENT@[16; 17) \"T\"\n+                  WHITESPACE@[17; 18)\n+                  PLUS@[18; 19)\n+                  WHITESPACE@[19; 20)\n+                  LIFETIME@[20; 22) \"'f\"\n+              R_ANGLE@[22; 23)\n     WHITESPACE@[23; 24)\n     BLOCK@[24; 26)\n       L_CURLY@[24; 25)"}, {"sha": "3ee0873f4d437df539121ef75426efb9d004252d", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2257c08cb159a30492bf2aec172539b1dd504700/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=2257c08cb159a30492bf2aec172539b1dd504700", "patch": "@@ -4,7 +4,7 @@ use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n     Command, TextDocumentIdentifier, WorkspaceEdit,\n     SymbolInformation, Position, Location, TextEdit,\n-    CompletionItem,\n+    CompletionItem, InsertTextFormat, CompletionItemKind,\n };\n use serde_json::{to_value, from_value};\n use url_serde;\n@@ -331,9 +331,17 @@ pub fn handle_completion(\n         Some(items) => items,\n     };\n     let items = items.into_iter()\n-        .map(|item| CompletionItem {\n-            label: item.name,\n-            .. Default::default()\n+        .map(|item| {\n+            let mut res = CompletionItem {\n+                label: item.name,\n+                .. Default::default()\n+            };\n+            if let Some(snip) = item.snippet {\n+                res.insert_text = Some(snip);\n+                res.insert_text_format = Some(InsertTextFormat::Snippet);\n+                res.kind = Some(CompletionItemKind::Keyword);\n+            };\n+            res\n         })\n         .collect();\n "}]}