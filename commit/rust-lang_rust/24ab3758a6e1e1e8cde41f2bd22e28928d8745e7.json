{"sha": "24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWIzNzU4YTZlMWUxZThjZGU0MWYyYmQyMmUyODkyOGQ4NzQ1ZTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-28T16:20:56Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-07T15:37:47Z"}, "message": "remove all references to `private` from outside the macro", "tree": {"sha": "ee27d92d341455b670c0cb5ff9e8da5a1cb9e69c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee27d92d341455b670c0cb5ff9e8da5a1cb9e69c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "html_url": "https://github.com/rust-lang/rust/commit/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09", "html_url": "https://github.com/rust-lang/rust/commit/6ccf9b8134653a7b2330e5ccc874b7cf8bb65d09"}], "stats": {"total": 100, "additions": 63, "deletions": 37}, "files": [{"sha": "c4cfb502923356cf36d395d8232abd4dae789b1b", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "patch": "@@ -44,7 +44,9 @@ newtype_index! {\n }\n \n impl DepNodeIndex {\n-    const INVALID: DepNodeIndex = DepNodeIndex { private: ::std::u32::MAX };\n+    const INVALID: DepNodeIndex = unsafe {\n+        DepNodeIndex::from_u32_unchecked(::std::u32::MAX)\n+    };\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n@@ -1127,14 +1129,16 @@ impl DepNodeColorMap {\n         match self.values[index] {\n             COMPRESSED_NONE => None,\n             COMPRESSED_RED => Some(DepNodeColor::Red),\n-            value => Some(DepNodeColor::Green(DepNodeIndex { private: value - COMPRESSED_FIRST_GREEN })),\n+            value => Some(DepNodeColor::Green(DepNodeIndex::from_u32(\n+                value - COMPRESSED_FIRST_GREEN\n+            )))\n         }\n     }\n \n     fn insert(&mut self, index: SerializedDepNodeIndex, color: DepNodeColor) {\n         self.values[index] = match color {\n             DepNodeColor::Red => COMPRESSED_RED,\n-            DepNodeColor::Green(index) => index.private + COMPRESSED_FIRST_GREEN,\n+            DepNodeColor::Green(index) => index.as_u32() + COMPRESSED_FIRST_GREEN,\n         }\n     }\n }"}, {"sha": "ae5da1bfafda2b771ebcdd96cd4b1a437bc80208", "filename": "src/librustc/hir/def_id.rs", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fhir%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fhir%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef_id.rs?ref=24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "patch": "@@ -41,27 +41,15 @@ newtype_index! {\n impl CrateNum {\n     pub fn new(x: usize) -> CrateNum {\n         assert!(x < (u32::MAX as usize));\n-        CrateNum { private: x as u32 }\n-    }\n-\n-    pub fn from_u32(x: u32) -> CrateNum {\n-        CrateNum { private: x }\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.private as usize\n-    }\n-\n-    pub fn as_u32(&self) -> u32 {\n-        u32::from(*self)\n+        CrateNum::from_u32(x as u32)\n     }\n \n     pub fn as_def_id(&self) -> DefId { DefId { krate: *self, index: CRATE_DEF_INDEX } }\n }\n \n impl fmt::Display for CrateNum {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        fmt::Display::fmt(&self.private, f)\n+        fmt::Display::fmt(&self.as_u32(), f)\n     }\n }\n "}, {"sha": "c6a1281061fe430ec6eb5816d34b0194276ba58d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "patch": "@@ -131,9 +131,6 @@ pub struct Mir<'tcx> {\n     cache: cache::Cache,\n }\n \n-/// where execution begins\n-pub const START_BLOCK: BasicBlock = BasicBlock { private: 0 };\n-\n impl<'tcx> Mir<'tcx> {\n     pub fn new(\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n@@ -239,7 +236,7 @@ impl<'tcx> Mir<'tcx> {\n \n     #[inline]\n     pub fn local_kind(&self, local: Local) -> LocalKind {\n-        let index = local.private as usize;\n+        let index = local.as_usize();\n         if index == 0 {\n             debug_assert!(\n                 self.local_decls[local].mutability == Mutability::Mut,\n@@ -855,7 +852,8 @@ pub struct UpvarDecl {\n \n newtype_index! {\n     pub struct BasicBlock {\n-        DEBUG_FORMAT = \"bb{}\"\n+        DEBUG_FORMAT = \"bb{}\",\n+        const START_BLOCK = 0,\n     }\n }\n "}, {"sha": "fc5faf235764b78e88d5367689e7622d8192a106", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "patch": "@@ -1274,7 +1274,9 @@ impl DebruijnIndex {\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n     pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex { private: self.private + amount }\n+        unsafe {\n+            DebruijnIndex::from_u32_unchecked(self.as_u32() + amount)\n+        }\n     }\n \n     /// Update this index in place by shifting it \"in\" through\n@@ -1287,7 +1289,9 @@ impl DebruijnIndex {\n     /// `amount` number of new binders.\n     #[must_use]\n     pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex { private: self.private - amount }\n+        unsafe {\n+            DebruijnIndex::from_u32_unchecked(self.as_u32() - amount)\n+        }\n     }\n \n     /// Update in place by shifting out from `amount` binders.\n@@ -1316,7 +1320,7 @@ impl DebruijnIndex {\n     /// bound by one of the binders we are shifting out of, that is an\n     /// error (and should fail an assertion failure).\n     pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {\n-        self.shifted_out((to_binder.private - INNERMOST.private) as u32)\n+        self.shifted_out(to_binder.as_u32() - INNERMOST.as_u32())\n     }\n }\n "}, {"sha": "79e9a00fb35b713abdf71a17f18f95a5586ff945", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ab3758a6e1e1e8cde41f2bd22e28928d8745e7/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=24ab3758a6e1e1e8cde41f2bd22e28928d8745e7", "patch": "@@ -102,23 +102,55 @@ macro_rules! newtype_index {\n         }\n \n         impl $type {\n+            #[inline]\n+            $v fn from_usize(value: usize) -> Self {\n+                assert!(value < ($max as usize));\n+                unsafe {\n+                    $type::from_u32_unchecked(value as u32)\n+                }\n+            }\n+\n+            #[inline]\n+            $v fn from_u32(value: u32) -> Self {\n+                assert!(value < $max);\n+                unsafe {\n+                    $type::from_u32_unchecked(value)\n+                }\n+            }\n+\n+            #[inline]\n+            $v const unsafe fn from_u32_unchecked(value: u32) -> Self {\n+                $type { private: value }\n+            }\n+\n             /// Extract value of this index as an integer.\n             #[inline]\n             $v fn index(self) -> usize {\n-                <Self as Idx>::index(self)\n+                self.as_usize()\n+            }\n+\n+            /// Extract value of this index as a usize.\n+            #[inline]\n+            $v const fn as_u32(self) -> u32 {\n+                self.private\n+            }\n+\n+            /// Extract value of this index as a u32.\n+            #[inline]\n+            $v const fn as_usize(self) -> usize {\n+                self.private as usize\n             }\n         }\n \n         impl Idx for $type {\n             #[inline]\n             fn new(value: usize) -> Self {\n-                assert!(value < ($max) as usize);\n-                $type { private: value as u32 }\n+                Self::from(value)\n             }\n \n             #[inline]\n             fn index(self) -> usize {\n-                self.private as usize\n+                usize::from(self)\n             }\n         }\n \n@@ -153,25 +185,25 @@ macro_rules! newtype_index {\n \n         impl From<$type> for u32 {\n             fn from(v: $type) -> u32 {\n-                v.private\n+                v.as_u32()\n             }\n         }\n \n         impl From<$type> for usize {\n             fn from(v: $type) -> usize {\n-                v.private as usize\n+                v.as_usize()\n             }\n         }\n \n         impl From<usize> for $type {\n-            fn from(v: usize) -> Self {\n-                Self::new(v)\n+            fn from(value: usize) -> Self {\n+                $type::from_usize(value)\n             }\n         }\n \n         impl From<u32> for $type {\n-            fn from(v: u32) -> Self {\n-                Self::new(v as usize)\n+            fn from(value: u32) -> Self {\n+                $type::from_u32(value)\n             }\n         }\n \n@@ -195,7 +227,7 @@ macro_rules! newtype_index {\n      @debug_format [$debug_format:tt]) => (\n         impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n-                write!(fmt, $debug_format, self.private)\n+                write!(fmt, $debug_format, self.as_u32())\n             }\n         }\n     );\n@@ -378,7 +410,7 @@ macro_rules! newtype_index {\n                    const $name:ident = $constant:expr,\n                    $($tokens:tt)*) => (\n         $(#[doc = $doc])*\n-        pub const $name: $type = $type { private: $constant  };\n+        pub const $name: $type = unsafe { $type::from_u32_unchecked($constant) };\n         newtype_index!(\n             @derives      [$($derives,)*]\n             @type         [$type]"}]}