{"sha": "beca92b245953873d273f19a08c7a927e5a3ed78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlY2E5MmIyNDU5NTM4NzNkMjczZjE5YTA4YzdhOTI3ZTVhM2VkNzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T13:40:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T13:40:00Z"}, "message": "internal: make invert binary op more robust\n\nPreviously, we only inverted comparison operators (< and the like) if\nthe type implemented Ord. This doesn't make sense: if `<` works, then\n`>=` will work as well!\n\nExtra semantic checks greatly reduce robustness and predictability of\nthe assist, it's better to keep things simple.", "tree": {"sha": "d9aaf3fdf1442e9d24c694bfcf769bb64a7145f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9aaf3fdf1442e9d24c694bfcf769bb64a7145f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/beca92b245953873d273f19a08c7a927e5a3ed78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/beca92b245953873d273f19a08c7a927e5a3ed78", "html_url": "https://github.com/rust-lang/rust/commit/beca92b245953873d273f19a08c7a927e5a3ed78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/beca92b245953873d273f19a08c7a927e5a3ed78/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49dbb74a0b4af13e8c83c667fcddb6ff1a931c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/49dbb74a0b4af13e8c83c667fcddb6ff1a931c8d", "html_url": "https://github.com/rust-lang/rust/commit/49dbb74a0b4af13e8c83c667fcddb6ff1a931c8d"}], "stats": {"total": 131, "additions": 22, "deletions": 109}, "files": [{"sha": "cafc4297fdeacb31169a1f8e4187601528e22e88", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 9, "deletions": 64, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -19,7 +19,7 @@ use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKin\n // ->\n // ```\n // fn main() {\n-//     if !(x == 4 && !(y < 3.14)) {}\n+//     if !(x == 4 && y >= 3.14) {}\n // }\n // ```\n pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -99,7 +99,7 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             if let Some(paren_expr) = paren_expr {\n                 for term in terms {\n                     let range = term.syntax().text_range();\n-                    let not_term = invert_boolean_expression(&ctx.sema, term);\n+                    let not_term = invert_boolean_expression(term);\n \n                     edit.replace(range, not_term.syntax().text());\n                 }\n@@ -114,21 +114,21 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n             } else {\n                 if let Some(lhs) = terms.pop_front() {\n                     let lhs_range = lhs.syntax().text_range();\n-                    let not_lhs = invert_boolean_expression(&ctx.sema, lhs);\n+                    let not_lhs = invert_boolean_expression(lhs);\n \n                     edit.replace(lhs_range, format!(\"!({}\", not_lhs.syntax().text()));\n                 }\n \n                 if let Some(rhs) = terms.pop_back() {\n                     let rhs_range = rhs.syntax().text_range();\n-                    let not_rhs = invert_boolean_expression(&ctx.sema, rhs);\n+                    let not_rhs = invert_boolean_expression(rhs);\n \n                     edit.replace(rhs_range, format!(\"{})\", not_rhs.syntax().text()));\n                 }\n \n                 for term in terms {\n                     let term_range = term.syntax().text_range();\n-                    let not_term = invert_boolean_expression(&ctx.sema, term);\n+                    let not_term = invert_boolean_expression(term);\n                     edit.replace(term_range, not_term.syntax().text());\n                 }\n             }\n@@ -156,40 +156,12 @@ mod tests {\n         check_assist(\n             apply_demorgan,\n             r#\"\n-//- minicore: ord, derive\n-#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S;\n-\n-fn f() {\n-    S < S &&$0 S <= S\n-}\n-\"#,\n-            r#\"\n-#[derive(PartialEq, Eq, PartialOrd, Ord)]\n-struct S;\n-\n-fn f() {\n-    !(S >= S || S > S)\n-}\n-\"#,\n-        );\n-\n-        check_assist(\n-            apply_demorgan,\n-            r#\"\n-//- minicore: ord, derive\n-struct S;\n-\n-fn f() {\n-    S < S &&$0 S <= S\n-}\n+fn f() { S < S &&$0 S <= S }\n \"#,\n             r#\"\n struct S;\n-\n-fn f() {\n-    !(!(S < S) || !(S <= S))\n-}\n+fn f() { !(S >= S || S > S) }\n \"#,\n         );\n     }\n@@ -199,39 +171,12 @@ fn f() {\n         check_assist(\n             apply_demorgan,\n             r#\"\n-//- minicore: ord, derive\n-#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S;\n-\n-fn f() {\n-    S > S &&$0 S >= S\n-}\n+fn f() { S > S &&$0 S >= S }\n \"#,\n             r#\"\n-#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S;\n-\n-fn f() {\n-    !(S <= S || S < S)\n-}\n-\"#,\n-        );\n-        check_assist(\n-            apply_demorgan,\n-            r#\"\n-//- minicore: ord, derive\n-struct S;\n-\n-fn f() {\n-    S > S &&$0 S >= S\n-}\n-\"#,\n-            r#\"\n-struct S;\n-\n-fn f() {\n-    !(!(S > S) || !(S >= S))\n-}\n+fn f() { !(S <= S || S < S) }\n \"#,\n         );\n     }"}, {"sha": "5adb3f5a1b3cccf9eaf357d3e00dd4a768cf8cd7", "filename": "crates/ide_assists/src/handlers/convert_bool_then.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_bool_then.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -97,7 +97,7 @@ pub(crate) fn convert_if_to_bool_then(acc: &mut Assists, ctx: &AssistContext) ->\n                 e => e,\n             };\n \n-            let cond = if invert_cond { invert_boolean_expression(&ctx.sema, cond) } else { cond };\n+            let cond = if invert_cond { invert_boolean_expression(cond) } else { cond };\n             let arg_list = make::arg_list(Some(make::expr_closure(None, closure_body)));\n             let mcall = make::expr_method_call(cond, make::name_ref(\"then\"), arg_list);\n             builder.replace(target, mcall.to_string());"}, {"sha": "1b3fa898bb71491abcf95baca074c67136a3b513", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -115,7 +115,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                     let new_expr = {\n                         let then_branch =\n                             make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                        let cond = invert_boolean_expression(&ctx.sema, cond_expr);\n+                        let cond = invert_boolean_expression(cond_expr);\n                         make::expr_if(make::condition(cond, None), then_branch, None)\n                             .indent(if_indent_level)\n                     };"}, {"sha": "50845cd9e03e2d8552a8d620b0ca839865e1560e", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     acc.add(AssistId(\"invert_if\", AssistKind::RefactorRewrite), \"Invert if\", if_range, |edit| {\n-        let flip_cond = invert_boolean_expression(&ctx.sema, cond.clone());\n+        let flip_cond = invert_boolean_expression(cond.clone());\n         edit.replace_ast(cond, flip_cond);\n \n         let else_node = else_block.syntax();"}, {"sha": "853c41f78f439c13ef00bb72e3ec496f83918496", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -151,7 +151,7 @@ fn main() {\n \"#####,\n         r#####\"\n fn main() {\n-    if !(x == 4 && !(y < 3.14)) {}\n+    if !(x == 4 && y >= 3.14) {}\n }\n \"#####,\n     )"}, {"sha": "256ddb8c9b2b757c8d298966f37a36179057b2ad", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 9, "deletions": 41, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/beca92b245953873d273f19a08c7a927e5a3ed78/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=beca92b245953873d273f19a08c7a927e5a3ed78", "patch": "@@ -5,12 +5,8 @@ mod gen_trait_fn_body;\n \n use std::ops;\n \n-use hir::{Adt, HasSource, Semantics};\n-use ide_db::{\n-    helpers::{FamousDefs, SnippetCap},\n-    path_transform::PathTransform,\n-    RootDatabase,\n-};\n+use hir::{Adt, HasSource};\n+use ide_db::{helpers::SnippetCap, path_transform::PathTransform, RootDatabase};\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n@@ -207,31 +203,19 @@ pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-pub(crate) fn invert_boolean_expression(\n-    sema: &Semantics<RootDatabase>,\n-    expr: ast::Expr,\n-) -> ast::Expr {\n-    invert_special_case(sema, &expr).unwrap_or_else(|| make::expr_prefix(T![!], expr))\n+pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n+    invert_special_case(&expr).unwrap_or_else(|| make::expr_prefix(T![!], expr))\n }\n \n-fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ast::Expr> {\n+fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n         ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n             ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n             ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n-            // Swap `<` with `>=`, `<=` with `>`, ... if operands `impl Ord`\n-            ast::BinOp::LesserTest if bin_impls_ord(sema, bin) => {\n-                bin.replace_op(T![>=]).map(|it| it.into())\n-            }\n-            ast::BinOp::LesserEqualTest if bin_impls_ord(sema, bin) => {\n-                bin.replace_op(T![>]).map(|it| it.into())\n-            }\n-            ast::BinOp::GreaterTest if bin_impls_ord(sema, bin) => {\n-                bin.replace_op(T![<=]).map(|it| it.into())\n-            }\n-            ast::BinOp::GreaterEqualTest if bin_impls_ord(sema, bin) => {\n-                bin.replace_op(T![<]).map(|it| it.into())\n-            }\n+            ast::BinOp::LesserTest => bin.replace_op(T![>=]).map(|it| it.into()),\n+            ast::BinOp::LesserEqualTest => bin.replace_op(T![>]).map(|it| it.into()),\n+            ast::BinOp::GreaterTest => bin.replace_op(T![<=]).map(|it| it.into()),\n+            ast::BinOp::GreaterEqualTest => bin.replace_op(T![<]).map(|it| it.into()),\n             // Parenthesize other expressions before prefixing `!`\n             _ => Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n         },\n@@ -267,22 +251,6 @@ fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Opti\n     }\n }\n \n-fn bin_impls_ord(sema: &Semantics<RootDatabase>, bin: &ast::BinExpr) -> bool {\n-    match (\n-        bin.lhs().and_then(|lhs| sema.type_of_expr(&lhs)).map(hir::TypeInfo::adjusted),\n-        bin.rhs().and_then(|rhs| sema.type_of_expr(&rhs)).map(hir::TypeInfo::adjusted),\n-    ) {\n-        (Some(lhs_ty), Some(rhs_ty)) if lhs_ty == rhs_ty => {\n-            let krate = sema.scope(bin.syntax()).module().map(|it| it.krate());\n-            let ord_trait = FamousDefs(sema, krate).core_cmp_Ord();\n-            ord_trait.map_or(false, |ord_trait| {\n-                lhs_ty.autoderef(sema.db).any(|ty| ty.impls_trait(sema.db, ord_trait, &[]))\n-            })\n-        }\n-        _ => false,\n-    }\n-}\n-\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }"}]}