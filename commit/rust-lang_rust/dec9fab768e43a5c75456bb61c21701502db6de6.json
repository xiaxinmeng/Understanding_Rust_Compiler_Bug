{"sha": "dec9fab768e43a5c75456bb61c21701502db6de6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYzlmYWI3NjhlNDNhNWM3NTQ1NmJiNjFjMjE3MDE1MDJkYjZkZTY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-05T22:43:53Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-02-08T09:53:09Z"}, "message": "Convert python script to rust", "tree": {"sha": "00c644b78a52c56bf8e393ba023fb35089f5bb0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00c644b78a52c56bf8e393ba023fb35089f5bb0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dec9fab768e43a5c75456bb61c21701502db6de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dec9fab768e43a5c75456bb61c21701502db6de6", "html_url": "https://github.com/rust-lang/rust/commit/dec9fab768e43a5c75456bb61c21701502db6de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dec9fab768e43a5c75456bb61c21701502db6de6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1b11d4589e8f7486bfc181286b954c498bba4c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1b11d4589e8f7486bfc181286b954c498bba4c9", "html_url": "https://github.com/rust-lang/rust/commit/b1b11d4589e8f7486bfc181286b954c498bba4c9"}], "stats": {"total": 144, "additions": 81, "deletions": 63}, "files": [{"sha": "afe7f841f2571ff2439bdfa393d6b8ab8fe50d4e", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -2217,6 +2217,10 @@ dependencies = [\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"rustdoc-themes\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"rustdoc-tool\"\n version = \"0.0.0\""}, {"sha": "c03301852cd3b97de7ab1af12570ba23e1b331c7", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -22,6 +22,7 @@ members = [\n   \"tools/rls\",\n   \"tools/rustfmt\",\n   \"tools/miri\",\n+  \"tools/rustdoc-themes\",\n   # FIXME(https://github.com/rust-lang/cargo/issues/4089): move these to exclude\n   \"tools/rls/test_data/bin_lib\",\n   \"tools/rls/test_data/borrow_error\","}, {"sha": "eae8ec1311df7e27a17db51f8911db8cd3ecd9e4", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -113,7 +113,7 @@ impl Step for Linkcheck {\n \n         let _time = util::timeit();\n         try_run(build, builder.tool_cmd(Tool::Linkchecker)\n-                            .arg(build.out.join(host).join(\"doc\")));\n+                              .arg(build.out.join(host).join(\"doc\")));\n     }\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n@@ -427,7 +427,6 @@ fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RustdocTheme {\n     pub compiler: Compiler,\n-    pub host: Interned<String>,\n }\n \n impl Step for RustdocTheme {\n@@ -444,27 +443,25 @@ impl Step for RustdocTheme {\n \n         run.builder.ensure(RustdocTheme {\n             compiler: compiler,\n-            host: run.builder.build.build,\n         });\n     }\n \n     fn run(self, builder: &Builder) {\n         let rustdoc = builder.rustdoc(self.compiler.host);\n-        let mut cmd = Command::new(builder.config.python.clone().expect(\"python not defined\"));\n-        cmd.args(&[builder.src.join(\"src/tools/rustdoc-themes/test-themes.py\").to_str().unwrap(),\n-                   rustdoc.to_str().unwrap(),\n-                   builder.src.join(\"src/librustdoc/html/static/themes\").to_str().unwrap()]);\n-        cmd.env(\"RUSTC_STAGE\", self.compiler.stage.to_string())\n+        let mut cmd = builder.tool_cmd(Tool::RustdocTheme);\n+        cmd.arg(rustdoc.to_str().unwrap())\n+           .arg(builder.src.join(\"src/librustdoc/html/static/themes\").to_str().unwrap())\n+           .env(\"RUSTC_STAGE\", self.compiler.stage.to_string())\n            .env(\"RUSTC_SYSROOT\", builder.sysroot(self.compiler))\n            .env(\"RUSTDOC_LIBDIR\", builder.sysroot_libdir(self.compiler, self.compiler.host))\n            .env(\"CFG_RELEASE_CHANNEL\", &builder.build.config.channel)\n-           .env(\"RUSTDOC_REAL\", builder.rustdoc(self.host))\n+           .env(\"RUSTDOC_REAL\", builder.rustdoc(self.compiler.host))\n            .env(\"RUSTDOC_CRATE_VERSION\", builder.build.rust_version())\n            .env(\"RUSTC_BOOTSTRAP\", \"1\");\n-        if let Some(linker) = builder.build.linker(self.host) {\n+        if let Some(linker) = builder.build.linker(self.compiler.host) {\n             cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n         }\n-        builder.run(&mut cmd);\n+        try_run(builder.build, &mut cmd);\n     }\n }\n "}, {"sha": "9036eb044b5a5677a86d58b15bb0b354de0a0aaf", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -260,6 +260,7 @@ tool!(\n     BuildManifest, \"src/tools/build-manifest\", \"build-manifest\", Mode::Libstd;\n     RemoteTestClient, \"src/tools/remote-test-client\", \"remote-test-client\", Mode::Libstd;\n     RustInstaller, \"src/tools/rust-installer\", \"fabricate\", Mode::Libstd;\n+    RustdocTheme, \"src/tools/rustdoc-themes\", \"rustdoc-themes\", Mode::Libstd;\n );\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]"}, {"sha": "c0e2f527301beb57db6922c47b04a05eb50e74e0", "filename": "src/tools/rustdoc-themes/Cargo.toml", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Ftools%2Frustdoc-themes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Ftools%2Frustdoc-themes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2FCargo.toml?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -0,0 +1,8 @@\n+[package]\n+name = \"rustdoc-themes\"\n+version = \"0.1.0\"\n+authors = [\"Guillaume Gomez <guillaume1.gomez@gmail.com>\"]\n+\n+[[bin]]\n+name = \"rustdoc-themes\"\n+path = \"main.rs\""}, {"sha": "4028cb4e8b6edbaea83ecad7ed0fd9209bf66beb", "filename": "src/tools/rustdoc-themes/main.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dec9fab768e43a5c75456bb61c21701502db6de6/src%2Ftools%2Frustdoc-themes%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Fmain.rs?ref=dec9fab768e43a5c75456bb61c21701502db6de6", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::env::args;\n+use std::fs::read_dir;\n+use std::path::Path;\n+use std::process::{Command, exit};\n+\n+const FILES_TO_IGNORE: &[&str] = &[\"main.css\"];\n+\n+fn get_folders<P: AsRef<Path>>(folder_path: P) -> Vec<String> {\n+    let mut ret = Vec::with_capacity(10);\n+\n+    for entry in read_dir(folder_path.as_ref()).expect(\"read_dir failed\") {\n+        let entry = entry.expect(\"Couldn't unwrap entry\");\n+        let path = entry.path();\n+\n+        if !path.is_file() {\n+            continue\n+        }\n+        let filename = path.file_name().expect(\"file_name failed\");\n+        if FILES_TO_IGNORE.iter().any(|x| x == &filename) {\n+            continue\n+        }\n+        ret.push(format!(\"{}\", path.display()));\n+    }\n+    ret\n+}\n+\n+fn main() {\n+    let argv: Vec<String> = args().collect();\n+\n+    if argv.len() < 3 {\n+        eprintln!(\"Needs rustdoc binary path\");\n+        exit(1);\n+    }\n+    let rustdoc_bin = &argv[1];\n+    let themes_folder = &argv[2];\n+    let themes = get_folders(&themes_folder);\n+    if themes.is_empty() {\n+        eprintln!(\"No theme found in \\\"{}\\\"...\", themes_folder);\n+        exit(1);\n+    }\n+    let status = Command::new(rustdoc_bin)\n+                        .args(&[\"-Z\", \"unstable-options\", \"--theme-checker\"])\n+                        .args(&themes)\n+                        .status()\n+                        .expect(\"failed to execute child\");\n+    if !status.success() {\n+        exit(1);\n+    }\n+}"}, {"sha": "31591277ce356af628eda75f9728e4c9f2e8fbaa", "filename": "src/tools/rustdoc-themes/test-themes.py", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/b1b11d4589e8f7486bfc181286b954c498bba4c9/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py", "raw_url": "https://github.com/rust-lang/rust/raw/b1b11d4589e8f7486bfc181286b954c498bba4c9/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-themes%2Ftest-themes.py?ref=b1b11d4589e8f7486bfc181286b954c498bba4c9", "patch": "@@ -1,52 +0,0 @@\n-#!/usr/bin/env python\n-# -*- coding: utf-8 -*-\n-\n-# Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-from os import listdir\n-from os.path import isfile, join\n-import subprocess\n-import sys\n-\n-FILES_TO_IGNORE = ['main.css']\n-\n-\n-def print_err(msg):\n-    sys.stderr.write('{}\\n'.format(msg))\n-\n-\n-def exec_command(command):\n-    child = subprocess.Popen(command)\n-    stdout, stderr = child.communicate()\n-    return child.returncode\n-\n-\n-def main(argv):\n-    if len(argv) < 2:\n-        print_err(\"Needs rustdoc binary path\")\n-        return 1\n-    rustdoc_bin = argv[0]\n-    themes_folder = argv[1]\n-    themes = [join(themes_folder, f) for f in listdir(themes_folder)\n-              if isfile(join(themes_folder, f)) and f not in FILES_TO_IGNORE]\n-    if len(themes) < 1:\n-        print_err('No theme found in \"{}\"...'.format(themes_folder))\n-        return 1\n-    args = [rustdoc_bin, '-Z', 'unstable-options', '--theme-checker']\n-    args.extend(themes)\n-    return exec_command(args)\n-\n-\n-if __name__ != '__main__':\n-    print_err(\"Needs to be run as main\")\n-    sys.exit(1)\n-else:\n-    sys.exit(main(sys.argv[1:]))"}]}