{"sha": "5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "node_id": "C_kwDOAAsO6NoAKDVjOGJmZjc0YmMxYzUyYmVmMGM3OWYzNjg5YmIyMjdmNTFmM2U4MmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T20:59:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-21T20:59:03Z"}, "message": "Auto merge of #101263 - lopopolo:lopopolo/c-unwind-fn-ptr-impls, r=thomcc\n\nAdd default trait implementations for \"c-unwind\" ABI function pointers\n\nFollowing up on #92964, only add default trait implementations for the `c-unwind` family of function pointers. The previous attempt in #92964 added trait implementations for many more ABIs and ran into concerns regarding the increase in size of the libcore rlib.\n\nAn attempt to abstract away function pointer types behind a unified trait to reduce the duplication of trait impls is being discussed in #99531 but this change looks to be blocked on a lang MCP.\n\nFollowing `@RalfJung's` suggestion in https://github.com/rust-lang/rust/pull/99531#issuecomment-1233440142, this commit is another cut at #92964 but it _only_ adds the impls for `extern \"C-unwind\" fn` and `unsafe extern \"C-unwind\" fn`.\n\nI am interested in landing this patch to unblock the stabilization of the `c_unwind` feature.\n\nRFC: https://github.com/rust-lang/rfcs/pull/2945\nTracking Issue: https://github.com/rust-lang/rust/issues/74990", "tree": {"sha": "2a7a76815d9db8695c48e24f3be754628627b65d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7a76815d9db8695c48e24f3be754628627b65d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "html_url": "https://github.com/rust-lang/rust/commit/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e2c06a8df3187980801962015a88657abd033d", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e2c06a8df3187980801962015a88657abd033d", "html_url": "https://github.com/rust-lang/rust/commit/57e2c06a8df3187980801962015a88657abd033d"}, {"sha": "efe61dab2148ff0780a85b045052e898fd800492", "url": "https://api.github.com/repos/rust-lang/rust/commits/efe61dab2148ff0780a85b045052e898fd800492", "html_url": "https://github.com/rust-lang/rust/commit/efe61dab2148ff0780a85b045052e898fd800492"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "9cbfbbb9f399c67432f8243d2dd218509d3eec21", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "patch": "@@ -174,6 +174,7 @@\n #![feature(allow_internal_unstable)]\n #![feature(associated_type_bounds)]\n #![feature(auto_traits)]\n+#![feature(c_unwind)]\n #![feature(cfg_sanitize)]\n #![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_has_atomic_equal_alignment)]"}, {"sha": "8e2bad35993dfb6b9552d45fe38588647d2fbddd", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "patch": "@@ -1862,9 +1862,16 @@ macro_rules! maybe_fnptr_doc {\n // Impls for function pointers\n macro_rules! fnptr_impls_safety_abi {\n     ($FnTy: ty, $($Arg: ident),*) => {\n+        fnptr_impls_safety_abi! { #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")] $FnTy, $($Arg),* }\n+    };\n+    (@c_unwind $FnTy: ty, $($Arg: ident),*) => {\n+        #[cfg(not(bootstrap))]\n+        fnptr_impls_safety_abi! { #[unstable(feature = \"c_unwind\", issue = \"74990\")] $FnTy, $($Arg),* }\n+    };\n+    (#[$meta:meta] $FnTy: ty, $($Arg: ident),*) => {\n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> PartialEq for $FnTy {\n                 #[inline]\n                 fn eq(&self, other: &Self) -> bool {\n@@ -1875,13 +1882,13 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> Eq for $FnTy {}\n         }\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> PartialOrd for $FnTy {\n                 #[inline]\n                 fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n@@ -1892,7 +1899,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> Ord for $FnTy {\n                 #[inline]\n                 fn cmp(&self, other: &Self) -> Ordering {\n@@ -1903,7 +1910,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> hash::Hash for $FnTy {\n                 fn hash<HH: hash::Hasher>(&self, state: &mut HH) {\n                     state.write_usize(*self as usize)\n@@ -1913,7 +1920,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> fmt::Pointer for $FnTy {\n                 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::pointer_fmt_inner(*self as usize, f)\n@@ -1923,7 +1930,7 @@ macro_rules! fnptr_impls_safety_abi {\n \n         maybe_fnptr_doc! {\n             $($Arg)* @\n-            #[stable(feature = \"fnptr_impls\", since = \"1.4.0\")]\n+            #[$meta]\n             impl<Ret, $($Arg),*> fmt::Debug for $FnTy {\n                 fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                     fmt::pointer_fmt_inner(*self as usize, f)\n@@ -1938,16 +1945,22 @@ macro_rules! fnptr_impls_args {\n         fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n     };\n     () => {\n         // No variadic functions with 0 parameters\n         fnptr_impls_safety_abi! { extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { extern \"C\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { @c_unwind extern \"C-unwind\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn() -> Ret, }\n         fnptr_impls_safety_abi! { unsafe extern \"C\" fn() -> Ret, }\n+        fnptr_impls_safety_abi! { @c_unwind unsafe extern \"C-unwind\" fn() -> Ret, }\n     };\n }\n "}, {"sha": "f9846b62a72f81d4245d651e3e633f15a83501c9", "filename": "src/test/ui/issues/issue-59488.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5c8bff74bc1c52bef0c79f3689bb227f51f3e82d/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-59488.stderr?ref=5c8bff74bc1c52bef0c79f3689bb227f51f3e82d", "patch": "@@ -99,7 +99,7 @@ LL |     assert_eq!(Foo::Bar, i);\n              extern \"C\" fn(A, B, C, D) -> Ret\n              extern \"C\" fn(A, B, C, D, ...) -> Ret\n              extern \"C\" fn(A, B, C, D, E) -> Ret\n-           and 68 others\n+           and 118 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0277]: `fn(usize) -> Foo {Foo::Bar}` doesn't implement `Debug`\n@@ -118,7 +118,7 @@ LL |     assert_eq!(Foo::Bar, i);\n              extern \"C\" fn(A, B, C, D) -> Ret\n              extern \"C\" fn(A, B, C, D, ...) -> Ret\n              extern \"C\" fn(A, B, C, D, E) -> Ret\n-           and 68 others\n+           and 118 others\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 10 previous errors"}]}