{"sha": "a60669d95cdad0e28cf28790b717bbcf235153f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MDY2OWQ5NWNkYWQwZTI4Y2YyODc5MGI3MTdiYmNmMjM1MTUzZjg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-09T23:38:21Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-02-09T23:45:12Z"}, "message": "Properly use parent generics for opaque types\n\nFixes #67844\n\nPreviously, opaque types would only get parent generics if they\na return-position-impl-trait (e.g. `fn foo<A>() -> impl MyTrait<A>`).\n\nHowever, it's possible for opaque types to be nested inside one another:\n\n```rust\ntrait WithAssoc { type AssocType; }\n\ntrait WithParam<A> {}\n\ntype Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n```\n\nWhen this occurs, we need to ensure that the nested opaque types\nproperly inherit generic parameters from their parent opaque type.\n\nThis commit fixes the `generics_of` query to take the parent item\ninto account when determining the generics for an opaque type.", "tree": {"sha": "c7fea4103952ea5385912f4ce5d7884f2d998e97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7fea4103952ea5385912f4ce5d7884f2d998e97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a60669d95cdad0e28cf28790b717bbcf235153f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl5AmjUACgkQtAh+UQ6Y\nsWR+KA//ZpNUPV0ERpLpz1riQL26Mo8p8ei9JW6VTvBMl+ws9FGjoGgbtjtTn8um\n8QJ5ijmTbnrlIAkqut7TTKUVPhUlzaKD4VzAf8K+acRgyGDOSPJOeaKBxKcO1v1k\ngruOTulMy17JkZV742F55vTqxbMvkXEXEfH7E2+SD5fkqqfIrTpF+QYsh8k5M60D\nvmcv13TC74mE8zxnIyznsQ1XzZI/h8XMQKPwr0dSdnBEEH3xUFaGuvzNFD9HpFqJ\nHAltSmqRRfha8bd+cpIiC3RVeL71c+HCVRDss8zJ7pl1OsckXMHdiCxAGwdQ83fL\nFI2PdLyVnJktvzPJHYwlglruYKegS1TyCWIT6kxv5koM0ULyidlwzAa+Yji8jfyo\niPOmteonLIPHyZYex4BX2WKrY5qQdzjU9CSVcnSYQxy0L3b63R7NReeLQA4HfKYG\n374S5yQmjYnn9kbv8rxQnPFP8u/m602AmtxroV8ZhD54ivTlY1jC+2+uNEj1Cd8x\n6UR4C6glPhC+UA6fnzt8jsc2fLdwXN/qrdjGfh00Of/Kyqoafy0PU7itbCZZdeTs\nKW54E0Mq5fV2k8mDRYlBuhKnl6IJgc5pQlrrebRb+M9XE251fkiR+E55ac15QKQJ\n+9nmPxGYcYrgxQiikWGOKQRW9kIWgVIwEonNpzK/vy2rEtvV0Ws=\n=XUe9\n-----END PGP SIGNATURE-----", "payload": "tree c7fea4103952ea5385912f4ce5d7884f2d998e97\nparent 71c7e149e42cb0fc78a80db70d2525973311d488\nauthor Aaron Hill <aa1ronham@gmail.com> 1581291501 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1581291912 -0500\n\nProperly use parent generics for opaque types\n\nFixes #67844\n\nPreviously, opaque types would only get parent generics if they\na return-position-impl-trait (e.g. `fn foo<A>() -> impl MyTrait<A>`).\n\nHowever, it's possible for opaque types to be nested inside one another:\n\n```rust\ntrait WithAssoc { type AssocType; }\n\ntrait WithParam<A> {}\n\ntype Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n```\n\nWhen this occurs, we need to ensure that the nested opaque types\nproperly inherit generic parameters from their parent opaque type.\n\nThis commit fixes the `generics_of` query to take the parent item\ninto account when determining the generics for an opaque type.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a60669d95cdad0e28cf28790b717bbcf235153f8", "html_url": "https://github.com/rust-lang/rust/commit/a60669d95cdad0e28cf28790b717bbcf235153f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a60669d95cdad0e28cf28790b717bbcf235153f8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71c7e149e42cb0fc78a80db70d2525973311d488", "url": "https://api.github.com/repos/rust-lang/rust/commits/71c7e149e42cb0fc78a80db70d2525973311d488", "html_url": "https://github.com/rust-lang/rust/commit/71c7e149e42cb0fc78a80db70d2525973311d488"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "49b1bfb72a3553e64cfb00ac319fe3fc7be6c8d2", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a60669d95cdad0e28cf28790b717bbcf235153f8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60669d95cdad0e28cf28790b717bbcf235153f8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a60669d95cdad0e28cf28790b717bbcf235153f8", "patch": "@@ -1054,7 +1054,19 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n             Some(tcx.closure_base_def_id(def_id))\n         }\n         Node::Item(item) => match item.kind {\n-            ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => impl_trait_fn,\n+            ItemKind::OpaqueTy(hir::OpaqueTy { impl_trait_fn, .. }) => {\n+                impl_trait_fn.or_else(|| {\n+                    let parent_id = tcx.hir().get_parent_item(hir_id);\n+                    // This opaque type might occur inside another opaque type\n+                    // (e.g. `impl Foo<MyType = impl Bar<A>>`)\n+                    if parent_id != hir_id && parent_id != CRATE_HIR_ID {\n+                        debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n+                        Some(tcx.hir().local_def_id(parent_id))\n+                    } else {\n+                        None\n+                    }\n+                })\n+            }\n             _ => None,\n         },\n         _ => None,"}, {"sha": "2f844b4a05f5f6bc884a35b0ee2ad11b8b3a6c85", "filename": "src/test/ui/type-alias-impl-trait/issue-67844-nested-opaque.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a60669d95cdad0e28cf28790b717bbcf235153f8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a60669d95cdad0e28cf28790b717bbcf235153f8/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-67844-nested-opaque.rs?ref=a60669d95cdad0e28cf28790b717bbcf235153f8", "patch": "@@ -0,0 +1,32 @@\n+// check-pass\n+// Regression test for issue #67844\n+// Ensures that we properly handle nested TAIT occurences\n+// with generic parameters\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait WithAssoc { type AssocType; }\n+\n+trait WithParam<A> {}\n+\n+type Return<A> = impl WithAssoc<AssocType = impl WithParam<A>>;\n+\n+struct MyParam;\n+impl<A> WithParam<A> for MyParam {}\n+\n+struct MyStruct;\n+\n+impl WithAssoc for MyStruct {\n+    type AssocType = MyParam;\n+}\n+\n+\n+fn my_fun<A>() -> Return<A> {\n+    MyStruct\n+}\n+\n+fn my_other_fn<A>() -> impl WithAssoc<AssocType = impl WithParam<A>> {\n+    MyStruct\n+}\n+\n+fn main() {}"}]}