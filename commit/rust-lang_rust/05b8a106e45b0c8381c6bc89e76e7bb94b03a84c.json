{"sha": "05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1YjhhMTA2ZTQ1YjBjODM4MWM2YmM4OWU3NmU3YmI5NGIwM2E4NGM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-03T17:50:32Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-04-04T07:23:40Z"}, "message": "Encode more precise scoping rules for function params.\n\nFunction params which outlive everything in the body (incl\ntemporaries).  Thus if we assign them their own `CodeExtent`, the\nregion inference can properly show that it is sound to have\ntemporaries with destructors that reference the parameters (because\nsuch temporaries will be dropped before the parameters are).\n\nThis allows us to address issue 23338 in a clean way.\n\nAs a drive-by, fix a mistake in the tyencode for\n`CodeExtent::BlockRemainder`.", "tree": {"sha": "f61eccebacd9d2a5ff64783ca5e0095e52d58d8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f61eccebacd9d2a5ff64783ca5e0095e52d58d8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "html_url": "https://github.com/rust-lang/rust/commit/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1835ae7cc175b9aff383432e934e7ad13825ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1835ae7cc175b9aff383432e934e7ad13825ebc", "html_url": "https://github.com/rust-lang/rust/commit/d1835ae7cc175b9aff383432e934e7ad13825ebc"}], "stats": {"total": 61, "additions": 54, "deletions": 7}, "files": [{"sha": "8030275ef303a0bbd08624c12021589c224f9f28", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "patch": "@@ -373,6 +373,16 @@ fn parse_region_<F>(st: &mut PState, conv: &mut F) -> ty::Region where\n \n fn parse_scope(st: &mut PState) -> region::CodeExtent {\n     match next(st) {\n+        'P' => {\n+            assert_eq!(next(st), '[');\n+            let fn_id = parse_uint(st) as ast::NodeId;\n+            assert_eq!(next(st), '|');\n+            let body_id = parse_uint(st) as ast::NodeId;\n+            assert_eq!(next(st), ']');\n+            region::CodeExtent::ParameterScope {\n+                fn_id: fn_id, body_id: body_id\n+            }\n+        }\n         'M' => {\n             let node_id = parse_uint(st) as ast::NodeId;\n             region::CodeExtent::Misc(node_id)\n@@ -382,8 +392,11 @@ fn parse_scope(st: &mut PState) -> region::CodeExtent {\n             region::CodeExtent::DestructionScope(node_id)\n         }\n         'B' => {\n+            assert_eq!(next(st), '[');\n             let node_id = parse_uint(st) as ast::NodeId;\n+            assert_eq!(next(st), '|');\n             let first_stmt_index = parse_uint(st);\n+            assert_eq!(next(st), ']');\n             let block_remainder = region::BlockRemainder {\n                 block: node_id, first_statement_index: first_stmt_index,\n             };"}, {"sha": "90a905f1840714401c9cfe4ec1c36b5ffe5ed7c9", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "patch": "@@ -275,9 +275,11 @@ pub fn enc_region(w: &mut Encoder, cx: &ctxt, r: ty::Region) {\n \n fn enc_scope(w: &mut Encoder, _cx: &ctxt, scope: region::CodeExtent) {\n     match scope {\n+        region::CodeExtent::ParameterScope {\n+            fn_id, body_id } => mywrite!(w, \"P[{}|{}]\", fn_id, body_id),\n         region::CodeExtent::Misc(node_id) => mywrite!(w, \"M{}\", node_id),\n         region::CodeExtent::Remainder(region::BlockRemainder {\n-            block: b, first_statement_index: i }) => mywrite!(w, \"B{}{}\", b, i),\n+            block: b, first_statement_index: i }) => mywrite!(w, \"B[{}|{}]\", b, i),\n         region::CodeExtent::DestructionScope(node_id) => mywrite!(w, \"D{}\", node_id),\n     }\n }"}, {"sha": "727a1dcdfb31e8b80963b37e505f9f3528ca84f1", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "patch": "@@ -95,7 +95,15 @@ use syntax::visit::{Visitor, FnKind};\n            RustcDecodable, Debug, Copy)]\n pub enum CodeExtent {\n     Misc(ast::NodeId),\n-    DestructionScope(ast::NodeId), // extent of destructors for temporaries of node-id\n+\n+    // extent of parameters passed to a function or closure (they\n+    // outlive its body)\n+    ParameterScope { fn_id: ast::NodeId, body_id: ast::NodeId },\n+\n+    // extent of destructors for temporaries of node-id\n+    DestructionScope(ast::NodeId),\n+\n+    // extent of code following a `let id = expr;` binding in a block\n     Remainder(BlockRemainder)\n }\n \n@@ -153,15 +161,19 @@ impl CodeExtent {\n     pub fn node_id(&self) -> ast::NodeId {\n         match *self {\n             CodeExtent::Misc(node_id) => node_id,\n+\n+            // These cases all return rough approximations to the\n+            // precise extent denoted by `self`.\n             CodeExtent::Remainder(br) => br.block,\n             CodeExtent::DestructionScope(node_id) => node_id,\n+            CodeExtent::ParameterScope { fn_id: _, body_id } => body_id,\n         }\n     }\n \n     /// Maps this scope to a potentially new one according to the\n     /// NodeId transformer `f_id`.\n     pub fn map_id<F>(&self, f_id: F) -> CodeExtent where\n-        F: FnOnce(ast::NodeId) -> ast::NodeId,\n+        F: Fn(ast::NodeId) -> ast::NodeId,\n     {\n         match *self {\n             CodeExtent::Misc(node_id) => CodeExtent::Misc(f_id(node_id)),\n@@ -170,6 +182,8 @@ impl CodeExtent {\n                     block: f_id(br.block), first_statement_index: br.first_statement_index }),\n             CodeExtent::DestructionScope(node_id) =>\n                 CodeExtent::DestructionScope(f_id(node_id)),\n+            CodeExtent::ParameterScope { fn_id, body_id } =>\n+                CodeExtent::ParameterScope { fn_id: f_id(fn_id), body_id: f_id(body_id) },\n         }\n     }\n \n@@ -180,6 +194,7 @@ impl CodeExtent {\n         match ast_map.find(self.node_id()) {\n             Some(ast_map::NodeBlock(ref blk)) => {\n                 match *self {\n+                    CodeExtent::ParameterScope { .. } |\n                     CodeExtent::Misc(_) |\n                     CodeExtent::DestructionScope(_) => Some(blk.span),\n \n@@ -277,6 +292,7 @@ enum InnermostDeclaringBlock {\n     Block(ast::NodeId),\n     Statement(DeclaringStatementContext),\n     Match(ast::NodeId),\n+    FnDecl { fn_id: ast::NodeId, body_id: ast::NodeId },\n }\n \n impl InnermostDeclaringBlock {\n@@ -285,6 +301,8 @@ impl InnermostDeclaringBlock {\n             InnermostDeclaringBlock::None => {\n                 return Option::None;\n             }\n+            InnermostDeclaringBlock::FnDecl { fn_id, body_id } =>\n+                CodeExtent::ParameterScope { fn_id: fn_id, body_id: body_id },\n             InnermostDeclaringBlock::Block(id) |\n             InnermostDeclaringBlock::Match(id) => CodeExtent::from_node_id(id),\n             InnermostDeclaringBlock::Statement(s) =>  s.to_code_extent(),\n@@ -1198,25 +1216,34 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n            body.id,\n            visitor.cx.parent);\n \n+    // This scope covers the function body, which includes the\n+    // bindings introduced by let statements as well as temporaries\n+    // created by the fn's tail expression (if any). It does *not*\n+    // include the fn parameters (see below).\n     let body_scope = CodeExtent::from_node_id(body.id);\n     visitor.region_maps.mark_as_terminating_scope(body_scope);\n \n     let dtor_scope = CodeExtent::DestructionScope(body.id);\n     visitor.region_maps.record_encl_scope(body_scope, dtor_scope);\n \n-    record_superlifetime(visitor, dtor_scope, body.span);\n+    let fn_decl_scope = CodeExtent::ParameterScope { fn_id: id, body_id: body.id };\n+    visitor.region_maps.record_encl_scope(dtor_scope, fn_decl_scope);\n+\n+    record_superlifetime(visitor, fn_decl_scope, body.span);\n \n     if let Some(root_id) = visitor.cx.root_id {\n         visitor.region_maps.record_fn_parent(body.id, root_id);\n     }\n \n     let outer_cx = visitor.cx;\n \n-    // The arguments and `self` are parented to the body of the fn.\n+    // The arguments and `self` are parented to the fn.\n     visitor.cx = Context {\n         root_id: Some(body.id),\n-        parent: InnermostEnclosingExpr::Some(body.id),\n-        var_parent: InnermostDeclaringBlock::Block(body.id)\n+        parent: InnermostEnclosingExpr::None,\n+        var_parent: InnermostDeclaringBlock::FnDecl {\n+            fn_id: id, body_id: body.id\n+        },\n     };\n     visit::walk_fn_decl(visitor, decl);\n "}, {"sha": "7358b4cc0f6ecbbf5fe517125b72be04f5fb00dd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05b8a106e45b0c8381c6bc89e76e7bb94b03a84c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=05b8a106e45b0c8381c6bc89e76e7bb94b03a84c", "patch": "@@ -113,6 +113,9 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n         };\n         let scope_decorated_tag = match scope {\n             region::CodeExtent::Misc(_) => tag,\n+            region::CodeExtent::ParameterScope { .. } => {\n+                \"scope of parameters for function\"\n+            }\n             region::CodeExtent::DestructionScope(_) => {\n                 new_string = format!(\"destruction scope surrounding {}\", tag);\n                 &*new_string\n@@ -952,6 +955,8 @@ impl<'tcx> Repr<'tcx> for ty::FreeRegion {\n impl<'tcx> Repr<'tcx> for region::CodeExtent {\n     fn repr(&self, _tcx: &ctxt) -> String {\n         match *self {\n+            region::CodeExtent::ParameterScope { fn_id, body_id } =>\n+                format!(\"ParameterScope({}, {})\", fn_id, body_id),\n             region::CodeExtent::Misc(node_id) =>\n                 format!(\"Misc({})\", node_id),\n             region::CodeExtent::DestructionScope(node_id) =>"}]}