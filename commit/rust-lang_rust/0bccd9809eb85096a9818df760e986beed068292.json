{"sha": "0bccd9809eb85096a9818df760e986beed068292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiY2NkOTgwOWViODUwOTZhOTgxOGRmNzYwZTk4NmJlZWQwNjgyOTI=", "commit": {"author": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-21T16:35:17Z"}, "committer": {"name": "Denis Vasilik", "email": "contact@denisvasilik.com", "date": "2020-08-21T16:35:17Z"}, "message": "Incorporate suggestions from review", "tree": {"sha": "f7edb1ef6642b5e2cd49940634f7564c4168e842", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7edb1ef6642b5e2cd49940634f7564c4168e842"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bccd9809eb85096a9818df760e986beed068292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bccd9809eb85096a9818df760e986beed068292", "html_url": "https://github.com/rust-lang/rust/commit/0bccd9809eb85096a9818df760e986beed068292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bccd9809eb85096a9818df760e986beed068292/comments", "author": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "denisvasilik", "id": 18697981, "node_id": "MDQ6VXNlcjE4Njk3OTgx", "avatar_url": "https://avatars.githubusercontent.com/u/18697981?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denisvasilik", "html_url": "https://github.com/denisvasilik", "followers_url": "https://api.github.com/users/denisvasilik/followers", "following_url": "https://api.github.com/users/denisvasilik/following{/other_user}", "gists_url": "https://api.github.com/users/denisvasilik/gists{/gist_id}", "starred_url": "https://api.github.com/users/denisvasilik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denisvasilik/subscriptions", "organizations_url": "https://api.github.com/users/denisvasilik/orgs", "repos_url": "https://api.github.com/users/denisvasilik/repos", "events_url": "https://api.github.com/users/denisvasilik/events{/privacy}", "received_events_url": "https://api.github.com/users/denisvasilik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f71919c3db5be6fd78b0c831872b4bd6857ed086", "url": "https://api.github.com/repos/rust-lang/rust/commits/f71919c3db5be6fd78b0c831872b4bd6857ed086", "html_url": "https://github.com/rust-lang/rust/commit/f71919c3db5be6fd78b0c831872b4bd6857ed086"}], "stats": {"total": 690, "additions": 233, "deletions": 457}, "files": [{"sha": "da40e2618112b1ce62ab596ce091f756bb6ec2ef", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 233, "deletions": 457, "changes": 690, "blob_url": "https://github.com/rust-lang/rust/blob/0bccd9809eb85096a9818df760e986beed068292/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bccd9809eb85096a9818df760e986beed068292/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=0bccd9809eb85096a9818df760e986beed068292", "patch": "@@ -53,10 +53,19 @@\n     issue = \"none\"\n )]\n #![allow(missing_docs)]\n+#![allow(unused_imports)]\n \n use crate::marker::DiscriminantKind;\n use crate::mem;\n \n+// These imports are used for simplifying intra-doc links\n+use crate::sync::atomic;\n+use crate::sync::atomic::Ordering;\n+use crate::sync::atomic::AtomicU32;\n+use crate::sync::atomic::AtomicI32;\n+use crate::sync::atomic::AtomicBool;\n+use crate::sync::atomic::AtomicIsize;\n+\n #[stable(feature = \"drop_in_place\", since = \"1.8.0\")]\n #[rustc_deprecated(\n     reason = \"no longer an intrinsic - use `ptr::drop_in_place` directly\",\n@@ -71,710 +80,510 @@ extern \"rust-intrinsic\" {\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::Release`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `success` and\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`] as the `success` and [`Ordering::Acquire`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::Relaxed`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `success` and\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::SeqCst`] as the `success` and [`Ordering::Acquire`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::Acquire`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange`][compare_exchange].\n-    ///\n-    /// [compare_exchange]: crate::sync::atomic::AtomicBool::compare_exchange\n+    /// [`atomic`] types via the `compare_exchange` method by passing\n+    /// [`Ordering::AcqRel`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange`].\n     pub fn atomic_cxchg_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_acq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Release`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_rel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `success` and\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`] as the `success` and [`Ordering::Acquire`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_acqrel<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as both the `success` and `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Relaxed`] as both the `success` and `failure` parameters.\n+    /// For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_relaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `success` and\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::SeqCst`] as the `success` and [`Ordering::Acquire`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_failacq<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::Acquire`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_acq_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n     /// Stores a value if the current value is the same as the `old` value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `compare_exchange_weak` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `success` and\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `failure` parameters. For example,\n-    /// [`AtomicBool::compare_exchange_weak`][cew].\n-    ///\n-    /// [cew]: crate::sync::atomic::AtomicBool::compare_exchange_weak\n+    /// [`atomic`] types via the `compare_exchange_weak` method by passing\n+    /// [`Ordering::AcqRel`] as the `success` and [`Ordering::Relaxed`] as the\n+    /// `failure` parameters. For example, [`AtomicBool::compare_exchange_weak`].\n     pub fn atomic_cxchgweak_acqrel_failrelaxed<T: Copy>(dst: *mut T, old: T, src: T) -> (T, bool);\n \n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n+    /// [`atomic`] types via the `load` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::load`].\n     pub fn atomic_load<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n+    /// [`atomic`] types via the `load` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::load`].\n     pub fn atomic_load_acq<T: Copy>(src: *const T) -> T;\n     /// Loads the current value of the pointer.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `load` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::load`](crate::sync::atomic::AtomicBool::load).\n+    /// [`atomic`] types via the `load` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::load`].\n     pub fn atomic_load_relaxed<T: Copy>(src: *const T) -> T;\n     pub fn atomic_load_unordered<T: Copy>(src: *const T) -> T;\n \n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n+    /// [`atomic`] types via the `store` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::store`].\n     pub fn atomic_store<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n+    /// [`atomic`] types via the `store` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::store`].\n     pub fn atomic_store_rel<T: Copy>(dst: *mut T, val: T);\n     /// Stores the value at the specified memory location.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `store` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::store`](crate::sync::atomic::AtomicBool::store).\n+    /// [`atomic`] types via the `store` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::store`].\n     pub fn atomic_store_relaxed<T: Copy>(dst: *mut T, val: T);\n     pub fn atomic_store_unordered<T: Copy>(dst: *mut T, val: T);\n \n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n+    /// [`atomic`] types via the `swap` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::swap`].\n     pub fn atomic_xchg<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n+    /// [`atomic`] types via the `swap` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::swap`].\n     pub fn atomic_xchg_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n+    /// [`atomic`] types via the `swap` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::swap`].\n     pub fn atomic_xchg_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n+    /// [`atomic`] types via the `swap` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::swap`].\n     pub fn atomic_xchg_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Stores the value at the specified memory location, returning the old value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `swap` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::swap`](crate::sync::atomic::AtomicBool::swap).\n+    /// [`atomic`] types via the `swap` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::swap`].\n     pub fn atomic_xchg_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_add`](crate::sync::atomic::AtomicIsize::fetch_add).\n+    /// [`atomic`] types via the `fetch_add` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n     pub fn atomic_xadd<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_add`](crate::sync::atomic::AtomicIsize::fetch_add).\n+    /// [`atomic`] types via the `fetch_add` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n     pub fn atomic_xadd_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_add`](crate::sync::atomic::AtomicIsize::fetch_add).\n+    /// [`atomic`] types via the `fetch_add` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n     pub fn atomic_xadd_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_add`](crate::sync::atomic::AtomicIsize::fetch_add).\n+    /// [`atomic`] types via the `fetch_add` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n     pub fn atomic_xadd_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Adds to the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_add` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_add`](crate::sync::atomic::AtomicIsize::fetch_add).\n+    /// [`atomic`] types via the `fetch_add` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_add`].\n     pub fn atomic_xadd_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_sub`](crate::sync::atomic::AtomicIsize::fetch_sub).\n+    /// [`atomic`] types via the `fetch_sub` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n     pub fn atomic_xsub<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_sub`](crate::sync::atomic::AtomicIsize::fetch_sub).\n+    /// [`atomic`] types via the `fetch_sub` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n     pub fn atomic_xsub_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_sub`](crate::sync::atomic::AtomicIsize::fetch_sub).\n+    /// [`atomic`] types via the `fetch_sub` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n     pub fn atomic_xsub_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_sub`](crate::sync::atomic::AtomicIsize::fetch_sub).\n+    /// [`atomic`] types via the `fetch_sub` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n     pub fn atomic_xsub_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Subtract from the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_sub` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicIsize::fetch_sub`](crate::sync::atomic::AtomicIsize::fetch_sub).\n+    /// [`atomic`] types via the `fetch_sub` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicIsize::fetch_sub`].\n     pub fn atomic_xsub_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n+    /// [`atomic`] types via the `fetch_and` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_and`].\n     pub fn atomic_and<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n+    /// [`atomic`] types via the `fetch_and` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_and`].\n     pub fn atomic_and_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n+    /// [`atomic`] types via the `fetch_and` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_and`].\n     pub fn atomic_and_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n+    /// [`atomic`] types via the `fetch_and` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_and`].\n     pub fn atomic_and_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise and with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_and` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_and`](crate::sync::atomic::AtomicBool::fetch_and).\n+    /// [`atomic`] types via the `fetch_and` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_and`].\n     pub fn atomic_and_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n+    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n     pub fn atomic_nand<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n+    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n     pub fn atomic_nand_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n+    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n     pub fn atomic_nand_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n+    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n     pub fn atomic_nand_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise nand with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic::AtomicBool` type via the `fetch_nand` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_nand`](crate::sync::atomic::AtomicBool::fetch_nand).\n+    /// [`AtomicBool`] type via the `fetch_nand` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_nand`].\n     pub fn atomic_nand_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n+    /// [`atomic`] types via the `fetch_or` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_or`].\n     pub fn atomic_or<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n+    /// [`atomic`] types via the `fetch_or` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_or`].\n     pub fn atomic_or_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n+    /// [`atomic`] types via the `fetch_or` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_or`].\n     pub fn atomic_or_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n+    /// [`atomic`] types via the `fetch_or` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_or`].\n     pub fn atomic_or_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise or with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_or` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_or`](crate::sync::atomic::AtomicBool::fetch_or).\n+    /// [`atomic`] types via the `fetch_or` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_or`].\n     pub fn atomic_or_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n+    /// [`atomic`] types via the `fetch_xor` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n     pub fn atomic_xor<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n+    /// [`atomic`] types via the `fetch_xor` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n     pub fn atomic_xor_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n+    /// [`atomic`] types via the `fetch_xor` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n     pub fn atomic_xor_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n+    /// [`atomic`] types via the `fetch_xor` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n     pub fn atomic_xor_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Bitwise xor with the current value, returning the previous value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` types via the `fetch_xor` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicBool::fetch_xor`](crate::sync::atomic::AtomicBool::fetch_xor).\n+    /// [`atomic`] types via the `fetch_xor` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicBool::fetch_xor`].\n     pub fn atomic_xor_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n+    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_max`].\n     pub fn atomic_max<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n+    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_max`].\n     pub fn atomic_max_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n+    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_max`].\n     pub fn atomic_max_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n+    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_max`].\n     pub fn atomic_max_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_max`](crate::sync::atomic::AtomicI32::fetch_max).\n+    /// [`atomic`] signed integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_max`].\n     pub fn atomic_max_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n+    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicI32::fetch_min`].\n     pub fn atomic_min<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n+    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicI32::fetch_min`].\n     pub fn atomic_min_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n+    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicI32::fetch_min`].\n     pub fn atomic_min_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n+    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicI32::fetch_min`].\n     pub fn atomic_min_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using a signed comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` signed integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicI32::fetch_min`](crate::sync::atomic::AtomicI32::fetch_min).\n+    /// [`atomic`] signed integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicI32::fetch_min`].\n     pub fn atomic_min_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_min`](crate::sync::atomic::AtomicU32::fetch_min).\n+    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_min`].\n     pub fn atomic_umin<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_min`](crate::sync::atomic::AtomicU32::fetch_min).\n+    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_min`].\n     pub fn atomic_umin_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_min`](crate::sync::atomic::AtomicU32::fetch_min).\n+    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_min`].\n     pub fn atomic_umin_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_min`](crate::sync::atomic::AtomicU32::fetch_min).\n+    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_min`].\n     pub fn atomic_umin_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Minimum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_min` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_min`](crate::sync::atomic::AtomicU32::fetch_min).\n+    /// [`atomic`] unsigned integer types via the `fetch_min` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_min`].\n     pub fn atomic_umin_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_max`](crate::sync::atomic::AtomicU32::fetch_max).\n+    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::SeqCst`] as the `order`. For example, [`AtomicU32::fetch_max`].\n     pub fn atomic_umax<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_max`](crate::sync::atomic::AtomicU32::fetch_max).\n+    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Acquire`] as the `order`. For example, [`AtomicU32::fetch_max`].\n     pub fn atomic_umax_acq<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_max`](crate::sync::atomic::AtomicU32::fetch_max).\n+    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Release`] as the `order`. For example, [`AtomicU32::fetch_max`].\n     pub fn atomic_umax_rel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_max`](crate::sync::atomic::AtomicU32::fetch_max).\n+    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::AcqRel`] as the `order`. For example, [`AtomicU32::fetch_max`].\n     pub fn atomic_umax_acqrel<T: Copy>(dst: *mut T, src: T) -> T;\n     /// Maximum with the current value using an unsigned comparison.\n     ///\n     /// The stabilized version of this intrinsic is available on the\n-    /// `std::sync::atomic` unsigned integer types via the `fetch_max` method by passing\n-    /// [`Ordering::Relaxed`](crate::sync::atomic::Ordering::Relaxed)\n-    /// as the `order`. For example,\n-    /// [`AtomicU32::fetch_max`](crate::sync::atomic::AtomicU32::fetch_max).\n+    /// [`atomic`] unsigned integer types via the `fetch_max` method by passing\n+    /// [`Ordering::Relaxed`] as the `order`. For example, [`AtomicU32::fetch_max`].\n     pub fn atomic_umax_relaxed<T: Copy>(dst: *mut T, src: T) -> T;\n \n     /// The `prefetch` intrinsic is a hint to the code generator to insert a prefetch instruction\n@@ -823,33 +632,25 @@ extern \"rust-intrinsic\" {\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::fence`](crate::sync::atomic::fence)\n-    /// by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n+    /// [`atomic::fence`] by passing [`Ordering::SeqCst`]\n     /// as the `order`.\n     pub fn atomic_fence();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::fence`](crate::sync::atomic::fence)\n-    /// by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n+    /// [`atomic::fence`] by passing [`Ordering::Acquire`]\n     /// as the `order`.\n     pub fn atomic_fence_acq();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::fence`](crate::sync::atomic::fence)\n-    /// by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n+    /// [`atomic::fence`] by passing [`Ordering::Release`]\n     /// as the `order`.\n     pub fn atomic_fence_rel();\n     /// An atomic fence.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::fence`](crate::sync::atomic::fence)\n-    /// by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n+    /// [`atomic::fence`] by passing [`Ordering::AcqRel`]\n     /// as the `order`.\n     pub fn atomic_fence_acqrel();\n \n@@ -861,9 +662,7 @@ extern \"rust-intrinsic\" {\n     /// such as when interacting with signal handlers.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::compiler_fence`](crate::sync::atomic::compiler_fence)\n-    /// by passing\n-    /// [`Ordering::SeqCst`](crate::sync::atomic::Ordering::SeqCst)\n+    /// [`atomic::compiler_fence`] by passing [`Ordering::SeqCst`]\n     /// as the `order`.\n     pub fn atomic_singlethreadfence();\n     /// A compiler-only memory barrier.\n@@ -874,9 +673,7 @@ extern \"rust-intrinsic\" {\n     /// such as when interacting with signal handlers.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::compiler_fence`](crate::sync::atomic::compiler_fence)\n-    /// by passing\n-    /// [`Ordering::Acquire`](crate::sync::atomic::Ordering::Acquire)\n+    /// [`atomic::compiler_fence`] by passing [`Ordering::Acquire`]\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_acq();\n     /// A compiler-only memory barrier.\n@@ -887,9 +684,7 @@ extern \"rust-intrinsic\" {\n     /// such as when interacting with signal handlers.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::compiler_fence`](crate::sync::atomic::compiler_fence)\n-    /// by passing\n-    /// [`Ordering::Release`](crate::sync::atomic::Ordering::Release)\n+    /// [`atomic::compiler_fence`] by passing [`Ordering::Release`]\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_rel();\n     /// A compiler-only memory barrier.\n@@ -900,9 +695,7 @@ extern \"rust-intrinsic\" {\n     /// such as when interacting with signal handlers.\n     ///\n     /// The stabilized version of this intrinsic is available in\n-    /// [`std::sync::atomic::compiler_fence`](crate::sync::atomic::compiler_fence)\n-    /// by passing\n-    /// [`Ordering::AcqRel`](crate::sync::atomic::Ordering::AcqRel)\n+    /// [`atomic::compiler_fence`] by passing [`Ordering::AcqRel`]\n     /// as the `order`.\n     pub fn atomic_singlethreadfence_acqrel();\n \n@@ -930,8 +723,7 @@ extern \"rust-intrinsic\" {\n     /// macro, which panics when it is executed, it is *undefined behavior* to\n     /// reach code marked with this function.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::hint::unreachable_unchecked`](crate::hint::unreachable_unchecked).\n+    /// The stabilized version of this intrinsic is [`crate::hint::unreachable_unchecked`].\n     #[rustc_const_unstable(feature = \"const_unreachable_unchecked\", issue = \"53188\")]\n     pub fn unreachable() -> !;\n \n@@ -975,23 +767,20 @@ extern \"rust-intrinsic\" {\n     /// More specifically, this is the offset in bytes between successive\n     /// items of the same type, including alignment padding.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::size_of`](crate::mem::size_of).\n+    /// The stabilized version of this intrinsic is [`size_of`].\n     #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::ptr::write`](crate::ptr::write).\n+    /// The stabilized version of this intrinsic is [`crate::ptr::write`].\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n     /// The minimum alignment of a type.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::align_of`](crate::mem::align_of).\n+    /// The stabilized version of this intrinsic is [`crate::mem::align_of`].\n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n     /// The preferred alignment of a type.\n@@ -1002,30 +791,26 @@ extern \"rust-intrinsic\" {\n \n     /// The size of the referenced value in bytes.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::size_of_val`](crate::mem::size_of_val).\n+    /// The stabilized version of this intrinsic is [`size_of_val`].\n     #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n     pub fn size_of_val<T: ?Sized>(_: *const T) -> usize;\n     /// The required alignment of the referenced value.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::align_of_val`](crate::mem::align_of_val).\n+    /// The stabilized version of this intrinsic is [`crate::mem::align_of_val`].\n     #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n     pub fn min_align_of_val<T: ?Sized>(_: *const T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::any::type_name`](crate::any::type_name)\n+    /// The stabilized version of this intrinsic is [`crate::any::type_name`].\n     #[rustc_const_unstable(feature = \"const_type_name\", issue = \"63084\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::any::TypeId::of`](crate::any::TypeId::of)\n+    /// The stabilized version of this intrinsic is [`crate::any::TypeId::of`].\n     #[rustc_const_stable(feature = \"const_type_id\", since = \"1.46.0\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n@@ -1049,15 +834,14 @@ extern \"rust-intrinsic\" {\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n     ///\n-    /// Consider using [`std::panic::Location::caller`](crate::panic::Location::caller)\n-    /// instead.\n+    /// Consider using [`crate::panic::Location::caller`] instead.\n     #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n     /// Moves a value out of scope without running drop glue.\n     ///\n-    /// This exists solely for [`mem::forget_unsized`](../../std/mem/fn.forget_unsized.html);\n-    /// normal `forget` uses `ManuallyDrop` instead.\n+    /// This exists solely for [`mem::forget_unsized`]; normal `forget` uses\n+    /// `ManuallyDrop` instead.\n     pub fn forget<T: ?Sized>(_: T);\n \n     /// Reinterprets the bits of a value of one type as another type.\n@@ -1300,8 +1084,7 @@ extern \"rust-intrinsic\" {\n     /// If the actual type neither requires drop glue nor implements\n     /// `Copy`, then the return value of this function is unspecified.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::needs_drop`](crate::mem::needs_drop).\n+    /// The stabilized version of this intrinsic is [`needs_drop`].\n     #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n     pub fn needs_drop<T>() -> bool;\n \n@@ -1371,13 +1154,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs a volatile load from the `src` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::ptr::read_volatile`](crate::ptr::read_volatile).\n+    /// The stabilized version of this intrinsic is [`crate::ptr::read_volatile`].\n     pub fn volatile_load<T>(src: *const T) -> T;\n     /// Performs a volatile store to the `dst` pointer.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::ptr::write_volatile`](crate::ptr::write_volatile).\n+    /// The stabilized version of this intrinsic is [`crate::ptr::write_volatile`].\n     pub fn volatile_store<T>(dst: *mut T, val: T);\n \n     /// Performs a volatile load from the `src` pointer\n@@ -1526,22 +1307,22 @@ extern \"rust-intrinsic\" {\n     /// Returns the minimum of two `f32` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::min`](f32::min)\n+    /// [`f32::min`]\n     pub fn minnumf32(x: f32, y: f32) -> f32;\n     /// Returns the minimum of two `f64` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::min`](f64::min)\n+    /// [`f64::min`]\n     pub fn minnumf64(x: f64, y: f64) -> f64;\n     /// Returns the maximum of two `f32` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f32::max`](f32::max)\n+    /// [`f32::max`]\n     pub fn maxnumf32(x: f32, y: f32) -> f32;\n     /// Returns the maximum of two `f64` values.\n     ///\n     /// The stabilized version of this intrinsic is\n-    /// [`std::f64::max`](f64::max)\n+    /// [`f64::max`]\n     pub fn maxnumf64(x: f64, y: f64) -> f64;\n \n     /// Copies the sign from `y` to `x` for `f32` values.\n@@ -1648,23 +1429,22 @@ extern \"rust-intrinsic\" {\n     /// Convert with LLVM\u2019s fptoui/fptosi, which may return undef for values out of range\n     /// (<https://github.com/rust-lang/rust/issues/10184>)\n     ///\n-    /// Stabilized as [`f32::to_int_unchecked`](../../std/primitive.f32.html#method.to_int_unchecked)\n-    /// and [`f64::to_int_unchecked`](../../std/primitive.f64.html#method.to_int_unchecked).\n+    /// Stabilized as [`f32::to_int_unchecked`] and [`f64::to_int_unchecked`].\n     pub fn float_to_int_unchecked<Float: Copy, Int: Copy>(value: Float) -> Int;\n \n     /// Returns the number of bits set in an integer type `T`\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `count_ones` method. For example,\n-    /// [`std::u32::count_ones`](u32::count_ones)\n+    /// [`u32::count_ones`]\n     #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n     pub fn ctpop<T: Copy>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `leading_zeros` method. For example,\n-    /// [`std::u32::leading_zeros`](u32::leading_zeros)\n+    /// [`u32::leading_zeros`]\n     ///\n     /// # Examples\n     ///\n@@ -1715,7 +1495,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `trailing_zeros` method. For example,\n-    /// [`std::u32::trailing_zeros`](u32::trailing_zeros)\n+    /// [`u32::trailing_zeros`]\n     ///\n     /// # Examples\n     ///\n@@ -1766,39 +1546,39 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `swap_bytes` method. For example,\n-    /// [`std::u32::swap_bytes`](u32::swap_bytes)\n+    /// [`u32::swap_bytes`]\n     #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n     pub fn bswap<T: Copy>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `reverse_bits` method. For example,\n-    /// [`std::u32::reverse_bits`](u32::reverse_bits)\n+    /// [`u32::reverse_bits`]\n     #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n     pub fn bitreverse<T: Copy>(x: T) -> T;\n \n     /// Performs checked integer addition.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,\n-    /// [`std::u32::overflowing_add`](u32::overflowing_add)\n+    /// [`u32::overflowing_add`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn add_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_sub` method. For example,\n-    /// [`std::u32::overflowing_sub`](u32::overflowing_sub)\n+    /// [`u32::overflowing_sub`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn sub_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_mul` method. For example,\n-    /// [`std::u32::overflowing_mul`](u32::overflowing_mul)\n+    /// [`u32::overflowing_mul`]\n     #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn mul_with_overflow<T: Copy>(x: T, y: T) -> (T, bool);\n \n@@ -1813,15 +1593,15 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_div` method. For example,\n-    /// [`std::u32::checked_div`](u32::checked_div)\n+    /// [`u32::checked_div`]\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_div<T: Copy>(x: T, y: T) -> T;\n     /// Returns the remainder of an unchecked division, resulting in\n     /// undefined behavior where y = 0 or x = `T::MIN` and y = -1\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_rem` method. For example,\n-    /// [`std::u32::checked_rem`](u32::checked_rem)\n+    /// [`u32::checked_rem`]\n     #[rustc_const_unstable(feature = \"const_int_unchecked_arith\", issue = \"none\")]\n     pub fn unchecked_rem<T: Copy>(x: T, y: T) -> T;\n \n@@ -1830,15 +1610,15 @@ extern \"rust-intrinsic\" {\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shl` method. For example,\n-    /// [`std::u32::checked_shl`](u32::checked_shl)\n+    /// [`u32::checked_shl`]\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T: Copy>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n     ///\n     /// Safe wrappers for this intrinsic are available on the integer\n     /// primitives via the `checked_shr` method. For example,\n-    /// [`std::u32::checked_shr`](u32::checked_shr)\n+    /// [`u32::checked_shr`]\n     #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shr<T: Copy>(x: T, y: T) -> T;\n \n@@ -1867,68 +1647,66 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n-    /// [`std::u32::rotate_left`](u32::rotate_left)\n+    /// [`u32::rotate_left`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_left<T: Copy>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n-    /// [`std::u32::rotate_right`](u32::rotate_right)\n+    /// [`u32::rotate_right`]\n     #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_right<T: Copy>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_add` method. For example,\n-    /// [`std::u32::checked_add`](u32::checked_add)\n+    /// [`u32::checked_add`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_sub` method. For example,\n-    /// [`std::u32::checked_sub`](u32::checked_sub)\n+    /// [`u32::checked_sub`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T: Copy>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `checked_mul` method. For example,\n-    /// [`std::u32::checked_mul`](u32::checked_mul)\n+    /// [`u32::checked_mul`]\n     #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T: Copy>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n-    /// [`std::u32::saturating_add`](u32::saturating_add)\n+    /// [`u32::saturating_add`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T: Copy>(a: T, b: T) -> T;\n     /// Computes `a - b`, while saturating at numeric bounds.\n     ///\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n-    /// [`std::u32::saturating_sub`](u32::saturating_sub)\n+    /// [`u32::saturating_sub`]\n     #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_sub<T: Copy>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',\n     /// cast to a `u64`; if `T` has no discriminant, returns 0.\n     ///\n-    /// The stabilized version of this intrinsic is\n-    /// [`std::mem::discriminant`](crate::mem::discriminant)\n+    /// The stabilized version of this intrinsic is [`crate::mem::discriminant`].\n     #[rustc_const_unstable(feature = \"const_discriminant\", issue = \"69821\")]\n     pub fn discriminant_value<T>(v: &T) -> <T as DiscriminantKind>::Discriminant;\n \n     /// Returns the number of variants of the type `T` cast to a `usize`;\n     /// if `T` has no variants, returns 0. Uninhabited variants will be counted.\n     ///\n-    /// The to-be-stabilized version of this intrinsic is\n-    /// [`std::mem::variant_count`](crate::mem::variant_count)\n+    /// The to-be-stabilized version of this intrinsic is [`variant_count`].\n     #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n     pub fn variant_count<T>() -> usize;\n \n@@ -2077,7 +1855,6 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n /// `0`, the pointers must be non-NULL and properly aligned.\n ///\n-/// [`Copy`]: crate::marker::Copy\n /// [`read`]: crate::ptr::read\n /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n /// [valid]: crate::ptr#safety\n@@ -2179,7 +1956,6 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// Note that even if the effectively copied size (`count * size_of::<T>()`) is\n /// `0`, the pointers must be non-NULL and properly aligned.\n ///\n-/// [`Copy`]: crate::marker::Copy\n /// [`read`]: crate::ptr::read\n /// [read-ownership]: crate::ptr::read#ownership-of-the-returned-value\n /// [valid]: crate::ptr#safety"}]}