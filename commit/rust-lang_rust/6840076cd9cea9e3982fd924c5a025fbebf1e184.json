{"sha": "6840076cd9cea9e3982fd924c5a025fbebf1e184", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NDAwNzZjZDljZWE5ZTM5ODJmZDkyNGM1YTAyNWZiZWJmMWUxODQ=", "commit": {"author": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-09-05T01:09:03Z"}, "committer": {"name": "Eric Reed", "email": "ecreed@cs.washington.edu", "date": "2013-09-06T18:13:43Z"}, "message": "Make I/O tests use run_in_mt_newsched_task to get more multi-threaded test coverage", "tree": {"sha": "59ffcf575825aa1626784df0f9f7d519510145a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59ffcf575825aa1626784df0f9f7d519510145a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6840076cd9cea9e3982fd924c5a025fbebf1e184", "comment_count": 10, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6840076cd9cea9e3982fd924c5a025fbebf1e184", "html_url": "https://github.com/rust-lang/rust/commit/6840076cd9cea9e3982fd924c5a025fbebf1e184", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6840076cd9cea9e3982fd924c5a025fbebf1e184/comments", "author": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anasazi", "id": 591682, "node_id": "MDQ6VXNlcjU5MTY4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/591682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anasazi", "html_url": "https://github.com/anasazi", "followers_url": "https://api.github.com/users/anasazi/followers", "following_url": "https://api.github.com/users/anasazi/following{/other_user}", "gists_url": "https://api.github.com/users/anasazi/gists{/gist_id}", "starred_url": "https://api.github.com/users/anasazi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anasazi/subscriptions", "organizations_url": "https://api.github.com/users/anasazi/orgs", "repos_url": "https://api.github.com/users/anasazi/repos", "events_url": "https://api.github.com/users/anasazi/events{/privacy}", "received_events_url": "https://api.github.com/users/anasazi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73bb4de556b3dabc1ba5db397fc1bed28e0537a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/73bb4de556b3dabc1ba5db397fc1bed28e0537a9", "html_url": "https://github.com/rust-lang/rust/commit/73bb4de556b3dabc1ba5db397fc1bed28e0537a9"}], "stats": {"total": 237, "additions": 187, "deletions": 50}, "files": [{"sha": "3bc0e74c7822a6565627396c29c9068dec7b0eda", "filename": "src/libstd/rt/io/file.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ffile.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -146,7 +146,7 @@ impl Seek for FileStream {\n }\n \n fn file_test_smoke_test_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let message = \"it's alright. have a good time\";\n         let filename = &Path(\"./tmp/file_rt_io_file_test.txt\");\n         {\n@@ -174,7 +174,7 @@ fn file_test_io_smoke_test() {\n }\n \n fn file_test_invalid_path_opened_without_create_should_raise_condition_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let filename = &Path(\"./tmp/file_that_does_not_exist.txt\");\n         let mut called = false;\n         do io_error::cond.trap(|_| {\n@@ -192,7 +192,7 @@ fn file_test_io_invalid_path_opened_without_create_should_raise_condition() {\n }\n \n fn file_test_unlinking_invalid_path_should_raise_condition_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let filename = &Path(\"./tmp/file_another_file_that_does_not_exist.txt\");\n         let mut called = false;\n         do io_error::cond.trap(|_| {\n@@ -209,7 +209,7 @@ fn file_test_iounlinking_invalid_path_should_raise_condition() {\n }\n \n fn file_test_io_non_positional_read_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         use str;\n         let message = \"ten-four\";\n         let mut read_mem = [0, .. 8];\n@@ -242,7 +242,7 @@ fn file_test_io_non_positional_read() {\n }\n \n fn file_test_io_seeking_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         use str;\n         let message = \"ten-four\";\n         let mut read_mem = [0, .. 4];\n@@ -276,7 +276,7 @@ fn file_test_io_seek_and_tell_smoke_test() {\n \n fn file_test_io_seek_and_write_impl() {\n     use io;\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         use str;\n         let initial_msg =   \"food-is-yummy\";\n         let overwrite_msg =    \"-the-bar!!\";\n@@ -307,7 +307,7 @@ fn file_test_io_seek_and_write() {\n }\n \n fn file_test_io_seek_shakedown_impl() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         use str;          // 01234567890123\n         let initial_msg =   \"qwer-asdf-zxcv\";\n         let chunk_one = \"qwer\";"}, {"sha": "9f8b680b83f77f154268310c4a2928aade59d265", "filename": "src/libstd/rt/io/net/tcp.rs", "status": "modified", "additions": 91, "deletions": 18, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Ftcp.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -159,10 +159,11 @@ mod test {\n     use rt::io::net::ip::{Ipv4Addr, SocketAddr};\n     use rt::io::*;\n     use prelude::*;\n+    use rt::comm::oneshot;\n \n     #[test] #[ignore]\n     fn bind_error() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut called = false;\n             do io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n@@ -179,7 +180,7 @@ mod test {\n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8811\n     fn connect_error() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut called = false;\n             do io_error::cond.trap(|e| {\n                 assert_eq!(e.kind, ConnectionRefused);\n@@ -195,18 +196,23 @@ mod test {\n \n     #[test]\n     fn smoke_test_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 stream.read(buf);\n                 assert!(buf[0] == 99);\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write([99]);\n             }\n@@ -215,18 +221,23 @@ mod test {\n \n     #[test]\n     fn smoke_test_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 stream.read(buf);\n                 assert!(buf[0] == 99);\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let mut stream = TcpStream::connect(addr);\n                 stream.write([99]);\n             }\n@@ -235,18 +246,23 @@ mod test {\n \n     #[test]\n     fn read_eof_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -255,18 +271,23 @@ mod test {\n \n     #[test]\n     fn read_eof_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n                 assert!(nread.is_none());\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -276,11 +297,15 @@ mod test {\n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8811\n     fn read_eof_twice_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n@@ -290,6 +315,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -299,11 +325,15 @@ mod test {\n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8811\n     fn read_eof_twice_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let mut buf = [0];\n                 let nread = stream.read(buf);\n@@ -313,6 +343,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -322,11 +353,15 @@ mod test {\n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8811\n     fn write_close_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let buf = [0];\n                 loop {\n@@ -343,6 +378,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -352,11 +388,15 @@ mod test {\n     #[test]\n     #[ignore(cfg(windows))] // FIXME #8811\n     fn write_close_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept();\n                 let buf = [0];\n                 loop {\n@@ -373,6 +413,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let _stream = TcpStream::connect(addr);\n                 // Close\n             }\n@@ -381,12 +422,16 @@ mod test {\n \n     #[test]\n     fn multiple_connect_serial_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n             let max = 10;\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for ref mut stream in acceptor.incoming().take(max) {\n                     let mut buf = [0];\n                     stream.read(buf);\n@@ -395,6 +440,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n@@ -405,12 +451,16 @@ mod test {\n \n     #[test]\n     fn multiple_connect_serial_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n             let max = 10;\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for ref mut stream in acceptor.incoming().take(max) {\n                     let mut buf = [0];\n                     stream.read(buf);\n@@ -419,6 +469,7 @@ mod test {\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 do max.times {\n                     let mut stream = TcpStream::connect(addr);\n                     stream.write([99]);\n@@ -429,12 +480,15 @@ mod test {\n \n     #[test]\n     fn multiple_connect_interleaved_greedy_schedule_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n             static MAX: int = 10;\n+            let (port, chan) = oneshot();\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for (i, stream) in acceptor.incoming().enumerate().take(MAX as uint) {\n                     let stream = Cell::new(stream);\n                     // Start another task to handle the connection\n@@ -448,6 +502,7 @@ mod test {\n                 }\n             }\n \n+            port.recv();\n             connect(0, addr);\n \n             fn connect(i: int, addr: SocketAddr) {\n@@ -467,12 +522,15 @@ mod test {\n \n     #[test]\n     fn multiple_connect_interleaved_greedy_schedule_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n             static MAX: int = 10;\n+            let (port, chan) = oneshot();\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for (i, stream) in acceptor.incoming().enumerate().take(MAX as uint) {\n                     let stream = Cell::new(stream);\n                     // Start another task to handle the connection\n@@ -486,6 +544,7 @@ mod test {\n                 }\n             }\n \n+            port.recv();\n             connect(0, addr);\n \n             fn connect(i: int, addr: SocketAddr) {\n@@ -505,12 +564,15 @@ mod test {\n \n     #[test]\n     fn multiple_connect_interleaved_lazy_schedule_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip4();\n             static MAX: int = 10;\n+            let (port, chan) = oneshot();\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for stream in acceptor.incoming().take(MAX as uint) {\n                     let stream = Cell::new(stream);\n                     // Start another task to handle the connection\n@@ -524,6 +586,7 @@ mod test {\n                 }\n             }\n \n+            port.recv();\n             connect(0, addr);\n \n             fn connect(i: int, addr: SocketAddr) {\n@@ -542,12 +605,15 @@ mod test {\n     }\n     #[test]\n     fn multiple_connect_interleaved_lazy_schedule_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let addr = next_test_ip6();\n             static MAX: int = 10;\n+            let (port, chan) = oneshot();\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n                 for stream in acceptor.incoming().take(MAX as uint) {\n                     let stream = Cell::new(stream);\n                     // Start another task to handle the connection\n@@ -561,6 +627,7 @@ mod test {\n                 }\n             }\n \n+            port.recv();\n             connect(0, addr);\n \n             fn connect(i: int, addr: SocketAddr) {\n@@ -580,7 +647,7 @@ mod test {\n \n     #[cfg(test)]\n     fn socket_name(addr: SocketAddr) {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             do spawntask {\n                 let mut listener = TcpListener::bind(addr).unwrap();\n \n@@ -596,14 +663,20 @@ mod test {\n \n     #[cfg(test)]\n     fn peer_name(addr: SocketAddr) {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n+\n             do spawntask {\n                 let mut acceptor = TcpListener::bind(addr).listen();\n+                chan.take().send(());\n \n                 acceptor.accept();\n             }\n \n             do spawntask {\n+                port.take().recv();\n                 let stream = TcpStream::connect(addr);\n \n                 assert!(stream.is_some());"}, {"sha": "a65c918351ad936e88335f0606ca640a4378896c", "filename": "src/libstd/rt/io/net/udp.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Fnet%2Fudp.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -112,10 +112,12 @@ mod test {\n     use rt::io::net::ip::{Ipv4Addr, SocketAddr};\n     use rt::io::*;\n     use option::{Some, None};\n+    use rt::comm::oneshot;\n+    use cell::Cell;\n \n     #[test]  #[ignore]\n     fn bind_error() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut called = false;\n             do io_error::cond.trap(|e| {\n                 assert!(e.kind == PermissionDenied);\n@@ -131,13 +133,17 @@ mod test {\n \n     #[test]\n     fn socket_smoke_test_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let server_ip = next_test_ip4();\n             let client_ip = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 match UdpSocket::bind(server_ip) {\n                     Some(ref mut server) => {\n+                        chan.take().send(());\n                         let mut buf = [0];\n                         match server.recvfrom(buf) {\n                             Some((nread, src)) => {\n@@ -154,7 +160,10 @@ mod test {\n \n             do spawntask {\n                 match UdpSocket::bind(client_ip) {\n-                    Some(ref mut client) => client.sendto([99], server_ip),\n+                    Some(ref mut client) => {\n+                        port.take().recv();\n+                        client.sendto([99], server_ip)\n+                    }\n                     None => fail!()\n                 }\n             }\n@@ -163,13 +172,17 @@ mod test {\n \n     #[test]\n     fn socket_smoke_test_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let server_ip = next_test_ip6();\n             let client_ip = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 match UdpSocket::bind(server_ip) {\n                     Some(ref mut server) => {\n+                        chan.take().send(());\n                         let mut buf = [0];\n                         match server.recvfrom(buf) {\n                             Some((nread, src)) => {\n@@ -186,7 +199,10 @@ mod test {\n \n             do spawntask {\n                 match UdpSocket::bind(client_ip) {\n-                    Some(ref mut client) => client.sendto([99], server_ip),\n+                    Some(ref mut client) => {\n+                        port.take().recv();\n+                        client.sendto([99], server_ip)\n+                    }\n                     None => fail!()\n                 }\n             }\n@@ -195,15 +211,19 @@ mod test {\n \n     #[test]\n     fn stream_smoke_test_ip4() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let server_ip = next_test_ip4();\n             let client_ip = next_test_ip4();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 match UdpSocket::bind(server_ip) {\n                     Some(server) => {\n                         let server = ~server;\n                         let mut stream = server.connect(client_ip);\n+                        chan.take().send(());\n                         let mut buf = [0];\n                         match stream.read(buf) {\n                             Some(nread) => {\n@@ -222,6 +242,7 @@ mod test {\n                     Some(client) => {\n                         let client = ~client;\n                         let mut stream = client.connect(server_ip);\n+                        port.take().recv();\n                         stream.write([99]);\n                     }\n                     None => fail!()\n@@ -232,15 +253,19 @@ mod test {\n \n     #[test]\n     fn stream_smoke_test_ip6() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let server_ip = next_test_ip6();\n             let client_ip = next_test_ip6();\n+            let (port, chan) = oneshot();\n+            let port = Cell::new(port);\n+            let chan = Cell::new(chan);\n \n             do spawntask {\n                 match UdpSocket::bind(server_ip) {\n                     Some(server) => {\n                         let server = ~server;\n                         let mut stream = server.connect(client_ip);\n+                        chan.take().send(());\n                         let mut buf = [0];\n                         match stream.read(buf) {\n                             Some(nread) => {\n@@ -259,6 +284,7 @@ mod test {\n                     Some(client) => {\n                         let client = ~client;\n                         let mut stream = client.connect(server_ip);\n+                        port.take().recv();\n                         stream.write([99]);\n                     }\n                     None => fail!()\n@@ -269,7 +295,7 @@ mod test {\n \n     #[cfg(test)]\n     fn socket_name(addr: SocketAddr) {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             do spawntask {\n                 let server = UdpSocket::bind(addr);\n "}, {"sha": "2ea1b6154830a45f3f8742504bd474bc37717174", "filename": "src/libstd/rt/io/option.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Foption.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -95,7 +95,7 @@ mod test {\n \n     #[test]\n     fn test_option_writer() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut writer: Option<MemWriter> = Some(MemWriter::new());\n             writer.write([0, 1, 2]);\n             writer.flush();\n@@ -105,7 +105,7 @@ mod test {\n \n     #[test]\n     fn test_option_writer_error() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut writer: Option<MemWriter> = None;\n \n             let mut called = false;\n@@ -130,7 +130,7 @@ mod test {\n \n     #[test]\n     fn test_option_reader() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut reader: Option<MemReader> = Some(MemReader::new(~[0, 1, 2, 3]));\n             let mut buf = [0, 0];\n             reader.read(buf);"}, {"sha": "6754511b0381150b9337992ef2d2bfad560b54c6", "filename": "src/libstd/rt/io/timer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fio%2Ftimer.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -47,7 +47,7 @@ mod test {\n     use rt::test::*;\n     #[test]\n     fn test_io_timer_sleep_simple() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let timer = Timer::new();\n             do timer.map_move |mut t| { t.sleep(1) };\n         }"}, {"sha": "e8af0c749a04dbfc49a9175792bf9136105a2cbd", "filename": "src/libstd/rt/uv/uvio.rs", "status": "modified", "additions": 51, "deletions": 13, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6840076cd9cea9e3982fd924c5a025fbebf1e184/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvio.rs?ref=6840076cd9cea9e3982fd924c5a025fbebf1e184", "patch": "@@ -43,8 +43,9 @@ use task;\n #[cfg(test)] use unstable::run_in_bare_thread;\n #[cfg(test)] use rt::test::{spawntask,\n                             next_test_ip4,\n-                            run_in_newsched_task};\n+                            run_in_mt_newsched_task};\n #[cfg(test)] use iter::{Iterator, range};\n+#[cfg(test)] use rt::comm::oneshot;\n \n // XXX we should not be calling uvll functions in here.\n \n@@ -377,7 +378,7 @@ mod test_remote {\n \n     #[test]\n     fn test_uv_remote() {\n-        do run_in_newsched_task {\n+        do run_in_mt_newsched_task {\n             let mut tube = Tube::new();\n             let tube_clone = tube.clone();\n             let remote_cell = Cell::new_empty();\n@@ -1303,7 +1304,7 @@ impl RtioFileStream for UvFileStream {\n \n #[test]\n fn test_simple_io_no_connect() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         unsafe {\n             let io: *mut IoFactoryObject = Local::unsafe_borrow();\n             let addr = next_test_ip4();\n@@ -1315,7 +1316,7 @@ fn test_simple_io_no_connect() {\n \n #[test]\n fn test_simple_udp_io_bind_only() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         unsafe {\n             let io: *mut IoFactoryObject = Local::unsafe_borrow();\n             let addr = next_test_ip4();\n@@ -1479,15 +1480,19 @@ fn test_simple_homed_udp_io_bind_then_move_handle_then_home_and_close() {\n \n #[test]\n fn test_simple_tcp_server_and_client() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let addr = next_test_ip4();\n+        let (port, chan) = oneshot();\n+        let port = Cell::new(port);\n+        let chan = Cell::new(chan);\n \n         // Start the server first so it's listening when we connect\n         do spawntask {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let listener = (*io).tcp_bind(addr).unwrap();\n                 let mut acceptor = listener.listen().unwrap();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept().unwrap();\n                 let mut buf = [0, .. 2048];\n                 let nread = stream.read(buf).unwrap();\n@@ -1501,6 +1506,7 @@ fn test_simple_tcp_server_and_client() {\n \n         do spawntask {\n             unsafe {\n+                port.take().recv();\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -1593,14 +1599,18 @@ fn test_simple_tcp_server_and_client_on_diff_threads() {\n \n #[test]\n fn test_simple_udp_server_and_client() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let server_addr = next_test_ip4();\n         let client_addr = next_test_ip4();\n+        let (port, chan) = oneshot();\n+        let port = Cell::new(port);\n+        let chan = Cell::new(chan);\n \n         do spawntask {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut server_socket = (*io).udp_bind(server_addr).unwrap();\n+                chan.take().send(());\n                 let mut buf = [0, .. 2048];\n                 let (nread,src) = server_socket.recvfrom(buf).unwrap();\n                 assert_eq!(nread, 8);\n@@ -1616,6 +1626,7 @@ fn test_simple_udp_server_and_client() {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut client_socket = (*io).udp_bind(client_addr).unwrap();\n+                port.take().recv();\n                 client_socket.sendto([0, 1, 2, 3, 4, 5, 6, 7], server_addr);\n             }\n         }\n@@ -1624,13 +1635,17 @@ fn test_simple_udp_server_and_client() {\n \n #[test] #[ignore(reason = \"busted\")]\n fn test_read_and_block() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let addr = next_test_ip4();\n+        let (port, chan) = oneshot();\n+        let port = Cell::new(port);\n+        let chan = Cell::new(chan);\n \n         do spawntask {\n             let io: *mut IoFactoryObject = unsafe { Local::unsafe_borrow() };\n             let listener = unsafe { (*io).tcp_bind(addr).unwrap() };\n             let mut acceptor = listener.listen().unwrap();\n+            chan.take().send(());\n             let mut stream = acceptor.accept().unwrap();\n             let mut buf = [0, .. 2048];\n \n@@ -1665,6 +1680,7 @@ fn test_read_and_block() {\n \n         do spawntask {\n             unsafe {\n+                port.take().recv();\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 stream.write([0, 1, 2, 3, 4, 5, 6, 7]);\n@@ -1679,15 +1695,19 @@ fn test_read_and_block() {\n \n #[test]\n fn test_read_read_read() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let addr = next_test_ip4();\n         static MAX: uint = 500000;\n+        let (port, chan) = oneshot();\n+        let port = Cell::new(port);\n+        let chan = Cell::new(chan);\n \n         do spawntask {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let listener = (*io).tcp_bind(addr).unwrap();\n                 let mut acceptor = listener.listen().unwrap();\n+                chan.take().send(());\n                 let mut stream = acceptor.accept().unwrap();\n                 let buf = [1, .. 2048];\n                 let mut total_bytes_written = 0;\n@@ -1700,6 +1720,7 @@ fn test_read_read_read() {\n \n         do spawntask {\n             unsafe {\n+                port.take().recv();\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut stream = (*io).tcp_connect(addr).unwrap();\n                 let mut buf = [0, .. 2048];\n@@ -1721,14 +1742,18 @@ fn test_read_read_read() {\n #[test]\n #[ignore(cfg(windows))] // FIXME #8816\n fn test_udp_twice() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let server_addr = next_test_ip4();\n         let client_addr = next_test_ip4();\n+        let (port, chan) = oneshot();\n+        let port = Cell::new(port);\n+        let chan = Cell::new(chan);\n \n         do spawntask {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut client = (*io).udp_bind(client_addr).unwrap();\n+                port.take().recv();\n                 assert!(client.sendto([1], server_addr).is_ok());\n                 assert!(client.sendto([2], server_addr).is_ok());\n             }\n@@ -1738,6 +1763,7 @@ fn test_udp_twice() {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut server = (*io).udp_bind(server_addr).unwrap();\n+                chan.take().send(());\n                 let mut buf1 = [0];\n                 let mut buf2 = [0];\n                 let (nread1, src1) = server.recvfrom(buf1).unwrap();\n@@ -1755,18 +1781,27 @@ fn test_udp_twice() {\n \n #[test]\n fn test_udp_many_read() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         let server_out_addr = next_test_ip4();\n         let server_in_addr = next_test_ip4();\n         let client_out_addr = next_test_ip4();\n         let client_in_addr = next_test_ip4();\n         static MAX: uint = 500_000;\n \n+        let (p1, c1) = oneshot();\n+        let (p2, c2) = oneshot();\n+\n+        let first = Cell::new((p1, c2));\n+        let second = Cell::new((p2, c1));\n+\n         do spawntask {\n             unsafe {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut server_out = (*io).udp_bind(server_out_addr).unwrap();\n                 let mut server_in = (*io).udp_bind(server_in_addr).unwrap();\n+                let (port, chan) = first.take();\n+                chan.send(());\n+                port.recv();\n                 let msg = [1, .. 2048];\n                 let mut total_bytes_sent = 0;\n                 let mut buf = [1];\n@@ -1790,6 +1825,9 @@ fn test_udp_many_read() {\n                 let io: *mut IoFactoryObject = Local::unsafe_borrow();\n                 let mut client_out = (*io).udp_bind(client_out_addr).unwrap();\n                 let mut client_in = (*io).udp_bind(client_in_addr).unwrap();\n+                let (port, chan) = second.take();\n+                port.recv();\n+                chan.send(());\n                 let mut total_bytes_recv = 0;\n                 let mut buf = [0, .. 2048];\n                 while total_bytes_recv < MAX {\n@@ -1814,7 +1852,7 @@ fn test_udp_many_read() {\n \n #[test]\n fn test_timer_sleep_simple() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         unsafe {\n             let io: *mut IoFactoryObject = Local::unsafe_borrow();\n             let timer = (*io).timer_init();\n@@ -1856,7 +1894,7 @@ fn file_test_uvio_full_simple_impl() {\n #[test]\n #[ignore(cfg(windows))] // FIXME #8816\n fn file_test_uvio_full_simple() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         file_test_uvio_full_simple_impl();\n     }\n }\n@@ -1876,7 +1914,7 @@ fn uvio_naive_print(input: &str) {\n \n #[test]\n fn file_test_uvio_write_to_stdout() {\n-    do run_in_newsched_task {\n+    do run_in_mt_newsched_task {\n         uvio_naive_print(\"jubilation\\n\");\n     }\n }"}]}