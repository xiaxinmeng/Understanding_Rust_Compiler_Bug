{"sha": "c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjM2NjllNzBjNmI3ZTRiYWZhMDNmNDFhZDI5YTNkZTQ2ZjgwYWQ=", "commit": {"author": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-03T21:44:36Z"}, "committer": {"name": "Vladyslav Katasonov", "email": "cpud47@gmail.com", "date": "2021-02-03T21:44:36Z"}, "message": "allow calling `&mut` methods on outer vars when extracing function", "tree": {"sha": "e198457b7b1f1aecdbdef280393d58154038c127", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e198457b7b1f1aecdbdef280393d58154038c127"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad", "html_url": "https://github.com/rust-lang/rust/commit/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad/comments", "author": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpud36", "id": 4218373, "node_id": "MDQ6VXNlcjQyMTgzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4218373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpud36", "html_url": "https://github.com/cpud36", "followers_url": "https://api.github.com/users/cpud36/followers", "following_url": "https://api.github.com/users/cpud36/following{/other_user}", "gists_url": "https://api.github.com/users/cpud36/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpud36/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpud36/subscriptions", "organizations_url": "https://api.github.com/users/cpud36/orgs", "repos_url": "https://api.github.com/users/cpud36/repos", "events_url": "https://api.github.com/users/cpud36/events{/privacy}", "received_events_url": "https://api.github.com/users/cpud36/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ff1d4809b978f821f4339a200c9ca0f13e422e", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ff1d4809b978f821f4339a200c9ca0f13e422e", "html_url": "https://github.com/rust-lang/rust/commit/86ff1d4809b978f821f4339a200c9ca0f13e422e"}], "stats": {"total": 116, "additions": 116, "deletions": 0}, "files": [{"sha": "8a4073886d3cd83ca2a357b7720f832d57589a34", "filename": "crates/assists/src/handlers/extract_function.rs", "status": "modified", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=c4f3669e70c6b7e4bafa03f41ad29a3de46f80ad", "patch": "@@ -150,6 +150,10 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n                         return true;\n                     }\n \n+                    if is_mut_method_call(ctx, path.as_ref()).unwrap_or(false) {\n+                        return true;\n+                    }\n+\n                     false\n                 });\n \n@@ -429,6 +433,17 @@ fn is_mut_ref_expr(path: Option<&ast::Expr>) -> Option<bool> {\n     Some(ref_expr.mut_token().is_some())\n }\n \n+fn is_mut_method_call(ctx: &AssistContext, path: Option<&ast::Expr>) -> Option<bool> {\n+    let path = path?;\n+    let method_call = path.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n+\n+    let func = ctx.sema.resolve_method_call(&method_call)?;\n+    let self_param = func.self_param(ctx.db())?;\n+    let access = self_param.access(ctx.db());\n+\n+    Some(matches!(access, hir::Access::Exclusive))\n+}\n+\n fn fix_param_usages(ctx: &AssistContext, params: &[Param], syntax: &SyntaxNode) -> SyntaxNode {\n     let mut rewriter = SyntaxRewriter::default();\n     for param in params {\n@@ -1507,6 +1522,107 @@ fn foo() {\n fn $0fun_name(mut n: i32) {\n     let v = &mut n;\n     *v += 1;\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn mut_method_call() {\n+        check_assist(\n+            extract_function,\n+            r\"\n+trait I {\n+    fn inc(&mut self);\n+}\n+impl I for i32 {\n+    fn inc(&mut self) { *self += 1 }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    $0n.inc();$0\n+}\",\n+            r\"\n+trait I {\n+    fn inc(&mut self);\n+}\n+impl I for i32 {\n+    fn inc(&mut self) { *self += 1 }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    fun_name(n);\n+}\n+\n+fn $0fun_name(mut n: i32) {\n+    n.inc();\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn shared_method_call() {\n+        check_assist(\n+            extract_function,\n+            r\"\n+trait I {\n+    fn succ(&self);\n+}\n+impl I for i32 {\n+    fn succ(&self) { *self + 1 }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    $0n.succ();$0\n+}\",\n+            r\"\n+trait I {\n+    fn succ(&self);\n+}\n+impl I for i32 {\n+    fn succ(&self) { *self + 1 }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    fun_name(n);\n+}\n+\n+fn $0fun_name(n: i32) {\n+    n.succ();\n+}\",\n+        );\n+    }\n+\n+    #[test]\n+    fn mut_method_call_with_other_receiver() {\n+        check_assist(\n+            extract_function,\n+            r\"\n+trait I {\n+    fn inc(&mut self, n: i32);\n+}\n+impl I for i32 {\n+    fn inc(&mut self, n: i32) { *self += n }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    $0let mut m = 2;\n+    m.inc(n);$0\n+}\",\n+            r\"\n+trait I {\n+    fn inc(&mut self, n: i32);\n+}\n+impl I for i32 {\n+    fn inc(&mut self, n: i32) { *self += n }\n+}\n+fn foo() {\n+    let mut n = 1;\n+    fun_name(n);\n+}\n+\n+fn $0fun_name(n: i32) {\n+    let mut m = 2;\n+    m.inc(n);\n }\",\n         );\n     }"}]}