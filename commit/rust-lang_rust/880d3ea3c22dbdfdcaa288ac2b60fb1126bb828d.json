{"sha": "880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "node_id": "C_kwDOAAsO6NoAKDg4MGQzZWEzYzIyZGJkZmRjYWEyODhhYzJiNjBmYjExMjZiYjgyOGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-28T06:45:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-28T06:45:51Z"}, "message": "Rollup merge of #97034 - fee1-dead-contrib:layout-hash, r=dtolnay\n\nImplement `Hash` for `core::alloc::Layout`\n\nThis was brought up on [reddit](https://www.reddit.com/r/rust/comments/uoypui/the_standard_library_types_are_good_except_when/), and I don't see why Layout shouldn't implement `Hash`. Feel free to comment if I am wrong though :)", "tree": {"sha": "3f9a8c503f7250a4ba931b03aea1e00765fb7543", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9a8c503f7250a4ba931b03aea1e00765fb7543"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJikcUgCRBK7hj4Ov3rIwAAvbgIALG2+hZwQJsHOaEpcFuwrSyv\nJ3WIoJ52uIZ9pg0BYaU0aBTgY+whMvMgm2JpfmQSVQOXw4ztmDncpNdgbytUhot6\n7ZAWoTgO1ZBWsVfivStpDXBsdVTSKGWKwq2ZE893joHL6h9ZT4E8+ai3aMojtFUG\ncHNfkUyvfnyGuLghF3UHPicR9Tn4ft6u4dwhQ2uXkMW+Cimc3jNnqvw/RFUnIlQ7\n8U8sDw25AKXcBdSMIj7PQA9MZNPIguNblSmqtntgVObeZEe/Xowb4MRSLUtzXdgW\nwrfucijtud+uH4TIbtZY155Vn4VE1pfestjWMURPdkeAIjwHhBv2YuoXlK3mrm8=\n=dZtO\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f9a8c503f7250a4ba931b03aea1e00765fb7543\nparent 837cd9e26c5f741d57c19d4ae35253f26b654a1e\nparent af9168c467e04c1f67ff88d48735f5f4a6dc5c8c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653720351 +0200\ncommitter GitHub <noreply@github.com> 1653720351 +0200\n\nRollup merge of #97034 - fee1-dead-contrib:layout-hash, r=dtolnay\n\nImplement `Hash` for `core::alloc::Layout`\n\nThis was brought up on [reddit](https://www.reddit.com/r/rust/comments/uoypui/the_standard_library_types_are_good_except_when/), and I don't see why Layout shouldn't implement `Hash`. Feel free to comment if I am wrong though :)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "html_url": "https://github.com/rust-lang/rust/commit/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "837cd9e26c5f741d57c19d4ae35253f26b654a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/837cd9e26c5f741d57c19d4ae35253f26b654a1e", "html_url": "https://github.com/rust-lang/rust/commit/837cd9e26c5f741d57c19d4ae35253f26b654a1e"}, {"sha": "af9168c467e04c1f67ff88d48735f5f4a6dc5c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/af9168c467e04c1f67ff88d48735f5f4a6dc5c8c", "html_url": "https://github.com/rust-lang/rust/commit/af9168c467e04c1f67ff88d48735f5f4a6dc5c8c"}], "stats": {"total": 11, "additions": 9, "deletions": 2}, "files": [{"sha": "2f378836cbbb37619ac0a6f020c8ea356931e8e1", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "patch": "@@ -26,7 +26,7 @@ const fn size_align<T>() -> (usize, usize) {\n /// like this are met, use specific allocators with looser\n /// requirements, or use the more lenient `Allocator` interface.)\n #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n #[lang = \"alloc_layout\"]\n pub struct Layout {\n     // size of the requested block of memory, measured in bytes."}, {"sha": "fcfa95120df21e94d9c6f8c0b3f4c76026a0aa5b", "filename": "library/core/src/mem/valid_align.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fvalid_align.rs?ref=880d3ea3c22dbdfdcaa288ac2b60fb1126bb828d", "patch": "@@ -1,6 +1,6 @@\n use crate::convert::TryFrom;\n use crate::num::NonZeroUsize;\n-use crate::{cmp, fmt, mem, num};\n+use crate::{cmp, fmt, hash, mem, num};\n \n /// A type storing a `usize` which is a power of two, and thus\n /// represents a possible alignment in the rust abstract machine.\n@@ -105,6 +105,13 @@ impl cmp::PartialOrd for ValidAlign {\n     }\n }\n \n+impl hash::Hash for ValidAlign {\n+    #[inline]\n+    fn hash<H: hash::Hasher>(&self, state: &mut H) {\n+        self.as_nonzero().hash(state)\n+    }\n+}\n+\n #[cfg(target_pointer_width = \"16\")]\n type ValidAlignEnum = ValidAlignEnum16;\n #[cfg(target_pointer_width = \"32\")]"}]}