{"sha": "4719cb30367496c90827f05b52f9fb3306aeae11", "node_id": "C_kwDOAAsO6NoAKDQ3MTljYjMwMzY3NDk2YzkwODI3ZjA1YjUyZjlmYjMzMDZhZWFlMTE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-04-30T17:38:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-25T18:48:42Z"}, "message": "Ignore span references from diagnostics.\n\nThe diagnostics are replayed at the correct place anyway.", "tree": {"sha": "90128c8062434f2fb1fdc041f07b9b82cd9b175c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90128c8062434f2fb1fdc041f07b9b82cd9b175c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4719cb30367496c90827f05b52f9fb3306aeae11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4719cb30367496c90827f05b52f9fb3306aeae11", "html_url": "https://github.com/rust-lang/rust/commit/4719cb30367496c90827f05b52f9fb3306aeae11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4719cb30367496c90827f05b52f9fb3306aeae11/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40c8165395cef78f5f8bfadd8802cbda41a4cb00", "url": "https://api.github.com/repos/rust-lang/rust/commits/40c8165395cef78f5f8bfadd8802cbda41a4cb00", "html_url": "https://github.com/rust-lang/rust/commit/40c8165395cef78f5f8bfadd8802cbda41a4cb00"}], "stats": {"total": 117, "additions": 66, "deletions": 51}, "files": [{"sha": "4b9073d470b66161a0d2ad039e0615f60111b5cf", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 51, "deletions": 47, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=4719cb30367496c90827f05b52f9fb3306aeae11", "patch": "@@ -473,10 +473,12 @@ pub enum StashKey {\n     CallAssocMethod,\n }\n \n-fn default_track_diagnostic(_: &Diagnostic) {}\n+fn default_track_diagnostic(d: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {\n+    (*f)(d)\n+}\n \n-pub static TRACK_DIAGNOSTICS: AtomicRef<fn(&Diagnostic)> =\n-    AtomicRef::new(&(default_track_diagnostic as fn(&_)));\n+pub static TRACK_DIAGNOSTICS: AtomicRef<fn(&mut Diagnostic, &mut dyn FnMut(&mut Diagnostic))> =\n+    AtomicRef::new(&(default_track_diagnostic as _));\n \n #[derive(Copy, Clone, Default)]\n pub struct HandlerFlags {\n@@ -1290,67 +1292,69 @@ impl HandlerInner {\n             && !diagnostic.is_force_warn()\n         {\n             if diagnostic.has_future_breakage() {\n-                (*TRACK_DIAGNOSTICS)(diagnostic);\n+                (*TRACK_DIAGNOSTICS)(diagnostic, &mut |_| {});\n             }\n             return None;\n         }\n \n-        (*TRACK_DIAGNOSTICS)(diagnostic);\n-\n         if matches!(diagnostic.level, Level::Expect(_) | Level::Allow) {\n+            (*TRACK_DIAGNOSTICS)(diagnostic, &mut |_| {});\n             return None;\n         }\n \n-        if let Some(ref code) = diagnostic.code {\n-            self.emitted_diagnostic_codes.insert(code.clone());\n-        }\n-\n-        let already_emitted = |this: &mut Self| {\n-            let mut hasher = StableHasher::new();\n-            diagnostic.hash(&mut hasher);\n-            let diagnostic_hash = hasher.finish();\n-            !this.emitted_diagnostics.insert(diagnostic_hash)\n-        };\n+        let mut guaranteed = None;\n+        (*TRACK_DIAGNOSTICS)(diagnostic, &mut |diagnostic| {\n+            if let Some(ref code) = diagnostic.code {\n+                self.emitted_diagnostic_codes.insert(code.clone());\n+            }\n \n-        // Only emit the diagnostic if we've been asked to deduplicate or\n-        // haven't already emitted an equivalent diagnostic.\n-        if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n-            debug!(?diagnostic);\n-            debug!(?self.emitted_diagnostics);\n-            let already_emitted_sub = |sub: &mut SubDiagnostic| {\n-                debug!(?sub);\n-                if sub.level != Level::OnceNote {\n-                    return false;\n-                }\n+            let already_emitted = |this: &mut Self| {\n                 let mut hasher = StableHasher::new();\n-                sub.hash(&mut hasher);\n+                diagnostic.hash(&mut hasher);\n                 let diagnostic_hash = hasher.finish();\n-                debug!(?diagnostic_hash);\n-                !self.emitted_diagnostics.insert(diagnostic_hash)\n+                !this.emitted_diagnostics.insert(diagnostic_hash)\n             };\n \n-            diagnostic.children.drain_filter(already_emitted_sub).for_each(|_| {});\n-\n-            self.emitter.emit_diagnostic(diagnostic);\n-            if diagnostic.is_error() {\n-                self.deduplicated_err_count += 1;\n-            } else if let Warning(_) = diagnostic.level {\n-                self.deduplicated_warn_count += 1;\n+            // Only emit the diagnostic if we've been asked to deduplicate or\n+            // haven't already emitted an equivalent diagnostic.\n+            if !(self.flags.deduplicate_diagnostics && already_emitted(self)) {\n+                debug!(?diagnostic);\n+                debug!(?self.emitted_diagnostics);\n+                let already_emitted_sub = |sub: &mut SubDiagnostic| {\n+                    debug!(?sub);\n+                    if sub.level != Level::OnceNote {\n+                        return false;\n+                    }\n+                    let mut hasher = StableHasher::new();\n+                    sub.hash(&mut hasher);\n+                    let diagnostic_hash = hasher.finish();\n+                    debug!(?diagnostic_hash);\n+                    !self.emitted_diagnostics.insert(diagnostic_hash)\n+                };\n+\n+                diagnostic.children.drain_filter(already_emitted_sub).for_each(|_| {});\n+\n+                self.emitter.emit_diagnostic(diagnostic);\n+                if diagnostic.is_error() {\n+                    self.deduplicated_err_count += 1;\n+                } else if let Warning(_) = diagnostic.level {\n+                    self.deduplicated_warn_count += 1;\n+                }\n             }\n-        }\n-        if diagnostic.is_error() {\n-            if matches!(diagnostic.level, Level::Error { lint: true }) {\n-                self.bump_lint_err_count();\n+            if diagnostic.is_error() {\n+                if matches!(diagnostic.level, Level::Error { lint: true }) {\n+                    self.bump_lint_err_count();\n+                } else {\n+                    self.bump_err_count();\n+                }\n+\n+                guaranteed = Some(ErrorGuaranteed::unchecked_claim_error_was_emitted());\n             } else {\n-                self.bump_err_count();\n+                self.bump_warn_count();\n             }\n+        });\n \n-            Some(ErrorGuaranteed::unchecked_claim_error_was_emitted())\n-        } else {\n-            self.bump_warn_count();\n-\n-            None\n-        }\n+        guaranteed\n     }\n \n     fn emit_artifact_notification(&mut self, path: &Path, artifact_type: &str) {"}, {"sha": "ee0552d77ceee8080eab5dd43ed6f63f115a2e9f", "filename": "compiler/rustc_interface/src/callbacks.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fcallbacks.rs?ref=4719cb30367496c90827f05b52f9fb3306aeae11", "patch": "@@ -10,6 +10,7 @@\n //! origin crate when the `TyCtxt` is not present in TLS.\n \n use rustc_errors::{Diagnostic, TRACK_DIAGNOSTICS};\n+use rustc_middle::dep_graph::TaskDepsRef;\n use rustc_middle::ty::tls;\n use std::fmt;\n \n@@ -26,14 +27,22 @@ fn track_span_parent(def_id: rustc_span::def_id::LocalDefId) {\n /// This is a callback from `rustc_ast` as it cannot access the implicit state\n /// in `rustc_middle` otherwise. It is used when diagnostic messages are\n /// emitted and stores them in the current query, if there is one.\n-fn track_diagnostic(diagnostic: &Diagnostic) {\n+fn track_diagnostic(diagnostic: &mut Diagnostic, f: &mut dyn FnMut(&mut Diagnostic)) {\n     tls::with_context_opt(|icx| {\n         if let Some(icx) = icx {\n             if let Some(diagnostics) = icx.diagnostics {\n                 let mut diagnostics = diagnostics.lock();\n                 diagnostics.extend(Some(diagnostic.clone()));\n+                std::mem::drop(diagnostics);\n             }\n+\n+            // Diagnostics are tracked, we can ignore the dependency.\n+            let icx = tls::ImplicitCtxt { task_deps: TaskDepsRef::Ignore, ..icx.clone() };\n+            return tls::enter_context(&icx, move |_| (*f)(diagnostic));\n         }\n+\n+        // In any other case, invoke diagnostics anyway.\n+        (*f)(diagnostic);\n     })\n }\n \n@@ -55,5 +64,5 @@ fn def_id_debug(def_id: rustc_hir::def_id::DefId, f: &mut fmt::Formatter<'_>) ->\n pub fn setup_callbacks() {\n     rustc_span::SPAN_TRACK.swap(&(track_span_parent as fn(_)));\n     rustc_hir::def_id::DEF_ID_DEBUG.swap(&(def_id_debug as fn(_, &mut fmt::Formatter<'_>) -> _));\n-    TRACK_DIAGNOSTICS.swap(&(track_diagnostic as fn(&_)));\n+    TRACK_DIAGNOSTICS.swap(&(track_diagnostic as _));\n }"}, {"sha": "0b1ff5d709fe904e96dd3703ba79966817af37c0", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4719cb30367496c90827f05b52f9fb3306aeae11/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=4719cb30367496c90827f05b52f9fb3306aeae11", "patch": "@@ -634,7 +634,7 @@ impl<K: DepKind> DepGraph<K> {\n         if dep_node_debug.borrow().contains_key(&dep_node) {\n             return;\n         }\n-        let debug_str = debug_str_gen();\n+        let debug_str = self.with_ignore(debug_str_gen);\n         dep_node_debug.borrow_mut().insert(dep_node, debug_str);\n     }\n \n@@ -829,7 +829,9 @@ impl<K: DepKind> DepGraph<K> {\n         );\n \n         if !side_effects.is_empty() {\n-            self.emit_side_effects(qcx, data, dep_node_index, side_effects);\n+            self.with_query_deserialization(|| {\n+                self.emit_side_effects(qcx, data, dep_node_index, side_effects)\n+            });\n         }\n \n         // ... and finally storing a \"Green\" entry in the color map."}]}