{"sha": "c817596c694579667d3e2ee207064ae273e84940", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MTc1OTZjNjk0NTc5NjY3ZDNlMmVlMjA3MDY0YWUyNzNlODQ5NDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T12:14:53Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-10T18:24:42Z"}, "message": "lowering: extract lower_expr_try", "tree": {"sha": "47a88e413c5c78aa94a0ce9522c5f302c66a5a53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47a88e413c5c78aa94a0ce9522c5f302c66a5a53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c817596c694579667d3e2ee207064ae273e84940", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c817596c694579667d3e2ee207064ae273e84940", "html_url": "https://github.com/rust-lang/rust/commit/c817596c694579667d3e2ee207064ae273e84940", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c817596c694579667d3e2ee207064ae273e84940/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf20d8c3887f96f990276cf6a0e6cee2687b1048", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf20d8c3887f96f990276cf6a0e6cee2687b1048", "html_url": "https://github.com/rust-lang/rust/commit/cf20d8c3887f96f990276cf6a0e6cee2687b1048"}], "stats": {"total": 215, "additions": 105, "deletions": 110}, "files": [{"sha": "90bc6a3ad77fc67d08640a1d82ebc396d10430b0", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 105, "deletions": 110, "changes": 215, "blob_url": "https://github.com/rust-lang/rust/blob/c817596c694579667d3e2ee207064ae273e84940/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c817596c694579667d3e2ee207064ae273e84940/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=c817596c694579667d3e2ee207064ae273e84940", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use syntax::attr;\n use syntax::ptr::P as AstP;\n use syntax::ast::*;\n-use syntax::source_map::{respan, DesugaringKind};\n+use syntax::source_map::{respan, DesugaringKind, Span};\n use syntax::symbol::{sym, Symbol};\n \n impl LoweringContext<'_> {\n@@ -691,115 +691,7 @@ impl LoweringContext<'_> {\n                 return self.expr_drop_temps(head_sp, match_expr, e.attrs.clone())\n             }\n \n-            // Desugar `ExprKind::Try`\n-            // from: `<expr>?`\n-            ExprKind::Try(ref sub_expr) => {\n-                // into:\n-                //\n-                // match Try::into_result(<expr>) {\n-                //     Ok(val) => #[allow(unreachable_code)] val,\n-                //     Err(err) => #[allow(unreachable_code)]\n-                //                 // If there is an enclosing `catch {...}`\n-                //                 break 'catch_target Try::from_error(From::from(err)),\n-                //                 // Otherwise\n-                //                 return Try::from_error(From::from(err)),\n-                // }\n-\n-                let unstable_span = self.mark_span_with_reason(\n-                    DesugaringKind::QuestionMark,\n-                    e.span,\n-                    self.allow_try_trait.clone(),\n-                );\n-                let try_span = self.sess.source_map().end_point(e.span);\n-                let try_span = self.mark_span_with_reason(\n-                    DesugaringKind::QuestionMark,\n-                    try_span,\n-                    self.allow_try_trait.clone(),\n-                );\n-\n-                // `Try::into_result(<expr>)`\n-                let discr = {\n-                    // expand <expr>\n-                    let sub_expr = self.lower_expr(sub_expr);\n-\n-                    let path = &[sym::ops, sym::Try, sym::into_result];\n-                    P(self.expr_call_std_path(\n-                        unstable_span,\n-                        path,\n-                        hir_vec![sub_expr],\n-                    ))\n-                };\n-\n-                // `#[allow(unreachable_code)]`\n-                let attr = {\n-                    // `allow(unreachable_code)`\n-                    let allow = {\n-                        let allow_ident = Ident::new(sym::allow, e.span);\n-                        let uc_ident = Ident::new(sym::unreachable_code, e.span);\n-                        let uc_nested = attr::mk_nested_word_item(uc_ident);\n-                        attr::mk_list_item(allow_ident, vec![uc_nested])\n-                    };\n-                    attr::mk_attr_outer(allow)\n-                };\n-                let attrs = vec![attr];\n-\n-                // `Ok(val) => #[allow(unreachable_code)] val,`\n-                let ok_arm = {\n-                    let val_ident = Ident::with_empty_ctxt(sym::val);\n-                    let (val_pat, val_pat_nid) = self.pat_ident(e.span, val_ident);\n-                    let val_expr = P(self.expr_ident_with_attrs(\n-                        e.span,\n-                        val_ident,\n-                        val_pat_nid,\n-                        ThinVec::from(attrs.clone()),\n-                    ));\n-                    let ok_pat = self.pat_ok(e.span, val_pat);\n-\n-                    self.arm(hir_vec![ok_pat], val_expr)\n-                };\n-\n-                // `Err(err) => #[allow(unreachable_code)]\n-                //              return Try::from_error(From::from(err)),`\n-                let err_arm = {\n-                    let err_ident = Ident::with_empty_ctxt(sym::err);\n-                    let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n-                    let from_expr = {\n-                        let from_path = &[sym::convert, sym::From, sym::from];\n-                        let err_expr = self.expr_ident(try_span, err_ident, err_local_nid);\n-                        self.expr_call_std_path(try_span, from_path, hir_vec![err_expr])\n-                    };\n-                    let from_err_expr =\n-                        self.wrap_in_try_constructor(sym::from_error, from_expr, unstable_span);\n-                    let thin_attrs = ThinVec::from(attrs);\n-                    let catch_scope = self.catch_scopes.last().map(|x| *x);\n-                    let ret_expr = if let Some(catch_node) = catch_scope {\n-                        let target_id = Ok(self.lower_node_id(catch_node));\n-                        P(self.expr(\n-                            try_span,\n-                            hir::ExprKind::Break(\n-                                hir::Destination {\n-                                    label: None,\n-                                    target_id,\n-                                },\n-                                Some(from_err_expr),\n-                            ),\n-                            thin_attrs,\n-                        ))\n-                    } else {\n-                        P(self.expr(try_span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n-                    };\n-\n-                    let err_pat = self.pat_err(try_span, err_local);\n-                    self.arm(hir_vec![err_pat], ret_expr)\n-                };\n-\n-                hir::ExprKind::Match(\n-                    discr,\n-                    hir_vec![err_arm, ok_arm],\n-                    hir::MatchSource::TryDesugar,\n-                )\n-            }\n-\n+            ExprKind::Try(ref sub_expr) => self.lower_expr_try(e.span, sub_expr),\n             ExprKind::Mac(_) => panic!(\"Shouldn't exist here\"),\n         };\n \n@@ -810,4 +702,107 @@ impl LoweringContext<'_> {\n             attrs: e.attrs.clone(),\n         }\n     }\n+\n+    /// Desugar `ExprKind::Try` from: `<expr>?` into:\n+    /// ```rust\n+    /// match Try::into_result(<expr>) {\n+    ///     Ok(val) => #[allow(unreachable_code)] val,\n+    ///     Err(err) => #[allow(unreachable_code)]\n+    ///                 // If there is an enclosing `try {...}`:\n+    ///                 break 'catch_target Try::from_error(From::from(err)),\n+    ///                 // Otherwise:\n+    ///                 return Try::from_error(From::from(err)),\n+    /// }\n+    /// ```\n+    fn lower_expr_try(&mut self, span: Span, sub_expr: &Expr) -> hir::ExprKind {\n+        let unstable_span = self.mark_span_with_reason(\n+            DesugaringKind::QuestionMark,\n+            span,\n+            self.allow_try_trait.clone(),\n+        );\n+        let try_span = self.sess.source_map().end_point(span);\n+        let try_span = self.mark_span_with_reason(\n+            DesugaringKind::QuestionMark,\n+            try_span,\n+            self.allow_try_trait.clone(),\n+        );\n+\n+        // `Try::into_result(<expr>)`\n+        let scrutinee = {\n+            // expand <expr>\n+            let sub_expr = self.lower_expr(sub_expr);\n+\n+            let path = &[sym::ops, sym::Try, sym::into_result];\n+            P(self.expr_call_std_path(unstable_span, path, hir_vec![sub_expr]))\n+        };\n+\n+        // `#[allow(unreachable_code)]`\n+        let attr = {\n+            // `allow(unreachable_code)`\n+            let allow = {\n+                let allow_ident = Ident::new(sym::allow, span);\n+                let uc_ident = Ident::new(sym::unreachable_code, span);\n+                let uc_nested = attr::mk_nested_word_item(uc_ident);\n+                attr::mk_list_item(allow_ident, vec![uc_nested])\n+            };\n+            attr::mk_attr_outer(allow)\n+        };\n+        let attrs = vec![attr];\n+\n+        // `Ok(val) => #[allow(unreachable_code)] val,`\n+        let ok_arm = {\n+            let val_ident = Ident::with_empty_ctxt(sym::val);\n+            let (val_pat, val_pat_nid) = self.pat_ident(span, val_ident);\n+            let val_expr = P(self.expr_ident_with_attrs(\n+                span,\n+                val_ident,\n+                val_pat_nid,\n+                ThinVec::from(attrs.clone()),\n+            ));\n+            let ok_pat = self.pat_ok(span, val_pat);\n+\n+            self.arm(hir_vec![ok_pat], val_expr)\n+        };\n+\n+        // `Err(err) => #[allow(unreachable_code)]\n+        //              return Try::from_error(From::from(err)),`\n+        let err_arm = {\n+            let err_ident = Ident::with_empty_ctxt(sym::err);\n+            let (err_local, err_local_nid) = self.pat_ident(try_span, err_ident);\n+            let from_expr = {\n+                let from_path = &[sym::convert, sym::From, sym::from];\n+                let err_expr = self.expr_ident(try_span, err_ident, err_local_nid);\n+                self.expr_call_std_path(try_span, from_path, hir_vec![err_expr])\n+            };\n+            let from_err_expr =\n+                self.wrap_in_try_constructor(sym::from_error, from_expr, unstable_span);\n+            let thin_attrs = ThinVec::from(attrs);\n+            let catch_scope = self.catch_scopes.last().map(|x| *x);\n+            let ret_expr = if let Some(catch_node) = catch_scope {\n+                let target_id = Ok(self.lower_node_id(catch_node));\n+                P(self.expr(\n+                    try_span,\n+                    hir::ExprKind::Break(\n+                        hir::Destination {\n+                            label: None,\n+                            target_id,\n+                        },\n+                        Some(from_err_expr),\n+                    ),\n+                    thin_attrs,\n+                ))\n+            } else {\n+                P(self.expr(try_span, hir::ExprKind::Ret(Some(from_err_expr)), thin_attrs))\n+            };\n+\n+            let err_pat = self.pat_err(try_span, err_local);\n+            self.arm(hir_vec![err_pat], ret_expr)\n+        };\n+\n+        hir::ExprKind::Match(\n+            scrutinee,\n+            hir_vec![err_arm, ok_arm],\n+            hir::MatchSource::TryDesugar,\n+        )\n+    }\n }"}]}