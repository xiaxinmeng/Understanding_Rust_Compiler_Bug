{"sha": "a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMTljMmM2YmFkMmJhZTdlMGY1YzUyN2VhOGExMTYxNWFjYzAzN2Y=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-07T18:57:09Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-07-14T11:57:46Z"}, "message": "Remove CoreEmitter and focus on Emitter", "tree": {"sha": "07a67aeae42145e7a6ae8c1fb1762facc3f0e95e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07a67aeae42145e7a6ae8c1fb1762facc3f0e95e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "html_url": "https://github.com/rust-lang/rust/commit/a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/comments", "author": null, "committer": null, "parents": [{"sha": "a6e7239e7b5db3a96fb6b84c41ecbced64b0ad2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e7239e7b5db3a96fb6b84c41ecbced64b0ad2e", "html_url": "https://github.com/rust-lang/rust/commit/a6e7239e7b5db3a96fb6b84c41ecbced64b0ad2e"}], "stats": {"total": 126, "additions": 58, "deletions": 68}, "files": [{"sha": "ace469680df2793e0d5466b9a748c54fdd6475bd", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "patch": "@@ -33,8 +33,8 @@ use syntax::ast;\n use syntax::abi::Abi;\n use syntax::codemap::CodeMap;\n use errors;\n-use errors::emitter::{CoreEmitter, Emitter};\n-use errors::{Level, RenderSpan};\n+use errors::emitter::Emitter;\n+use errors::{Level, RenderSpan, DiagnosticBuilder};\n use syntax::parse::token;\n use syntax::feature_gate::UnstableFeatures;\n use syntax_pos::DUMMY_SP;\n@@ -76,15 +76,12 @@ fn remove_message(e: &mut ExpectErrorEmitter, msg: &str, lvl: Level) {\n     }\n }\n \n-impl CoreEmitter for ExpectErrorEmitter {\n-    fn emit_message(&mut self,\n-                    _sp: &RenderSpan,\n-                    msg: &str,\n-                    _: Option<&str>,\n-                    lvl: Level,\n-                    _is_header: bool,\n-                    _show_snippet: bool) {\n-        remove_message(self, msg, lvl);\n+impl Emitter for ExpectErrorEmitter {\n+    fn emit(&mut self, db: &DiagnosticBuilder) {\n+        remove_message(self, db.message, lvl);\n+        for child in &db.children {\n+            remove_message(self, &child.message, child.level);\n+        }\n     }\n }\n "}, {"sha": "a0d7120dd4f46ea6183da9331f3d3d9eaf8a6b13", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "patch": "@@ -25,47 +25,29 @@ use std::io;\n use std::rc::Rc;\n use term;\n \n-/// Emitter trait for emitting errors. Do not implement this directly:\n-/// implement `CoreEmitter` instead.\n+/// Emitter trait for emitting errors.\n pub trait Emitter {\n     /// Emit a structured diagnostic.\n     fn emit(&mut self, db: &DiagnosticBuilder);\n }\n \n-pub trait CoreEmitter {\n-    fn emit_message(&mut self,\n-                    rsp: &RenderSpan,\n-                    msg: &str,\n-                    code: Option<&str>,\n-                    lvl: Level,\n-                    is_header: bool,\n-                    show_snippet: bool);\n-}\n-\n-impl<T: CoreEmitter> Emitter for T {\n+impl Emitter for EmitterWriter {\n     fn emit(&mut self, db: &DiagnosticBuilder) {\n-        let old_school = check_old_skool();\n-        let db_span = FullSpan(db.span.clone());\n         self.emit_message(&FullSpan(db.span.clone()),\n                           &db.message,\n                           db.code.as_ref().map(|s| &**s),\n                           db.level,\n                           true,\n                           true);\n-        for child in &db.children {\n-            let render_span = child.render_span\n-                                   .clone()\n-                                   .unwrap_or_else(\n-                                       || FullSpan(child.span.clone()));\n \n-            if !old_school {\n-                self.emit_message(&render_span,\n-                                    &child.message,\n-                                    None,\n-                                    child.level,\n-                                    false,\n-                                    true);\n-            } else {\n+        if check_old_skool() {\n+            let db_span = FullSpan(db.span.clone());\n+\n+            for child in &db.children {\n+                let render_span = child.render_span\n+                                    .clone()\n+                                    .unwrap_or_else(\n+                                        || FullSpan(child.span.clone()));\n                 let (render_span, show_snippet) = match render_span.span().primary_span() {\n                     None => (db_span.clone(), false),\n                     _ => (render_span, true)\n@@ -77,6 +59,19 @@ impl<T: CoreEmitter> Emitter for T {\n                                     false,\n                                     show_snippet);\n             }\n+        } else {\n+            for child in &db.children {\n+                let render_span = child.render_span\n+                                    .clone()\n+                                    .unwrap_or_else(\n+                                        || FullSpan(child.span.clone()));\n+                self.emit_message(&render_span,\n+                                    &child.message,\n+                                    None,\n+                                    child.level,\n+                                    false,\n+                                    true);\n+            }\n         }\n     }\n }\n@@ -114,21 +109,6 @@ pub struct EmitterWriter {\n     format_mode: FormatMode\n }\n \n-impl CoreEmitter for EmitterWriter {\n-    fn emit_message(&mut self,\n-                    rsp: &RenderSpan,\n-                    msg: &str,\n-                    code: Option<&str>,\n-                    lvl: Level,\n-                    is_header: bool,\n-                    show_snippet: bool) {\n-        match self.emit_message_(rsp, msg, code, lvl, is_header, show_snippet) {\n-            Ok(()) => { }\n-            Err(e) => panic!(\"failed to emit error: {}\", e)\n-        }\n-    }\n-}\n-\n /// Do not use this for messages that end in `\\n` \u2013 use `println_maybe_styled` instead. See\n /// `EmitterWriter::print_maybe_styled` for details.\n macro_rules! print_maybe_styled {\n@@ -177,6 +157,19 @@ impl EmitterWriter {\n                         format_mode: format_mode.clone() }\n     }\n \n+    fn emit_message(&mut self,\n+                    rsp: &RenderSpan,\n+                    msg: &str,\n+                    code: Option<&str>,\n+                    lvl: Level,\n+                    is_header: bool,\n+                    show_snippet: bool) {\n+        match self.emit_message_(rsp, msg, code, lvl, is_header, show_snippet) {\n+            Ok(()) => { }\n+            Err(e) => panic!(\"failed to emit error: {}\", e)\n+        }\n+    }\n+\n     fn emit_message_(&mut self,\n                      rsp: &RenderSpan,\n                      msg: &str,"}, {"sha": "33cffa8a480137a17a36dffef93a12422ae64065", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a019c2c6bad2bae7e0f5c527ea8a11615acc037f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=a019c2c6bad2bae7e0f5c527ea8a11615acc037f", "patch": "@@ -19,8 +19,8 @@ use llvm::SMDiagnosticRef;\n use {CrateTranslation, ModuleTranslation};\n use util::common::time;\n use util::common::path2cstr;\n-use errors::{self, Handler, Level, RenderSpan};\n-use errors::emitter::CoreEmitter;\n+use errors::{self, Handler, Level, DiagnosticBuilder};\n+use errors::emitter::Emitter;\n use syntax_pos::MultiSpan;\n \n use std::collections::HashMap;\n@@ -100,23 +100,23 @@ impl SharedEmitter {\n     }\n }\n \n-impl CoreEmitter for SharedEmitter {\n-    fn emit_message(&mut self,\n-                    _rsp: &RenderSpan,\n-                    msg: &str,\n-                    code: Option<&str>,\n-                    lvl: Level,\n-                    _is_header: bool,\n-                    _show_snippet: bool) {\n+impl Emitter for SharedEmitter {\n+    fn emit(&mut self, db: &DiagnosticBuilder) {\n         self.buffer.lock().unwrap().push(Diagnostic {\n-            msg: msg.to_string(),\n-            code: code.map(|s| s.to_string()),\n-            lvl: lvl,\n+            msg: db.message.to_string(),\n+            code: db.code.clone(),\n+            lvl: db.level,\n         });\n+        for child in &db.children {\n+            self.buffer.lock().unwrap().push(Diagnostic {\n+                msg: child.message.to_string(),\n+                code: None,\n+                lvl: child.level,\n+            });\n+        }\n     }\n }\n \n-\n // On android, we by default compile for armv7 processors. This enables\n // things like double word CAS instructions (rather than emulating them)\n // which are *far* more efficient. This is obviously undesirable in some"}]}