{"sha": "78e2503db31d7d07af98055ca284b0fb14752bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTI1MDNkYjMxZDdkMDdhZjk4MDU1Y2EyODRiMGZiMTQ3NTJiZjk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-30T04:52:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-09-30T12:52:08Z"}, "message": "librustc: Stop looking in metadata in type contents.\n\n4x improvement in pre-trans compile time for rustc.", "tree": {"sha": "7410fd6858c677cc96bc9e98bc3d13017ca9d439", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7410fd6858c677cc96bc9e98bc3d13017ca9d439"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e2503db31d7d07af98055ca284b0fb14752bf9", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e2503db31d7d07af98055ca284b0fb14752bf9", "html_url": "https://github.com/rust-lang/rust/commit/78e2503db31d7d07af98055ca284b0fb14752bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e2503db31d7d07af98055ca284b0fb14752bf9/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2f8d4c5050be01923f28308b71ad14a2776b30e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f8d4c5050be01923f28308b71ad14a2776b30e", "html_url": "https://github.com/rust-lang/rust/commit/d2f8d4c5050be01923f28308b71ad14a2776b30e"}], "stats": {"total": 70, "additions": 61, "deletions": 9}, "files": [{"sha": "3a329164e512b04c58001cc80c92f44a63e357b5", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -593,6 +593,7 @@ impl LintPass for UnusedAttribute {\n             \"static_assert\",\n             \"thread_local\",\n             \"no_debug\",\n+            \"unsafe_no_drop_flag\",\n \n             // used in resolve\n             \"prelude_import\","}, {"sha": "2a8aa791c61a66a52d01e9faac7cd53ef268d4dd", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -214,6 +214,8 @@ pub static tag_reachable_extern_fn_id: uint = 0x91;\n \n pub static tag_items_data_item_stability: uint = 0x92;\n \n+pub static tag_items_data_item_repr: uint = 0x93;\n+\n #[deriving(Clone, Show)]\n pub struct LinkMeta {\n     pub crate_name: String,"}, {"sha": "f0ec5beec460721a247e3aa5049e160f22fb1dd2", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -350,6 +350,12 @@ pub fn get_stability(cstore: &cstore::CStore,\n     decoder::get_stability(&*cdata, def.node)\n }\n \n+pub fn get_repr_attrs(cstore: &cstore::CStore, def: ast::DefId)\n+                      -> Vec<attr::ReprAttr> {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_repr_attrs(&*cdata, def.node)\n+}\n+\n pub fn is_associated_type(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n     let cdata = cstore.get_crate_data(def.krate);\n     decoder::is_associated_type(&*cdata, def.node)"}, {"sha": "44f6f5f547093dab5bbf38970adeca8eef7739cd", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -384,6 +384,17 @@ pub fn get_stability(cdata: Cmd, id: ast::NodeId) -> Option<attr::Stability> {\n     })\n }\n \n+pub fn get_repr_attrs(cdata: Cmd, id: ast::NodeId) -> Vec<attr::ReprAttr> {\n+    let item = lookup_item(id, cdata.data());\n+    match reader::maybe_get_doc(item, tag_items_data_item_repr).map(|doc| {\n+        let mut decoder = reader::Decoder::new(doc);\n+        Decodable::decode(&mut decoder).unwrap()\n+    }) {\n+        Some(attrs) => attrs,\n+        None => Vec::new(),\n+    }\n+}\n+\n pub fn get_impl_trait(cdata: Cmd,\n                       id: ast::NodeId,\n                       tcx: &ty::ctxt) -> Option<Rc<ty::TraitRef>>"}, {"sha": "f8cf7887924ba803cba3961daf1e901b63725d48", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -332,6 +332,7 @@ fn encode_enum_variant_info(ecx: &EncodeContext,\n         encode_parent_item(rbml_w, local_def(id));\n         encode_visibility(rbml_w, variant.node.vis);\n         encode_attributes(rbml_w, variant.node.attrs.as_slice());\n+        encode_repr_attrs(rbml_w, ecx, variant.node.attrs.as_slice());\n \n         let stab = stability::lookup(ecx.tcx, ast_util::local_def(variant.node.id));\n         encode_stability(rbml_w, stab);\n@@ -948,6 +949,19 @@ fn encode_method_argument_names(rbml_w: &mut Encoder,\n     rbml_w.end_tag();\n }\n \n+fn encode_repr_attrs(rbml_w: &mut Encoder,\n+                     ecx: &EncodeContext,\n+                     attrs: &[Attribute]) {\n+    let mut repr_attrs = Vec::new();\n+    for attr in attrs.iter() {\n+        repr_attrs.extend(attr::find_repr_attrs(ecx.tcx.sess.diagnostic(),\n+                                                attr).into_iter());\n+    }\n+    rbml_w.start_tag(tag_items_data_item_repr);\n+    repr_attrs.encode(rbml_w);\n+    rbml_w.end_tag();\n+}\n+\n fn encode_inlined_item(ecx: &EncodeContext,\n                        rbml_w: &mut Encoder,\n                        ii: InlinedItemRef) {\n@@ -1137,6 +1151,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_bounds_and_type(rbml_w, ecx, &lookup_item_type(tcx, def_id));\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, item.attrs.as_slice());\n+        encode_repr_attrs(rbml_w, ecx, item.attrs.as_slice());\n         for v in (*enum_definition).variants.iter() {\n             encode_variant_id(rbml_w, local_def(v.node.id));\n         }\n@@ -1183,6 +1198,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_path(rbml_w, path.clone());\n         encode_stability(rbml_w, stab);\n         encode_visibility(rbml_w, vis);\n+        encode_repr_attrs(rbml_w, ecx, item.attrs.as_slice());\n \n         /* Encode def_ids for each field and method\n          for methods, write all the stuff get_trait_method"}, {"sha": "94c6c7bc757d14d5df765f37fe32ef8650aace5b", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -583,6 +583,9 @@ pub struct ctxt<'tcx> {\n     /// Caches the results of trait selection. This cache is used\n     /// for things that do not have to do with the parameters in scope.\n     pub selection_cache: traits::SelectionCache,\n+\n+    /// Caches the representation hints for struct definitions.\n+    pub repr_hint_cache: RefCell<DefIdMap<Rc<Vec<attr::ReprAttr>>>>,\n }\n \n pub enum tbox_flag {\n@@ -1533,6 +1536,7 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         associated_types: RefCell::new(DefIdMap::new()),\n         trait_associated_types: RefCell::new(DefIdMap::new()),\n         selection_cache: traits::SelectionCache::new(),\n+        repr_hint_cache: RefCell::new(DefIdMap::new()),\n    }\n }\n \n@@ -4326,7 +4330,7 @@ pub fn ty_dtor(cx: &ctxt, struct_id: DefId) -> DtorKind {\n }\n \n pub fn has_dtor(cx: &ctxt, struct_id: DefId) -> bool {\n-    ty_dtor(cx, struct_id).is_present()\n+    cx.destructor_for_type.borrow().contains_key(&struct_id)\n }\n \n pub fn with_path<T>(cx: &ctxt, id: ast::DefId, f: |ast_map::PathElems| -> T) -> T {\n@@ -4513,14 +4517,26 @@ pub fn lookup_simd(tcx: &ctxt, did: DefId) -> bool {\n }\n \n /// Obtain the representation annotation for a struct definition.\n-pub fn lookup_repr_hints(tcx: &ctxt, did: DefId) -> Vec<attr::ReprAttr> {\n-    let mut acc = Vec::new();\n+pub fn lookup_repr_hints(tcx: &ctxt, did: DefId) -> Rc<Vec<attr::ReprAttr>> {\n+    match tcx.repr_hint_cache.borrow().find(&did) {\n+        None => {}\n+        Some(ref hints) => return (*hints).clone(),\n+    }\n \n-    ty::each_attr(tcx, did, |meta| {\n-        acc.extend(attr::find_repr_attrs(tcx.sess.diagnostic(), meta).into_iter());\n-        true\n-    });\n+    let acc = if did.krate == LOCAL_CRATE {\n+        let mut acc = Vec::new();\n+        ty::each_attr(tcx, did, |meta| {\n+            acc.extend(attr::find_repr_attrs(tcx.sess.diagnostic(),\n+                                             meta).into_iter());\n+            true\n+        });\n+        acc\n+    } else {\n+        csearch::get_repr_attrs(&tcx.sess.cstore, did)\n+    };\n \n+    let acc = Rc::new(acc);\n+    tcx.repr_hint_cache.borrow_mut().insert(did, acc.clone());\n     acc\n }\n "}, {"sha": "8963185192a8b7b8b615e6966dae361353f00476", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e2503db31d7d07af98055ca284b0fb14752bf9/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=78e2503db31d7d07af98055ca284b0fb14752bf9", "patch": "@@ -508,7 +508,7 @@ fn int_type_of_word(s: &str) -> Option<IntType> {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[deriving(PartialEq, Show, Encodable, Decodable)]\n pub enum ReprAttr {\n     ReprAny,\n     ReprInt(Span, IntType),\n@@ -527,7 +527,7 @@ impl ReprAttr {\n     }\n }\n \n-#[deriving(Eq, Hash, PartialEq, Show)]\n+#[deriving(Eq, Hash, PartialEq, Show, Encodable, Decodable)]\n pub enum IntType {\n     SignedInt(ast::IntTy),\n     UnsignedInt(ast::UintTy)"}]}