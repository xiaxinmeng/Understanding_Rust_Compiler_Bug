{"sha": "8b3f449b5f848b43c8bbb9aea431ce4df8090fd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiM2Y0NDliNWY4NDhiNDNjOGJiYjlhZWE0MzFjZTRkZjgwOTBmZDQ=", "commit": {"author": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-19T21:51:59Z"}, "committer": {"name": "adamrk", "email": "ark.email@gmail.com", "date": "2020-02-21T22:51:30Z"}, "message": "rename module references", "tree": {"sha": "84aa2dfbdc7d9c5321ecb69080197f2203574cd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84aa2dfbdc7d9c5321ecb69080197f2203574cd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4", "html_url": "https://github.com/rust-lang/rust/commit/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4/comments", "author": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamrk", "id": 16367467, "node_id": "MDQ6VXNlcjE2MzY3NDY3", "avatar_url": "https://avatars.githubusercontent.com/u/16367467?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamrk", "html_url": "https://github.com/adamrk", "followers_url": "https://api.github.com/users/adamrk/followers", "following_url": "https://api.github.com/users/adamrk/following{/other_user}", "gists_url": "https://api.github.com/users/adamrk/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamrk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamrk/subscriptions", "organizations_url": "https://api.github.com/users/adamrk/orgs", "repos_url": "https://api.github.com/users/adamrk/repos", "events_url": "https://api.github.com/users/adamrk/events{/privacy}", "received_events_url": "https://api.github.com/users/adamrk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3ab290bd4d20b2c1531980eb87a32981efb7826", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ab290bd4d20b2c1531980eb87a32981efb7826", "html_url": "https://github.com/rust-lang/rust/commit/f3ab290bd4d20b2c1531980eb87a32981efb7826"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "97a97c0ae1683a66b643d3954d2bf59eb4607b90", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b3f449b5f848b43c8bbb9aea431ce4df8090fd4/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=8b3f449b5f848b43c8bbb9aea431ce4df8090fd4", "patch": "@@ -98,6 +98,23 @@ fn rename_mod(\n     };\n     source_file_edits.push(edit);\n \n+    if let Some(RangeInfo { range: _, info: refs }) = find_all_refs(db, position, None) {\n+        let ref_edits = refs\n+            .references\n+            .into_iter()\n+            .map(|reference| {\n+                source_edit_from_file_id_range(\n+                    reference.file_range.file_id,\n+                    reference.file_range.range,\n+                    new_name,\n+                )\n+            })\n+            .collect::<Vec<_>>();\n+        for ref_edit in ref_edits {\n+            source_file_edits.push(ref_edit);\n+        }\n+    }\n+\n     Some(SourceChange::from_edits(\"rename\", source_file_edits, file_system_edits))\n }\n \n@@ -383,6 +400,101 @@ mod tests {\n                );\n     }\n \n+    #[test]\n+    fn test_module_rename_in_path() {\n+        test_rename(\n+            r#\"\n+    mod <|>foo {\n+        pub fn bar() {}\n+    }\n+\n+    fn main() {\n+        foo::bar();\n+    }\"#,\n+            \"baz\",\n+            r#\"\n+    mod baz {\n+        pub fn bar() {}\n+    }\n+\n+    fn main() {\n+        baz::bar();\n+    }\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_rename_mod_filename_and_path() {\n+        let (analysis, position) = analysis_and_position(\n+            \"\n+            //- /lib.rs\n+            mod bar;\n+            fn f() {\n+                bar::foo::fun()\n+            }\n+\n+            //- /bar.rs\n+            pub mod foo<|>;\n+\n+            //- /bar/foo.rs\n+            // pub fn fun() {}\n+            \",\n+        );\n+        let new_name = \"foo2\";\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        assert_debug_snapshot!(&source_change,\n+@r###\"\n+        Some(\n+            RangeInfo {\n+                range: [8; 11),\n+                info: SourceChange {\n+                    label: \"rename\",\n+                    source_file_edits: [\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                2,\n+                            ),\n+                            edit: TextEdit {\n+                                atoms: [\n+                                    AtomTextEdit {\n+                                        delete: [8; 11),\n+                                        insert: \"foo2\",\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                        SourceFileEdit {\n+                            file_id: FileId(\n+                                1,\n+                            ),\n+                            edit: TextEdit {\n+                                atoms: [\n+                                    AtomTextEdit {\n+                                        delete: [27; 30),\n+                                        insert: \"foo2\",\n+                                    },\n+                                ],\n+                            },\n+                        },\n+                    ],\n+                    file_system_edits: [\n+                        MoveFile {\n+                            src: FileId(\n+                                3,\n+                            ),\n+                            dst_source_root: SourceRootId(\n+                                0,\n+                            ),\n+                            dst_path: \"bar/foo2.rs\",\n+                        },\n+                    ],\n+                    cursor_position: None,\n+                },\n+            },\n+        )\n+        \"###);\n+    }\n+\n     fn test_rename(text: &str, new_name: &str, expected: &str) {\n         let (analysis, position) = single_file_with_position(text);\n         let source_change = analysis.rename(position, new_name).unwrap();"}]}