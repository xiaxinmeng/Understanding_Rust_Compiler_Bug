{"sha": "4ce157d008ada410654bc5dffe2674e879fd1960", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZTE1N2QwMDhhZGE0MTA2NTRiYzVkZmZlMjY3NGU4NzlmZDE5NjA=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-06T21:38:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-06T21:38:34Z"}, "message": "Rollup merge of #68791 - mark-i-m:proper-linkcheck, r=ehuss,JohnTitor\n\nimplement proper linkchecker hardening\n\nr? @JohnTitor\n\nThis implements proper linkcheck filtering... we might need to fiddle with a bit to adjust what is or isn't filtered, but this seems to work reasonable locally.", "tree": {"sha": "c50b19288011c282221952e7d737d076b7d43cb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c50b19288011c282221952e7d737d076b7d43cb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ce157d008ada410654bc5dffe2674e879fd1960", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJePIdaCRBK7hj4Ov3rIwAAdHIIAFH7tBTRxXRTUA2HtBv5RahU\nqjKZwxSVPh9X5i1uZ+WREpvfYyY0ITzOBVK96QsFBGm6uBFqL1aFVkpZJV4hSb7M\nlJ7Dp0BHLlylHb3TBBzJAWB4PP5dqghzsqKBLK93+BjQ9a+wIAP0P2OUYX0uTlYx\nQB8qwSo4uhRO9ygMaZ2PYs+w7ONpeYSBExlEX+x23n63XNNCQ1EZIA4dVwFmaxJc\nZ/Q31l7jjjI9drFjtuSZdx9wS75YvlOqojqu/RV/3ZF+6oRfRtDd86DzYHBotDEf\nZ94/qSgkOmCafT8e7bhHH2gGSGIEgoDG1aCZ/zqXmskLq9Lf5XQ8++PQB/Gh9V0=\n=syx/\n-----END PGP SIGNATURE-----\n", "payload": "tree c50b19288011c282221952e7d737d076b7d43cb1\nparent 2d8f6389d09bfbaa9a5960c63f6639ddc513c813\nparent 5e086c842f7bfac58a3d836495dde5d8c194cccc\nauthor Dylan DPC <dylan.dpc@gmail.com> 1581025114 +0100\ncommitter GitHub <noreply@github.com> 1581025114 +0100\n\nRollup merge of #68791 - mark-i-m:proper-linkcheck, r=ehuss,JohnTitor\n\nimplement proper linkchecker hardening\n\nr? @JohnTitor\n\nThis implements proper linkcheck filtering... we might need to fiddle with a bit to adjust what is or isn't filtered, but this seems to work reasonable locally.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ce157d008ada410654bc5dffe2674e879fd1960", "html_url": "https://github.com/rust-lang/rust/commit/4ce157d008ada410654bc5dffe2674e879fd1960", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ce157d008ada410654bc5dffe2674e879fd1960/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8f6389d09bfbaa9a5960c63f6639ddc513c813", "html_url": "https://github.com/rust-lang/rust/commit/2d8f6389d09bfbaa9a5960c63f6639ddc513c813"}, {"sha": "5e086c842f7bfac58a3d836495dde5d8c194cccc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e086c842f7bfac58a3d836495dde5d8c194cccc", "html_url": "https://github.com/rust-lang/rust/commit/5e086c842f7bfac58a3d836495dde5d8c194cccc"}], "stats": {"total": 78, "additions": 63, "deletions": 15}, "files": [{"sha": "bbfda0fa2c846f303ac68eda511049a74643c4cc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ce157d008ada410654bc5dffe2674e879fd1960/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4ce157d008ada410654bc5dffe2674e879fd1960/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4ce157d008ada410654bc5dffe2674e879fd1960", "patch": "@@ -3067,6 +3067,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap\",\n+ \"codespan\",\n  \"codespan-reporting\",\n  \"failure\",\n  \"mdbook\","}, {"sha": "5bd60bc51efaec04e69e2e18b59678e2af066433", "filename": "src/doc/rustc-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=4ce157d008ada410654bc5dffe2674e879fd1960", "patch": "@@ -1 +1 @@\n-Subproject commit 92baf7293dd2d418d2ac4b141b0faa822075d9f7\n+Subproject commit 5bd60bc51efaec04e69e2e18b59678e2af066433"}, {"sha": "e6e758dccdf0a8d741911e7f8769f6d77aec3f79", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4ce157d008ada410654bc5dffe2674e879fd1960/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4ce157d008ada410654bc5dffe2674e879fd1960/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=4ce157d008ada410654bc5dffe2674e879fd1960", "patch": "@@ -6,13 +6,14 @@ license = \"MIT OR Apache-2.0\"\n edition = \"2018\"\n \n [features]\n-linkcheck = [\"mdbook-linkcheck\", \"codespan-reporting\"]\n+linkcheck = [\"mdbook-linkcheck\", \"codespan-reporting\", \"codespan\"]\n \n [dependencies]\n clap = \"2.25.0\"\n failure = \"0.1\"\n mdbook-linkcheck = { version = \"0.5.0\", optional = true }\n # Keep in sync with mdbook-linkcheck.\n+codespan = { version = \"0.5\", optional = true }\n codespan-reporting = { version = \"0.5\", optional = true }\n \n "}, {"sha": "023f5aa1e284bee6122650bcfde8d157d9cab685", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4ce157d008ada410654bc5dffe2674e879fd1960/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ce157d008ada410654bc5dffe2674e879fd1960/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=4ce157d008ada410654bc5dffe2674e879fd1960", "patch": "@@ -8,11 +8,6 @@ use clap::{App, AppSettings, ArgMatches, SubCommand};\n use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n \n-#[cfg(feature = \"linkcheck\")]\n-use failure::Error;\n-#[cfg(feature = \"linkcheck\")]\n-use mdbook::renderer::RenderContext;\n-\n fn main() {\n     let d_message = \"-d, --dest-dir=[dest-dir]\n 'The output directory for your book{n}(Defaults to ./book when omitted)'\";\n@@ -53,8 +48,18 @@ fn main() {\n         (\"linkcheck\", Some(sub_matches)) => {\n             #[cfg(feature = \"linkcheck\")]\n             {\n-                if let Err(err) = linkcheck(sub_matches) {\n-                    eprintln!(\"Error: {}\", err);\n+                let (diags, files) = linkcheck(sub_matches).expect(\"Error while linkchecking.\");\n+                if !diags.is_empty() {\n+                    let color = codespan_reporting::term::termcolor::ColorChoice::Auto;\n+                    let mut writer =\n+                        codespan_reporting::term::termcolor::StandardStream::stderr(color);\n+                    let cfg = codespan_reporting::term::Config::default();\n+\n+                    for diag in diags {\n+                        codespan_reporting::term::emit(&mut writer, &cfg, &files, &diag)\n+                            .expect(\"Unable to emit linkcheck error.\");\n+                    }\n+\n                     std::process::exit(101);\n                 }\n             }\n@@ -73,14 +78,55 @@ fn main() {\n }\n \n #[cfg(feature = \"linkcheck\")]\n-pub fn linkcheck(args: &ArgMatches<'_>) -> Result<(), Error> {\n+pub fn linkcheck(\n+    args: &ArgMatches<'_>,\n+) -> Result<(Vec<codespan_reporting::diagnostic::Diagnostic>, codespan::Files), failure::Error> {\n+    use mdbook_linkcheck::Reason;\n+\n     let book_dir = get_book_dir(args);\n+    let src_dir = book_dir.join(\"src\");\n     let book = MDBook::load(&book_dir).unwrap();\n-    let cfg = book.config;\n-    let render_ctx = RenderContext::new(&book_dir, book.book, cfg, &book_dir);\n-    let cache_file = render_ctx.destination.join(\"cache.json\");\n-    let color = codespan_reporting::term::termcolor::ColorChoice::Auto;\n-    mdbook_linkcheck::run(&cache_file, color, &render_ctx)\n+    let linkck_cfg = mdbook_linkcheck::get_config(&book.config)?;\n+    let mut files = codespan::Files::new();\n+    let target_files = mdbook_linkcheck::load_files_into_memory(&book.book, &mut files);\n+    let cache = mdbook_linkcheck::Cache::default();\n+\n+    let (links, incomplete) = mdbook_linkcheck::extract_links(target_files, &files);\n+\n+    let outcome =\n+        mdbook_linkcheck::validate(&links, &linkck_cfg, &src_dir, &cache, &files, incomplete)?;\n+\n+    let mut is_real_error = false;\n+\n+    for link in outcome.invalid_links.iter() {\n+        match &link.reason {\n+            Reason::FileNotFound | Reason::TraversesParentDirectories => {\n+                is_real_error = true;\n+            }\n+            Reason::UnsuccessfulServerResponse(status) => {\n+                if status.is_client_error() {\n+                    is_real_error = true;\n+                } else {\n+                    eprintln!(\"Unsuccessful server response for link `{}`\", link.link.uri);\n+                }\n+            }\n+            Reason::Client(err) => {\n+                if err.is_timeout() {\n+                    eprintln!(\"Timeout for link `{}`\", link.link.uri);\n+                } else if err.is_server_error() {\n+                    eprintln!(\"Server error for link `{}`\", link.link.uri);\n+                } else {\n+                    is_real_error = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    if is_real_error {\n+        Ok((outcome.generate_diagnostics(&files, linkck_cfg.warning_policy), files))\n+    } else {\n+        Ok((vec![], files))\n+    }\n }\n \n // Build command implementation"}]}