{"sha": "79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZmY0NDg3M2Q3ZDEyOTUxYTUyYjdmMWQ1MDU2MGNkNDVkNWVhMmM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:45:50Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-09-26T17:45:50Z"}, "message": "Rename `PatternTypeProjection` to `PatTyProj`", "tree": {"sha": "7b97ee03c038f7c568668b39a08a684fb3bb242f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b97ee03c038f7c568668b39a08a684fb3bb242f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "html_url": "https://github.com/rust-lang/rust/commit/79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5561936467fbb57d3eb432bcca9100338bab724", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5561936467fbb57d3eb432bcca9100338bab724", "html_url": "https://github.com/rust-lang/rust/commit/d5561936467fbb57d3eb432bcca9100338bab724"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "05accd7f64e7a8c6ea5e2c61e5d8ac13e84224a1", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "patch": "@@ -708,7 +708,7 @@ struct Binding<'tcx> {\n struct Ascription<'tcx> {\n     span: Span,\n     source: Place<'tcx>,\n-    user_ty: PatternTypeProjection<'tcx>,\n+    user_ty: PatTyProj<'tcx>,\n     variance: ty::Variance,\n }\n "}, {"sha": "d9de0ffdf2f2c2f713909178ebbf708950e0d96c", "filename": "src/librustc_mir/hair/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fblock.rs?ref=79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "patch": "@@ -83,7 +83,7 @@ fn mirror_stmts<'a, 'tcx>(\n                             span: pattern.span,\n                             kind: Box::new(PatKind::AscribeUserType {\n                                 ascription: hair::pattern::Ascription {\n-                                    user_ty: PatternTypeProjection::from_user_type(user_ty),\n+                                    user_ty: PatTyProj::from_user_type(user_ty),\n                                     user_ty_span: ty.span,\n                                     variance: ty::Variance::Covariant,\n                                 },"}, {"sha": "66846b776cd150ba8b3a6bce2fdc182ca2751e47", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "patch": "@@ -21,7 +21,7 @@ mod constant;\n \n pub mod pattern;\n pub use self::pattern::{BindingMode, Pattern, PatKind, PatRange, FieldPat};\n-pub(crate) use self::pattern::PatternTypeProjection;\n+pub(crate) use self::pattern::PatTyProj;\n \n mod util;\n "}, {"sha": "5288fa36cc09276a1c78577c917f2712c1b0513d", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ff44873d7d12951a52b7f1d50560cd45d5ea2c/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=79ff44873d7d12951a52b7f1d50560cd45d5ea2c", "patch": "@@ -62,11 +62,11 @@ pub struct Pattern<'tcx> {\n \n \n #[derive(Copy, Clone, Debug, PartialEq)]\n-pub struct PatternTypeProjection<'tcx> {\n+pub struct PatTyProj<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n }\n \n-impl<'tcx> PatternTypeProjection<'tcx> {\n+impl<'tcx> PatTyProj<'tcx> {\n     pub(crate) fn from_user_type(user_annotation: CanonicalUserType<'tcx>) -> Self {\n         Self {\n             user_ty: user_annotation,\n@@ -92,7 +92,7 @@ impl<'tcx> PatternTypeProjection<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct Ascription<'tcx> {\n-    pub user_ty: PatternTypeProjection<'tcx>,\n+    pub user_ty: PatTyProj<'tcx>,\n     /// Variance to use when relating the type `user_ty` to the **type of the value being\n     /// matched**. Typically, this is `Variance::Covariant`, since the value being matched must\n     /// have a type that is some subtype of the ascribed type.\n@@ -831,7 +831,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                     kind: Box::new(kind),\n                 },\n                 ascription: Ascription {\n-                    user_ty: PatternTypeProjection::from_user_type(user_ty),\n+                    user_ty: PatTyProj::from_user_type(user_ty),\n                     user_ty_span: span,\n                     variance: ty::Variance::Covariant,\n                 },\n@@ -878,7 +878,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n \n                                 let user_provided_types = self.tables().user_provided_types();\n                                 return if let Some(u_ty) = user_provided_types.get(id) {\n-                                    let user_ty = PatternTypeProjection::from_user_type(*u_ty);\n+                                    let user_ty = PatTyProj::from_user_type(*u_ty);\n                                     Pattern {\n                                         span,\n                                         kind: Box::new(\n@@ -1358,7 +1358,7 @@ CloneImpls!{ <'tcx>\n     Span, Field, Mutability, ast::Name, hir::HirId, usize, ty::Const<'tcx>,\n     Region<'tcx>, Ty<'tcx>, BindingMode, &'tcx AdtDef,\n     SubstsRef<'tcx>, &'tcx GenericArg<'tcx>, UserType<'tcx>,\n-    UserTypeProjection, PatternTypeProjection<'tcx>\n+    UserTypeProjection, PatTyProj<'tcx>\n }\n \n impl<'tcx> PatternFoldable<'tcx> for FieldPat<'tcx> {"}]}