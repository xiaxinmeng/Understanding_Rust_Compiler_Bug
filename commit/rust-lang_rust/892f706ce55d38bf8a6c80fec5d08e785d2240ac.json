{"sha": "892f706ce55d38bf8a6c80fec5d08e785d2240ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MmY3MDZjZTU1ZDM4YmY4YTZjODBmZWM1ZDA4ZTc4NWQyMjQwYWM=", "commit": {"author": {"name": "Smit Soni", "email": "ssmit004@gmail.com", "date": "2021-05-14T06:40:07Z"}, "committer": {"name": "Smit Soni", "email": "atsmtat@gmail.com", "date": "2021-06-09T12:50:52Z"}, "message": "Add a support to execute isolated op without halting\n\nIn user interface, added a new flag `-Zmiri-isolation-error` which\ntakes one of the four values -- hide, warn, warn-nobacktrace, and\nabort. This option can be used to configure Miri to either abort or\nreturn an error code upon executing isolated op. If not aborted, Miri\nprints a warning, whose verbosity can be configured using this flag.\n\nIn implementation, added a new enum `IsolatedOp` to capture all the\nsettings related to ops requiring communication with the\nhost. Old `communicate` flag in both miri configs and machine\nstats is replaced with a new helper function `communicate()` which\nchecks `isolated_op` internally.\n\nAdded a new helper function `reject_in_isolation` which can be called\nby shims to reject ops according to the reject_with settings. Use miri\nspecific diagnostics function `report_msg` to print backtrace in the\nwarning. Update it to take an enum value instead of a bool, indicating\nthe level of diagnostics.\n\nUpdated shims related to current dir to use the new APIs. Added a new\ntest for current dir ops in isolation without halting machine.", "tree": {"sha": "72f2239eada924826ea47f32252a6cf0dd31211e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f2239eada924826ea47f32252a6cf0dd31211e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/892f706ce55d38bf8a6c80fec5d08e785d2240ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/892f706ce55d38bf8a6c80fec5d08e785d2240ac", "html_url": "https://github.com/rust-lang/rust/commit/892f706ce55d38bf8a6c80fec5d08e785d2240ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/892f706ce55d38bf8a6c80fec5d08e785d2240ac/comments", "author": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "atsmtat", "id": 25519955, "node_id": "MDQ6VXNlcjI1NTE5OTU1", "avatar_url": "https://avatars.githubusercontent.com/u/25519955?v=4", "gravatar_id": "", "url": "https://api.github.com/users/atsmtat", "html_url": "https://github.com/atsmtat", "followers_url": "https://api.github.com/users/atsmtat/followers", "following_url": "https://api.github.com/users/atsmtat/following{/other_user}", "gists_url": "https://api.github.com/users/atsmtat/gists{/gist_id}", "starred_url": "https://api.github.com/users/atsmtat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/atsmtat/subscriptions", "organizations_url": "https://api.github.com/users/atsmtat/orgs", "repos_url": "https://api.github.com/users/atsmtat/repos", "events_url": "https://api.github.com/users/atsmtat/events{/privacy}", "received_events_url": "https://api.github.com/users/atsmtat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f73db5ce6b4666a1663fe674d20ed541ce860b0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f73db5ce6b4666a1663fe674d20ed541ce860b0e", "html_url": "https://github.com/rust-lang/rust/commit/f73db5ce6b4666a1663fe674d20ed541ce860b0e"}], "stats": {"total": 242, "additions": 199, "deletions": 43}, "files": [{"sha": "f6b46ce3a95c56ab922334c296281cc0123ba71a", "filename": "README.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -219,6 +219,13 @@ environment variable:\n * `-Zmiri-disable-isolation` disables host isolation.  As a consequence,\n   the program has access to host resources such as environment variables, file\n   systems, and randomness.\n+* `-Zmiri-isolation-error=<action>` configures Miri's response to operations\n+  requiring host access while isolation is enabled. `abort`, `hide`, `warn`,\n+  and `warn-nobacktrace` are the supported actions. Default action is `abort`\n+  which halts the machine. Rest of the actions configure it to return an error\n+  code for the op and continue executing. `warn` prints backtrace that could\n+  be used to trace the call. `warn-nobacktrace` is less verbose without\n+  backtrace. `hide` hides the warning.\n * `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from\n   the host so that it cannot be accessed by the program.  Can be used multiple\n   times to exclude several variables.  On Windows, the `TERM` environment"}, {"sha": "677836d7e9725f5e0a55ff0d5717f3e5c2b7c330", "filename": "src/bin/miri.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -263,6 +263,9 @@ fn main() {\n     let mut miri_config = miri::MiriConfig::default();\n     let mut rustc_args = vec![];\n     let mut after_dashdash = false;\n+\n+    // If user has explicitly enabled/disabled isolation\n+    let mut isolation_enabled: Option<bool> = None;\n     for arg in env::args() {\n         if rustc_args.is_empty() {\n             // Very first arg: binary name.\n@@ -291,7 +294,37 @@ fn main() {\n                     miri_config.check_abi = false;\n                 }\n                 \"-Zmiri-disable-isolation\" => {\n-                    miri_config.communicate = true;\n+                    if matches!(isolation_enabled, Some(true)) {\n+                        panic!(\n+                            \"-Zmiri-disable-isolation cannot be used along with -Zmiri-isolation-error\"\n+                        );\n+                    } else {\n+                        isolation_enabled = Some(false);\n+                    }\n+                    miri_config.isolated_op = miri::IsolatedOp::Allow;\n+                }\n+                arg if arg.starts_with(\"-Zmiri-isolation-error=\") => {\n+                    if matches!(isolation_enabled, Some(false)) {\n+                        panic!(\n+                            \"-Zmiri-isolation-error cannot be used along with -Zmiri-disable-isolation\"\n+                        );\n+                    } else {\n+                        isolation_enabled = Some(true);\n+                    }\n+\n+                    miri_config.isolated_op = match arg\n+                        .strip_prefix(\"-Zmiri-isolation-error=\")\n+                        .unwrap()\n+                    {\n+                        \"abort\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Abort),\n+                        \"hide\" => miri::IsolatedOp::Reject(miri::RejectOpWith::NoWarning),\n+                        \"warn\" => miri::IsolatedOp::Reject(miri::RejectOpWith::Warning),\n+                        \"warn-nobacktrace\" =>\n+                            miri::IsolatedOp::Reject(miri::RejectOpWith::WarningWithoutBacktrace),\n+                        _ => panic!(\n+                            \"-Zmiri-isolation-error must be `abort`, `hide`, `warn`, or `warn-nobacktrace`\"\n+                        ),\n+                    };\n                 }\n                 \"-Zmiri-ignore-leaks\" => {\n                     miri_config.ignore_leaks = true;"}, {"sha": "2b17e83bee69897a33373cff29dcbfca08ae15e1", "filename": "src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -52,6 +52,14 @@ pub enum NonHaltingDiagnostic {\n     CreatedCallId(CallId),\n     CreatedAlloc(AllocId),\n     FreedAlloc(AllocId),\n+    RejectedIsolatedOp(String),\n+}\n+\n+/// Level of Miri specific diagnostics\n+enum DiagLevel {\n+    Error,\n+    Warning,\n+    Note,\n }\n \n /// Emit a custom diagnostic without going through the miri-engine machinery\n@@ -76,7 +84,7 @@ pub fn report_error<'tcx, 'mir>(\n             #[rustfmt::skip]\n             let helps = match info {\n                 UnsupportedInIsolation(_) =>\n-                    vec![(None, format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\"))],\n+                    vec![(None, format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation; or pass `-Zmiri-isolation-error=warn to configure Miri to return an error code from isolated operations and continue with a warning\"))],\n                 ExperimentalUb { url, .. } =>\n                     vec![\n                         (None, format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\")),\n@@ -137,7 +145,7 @@ pub fn report_error<'tcx, 'mir>(\n     let msg = e.to_string();\n     report_msg(\n         *ecx.tcx,\n-        /*error*/ true,\n+        DiagLevel::Error,\n         &if let Some(title) = title { format!(\"{}: {}\", title, msg) } else { msg.clone() },\n         msg,\n         helps,\n@@ -174,18 +182,19 @@ pub fn report_error<'tcx, 'mir>(\n /// Also emits a full stacktrace of the interpreter stack.\n fn report_msg<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    error: bool,\n+    diag_level: DiagLevel,\n     title: &str,\n     span_msg: String,\n     mut helps: Vec<(Option<SpanData>, String)>,\n     stacktrace: &[FrameInfo<'tcx>],\n ) {\n     let span = stacktrace.first().map_or(DUMMY_SP, |fi| fi.span);\n-    let mut err = if error {\n-        tcx.sess.struct_span_err(span, title)\n-    } else {\n-        tcx.sess.diagnostic().span_note_diag(span, title)\n+    let mut err = match diag_level {\n+        DiagLevel::Error => tcx.sess.struct_span_err(span, title),\n+        DiagLevel::Warning => tcx.sess.struct_span_warn(span, title),\n+        DiagLevel::Note => tcx.sess.diagnostic().span_note_diag(span, title),\n     };\n+\n     // Show main message.\n     if span != DUMMY_SP {\n         err.span_label(span, span_msg);\n@@ -303,15 +312,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     CreatedCallId(id) => format!(\"function call with id {}\", id),\n                     CreatedAlloc(AllocId(id)) => format!(\"created allocation with id {}\", id),\n                     FreedAlloc(AllocId(id)) => format!(\"freed allocation with id {}\", id),\n+                    RejectedIsolatedOp(ref op) =>\n+                        format!(\"`{}` was made to return an error due to isolation\", op),\n                 };\n-                report_msg(\n-                    *this.tcx,\n-                    /*error*/ false,\n-                    \"tracking was triggered\",\n-                    msg,\n-                    vec![],\n-                    &stacktrace,\n-                );\n+\n+                let (title, diag_level) = match e {\n+                    RejectedIsolatedOp(_) =>\n+                        (\"operation rejected by isolation\", DiagLevel::Warning),\n+                    _ => (\"tracking was triggered\", DiagLevel::Note),\n+                };\n+\n+                report_msg(*this.tcx, diag_level, title, msg, vec![], &stacktrace);\n             }\n         });\n     }"}, {"sha": "f1fbeafd3cd78c74bf33e8f0757a1f1e2b6dda01", "filename": "src/eval.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -22,6 +22,35 @@ pub enum AlignmentCheck {\n     Int,\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum RejectOpWith {\n+    /// Isolated op is rejected with an abort of the machine.\n+    Abort,\n+\n+    /// If not Abort, miri returns an error for an isolated op.\n+    /// Following options determine if user should be warned about such error.\n+    /// Do not print warning about rejected isolated op.\n+    NoWarning,\n+\n+    /// Print a warning about rejected isolated op, with backtrace.\n+    Warning,\n+\n+    /// Print a warning about rejected isolated op, without backtrace.\n+    WarningWithoutBacktrace,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum IsolatedOp {\n+    /// Reject an op requiring communication with the host. By\n+    /// default, miri rejects the op with an abort. If not, it returns\n+    /// an error code, and prints a warning about it. Warning levels\n+    /// are controlled by `RejectOpWith` enum.\n+    Reject(RejectOpWith),\n+\n+    /// Execute op requiring communication with the host, i.e. disable isolation.\n+    Allow,\n+}\n+\n /// Configuration needed to spawn a Miri instance.\n #[derive(Clone)]\n pub struct MiriConfig {\n@@ -33,8 +62,8 @@ pub struct MiriConfig {\n     pub check_alignment: AlignmentCheck,\n     /// Controls function [ABI](Abi) checking.\n     pub check_abi: bool,\n-    /// Determines if communication with the host environment is enabled.\n-    pub communicate: bool,\n+    /// Action for an op requiring communication with the host.\n+    pub isolated_op: IsolatedOp,\n     /// Determines if memory leaks should be ignored.\n     pub ignore_leaks: bool,\n     /// Environment variables that should always be isolated from the host.\n@@ -68,7 +97,7 @@ impl Default for MiriConfig {\n             stacked_borrows: true,\n             check_alignment: AlignmentCheck::Int,\n             check_abi: true,\n-            communicate: false,\n+            isolated_op: IsolatedOp::Reject(RejectOpWith::Abort),\n             ignore_leaks: false,\n             excluded_env_vars: vec![],\n             args: vec![],\n@@ -233,7 +262,7 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                 }\n                 SchedulingAction::ExecuteTimeoutCallback => {\n                     assert!(\n-                        ecx.machine.communicate,\n+                        ecx.machine.communicate(),\n                         \"scheduler callbacks require disabled isolation, but the code \\\n                         that created the callback did not check it\"\n                     );"}, {"sha": "e9bedd1a118701773f373e0cbe79fb3ab0703e01", "filename": "src/helpers.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -140,7 +140,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let mut data = vec![0; usize::try_from(len).unwrap()];\n \n-        if this.machine.communicate {\n+        if this.machine.communicate() {\n             // Fill the buffer using the host's rng.\n             getrandom::getrandom(&mut data)\n                 .map_err(|err| err_unsup_format!(\"host getrandom failed: {}\", err))?;\n@@ -391,12 +391,32 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     /// disabled. It returns an error using the `name` of the foreign function if this is not the\n     /// case.\n     fn check_no_isolation(&self, name: &str) -> InterpResult<'tcx> {\n-        if !self.eval_context_ref().machine.communicate {\n-            isolation_error(name)?;\n+        if !self.eval_context_ref().machine.communicate() {\n+            self.reject_in_isolation(name, RejectOpWith::Abort)?;\n         }\n         Ok(())\n     }\n \n+    /// Helper function used inside the shims of foreign functions which reject the op\n+    /// when isolation is enabled. It is used to print a warning/backtrace about the rejection.\n+    fn reject_in_isolation(&self, op_name: &str, reject_with: RejectOpWith) -> InterpResult<'tcx> {\n+        let this = self.eval_context_ref();\n+        match reject_with {\n+            RejectOpWith::Abort => isolation_abort_error(op_name),\n+            RejectOpWith::WarningWithoutBacktrace => {\n+                this.tcx\n+                    .sess\n+                    .warn(&format!(\"`{}` was made to return an error due to isolation\", op_name));\n+                Ok(())\n+            }\n+            RejectOpWith::Warning => {\n+                register_diagnostic(NonHaltingDiagnostic::RejectedIsolatedOp(op_name.to_string()));\n+                Ok(())\n+            }\n+            RejectOpWith::NoWarning => Ok(()), // no warning\n+        }\n+    }\n+\n     /// Helper function used inside the shims of foreign functions to assert that the target OS\n     /// is `target_os`. It panics showing a message with the `name` of the foreign function\n     /// if this is not the case.\n@@ -651,7 +671,7 @@ where\n     throw_ub_format!(\"incorrect number of arguments: got {}, expected {}\", args.len(), N)\n }\n \n-pub fn isolation_error(name: &str) -> InterpResult<'static> {\n+pub fn isolation_abort_error(name: &str) -> InterpResult<'static> {\n     throw_machine_stop!(TerminationInfo::UnsupportedInIsolation(format!(\n         \"{} not available when isolation is enabled\",\n         name,"}, {"sha": "8c0a19b6dfbdc713ca1689b422b1a920ea41e0e8", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -59,7 +59,9 @@ pub use crate::diagnostics::{\n     register_diagnostic, report_error, EvalContextExt as DiagnosticsEvalContextExt,\n     NonHaltingDiagnostic, TerminationInfo,\n };\n-pub use crate::eval::{create_ecx, eval_main, AlignmentCheck, MiriConfig};\n+pub use crate::eval::{\n+    create_ecx, eval_main, AlignmentCheck, IsolatedOp, MiriConfig, RejectOpWith,\n+};\n pub use crate::helpers::EvalContextExt as HelpersEvalContextExt;\n pub use crate::machine::{\n     AllocExtra, Evaluator, FrameData, MemoryExtra, MiriEvalContext, MiriEvalContextExt,"}, {"sha": "752d21344825043a77a8bff3af6ae97c16b149c9", "filename": "src/machine.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -263,9 +263,10 @@ pub struct Evaluator<'mir, 'tcx> {\n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,\n \n-    /// If enabled, the `env_vars` field is populated with the host env vars during initialization\n-    /// and random number generation is delegated to the host.\n-    pub(crate) communicate: bool,\n+    /// What should Miri do when an op requires communicating with the host,\n+    /// such as accessing host env vars, random number generation, and\n+    /// file system access.\n+    pub(crate) isolated_op: IsolatedOp,\n \n     /// Whether to enforce the validity invariant.\n     pub(crate) validate: bool,\n@@ -314,7 +315,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             argv: None,\n             cmd_line: None,\n             tls: TlsData::default(),\n-            communicate: config.communicate,\n+            isolated_op: config.isolated_op,\n             validate: config.validate,\n             enforce_abi: config.check_abi,\n             file_handler: Default::default(),\n@@ -328,6 +329,10 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             exported_symbols_cache: FxHashMap::default(),\n         }\n     }\n+\n+    pub(crate) fn communicate(&self) -> bool {\n+        self.isolated_op == IsolatedOp::Allow\n+    }\n }\n \n /// A rustc InterpCx for Miri."}, {"sha": "9a68cf7bd539aef23a53b8c6956cc266f9537aec", "filename": "src/shims/env.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -1,6 +1,7 @@\n use std::convert::TryFrom;\n use std::env;\n use std::ffi::{OsStr, OsString};\n+use std::io::{Error, ErrorKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_mir::interpret::Pointer;\n@@ -45,7 +46,7 @@ impl<'tcx> EnvVars<'tcx> {\n             excluded_env_vars.push(\"TERM\".to_owned());\n         }\n \n-        if ecx.machine.communicate {\n+        if ecx.machine.communicate() {\n             for (name, value) in env::vars() {\n                 if !excluded_env_vars.contains(&name) {\n                     let var_ptr = match target_os {\n@@ -321,7 +322,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"`getcwd` is only available for the UNIX target family\"\n         );\n \n-        this.check_no_isolation(\"`getcwd`\")?;\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"getcwd\", reject_with)?;\n+            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n+            this.set_last_error_from_io_error(err)?;\n+            return Ok(Scalar::null_ptr(&*this.tcx));\n+        }\n \n         let buf = this.read_scalar(&buf_op)?.check_init()?;\n         let size = this.read_scalar(&size_op)?.to_machine_usize(&*this.tcx)?;\n@@ -336,6 +342,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n+\n         Ok(Scalar::null_ptr(&*this.tcx))\n     }\n \n@@ -348,7 +355,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"GetCurrentDirectoryW\");\n \n-        this.check_no_isolation(\"`GetCurrentDirectoryW`\")?;\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"GetCurrentDirectoryW\", reject_with)?;\n+            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n+            this.set_last_error_from_io_error(err)?;\n+            return Ok(0);\n+        }\n \n         let size = u64::from(this.read_scalar(size_op)?.to_u32()?);\n         let buf = this.read_scalar(buf_op)?.check_init()?;\n@@ -370,7 +382,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"`getcwd` is only available for the UNIX target family\"\n         );\n \n-        this.check_no_isolation(\"`chdir`\")?;\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"chdir\", reject_with)?;\n+            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n+            this.set_last_error_from_io_error(err)?;\n+\n+            return Ok(-1);\n+        }\n \n         let path = this.read_path_from_c_str(this.read_scalar(path_op)?.check_init()?)?;\n \n@@ -393,7 +411,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.assert_target_os(\"windows\", \"SetCurrentDirectoryW\");\n \n-        this.check_no_isolation(\"`SetCurrentDirectoryW`\")?;\n+        if let IsolatedOp::Reject(reject_with) = this.machine.isolated_op {\n+            this.reject_in_isolation(\"SetCurrentDirectoryW\", reject_with)?;\n+            let err = Error::new(ErrorKind::NotFound, \"rejected due to isolation\");\n+            this.set_last_error_from_io_error(err)?;\n+\n+            return Ok(0);\n+        }\n \n         let path = this.read_path_from_wide_str(this.read_scalar(path_op)?.check_init()?)?;\n "}, {"sha": "ca7a91a0f94e60ee101eaee18453ab1d04d8d7c0", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -127,7 +127,7 @@ impl FileDescriptor for io::Stdin {\n     ) -> InterpResult<'tcx, io::Result<usize>> {\n         if !communicate_allowed {\n             // We want isolation mode to be deterministic, so we have to disallow all reads, even stdin.\n-            helpers::isolation_error(\"`read` from stdin\")?;\n+            helpers::isolation_abort_error(\"`read` from stdin\")?;\n         }\n         Ok(Read::read(self, bytes))\n     }\n@@ -662,7 +662,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.remove(&fd) {\n-            let result = file_descriptor.close(this.machine.communicate)?;\n+            let result = file_descriptor.close(this.machine.communicate())?;\n             this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n@@ -687,6 +687,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n         let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             trace!(\"read: FD mapped to {:?}\", file_descriptor);\n@@ -696,9 +697,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let mut bytes = vec![0; count as usize];\n             // `File::read` never returns a value larger than `count`,\n             // so this cannot fail.\n-            let result = file_descriptor\n-                .read(this.machine.communicate, &mut bytes)?\n-                .map(|c| i64::try_from(c).unwrap());\n+            let result =\n+                file_descriptor.read(communicate, &mut bytes)?.map(|c| i64::try_from(c).unwrap());\n \n             match result {\n                 Ok(read_bytes) => {\n@@ -733,12 +733,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n         let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             let bytes = this.memory.read_bytes(buf, Size::from_bytes(count))?;\n-            let result = file_descriptor\n-                .write(this.machine.communicate, &bytes)?\n-                .map(|c| i64::try_from(c).unwrap());\n+            let result =\n+                file_descriptor.write(communicate, &bytes)?.map(|c| i64::try_from(c).unwrap());\n             this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n@@ -771,9 +771,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             return Ok(-1);\n         };\n \n+        let communicate = this.machine.communicate();\n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             let result = file_descriptor\n-                .seek(this.machine.communicate, seek_from)?\n+                .seek(communicate, seek_from)?\n                 .map(|offset| i64::try_from(offset).unwrap());\n             this.try_unwrap_io_result(result)\n         } else {"}, {"sha": "ea891c8998342f258cbbd79b70c17d365cd8bc17", "filename": "tests/run-pass/current_dir_with_isolation.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/tests%2Frun-pass%2Fcurrent_dir_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/tests%2Frun-pass%2Fcurrent_dir_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcurrent_dir_with_isolation.rs?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n+// normalize-stderr-test \"(getcwd|GetCurrentDirectoryW)\" -> \"$$GET\"\n+// normalize-stderr-test \"(chdir|SetCurrentDirectoryW)\" -> \"$$SET\"\n+\n+use std::env;\n+use std::io::ErrorKind;\n+\n+fn main() {\n+    // Test that current dir operations return a proper error instead\n+    // of stopping the machine in isolation mode\n+    assert_eq!(env::current_dir().unwrap_err().kind(), ErrorKind::NotFound);\n+    for _i in 0..3 {\n+        assert_eq!(env::current_dir().unwrap_err().kind(), ErrorKind::NotFound);\n+    }\n+\n+    assert_eq!(env::set_current_dir(\"..\").unwrap_err().kind(), ErrorKind::NotFound);\n+    for _i in 0..3 {\n+        assert_eq!(env::set_current_dir(\"..\").unwrap_err().kind(), ErrorKind::NotFound);\n+    }\n+}"}, {"sha": "cc0975230de68a51a13a9babc0b70f0378d52ef0", "filename": "tests/run-pass/current_dir_with_isolation.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/892f706ce55d38bf8a6c80fec5d08e785d2240ac/tests%2Frun-pass%2Fcurrent_dir_with_isolation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/892f706ce55d38bf8a6c80fec5d08e785d2240ac/tests%2Frun-pass%2Fcurrent_dir_with_isolation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcurrent_dir_with_isolation.stderr?ref=892f706ce55d38bf8a6c80fec5d08e785d2240ac", "patch": "@@ -0,0 +1,4 @@\n+warning: `$GET` was made to return an error due to isolation\n+\n+warning: `$SET` was made to return an error due to isolation\n+"}]}