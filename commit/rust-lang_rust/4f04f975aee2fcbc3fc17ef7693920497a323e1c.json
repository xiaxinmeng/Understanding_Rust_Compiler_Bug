{"sha": "4f04f975aee2fcbc3fc17ef7693920497a323e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmMDRmOTc1YWVlMmZjYmMzZmMxN2VmNzY5MzkyMDQ5N2EzMjNlMWM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-10T17:58:22Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-15T14:11:14Z"}, "message": "Replace libtest/lib.rs:FnBox with std::boxed::FnBox.\n\nFixes https://github.com/rust-lang/rust/issues/41810.", "tree": {"sha": "fae0df741eceea20ffca095e93fa1722d1397a0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae0df741eceea20ffca095e93fa1722d1397a0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f04f975aee2fcbc3fc17ef7693920497a323e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f04f975aee2fcbc3fc17ef7693920497a323e1c", "html_url": "https://github.com/rust-lang/rust/commit/4f04f975aee2fcbc3fc17ef7693920497a323e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f04f975aee2fcbc3fc17ef7693920497a323e1c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2537a499c2f1983011ad04ba2e59e5ff2e2989b6", "html_url": "https://github.com/rust-lang/rust/commit/2537a499c2f1983011ad04ba2e59e5ff2e2989b6"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "d4fb4d73dd3d348ad6e4e0cb9b1c3b5a4696d260", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=4f04f975aee2fcbc3fc17ef7693920497a323e1c", "patch": "@@ -534,7 +534,7 @@ impl Collector {\n                 should_panic: testing::ShouldPanic::No,\n                 allow_fail,\n             },\n-            testfn: testing::DynTestFn(box move |()| {\n+            testfn: testing::DynTestFn(box move || {\n                 let panic = io::set_panic(None);\n                 let print = io::set_print(None);\n                 match {"}, {"sha": "0d837c470a223dd7c3ae2ae20354a62ecd097407", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 20, "deletions": 30, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=4f04f975aee2fcbc3fc17ef7693920497a323e1c", "patch": "@@ -35,6 +35,7 @@\n #![deny(warnings)]\n \n #![feature(asm)]\n+#![feature(fnbox)]\n #![cfg_attr(unix, feature(libc))]\n #![feature(set_stdio)]\n #![feature(panic_unwind)]\n@@ -56,6 +57,7 @@ use self::OutputLocation::*;\n \n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::any::Any;\n+use std::boxed::FnBox;\n use std::cmp;\n use std::collections::BTreeMap;\n use std::env;\n@@ -133,24 +135,14 @@ pub trait TDynBenchFn: Send {\n     fn run(&self, harness: &mut Bencher);\n }\n \n-pub trait FnBox<T>: Send + 'static {\n-    fn call_box(self: Box<Self>, t: T);\n-}\n-\n-impl<T, F: FnOnce(T) + Send + 'static> FnBox<T> for F {\n-    fn call_box(self: Box<F>, t: T) {\n-        (*self)(t)\n-    }\n-}\n-\n // A function that runs a test. If the function returns successfully,\n // the test succeeds; if the function panics then the test fails. We\n // may need to come up with a more clever definition of test in order\n // to support isolation of tests into threads.\n pub enum TestFn {\n     StaticTestFn(fn()),\n     StaticBenchFn(fn(&mut Bencher)),\n-    DynTestFn(Box<FnBox<()>>),\n+    DynTestFn(Box<FnBox() + Send>),\n     DynBenchFn(Box<TDynBenchFn + 'static>),\n }\n \n@@ -1337,14 +1329,14 @@ pub fn convert_benchmarks_to_tests(tests: Vec<TestDescAndFn>) -> Vec<TestDescAnd\n     tests.into_iter().map(|x| {\n         let testfn = match x.testfn {\n             DynBenchFn(bench) => {\n-                DynTestFn(Box::new(move |()| {\n+                DynTestFn(Box::new(move || {\n                     bench::run_once(|b| {\n                         __rust_begin_short_backtrace(|| bench.run(b))\n                     })\n                 }))\n             }\n             StaticBenchFn(benchfn) => {\n-                DynTestFn(Box::new(move |()| {\n+                DynTestFn(Box::new(move || {\n                     bench::run_once(|b| {\n                         __rust_begin_short_backtrace(|| benchfn(b))\n                     })\n@@ -1379,7 +1371,7 @@ pub fn run_test(opts: &TestOpts,\n     fn run_test_inner(desc: TestDesc,\n                       monitor_ch: Sender<MonitorMsg>,\n                       nocapture: bool,\n-                      testfn: Box<FnBox<()>>) {\n+                      testfn: Box<FnBox() + Send>) {\n         struct Sink(Arc<Mutex<Vec<u8>>>);\n         impl Write for Sink {\n             fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n@@ -1405,9 +1397,7 @@ pub fn run_test(opts: &TestOpts,\n                 None\n             };\n \n-            let result = catch_unwind(AssertUnwindSafe(|| {\n-                testfn.call_box(())\n-            }));\n+            let result = catch_unwind(AssertUnwindSafe(testfn));\n \n             if let Some((printio, panicio)) = oldio {\n                 io::set_print(printio);\n@@ -1449,14 +1439,14 @@ pub fn run_test(opts: &TestOpts,\n             return;\n         }\n         DynTestFn(f) => {\n-            let cb = move |()| {\n-                __rust_begin_short_backtrace(|| f.call_box(()))\n+            let cb = move || {\n+                __rust_begin_short_backtrace(f)\n             };\n             run_test_inner(desc, monitor_ch, opts.nocapture, Box::new(cb))\n         }\n         StaticTestFn(f) =>\n             run_test_inner(desc, monitor_ch, opts.nocapture,\n-                           Box::new(move |()| __rust_begin_short_backtrace(f))),\n+                           Box::new(move || __rust_begin_short_backtrace(f))),\n     }\n }\n \n@@ -1720,7 +1710,7 @@ mod tests {\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1738,7 +1728,7 @@ mod tests {\n                 should_panic: ShouldPanic::No,\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1758,7 +1748,7 @@ mod tests {\n                 should_panic: ShouldPanic::Yes,\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1778,7 +1768,7 @@ mod tests {\n                 should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1800,7 +1790,7 @@ mod tests {\n                 should_panic: ShouldPanic::YesWithMessage(expected),\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1818,7 +1808,7 @@ mod tests {\n                 should_panic: ShouldPanic::Yes,\n                 allow_fail: false,\n             },\n-            testfn: DynTestFn(Box::new(move |()| f())),\n+            testfn: DynTestFn(Box::new(f)),\n         };\n         let (tx, rx) = channel();\n         run_test(&TestOpts::new(), false, desc, tx);\n@@ -1852,7 +1842,7 @@ mod tests {\n                                  should_panic: ShouldPanic::No,\n                                  allow_fail: false,\n                              },\n-                             testfn: DynTestFn(Box::new(move |()| {})),\n+                             testfn: DynTestFn(Box::new(move || {})),\n                          },\n                          TestDescAndFn {\n                              desc: TestDesc {\n@@ -1861,7 +1851,7 @@ mod tests {\n                                  should_panic: ShouldPanic::No,\n                                  allow_fail: false,\n                              },\n-                             testfn: DynTestFn(Box::new(move |()| {})),\n+                             testfn: DynTestFn(Box::new(move || {})),\n                          }];\n         let filtered = filter_tests(&opts, tests);\n \n@@ -1885,7 +1875,7 @@ mod tests {\n                     should_panic: ShouldPanic::No,\n                     allow_fail: false,\n                 },\n-                testfn: DynTestFn(Box::new(move |()| {}))\n+                testfn: DynTestFn(Box::new(move || {}))\n             })\n             .collect()\n         }\n@@ -1967,7 +1957,7 @@ mod tests {\n                         should_panic: ShouldPanic::No,\n                         allow_fail: false,\n                     },\n-                    testfn: DynTestFn(Box::new(move |()| testfn())),\n+                    testfn: DynTestFn(Box::new(testfn)),\n                 };\n                 tests.push(test);\n             }"}, {"sha": "8ad27693629a08fccf69c65cbe5b78a04fed8ced", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f04f975aee2fcbc3fc17ef7693920497a323e1c/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=4f04f975aee2fcbc3fc17ef7693920497a323e1c", "patch": "@@ -710,7 +710,7 @@ pub fn make_test_name(config: &Config, testpaths: &TestPaths) -> test::TestName\n pub fn make_test_closure(config: &Config, testpaths: &TestPaths) -> test::TestFn {\n     let config = config.clone();\n     let testpaths = testpaths.clone();\n-    test::DynTestFn(Box::new(move |()| runtest::run(config, &testpaths)))\n+    test::DynTestFn(Box::new(move || runtest::run(config, &testpaths)))\n }\n \n /// Returns (Path to GDB, GDB Version, GDB has Rust Support)"}]}