{"sha": "7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmFmN2ViMGVmNjg1YzJkZmQ5MDdmN2U3NmE4NzYxNzRjOWY2NjU=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-05T03:42:21Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2020-01-05T03:52:37Z"}, "message": "Result's panics have `#[track_caller]`.", "tree": {"sha": "5c8cebce3845f2959155f37c86c19f3ac0f47cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c8cebce3845f2959155f37c86c19f3ac0f47cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "html_url": "https://github.com/rust-lang/rust/commit/7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6af7eb0ef685c2dfd907f7e76a876174c9f665/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e9d573d3f6bc9808e01cef914084fac15f42cc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e9d573d3f6bc9808e01cef914084fac15f42cc2", "html_url": "https://github.com/rust-lang/rust/commit/2e9d573d3f6bc9808e01cef914084fac15f42cc2"}], "stats": {"total": 13, "additions": 13, "deletions": 0}, "files": [{"sha": "b39abf917850ddc62a88477b56f7b13e53501343", "filename": "src/libcore/result.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a6af7eb0ef685c2dfd907f7e76a876174c9f665/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6af7eb0ef685c2dfd907f7e76a876174c9f665/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "patch": "@@ -957,6 +957,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap(self) -> T {\n         match self {\n@@ -984,6 +985,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n     pub fn expect(self, msg: &str) -> T {\n         match self {\n@@ -1017,6 +1019,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// assert_eq!(x.unwrap_err(), \"emergency failure\");\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn unwrap_err(self) -> E {\n         match self {\n@@ -1044,6 +1047,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n     #[inline]\n+    #[track_caller]\n     #[stable(feature = \"result_expect_err\", since = \"1.17.0\")]\n     pub fn expect_err(self, msg: &str) -> E {\n         match self {\n@@ -1188,6 +1192,7 @@ impl<T, E> Result<Option<T>, E> {\n // This is a separate function to reduce the code size of the methods\n #[inline(never)]\n #[cold]\n+#[track_caller]\n fn unwrap_failed(msg: &str, error: &dyn fmt::Debug) -> ! {\n     panic!(\"{}: {:?}\", msg, error)\n }"}, {"sha": "c65027d9cac73f3a85f219ee806aded2f7b5bf79", "filename": "src/test/ui/rfc-2091-track-caller/std-panic-locations.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6af7eb0ef685c2dfd907f7e76a876174c9f665/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6af7eb0ef685c2dfd907f7e76a876174c9f665/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Fstd-panic-locations.rs?ref=7a6af7eb0ef685c2dfd907f7e76a876174c9f665", "patch": "@@ -26,4 +26,12 @@ fn main() {\n     let yep: Option<()> = Some(());\n     assert_panicked(|| yep.unwrap_none());\n     assert_panicked(|| yep.expect_none(\"\"));\n+\n+    let oops: Result<(), ()> = Err(());\n+    assert_panicked(|| oops.unwrap());\n+    assert_panicked(|| oops.expect(\"\"));\n+\n+    let fine: Result<(), ()> = Ok(());\n+    assert_panicked(|| fine.unwrap_err());\n+    assert_panicked(|| fine.expect_err(\"\"));\n }"}]}