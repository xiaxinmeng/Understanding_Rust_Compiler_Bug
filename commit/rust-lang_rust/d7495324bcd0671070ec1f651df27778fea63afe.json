{"sha": "d7495324bcd0671070ec1f651df27778fea63afe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3NDk1MzI0YmNkMDY3MTA3MGVjMWY2NTFkZjI3Nzc4ZmVhNjNhZmU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:56:49Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-06T10:56:49Z"}, "message": "Work around removal of beginning_vert field from ast::Arm\n\n`ast::Arm` used to have `beginning_vert` field whose type is `Option<Span>`\nand holds a span of the beginning `|` if available. This field is now removed.\nThis commit works around that.\n\nSince we only need a `BytePos` of the `|`, the type of `beginning_vert` in\n`ArmWrapper` is `Option<BytePos>`.", "tree": {"sha": "b85669b6c9580de47986506d2085e0cbaa9cb386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b85669b6c9580de47986506d2085e0cbaa9cb386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7495324bcd0671070ec1f651df27778fea63afe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7495324bcd0671070ec1f651df27778fea63afe", "html_url": "https://github.com/rust-lang/rust/commit/d7495324bcd0671070ec1f651df27778fea63afe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7495324bcd0671070ec1f651df27778fea63afe/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c", "html_url": "https://github.com/rust-lang/rust/commit/5416c4df76e07d4eb4c70abf39c5c1c0cad7315c"}], "stats": {"total": 66, "additions": 53, "deletions": 13}, "files": [{"sha": "31bab9672b0ecc05f082bad2f7ef51f99756b816", "filename": "src/expr.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d7495324bcd0671070ec1f651df27778fea63afe/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7495324bcd0671070ec1f651df27778fea63afe/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d7495324bcd0671070ec1f651df27778fea63afe", "patch": "@@ -1231,23 +1231,43 @@ pub fn is_unsafe_block(block: &ast::Block) -> bool {\n     }\n }\n \n-// A simple wrapper type against ast::Arm. Used inside write_list().\n+/// A simple wrapper type against ast::Arm. Used inside write_list().\n struct ArmWrapper<'a> {\n     pub arm: &'a ast::Arm,\n-    // True if the arm is the last one in match expression. Used to decide on whether we should add\n-    // trailing comma to the match arm when `config.trailing_comma() == Never`.\n+    /// True if the arm is the last one in match expression. Used to decide on whether we should add\n+    /// trailing comma to the match arm when `config.trailing_comma() == Never`.\n     pub is_last: bool,\n+    /// Holds a byte position of `|` at the beginning of the arm pattern, if available.\n+    pub beginning_vert: Option<BytePos>,\n }\n \n impl<'a> ArmWrapper<'a> {\n-    pub fn new(arm: &'a ast::Arm, is_last: bool) -> ArmWrapper<'a> {\n-        ArmWrapper { arm, is_last }\n+    pub fn new(\n+        arm: &'a ast::Arm,\n+        is_last: bool,\n+        beginning_vert: Option<BytePos>,\n+    ) -> ArmWrapper<'a> {\n+        ArmWrapper {\n+            arm,\n+            is_last,\n+            beginning_vert,\n+        }\n+    }\n+}\n+\n+impl<'a> Spanned for ArmWrapper<'a> {\n+    fn span(&self) -> Span {\n+        if let Some(lo) = self.beginning_vert {\n+            mk_sp(lo, self.arm.span().hi())\n+        } else {\n+            self.arm.span()\n+        }\n     }\n }\n \n impl<'a> Rewrite for ArmWrapper<'a> {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        rewrite_match_arm(context, self.arm, shape, self.is_last)\n+        rewrite_match_arm(context, self.arm, shape, self.is_last, self.beginning_vert)\n     }\n }\n \n@@ -1344,6 +1364,23 @@ fn arm_comma(config: &Config, body: &ast::Expr, is_last: bool) -> &'static str {\n     }\n }\n \n+/// Collect a byte position of the beginning `|` for each arm, if available.\n+fn collect_beginning_verts(\n+    context: &RewriteContext,\n+    arms: &[ast::Arm],\n+    span: Span,\n+) -> Vec<Option<BytePos>> {\n+    let mut beginning_verts = Vec::with_capacity(arms.len());\n+    let mut lo = context.snippet_provider.span_after(span, \"{\");\n+    for arm in arms {\n+        let hi = arm.pats[0].span.lo();\n+        let missing_span = mk_sp(lo, hi);\n+        beginning_verts.push(context.snippet_provider.opt_span_before(missing_span, \"|\"));\n+        lo = arm.span().hi();\n+    }\n+    beginning_verts\n+}\n+\n fn rewrite_match_arms(\n     context: &RewriteContext,\n     arms: &[ast::Arm],\n@@ -1359,15 +1396,17 @@ fn rewrite_match_arms(\n     let is_last_iter = repeat(false)\n         .take(arm_len.checked_sub(1).unwrap_or(0))\n         .chain(repeat(true));\n+    let beginning_verts = collect_beginning_verts(context, arms, span);\n     let items = itemize_list(\n         context.snippet_provider,\n         arms.iter()\n             .zip(is_last_iter)\n-            .map(|(arm, is_last)| ArmWrapper::new(arm, is_last)),\n+            .zip(beginning_verts.into_iter())\n+            .map(|((arm, is_last), beginning_vert)| ArmWrapper::new(arm, is_last, beginning_vert)),\n         \"}\",\n         \"|\",\n-        |arm| arm.arm.span().lo(),\n-        |arm| arm.arm.span().hi(),\n+        |arm| arm.span().lo(),\n+        |arm| arm.span().hi(),\n         |arm| arm.rewrite(context, arm_shape),\n         open_brace_pos,\n         span.hi(),\n@@ -1394,6 +1433,7 @@ fn rewrite_match_arm(\n     arm: &ast::Arm,\n     shape: Shape,\n     is_last: bool,\n+    beginning_vert: Option<BytePos>,\n ) -> Option<String> {\n     let (missing_span, attrs_str) = if !arm.attrs.is_empty() {\n         if contains_skip(&arm.attrs) {\n@@ -1417,7 +1457,7 @@ fn rewrite_match_arm(\n         context,\n         &arm.pats,\n         &arm.guard,\n-        arm.beginning_vert.is_some(),\n+        beginning_vert.is_some(),\n         shape,\n     ).and_then(|pats_str| {\n         combine_strs_with_missing_comments("}, {"sha": "d1f4865deade59756d70f2fa051bfa0ca111c676", "filename": "src/spanned.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7495324bcd0671070ec1f651df27778fea63afe/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7495324bcd0671070ec1f651df27778fea63afe/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=d7495324bcd0671070ec1f651df27778fea63afe", "patch": "@@ -89,10 +89,10 @@ impl Spanned for ast::Ty {\n \n impl Spanned for ast::Arm {\n     fn span(&self) -> Span {\n-        let lo = if let Some(sp) = self.beginning_vert {\n-            sp.lo()\n-        } else {\n+        let lo = if self.attrs.is_empty() {\n             self.pats[0].span.lo()\n+        } else {\n+            self.attrs[0].span.lo()\n         };\n         span_with_attrs_lo_hi!(self, lo, self.body.span.hi())\n     }"}]}