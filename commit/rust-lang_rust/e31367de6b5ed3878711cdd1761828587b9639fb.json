{"sha": "e31367de6b5ed3878711cdd1761828587b9639fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMTM2N2RlNmI1ZWQzODc4NzExY2RkMTc2MTgyODU4N2I5NjM5ZmI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-02T23:05:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:58Z"}, "message": "small tweaks", "tree": {"sha": "224c608363536f67a2cc99546f77d3f0290b1872", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/224c608363536f67a2cc99546f77d3f0290b1872"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e31367de6b5ed3878711cdd1761828587b9639fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e31367de6b5ed3878711cdd1761828587b9639fb", "html_url": "https://github.com/rust-lang/rust/commit/e31367de6b5ed3878711cdd1761828587b9639fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e31367de6b5ed3878711cdd1761828587b9639fb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d8692262a8299025379e5178041d0d52a0329e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d8692262a8299025379e5178041d0d52a0329e", "html_url": "https://github.com/rust-lang/rust/commit/34d8692262a8299025379e5178041d0d52a0329e"}], "stats": {"total": 61, "additions": 30, "deletions": 31}, "files": [{"sha": "5ad76e3964038e61da293e7ba8aef7431126f095", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -79,15 +79,22 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                             );\n                         } else {\n                             err.span_label(sup_origin.span(), \"...is captured here...\");\n-                            err.span_note(\n-                                return_sp,\n-                                \"...and is required to live as long as `'static` here\",\n-                            );\n+                            if return_sp < sup_origin.span() {\n+                                err.span_note(\n+                                    return_sp,\n+                                    \"...and is required to live as long as `'static` here\",\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    return_sp,\n+                                    \"...and is required to live as long as `'static` here\",\n+                                );\n+                            }\n                         }\n                     } else {\n                         err.span_label(\n                             return_sp,\n-                            \"...is captured and required live as long as `'static` here\",\n+                            \"...is captured and required to live as long as `'static` here\",\n                         );\n                     }\n \n@@ -104,7 +111,8 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                         };\n                         let explicit =\n                             format!(\"you can add an explicit `{}` lifetime bound\", lifetime_name);\n-                        let explicit_static = format!(\"explicit `'static` bound to {}\", arg);\n+                        let explicit_static =\n+                            format!(\"explicit `'static` bound to the lifetime of {}\", arg);\n                         let captures = format!(\"captures data from {}\", arg);\n                         let add_static_bound =\n                             \"alternatively, add an explicit `'static` bound to this reference\";"}, {"sha": "aa443b9d2fc168c19a66675942a8598b20f0453a", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -6,12 +6,8 @@ LL |     pub async fn run_dummy_fn(&self) {\n    |                               |\n    |                               this data with an anonymous lifetime `'_`...\n    |                               ...is captured here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/issue-62097.rs:13:9\n-   |\n LL |         foo(|| self.bar()).await;\n-   |         ^^^\n+   |         --- ...and is required to live as long as `'static` here\n \n error: aborting due to previous error\n "}, {"sha": "baed43783a13cc39649335986607012136b89ef7", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -47,7 +47,7 @@ note: ...and is required to live as long as `'static` here\n    |\n LL | fn elided2(x: &i32) -> impl Copy + 'static { x }\n    |                        ^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided2(x: &i32) -> impl Copy + '_ { x }\n    |                                    ^^\n@@ -69,7 +69,7 @@ note: ...and is required to live as long as `'static` here\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'static { x }\n    |                                 ^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit2<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                             ^^\n@@ -97,7 +97,7 @@ note: ...and is required to live as long as `'static` here\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider changing the `impl Trait`'s explicit `'static` bound to argument `x`\n+help: consider changing the `impl Trait`'s explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'a { x }\n    |                                                           ^^\n@@ -157,7 +157,7 @@ LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |               |\n    |               this data with an anonymous lifetime `'_`...\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `x`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n    |                                        ^^\n@@ -172,7 +172,7 @@ error[E0758]: cannot infer an appropriate lifetime\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n    |                     ------- this data with lifetime `'a`...         ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `x`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n    |                                                 ^^"}, {"sha": "d461001adead97a07252ad9e4cd96ba095f9864a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -5,7 +5,7 @@ LL | fn load(ss: &mut SomeStruct) -> Box<dyn SomeTrait> {\n    |             --------------- this data with an anonymous lifetime `'_`...\n ...\n LL |     ss.r\n-   |     ^^^^ ...is captured and required live as long as `'static` here\n+   |     ^^^^ ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `ss`, you can add an explicit `'_` lifetime bound\n    |"}, {"sha": "c684373c67e9d3ed13e45cad227c79a11e7819c4", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -6,7 +6,7 @@ LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n    |                                              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `v`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^\n@@ -23,7 +23,7 @@ LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n LL |     Box::new(v)\n    |              ^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `v`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n    |                                 ^^"}, {"sha": "c4ba395179831e4e824ad9391d4162c05446046b", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -6,7 +6,7 @@ LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `v`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {\n    |                                                            ^^"}, {"sha": "e45930bd9571060bdae2f63166e8a41d69b55e3f", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -6,7 +6,7 @@ LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n LL |     box B(&*v) as Box<dyn X>\n    |           ^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `v`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `v`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {\n    |                                                    ^^"}, {"sha": "69c7256364d70f40618b6afc329aeda6a03d2949", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -7,7 +7,7 @@ LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n    |              ^^^^^^^^^^^^^^ ...is captured here, requiring it to live as long as `'static`\n    |\n-help: consider changing the trait object's explicit `'static` bound to argument `x`\n+help: consider changing the trait object's explicit `'static` bound to the lifetime of argument `x`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {\n    |                                                           ^^"}, {"sha": "9b04069136be25b65b288e4a8efb64f8f5494cb7", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -2,15 +2,10 @@ error[E0758]: cannot infer an appropriate lifetime\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:16\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                ^^^^  ---------- this data with an anonymous lifetime `'_`...\n-   |                |\n+   |                ^^^^  ----------     ---------- ...and is required to live as long as `'static` here\n+   |                |     |\n+   |                |     this data with an anonymous lifetime `'_`...\n    |                ...is captured here...\n-   |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:37\n-   |\n-LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                                     ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fc4c801949512d2cd7ef25dd5005ef2f16996a54", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e31367de6b5ed3878711cdd1761828587b9639fb/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=e31367de6b5ed3878711cdd1761828587b9639fb", "patch": "@@ -5,7 +5,7 @@ LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |                ---- this data with an anonymous lifetime `'_`...\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ---------------^^^^--- ...is captured and required live as long as `'static` here\n+   |     ---------------^^^^--- ...is captured and required to live as long as `'static` here\n    |\n help: to declare that the trait object captures data from argument `items`, you can add an explicit `'_` lifetime bound\n    |"}]}