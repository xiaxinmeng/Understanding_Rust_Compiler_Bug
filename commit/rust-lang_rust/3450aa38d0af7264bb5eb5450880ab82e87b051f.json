{"sha": "3450aa38d0af7264bb5eb5450880ab82e87b051f", "node_id": "C_kwDOAAsO6NoAKDM0NTBhYTM4ZDBhZjcyNjRiYjVlYjU0NTA4ODBhYjgyZTg3YjA1MWY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-05T06:01:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-05T06:01:28Z"}, "message": "Rollup merge of #103621 - fee1-dead-contrib:iat-fix-use, r=cjgillot\n\nCorrectly resolve Inherent Associated Types\n\nI don't know if this is the best way to do this, but at least it is one way.", "tree": {"sha": "b48c1242d65132964c520f681de9d0b1a5425273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b48c1242d65132964c520f681de9d0b1a5425273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3450aa38d0af7264bb5eb5450880ab82e87b051f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjZfw4CRBK7hj4Ov3rIwAAb4EIAKAhJMgtyII89sZAoiGQ6xdD\noyyXw4QYt1QTvqwnOYDgakWyYTDB9CnyEWX9SBP5Wf3Xgobq0mtW0VMQoXonbfMp\nWLfrdRxqmSMgssa9gpPjYL58cwygLVRrVUL1nQPY3ivkkJ4gvuOlBx0tBOnHDl45\nGe5AzUL7Sokm2hbUY4XiWyD9PwuFUPSNQv7jx0ihwRJOyOUc9Bj5I0I8kb0rf+PY\nCgWNzaKmRpt/cN3GBMxspPtx/1SA9IcZHqG9NtxTEZUxPTo1p7naHaOH74iZC8GM\nBCXuLj0hsQBf0pIl420RGExeN+6WiJ5j7TVwZXOjDWulwgrkS94Rlnv3Uwya98A=\n=3PJ4\n-----END PGP SIGNATURE-----\n", "payload": "tree b48c1242d65132964c520f681de9d0b1a5425273\nparent aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6\nparent 3aef6c6a54e85ac5cc5e004669404d71be22aafb\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667628088 +0530\ncommitter GitHub <noreply@github.com> 1667628088 +0530\n\nRollup merge of #103621 - fee1-dead-contrib:iat-fix-use, r=cjgillot\n\nCorrectly resolve Inherent Associated Types\n\nI don't know if this is the best way to do this, but at least it is one way.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3450aa38d0af7264bb5eb5450880ab82e87b051f", "html_url": "https://github.com/rust-lang/rust/commit/3450aa38d0af7264bb5eb5450880ab82e87b051f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3450aa38d0af7264bb5eb5450880ab82e87b051f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "html_url": "https://github.com/rust-lang/rust/commit/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6"}, {"sha": "3aef6c6a54e85ac5cc5e004669404d71be22aafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aef6c6a54e85ac5cc5e004669404d71be22aafb", "html_url": "https://github.com/rust-lang/rust/commit/3aef6c6a54e85ac5cc5e004669404d71be22aafb"}], "stats": {"total": 138, "additions": 66, "deletions": 72}, "files": [{"sha": "9ad1d2bc542d7ce3ac96ae57dfc9b7b0c9c9c730", "filename": "compiler/rustc_hir_analysis/src/astconv/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Fmod.rs?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -1910,6 +1910,20 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     }\n                 }\n             }\n+\n+            // see if we can satisfy using an inherent associated type\n+            for impl_ in tcx.inherent_impls(adt_def.did()) {\n+                let assoc_ty = tcx.associated_items(impl_).find_by_name_and_kind(\n+                    tcx,\n+                    assoc_ident,\n+                    ty::AssocKind::Type,\n+                    *impl_,\n+                );\n+                if let Some(assoc_ty) = assoc_ty {\n+                    let ty = tcx.type_of(assoc_ty.def_id);\n+                    return Ok((ty, DefKind::AssocTy, assoc_ty.def_id));\n+                }\n+            }\n         }\n \n         // Find the type of the associated item, and the trait where the associated"}, {"sha": "16e2d9a3cfc3809363312223b769f794c4ec8b27", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -1381,7 +1381,8 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n                 ty::Projection(proj) => Res::Def(DefKind::Trait, proj.trait_ref(cx.tcx).def_id),\n                 // Rustdoc handles `ty::Error`s by turning them into `Type::Infer`s.\n                 ty::Error(_) => return Type::Infer,\n-                _ => bug!(\"clean: expected associated type, found `{:?}`\", ty),\n+                // Otherwise, this is an inherent associated type.\n+                _ => return clean_middle_ty(ty, cx, None),\n             };\n             let trait_ = clean_path(&hir::Path { span, res, segments: &[] }, cx);\n             register_res(cx, trait_.res);"}, {"sha": "94ea0e93bf6372e09ba9865a1261f4f83276c495", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.rs?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -1,3 +1,4 @@\n+// check-pass\n // This test ensures that rustdoc does not panic on inherented associated types\n // that are referred to without fully-qualified syntax.\n \n@@ -9,8 +10,4 @@ pub struct Struct;\n impl Struct {\n     pub type AssocTy = usize;\n     pub const AssocConst: Self::AssocTy = 42;\n-    //~^ ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n-    //~| ERROR ambiguous associated type\n-    //~| HELP use fully-qualified syntax\n }"}, {"sha": "b963b722f66201708db4650dba2ad194c31b2597", "filename": "src/test/rustdoc-ui/ambiguous-inherent-assoc-ty.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fambiguous-inherent-assoc-ty.stderr?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1,15 +0,0 @@\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/ambiguous-inherent-assoc-ty.rs:11:27\n-   |\n-LL |     pub const AssocConst: Self::AssocTy = 42;\n-   |                           ^^^^^^^^^^^^^ help: use fully-qualified syntax: `<Struct as Trait>::AssocTy`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "c579c962ffcc16dcc9c01c1587a814168b103e3e", "filename": "src/test/ui/assoc-inherent.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fui%2Fassoc-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fui%2Fassoc-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.rs?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1,20 +0,0 @@\n-// Test that inherent associated types work with\n-// inherent_associated_types feature gate.\n-\n-#![feature(inherent_associated_types)]\n-#![allow(incomplete_features)]\n-\n-struct Foo;\n-\n-impl Foo {\n-    type Bar = isize;\n-}\n-\n-impl Foo {\n-    type Baz; //~ ERROR associated type in `impl` without body\n-}\n-\n-fn main() {\n-    let x : Foo::Bar; //~ERROR ambiguous associated type\n-    x = 0isize;\n-}"}, {"sha": "b703453fa0334b2e3f55680ce9df127a8460d2a1", "filename": "src/test/ui/assoc-inherent.stderr", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6/src%2Ftest%2Fui%2Fassoc-inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassoc-inherent.stderr?ref=aebf7c4a0e68f0211b22ed3c7cec94779e2d83d6", "patch": "@@ -1,17 +0,0 @@\n-error: associated type in `impl` without body\n-  --> $DIR/assoc-inherent.rs:14:5\n-   |\n-LL |     type Baz;\n-   |     ^^^^^^^^-\n-   |             |\n-   |             help: provide a definition for the type: `= <type>;`\n-\n-error[E0223]: ambiguous associated type\n-  --> $DIR/assoc-inherent.rs:18:13\n-   |\n-LL |     let x : Foo::Bar;\n-   |             ^^^^^^^^ help: use fully-qualified syntax: `<Foo as Trait>::Bar`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0223`."}, {"sha": "71f65b92eae20e5e4d94028e894ec41d65534575", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.rs?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -0,0 +1,10 @@\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Baz; //~ ERROR associated type in `impl` without body\n+}\n+\n+fn main() {}"}, {"sha": "387a5658da37304bdacafca6860c310355b5b1a2", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-no-body.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-no-body.stderr?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -0,0 +1,10 @@\n+error: associated type in `impl` without body\n+  --> $DIR/assoc-inherent-no-body.rs:7:5\n+   |\n+LL |     type Baz;\n+   |     ^^^^^^^^-\n+   |             |\n+   |             help: provide a definition for the type: `= <type>;`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7ae425e2aaafb79cf6957206a7907df2bd8d8255", "filename": "src/test/ui/associated-inherent-types/assoc-inherent-use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-inherent-types%2Fassoc-inherent-use.rs?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -0,0 +1,14 @@\n+// check-pass\n+#![feature(inherent_associated_types)]\n+#![allow(incomplete_features)]\n+\n+struct Foo;\n+\n+impl Foo {\n+    type Bar = isize;\n+}\n+\n+fn main() {\n+    let x: Foo::Bar;\n+    x = 0isize;\n+}"}, {"sha": "b3042d413468ad1015a80a96d28f4e878787ad92", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3450aa38d0af7264bb5eb5450880ab82e87b051f/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=3450aa38d0af7264bb5eb5450880ab82e87b051f", "patch": "@@ -1,40 +1,40 @@\n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:14:13\n+  --> $DIR/resolve-self-in-impl.rs:16:6\n    |\n-LL | impl Tr for Self {}\n-   |             ^^^^\n+LL | impl Self {}\n+   |      ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:15:15\n+  --> $DIR/resolve-self-in-impl.rs:17:8\n    |\n-LL | impl Tr for S<Self> {}\n-   |               ^^^^\n+LL | impl S<Self> {}\n+   |        ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:16:6\n+  --> $DIR/resolve-self-in-impl.rs:18:7\n    |\n-LL | impl Self {}\n-   |      ^^^^\n+LL | impl (Self, Self) {}\n+   |       ^^^^  ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:17:8\n+  --> $DIR/resolve-self-in-impl.rs:14:13\n    |\n-LL | impl S<Self> {}\n-   |        ^^^^\n+LL | impl Tr for Self {}\n+   |             ^^^^\n    |\n    = note: replace `Self` with a different type\n \n error: `Self` is not valid in the self type of an impl block\n-  --> $DIR/resolve-self-in-impl.rs:18:7\n+  --> $DIR/resolve-self-in-impl.rs:15:15\n    |\n-LL | impl (Self, Self) {}\n-   |       ^^^^  ^^^^\n+LL | impl Tr for S<Self> {}\n+   |               ^^^^\n    |\n    = note: replace `Self` with a different type\n "}]}