{"sha": "4bed7485da0706dfc30f019f94f07fcdf5122358", "node_id": "C_kwDOAAsO6NoAKDRiZWQ3NDg1ZGEwNzA2ZGZjMzBmMDE5Zjk0ZjA3ZmNkZjUxMjIzNTg", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2021-10-14T19:44:43Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2022-02-18T19:40:08Z"}, "message": "Suggest `impl Trait` return type\n\nAddress #85991\n\nSuggest the `impl Trait` return type syntax if the user tried to return a generic parameter and we get a type mismatch\n\nThe suggestion is not emitted if the param appears in the function parameters, and only get the bounds that actually involve `T: ` directly\n\nIt also checks whether the generic param is contained in any where bound (where it isn't the self type), and if one is found (like `Option<T>: Send`), it is not suggested.\n\nThis also adds `TyS::contains`, which recursively vistits the type and looks if the other type is contained anywhere", "tree": {"sha": "96f2c77c5845e754b2906ea1bae4b8b1dcb6ba99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96f2c77c5845e754b2906ea1bae4b8b1dcb6ba99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bed7485da0706dfc30f019f94f07fcdf5122358", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bed7485da0706dfc30f019f94f07fcdf5122358", "html_url": "https://github.com/rust-lang/rust/commit/4bed7485da0706dfc30f019f94f07fcdf5122358", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bed7485da0706dfc30f019f94f07fcdf5122358/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c56fa8c30821129b0960180f528d4a1a4f9316", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c56fa8c30821129b0960180f528d4a1a4f9316", "html_url": "https://github.com/rust-lang/rust/commit/b8c56fa8c30821129b0960180f528d4a1a4f9316"}], "stats": {"total": 324, "additions": 321, "deletions": 3}, "files": [{"sha": "7c6d6ea1cb6ee1fa729c92c2aa9a7070707cbca7", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -8,7 +8,9 @@ use crate::infer::canonical::Canonical;\n use crate::ty::fold::ValidateBoundVars;\n use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::InferTy::{self, *};\n-use crate::ty::{self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable};\n+use crate::ty::{\n+    self, AdtDef, DefIdTree, Discr, Term, Ty, TyCtxt, TypeFlags, TypeFoldable, TypeVisitor,\n+};\n use crate::ty::{DelaySpanBugEmitted, List, ParamEnv};\n use polonius_engine::Atom;\n use rustc_data_structures::captures::Captures;\n@@ -24,7 +26,7 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::fmt;\n use std::marker::PhantomData;\n-use std::ops::{Deref, Range};\n+use std::ops::{ControlFlow, Deref, Range};\n use ty::util::IntTypeExt;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n@@ -2072,6 +2074,24 @@ impl<'tcx> Ty<'tcx> {\n         !matches!(self.kind(), Param(_) | Infer(_) | Error(_))\n     }\n \n+    /// Checks whether a type recursively contains another type\n+    ///\n+    /// Example: `Option<()>` contains `()`\n+    pub fn contains(self, other: Ty<'tcx>) -> bool {\n+        struct ContainsTyVisitor<'tcx>(Ty<'tcx>);\n+\n+        impl<'tcx> TypeVisitor<'tcx> for ContainsTyVisitor<'tcx> {\n+            type BreakTy = ();\n+\n+            fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+                if self.0 == t { ControlFlow::BREAK } else { t.super_visit_with(self) }\n+            }\n+        }\n+\n+        let cf = self.visit_with(&mut ContainsTyVisitor(other));\n+        cf.is_break()\n+    }\n+\n     /// Returns the type and mutability of `*ty`.\n     ///\n     /// The parameter `explicit` indicates if this is an *explicit* dereference."}, {"sha": "f9c482713f1fec8041d587fb338224438e125feb", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 115, "deletions": 1, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -8,8 +8,12 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{Expr, ExprKind, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind};\n+use rustc_hir::{\n+    Expr, ExprKind, GenericBound, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind,\n+    WherePredicate,\n+};\n use rustc_infer::infer::{self, TyCtxtInferExt};\n+\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Binder, Ty};\n use rustc_span::symbol::{kw, sym};\n@@ -559,13 +563,123 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let ty = self.tcx.erase_late_bound_regions(ty);\n                 if self.can_coerce(expected, ty) {\n                     err.span_label(sp, format!(\"expected `{}` because of return type\", expected));\n+                    self.try_suggest_return_impl_trait(err, expected, ty, fn_id);\n                     return true;\n                 }\n                 false\n             }\n         }\n     }\n \n+    /// check whether the return type is a generic type with a trait bound\n+    /// only suggest this if the generic param is not present in the arguments\n+    /// if this is true, hint them towards changing the return type to `impl Trait`\n+    /// ```\n+    /// fn cant_name_it<T: Fn() -> u32>() -> T {\n+    ///     || 3\n+    /// }\n+    /// ```\n+    fn try_suggest_return_impl_trait(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+        fn_id: hir::HirId,\n+    ) {\n+        // Only apply the suggestion if:\n+        //  - the return type is a generic parameter\n+        //  - the generic param is not used as a fn param\n+        //  - the generic param has at least one bound\n+        //  - the generic param doesn't appear in any other bounds where it's not the Self type\n+        // Suggest:\n+        //  - Changing the return type to be `impl <all bounds>`\n+\n+        debug!(\"try_suggest_return_impl_trait, expected = {:?}, found = {:?}\", expected, found);\n+\n+        let ty::Param(expected_ty_as_param) = expected.kind() else { return };\n+\n+        let fn_node = self.tcx.hir().find(fn_id);\n+\n+        let Some(hir::Node::Item(hir::Item {\n+            kind:\n+                hir::ItemKind::Fn(\n+                    hir::FnSig { decl: hir::FnDecl { inputs: fn_parameters, output: fn_return, .. }, .. },\n+                    hir::Generics { params, where_clause, .. },\n+                    _body_id,\n+                ),\n+            ..\n+        })) = fn_node else { return };\n+\n+        let Some(expected_generic_param) = params.get(expected_ty_as_param.index as usize) else { return };\n+\n+        // get all where BoundPredicates here, because they are used in to cases below\n+        let where_predicates = where_clause\n+            .predicates\n+            .iter()\n+            .filter_map(|p| match p {\n+                WherePredicate::BoundPredicate(hir::WhereBoundPredicate {\n+                    bounds,\n+                    bounded_ty,\n+                    ..\n+                }) => {\n+                    // FIXME: Maybe these calls to `ast_ty_to_ty` can be removed (and the ones below)\n+                    let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, bounded_ty);\n+                    Some((ty, bounds))\n+                }\n+                _ => None,\n+            })\n+            .map(|(ty, bounds)| match ty.kind() {\n+                ty::Param(param_ty) if param_ty == expected_ty_as_param => Ok(Some(bounds)),\n+                // check whether there is any predicate that contains our `T`, like `Option<T>: Send`\n+                _ => match ty.contains(expected) {\n+                    true => Err(()),\n+                    false => Ok(None),\n+                },\n+            })\n+            .collect::<Result<Vec<_>, _>>();\n+\n+        let Ok(where_predicates) =  where_predicates else { return };\n+\n+        // now get all predicates in the same types as the where bounds, so we can chain them\n+        let predicates_from_where =\n+            where_predicates.iter().flatten().map(|bounds| bounds.iter()).flatten();\n+\n+        // extract all bounds from the source code using their spans\n+        let all_matching_bounds_strs = expected_generic_param\n+            .bounds\n+            .iter()\n+            .chain(predicates_from_where)\n+            .filter_map(|bound| match bound {\n+                GenericBound::Trait(_, _) => {\n+                    self.tcx.sess.source_map().span_to_snippet(bound.span()).ok()\n+                }\n+                _ => None,\n+            })\n+            .collect::<Vec<String>>();\n+\n+        if all_matching_bounds_strs.len() == 0 {\n+            return;\n+        }\n+\n+        let all_bounds_str = all_matching_bounds_strs.join(\" + \");\n+\n+        let ty_param_used_in_fn_params = fn_parameters.iter().any(|param| {\n+                let ty = <dyn AstConv<'_>>::ast_ty_to_ty(self, param);\n+                matches!(ty.kind(), ty::Param(fn_param_ty_param) if expected_ty_as_param == fn_param_ty_param)\n+            });\n+\n+        if ty_param_used_in_fn_params {\n+            return;\n+        }\n+\n+        err.span_suggestion(\n+            fn_return.span(),\n+            \"consider using an impl return type\",\n+            format!(\"impl {}\", all_bounds_str),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     pub(in super::super) fn suggest_missing_break_or_return_expr(\n         &self,\n         err: &mut DiagnosticBuilder<'_>,"}, {"sha": "e3f6ddb9a14978aba53de03070d5961457443d8d", "filename": "src/test/ui/return/return-impl-trait-bad.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.rs?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -0,0 +1,31 @@\n+trait Trait {}\n+impl Trait for () {}\n+\n+fn bad_echo<T>(_t: T) -> T {\n+    \"this should not suggest impl Trait\" //~ ERROR mismatched types\n+}\n+\n+fn bad_echo_2<T: Trait>(_t: T) -> T {\n+    \"this will not suggest it, because that would probably be wrong\" //~ ERROR mismatched types\n+}\n+\n+fn other_bounds_bad<T>() -> T\n+where\n+    T: Send,\n+    Option<T>: Send,\n+{\n+    \"don't suggest this, because Option<T> places additional constraints\" //~ ERROR mismatched types\n+}\n+\n+// FIXME: implement this check\n+trait GenericTrait<T> {}\n+\n+fn used_in_trait<T>() -> T\n+where\n+    T: Send,\n+    (): GenericTrait<T>,\n+{\n+    \"don't suggest this, because the generic param is used in the bound.\" //~ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "237b85ee66a10d73a2366ded6193eaffe30651d2", "filename": "src/test/ui/return/return-impl-trait-bad.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait-bad.stderr?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -0,0 +1,59 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:5:5\n+   |\n+LL | fn bad_echo<T>(_t: T) -> T {\n+   |             -            - expected `T` because of return type\n+   |             |\n+   |             this type parameter\n+LL |     \"this should not suggest impl Trait\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:9:5\n+   |\n+LL | fn bad_echo_2<T: Trait>(_t: T) -> T {\n+   |               -                   - expected `T` because of return type\n+   |               |\n+   |               this type parameter\n+LL |     \"this will not suggest it, because that would probably be wrong\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:17:5\n+   |\n+LL | fn other_bounds_bad<T>() -> T\n+   |                     -       - expected `T` because of return type\n+   |                     |\n+   |                     this type parameter\n+...\n+LL |     \"don't suggest this, because Option<T> places additional constraints\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait-bad.rs:28:5\n+   |\n+LL | fn used_in_trait<T>() -> T\n+   |                  -       -\n+   |                  |       |\n+   |                  |       expected `T` because of return type\n+   |                  |       help: consider using an impl return type: `impl Send`\n+   |                  this type parameter\n+...\n+LL |     \"don't suggest this, because the generic param is used in the bound.\"\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `T`, found `&str`\n+   |\n+   = note: expected type parameter `T`\n+                   found reference `&'static str`\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ff2b02f73ea6522798b6509b58f3a87c8f7a789e", "filename": "src/test/ui/return/return-impl-trait.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.fixed?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+trait Trait {}\n+impl Trait for () {}\n+\n+// this works\n+fn foo() -> impl Trait {\n+    ()\n+}\n+\n+fn bar<T: Trait + std::marker::Sync>() -> impl Trait + std::marker::Sync + Send\n+where\n+    T: Send,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn other_bounds<T>() -> impl Trait\n+where\n+    T: Trait,\n+    Vec<usize>: Clone,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    foo();\n+    bar::<()>();\n+    other_bounds::<()>();\n+}"}, {"sha": "e905d712f622d7cdb0f4a4dc5b892f01732d1244", "filename": "src/test/ui/return/return-impl-trait.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.rs?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -0,0 +1,30 @@\n+// run-rustfix\n+\n+trait Trait {}\n+impl Trait for () {}\n+\n+// this works\n+fn foo() -> impl Trait {\n+    ()\n+}\n+\n+fn bar<T: Trait + std::marker::Sync>() -> T\n+where\n+    T: Send,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn other_bounds<T>() -> T\n+where\n+    T: Trait,\n+    Vec<usize>: Clone,\n+{\n+    () //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+    foo();\n+    bar::<()>();\n+    other_bounds::<()>();\n+}"}, {"sha": "43d40972fcac0a94924522750a129a36b40fa2a4", "filename": "src/test/ui/return/return-impl-trait.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4bed7485da0706dfc30f019f94f07fcdf5122358/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freturn%2Freturn-impl-trait.stderr?ref=4bed7485da0706dfc30f019f94f07fcdf5122358", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait.rs:15:5\n+   |\n+LL | fn bar<T: Trait + std::marker::Sync>() -> T\n+   |        -                                  -\n+   |        |                                  |\n+   |        |                                  expected `T` because of return type\n+   |        this type parameter                help: consider using an impl return type: `impl Trait + std::marker::Sync + Send`\n+...\n+LL |     ()\n+   |     ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/return-impl-trait.rs:23:5\n+   |\n+LL | fn other_bounds<T>() -> T\n+   |                 -       -\n+   |                 |       |\n+   |                 |       expected `T` because of return type\n+   |                 |       help: consider using an impl return type: `impl Trait`\n+   |                 this type parameter\n+...\n+LL |     ()\n+   |     ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}