{"sha": "dc4876d33dc9713507a40569c01c6c335515f376", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNDg3NmQzM2RjOTcxMzUwN2E0MDU2OWMwMWM2YzMzNTUxNWYzNzY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T16:37:47Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-23T16:37:47Z"}, "message": "Lift out base item fixture for ide_completion tests", "tree": {"sha": "95dcaee62466b331bc38bce3dbe5a3213dcc45d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95dcaee62466b331bc38bce3dbe5a3213dcc45d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc4876d33dc9713507a40569c01c6c335515f376", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4876d33dc9713507a40569c01c6c335515f376", "html_url": "https://github.com/rust-lang/rust/commit/dc4876d33dc9713507a40569c01c6c335515f376", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc4876d33dc9713507a40569c01c6c335515f376/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9239943b84ec2bd687c4c80d2c3a0df4f8caf31c", "url": "https://api.github.com/repos/rust-lang/rust/commits/9239943b84ec2bd687c4c80d2c3a0df4f8caf31c", "html_url": "https://github.com/rust-lang/rust/commit/9239943b84ec2bd687c4c80d2c3a0df4f8caf31c"}], "stats": {"total": 141, "additions": 68, "deletions": 73}, "files": [{"sha": "12008cf59c11be2508bc71dcd8dcacaa59b4e86d", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -9,6 +9,7 @@ mod use_tree;\n mod items;\n mod pattern;\n mod type_pos;\n+mod where_clause;\n \n use std::mem;\n \n@@ -28,6 +29,21 @@ use test_utils::assert_eq_text;\n \n use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n+/// Lots of basic item definitions\n+const BASE_FIXTURE: &str = r#\"\n+enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n+use self::Enum::TupleV;\n+mod module {}\n+\n+trait Trait {}\n+static STATIC: Unit = Unit;\n+const CONST: Unit = Unit;\n+struct Record { field: u32 }\n+struct Tuple(u32);\n+struct Unit\n+macro_rules! makro {}\n+\"#;\n+\n pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     enable_postfix_completions: true,\n     enable_imports_on_the_fly: true,"}, {"sha": "ae71adf8e00af979281c40ac0d830dc556d0a468", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 20, "deletions": 34, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -1,27 +1,17 @@\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"#[rustc_builtin_macro]\n-pub macro Clone {}\n-enum Enum { Variant }\n-struct Struct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-trait Trait {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n #[test]\n fn in_mod_item_list() {\n     check(\n         r#\"mod tests { $0 }\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n@@ -40,16 +30,16 @@ fn in_mod_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-        \"##]],\n+            ma makro!(\u2026)        macro_rules! makro\n+        \"#]],\n     )\n }\n \n #[test]\n fn in_source_file_item_list() {\n     check(\n         r#\"$0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n@@ -68,10 +58,9 @@ fn in_source_file_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-        \"##]],\n+            md module\n+            ma makro!(\u2026)        macro_rules! makro\n+        \"#]],\n     )\n }\n \n@@ -106,7 +95,7 @@ fn in_item_list_after_attr() {\n fn in_qualified_path() {\n     check(\n         r#\"crate::$0\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n@@ -122,9 +111,8 @@ fn in_qualified_path() {\n             kw enum\n             kw struct\n             kw union\n-            md bar\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n-        \"##]],\n+            md module\n+        \"#]],\n     )\n }\n \n@@ -177,17 +165,16 @@ fn after_visibility_unsafe() {\n fn in_impl_assoc_item_list() {\n     check(\n         r#\"impl Struct { $0 }\"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             kw pub(crate)\n             kw pub\n             kw unsafe\n             kw fn\n             kw const\n             kw type\n-            md bar\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n-        \"##]],\n+            md module\n+            ma makro!(\u2026)  macro_rules! makro\n+        \"#]],\n     )\n }\n \n@@ -210,14 +197,13 @@ fn in_impl_assoc_item_list_after_attr() {\n fn in_trait_assoc_item_list() {\n     check(\n         r\"trait Foo { $0 }\",\n-        expect![[r##\"\n+        expect![[r#\"\n             kw unsafe\n             kw fn\n             kw const\n             kw type\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-        \"##]],\n+            md module\n+            ma makro!(\u2026) macro_rules! makro\n+        \"#]],\n     );\n }"}, {"sha": "5acfdcc85da0871c360b74066b89407d3a5cfed8", "filename": "crates/ide_completion/src/tests/items.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -4,20 +4,10 @@\n //! in [crate::completions::mod_].\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"#[rustc_builtin_macro]\n-pub macro Clone {}\n-enum Enum { Variant }\n-struct Struct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-trait Trait {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -27,15 +17,16 @@ fn target_type_or_trait_in_impl_block() {\n         r#\"\n impl Tra$0\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             tt Trait\n             en Enum\n-            st Struct\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n \n@@ -45,15 +36,16 @@ fn target_type_in_trait_impl_block() {\n         r#\"\n impl Trait for Str$0\n \"#,\n-        expect![[r##\"\n+        expect![[r#\"\n             tt Trait\n             en Enum\n-            st Struct\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            st Record\n+            st Tuple\n+            md module\n+            st Unit\n+            ma makro!(\u2026) macro_rules! makro\n             bt u32\n-        \"##]],\n+        \"#]],\n     )\n }\n "}, {"sha": "48c2fa9aa28a0f56e5677b9674da5976473b8e75", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -1,27 +1,15 @@\n //! Completions tests for pattern position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n fn check_with(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"\n-enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n-use self::Enum::TupleV;\n-mod module {}\n-\n-static STATIC: Unit = Unit;\n-const CONST: Unit = Unit;\n-struct Record { field: u32 }\n-struct Tuple(u32);\n-struct Unit\n-macro_rules! makro {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}\\n{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -123,9 +111,9 @@ fn foo() {\n \"#,\n         expect![[r#\"\n             kw mut\n+            en Enum\n             bn Record    Record { field$1 }$0\n             st Record\n-            en Enum\n             bn Tuple     Tuple($1)$0\n             st Tuple\n             md module"}, {"sha": "7ad679f10eab221f8476c0f1e2e15f0b2de89d1b", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -1,3 +1,4 @@\n+//! Completions tests for use trees.\n use expect_test::{expect, Expect};\n \n use crate::tests::completion_list;"}, {"sha": "0395cbf37a7103801ce142c70a2ab961902f3243", "filename": "crates/ide_completion/src/tests/where_clause.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc4876d33dc9713507a40569c01c6c335515f376/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fwhere_clause.rs?ref=dc4876d33dc9713507a40569c01c6c335515f376", "patch": "@@ -0,0 +1,12 @@\n+//! Completion tests for inside of where clauses.\n+//!\n+//! The parent of the where clause tends to bleed completions of itself into the where clause so this\n+//! has to be thoroughly tested.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual)\n+}"}]}