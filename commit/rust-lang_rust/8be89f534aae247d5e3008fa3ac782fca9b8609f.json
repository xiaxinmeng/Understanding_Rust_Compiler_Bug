{"sha": "8be89f534aae247d5e3008fa3ac782fca9b8609f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiZTg5ZjUzNGFhZTI0N2Q1ZTMwMDhmYTNhYzc4MmZjYTliODYwOWY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-27T14:31:43Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-05-27T14:31:43Z"}, "message": "Add new error codes", "tree": {"sha": "83a6a524bdd930c5a57cb38302845990e5763638", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83a6a524bdd930c5a57cb38302845990e5763638"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8be89f534aae247d5e3008fa3ac782fca9b8609f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8be89f534aae247d5e3008fa3ac782fca9b8609f", "html_url": "https://github.com/rust-lang/rust/commit/8be89f534aae247d5e3008fa3ac782fca9b8609f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8be89f534aae247d5e3008fa3ac782fca9b8609f/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7908f616745573a11ad7dfad245f12be0069da", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7908f616745573a11ad7dfad245f12be0069da", "html_url": "https://github.com/rust-lang/rust/commit/3e7908f616745573a11ad7dfad245f12be0069da"}], "stats": {"total": 112, "additions": 100, "deletions": 12}, "files": [{"sha": "6c076265db639b2c8abd2ff7959753244b2deee5", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=8be89f534aae247d5e3008fa3ac782fca9b8609f", "patch": "@@ -708,7 +708,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     fn bckerr_to_diag(&self, err: &BckError<'tcx>) -> DiagnosticBuilder<'a> {\n         let span = err.span.clone();\n \n-        let msg = match err.code {\n+        match err.code {\n             err_mutbl => {\n                 let descr = match err.cmt.note {\n                     mc::NoteClosureEnv(_) | mc::NoteUpvarRef(_) => {\n@@ -732,10 +732,11 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n                 match err.cause {\n                     MutabilityViolation => {\n-                        format!(\"cannot assign to {}\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0594, \"cannot assign to {}\", descr)\n                     }\n                     BorrowViolation(euv::ClosureCapture(_)) => {\n-                        format!(\"closure cannot assign to {}\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0595,\n+                                         \"closure cannot assign to {}\", descr)\n                     }\n                     BorrowViolation(euv::OverloadedOperator) |\n                     BorrowViolation(euv::AddrOf) |\n@@ -744,7 +745,8 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     BorrowViolation(euv::AutoUnsafe) |\n                     BorrowViolation(euv::ForLoop) |\n                     BorrowViolation(euv::MatchDiscriminant) => {\n-                        format!(\"cannot borrow {} as mutable\", descr)\n+                        struct_span_err!(self.tcx.sess, span, E0596,\n+                                         \"cannot borrow {} as mutable\", descr)\n                     }\n                     BorrowViolation(euv::ClosureInvocation) => {\n                         span_bug!(err.span,\n@@ -759,17 +761,16 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         format!(\"`{}`\", self.loan_path_to_string(&lp))\n                     }\n                 };\n-                format!(\"{} does not live long enough\", msg)\n+                struct_span_err!(self.tcx.sess, span, E0597, \"{} does not live long enough\", msg)\n             }\n             err_borrowed_pointer_too_short(..) => {\n                 let descr = self.cmt_to_path_or_string(&err.cmt);\n-                format!(\"lifetime of {} is too short to guarantee \\\n-                         its contents can be safely reborrowed\",\n-                        descr)\n+                struct_span_err!(self.tcx.sess, span, E0598,\n+                                 \"lifetime of {} is too short to guarantee \\\n+                                  its contents can be safely reborrowed\",\n+                                 descr)\n             }\n-        };\n-\n-        self.struct_span_err(span, &msg)\n+        }\n     }\n \n     pub fn report_aliasability_violation(&self,\n@@ -1176,7 +1177,7 @@ before rustc 1.16, this temporary lived longer - see issue #39283 \\\n                 if kind == ty::ClosureKind::Fn {\n                     db.span_help(self.tcx.hir.span(upvar_id.closure_expr_id),\n                                  \"consider changing this closure to take \\\n-                                 self by mutable reference\");\n+                                  self by mutable reference\");\n                 }\n             }\n             _ => {"}, {"sha": "2a38dcfd26e1a026aaca6cc1d1bbd97e40651528", "filename": "src/librustc_borrowck/diagnostics.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Flibrustc_borrowck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fdiagnostics.rs?ref=8be89f534aae247d5e3008fa3ac782fca9b8609f", "patch": "@@ -1114,9 +1114,63 @@ fn main() {\n ```\n \"##,\n \n+E0596: r##\"\n+This error occurs because you tried to mutably borrow a non-mutable variable.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0596\n+let x = 1;\n+let y = &mut x; // error: cannot borrow mutably\n+```\n+\n+In here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\n+fails. To fix this error, you need to make `x` mutable:\n+\n+```\n+let mut x = 1;\n+let y = &mut x; // ok!\n+```\n+\"##,\n+\n+E0597: r##\"\n+This error occurs because a borrow was made inside a variable which has a\n+greater lifetime than the borrowed one.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0597\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+let mut x = Foo { x: None };\n+let y = 0;\n+x.x = Some(&y); // error: `y` does not live long enough\n+```\n+\n+In here, `x` is created before `y` and therefore has a greater lifetime. Always\n+keep in mind that values in a scope are dropped in the opposite order they are\n+created. So to fix the previous example, just make the `y` lifetime greater than\n+the `x`'s one:\n+\n+```\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+let y = 0;\n+let mut x = Foo { x: None };\n+x.x = Some(&y);\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n //    E0385, // {} in an aliasable location\n     E0524, // two closures require unique access to `..` at the same time\n+    E0594, // cannot assign to {}\n+    E0595, // closure cannot assign to {}\n+    E0598, // lifetime of {} is too short to guarantee its contents can be...\n }"}, {"sha": "1f1af69d97768f2c9836cb07ded33f2481d09b4c", "filename": "src/test/compile-fail/E0596.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Ftest%2Fcompile-fail%2FE0596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Ftest%2Fcompile-fail%2FE0596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0596.rs?ref=8be89f534aae247d5e3008fa3ac782fca9b8609f", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 1;\n+    let y = &mut x; //~ ERROR E0596\n+}"}, {"sha": "00ef14a8e2af036c535eec68f05908e4ad9a2509", "filename": "src/test/compile-fail/E0597.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Ftest%2Fcompile-fail%2FE0597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8be89f534aae247d5e3008fa3ac782fca9b8609f/src%2Ftest%2Fcompile-fail%2FE0597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0597.rs?ref=8be89f534aae247d5e3008fa3ac782fca9b8609f", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo<'a> {\n+    x: Option<&'a u32>,\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: None };\n+    let y = 0;\n+    x.x = Some(&y);\n+} //~ `y` does not live long enough [E0597]"}]}