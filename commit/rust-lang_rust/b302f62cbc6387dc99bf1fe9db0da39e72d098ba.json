{"sha": "b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDJmNjJjYmM2Mzg3ZGM5OWJmMWZlOWRiMGRhMzllNzJkMDk4YmE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-11T18:45:43Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-18T10:42:44Z"}, "message": "resolve: Rename `WhereToResolve` into `Scope`\n\nAlso move it into the crate root, it's no longer used for macros only", "tree": {"sha": "62c8636db53e7783336c340590934c1fe76758f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62c8636db53e7783336c340590934c1fe76758f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "html_url": "https://github.com/rust-lang/rust/commit/b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0bcebd5c559c2c57b08444b270e739e4c0e74c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0bcebd5c559c2c57b08444b270e739e4c0e74c5", "html_url": "https://github.com/rust-lang/rust/commit/d0bcebd5c559c2c57b08444b270e739e4c0e74c5"}], "stats": {"total": 150, "additions": 79, "deletions": 71}, "files": [{"sha": "4554980071272d481ed81786517959aa5f80319b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "patch": "@@ -3,11 +3,11 @@\n //! Here we build the \"reduced graph\": the graph of the module tree without\n //! any imports resolved.\n \n-use crate::macros::{InvocationData, ParentScope, LegacyScope};\n+use crate::macros::{InvocationData, LegacyScope};\n use crate::resolve_imports::ImportDirective;\n use crate::resolve_imports::ImportDirectiveSubclass::{self, GlobImport, SingleImport};\n use crate::{Module, ModuleData, ModuleKind, NameBinding, NameBindingKind, Segment, ToNameBinding};\n-use crate::{ModuleOrUniformRoot, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n+use crate::{ModuleOrUniformRoot, ParentScope, PerNS, Resolver, ResolverArenas, ExternPreludeEntry};\n use crate::Namespace::{self, TypeNS, ValueNS, MacroNS};\n use crate::{resolve_error, resolve_struct_error, ResolutionError, Determinacy};\n "}, {"sha": "0159b8c5bb4bcb3948b172c318e8b5c83e0f6f57", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "patch": "@@ -16,11 +16,10 @@ use syntax::symbol::{Symbol, kw};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{BytePos, Span};\n \n-use crate::macros::ParentScope;\n use crate::resolve_imports::{ImportDirective, ImportDirectiveSubclass, ImportResolver};\n use crate::{is_self_type, is_self_value, path_names_to_string};\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n-use crate::{PathResult, PathSource, Resolver, RibKind, Segment};\n+use crate::{PathResult, PathSource, ParentScope, Resolver, RibKind, Segment};\n \n type Res = def::Res<ast::NodeId>;\n "}, {"sha": "8d95025d02b6621424550681fbfa784a9a62c0a5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "patch": "@@ -72,7 +72,7 @@ use smallvec::SmallVec;\n use diagnostics::{Suggestion, ImportSuggestion};\n use diagnostics::{find_span_of_binding_until_next_binding, extend_span_to_previous_binding};\n use resolve_imports::{ImportDirective, ImportDirectiveSubclass, NameResolution, ImportResolver};\n-use macros::{InvocationData, LegacyBinding, ParentScope};\n+use macros::{InvocationData, LegacyBinding, LegacyScope};\n \n type Res = def::Res<NodeId>;\n \n@@ -106,13 +106,47 @@ impl Determinacy {\n     }\n }\n \n+/// A specific scope in which a name can be looked up.\n+/// This enum is currently used only for early resolution (imports and macros),\n+/// but not for late resolution yet.\n+enum Scope<'a> {\n+    DeriveHelpers,\n+    MacroRules(LegacyScope<'a>),\n+    CrateRoot,\n+    Module(Module<'a>),\n+    MacroUsePrelude,\n+    BuiltinMacros,\n+    BuiltinAttrs,\n+    LegacyPluginHelpers,\n+    ExternPrelude,\n+    ToolPrelude,\n+    StdLibPrelude,\n+    BuiltinTypes,\n+}\n+\n+/// Names from different contexts may want to visit different subsets of all specific scopes\n+/// with different restrictions when looking up the resolution.\n+/// This enum is currently used only for early resolution (imports and macros),\n+/// but not for late resolution yet.\n enum ScopeSet {\n     Import(Namespace),\n     AbsolutePath(Namespace),\n     Macro(MacroKind),\n     Module,\n }\n \n+/// Everything you need to know about a name's location to resolve it.\n+/// Serves as a starting point for the scope visitor.\n+/// This struct is currently used only for early resolution (imports and macros),\n+/// but not for late resolution yet.\n+#[derive(Clone, Debug)]\n+pub struct ParentScope<'a> {\n+    module: Module<'a>,\n+    expansion: Mark,\n+    legacy: LegacyScope<'a>,\n+    derives: Vec<ast::Path>,\n+}\n+\n #[derive(Eq)]\n struct BindingError {\n     name: Name,"}, {"sha": "3d10859bf181ae4aad3b3e1d9f46a388bf56bf90", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 40, "deletions": 64, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "patch": "@@ -1,5 +1,5 @@\n use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc, Determinacy};\n-use crate::{CrateLint, Resolver, ResolutionError, ScopeSet, Weak};\n+use crate::{CrateLint, Resolver, ResolutionError, Scope, ScopeSet, ParentScope, Weak};\n use crate::{Module, ModuleKind, NameBinding, NameBindingKind, PathResult, Segment, ToNameBinding};\n use crate::{is_known_tool, resolve_error};\n use crate::ModuleOrUniformRoot;\n@@ -79,15 +79,6 @@ pub enum LegacyScope<'a> {\n     Invocation(&'a InvocationData<'a>),\n }\n \n-/// Everything you need to resolve a macro or import path.\n-#[derive(Clone, Debug)]\n-pub struct ParentScope<'a> {\n-    crate module: Module<'a>,\n-    crate expansion: Mark,\n-    crate legacy: LegacyScope<'a>,\n-    crate derives: Vec<ast::Path>,\n-}\n-\n // Macro namespace is separated into two sub-namespaces, one for bang macros and\n // one for attribute-like macros (attributes, derives).\n // We ignore resolutions from one sub-namespace when searching names in scope for another.\n@@ -474,21 +465,6 @@ impl<'a> Resolver<'a> {\n         //    but introduced by legacy plugins using `register_attribute`. Priority is somewhere\n         //    in prelude, not sure where exactly (creates ambiguities with any other prelude names).\n \n-        enum WhereToResolve<'a> {\n-            DeriveHelpers,\n-            MacroRules(LegacyScope<'a>),\n-            CrateRoot,\n-            Module(Module<'a>),\n-            MacroUsePrelude,\n-            BuiltinMacros,\n-            BuiltinAttrs,\n-            LegacyPluginHelpers,\n-            ExternPrelude,\n-            ToolPrelude,\n-            StdLibPrelude,\n-            BuiltinTypes,\n-        }\n-\n         bitflags::bitflags! {\n             struct Flags: u8 {\n                 const MACRO_RULES        = 1 << 0;\n@@ -530,15 +506,15 @@ impl<'a> Resolver<'a> {\n             ScopeSet::Module => (TypeNS, None, false, false),\n         };\n         let mut where_to_resolve = match ns {\n-            _ if is_absolute_path => WhereToResolve::CrateRoot,\n-            TypeNS | ValueNS => WhereToResolve::Module(parent_scope.module),\n-            MacroNS => WhereToResolve::DeriveHelpers,\n+            _ if is_absolute_path => Scope::CrateRoot,\n+            TypeNS | ValueNS => Scope::Module(parent_scope.module),\n+            MacroNS => Scope::DeriveHelpers,\n         };\n         let mut use_prelude = !parent_scope.module.no_implicit_prelude;\n         let mut determinacy = Determinacy::Determined;\n         loop {\n             let result = match where_to_resolve {\n-                WhereToResolve::DeriveHelpers => {\n+                Scope::DeriveHelpers => {\n                     let mut result = Err(Determinacy::Determined);\n                     for derive in &parent_scope.derives {\n                         let parent_scope = ParentScope { derives: Vec::new(), ..*parent_scope };\n@@ -558,14 +534,14 @@ impl<'a> Resolver<'a> {\n                     }\n                     result\n                 }\n-                WhereToResolve::MacroRules(legacy_scope) => match legacy_scope {\n+                Scope::MacroRules(legacy_scope) => match legacy_scope {\n                     LegacyScope::Binding(legacy_binding) if ident == legacy_binding.ident =>\n                         Ok((legacy_binding.binding, Flags::MACRO_RULES)),\n                     LegacyScope::Invocation(invoc) if invoc.output_legacy_scope.get().is_none() =>\n                         Err(Determinacy::Undetermined),\n                     _ => Err(Determinacy::Determined),\n                 }\n-                WhereToResolve::CrateRoot => {\n+                Scope::CrateRoot => {\n                     let root_ident = Ident::new(kw::PathRoot, orig_ident.span);\n                     let root_module = self.resolve_crate_root(root_ident);\n                     let binding = self.resolve_ident_in_module_ext(\n@@ -585,7 +561,7 @@ impl<'a> Resolver<'a> {\n                         Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                     }\n                 }\n-                WhereToResolve::Module(module) => {\n+                Scope::Module(module) => {\n                     let orig_current_module = mem::replace(&mut self.current_module, module);\n                     let binding = self.resolve_ident_in_module_unadjusted_ext(\n                         ModuleOrUniformRoot::Module(module),\n@@ -615,7 +591,7 @@ impl<'a> Resolver<'a> {\n                         Err((Determinacy::Determined, _)) => Err(Determinacy::Determined),\n                     }\n                 }\n-                WhereToResolve::MacroUsePrelude => {\n+                Scope::MacroUsePrelude => {\n                     if use_prelude || rust_2015 {\n                         match self.macro_use_prelude.get(&ident.name).cloned() {\n                             Some(binding) =>\n@@ -628,13 +604,13 @@ impl<'a> Resolver<'a> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n-                WhereToResolve::BuiltinMacros => {\n+                Scope::BuiltinMacros => {\n                     match self.builtin_macros.get(&ident.name).cloned() {\n                         Some(binding) => Ok((binding, Flags::PRELUDE)),\n                         None => Err(Determinacy::Determined),\n                     }\n                 }\n-                WhereToResolve::BuiltinAttrs => {\n+                Scope::BuiltinAttrs => {\n                     if is_builtin_attr_name(ident.name) {\n                         let binding = (Res::NonMacroAttr(NonMacroAttrKind::Builtin),\n                                        ty::Visibility::Public, DUMMY_SP, Mark::root())\n@@ -644,7 +620,7 @@ impl<'a> Resolver<'a> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n-                WhereToResolve::LegacyPluginHelpers => {\n+                Scope::LegacyPluginHelpers => {\n                     if (use_prelude || rust_2015) &&\n                        self.session.plugin_attributes.borrow().iter()\n                                                      .any(|(name, _)| ident.name == *name) {\n@@ -656,7 +632,7 @@ impl<'a> Resolver<'a> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n-                WhereToResolve::ExternPrelude => {\n+                Scope::ExternPrelude => {\n                     if use_prelude || is_absolute_path {\n                         match self.extern_prelude_get(ident, !record_used) {\n                             Some(binding) => Ok((binding, Flags::PRELUDE)),\n@@ -668,7 +644,7 @@ impl<'a> Resolver<'a> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n-                WhereToResolve::ToolPrelude => {\n+                Scope::ToolPrelude => {\n                     if use_prelude && is_known_tool(ident.name) {\n                         let binding = (Res::ToolMod, ty::Visibility::Public,\n                                        DUMMY_SP, Mark::root()).to_name_binding(self.arenas);\n@@ -677,7 +653,7 @@ impl<'a> Resolver<'a> {\n                         Err(Determinacy::Determined)\n                     }\n                 }\n-                WhereToResolve::StdLibPrelude => {\n+                Scope::StdLibPrelude => {\n                     let mut result = Err(Determinacy::Determined);\n                     if use_prelude {\n                         if let Some(prelude) = self.prelude {\n@@ -694,7 +670,7 @@ impl<'a> Resolver<'a> {\n                     }\n                     result\n                 }\n-                WhereToResolve::BuiltinTypes => {\n+                Scope::BuiltinTypes => {\n                     match self.primitive_type_table.primitive_types.get(&ident.name).cloned() {\n                         Some(prim_ty) => {\n                             let binding = (Res::PrimTy(prim_ty), ty::Visibility::Public,\n@@ -780,51 +756,51 @@ impl<'a> Resolver<'a> {\n             }\n \n             where_to_resolve = match where_to_resolve {\n-                WhereToResolve::DeriveHelpers =>\n-                    WhereToResolve::MacroRules(parent_scope.legacy),\n-                WhereToResolve::MacroRules(legacy_scope) => match legacy_scope {\n-                    LegacyScope::Binding(binding) => WhereToResolve::MacroRules(\n+                Scope::DeriveHelpers =>\n+                    Scope::MacroRules(parent_scope.legacy),\n+                Scope::MacroRules(legacy_scope) => match legacy_scope {\n+                    LegacyScope::Binding(binding) => Scope::MacroRules(\n                         binding.parent_legacy_scope\n                     ),\n-                    LegacyScope::Invocation(invoc) => WhereToResolve::MacroRules(\n+                    LegacyScope::Invocation(invoc) => Scope::MacroRules(\n                         invoc.output_legacy_scope.get().unwrap_or(invoc.parent_legacy_scope)\n                     ),\n-                    LegacyScope::Empty => WhereToResolve::Module(parent_scope.module),\n+                    LegacyScope::Empty => Scope::Module(parent_scope.module),\n                 }\n-                WhereToResolve::CrateRoot => match ns {\n+                Scope::CrateRoot => match ns {\n                     TypeNS => {\n                         ident.span.adjust(Mark::root());\n-                        WhereToResolve::ExternPrelude\n+                        Scope::ExternPrelude\n                     }\n                     ValueNS | MacroNS => break,\n                 }\n-                WhereToResolve::Module(module) => {\n+                Scope::Module(module) => {\n                     match self.hygienic_lexical_parent(module, &mut ident.span) {\n-                        Some(parent_module) => WhereToResolve::Module(parent_module),\n+                        Some(parent_module) => Scope::Module(parent_module),\n                         None => {\n                             ident.span.adjust(Mark::root());\n                             use_prelude = !module.no_implicit_prelude;\n                             match ns {\n-                                TypeNS => WhereToResolve::ExternPrelude,\n-                                ValueNS => WhereToResolve::StdLibPrelude,\n-                                MacroNS => WhereToResolve::MacroUsePrelude,\n+                                TypeNS => Scope::ExternPrelude,\n+                                ValueNS => Scope::StdLibPrelude,\n+                                MacroNS => Scope::MacroUsePrelude,\n                             }\n                         }\n                     }\n                 }\n-                WhereToResolve::MacroUsePrelude => WhereToResolve::StdLibPrelude,\n-                WhereToResolve::BuiltinMacros => WhereToResolve::BuiltinAttrs,\n-                WhereToResolve::BuiltinAttrs => WhereToResolve::LegacyPluginHelpers,\n-                WhereToResolve::LegacyPluginHelpers => break, // nowhere else to search\n-                WhereToResolve::ExternPrelude if is_absolute_path => break,\n-                WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n-                WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n-                WhereToResolve::StdLibPrelude => match ns {\n-                    TypeNS => WhereToResolve::BuiltinTypes,\n+                Scope::MacroUsePrelude => Scope::StdLibPrelude,\n+                Scope::BuiltinMacros => Scope::BuiltinAttrs,\n+                Scope::BuiltinAttrs => Scope::LegacyPluginHelpers,\n+                Scope::LegacyPluginHelpers => break, // nowhere else to search\n+                Scope::ExternPrelude if is_absolute_path => break,\n+                Scope::ExternPrelude => Scope::ToolPrelude,\n+                Scope::ToolPrelude => Scope::StdLibPrelude,\n+                Scope::StdLibPrelude => match ns {\n+                    TypeNS => Scope::BuiltinTypes,\n                     ValueNS => break, // nowhere else to search\n-                    MacroNS => WhereToResolve::BuiltinMacros,\n+                    MacroNS => Scope::BuiltinMacros,\n                 }\n-                WhereToResolve::BuiltinTypes => break, // nowhere else to search\n+                Scope::BuiltinTypes => break, // nowhere else to search\n             };\n \n             continue;"}, {"sha": "14622fd9f91fa545d5f010374a98562024f2baba", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b302f62cbc6387dc99bf1fe9db0da39e72d098ba/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=b302f62cbc6387dc99bf1fe9db0da39e72d098ba", "patch": "@@ -1,7 +1,7 @@\n use ImportDirectiveSubclass::*;\n \n use crate::{AmbiguityError, AmbiguityKind, AmbiguityErrorMisc};\n-use crate::{CrateLint, Module, ModuleOrUniformRoot, PerNS, ScopeSet, Weak};\n+use crate::{CrateLint, Module, ModuleOrUniformRoot, PerNS, ScopeSet, ParentScope, Weak};\n use crate::Determinacy::{self, *};\n use crate::Namespace::{self, TypeNS, MacroNS};\n use crate::{NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n@@ -10,7 +10,6 @@ use crate::{names_to_string, module_to_string};\n use crate::{resolve_error, ResolutionError};\n use crate::ModuleKind;\n use crate::diagnostics::Suggestion;\n-use crate::macros::ParentScope;\n \n use errors::Applicability;\n "}]}