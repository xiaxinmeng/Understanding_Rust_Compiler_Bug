{"sha": "e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZmI4NGU5NTFlM2M2MDJkMmRiYmZlYmJkNGVlMjc1YWM0MTQ4OTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-19T11:41:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-19T11:41:11Z"}, "message": "Auto merge of #45232 - zackmdavis:moar_lint_suggestions, r=estebank\n\ncode suggestions for non-shorthand field pattern, no-mangle lints\n\ncontinuing in the spirit of #44942\n\n![moar_lint_suggestions](https://user-images.githubusercontent.com/1076988/31485011-3b20cc80-aee7-11e7-993d-81267ab77732.png)\n\nr? @estebank", "tree": {"sha": "ff2aeeef0e941873ae6764acf025f2312dd61257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2aeeef0e941873ae6764acf025f2312dd61257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "html_url": "https://github.com/rust-lang/rust/commit/e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7960878ba77124505aabe7dc99d0a898354c326", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7960878ba77124505aabe7dc99d0a898354c326", "html_url": "https://github.com/rust-lang/rust/commit/b7960878ba77124505aabe7dc99d0a898354c326"}, {"sha": "8e6ed1203b777747bb435c7eb11272ccf252cd52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e6ed1203b777747bb435c7eb11272ccf252cd52", "html_url": "https://github.com/rust-lang/rust/commit/8e6ed1203b777747bb435c7eb11272ccf252cd52"}], "stats": {"total": 177, "additions": 141, "deletions": 36}, "files": [{"sha": "bc2a1f08441d1a57582e645ce8e96ac2613e171c", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 44, "deletions": 21, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -44,7 +44,7 @@ use std::collections::HashSet;\n use syntax::ast;\n use syntax::attr;\n use syntax::feature_gate::{AttributeGate, AttributeType, Stability, deprecated_attributes};\n-use syntax_pos::{Span, SyntaxContext};\n+use syntax_pos::{BytePos, Span, SyntaxContext};\n use syntax::symbol::keywords;\n \n use rustc::hir::{self, PatKind};\n@@ -153,7 +153,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxPointers {\n declare_lint! {\n     NON_SHORTHAND_FIELD_PATTERNS,\n     Warn,\n-    \"using `Struct { x: x }` instead of `Struct { x }`\"\n+    \"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"\n }\n \n #[derive(Copy, Clone)]\n@@ -174,11 +174,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonShorthandFieldPatterns {\n                 }\n                 if let PatKind::Binding(_, _, ident, None) = fieldpat.node.pat.node {\n                     if ident.node == fieldpat.node.name {\n-                        cx.span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n+                        let mut err = cx.struct_span_lint(NON_SHORTHAND_FIELD_PATTERNS,\n                                      fieldpat.span,\n-                                     &format!(\"the `{}:` in this pattern is redundant and can \\\n-                                              be removed\",\n-                                              ident.node))\n+                                     &format!(\"the `{}:` in this pattern is redundant\",\n+                                              ident.node));\n+                        let subspan = cx.tcx.sess.codemap().span_through_char(fieldpat.span, ':');\n+                        err.span_suggestion_short(subspan,\n+                                                  \"remove this\",\n+                                                  format!(\"{}\", ident.node));\n+                        err.emit();\n                     }\n                 }\n             }\n@@ -894,7 +898,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnconditionalRecursion {\n             let mut db = cx.struct_span_lint(UNCONDITIONAL_RECURSION,\n                                              sp,\n                                              \"function cannot return without recurring\");\n-            // FIXME #19668: these could be span_lint_note's instead of this manual guard.\n             // offer some help to the programmer.\n             for call in &self_call_spans {\n                 db.span_note(*call, \"recursive call site\");\n@@ -1130,35 +1133,55 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemFn(.., ref generics, _) => {\n-                if attr::contains_name(&it.attrs, \"no_mangle\") &&\n-                   !attr::contains_name(&it.attrs, \"linkage\") {\n+                if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, \"no_mangle\") {\n+                    if attr::contains_name(&it.attrs, \"linkage\") {\n+                        return;\n+                    }\n                     if !cx.access_levels.is_reachable(it.id) {\n-                        let msg = format!(\"function {} is marked #[no_mangle], but not exported\",\n-                                          it.name);\n-                        cx.span_lint(PRIVATE_NO_MANGLE_FNS, it.span, &msg);\n+                        let msg = \"function is marked #[no_mangle], but not exported\";\n+                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n+                        let insertion_span = it.span.with_hi(it.span.lo());\n+                        err.span_suggestion(insertion_span,\n+                                            \"try making it public\",\n+                                            \"pub \".to_owned());\n+                        err.emit();\n                     }\n                     if generics.is_type_parameterized() {\n-                        cx.span_lint(NO_MANGLE_GENERIC_ITEMS,\n-                                     it.span,\n-                                     \"functions generic over types must be mangled\");\n+                        let mut err = cx.struct_span_lint(NO_MANGLE_GENERIC_ITEMS,\n+                                                          it.span,\n+                                                          \"functions generic over \\\n+                                                           types must be mangled\");\n+                        err.span_suggestion_short(no_mangle_attr.span,\n+                                                  \"remove this attribute\",\n+                                                  \"\".to_owned());\n+                        err.emit();\n                     }\n                 }\n             }\n             hir::ItemStatic(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") &&\n                    !cx.access_levels.is_reachable(it.id) {\n-                    let msg = format!(\"static {} is marked #[no_mangle], but not exported\",\n-                                      it.name);\n-                    cx.span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, &msg);\n+                       let msg = \"static is marked #[no_mangle], but not exported\";\n+                       let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n+                       let insertion_span = it.span.with_hi(it.span.lo());\n+                       err.span_suggestion(insertion_span,\n+                                           \"try making it public\",\n+                                           \"pub \".to_owned());\n+                       err.emit();\n                 }\n             }\n             hir::ItemConst(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n                     // Const items do not refer to a particular location in memory, and therefore\n                     // don't have anything to attach a symbol to\n-                    let msg = \"const items should never be #[no_mangle], consider instead using \\\n-                               `pub static`\";\n-                    cx.span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n+                    let msg = \"const items should never be #[no_mangle]\";\n+                    let mut err = cx.struct_span_lint(NO_MANGLE_CONST_ITEMS, it.span, msg);\n+                    // `const` is 5 chars\n+                    let const_span = it.span.with_hi(BytePos(it.span.lo().0 + 5));\n+                    err.span_suggestion(const_span,\n+                                        \"try a static value\",\n+                                        \"pub static\".to_owned());\n+                    err.emit();\n                 }\n             }\n             _ => {}"}, {"sha": "dd46903bb88d743a38b23ea1e3e90d5d06b2f123", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -471,6 +471,17 @@ impl CodeMap {\n         }\n     }\n \n+    /// Given a `Span`, try to get a shorter span ending just after the first\n+    /// occurrence of `char` `c`.\n+    pub fn span_through_char(&self, sp: Span, c: char) -> Span {\n+        if let Ok(snippet) = self.span_to_snippet(sp) {\n+            if let Some(offset) = snippet.find(c) {\n+                return sp.with_hi(BytePos(sp.lo().0 + (offset + c.len_utf8()) as u32));\n+            }\n+        }\n+        sp\n+    }\n+\n     pub fn def_span(&self, sp: Span) -> Span {\n         self.span_until_char(sp, '{')\n     }"}, {"sha": "ab2fe02bb147667a75677d1846e049b5d29b9f8f", "filename": "src/test/compile-fail/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -424,7 +424,7 @@ mod no_mangle {\n     mod inner { #![no_mangle=\"3500\"] }\n \n     #[no_mangle = \"3500\"] fn f() { }\n-    //~^ WARN function f is marked #[no_mangle], but not exported\n+    //~^ WARN function is marked #[no_mangle], but not exported\n \n     #[no_mangle = \"3500\"] struct S;\n "}, {"sha": "cd64dfa7a47dd291292e86fda10c9220c97dc4d3", "filename": "src/test/compile-fail/lint-unexported-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unexported-no-mangle.rs?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -10,9 +10,8 @@\n \n // compile-flags:-F private_no_mangle_fns -F no_mangle_const_items -F private_no_mangle_statics\n \n-// FIXME(#19495) no_mangle'ing main ICE's.\n #[no_mangle]\n-fn foo() { //~ ERROR function foo is marked #[no_mangle], but not exported\n+fn foo() { //~ ERROR function is marked #[no_mangle], but not exported\n }\n \n #[allow(dead_code)]\n@@ -31,7 +30,7 @@ pub static BAR: u64 = 1;\n \n #[allow(dead_code)]\n #[no_mangle]\n-static PRIVATE_BAR: u64 = 1; //~ ERROR static PRIVATE_BAR is marked #[no_mangle], but not exported\n+static PRIVATE_BAR: u64 = 1; //~ ERROR static is marked #[no_mangle], but not exported\n \n \n fn main() {"}, {"sha": "e078056ab5e0abf15b3e4d259a5d9b6509bf6e63", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -11,10 +11,27 @@\n #![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n #![feature(no_debug)]\n \n+#[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n+#[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n+\n+#[no_mangle] // should suggest removal (generics can't be no-mangle)\n+pub fn defiant<T>(_t: T) {}\n+\n+#[no_mangle]\n+fn rio_grande() {} // should suggest `pub`\n+\n+struct Equinox {\n+    warp_factor: f32,\n+}\n+\n #[no_debug] // should suggest removal of deprecated attribute\n fn main() {\n     while true { // should suggest `loop`\n         let mut a = (1); // should suggest no `mut`, no parens\n+        let d = Equinox { warp_factor: 9.975 };\n+        match d {\n+            Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+        }\n         println!(\"{}\", a);\n     }\n }"}, {"sha": "7a498b56413a9a65929120ad5e1bf72bdc5547c2", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 66, "deletions": 11, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e3fb84e951e3c602d2dbbfebbd4ee275ac414893/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=e3fb84e951e3c602d2dbbfebbd4ee275ac414893", "patch": "@@ -1,23 +1,23 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:17:21\n+  --> $DIR/suggestions.rs:30:21\n    |\n-17 |         let mut a = (1); // should suggest no `mut`, no parens\n+30 |         let mut a = (1); // should suggest no `mut`, no parens\n    |                     ^^^ help: remove these parentheses\n    |\n    = note: #[warn(unused_parens)] on by default\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:14:1\n+  --> $DIR/suggestions.rs:27:1\n    |\n-14 | #[no_debug] // should suggest removal of deprecated attribute\n+27 | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:17:13\n+  --> $DIR/suggestions.rs:30:13\n    |\n-17 |         let mut a = (1); // should suggest no `mut`, no parens\n+30 |         let mut a = (1); // should suggest no `mut`, no parens\n    |             ---^^\n    |             |\n    |             help: remove this `mut`\n@@ -28,18 +28,73 @@ note: lint level defined here\n 11 | #![warn(unused_mut)] // UI tests pass `-A unused`\u2014see Issue #43896\n    |         ^^^^^^^^^^\n \n+warning: static is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:14:14\n+   |\n+14 | #[no_mangle] static SHENZHOU: usize = 1; // should suggest `pub`\n+   |              -^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              help: try making it public: `pub `\n+   |\n+   = note: #[warn(private_no_mangle_statics)] on by default\n+\n+error: const items should never be #[no_mangle]\n+  --> $DIR/suggestions.rs:15:14\n+   |\n+15 | #[no_mangle] const DISCOVERY: usize = 1; // should suggest `pub static` rather than `const`\n+   |              -----^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              help: try a static value: `pub static`\n+   |\n+   = note: #[deny(no_mangle_const_items)] on by default\n+\n+warning: functions generic over types must be mangled\n+  --> $DIR/suggestions.rs:18:1\n+   |\n+17 | #[no_mangle] // should suggest removal (generics can't be no-mangle)\n+   | ------------ help: remove this attribute\n+18 | pub fn defiant<T>(_t: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(no_mangle_generic_items)] on by default\n+\n+warning: function is marked #[no_mangle], but not exported\n+  --> $DIR/suggestions.rs:21:1\n+   |\n+21 | fn rio_grande() {} // should suggest `pub`\n+   | -^^^^^^^^^^^^^^^^^\n+   | |\n+   | help: try making it public: `pub `\n+   |\n+   = note: #[warn(private_no_mangle_fns)] on by default\n+\n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:16:5\n+  --> $DIR/suggestions.rs:29:5\n    |\n-16 |       while true { // should suggest `loop`\n+29 |       while true { // should suggest `loop`\n    |       ^---------\n    |       |\n    |  _____help: use `loop`\n    | |\n-17 | |         let mut a = (1); // should suggest no `mut`, no parens\n-18 | |         println!(\"{}\", a);\n-19 | |     }\n+30 | |         let mut a = (1); // should suggest no `mut`, no parens\n+31 | |         let d = Equinox { warp_factor: 9.975 };\n+32 | |         match d {\n+...  |\n+35 | |         println!(\"{}\", a);\n+36 | |     }\n    | |_____^\n    |\n    = note: #[warn(while_true)] on by default\n \n+warning: the `warp_factor:` in this pattern is redundant\n+  --> $DIR/suggestions.rs:33:23\n+   |\n+33 |             Equinox { warp_factor: warp_factor } => {} // should suggest shorthand\n+   |                       ------------^^^^^^^^^^^^\n+   |                       |\n+   |                       help: remove this\n+   |\n+   = note: #[warn(non_shorthand_field_patterns)] on by default\n+\n+error: aborting due to previous error\n+"}]}