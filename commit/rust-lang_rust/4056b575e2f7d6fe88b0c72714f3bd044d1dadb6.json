{"sha": "4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNTZiNTc1ZTJmN2Q2ZmU4OGIwYzcyNzE0ZjNiZDA0NGQxZGFkYjY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-30T16:47:36Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-01-30T16:49:04Z"}, "message": "Add suggestions to deprecation lints", "tree": {"sha": "c9b56185d36cd284d5dfd6393d74582eea50900e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9b56185d36cd284d5dfd6393d74582eea50900e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "html_url": "https://github.com/rust-lang/rust/commit/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a9b5c623309dd707ee8188b09e55996c6beb9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a9b5c623309dd707ee8188b09e55996c6beb9b", "html_url": "https://github.com/rust-lang/rust/commit/e4a9b5c623309dd707ee8188b09e55996c6beb9b"}], "stats": {"total": 137, "additions": 111, "deletions": 26}, "files": [{"sha": "7180a813a3e47d0cd62de86b1096dc8f06d43e3f", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -124,6 +124,7 @@\n #![feature(abi_unadjusted)]\n #![feature(adx_target_feature)]\n #![feature(maybe_uninit)]\n+#![feature(unrestricted_attribute_tokens)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "8c5dde7dc271bc362385500ed9ac595a6ba514c0", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -290,7 +290,15 @@ pub enum Ordering {\n /// [`AtomicBool`]: struct.AtomicBool.html\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_deprecated(since = \"1.34.0\", reason = \"the `new` function is now preferred\")]\n+#[cfg_attr(not(stage0), rustc_deprecated(\n+    since = \"1.34.0\",\n+    reason = \"the `new` function is now preferred\",\n+    suggestion = \"AtomicBool::new(false)\",\n+))]\n+#[cfg_attr(stage0, rustc_deprecated(\n+    since = \"1.34.0\",\n+    reason = \"the `new` function is now preferred\",\n+))]\n pub const ATOMIC_BOOL_INIT: AtomicBool = AtomicBool::new(false);\n \n #[cfg(target_has_atomic = \"8\")]\n@@ -1127,6 +1135,7 @@ macro_rules! atomic_int {\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n      $align:expr,\n+     $atomic_new:expr,\n      $int_type:ident $atomic_type:ident $atomic_init:ident) => {\n         /// An integer type which can be safely shared between threads.\n         ///\n@@ -1148,7 +1157,15 @@ macro_rules! atomic_int {\n \n         /// An atomic integer initialized to `0`.\n         #[$stable]\n-        #[rustc_deprecated(since = \"1.34.0\", reason = \"the `new` function is now preferred\")]\n+        #[cfg_attr(stage0, rustc_deprecated(\n+            since = \"1.34.0\",\n+            reason = \"the `new` function is now preferred\",\n+        ))]\n+        #[cfg_attr(not(stage0), rustc_deprecated(\n+            since = \"1.34.0\",\n+            reason = \"the `new` function is now preferred\",\n+            suggestion = $atomic_new,\n+        ))]\n         pub const $atomic_init: $atomic_type = $atomic_type::new(0);\n \n         #[$stable]\n@@ -1878,6 +1895,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     1,\n+    \"AtomicI8::new(0)\",\n     i8 AtomicI8 ATOMIC_I8_INIT\n }\n #[cfg(target_has_atomic = \"8\")]\n@@ -1892,6 +1910,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     1,\n+    \"AtomicU8::new(0)\",\n     u8 AtomicU8 ATOMIC_U8_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1906,6 +1925,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     2,\n+    \"AtomicI16::new(0)\",\n     i16 AtomicI16 ATOMIC_I16_INIT\n }\n #[cfg(target_has_atomic = \"16\")]\n@@ -1920,6 +1940,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     2,\n+    \"AtomicU16::new(0)\",\n     u16 AtomicU16 ATOMIC_U16_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1934,6 +1955,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     4,\n+    \"AtomicI32::new(0)\",\n     i32 AtomicI32 ATOMIC_I32_INIT\n }\n #[cfg(target_has_atomic = \"32\")]\n@@ -1948,6 +1970,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     4,\n+    \"AtomicU32::new(0)\",\n     u32 AtomicU32 ATOMIC_U32_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1962,6 +1985,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     8,\n+    \"AtomicI64::new(0)\",\n     i64 AtomicI64 ATOMIC_I64_INIT\n }\n #[cfg(target_has_atomic = \"64\")]\n@@ -1976,6 +2000,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     8,\n+    \"AtomicU64::new(0)\",\n     u64 AtomicU64 ATOMIC_U64_INIT\n }\n #[cfg(target_has_atomic = \"128\")]\n@@ -1990,6 +2015,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     16,\n+    \"AtomicI128::new(0)\",\n     i128 AtomicI128 ATOMIC_I128_INIT\n }\n #[cfg(target_has_atomic = \"128\")]\n@@ -2004,6 +2030,7 @@ atomic_int! {\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     16,\n+    \"AtomicU128::new(0)\",\n     u128 AtomicU128 ATOMIC_U128_INIT\n }\n #[cfg(target_pointer_width = \"16\")]\n@@ -2030,6 +2057,7 @@ atomic_int!{\n     \"\",\n     atomic_min, atomic_max,\n     ptr_width!(),\n+    \"AtomicIsize::new(0)\",\n     isize AtomicIsize ATOMIC_ISIZE_INIT\n }\n #[cfg(target_has_atomic = \"ptr\")]\n@@ -2044,6 +2072,7 @@ atomic_int!{\n     \"\",\n     atomic_umin, atomic_umax,\n     ptr_width!(),\n+    \"AtomicUsize::new(0)\",\n     usize AtomicUsize ATOMIC_USIZE_INIT\n }\n "}, {"sha": "e10359636f749ad52556d1dd90c83814fb384689", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -147,7 +147,7 @@ for ::syntax::attr::StabilityLevel {\n     }\n }\n \n-impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason });\n+impl_stable_hash_for!(struct ::syntax::attr::RustcDeprecation { since, reason, suggestion });\n \n \n impl_stable_hash_for!(enum ::syntax::attr::IntType {"}, {"sha": "a9193e06d89e9c7f869ce807f47a824a2fdbba72", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 40, "deletions": 22, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -16,6 +16,7 @@ use syntax::symbol::Symbol;\n use syntax_pos::{Span, MultiSpan};\n use syntax::ast;\n use syntax::ast::{NodeId, Attribute};\n+use syntax::errors::Applicability;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::attr::{self, Stability, Deprecation};\n use ty::{self, TyCtxt};\n@@ -569,6 +570,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let lint_deprecated = |def_id: DefId,\n                                id: NodeId,\n                                note: Option<Symbol>,\n+                               suggestion: Option<Symbol>,\n                                message: &str,\n                                lint: &'static Lint| {\n             let msg = if let Some(note) = note {\n@@ -577,7 +579,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 format!(\"{}\", message)\n             };\n \n-            self.lint_node(lint, id, span, &msg);\n+            let mut diag = self.struct_span_lint_node(lint, id, span, &msg);\n+            if let Some(suggestion) = suggestion {\n+                if let hir::Node::Expr(_) = self.hir().get(id) {\n+                    diag.span_suggestion(\n+                        span,\n+                        &msg,\n+                        suggestion.to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+            }\n+            diag.emit();\n             if id == ast::DUMMY_NODE_ID {\n                 span_bug!(span, \"emitted a {} lint with dummy node id: {:?}\", lint.name, def_id);\n             }\n@@ -613,6 +626,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     lint_deprecated(def_id,\n                                     id,\n                                     depr_entry.attr.note,\n+                                    None,\n                                     &message,\n                                     lint::builtin::DEPRECATED_IN_FUTURE);\n                 } else if !skip {\n@@ -621,6 +635,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                     lint_deprecated(def_id,\n                                     id,\n                                     depr_entry.attr.note,\n+                                    None,\n                                     &message,\n                                     lint::builtin::DEPRECATED);\n                 }\n@@ -639,27 +654,30 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         debug!(\"stability: \\\n                 inspecting def_id={:?} span={:?} of stability={:?}\", def_id, span, stability);\n \n-        if let Some(&Stability{rustc_depr: Some(attr::RustcDeprecation { reason, since }), ..})\n-                = stability {\n-            if let Some(id) = id {\n-                let path = self.item_path_str(def_id);\n-                if deprecation_in_effect(&since.as_str()) {\n-                    let message = format!(\"use of deprecated item '{}'\", path);\n-                    lint_deprecated(def_id,\n-                                    id,\n-                                    Some(reason),\n-                                    &message,\n-                                    lint::builtin::DEPRECATED);\n-                } else {\n-                    let message = format!(\"use of item '{}' \\\n-                                           that will be deprecated in future version {}\",\n-                                          path,\n-                                          since);\n-                    lint_deprecated(def_id,\n-                                    id,\n-                                    Some(reason),\n-                                    &message,\n-                                    lint::builtin::DEPRECATED_IN_FUTURE);\n+        if let Some(id) = id {\n+            if let Some(stability) = stability {\n+                if let Some(depr) = &stability.rustc_depr {\n+                    let path = self.item_path_str(def_id);\n+                    if deprecation_in_effect(&depr.since.as_str()) {\n+                        let message = format!(\"use of deprecated item '{}'\", path);\n+                        lint_deprecated(def_id,\n+                                        id,\n+                                        Some(depr.reason),\n+                                        depr.suggestion,\n+                                        &message,\n+                                        lint::builtin::DEPRECATED);\n+                    } else {\n+                        let message = format!(\"use of item '{}' \\\n+                                                that will be deprecated in future version {}\",\n+                                                path,\n+                                                depr.since);\n+                        lint_deprecated(def_id,\n+                                        id,\n+                                        Some(depr.reason),\n+                                        depr.suggestion,\n+                                        &message,\n+                                        lint::builtin::DEPRECATED_IN_FUTURE);\n+                    }\n                 }\n             }\n         }"}, {"sha": "7fe6f4a231689ffdef3eabfae53396a29b629bc9", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -158,6 +158,8 @@ impl StabilityLevel {\n pub struct RustcDeprecation {\n     pub since: Symbol,\n     pub reason: Symbol,\n+    /// A text snippet used to completely replace any use of the deprecated item in an expression.\n+    pub suggestion: Option<Symbol>,\n }\n \n /// Check if `attrs` contains an attribute like `#![feature(feature_name)]`.\n@@ -274,13 +276,14 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                         continue 'outer\n                     }\n \n-                    get_meta!(since, reason);\n+                    get_meta!(since, reason, suggestion);\n \n                     match (since, reason) {\n                         (Some(since), Some(reason)) => {\n                             rustc_depr = Some(RustcDeprecation {\n                                 since,\n                                 reason,\n+                                suggestion,\n                             })\n                         }\n                         (None, _) => {"}, {"sha": "dee1d979cff1d5cf63785c35c37dbb3653c44864", "filename": "src/test/ui/deprecation/atomic_initializers.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.fixed?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+// compile-pass\n+\n+#[allow(deprecated, unused_imports)]\n+use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};\n+\n+#[allow(dead_code)]\n+static FOO: AtomicIsize = AtomicIsize::new(0);\n+//~^ WARN use of deprecated item\n+\n+fn main() {}"}, {"sha": "b9e25e817bce463d2a2ab88a0c7bf64a362a6169", "filename": "src/test/ui/deprecation/atomic_initializers.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.rs?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+// compile-pass\n+\n+#[allow(deprecated, unused_imports)]\n+use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};\n+\n+#[allow(dead_code)]\n+static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n+//~^ WARN use of deprecated item\n+\n+fn main() {}"}, {"sha": "77c370814f7afa7c77e7d00d9f94c598c3f7509c", "filename": "src/test/ui/deprecation/atomic_initializers.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4056b575e2f7d6fe88b0c72714f3bd044d1dadb6/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fatomic_initializers.stderr?ref=4056b575e2f7d6fe88b0c72714f3bd044d1dadb6", "patch": "@@ -0,0 +1,12 @@\n+warning: use of deprecated item 'std::sync::atomic::ATOMIC_ISIZE_INIT': the `new` function is now preferred\n+  --> $DIR/atomic_initializers.rs:8:27\n+   |\n+LL | static FOO: AtomicIsize = ATOMIC_ISIZE_INIT;\n+   |                           ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(deprecated)] on by default\n+help: use of deprecated item 'std::sync::atomic::ATOMIC_ISIZE_INIT': the `new` function is now preferred\n+   |\n+LL | static FOO: AtomicIsize = AtomicIsize::new(0);\n+   |                           ^^^^^^^^^^^^^^^^^^^\n+"}]}