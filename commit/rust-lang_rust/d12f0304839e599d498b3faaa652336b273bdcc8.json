{"sha": "d12f0304839e599d498b3faaa652336b273bdcc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxMmYwMzA0ODM5ZTU5OWQ0OThiM2ZhYWE2NTIzMzZiMjczYmRjYzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T21:23:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-14T21:23:40Z"}, "message": "Auto merge of #70452 - eddyb:repeat-expr-correct-generics-parent, r=nikomatsakis\n\ntypeck: always expose repeat count `AnonConst`s' parent in `generics_of`.\n\nThis should reduce some of the confusion around #43408, although, if you look at the changed test outputs (for the last commit), they all hit #68436, so nothing new will start compiling.\n\nWe can let counts of \"repeat expressions\" (`N` in `[x; N]`) always have the correct generics parenting, because they're always in a body, so nothing in the `where` clauses or `impl` trait/type of the parent can use it, and therefore no query cycles can occur.\n\n<hr/>\n\nOther potential candidates we might want to apply the same approach to, are:\n* ~~(easy) `enum` discriminants (see also #70453)~~ opened #70825\n* (trickier) array *type* (not *expression*) lengths nested in:\n  * bodies\n  * types of (associated or not) `const`/`static`\n  * RHS of `type` aliases and associated `type`s\n  * `fn` signatures\n\nWe should've done so from the start, the only reason we haven't is because I was squeamish about blacklisting some of the cases, but if we whitelist instead we should be fine.\nAlso, lazy normalization is taking forever :disappointed:.\n\n<hr/>\n\nThere's also 5 other commits here:\n* \"typeck: track any errors injected during writeback and taint tables appropriately.\" - fixes #66706, as the next commit would otherwise trigger an ICE again\n* \"typeck: workaround WF hole in `to_const`.\" - its purpose is to emulate most of #70107's direct effect, at least in the case of repeat expressions, where the count always goes through `to_const`\n  * this is the reason no new code can really compile, as the WF checks require #68436 to bypass\n  * however, this has more test changes than I hoped, so it should be reviewed separately, and maybe even landed separately (as #70107 might take a while, as it's blocked on a few of my PRs)\n* \"ty: erase lifetimes early in `ty::Const::eval`.\" - first attempt at fixing #70773\n  * still useful, I believe the new approach is less likely to cause issues long-term\n  * I could take this out or move it into another PR if desired or someone else could take over (cc @skinny121)\n* \"traits/query/normalize: add some `debug!` logging for the result.\" - debugging aid for #70773\n* \"borrow_check/type_check: normalize `Aggregate` and `Call` operands.\" - actually fixes #70773\n\nr? @nikomatsakis cc @pnkfelix @varkor @yodaldevoid @oli-obk @estebank", "tree": {"sha": "427b504d391c002d04259643ba4695de2e84131a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427b504d391c002d04259643ba4695de2e84131a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d12f0304839e599d498b3faaa652336b273bdcc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d12f0304839e599d498b3faaa652336b273bdcc8", "html_url": "https://github.com/rust-lang/rust/commit/d12f0304839e599d498b3faaa652336b273bdcc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d12f0304839e599d498b3faaa652336b273bdcc8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc02580e4e80476ac1ded2cc1008eaf8b8400e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc02580e4e80476ac1ded2cc1008eaf8b8400e6", "html_url": "https://github.com/rust-lang/rust/commit/edc02580e4e80476ac1ded2cc1008eaf8b8400e6"}, {"sha": "8bb7b7bf9c781968b44732791d52962c9a9a00fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bb7b7bf9c781968b44732791d52962c9a9a00fe", "html_url": "https://github.com/rust-lang/rust/commit/8bb7b7bf9c781968b44732791d52962c9a9a00fe"}], "stats": {"total": 394, "additions": 276, "deletions": 118}, "files": [{"sha": "248a2095d0a2c3173c51108008621cb38fd4396d", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -2339,43 +2339,41 @@ impl<'tcx> Const<'tcx> {\n     /// Tries to evaluate the constant if it is `Unevaluated`. If that doesn't succeed, return the\n     /// unevaluated constant.\n     pub fn eval(&self, tcx: TyCtxt<'tcx>, param_env: ParamEnv<'tcx>) -> &Const<'tcx> {\n-        let try_const_eval = |did, param_env: ParamEnv<'tcx>, substs, promoted| {\n+        if let ConstKind::Unevaluated(did, substs, promoted) = self.val {\n             let param_env_and_substs = param_env.with_reveal_all().and(substs);\n \n-            // Avoid querying `tcx.const_eval(...)` with any inference vars.\n-            if param_env_and_substs.needs_infer() {\n-                return None;\n-            }\n+            // HACK(eddyb) this erases lifetimes even though `const_eval_resolve`\n+            // also does later, but we want to do it before checking for\n+            // inference variables.\n+            let param_env_and_substs = tcx.erase_regions(&param_env_and_substs);\n+\n+            // HACK(eddyb) when the query key would contain inference variables,\n+            // attempt using identity substs and `ParamEnv` instead, that will succeed\n+            // when the expression doesn't depend on any parameters.\n+            // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n+            // we can call `infcx.const_eval_resolve` which handles inference variables.\n+            let param_env_and_substs = if param_env_and_substs.needs_infer() {\n+                tcx.param_env(did).and(InternalSubsts::identity_for_item(tcx, did))\n+            } else {\n+                param_env_and_substs\n+            };\n \n+            // FIXME(eddyb) maybe the `const_eval_*` methods should take\n+            // `ty::ParamEnvAnd<SubstsRef>` instead of having them separate.\n             let (param_env, substs) = param_env_and_substs.into_parts();\n-\n             // try to resolve e.g. associated constants to their definition on an impl, and then\n             // evaluate the const.\n-            tcx.const_eval_resolve(param_env, did, substs, promoted, None)\n-                .ok()\n-                .map(|val| Const::from_value(tcx, val, self.ty))\n-        };\n-\n-        match self.val {\n-            ConstKind::Unevaluated(did, substs, promoted) => {\n-                // HACK(eddyb) when substs contain inference variables,\n-                // attempt using identity substs instead, that will succeed\n-                // when the expression doesn't depend on any parameters.\n-                // FIXME(eddyb, skinny121) pass `InferCtxt` into here when it's available, so that\n-                // we can call `infcx.const_eval_resolve` which handles inference variables.\n-                if substs.needs_infer() {\n-                    let identity_substs = InternalSubsts::identity_for_item(tcx, did);\n-                    // The `ParamEnv` needs to match the `identity_substs`.\n-                    let identity_param_env = tcx.param_env(did);\n-                    match try_const_eval(did, identity_param_env, identity_substs, promoted) {\n-                        Some(ct) => ct.subst(tcx, substs),\n-                        None => self,\n-                    }\n-                } else {\n-                    try_const_eval(did, param_env, substs, promoted).unwrap_or(self)\n-                }\n+            match tcx.const_eval_resolve(param_env, did, substs, promoted, None) {\n+                // NOTE(eddyb) `val` contains no lifetimes/types/consts,\n+                // and we use the original type, so nothing from `substs`\n+                // (which may be identity substs, see above),\n+                // can leak through `val` into the const we return.\n+                Ok(val) => Const::from_value(tcx, val, self.ty),\n+\n+                Err(_) => self,\n             }\n-            _ => self,\n+        } else {\n+            self\n         }\n     }\n "}, {"sha": "4dc4fb6d8e936b3da1dc142c9c16dc163f741492", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1760,6 +1760,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n         for (n, (fn_arg, op_arg)) in sig.inputs().iter().zip(args).enumerate() {\n             let op_arg_ty = op_arg.ty(body, self.tcx());\n+            let op_arg_ty = self.normalize(op_arg_ty, term_location);\n             let category = if from_hir_call {\n                 ConstraintCategory::CallArgument\n             } else {\n@@ -2402,6 +2403,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 }\n             };\n             let operand_ty = operand.ty(body, tcx);\n+            let operand_ty = self.normalize(operand_ty, location);\n \n             if let Err(terr) = self.sub_types(\n                 operand_ty,"}, {"sha": "0da26abc330ac17e2204c463d0859fe2009287a7", "filename": "src/librustc_trait_selection/traits/query/normalize.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fquery%2Fnormalize.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -59,11 +59,22 @@ impl<'cx, 'tcx> AtExt<'tcx> for At<'cx, 'tcx> {\n             anon_depth: 0,\n         };\n \n-        let value1 = value.fold_with(&mut normalizer);\n+        let result = value.fold_with(&mut normalizer);\n+        debug!(\n+            \"normalize::<{}>: result={:?} with {} obligations\",\n+            ::std::any::type_name::<T>(),\n+            result,\n+            normalizer.obligations.len(),\n+        );\n+        debug!(\n+            \"normalize::<{}>: obligations={:?}\",\n+            ::std::any::type_name::<T>(),\n+            normalizer.obligations,\n+        );\n         if normalizer.error {\n             Err(NoSolution)\n         } else {\n-            Ok(Normalized { value: value1, obligations: normalizer.obligations })\n+            Ok(Normalized { value: result, obligations: normalizer.obligations })\n         }\n     }\n }"}, {"sha": "3aff70390fadca15f65af4ef48e622dd8b83662b", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -3311,8 +3311,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     pub fn to_const(&self, ast_c: &hir::AnonConst) -> &'tcx ty::Const<'tcx> {\n-        let c = self.tcx.hir().local_def_id(ast_c.hir_id).expect_local();\n-        ty::Const::from_anon_const(self.tcx, c)\n+        let const_def_id = self.tcx.hir().local_def_id(ast_c.hir_id).expect_local();\n+        let c = ty::Const::from_anon_const(self.tcx, const_def_id);\n+\n+        // HACK(eddyb) emulate what a `WellFormedConst` obligation would do.\n+        // This code should be replaced with the proper WF handling ASAP.\n+        if let ty::ConstKind::Unevaluated(def_id, substs, promoted) = c.val {\n+            assert!(promoted.is_none());\n+\n+            // HACK(eddyb) let's hope these are always empty.\n+            // let obligations = self.nominal_obligations(def_id, substs);\n+            // self.out.extend(obligations);\n+\n+            let cause = traits::ObligationCause::new(\n+                self.tcx.def_span(const_def_id.to_def_id()),\n+                self.body_id,\n+                traits::MiscObligation,\n+            );\n+            self.register_predicate(traits::Obligation::new(\n+                cause,\n+                self.param_env,\n+                ty::Predicate::ConstEvaluatable(def_id, substs),\n+            ));\n+        }\n+\n+        c\n     }\n \n     // If the type given by the user has free regions, save it for later, since"}, {"sha": "f9100300e3add1043fbee8964fd47838b8a78c70", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.tables.upvar_list =\n             mem::replace(&mut self.tables.borrow_mut().upvar_list, Default::default());\n \n-        wbcx.tables.tainted_by_errors = self.is_tainted_by_errors();\n+        wbcx.tables.tainted_by_errors |= self.is_tainted_by_errors();\n \n         debug!(\"writeback: tables for {:?} are {:#?}\", item_def_id, wbcx.tables);\n \n@@ -578,14 +578,21 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n-    fn resolve<T>(&self, x: &T, span: &dyn Locatable) -> T\n+    fn resolve<T>(&mut self, x: &T, span: &dyn Locatable) -> T\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        let x = x.fold_with(&mut Resolver::new(self.fcx, span, self.body));\n+        let mut resolver = Resolver::new(self.fcx, span, self.body);\n+        let x = x.fold_with(&mut resolver);\n         if cfg!(debug_assertions) && x.needs_infer() {\n             span_bug!(span.to_span(self.fcx.tcx), \"writeback: `{:?}` has inference variables\", x);\n         }\n+\n+        // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n+        // to mark the `TypeckTables` as tainted in that case, so that downstream\n+        // users of the tables don't produce extra errors, or worse, ICEs.\n+        self.tables.tainted_by_errors |= resolver.replaced_with_error;\n+\n         x\n     }\n }\n@@ -613,6 +620,9 @@ struct Resolver<'cx, 'tcx> {\n     infcx: &'cx InferCtxt<'cx, 'tcx>,\n     span: &'cx dyn Locatable,\n     body: &'tcx hir::Body<'tcx>,\n+\n+    /// Set to `true` if any `Ty` or `ty::Const` had to be replaced with an `Error`.\n+    replaced_with_error: bool,\n }\n \n impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n@@ -621,7 +631,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n         span: &'cx dyn Locatable,\n         body: &'tcx hir::Body<'tcx>,\n     ) -> Resolver<'cx, 'tcx> {\n-        Resolver { tcx: fcx.tcx, infcx: fcx, span, body }\n+        Resolver { tcx: fcx.tcx, infcx: fcx, span, body, replaced_with_error: false }\n     }\n \n     fn report_error(&self, t: Ty<'tcx>) {\n@@ -644,6 +654,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n             Err(_) => {\n                 debug!(\"Resolver::fold_ty: input type `{:?}` not fully resolvable\", t);\n                 self.report_error(t);\n+                self.replaced_with_error = true;\n                 self.tcx().types.err\n             }\n         }\n@@ -661,6 +672,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for Resolver<'cx, 'tcx> {\n                 debug!(\"Resolver::fold_const: input const `{:?}` not fully resolvable\", ct);\n                 // FIXME: we'd like to use `self.report_error`, but it doesn't yet\n                 // accept a &'tcx ty::Const.\n+                self.replaced_with_error = true;\n                 self.tcx().consts.err\n             }\n         }"}, {"sha": "a327951b3b0dd64229b6a4955b7412e133ecb33e", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1170,14 +1170,28 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n         }\n         // FIXME(#43408) enable this always when we get lazy normalization.\n         Node::AnonConst(_) => {\n+            let parent_id = tcx.hir().get_parent_item(hir_id);\n+            let parent_def_id = tcx.hir().local_def_id(parent_id);\n+\n             // HACK(eddyb) this provides the correct generics when\n             // `feature(const_generics)` is enabled, so that const expressions\n             // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n             if tcx.features().const_generics {\n-                let parent_id = tcx.hir().get_parent_item(hir_id);\n-                Some(tcx.hir().local_def_id(parent_id))\n+                Some(parent_def_id)\n             } else {\n-                None\n+                let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));\n+                match parent_node {\n+                    // HACK(eddyb) this provides the correct generics for repeat\n+                    // expressions' count (i.e. `N` in `[x; N]`), as they shouldn't\n+                    // be able to cause query cycle errors.\n+                    Node::Expr(&Expr { kind: ExprKind::Repeat(_, ref constant), .. })\n+                        if constant.hir_id == hir_id =>\n+                    {\n+                        Some(parent_def_id)\n+                    }\n+\n+                    _ => None,\n+                }\n             }\n         }\n         Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => {"}, {"sha": "ad6f4970367a7b5c0dd533bc751eb89e020f11e7", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -8,4 +8,9 @@ fn main() {\n     //~| WARN denote infinite loops with\n     [(); { for _ in 0usize.. {}; 0}];\n     //~^ ERROR `for` is not allowed in a `const`\n+    //~| ERROR calls in constants are limited to constant functions\n+    //~| ERROR references in constants may only refer to immutable values\n+    //~| ERROR calls in constants are limited to constant functions\n+    //~| ERROR constant contains unimplemented expression type\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "8fe79b97d9ba29d9541af3c05357c920da414f60", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -14,7 +14,7 @@ impl Foo for Def {\n \n pub fn test<A: Foo, B: Foo>() {\n     let _array = [4; <A as Foo>::Y];\n-    //~^ ERROR the trait bound `A: Foo` is not satisfied [E0277]\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {"}, {"sha": "0bc019b2dc8751fa2c855c7d74ce3c026f67af13", "filename": "src/test/ui/associated-const/associated-const-type-parameter-arrays-2.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-const%2Fassociated-const-type-parameter-arrays-2.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,17 +1,10 @@\n-error[E0277]: the trait bound `A: Foo` is not satisfied\n+error: constant expression depends on a generic parameter\n   --> $DIR/associated-const-type-parameter-arrays-2.rs:16:22\n    |\n-LL |     const Y: usize;\n-   |     --------------- required by `Foo::Y`\n-...\n LL |     let _array = [4; <A as Foo>::Y];\n-   |                      ^^^^^^^^^^^^^ the trait `Foo` is not implemented for `A`\n+   |                      ^^^^^^^^^^^^^\n    |\n-help: consider further restricting this bound\n-   |\n-LL | pub fn test<A: Foo + Foo, B: Foo>() {\n-   |                    ^^^^^\n+   = note: this may fail depending on what value the parameter takes\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "5d068eb7fc83ccaa4d60312237a94364af140ff4", "filename": "src/test/ui/const-generics/issues/issue-62456.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,10 +1,9 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n-// build-pass\n-\n fn foo<const N: usize>() {\n     let _ = [0u64; N + 1];\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {}"}, {"sha": "96a07110e73cc599e79705d75d4a50be45646dce", "filename": "src/test/ui/const-generics/issues/issue-62456.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62456.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -6,5 +6,13 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: 1 warning emitted\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62456.rs:5:20\n+   |\n+LL |     let _ = [0u64; N + 1];\n+   |                    ^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "264e693a008281140dd5e95c708d98a10b9450ba", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -17,6 +17,7 @@ impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n         //~^ ERROR: mismatched types\n+        //~| ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "a3a864f770cb87bf11607a95bac0e09069bf9aed", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -7,6 +7,14 @@ LL |         ArrayHolder([0; Self::SIZE])\n    = note: expected array `[u32; _]`\n               found array `[u32; _]`\n \n-error: aborting due to previous error\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-62504.rs:18:25\n+   |\n+LL |         ArrayHolder([0; Self::SIZE])\n+   |                         ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "73ba4fa6aae880b9f47c4e4890a4468458daebff", "filename": "src/test/ui/const-generics/issues/issue-66205.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,10 +1,9 @@\n-// check-pass\n-\n #![allow(incomplete_features, dead_code, unconditional_recursion)]\n #![feature(const_generics)]\n \n fn fact<const N: usize>() {\n     fact::<{ N - 1 }>();\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n \n fn main() {}"}, {"sha": "2bd013e8b41f2cdd8a147efc79ce06fcb400185e", "filename": "src/test/ui/const-generics/issues/issue-66205.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-66205.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-66205.rs:5:12\n+   |\n+LL |     fact::<{ N - 1 }>();\n+   |            ^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "c8ee18212398554b480de9ec045c255d3e3ecbe8", "filename": "src/test/ui/const-generics/issues/issue-67739.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,7 +1,5 @@\n // Regression test for #67739\n \n-// check-pass\n-\n #![allow(incomplete_features)]\n #![feature(const_generics)]\n \n@@ -12,6 +10,7 @@ pub trait Trait {\n \n     fn associated_size(&self) -> usize {\n         [0u8; mem::size_of::<Self::Associated>()];\n+        //~^ ERROR constant expression depends on a generic parameter\n         0\n     }\n }"}, {"sha": "27a56b8eb02b2a0692f28bf6042155c77320600f", "filename": "src/test/ui/const-generics/issues/issue-67739.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67739.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -0,0 +1,10 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-67739.rs:12:15\n+   |\n+LL |         [0u8; mem::size_of::<Self::Associated>()];\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to previous error\n+"}, {"sha": "07fb491015a853c184acda4426dff1e36928bfd2", "filename": "src/test/ui/consts/const-eval/issue-52442.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,4 +1,6 @@\n fn main() {\n     [();  { &loop { break } as *const _ as usize } ];\n     //~^ ERROR `loop` is not allowed in a `const`\n+    //~| ERROR casting pointers to integers in constants is unstable\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "eda2dbf0b6b1569ff8f412bf2436b78b325f2106", "filename": "src/test/ui/consts/const-eval/issue-52442.stderr", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52442.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -7,6 +7,22 @@ LL |     [();  { &loop { break } as *const _ as usize } ];\n    = note: see issue #52000 <https://github.com/rust-lang/rust/issues/52000> for more information\n    = help: add `#![feature(const_loop)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error[E0658]: casting pointers to integers in constants is unstable\n+  --> $DIR/issue-52442.rs:2:13\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n+   = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52442.rs:2:13\n+   |\n+LL |     [();  { &loop { break } as *const _ as usize } ];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0080, E0658.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "d719bf1b97161668d5fb305df2f6e81448788f70", "filename": "src/test/ui/consts/issue-52432.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -6,4 +6,5 @@ fn main() {\n     //~| ERROR: type annotations needed\n     [(); &(static || {}) as *const _ as usize];\n     //~^ ERROR: closures cannot be static\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "e9539d24118a0533bbc18e447589c3693d2fd9ad", "filename": "src/test/ui/consts/issue-52432.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-52432.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -16,7 +16,13 @@ error[E0282]: type annotations needed\n LL |     [(); &(static |x| {}) as *const _ as usize];\n    |                    ^ consider giving this closure parameter a type\n \n-error: aborting due to 3 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52432.rs:7:10\n+   |\n+LL |     [(); &(static || {}) as *const _ as usize];\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ \"pointer-to-integer cast\" needs an rfc before being allowed inside constants\n+\n+error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0282, E0697.\n-For more information about an error, try `rustc --explain E0282`.\n+Some errors have detailed explanations: E0080, E0282, E0697.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "07af83104241c7c2b6ea2691df4dd20dca301068", "filename": "src/test/ui/consts/issue-70773-mir-typeck-lt-norm.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70773-mir-typeck-lt-norm.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+const HASH_LEN: usize = 20;\n+struct Hash([u8; HASH_LEN]);\n+fn init_hash(_: &mut [u8; HASH_LEN]) {}\n+\n+fn foo<'a>() -> &'a () {\n+    Hash([0; HASH_LEN]);\n+    init_hash(&mut [0; HASH_LEN]);\n+    &()\n+}\n+\n+fn main() {\n+    foo();\n+}"}, {"sha": "3ea5f88f07d1e5a9137dcbc39353f99dcdcaf3a3", "filename": "src/test/ui/consts/too_generic_eval_ice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -4,10 +4,9 @@ impl<A, B> Foo<A, B> {\n     const HOST_SIZE: usize = std::mem::size_of::<B>();\n \n     pub fn crash() -> bool {\n-        [5; Self::HOST_SIZE] == [6; 0] //~ ERROR no associated item named `HOST_SIZE`\n-        //~^ the size for values of type `A` cannot be known\n-        //~| the size for values of type `B` cannot be known\n-        //~| binary operation `==` cannot be applied to type `[{integer}; _]`\n+        [5; Self::HOST_SIZE] == [6; 0]\n+        //~^ ERROR constant expression depends on a generic parameter\n+        //~| ERROR binary operation `==` cannot be applied to type `[{integer}; _]`\n     }\n }\n "}, {"sha": "8b29c533bcc9344c8319f07332c11d3b0574c0d9", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 5, "deletions": 41, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,45 +1,10 @@\n-error[E0599]: no associated item named `HOST_SIZE` found for struct `Foo<A, B>` in the current scope\n-  --> $DIR/too_generic_eval_ice.rs:7:19\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   | --------------------------- associated item `HOST_SIZE` not found for this\n-...\n-LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |                   ^^^^^^^^^ associated item not found in `Foo<A, B>`\n-   |\n-   = note: the method `HOST_SIZE` exists but the following trait bounds were not satisfied:\n-           `A: std::marker::Sized`\n-           `B: std::marker::Sized`\n-\n-error[E0277]: the size for values of type `A` cannot be known at compilation time\n-  --> $DIR/too_generic_eval_ice.rs:7:13\n-   |\n-LL | pub struct Foo<A, B>(A, B);\n-   |                - required by this bound in `Foo`\n-LL | \n-LL | impl<A, B> Foo<A, B> {\n-   |      - this type parameter needs to be `std::marker::Sized`\n-...\n-LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n-   |\n-   = help: the trait `std::marker::Sized` is not implemented for `A`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n-\n-error[E0277]: the size for values of type `B` cannot be known at compilation time\n+error: constant expression depends on a generic parameter\n   --> $DIR/too_generic_eval_ice.rs:7:13\n    |\n-LL | pub struct Foo<A, B>(A, B);\n-   |                   - required by this bound in `Foo`\n-LL | \n-LL | impl<A, B> Foo<A, B> {\n-   |         - this type parameter needs to be `std::marker::Sized`\n-...\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |             ^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |             ^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `std::marker::Sized` is not implemented for `B`\n-   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: this may fail depending on what value the parameter takes\n \n error[E0369]: binary operation `==` cannot be applied to type `[{integer}; _]`\n   --> $DIR/too_generic_eval_ice.rs:7:30\n@@ -49,7 +14,6 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |         |\n    |         [{integer}; _]\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0277, E0369, E0599.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0369`."}, {"sha": "c7b6f1d58f33d798f691ce9554cce7d66049cc1d", "filename": "src/test/ui/issues/issue-39211.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -8,7 +8,8 @@ trait Mat {\n }\n \n fn m<M: Mat>() {\n-    let a = [3; M::Row::DIM]; //~ ERROR associated type `Row` not found for `M`\n+    let a = [3; M::Row::DIM];\n+    //~^ ERROR constant expression depends on a generic parameter\n }\n fn main() {\n }"}, {"sha": "c555983ea68e0abed2b3dabca1d66f50d1eb689a", "filename": "src/test/ui/issues/issue-39211.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39211.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -1,9 +1,10 @@\n-error[E0220]: associated type `Row` not found for `M`\n-  --> $DIR/issue-39211.rs:11:20\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-39211.rs:11:17\n    |\n LL |     let a = [3; M::Row::DIM];\n-   |                    ^^^ associated type `Row` not found\n+   |                 ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0220`."}, {"sha": "02305191f6ebc4eb1abb47e6969b4ca30df2a9af", "filename": "src/test/ui/issues/issue-66706.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -10,4 +10,17 @@ fn b() {\n     //~^ ERROR expected identifier, found reserved identifier `_`\n }\n \n+fn c() {\n+    [0; [|&_: _ &_| {}; 0 ].len()]\n+    //~^ ERROR expected `,`, found `&`\n+    //~| ERROR mismatched types\n+}\n+\n+fn d() {\n+    [0; match [|f @ &ref _| () ] {} ]\n+    //~^ ERROR expected identifier, found reserved identifier `_`\n+    //~| ERROR `match` is not allowed in a `const`\n+    //~| ERROR mismatched types\n+}\n+\n fn main() {}"}, {"sha": "ea461cc5d03fade0436ed69a1ff6a9c53a1465d3", "filename": "src/test/ui/issues/issue-66706.stderr", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66706.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -12,6 +12,29 @@ error: expected identifier, found reserved identifier `_`\n LL |     [0; [|f @ &ref _| {} ; 0 ].len() ];\n    |                    ^ expected identifier, found reserved identifier\n \n+error: expected `,`, found `&`\n+  --> $DIR/issue-66706.rs:14:17\n+   |\n+LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n+   |                -^ expected `,`\n+   |                |\n+   |                help: missing `,`\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/issue-66706.rs:20:26\n+   |\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |                          ^ expected identifier, found reserved identifier\n+\n+error[E0658]: `match` is not allowed in a `const`\n+  --> $DIR/issue-66706.rs:20:9\n+   |\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #49146 <https://github.com/rust-lang/rust/issues/49146> for more information\n+   = help: add `#![feature(const_if_match)]` to the crate attributes to enable\n+\n error[E0282]: type annotations needed\n   --> $DIR/issue-66706.rs:2:11\n    |\n@@ -26,7 +49,23 @@ LL | fn a() {\n LL |     [0; [|_: _ &_| ()].len()]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66706.rs:14:5\n+   |\n+LL | fn c() {\n+   |        - help: try adding a return type: `-> [{integer}; _]`\n+LL |     [0; [|&_: _ &_| {}; 0 ].len()]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-66706.rs:20:5\n+   |\n+LL | fn d() {\n+   |        - help: try adding a return type: `-> [{integer}; _]`\n+LL |     [0; match [|f @ &ref _| () ] {} ]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found array `[{integer}; _]`\n+\n+error: aborting due to 9 previous errors\n \n-Some errors have detailed explanations: E0282, E0308.\n+Some errors have detailed explanations: E0282, E0308, E0658.\n For more information about an error, try `rustc --explain E0282`."}, {"sha": "6ac3eb53cb319f533712083153e327aa016f8150", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -19,4 +19,5 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n+    //~^ ERROR constant expression depends on a generic parameter\n }"}, {"sha": "175e6b0eaa0dd9b902bde2452d47aa7f31886125", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d12f0304839e599d498b3faaa652336b273bdcc8/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=d12f0304839e599d498b3faaa652336b273bdcc8", "patch": "@@ -13,7 +13,15 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: aborting due to 2 previous errors\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n+   |\n+LL |     let _ = [0; B::VALUE];\n+   |                 ^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}]}