{"sha": "aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjFlNDMxMzdlN2Y4MzYwYjJkMDJlZDE1Y2EzZGY4YTUwNmZiM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T21:44:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-01-29T21:44:06Z"}, "message": "Auto merge of #1154 - TimDiekmann:rename-alloc, r=RalfJung\n\nRename `Alloc` to `AllocRef`\n\nRequired to land https://github.com/rust-lang/rust/pull/68529. Please see that PR for details. The CI is expected to fail until the PR is landed.", "tree": {"sha": "32e936f4e32505e7fa131b211a667982ea0dd723", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32e936f4e32505e7fa131b211a667982ea0dd723"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "html_url": "https://github.com/rust-lang/rust/commit/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c5dee6f882d51c4ecfe12109557f29fa8893771", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5dee6f882d51c4ecfe12109557f29fa8893771", "html_url": "https://github.com/rust-lang/rust/commit/8c5dee6f882d51c4ecfe12109557f29fa8893771"}, {"sha": "74e0482ec347d165c5629c7eeff84719cb40e524", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e0482ec347d165c5629c7eeff84719cb40e524", "html_url": "https://github.com/rust-lang/rust/commit/74e0482ec347d165c5629c7eeff84719cb40e524"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "5ce2e4651361d2f28c89a1ff3a8562233a5b21cb", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -1 +1 @@\n-698fcd38fa9548e64a2092ff48c9d15ceb57d40c\n+3761dcd3467441f78939ccb3b341b03b6a7558d7"}, {"sha": "2ac35a450cf196f07cd7fb29c32e667798fcdf65", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n // error-pattern: incorrect alloc info: expected size 1 and align 2, got size 1 and align 1\n "}, {"sha": "c5b48f5ddf59005748010daa12a7573a2bde3878", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n "}, {"sha": "02c442f0ab85f068769e3081e98bbb5302ff7dd9", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n // error-pattern: tried to deallocate dangling pointer\n "}, {"sha": "905e8e061721274758c5e2077905c05366a00eab", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n // error-pattern: incorrect alloc info: expected size 2 and align 1, got size 1 and align 1\n "}, {"sha": "21468739b31c0b364d8e781601a26f1ba75260c1", "filename": "tests/compile-fail/reallocate-change-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-change-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-change-alloc.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n fn main() {\n     unsafe {"}, {"sha": "ee73cfce8634be4dc68d5a728f42b254a3b66ba8", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -3,7 +3,7 @@\n extern crate alloc;\n \n use alloc::alloc::Global;\n-use std::alloc::*;\n+use std::alloc::{AllocRef, Layout};\n \n // error-pattern: dangling pointer was dereferenced\n "}, {"sha": "907fbf962df02ebdf687586edb966d8a71b8abd6", "filename": "tests/run-pass/heap_allocator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Frun-pass%2Fheap_allocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff1e43137e7f8360b2d02ed15ca3df8a506fb3a/tests%2Frun-pass%2Fheap_allocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap_allocator.rs?ref=aff1e43137e7f8360b2d02ed15ca3df8a506fb3a", "patch": "@@ -1,10 +1,10 @@\n #![feature(allocator_api)]\n \n use std::ptr::NonNull;\n-use std::alloc::{Global, Alloc, Layout, System};\n+use std::alloc::{Global, AllocRef, Layout, System};\n use std::slice;\n \n-fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n+fn check_alloc<T: AllocRef>(mut allocator: T) { unsafe {\n     for &align in &[4, 8, 16, 32] {\n         let layout = Layout::from_size_align(20, align).unwrap();\n \n@@ -40,7 +40,7 @@ fn check_alloc<T: Alloc>(mut allocator: T) { unsafe {\n     }\n } }\n \n-fn check_align_requests<T: Alloc>(mut allocator: T) {\n+fn check_align_requests<T: AllocRef>(mut allocator: T) {\n     for &size in &[2, 8, 64] { // size less than and bigger than alignment\n         for &align in &[4, 8, 16, 32] { // Be sure to cover less than and bigger than `MIN_ALIGN` for all architectures\n             let iterations = 32;"}]}