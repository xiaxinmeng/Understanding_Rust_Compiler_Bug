{"sha": "155f81d4a39fb6085633eab457cac1d7b4bf4180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWY4MWQ0YTM5ZmI2MDg1NjMzZWFiNDU3Y2FjMWQ3YjRiZjQxODA=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-30T04:52:30Z"}, "committer": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2013-01-31T04:21:57Z"}, "message": "Revert RIMOV on librustc", "tree": {"sha": "6e16115f1a9404594724b42931bb888d529cac19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e16115f1a9404594724b42931bb888d529cac19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155f81d4a39fb6085633eab457cac1d7b4bf4180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155f81d4a39fb6085633eab457cac1d7b4bf4180", "html_url": "https://github.com/rust-lang/rust/commit/155f81d4a39fb6085633eab457cac1d7b4bf4180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155f81d4a39fb6085633eab457cac1d7b4bf4180/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13076eb3b0223ef5bb4a5d7ba12a3a4faa0de34a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13076eb3b0223ef5bb4a5d7ba12a3a4faa0de34a", "html_url": "https://github.com/rust-lang/rust/commit/13076eb3b0223ef5bb4a5d7ba12a3a4faa0de34a"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "90bcdb54e19aebe1263115732518c5c03b17cb96", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=155f81d4a39fb6085633eab457cac1d7b4bf4180", "patch": "@@ -640,8 +640,8 @@ struct Liveness {\n     tcx: ty::ctxt,\n     ir: @IrMaps,\n     s: Specials,\n-    mut successors: ~[LiveNode],\n-    mut users: ~[users],\n+    successors: ~[mut LiveNode],\n+    users: ~[mut users],\n     // The list of node IDs for the nested loop scopes\n     // we're in.\n     loop_scope: DVec<node_id>,"}, {"sha": "e4a70241d1a65dde41714c87e0d4a19486f08830", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=155f81d4a39fb6085633eab457cac1d7b4bf4180", "patch": "@@ -127,13 +127,13 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n         }\n     }\n \n-    fn all_mem(cls: &mut [x86_64_reg_class]) {\n+    fn all_mem(cls: &[mut x86_64_reg_class]) {\n         for uint::range(0, cls.len()) |i| {\n             cls[i] = memory_class;\n         }\n     }\n \n-    fn unify(cls: &mut [x86_64_reg_class],\n+    fn unify(cls: &[mut x86_64_reg_class],\n              i: uint,\n              newv: x86_64_reg_class) {\n         if cls[i] == newv {\n@@ -159,7 +159,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn classify_struct(tys: &[TypeRef],\n-                       cls: &mut [x86_64_reg_class], i: uint,\n+                       cls: &[mut x86_64_reg_class], i: uint,\n                        off: uint) {\n         let mut field_off = off;\n         for vec::each(tys) |ty| {\n@@ -170,7 +170,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     fn classify(ty: TypeRef,\n-                cls: &mut [x86_64_reg_class], ix: uint,\n+                cls: &[mut x86_64_reg_class], ix: uint,\n                 off: uint) {\n         unsafe {\n             let t_align = ty_align(ty);\n@@ -220,7 +220,7 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n         }\n     }\n \n-    fn fixup(ty: TypeRef, cls: &mut [x86_64_reg_class]) {\n+    fn fixup(ty: TypeRef, cls: &[mut x86_64_reg_class]) {\n         unsafe {\n             let mut i = 0u;\n             let llty = llvm::LLVMGetTypeKind(ty) as int;"}, {"sha": "c19db4a75b9ddabd5a604208d69b60425174b339", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=155f81d4a39fb6085633eab457cac1d7b4bf4180", "patch": "@@ -49,7 +49,7 @@ pub const use_repr: uint = 1u;   /* Dependency on size/alignment/mode and\n                                     take/drop glue */\n pub const use_tydesc: uint = 2u; /* Takes the tydesc, or compares */\n \n-pub type ctx = {ccx: @crate_ctxt, mut uses: ~[type_uses]};\n+pub type ctx = {ccx: @crate_ctxt, uses: ~[mut type_uses]};\n \n pub fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n     -> ~[type_uses] {"}, {"sha": "44dd65f238b36541347854024909e409f35759f9", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=155f81d4a39fb6085633eab457cac1d7b4bf4180", "patch": "@@ -778,7 +778,7 @@ pub impl LookupContext {\n         /*!\n          *\n          * In the event that we are invoking a method with a receiver\n-         * of a linear borrowed type like `&mut T` or `&mut [T]`,\n+         * of a linear borrowed type like `&mut T` or `&[mut T]`,\n          * we will \"reborrow\" the receiver implicitly.  For example, if\n          * you have a call `r.inc()` and where `r` has type `&mut T`,\n          * then we treat that like `(&mut *r).inc()`.  This avoids"}, {"sha": "5d602ab88bbcbcc9efa71a574a292cbf87a278fd", "filename": "src/librustc/middle/typeck/infer/region_inference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/155f81d4a39fb6085633eab457cac1d7b4bf4180/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference.rs?ref=155f81d4a39fb6085633eab457cac1d7b4bf4180", "patch": "@@ -1191,11 +1191,11 @@ struct GraphNode {\n     span: span,\n     mut classification: Classification,\n     mut value: GraphNodeValue,\n-    head_edge: [uint * 2],\n+    head_edge: [mut uint * 2], // FIXME(#3226)--should not need mut\n }\n \n struct GraphEdge {\n-    next_edge: [uint * 2],\n+    next_edge: [mut uint * 2], // FIXME(#3226)--should not need mut\n     constraint: Constraint,\n     span: span,\n }\n@@ -1237,15 +1237,15 @@ impl RegionVarBindings {\n                 classification: Contracting,\n                 span: self.var_spans[var_idx],\n                 value: NoValue,\n-                head_edge: [uint::max_value, uint::max_value]\n+                head_edge: [mut uint::max_value, uint::max_value]\n             }\n         });\n \n         // It would be nice to write this using map():\n         let mut edges = vec::with_capacity(num_edges);\n         for self.constraints.each_ref |constraint, span| {\n             edges.push(GraphEdge {\n-                next_edge: [uint::max_value, uint::max_value],\n+                next_edge: [mut uint::max_value, uint::max_value],\n                 constraint: *constraint,\n                 span: *span\n             });"}]}