{"sha": "df4db83ed840b042942a26ed34f126d9829fcd11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNGRiODNlZDg0MGIwNDI5NDJhMjZlZDM0ZjEyNmQ5ODI5ZmNkMTE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-23T23:39:18Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-23T23:40:05Z"}, "message": "rustc: Max/min classes: Add struct literal syntax", "tree": {"sha": "4a696e3edd8456d0d310e33f25ba8fb7b5f0a7a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a696e3edd8456d0d310e33f25ba8fb7b5f0a7a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df4db83ed840b042942a26ed34f126d9829fcd11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df4db83ed840b042942a26ed34f126d9829fcd11", "html_url": "https://github.com/rust-lang/rust/commit/df4db83ed840b042942a26ed34f126d9829fcd11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df4db83ed840b042942a26ed34f126d9829fcd11/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee2abc1caecc3f63f021988ac1813912120f73a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2abc1caecc3f63f021988ac1813912120f73a9", "html_url": "https://github.com/rust-lang/rust/commit/ee2abc1caecc3f63f021988ac1813912120f73a9"}], "stats": {"total": 141, "additions": 98, "deletions": 43}, "files": [{"sha": "11a1a88bf5f7fe77d4491a04569309d693f11683", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -343,6 +343,11 @@ enum expr_ {\n     expr_assert(@expr),\n \n     expr_mac(mac),\n+\n+    // A struct literal expression.\n+    //\n+    // XXX: Add functional record update.\n+    expr_struct(@path, ~[field])\n }\n \n #[auto_serialize]"}, {"sha": "b23d2acaccbae36e59435ad4baa5b417111a7a3d", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -467,6 +467,9 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n                                         fld.fold_expr(e)) }\n           expr_assert(e) { expr_assert(fld.fold_expr(e)) }\n           expr_mac(mac) { expr_mac(fold_mac(mac)) }\n+          expr_struct(path, fields) {\n+            expr_struct(fld.fold_path(path), vec::map(fields, fold_field))\n+          }\n         }\n }\n "}, {"sha": "95511479d8484733aaf7f6f72b4e194935e23952", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 55, "deletions": 30, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -30,33 +30,31 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              expr_fail, expr_field, expr_fn, expr_fn_block, expr_if,\n              expr_index, expr_lit, expr_log, expr_loop,\n              expr_loop_body, expr_mac, expr_move, expr_new, expr_path,\n-             expr_rec, expr_ret, expr_swap, expr_tup, expr_unary, expr_vec,\n-             expr_vstore, expr_while, extern_fn, field, fn_decl, foreign_item,\n-             foreign_item_fn, foreign_mod, ident, impure_fn, infer,\n-             init_assign, init_move, initializer, instance_var, item, item_,\n-             item_class, item_const, item_enum, item_fn, item_foreign_mod,\n-             item_impl, item_mac, item_mod, item_trait, item_ty, lit, lit_,\n-             lit_bool, lit_float, lit_int, lit_int_unsuffixed, lit_nil,\n-             lit_str, lit_uint, local, m_const, m_imm, m_mutbl, mac_, mac_aq,\n-             mac_ellipsis, mac_embed_block, mac_embed_type, mac_invoc,\n-             mac_invoc_tt, mac_var, matcher, method, mode, mt, mtc_bb,\n-             mtc_rep, mtc_tok, mul, mutability, neg, noreturn, not, pat,\n-             pat_box, pat_enum, pat_ident, pat_lit, pat_range, pat_rec,\n-             pat_tup, pat_uniq, pat_wild, path, private, proto, proto_any,\n-             proto_bare, proto_block, proto_box, proto_uniq, provided, public,\n-             pure_fn, purity, re_anon, re_named, region, rem, required,\n-             ret_style, return_val, shl, shr, stmt, stmt_decl, stmt_expr,\n-             stmt_semi, subtract, token_tree, trait_method, trait_ref,\n-             tt_delim, tt_dotdotdot, tt_flat, tt_interpolate, ty, ty_, ty_bot,\n-             ty_box, ty_field, ty_fn,\n-             ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr,\n-             ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec,\n-             ty_fixed_length,\n-             unchecked_blk, uniq, unsafe_blk, unsafe_fn, variant, view_item,\n-             view_item_, view_item_export, view_item_import, view_item_use,\n-             view_path, view_path_glob, view_path_list, view_path_simple,\n-             visibility, vstore, vstore_box, vstore_fixed, vstore_slice,\n-             vstore_uniq};\n+             expr_rec, expr_ret, expr_swap, expr_struct, expr_tup, expr_unary,\n+             expr_vec, expr_vstore, expr_while, extern_fn, field, fn_decl,\n+             foreign_item, foreign_item_fn, foreign_mod, ident, impure_fn,\n+             infer, init_assign, init_move, initializer, instance_var, item,\n+             item_, item_class, item_const, item_enum, item_fn,\n+             item_foreign_mod, item_impl, item_mac, item_mod, item_trait,\n+             item_ty, lit, lit_, lit_bool, lit_float, lit_int,\n+             lit_int_unsuffixed, lit_nil, lit_str, lit_uint, local, m_const,\n+             m_imm, m_mutbl, mac_, mac_aq, mac_ellipsis, mac_embed_block,\n+             mac_embed_type, mac_invoc, mac_invoc_tt, mac_var, matcher,\n+             method, mode, mt, mtc_bb, mtc_rep, mtc_tok, mul, mutability, neg,\n+             noreturn, not, pat, pat_box, pat_enum, pat_ident, pat_lit,\n+             pat_range, pat_rec, pat_tup, pat_uniq, pat_wild, path, private,\n+             proto, proto_any, proto_bare, proto_block, proto_box, proto_uniq,\n+             provided, public, pure_fn, purity, re_anon, re_named, region,\n+             rem, required, ret_style, return_val, shl, shr, stmt, stmt_decl,\n+             stmt_expr, stmt_semi, subtract, token_tree, trait_method,\n+             trait_ref, tt_delim, tt_dotdotdot, tt_flat, tt_interpolate, ty,\n+             ty_, ty_bot, ty_box, ty_field, ty_fn, ty_infer, ty_mac,\n+             ty_method, ty_nil, ty_param, ty_path, ty_ptr, ty_rec, ty_rptr,\n+             ty_tup, ty_u32, ty_uniq, ty_vec, ty_fixed_length, unchecked_blk,\n+             uniq, unsafe_blk, unsafe_fn, variant, view_item, view_item_,\n+             view_item_export, view_item_import, view_item_use, view_path,\n+             view_path_glob, view_path_list, view_path_simple, visibility,\n+             vstore, vstore_box, vstore_fixed, vstore_slice, vstore_uniq};\n \n export file_type;\n export parser;\n@@ -912,10 +910,37 @@ class parser {\n                 let hi = self.span.hi;\n \n                 ret pexpr(self.mk_mac_expr(lo, hi, mac_invoc_tt(pth, tts)));\n-            } else {\n-                hi = pth.span.hi;\n-                ex = expr_path(pth);\n+            } else if self.token == token::LBRACE {\n+                // This might be a struct literal.\n+                let lookahead = self.look_ahead(1);\n+                if self.token_is_keyword(~\"mut\", lookahead) ||\n+                        (is_plain_ident(lookahead) &&\n+                         self.look_ahead(2) == token::COLON) {\n+\n+                    // It's a struct literal.\n+                    self.bump();\n+                    let mut fields = ~[];\n+                    if self.is_keyword(~\"mut\") || is_plain_ident(self.token)\n+                            && self.look_ahead(1) == token::COLON {\n+                        vec::push(fields, self.parse_field(token::COLON));\n+                        while self.token != token::RBRACE {\n+                            self.expect(token::COMMA);\n+                            if self.token == token::RBRACE {\n+                                // Accept an optional trailing comma.\n+                                break;\n+                            }\n+                            vec::push(fields, self.parse_field(token::COLON));\n+                        }\n+                    }\n+\n+                    hi = pth.span.hi;\n+                    ex = expr_struct(pth, fields);\n+                    ret self.mk_pexpr(lo, hi, ex);\n+                }\n             }\n+\n+            hi = pth.span.hi;\n+            ex = expr_path(pth);\n         } else {\n             let lit = self.parse_lit();\n             hi = lit.span.hi;"}, {"sha": "8df555fc864fb1adb01c34e91fb016fa774bcabf", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -873,6 +873,16 @@ fn print_vstore(s: ps, t: ast::vstore) {\n }\n \n fn print_expr(s: ps, &&expr: @ast::expr) {\n+    fn print_field(s: ps, field: ast::field) {\n+        ibox(s, indent_unit);\n+        if field.node.mutbl == ast::m_mutbl { word_nbsp(s, ~\"mut\"); }\n+        word(s.s, *field.node.ident);\n+        word_space(s, ~\":\");\n+        print_expr(s, field.node.expr);\n+        end(s);\n+    }\n+    fn get_span(field: ast::field) -> codemap::span { ret field.span; }\n+\n     maybe_print_comment(s, expr.span.lo);\n     ibox(s, indent_unit);\n     let ann_node = node_expr(s, expr);\n@@ -903,15 +913,6 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         end(s);\n       }\n       ast::expr_rec(fields, wth) {\n-        fn print_field(s: ps, field: ast::field) {\n-            ibox(s, indent_unit);\n-            if field.node.mutbl == ast::m_mutbl { word_nbsp(s, ~\"mut\"); }\n-            word(s.s, *field.node.ident);\n-            word_space(s, ~\":\");\n-            print_expr(s, field.node.expr);\n-            end(s);\n-        }\n-        fn get_span(field: ast::field) -> codemap::span { ret field.span; }\n         word(s.s, ~\"{\");\n         commasep_cmnt(s, consistent, fields, print_field, get_span);\n         alt wth {\n@@ -926,6 +927,13 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         }\n         word(s.s, ~\"}\");\n       }\n+      ast::expr_struct(path, fields) {\n+        print_path(s, path, true);\n+        word(s.s, ~\"{\");\n+        commasep_cmnt(s, consistent, fields, print_field, get_span);\n+        word(s.s, ~\",\");\n+        word(s.s, ~\"}\");\n+      }\n       ast::expr_tup(exprs) {\n         popen(s);\n         commasep_exprs(s, inconsistent, exprs);"}, {"sha": "ad57ac28b2cfe57d9b2a81701fd2e656ffbc609c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -368,6 +368,10 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         for flds.each |f| { v.visit_expr(f.node.expr, e, v); }\n         visit_expr_opt(base, e, v);\n       }\n+      expr_struct(p, flds) {\n+        visit_path(p, e, v);\n+        for flds.each |f| { v.visit_expr(f.node.expr, e, v); }\n+      }\n       expr_tup(elts) { for elts.each |el| { v.visit_expr(el, e, v); } }\n       expr_call(callee, args, _) {\n         visit_exprs(args, e, v);"}, {"sha": "ad5d49fe4eac3025f7114f2a3c6705e74ed171bc", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -175,7 +175,7 @@ impl public_methods for borrowck_ctxt {\n           ast::expr_new(*) | ast::expr_binary(*) | ast::expr_while(*) |\n           ast::expr_block(*) | ast::expr_loop(*) | ast::expr_alt(*) |\n           ast::expr_lit(*) | ast::expr_break | ast::expr_mac(*) |\n-          ast::expr_again | ast::expr_rec(*) {\n+          ast::expr_again | ast::expr_rec(*) | ast::expr_struct(*) {\n             ret self.cat_rvalue(expr, expr_ty);\n           }\n         }"}, {"sha": "98bf1ac32bfdfb7ba324dee744376b7662bf0c16", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -471,7 +471,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n       expr_unary(*) | expr_fail(*) |\n       expr_break | expr_again | expr_lit(_) | expr_ret(*) |\n       expr_block(*) | expr_move(*) | expr_assign(*) | expr_swap(*) |\n-      expr_assign_op(*) | expr_mac(*) {\n+      expr_assign_op(*) | expr_mac(*) | expr_struct(*) {\n           visit::visit_expr(expr, self, vt);\n       }\n     }\n@@ -1064,6 +1064,12 @@ class liveness {\n             }\n           }\n \n+          expr_struct(_, fields) {\n+            do fields.foldr(succ) |field, succ| {\n+                self.propagate_through_expr(field.node.expr, succ)\n+            }\n+          }\n+\n           expr_call(f, args, _) {\n             // calling a fn with bot return type means that the fn\n             // will fail, and hence the successors can be ignored\n@@ -1455,7 +1461,8 @@ fn check_expr(expr: @expr, &&self: @liveness, vt: vt<@liveness>) {\n       expr_loop_body(*) | expr_do_body(*) |\n       expr_cast(*) | expr_unary(*) | expr_fail(*) |\n       expr_ret(*) | expr_break | expr_again | expr_lit(_) |\n-      expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) {\n+      expr_block(*) | expr_swap(*) | expr_mac(*) | expr_addr_of(*) |\n+      expr_struct(*) {\n         visit::visit_expr(expr, self, vt);\n       }\n     }"}, {"sha": "e7167eee91a99950ca4997a14d8dd98b64aeca1f", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -155,7 +155,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n     alt e.node {\n       expr_vstore(_, _) |\n       expr_vec(_, _) |\n-      expr_rec(_, _) | expr_tup(_) |\n+      expr_rec(_, _) | expr_struct(*) | expr_tup(_) |\n       expr_unary(box(_), _) | expr_unary(uniq(_), _) |\n       expr_binary(add, _, _) |\n       expr_copy(_) | expr_move(_, _) {"}, {"sha": "7403c7628461e878524a19ee44f6ce6e09d5ddf8", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df4db83ed840b042942a26ed34f126d9829fcd11/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=df4db83ed840b042942a26ed34f126d9829fcd11", "patch": "@@ -1628,6 +1628,9 @@ fn check_expr_with_unifier(fcx: @fn_ctxt,\n           }\n         }\n       }\n+      ast::expr_struct(*) {\n+        fail ~\"XXX structs\";\n+      }\n       ast::expr_field(base, field, tys) {\n         bot = check_field(fcx, expr, false, base, field, tys);\n       }"}]}