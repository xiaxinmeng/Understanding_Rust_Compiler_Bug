{"sha": "5da166314f71804c2c54abcb1a91ccac7866908b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYTE2NjMxNGY3MTgwNGMyYzU0YWJjYjFhOTFjY2FjNzg2NjkwOGI=", "commit": {"author": {"name": "kvark", "email": "kvarkus@gmail.com", "date": "2014-01-08T01:21:04Z"}, "committer": {"name": "kvark", "email": "kvarkus@gmail.com", "date": "2014-01-08T01:21:25Z"}, "message": "Fixed Gc::clone, implemented Gc::ptr_eq", "tree": {"sha": "6845367a3ededaf70649126f77ae2a8b03f244db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6845367a3ededaf70649126f77ae2a8b03f244db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5da166314f71804c2c54abcb1a91ccac7866908b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5da166314f71804c2c54abcb1a91ccac7866908b", "html_url": "https://github.com/rust-lang/rust/commit/5da166314f71804c2c54abcb1a91ccac7866908b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5da166314f71804c2c54abcb1a91ccac7866908b/comments", "author": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kvark", "id": 107301, "node_id": "MDQ6VXNlcjEwNzMwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/107301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kvark", "html_url": "https://github.com/kvark", "followers_url": "https://api.github.com/users/kvark/followers", "following_url": "https://api.github.com/users/kvark/following{/other_user}", "gists_url": "https://api.github.com/users/kvark/gists{/gist_id}", "starred_url": "https://api.github.com/users/kvark/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kvark/subscriptions", "organizations_url": "https://api.github.com/users/kvark/orgs", "repos_url": "https://api.github.com/users/kvark/repos", "events_url": "https://api.github.com/users/kvark/events{/privacy}", "received_events_url": "https://api.github.com/users/kvark/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0", "html_url": "https://github.com/rust-lang/rust/commit/7613b15fdbbb9bf770a2c731f4135886b0ff3cf0"}], "stats": {"total": 28, "additions": 25, "deletions": 3}, "files": [{"sha": "1b53c70a9a1f27276fe93453ebb2287ebd2cd963", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/5da166314f71804c2c54abcb1a91ccac7866908b/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5da166314f71804c2c54abcb1a91ccac7866908b/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=5da166314f71804c2c54abcb1a91ccac7866908b", "patch": "@@ -18,10 +18,10 @@ collector is task-local so `Gc<T>` is not sendable.\n \n use kinds::Send;\n use clone::{Clone, DeepClone};\n+use managed;\n \n /// Immutable garbage-collected pointer type\n #[no_send]\n-#[deriving(Clone)]\n pub struct Gc<T> {\n     priv ptr: @T\n }\n@@ -32,14 +32,26 @@ impl<T: 'static> Gc<T> {\n     pub fn new(value: T) -> Gc<T> {\n         Gc { ptr: @value }\n     }\n-}\n \n-impl<T: 'static> Gc<T> {\n     /// Borrow the value contained in the garbage-collected box\n     #[inline]\n     pub fn borrow<'r>(&'r self) -> &'r T {\n         &*self.ptr\n     }\n+\n+    /// Determine if two garbage-collected boxes point to the same object\n+    #[inline]\n+    pub fn ptr_eq(&self, other: &Gc<T>) -> bool {\n+        managed::ptr_eq(self.ptr, other.ptr)\n+    }\n+}\n+\n+impl<T> Clone for Gc<T> {\n+    /// Clone the pointer only\n+    #[inline]\n+    fn clone(&self) -> Gc<T> {\n+        Gc{ ptr: self.ptr }\n+    }\n }\n \n /// The `Send` bound restricts this to acyclic graphs where it is well-defined.\n@@ -92,6 +104,16 @@ mod tests {\n         assert_eq!(*y.borrow(), 5);\n     }\n \n+    #[test]\n+    fn test_ptr_eq() {\n+        let x = Gc::new(5);\n+        let y = x.clone();\n+        let z = Gc::new(7);\n+        assert!(x.ptr_eq(&x));\n+        assert!(x.ptr_eq(&y));\n+        assert!(!x.ptr_eq(&z));\n+    }\n+\n     #[test]\n     fn test_destructor() {\n         let x = Gc::new(~5);"}]}