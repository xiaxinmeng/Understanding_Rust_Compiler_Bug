{"sha": "7d7715fbbce214b242cad15e06aea088cdfaa141", "node_id": "C_kwDOAAsO6NoAKDdkNzcxNWZiYmNlMjE0YjI0MmNhZDE1ZTA2YWVhMDg4Y2RmYWExNDE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-02T23:43:17Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-04-02T23:43:17Z"}, "message": "Suggest borrowing when trying to coerce unsized type into dyn Trait", "tree": {"sha": "e306fff605e534cb2d07e8101e9204adc38e4f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e306fff605e534cb2d07e8101e9204adc38e4f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7715fbbce214b242cad15e06aea088cdfaa141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7715fbbce214b242cad15e06aea088cdfaa141", "html_url": "https://github.com/rust-lang/rust/commit/7d7715fbbce214b242cad15e06aea088cdfaa141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7715fbbce214b242cad15e06aea088cdfaa141/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbc45b650a9c517ca87b0af8f108efbf50689299", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbc45b650a9c517ca87b0af8f108efbf50689299", "html_url": "https://github.com/rust-lang/rust/commit/fbc45b650a9c517ca87b0af8f108efbf50689299"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "0a22c025209396e07bcc883ed912616ba82c747e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d7715fbbce214b242cad15e06aea088cdfaa141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7715fbbce214b242cad15e06aea088cdfaa141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=7d7715fbbce214b242cad15e06aea088cdfaa141", "patch": "@@ -474,6 +474,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             err.span_label(span, explanation);\n                         }\n \n+                        if let ObligationCauseCode::ObjectCastObligation(obj_ty) = obligation.cause.code().peel_derives() &&\n+                           let Some(self_ty) = trait_predicate.self_ty().no_bound_vars() &&\n+                           Some(trait_ref.def_id()) == self.tcx.lang_items().sized_trait() {\n+                            self.suggest_borrowing_for_object_cast(&mut err, &obligation, self_ty, *obj_ty);\n+                        }\n+\n                         if trait_predicate.is_const_if_const() && obligation.param_env.is_const() {\n                             let non_const_predicate = trait_ref.without_const();\n                             let non_const_obligation = Obligation {"}, {"sha": "105e3380486800ad0dffbecebcf3640bb31a277c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7d7715fbbce214b242cad15e06aea088cdfaa141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7715fbbce214b242cad15e06aea088cdfaa141/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=7d7715fbbce214b242cad15e06aea088cdfaa141", "patch": "@@ -77,6 +77,14 @@ pub trait InferCtxtExt<'tcx> {\n         has_custom_message: bool,\n     ) -> bool;\n \n+    fn suggest_borrowing_for_object_cast(\n+        &self,\n+        err: &mut Diagnostic,\n+        obligation: &PredicateObligation<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        object_ty: Ty<'tcx>,\n+    );\n+\n     fn suggest_remove_reference(\n         &self,\n         obligation: &PredicateObligation<'tcx>,\n@@ -801,6 +809,35 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         }\n     }\n \n+    // Suggest borrowing the type\n+    fn suggest_borrowing_for_object_cast(\n+        &self,\n+        err: &mut Diagnostic,\n+        obligation: &PredicateObligation<'tcx>,\n+        self_ty: Ty<'tcx>,\n+        object_ty: Ty<'tcx>,\n+    ) {\n+        let ty::Dynamic(predicates, _) = object_ty.kind() else { return; };\n+        let self_ref_ty = self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, self_ty);\n+\n+        for predicate in predicates.iter() {\n+            if !self.predicate_must_hold_modulo_regions(\n+                &obligation.with(predicate.with_self_ty(self.tcx, self_ref_ty)),\n+            ) {\n+                return;\n+            }\n+        }\n+\n+        err.span_suggestion(\n+            obligation.cause.span.shrink_to_lo(),\n+            &format!(\n+                \"consider borrowing the value, since `&{self_ty}` can be coerced into `{object_ty}`\"\n+            ),\n+            \"&\".to_string(),\n+            Applicability::MaybeIncorrect,\n+        );\n+    }\n+\n     /// Whenever references are used by mistake, like `for (i, e) in &vec.iter().enumerate()`,\n     /// suggest removing these references until we reach a type that implements the trait.\n     fn suggest_remove_reference("}, {"sha": "b96b07c91a1feb9630824f6086f6b0958cfb5ac2", "filename": "src/test/ui/issues/issue-14366.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14366.stderr?ref=7d7715fbbce214b242cad15e06aea088cdfaa141", "patch": "@@ -6,6 +6,10 @@ LL |     let _x = \"test\" as &dyn (::std::any::Any);\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn Any`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn Any`\n+   |\n+LL |     let _x = &\"test\" as &dyn (::std::any::Any);\n+   |              +\n \n error: aborting due to previous error\n "}, {"sha": "84220ea172a11547c5c54cdc3ab99523b67d4e7d", "filename": "src/test/ui/mismatched_types/cast-rfc0401.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fcast-rfc0401.stderr?ref=7d7715fbbce214b242cad15e06aea088cdfaa141", "patch": "@@ -224,6 +224,10 @@ LL |     let _ = fat_v as *const dyn Foo;\n    |\n    = help: the trait `Sized` is not implemented for `[u8]`\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider borrowing the value, since `&[u8]` can be coerced into `dyn Foo`\n+   |\n+LL |     let _ = &fat_v as *const dyn Foo;\n+   |             +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/cast-rfc0401.rs:62:13\n@@ -233,6 +237,10 @@ LL |     let _ = a as *const dyn Foo;\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn Foo`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn Foo`\n+   |\n+LL |     let _ = &a as *const dyn Foo;\n+   |             +\n \n error[E0606]: casting `&{float}` as `f32` is invalid\n   --> $DIR/cast-rfc0401.rs:71:30"}, {"sha": "3eecca0fa09d9c7483dcc3f8af69b4db6568762d", "filename": "src/test/ui/unsized/unsized-fn-param.stderr", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7715fbbce214b242cad15e06aea088cdfaa141/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized%2Funsized-fn-param.stderr?ref=7d7715fbbce214b242cad15e06aea088cdfaa141", "patch": "@@ -6,6 +6,10 @@ LL |     foo11(\"bar\", &\"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     foo11(&\"bar\", &\"baz\");\n+   |           +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:13:19\n@@ -15,6 +19,10 @@ LL |     foo12(&\"bar\", \"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<Path>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<Path>`\n+   |\n+LL |     foo12(&\"bar\", &\"baz\");\n+   |                   +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:16:11\n@@ -24,6 +32,10 @@ LL |     foo21(\"bar\", &\"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   |\n+LL |     foo21(&\"bar\", &\"baz\");\n+   |           +\n \n error[E0277]: the size for values of type `str` cannot be known at compilation time\n   --> $DIR/unsized-fn-param.rs:18:19\n@@ -33,6 +45,10 @@ LL |     foo22(&\"bar\", \"baz\");\n    |\n    = help: the trait `Sized` is not implemented for `str`\n    = note: required for the cast to the object type `dyn AsRef<str>`\n+help: consider borrowing the value, since `&str` can be coerced into `dyn AsRef<str>`\n+   |\n+LL |     foo22(&\"bar\", &\"baz\");\n+   |                   +\n \n error: aborting due to 4 previous errors\n "}]}