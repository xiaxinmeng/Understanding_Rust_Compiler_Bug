{"sha": "37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "node_id": "C_kwDOAAsO6NoAKDM3YTExYTk2YTFiM2FkNjhjNDBjYzI5MzI3MGNmOGZmYmU3OTA0ZGU", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2021-05-07T02:09:35Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-25T18:04:33Z"}, "message": "On type mismatch caused by assignment, point at assignee\n\n* Do not emit unnecessary E0308 after E0070\n* Show fewer errors on `while let` missing `let`\n* Hide redundant E0308 on `while let` missing `let`\n* Point at binding definition when possible on invalid assignment\n* do not point at closure twice\n* do not suggest `if let` for literals in lhs\n* account for parameter types", "tree": {"sha": "1247cf8878724a5f024a4c156055102641559d01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1247cf8878724a5f024a4c156055102641559d01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "html_url": "https://github.com/rust-lang/rust/commit/37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "862962b90e59c5c1e217df74de80d3a81eee42f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/862962b90e59c5c1e217df74de80d3a81eee42f4", "html_url": "https://github.com/rust-lang/rust/commit/862962b90e59c5c1e217df74de80d3a81eee42f4"}], "stats": {"total": 414, "additions": 297, "deletions": 117}, "files": [{"sha": "9c579209fe51c448d952952c7888388279191670", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -915,14 +915,22 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             );\n         }\n         if !self.sess.features_untracked().destructuring_assignment {\n-            feature_err(\n+            let mut err = feature_err(\n                 &self.sess.parse_sess,\n                 sym::destructuring_assignment,\n                 eq_sign_span,\n                 \"destructuring assignments are unstable\",\n-            )\n-            .span_label(lhs.span, \"cannot assign to this expression\")\n-            .emit();\n+            );\n+            err.span_label(lhs.span, \"cannot assign to this expression\");\n+            if self.is_in_loop_condition {\n+                err.span_suggestion_verbose(\n+                    lhs.span.shrink_to_lo(),\n+                    \"you might have meant to use pattern destructuring\",\n+                    \"let \".to_string(),\n+                    rustc_errors::Applicability::MachineApplicable,\n+                );\n+            }\n+            err.emit();\n         }\n \n         let mut assignments = vec![];"}, {"sha": "77f7cccc04ba4fe5a5fa0995f8530454b39cea63", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1458,7 +1458,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error,\n+                            coercion_error.clone(),\n                             fcx,\n                             parent_id,\n                             expression.map(|expr| (expr, blk_id)),\n@@ -1472,7 +1472,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                             cause,\n                             expected,\n                             found,\n-                            coercion_error,\n+                            coercion_error.clone(),\n                             fcx,\n                             id,\n                             None,\n@@ -1483,7 +1483,12 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                         }\n                     }\n                     _ => {\n-                        err = fcx.report_mismatched_types(cause, expected, found, coercion_error);\n+                        err = fcx.report_mismatched_types(\n+                            cause,\n+                            expected,\n+                            found,\n+                            coercion_error.clone(),\n+                        );\n                     }\n                 }\n \n@@ -1492,7 +1497,14 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                 }\n \n                 if let Some(expr) = expression {\n-                    fcx.emit_coerce_suggestions(&mut err, expr, found, expected, None);\n+                    fcx.emit_coerce_suggestions(\n+                        &mut err,\n+                        expr,\n+                        found,\n+                        expected,\n+                        None,\n+                        coercion_error,\n+                    );\n                 }\n \n                 err.emit_unless(unsized_return);"}, {"sha": "5d121913aac98f47443361a5278d26e73d3cb119", "filename": "compiler/rustc_typeck/src/check/demand.rs", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdemand.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -10,6 +10,7 @@ use rustc_hir::lang_items::LangItem;\n use rustc_hir::{is_range_literal, Node};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n+use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self, AssocItem, Ty, TypeAndMut};\n use rustc_span::symbol::sym;\n@@ -27,8 +28,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr_ty: Ty<'tcx>,\n         expected: Ty<'tcx>,\n         expected_ty_expr: Option<&'tcx hir::Expr<'tcx>>,\n+        error: TypeError<'tcx>,\n     ) {\n-        self.annotate_expected_due_to_let_ty(err, expr);\n+        self.annotate_expected_due_to_let_ty(err, expr, error);\n         self.suggest_box_deref(err, expr, expected, expr_ty);\n         self.suggest_compatible_variants(err, expr, expected, expr_ty);\n         self.suggest_deref_ref_or_into(err, expr, expected, expr_ty, expected_ty_expr);\n@@ -145,9 +147,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let expr = expr.peel_drop_temps();\n         let cause = self.misc(expr.span);\n         let expr_ty = self.resolve_vars_with_obligations(checked_ty);\n-        let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e);\n+        let mut err = self.report_mismatched_types(&cause, expected, expr_ty, e.clone());\n \n-        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr);\n+        self.emit_coerce_suggestions(&mut err, expr, expr_ty, expected, expected_ty_expr, e);\n \n         (expected, Some(err))\n     }\n@@ -156,15 +158,80 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         err: &mut DiagnosticBuilder<'_>,\n         expr: &hir::Expr<'_>,\n+        error: TypeError<'_>,\n     ) {\n         let parent = self.tcx.hir().get_parent_node(expr.hir_id);\n-        if let Some(hir::Node::Local(hir::Local { ty: Some(ty), init: Some(init), .. })) =\n-            self.tcx.hir().find(parent)\n-        {\n-            if init.hir_id == expr.hir_id {\n+        match (self.tcx.hir().find(parent), error) {\n+            (Some(hir::Node::Local(hir::Local { ty: Some(ty), init: Some(init), .. })), _)\n+                if init.hir_id == expr.hir_id =>\n+            {\n                 // Point at `let` assignment type.\n                 err.span_label(ty.span, \"expected due to this\");\n             }\n+            (\n+                Some(hir::Node::Expr(hir::Expr {\n+                    kind: hir::ExprKind::Assign(lhs, rhs, _), ..\n+                })),\n+                TypeError::Sorts(ExpectedFound { expected, .. }),\n+            ) if rhs.hir_id == expr.hir_id && !expected.is_closure() => {\n+                // We ignore closures explicitly because we already point at them elsewhere.\n+                // Point at the assigned-to binding.\n+                let mut primary_span = lhs.span;\n+                let mut secondary_span = lhs.span;\n+                let mut post_message = \"\";\n+                if let hir::ExprKind::Path(hir::QPath::Resolved(\n+                    None,\n+                    hir::Path { res: hir::def::Res::Local(hir_id), .. },\n+                )) = lhs.kind\n+                {\n+                    if let Some(hir::Node::Binding(pat)) = self.tcx.hir().find(*hir_id) {\n+                        let parent = self.tcx.hir().get_parent_node(pat.hir_id);\n+                        primary_span = pat.span;\n+                        secondary_span = pat.span;\n+                        match self.tcx.hir().find(parent) {\n+                            Some(hir::Node::Local(hir::Local { ty: Some(ty), .. })) => {\n+                                primary_span = ty.span;\n+                                post_message = \" type\";\n+                            }\n+                            Some(hir::Node::Local(hir::Local { init: Some(init), .. })) => {\n+                                primary_span = init.span;\n+                                post_message = \" value\";\n+                            }\n+                            Some(hir::Node::Param(hir::Param { ty_span, .. })) => {\n+                                primary_span = *ty_span;\n+                                post_message = \" parameter type\";\n+                            }\n+                            _ => {}\n+                        }\n+                    }\n+                }\n+\n+                if primary_span != secondary_span\n+                    && self\n+                        .tcx\n+                        .sess\n+                        .source_map()\n+                        .is_multiline(secondary_span.shrink_to_hi().until(primary_span))\n+                {\n+                    // We are pointing at the binding's type or initializer value, but it's pattern\n+                    // is in a different line, so we point at both.\n+                    err.span_label(secondary_span, \"expected due to the type of this binding\");\n+                    err.span_label(primary_span, &format!(\"expected due to this{}\", post_message));\n+                } else if post_message == \"\" {\n+                    // We are pointing at either the assignment lhs or the binding def pattern.\n+                    err.span_label(primary_span, \"expected due to the type of this binding\");\n+                } else {\n+                    // We are pointing at the binding's type or initializer value.\n+                    err.span_label(primary_span, &format!(\"expected due to this{}\", post_message));\n+                }\n+\n+                if !lhs.is_syntactic_place_expr() {\n+                    // We already emitted E0070 \"invalid left-hand side of assignment\", so we\n+                    // silence this.\n+                    err.delay_as_bug();\n+                }\n+            }\n+            _ => {}\n         }\n     }\n "}, {"sha": "eb997b014c77b7a04644911545984e524d384f23", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 52, "deletions": 5, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -833,19 +833,66 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         lhs: &'tcx hir::Expr<'tcx>,\n         err_code: &'static str,\n-        expr_span: &Span,\n+        op_span: Span,\n     ) {\n         if lhs.is_syntactic_place_expr() {\n             return;\n         }\n \n         // FIXME: Make this use SessionDiagnostic once error codes can be dynamically set.\n         let mut err = self.tcx.sess.struct_span_err_with_code(\n-            *expr_span,\n+            op_span,\n             \"invalid left-hand side of assignment\",\n             DiagnosticId::Error(err_code.into()),\n         );\n         err.span_label(lhs.span, \"cannot assign to this expression\");\n+\n+        let mut parent = self.tcx.hir().get_parent_node(lhs.hir_id);\n+        while let Some(node) = self.tcx.hir().find(parent) {\n+            match node {\n+                hir::Node::Expr(hir::Expr {\n+                    kind:\n+                        hir::ExprKind::Loop(\n+                            hir::Block {\n+                                expr:\n+                                    Some(hir::Expr {\n+                                        kind:\n+                                            hir::ExprKind::Match(expr, ..) | hir::ExprKind::If(expr, ..),\n+                                        ..\n+                                    }),\n+                                ..\n+                            },\n+                            _,\n+                            hir::LoopSource::While,\n+                            _,\n+                        ),\n+                    ..\n+                }) => {\n+                    // We have a situation like `while Some(0) = value.get(0) {`, where `while let`\n+                    // was more likely intended.\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_lo(),\n+                        \"you might have meant to use pattern destructuring\",\n+                        \"let \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    if !self.sess().features_untracked().destructuring_assignment {\n+                        // We already emit an E0658 with a suggestion for `while let`, this is\n+                        // redundant output.\n+                        err.delay_as_bug();\n+                    }\n+                    break;\n+                }\n+                hir::Node::Item(_)\n+                | hir::Node::ImplItem(_)\n+                | hir::Node::TraitItem(_)\n+                | hir::Node::Crate(_) => break,\n+                _ => {\n+                    parent = self.tcx.hir().get_parent_node(parent);\n+                }\n+            }\n+        }\n+\n         err.emit();\n     }\n \n@@ -953,7 +1000,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 (Applicability::MaybeIncorrect, false)\n             };\n-            if !lhs.is_syntactic_place_expr() {\n+            if !lhs.is_syntactic_place_expr() && !matches!(lhs.kind, hir::ExprKind::Lit(_)) {\n                 // Do not suggest `if let x = y` as `==` is way more likely to be the intention.\n                 let hir = self.tcx.hir();\n                 if let hir::Node::Expr(hir::Expr { kind: ExprKind::If { .. }, .. }) =\n@@ -965,7 +1012,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         \"let \".to_string(),\n                         applicability,\n                     );\n-                }\n+                };\n             }\n             if eq {\n                 err.span_suggestion_verbose(\n@@ -986,7 +1033,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             return self.tcx.ty_error();\n         }\n \n-        self.check_lhs_assignable(lhs, \"E0070\", span);\n+        self.check_lhs_assignable(lhs, \"E0070\", *span);\n \n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n         let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty, Some(lhs));"}, {"sha": "74d7f0a80b6cac9cda51017087a25cc792fefcb1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -737,6 +737,24 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &mut |err| {\n                             if let Some(expected_ty) = expected.only_has_type(self) {\n                                 self.consider_hint_about_removing_semicolon(blk, expected_ty, err);\n+                                if expected_ty == self.tcx.types.bool {\n+                                    // If this is caused by a missing `let` in a `while let`,\n+                                    // silence this redundant error, as we already emit E0070.\n+                                    let parent = self.tcx.hir().get_parent_node(blk.hir_id);\n+                                    let parent = self.tcx.hir().get_parent_node(parent);\n+                                    let parent = self.tcx.hir().get_parent_node(parent);\n+                                    let parent = self.tcx.hir().get_parent_node(parent);\n+                                    let parent = self.tcx.hir().get_parent_node(parent);\n+                                    match self.tcx.hir().find(parent) {\n+                                        Some(hir::Node::Expr(hir::Expr {\n+                                            kind: hir::ExprKind::Loop(_, _, hir::LoopSource::While, _),\n+                                            ..\n+                                        })) => {\n+                                            err.delay_as_bug();\n+                                        }\n+                                        _ => {}\n+                                    }\n+                                }\n                             }\n                             if let Some(fn_span) = fn_span {\n                                 err.span_label("}, {"sha": "f83209f57a897cf54145fd76295746c45faa4e65", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -42,7 +42,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return_ty\n             };\n \n-        self.check_lhs_assignable(lhs, \"E0067\", &op.span);\n+        self.check_lhs_assignable(lhs, \"E0067\", op.span);\n \n         ty\n     }"}, {"sha": "b326dbbbc1405aa6878025adc299b196c9bb5911", "filename": "src/test/ui/dst/dst-bad-assign-3.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign-3.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign-3.rs:33:12\n    |\n LL |     f5.2 = Bar1 {f: 36};\n-   |            ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ----   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     |\n+   |     expected due to the type of this binding\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "614f213875129fa0fb1124b92ff899534000f4fc", "filename": "src/test/ui/dst/dst-bad-assign.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-bad-assign.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/dst-bad-assign.rs:35:14\n    |\n LL |     f5.ptr = Bar1 {f: 36};\n-   |              ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     ------   ^^^^^^^^^^^^ expected trait object `dyn ToBar`, found struct `Bar1`\n+   |     |\n+   |     expected due to the type of this binding\n    |\n    = note: expected trait object `dyn ToBar`\n                     found struct `Bar1`"}, {"sha": "3aae0c9ff6e72ffd4e092e4cc62796ee63fa92d3", "filename": "src/test/ui/error-codes/E0070.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -6,7 +6,6 @@ fn some_function() {\n     SOME_CONST = 14; //~ ERROR E0070\n     1 = 3; //~ ERROR E0070\n     some_other_func() = 4; //~ ERROR E0070\n-                           //~^ ERROR E0308\n }\n \n fn main() {"}, {"sha": "8868bc257a70317e7f25dcf2042477ead9ea0caf", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -22,13 +22,6 @@ LL |     some_other_func() = 4;\n    |     |\n    |     cannot assign to this expression\n \n-error[E0308]: mismatched types\n-  --> $DIR/E0070.rs:8:25\n-   |\n-LL |     some_other_func() = 4;\n-   |                         ^ expected `()`, found integer\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0070, E0308.\n-For more information about an error, try `rustc --explain E0070`.\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "229c174daa86493e75ebf3fa4da83254a2645693", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,10 +1,10 @@\n // Test that we use fully-qualified type names in error messages.\n \n fn main() {\n-    let x: Option<usize>;\n+    let x: //~ NOTE expected due to the type of this binding\n+        Option<usize>; //~ NOTE expected due to this type\n     x = 5;\n     //~^ ERROR mismatched types\n-    //~| expected enum `Option<usize>`\n-    //~| found type `{integer}`\n-    //~| expected enum `Option`, found integer\n+    //~| NOTE expected enum `Option<usize>`\n+    //~| NOTE expected enum `Option`, found integer\n }"}, {"sha": "4750c5ccdf7029c993aceba5b5f00547ae3c1db1", "filename": "src/test/ui/fully-qualified-type/fully-qualified-type-name1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffully-qualified-type%2Ffully-qualified-type-name1.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,10 @@\n error[E0308]: mismatched types\n-  --> $DIR/fully-qualified-type-name1.rs:5:9\n+  --> $DIR/fully-qualified-type-name1.rs:6:9\n    |\n+LL |     let x:\n+   |         - expected due to the type of this binding\n+LL |         Option<usize>;\n+   |         ------------- expected due to this type\n LL |     x = 5;\n    |         ^ expected enum `Option`, found integer\n    |"}, {"sha": "7cfbe3447b8130ac630c90d730799e05b10a039d", "filename": "src/test/ui/impl-trait/impl-trait-in-macro.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fimpl-trait-in-macro.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -7,6 +7,8 @@ LL |     ($($tr:tt)*) => { impl $($tr)* };\n    |                       expected type parameter\n    |                       found type parameter\n ...\n+LL |     let mut a = x;\n+   |                 - expected due to this value\n LL |     a = y;\n    |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |"}, {"sha": "ab8a53d0db399f5b3b7b0d066487d3116578a5b4", "filename": "src/test/ui/impl-trait/universal-two-impl-traits.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Funiversal-two-impl-traits.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -6,6 +6,7 @@ LL | fn foo(x: impl Debug, y: impl Debug) -> String {\n    |           |\n    |           expected type parameter\n LL |     let mut a = x;\n+   |                 - expected due to this value\n LL |     a = y;\n    |         ^ expected type parameter `impl Debug`, found a different type parameter `impl Debug`\n    |"}, {"sha": "8d1621321e8e6ca0b2392181fbe55675601b3849", "filename": "src/test/ui/integral-variable-unification-error.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,8 @@\n fn main() {\n-    let mut x = 2;\n+    let mut x //~ NOTE expected due to the type of this binding\n+        =\n+        2; //~ NOTE expected due to this value\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected integer, found floating-point number\n+    //~| NOTE expected integer, found floating-point number\n }"}, {"sha": "f77c265a2ada7512bf774ef7de204ce0ea6e6042", "filename": "src/test/ui/integral-variable-unification-error.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintegral-variable-unification-error.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,11 @@\n error[E0308]: mismatched types\n-  --> $DIR/integral-variable-unification-error.rs:3:9\n+  --> $DIR/integral-variable-unification-error.rs:5:9\n    |\n+LL |     let mut x\n+   |         ----- expected due to the type of this binding\n+LL |         =\n+LL |         2;\n+   |         - expected due to this value\n LL |     x = 5.0;\n    |         ^^^ expected integer, found floating-point number\n "}, {"sha": "7ea81ffb59e7eebf4d17239c6e9b577703484deb", "filename": "src/test/ui/issues/issue-13407.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -5,6 +5,5 @@ mod A {\n fn main() {\n     A::C = 1;\n     //~^ ERROR: invalid left-hand side of assignment\n-    //~| ERROR: mismatched types\n     //~| ERROR: struct `C` is private\n }"}, {"sha": "54b6c640d9d79cdf23b997ca26431ac1382f0785", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -18,13 +18,7 @@ LL |     A::C = 1;\n    |     |\n    |     cannot assign to this expression\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-13407.rs:6:12\n-   |\n-LL |     A::C = 1;\n-   |            ^ expected struct `C`, found integer\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0070, E0308, E0603.\n+Some errors have detailed explanations: E0070, E0603.\n For more information about an error, try `rustc --explain E0070`."}, {"sha": "538bbe2f50296989940775c9f91150737bb4cfa6", "filename": "src/test/ui/issues/issue-2951.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2951.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -6,6 +6,7 @@ LL | fn foo<T, U>(x: T, y: U) {\n    |        |\n    |        expected type parameter\n LL |     let mut xx = x;\n+   |                  - expected due to this value\n LL |     xx = y;\n    |          ^ expected type parameter `T`, found type parameter `U`\n    |"}, {"sha": "d2f8c77c0ce1122fec3b49629098b1a010021956", "filename": "src/test/ui/issues/issue-53348.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -5,7 +5,7 @@ fn main() {\n \n     v.into_iter().map(|s|s.to_owned()).collect::<Vec<_>>();\n \n-    let mut a = String::new();\n+    let mut a = String::new(); //~ NOTE expected due to this value\n     for i in v {\n         a = *i.to_string();\n         //~^ ERROR mismatched types"}, {"sha": "71d9f5b3dbbff615970a6eb724077ec3c207cf1e", "filename": "src/test/ui/issues/issue-53348.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-53348.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,9 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-53348.rs:10:13\n    |\n+LL |     let mut a = String::new();\n+   |                 ------------- expected due to this value\n+LL |     for i in v {\n LL |         a = *i.to_string();\n    |             ^^^^^^^^^^^^^^ expected struct `String`, found `str`\n "}, {"sha": "a6a2401795ff4690de26464185566ef459dcd38e", "filename": "src/test/ui/issues/issue-77218.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/862962b90e59c5c1e217df74de80d3a81eee42f4/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862962b90e59c5c1e217df74de80d3a81eee42f4/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218.rs?ref=862962b90e59c5c1e217df74de80d3a81eee42f4", "patch": "@@ -1,11 +0,0 @@\n-fn main() {\n-    let value = [7u8];\n-    while Some(0) = value.get(0) { //~ ERROR destructuring assignments are unstable\n-        //~| ERROR invalid left-hand side of assignment\n-        //~| ERROR mismatched types\n-        //~| ERROR mismatched types\n-\n-        // FIXME The following diagnostic should also be emitted\n-        // HELP you might have meant to use pattern matching\n-    }\n-}"}, {"sha": "ce70c0111bee2a19e56a37deade83dca48b22c11", "filename": "src/test/ui/issues/issue-77218.stderr", "status": "removed", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/862962b90e59c5c1e217df74de80d3a81eee42f4/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/862962b90e59c5c1e217df74de80d3a81eee42f4/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218.stderr?ref=862962b90e59c5c1e217df74de80d3a81eee42f4", "patch": "@@ -1,40 +0,0 @@\n-error[E0658]: destructuring assignments are unstable\n-  --> $DIR/issue-77218.rs:3:19\n-   |\n-LL |     while Some(0) = value.get(0) {\n-   |           ------- ^\n-   |           |\n-   |           cannot assign to this expression\n-   |\n-   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n-   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n-\n-error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-77218.rs:3:19\n-   |\n-LL |     while Some(0) = value.get(0) {\n-   |                -  ^\n-   |                |\n-   |                cannot assign to this expression\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-77218.rs:3:16\n-   |\n-LL |     while Some(0) = value.get(0) {\n-   |                ^ expected integer, found `&u8`\n-   |\n-help: consider dereferencing the borrow\n-   |\n-LL |     while Some(*0) = value.get(0) {\n-   |                +\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-77218.rs:3:11\n-   |\n-LL |     while Some(0) = value.get(0) {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^ expected `bool`, found `()`\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors have detailed explanations: E0070, E0308, E0658.\n-For more information about an error, try `rustc --explain E0070`."}, {"sha": "06487fe0886f992daeb4b7e1e817b27fb4b0a56f", "filename": "src/test/ui/issues/issue-77218/issue-77218-2.fixed", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.fixed?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![feature(destructuring_assignment)]\n+fn main() {\n+    let value = [7u8];\n+    while let Some(0) = value.get(0) { //~ ERROR invalid left-hand side of assignment\n+    }\n+}"}, {"sha": "e19cec08e43180ff871b8b9491ab418d7cc11f8a", "filename": "src/test/ui/issues/issue-77218/issue-77218-2.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,7 @@\n+// run-rustfix\n+#![feature(destructuring_assignment)]\n+fn main() {\n+    let value = [7u8];\n+    while Some(0) = value.get(0) { //~ ERROR invalid left-hand side of assignment\n+    }\n+}"}, {"sha": "8d9eb2219d54c34bcc67779879e44c062af8d635", "filename": "src/test/ui/issues/issue-77218/issue-77218-2.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218-2.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,16 @@\n+error[E0070]: invalid left-hand side of assignment\n+  --> $DIR/issue-77218-2.rs:5:19\n+   |\n+LL |     while Some(0) = value.get(0) {\n+   |                -  ^\n+   |                |\n+   |                cannot assign to this expression\n+   |\n+help: you might have meant to use pattern destructuring\n+   |\n+LL |     while let Some(0) = value.get(0) {\n+   |           +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0070`."}, {"sha": "4ea5110902225d714abd62be64b756fc521d940f", "filename": "src/test/ui/issues/issue-77218/issue-77218.fixed", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.fixed?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+fn main() {\n+    let value = [7u8];\n+    while let Some(0) = value.get(0) { //~ ERROR destructuring assignments are unstable\n+    }\n+}"}, {"sha": "0f3c12f56351dddfa0751609e096212d82252bf4", "filename": "src/test/ui/issues/issue-77218/issue-77218.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.rs?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,6 @@\n+// run-rustfix\n+fn main() {\n+    let value = [7u8];\n+    while Some(0) = value.get(0) { //~ ERROR destructuring assignments are unstable\n+    }\n+}"}, {"sha": "54f49609a4427f7be09b772990bba5bbc944c9b0", "filename": "src/test/ui/issues/issue-77218/issue-77218.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77218%2Fissue-77218.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -0,0 +1,18 @@\n+error[E0658]: destructuring assignments are unstable\n+  --> $DIR/issue-77218.rs:4:19\n+   |\n+LL |     while Some(0) = value.get(0) {\n+   |           ------- ^\n+   |           |\n+   |           cannot assign to this expression\n+   |\n+   = note: see issue #71126 <https://github.com/rust-lang/rust/issues/71126> for more information\n+   = help: add `#![feature(destructuring_assignment)]` to the crate attributes to enable\n+help: you might have meant to use pattern destructuring\n+   |\n+LL |     while let Some(0) = value.get(0) {\n+   |           +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "f8f2b1f0f57204c9120a693b43852f7e441d73f8", "filename": "src/test/ui/mismatched_types/issue-84976.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-84976.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -7,6 +7,9 @@ LL |     length = { foo(&length) };\n error[E0308]: mismatched types\n   --> $DIR/issue-84976.rs:17:14\n    |\n+LL |     let mut length = 0;\n+   |                      - expected due to this value\n+...\n LL |     length = foo(&length);\n    |              ^^^^^^^^^^^^ expected `u32`, found `i32`\n \n@@ -19,6 +22,9 @@ LL |     float_length = { bar(&float_length) };\n error[E0308]: mismatched types\n   --> $DIR/issue-84976.rs:23:20\n    |\n+LL |     let mut float_length = 0.0;\n+   |                            --- expected due to this value\n+...\n LL |     float_length = bar(&float_length);\n    |                    ^^^^^^^^^^^^^^^^^^ expected `f32`, found `f64`\n "}, {"sha": "4507a4df621e1c2fde27ad96a18cf3ce4791dee3", "filename": "src/test/ui/output-type-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foutput-type-mismatch.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/output-type-mismatch.rs:5:31\n    |\n LL | fn main() { let i: isize; i = f(); }\n-   |                               ^^^ expected `isize`, found `()`\n+   |                    -----      ^^^ expected `isize`, found `()`\n+   |                    |\n+   |                    expected due to this type\n \n error: aborting due to previous error\n "}, {"sha": "e5a59de6f146162ce5e969a9489c025cd278fc91", "filename": "src/test/ui/static/static-mut-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-mut-bad-types.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -2,7 +2,9 @@ error[E0308]: mismatched types\n   --> $DIR/static-mut-bad-types.rs:5:13\n    |\n LL |         a = true;\n-   |             ^^^^ expected `isize`, found `bool`\n+   |         -   ^^^^ expected `isize`, found `bool`\n+   |         |\n+   |         expected due to the type of this binding\n \n error: aborting due to previous error\n "}, {"sha": "058f42f2200644955c0b6da29a47a034a83d5e4a", "filename": "src/test/ui/suggestions/if-let-typo.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fif-let-typo.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -70,11 +70,6 @@ error[E0308]: mismatched types\n    |\n LL |     if 3 = foo {}\n    |        ^^^^^^^ expected `bool`, found `()`\n-   |\n-help: you might have meant to use pattern matching\n-   |\n-LL |     if let 3 = foo {}\n-   |        +++\n \n error[E0070]: invalid left-hand side of assignment\n   --> $DIR/if-let-typo.rs:10:16"}, {"sha": "3bd98c7630780a5c9ee02b44418ee0196df4e496", "filename": "src/test/ui/suggestions/mut-ref-reassignment.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmut-ref-reassignment.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:2:11\n    |\n+LL | fn suggestion(opt: &mut Option<String>) {\n+   |                    ------------------- expected due to this parameter type\n LL |     opt = None;\n    |           ^^^^ expected mutable reference, found enum `Option`\n    |\n@@ -14,6 +16,8 @@ LL |     *opt = None;\n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:6:11\n    |\n+LL | fn no_suggestion(opt: &mut Result<String, ()>) {\n+   |                       ----------------------- expected due to this parameter type\n LL |     opt = None\n    |           ^^^^ expected mutable reference, found enum `Option`\n    |\n@@ -23,6 +27,8 @@ LL |     opt = None\n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:10:11\n    |\n+LL | fn suggestion2(opt: &mut Option<String>) {\n+   |                     ------------------- expected due to this parameter type\n LL |     opt = Some(String::new())\n    |           ^^^^^^^^^^^^^^^^^^^ expected mutable reference, found enum `Option`\n    |\n@@ -36,6 +42,8 @@ LL |     *opt = Some(String::new())\n error[E0308]: mismatched types\n   --> $DIR/mut-ref-reassignment.rs:14:11\n    |\n+LL | fn no_suggestion2(opt: &mut Option<String>) {\n+   |                        ------------------- expected due to this parameter type\n LL |     opt = Some(42)\n    |           ^^^^^^^^ expected mutable reference, found enum `Option`\n    |"}, {"sha": "a87e44a048b250c09704b31158b51aacf0c8a60c", "filename": "src/test/ui/type-alias-impl-trait/argument-types.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fargument-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fargument-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fargument-types.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -4,6 +4,8 @@ error[E0308]: mismatched types\n LL | type Foo = impl Debug;\n    |            ---------- the expected opaque type\n ...\n+LL | fn foo1(mut x: Foo) {\n+   |                --- expected due to this parameter type\n LL |     x = 22_u32;\n    |         ^^^^^^ expected opaque type, found `u32`\n    |"}, {"sha": "e2b821f7b05e902abceaba706a4fd1f5494f3dd4", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -48,10 +48,6 @@ error[E0308]: mismatched types\n LL |     if 0 = 0 {}\n    |        ^^^^^ expected `bool`, found `()`\n    |\n-help: you might have meant to use pattern matching\n-   |\n-LL |     if let 0 = 0 {}\n-   |        +++\n help: you might have meant to compare for equality\n    |\n LL |     if 0 == 0 {}"}, {"sha": "f4ef44e2444ee9387d10551511d178323679d634", "filename": "src/test/ui/type/type-check/assignment-in-if.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-in-if.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -37,10 +37,6 @@ error[E0308]: mismatched types\n LL |     if 3 = x {\n    |        ^^^^^ expected `bool`, found `()`\n    |\n-help: you might have meant to use pattern matching\n-   |\n-LL |     if let 3 = x {\n-   |        +++\n help: you might have meant to compare for equality\n    |\n LL |     if 3 == x {"}, {"sha": "c545a563b0d0ab1e0abdd8e348113939582e7fc1", "filename": "src/test/ui/typeck/issue-81293.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-81293.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -7,6 +7,9 @@ LL |     a = c + b * 5;\n error[E0308]: mismatched types\n   --> $DIR/issue-81293.rs:6:9\n    |\n+LL |     let a: u16;\n+   |            --- expected due to this type\n+...\n LL |     a = c + b * 5;\n    |         ^^^^^^^^^ expected `u16`, found `usize`\n "}, {"sha": "56817ee2ca9f823f71b060b4cedf994edcb8e83e", "filename": "src/test/ui/typeck/issue-87771-ice-assign-assign-to-bool.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37a11a96a1b3ad68c40cc293270cf8ffbe7904de/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87771-ice-assign-assign-to-bool.stderr?ref=37a11a96a1b3ad68c40cc293270cf8ffbe7904de", "patch": "@@ -1,6 +1,8 @@\n error[E0308]: mismatched types\n   --> $DIR/issue-87771-ice-assign-assign-to-bool.rs:3:9\n    |\n+LL |     let mut a;\n+   |         ----- expected due to the type of this binding\n LL |     a = a = true;\n    |         ^^^^^^^^ expected `bool`, found `()`\n "}]}