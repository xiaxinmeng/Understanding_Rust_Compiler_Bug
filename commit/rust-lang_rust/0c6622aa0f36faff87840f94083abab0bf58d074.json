{"sha": "0c6622aa0f36faff87840f94083abab0bf58d074", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjNjYyMmFhMGYzNmZhZmY4Nzg0MGY5NDA4M2FiYWIwYmY1OGQwNzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-03-01T01:46:09Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-03-02T06:40:53Z"}, "message": "librustdoc: Fix errors arising from the automated `~[T]` conversion", "tree": {"sha": "363a0ef06914e07951a97915891bd0bc002ce954", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363a0ef06914e07951a97915891bd0bc002ce954"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c6622aa0f36faff87840f94083abab0bf58d074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c6622aa0f36faff87840f94083abab0bf58d074", "html_url": "https://github.com/rust-lang/rust/commit/0c6622aa0f36faff87840f94083abab0bf58d074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c6622aa0f36faff87840f94083abab0bf58d074/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1ed4d7d41a9acaabaeabc0799e04033fb961a30", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ed4d7d41a9acaabaeabc0799e04033fb961a30", "html_url": "https://github.com/rust-lang/rust/commit/c1ed4d7d41a9acaabaeabc0799e04033fb961a30"}], "stats": {"total": 152, "additions": 97, "deletions": 55}, "files": [{"sha": "ce922e7d6951f2507f17fbbb97572662cb77c278", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 61, "deletions": 32, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/0c6622aa0f36faff87840f94083abab0bf58d074/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6622aa0f36faff87840f94083abab0bf58d074/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=0c6622aa0f36faff87840f94083abab0bf58d074", "patch": "@@ -29,6 +29,7 @@ use std;\n use doctree;\n use visit_ast;\n use std::local_data;\n+use std::vec_ng::Vec;\n \n pub trait Clean<T> {\n     fn clean(&self) -> T;\n@@ -39,6 +40,13 @@ impl<T: Clean<U>, U> Clean<~[U]> for ~[T] {\n         self.iter().map(|x| x.clean()).collect()\n     }\n }\n+\n+impl<T: Clean<U>, U> Clean<Vec<U>> for Vec<T> {\n+    fn clean(&self) -> Vec<U> {\n+        self.iter().map(|x| x.clean()).collect()\n+    }\n+}\n+\n impl<T: Clean<U>, U> Clean<U> for @T {\n     fn clean(&self) -> U {\n         (**self).clean()\n@@ -54,10 +62,10 @@ impl<T: Clean<U>, U> Clean<Option<U>> for Option<T> {\n     }\n }\n \n-impl<T: Clean<U>, U> Clean<~[U]> for syntax::opt_vec::OptVec<T> {\n-    fn clean(&self) -> ~[U] {\n+impl<T: Clean<U>, U> Clean<Vec<U>> for syntax::opt_vec::OptVec<T> {\n+    fn clean(&self) -> Vec<U> {\n         match self {\n-            &syntax::opt_vec::Empty => ~[],\n+            &syntax::opt_vec::Empty => Vec::new(),\n             &syntax::opt_vec::Vec(ref v) => v.clean()\n         }\n     }\n@@ -196,6 +204,25 @@ impl Clean<Item> for doctree::Module {\n         } else {\n             ~\"\"\n         };\n+        let mut foreigns = ~[];\n+        for subforeigns in self.foreigns.clean().move_iter() {\n+            for foreign in subforeigns.move_iter() {\n+                foreigns.push(foreign)\n+            }\n+        }\n+        let items: ~[~[Item]] = ~[\n+            self.structs.clean().move_iter().collect(),\n+            self.enums.clean().move_iter().collect(),\n+            self.fns.clean().move_iter().collect(),\n+            foreigns,\n+            self.mods.clean().move_iter().collect(),\n+            self.typedefs.clean().move_iter().collect(),\n+            self.statics.clean().move_iter().collect(),\n+            self.traits.clean().move_iter().collect(),\n+            self.impls.clean().move_iter().collect(),\n+            self.view_items.clean().move_iter().collect(),\n+            self.macros.clean().move_iter().collect()\n+        ];\n         Item {\n             name: Some(name),\n             attrs: self.attrs.clean(),\n@@ -204,12 +231,7 @@ impl Clean<Item> for doctree::Module {\n             id: self.id,\n             inner: ModuleItem(Module {\n                is_crate: self.is_crate,\n-               items: [self.structs.clean(), self.enums.clean(),\n-                       self.fns.clean(), self.foreigns.clean().concat_vec(),\n-                       self.mods.clean(), self.typedefs.clean(),\n-                       self.statics.clean(), self.traits.clean(),\n-                       self.impls.clean(), self.view_items.clean(),\n-                       self.macros.clean()].concat_vec()\n+               items: items.concat_vec(),\n             })\n         }\n     }\n@@ -227,7 +249,7 @@ impl Clean<Attribute> for ast::MetaItem {\n         match self.node {\n             ast::MetaWord(ref s) => Word(s.get().to_owned()),\n             ast::MetaList(ref s, ref l) => {\n-                List(s.get().to_owned(), l.clean())\n+                List(s.get().to_owned(), l.clean().move_iter().collect())\n             }\n             ast::MetaNameValue(ref s, ref v) => {\n                 NameValue(s.get().to_owned(), lit_to_str(v))\n@@ -276,7 +298,7 @@ impl Clean<TyParam> for ast::TyParam {\n         TyParam {\n             name: self.ident.clean(),\n             id: self.id,\n-            bounds: self.bounds.clean(),\n+            bounds: self.bounds.clean().move_iter().collect(),\n         }\n     }\n }\n@@ -323,8 +345,8 @@ pub struct Generics {\n impl Clean<Generics> for ast::Generics {\n     fn clean(&self) -> Generics {\n         Generics {\n-            lifetimes: self.lifetimes.clean(),\n-            type_params: self.ty_params.clean(),\n+            lifetimes: self.lifetimes.clean().move_iter().collect(),\n+            type_params: self.ty_params.clean().move_iter().collect(),\n         }\n     }\n }\n@@ -353,7 +375,7 @@ impl Clean<Item> for ast::Method {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean(),\n+            attrs: self.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n             id: self.id.clone(),\n             visibility: self.vis.clean(),\n@@ -391,7 +413,7 @@ impl Clean<Item> for ast::TypeMethod {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean(),\n+            attrs: self.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n             id: self.id,\n             visibility: None,\n@@ -464,12 +486,12 @@ impl Clean<ClosureDecl> for ast::ClosureTy {\n         ClosureDecl {\n             sigil: self.sigil,\n             region: self.region.clean(),\n-            lifetimes: self.lifetimes.clean(),\n+            lifetimes: self.lifetimes.clean().move_iter().collect(),\n             decl: self.decl.clean(),\n             onceness: self.onceness,\n             purity: self.purity,\n             bounds: match self.bounds {\n-                Some(ref x) => x.clean(),\n+                Some(ref x) => x.clean().move_iter().collect(),\n                 None        => ~[]\n             },\n         }\n@@ -673,8 +695,11 @@ impl Clean<Type> for ast::Ty {\n             TyFixedLengthVec(ty, ref e) => FixedVector(~ty.clean(),\n                                                        e.span.to_src()),\n             TyTup(ref tys) => Tuple(tys.iter().map(|x| x.clean()).collect()),\n-            TyPath(ref p, ref tpbs, id) =>\n-                resolve_type(p.clean(), tpbs.clean(), id),\n+            TyPath(ref p, ref tpbs, id) => {\n+                resolve_type(p.clean(),\n+                             tpbs.clean().map(|x| x.move_iter().collect()),\n+                             id)\n+            }\n             TyClosure(ref c) => Closure(~c.clean()),\n             TyBareFn(ref barefn) => BareFunction(~barefn.clean()),\n             TyBot => Bottom,\n@@ -696,7 +721,7 @@ impl Clean<Item> for ast::StructField {\n         };\n         Item {\n             name: name.clean(),\n-            attrs: self.node.attrs.clean(),\n+            attrs: self.node.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n             visibility: vis,\n             id: self.node.id,\n@@ -755,7 +780,7 @@ impl Clean<VariantStruct> for syntax::ast::StructDef {\n     fn clean(&self) -> VariantStruct {\n         VariantStruct {\n             struct_type: doctree::struct_type_from_def(self),\n-            fields: self.fields.clean(),\n+            fields: self.fields.clean().move_iter().collect(),\n             fields_stripped: false,\n         }\n     }\n@@ -862,7 +887,7 @@ impl Clean<Path> for ast::Path {\n     fn clean(&self) -> Path {\n         Path {\n             global: self.global,\n-            segments: self.segments.clean()\n+            segments: self.segments.clean().move_iter().collect(),\n         }\n     }\n }\n@@ -878,8 +903,8 @@ impl Clean<PathSegment> for ast::PathSegment {\n     fn clean(&self) -> PathSegment {\n         PathSegment {\n             name: self.identifier.clean(),\n-            lifetimes: self.lifetimes.clean(),\n-            types: self.types.clean()\n+            lifetimes: self.lifetimes.clean().move_iter().collect(),\n+            types: self.types.clean().move_iter().collect()\n         }\n     }\n }\n@@ -941,7 +966,7 @@ impl Clean<BareFunctionDecl> for ast::BareFnTy {\n         BareFunctionDecl {\n             purity: self.purity,\n             generics: Generics {\n-                lifetimes: self.lifetimes.clean(),\n+                lifetimes: self.lifetimes.clean().move_iter().collect(),\n                 type_params: ~[],\n             },\n             decl: self.decl.clean(),\n@@ -1028,7 +1053,7 @@ impl Clean<Item> for ast::ViewItem {\n     fn clean(&self) -> Item {\n         Item {\n             name: None,\n-            attrs: self.attrs.clean(),\n+            attrs: self.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n             id: 0,\n             visibility: self.vis.clean(),\n@@ -1055,7 +1080,9 @@ impl Clean<ViewItemInner> for ast::ViewItem_ {\n                 };\n                 ExternMod(i.clean(), string, *id)\n             }\n-            &ast::ViewItemUse(ref vp) => Import(vp.clean())\n+            &ast::ViewItemUse(ref vp) => {\n+                Import(vp.clean().move_iter().collect())\n+            }\n         }\n     }\n }\n@@ -1083,8 +1110,10 @@ impl Clean<ViewPath> for ast::ViewPath {\n                 SimpleImport(i.clean(), resolve_use_source(p.clean(), id)),\n             ast::ViewPathGlob(ref p, id) =>\n                 GlobImport(resolve_use_source(p.clean(), id)),\n-            ast::ViewPathList(ref p, ref pl, id) =>\n-                ImportList(resolve_use_source(p.clean(), id), pl.clean()),\n+            ast::ViewPathList(ref p, ref pl, id) => {\n+                ImportList(resolve_use_source(p.clean(), id),\n+                           pl.clean().move_iter().collect())\n+            }\n         }\n     }\n }\n@@ -1104,8 +1133,8 @@ impl Clean<ViewListIdent> for ast::PathListIdent {\n     }\n }\n \n-impl Clean<~[Item]> for ast::ForeignMod {\n-    fn clean(&self) -> ~[Item] {\n+impl Clean<Vec<Item>> for ast::ForeignMod {\n+    fn clean(&self) -> Vec<Item> {\n         self.items.clean()\n     }\n }\n@@ -1130,7 +1159,7 @@ impl Clean<Item> for ast::ForeignItem {\n         };\n         Item {\n             name: Some(self.ident.clean()),\n-            attrs: self.attrs.clean(),\n+            attrs: self.attrs.clean().move_iter().collect(),\n             source: self.span.clean(),\n             id: self.id,\n             visibility: self.vis.clean(),"}, {"sha": "dc15b7f73a9bafb9b8a6e3c494f9c8f9b77470e9", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 36, "deletions": 23, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/0c6622aa0f36faff87840f94083abab0bf58d074/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c6622aa0f36faff87840f94083abab0bf58d074/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=0c6622aa0f36faff87840f94083abab0bf58d074", "patch": "@@ -11,6 +11,7 @@\n //! Rust AST Visitor. Extracts useful information and massages it into a form\n //! usable for clean\n \n+use std::vec_ng::Vec;\n use syntax::abi::AbiSet;\n use syntax::ast;\n use syntax::ast_util;\n@@ -39,11 +40,17 @@ impl<'a> RustdocVisitor<'a> {\n     }\n \n     pub fn visit(&mut self, krate: &ast::Crate) {\n-        self.attrs = krate.attrs.clone();\n+        self.attrs = krate.attrs.iter().map(|x| (*x).clone()).collect();\n \n-        self.module = self.visit_mod_contents(krate.span, krate.attrs.clone(),\n-                                              ast::Public, ast::CRATE_NODE_ID,\n-                                              &krate.module, None);\n+        self.module = self.visit_mod_contents(krate.span,\n+                                              krate.attrs\n+                                                   .iter()\n+                                                   .map(|x| *x)\n+                                                   .collect(),\n+                                              ast::Public,\n+                                              ast::CRATE_NODE_ID,\n+                                              &krate.module,\n+                                              None);\n         self.module.is_crate = true;\n     }\n \n@@ -56,9 +63,9 @@ impl<'a> RustdocVisitor<'a> {\n             struct_type: struct_type,\n             name: item.ident,\n             vis: item.vis,\n-            attrs: item.attrs.clone(),\n+            attrs: item.attrs.iter().map(|x| *x).collect(),\n             generics: generics.clone(),\n-            fields: sd.fields.clone(),\n+            fields: sd.fields.iter().map(|x| (*x).clone()).collect(),\n             where: item.span\n         }\n     }\n@@ -70,7 +77,7 @@ impl<'a> RustdocVisitor<'a> {\n         for x in def.variants.iter() {\n             vars.push(Variant {\n                 name: x.node.name,\n-                attrs: x.node.attrs.clone(),\n+                attrs: x.node.attrs.iter().map(|x| *x).collect(),\n                 vis: x.node.vis,\n                 id: x.node.id,\n                 kind: x.node.kind.clone(),\n@@ -82,7 +89,7 @@ impl<'a> RustdocVisitor<'a> {\n             variants: vars,\n             vis: it.vis,\n             generics: params.clone(),\n-            attrs: it.attrs.clone(),\n+            attrs: it.attrs.iter().map(|x| *x).collect(),\n             id: it.id,\n             where: it.span,\n         }\n@@ -95,7 +102,7 @@ impl<'a> RustdocVisitor<'a> {\n         Function {\n             id: item.id,\n             vis: item.vis,\n-            attrs: item.attrs.clone(),\n+            attrs: item.attrs.iter().map(|x| *x).collect(),\n             decl: fd.clone(),\n             name: item.ident,\n             where: item.span,\n@@ -130,11 +137,11 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ViewItemUse(ref paths) => {\n                 // rustc no longer supports \"use foo, bar;\"\n                 assert_eq!(paths.len(), 1);\n-                match self.visit_view_path(paths[0], om) {\n+                match self.visit_view_path(*paths.get(0), om) {\n                     None => return,\n                     Some(path) => {\n                         ast::ViewItem {\n-                            node: ast::ViewItemUse(~[path]),\n+                            node: ast::ViewItemUse(vec!(path)),\n                             .. item.clone()\n                         }\n                     }\n@@ -152,7 +159,7 @@ impl<'a> RustdocVisitor<'a> {\n                 if self.resolve_id(id, false, om) { return None }\n             }\n             ast::ViewPathList(ref p, ref paths, ref b) => {\n-                let mut mine = ~[];\n+                let mut mine = Vec::new();\n                 for path in paths.iter() {\n                     if !self.resolve_id(path.node.id, false, om) {\n                         mine.push(path.clone());\n@@ -217,9 +224,15 @@ impl<'a> RustdocVisitor<'a> {\n         debug!(\"Visiting item {:?}\", item);\n         match item.node {\n             ast::ItemMod(ref m) => {\n-                om.mods.push(self.visit_mod_contents(item.span, item.attrs.clone(),\n-                                                item.vis, item.id, m,\n-                                                Some(item.ident)));\n+                om.mods.push(self.visit_mod_contents(item.span,\n+                                                     item.attrs\n+                                                         .iter()\n+                                                         .map(|x| *x)\n+                                                         .collect(),\n+                                                     item.vis,\n+                                                     item.id,\n+                                                     m,\n+                                                     Some(item.ident)));\n             },\n             ast::ItemEnum(ref ed, ref gen) =>\n                 om.enums.push(self.visit_enum_def(item, ed, gen)),\n@@ -233,7 +246,7 @@ impl<'a> RustdocVisitor<'a> {\n                     gen: gen.clone(),\n                     name: item.ident,\n                     id: item.id,\n-                    attrs: item.attrs.clone(),\n+                    attrs: item.attrs.iter().map(|x| *x).collect(),\n                     where: item.span,\n                     vis: item.vis,\n                 };\n@@ -246,7 +259,7 @@ impl<'a> RustdocVisitor<'a> {\n                     expr: exp.clone(),\n                     id: item.id,\n                     name: item.ident,\n-                    attrs: item.attrs.clone(),\n+                    attrs: item.attrs.iter().map(|x| *x).collect(),\n                     where: item.span,\n                     vis: item.vis,\n                 };\n@@ -255,11 +268,11 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ItemTrait(ref gen, ref tr, ref met) => {\n                 let t = Trait {\n                     name: item.ident,\n-                    methods: met.clone(),\n+                    methods: met.iter().map(|x| (*x).clone()).collect(),\n                     generics: gen.clone(),\n-                    parents: tr.clone(),\n+                    parents: tr.iter().map(|x| (*x).clone()).collect(),\n                     id: item.id,\n-                    attrs: item.attrs.clone(),\n+                    attrs: item.attrs.iter().map(|x| *x).collect(),\n                     where: item.span,\n                     vis: item.vis,\n                 };\n@@ -270,8 +283,8 @@ impl<'a> RustdocVisitor<'a> {\n                     generics: gen.clone(),\n                     trait_: tr.clone(),\n                     for_: ty,\n-                    methods: meths.clone(),\n-                    attrs: item.attrs.clone(),\n+                    methods: meths.iter().map(|x| *x).collect(),\n+                    attrs: item.attrs.iter().map(|x| *x).collect(),\n                     id: item.id,\n                     where: item.span,\n                     vis: item.vis,\n@@ -284,7 +297,7 @@ impl<'a> RustdocVisitor<'a> {\n             ast::ItemMac(ref _m) => {\n                 om.macros.push(Macro {\n                     id: item.id,\n-                    attrs: item.attrs.clone(),\n+                    attrs: item.attrs.iter().map(|x| *x).collect(),\n                     name: item.ident,\n                     where: item.span,\n                 })"}]}