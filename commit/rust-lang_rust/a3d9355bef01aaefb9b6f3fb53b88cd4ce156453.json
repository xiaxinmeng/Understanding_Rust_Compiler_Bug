{"sha": "a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZDkzNTViZWYwMWFhZWZiOWI2ZjNmYjUzYjg4Y2Q0Y2UxNTY0NTM=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-10T04:17:15Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2020-03-10T04:17:35Z"}, "message": "Fix ICE with trivial_bounds feature", "tree": {"sha": "b9ce5dd563d2b7004f43de40f780fbe54916105d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9ce5dd563d2b7004f43de40f780fbe54916105d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "html_url": "https://github.com/rust-lang/rust/commit/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff", "html_url": "https://github.com/rust-lang/rust/commit/187bbf0e7bbc1c7da5902cd1a89f286aa063c5ff"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "d968a928c33b5e7bc6bd2441fe0f1061392d156b", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{\n-    match_def_path,\n+    fn_has_unsatisfiable_preds, match_def_path,\n     paths::{BEGIN_PANIC, BEGIN_PANIC_FMT},\n     snippet_opt, span_lint_and_then,\n };\n@@ -133,6 +133,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitReturn {\n         _: HirId,\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n+\n+        // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n+        if fn_has_unsatisfiable_preds(cx, def_id) {\n+            return;\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n \n         // checking return type through MIR, HIR is not able to determine inferred closure return types"}, {"sha": "a22d8b4cf9ebdc10796ad7b65c4e80631db3aa94", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n+use crate::utils::{fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::lint::in_external_macro;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n@@ -88,6 +88,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n             return;\n         }\n \n+        // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n+        if fn_has_unsatisfiable_preds(cx, def_id) {\n+            return;\n+        }\n+\n         // Perform some preliminary checks that rule out constness on the Clippy side. This way we\n         // can skip the actual const check and return early.\n         match kind {"}, {"sha": "103c063aef4b79e4d165d949c193b7a3e76881d3", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    has_drop, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n-    walk_ptrs_ty_depth,\n+    fn_has_unsatisfiable_preds, has_drop, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir,\n+    span_lint_hir_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -79,6 +79,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n         _: HirId,\n     ) {\n         let def_id = cx.tcx.hir().body_owner_def_id(body.id());\n+\n+        // Building MIR for `fn`s with unsatisfiable preds results in ICE.\n+        if fn_has_unsatisfiable_preds(cx, def_id) {\n+            return;\n+        }\n+\n         let mir = cx.tcx.optimized_mir(def_id);\n         let mir_read_only = mir.unwrap_read_only();\n "}, {"sha": "a27245fd234b18da189af4633b18fcd7ab9fe9e9", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "patch": "@@ -32,7 +32,7 @@ use rustc::ty::{\n     self,\n     layout::{self, IntegerExt},\n     subst::GenericArg,\n-    Binder, Ty, TyCtxt,\n+    Binder, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_ast::ast::{self, Attribute, LitKind};\n use rustc_attr as attr;\n@@ -1377,6 +1377,27 @@ pub fn is_trait_impl_item(cx: &LateContext<'_, '_>, hir_id: HirId) -> bool {\n     }\n }\n \n+/// Check if it's even possible to satisfy the `where` clause for the item.\n+///\n+/// `trivial_bounds` feature allows functions with unsatisfiable bounds, for example:\n+///\n+/// ```rust\n+/// fn foo() i32: Iterator {\n+///     for _ in 2i32 {}\n+/// }\n+/// ```\n+pub fn fn_has_unsatisfiable_preds(cx: &LateContext<'_, '_>, did: DefId) -> bool {\n+    use rustc_infer::traits;\n+    let predicates = cx\n+        .tcx\n+        .predicates_of(did)\n+        .predicates\n+        .iter()\n+        .filter_map(|(p, _)| if p.is_global() { Some(*p) } else { None })\n+        .collect();\n+    !traits::normalize_and_test_predicates(cx.tcx, traits::elaborate_predicates(cx.tcx, predicates).collect())\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::{trim_multiline, without_block_comments};"}, {"sha": "2bb95c18a39129fd7028c5d505c17e74ca06227e", "filename": "tests/ui/crashes/trivial_bounds.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3d9355bef01aaefb9b6f3fb53b88cd4ce156453/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Ftrivial_bounds.rs?ref=a3d9355bef01aaefb9b6f3fb53b88cd4ce156453", "patch": "@@ -0,0 +1,13 @@\n+// run-pass\n+\n+#![feature(trivial_bounds)]\n+#![allow(unused, trivial_bounds)]\n+\n+fn test_trivial_bounds()\n+where\n+    i32: Iterator,\n+{\n+    for _ in 2i32 {}\n+}\n+\n+fn main() {}"}]}