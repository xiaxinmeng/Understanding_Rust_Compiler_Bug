{"sha": "18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YWM0YThlNmQ4ZGI1YWM4OTAyYmVmNTA0ZTIyMGUwY2QzNzJjZDE=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-07T18:26:03Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-08-07T18:26:41Z"}, "message": "Change task().future_result's argument mode", "tree": {"sha": "b960e0f94404119c95121c1cddadb881a3c74a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b960e0f94404119c95121c1cddadb881a3c74a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "html_url": "https://github.com/rust-lang/rust/commit/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae6d84f573a802ff3606d59a52155380220b3c87", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae6d84f573a802ff3606d59a52155380220b3c87", "html_url": "https://github.com/rust-lang/rust/commit/ae6d84f573a802ff3606d59a52155380220b3c87"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "c066e7d6f511be0988d0ae0fe767268104c7fccb", "filename": "src/libcore/task.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -271,7 +271,7 @@ impl task_builder for task_builder {\n      * # Failure\n      * Fails if a future_result was already set for this task.\n      */\n-    fn future_result(blk: fn(-future::future<task_result>)) -> task_builder {\n+    fn future_result(blk: fn(+future::future<task_result>)) -> task_builder {\n         // FIXME (#1087, #1857): Once linked failure and notification are\n         // handled in the library, I can imagine implementing this by just\n         // registering an arbitrary number of task::on_exit handlers and\n@@ -394,7 +394,7 @@ impl task_builder for task_builder {\n         let ch = comm::chan(po);\n         let mut result = none;\n \n-        do self.future_result(|-r| { result = some(r); }).spawn {\n+        do self.future_result(|+r| { result = some(r); }).spawn {\n             comm::send(ch, f());\n         }\n         match future::get(option::unwrap(result)) {\n@@ -1684,19 +1684,19 @@ fn test_add_wrapper() {\n #[ignore(cfg(windows))]\n fn test_future_result() {\n     let mut result = none;\n-    do task().future_result(|-r| { result = some(r); }).spawn { }\n+    do task().future_result(|+r| { result = some(r); }).spawn { }\n     assert future::get(option::unwrap(result)) == success;\n \n     result = none;\n-    do task().future_result(|-r| { result = some(r); }).unlinked().spawn {\n+    do task().future_result(|+r| { result = some(r); }).unlinked().spawn {\n         fail;\n     }\n     assert future::get(option::unwrap(result)) == failure;\n }\n \n #[test] #[should_fail] #[ignore(cfg(windows))]\n fn test_back_to_the_future_result() {\n-    let _ = task().future_result(|-r| ()).future_result(|-r| ());\n+    let _ = task().future_result(util::ignore).future_result(util::ignore);\n }\n \n #[test]"}, {"sha": "b67d7e66402005555b89a534a2cca2d49ac3ce50", "filename": "src/libstd/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Flibstd%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Flibstd%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftest.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -390,7 +390,7 @@ fn run_test(+test: test_desc, monitor_ch: comm::chan<monitor_msg>) {\n     do task::spawn {\n         let testfn = copy test.fn;\n         let mut result_future = none; // task::future_result(builder);\n-        task::task().unlinked().future_result(|-r| {\n+        task::task().unlinked().future_result(|+r| {\n             result_future = some(r);\n         }).spawn(testfn);\n         let task_result = future::get(option::unwrap(result_future));"}, {"sha": "c2129aa5fdaad93248d3fdd79d227952d68e311c", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -58,7 +58,7 @@ fn run(args: &[~str]) {\n     let mut worker_results = ~[];\n     for uint::range(0u, workers) |i| {\n         let to_child = to_child.clone();\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             vec::push(worker_results, r);\n         }).spawn {\n             for uint::range(0u, size / workers) |_i| {"}, {"sha": "724bdf23e01bcdc68890b8de2859b7cf41cb7d42", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -54,7 +54,7 @@ fn run(args: &[~str]) {\n     for uint::range(0u, workers) |i| {\n         let (to_child, from_parent_) = pipes::stream();\n         from_parent.add(from_parent_);\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             vec::push(worker_results, r);\n         }).spawn {\n             for uint::range(0u, size / workers) |_i| {"}, {"sha": "120a5f3a1f0ff98a22263411f8c8266cedb0ded8", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -39,7 +39,7 @@ fn run(args: ~[~str]) {\n     let to_child = to_child;\n     let mut worker_results = ~[];\n     for uint::range(0u, workers) |_i| {\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             vec::push(worker_results, r);\n         }).spawn {\n             for uint::range(0u, size / workers) |_i| {"}, {"sha": "3aa3dee050b33b97292858df510f0f5d04f49991", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -70,7 +70,7 @@ fn stress_task(&&id: int) {\n fn stress(num_tasks: int) {\n     let mut results = ~[];\n     for range(0, num_tasks) |i| {\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             results += ~[r];\n         }).spawn {\n             stress_task(i);"}, {"sha": "3dc0de2279caa13463b705b7dc2e83f720e8aeb5", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -31,7 +31,7 @@ fn grandchild_group(num_tasks: uint) {\n \n fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     let mut res = none;\n-    task::task().future_result(|-r| res = some(r)).supervised().spawn(f);\n+    task::task().future_result(|+r| res = some(r)).supervised().spawn(f);\n     #error[\"%s group waiting\", myname];\n     let x = future::get(option::unwrap(res));\n     assert x == task::success;"}, {"sha": "20d1ad57bc1205c7475098004e009fd75b86df6e", "filename": "src/test/run-pass/task-comm-12.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-12.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -8,7 +8,7 @@ fn start(&&task_number: int) { debug!{\"Started / Finished task.\"}; }\n fn test00() {\n     let i: int = 0;\n     let mut result = none;\n-    do task::task().future_result(|-r| { result = some(r); }).spawn {\n+    do task::task().future_result(|+r| { result = some(r); }).spawn {\n         start(i)\n     }\n "}, {"sha": "44bd01076841b7700e900745ccc433d0026ef405", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -32,7 +32,7 @@ fn test00() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         let ch = po.chan();        \n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             results += ~[r];\n         }).spawn |copy i| {\n             test00_start(ch, i, number_of_messages)"}, {"sha": "65977d7997d71ecbdc6e5087d84462b0911dd7b9", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -16,7 +16,7 @@ fn test00() {\n     let ch = p.chan();\n \n     let mut result = none;\n-    do task::task().future_result(|-r| { result = some(r); }).spawn {\n+    do task::task().future_result(|+r| { result = some(r); }).spawn {\n         test00_start(ch, number_of_messages);\n     }\n "}, {"sha": "3ca0421c2351043777e1734b179f9ac694393ce0", "filename": "src/test/run-pass/task-comm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Ftask-comm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -41,7 +41,7 @@ fn test00() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         i = i + 1;\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             results += ~[r];\n         }).spawn |copy i| {\n             test00_start(ch, i, number_of_messages);\n@@ -128,7 +128,7 @@ fn test06() {\n     let mut results = ~[];\n     while i < number_of_tasks {\n         i = i + 1;\n-        do task::task().future_result(|-r| {\n+        do task::task().future_result(|+r| {\n             results += ~[r];\n         }).spawn |copy i| {\n             test06_start(i);"}, {"sha": "9a5b72f97085e6a663ba5247d8f0023b8ed6198d", "filename": "src/test/run-pass/yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Fyield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Fyield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -5,7 +5,7 @@ import task::*;\n \n fn main() {\n     let mut result = none;\n-    task::task().future_result(|-r| { result = some(r); }).spawn(child);\n+    task::task().future_result(|+r| { result = some(r); }).spawn(child);\n     error!{\"1\"};\n     yield();\n     error!{\"2\"};"}, {"sha": "c2bc3bfbc1f7ddf45635f9beaf3b19830639f1ae", "filename": "src/test/run-pass/yield1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Fyield1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18ac4a8e6d8db5ac8902bef504e220e0cd372cd1/src%2Ftest%2Frun-pass%2Fyield1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fyield1.rs?ref=18ac4a8e6d8db5ac8902bef504e220e0cd372cd1", "patch": "@@ -5,7 +5,7 @@ import task::*;\n \n fn main() {\n     let mut result = none;\n-    task::task().future_result(|-r| { result = some(r); }).spawn(child);\n+    task::task().future_result(|+r| { result = some(r); }).spawn(child);\n     error!{\"1\"};\n     yield();\n     future::get(option::unwrap(result));"}]}