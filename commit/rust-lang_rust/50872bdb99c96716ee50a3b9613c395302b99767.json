{"sha": "50872bdb99c96716ee50a3b9613c395302b99767", "node_id": "C_kwDOAAsO6NoAKDUwODcyYmRiOTljOTY3MTZlZTUwYTNiOTYxM2MzOTUzMDJiOTk3Njc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T04:04:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-19T04:04:40Z"}, "message": "Auto merge of #97033 - nbdd0121:unwind3, r=Amanieu\n\nRemove libstd's calls to `C-unwind` foreign functions\n\nRemove all libstd and its dependencies' usage of `extern \"C-unwind\"`.\n\nThis is a prerequiste of a WIP PR which will forbid libraries calling `extern \"C-unwind\"` functions to be compiled in `-Cpanic=unwind` and linked against `panic_abort` (this restriction is necessary to address soundness bug #96926).\nCargo will ensure all crates are compiled with the same `-Cpanic` but the std is only compiled `-Cpanic=unwind` but needs the ability to be linked into `-Cpanic=abort`.\n\nCurrently there are two places where `C-unwind` is used in libstd:\n* `__rust_start_panic` is used for interfacing to the panic runtime. This could be `extern \"Rust\"`\n* `_{rdl,rg}_oom`: a shim `__rust_alloc_error_handler` will be generated by codegen to call into one of these; they can also be `extern \"Rust\"` (in fact, the generated shim is used as `extern \"Rust\"`, so I am not even sure why these are not, probably because they used to `extern \"C\"` and was changed to `extern \"C-unwind\"` when we allow alloc error hooks to unwind, but they really should just be using Rust ABI).\n\nFor dependencies, there is only one `extern \"C-unwind\"` function call, in `unwind` crate. This can be expressed as a re-export.\n\nMore dicussions can be seen in the Zulip thread: https://rust-lang.zulipchat.com/#narrow/stream/210922-project-ffi-unwind/topic/soundness.20in.20mixed.20panic.20mode\n\n`@rustbot` label: T-libs F-c_unwind", "tree": {"sha": "5d9beb770cd7998b4496faeed8163a6fbbf36fc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d9beb770cd7998b4496faeed8163a6fbbf36fc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50872bdb99c96716ee50a3b9613c395302b99767", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50872bdb99c96716ee50a3b9613c395302b99767", "html_url": "https://github.com/rust-lang/rust/commit/50872bdb99c96716ee50a3b9613c395302b99767", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50872bdb99c96716ee50a3b9613c395302b99767/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6327bc8b8d437b66ff91d9ce798a9eb45310967", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6327bc8b8d437b66ff91d9ce798a9eb45310967", "html_url": "https://github.com/rust-lang/rust/commit/e6327bc8b8d437b66ff91d9ce798a9eb45310967"}, {"sha": "fbb3c19e0347b21d84b428981e930401b7f81b76", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb3c19e0347b21d84b428981e930401b7f81b76", "html_url": "https://github.com/rust-lang/rust/commit/fbb3c19e0347b21d84b428981e930401b7f81b76"}], "stats": {"total": 15, "additions": 6, "deletions": 9}, "files": [{"sha": "649aeb0890dc050ee32f55b760538e80243da5b4", "filename": "library/alloc/src/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/50872bdb99c96716ee50a3b9613c395302b99767/library%2Falloc%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50872bdb99c96716ee50a3b9613c395302b99767/library%2Falloc%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Falloc.rs?ref=50872bdb99c96716ee50a3b9613c395302b99767", "patch": "@@ -398,13 +398,13 @@ pub mod __alloc_error_handler {\n \n     // if there is no `#[alloc_error_handler]`\n     #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C-unwind\" fn __rdl_oom(size: usize, _align: usize) -> ! {\n+    pub unsafe fn __rdl_oom(size: usize, _align: usize) -> ! {\n         panic!(\"memory allocation of {size} bytes failed\")\n     }\n \n     // if there is an `#[alloc_error_handler]`\n     #[rustc_std_internal_symbol]\n-    pub unsafe extern \"C-unwind\" fn __rg_oom(size: usize, align: usize) -> ! {\n+    pub unsafe fn __rg_oom(size: usize, align: usize) -> ! {\n         let layout = unsafe { Layout::from_size_align_unchecked(size, align) };\n         extern \"Rust\" {\n             #[lang = \"oom\"]"}, {"sha": "0a1aa7bb3c833939e8477d172956bd7724beeb6b", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=50872bdb99c96716ee50a3b9613c395302b99767", "patch": "@@ -30,7 +30,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Sen\n \n // \"Leak\" the payload and shim to the relevant abort on the platform in question.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n+pub unsafe fn __rust_start_panic(_payload: *mut &mut dyn BoxMeUp) -> u32 {\n     // Android has the ability to attach a message as part of the abort.\n     #[cfg(target_os = \"android\")]\n     android::android_set_abort_message(_payload);"}, {"sha": "4ae5f8ae4468d80e42e40f02ad55efcc4b39d3c2", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=50872bdb99c96716ee50a3b9613c395302b99767", "patch": "@@ -104,7 +104,7 @@ pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any\n // Entry point for raising an exception, just delegates to the platform-specific\n // implementation.\n #[rustc_std_internal_symbol]\n-pub unsafe extern \"C-unwind\" fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n+pub unsafe fn __rust_start_panic(payload: *mut &mut dyn BoxMeUp) -> u32 {\n     let payload = Box::from_raw((*payload).take_box());\n \n     imp::panic(payload)"}, {"sha": "9b045980d4543dfc33ebd3265aaace13afd55002", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50872bdb99c96716ee50a3b9613c395302b99767/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=50872bdb99c96716ee50a3b9613c395302b99767", "patch": "@@ -47,7 +47,7 @@ extern \"C\" {\n }\n \n #[allow(improper_ctypes)]\n-extern \"C-unwind\" {\n+extern \"Rust\" {\n     /// `payload` is passed through another layer of raw pointers as `&mut dyn Trait` is not\n     /// FFI-safe. `BoxMeUp` lazily performs allocation only when needed (this avoids allocations\n     /// when using the \"abort\" panic runtime)."}, {"sha": "7b78bda424bb02a14fa019d47ae115cf768a9fae", "filename": "library/unwind/src/libunwind.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50872bdb99c96716ee50a3b9613c395302b99767/library%2Funwind%2Fsrc%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50872bdb99c96716ee50a3b9613c395302b99767/library%2Funwind%2Fsrc%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flibunwind.rs?ref=50872bdb99c96716ee50a3b9613c395302b99767", "patch": "@@ -264,10 +264,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n         pub fn _Unwind_SjLj_RaiseException(e: *mut _Unwind_Exception) -> _Unwind_Reason_Code;\n     }\n \n-    #[inline]\n-    pub unsafe fn _Unwind_RaiseException(exc: *mut _Unwind_Exception) -> _Unwind_Reason_Code {\n-        _Unwind_SjLj_RaiseException(exc)\n-    }\n+    pub use _Unwind_SjLj_RaiseException as _Unwind_RaiseException;\n }\n } // cfg_if!\n "}]}