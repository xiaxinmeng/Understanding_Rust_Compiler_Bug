{"sha": "148c1bca0f0eb8da23a50cd876cb86cb060a8375", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OGMxYmNhMGYwZWI4ZGEyM2E1MGNkODc2Y2I4NmNiMDYwYTgzNzU=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-14T13:21:14Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2020-01-14T13:21:14Z"}, "message": "record generoator interior exprs in typecktable", "tree": {"sha": "171f1143993739d504759fba6736b92bc29a412c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171f1143993739d504759fba6736b92bc29a412c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/148c1bca0f0eb8da23a50cd876cb86cb060a8375", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/148c1bca0f0eb8da23a50cd876cb86cb060a8375", "html_url": "https://github.com/rust-lang/rust/commit/148c1bca0f0eb8da23a50cd876cb86cb060a8375", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/148c1bca0f0eb8da23a50cd876cb86cb060a8375/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6c116a84fb1dbb60b5870291f5d7df808c280d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6c116a84fb1dbb60b5870291f5d7df808c280d", "html_url": "https://github.com/rust-lang/rust/commit/0b6c116a84fb1dbb60b5870291f5d7df808c280d"}], "stats": {"total": 47, "additions": 41, "deletions": 6}, "files": [{"sha": "66737372bda37b2664d1be8629ac1e28dc943876", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=148c1bca0f0eb8da23a50cd876cb86cb060a8375", "patch": "@@ -2456,7 +2456,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         let target_span = tables\n             .generator_interior_types\n             .iter()\n-            .find(|ty::GeneratorInteriorTypeCause { ty, .. }| {\n+            .zip(tables.generator_interior_exprs.iter())\n+            .find(|(ty::GeneratorInteriorTypeCause { ty, .. }, _)| {\n                 // Careful: the regions for types that appear in the\n                 // generator interior are not generally known, so we\n                 // want to erase them when comparing (and anyway,\n@@ -2479,19 +2480,21 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 );\n                 eq\n             })\n-            .map(|ty::GeneratorInteriorTypeCause { span, scope_span, .. }| {\n-                (span, source_map.span_to_snippet(*span), scope_span)\n+            .map(|(ty::GeneratorInteriorTypeCause { span, scope_span, .. }, expr)| {\n+                (span, source_map.span_to_snippet(*span), scope_span, expr)\n             });\n+\n         debug!(\n             \"maybe_note_obligation_cause_for_async_await: target_ty={:?} \\\n                 generator_interior_types={:?} target_span={:?}\",\n             target_ty, tables.generator_interior_types, target_span\n         );\n-        if let Some((target_span, Ok(snippet), scope_span)) = target_span {\n+        if let Some((target_span, Ok(snippet), scope_span, expr)) = target_span {\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 *target_span,\n                 scope_span,\n+                *expr,\n                 snippet,\n                 generator_did,\n                 last_generator,\n@@ -2514,6 +2517,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut DiagnosticBuilder<'_>,\n         target_span: Span,\n         scope_span: &Option<Span>,\n+        expr: Option<hir::HirId>,\n         snippet: String,\n         first_generator: DefId,\n         last_generator: Option<DefId>,\n@@ -2549,6 +2553,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         // not implemented.\n         let is_send = self.tcx.is_diagnostic_item(sym::send_trait, trait_ref.def_id);\n         let is_sync = self.tcx.is_diagnostic_item(sym::sync_trait, trait_ref.def_id);\n+        let hir = self.tcx.hir();\n         let trait_explanation = if is_send || is_sync {\n             let (trait_name, trait_verb) =\n                 if is_send { (\"`Send`\", \"sent\") } else { (\"`Sync`\", \"shared\") };\n@@ -2564,8 +2569,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n             let message = if let Some(name) = last_generator\n                 .and_then(|generator_did| self.tcx.parent(generator_did))\n-                .and_then(|parent_did| self.tcx.hir().as_local_hir_id(parent_did))\n-                .and_then(|parent_hir_id| self.tcx.hir().opt_name(parent_hir_id))\n+                .and_then(|parent_did| hir.as_local_hir_id(parent_did))\n+                .and_then(|parent_hir_id| hir.opt_name(parent_hir_id))\n             {\n                 format!(\"future returned by `{}` is not {}\", name, trait_name)\n             } else {\n@@ -2588,6 +2593,22 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             format!(\"{} occurs here, with `{}` maybe used later\", await_or_yield, snippet),\n         );\n \n+        if let Some(expr_id) = expr {\n+            let expr = hir.expect_expr(expr_id);\n+            let is_ref = tables.expr_adjustments(expr).iter().any(|adj| adj.is_region_borrow());\n+            let parent = hir.get_parent_node(expr_id);\n+            if let Some(hir::Node::Expr(e)) = hir.find(parent) {\n+                let method_span = hir.span(parent);\n+                if tables.is_method_call(e) && is_ref {\n+                    err.span_help(\n+                        method_span,\n+                        \"consider moving this method call into a `let` \\\n+                        binding to create a shorter lived borrow\"\n+                    );\n+                }\n+            }\n+        }\n+\n         span.push_span_label(target_span, format!(\"has type `{}`\", target_ty));\n \n         // If available, use the scope span to annotate the drop location."}, {"sha": "6531289bd70506779f7bcf2122e774d5609db4bb", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=148c1bca0f0eb8da23a50cd876cb86cb060a8375", "patch": "@@ -81,6 +81,15 @@ pub struct Adjustment<'tcx> {\n     pub target: Ty<'tcx>,\n }\n \n+impl Adjustment<'tcx> {\n+    pub fn is_region_borrow(&self) -> bool {\n+        match self.kind {\n+            Adjust::Borrow(AutoBorrow::Ref(..)) => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type."}, {"sha": "4a5fced7a89e5d920b136ca80d6e94b6ad8c19f0", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/148c1bca0f0eb8da23a50cd876cb86cb060a8375/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=148c1bca0f0eb8da23a50cd876cb86cb060a8375", "patch": "@@ -439,6 +439,8 @@ pub struct TypeckTables<'tcx> {\n     /// Stores the type, span and optional scope span of all types\n     /// that are live across the yield of this generator (if a generator).\n     pub generator_interior_types: Vec<GeneratorInteriorTypeCause<'tcx>>,\n+\n+    pub generator_interior_exprs: Vec<Option<hir::HirId>>,\n }\n \n impl<'tcx> TypeckTables<'tcx> {\n@@ -465,6 +467,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),\n+            generator_interior_exprs: Default::default(),\n         }\n     }\n \n@@ -728,6 +731,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             ref concrete_opaque_types,\n             ref upvar_list,\n             ref generator_interior_types,\n+            ref generator_interior_exprs,\n         } = *self;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n@@ -766,6 +770,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             concrete_opaque_types.hash_stable(hcx, hasher);\n             upvar_list.hash_stable(hcx, hasher);\n             generator_interior_types.hash_stable(hcx, hasher);\n+            generator_interior_exprs.hash_stable(hcx, hasher);\n         })\n     }\n }"}]}