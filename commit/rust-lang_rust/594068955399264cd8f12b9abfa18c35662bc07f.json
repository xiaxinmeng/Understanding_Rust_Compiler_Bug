{"sha": "594068955399264cd8f12b9abfa18c35662bc07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDA2ODk1NTM5OTI2NGNkOGYxMmI5YWJmYTE4YzM1NjYyYmMwN2Y=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-05-23T18:00:08Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2019-06-03T03:44:51Z"}, "message": "move single-use function", "tree": {"sha": "506476fe681ed898da9a3b71f38aa7091b17a88d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506476fe681ed898da9a3b71f38aa7091b17a88d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/594068955399264cd8f12b9abfa18c35662bc07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/594068955399264cd8f12b9abfa18c35662bc07f", "html_url": "https://github.com/rust-lang/rust/commit/594068955399264cd8f12b9abfa18c35662bc07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/594068955399264cd8f12b9abfa18c35662bc07f/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58bd0ea73201747441a76c56a9b74252ef08e6ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bd0ea73201747441a76c56a9b74252ef08e6ba", "html_url": "https://github.com/rust-lang/rust/commit/58bd0ea73201747441a76c56a9b74252ef08e6ba"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "ab93a84153094d81b9ba198d3629b4d216263812", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/594068955399264cd8f12b9abfa18c35662bc07f/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594068955399264cd8f12b9abfa18c35662bc07f/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=594068955399264cd8f12b9abfa18c35662bc07f", "patch": "@@ -8,50 +8,6 @@ pub mod collector;\n pub mod item;\n pub mod partitioning;\n \n-#[inline(never)] // give this a place in the profiler\n-pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mono_items: I)\n-    where I: Iterator<Item=&'a MonoItem<'tcx>>\n-{\n-    let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n-        (mono_item, mono_item.symbol_name(tcx))\n-    }).collect();\n-\n-    symbols.sort_by_key(|sym| sym.1);\n-\n-    for pair in symbols.windows(2) {\n-        let sym1 = &pair[0].1;\n-        let sym2 = &pair[1].1;\n-\n-        if sym1 == sym2 {\n-            let mono_item1 = pair[0].0;\n-            let mono_item2 = pair[1].0;\n-\n-            let span1 = mono_item1.local_span(tcx);\n-            let span2 = mono_item2.local_span(tcx);\n-\n-            // Deterministically select one of the spans for error reporting\n-            let span = match (span1, span2) {\n-                (Some(span1), Some(span2)) => {\n-                    Some(if span1.lo().0 > span2.lo().0 {\n-                        span1\n-                    } else {\n-                        span2\n-                    })\n-                }\n-                (span1, span2) => span1.or(span2),\n-            };\n-\n-            let error_message = format!(\"symbol `{}` is already defined\", sym1);\n-\n-            if let Some(span) = span {\n-                tcx.sess.span_fatal(span, &error_message)\n-            } else {\n-                tcx.sess.fatal(&error_message)\n-            }\n-        }\n-    }\n-}\n-\n pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            source_ty: Ty<'tcx>,\n                                            target_ty: Ty<'tcx>)"}, {"sha": "2e3d1e618aedaec6169edd4ad0a71fd593e32a1b", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/594068955399264cd8f12b9abfa18c35662bc07f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/594068955399264cd8f12b9abfa18c35662bc07f/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=594068955399264cd8f12b9abfa18c35662bc07f", "patch": "@@ -882,6 +882,50 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+#[inline(never)] // give this a place in the profiler\n+fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mono_items: I)\n+    where I: Iterator<Item=&'a MonoItem<'tcx>>\n+{\n+    let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n+        (mono_item, mono_item.symbol_name(tcx))\n+    }).collect();\n+\n+    symbols.sort_by_key(|sym| sym.1);\n+\n+    for pair in symbols.windows(2) {\n+        let sym1 = &pair[0].1;\n+        let sym2 = &pair[1].1;\n+\n+        if sym1 == sym2 {\n+            let mono_item1 = pair[0].0;\n+            let mono_item2 = pair[1].0;\n+\n+            let span1 = mono_item1.local_span(tcx);\n+            let span2 = mono_item2.local_span(tcx);\n+\n+            // Deterministically select one of the spans for error reporting\n+            let span = match (span1, span2) {\n+                (Some(span1), Some(span2)) => {\n+                    Some(if span1.lo().0 > span2.lo().0 {\n+                        span1\n+                    } else {\n+                        span2\n+                    })\n+                }\n+                (span1, span2) => span1.or(span2),\n+            };\n+\n+            let error_message = format!(\"symbol `{}` is already defined\", sym1);\n+\n+            if let Some(span) = span {\n+                tcx.sess.span_fatal(span, &error_message)\n+            } else {\n+                tcx.sess.fatal(&error_message)\n+            }\n+        }\n+    }\n+}\n+\n fn collect_and_partition_mono_items<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cnum: CrateNum,\n@@ -922,7 +966,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n \n     tcx.sess.abort_if_errors();\n \n-    crate::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n+    assert_symbols_are_distinct(tcx, items.iter());\n \n     let strategy = if tcx.sess.opts.incremental.is_some() {\n         PartitioningStrategy::PerModule"}]}