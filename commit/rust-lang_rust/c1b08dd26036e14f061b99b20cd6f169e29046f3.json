{"sha": "c1b08dd26036e14f061b99b20cd6f169e29046f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjA4ZGQyNjAzNmUxNGYwNjFiOTliMjBjZDZmMTY5ZTI5MDQ2ZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-19T20:49:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-19T20:49:39Z"}, "message": "Auto merge of #63715 - Centril:rollup-dga8qtp, r=Centril\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #63252 (Remove recommendation about idiomatic syntax for Arc::clone)\n - #63376 (use different lifetime name for object-lifetime-default elision)\n - #63620 (Use constraint span when lowering associated types)\n - #63699 (Fix suggestion from incorrect `move async` to `async move`.)\n - #63704 ( Fixed: error: unnecessary trailing semicolon)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "2a436944507cd0f934892d37120557784006d92d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a436944507cd0f934892d37120557784006d92d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b08dd26036e14f061b99b20cd6f169e29046f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b08dd26036e14f061b99b20cd6f169e29046f3", "html_url": "https://github.com/rust-lang/rust/commit/c1b08dd26036e14f061b99b20cd6f169e29046f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b08dd26036e14f061b99b20cd6f169e29046f3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29a54035c77cb2ba7ea2c24b2437760d0495a2c8", "html_url": "https://github.com/rust-lang/rust/commit/29a54035c77cb2ba7ea2c24b2437760d0495a2c8"}, {"sha": "ac345942097cf27c7b07550fc3f955d198da0021", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac345942097cf27c7b07550fc3f955d198da0021", "html_url": "https://github.com/rust-lang/rust/commit/ac345942097cf27c7b07550fc3f955d198da0021"}], "stats": {"total": 1066, "additions": 847, "deletions": 219}, "files": [{"sha": "9ffc1673e5ab8e43954374a2f68a70a935c69baa", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -107,10 +107,6 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n /// // a, b, and foo are all Arcs that point to the same memory location\n /// ```\n ///\n-/// The [`Arc::clone(&from)`] syntax is the most idiomatic because it conveys more explicitly\n-/// the meaning of the code. In the example above, this syntax makes it easier to see that\n-/// this code is creating a new reference rather than copying the whole content of foo.\n-///\n /// ## `Deref` behavior\n ///\n /// `Arc<T>` automatically dereferences to `T` (via the [`Deref`][deref] trait),"}, {"sha": "fa274f831b7950267332d6440b6c8cc86567ce96", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -433,6 +433,7 @@ pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime\n         LifetimeName::Static |\n         LifetimeName::Error |\n         LifetimeName::Implicit |\n+        LifetimeName::ImplicitObjectLifetimeDefault |\n         LifetimeName::Underscore => {}\n     }\n }"}, {"sha": "7ec321061372782c16a3330fb026d1a71339ca7d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 71, "deletions": 15, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -72,7 +72,7 @@ use syntax::symbol::{kw, sym, Symbol};\n use syntax::tokenstream::{TokenStream, TokenTree};\n use syntax::parse::token::{self, Token};\n use syntax::visit::{self, Visitor};\n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::Span;\n \n const HIR_ID_COUNTER_LOCKED: u32 = 0xFFFFFFFF;\n \n@@ -322,7 +322,7 @@ enum ParenthesizedGenericArgs {\n /// `resolve_lifetime` module. Often we \"fallthrough\" to that code by generating\n /// an \"elided\" or \"underscore\" lifetime name. In the future, we probably want to move\n /// everything into HIR lowering.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n enum AnonymousLifetimeMode {\n     /// For **Modern** cases, create a new anonymous region parameter\n     /// and reference that.\n@@ -715,10 +715,16 @@ impl<'a> LoweringContext<'a> {\n         anonymous_lifetime_mode: AnonymousLifetimeMode,\n         op: impl FnOnce(&mut Self) -> R,\n     ) -> R {\n+        debug!(\n+            \"with_anonymous_lifetime_mode(anonymous_lifetime_mode={:?})\",\n+            anonymous_lifetime_mode,\n+        );\n         let old_anonymous_lifetime_mode = self.anonymous_lifetime_mode;\n         self.anonymous_lifetime_mode = anonymous_lifetime_mode;\n         let result = op(self);\n         self.anonymous_lifetime_mode = old_anonymous_lifetime_mode;\n+        debug!(\"with_anonymous_lifetime_mode: restoring anonymous_lifetime_mode={:?}\",\n+               old_anonymous_lifetime_mode);\n         result\n     }\n \n@@ -1033,13 +1039,14 @@ impl<'a> LoweringContext<'a> {\n     /// ```\n     ///\n     /// returns a `hir::TypeBinding` representing `Item`.\n-    fn lower_assoc_ty_constraint(&mut self,\n-                                 c: &AssocTyConstraint,\n-                                 itctx: ImplTraitContext<'_>)\n-                                 -> hir::TypeBinding {\n-        debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", c, itctx);\n+    fn lower_assoc_ty_constraint(\n+        &mut self,\n+        constraint: &AssocTyConstraint,\n+        itctx: ImplTraitContext<'_>,\n+    ) -> hir::TypeBinding {\n+        debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n-        let kind = match c.kind {\n+        let kind = match constraint.kind {\n             AssocTyConstraintKind::Equality { ref ty } => hir::TypeBindingKind::Equality {\n                 ty: self.lower_ty(ty, itctx)\n             },\n@@ -1094,15 +1101,15 @@ impl<'a> LoweringContext<'a> {\n                         impl_trait_node_id,\n                         DefPathData::ImplTrait,\n                         ExpnId::root(),\n-                        DUMMY_SP\n+                        constraint.span,\n                     );\n \n                     self.with_dyn_type_scope(false, |this| {\n                         let ty = this.lower_ty(\n                             &Ty {\n                                 id: this.sess.next_node_id(),\n                                 node: TyKind::ImplTrait(impl_trait_node_id, bounds.clone()),\n-                                span: DUMMY_SP,\n+                                span: constraint.span,\n                             },\n                             itctx,\n                         );\n@@ -1124,10 +1131,10 @@ impl<'a> LoweringContext<'a> {\n         };\n \n         hir::TypeBinding {\n-            hir_id: self.lower_node_id(c.id),\n-            ident: c.ident,\n+            hir_id: self.lower_node_id(constraint.id),\n+            ident: constraint.ident,\n             kind,\n-            span: c.span,\n+            span: constraint.span,\n         }\n     }\n \n@@ -1355,6 +1362,13 @@ impl<'a> LoweringContext<'a> {\n         opaque_ty_node_id: NodeId,\n         lower_bounds: impl FnOnce(&mut LoweringContext<'_>) -> hir::GenericBounds,\n     ) -> hir::TyKind {\n+        debug!(\n+            \"lower_opaque_impl_trait(fn_def_id={:?}, opaque_ty_node_id={:?}, span={:?})\",\n+            fn_def_id,\n+            opaque_ty_node_id,\n+            span,\n+        );\n+\n         // Make sure we know that some funky desugaring has been going on here.\n         // This is a first: there is code in other places like for loop\n         // desugaring that explicitly states that we don't want to track that.\n@@ -1382,6 +1396,14 @@ impl<'a> LoweringContext<'a> {\n             &hir_bounds,\n         );\n \n+        debug!(\n+            \"lower_opaque_impl_trait: lifetimes={:#?}\", lifetimes,\n+        );\n+\n+        debug!(\n+            \"lower_opaque_impl_trait: lifetime_defs={:#?}\", lifetime_defs,\n+        );\n+\n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n             let opaque_ty_item = hir::OpaqueTy {\n                 generics: hir::Generics {\n@@ -1397,7 +1419,7 @@ impl<'a> LoweringContext<'a> {\n                 origin: hir::OpaqueTyOrigin::FnReturn,\n             };\n \n-            trace!(\"exist ty from impl trait def-index: {:#?}\", opaque_ty_def_index);\n+            trace!(\"lower_opaque_impl_trait: {:#?}\", opaque_ty_def_index);\n             let opaque_ty_id = lctx.generate_opaque_type(\n                 opaque_ty_node_id,\n                 opaque_ty_item,\n@@ -1445,6 +1467,13 @@ impl<'a> LoweringContext<'a> {\n         parent_index: DefIndex,\n         bounds: &hir::GenericBounds,\n     ) -> (HirVec<hir::GenericArg>, HirVec<hir::GenericParam>) {\n+        debug!(\n+            \"lifetimes_from_impl_trait_bounds(opaque_ty_id={:?}, \\\n+             parent_index={:?}, \\\n+             bounds={:#?})\",\n+            opaque_ty_id, parent_index, bounds,\n+        );\n+\n         // This visitor walks over `impl Trait` bounds and creates defs for all lifetimes that\n         // appear in the bounds, excluding lifetimes that are created within the bounds.\n         // E.g., `'a`, `'b`, but not `'c` in `impl for<'c> SomeTrait<'a, 'b, 'c>`.\n@@ -1532,6 +1561,11 @@ impl<'a> LoweringContext<'a> {\n                         }\n                     }\n                     hir::LifetimeName::Param(_) => lifetime.name,\n+\n+                    // Refers to some other lifetime that is \"in\n+                    // scope\" within the type.\n+                    hir::LifetimeName::ImplicitObjectLifetimeDefault => return,\n+\n                     hir::LifetimeName::Error | hir::LifetimeName::Static => return,\n                 };\n \n@@ -2182,6 +2216,14 @@ impl<'a> LoweringContext<'a> {\n         fn_def_id: DefId,\n         opaque_ty_node_id: NodeId,\n     ) -> hir::FunctionRetTy {\n+        debug!(\n+            \"lower_async_fn_ret_ty(\\\n+             output={:?}, \\\n+             fn_def_id={:?}, \\\n+             opaque_ty_node_id={:?})\",\n+            output, fn_def_id, opaque_ty_node_id,\n+        );\n+\n         let span = output.span();\n \n         let opaque_ty_span = self.mark_span_with_reason(\n@@ -2264,6 +2306,8 @@ impl<'a> LoweringContext<'a> {\n                 ),\n             );\n \n+            debug!(\"lower_async_fn_ret_ty: future_bound={:#?}\", future_bound);\n+\n             // Calculate all the lifetimes that should be captured\n             // by the opaque type. This should include all in-scope\n             // lifetime parameters, including those defined in-band.\n@@ -2512,6 +2556,12 @@ impl<'a> LoweringContext<'a> {\n                     hir::LifetimeName::Implicit\n                         | hir::LifetimeName::Underscore\n                         | hir::LifetimeName::Static => hir::ParamName::Plain(lt.name.ident()),\n+                    hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n+                        span_bug!(\n+                            param.ident.span,\n+                            \"object-lifetime-default should not occur here\",\n+                        );\n+                    }\n                     hir::LifetimeName::Error => ParamName::Error,\n                 };\n \n@@ -3255,7 +3305,13 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::PassThrough => {}\n         }\n \n-        self.new_implicit_lifetime(span)\n+        let r = hir::Lifetime {\n+            hir_id: self.next_id(),\n+            span,\n+            name: hir::LifetimeName::ImplicitObjectLifetimeDefault,\n+        };\n+        debug!(\"elided_dyn_bound: r={:?}\", r);\n+        r\n     }\n \n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {"}, {"sha": "983048188527fd12f9e34aeaaa9050982ac88cc0", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -221,6 +221,19 @@ pub enum LifetimeName {\n     /// User wrote nothing (e.g., the lifetime in `&u32`).\n     Implicit,\n \n+    /// Implicit lifetime in a context like `dyn Foo`. This is\n+    /// distinguished from implicit lifetimes elsewhere because the\n+    /// lifetime that they default to must appear elsewhere within the\n+    /// enclosing type.  This means that, in an `impl Trait` context, we\n+    /// don't have to create a parameter for them. That is, `impl\n+    /// Trait<Item = &u32>` expands to an opaque type like `type\n+    /// Foo<'a> = impl Trait<Item = &'a u32>`, but `impl Trait<item =\n+    /// dyn Bar>` expands to `type Foo = impl Trait<Item = dyn Bar +\n+    /// 'static>`. The latter uses `ImplicitObjectLifetimeDefault` so\n+    /// that surrounding code knows not to create a lifetime\n+    /// parameter.\n+    ImplicitObjectLifetimeDefault,\n+\n     /// Indicates an error during lowering (usually `'_` in wrong place)\n     /// that was already reported.\n     Error,\n@@ -235,7 +248,9 @@ pub enum LifetimeName {\n impl LifetimeName {\n     pub fn ident(&self) -> Ident {\n         match *self {\n-            LifetimeName::Implicit | LifetimeName::Error => Ident::invalid(),\n+            LifetimeName::ImplicitObjectLifetimeDefault\n+                | LifetimeName::Implicit\n+                | LifetimeName::Error => Ident::invalid(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),\n@@ -244,7 +259,9 @@ impl LifetimeName {\n \n     pub fn is_elided(&self) -> bool {\n         match self {\n-            LifetimeName::Implicit | LifetimeName::Underscore => true,\n+            LifetimeName::ImplicitObjectLifetimeDefault\n+            | LifetimeName::Implicit\n+            | LifetimeName::Underscore => true,\n \n             // It might seem surprising that `Fresh(_)` counts as\n             // *not* elided -- but this is because, as far as the code"}, {"sha": "c9fd3392a962d2df8e4f22b663576f51ac3348d2", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -127,8 +127,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ) -> InferOk<'tcx, (T, OpaqueTypeMap<'tcx>)> {\n         debug!(\n             \"instantiate_opaque_types(value={:?}, parent_def_id={:?}, body_id={:?}, \\\n-             param_env={:?})\",\n-            value, parent_def_id, body_id, param_env,\n+             param_env={:?}, value_span={:?})\",\n+            value, parent_def_id, body_id, param_env, value_span,\n         );\n         let mut instantiator = Instantiator {\n             infcx: self,\n@@ -1108,9 +1108,11 @@ impl<'a, 'tcx> Instantiator<'a, 'tcx> {\n         // Use the same type variable if the exact same opaque type appears more\n         // than once in the return type (e.g., if it's passed to a type alias).\n         if let Some(opaque_defn) = self.opaque_types.get(&def_id) {\n+            debug!(\"instantiate_opaque_types: returning concrete ty {:?}\", opaque_defn.concrete_ty);\n             return opaque_defn.concrete_ty;\n         }\n         let span = tcx.def_span(def_id);\n+        debug!(\"fold_opaque_ty {:?} {:?}\", self.value_span, span);\n         let ty_var = infcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });\n "}, {"sha": "f5b0af61693be6eba33db255fedb9b9a45f9065c", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -5,6 +5,8 @@\n //! used between functions, and they operate in a purely top-down\n //! way. Therefore, we break lifetime name resolution into a separate pass.\n \n+// ignore-tidy-filelength\n+\n use crate::hir::def::{Res, DefKind};\n use crate::hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use crate::hir::map::Map;\n@@ -556,6 +558,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n \n     fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n         debug!(\"visit_ty: id={:?} ty={:?}\", ty.hir_id, ty);\n+        debug!(\"visit_ty: ty.node={:?}\", ty.node);\n         match ty.node {\n             hir::TyKind::BareFn(ref c) => {\n                 let next_early_index = self.next_early_index();\n@@ -585,11 +588,20 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.is_in_fn_syntax = was_in_fn_syntax;\n             }\n             hir::TyKind::TraitObject(ref bounds, ref lifetime) => {\n+                debug!(\"visit_ty: TraitObject(bounds={:?}, lifetime={:?})\", bounds, lifetime);\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, hir::TraitBoundModifier::None);\n                 }\n                 match lifetime.name {\n                     LifetimeName::Implicit => {\n+                        // For types like `dyn Foo`, we should\n+                        // generate a special form of elided.\n+                        span_bug!(\n+                            ty.span,\n+                            \"object-lifetime-default expected, not implict\",\n+                        );\n+                    }\n+                    LifetimeName::ImplicitObjectLifetimeDefault => {\n                         // If the user does not write *anything*, we\n                         // use the object lifetime defaulting\n                         // rules. So e.g., `Box<dyn Debug>` becomes\n@@ -897,6 +909,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_lifetime(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n+        debug!(\"visit_lifetime(lifetime_ref={:?})\", lifetime_ref);\n         if lifetime_ref.is_elided() {\n             self.resolve_elided_lifetimes(vec![lifetime_ref]);\n             return;\n@@ -1911,6 +1924,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn visit_segment_args(&mut self, res: Res, depth: usize, generic_args: &'tcx hir::GenericArgs) {\n+        debug!(\n+            \"visit_segment_args(res={:?}, depth={:?}, generic_args={:?})\",\n+            res,\n+            depth,\n+            generic_args,\n+        );\n+\n         if generic_args.parenthesized {\n             let was_in_fn_syntax = self.is_in_fn_syntax;\n             self.is_in_fn_syntax = true;\n@@ -1964,6 +1984,23 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             _ => None,\n         };\n \n+        debug!(\"visit_segment_args: type_def_id={:?}\", type_def_id);\n+\n+        // Compute a vector of defaults, one for each type parameter,\n+        // per the rules given in RFCs 599 and 1156. Example:\n+        //\n+        // ```rust\n+        // struct Foo<'a, T: 'a, U> { }\n+        // ```\n+        //\n+        // If you have `Foo<'x, dyn Bar, dyn Baz>`, we want to default\n+        // `dyn Bar` to `dyn Bar + 'x` (because of the `T: 'a` bound)\n+        // and `dyn Baz` to `dyn Baz + 'static` (because there is no\n+        // such bound).\n+        //\n+        // Therefore, we would compute `object_lifetime_defaults` to a\n+        // vector like `['x, 'static]`. Note that the vector only\n+        // includes type parameters.\n         let object_lifetime_defaults = type_def_id.map_or(vec![], |def_id| {\n             let in_body = {\n                 let mut scope = self.scope;\n@@ -2003,6 +2040,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                             .collect()\n                     })\n             };\n+            debug!(\"visit_segment_args: unsubst={:?}\", unsubst);\n             unsubst\n                 .iter()\n                 .map(|set| match *set {\n@@ -2023,6 +2061,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 .collect()\n         });\n \n+        debug!(\"visit_segment_args: object_lifetime_defaults={:?}\", object_lifetime_defaults);\n+\n         let mut i = 0;\n         for arg in &generic_args.args {\n             match arg {\n@@ -2045,8 +2085,49 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         }\n \n+        // Hack: when resolving the type `XX` in binding like `dyn\n+        // Foo<'b, Item = XX>`, the current object-lifetime default\n+        // would be to examine the trait `Foo` to check whether it has\n+        // a lifetime bound declared on `Item`. e.g., if `Foo` is\n+        // declared like so, then the default object lifetime bound in\n+        // `XX` should be `'b`:\n+        //\n+        // ```rust\n+        // trait Foo<'a> {\n+        //   type Item: 'a;\n+        // }\n+        // ```\n+        //\n+        // but if we just have `type Item;`, then it would be\n+        // `'static`. However, we don't get all of this logic correct.\n+        //\n+        // Instead, we do something hacky: if there are no lifetime parameters\n+        // to the trait, then we simply use a default object lifetime\n+        // bound of `'static`, because there is no other possibility. On the other hand,\n+        // if there ARE lifetime parameters, then we require the user to give an\n+        // explicit bound for now.\n+        //\n+        // This is intended to leave room for us to implement the\n+        // correct behavior in the future.\n+        let has_lifetime_parameter = generic_args\n+            .args\n+            .iter()\n+            .any(|arg| match arg {\n+                GenericArg::Lifetime(_) => true,\n+                _ => false,\n+            });\n+\n+        // Resolve lifetimes found in the type `XX` from `Item = XX` bindings.\n         for b in &generic_args.bindings {\n-            self.visit_assoc_type_binding(b);\n+            let scope = Scope::ObjectLifetimeDefault {\n+                lifetime: if has_lifetime_parameter {\n+                    None\n+                } else {\n+                    Some(Region::Static)\n+                },\n+                s: self.scope,\n+            };\n+            self.with(scope, |_, this| this.visit_assoc_type_binding(b));\n         }\n     }\n \n@@ -2347,6 +2428,8 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn resolve_elided_lifetimes(&mut self, lifetime_refs: Vec<&'tcx hir::Lifetime>) {\n+        debug!(\"resolve_elided_lifetimes(lifetime_refs={:?})\", lifetime_refs);\n+\n         if lifetime_refs.is_empty() {\n             return;\n         }\n@@ -2539,6 +2622,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n     }\n \n     fn resolve_object_lifetime_default(&mut self, lifetime_ref: &'tcx hir::Lifetime) {\n+        debug!(\"resolve_object_lifetime_default(lifetime_ref={:?})\", lifetime_ref);\n         let mut late_depth = 0;\n         let mut scope = self.scope;\n         let lifetime = loop {\n@@ -2638,6 +2722,13 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                         hir::LifetimeName::Param(_) | hir::LifetimeName::Implicit => {\n                             self.resolve_lifetime_ref(lt);\n                         }\n+                        hir::LifetimeName::ImplicitObjectLifetimeDefault => {\n+                            self.tcx.sess.delay_span_bug(\n+                                lt.span,\n+                                \"lowering generated `ImplicitObjectLifetimeDefault` \\\n+                                 outside of an object type\",\n+                            )\n+                        }\n                         hir::LifetimeName::Error => {\n                             // No need to do anything, error already reported.\n                         }"}, {"sha": "c1de4939c1d9154a567b4ea8c12342968f8d28b8", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -248,10 +248,10 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n     /// This is always inlined, despite its size, because it has a single\n     /// callsite and it is called *very* frequently.\n     #[inline(always)]\n-    fn process_obligation(&mut self,\n-                          pending_obligation: &mut Self::Obligation)\n-                          -> ProcessResult<Self::Obligation, Self::Error>\n-    {\n+    fn process_obligation(\n+        &mut self,\n+        pending_obligation: &mut Self::Obligation,\n+    ) -> ProcessResult<Self::Obligation, Self::Error> {\n         // if we were stalled on some unresolved variables, first check\n         // whether any of them have been resolved; if not, don't bother\n         // doing more work yet\n@@ -277,7 +277,7 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n                 self.selcx.infcx().resolve_vars_if_possible(&obligation.predicate);\n         }\n \n-        debug!(\"process_obligation: obligation = {:?}\", obligation);\n+        debug!(\"process_obligation: obligation = {:?} cause = {:?}\", obligation, obligation.cause);\n \n         match obligation.predicate {\n             ty::Predicate::Trait(ref data) => {\n@@ -425,10 +425,13 @@ impl<'a, 'b, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'tcx> {\n             }\n \n             ty::Predicate::WellFormed(ty) => {\n-                match ty::wf::obligations(self.selcx.infcx(),\n-                                          obligation.param_env,\n-                                          obligation.cause.body_id,\n-                                          ty, obligation.cause.span) {\n+                match ty::wf::obligations(\n+                    self.selcx.infcx(),\n+                    obligation.param_env,\n+                    obligation.cause.body_id,\n+                    ty,\n+                    obligation.cause.span,\n+                ) {\n                     None => {\n                         pending_obligation.stalled_on = vec![ty];\n                         ProcessResult::Unchanged"}, {"sha": "247783c420e251d6d32b79835fba3e1dbb303379", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1190,7 +1190,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         );\n \n         let suggestion = match tcx.sess.source_map().span_to_snippet(args_span) {\n-            Ok(string) => format!(\"move {}\", string),\n+            Ok(mut string) => {\n+                if string.starts_with(\"async \") {\n+                    string.insert_str(6, \"move \");\n+                } else if string.starts_with(\"async|\") {\n+                    string.insert_str(5, \" move\");\n+                } else {\n+                    string.insert_str(0, \"move \");\n+                };\n+                string\n+            },\n             Err(_) => \"move |<args>| <body>\".to_string()\n         };\n "}, {"sha": "ca68b9e31b6b91337e4fa2b555d7c53f0de24f12", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -578,7 +578,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 })\n             }\n \n-            hir::LifetimeName::Implicit => {\n+            hir::LifetimeName::ImplicitObjectLifetimeDefault\n+            | hir::LifetimeName::Implicit => {\n                 // In this case, the user left off the lifetime; so\n                 // they wrote something like:\n                 //"}, {"sha": "ba797354a7380f30935297b4dcf3110571e51f6d", "filename": "src/libstd/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -155,7 +155,7 @@ impl Command {\n         _f: Box<dyn FnMut() -> io::Result<()> + Send + Sync>,\n     ) {\n         // Fork() is not supported in vxWorks so no way to run the closure in the new procecss.\n-        unimplemented!();;\n+        unimplemented!();\n     }\n \n     pub fn stdin(&mut self, stdin: Stdio) {"}, {"sha": "a58cec53421427b972603994a504677f27b8e752", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,32 @@\n+// This test documents that `type Out = Box<dyn Bar<Assoc: Copy>>;`\n+// is allowed and will correctly reject an opaque `type Out` which\n+// does not satisfy the bound `<TheType as Bar>::Assoc: Copy`.\n+//\n+// FIXME(rust-lang/lang): I think this behavior is logical if we want to allow\n+// `dyn Trait<Assoc: Bound>` but we should decide if we want that. // Centril\n+//\n+// Additionally, as reported in https://github.com/rust-lang/rust/issues/63594,\n+// we check that the spans for the error message are sane here.\n+\n+#![feature(associated_type_bounds)]\n+\n+fn main() {}\n+\n+trait Bar { type Assoc; }\n+\n+trait Thing {\n+    type Out;\n+    fn func() -> Self::Out;\n+}\n+\n+struct AssocNoCopy;\n+impl Bar for AssocNoCopy { type Assoc = String; }\n+\n+impl Thing for AssocNoCopy {\n+    type Out = Box<dyn Bar<Assoc: Copy>>;\n+    //~^ ERROR the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+\n+    fn func() -> Self::Out {\n+        Box::new(AssocNoCopy)\n+    }\n+}"}, {"sha": "b6b49c2e903508d75e01d7def22695f2975e15ad", "filename": "src/test/ui/associated-type-bounds/assoc-type-eq-with-dyn-atb-fail.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fassoc-type-eq-with-dyn-atb-fail.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n+  --> $DIR/assoc-type-eq-with-dyn-atb-fail.rs:26:28\n+   |\n+LL |     type Out = Box<dyn Bar<Assoc: Copy>>;\n+   |                            ^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n+   |\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a89fd9807da8f0ee9f970eb48621909622c79926", "filename": "src/test/ui/associated-type-bounds/duplicate.rs", "status": "modified", "additions": 94, "deletions": 71, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1,161 +1,184 @@\n // compile-fail\n // ignore-tidy-linelength\n-// error-pattern:could not find defining uses\n \n #![feature(associated_type_bounds)]\n #![feature(type_alias_impl_trait)]\n-#![feature(impl_trait_in_bindings)]\n+#![feature(impl_trait_in_bindings)] //~ WARN the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash [incomplete_features]\n #![feature(untagged_unions)]\n \n use std::iter;\n \n struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n \n trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS1: Iterator<Item: Copy, Item: Send> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n \n type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n-//~^ the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~^ ERROR the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified [E0719]\n+//~| ERROR could not find defining uses\n+//~| ERROR could not find defining uses\n \n fn main() {}"}, {"sha": "e5e85d6856fd315aafc6259e271dec85b7b138b8", "filename": "src/test/ui/associated-type-bounds/duplicate.stderr", "status": "modified", "additions": 148, "deletions": 76, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fduplicate.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1,634 +1,706 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/duplicate.rs:7:12\n+  --> $DIR/duplicate.rs:6:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:12:36\n+  --> $DIR/duplicate.rs:11:36\n    |\n LL | struct SI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:14:36\n+  --> $DIR/duplicate.rs:13:36\n    |\n LL | struct SI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:16:39\n+  --> $DIR/duplicate.rs:15:39\n    |\n LL | struct SI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:18:45\n+  --> $DIR/duplicate.rs:17:45\n    |\n LL | struct SW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:20:45\n+  --> $DIR/duplicate.rs:19:45\n    |\n LL | struct SW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:22:48\n+  --> $DIR/duplicate.rs:21:48\n    |\n LL | struct SW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:25:34\n+  --> $DIR/duplicate.rs:24:34\n    |\n LL | enum EI1<T: Iterator<Item: Copy, Item: Send>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:27:34\n+  --> $DIR/duplicate.rs:26:34\n    |\n LL | enum EI2<T: Iterator<Item: Copy, Item: Copy>> { V(T) }\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:29:37\n+  --> $DIR/duplicate.rs:28:37\n    |\n LL | enum EI3<T: Iterator<Item: 'static, Item: 'static>> { V(T) }\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:31:43\n+  --> $DIR/duplicate.rs:30:43\n    |\n LL | enum EW1<T> where T: Iterator<Item: Copy, Item: Send> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:33:43\n+  --> $DIR/duplicate.rs:32:43\n    |\n LL | enum EW2<T> where T: Iterator<Item: Copy, Item: Copy> { V(T) }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:35:46\n+  --> $DIR/duplicate.rs:34:46\n    |\n LL | enum EW3<T> where T: Iterator<Item: 'static, Item: 'static> { V(T) }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:38:35\n+  --> $DIR/duplicate.rs:37:35\n    |\n LL | union UI1<T: Iterator<Item: Copy, Item: Send>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:40:35\n+  --> $DIR/duplicate.rs:39:35\n    |\n LL | union UI2<T: Iterator<Item: Copy, Item: Copy>> { f: T }\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:42:38\n+  --> $DIR/duplicate.rs:41:38\n    |\n LL | union UI3<T: Iterator<Item: 'static, Item: 'static>> { f: T }\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:44:44\n+  --> $DIR/duplicate.rs:43:44\n    |\n LL | union UW1<T> where T: Iterator<Item: Copy, Item: Send> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:46:44\n+  --> $DIR/duplicate.rs:45:44\n    |\n LL | union UW2<T> where T: Iterator<Item: Copy, Item: Copy> { f: T }\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:48:47\n+  --> $DIR/duplicate.rs:47:47\n    |\n LL | union UW3<T> where T: Iterator<Item: 'static, Item: 'static> { f: T }\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:51:32\n+  --> $DIR/duplicate.rs:50:32\n    |\n LL | fn FI1<T: Iterator<Item: Copy, Item: Send>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:53:32\n+  --> $DIR/duplicate.rs:52:32\n    |\n LL | fn FI2<T: Iterator<Item: Copy, Item: Copy>>() {}\n    |                    ----------  ^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:55:35\n+  --> $DIR/duplicate.rs:54:35\n    |\n LL | fn FI3<T: Iterator<Item: 'static, Item: 'static>>() {}\n    |                    -------------  ^^^^^^^^^^^^^ re-bound here\n    |                    |\n    |                    `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:57:43\n+  --> $DIR/duplicate.rs:56:43\n    |\n LL | fn FW1<T>() where T: Iterator<Item: Copy, Item: Send> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:59:43\n+  --> $DIR/duplicate.rs:58:43\n    |\n LL | fn FW2<T>() where T: Iterator<Item: Copy, Item: Copy> {}\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:61:46\n+  --> $DIR/duplicate.rs:60:46\n    |\n LL | fn FW3<T>() where T: Iterator<Item: 'static, Item: 'static> {}\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:70:40\n+  --> $DIR/duplicate.rs:69:40\n    |\n LL | fn FAPIT1(_: impl Iterator<Item: Copy, Item: Send>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:72:40\n+  --> $DIR/duplicate.rs:71:40\n    |\n LL | fn FAPIT2(_: impl Iterator<Item: Copy, Item: Copy>) {}\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:74:43\n+  --> $DIR/duplicate.rs:73:43\n    |\n LL | fn FAPIT3(_: impl Iterator<Item: 'static, Item: 'static>) {}\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:64:42\n+  --> $DIR/duplicate.rs:63:42\n    |\n LL | fn FRPIT1() -> impl Iterator<Item: Copy, Item: Send> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:66:42\n+  --> $DIR/duplicate.rs:65:42\n    |\n LL | fn FRPIT2() -> impl Iterator<Item: Copy, Item: Copy> { iter::empty() }\n    |                              ----------  ^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:68:45\n+  --> $DIR/duplicate.rs:67:45\n    |\n LL | fn FRPIT3() -> impl Iterator<Item: 'static, Item: 'static> { iter::empty() }\n    |                              -------------  ^^^^^^^^^^^^^ re-bound here\n    |                              |\n    |                              `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:77:39\n+  --> $DIR/duplicate.rs:76:39\n    |\n LL | const CIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:79:39\n+  --> $DIR/duplicate.rs:78:39\n    |\n LL | const CIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                           ----------  ^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:81:42\n+  --> $DIR/duplicate.rs:80:42\n    |\n LL | const CIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                           -------------  ^^^^^^^^^^^^^ re-bound here\n    |                           |\n    |                           `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:83:40\n+  --> $DIR/duplicate.rs:82:40\n    |\n LL | static SIT1: impl Iterator<Item: Copy, Item: Send> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:85:40\n+  --> $DIR/duplicate.rs:84:40\n    |\n LL | static SIT2: impl Iterator<Item: Copy, Item: Copy> = iter::empty();\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:87:43\n+  --> $DIR/duplicate.rs:86:43\n    |\n LL | static SIT3: impl Iterator<Item: 'static, Item: 'static> = iter::empty();\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:90:46\n+  --> $DIR/duplicate.rs:89:46\n    |\n LL | fn lit1() { let _: impl Iterator<Item: Copy, Item: Send> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:92:46\n+  --> $DIR/duplicate.rs:91:46\n    |\n LL | fn lit2() { let _: impl Iterator<Item: Copy, Item: Copy> = iter::empty(); }\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:94:49\n+  --> $DIR/duplicate.rs:93:49\n    |\n LL | fn lit3() { let _: impl Iterator<Item: 'static, Item: 'static> = iter::empty(); }\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:97:35\n+  --> $DIR/duplicate.rs:96:35\n    |\n LL | type TAI1<T: Iterator<Item: Copy, Item: Send>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:99:35\n+  --> $DIR/duplicate.rs:98:35\n    |\n LL | type TAI2<T: Iterator<Item: Copy, Item: Copy>> = T;\n    |                       ----------  ^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:101:38\n+  --> $DIR/duplicate.rs:100:38\n    |\n LL | type TAI3<T: Iterator<Item: 'static, Item: 'static>> = T;\n    |                       -------------  ^^^^^^^^^^^^^ re-bound here\n    |                       |\n    |                       `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:103:44\n+  --> $DIR/duplicate.rs:102:44\n    |\n LL | type TAW1<T> where T: Iterator<Item: Copy, Item: Send> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:105:44\n+  --> $DIR/duplicate.rs:104:44\n    |\n LL | type TAW2<T> where T: Iterator<Item: Copy, Item: Copy> = T;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:107:47\n+  --> $DIR/duplicate.rs:106:47\n    |\n LL | type TAW3<T> where T: Iterator<Item: 'static, Item: 'static> = T;\n    |                                -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:110:1\n+  --> $DIR/duplicate.rs:109:1\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:110:36\n+  --> $DIR/duplicate.rs:109:36\n    |\n LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:112:1\n+  --> $DIR/duplicate.rs:114:1\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:112:36\n+  --> $DIR/duplicate.rs:114:36\n    |\n LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:114:1\n+  --> $DIR/duplicate.rs:119:1\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:114:39\n+  --> $DIR/duplicate.rs:119:39\n    |\n LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:116:1\n+  --> $DIR/duplicate.rs:124:1\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:116:40\n+  --> $DIR/duplicate.rs:124:40\n    |\n LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:118:1\n+  --> $DIR/duplicate.rs:129:1\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:118:40\n+  --> $DIR/duplicate.rs:129:40\n    |\n LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n-  --> $DIR/duplicate.rs:120:1\n+  --> $DIR/duplicate.rs:134:1\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:120:43\n+  --> $DIR/duplicate.rs:134:43\n    |\n LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:123:36\n+  --> $DIR/duplicate.rs:140:36\n    |\n LL | trait TRI1<T: Iterator<Item: Copy, Item: Send>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:125:36\n+  --> $DIR/duplicate.rs:142:36\n    |\n LL | trait TRI2<T: Iterator<Item: Copy, Item: Copy>> {}\n    |                        ----------  ^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:127:39\n+  --> $DIR/duplicate.rs:144:39\n    |\n LL | trait TRI3<T: Iterator<Item: 'static, Item: 'static>> {}\n    |                        -------------  ^^^^^^^^^^^^^ re-bound here\n    |                        |\n    |                        `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:129:34\n+  --> $DIR/duplicate.rs:146:34\n    |\n LL | trait TRS1: Iterator<Item: Copy, Item: Send> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:131:34\n+  --> $DIR/duplicate.rs:148:34\n    |\n LL | trait TRS2: Iterator<Item: Copy, Item: Copy> {}\n    |                      ----------  ^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:133:37\n+  --> $DIR/duplicate.rs:150:37\n    |\n LL | trait TRS3: Iterator<Item: 'static, Item: 'static> {}\n    |                      -------------  ^^^^^^^^^^^^^ re-bound here\n    |                      |\n    |                      `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:135:45\n+  --> $DIR/duplicate.rs:152:45\n    |\n LL | trait TRW1<T> where T: Iterator<Item: Copy, Item: Send> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:137:45\n+  --> $DIR/duplicate.rs:154:45\n    |\n LL | trait TRW2<T> where T: Iterator<Item: Copy, Item: Copy> {}\n    |                                 ----------  ^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:139:48\n+  --> $DIR/duplicate.rs:156:48\n    |\n LL | trait TRW3<T> where T: Iterator<Item: 'static, Item: 'static> {}\n    |                                 -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                 |\n    |                                 `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:141:46\n+  --> $DIR/duplicate.rs:158:46\n    |\n LL | trait TRSW1 where Self: Iterator<Item: Copy, Item: Send> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:143:46\n+  --> $DIR/duplicate.rs:160:46\n    |\n LL | trait TRSW2 where Self: Iterator<Item: Copy, Item: Copy> {}\n    |                                  ----------  ^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:145:49\n+  --> $DIR/duplicate.rs:162:49\n    |\n LL | trait TRSW3 where Self: Iterator<Item: 'static, Item: 'static> {}\n    |                                  -------------  ^^^^^^^^^^^^^ re-bound here\n    |                                  |\n    |                                  `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:147:43\n+  --> $DIR/duplicate.rs:164:43\n    |\n LL | trait TRA1 { type A: Iterator<Item: Copy, Item: Send>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:149:43\n+  --> $DIR/duplicate.rs:166:43\n    |\n LL | trait TRA2 { type A: Iterator<Item: Copy, Item: Copy>; }\n    |                               ----------  ^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:151:46\n+  --> $DIR/duplicate.rs:168:46\n    |\n LL | trait TRA3 { type A: Iterator<Item: 'static, Item: 'static>; }\n    |                               -------------  ^^^^^^^^^^^^^ re-bound here\n    |                               |\n    |                               `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:154:40\n+  --> $DIR/duplicate.rs:171:40\n    |\n LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n    |                            ----------  ^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:156:44\n+  --> $DIR/duplicate.rs:175:44\n    |\n LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n    |                                ----------  ^^^^^^^^^^ re-bound here\n    |                                |\n    |                                `Item` bound here first\n \n error[E0719]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) is already specified\n-  --> $DIR/duplicate.rs:158:43\n+  --> $DIR/duplicate.rs:179:43\n    |\n LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n    |                            -------------  ^^^^^^^^^^^^^ re-bound here\n    |                            |\n    |                            `Item` bound here first\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:109:24\n+   |\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                        ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:109:36\n+   |\n+LL | type ETAI1<T: Iterator<Item: Copy, Item: Send>> = impl Copy;\n+   |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:114:24\n+   |\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                        ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:114:36\n+   |\n+LL | type ETAI2<T: Iterator<Item: Copy, Item: Copy>> = impl Copy;\n+   |                                    ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:119:24\n+   |\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                        ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:119:39\n+   |\n+LL | type ETAI3<T: Iterator<Item: 'static, Item: 'static>> = impl Copy;\n+   |                                       ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:124:28\n+   |\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   |                            ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:124:40\n+   |\n+LL | type ETAI4 = impl Iterator<Item: Copy, Item: Send>;\n+   |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:129:28\n+   |\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   |                            ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:129:40\n+   |\n+LL | type ETAI5 = impl Iterator<Item: Copy, Item: Copy>;\n+   |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:134:28\n+   |\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:134:43\n+   |\n+LL | type ETAI6 = impl Iterator<Item: 'static, Item: 'static>;\n+   |                                           ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:171:28\n+   |\n+LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n+   |                            ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:171:40\n+   |\n+LL | type TADyn1 = dyn Iterator<Item: Copy, Item: Send>;\n+   |                                        ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:175:32\n+   |\n+LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n+   |                                ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:175:44\n+   |\n+LL | type TADyn2 = Box<dyn Iterator<Item: Copy, Item: Copy>>;\n+   |                                            ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:179:28\n+   |\n+LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n+   |                            ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/duplicate.rs:179:43\n+   |\n+LL | type TADyn3 = dyn Iterator<Item: 'static, Item: 'static>;\n+   |                                           ^^^^^^^^^^^^^\n \n error: aborting due to 93 previous errors\n "}, {"sha": "83a60825d84cdcabcaa2177f29f6001e319966b9", "filename": "src/test/ui/associated-type-bounds/inside-adt.rs", "status": "modified", "additions": 18, "deletions": 21, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1,36 +1,33 @@\n // compile-fail\n-// ignore-tidy-linelength\n-// error-pattern:could not find defining uses\n-\n #![feature(associated_type_bounds)]\n #![feature(untagged_unions)]\n \n struct S1 { f: dyn Iterator<Item: Copy> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n struct S3 { f: dyn Iterator<Item: 'static> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n \n enum E1 { V(dyn Iterator<Item: Copy>) }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n enum E3 { V(dyn Iterator<Item: 'static>) }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n \n union U1 { f: dyn Iterator<Item: Copy> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n union U2 { f: Box<dyn Iterator<Item: Copy>> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses\n union U3 { f: dyn Iterator<Item: 'static> }\n-//~^ associated type bounds are not allowed within structs, enums, or unions\n-//~| the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified [E0191]\n+//~^ ERROR associated type bounds are not allowed within structs, enums, or unions\n+//~| ERROR could not find defining uses"}, {"sha": "d0e0ceccd37253a3931eb2cb905ef7bc24e57e52", "filename": "src/test/ui/associated-type-bounds/inside-adt.stderr", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Finside-adt.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1,53 +1,53 @@\n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:8:29\n+  --> $DIR/inside-adt.rs:5:29\n    |\n LL | struct S1 { f: dyn Iterator<Item: Copy> }\n    |                             ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:11:33\n+  --> $DIR/inside-adt.rs:8:33\n    |\n LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                 ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:14:29\n+  --> $DIR/inside-adt.rs:11:29\n    |\n LL | struct S3 { f: dyn Iterator<Item: 'static> }\n    |                             ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:18:26\n+  --> $DIR/inside-adt.rs:15:26\n    |\n LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n    |                          ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:21:30\n+  --> $DIR/inside-adt.rs:18:30\n    |\n LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n    |                              ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:24:26\n+  --> $DIR/inside-adt.rs:21:26\n    |\n LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n    |                          ^^^^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:28:28\n+  --> $DIR/inside-adt.rs:25:28\n    |\n LL | union U1 { f: dyn Iterator<Item: Copy> }\n    |                            ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:31:32\n+  --> $DIR/inside-adt.rs:28:32\n    |\n LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n    |                                ^^^^^^^^^^\n \n error: associated type bounds are not allowed within structs, enums, or unions\n-  --> $DIR/inside-adt.rs:34:28\n+  --> $DIR/inside-adt.rs:31:28\n    |\n LL | union U3 { f: dyn Iterator<Item: 'static> }\n    |                            ^^^^^^^^^^^^^\n@@ -57,22 +57,58 @@ error[E0601]: `main` function not found in crate `inside_adt`\n    = note: consider adding a `main` function to `$DIR/inside-adt.rs`\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:5:29\n+   |\n+LL | struct S1 { f: dyn Iterator<Item: Copy> }\n+   |                             ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:8:33\n+   |\n+LL | struct S2 { f: Box<dyn Iterator<Item: Copy>> }\n+   |                                 ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:11:29\n+   |\n+LL | struct S3 { f: dyn Iterator<Item: 'static> }\n+   |                             ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:15:26\n+   |\n+LL | enum E1 { V(dyn Iterator<Item: Copy>) }\n+   |                          ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:18:30\n+   |\n+LL | enum E2 { V(Box<dyn Iterator<Item: Copy>>) }\n+   |                              ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:21:26\n+   |\n+LL | enum E3 { V(dyn Iterator<Item: 'static>) }\n+   |                          ^^^^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:25:28\n+   |\n+LL | union U1 { f: dyn Iterator<Item: Copy> }\n+   |                            ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:28:32\n+   |\n+LL | union U2 { f: Box<dyn Iterator<Item: Copy>> }\n+   |                                ^^^^^^^^^^\n \n error: could not find defining uses\n+  --> $DIR/inside-adt.rs:31:28\n+   |\n+LL | union U3 { f: dyn Iterator<Item: 'static> }\n+   |                            ^^^^^^^^^^^^^\n \n error: aborting due to 19 previous errors\n "}, {"sha": "d2fa5d0a3d0f189b5507dd4c6c1566f866fbba5c", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+#![feature(async_closure,async_await)]\n+fn foo() -> Box<dyn std::future::Future<Output = u32>> {\n+    let x = 0u32;\n+    Box::new((async || x)())\n+    //~^ ERROR E0373\n+}\n+\n+fn main() {\n+}"}, {"sha": "8bcfcf989208e05fbdbd5eba66d2176e1f09c824", "filename": "src/test/ui/async-await/async-borrowck-escaping-closure-error.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-borrowck-escaping-closure-error.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,21 @@\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/async-borrowck-escaping-closure-error.rs:5:15\n+   |\n+LL |     Box::new((async || x)())\n+   |               ^^^^^^^^ - `x` is borrowed here\n+   |               |\n+   |               may outlive borrowed value `x`\n+   |\n+note: closure is returned here\n+  --> $DIR/async-borrowck-escaping-closure-error.rs:5:5\n+   |\n+LL |     Box::new((async || x)())\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new((async move || x)())\n+   |               ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "5955d9751afbbf3afe57767893c046c1eaa2a590", "filename": "src/test/ui/async-await/issues/issue-62517-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-1.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for #62517. We used to ICE when you had an `async\n+// fn` with an `impl Trait` return that mentioned a `dyn Bar` with no\n+// explicit lifetime bound.\n+//\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+trait FirstTrait {}\n+trait SecondTrait {\n+    type Item: ?Sized;\n+}\n+\n+async fn foo(x: &str) -> impl SecondTrait<Item = dyn FirstTrait> {\n+}\n+\n+\n+impl<T> SecondTrait for T {\n+    type Item = dyn FirstTrait;\n+}\n+\n+fn main() { }"}, {"sha": "17fac408151eaeb359771c8c9e8c55b957dd2517", "filename": "src/test/ui/async-await/issues/issue-62517-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62517-2.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,18 @@\n+// Regression test for #62517. We used to ICE when you had an `async\n+// fn` with an `impl Trait` return that mentioned a `dyn Bar` with no\n+// explicit lifetime bound.\n+//\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+trait Object {}\n+\n+trait Alpha<Param: ?Sized> {}\n+\n+async fn foo<'a>(_: &'a ()) -> impl Alpha<dyn Object> {}\n+\n+impl<T> Alpha<dyn Object> for T { }\n+\n+fn main() { }"}, {"sha": "3b7141573847f6fe39c554ef505553b6f824d488", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-assoc.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-assoc.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,16 @@\n+// Test that we don't get an error with `dyn Bar` in an impl Trait\n+// when there are multiple inputs.  The `dyn Bar` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Foo { type Item: ?Sized; }\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn foo(x: &str, y: &str) -> impl Foo<Item = dyn Bar> { () }\n+\n+fn main() { }"}, {"sha": "e8da52aad0eac01b8a9ddfb16875dcdb3d3b77e3", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-param.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,11 @@\n+// Test that we don't get an error with `dyn Object` in an impl Trait\n+// when there are multiple inputs.  The `dyn Object` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Alpha<Item: ?Sized> {}\n+trait Object {}\n+impl<T> Alpha<dyn Object> for T {}\n+fn alpha(x: &str, y: &str) -> impl Alpha<dyn Object> { () }\n+fn main() { }"}, {"sha": "aad9d89fe2433ecaaa4479c7cc2d1e6672d99dd0", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-ref-assoc.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-assoc.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,27 @@\n+// Test that we don't get an error with `dyn Bar` in an impl Trait\n+// when there are multiple inputs.  The `dyn Bar` should default to `+\n+// 'static`. This used to erroneously generate an error (cc #62517).\n+//\n+// check-pass\n+\n+trait Foo {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+fn bar(x: &str) -> &impl Foo<Item = dyn Bar> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "8d34c1b6c2af7a90bcddd6ba5c29384fd7193e6a", "filename": "src/test/ui/impl-trait/dyn-trait-elided-two-inputs-ref-param.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdyn-trait-elided-two-inputs-ref-param.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,23 @@\n+// Test that `impl Alpha<dyn Object>` resets the object-lifetime\n+// default to `'static`.\n+//\n+// check-pass\n+\n+trait Alpha<Item: ?Sized> {\n+    fn item(&self) -> Box<Item> {\n+        panic!()\n+    }\n+}\n+\n+trait Object {}\n+impl<T> Alpha<dyn Object> for T {}\n+fn alpha(x: &str, y: &str) -> impl Alpha<dyn Object> { () }\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+fn bar(x: &str) -> &impl Alpha<dyn Object> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "ea0d0ccbc553270c9fc290f10065a3080571377d", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -6,7 +6,7 @@ trait Future {\n use std::error::Error;\n \n fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-//~^ ERROR missing lifetime\n+//~^ ERROR not satisfied\n     Ok(())\n }\n "}, {"sha": "228582d0001daafdf6bca1198a862316cc9e1da0", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-trait.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-trait.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -1,11 +1,11 @@\n-error[E0106]: missing lifetime specifier\n-  --> $DIR/lifetime-elision-return-type-trait.rs:8:44\n+error[E0277]: the trait bound `std::result::Result<(), _>: Future` is not satisfied\n+  --> $DIR/lifetime-elision-return-type-trait.rs:8:13\n    |\n LL | fn foo() -> impl Future<Item=(), Error=Box<dyn Error>> {\n-   |                                            ^^^^^^^^^ help: consider giving it a 'static lifetime: `dyn Error + 'static`\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Future` is not implemented for `std::result::Result<(), _>`\n    |\n-   = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\n+   = note: the return type of a function must have a statically known size\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "7337383e2978425a83715e9fe4a978bc38eb04e0", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic1.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,27 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo<'_> for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we should default to `dyn Bar + 'static`, but the current\n+// code forces us into a conservative, hacky path.\n+fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "9dbf7a78ed7a7406ace2e3185c9b1db8a3742d83", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic1.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic1.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic1.rs:20:50\n+   |\n+LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+   |                                                  ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2a7415174f8a0ca20f3df9378520953e77da2216", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic2.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,30 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: 'a + ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo<'_> for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we default to `dyn Bar + 'a`.  Or, we *should*, but the\n+// current code forces us into a conservative, hacky path.\n+fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+\n+    // If it weren't for the conservative path above, we'd expect an\n+    // error here.\n+    is_static(r.item());\n+}"}, {"sha": "d069f52ce47db4ef1cb13fff4d4ca2bf33b910de", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic2.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic2.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic2.rs:20:50\n+   |\n+LL | fn bar<'a>(x: &'a str) -> &'a dyn Foo<'a, Item = dyn Bar> { &() }\n+   |                                                  ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "51be999a6329d09f85cda3e7a804827eba0765cc", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic3.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,23 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+\n+trait Foo<'a> {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we should default to `dyn Bar + 'static`, but the current\n+// code forces us into a conservative, hacky path.\n+fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+//~^ ERROR please supply an explicit bound\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}, {"sha": "9c7b6b98f2e3620375fca614ca63f47114dc634b", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-nonstatic3.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-nonstatic3.stderr?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,8 @@\n+error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n+  --> $DIR/object-lifetime-default-dyn-binding-nonstatic3.rs:16:36\n+   |\n+LL | fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+   |                                    ^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "339f3356bd71ea66f2a1dc1df6130ac63f8cbf30", "filename": "src/test/ui/object-lifetime/object-lifetime-default-dyn-binding-static.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b08dd26036e14f061b99b20cd6f169e29046f3/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-dyn-binding-static.rs?ref=c1b08dd26036e14f061b99b20cd6f169e29046f3", "patch": "@@ -0,0 +1,28 @@\n+// Test that `dyn Bar<Item = XX>` uses `'static` as the default object\n+// lifetime bound for the type `XX`.\n+//\n+// check-pass\n+\n+trait Foo {\n+    type Item: ?Sized;\n+\n+    fn item(&self) -> Box<Self::Item> { panic!() }\n+}\n+\n+trait Bar { }\n+\n+impl<T> Foo for T {\n+    type Item = dyn Bar;\n+}\n+\n+fn is_static<T>(_: T) where T: 'static { }\n+\n+// Here, we default to `dyn Bar + 'static`, and not `&'x dyn Foo<Item\n+// = dyn Bar + 'x>`.\n+fn bar(x: &str) -> &dyn Foo<Item = dyn Bar> { &() }\n+\n+fn main() {\n+    let s = format!(\"foo\");\n+    let r = bar(&s);\n+    is_static(r.item());\n+}"}]}