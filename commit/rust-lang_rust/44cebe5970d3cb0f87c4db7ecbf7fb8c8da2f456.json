{"sha": "44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0Y2ViZTU5NzBkM2NiMGY4N2M0ZGI3ZWNiZjdmYjhjOGRhMmY0NTY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-18T13:43:34Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-11-21T00:23:29Z"}, "message": "reduce size of hir::ExprKind", "tree": {"sha": "9afb4afecf52cdc56ae721a1f4b26533e80a8814", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9afb4afecf52cdc56ae721a1f4b26533e80a8814"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "html_url": "https://github.com/rust-lang/rust/commit/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b882b55805c342e46ee4ca3beeef1d1fa2044b", "html_url": "https://github.com/rust-lang/rust/commit/f1b882b55805c342e46ee4ca3beeef1d1fa2044b"}], "stats": {"total": 133, "additions": 74, "deletions": 59}, "files": [{"sha": "91c19e269a7f145727c77c6454a77349bbfb6e58", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -1086,10 +1086,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         ExprKind::Ret(ref optional_expression) => {\n             walk_list!(visitor, visit_expr, optional_expression);\n         }\n-        ExprKind::InlineAsm(_, ref outputs, ref inputs) => {\n-            for expr in outputs.iter().chain(inputs.iter()) {\n-                visitor.visit_expr(expr)\n-            }\n+        ExprKind::InlineAsm(ref asm) => {\n+            walk_list!(visitor, visit_expr, &asm.outputs_exprs);\n+            walk_list!(visitor, visit_expr, &asm.inputs_exprs);\n         }\n         ExprKind::Yield(ref subexpression, _) => {\n             visitor.visit_expr(subexpression);"}, {"sha": "929dce7aa0ff14c6e96a1f4d6b6f789041996510", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -966,7 +966,7 @@ impl LoweringContext<'_> {\n     }\n \n     fn lower_expr_asm(&mut self, asm: &InlineAsm) -> hir::ExprKind {\n-        let hir_asm = hir::InlineAsm {\n+        let inner = hir::InlineAsmInner {\n             inputs: asm.inputs.iter().map(|&(ref c, _)| c.clone()).collect(),\n             outputs: asm.outputs\n                 .iter()\n@@ -984,18 +984,18 @@ impl LoweringContext<'_> {\n             alignstack: asm.alignstack,\n             dialect: asm.dialect,\n         };\n-\n-        let outputs = asm.outputs\n-            .iter()\n-            .map(|out| self.lower_expr(&out.expr))\n-            .collect();\n-\n-        let inputs = asm.inputs\n-            .iter()\n-            .map(|&(_, ref input)| self.lower_expr(input))\n-            .collect();\n-\n-        hir::ExprKind::InlineAsm(P(hir_asm), outputs, inputs)\n+        let hir_asm = hir::InlineAsm {\n+            inner,\n+            inputs_exprs: asm.inputs\n+                .iter()\n+                .map(|&(_, ref input)| self.lower_expr(input))\n+                .collect(),\n+            outputs_exprs: asm.outputs\n+                .iter()\n+                .map(|out| self.lower_expr(&out.expr))\n+                .collect(),\n+        };\n+        hir::ExprKind::InlineAsm(P(hir_asm))\n     }\n \n     fn lower_field(&mut self, f: &Field) -> hir::Field {"}, {"sha": "17b13dae37fdbdf04be4fc26608ee782d9590ef7", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -1457,7 +1457,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(Expr, 72);\n+static_assert_size!(Expr, 64);\n \n impl Expr {\n     pub fn precedence(&self) -> ExprPrecedence {\n@@ -1656,7 +1656,7 @@ pub enum ExprKind {\n     Ret(Option<P<Expr>>),\n \n     /// Inline assembly (from `asm!`), with its outputs and inputs.\n-    InlineAsm(P<InlineAsm>, HirVec<Expr>, HirVec<Expr>),\n+    InlineAsm(P<InlineAsm>),\n \n     /// A struct or struct-like variant literal expression.\n     ///\n@@ -2063,7 +2063,7 @@ pub struct InlineAsmOutput {\n // NOTE(eddyb) This is used within MIR as well, so unlike the rest of the HIR,\n // it needs to be `Clone` and use plain `Vec<T>` instead of `HirVec<T>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub struct InlineAsm {\n+pub struct InlineAsmInner {\n     pub asm: Symbol,\n     pub asm_str_style: StrStyle,\n     pub outputs: Vec<InlineAsmOutput>,\n@@ -2074,6 +2074,13 @@ pub struct InlineAsm {\n     pub dialect: AsmDialect,\n }\n \n+#[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n+pub struct InlineAsm {\n+    pub inner: InlineAsmInner,\n+    pub outputs_exprs: HirVec<Expr>,\n+    pub inputs_exprs: HirVec<Expr>,\n+}\n+\n /// Represents a parameter in a function header.\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Param {"}, {"sha": "4cbe0e8099126a74d2bbbba25bf94248df61d05b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -1365,14 +1365,15 @@ impl<'a> State<'a> {\n                     self.print_expr_maybe_paren(&expr, parser::PREC_JUMP);\n                 }\n             }\n-            hir::ExprKind::InlineAsm(ref a, ref outputs, ref inputs) => {\n+            hir::ExprKind::InlineAsm(ref a) => {\n+                let i = &a.inner;\n                 self.s.word(\"asm!\");\n                 self.popen();\n-                self.print_string(&a.asm.as_str(), a.asm_str_style);\n+                self.print_string(&i.asm.as_str(), i.asm_str_style);\n                 self.word_space(\":\");\n \n                 let mut out_idx = 0;\n-                self.commasep(Inconsistent, &a.outputs, |s, out| {\n+                self.commasep(Inconsistent, &i.outputs, |s, out| {\n                     let constraint = out.constraint.as_str();\n                     let mut ch = constraint.chars();\n                     match ch.next() {\n@@ -1383,36 +1384,36 @@ impl<'a> State<'a> {\n                         _ => s.print_string(&constraint, ast::StrStyle::Cooked),\n                     }\n                     s.popen();\n-                    s.print_expr(&outputs[out_idx]);\n+                    s.print_expr(&a.outputs_exprs[out_idx]);\n                     s.pclose();\n                     out_idx += 1;\n                 });\n                 self.s.space();\n                 self.word_space(\":\");\n \n                 let mut in_idx = 0;\n-                self.commasep(Inconsistent, &a.inputs, |s, co| {\n+                self.commasep(Inconsistent, &i.inputs, |s, co| {\n                     s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n                     s.popen();\n-                    s.print_expr(&inputs[in_idx]);\n+                    s.print_expr(&a.inputs_exprs[in_idx]);\n                     s.pclose();\n                     in_idx += 1;\n                 });\n                 self.s.space();\n                 self.word_space(\":\");\n \n-                self.commasep(Inconsistent, &a.clobbers, |s, co| {\n+                self.commasep(Inconsistent, &i.clobbers, |s, co| {\n                     s.print_string(&co.as_str(), ast::StrStyle::Cooked);\n                 });\n \n                 let mut options = vec![];\n-                if a.volatile {\n+                if i.volatile {\n                     options.push(\"volatile\");\n                 }\n-                if a.alignstack {\n+                if i.alignstack {\n                     options.push(\"alignstack\");\n                 }\n-                if a.dialect == ast::AsmDialect::Intel {\n+                if i.dialect == ast::AsmDialect::Intel {\n                     options.push(\"intel\");\n                 }\n "}, {"sha": "4571f551aa4d6aa80908c7e2a400492f7e0d3238", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -283,15 +283,15 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 self.borrow_expr(&base, bk);\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n-                for (o, output) in ia.outputs.iter().zip(outputs) {\n+            hir::ExprKind::InlineAsm(ref ia) => {\n+                for (o, output) in ia.inner.outputs.iter().zip(&ia.outputs_exprs) {\n                     if o.is_indirect {\n                         self.consume_expr(output);\n                     } else {\n                         self.mutate_expr(output);\n                     }\n                 }\n-                self.consume_exprs(inputs);\n+                self.consume_exprs(&ia.inputs_exprs);\n             }\n \n             hir::ExprKind::Continue(..) |"}, {"sha": "b7d0f538db5dc243b5a06a4fb61f7066efc1149a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -6,7 +6,7 @@\n \n use crate::hir::def::{CtorKind, Namespace};\n use crate::hir::def_id::DefId;\n-use crate::hir::{self, InlineAsm as HirInlineAsm};\n+use crate::hir;\n use crate::mir::interpret::{PanicInfo, Scalar};\n use crate::mir::visit::MirVisitable;\n use crate::ty::adjustment::PointerCast;\n@@ -1638,7 +1638,7 @@ pub enum FakeReadCause {\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct InlineAsm<'tcx> {\n-    pub asm: HirInlineAsm,\n+    pub asm: hir::InlineAsmInner,\n     pub outputs: Box<[Place<'tcx>]>,\n     pub inputs: Box<[(Span, Operand<'tcx>)]>,\n }"}, {"sha": "8fbd2e4e6b157d1e1e6d735561ecce0ea632c009", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -301,7 +301,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::syntax_pos::symbol::Symbol,\n     crate::hir::def::Res,\n     crate::hir::def_id::DefId,\n-    crate::hir::InlineAsm,\n+    crate::hir::InlineAsmInner,\n     crate::hir::MatchSource,\n     crate::hir::Mutability,\n     crate::hir::Unsafety,"}, {"sha": "abdd2e3e8dbd7c9926be9f88e3d64e89a3b28465", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -17,7 +17,7 @@ use libc::{c_uint, c_char};\n impl AsmBuilderMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n     fn codegen_inline_asm(\n         &mut self,\n-        ia: &hir::InlineAsm,\n+        ia: &hir::InlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, &'ll Value>>,\n         mut inputs: Vec<&'ll Value>,\n         span: Span,"}, {"sha": "612bce2d95854acdb3835c31dec1427f4b688cf2", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -1,13 +1,13 @@\n use super::BackendTypes;\n use crate::mir::place::PlaceRef;\n-use rustc::hir::{GlobalAsm, InlineAsm};\n+use rustc::hir::{GlobalAsm, InlineAsmInner};\n use syntax_pos::Span;\n \n pub trait AsmBuilderMethods<'tcx>: BackendTypes {\n     /// Take an inline assembly expression and splat it out via LLVM\n     fn codegen_inline_asm(\n         &mut self,\n-        ia: &InlineAsm,\n+        ia: &InlineAsmInner,\n         outputs: Vec<PlaceRef<'tcx, Self::Value>>,\n         inputs: Vec<Self::Value>,\n         span: Span,"}, {"sha": "f25e4b0ae8639f4b8d164dc3e1851721740df95d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -533,11 +533,11 @@ fn make_mirror_unadjusted<'a, 'tcx>(\n             convert_path_expr(cx, expr, res)\n         }\n \n-        hir::ExprKind::InlineAsm(ref asm, ref outputs, ref inputs) => {\n+        hir::ExprKind::InlineAsm(ref asm) => {\n             ExprKind::InlineAsm {\n-                asm,\n-                outputs: outputs.to_ref(),\n-                inputs: inputs.to_ref(),\n+                asm: &asm.inner,\n+                outputs: asm.outputs_exprs.to_ref(),\n+                inputs: asm.inputs_exprs.to_ref(),\n             }\n         }\n "}, {"sha": "78e3a17d76632163f74286203030cc1a62f7f603", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -93,6 +93,10 @@ pub enum StmtKind<'tcx> {\n     },\n }\n \n+// `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n+#[cfg(target_arch = \"x86_64\")]\n+rustc_data_structures::static_assert_size!(Expr<'_>, 168);\n+\n /// The Hair trait implementor lowers their expressions (`&'tcx H::Expr`)\n /// into instances of this `Expr` enum. This lowering can be done\n /// basically as lazily or as eagerly as desired: every recursive\n@@ -264,7 +268,7 @@ pub enum ExprKind<'tcx> {\n         user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n     },\n     InlineAsm {\n-        asm: &'tcx hir::InlineAsm,\n+        asm: &'tcx hir::InlineAsmInner,\n         outputs: Vec<ExprRef<'tcx>>,\n         inputs: Vec<ExprRef<'tcx>>\n     },"}, {"sha": "8d7a038812269cff378347ae66cc51aa2c49b572", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -1184,17 +1184,21 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                 self.propagate_through_expr(&e, succ)\n             }\n \n-            hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n+            hir::ExprKind::InlineAsm(ref asm) => {\n+                let ia = &asm.inner;\n+                let outputs = &asm.outputs_exprs;\n+                let inputs = &asm.inputs_exprs;\n                 let succ = ia.outputs.iter().zip(outputs).rev().fold(succ, |succ, (o, output)| {\n-                // see comment on places\n-                // in propagate_through_place_components()\n-                if o.is_indirect {\n-                    self.propagate_through_expr(output, succ)\n-                } else {\n-                    let acc = if o.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n-                    let succ = self.write_place(output, succ, acc);\n-                    self.propagate_through_place_components(output, succ)\n-                }});\n+                    // see comment on places\n+                    // in propagate_through_place_components()\n+                    if o.is_indirect {\n+                        self.propagate_through_expr(output, succ)\n+                    } else {\n+                        let acc = if o.is_rw { ACC_WRITE|ACC_READ } else { ACC_WRITE };\n+                        let succ = self.write_place(output, succ, acc);\n+                        self.propagate_through_place_components(output, succ)\n+                    }\n+                });\n \n                 // Inputs are executed first. Propagate last because of rev order\n                 self.propagate_through_exprs(inputs, succ)\n@@ -1395,13 +1399,13 @@ fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr) {\n             }\n         }\n \n-        hir::ExprKind::InlineAsm(ref ia, ref outputs, ref inputs) => {\n-            for input in inputs {\n+        hir::ExprKind::InlineAsm(ref asm) => {\n+            for input in &asm.inputs_exprs {\n                 this.visit_expr(input);\n             }\n \n             // Output operands must be places\n-            for (o, output) in ia.outputs.iter().zip(outputs) {\n+            for (o, output) in asm.inner.outputs.iter().zip(&asm.outputs_exprs) {\n                 if !o.is_indirect {\n                     this.check_place(output);\n                 }"}, {"sha": "163412f6a16f5377a426b03237ad3eb26ca7e370", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=44cebe5970d3cb0f87c4db7ecbf7fb8c8da2f456", "patch": "@@ -244,8 +244,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Path(ref qpath) => {\n                 self.check_expr_path(qpath, expr)\n             }\n-            ExprKind::InlineAsm(_, ref outputs, ref inputs) => {\n-                for expr in outputs.iter().chain(inputs.iter()) {\n+            ExprKind::InlineAsm(ref asm) => {\n+                for expr in asm.outputs_exprs.iter().chain(asm.inputs_exprs.iter()) {\n                     self.check_expr(expr);\n                 }\n                 tcx.mk_unit()"}]}