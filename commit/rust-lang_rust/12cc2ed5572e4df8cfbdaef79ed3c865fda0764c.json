{"sha": "12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyY2MyZWQ1NTcyZTRkZjhjZmJkYWVmNzllZDNjODY1ZmRhMDc2NGM=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-23T13:47:11Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-23T13:56:10Z"}, "message": "Use pre-stored macro file", "tree": {"sha": "b561aee129f3f0fbd72dbf20171f4f2759cca5a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b561aee129f3f0fbd72dbf20171f4f2759cca5a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "html_url": "https://github.com/rust-lang/rust/commit/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16156d766dd8a5624d9455ffded6358fe879c416", "url": "https://api.github.com/repos/rust-lang/rust/commits/16156d766dd8a5624d9455ffded6358fe879c416", "html_url": "https://github.com/rust-lang/rust/commit/16156d766dd8a5624d9455ffded6358fe879c416"}], "stats": {"total": 84, "additions": 51, "deletions": 33}, "files": [{"sha": "2c422af8bd64856833d23fe22ce6c63e22b6d0d5", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "patch": "@@ -17,7 +17,7 @@ use hir_def::{\n     nameres::ModuleSource,\n     path::path,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    AssocItemId, DefWithBodyId, Expander,\n+    AssocItemId, DefWithBodyId,\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n@@ -215,10 +215,27 @@ impl SourceAnalyzer {\n         self.body_source_map.as_ref()?.node_pat(src)\n     }\n \n+    fn expand_expr(\n+        &self,\n+        db: &impl HirDatabase,\n+        expr: InFile<&ast::Expr>,\n+    ) -> Option<InFile<ast::Expr>> {\n+        let macro_call = ast::MacroCall::cast(expr.value.syntax().clone())?;\n+        let macro_file =\n+            self.body_source_map.as_ref()?.node_macro_file(expr.with_value(&macro_call))?;\n+        let expanded = db.parse_or_expand(macro_file)?;\n+        let kind = expanded.kind();\n+        let expr = InFile::new(macro_file, ast::Expr::cast(expanded)?);\n+\n+        if ast::MacroCall::can_cast(kind) {\n+            self.expand_expr(db, expr.as_ref())\n+        } else {\n+            Some(expr)\n+        }\n+    }\n+\n     pub fn type_of(&self, db: &impl HirDatabase, expr: &ast::Expr) -> Option<Type> {\n-        let expr_id = if let Some(macro_call) = ast::MacroCall::cast(expr.syntax().clone()) {\n-            let mut expander = Expander::new(db, self.file_id, self.body_owner?.module(db).id);\n-            let expr = expand_macro_call_to_expr(db, &mut expander, macro_call)?;\n+        let expr_id = if let Some(expr) = self.expand_expr(db, InFile::new(self.file_id, expr)) {\n             self.body_source_map.as_ref()?.node_expr(expr.as_ref())?\n         } else {\n             self.expr_id(expr)?\n@@ -508,21 +525,6 @@ fn scope_for_offset(\n         })\n }\n \n-fn expand_macro_call_to_expr(\n-    db: &impl HirDatabase,\n-    expander: &mut Expander,\n-    macro_call: ast::MacroCall,\n-) -> Option<InFile<ast::Expr>> {\n-    let (mark, expr): (_, ast::Expr) = expander.enter_expand(db, macro_call)?;\n-    let expr = if let Some(child) = ast::MacroCall::cast(expr.syntax().clone()) {\n-        expand_macro_call_to_expr(db, expander, child)\n-    } else {\n-        Some(expander.to_source(expr))\n-    };\n-    expander.exit(db, mark);\n-    expr\n-}\n-\n // XXX: during completion, cursor might be outside of any particular\n // expression. Try to figure out the correct scope...\n fn adjust("}, {"sha": "142c52d35809daf2fee0bb07ed9e5471bcbb31e3", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "patch": "@@ -26,7 +26,7 @@ use crate::{\n     DefWithBodyId, HasModule, Lookup, ModuleId,\n };\n \n-pub struct Expander {\n+pub(crate) struct Expander {\n     crate_def_map: Arc<CrateDefMap>,\n     current_file_id: HirFileId,\n     hygiene: Hygiene,\n@@ -35,14 +35,18 @@ pub struct Expander {\n }\n \n impl Expander {\n-    pub fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n+    pub(crate) fn new(\n+        db: &impl DefDatabase,\n+        current_file_id: HirFileId,\n+        module: ModuleId,\n+    ) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n         let ast_id_map = db.ast_id_map(current_file_id);\n         Expander { crate_def_map, current_file_id, hygiene, ast_id_map, module }\n     }\n \n-    pub fn enter_expand<T: ast::AstNode, DB: DefDatabase>(\n+    pub(crate) fn enter_expand<T: ast::AstNode, DB: DefDatabase>(\n         &mut self,\n         db: &DB,\n         macro_call: ast::MacroCall,\n@@ -80,14 +84,14 @@ impl Expander {\n         None\n     }\n \n-    pub fn exit(&mut self, db: &impl DefDatabase, mut mark: Mark) {\n+    pub(crate) fn exit(&mut self, db: &impl DefDatabase, mut mark: Mark) {\n         self.hygiene = Hygiene::new(db, mark.file_id);\n         self.current_file_id = mark.file_id;\n         self.ast_id_map = mem::take(&mut mark.ast_id_map);\n         mark.bomb.defuse();\n     }\n \n-    pub fn to_source<T>(&self, value: T) -> InFile<T> {\n+    pub(crate) fn to_source<T>(&self, value: T) -> InFile<T> {\n         InFile { file_id: self.current_file_id, value }\n     }\n \n@@ -112,7 +116,7 @@ impl Expander {\n     }\n }\n \n-pub struct Mark {\n+pub(crate) struct Mark {\n     file_id: HirFileId,\n     ast_id_map: Arc<AstIdMap>,\n     bomb: DropBomb,\n@@ -159,6 +163,7 @@ pub struct BodySourceMap {\n     pat_map: FxHashMap<PatSource, PatId>,\n     pat_map_back: ArenaMap<PatId, PatSource>,\n     field_map: FxHashMap<(ExprId, usize), AstPtr<ast::RecordField>>,\n+    expansions: FxHashMap<InFile<AstPtr<ast::MacroCall>>, HirFileId>,\n }\n \n impl Body {\n@@ -233,6 +238,11 @@ impl BodySourceMap {\n         self.expr_map.get(&src).cloned()\n     }\n \n+    pub fn node_macro_file(&self, node: InFile<&ast::MacroCall>) -> Option<HirFileId> {\n+        let src = node.map(|it| AstPtr::new(it));\n+        self.expansions.get(&src).cloned()\n+    }\n+\n     pub fn field_init_shorthand_expr(&self, node: InFile<&ast::RecordField>) -> Option<ExprId> {\n         let src = node.map(|it| Either::Right(AstPtr::new(it)));\n         self.expr_map.get(&src).cloned()"}, {"sha": "57c77304cbc8b6983587df219395ee57d2a5d1dd", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "patch": "@@ -446,14 +446,20 @@ where\n                 }\n             }\n             // FIXME expand to statements in statement position\n-            ast::Expr::MacroCall(e) => match self.expander.enter_expand(self.db, e) {\n-                Some((mark, expansion)) => {\n-                    let id = self.collect_expr(expansion);\n-                    self.expander.exit(self.db, mark);\n-                    id\n+            ast::Expr::MacroCall(e) => {\n+                let macro_call = self.expander.to_source(AstPtr::new(&e));\n+                match self.expander.enter_expand(self.db, e.clone()) {\n+                    Some((mark, expansion)) => {\n+                        self.source_map\n+                            .expansions\n+                            .insert(macro_call, self.expander.current_file_id);\n+                        let id = self.collect_expr(expansion);\n+                        self.expander.exit(self.db, mark);\n+                        id\n+                    }\n+                    None => self.alloc_expr(Expr::Missing, syntax_ptr),\n                 }\n-                None => self.alloc_expr(Expr::Missing, syntax_ptr),\n-            },\n+            }\n \n             // FIXME implement HIR for these:\n             ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),"}, {"sha": "f6c7f38d171c2e06812bc79f8de962672966951c", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12cc2ed5572e4df8cfbdaef79ed3c865fda0764c/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=12cc2ed5572e4df8cfbdaef79ed3c865fda0764c", "patch": "@@ -48,7 +48,7 @@ use ra_arena::{impl_arena_id, RawId};\n use ra_db::{impl_intern_key, salsa, CrateId};\n use ra_syntax::{ast, AstNode};\n \n-pub use crate::body::Expander;\n+use crate::body::Expander;\n use crate::builtin_type::BuiltinType;\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}]}