{"sha": "792153104c5af9948df6d8def8ab4b2611731eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MjE1MzEwNGM1YWY5OTQ4ZGY2ZDhkZWY4YWI0YjI2MTE3MzFlYjY=", "commit": {"author": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T21:27:12Z"}, "committer": {"name": "xd009642", "email": "danielmckenna93@gmail.com", "date": "2019-07-24T21:27:12Z"}, "message": "Fix some of the compile errors", "tree": {"sha": "dc8a053e986a1b19ac0c55baabaa64fbb1e04adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8a053e986a1b19ac0c55baabaa64fbb1e04adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/792153104c5af9948df6d8def8ab4b2611731eb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/792153104c5af9948df6d8def8ab4b2611731eb6", "html_url": "https://github.com/rust-lang/rust/commit/792153104c5af9948df6d8def8ab4b2611731eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/792153104c5af9948df6d8def8ab4b2611731eb6/comments", "author": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xd009642", "id": 3472518, "node_id": "MDQ6VXNlcjM0NzI1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3472518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xd009642", "html_url": "https://github.com/xd009642", "followers_url": "https://api.github.com/users/xd009642/followers", "following_url": "https://api.github.com/users/xd009642/following{/other_user}", "gists_url": "https://api.github.com/users/xd009642/gists{/gist_id}", "starred_url": "https://api.github.com/users/xd009642/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xd009642/subscriptions", "organizations_url": "https://api.github.com/users/xd009642/orgs", "repos_url": "https://api.github.com/users/xd009642/repos", "events_url": "https://api.github.com/users/xd009642/events{/privacy}", "received_events_url": "https://api.github.com/users/xd009642/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3e4467c109364c557bfd998dabfeab6a045c605", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3e4467c109364c557bfd998dabfeab6a045c605", "html_url": "https://github.com/rust-lang/rust/commit/f3e4467c109364c557bfd998dabfeab6a045c605"}], "stats": {"total": 54, "additions": 22, "deletions": 32}, "files": [{"sha": "e41437bf1f825657eb46a01854c631b74cc9bb2f", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/792153104c5af9948df6d8def8ab4b2611731eb6/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792153104c5af9948df6d8def8ab4b2611731eb6/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=792153104c5af9948df6d8def8ab4b2611731eb6", "patch": "@@ -1,29 +1,19 @@\n use crate::utils::{in_macro, span_help_and_lint, SpanlessHash};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use rustc::{declare_tool_lint, lint_array};\n+use rustc::{declare_tool_lint, lint_array, impl_lint_pass};\n use rustc_data_structures::fx::FxHashMap;\n use rustc::hir::*;\n \n+#[derive(Copy, Clone)]\n+pub struct TraitBounds;\n+\n declare_clippy_lint! {\n     pub TYPE_REPETITION_IN_BOUNDS,\n     complexity,\n     \"Types are repeated unnecessary in trait bounds use `+` instead of using `T: _, T: _`\"\n }\n \n-#[derive(Copy, Clone)]\n-pub struct TraitBounds;\n-\n-impl LintPass for TraitBounds {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(TYPE_REPETITION_IN_BOUNDS)\n-    }\n-\n-    fn name(&self) -> &'static str {\n-        \"TypeRepetitionInBounds\"\n-    }\n-}\n-\n-\n+impl_lint_pass!(TraitBounds => [TYPE_REPETITION_IN_BOUNDS]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n     fn check_generics(&mut self, cx: &LateContext<'a, 'tcx>, gen: &'tcx Generics) {\n@@ -38,7 +28,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TraitBounds {\n         let mut map = FxHashMap::default();\n         for bound in &gen.where_clause.predicates {\n             if let WherePredicate::BoundPredicate(ref p) = bound {\n-                let h = hash(&p.bounded_ty);\n+                let h = hash(&p.bounded_ty.node);\n                 if let Some(ref v) = map.insert(h, p.bounds) {\n                     let mut hint_string = format!(\"consider combining the bounds: `{:?}: \", p.bounded_ty);\n                     for &b in v.iter() {"}, {"sha": "5304a9226ae5d3be3fe83cec12bb710cc8cc460d", "filename": "clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/792153104c5af9948df6d8def8ab4b2611731eb6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/792153104c5af9948df6d8def8ab4b2611731eb6/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=792153104c5af9948df6d8def8ab4b2611731eb6", "patch": "@@ -258,7 +258,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n \n     pub fn eq_ty(&mut self, left: &Ty<'tcx>, right: &Ty<'tcx>) -> bool {\n-        self.eq_ty_kind(&left.node, &right.node)\n+        self.eq_ty_kind(&left.sty, &right.sty)\n     }\n \n     #[allow(clippy::similar_names)]\n@@ -604,26 +604,26 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         }\n     }\n \n-    pub fn hash_ty(&mut self, ty: &Ty<'tcx>) {\n+    pub fn hash_ty(&mut self, ty: &TyKind) {\n         std::mem::discriminant(&ty.node).hash(&mut self.s);\n-        match ty.sty {\n-            ty::Slice(ty) => {\n+        match ty {\n+            TyKind::Slice(ty) => {\n                 self.hash_ty(ty);\n             },\n-            ty::Array(ty, anon_const) => {\n+            TyKind::Array(ty, anon_const) => {\n                 self.hash_ty(ty);\n                 self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n             },\n-            ty::Ptr(mut_ty) => {\n+            TyKind::Ptr(mut_ty) => {\n                 self.hash_ty(&mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            ty::Rptr(lifetime, mut_ty) => {\n+            TyKind::Rptr(lifetime, mut_ty) => {\n                 self.hash_lifetime(lifetime);\n                 self.hash_ty(&mut_ty.ty);\n                 mut_ty.mutbl.hash(&mut self.s);\n             },\n-            ty::BareFn(bfn) => {\n+            TyKind::BareFn(bfn) => {\n                 bfn.unsafety.hash(&mut self.s);\n                 bfn.abi.hash(&mut self.s);\n                 for arg in &bfn.decl.inputs {\n@@ -639,13 +639,13 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 }\n                 bfn.decl.c_variadic.hash(&mut self.s);\n             },\n-            ty::Tup(ty_list) => {\n+            TyKind::Tup(ty_list) => {\n                 for ty in ty_list {\n                     self.hash_ty(ty);\n                 }\n \n             },\n-            ty::Path(qpath) => {\n+            TyKind::Path(qpath) => {\n                 match qpath {\n                     QPath::Resolved(ref maybe_ty, ref path) => {\n                         if let Some(ref ty) = maybe_ty {\n@@ -661,7 +661,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     },\n                 }\n             },\n-            ty::Def(_, arg_list) => {\n+            TyKind::Def(_, arg_list) => {\n                 for arg in arg_list {\n                     match arg {\n                         GenericArg::Lifetime(ref l) => self.hash_lifetime(l),\n@@ -672,17 +672,17 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     }\n                 }\n             },\n-            ty::TraitObject(_, lifetime) => {\n+            TyKind::TraitObject(_, lifetime) => {\n                 self.hash_lifetime(lifetime);\n \n             },\n-            ty::Typeof(anon_const) => {\n+            TyKind::Typeof(anon_const) => {\n                 self.hash_expr(&self.cx.tcx.hir().body(anon_const.body).value);\n             },\n-            ty::CVarArgs(lifetime) => {\n-                self.hash_lifetime(lifetime);\n+            TyKind::CVarArgs(lifetime) => {\n+                self.hash_lifetime(lifetime) \n             },\n-            ty::Err | ty::Infer | ty::Never => {},\n+            TyKind::Err | TyKind::Infer | TyKind::Never => {},\n         }\n     }\n }"}]}