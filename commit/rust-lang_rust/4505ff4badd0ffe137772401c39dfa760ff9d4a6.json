{"sha": "4505ff4badd0ffe137772401c39dfa760ff9d4a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MDVmZjRiYWRkMGZmZTEzNzc3MjQwMWMzOWRmYTc2MGZmOWQ0YTY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-08T00:21:40Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2019-11-09T03:28:53Z"}, "message": "[mir-opt] Handle aggregates in SimplifyLocals pass", "tree": {"sha": "e55329296fffc4ebe47834d3442f1f05dde96eb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e55329296fffc4ebe47834d3442f1f05dde96eb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4505ff4badd0ffe137772401c39dfa760ff9d4a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4505ff4badd0ffe137772401c39dfa760ff9d4a6", "html_url": "https://github.com/rust-lang/rust/commit/4505ff4badd0ffe137772401c39dfa760ff9d4a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4505ff4badd0ffe137772401c39dfa760ff9d4a6/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8316701d37cd5a54c658220f6b6e8b1f43c5639e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8316701d37cd5a54c658220f6b6e8b1f43c5639e", "html_url": "https://github.com/rust-lang/rust/commit/8316701d37cd5a54c658220f6b6e8b1f43c5639e"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "f6b09f20bab679976b7af399128144c01a3c6670", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=4505ff4badd0ffe137772401c39dfa760ff9d4a6", "patch": "@@ -359,13 +359,20 @@ impl<'a, 'tcx> Visitor<'tcx> for DeclMarker<'a, 'tcx> {\n         // Ignore stores of constants because `ConstProp` and `CopyProp` can remove uses of many\n         // of these locals. However, if the local is still needed, then it will be referenced in\n         // another place and we'll mark it as being used there.\n-        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) {\n-            let stmt =\n-                &self.body.basic_blocks()[location.block].statements[location.statement_index];\n-            if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(c)))) = &stmt.kind {\n-                if p.as_local().is_some() {\n-                    trace!(\"skipping store of const value {:?} to {:?}\", c, local);\n-                    return;\n+        if ctx == PlaceContext::MutatingUse(MutatingUseContext::Store) ||\n+           ctx == PlaceContext::MutatingUse(MutatingUseContext::Projection) {\n+            let block = &self.body.basic_blocks()[location.block];\n+            if location.statement_index != block.statements.len() {\n+                let stmt =\n+                    &block.statements[location.statement_index];\n+\n+                if let StatementKind::Assign(\n+                    box (p, Rvalue::Use(Operand::Constant(c)))\n+                ) = &stmt.kind {\n+                    if !p.is_indirect() {\n+                        trace!(\"skipping store of const value {:?} to {:?}\", c, p);\n+                        return;\n+                    }\n                 }\n             }\n         }\n@@ -392,7 +399,7 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n                     self.map[*l].is_some()\n                 }\n                 StatementKind::Assign(box (place, _)) => {\n-                    if let Some(local) = place.as_local() {\n+                    if let PlaceBase::Local(local) = place.base {\n                         self.map[local].is_some()\n                     } else {\n                         true"}, {"sha": "7ae1798c7a2e783a1a10fe58d57024159bfd1831", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=4505ff4badd0ffe137772401c39dfa760ff9d4a6", "patch": "@@ -152,7 +152,7 @@ pub fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_regular_struct() {\n     let _ = RegularStruct2 {\n@@ -213,7 +213,7 @@ pub fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,optimized_mir,mir_built,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,mir_built,typeck_tables_of\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_constructor_path_tuple_struct() {\n     let _ = TupleStruct2(0, 1, 2);"}, {"sha": "cc9951b554dcec24f9a37e0da8e4417a2f221de2", "filename": "src/test/mir-opt/const_prop/return_place.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4505ff4badd0ffe137772401c39dfa760ff9d4a6/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Freturn_place.rs?ref=4505ff4badd0ffe137772401c39dfa760ff9d4a6", "patch": "@@ -46,10 +46,7 @@ fn main() {\n // START rustc.add.PreCodegen.before.mir\n // fn add() -> u32 {\n //     let mut _0: u32;\n-//     let mut _1: (u32, bool);\n //     bb0: {\n-//         (_1.0: u32) = const 4u32;\n-//         (_1.1: bool) = const false;\n //         _0 = const 4u32;\n //         return;\n //     }"}]}