{"sha": "ddcbac37ae7c8e5f9487454f800423e651e56868", "node_id": "C_kwDOAAsO6NoAKGRkY2JhYzM3YWU3YzhlNWY5NDg3NDU0ZjgwMDQyM2U2NTFlNTY4Njg", "commit": {"author": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-08-19T08:38:40Z"}, "committer": {"name": "ThibsG", "email": "thibsg@pm.me", "date": "2021-11-20T08:40:10Z"}, "message": "Split tests (too long for CI)", "tree": {"sha": "6db1c754d67a1a7a661786e9dbac4654b9cc9eb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6db1c754d67a1a7a661786e9dbac4654b9cc9eb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddcbac37ae7c8e5f9487454f800423e651e56868", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbac37ae7c8e5f9487454f800423e651e56868", "html_url": "https://github.com/rust-lang/rust/commit/ddcbac37ae7c8e5f9487454f800423e651e56868", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbac37ae7c8e5f9487454f800423e651e56868/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b38f173aa329d6a5932414b9c76227d790faee76", "url": "https://api.github.com/repos/rust-lang/rust/commits/b38f173aa329d6a5932414b9c76227d790faee76", "html_url": "https://github.com/rust-lang/rust/commit/b38f173aa329d6a5932414b9c76227d790faee76"}], "stats": {"total": 768, "additions": 430, "deletions": 338}, "files": [{"sha": "3bb8cc573ec57438839f628a1865a50f62e044c7", "filename": "tests/ui/search_is_some_fixable.stderr", "status": "removed", "additions": 0, "deletions": 261, "changes": 261, "blob_url": "https://github.com/rust-lang/rust/blob/b38f173aa329d6a5932414b9c76227d790faee76/tests%2Fui%2Fsearch_is_some_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b38f173aa329d6a5932414b9c76227d790faee76/tests%2Fui%2Fsearch_is_some_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable.stderr?ref=b38f173aa329d6a5932414b9c76227d790faee76", "patch": "@@ -1,261 +0,0 @@\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:10:22\n-   |\n-LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n-   |\n-   = note: `-D clippy::search-is-some` implied by `-D warnings`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:11:20\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:12:20\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:13:22\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:14:20\n-   |\n-LL |     let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 1 || x == 3 || x == 5)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:15:20\n-   |\n-LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x))`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:16:20\n-   |\n-LL |     let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0 || [1, 2, 3].contains(&x))`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:17:20\n-   |\n-LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_some();\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x) || x == 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:19:10\n-   |\n-LL |           .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n-   |  __________^\n-LL | |         .is_some();\n-   | |__________________^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1)`\n-\n-error: called `is_some()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some_fixable.rs:23:22\n-   |\n-LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some_fixable.rs:26:22\n-   |\n-LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:31:27\n-   |\n-LL |     let _ = \"hello world\".find(\"world\").is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:32:27\n-   |\n-LL |     let _ = \"hello world\".find(&s2).is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:33:27\n-   |\n-LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:35:16\n-   |\n-LL |     let _ = s1.find(\"world\").is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:36:16\n-   |\n-LL |     let _ = s1.find(&s2).is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:37:16\n-   |\n-LL |     let _ = s1.find(&s2[2..]).is_some();\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:39:21\n-   |\n-LL |     let _ = s1[2..].find(\"world\").is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:40:21\n-   |\n-LL |     let _ = s1[2..].find(&s2).is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n-\n-error: called `is_some()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:41:21\n-   |\n-LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:49:13\n-   |\n-LL |     let _ = v.iter().find(|&x| *x < 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x < 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:50:13\n-   |\n-LL |     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| **y == x)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:51:13\n-   |\n-LL |     let _ = (0..1).find(|x| *x == 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| x == 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:52:13\n-   |\n-LL |     let _ = v.iter().find(|x| **x == 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x == 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:53:13\n-   |\n-LL |     let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(4..5).any(|x| x == 1 || x == 3 || x == 5)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:54:13\n-   |\n-LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x))`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:55:13\n-   |\n-LL |     let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| x == 0 || [1, 2, 3].contains(&x))`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:56:13\n-   |\n-LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x) || x == 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:57:13\n-   |\n-LL |       let _ = (1..3)\n-   |  _____________^\n-LL | |         .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n-LL | |         .is_none();\n-   | |__________________^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1)`\n-\n-error: called `is_none()` after searching an `Iterator` with `position`\n-  --> $DIR/search_is_some_fixable.rs:62:13\n-   |\n-LL |     let _ = v.iter().position(|&x| x < 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n-\n-error: called `is_none()` after searching an `Iterator` with `rposition`\n-  --> $DIR/search_is_some_fixable.rs:65:13\n-   |\n-LL |     let _ = v.iter().rposition(|&x| x < 0).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:71:13\n-   |\n-LL |     let _ = \"hello world\".find(\"world\").is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(\"world\")`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:72:13\n-   |\n-LL |     let _ = \"hello world\".find(&s2).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2)`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:73:13\n-   |\n-LL |     let _ = \"hello world\".find(&s2[2..]).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2[2..])`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:75:13\n-   |\n-LL |     let _ = s1.find(\"world\").is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(\"world\")`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:76:13\n-   |\n-LL |     let _ = s1.find(&s2).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2)`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:77:13\n-   |\n-LL |     let _ = s1.find(&s2[2..]).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2[2..])`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:79:13\n-   |\n-LL |     let _ = s1[2..].find(\"world\").is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(\"world\")`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:80:13\n-   |\n-LL |     let _ = s1[2..].find(&s2).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2)`\n-\n-error: called `is_none()` after calling `find()` on a string\n-  --> $DIR/search_is_some_fixable.rs:81:13\n-   |\n-LL |     let _ = s1[2..].find(&s2[2..]).is_none();\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2[2..])`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:97:25\n-   |\n-LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == &cc)`\n-\n-error: called `is_none()` after searching an `Iterator` with `find`\n-  --> $DIR/search_is_some_fixable.rs:113:30\n-   |\n-LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n-   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == cc)`\n-\n-error: aborting due to 42 previous errors\n-"}, {"sha": "5d9953f9b3c5d5bdf40bacd0c33e00f14da422f8", "filename": "tests/ui/search_is_some_fixable_none.fixed", "status": "renamed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.fixed?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -6,44 +6,6 @@ fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n     let y = &&42;\n \n-    // Check `find().is_some()`, single-line case.\n-    let _ = v.iter().any(|x| *x < 0);\n-    let _ = (0..1).any(|x| **y == x); // one dereference less\n-    let _ = (0..1).any(|x| x == 0);\n-    let _ = v.iter().any(|x| *x == 0);\n-    let _ = (4..5).any(|x| x == 1 || x == 3 || x == 5);\n-    let _ = (1..3).any(|x| [1, 2, 3].contains(&x));\n-    let _ = (1..3).any(|x| x == 0 || [1, 2, 3].contains(&x));\n-    let _ = (1..3).any(|x| [1, 2, 3].contains(&x) || x == 0);\n-    let _ = (1..3)\n-        .any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1);\n-\n-    // Check `position().is_some()`, single-line case.\n-    let _ = v.iter().any(|&x| x < 0);\n-\n-    // Check `rposition().is_some()`, single-line case.\n-    let _ = v.iter().any(|&x| x < 0);\n-\n-    let s1 = String::from(\"hello world\");\n-    let s2 = String::from(\"world\");\n-    // caller of `find()` is a `&`static str`\n-    let _ = \"hello world\".contains(\"world\");\n-    let _ = \"hello world\".contains(&s2);\n-    let _ = \"hello world\".contains(&s2[2..]);\n-    // caller of `find()` is a `String`\n-    let _ = s1.contains(\"world\");\n-    let _ = s1.contains(&s2);\n-    let _ = s1.contains(&s2[2..]);\n-    // caller of `find()` is slice of `String`\n-    let _ = s1[2..].contains(\"world\");\n-    let _ = s1[2..].contains(&s2);\n-    let _ = s1[2..].contains(&s2[2..]);\n-}\n-\n-fn is_none() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n-\n     // Check `find().is_none()`, single-line case.\n     let _ = !v.iter().any(|x| *x < 0);\n     let _ = !(0..1).any(|x| **y == x); // one dereference less", "previous_filename": "tests/ui/search_is_some_fixable.fixed"}, {"sha": "2a8aadfd0e06124503e97b754465c50996b528cb", "filename": "tests/ui/search_is_some_fixable_none.rs", "status": "renamed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.rs?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -6,45 +6,6 @@ fn main() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n     let y = &&42;\n \n-    // Check `find().is_some()`, single-line case.\n-    let _ = v.iter().find(|&x| *x < 0).is_some();\n-    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n-    let _ = (0..1).find(|x| *x == 0).is_some();\n-    let _ = v.iter().find(|x| **x == 0).is_some();\n-    let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_some();\n-    let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_some();\n-    let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_some();\n-    let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_some();\n-    let _ = (1..3)\n-        .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n-        .is_some();\n-\n-    // Check `position().is_some()`, single-line case.\n-    let _ = v.iter().position(|&x| x < 0).is_some();\n-\n-    // Check `rposition().is_some()`, single-line case.\n-    let _ = v.iter().rposition(|&x| x < 0).is_some();\n-\n-    let s1 = String::from(\"hello world\");\n-    let s2 = String::from(\"world\");\n-    // caller of `find()` is a `&`static str`\n-    let _ = \"hello world\".find(\"world\").is_some();\n-    let _ = \"hello world\".find(&s2).is_some();\n-    let _ = \"hello world\".find(&s2[2..]).is_some();\n-    // caller of `find()` is a `String`\n-    let _ = s1.find(\"world\").is_some();\n-    let _ = s1.find(&s2).is_some();\n-    let _ = s1.find(&s2[2..]).is_some();\n-    // caller of `find()` is slice of `String`\n-    let _ = s1[2..].find(\"world\").is_some();\n-    let _ = s1[2..].find(&s2).is_some();\n-    let _ = s1[2..].find(&s2[2..]).is_some();\n-}\n-\n-fn is_none() {\n-    let v = vec![3, 2, 1, 0, -1, -2, -3];\n-    let y = &&42;\n-\n     // Check `find().is_none()`, single-line case.\n     let _ = v.iter().find(|&x| *x < 0).is_none();\n     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less", "previous_filename": "tests/ui/search_is_some_fixable.rs"}, {"sha": "34768feb6ddfb02a97681afe1e6d523d05d0bf8a", "filename": "tests/ui/search_is_some_fixable_none.stderr", "status": "added", "additions": 139, "deletions": 0, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_none.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_none.stderr?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -0,0 +1,139 @@\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:10:13\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x < 0)`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:11:13\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_none(); // one dereference less\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| **y == x)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:12:13\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(0..1).any(|x| x == 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:13:13\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|x| *x == 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:14:13\n+   |\n+LL |     let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(4..5).any(|x| x == 1 || x == 3 || x == 5)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:15:13\n+   |\n+LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x))`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:16:13\n+   |\n+LL |     let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| x == 0 || [1, 2, 3].contains(&x))`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:17:13\n+   |\n+LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x) || x == 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:18:13\n+   |\n+LL |       let _ = (1..3)\n+   |  _____________^\n+LL | |         .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n+LL | |         .is_none();\n+   | |__________________^ help: use `!_.any()` instead: `!(1..3).any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1)`\n+\n+error: called `is_none()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some_fixable_none.rs:23:13\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n+\n+error: called `is_none()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some_fixable_none.rs:26:13\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!v.iter().any(|&x| x < 0)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:32:13\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:33:13\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:34:13\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!\"hello world\".contains(&s2[2..])`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:36:13\n+   |\n+LL |     let _ = s1.find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:37:13\n+   |\n+LL |     let _ = s1.find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:38:13\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1.contains(&s2[2..])`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:40:13\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(\"world\")`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:41:13\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2)`\n+\n+error: called `is_none()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_none.rs:42:13\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_none();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.contains()` instead: `!s1[2..].contains(&s2[2..])`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:58:25\n+   |\n+LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_none())\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == &cc)`\n+\n+error: called `is_none()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_none.rs:74:30\n+   |\n+LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_none())\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `!_.any()` instead: `!filter_hand.iter().any(|cc| c == cc)`\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "94a4c7b3639cd5219eff15b02793680e58d7e40d", "filename": "tests/ui/search_is_some_fixable_some.fixed", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.fixed?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -0,0 +1,76 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().any(|x| *x < 0);\n+    let _ = (0..1).any(|x| **y == x); // one dereference less\n+    let _ = (0..1).any(|x| x == 0);\n+    let _ = v.iter().any(|x| *x == 0);\n+    let _ = (4..5).any(|x| x == 1 || x == 3 || x == 5);\n+    let _ = (1..3).any(|x| [1, 2, 3].contains(&x));\n+    let _ = (1..3).any(|x| x == 0 || [1, 2, 3].contains(&x));\n+    let _ = (1..3).any(|x| [1, 2, 3].contains(&x) || x == 0);\n+    let _ = (1..3)\n+        .any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1);\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().any(|&x| x < 0);\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".contains(\"world\");\n+    let _ = \"hello world\".contains(&s2);\n+    let _ = \"hello world\".contains(&s2[2..]);\n+    // caller of `find()` is a `String`\n+    let _ = s1.contains(\"world\");\n+    let _ = s1.contains(&s2);\n+    let _ = s1.contains(&s2[2..]);\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].contains(\"world\");\n+    let _ = s1[2..].contains(&s2);\n+    let _ = s1[2..].contains(&s2[2..]);\n+}\n+\n+#[allow(clippy::clone_on_copy, clippy::map_clone)]\n+mod issue7392 {\n+    struct Player {\n+        hand: Vec<usize>,\n+    }\n+    fn filter() {\n+        let p = Player {\n+            hand: vec![1, 2, 3, 4, 5],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|c| filter_hand.iter().any(|cc| c == &cc))\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+\n+    struct PlayerTuple {\n+        hand: Vec<(usize, char)>,\n+    }\n+    fn filter_tuple() {\n+        let p = PlayerTuple {\n+            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|(c, _)| filter_hand.iter().any(|cc| c == cc))\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+}"}, {"sha": "8887b0327e221f87be181d46701decd29b5ade36", "filename": "tests/ui/search_is_some_fixable_some.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.rs?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+#![allow(dead_code)]\n+#![warn(clippy::search_is_some)]\n+\n+fn main() {\n+    let v = vec![3, 2, 1, 0, -1, -2, -3];\n+    let y = &&42;\n+\n+    // Check `find().is_some()`, single-line case.\n+    let _ = v.iter().find(|&x| *x < 0).is_some();\n+    let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+    let _ = (0..1).find(|x| *x == 0).is_some();\n+    let _ = v.iter().find(|x| **x == 0).is_some();\n+    let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_some();\n+    let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_some();\n+    let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_some();\n+    let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_some();\n+    let _ = (1..3)\n+        .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n+        .is_some();\n+\n+    // Check `position().is_some()`, single-line case.\n+    let _ = v.iter().position(|&x| x < 0).is_some();\n+\n+    // Check `rposition().is_some()`, single-line case.\n+    let _ = v.iter().rposition(|&x| x < 0).is_some();\n+\n+    let s1 = String::from(\"hello world\");\n+    let s2 = String::from(\"world\");\n+    // caller of `find()` is a `&`static str`\n+    let _ = \"hello world\".find(\"world\").is_some();\n+    let _ = \"hello world\".find(&s2).is_some();\n+    let _ = \"hello world\".find(&s2[2..]).is_some();\n+    // caller of `find()` is a `String`\n+    let _ = s1.find(\"world\").is_some();\n+    let _ = s1.find(&s2).is_some();\n+    let _ = s1.find(&s2[2..]).is_some();\n+    // caller of `find()` is slice of `String`\n+    let _ = s1[2..].find(\"world\").is_some();\n+    let _ = s1[2..].find(&s2).is_some();\n+    let _ = s1[2..].find(&s2[2..]).is_some();\n+}\n+\n+#[allow(clippy::clone_on_copy, clippy::map_clone)]\n+mod issue7392 {\n+    struct Player {\n+        hand: Vec<usize>,\n+    }\n+    fn filter() {\n+        let p = Player {\n+            hand: vec![1, 2, 3, 4, 5],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|c| filter_hand.iter().find(|cc| c == cc).is_some())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+\n+    struct PlayerTuple {\n+        hand: Vec<(usize, char)>,\n+    }\n+    fn filter_tuple() {\n+        let p = PlayerTuple {\n+            hand: vec![(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')],\n+        };\n+        let filter_hand = vec![5];\n+        let _ = p\n+            .hand\n+            .iter()\n+            .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_some())\n+            .map(|c| c.clone())\n+            .collect::<Vec<_>>();\n+    }\n+}"}, {"sha": "90615a85ca3d2bd76e11ad22d3393634bedd8ef0", "filename": "tests/ui/search_is_some_fixable_some.stderr", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ddcbac37ae7c8e5f9487454f800423e651e56868/tests%2Fui%2Fsearch_is_some_fixable_some.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsearch_is_some_fixable_some.stderr?ref=ddcbac37ae7c8e5f9487454f800423e651e56868", "patch": "@@ -0,0 +1,138 @@\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:10:22\n+   |\n+LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x < 0)`\n+   |\n+   = note: `-D clippy::search-is-some` implied by `-D warnings`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:11:20\n+   |\n+LL |     let _ = (0..1).find(|x| **y == *x).is_some(); // one dereference less\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| **y == x)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:12:20\n+   |\n+LL |     let _ = (0..1).find(|x| *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:13:22\n+   |\n+LL |     let _ = v.iter().find(|x| **x == 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| *x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:14:20\n+   |\n+LL |     let _ = (4..5).find(|x| *x == 1 || *x == 3 || *x == 5).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 1 || x == 3 || x == 5)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:15:20\n+   |\n+LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x)).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:16:20\n+   |\n+LL |     let _ = (1..3).find(|x| *x == 0 || [1, 2, 3].contains(x)).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| x == 0 || [1, 2, 3].contains(&x))`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:17:20\n+   |\n+LL |     let _ = (1..3).find(|x| [1, 2, 3].contains(x) || *x == 0).is_some();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x) || x == 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:19:10\n+   |\n+LL |           .find(|x| [1, 2, 3].contains(x) || *x == 0 || [4, 5, 6].contains(x) || *x == -1)\n+   |  __________^\n+LL | |         .is_some();\n+   | |__________________^ help: use `any()` instead: `any(|x| [1, 2, 3].contains(&x) || x == 0 || [4, 5, 6].contains(&x) || x == -1)`\n+\n+error: called `is_some()` after searching an `Iterator` with `position`\n+  --> $DIR/search_is_some_fixable_some.rs:23:22\n+   |\n+LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after searching an `Iterator` with `rposition`\n+  --> $DIR/search_is_some_fixable_some.rs:26:22\n+   |\n+LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x < 0)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:31:27\n+   |\n+LL |     let _ = \"hello world\".find(\"world\").is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:32:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:33:27\n+   |\n+LL |     let _ = \"hello world\".find(&s2[2..]).is_some();\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:35:16\n+   |\n+LL |     let _ = s1.find(\"world\").is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:36:16\n+   |\n+LL |     let _ = s1.find(&s2).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:37:16\n+   |\n+LL |     let _ = s1.find(&s2[2..]).is_some();\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:39:21\n+   |\n+LL |     let _ = s1[2..].find(\"world\").is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(\"world\")`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:40:21\n+   |\n+LL |     let _ = s1[2..].find(&s2).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2)`\n+\n+error: called `is_some()` after calling `find()` on a string\n+  --> $DIR/search_is_some_fixable_some.rs:41:21\n+   |\n+LL |     let _ = s1[2..].find(&s2[2..]).is_some();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: use `contains()` instead: `contains(&s2[2..])`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:57:44\n+   |\n+LL |             .filter(|c| filter_hand.iter().find(|cc| c == cc).is_some())\n+   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|cc| c == &cc)`\n+\n+error: called `is_some()` after searching an `Iterator` with `find`\n+  --> $DIR/search_is_some_fixable_some.rs:73:49\n+   |\n+LL |             .filter(|(c, _)| filter_hand.iter().find(|cc| c == *cc).is_some())\n+   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|cc| c == cc)`\n+\n+error: aborting due to 22 previous errors\n+"}]}