{"sha": "f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NWM2ZDhmYzcwOTdiNTE4NmVjZTljNDNjMzIzN2QxYzU4ZThkZDQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-07T06:05:03Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2017-04-07T06:05:03Z"}, "message": "document some existing unstable features\n\n\"msp430-interrupt\", \"ptx-kernel\" and #![compiler_builtins_lib]", "tree": {"sha": "cde55bc46d44380cb2e8e8830cb43456a6cd3569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cde55bc46d44380cb2e8e8830cb43456a6cd3569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "html_url": "https://github.com/rust-lang/rust/commit/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/comments", "author": null, "committer": null, "parents": [{"sha": "50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65", "html_url": "https://github.com/rust-lang/rust/commit/50c186419bb38e8ea2f1e6f9c31b754e3a1a3e65"}], "stats": {"total": 126, "additions": 122, "deletions": 4}, "files": [{"sha": "b10bc41cb1439d08b46195030212d962535a96f3", "filename": "src/doc/unstable-book/src/abi-msp430-interrupt.md", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "raw_url": "https://github.com/rust-lang/rust/raw/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-msp430-interrupt.md?ref=f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "patch": "@@ -5,3 +5,38 @@ The tracking issue for this feature is: [#38487]\n [#38487]: https://github.com/rust-lang/rust/issues/38487\n \n ------------------------\n+\n+In the MSP430 architecture, interrupt handlers have a special calling\n+convention. You can use the `\"msp430-interrupt\"` ABI to make the compiler apply\n+the right calling convention to the interrupt handlers you define.\n+\n+<!-- NOTE(ignore) this example is specific to the msp430 target -->\n+\n+``` rust,ignore\n+#![feature(abi_msp430_interrupt)]\n+#![no_std]\n+\n+// Place the interrupt handler at the appropriate memory address\n+// (Alternatively, you can use `#[used]` and remove `pub` and `#[no_mangle]`)\n+#[link_section = \"__interrupt_vector_10\"]\n+#[no_mangle]\n+pub static TIM0_VECTOR: extern \"msp430-interrupt\" fn() = tim0;\n+\n+// The interrupt handler\n+extern \"msp430-interrupt\" fn tim0() {\n+    // ..\n+}\n+```\n+\n+``` text\n+$ msp430-elf-objdump -CD ./target/msp430/release/app\n+Disassembly of section __interrupt_vector_10:\n+\n+0000fff2 <TIM0_VECTOR>:\n+    fff2:       00 c0           interrupt service routine at 0xc000\n+\n+Disassembly of section .text:\n+\n+0000c000 <int::tim0>:\n+    c000:       00 13           reti\n+```"}, {"sha": "89b2a199279bc867639306bbf47c003a43ca64ee", "filename": "src/doc/unstable-book/src/abi-ptx.md", "status": "modified", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "raw_url": "https://github.com/rust-lang/rust/raw/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fabi-ptx.md?ref=f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "patch": "@@ -1,5 +1,59 @@\n # `abi_ptx`\n \n-The tracking issue for this feature is: None.\n+The tracking issue for this feature\n+is: [38788](https://github.com/rust-lang/rust/issues/38788)\n \n ------------------------\n+\n+When emitting PTX code, all vanilla Rust functions (`fn`) get translated to\n+\"device\" functions. These functions are *not* callable from the host via the\n+CUDA API so a crate with only device functions is not too useful!\n+\n+OTOH, \"global\" functions *can* be called by the host; you can think of them\n+as the real public API of your crate. To produce a global function use the\n+`\"ptx-kernel\"` ABI.\n+\n+<!-- NOTE(ignore) this example is specific to the nvptx targets -->\n+\n+``` rust,ignore\n+#![feature(abi_ptx)]\n+#![no_std]\n+\n+pub unsafe extern \"ptx-kernel\" fn global_function() {\n+    device_function();\n+}\n+\n+pub fn device_function() {\n+    // ..\n+}\n+```\n+\n+``` text\n+$ xargo rustc --target nvptx64-nvidia-cuda --release -- --emit=asm\n+\n+$ cat $(find -name '*.s')\n+//\n+// Generated by LLVM NVPTX Back-End\n+//\n+\n+.version 3.2\n+.target sm_20\n+.address_size 64\n+\n+        // .globl       _ZN6kernel15global_function17h46111ebe6516b382E\n+\n+.visible .entry _ZN6kernel15global_function17h46111ebe6516b382E()\n+{\n+\n+\n+        ret;\n+}\n+\n+        // .globl       _ZN6kernel15device_function17hd6a0e4993bbf3f78E\n+.visible .func _ZN6kernel15device_function17hd6a0e4993bbf3f78E()\n+{\n+\n+\n+        ret;\n+}\n+```"}, {"sha": "5da8968fd0ce22724a09ae8be37a36ab8053671c", "filename": "src/doc/unstable-book/src/compiler-builtins-lib.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins-lib.md?ref=f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "patch": "@@ -1,5 +1,35 @@\n # `compiler_builtins_lib`\n \n-This feature is internal to the Rust compiler and is not intended for general use.\n+The tracking issue for this feature is: None.\n \n ------------------------\n+\n+This feature is required to link to the `compiler_builtins` crate which contains\n+\"compiler intrinsics\". Compiler intrinsics are software implementations of basic\n+operations like multiplication of `u64`s. These intrinsics are only required on\n+platforms where these operations don't directly map to a hardware instruction.\n+\n+You should never need to explicitly link to the `compiler_builtins` crate when\n+building \"std\" programs as `compiler_builtins` is already in the dependency\n+graph of `std`. But you may need it when building `no_std` **binary** crates. If\n+you get a *linker* error like:\n+\n+``` text\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_lmul'\n+$PWD/src/main.rs:11: undefined reference to `__aeabi_uldivmod'\n+```\n+\n+That means that you need to link to this crate.\n+\n+When you link to this crate, make sure it only appears once in your crate\n+dependency graph. Also, it doesn't matter where in the dependency graph, you\n+place the `compiler_builtins` crate.\n+\n+<!-- NOTE(ignore) doctests don't support `no_std` binaries -->\n+\n+``` rust,ignore\n+#![feature(compiler_builtins_lib)]\n+#![no_std]\n+\n+extern crate compiler_builtins;\n+```"}, {"sha": "52fac575b6e8631cea0c182325979b84d63b18af", "filename": "src/doc/unstable-book/src/compiler-builtins.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "raw_url": "https://github.com/rust-lang/rust/raw/f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-builtins.md?ref=f45c6d8fc7097b5186ece9c43c3237d1c58e8dd4", "patch": "@@ -1,6 +1,5 @@\n # `compiler_builtins`\n \n-The tracking issue for this feature is: None.\n+This feature is internal to the Rust compiler and is not intended for general use.\n \n ------------------------\n-"}]}