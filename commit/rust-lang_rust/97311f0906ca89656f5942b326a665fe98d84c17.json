{"sha": "97311f0906ca89656f5942b326a665fe98d84c17", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MzExZjA5MDZjYTg5NjU2ZjU5NDJiMzI2YTY2NWZlOThkODRjMTc=", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-05-22T21:08:17Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-05-31T03:26:48Z"}, "message": "Add lint `manual_str_repeat`", "tree": {"sha": "54e9c1950516282da6d5cef0c7b1d177fe5c564d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e9c1950516282da6d5cef0c7b1d177fe5c564d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97311f0906ca89656f5942b326a665fe98d84c17", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmC0V3wACgkQ2lnoZDo37Qa02QEA2mNTA5DVT9niU15A5h0cHqGY\nafJMwRwXiCvvs7Laky8A/2EERBt7azlEyYPy+QOyKijF1mQ2+bxKQd/ndCgOIOEC\n=g+ek\n-----END PGP SIGNATURE-----", "payload": "tree 54e9c1950516282da6d5cef0c7b1d177fe5c564d\nparent 860cb8f977030f1b673d690c62cd337c524d88ca\nauthor Jason Newcomb <jsnewcomb@pm.me> 1621717697 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1622431608 -0400\n\nAdd lint `manual_str_repeat`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97311f0906ca89656f5942b326a665fe98d84c17", "html_url": "https://github.com/rust-lang/rust/commit/97311f0906ca89656f5942b326a665fe98d84c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97311f0906ca89656f5942b326a665fe98d84c17/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "860cb8f977030f1b673d690c62cd337c524d88ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/860cb8f977030f1b673d690c62cd337c524d88ca", "html_url": "https://github.com/rust-lang/rust/commit/860cb8f977030f1b673d690c62cd337c524d88ca"}], "stats": {"total": 245, "additions": 238, "deletions": 7}, "files": [{"sha": "41af8e190ddf3581503dc5cd0b902f68cb1e0f20", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -2493,6 +2493,7 @@ Released 2018-09-13\n [`manual_ok_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_ok_or\n [`manual_range_contains`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains\n [`manual_saturating_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_saturating_arithmetic\n+[`manual_str_repeat`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_str_repeat\n [`manual_strip`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip\n [`manual_swap`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap\n [`manual_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or"}, {"sha": "e7dd3952b3ac96b19bf7aae3ad288730663deb2f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -762,6 +762,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         methods::MANUAL_FILTER_MAP,\n         methods::MANUAL_FIND_MAP,\n         methods::MANUAL_SATURATING_ARITHMETIC,\n+        methods::MANUAL_STR_REPEAT,\n         methods::MAP_COLLECT_RESULT_UNIT,\n         methods::MAP_FLATTEN,\n         methods::MAP_UNWRAP_OR,\n@@ -1298,6 +1299,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(methods::MANUAL_FILTER_MAP),\n         LintId::of(methods::MANUAL_FIND_MAP),\n         LintId::of(methods::MANUAL_SATURATING_ARITHMETIC),\n+        LintId::of(methods::MANUAL_STR_REPEAT),\n         LintId::of(methods::MAP_COLLECT_RESULT_UNIT),\n         LintId::of(methods::NEW_RET_NO_SELF),\n         LintId::of(methods::OK_EXPECT),\n@@ -1735,6 +1737,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(loops::NEEDLESS_COLLECT),\n         LintId::of(methods::EXPECT_FUN_CALL),\n         LintId::of(methods::ITER_NTH),\n+        LintId::of(methods::MANUAL_STR_REPEAT),\n         LintId::of(methods::OR_FUN_CALL),\n         LintId::of(methods::SINGLE_CHAR_PATTERN),\n         LintId::of(misc::CMP_OWNED),"}, {"sha": "aca96e06ef2e779c9be14100770758b1ed88781e", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -7,7 +7,6 @@ use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calls of `mem::discriminant()` on a non-enum type.\n@@ -67,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for MemDiscriminant {\n                                 }\n                             }\n \n-                            let derefs: String = iter::repeat('*').take(derefs_needed).collect();\n+                            let derefs = \"*\".repeat(derefs_needed);\n                             diag.span_suggestion(\n                                 param.span,\n                                 \"try dereferencing\","}, {"sha": "1a32af5dc7a386fdd5e03c3832e8c105d6fc47f8", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::{BindingAnnotation, Expr, ExprKind, MatchSource, Node, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, adjustment::Adjust};\n use rustc_span::symbol::{sym, Symbol};\n-use std::iter;\n \n use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n@@ -54,8 +53,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, method_name: Symbol,\n                             ty = inner;\n                             n += 1;\n                         }\n-                        let refs: String = iter::repeat('&').take(n + 1).collect();\n-                        let derefs: String = iter::repeat('*').take(n).collect();\n+                        let refs = \"&\".repeat(n + 1);\n+                        let derefs = \"*\".repeat(n);\n                         let explicit = format!(\"<{}{}>::clone({})\", refs, ty, snip);\n                         diag.span_suggestion(\n                             expr.span,"}, {"sha": "3f28412fbf7edc7cc219dd20301b2f960ed480a1", "filename": "clippy_lints/src/methods/manual_str_repeat.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_str_repeat.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -0,0 +1,89 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item, match_type};\n+use clippy_utils::{is_expr_path_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_ast::util::parser::PREC_POSTFIX;\n+use rustc_ast::LitKind;\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, LangItem};\n+use rustc_lint::LateContext;\n+use rustc_span::symbol::{sym, Symbol};\n+\n+use super::MANUAL_STR_REPEAT;\n+\n+enum RepeatKind {\n+    Str,\n+    String,\n+    Char,\n+}\n+\n+fn parse_repeat_arg(cx: &LateContext<'_>, e: &Expr<'_>) -> Option<RepeatKind> {\n+    if let ExprKind::Lit(lit) = &e.kind {\n+        match lit.node {\n+            LitKind::Str(..) => Some(RepeatKind::Str),\n+            LitKind::Char(_) => Some(RepeatKind::Char),\n+            _ => None,\n+        }\n+    } else {\n+        let ty = cx.typeck_results().expr_ty(e);\n+        if is_type_diagnostic_item(cx, ty, sym::string_type)\n+            || is_type_lang_item(cx, ty, LangItem::OwnedBox)\n+            || match_type(cx, ty, &paths::COW)\n+        {\n+            Some(RepeatKind::String)\n+        } else {\n+            let ty = ty.peel_refs();\n+            (ty.is_str() || is_type_diagnostic_item(cx, ty, sym::string_type)).then(|| RepeatKind::Str)\n+        }\n+    }\n+}\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    collect_expr: &Expr<'_>,\n+    take_expr: &Expr<'_>,\n+    take_self_arg: &Expr<'_>,\n+    take_arg: &Expr<'_>,\n+) {\n+    if_chain! {\n+        if let ExprKind::Call(repeat_fn, [repeat_arg]) = take_self_arg.kind;\n+        if is_expr_path_def_path(cx, repeat_fn, &paths::ITER_REPEAT);\n+        if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(collect_expr), sym::string_type);\n+        if let Some(collect_id) = cx.typeck_results().type_dependent_def_id(collect_expr.hir_id);\n+        if let Some(take_id) = cx.typeck_results().type_dependent_def_id(take_expr.hir_id);\n+        if let Some(iter_trait_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n+        if cx.tcx.trait_of_item(collect_id) == Some(iter_trait_id);\n+        if cx.tcx.trait_of_item(take_id) == Some(iter_trait_id);\n+        if let Some(repeat_kind) = parse_repeat_arg(cx, repeat_arg);\n+        let ctxt = collect_expr.span.ctxt();\n+        if ctxt == take_expr.span.ctxt();\n+        if ctxt == take_self_arg.span.ctxt();\n+        then {\n+            let mut app = Applicability::MachineApplicable;\n+            let (val_snip, val_is_mac) = snippet_with_context(cx, repeat_arg.span, ctxt, \"..\", &mut app);\n+            let count_snip = snippet_with_context(cx, take_arg.span, ctxt, \"..\", &mut app).0;\n+\n+            let val_str = match repeat_kind {\n+                RepeatKind::String => format!(\"(&{})\", val_snip),\n+                RepeatKind::Str if !val_is_mac && repeat_arg.precedence().order() < PREC_POSTFIX => {\n+                    format!(\"({})\", val_snip)\n+                },\n+                RepeatKind::Str => val_snip.into(),\n+                RepeatKind::Char if val_snip == r#\"'\"'\"# => r#\"\"\\\"\"\"#.into(),\n+                RepeatKind::Char if val_snip == r#\"'\\''\"# => r#\"\"'\"\"#.into(),\n+                RepeatKind::Char => format!(\"\\\"{}\\\"\", &val_snip[1..val_snip.len() - 1]),\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                MANUAL_STR_REPEAT,\n+                collect_expr.span,\n+                \"manual implementation of `str::repeat` using iterators\",\n+                \"try this\",\n+                format!(\"{}.repeat({})\", val_str, count_snip),\n+                app\n+            )\n+        }\n+    }\n+}"}, {"sha": "62a56434b3c226392b02d21ca890979fd7276b7f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -32,6 +32,7 @@ mod iter_nth_zero;\n mod iter_skip_next;\n mod iterator_step_by_zero;\n mod manual_saturating_arithmetic;\n+mod manual_str_repeat;\n mod map_collect_result_unit;\n mod map_flatten;\n mod map_unwrap_or;\n@@ -60,9 +61,12 @@ mod wrong_self_convention;\n mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::ty::{contains_adt_constructor, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, paths, return_ty};\n+use clippy_utils::{\n+    diagnostics::{span_lint, span_lint_and_help},\n+    meets_msrv, msrvs,\n+};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -1664,6 +1668,27 @@ declare_clippy_lint! {\n     \"checks for `.splitn(0, ..)` and `.splitn(1, ..)`\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for manual implementations of `str::repeat`\n+    ///\n+    /// **Why is this bad?** These are both harder to read, as well as less performant.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let x: String = std::iter::repeat('x').take(10).collect();\n+    ///\n+    /// // Good\n+    /// let x: String = \"x\".repeat(10);\n+    /// ```\n+    pub MANUAL_STR_REPEAT,\n+    perf,\n+    \"manual implementation of `str::repeat`\"\n+}\n+\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n@@ -1737,7 +1762,8 @@ impl_lint_pass!(Methods => [\n     FROM_ITER_INSTEAD_OF_COLLECT,\n     INSPECT_FOR_EACH,\n     IMPLICIT_CLONE,\n-    SUSPICIOUS_SPLITN\n+    SUSPICIOUS_SPLITN,\n+    MANUAL_STR_REPEAT\n ]);\n \n /// Extracts a method call name, args, and `Span` of the method name.\n@@ -1981,6 +2007,11 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                 Some((\"map\", [m_recv, m_arg], _)) => {\n                     map_collect_result_unit::check(cx, expr, m_recv, m_arg, recv);\n                 },\n+                Some((\"take\", [take_self_arg, take_arg], _)) => {\n+                    if meets_msrv(msrv, &msrvs::STR_REPEAT) {\n+                        manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n+                    }\n+                },\n                 _ => {},\n             },\n             (\"count\", []) => match method_call!(recv) {"}, {"sha": "4a9c4fd0276b378074b0b9895512f22a2e5a65d1", "filename": "clippy_utils/src/msrvs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/clippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/clippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmsrvs.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -26,4 +26,5 @@ msrv_aliases! {\n     1,34,0 { TRY_FROM }\n     1,30,0 { ITERATOR_FIND_MAP }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST }\n+    1,16,0 { STR_REPEAT }\n }"}, {"sha": "62225e7a7f864b42e2712f31fff92f9547d289aa", "filename": "tests/ui/manual_str_repeat.fixed", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.fixed?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_str_repeat)]\n+\n+use std::iter::repeat;\n+\n+fn main() {\n+    let _: String = \"test\".repeat(10);\n+    let _: String = \"x\".repeat(10);\n+    let _: String = \"'\".repeat(10);\n+    let _: String = \"\\\"\".repeat(10);\n+\n+    let x = \"test\";\n+    let count = 10;\n+    let _ = x.repeat(count + 2);\n+\n+    macro_rules! m {\n+        ($e:expr) => {{ $e }};\n+    }\n+\n+    let _: String = m!(\"test\").repeat(m!(count));\n+\n+    let x = &x;\n+    let _: String = (*x).repeat(count);\n+\n+    macro_rules! repeat_m {\n+        ($e:expr) => {{ repeat($e) }};\n+    }\n+    // Don't lint, repeat is from a macro.\n+    let _: String = repeat_m!(\"test\").take(count).collect();\n+}"}, {"sha": "1acd66da27591da3c1d69b157f9386e63d12ac88", "filename": "tests/ui/manual_str_repeat.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.rs?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -0,0 +1,31 @@\n+// run-rustfix\n+\n+#![warn(clippy::manual_str_repeat)]\n+\n+use std::iter::repeat;\n+\n+fn main() {\n+    let _: String = std::iter::repeat(\"test\").take(10).collect();\n+    let _: String = std::iter::repeat('x').take(10).collect();\n+    let _: String = std::iter::repeat('\\'').take(10).collect();\n+    let _: String = std::iter::repeat('\"').take(10).collect();\n+\n+    let x = \"test\";\n+    let count = 10;\n+    let _ = repeat(x).take(count + 2).collect::<String>();\n+\n+    macro_rules! m {\n+        ($e:expr) => {{ $e }};\n+    }\n+\n+    let _: String = repeat(m!(\"test\")).take(m!(count)).collect();\n+\n+    let x = &x;\n+    let _: String = repeat(*x).take(count).collect();\n+\n+    macro_rules! repeat_m {\n+        ($e:expr) => {{ repeat($e) }};\n+    }\n+    // Don't lint, repeat is from a macro.\n+    let _: String = repeat_m!(\"test\").take(count).collect();\n+}"}, {"sha": "ef67ad2a1fd55a2323b5f698f07ae7405ea12ecc", "filename": "tests/ui/manual_str_repeat.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97311f0906ca89656f5942b326a665fe98d84c17/tests%2Fui%2Fmanual_str_repeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_str_repeat.stderr?ref=97311f0906ca89656f5942b326a665fe98d84c17", "patch": "@@ -0,0 +1,46 @@\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:8:21\n+   |\n+LL |     let _: String = std::iter::repeat(\"test\").take(10).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"test\".repeat(10)`\n+   |\n+   = note: `-D clippy::manual-str-repeat` implied by `-D warnings`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:9:21\n+   |\n+LL |     let _: String = std::iter::repeat('x').take(10).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"x\".repeat(10)`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:10:21\n+   |\n+LL |     let _: String = std::iter::repeat('/'').take(10).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"'\".repeat(10)`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:11:21\n+   |\n+LL |     let _: String = std::iter::repeat('\"').take(10).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `\"/\"\".repeat(10)`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:15:13\n+   |\n+LL |     let _ = repeat(x).take(count + 2).collect::<String>();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `x.repeat(count + 2)`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:21:21\n+   |\n+LL |     let _: String = repeat(m!(\"test\")).take(m!(count)).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `m!(\"test\").repeat(m!(count))`\n+\n+error: manual implementation of `str::repeat` using iterators\n+  --> $DIR/manual_str_repeat.rs:24:21\n+   |\n+LL |     let _: String = repeat(*x).take(count).collect();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `(*x).repeat(count)`\n+\n+error: aborting due to 7 previous errors\n+"}]}