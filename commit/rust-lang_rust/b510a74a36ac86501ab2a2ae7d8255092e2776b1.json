{"sha": "b510a74a36ac86501ab2a2ae7d8255092e2776b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MTBhNzRhMzZhYzg2NTAxYWIyYTJhZTdkODI1NTA5MmUyNzc2YjE=", "commit": {"author": {"name": "Matt Brubeck", "email": "mbrubeck@limpet.net", "date": "2011-10-28T21:20:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-10-28T21:44:39Z"}, "message": "Cleanup: Remove uneccesary generic_cmp function.", "tree": {"sha": "596545820947926663fd0d193b3b7af93aab857e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/596545820947926663fd0d193b3b7af93aab857e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b510a74a36ac86501ab2a2ae7d8255092e2776b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b510a74a36ac86501ab2a2ae7d8255092e2776b1", "html_url": "https://github.com/rust-lang/rust/commit/b510a74a36ac86501ab2a2ae7d8255092e2776b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b510a74a36ac86501ab2a2ae7d8255092e2776b1/comments", "author": {"login": "mbrubeck", "id": 5920, "node_id": "MDQ6VXNlcjU5MjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5920?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbrubeck", "html_url": "https://github.com/mbrubeck", "followers_url": "https://api.github.com/users/mbrubeck/followers", "following_url": "https://api.github.com/users/mbrubeck/following{/other_user}", "gists_url": "https://api.github.com/users/mbrubeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbrubeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbrubeck/subscriptions", "organizations_url": "https://api.github.com/users/mbrubeck/orgs", "repos_url": "https://api.github.com/users/mbrubeck/repos", "events_url": "https://api.github.com/users/mbrubeck/events{/privacy}", "received_events_url": "https://api.github.com/users/mbrubeck/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c5c108d5b9e6f94a0dc8d48a7baa7782cc871d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5c108d5b9e6f94a0dc8d48a7baa7782cc871d3", "html_url": "https://github.com/rust-lang/rust/commit/9c5c108d5b9e6f94a0dc8d48a7baa7782cc871d3"}], "stats": {"total": 40, "additions": 13, "deletions": 27}, "files": [{"sha": "4c2abd17f36f4df35b27618b01dc48a37d90bb7d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b510a74a36ac86501ab2a2ae7d8255092e2776b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b510a74a36ac86501ab2a2ae7d8255092e2776b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=b510a74a36ac86501ab2a2ae7d8255092e2776b1", "patch": "@@ -1536,63 +1536,49 @@ fn compare_scalar_types(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef,\n // A helper function to do the actual comparison of scalar values.\n fn compare_scalar_values(cx: @block_ctxt, lhs: ValueRef, rhs: ValueRef,\n                          nt: scalar_type, op: ast::binop) -> ValueRef {\n-    let cmp = alt nt {\n+    alt nt {\n       nil_type. {\n         // We don't need to do actual comparisons for nil.\n         // () == () holds but () < () does not.\n         alt op {\n-          ast::eq. | ast::le. | ast::ge. { 1u }\n-          ast::ne. | ast::lt. | ast::gt. { 0u }\n+          ast::eq. | ast::le. | ast::ge. { ret C_bool(true); }\n+          ast::ne. | ast::lt. | ast::gt. { ret C_bool(false); }\n         }\n       }\n       floating_point. {\n-        alt op {\n+        let cmp = alt op {\n           ast::eq. { lib::llvm::LLVMRealOEQ }\n           ast::ne. { lib::llvm::LLVMRealUNE }\n           ast::lt. { lib::llvm::LLVMRealOLT }\n           ast::le. { lib::llvm::LLVMRealOLE }\n           ast::gt. { lib::llvm::LLVMRealOGT }\n           ast::ge. { lib::llvm::LLVMRealOGE }\n-        }\n+        };\n+        ret FCmp(cx, cmp, lhs, rhs);\n       }\n       signed_int. {\n-        alt op {\n+        let cmp = alt op {\n           ast::eq. { lib::llvm::LLVMIntEQ }\n           ast::ne. { lib::llvm::LLVMIntNE }\n           ast::lt. { lib::llvm::LLVMIntSLT }\n           ast::le. { lib::llvm::LLVMIntSLE }\n           ast::gt. { lib::llvm::LLVMIntSGT }\n           ast::ge. { lib::llvm::LLVMIntSGE }\n-        }\n+        };\n+        ret ICmp(cx, cmp, lhs, rhs);\n       }\n       unsigned_int. {\n-        alt op {\n+        let cmp = alt op {\n           ast::eq. { lib::llvm::LLVMIntEQ }\n           ast::ne. { lib::llvm::LLVMIntNE }\n           ast::lt. { lib::llvm::LLVMIntULT }\n           ast::le. { lib::llvm::LLVMIntULE }\n           ast::gt. { lib::llvm::LLVMIntUGT }\n           ast::ge. { lib::llvm::LLVMIntUGE }\n-        }\n+        };\n+        ret ICmp(cx, cmp, lhs, rhs);\n       }\n-    };\n-    // FIXME: This wouldn't be necessary if we could bind methods off of\n-    // objects and therefore abstract over FCmp and ICmp (issue #435).  Then\n-    // we could just write, e.g., \"cmp_fn = bind FCmp(cx, _, _, _);\" in\n-    // the above, and \"auto eq_result = cmp_fn(eq_cmp, lhs, rhs);\" in the\n-    // below.\n-\n-    fn generic_cmp(cx: @block_ctxt, nt: scalar_type, op: uint, lhs: ValueRef,\n-                   rhs: ValueRef) -> ValueRef {\n-        let r: ValueRef;\n-        if nt == nil_type {\n-            r = C_bool(op != 0u);\n-        } else if nt == floating_point {\n-            r = FCmp(cx, op, lhs, rhs);\n-        } else { r = ICmp(cx, op, lhs, rhs); }\n-        ret r;\n-    }\n-    ret generic_cmp(cx, nt, cmp, lhs, rhs);\n+    }\n }\n \n type val_pair_fn = fn(@block_ctxt, ValueRef, ValueRef) -> @block_ctxt;"}]}