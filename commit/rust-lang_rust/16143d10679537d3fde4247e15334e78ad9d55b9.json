{"sha": "16143d10679537d3fde4247e15334e78ad9d55b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MTQzZDEwNjc5NTM3ZDNmZGU0MjQ3ZTE1MzM0ZTc4YWQ5ZDU1Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T15:37:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-06T15:37:29Z"}, "message": "Auto merge of #83875 - jyn514:diag_info, r=bugadani\n\nrustdoc: Use DiagnosticInfo in more parts of intra-doc links\n\nThis makes the code a lot less verbose.\n\nThis is separated into lots of tiny commits because it was easier for me that way, but the overall diff isn't that big if you want to read it at once.\n\nr? `@bugadani`", "tree": {"sha": "a5b90adb7b3fe188a34557482627fd8d61f2643b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b90adb7b3fe188a34557482627fd8d61f2643b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16143d10679537d3fde4247e15334e78ad9d55b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16143d10679537d3fde4247e15334e78ad9d55b9", "html_url": "https://github.com/rust-lang/rust/commit/16143d10679537d3fde4247e15334e78ad9d55b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16143d10679537d3fde4247e15334e78ad9d55b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c897d430dcbec6b10a9925f7de054dbc0ad3c52", "html_url": "https://github.com/rust-lang/rust/commit/5c897d430dcbec6b10a9925f7de054dbc0ad3c52"}, {"sha": "a86a740defc4be4c89c28310b144af4559a4c9de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86a740defc4be4c89c28310b144af4559a4c9de", "html_url": "https://github.com/rust-lang/rust/commit/a86a740defc4be4c89c28310b144af4559a4c9de"}], "stats": {"total": 196, "additions": 67, "deletions": 129}, "files": [{"sha": "401e2ed2884a097211b60d244e327019c15a378a", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 52, "deletions": 124, "changes": 176, "blob_url": "https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=16143d10679537d3fde4247e15334e78ad9d55b9", "patch": "@@ -251,6 +251,7 @@ struct ResolutionInfo {\n     extra_fragment: Option<String>,\n }\n \n+#[derive(Clone)]\n struct DiagnosticInfo<'a> {\n     item: &'a Item,\n     dox: &'a str,\n@@ -916,19 +917,19 @@ impl LinkCollector<'_, '_> {\n             return None;\n         }\n \n+        let diag_info = DiagnosticInfo {\n+            item,\n+            dox,\n+            ori_link: &ori_link.link,\n+            link_range: ori_link.range.clone(),\n+        };\n+\n         let link = ori_link.link.replace(\"`\", \"\");\n         let no_backticks_range = range_between_backticks(&ori_link);\n         let parts = link.split('#').collect::<Vec<_>>();\n         let (link, extra_fragment) = if parts.len() > 2 {\n             // A valid link can't have multiple #'s\n-            anchor_failure(\n-                self.cx,\n-                &item,\n-                &link,\n-                dox,\n-                ori_link.range,\n-                AnchorFailure::MultipleAnchors,\n-            );\n+            anchor_failure(self.cx, diag_info, AnchorFailure::MultipleAnchors);\n             return None;\n         } else if parts.len() == 2 {\n             if parts[0].trim().is_empty() {\n@@ -950,7 +951,7 @@ impl LinkCollector<'_, '_> {\n                     // See issue #83859.\n                     let disambiguator_range = (no_backticks_range.start + relative_range.start)\n                         ..(no_backticks_range.start + relative_range.end);\n-                    disambiguator_error(self.cx, &item, dox, disambiguator_range, &err_msg);\n+                    disambiguator_error(self.cx, diag_info, disambiguator_range, &err_msg);\n                 }\n                 return None;\n             }\n@@ -989,11 +990,9 @@ impl LinkCollector<'_, '_> {\n             debug!(\"attempting to resolve item without parent module: {}\", path_str);\n             resolution_failure(\n                 self,\n-                &item,\n+                diag_info,\n                 path_str,\n                 disambiguator,\n-                dox,\n-                ori_link.range,\n                 smallvec![ResolutionFailure::NoParentItem],\n             );\n             return None;\n@@ -1039,11 +1038,9 @@ impl LinkCollector<'_, '_> {\n                     debug!(\"link has malformed generics: {}\", path_str);\n                     resolution_failure(\n                         self,\n-                        &item,\n+                        diag_info,\n                         path_str,\n                         disambiguator,\n-                        dox,\n-                        ori_link.range,\n                         smallvec![err_kind],\n                     );\n                     return None;\n@@ -1059,20 +1056,14 @@ impl LinkCollector<'_, '_> {\n             return None;\n         }\n \n-        let diag_info = DiagnosticInfo {\n-            item,\n-            dox,\n-            ori_link: &ori_link.link,\n-            link_range: ori_link.range.clone(),\n-        };\n         let (mut res, mut fragment) = self.resolve_with_disambiguator_cached(\n             ResolutionInfo {\n                 module_id,\n                 dis: disambiguator,\n                 path_str: path_str.to_owned(),\n                 extra_fragment,\n             },\n-            diag_info,\n+            diag_info.clone(), // this struct should really be Copy, but Range is not :(\n             matches!(ori_link.kind, LinkType::Reference | LinkType::Shortcut),\n         )?;\n \n@@ -1090,10 +1081,7 @@ impl LinkCollector<'_, '_> {\n                     if fragment.is_some() {\n                         anchor_failure(\n                             self.cx,\n-                            &item,\n-                            path_str,\n-                            dox,\n-                            ori_link.range,\n+                            diag_info,\n                             AnchorFailure::RustdocAnchorConflict(prim),\n                         );\n                         return None;\n@@ -1103,7 +1091,7 @@ impl LinkCollector<'_, '_> {\n                 } else {\n                     // `[char]` when a `char` module is in scope\n                     let candidates = vec![res, prim];\n-                    ambiguity_error(self.cx, &item, path_str, dox, ori_link.range, candidates);\n+                    ambiguity_error(self.cx, diag_info, path_str, candidates);\n                     return None;\n                 }\n             }\n@@ -1123,15 +1111,7 @@ impl LinkCollector<'_, '_> {\n                 diag.note(&note);\n                 suggest_disambiguator(resolved, diag, path_str, dox, sp, &ori_link.range);\n             };\n-            report_diagnostic(\n-                self.cx.tcx,\n-                BROKEN_INTRA_DOC_LINKS,\n-                &msg,\n-                &item,\n-                dox,\n-                &ori_link.range,\n-                callback,\n-            );\n+            report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n         };\n \n         let verify = |kind: DefKind, id: DefId| {\n@@ -1171,7 +1151,7 @@ impl LinkCollector<'_, '_> {\n                 if self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_src)\n                     && !self.cx.tcx.privacy_access_levels(LOCAL_CRATE).is_exported(hir_dst)\n                 {\n-                    privacy_error(self.cx, &item, &path_str, dox, &ori_link);\n+                    privacy_error(self.cx, &diag_info, &path_str);\n                 }\n             }\n \n@@ -1312,29 +1292,14 @@ impl LinkCollector<'_, '_> {\n                                 }\n                             }\n                         }\n-                        resolution_failure(\n-                            self,\n-                            diag.item,\n-                            path_str,\n-                            disambiguator,\n-                            diag.dox,\n-                            diag.link_range,\n-                            smallvec![kind],\n-                        );\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![kind]);\n                         // This could just be a normal link or a broken link\n                         // we could potentially check if something is\n                         // \"intra-doc-link-like\" and warn in that case.\n                         None\n                     }\n                     Err(ErrorKind::AnchorFailure(msg)) => {\n-                        anchor_failure(\n-                            self.cx,\n-                            diag.item,\n-                            diag.ori_link,\n-                            diag.dox,\n-                            diag.link_range,\n-                            msg,\n-                        );\n+                        anchor_failure(self.cx, diag, msg);\n                         None\n                     }\n                 }\n@@ -1351,29 +1316,15 @@ impl LinkCollector<'_, '_> {\n                             Ok(res)\n                         }\n                         Err(ErrorKind::AnchorFailure(msg)) => {\n-                            anchor_failure(\n-                                self.cx,\n-                                diag.item,\n-                                diag.ori_link,\n-                                diag.dox,\n-                                diag.link_range,\n-                                msg,\n-                            );\n+                            anchor_failure(self.cx, diag, msg);\n                             return None;\n                         }\n                         Err(ErrorKind::Resolve(box kind)) => Err(kind),\n                     },\n                     value_ns: match self.resolve(path_str, ValueNS, base_node, extra_fragment) {\n                         Ok(res) => Ok(res),\n                         Err(ErrorKind::AnchorFailure(msg)) => {\n-                            anchor_failure(\n-                                self.cx,\n-                                diag.item,\n-                                diag.ori_link,\n-                                diag.dox,\n-                                diag.link_range,\n-                                msg,\n-                            );\n+                            anchor_failure(self.cx, diag, msg);\n                             return None;\n                         }\n                         Err(ErrorKind::Resolve(box kind)) => Err(kind),\n@@ -1402,11 +1353,9 @@ impl LinkCollector<'_, '_> {\n                 if len == 0 {\n                     resolution_failure(\n                         self,\n-                        diag.item,\n+                        diag,\n                         path_str,\n                         disambiguator,\n-                        diag.dox,\n-                        diag.link_range,\n                         candidates.into_iter().filter_map(|res| res.err()).collect(),\n                     );\n                     // this could just be a normal link\n@@ -1423,14 +1372,7 @@ impl LinkCollector<'_, '_> {\n                     }\n                     // If we're reporting an ambiguity, don't mention the namespaces that failed\n                     let candidates = candidates.map(|candidate| candidate.ok().map(|(res, _)| res));\n-                    ambiguity_error(\n-                        self.cx,\n-                        diag.item,\n-                        path_str,\n-                        diag.dox,\n-                        diag.link_range,\n-                        candidates.present_items().collect(),\n-                    );\n+                    ambiguity_error(self.cx, diag, path_str, candidates.present_items().collect());\n                     None\n                 }\n             }\n@@ -1448,15 +1390,7 @@ impl LinkCollector<'_, '_> {\n                                 break;\n                             }\n                         }\n-                        resolution_failure(\n-                            self,\n-                            diag.item,\n-                            path_str,\n-                            disambiguator,\n-                            diag.dox,\n-                            diag.link_range,\n-                            smallvec![kind],\n-                        );\n+                        resolution_failure(self, diag, path_str, disambiguator, smallvec![kind]);\n                         None\n                     }\n                 }\n@@ -1690,9 +1624,7 @@ fn report_diagnostic(\n     tcx: TyCtxt<'_>,\n     lint: &'static Lint,\n     msg: &str,\n-    item: &Item,\n-    dox: &str,\n-    link_range: &Range<usize>,\n+    DiagnosticInfo { item, ori_link: _, dox, link_range }: &DiagnosticInfo<'_>,\n     decorate: impl FnOnce(&mut DiagnosticBuilder<'_>, Option<rustc_span::Span>),\n ) {\n     let hir_id = match DocContext::as_local_hir_id(tcx, item.def_id) {\n@@ -1746,21 +1678,17 @@ fn report_diagnostic(\n /// `std::io::Error::x`, this will resolve `std::io::Error`.\n fn resolution_failure(\n     collector: &mut LinkCollector<'_, '_>,\n-    item: &Item,\n+    diag_info: DiagnosticInfo<'_>,\n     path_str: &str,\n     disambiguator: Option<Disambiguator>,\n-    dox: &str,\n-    link_range: Range<usize>,\n     kinds: SmallVec<[ResolutionFailure<'_>; 3]>,\n ) {\n     let tcx = collector.cx.tcx;\n     report_diagnostic(\n         tcx,\n         BROKEN_INTRA_DOC_LINKS,\n         &format!(\"unresolved link to `{}`\", path_str),\n-        item,\n-        dox,\n-        &link_range,\n+        &diag_info,\n         |diag, sp| {\n             let item = |res: Res| format!(\"the {} `{}`\", res.descr(), res.name(tcx),);\n             let assoc_item_not_allowed = |res: Res| {\n@@ -1920,9 +1848,9 @@ fn resolution_failure(\n                                 disambiguator,\n                                 diag,\n                                 path_str,\n-                                dox,\n+                                diag_info.dox,\n                                 sp,\n-                                &link_range,\n+                                &diag_info.link_range,\n                             )\n                         }\n \n@@ -1969,24 +1897,19 @@ fn resolution_failure(\n }\n \n /// Report an anchor failure.\n-fn anchor_failure(\n-    cx: &DocContext<'_>,\n-    item: &Item,\n-    path_str: &str,\n-    dox: &str,\n-    link_range: Range<usize>,\n-    failure: AnchorFailure,\n-) {\n+fn anchor_failure(cx: &DocContext<'_>, diag_info: DiagnosticInfo<'_>, failure: AnchorFailure) {\n     let msg = match failure {\n-        AnchorFailure::MultipleAnchors => format!(\"`{}` contains multiple anchors\", path_str),\n+        AnchorFailure::MultipleAnchors => {\n+            format!(\"`{}` contains multiple anchors\", diag_info.ori_link)\n+        }\n         AnchorFailure::RustdocAnchorConflict(res) => format!(\n             \"`{}` contains an anchor, but links to {kind}s are already anchored\",\n-            path_str,\n+            diag_info.ori_link,\n             kind = res.descr(),\n         ),\n     };\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"contains invalid anchor\");\n         }\n@@ -1996,21 +1919,19 @@ fn anchor_failure(\n /// Report an error in the link disambiguator.\n fn disambiguator_error(\n     cx: &DocContext<'_>,\n-    item: &Item,\n-    dox: &str,\n-    link_range: Range<usize>,\n+    mut diag_info: DiagnosticInfo<'_>,\n+    disambiguator_range: Range<usize>,\n     msg: &str,\n ) {\n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, item, dox, &link_range, |_diag, _sp| {});\n+    diag_info.link_range = disambiguator_range;\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, msg, &diag_info, |_diag, _sp| {});\n }\n \n /// Report an ambiguity error, where there were multiple possible resolutions.\n fn ambiguity_error(\n     cx: &DocContext<'_>,\n-    item: &Item,\n+    diag_info: DiagnosticInfo<'_>,\n     path_str: &str,\n-    dox: &str,\n-    link_range: Range<usize>,\n     candidates: Vec<Res>,\n ) {\n     let mut msg = format!(\"`{}` is \", path_str);\n@@ -2037,7 +1958,7 @@ fn ambiguity_error(\n         }\n     }\n \n-    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, item, dox, &link_range, |diag, sp| {\n+    report_diagnostic(cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"ambiguous link\");\n         } else {\n@@ -2046,7 +1967,14 @@ fn ambiguity_error(\n \n         for res in candidates {\n             let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(disambiguator, diag, path_str, dox, sp, &link_range);\n+            suggest_disambiguator(\n+                disambiguator,\n+                diag,\n+                path_str,\n+                diag_info.dox,\n+                sp,\n+                &diag_info.link_range,\n+            );\n         }\n     });\n }\n@@ -2078,9 +2006,9 @@ fn suggest_disambiguator(\n }\n \n /// Report a link from a public item to a private one.\n-fn privacy_error(cx: &DocContext<'_>, item: &Item, path_str: &str, dox: &str, link: &MarkdownLink) {\n+fn privacy_error(cx: &DocContext<'_>, diag_info: &DiagnosticInfo<'_>, path_str: &str) {\n     let sym;\n-    let item_name = match item.name {\n+    let item_name = match diag_info.item.name {\n         Some(name) => {\n             sym = name.as_str();\n             &*sym\n@@ -2090,7 +2018,7 @@ fn privacy_error(cx: &DocContext<'_>, item: &Item, path_str: &str, dox: &str, li\n     let msg =\n         format!(\"public documentation for `{}` links to private item `{}`\", item_name, path_str);\n \n-    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, item, dox, &link.range, |diag, sp| {\n+    report_diagnostic(cx.tcx, PRIVATE_INTRA_DOC_LINKS, &msg, diag_info, |diag, sp| {\n         if let Some(sp) = sp {\n             diag.span_label(sp, \"this item is private\");\n         }"}, {"sha": "6785cb7abeaee3ea26bc305e606fba6b7a995a90", "filename": "src/test/rustdoc-ui/intra-doc/anchors.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.rs?ref=16143d10679537d3fde4247e15334e78ad9d55b9", "patch": "@@ -43,3 +43,7 @@ pub fn enum_link() {}\n /// [u32#hello]\n //~^ ERROR `u32#hello` contains an anchor\n pub fn x() {}\n+\n+/// [prim@usize#x]\n+//~^ ERROR `prim@usize#x` contains an anchor\n+pub mod usize {}"}, {"sha": "787a68ed969ef113faa084d10e2632593d3a1d78", "filename": "src/test/rustdoc-ui/intra-doc/anchors.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16143d10679537d3fde4247e15334e78ad9d55b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fanchors.stderr?ref=16143d10679537d3fde4247e15334e78ad9d55b9", "patch": "@@ -1,15 +1,21 @@\n-error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n-  --> $DIR/anchors.rs:25:15\n+error: `prim@usize#x` contains an anchor, but links to builtin types are already anchored\n+  --> $DIR/anchors.rs:47:6\n    |\n-LL | /// Or maybe [Foo::f#hola].\n-   |               ^^^^^^^^^^^ contains invalid anchor\n+LL | /// [prim@usize#x]\n+   |      ^^^^^^^^^^^^ contains invalid anchor\n    |\n note: the lint level is defined here\n   --> $DIR/anchors.rs:1:9\n    |\n LL | #![deny(rustdoc::broken_intra_doc_links)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error: `Foo::f#hola` contains an anchor, but links to fields are already anchored\n+  --> $DIR/anchors.rs:25:15\n+   |\n+LL | /// Or maybe [Foo::f#hola].\n+   |               ^^^^^^^^^^^ contains invalid anchor\n+\n error: `hello#people#!` contains multiple anchors\n   --> $DIR/anchors.rs:31:28\n    |\n@@ -28,5 +34,5 @@ error: `u32#hello` contains an anchor, but links to builtin types are already an\n LL | /// [u32#hello]\n    |      ^^^^^^^^^ contains invalid anchor\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}