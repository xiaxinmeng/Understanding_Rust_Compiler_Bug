{"sha": "02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "node_id": "C_kwDOAAsO6NoAKDAyYTQyZmY4M2QxN2NjYjc2ZGRmNmRiYWYxYTBhNTZkOTFlZGQ2OWM", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-19T16:52:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-22T18:48:18Z"}, "message": "Rewrite dead-code pass to avoid fetching HIR.", "tree": {"sha": "a48237af9964b934358823caf147f1d8344db5c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48237af9964b934358823caf147f1d8344db5c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "html_url": "https://github.com/rust-lang/rust/commit/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a319f3c992e8c77103b3c542bd9b20be63999205", "url": "https://api.github.com/repos/rust-lang/rust/commits/a319f3c992e8c77103b3c542bd9b20be63999205", "html_url": "https://github.com/rust-lang/rust/commit/a319f3c992e8c77103b3c542bd9b20be63999205"}], "stats": {"total": 340, "additions": 142, "deletions": 198}, "files": [{"sha": "58c5e5b4dfe533a0109dac583954e12ca817d535", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 89, "deletions": 168, "changes": 257, "blob_url": "https://github.com/rust-lang/rust/blob/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "patch": "@@ -10,14 +10,12 @@ use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n use rustc_hir::{Node, PatKind, TyKind};\n-use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::middle::privacy;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, DefIdTree, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_span::Span;\n use std::mem;\n \n // Any local node that may call something in its body block should be\n@@ -647,41 +645,16 @@ struct DeadVisitor<'tcx> {\n }\n \n impl<'tcx> DeadVisitor<'tcx> {\n-    fn should_warn_about_item(&mut self, item: &hir::Item<'_>) -> bool {\n-        let should_warn = matches!(\n-            item.kind,\n-            hir::ItemKind::Static(..)\n-                | hir::ItemKind::Const(..)\n-                | hir::ItemKind::Fn(..)\n-                | hir::ItemKind::TyAlias(..)\n-                | hir::ItemKind::Enum(..)\n-                | hir::ItemKind::Struct(..)\n-                | hir::ItemKind::Union(..)\n-        );\n-        should_warn && !self.symbol_is_live(item.def_id)\n-    }\n-\n-    fn should_warn_about_field(&mut self, field: &hir::FieldDef<'_>) -> bool {\n-        let def_id = self.tcx.hir().local_def_id(field.hir_id);\n-        let field_type = self.tcx.type_of(def_id);\n-        !field.is_positional()\n-            && !self.symbol_is_live(def_id)\n-            && !field_type.is_phantom_data()\n-            && !has_allow_dead_code_or_lang_attr(self.tcx, field.hir_id)\n-    }\n-\n-    fn should_warn_about_variant(&mut self, variant: &hir::Variant<'_>) -> bool {\n-        let def_id = self.tcx.hir().local_def_id(variant.id);\n-        !self.symbol_is_live(def_id) && !has_allow_dead_code_or_lang_attr(self.tcx, variant.id)\n-    }\n-\n-    fn should_warn_about_foreign_item(&mut self, fi: &hir::ForeignItem<'_>) -> bool {\n-        !self.symbol_is_live(fi.def_id) && !has_allow_dead_code_or_lang_attr(self.tcx, fi.hir_id())\n-    }\n-\n-    // id := HIR id of an item's definition.\n-    fn symbol_is_live(&mut self, def_id: LocalDefId) -> bool {\n-        self.live_symbols.contains(&def_id)\n+    fn should_warn_about_field(&mut self, field: &ty::FieldDef) -> bool {\n+        if self.live_symbols.contains(&field.did.expect_local()) {\n+            return false;\n+        }\n+        let is_positional = field.name.as_str().starts_with(|c: char| c.is_ascii_digit());\n+        if is_positional {\n+            return false;\n+        }\n+        let field_type = self.tcx.type_of(field.did);\n+        !field_type.is_phantom_data()\n     }\n \n     fn warn_multiple_dead_codes(\n@@ -790,154 +763,102 @@ impl<'tcx> DeadVisitor<'tcx> {\n     }\n \n     fn warn_dead_code(&mut self, id: LocalDefId, participle: &str) {\n-        if self.tcx.item_name(id.to_def_id()).as_str().starts_with('_') {\n-            return;\n-        }\n         self.warn_multiple_dead_codes(&[id], participle, None);\n     }\n-}\n \n-impl<'tcx> Visitor<'tcx> for DeadVisitor<'tcx> {\n-    type NestedFilter = nested_filter::All;\n-\n-    /// Walk nested items in place so that we don't report dead-code\n-    /// on inner functions when the outer function is already getting\n-    /// an error. We could do this also by checking the parents, but\n-    /// this is how the code is setup and it seems harmless enough.\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.tcx.hir()\n-    }\n-\n-    fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n-        if self.should_warn_about_item(item) {\n-            // For most items, we want to highlight its identifier\n-            let participle = match item.kind {\n-                hir::ItemKind::Struct(..) => \"constructed\", // Issue #52325\n-                _ => \"used\",\n-            };\n-            self.warn_dead_code(item.def_id, participle);\n-        } else {\n-            // Only continue if we didn't warn\n-            intravisit::walk_item(self, item);\n+    fn check_definition(&mut self, def_id: LocalDefId) {\n+        if self.live_symbols.contains(&def_id) {\n+            return;\n         }\n-    }\n-\n-    // This visitor should only visit a single module at a time.\n-    fn visit_mod(&mut self, _: &'tcx hir::Mod<'tcx>, _: Span, _: hir::HirId) {}\n-\n-    fn visit_enum_def(\n-        &mut self,\n-        enum_definition: &'tcx hir::EnumDef<'tcx>,\n-        generics: &'tcx hir::Generics<'tcx>,\n-        item_id: hir::HirId,\n-        _: Span,\n-    ) {\n-        intravisit::walk_enum_def(self, enum_definition, generics, item_id);\n-        let dead_variants = enum_definition\n-            .variants\n-            .iter()\n-            .filter_map(|variant| {\n-                if self.should_warn_about_variant(&variant) {\n-                    Some(DeadVariant {\n-                        def_id: self.tcx.hir().local_def_id(variant.id),\n-                        name: variant.ident.name,\n-                        level: self.tcx.lint_level_at_node(lint::builtin::DEAD_CODE, variant.id).0,\n-                    })\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect();\n-        self.warn_dead_fields_and_variants(item_id.expect_owner(), \"constructed\", dead_variants)\n-    }\n-\n-    fn visit_variant(\n-        &mut self,\n-        variant: &'tcx hir::Variant<'tcx>,\n-        g: &'tcx hir::Generics<'tcx>,\n-        id: hir::HirId,\n-    ) {\n-        if !self.should_warn_about_variant(&variant) {\n-            intravisit::walk_variant(self, variant, g, id);\n+        let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n+        if has_allow_dead_code_or_lang_attr(self.tcx, hir_id) {\n+            return;\n         }\n-    }\n-\n-    fn visit_foreign_item(&mut self, fi: &'tcx hir::ForeignItem<'tcx>) {\n-        if self.should_warn_about_foreign_item(fi) {\n-            self.warn_dead_code(fi.def_id, \"used\");\n+        let Some(name) = self.tcx.opt_item_name(def_id.to_def_id()) else {\n+            return\n+        };\n+        if name.as_str().starts_with('_') {\n+            return;\n+        }\n+        match self.tcx.def_kind(def_id) {\n+            DefKind::AssocConst\n+            | DefKind::AssocFn\n+            | DefKind::Fn\n+            | DefKind::Static(_)\n+            | DefKind::Const\n+            | DefKind::TyAlias\n+            | DefKind::Enum\n+            | DefKind::Union\n+            | DefKind::ForeignTy => self.warn_dead_code(def_id, \"used\"),\n+            DefKind::Struct => self.warn_dead_code(def_id, \"constructed\"),\n+            DefKind::Variant | DefKind::Field => bug!(\"should be handled specially\"),\n+            _ => {}\n         }\n-        intravisit::walk_foreign_item(self, fi);\n     }\n+}\n \n-    fn visit_variant_data(\n-        &mut self,\n-        def: &'tcx hir::VariantData<'tcx>,\n-        _: Symbol,\n-        _: &hir::Generics<'_>,\n-        id: hir::HirId,\n-        _: rustc_span::Span,\n-    ) {\n-        intravisit::walk_struct_def(self, def);\n-        let dead_fields = def\n-            .fields()\n-            .iter()\n-            .filter_map(|field| {\n-                if self.should_warn_about_field(&field) {\n-                    Some(DeadVariant {\n-                        def_id: self.tcx.hir().local_def_id(field.hir_id),\n-                        name: field.ident.name,\n-                        level: self\n-                            .tcx\n-                            .lint_level_at_node(lint::builtin::DEAD_CODE, field.hir_id)\n-                            .0,\n-                    })\n-                } else {\n-                    None\n-                }\n-            })\n-            .collect();\n-        self.warn_dead_fields_and_variants(self.tcx.hir().local_def_id(id), \"read\", dead_fields)\n-    }\n+fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n+    let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n+    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n \n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        match impl_item.kind {\n-            hir::ImplItemKind::Const(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.def_id) {\n-                    self.warn_dead_code(impl_item.def_id, \"used\");\n-                }\n-                self.visit_nested_body(body_id)\n+    let module_items = tcx.hir_module_items(module);\n+\n+    for item in module_items.items() {\n+        if !live_symbols.contains(&item.def_id) {\n+            let parent = tcx.local_parent(item.def_id);\n+            if parent != module && !live_symbols.contains(&parent) {\n+                // We already have diagnosed something.\n+                continue;\n             }\n-            hir::ImplItemKind::Fn(_, body_id) => {\n-                if !self.symbol_is_live(impl_item.def_id) {\n-                    self.warn_dead_code(impl_item.def_id, \"used\");\n+            visitor.check_definition(item.def_id);\n+            continue;\n+        }\n+\n+        let def_kind = tcx.def_kind(item.def_id);\n+        if let DefKind::Struct | DefKind::Union | DefKind::Enum = def_kind {\n+            let adt = tcx.adt_def(item.def_id);\n+            let mut dead_variants = Vec::new();\n+\n+            for variant in adt.variants() {\n+                let def_id = variant.def_id.expect_local();\n+                if !live_symbols.contains(&def_id) {\n+                    // Record to group diagnostics.\n+                    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                    let level = tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0;\n+                    dead_variants.push(DeadVariant { def_id, name: variant.name, level });\n+                    continue;\n                 }\n-                self.visit_nested_body(body_id)\n+\n+                let dead_fields = variant\n+                    .fields\n+                    .iter()\n+                    .filter_map(|field| {\n+                        let def_id = field.did.expect_local();\n+                        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n+                        if visitor.should_warn_about_field(&field) {\n+                            let level = tcx.lint_level_at_node(lint::builtin::DEAD_CODE, hir_id).0;\n+                            Some(DeadVariant { def_id, name: field.name, level })\n+                        } else {\n+                            None\n+                        }\n+                    })\n+                    .collect();\n+                visitor.warn_dead_fields_and_variants(def_id, \"read\", dead_fields)\n             }\n-            hir::ImplItemKind::TyAlias(..) => {}\n+\n+            visitor.warn_dead_fields_and_variants(item.def_id, \"constructed\", dead_variants);\n         }\n     }\n \n-    // Overwrite so that we don't warn the trait item itself.\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        match trait_item.kind {\n-            hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Fn(_, hir::TraitFn::Provided(body_id)) => {\n-                self.visit_nested_body(body_id)\n-            }\n-            hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Fn(_, hir::TraitFn::Required(_))\n-            | hir::TraitItemKind::Type(..) => {}\n-        }\n+    for impl_item in module_items.impl_items() {\n+        visitor.check_definition(impl_item.def_id);\n     }\n-}\n \n-fn check_mod_deathness(tcx: TyCtxt<'_>, module: LocalDefId) {\n-    let (live_symbols, ignored_derived_traits) = tcx.live_symbols_and_ignored_derived_traits(());\n-    let mut visitor = DeadVisitor { tcx, live_symbols, ignored_derived_traits };\n-    let (module, _, module_id) = tcx.hir().get_module(module);\n-    // Do not use an ItemLikeVisitor since we may want to skip visiting some items\n-    // when a surrounding one is warned against or `_`.\n-    intravisit::walk_mod(&mut visitor, module, module_id);\n+    for foreign_item in module_items.foreign_items() {\n+        visitor.check_definition(foreign_item.def_id);\n+    }\n+\n+    // We do not warn trait items.\n }\n \n pub(crate) fn provide(providers: &mut Providers) {"}, {"sha": "3497b952fdd0b912b362b43a4d1807df433f9ade", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "patch": "@@ -14,6 +14,26 @@ note: the lint level is defined here\n LL | #![warn(dead_code)]\n    |         ^^^^^^^^^\n \n+warning: fields `a` and `b` are never read\n+  --> $DIR/issue-85255.rs:19:5\n+   |\n+LL | pub(crate) struct Foo1 {\n+   |                   ---- fields in this struct\n+LL |     a: i32,\n+   |     ^\n+LL |     pub b: i32,\n+   |         ^\n+\n+warning: fields `a` and `b` are never read\n+  --> $DIR/issue-85255.rs:31:5\n+   |\n+LL | pub(crate) struct Foo2 {\n+   |                   ---- fields in this struct\n+LL |     a: i32,\n+   |     ^\n+LL |     pub b: i32,\n+   |         ^\n+\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:14:8\n    |\n@@ -26,16 +46,6 @@ warning: associated function `b` is never used\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: fields `a` and `b` are never read\n-  --> $DIR/issue-85255.rs:19:5\n-   |\n-LL | pub(crate) struct Foo1 {\n-   |                   ---- fields in this struct\n-LL |     a: i32,\n-   |     ^\n-LL |     pub b: i32,\n-   |         ^\n-\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:26:8\n    |\n@@ -48,16 +58,6 @@ warning: associated function `b` is never used\n LL |     pub fn b(&self) -> i32 { 6 }\n    |            ^\n \n-warning: fields `a` and `b` are never read\n-  --> $DIR/issue-85255.rs:31:5\n-   |\n-LL | pub(crate) struct Foo2 {\n-   |                   ---- fields in this struct\n-LL |     a: i32,\n-   |     ^\n-LL |     pub b: i32,\n-   |         ^\n-\n warning: associated function `a` is never used\n   --> $DIR/issue-85255.rs:38:8\n    |"}, {"sha": "293fcdbc5ee7f68e25371abdbccfdebec5c177b8", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.rs?ref=02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "patch": "@@ -73,7 +73,18 @@ mod inner {\n     fn f() {}\n }\n \n+fn anon_const() -> [(); {\n+    fn blah() {} //~ ERROR: function `blah` is never used\n+    1\n+}] {\n+    [(); {\n+        fn blah() {} //~ ERROR: function `blah` is never used\n+        1\n+    }]\n+}\n+\n pub fn foo() {\n     let a: &dyn inner::Trait = &1_isize;\n     a.f();\n+    anon_const();\n }"}, {"sha": "26fc13bae08a1fcd197a7b4810a9f530d14bf10e", "filename": "src/test/ui/lint/dead-code/lint-dead-code-3.stderr", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-3.stderr?ref=02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "patch": "@@ -10,12 +10,6 @@ note: the lint level is defined here\n LL | #![deny(dead_code)]\n    |         ^^^^^^^^^\n \n-error: associated function `foo` is never used\n-  --> $DIR/lint-dead-code-3.rs:16:8\n-   |\n-LL |     fn foo(&self) {\n-   |        ^^^\n-\n error: function `bar` is never used\n   --> $DIR/lint-dead-code-3.rs:21:4\n    |\n@@ -28,11 +22,29 @@ error: enum `c_void` is never used\n LL | enum c_void {}\n    |      ^^^^^^\n \n+error: function `blah` is never used\n+  --> $DIR/lint-dead-code-3.rs:77:8\n+   |\n+LL |     fn blah() {}\n+   |        ^^^^\n+\n+error: function `blah` is never used\n+  --> $DIR/lint-dead-code-3.rs:81:12\n+   |\n+LL |         fn blah() {}\n+   |            ^^^^\n+\n+error: associated function `foo` is never used\n+  --> $DIR/lint-dead-code-3.rs:16:8\n+   |\n+LL |     fn foo(&self) {\n+   |        ^^^\n+\n error: function `free` is never used\n   --> $DIR/lint-dead-code-3.rs:62:8\n    |\n LL |     fn free(p: *const c_void);\n    |        ^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 7 previous errors\n "}, {"sha": "668c1dacf95a7a35b8583ca7f500c91c932e37a6", "filename": "src/test/ui/lint/dead-code/lint-dead-code-4.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Flint-dead-code-4.stderr?ref=02a42ff83d17ccb76ddf6dbaf1a0a56d91edd69c", "patch": "@@ -32,9 +32,9 @@ LL | enum ABC {\n error: fields `b` and `c` are never read\n   --> $DIR/lint-dead-code-4.rs:39:9\n    |\n-LL | enum IJK {\n-   |      --- fields in this enum\n-...\n+LL |     J {\n+   |     - fields in this variant\n+LL |         a: String,\n LL |         b: i32,\n    |         ^\n LL |         c: i32,"}]}