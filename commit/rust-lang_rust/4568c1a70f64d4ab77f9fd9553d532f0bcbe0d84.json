{"sha": "4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NjhjMWE3MGY2NGQ0YWI3N2Y5ZmQ5NTUzZDUzMmYwYmNiZTBkODQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-21T02:25:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-21T02:25:21Z"}, "message": "Merge pull request #3042 from topecongiro/issue-3040\n\nDo not trim a block from expression if its condition will go multi-line", "tree": {"sha": "f5ad071e7821063a9bd7b3348d3eac382c599067", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5ad071e7821063a9bd7b3348d3eac382c599067"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbpFaRCRBK7hj4Ov3rIwAAdHIIAKwwxuu7L11f8+qdRDvJyvOt\nhMKdqZzQsqt9JxBU5yyyI76sBpQAZ5L1JhEbk7ZbPvgp08HNKhak1x8WHASiMSRE\n+ZsUaJnlo+xr5MsCtC4YxltImqhJ8LACl3zgtv1ul7b/GtTha+elq1j1CzT2tLxM\n5oqS9OmmGzKXbFxYwx8QLOGuaPUn3KB0gU+mYQJgIVi23a3wVlp7HEWuNNQAdrZY\nADMppYiS1NWpCIucgCtDyvePIttvZvrAoTxS6xNfEhBlajuF1cV8tb1X39dx3YLd\nkpPAWHeOenpAgsAtRcd7iZCbr/kpxGTEl6nkcFdvb+wjkomL6MXJJjsJlF8D238=\n=uyi4\n-----END PGP SIGNATURE-----\n", "payload": "tree f5ad071e7821063a9bd7b3348d3eac382c599067\nparent cd8549e0133cd4f29b152142b75d6e17288c4efb\nparent f70d139f9c2ceac9bb31e917c073a9643a0e6f8b\nauthor Nick Cameron <nrc@ncameron.org> 1537496721 +1200\ncommitter GitHub <noreply@github.com> 1537496721 +1200\n\nMerge pull request #3042 from topecongiro/issue-3040\n\nDo not trim a block from expression if its condition will go multi-line"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "html_url": "https://github.com/rust-lang/rust/commit/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd8549e0133cd4f29b152142b75d6e17288c4efb", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8549e0133cd4f29b152142b75d6e17288c4efb", "html_url": "https://github.com/rust-lang/rust/commit/cd8549e0133cd4f29b152142b75d6e17288c4efb"}, {"sha": "f70d139f9c2ceac9bb31e917c073a9643a0e6f8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f70d139f9c2ceac9bb31e917c073a9643a0e6f8b", "html_url": "https://github.com/rust-lang/rust/commit/f70d139f9c2ceac9bb31e917c073a9643a0e6f8b"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "a143c20f4bfecaa35defdc01b1c574f10c12de87", "filename": "src/matches.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "patch": "@@ -19,7 +19,7 @@ use syntax::{ast, ptr};\n use comment::{combine_strs_with_missing_comments, rewrite_comment};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use expr::{\n-    format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n+    format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line, rewrite_cond,\n     rewrite_multiple_patterns, ExprType, RhsTactics,\n };\n use lists::{itemize_list, write_list, ListFormatting};\n@@ -231,7 +231,7 @@ fn rewrite_match_arm(\n ) -> Option<String> {\n     let (missing_span, attrs_str) = if !arm.attrs.is_empty() {\n         if contains_skip(&arm.attrs) {\n-            let (_, body) = flatten_arm_body(context, &arm.body);\n+            let (_, body) = flatten_arm_body(context, &arm.body, None);\n             // `arm.span()` does not include trailing comma, add it manually.\n             return Some(format!(\n                 \"{}{}\",\n@@ -313,16 +313,27 @@ fn block_can_be_flattened<'a>(\n // (extend, body)\n // @extend: true if the arm body can be put next to `=>`\n // @body: flattened body, if the body is block with a single expression\n-fn flatten_arm_body<'a>(context: &'a RewriteContext, body: &'a ast::Expr) -> (bool, &'a ast::Expr) {\n+fn flatten_arm_body<'a>(\n+    context: &'a RewriteContext,\n+    body: &'a ast::Expr,\n+    opt_shape: Option<Shape>,\n+) -> (bool, &'a ast::Expr) {\n     let can_extend =\n         |expr| !context.config.force_multiline_blocks() && can_flatten_block_around_this(expr);\n \n     if let Some(ref block) = block_can_be_flattened(context, body) {\n         if let ast::StmtKind::Expr(ref expr) = block.stmts[0].node {\n             if let ast::ExprKind::Block(..) = expr.node {\n-                flatten_arm_body(context, expr)\n+                flatten_arm_body(context, expr, None)\n             } else {\n-                (can_extend(expr), &*expr)\n+                let cond_becomes_muti_line = opt_shape\n+                    .and_then(|shape| rewrite_cond(context, expr, shape))\n+                    .map_or(false, |cond| cond.contains('\\n'));\n+                if cond_becomes_muti_line {\n+                    (false, &*body)\n+                } else {\n+                    (can_extend(expr), &*expr)\n+                }\n             }\n         } else {\n             (false, &*body)\n@@ -341,7 +352,11 @@ fn rewrite_match_body(\n     arrow_span: Span,\n     is_last: bool,\n ) -> Option<String> {\n-    let (extend, body) = flatten_arm_body(context, body);\n+    let (extend, body) = flatten_arm_body(\n+        context,\n+        body,\n+        shape.offset_left(extra_offset(pats_str, shape) + 4),\n+    );\n     let (is_block, is_empty_block) = if let ast::ExprKind::Block(ref block, _) = body.node {\n         (\n             true,"}, {"sha": "db73570dbdfd5ee62152f7c52bbb4d6134ecaf5f", "filename": "tests/source/match.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "patch": "@@ -507,3 +507,17 @@ fn issue_2377() {\n         Tok::TypeOf if prec <= 16 => {}\n     }\n }\n+\n+// #3040\n+fn issue_3040() {\n+    {\n+        match foo {\n+            DevtoolScriptControlMsg::WantsLiveNotifications(id, to_send) => {\n+                match documents.find_window(id) {\n+                    Some(window) => devtools::handle_wants_live_notifications(window.upcast(), to_send),\n+                    None => return warn!(\"Message sent to closed pipeline {}.\", id),\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "daa1f9f65dbfc797867c21b854fe7cdd34a778f1", "filename": "tests/target/match.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=4568c1a70f64d4ab77f9fd9553d532f0bcbe0d84", "patch": "@@ -536,3 +536,19 @@ fn issue_2377() {\n         Tok::TypeOf if prec <= 16 => {}\n     }\n }\n+\n+// #3040\n+fn issue_3040() {\n+    {\n+        match foo {\n+            DevtoolScriptControlMsg::WantsLiveNotifications(id, to_send) => {\n+                match documents.find_window(id) {\n+                    Some(window) => {\n+                        devtools::handle_wants_live_notifications(window.upcast(), to_send)\n+                    }\n+                    None => return warn!(\"Message sent to closed pipeline {}.\", id),\n+                }\n+            }\n+        }\n+    }\n+}"}]}