{"sha": "525aa6102250ec2a33c7066dfb966524f0ce3e21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyNWFhNjEwMjI1MGVjMmEzM2M3MDY2ZGZiOTY2NTI0ZjBjZTNlMjE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T14:16:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-13T14:16:20Z"}, "message": "Auto merge of #32828 - vadimcn:symlinks, r=alexcrichton\n\nDo not rely on file extensions after path canonicalization.\n\nRustc does not recognize libraries which are symlinked to files having extension other than .rlib. The problem is that find_library_crate calls fs::canonicalize on found library paths, but then the resulting path is passed to get_metadata_section, which assumes it will end in \".rlib\" if it's an rlib (from https://internals.rust-lang.org/t/is-library-path-canonicalization-worth-it/3206).\n\ncc #29433", "tree": {"sha": "4d7f35086f2506f52e014269a04ec7483659dbcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d7f35086f2506f52e014269a04ec7483659dbcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/525aa6102250ec2a33c7066dfb966524f0ce3e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/525aa6102250ec2a33c7066dfb966524f0ce3e21", "html_url": "https://github.com/rust-lang/rust/commit/525aa6102250ec2a33c7066dfb966524f0ce3e21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/525aa6102250ec2a33c7066dfb966524f0ce3e21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6136a86291b12f5441910d56d5bc0dfbc7eecdeb", "html_url": "https://github.com/rust-lang/rust/commit/6136a86291b12f5441910d56d5bc0dfbc7eecdeb"}, {"sha": "cc3b6f24b7604880279918b3c1a58ef62fb06b36", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3b6f24b7604880279918b3c1a58ef62fb06b36", "html_url": "https://github.com/rust-lang/rust/commit/cc3b6f24b7604880279918b3c1a58ef62fb06b36"}], "stats": {"total": 80, "additions": 69, "deletions": 11}, "files": [{"sha": "be1e194efc33e49fa16a259f2a85951c105fa1e1", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=525aa6102250ec2a33c7066dfb966524f0ce3e21", "patch": "@@ -231,6 +231,7 @@ use rustc_back::target::Target;\n \n use std::cmp;\n use std::collections::HashMap;\n+use std::fmt;\n use std::fs;\n use std::io::prelude::*;\n use std::io;\n@@ -283,6 +284,21 @@ pub struct CratePaths {\n \n pub const METADATA_FILENAME: &'static str = \"rust.metadata.bin\";\n \n+#[derive(Copy, Clone, PartialEq)]\n+enum CrateFlavor {\n+    Rlib,\n+    Dylib\n+}\n+\n+impl fmt::Display for CrateFlavor {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.write_str(match *self {\n+            CrateFlavor::Rlib => \"rlib\",\n+            CrateFlavor::Dylib => \"dylib\"\n+        })\n+    }\n+}\n+\n impl CratePaths {\n     fn paths(&self) -> Vec<PathBuf> {\n         match (&self.dylib, &self.rlib) {\n@@ -457,8 +473,8 @@ impl<'a> Context<'a> {\n         let mut libraries = Vec::new();\n         for (_hash, (rlibs, dylibs)) in candidates {\n             let mut metadata = None;\n-            let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n-            let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n+            let rlib = self.extract_one(rlibs, CrateFlavor::Rlib, &mut metadata);\n+            let dylib = self.extract_one(dylibs, CrateFlavor::Dylib, &mut metadata);\n             match metadata {\n                 Some(metadata) => {\n                     libraries.push(Library {\n@@ -515,7 +531,7 @@ impl<'a> Context<'a> {\n     // read the metadata from it if `*slot` is `None`. If the metadata couldn't\n     // be read, it is assumed that the file isn't a valid rust library (no\n     // errors are emitted).\n-    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: &str,\n+    fn extract_one(&mut self, m: HashMap<PathBuf, PathKind>, flavor: CrateFlavor,\n                    slot: &mut Option<MetadataBlob>) -> Option<(PathBuf, PathKind)> {\n         let mut ret = None::<(PathBuf, PathKind)>;\n         let mut error = 0;\n@@ -535,7 +551,7 @@ impl<'a> Context<'a> {\n         let mut err: Option<DiagnosticBuilder> = None;\n         for (lib, kind) in m {\n             info!(\"{} reading metadata from: {}\", flavor, lib.display());\n-            let metadata = match get_metadata_section(self.target, &lib) {\n+            let metadata = match get_metadata_section(self.target, flavor, &lib) {\n                 Ok(blob) => {\n                     if self.crate_matches(blob.as_slice(), &lib) {\n                         blob\n@@ -702,8 +718,8 @@ impl<'a> Context<'a> {\n \n         // Extract the rlib/dylib pair.\n         let mut metadata = None;\n-        let rlib = self.extract_one(rlibs, \"rlib\", &mut metadata);\n-        let dylib = self.extract_one(dylibs, \"dylib\", &mut metadata);\n+        let rlib = self.extract_one(rlibs, CrateFlavor::Rlib, &mut metadata);\n+        let dylib = self.extract_one(dylibs, CrateFlavor::Dylib, &mut metadata);\n \n         if rlib.is_none() && dylib.is_none() { return None }\n         match metadata {\n@@ -746,21 +762,21 @@ impl ArchiveMetadata {\n }\n \n // Just a small wrapper to time how long reading metadata takes.\n-fn get_metadata_section(target: &Target, filename: &Path)\n+fn get_metadata_section(target: &Target, flavor: CrateFlavor, filename: &Path)\n                         -> Result<MetadataBlob, String> {\n     let start = Instant::now();\n-    let ret = get_metadata_section_imp(target, filename);\n+    let ret = get_metadata_section_imp(target, flavor, filename);\n     info!(\"reading {:?} => {:?}\", filename.file_name().unwrap(),\n           start.elapsed());\n     return ret\n }\n \n-fn get_metadata_section_imp(target: &Target, filename: &Path)\n+fn get_metadata_section_imp(target: &Target, flavor: CrateFlavor, filename: &Path)\n                             -> Result<MetadataBlob, String> {\n     if !filename.exists() {\n         return Err(format!(\"no such file: '{}'\", filename.display()));\n     }\n-    if filename.file_name().unwrap().to_str().unwrap().ends_with(\".rlib\") {\n+    if flavor == CrateFlavor::Rlib {\n         // Use ArchiveRO for speed here, it's backed by LLVM and uses mmap\n         // internally to read the file. We also avoid even using a memcpy by\n         // just keeping the archive along while the metadata is in use.\n@@ -864,7 +880,9 @@ pub fn read_meta_section_name(target: &Target) -> &'static str {\n // A diagnostic function for dumping crate metadata to an output stream\n pub fn list_file_metadata(target: &Target, path: &Path,\n                           out: &mut io::Write) -> io::Result<()> {\n-    match get_metadata_section(target, path) {\n+    let filename = path.file_name().unwrap().to_str().unwrap();\n+    let flavor = if filename.ends_with(\".rlib\") { CrateFlavor::Rlib } else { CrateFlavor::Dylib };\n+    match get_metadata_section(target, flavor, path) {\n         Ok(bytes) => decoder::list_crate_metadata(bytes.as_slice(), out),\n         Err(msg) => {\n             write!(out, \"{}\\n\", msg)"}, {"sha": "2709f786e0ab2ca18468c840cce5caf30a375fd7", "filename": "src/test/run-make/symlinked-rlib/Makefile", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2FMakefile?ref=525aa6102250ec2a33c7066dfb966524f0ce3e21", "patch": "@@ -0,0 +1,14 @@\n+-include ../tools.mk\n+\n+# ignore windows: `ln` is actually `cp` on msys.\n+ifndef IS_WINDOWS\n+\n+all:\n+\t$(RUSTC) foo.rs --crate-type=rlib -o $(TMPDIR)/foo.xxx\n+\tln -nsf $(TMPDIR)/foo.xxx $(TMPDIR)/libfoo.rlib\n+\t$(RUSTC) bar.rs -L $(TMPDIR)\n+\n+else\n+all:\n+\n+endif"}, {"sha": "e8f06680862fcd39e69e02fb893243929bd3eac8", "filename": "src/test/run-make/symlinked-rlib/bar.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Fbar.rs?ref=525aa6102250ec2a33c7066dfb966524f0ce3e21", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate foo;\n+\n+fn main() {\n+    foo::bar();\n+}"}, {"sha": "5abbb1dcbcef262c08893ac85cc311408e0f9f4f", "filename": "src/test/run-make/symlinked-rlib/foo.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/525aa6102250ec2a33c7066dfb966524f0ce3e21/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymlinked-rlib%2Ffoo.rs?ref=525aa6102250ec2a33c7066dfb966524f0ce3e21", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn bar() {}"}]}