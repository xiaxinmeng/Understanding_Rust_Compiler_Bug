{"sha": "0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxMDFiYmU3YWNiMzhlODExM2MwY2FmZWI3ZDVhZTBiZTY0NDhlNWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:17:08Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-02T17:17:08Z"}, "message": "rollup merge of #20420: alexcrichton/second-pass-boxed", "tree": {"sha": "e7cab291c3a5fef69ddfd68a64ffc620e89d2773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7cab291c3a5fef69ddfd68a64ffc620e89d2773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "html_url": "https://github.com/rust-lang/rust/commit/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faf53559c6cd37932736b20ef68b75a99da72b28", "url": "https://api.github.com/repos/rust-lang/rust/commits/faf53559c6cd37932736b20ef68b75a99da72b28", "html_url": "https://github.com/rust-lang/rust/commit/faf53559c6cd37932736b20ef68b75a99da72b28"}, {"sha": "f2ccdfd8914b7b8f8f8f2053f9ecd98d54ef95a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ccdfd8914b7b8f8f8f2053f9ecd98d54ef95a6", "html_url": "https://github.com/rust-lang/rust/commit/f2ccdfd8914b7b8f8f8f2053f9ecd98d54ef95a6"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "415416199459f56b1b1bf12795a8a50b27582d52", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "patch": "@@ -10,6 +10,8 @@\n \n //! A unique pointer type.\n \n+#![stable]\n+\n use core::any::{Any, AnyRefExt};\n use core::clone::Clone;\n use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n@@ -44,7 +46,7 @@ pub static HEAP: () = ();\n \n /// A type that represents a uniquely-owned value.\n #[lang = \"owned_box\"]\n-#[unstable = \"custom allocators will add an additional type parameter (with default)\"]\n+#[stable]\n pub struct Box<T>(Unique<T>);\n \n #[stable]\n@@ -111,18 +113,37 @@ impl<S: hash::Writer, Sized? T: Hash<S>> Hash<S> for Box<T> {\n     }\n }\n \n+#[cfg(not(stage0))]\n+impl Box<Any> {\n+    pub fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n+        if self.is::<T>() {\n+            unsafe {\n+                // Get the raw representation of the trait object\n+                let to: TraitObject =\n+                    mem::transmute::<Box<Any>, TraitObject>(self);\n+\n+                // Extract the data pointer\n+                Ok(mem::transmute(to.data))\n+            }\n+        } else {\n+            Err(self)\n+        }\n+    }\n+}\n \n /// Extension methods for an owning `Any` trait object.\n #[unstable = \"post-DST and coherence changes, this will not be a trait but \\\n               rather a direct `impl` on `Box<Any>`\"]\n+#[cfg(stage0)]\n pub trait BoxAny {\n     /// Returns the boxed value if it is of type `T`, or\n     /// `Err(Self)` if it isn't.\n-    #[unstable = \"naming conventions around accessing innards may change\"]\n+    #[stable]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Self>;\n }\n \n #[stable]\n+#[cfg(stage0)]\n impl BoxAny for Box<Any> {\n     #[inline]\n     fn downcast<T: 'static>(self) -> Result<Box<T>, Box<Any>> {\n@@ -147,7 +168,7 @@ impl<Sized? T: fmt::Show> fmt::Show for Box<T> {\n     }\n }\n \n-impl fmt::Show for Box<Any+'static> {\n+impl fmt::Show for Box<Any> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.pad(\"Box<Any>\")\n     }"}, {"sha": "49f150cf027d5d17f015892a53b7bdab2b3554c3", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=0101bbe7acb38e8113c0cafeb7d5ae0be6448e5b", "patch": "@@ -57,6 +57,11 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     ty::ty_trait(ref data) => {\n                         self.check_def_id(item.span, data.principal_def_id());\n                     }\n+                    ty::ty_uniq(..) => {\n+                        self.check_def_id(item.span,\n+                                          self.tcx.lang_items.owned_box()\n+                                              .unwrap());\n+                    }\n                     _ => {\n                         span_err!(self.tcx.sess, item.span, E0118,\n                                   \"no base type found for inherent implementation; \\"}]}