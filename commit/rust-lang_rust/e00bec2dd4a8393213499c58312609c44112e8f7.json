{"sha": "e00bec2dd4a8393213499c58312609c44112e8f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMGJlYzJkZDRhODM5MzIxMzQ5OWM1ODMxMjYwOWM0NDExMmU4Zjc=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-06-30T21:53:35Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-10T10:20:56Z"}, "message": "Allow 'tcx in define_dep_nodes! and deduplicate some DepNodes.", "tree": {"sha": "240519c0ed27a81f70b11bd6117cf69db4acc5f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/240519c0ed27a81f70b11bd6117cf69db4acc5f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e00bec2dd4a8393213499c58312609c44112e8f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e00bec2dd4a8393213499c58312609c44112e8f7", "html_url": "https://github.com/rust-lang/rust/commit/e00bec2dd4a8393213499c58312609c44112e8f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e00bec2dd4a8393213499c58312609c44112e8f7/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9808661b3d696c3f115b3dc3c68a8dc6cbc3bf72", "url": "https://api.github.com/repos/rust-lang/rust/commits/9808661b3d696c3f115b3dc3c68a8dc6cbc3bf72", "html_url": "https://github.com/rust-lang/rust/commit/9808661b3d696c3f115b3dc3c68a8dc6cbc3bf72"}], "stats": {"total": 130, "additions": 58, "deletions": 72}, "files": [{"sha": "1c30a19d2d9a78ebe4f7e6cb7ec68d787e6296f8", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=e00bec2dd4a8393213499c58312609c44112e8f7", "patch": "@@ -64,7 +64,8 @@ use hir::def_id::{CrateNum, DefId};\n use hir::map::DefPathHash;\n \n use ich::Fingerprint;\n-use ty::TyCtxt;\n+use ty::fast_reject::SimplifiedType;\n+use ty::{TyCtxt, Instance, InstanceDef};\n use rustc_data_structures::stable_hasher::{StableHasher, HashStable};\n use ich::StableHashingContext;\n use std::fmt;\n@@ -78,7 +79,8 @@ macro_rules! erase {\n }\n \n macro_rules! define_dep_nodes {\n-    ($(\n+    (<$tcx:tt>\n+    $(\n         $variant:ident $(( $($tuple_arg:tt),* ))*\n                        $({ $($struct_arg_name:ident : $struct_arg_ty:ty),* })*\n       ,)*\n@@ -92,7 +94,7 @@ macro_rules! define_dep_nodes {\n         impl DepKind {\n             #[allow(unreachable_code)]\n             #[inline]\n-            pub fn can_reconstruct_query_key(&self) -> bool {\n+            pub fn can_reconstruct_query_key<$tcx>(&self) -> bool {\n                 match *self {\n                     $(\n                         DepKind :: $variant => {\n@@ -139,7 +141,7 @@ macro_rules! define_dep_nodes {\n             }\n         }\n \n-        pub enum DepConstructor {\n+        pub enum DepConstructor<$tcx> {\n             $(\n                 $variant $(( $($tuple_arg),* ))*\n                          $({ $($struct_arg_name : $struct_arg_ty),* })*\n@@ -155,7 +157,7 @@ macro_rules! define_dep_nodes {\n \n         impl DepNode {\n             #[allow(unreachable_code, non_snake_case)]\n-            pub fn new(tcx: TyCtxt, dep: DepConstructor) -> DepNode {\n+            pub fn new<'a, 'gcx: 'a+'tcx, 'tcx: 'a>(tcx: TyCtxt<'a, 'gcx, 'tcx>, dep: DepConstructor<'gcx>) -> DepNode {\n                 match dep {\n                     $(\n                         DepConstructor :: $variant $(( $($tuple_arg),* ))*\n@@ -336,7 +338,7 @@ impl DefId {\n     }\n }\n \n-define_dep_nodes!(\n+define_dep_nodes!( <'tcx>\n     // Represents the `Krate` as a whole (the `hir::Krate` value) (as\n     // distinct from the krate module). This is basically a hash of\n     // the entire krate, so if you read from `Krate` (e.g., by calling\n@@ -374,8 +376,11 @@ define_dep_nodes!(\n \n     // Represents the MIR for a fn; also used as the task node for\n     // things read/modify that MIR.\n-    Mir(DefId),\n-    MirShim(DefIdList),\n+    MirConstQualif(DefId),\n+    MirConst(DefId),\n+    MirValidated(DefId),\n+    MirOptimized(DefId),\n+    MirShim { instance_def: InstanceDef<'tcx> },\n \n     BorrowCheckKrate,\n     BorrowCheck(DefId),\n@@ -414,8 +419,10 @@ define_dep_nodes!(\n     InherentImpls(DefId),\n     TypeckBodiesKrate,\n     TypeckTables(DefId),\n+    HasTypeckTables(DefId),\n     ConstEval(DefId),\n     SymbolName(DefId),\n+    InstanceSymbolName { instance: Instance<'tcx> },\n     SpecializationGraph(DefId),\n     ObjectSafety(DefId),\n     IsCopy(DefId),\n@@ -424,14 +431,9 @@ define_dep_nodes!(\n     NeedsDrop(DefId),\n     Layout(DefId),\n \n-    // The set of impls for a given trait. Ultimately, it would be\n-    // nice to get more fine-grained here (e.g., to include a\n-    // simplified type), but we can't do that until we restructure the\n-    // HIR to distinguish the *header* of an impl from its body.  This\n-    // is because changes to the header may change the self-type of\n-    // the impl and hence would require us to be more conservative\n-    // than changes in the impl body.\n+    // The set of impls for a given trait.\n     TraitImpls(DefId),\n+    RelevantTraitImpls(DefId, SimplifiedType),\n \n     AllLocalTraitImpls,\n "}, {"sha": "32063a2dda603f1b7fb742c6806122008e1711a6", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=e00bec2dd4a8393213499c58312609c44112e8f7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::DepConstructor;\n use hir::def_id::DefId;\n use ty::{self, Ty, TypeFoldable, Substs};\n use util::ppaux;\n@@ -59,27 +58,6 @@ impl<'tcx> InstanceDef<'tcx> {\n     pub fn attrs<'a>(&self, tcx: ty::TyCtxt<'a, 'tcx, 'tcx>) -> ty::Attributes<'tcx> {\n         tcx.get_attrs(self.def_id())\n     }\n-\n-    pub //(crate)\n-     fn dep_node(&self) -> DepConstructor {\n-        // HACK: def-id binning, project-style; someone replace this with\n-        // real on-demand.\n-        let ty = match self {\n-            &InstanceDef::FnPtrShim(_, ty) => Some(ty),\n-            &InstanceDef::DropGlue(_, ty) => ty,\n-            _ => None\n-        }.into_iter();\n-\n-        DepConstructor::MirShim(\n-            Some(self.def_id()).into_iter().chain(\n-                ty.flat_map(|t| t.walk()).flat_map(|t| match t.sty {\n-                   ty::TyAdt(adt_def, _) => Some(adt_def.did),\n-                   ty::TyProjection(ref proj) => Some(proj.trait_ref.def_id),\n-                   _ => None,\n-               })\n-            ).collect()\n-        )\n-    }\n }\n \n impl<'tcx> fmt::Display for Instance<'tcx> {"}, {"sha": "2b91b13d7251d676aa1a4c1a3fd37ab0c9d6c563", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=e00bec2dd4a8393213499c58312609c44112e8f7", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use dep_graph::{DepConstructor, DepNode, DepTrackingMapConfig};\n+use dep_graph::{DepConstructor, DepNode};\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::def::Def;\n use hir;\n@@ -261,11 +261,16 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n }\n \n-trait QueryDescription: DepTrackingMapConfig {\n+pub trait QueryConfig {\n+    type Key: Eq + Hash + Clone;\n+    type Value;\n+}\n+\n+trait QueryDescription: QueryConfig {\n     fn describe(tcx: TyCtxt, key: Self::Key) -> String;\n }\n \n-impl<M: DepTrackingMapConfig<Key=DefId>> QueryDescription for M {\n+impl<M: QueryConfig<Key=DefId>> QueryDescription for M {\n     default fn describe(tcx: TyCtxt, def_id: DefId) -> String {\n         format!(\"processing `{}`\", tcx.item_path_str(def_id))\n     }\n@@ -550,18 +555,19 @@ macro_rules! define_maps {\n             })*\n         }\n \n-        $(impl<$tcx> DepTrackingMapConfig for queries::$name<$tcx> {\n+        $(impl<$tcx> QueryConfig for queries::$name<$tcx> {\n             type Key = $K;\n             type Value = $V;\n+        }\n \n+        impl<'a, $tcx, 'lcx> queries::$name<$tcx> {\n             #[allow(unused)]\n-            fn to_dep_node(tcx: TyCtxt, key: &$K) -> DepNode {\n+            fn to_dep_node(tcx: TyCtxt<'a, $tcx, 'lcx>, key: &$K) -> DepNode {\n                 use dep_graph::DepConstructor::*;\n \n                 DepNode::new(tcx, $node(*key))\n             }\n-        }\n-        impl<'a, $tcx, 'lcx> queries::$name<$tcx> {\n+\n             fn try_get_with<F, R>(tcx: TyCtxt<'a, $tcx, 'lcx>,\n                                   mut span: Span,\n                                   key: $K,\n@@ -861,19 +867,19 @@ define_maps! { <'tcx>\n     /// Maps DefId's that have an associated Mir to the result\n     /// of the MIR qualify_consts pass. The actual meaning of\n     /// the value isn't known except to the pass itself.\n-    [] mir_const_qualif: Mir(DefId) -> u8,\n+    [] mir_const_qualif: MirConstQualif(DefId) -> u8,\n \n     /// Fetch the MIR for a given def-id up till the point where it is\n     /// ready for const evaluation.\n     ///\n     /// See the README for the `mir` module for details.\n-    [] mir_const: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+    [] mir_const: MirConst(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n-    [] mir_validated: Mir(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n+    [] mir_validated: MirValidated(DefId) -> &'tcx Steal<mir::Mir<'tcx>>,\n \n     /// MIR after our optimization passes have run. This is MIR that is ready\n     /// for trans. This is also the only query that can fetch non-local MIR, at present.\n-    [] optimized_mir: Mir(DefId) -> &'tcx mir::Mir<'tcx>,\n+    [] optimized_mir: MirOptimized(DefId) -> &'tcx mir::Mir<'tcx>,\n \n     /// Type of each closure. The def ID is the ID of the\n     /// expression defining the closure.\n@@ -890,7 +896,7 @@ define_maps! { <'tcx>\n \n     [] typeck_tables_of: TypeckTables(DefId) -> &'tcx ty::TypeckTables<'tcx>,\n \n-    [] has_typeck_tables: TypeckTables(DefId) -> bool,\n+    [] has_typeck_tables: HasTypeckTables(DefId) -> bool,\n \n     [] coherent_trait: coherent_trait_dep_node((CrateNum, DefId)) -> (),\n \n@@ -972,80 +978,80 @@ define_maps! { <'tcx>\n     [] extern_crate: ExternCrate(DefId) -> Rc<Option<ExternCrate>>,\n }\n \n-fn type_param_predicates((item_id, param_id): (DefId, DefId)) -> DepConstructor {\n+fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::TypeParamPredicates {\n         item_id,\n         param_id\n     }\n }\n \n-fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepConstructor {\n+fn coherent_trait_dep_node<'tcx>((_, def_id): (CrateNum, DefId)) -> DepConstructor<'tcx> {\n     DepConstructor::CoherenceCheckTrait(def_id)\n }\n \n-fn crate_inherent_impls_dep_node(_: CrateNum) -> DepConstructor {\n+fn crate_inherent_impls_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Coherence\n }\n \n-fn reachability_dep_node(_: CrateNum) -> DepConstructor {\n+fn reachability_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::Reachability\n }\n \n-fn mir_shim_dep_node(instance: ty::InstanceDef) -> DepConstructor {\n-    instance.dep_node()\n+fn mir_shim_dep_node<'tcx>(instance_def: ty::InstanceDef<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::MirShim {\n+        instance_def\n+    }\n }\n \n-fn symbol_name_dep_node(instance: ty::Instance) -> DepConstructor {\n-    // symbol_name uses the substs only to traverse them to find the\n-    // hash, and that does not create any new dep-nodes.\n-    DepConstructor::SymbolName(instance.def.def_id())\n+fn symbol_name_dep_node<'tcx>(instance: ty::Instance<'tcx>) -> DepConstructor<'tcx> {\n+    DepConstructor::InstanceSymbolName { instance }\n }\n \n-fn typeck_item_bodies_dep_node(_: CrateNum) -> DepConstructor {\n+fn typeck_item_bodies_dep_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::TypeckBodiesKrate\n }\n \n-fn const_eval_dep_node((def_id, _): (DefId, &Substs)) -> DepConstructor {\n+fn const_eval_dep_node<'tcx>((def_id, _): (DefId, &Substs)) -> DepConstructor<'tcx> {\n     DepConstructor::ConstEval(def_id)\n }\n \n-fn mir_keys(_: CrateNum) -> DepConstructor {\n+fn mir_keys<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::MirKeys\n }\n \n-fn crate_variances(_: CrateNum) -> DepConstructor {\n+fn crate_variances<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::CrateVariances\n }\n \n-fn relevant_trait_impls_for((def_id, _): (DefId, SimplifiedType)) -> DepConstructor {\n-    DepConstructor::TraitImpls(def_id)\n+fn relevant_trait_impls_for<'tcx>((def_id, t): (DefId, SimplifiedType)) -> DepConstructor<'tcx> {\n+    DepConstructor::RelevantTraitImpls(def_id, t)\n }\n \n-fn is_copy_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor {\n+fn is_copy_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n     let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n         .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n     DepConstructor::IsCopy(def_id)\n }\n \n-fn is_sized_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor {\n+fn is_sized_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n     let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n         .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n     DepConstructor::IsSized(def_id)\n }\n \n-fn is_freeze_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor {\n+fn is_freeze_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n     let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n         .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n     DepConstructor::IsFreeze(def_id)\n }\n \n-fn needs_drop_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor {\n+fn needs_drop_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n     let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n         .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n     DepConstructor::NeedsDrop(def_id)\n }\n \n-fn layout_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor {\n+fn layout_dep_node<'tcx>(key: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> DepConstructor<'tcx> {\n     let def_id = ty::item_path::characteristic_def_id_of_type(key.value)\n         .unwrap_or(DefId::local(CRATE_DEF_INDEX));\n     DepConstructor::Layout(def_id)"}, {"sha": "4bdfdd51f659aceb323a624bffecdc72d187e89a", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e00bec2dd4a8393213499c58312609c44112e8f7/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=e00bec2dd4a8393213499c58312609c44112e8f7", "patch": "@@ -12,7 +12,7 @@ use cstore;\n use encoder;\n use schema;\n \n-use rustc::dep_graph::DepTrackingMapConfig;\n+use rustc::ty::maps::QueryConfig;\n use rustc::middle::cstore::{CrateStore, CrateSource, LibSource, DepKind,\n                             NativeLibrary, MetadataLoader, LinkMeta,\n                             LinkagePreference, LoadedMacro, EncodedMetadata};\n@@ -45,7 +45,7 @@ macro_rules! provide {\n         pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n             $(fn $name<'a, $lt:$lt>($tcx: TyCtxt<'a, $lt, $lt>, $def_id: DefId)\n                                     -> <ty::queries::$name<$lt> as\n-                                        DepTrackingMapConfig>::Value {\n+                                        QueryConfig>::Value {\n                 assert!(!$def_id.is_local());\n \n                 let def_path_hash = $tcx.def_path_hash($def_id);"}]}