{"sha": "d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzQwODFiMThmYmY1MGYyZDI2MGVhODkzYjY1OWFlYzBiMWQ4NGE=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-12T01:24:25Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-16T16:00:30Z"}, "message": "mir/interpret: only use `ErrorHandled::Reported` for `ErrorReported`.", "tree": {"sha": "76d84766b5e8784ad5baa65ad2c5e2e240ae8e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76d84766b5e8784ad5baa65ad2c5e2e240ae8e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "html_url": "https://github.com/rust-lang/rust/commit/d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e22d4795d849d2c6a229ccb666db922ae5b76410", "url": "https://api.github.com/repos/rust-lang/rust/commits/e22d4795d849d2c6a229ccb666db922ae5b76410", "html_url": "https://github.com/rust-lang/rust/commit/e22d4795d849d2c6a229ccb666db922ae5b76410"}], "stats": {"total": 161, "additions": 87, "deletions": 74}, "files": [{"sha": "7d0e6998db48ebf5aa263f1186f665125e3329cc", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -6,6 +6,7 @@ use crate::glue;\n use crate::traits::*;\n use crate::MemFlags;\n \n+use rustc_errors::ErrorReported;\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::{ConstValue, ErrorHandled, Pointer, Scalar};\n use rustc_middle::ty::layout::TyAndLayout;\n@@ -447,8 +448,10 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 self.eval_mir_constant_to_operand(bx, constant).unwrap_or_else(|err| {\n                     match err {\n                         // errored or at least linted\n-                        ErrorHandled::Reported => {}\n-                        ErrorHandled::TooGeneric => bug!(\"codgen encountered polymorphic constant\"),\n+                        ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {}\n+                        ErrorHandled::TooGeneric => {\n+                            bug!(\"codegen encountered polymorphic constant\")\n+                        }\n                     }\n                     // Allow RalfJ to sleep soundly knowing that even refactorings that remove\n                     // the above error (or silence it under some conditions) will not cause UB."}, {"sha": "ebeb5df63271b39574577618521b6012d8c99ff8", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -304,8 +304,8 @@ pub fn unexpected_hidden_region_diagnostic(\n         // down this path which gives a decent human readable\n         // explanation.\n         //\n-        // (*) if not, the `tainted_by_errors` flag would be set to\n-        // true in any case, so we wouldn't be here at all.\n+        // (*) if not, the `tainted_by_errors` field would be set to\n+        // `Some(ErrorReported)` in any case, so we wouldn't be here at all.\n         note_and_explain_free_region(\n             tcx,\n             &mut err,"}, {"sha": "91646b3ba540dcd8318a38951d57fc34f62b9947", "filename": "src/librustc_middle/mir/interpret/error.rs", "status": "modified", "additions": 25, "deletions": 32, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Ferror.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -8,7 +8,7 @@ use crate::ty::{self, layout, Ty};\n \n use backtrace::Backtrace;\n use rustc_data_structures::sync::Lock;\n-use rustc_errors::{struct_span_err, DiagnosticBuilder};\n+use rustc_errors::{struct_span_err, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::definitions::DefPathData;\n use rustc_macros::HashStable;\n@@ -19,25 +19,16 @@ use std::{any::Any, fmt, mem};\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, HashStable, RustcEncodable, RustcDecodable)]\n pub enum ErrorHandled {\n-    /// Already reported a lint or an error for this evaluation.\n-    Reported,\n+    /// Already reported an error for this evaluation, and the compilation is\n+    /// *guaranteed* to fail. Warnings/lints *must not* produce `Reported`.\n+    Reported(ErrorReported),\n+    /// Already emitted a lint for this evaluation.\n+    Linted,\n     /// Don't emit an error, the evaluation failed because the MIR was generic\n     /// and the substs didn't fully monomorphize it.\n     TooGeneric,\n }\n \n-impl ErrorHandled {\n-    pub fn assert_reported(self) {\n-        match self {\n-            ErrorHandled::Reported => {}\n-            ErrorHandled::TooGeneric => bug!(\n-                \"MIR interpretation failed without reporting an error \\\n-                 even though it was fully monomorphized\"\n-            ),\n-        }\n-    }\n-}\n-\n CloneTypeFoldableImpls! {\n     ErrorHandled,\n }\n@@ -84,15 +75,12 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'tcx>,\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n-    ) -> Result<(), ErrorHandled> {\n+    ) -> ErrorHandled {\n         self.struct_generic(tcx, message, emit, None)\n     }\n \n     pub fn report_as_error(&self, tcx: TyCtxtAt<'tcx>, message: &str) -> ErrorHandled {\n-        match self.struct_error(tcx, message, |mut e| e.emit()) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(x) => x,\n-        }\n+        self.struct_error(tcx, message, |mut e| e.emit())\n     }\n \n     pub fn report_as_lint(\n@@ -102,7 +90,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         lint_root: hir::HirId,\n         span: Option<Span>,\n     ) -> ErrorHandled {\n-        match self.struct_generic(\n+        self.struct_generic(\n             tcx,\n             message,\n             |mut lint: DiagnosticBuilder<'_>| {\n@@ -122,10 +110,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                 lint.emit();\n             },\n             Some(lint_root),\n-        ) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(err) => err,\n-        }\n+        )\n     }\n \n     /// Create a diagnostic for this const eval error.\n@@ -143,12 +128,14 @@ impl<'tcx> ConstEvalErr<'tcx> {\n         message: &str,\n         emit: impl FnOnce(DiagnosticBuilder<'_>),\n         lint_root: Option<hir::HirId>,\n-    ) -> Result<(), ErrorHandled> {\n+    ) -> ErrorHandled {\n         let must_error = match self.error {\n             err_inval!(Layout(LayoutError::Unknown(_))) | err_inval!(TooGeneric) => {\n-                return Err(ErrorHandled::TooGeneric);\n+                return ErrorHandled::TooGeneric;\n+            }\n+            err_inval!(TypeckError(error_reported)) => {\n+                return ErrorHandled::Reported(error_reported);\n             }\n-            err_inval!(TypeckError) => return Err(ErrorHandled::Reported),\n             // We must *always* hard error on these, even if the caller wants just a lint.\n             err_inval!(Layout(LayoutError::SizeOverflow(_))) => true,\n             _ => false,\n@@ -183,6 +170,7 @@ impl<'tcx> ConstEvalErr<'tcx> {\n             // caller thinks anyway.\n             // See <https://github.com/rust-lang/rust/pull/63152>.\n             finish(struct_error(tcx, &err_msg), None);\n+            ErrorHandled::Reported(ErrorReported)\n         } else {\n             // Regular case.\n             if let Some(lint_root) = lint_root {\n@@ -200,12 +188,13 @@ impl<'tcx> ConstEvalErr<'tcx> {\n                     tcx.span,\n                     |lint| finish(lint.build(message), Some(err_msg)),\n                 );\n+                ErrorHandled::Linted\n             } else {\n                 // Report as hard error.\n                 finish(struct_error(tcx, message), Some(err_msg));\n+                ErrorHandled::Reported(ErrorReported)\n             }\n         }\n-        Ok(())\n     }\n }\n \n@@ -246,7 +235,9 @@ fn print_backtrace(backtrace: &mut Backtrace) {\n impl From<ErrorHandled> for InterpErrorInfo<'_> {\n     fn from(err: ErrorHandled) -> Self {\n         match err {\n-            ErrorHandled::Reported => err_inval!(ReferencedConstant),\n+            ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted => {\n+                err_inval!(ReferencedConstant)\n+            }\n             ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n         }\n         .into()\n@@ -288,7 +279,7 @@ pub enum InvalidProgramInfo<'tcx> {\n     /// which already produced an error.\n     ReferencedConstant,\n     /// Abort in case type errors are reached.\n-    TypeckError,\n+    TypeckError(ErrorReported),\n     /// An error occurred during layout computation.\n     Layout(layout::LayoutError<'tcx>),\n     /// An invalid transmute happened.\n@@ -301,7 +292,9 @@ impl fmt::Debug for InvalidProgramInfo<'_> {\n         match self {\n             TooGeneric => write!(f, \"encountered overly generic constant\"),\n             ReferencedConstant => write!(f, \"referenced constant has errors\"),\n-            TypeckError => write!(f, \"encountered constants with type errors, stopping evaluation\"),\n+            TypeckError(ErrorReported) => {\n+                write!(f, \"encountered constants with type errors, stopping evaluation\")\n+            }\n             Layout(ref err) => write!(f, \"{}\", err),\n             TransmuteSizeDiff(from_ty, to_ty) => write!(\n                 f,"}, {"sha": "3eec58251a0e6375daabc5e30aac637f74cd21ee", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -410,8 +410,8 @@ pub struct TypeckTables<'tcx> {\n     pub used_trait_imports: Lrc<DefIdSet>,\n \n     /// If any errors occurred while type-checking this body,\n-    /// this field will be set to `true`.\n-    pub tainted_by_errors: bool,\n+    /// this field will be set to `Some(ErrorReported)`.\n+    pub tainted_by_errors: Option<ErrorReported>,\n \n     /// All the opaque types that are restricted to concrete types\n     /// by this function.\n@@ -447,7 +447,7 @@ impl<'tcx> TypeckTables<'tcx> {\n             fru_field_types: Default::default(),\n             coercion_casts: Default::default(),\n             used_trait_imports: Lrc::new(Default::default()),\n-            tainted_by_errors: false,\n+            tainted_by_errors: None,\n             concrete_opaque_types: Default::default(),\n             upvar_list: Default::default(),\n             generator_interior_types: Default::default(),"}, {"sha": "9f095847099f8f09a1b90d7ec37fd62f81952cde", "filename": "src/librustc_middle/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_middle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fmod.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -27,6 +27,7 @@ use rustc_data_structures::fx::FxIndexMap;\n use rustc_data_structures::sorted_map::SortedIndexMultiMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{self, par_iter, ParallelIterator};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Namespace, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n@@ -2388,7 +2389,7 @@ impl<'tcx> AdtDef {\n                     None\n                 }\n             }\n-            Err(ErrorHandled::Reported) => {\n+            Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {\n                 if !expr_did.is_local() {\n                     span_bug!(\n                         tcx.def_span(expr_did),"}, {"sha": "ff7cd9f25db7de4d631247e6adce7262f12ef950", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -3,7 +3,7 @@\n use rustc_ast::ast::Name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::{def_id::DefId, HirId, Node};\n use rustc_index::bit_set::BitSet;\n@@ -135,7 +135,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     // Gather the upvars of a closure, if any.\n     let tables = tcx.typeck_tables_of(def_id);\n-    if tables.tainted_by_errors {\n+    if let Some(ErrorReported) = tables.tainted_by_errors {\n         infcx.set_tainted_by_errors();\n     }\n     let upvars: Vec<_> = tables"}, {"sha": "8cb0ea91bc25fb9a1603b030b68e3f071d9dbddc", "filename": "src/librustc_mir/const_eval/eval_queries.rs", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Feval_queries.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -213,13 +213,10 @@ fn validate_and_turn_into_const<'tcx>(\n \n     val.map_err(|error| {\n         let err = error_to_const_error(&ecx, error);\n-        match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n+        err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\", |mut diag| {\n             diag.note(note_on_undefined_behavior_error());\n             diag.emit();\n-        }) {\n-            Ok(_) => ErrorHandled::Reported,\n-            Err(err) => err,\n-        }\n+        })\n     })\n }\n \n@@ -292,11 +289,10 @@ pub fn const_eval_raw_provider<'tcx>(\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n \n-    if def_id.is_local()\n-        && tcx.has_typeck_tables(def_id)\n-        && tcx.typeck_tables_of(def_id).tainted_by_errors\n-    {\n-        return Err(ErrorHandled::Reported);\n+    if def_id.is_local() && tcx.has_typeck_tables(def_id) {\n+        if let Some(error_reported) = tcx.typeck_tables_of(def_id).tainted_by_errors {\n+            return Err(ErrorHandled::Reported(error_reported));\n+        }\n     }\n \n     let is_static = tcx.is_static(def_id);"}, {"sha": "fcbb25357972846a78738146b82c9ede62485f9a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -400,11 +400,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, mir::ReadOnlyBodyAndCache<'tcx, 'tcx>> {\n         // do not continue if typeck errors occurred (can only occur in local crate)\n         let did = instance.def_id();\n-        if did.is_local()\n-            && self.tcx.has_typeck_tables(did)\n-            && self.tcx.typeck_tables_of(did).tainted_by_errors\n-        {\n-            throw_inval!(TypeckError)\n+        if did.is_local() && self.tcx.has_typeck_tables(did) {\n+            if let Some(error_reported) = self.tcx.typeck_tables_of(did).tainted_by_errors {\n+                throw_inval!(TypeckError(error_reported))\n+            }\n         }\n         trace!(\"load mir(instance={:?}, promoted={:?})\", instance, promoted);\n         if let Some(promoted) = promoted {"}, {"sha": "480415676f6d89b3e9fe0437b71d9d0a430fd0f7", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -5,6 +5,7 @@\n \n use super::validity::RefTracking;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_middle::mir::interpret::{ErrorHandled, InterpResult};\n use rustc_middle::ty::{self, Ty};\n@@ -337,7 +338,9 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n                         diag.emit();\n                     },\n                 ) {\n-                    Ok(()) | Err(ErrorHandled::TooGeneric) | Err(ErrorHandled::Reported) => {}\n+                    ErrorHandled::TooGeneric\n+                    | ErrorHandled::Reported(ErrorReported)\n+                    | ErrorHandled::Linted => {}\n                 }\n             }\n         }"}, {"sha": "efc43afd0f0fa24047b470fe9151520f7574ca67", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -18,8 +18,8 @@ use rustc_middle::ty::{self, query::TyCtxtAt, Instance, ParamEnv};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n-    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, ErrorHandled, GlobalAlloc,\n-    GlobalId, InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n+    AllocId, AllocMap, Allocation, AllocationExtra, CheckInAllocMsg, GlobalAlloc, GlobalId,\n+    InterpResult, Machine, MayLeak, Pointer, PointerArithmetic, Scalar,\n };\n use crate::util::pretty;\n \n@@ -462,10 +462,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                         // no need to report anything, the const_eval call takes care of that\n                         // for statics\n                         assert!(tcx.is_static(def_id));\n-                        match err {\n-                            ErrorHandled::Reported => err_inval!(ReferencedConstant),\n-                            ErrorHandled::TooGeneric => err_inval!(TooGeneric),\n-                        }\n+                        err\n                     })?;\n                 // Make sure we use the ID of the resolved memory, not the lazy one!\n                 let id = raw_const.alloc_id;"}, {"sha": "2317a1fea079299f64e93f143e74d5960ee9af2b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -4,6 +4,7 @@\n use std::convert::TryFrom;\n use std::fmt::Write;\n \n+use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_macros::HashStable;\n use rustc_middle::ty::layout::{IntegerExt, PrimitiveExt, TyAndLayout};\n@@ -518,7 +519,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // Early-return cases.\n         let val_val = match val.val {\n             ty::ConstKind::Param(_) => throw_inval!(TooGeneric),\n-            ty::ConstKind::Error => throw_inval!(TypeckError),\n+            ty::ConstKind::Error => throw_inval!(TypeckError(ErrorReported)),\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 let instance = self.resolve(def_id, substs)?;\n                 // We use `const_eval` here and `const_eval_raw` elsewhere in mir interpretation."}, {"sha": "ff62f02a1919c80b537cefbf556e2b3cbfba54ee", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -178,6 +178,7 @@ use crate::monomorphize;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{par_iter, MTLock, MTRef, ParallelIterator};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, DefIdMap, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -602,7 +603,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             ty::ConstKind::Unevaluated(def_id, substs, promoted) => {\n                 match self.tcx.const_eval_resolve(param_env, def_id, substs, promoted, None) {\n                     Ok(val) => collect_const_value(self.tcx, val, self.output),\n-                    Err(ErrorHandled::Reported) => {}\n+                    Err(ErrorHandled::Reported(ErrorReported) | ErrorHandled::Linted) => {}\n                     Err(ErrorHandled::TooGeneric) => span_bug!(\n                         self.tcx.def_span(def_id),\n                         \"collection encountered polymorphic constant\","}, {"sha": "6911c09c518cd02ec0cbac547591b59ad5a297e3", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -3,6 +3,7 @@ use crate::build::scope::DropKind;\n use crate::hair::cx::Cx;\n use crate::hair::{BindingMode, LintLevel, PatKind};\n use rustc_attr::{self as attr, UnwindAttr};\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::lang_items;\n@@ -59,7 +60,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n \n     tcx.infer_ctxt().enter(|infcx| {\n         let cx = Cx::new(&infcx, id);\n-        let body = if cx.tables().tainted_by_errors {\n+        let body = if let Some(ErrorReported) = cx.tables().tainted_by_errors {\n             build::construct_error(cx, body_id)\n         } else if cx.body_owner_kind.is_fn_or_closure() {\n             // fetch the fully liberated fn signature (that is, all bound"}, {"sha": "8ef40ceae785647302e984d4f501eb0257eb4338", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -12,7 +12,7 @@ use crate::infer::error_reporting::{TyCategory, TypeAnnotationNeeded as ErrorCod\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::{self, InferCtxt, TyCtxtInferExt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::{Node, QPath, TyKind, WhereBoundPredicate, WherePredicate};\n@@ -653,8 +653,17 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n \n             // Already reported in the query.\n-            ConstEvalFailure(ErrorHandled::Reported) => {\n-                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n+            ConstEvalFailure(ErrorHandled::Reported(ErrorReported)) => {\n+                // FIXME(eddyb) remove this once `ErrorReported` becomes a proof token.\n+                self.tcx.sess.delay_span_bug(span, \"`ErrorReported` without an error\");\n+                return;\n+            }\n+\n+            // Already reported in the query, but only as a lint.\n+            // This shouldn't actually happen for constants used in types, modulo\n+            // bugs. The `delay_span_bug` here ensures it won't be ignored.\n+            ConstEvalFailure(ErrorHandled::Linted) => {\n+                self.tcx.sess.delay_span_bug(span, \"constant in type had error reported as lint\");\n                 return;\n             }\n "}, {"sha": "f541b257e8f59e4ff01fb628e5219bf8921c59ac", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -5,6 +5,7 @@\n use crate::check::FnCtxt;\n \n use rustc_data_structures::sync::Lrc;\n+use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefIdSet;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -75,7 +76,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         wbcx.tables.upvar_list =\n             mem::replace(&mut self.tables.borrow_mut().upvar_list, Default::default());\n \n-        wbcx.tables.tainted_by_errors |= self.is_tainted_by_errors();\n+        if self.is_tainted_by_errors() {\n+            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n+            wbcx.tables.tainted_by_errors = Some(ErrorReported);\n+        }\n \n         debug!(\"writeback: tables for {:?} are {:#?}\", item_def_id, wbcx.tables);\n \n@@ -591,7 +595,10 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         // We may have introduced e.g. `ty::Error`, if inference failed, make sure\n         // to mark the `TypeckTables` as tainted in that case, so that downstream\n         // users of the tables don't produce extra errors, or worse, ICEs.\n-        self.tables.tainted_by_errors |= resolver.replaced_with_error;\n+        if resolver.replaced_with_error {\n+            // FIXME(eddyb) keep track of `ErrorReported` from where the error was emitted.\n+            self.tables.tainted_by_errors = Some(ErrorReported);\n+        }\n \n         x\n     }"}, {"sha": "e17b736058f0267d9bf1f276181b323944fd05b7", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c4081b18fbf50f2d260ea893b659aec0b1d84a/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=d7c4081b18fbf50f2d260ea893b659aec0b1d84a", "patch": "@@ -1,5 +1,5 @@\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_errors::{struct_span_err, Applicability, StashKey};\n+use rustc_errors::{struct_span_err, Applicability, ErrorReported, StashKey};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -125,7 +125,9 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                                     owner, def_id,\n                                 ),\n                             );\n-                            if tcx.typeck_tables_of(owner).tainted_by_errors {\n+                            if let Some(ErrorReported) =\n+                                tcx.typeck_tables_of(owner).tainted_by_errors\n+                            {\n                                 // Some error in the\n                                 // owner fn prevented us from populating\n                                 // the `concrete_opaque_types` table."}]}