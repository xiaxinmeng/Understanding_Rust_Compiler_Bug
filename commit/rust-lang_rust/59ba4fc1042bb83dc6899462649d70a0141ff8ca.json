{"sha": "59ba4fc1042bb83dc6899462649d70a0141ff8ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YmE0ZmMxMDQyYmI4M2RjNjg5OTQ2MjY0OWQ3MGEwMTQxZmY4Y2E=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-11T16:02:51Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:51Z"}, "message": "syntax: fix the indentation of a function", "tree": {"sha": "33defb852e3a4440e9865cc8c4702c146384d1f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33defb852e3a4440e9865cc8c4702c146384d1f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59ba4fc1042bb83dc6899462649d70a0141ff8ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59ba4fc1042bb83dc6899462649d70a0141ff8ca", "html_url": "https://github.com/rust-lang/rust/commit/59ba4fc1042bb83dc6899462649d70a0141ff8ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59ba4fc1042bb83dc6899462649d70a0141ff8ca/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d84268fa18da997918b37e5b0325bed240939a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d84268fa18da997918b37e5b0325bed240939a", "html_url": "https://github.com/rust-lang/rust/commit/e6d84268fa18da997918b37e5b0325bed240939a"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "887d2d10238cba51b56bcbddc8f79e2f3fc5058b", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/59ba4fc1042bb83dc6899462649d70a0141ff8ca/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59ba4fc1042bb83dc6899462649d70a0141ff8ca/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=59ba4fc1042bb83dc6899462649d70a0141ff8ca", "patch": "@@ -213,52 +213,52 @@ fn noop_fold_struct_field(&&sf: @struct_field, fld: ast_fold)\n }\n \n pub fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n-    return match i {\n-          item_const(t, e) => item_const(fld.fold_ty(t), fld.fold_expr(e)),\n-          item_fn(decl, purity, typms, ref body) => {\n-              item_fn(fold_fn_decl(decl, fld),\n-                      purity,\n-                      fold_ty_params(typms, fld),\n-                      fld.fold_block((*body)))\n-          }\n-          item_mod(m) => item_mod(fld.fold_mod(m)),\n-          item_foreign_mod(nm) => item_foreign_mod(fld.fold_foreign_mod(nm)),\n-          item_ty(t, typms) => item_ty(fld.fold_ty(t),\n-                                       fold_ty_params(typms, fld)),\n-          item_enum(ref enum_definition, typms) => {\n+    match i {\n+        item_const(t, e) => item_const(fld.fold_ty(t), fld.fold_expr(e)),\n+        item_fn(decl, purity, typms, ref body) => {\n+            item_fn(fold_fn_decl(decl, fld),\n+                    purity,\n+                    fold_ty_params(typms, fld),\n+                    fld.fold_block((*body)))\n+        }\n+        item_mod(m) => item_mod(fld.fold_mod(m)),\n+        item_foreign_mod(nm) => item_foreign_mod(fld.fold_foreign_mod(nm)),\n+        item_ty(t, typms) => item_ty(fld.fold_ty(t),\n+                                     fold_ty_params(typms, fld)),\n+        item_enum(ref enum_definition, typms) => {\n             item_enum(ast::enum_def(ast::enum_def_ {\n                 variants: enum_definition.variants.map(\n                     |x| fld.fold_variant(*x)),\n                 common: enum_definition.common.map(\n                     |x| fold_struct_def(*x, fld)),\n             }), fold_ty_params(typms, fld))\n-          }\n-          item_struct(struct_def, typms) => {\n+        }\n+        item_struct(struct_def, typms) => {\n             let struct_def = fold_struct_def(struct_def, fld);\n               item_struct(struct_def, /* FIXME (#2543) */ copy typms)\n-          }\n-          item_impl(tps, ifce, ty, ref methods) => {\n-              item_impl(fold_ty_params(tps, fld),\n-                        ifce.map(|p| fold_trait_ref(*p, fld)),\n-                        fld.fold_ty(ty),\n-                        vec::map(*methods, |x| fld.fold_method(*x)))\n-          }\n-          item_trait(tps, traits, ref methods) => {\n-              let methods = do (*methods).map |method| {\n-                  match *method {\n-                      required(*) => copy *method,\n-                      provided(method) => provided(fld.fold_method(method))\n-                  }\n-              };\n+        }\n+        item_impl(tps, ifce, ty, ref methods) => {\n+            item_impl(fold_ty_params(tps, fld),\n+                      ifce.map(|p| fold_trait_ref(*p, fld)),\n+                      fld.fold_ty(ty),\n+                      methods.map(|x| fld.fold_method(*x)))\n+        }\n+        item_trait(tps, traits, ref methods) => {\n+            let methods = do methods.map |method| {\n+                match *method {\n+                    required(*) => copy *method,\n+                    provided(method) => provided(fld.fold_method(method))\n+                }\n+            };\n             item_trait(fold_ty_params(tps, fld),\n-                       vec::map(traits, |p| fold_trait_ref(*p, fld)),\n+                       traits.map(|p| fold_trait_ref(*p, fld)),\n                        methods)\n-          }\n-      item_mac(ref m) => {\n-        // FIXME #2888: we might actually want to do something here.\n-        item_mac((*m))\n-      }\n-        };\n+        }\n+        item_mac(ref m) => {\n+            // FIXME #2888: we might actually want to do something here.\n+            item_mac((*m))\n+        }\n+    }\n }\n \n fn fold_struct_def(struct_def: @ast::struct_def, fld: ast_fold)"}]}