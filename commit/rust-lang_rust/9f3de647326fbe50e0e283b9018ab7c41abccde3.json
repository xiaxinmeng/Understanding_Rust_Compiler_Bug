{"sha": "9f3de647326fbe50e0e283b9018ab7c41abccde3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmM2RlNjQ3MzI2ZmJlNTBlMGUyODNiOTAxOGFiN2M0MWFiY2NkZTM=", "commit": {"author": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2016-04-02T16:40:59Z"}, "committer": {"name": "Michael Neumann", "email": "mneumann@ntecs.de", "date": "2016-04-02T16:40:59Z"}, "message": "Prefix jemalloc on DragonFly to prevent segfaults.\n\nSimilar to commits ed015456a114ae907a36af80c06f81ea93182a24 (iOS)\nand e3b414d8612314e74e2b0ebde1ed5c6997d28e8d (Android)", "tree": {"sha": "92bab32fd72fd4e25c3b24d7e32af8e380055284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92bab32fd72fd4e25c3b24d7e32af8e380055284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f3de647326fbe50e0e283b9018ab7c41abccde3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3de647326fbe50e0e283b9018ab7c41abccde3", "html_url": "https://github.com/rust-lang/rust/commit/9f3de647326fbe50e0e283b9018ab7c41abccde3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f3de647326fbe50e0e283b9018ab7c41abccde3/comments", "author": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mneumann", "id": 34112, "node_id": "MDQ6VXNlcjM0MTEy", "avatar_url": "https://avatars.githubusercontent.com/u/34112?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mneumann", "html_url": "https://github.com/mneumann", "followers_url": "https://api.github.com/users/mneumann/followers", "following_url": "https://api.github.com/users/mneumann/following{/other_user}", "gists_url": "https://api.github.com/users/mneumann/gists{/gist_id}", "starred_url": "https://api.github.com/users/mneumann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mneumann/subscriptions", "organizations_url": "https://api.github.com/users/mneumann/orgs", "repos_url": "https://api.github.com/users/mneumann/repos", "events_url": "https://api.github.com/users/mneumann/events{/privacy}", "received_events_url": "https://api.github.com/users/mneumann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "235d77457d80b549dad3ac36d94f235208a1eafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/235d77457d80b549dad3ac36d94f235208a1eafb", "html_url": "https://github.com/rust-lang/rust/commit/235d77457d80b549dad3ac36d94f235208a1eafb"}], "stats": {"total": 23, "additions": 16, "deletions": 7}, "files": [{"sha": "4cb43303fb728df472341ca58bdd40d7b6a13409", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3de647326fbe50e0e283b9018ab7c41abccde3/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9f3de647326fbe50e0e283b9018ab7c41abccde3/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=9f3de647326fbe50e0e283b9018ab7c41abccde3", "patch": "@@ -157,6 +157,8 @@ else ifeq ($(findstring android, $(OSTYPE_$(1))), android)\n   # If the test suite passes, however, without symbol prefixes then we should be\n   # good to go!\n   JEMALLOC_ARGS_$(1) := --disable-tls --with-jemalloc-prefix=je_\n+else ifeq ($(findstring dragonfly, $(OSTYPE_$(1))), dragonfly)\n+  JEMALLOC_ARGS_$(1) := --with-jemalloc-prefix=je_\n endif\n \n ifdef CFG_ENABLE_DEBUG_JEMALLOC"}, {"sha": "5d521913b48f3b1d30ce2689d90a784ee949ef87", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f3de647326fbe50e0e283b9018ab7c41abccde3/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3de647326fbe50e0e283b9018ab7c41abccde3/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=9f3de647326fbe50e0e283b9018ab7c41abccde3", "patch": "@@ -86,6 +86,8 @@ fn main() {\n         // should be good to go!\n         cmd.arg(\"--with-jemalloc-prefix=je_\");\n         cmd.arg(\"--disable-tls\");\n+    } else if target.contains(\"dragonfly\") {\n+        cmd.arg(\"--with-jemalloc-prefix=je_\");\n     }\n \n     if cfg!(feature = \"debug-jemalloc\") {"}, {"sha": "3a30bebec547889c4f1772b1b33d43849cb9b7d7", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f3de647326fbe50e0e283b9018ab7c41abccde3/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f3de647326fbe50e0e283b9018ab7c41abccde3/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=9f3de647326fbe50e0e283b9018ab7c41abccde3", "patch": "@@ -42,22 +42,27 @@ use libc::{c_int, c_void, size_t};\n extern {}\n \n // Note that the symbols here are prefixed by default on OSX (we don't\n-// explicitly request it), and on Android we explicitly request it as\n-// unprefixing cause segfaults (mismatches in allocators).\n+// explicitly request it), and on Android and DragonFly we explicitly request\n+// it as unprefixing cause segfaults (mismatches in allocators).\n extern {\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                   target_os = \"dragonfly\"),\n                link_name = \"je_mallocx\")]\n     fn mallocx(size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                   target_os = \"dragonfly\"),\n                link_name = \"je_rallocx\")]\n     fn rallocx(ptr: *mut c_void, size: size_t, flags: c_int) -> *mut c_void;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                   target_os = \"dragonfly\"),\n                link_name = \"je_xallocx\")]\n     fn xallocx(ptr: *mut c_void, size: size_t, extra: size_t, flags: c_int) -> size_t;\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                   target_os = \"dragonfly\"),\n                link_name = \"je_sdallocx\")]\n     fn sdallocx(ptr: *mut c_void, size: size_t, flags: c_int);\n-    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\"),\n+    #[cfg_attr(any(target_os = \"macos\", target_os = \"android\", target_os = \"ios\",\n+                   target_os = \"dragonfly\"),\n                link_name = \"je_nallocx\")]\n     fn nallocx(size: size_t, flags: c_int) -> size_t;\n }"}]}