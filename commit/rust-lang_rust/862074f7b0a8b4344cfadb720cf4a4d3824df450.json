{"sha": "862074f7b0a8b4344cfadb720cf4a4d3824df450", "node_id": "C_kwDOAAsO6NoAKDg2MjA3NGY3YjBhOGI0MzQ0Y2ZhZGI3MjBjZjRhNGQzODI0ZGY0NTA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-28T16:44:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-28T16:44:49Z"}, "message": "Rollup merge of #99817 - notriddle:notriddle/clean-trait-removal, r=GuillaumeGomez\n\nrustdoc: remove Clean trait impls for more items\n\nFollow up to https://github.com/rust-lang/rust/pull/99638 and https://github.com/rust-lang/rust/pull/99672", "tree": {"sha": "e42c5275fe9b4a31a4a9b9f43950461431b3f686", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e42c5275fe9b4a31a4a9b9f43950461431b3f686"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/862074f7b0a8b4344cfadb720cf4a4d3824df450", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi4r0BCRBK7hj4Ov3rIwAAID4IAB80Z6VU+huBPftTE45PacJC\nIkY38vUF5gD83hTi+V1IFkz214JytyHk+l+v4Lt26a0SNVst7biqAuD9qKE1S1jo\n7pCsrdOqAM9IafzpuX9t8fRDoI9lM6vlYFPGKSjtW9tId+1eVt3khyX5SCR9DXbg\n/xBxF2YR5vxu3TSfbJ3XaQZD4gkiP8KamtL8tpuIybk5+CEdv2Fpnxzfqys9Vduw\nn/REJlKb3GUdcJHESy7NjIHPKzQNyiAm2GEH062iUgIHo5crhuezMPC4THiPaTyK\nJHpTS3+hrUyHK2QcBqsvyAYJem83XSr7gvW26vXZD1NI4+e4L3RJVM+FSNIG/TI=\n=JN3j\n-----END PGP SIGNATURE-----\n", "payload": "tree e42c5275fe9b4a31a4a9b9f43950461431b3f686\nparent a045788430877d39e398a07fd81dc122a8552acd\nparent 2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1659026689 +0530\ncommitter GitHub <noreply@github.com> 1659026689 +0530\n\nRollup merge of #99817 - notriddle:notriddle/clean-trait-removal, r=GuillaumeGomez\n\nrustdoc: remove Clean trait impls for more items\n\nFollow up to https://github.com/rust-lang/rust/pull/99638 and https://github.com/rust-lang/rust/pull/99672\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/862074f7b0a8b4344cfadb720cf4a4d3824df450", "html_url": "https://github.com/rust-lang/rust/commit/862074f7b0a8b4344cfadb720cf4a4d3824df450", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/862074f7b0a8b4344cfadb720cf4a4d3824df450/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a045788430877d39e398a07fd81dc122a8552acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a045788430877d39e398a07fd81dc122a8552acd", "html_url": "https://github.com/rust-lang/rust/commit/a045788430877d39e398a07fd81dc122a8552acd"}, {"sha": "2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac", "html_url": "https://github.com/rust-lang/rust/commit/2f03cbdc8e51e6af9b4cc2ef99818e826e76e8ac"}], "stats": {"total": 115, "additions": 55, "deletions": 60}, "files": [{"sha": "2f2fbc9d4ba8da1903f1aab6f7fc648b63b95531", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 55, "deletions": 60, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/862074f7b0a8b4344cfadb720cf4a4d3824df450/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/862074f7b0a8b4344cfadb720cf4a4d3824df450/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=862074f7b0a8b4344cfadb720cf4a4d3824df450", "patch": "@@ -398,23 +398,19 @@ fn clean_type_outlives_predicate<'tcx>(\n     })\n }\n \n-impl<'tcx> Clean<'tcx, Term> for ty::Term<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Term {\n-        match self {\n-            ty::Term::Ty(ty) => Term::Type(clean_middle_ty(*ty, cx, None)),\n-            ty::Term::Const(c) => Term::Constant(clean_middle_const(*c, cx)),\n-        }\n+fn clean_middle_term<'tcx>(term: ty::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Term {\n+    match term {\n+        ty::Term::Ty(ty) => Term::Type(clean_middle_ty(ty, cx, None)),\n+        ty::Term::Const(c) => Term::Constant(clean_middle_const(c, cx)),\n     }\n }\n \n-impl<'tcx> Clean<'tcx, Term> for hir::Term<'tcx> {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> Term {\n-        match self {\n-            hir::Term::Ty(ty) => Term::Type(clean_ty(ty, cx)),\n-            hir::Term::Const(c) => {\n-                let def_id = cx.tcx.hir().local_def_id(c.hir_id);\n-                Term::Constant(clean_middle_const(ty::Const::from_anon_const(cx.tcx, def_id), cx))\n-            }\n+fn clean_hir_term<'tcx>(term: &hir::Term<'tcx>, cx: &mut DocContext<'tcx>) -> Term {\n+    match term {\n+        hir::Term::Ty(ty) => Term::Type(clean_ty(ty, cx)),\n+        hir::Term::Const(c) => {\n+            let def_id = cx.tcx.hir().local_def_id(c.hir_id);\n+            Term::Constant(clean_middle_const(ty::Const::from_anon_const(cx.tcx, def_id), cx))\n         }\n     }\n }\n@@ -426,7 +422,7 @@ fn clean_projection_predicate<'tcx>(\n     let ty::ProjectionPredicate { projection_ty, term } = pred;\n     WherePredicate::EqPredicate {\n         lhs: clean_projection(projection_ty, cx, None),\n-        rhs: term.clean(cx),\n+        rhs: clean_middle_term(term, cx),\n     }\n }\n \n@@ -474,47 +470,44 @@ fn projection_to_path_segment<'tcx>(\n     }\n }\n \n-impl<'tcx> Clean<'tcx, GenericParamDef> for ty::GenericParamDef {\n-    fn clean(&self, cx: &mut DocContext<'tcx>) -> GenericParamDef {\n-        let (name, kind) = match self.kind {\n-            ty::GenericParamDefKind::Lifetime => {\n-                (self.name, GenericParamDefKind::Lifetime { outlives: vec![] })\n-            }\n-            ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n-                let default = if has_default {\n-                    Some(clean_middle_ty(cx.tcx.type_of(self.def_id), cx, Some(self.def_id)))\n-                } else {\n-                    None\n-                };\n-                (\n-                    self.name,\n-                    GenericParamDefKind::Type {\n-                        did: self.def_id,\n-                        bounds: vec![], // These are filled in from the where-clauses.\n-                        default: default.map(Box::new),\n-                        synthetic,\n-                    },\n-                )\n-            }\n-            ty::GenericParamDefKind::Const { has_default } => (\n-                self.name,\n-                GenericParamDefKind::Const {\n-                    did: self.def_id,\n-                    ty: Box::new(clean_middle_ty(\n-                        cx.tcx.type_of(self.def_id),\n-                        cx,\n-                        Some(self.def_id),\n-                    )),\n-                    default: match has_default {\n-                        true => Some(Box::new(cx.tcx.const_param_default(self.def_id).to_string())),\n-                        false => None,\n-                    },\n+fn clean_generic_param_def<'tcx>(\n+    def: &ty::GenericParamDef,\n+    cx: &mut DocContext<'tcx>,\n+) -> GenericParamDef {\n+    let (name, kind) = match def.kind {\n+        ty::GenericParamDefKind::Lifetime => {\n+            (def.name, GenericParamDefKind::Lifetime { outlives: vec![] })\n+        }\n+        ty::GenericParamDefKind::Type { has_default, synthetic, .. } => {\n+            let default = if has_default {\n+                Some(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id)))\n+            } else {\n+                None\n+            };\n+            (\n+                def.name,\n+                GenericParamDefKind::Type {\n+                    did: def.def_id,\n+                    bounds: vec![], // These are filled in from the where-clauses.\n+                    default: default.map(Box::new),\n+                    synthetic,\n                 },\n-            ),\n-        };\n+            )\n+        }\n+        ty::GenericParamDefKind::Const { has_default } => (\n+            def.name,\n+            GenericParamDefKind::Const {\n+                did: def.def_id,\n+                ty: Box::new(clean_middle_ty(cx.tcx.type_of(def.def_id), cx, Some(def.def_id))),\n+                default: match has_default {\n+                    true => Some(Box::new(cx.tcx.const_param_default(def.def_id).to_string())),\n+                    false => None,\n+                },\n+            },\n+        ),\n+    };\n \n-        GenericParamDef { name, kind }\n-    }\n+    GenericParamDef { name, kind }\n }\n \n fn clean_generic_param<'tcx>(\n@@ -672,7 +665,7 @@ fn clean_ty_generics<'tcx>(\n         .iter()\n         .filter_map(|param| match param.kind {\n             ty::GenericParamDefKind::Lifetime if param.name == kw::UnderscoreLifetime => None,\n-            ty::GenericParamDefKind::Lifetime => Some(param.clean(cx)),\n+            ty::GenericParamDefKind::Lifetime => Some(clean_generic_param_def(param, cx)),\n             ty::GenericParamDefKind::Type { synthetic, .. } => {\n                 if param.name == kw::SelfUpper {\n                     assert_eq!(param.index, 0);\n@@ -682,9 +675,9 @@ fn clean_ty_generics<'tcx>(\n                     impl_trait.insert(param.index.into(), vec![]);\n                     return None;\n                 }\n-                Some(param.clean(cx))\n+                Some(clean_generic_param_def(param, cx))\n             }\n-            ty::GenericParamDefKind::Const { .. } => Some(param.clean(cx)),\n+            ty::GenericParamDefKind::Const { .. } => Some(clean_generic_param_def(param, cx)),\n         })\n         .collect::<Vec<GenericParamDef>>();\n \n@@ -1682,7 +1675,9 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                             .projection_ty,\n                         cx,\n                     ),\n-                    kind: TypeBindingKind::Equality { term: pb.skip_binder().term.clean(cx) },\n+                    kind: TypeBindingKind::Equality {\n+                        term: clean_middle_term(pb.skip_binder().term, cx),\n+                    },\n                 });\n             }\n \n@@ -1746,7 +1741,7 @@ pub(crate) fn clean_middle_ty<'tcx>(\n                                     Some(TypeBinding {\n                                         assoc: projection_to_path_segment(proj.projection_ty, cx),\n                                         kind: TypeBindingKind::Equality {\n-                                            term: proj.term.clean(cx),\n+                                            term: clean_middle_term(proj.term, cx),\n                                         },\n                                     })\n                                 } else {\n@@ -2283,7 +2278,7 @@ impl<'tcx> Clean<'tcx, TypeBindingKind> for hir::TypeBindingKind<'tcx> {\n     fn clean(&self, cx: &mut DocContext<'tcx>) -> TypeBindingKind {\n         match *self {\n             hir::TypeBindingKind::Equality { ref term } => {\n-                TypeBindingKind::Equality { term: term.clean(cx) }\n+                TypeBindingKind::Equality { term: clean_hir_term(term, cx) }\n             }\n             hir::TypeBindingKind::Constraint { bounds } => TypeBindingKind::Constraint {\n                 bounds: bounds.iter().filter_map(|b| b.clean(cx)).collect(),"}]}