{"sha": "f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZmRiZTJiN2JjYTViNjI4ZTU5ZjE0ZTIxOTZlNWQzM2YyMTdhYjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-15T13:10:14Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-15T13:10:14Z"}, "message": "get rid of a bunch of unnecessary NOTE in const tests", "tree": {"sha": "e0fc5fe6b743ab984f5db618de2ab116699baf99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0fc5fe6b743ab984f5db618de2ab116699baf99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "html_url": "https://github.com/rust-lang/rust/commit/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1507b80c2d438cc7e72bd164cccb456408c0ac7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1507b80c2d438cc7e72bd164cccb456408c0ac7", "html_url": "https://github.com/rust-lang/rust/commit/a1507b80c2d438cc7e72bd164cccb456408c0ac7"}], "stats": {"total": 127, "additions": 46, "deletions": 81}, "files": [{"sha": "45c429c7eb0d50831381a5e4312707e2ae2c2a9c", "filename": "src/test/ui/consts/const-eval/dangling.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.rs?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -3,13 +3,11 @@\n use std::mem;\n \n // Make sure we error with the right kind of error on a too large slice.\n-const TEST: () = { unsafe { //~ NOTE\n+const TEST: () = { unsafe {\n     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n     let _val = &*slice; //~ ERROR: any use of this value will cause an error\n-    //~| NOTE: slice is bigger than largest supported object\n-    //~| on by default\n+    //~| slice is bigger than largest supported object\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n } };\n \n fn main() {}"}, {"sha": "224fbb62a46492d89d1d376e69b4e5e450fc26b3", "filename": "src/test/ui/consts/const-eval/dangling.stderr", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdangling.stderr?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -6,7 +6,6 @@ LL | |     let slice: *const [u8] = mem::transmute((1usize, usize::MAX));\n LL | |     let _val = &*slice;\n    | |                ^^^^^^^ invalid metadata in wide pointer: slice is bigger than largest supported object\n LL | |\n-...  |\n LL | |\n LL | | } };\n    | |____-"}, {"sha": "ca825a1f5ed658eeaf0d09afe07afbe8c90b1d43", "filename": "src/test/ui/consts/const-points-to-static.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-points-to-static.rs?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -5,9 +5,7 @@\n \n const TEST: &u8 = &MY_STATIC;\n //~^ ERROR it is undefined behavior to use this value\n-//~| NOTE  encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n \n static MY_STATIC: u8 = 4;\n "}, {"sha": "4157b313f9f55f282599b335e3f1c3e0bf02864e", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.64bit.stderr", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.64bit.stderr?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | | };\n@@ -16,12 +14,10 @@ LL | | };\n            }\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static2.rs:20:1\n+  --> $DIR/const_refers_to_static2.rs:18:1\n    |\n LL | / const READ_IMMUT: &usize = {\n LL | |\n-LL | |\n-LL | |\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n LL | | };\n@@ -35,17 +31,17 @@ LL | | };\n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:16:18\n+  --> $DIR/const_refers_to_static2.rs:14:18\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |                  ^^^\n help: skipping check for `const_raw_ptr_deref` feature\n-  --> $DIR/const_refers_to_static2.rs:16:14\n+  --> $DIR/const_refers_to_static2.rs:14:14\n    |\n LL |     unsafe { &*(&FOO as *const _ as *const usize) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static2.rs:25:6\n+  --> $DIR/const_refers_to_static2.rs:21:6\n    |\n LL |     &FOO\n    |      ^^^"}, {"sha": "8b8e262fb9dcaeb047941cae9a66f7aeabd7ce17", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static2.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static2.rs?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -9,18 +9,14 @@ use std::sync::atomic::Ordering;\n // so they cause an immediate error when *defining* the const.\n \n const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n };\n \n // ok some day perhaps\n const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     static FOO: usize = 0;\n     &FOO\n };"}, {"sha": "b381a25a63df29545750a96cd463443ca107e939", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -3,8 +3,6 @@ error[E0080]: it is undefined behavior to use this value\n    |\n LL | / const SLICE_MUT: &[u8; 1] = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -15,18 +13,16 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error[E0080]: it is undefined behavior to use this value\n-  --> $DIR/const_refers_to_static_cross_crate.rs:19:1\n+  --> $DIR/const_refers_to_static_cross_crate.rs:17:1\n    |\n LL | / const U8_MUT: &u8 = {\n LL | |\n-LL | |\n-LL | |\n LL | |     unsafe { &static_cross_crate::ZERO[0] }\n LL | | };\n    | |__^ type validation failed: encountered a reference pointing to a static variable\n@@ -37,143 +33,141 @@ LL | | };\n            }\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:15\n    |\n LL | / const U8_MUT2: &u8 = {\n LL | |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    | |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | |\n-LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:27:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:23:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    | |                                                   ^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n-...  |\n LL | |\n LL | | };\n    | |__-\n    |\n note: the lint level is defined here\n-  --> $DIR/const_refers_to_static_cross_crate.rs:35:8\n+  --> $DIR/const_refers_to_static_cross_crate.rs:30:8\n    |\n LL | #[warn(const_err)]\n    |        ^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:47:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:40:9\n    |\n LL |         SLICE_MUT => true,\n    |         ^^^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:56:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:49:9\n    |\n LL |         U8_MUT => true,\n    |         ^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:67:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:60:9\n    |\n LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n error: could not evaluate constant pattern\n-  --> $DIR/const_refers_to_static_cross_crate.rs:75:9\n+  --> $DIR/const_refers_to_static_cross_crate.rs:68:9\n    |\n LL |         U8_MUT3 => true,\n    |         ^^^^^^^\n \n warning: skipping const checks\n    |\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:16:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:14:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:23:15\n+  --> $DIR/const_refers_to_static_cross_crate.rs:19:15\n    |\n LL |     unsafe { &static_cross_crate::ZERO[0] }\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:29:17\n+  --> $DIR/const_refers_to_static_cross_crate.rs:25:17\n    |\n LL |     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: skipping check for `const_panic` feature\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:77\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:77\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                                                                             ^^^^^^^^\n help: skipping check that does not even have a feature gate\n-  --> $DIR/const_refers_to_static_cross_crate.rs:37:20\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "4638d73fcbfc5ba4a3d3a3593e1f866f2e1996e5", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.rs?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -10,36 +10,29 @@ extern crate static_cross_crate;\n // Sneaky: reference to a mutable static.\n // Allowing this would be a disaster for pattern matching, we could violate exhaustiveness checking!\n const SLICE_MUT: &[u8; 1] = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     unsafe { &static_cross_crate::ZERO }\n };\n \n const U8_MUT: &u8 = { //~ ERROR undefined behavior to use this value\n-//~| NOTE encountered a reference pointing to a static variable\n-//~| NOTE undefined behavior\n-//~| NOTE the raw bytes of the constant\n+//~| encountered a reference pointing to a static variable\n     unsafe { &static_cross_crate::ZERO[0] }\n };\n \n // Also test indirection that reads from other static. This causes a const_err.\n-#[warn(const_err)] //~ NOTE\n-const U8_MUT2: &u8 = { //~ NOTE\n+#[warn(const_err)]\n+const U8_MUT2: &u8 = {\n     unsafe { &(*static_cross_crate::ZERO_REF)[0] }\n     //~^ WARN [const_err]\n-    //~| NOTE constant accesses static\n+    //~| constant accesses static\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n };\n-#[warn(const_err)] //~ NOTE\n-const U8_MUT3: &u8 = { //~ NOTE\n+#[warn(const_err)]\n+const U8_MUT3: &u8 = {\n     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n     //~^ WARN [const_err]\n-    //~| NOTE constant accesses static\n-    //~| NOTE in this expansion of panic!\n+    //~| constant accesses static\n     //~| WARN this was previously accepted by the compiler but is being phased out\n-    //~| NOTE\n };\n \n pub fn test(x: &[u8; 1]) -> bool {"}, {"sha": "0306a55af4e09bfa4139d67809d109e545e0229f", "filename": "src/test/ui/consts/ptr_comparisons.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.rs?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -59,26 +59,18 @@ check!(!eq, unsafe { (FOO as *const usize as *const u8).offset(3) }, 0);\n // at runtime it would be zero and at compile-time it would not be zero.\n \n const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n-//~^ NOTE\n \n const _: *const u8 =\n-//~^ NOTE\n     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE\n \n const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE cannot cast pointer to integer\n-//~| NOTE\n+//~| cannot cast pointer to integer\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE\n \n const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n //~^ ERROR any use of this value will cause an error\n-//~| NOTE cannot cast pointer to integer\n-//~| NOTE\n+//~| cannot cast pointer to integer\n //~| WARN this was previously accepted by the compiler but is being phased out\n-//~| NOTE"}, {"sha": "943de47879b5369aa4409037efefd4eaf84b4b6b", "filename": "src/test/ui/consts/ptr_comparisons.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fptr_comparisons.stderr?ref=f1fdbe2b7bca5b628e59f14e2196e5d33f217ab7", "patch": "@@ -18,10 +18,9 @@ LL | const _: *const usize = unsafe { (FOO as *const usize).offset(2) };\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:66:33\n+  --> $DIR/ptr_comparisons.rs:64:33\n    |\n LL | / const _: *const u8 =\n-LL | |\n LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 1000]))[999]) };\n    | |_________________________________^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^___-\n    |                                   |\n@@ -31,7 +30,7 @@ LL | |     unsafe { std::ptr::addr_of!((*(FOO as *const usize as *const [u8; 100\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:72:27\n+  --> $DIR/ptr_comparisons.rs:68:27\n    |\n LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---\n@@ -42,7 +41,7 @@ LL | const _: usize = unsafe { std::mem::transmute::<*const usize, usize>(FOO) +\n    = note: for more information, see issue #71800 <https://github.com/rust-lang/rust/issues/71800>\n \n error: any use of this value will cause an error\n-  --> $DIR/ptr_comparisons.rs:79:27\n+  --> $DIR/ptr_comparisons.rs:73:27\n    |\n LL | const _: usize = unsafe { *std::mem::transmute::<&&usize, &usize>(&FOO) + 4 };\n    | --------------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^---"}]}