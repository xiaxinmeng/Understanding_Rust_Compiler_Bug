{"sha": "9b501edf08e7088c4a9b8fe9b12523b9f421e588", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliNTAxZWRmMDhlNzA4OGM0YTliOGZlOWIxMjUyM2I5ZjQyMWU1ODg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-25T09:22:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-10-26T07:56:54Z"}, "message": "move &mut-in-const check from interning to validation", "tree": {"sha": "bdf482132f0ea9b803978f3d0633a1a4c4e69810", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf482132f0ea9b803978f3d0633a1a4c4e69810"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b501edf08e7088c4a9b8fe9b12523b9f421e588", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b501edf08e7088c4a9b8fe9b12523b9f421e588", "html_url": "https://github.com/rust-lang/rust/commit/9b501edf08e7088c4a9b8fe9b12523b9f421e588", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b501edf08e7088c4a9b8fe9b12523b9f421e588/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e014be35971f19001bb58c1e9a904e9f596a052", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e014be35971f19001bb58c1e9a904e9f596a052", "html_url": "https://github.com/rust-lang/rust/commit/0e014be35971f19001bb58c1e9a904e9f596a052"}], "stats": {"total": 22, "additions": 16, "deletions": 6}, "files": [{"sha": "2a889bfb59bb1dc7c98953bf0c7f7c0db46e3791", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b501edf08e7088c4a9b8fe9b12523b9f421e588/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b501edf08e7088c4a9b8fe9b12523b9f421e588/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=9b501edf08e7088c4a9b8fe9b12523b9f421e588", "patch": "@@ -263,13 +263,13 @@ impl<'rt, 'mir, 'tcx: 'mir, M: CompileTimeMachine<'mir, 'tcx>> ValueVisitor<'mir\n                         // This helps to prevent users from accidentally exploiting UB that they\n                         // caused (by somehow getting a mutable reference in a `const`).\n                         if ref_mutability == Mutability::Mut {\n-                            match referenced_ty.kind() {\n+                            /*match referenced_ty.kind() {\n                                 ty::Array(_, n) if n.eval_usize(*tcx, self.ecx.param_env) == 0 => {}\n                                 ty::Slice(_)\n                                     if mplace.meta.unwrap_meta().to_machine_usize(self.ecx)?\n                                         == 0 => {}\n                                 _ => mutable_memory_in_const(tcx, \"`&mut`\"),\n-                            }\n+                            }*/\n                         } else {\n                             // A shared reference. We cannot check `freeze` here due to references\n                             // like `&dyn Trait` that are actually immutable.  We do check for"}, {"sha": "1c3dc1cfd0f523d7da2ce9d0fb255ac49784f8bd", "filename": "compiler/rustc_mir/src/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9b501edf08e7088c4a9b8fe9b12523b9f421e588/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b501edf08e7088c4a9b8fe9b12523b9f421e588/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fvalidity.rs?ref=9b501edf08e7088c4a9b8fe9b12523b9f421e588", "patch": "@@ -540,7 +540,15 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 }\n                 Ok(true)\n             }\n-            ty::Ref(..) => {\n+            ty::Ref(_, ty, mutbl) => {\n+                if matches!(self.ctfe_mode, Some(CtfeValidationMode::Const { .. })) && *mutbl == hir::Mutability::Mut {\n+                    // A mutable reference inside a const? That does not seem right (except of it is\n+                    // a ZST).\n+                    let layout = self.ecx.layout_of(ty)?;\n+                    if !layout.is_zst() {\n+                        throw_validation_failure!(self.path, { \"mutable reference in a `const`\" });\n+                    }\n+                }\n                 self.check_safe_pointer(value, \"reference\")?;\n                 Ok(true)\n             }"}, {"sha": "195414dbad9a2395ddce4654f5296c067ae418cb", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b501edf08e7088c4a9b8fe9b12523b9f421e588/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b501edf08e7088c4a9b8fe9b12523b9f421e588/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.rs?ref=9b501edf08e7088c4a9b8fe9b12523b9f421e588", "patch": "@@ -28,7 +28,7 @@ const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n \n // Make sure we also catch mutable references.\n const BLUNT: &mut i32 = &mut 42;\n-//~^ ERROR: mutable memory (`&mut`) is not allowed in constant\n+//~^ ERROR: it is undefined behavior to use this value\n \n fn main() {\n     unsafe {"}, {"sha": "0c206dd51aaabe2ea2f38fc7134285347fdd4279", "filename": "src/test/ui/consts/miri_unleashed/mutable_references_err.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9b501edf08e7088c4a9b8fe9b12523b9f421e588/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b501edf08e7088c4a9b8fe9b12523b9f421e588/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fmutable_references_err.stderr?ref=9b501edf08e7088c4a9b8fe9b12523b9f421e588", "patch": "@@ -16,11 +16,13 @@ LL | const SNEAKY: &dyn Sync = &Synced { x: UnsafeCell::new(42) };\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n-error: mutable memory (`&mut`) is not allowed in constant\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/mutable_references_err.rs:30:1\n    |\n LL | const BLUNT: &mut i32 = &mut 42;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered mutable reference in a `const`\n+   |\n+   = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n warning: skipping const checks\n    |"}]}