{"sha": "00c0c31554bec14a05f38e15fa698bcb839e998c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwYzBjMzE1NTRiZWMxNGEwNWYzOGUxNWZhNjk4YmNiODM5ZTk5OGM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2019-11-15T09:36:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-15T09:36:18Z"}, "message": "Rollup merge of #65557 - haraldh:error_iter_rename, r=sfackler\n\nrename Error::iter_chain() and remove Error::iter_sources()\n\n~~Rename~~\n* ~~Error::iter_chain() -> Error::chained()~~\n* ~~Error::iter_sources() -> Error::ancestors()~~\n* ~~ErrorIter -> Chained and Ancestors~~\n\naccording to\nhttps://github.com/rust-lang/rust/issues/58520#issuecomment-527704110\n\nTracker:\nhttps://github.com/rust-lang/rust/issues/58520\n\nEdit:\n\nRename\n* Error::iter_chain() -> Error::chained()\n* ErrorIter -> Chain\n\nSo, it seems, that even Path::ancestors() includes itself. So, to avoid confusion and simplify it more, I reduced PR  #65557 to only have `chained` and `Chain`.\n\nRationale:\n\n   1. Such iterators are helpful. They should better be stabilized sooner than later.\n   1. self should be included. It is easy to .skip(1) it.  Not including self is harmful because it is harder to add self to the iterator than to remove it.\n   1. The chosen name should be telling and reflect the fact that self is included. `.chained()` was chosen in honor of error-chain and because the iterator iterates over the chain of errors that is somehow included in self.\n   1. The resulting iterator is named `Chain` because the `error::Chain` is what we want to have.", "tree": {"sha": "c8e8c4120ff3bc6cd35423b3e3883064edbef39b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8e8c4120ff3bc6cd35423b3e3883064edbef39b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00c0c31554bec14a05f38e15fa698bcb839e998c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdznGSCRBK7hj4Ov3rIwAAdHIIAFHDgOpuAKfgDMiXkXNkUxH5\npVvtVuaqJQHizguEV2EL5iTg5yu07JaqRUKMV0VYJlkKxVcoB6AgcFsbRp1MzOm5\nrb3NhUa8EyaC0gw+4qkCZ0n0+042MfX8kVd0G5SH4+b1PH/FkMAMe9CdTntU0Wha\nzE7T0o5P5BS5pJGhj4+4W0qsEXdsGUsj3kY7BLKuoAGYmkXRgCQUdDLbRMlVu5gX\nHPMdDMRFYQursGvRFtO6kqv0eNr9tmttcgB6xklc+eiNBHqVxNvMI7Wcnk6nkg07\nJW6LZCNnVlaMDtnnjBUFy1bfZ/AKOWp0QKIYBtL/fKum5CNkCtdTSiNfQyHVxBk=\n=rCZ1\n-----END PGP SIGNATURE-----\n", "payload": "tree c8e8c4120ff3bc6cd35423b3e3883064edbef39b\nparent 9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58\nparent 7b9d50d14d0982b33a9288343792327e4e1d33cd\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1573810578 +0900\ncommitter GitHub <noreply@github.com> 1573810578 +0900\n\nRollup merge of #65557 - haraldh:error_iter_rename, r=sfackler\n\nrename Error::iter_chain() and remove Error::iter_sources()\n\n~~Rename~~\n* ~~Error::iter_chain() -> Error::chained()~~\n* ~~Error::iter_sources() -> Error::ancestors()~~\n* ~~ErrorIter -> Chained and Ancestors~~\n\naccording to\nhttps://github.com/rust-lang/rust/issues/58520#issuecomment-527704110\n\nTracker:\nhttps://github.com/rust-lang/rust/issues/58520\n\nEdit:\n\nRename\n* Error::iter_chain() -> Error::chained()\n* ErrorIter -> Chain\n\nSo, it seems, that even Path::ancestors() includes itself. So, to avoid confusion and simplify it more, I reduced PR  #65557 to only have `chained` and `Chain`.\n\nRationale:\n\n   1. Such iterators are helpful. They should better be stabilized sooner than later.\n   1. self should be included. It is easy to .skip(1) it.  Not including self is harmful because it is harder to add self to the iterator than to remove it.\n   1. The chosen name should be telling and reflect the fact that self is included. `.chained()` was chosen in honor of error-chain and because the iterator iterates over the chain of errors that is somehow included in self.\n   1. The resulting iterator is named `Chain` because the `error::Chain` is what we want to have.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00c0c31554bec14a05f38e15fa698bcb839e998c", "html_url": "https://github.com/rust-lang/rust/commit/00c0c31554bec14a05f38e15fa698bcb839e998c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00c0c31554bec14a05f38e15fa698bcb839e998c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58", "html_url": "https://github.com/rust-lang/rust/commit/9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58"}, {"sha": "7b9d50d14d0982b33a9288343792327e4e1d33cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9d50d14d0982b33a9288343792327e4e1d33cd", "html_url": "https://github.com/rust-lang/rust/commit/7b9d50d14d0982b33a9288343792327e4e1d33cd"}], "stats": {"total": 92, "additions": 12, "deletions": 80}, "files": [{"sha": "df24b6635f41160c06690c7cde48fa0dcf15002e", "filename": "src/libstd/error.rs", "status": "modified", "additions": 12, "deletions": 80, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/00c0c31554bec14a05f38e15fa698bcb839e998c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00c0c31554bec14a05f38e15fa698bcb839e998c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=00c0c31554bec14a05f38e15fa698bcb839e998c", "patch": "@@ -725,6 +725,9 @@ impl dyn Error {\n     /// Returns an iterator starting with the current error and continuing with\n     /// recursively calling [`source`].\n     ///\n+    /// If you want to omit the current error and only use its sources,\n+    /// use `skip(1)`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -763,7 +766,7 @@ impl dyn Error {\n     /// // let err : Box<Error> = b.into(); // or\n     /// let err = &b as &(dyn Error);\n     ///\n-    /// let mut iter = err.iter_chain();\n+    /// let mut iter = err.chain();\n     ///\n     /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n     /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n@@ -774,98 +777,27 @@ impl dyn Error {\n     /// [`source`]: trait.Error.html#method.source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n-    pub fn iter_chain(&self) -> ErrorIter<'_> {\n-        ErrorIter {\n+    pub fn chain(&self) -> Chain<'_> {\n+        Chain {\n             current: Some(self),\n         }\n     }\n-\n-    /// Returns an iterator starting with the [`source`] of this error\n-    /// and continuing with recursively calling [`source`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(error_iter)]\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct A;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct B(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct C(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"A\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"B\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for C {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"C\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for A {}\n-    ///\n-    /// impl Error for B {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for C {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// let b = B(Some(Box::new(A)));\n-    /// let c = C(Some(Box::new(b)));\n-    ///\n-    /// // let err : Box<Error> = c.into(); // or\n-    /// let err = &c as &(dyn Error);\n-    ///\n-    /// let mut iter = err.iter_sources();\n-    ///\n-    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n-    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n-    /// assert!(iter.next().is_none());\n-    /// assert!(iter.next().is_none());\n-    /// ```\n-    ///\n-    /// [`source`]: trait.Error.html#method.source\n-    #[inline]\n-    #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-    pub fn iter_sources(&self) -> ErrorIter<'_> {\n-        ErrorIter {\n-            current: self.source(),\n-        }\n-    }\n }\n \n-/// An iterator over [`Error`]\n+/// An iterator over an [`Error`] and its sources.\n+///\n+/// If you want to omit the initial error and only process\n+/// its sources, use `skip(1)`.\n ///\n /// [`Error`]: trait.Error.html\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n #[derive(Copy, Clone, Debug)]\n-pub struct ErrorIter<'a> {\n+pub struct Chain<'a> {\n     current: Option<&'a (dyn Error + 'static)>,\n }\n \n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-impl<'a> Iterator for ErrorIter<'a> {\n+impl<'a> Iterator for Chain<'a> {\n     type Item = &'a (dyn Error + 'static);\n \n     fn next(&mut self) -> Option<Self::Item> {"}]}