{"sha": "b71fc18abe6e9572a3ca3ae18597fe05121095af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3MWZjMThhYmU2ZTk1NzJhM2NhM2FlMTg1OTdmZTA1MTIxMDk1YWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-01T22:36:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-01T22:36:47Z"}, "message": "Merge #3387\n\n3387: Type inference for slice patterns r=flodiebold a=JoshMcguigan\n\nFixes #3043 \r\n\r\nNotes to reviewer:\r\n\r\n1. This only works if `expected` is `Ty::Apply`. I'm not sure of the implications of this.\r\n1. This only works if the slice pattern only has a prefix. I think this means it doesn't work for subslice patterns, which are currently only available behind a feature flag.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>", "tree": {"sha": "8d6624c9efe2626f52bec77a0513ee6335e76498", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d6624c9efe2626f52bec77a0513ee6335e76498"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b71fc18abe6e9572a3ca3ae18597fe05121095af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeXDj/CRBK7hj4Ov3rIwAAdHIIAJdpSy80w1CXHxoV+nRgoMh7\nc4kSLOh5OTIXVNEwb3GydSgJGDxWOJe5hSZsVj8WQzNE1ChOag6Y/xAgHPVyUKdp\n6GDTjcYI8ObzwGr9v1HxcUIVBDo1AhZexLah6RQ+TqjR8s72b/STGSahHt06RcAV\nIyLc6qdRJ0DT8dZdKWWbRJF0HlsflWcTMBWOpU4yUXUF2k3vFaALRtAlwNn4KxwC\nuC9lbuF3NH9j/UL7o4LxPAGfCs5E31wNSE35htkOzoKUJA+gVOFIcgPX+XdaNk49\nsy5MFSCGGiwO4fI/fiFpvZK5D+tAlQZPejaWV+Ah/5ScVRi6llGKYx+/zq2BjXc=\n=WbmJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 8d6624c9efe2626f52bec77a0513ee6335e76498\nparent ea67e2346e64a1a14206e6d0f163c6c2e19d0afb\nparent f5efa17515a543c1405ecad2caf93ed25052500e\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583102207 +0000\ncommitter GitHub <noreply@github.com> 1583102207 +0000\n\nMerge #3387\n\n3387: Type inference for slice patterns r=flodiebold a=JoshMcguigan\n\nFixes #3043 \r\n\r\nNotes to reviewer:\r\n\r\n1. This only works if `expected` is `Ty::Apply`. I'm not sure of the implications of this.\r\n1. This only works if the slice pattern only has a prefix. I think this means it doesn't work for subslice patterns, which are currently only available behind a feature flag.\n\nCo-authored-by: Josh Mcguigan <joshmcg88@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b71fc18abe6e9572a3ca3ae18597fe05121095af", "html_url": "https://github.com/rust-lang/rust/commit/b71fc18abe6e9572a3ca3ae18597fe05121095af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b71fc18abe6e9572a3ca3ae18597fe05121095af/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea67e2346e64a1a14206e6d0f163c6c2e19d0afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea67e2346e64a1a14206e6d0f163c6c2e19d0afb", "html_url": "https://github.com/rust-lang/rust/commit/ea67e2346e64a1a14206e6d0f163c6c2e19d0afb"}, {"sha": "f5efa17515a543c1405ecad2caf93ed25052500e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5efa17515a543c1405ecad2caf93ed25052500e", "html_url": "https://github.com/rust-lang/rust/commit/f5efa17515a543c1405ecad2caf93ed25052500e"}], "stats": {"total": 110, "additions": 108, "deletions": 2}, "files": [{"sha": "623e525993969787cc999cfeb262e14f86bfce4e", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b71fc18abe6e9572a3ca3ae18597fe05121095af/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71fc18abe6e9572a3ca3ae18597fe05121095af/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=b71fc18abe6e9572a3ca3ae18597fe05121095af", "patch": "@@ -185,6 +185,23 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.write_pat_ty(pat, bound_ty);\n                 return inner_ty;\n             }\n+            Pat::Slice { prefix, slice: _slice, suffix } => {\n+                let (container_ty, elem_ty) = match &expected {\n+                    ty_app!(TypeCtor::Array, st) => {\n+                        (TypeCtor::Array, st.as_single().clone())\n+                    },\n+                    ty_app!(TypeCtor::Slice, st) => {\n+                        (TypeCtor::Slice, st.as_single().clone())\n+                    },\n+                    _ => (TypeCtor::Slice, Ty::Unknown),\n+                };\n+\n+                for pat_id in prefix.iter().chain(suffix) {\n+                    self.infer_pat(*pat_id, &elem_ty, default_bm);\n+                }\n+\n+                Ty::apply_one(container_ty, elem_ty)\n+            }\n             _ => Ty::Unknown,\n         };\n         // use a new type variable if we got Ty::Unknown here"}, {"sha": "76aa320246f2fd38a6d182d73d458339785c8fda", "filename": "crates/ra_hir_ty/src/tests/patterns.rs", "status": "modified", "additions": 91, "deletions": 2, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b71fc18abe6e9572a3ca3ae18597fe05121095af/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b71fc18abe6e9572a3ca3ae18597fe05121095af/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fpatterns.rs?ref=b71fc18abe6e9572a3ca3ae18597fe05121095af", "patch": "@@ -53,8 +53,9 @@ fn test(x: &i32) {\n     [140; 141) 'g': {unknown}\n     [144; 145) 'e': {unknown}\n     [158; 205) 'if let...     }': ()\n-    [165; 170) '[val]': {unknown}\n-    [173; 176) 'opt': {unknown}\n+    [165; 170) '[val]': [{unknown}]\n+    [166; 169) 'val': {unknown}\n+    [173; 176) 'opt': [{unknown}]\n     [177; 205) '{     ...     }': ()\n     [191; 192) 'h': {unknown}\n     [195; 198) 'val': {unknown}\n@@ -136,6 +137,94 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_pattern_match_slice() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn test() {\n+    let slice: &[f64] = &[0.0];\n+    match slice {\n+        &[] => {},\n+        &[a] => {\n+            a;\n+        },\n+        &[b, c] => {\n+            b;\n+            c;\n+        }\n+        _ => {}\n+    }\n+}\n+\"#),\n+    @r###\"\n+    [11; 210) '{     ...   } }': ()\n+    [21; 26) 'slice': &[f64]\n+    [37; 43) '&[0.0]': &[f64; _]\n+    [38; 43) '[0.0]': [f64; _]\n+    [39; 42) '0.0': f64\n+    [49; 208) 'match ...     }': ()\n+    [55; 60) 'slice': &[f64]\n+    [71; 74) '&[]': &[f64]\n+    [72; 74) '[]': [f64]\n+    [78; 80) '{}': ()\n+    [90; 94) '&[a]': &[f64]\n+    [91; 94) '[a]': [f64]\n+    [92; 93) 'a': f64\n+    [98; 124) '{     ...     }': ()\n+    [112; 113) 'a': f64\n+    [134; 141) '&[b, c]': &[f64]\n+    [135; 141) '[b, c]': [f64]\n+    [136; 137) 'b': f64\n+    [139; 140) 'c': f64\n+    [145; 186) '{     ...     }': ()\n+    [159; 160) 'b': f64\n+    [174; 175) 'c': f64\n+    [195; 196) '_': &[f64]\n+    [200; 202) '{}': ()\n+    \"###\n+    );\n+}\n+\n+#[test]\n+fn infer_pattern_match_arr() {\n+    assert_snapshot!(\n+        infer(r#\"\n+fn test() {\n+    let arr: [f64; 2] = [0.0, 1.0];\n+    match arr {\n+        [1.0, a] => {\n+            a;\n+        },\n+        [b, c] => {\n+            b;\n+            c;\n+        }\n+    }\n+}\n+\"#),\n+    @r###\"\n+    [11; 180) '{     ...   } }': ()\n+    [21; 24) 'arr': [f64; _]\n+    [37; 47) '[0.0, 1.0]': [f64; _]\n+    [38; 41) '0.0': f64\n+    [43; 46) '1.0': f64\n+    [53; 178) 'match ...     }': ()\n+    [59; 62) 'arr': [f64; _]\n+    [73; 81) '[1.0, a]': [f64; _]\n+    [74; 77) '1.0': f64\n+    [79; 80) 'a': f64\n+    [85; 111) '{     ...     }': ()\n+    [99; 100) 'a': f64\n+    [121; 127) '[b, c]': [f64; _]\n+    [122; 123) 'b': f64\n+    [125; 126) 'c': f64\n+    [131; 172) '{     ...     }': ()\n+    [145; 146) 'b': f64\n+    [160; 161) 'c': f64\n+    \"###\n+    );\n+}\n+\n #[test]\n fn infer_adt_pattern() {\n     assert_snapshot!("}]}