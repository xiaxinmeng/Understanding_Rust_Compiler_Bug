{"sha": "ce185739fc07dd743043b6e3265ad7442846e837", "node_id": "C_kwDOAAsO6NoAKGNlMTg1NzM5ZmMwN2RkNzQzMDQzYjZlMzI2NWFkNzQ0Mjg0NmU4Mzc", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-09T01:27:44Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-09T19:18:00Z"}, "message": "Move DebuggerCommands to its own file", "tree": {"sha": "e89052c2b0d711a0f6fd611d91dbe08abc6de094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e89052c2b0d711a0f6fd611d91dbe08abc6de094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce185739fc07dd743043b6e3265ad7442846e837", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce185739fc07dd743043b6e3265ad7442846e837", "html_url": "https://github.com/rust-lang/rust/commit/ce185739fc07dd743043b6e3265ad7442846e837", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce185739fc07dd743043b6e3265ad7442846e837/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8ad24020a160e1acd7ac9f7671947dcc01264c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8ad24020a160e1acd7ac9f7671947dcc01264c", "html_url": "https://github.com/rust-lang/rust/commit/bc8ad24020a160e1acd7ac9f7671947dcc01264c"}], "stats": {"total": 119, "additions": 71, "deletions": 48}, "files": [{"sha": "9cc373fbad1276aafc917f0df3209f2414cfe4e8", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 15, "deletions": 48, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/ce185739fc07dd743043b6e3265ad7442846e837/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce185739fc07dd743043b6e3265ad7442846e837/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=ce185739fc07dd743043b6e3265ad7442846e837", "patch": "@@ -38,6 +38,9 @@ use tracing::*;\n use crate::extract_gdb_version;\n use crate::is_android_gdb_target;\n \n+mod debugger;\n+use debugger::DebuggerCommands;\n+\n #[cfg(test)]\n mod tests;\n \n@@ -200,12 +203,6 @@ struct TestCx<'test> {\n     revision: Option<&'test str>,\n }\n \n-struct DebuggerCommands {\n-    commands: Vec<String>,\n-    check_lines: Vec<String>,\n-    breakpoint_lines: Vec<usize>,\n-}\n-\n enum ReadFrom {\n     Path,\n     Stdin(String),\n@@ -674,7 +671,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-commands\n         let mut script_str = String::with_capacity(2048);\n@@ -757,7 +757,10 @@ impl<'test> TestCx<'test> {\n         };\n \n         let DebuggerCommands { commands, check_lines, breakpoint_lines } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n         let mut cmds = commands.join(\"\\n\");\n \n         // compile test file (it should have 'compile-flags:-g' in the header)\n@@ -1018,7 +1021,10 @@ impl<'test> TestCx<'test> {\n \n         // Parse debugger commands etc from test files\n         let DebuggerCommands { commands, check_lines, breakpoint_lines, .. } =\n-            self.parse_debugger_commands(prefixes);\n+            match DebuggerCommands::parse_from(&self.testpaths.file, self.config, prefixes) {\n+                Ok(cmds) => cmds,\n+                Err(e) => self.fatal(&e),\n+            };\n \n         // Write debugger script:\n         // We don't want to hang when calling `quit` while the process is still running\n@@ -1131,45 +1137,6 @@ impl<'test> TestCx<'test> {\n         ProcRes { status, stdout: out, stderr: err, cmdline: format!(\"{:?}\", cmd) }\n     }\n \n-    fn parse_debugger_commands(&self, debugger_prefixes: &[&str]) -> DebuggerCommands {\n-        let directives = debugger_prefixes\n-            .iter()\n-            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n-            .collect::<Vec<_>>();\n-\n-        let mut breakpoint_lines = vec![];\n-        let mut commands = vec![];\n-        let mut check_lines = vec![];\n-        let mut counter = 1;\n-        let reader = BufReader::new(File::open(&self.testpaths.file).unwrap());\n-        for line in reader.lines() {\n-            match line {\n-                Ok(line) => {\n-                    let line =\n-                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n-\n-                    if line.contains(\"#break\") {\n-                        breakpoint_lines.push(counter);\n-                    }\n-\n-                    for &(ref command_directive, ref check_directive) in &directives {\n-                        self.config\n-                            .parse_name_value_directive(&line, command_directive)\n-                            .map(|cmd| commands.push(cmd));\n-\n-                        self.config\n-                            .parse_name_value_directive(&line, check_directive)\n-                            .map(|cmd| check_lines.push(cmd));\n-                    }\n-                }\n-                Err(e) => self.fatal(&format!(\"Error while parsing debugger commands: {}\", e)),\n-            }\n-            counter += 1;\n-        }\n-\n-        DebuggerCommands { commands, check_lines, breakpoint_lines }\n-    }\n-\n     fn cleanup_debug_info_options(&self, options: &Option<String>) -> Option<String> {\n         if options.is_none() {\n             return None;"}, {"sha": "ad8b805e53c4459303387566953c920a00e7ba9e", "filename": "src/tools/compiletest/src/runtest/debugger.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ce185739fc07dd743043b6e3265ad7442846e837/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce185739fc07dd743043b6e3265ad7442846e837/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest%2Fdebugger.rs?ref=ce185739fc07dd743043b6e3265ad7442846e837", "patch": "@@ -0,0 +1,56 @@\n+use crate::common::Config;\n+\n+use std::fs::File;\n+use std::io::{BufRead, BufReader};\n+use std::path::Path;\n+\n+pub(super) struct DebuggerCommands {\n+    pub commands: Vec<String>,\n+    pub check_lines: Vec<String>,\n+    pub breakpoint_lines: Vec<usize>,\n+}\n+\n+impl DebuggerCommands {\n+    pub(super) fn parse_from(\n+        file: &Path,\n+        config: &Config,\n+        debugger_prefixes: &[&str],\n+    ) -> Result<Self, String> {\n+        let directives = debugger_prefixes\n+            .iter()\n+            .map(|prefix| (format!(\"{}-command\", prefix), format!(\"{}-check\", prefix)))\n+            .collect::<Vec<_>>();\n+\n+        let mut breakpoint_lines = vec![];\n+        let mut commands = vec![];\n+        let mut check_lines = vec![];\n+        let mut counter = 1;\n+        let reader = BufReader::new(File::open(file).unwrap());\n+        for line in reader.lines() {\n+            match line {\n+                Ok(line) => {\n+                    let line =\n+                        if line.starts_with(\"//\") { line[2..].trim_start() } else { line.as_str() };\n+\n+                    if line.contains(\"#break\") {\n+                        breakpoint_lines.push(counter);\n+                    }\n+\n+                    for &(ref command_directive, ref check_directive) in &directives {\n+                        config\n+                            .parse_name_value_directive(&line, command_directive)\n+                            .map(|cmd| commands.push(cmd));\n+\n+                        config\n+                            .parse_name_value_directive(&line, check_directive)\n+                            .map(|cmd| check_lines.push(cmd));\n+                    }\n+                }\n+                Err(e) => return Err(format!(\"Error while parsing debugger commands: {}\", e)),\n+            }\n+            counter += 1;\n+        }\n+\n+        Ok(Self { commands, check_lines, breakpoint_lines })\n+    }\n+}"}]}