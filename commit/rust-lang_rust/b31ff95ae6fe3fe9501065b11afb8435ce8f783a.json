{"sha": "b31ff95ae6fe3fe9501065b11afb8435ce8f783a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMWZmOTVhZTZmZTNmZTk1MDEwNjViMTFhZmI4NDM1Y2U4Zjc4M2E=", "commit": {"author": {"name": "Jewoo Lee", "email": "shema7k@gmail.com", "date": "2018-02-18T11:14:21Z"}, "committer": {"name": "Jewoo Lee", "email": "shema7k@gmail.com", "date": "2018-02-19T01:34:43Z"}, "message": "Add non-panicking variants of pow to all integer types\n\nCurrently, calling pow may panic in case of overflow, and the function\ndoes not have non-panicking counterparts. Thus, it would be beneficial\nto add those in.", "tree": {"sha": "4013c851fd6f964b6120d794f1df4757fb9e7943", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4013c851fd6f964b6120d794f1df4757fb9e7943"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31ff95ae6fe3fe9501065b11afb8435ce8f783a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31ff95ae6fe3fe9501065b11afb8435ce8f783a", "html_url": "https://github.com/rust-lang/rust/commit/b31ff95ae6fe3fe9501065b11afb8435ce8f783a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31ff95ae6fe3fe9501065b11afb8435ce8f783a/comments", "author": {"login": "milesand", "id": 14255227, "node_id": "MDQ6VXNlcjE0MjU1MjI3", "avatar_url": "https://avatars.githubusercontent.com/u/14255227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesand", "html_url": "https://github.com/milesand", "followers_url": "https://api.github.com/users/milesand/followers", "following_url": "https://api.github.com/users/milesand/following{/other_user}", "gists_url": "https://api.github.com/users/milesand/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesand/subscriptions", "organizations_url": "https://api.github.com/users/milesand/orgs", "repos_url": "https://api.github.com/users/milesand/repos", "events_url": "https://api.github.com/users/milesand/events{/privacy}", "received_events_url": "https://api.github.com/users/milesand/received_events", "type": "User", "site_admin": false}, "committer": {"login": "milesand", "id": 14255227, "node_id": "MDQ6VXNlcjE0MjU1MjI3", "avatar_url": "https://avatars.githubusercontent.com/u/14255227?v=4", "gravatar_id": "", "url": "https://api.github.com/users/milesand", "html_url": "https://github.com/milesand", "followers_url": "https://api.github.com/users/milesand/followers", "following_url": "https://api.github.com/users/milesand/following{/other_user}", "gists_url": "https://api.github.com/users/milesand/gists{/gist_id}", "starred_url": "https://api.github.com/users/milesand/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/milesand/subscriptions", "organizations_url": "https://api.github.com/users/milesand/orgs", "repos_url": "https://api.github.com/users/milesand/repos", "events_url": "https://api.github.com/users/milesand/events{/privacy}", "received_events_url": "https://api.github.com/users/milesand/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a046e9338fb0455c33b13e8fe28da78212dedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a046e9338fb0455c33b13e8fe28da78212dedc", "html_url": "https://github.com/rust-lang/rust/commit/27a046e9338fb0455c33b13e8fe28da78212dedc"}], "stats": {"total": 308, "additions": 308, "deletions": 0}, "files": [{"sha": "2b656fad1719ea3d46848f304040e04fbbc86f5c", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 308, "deletions": 0, "changes": 308, "blob_url": "https://github.com/rust-lang/rust/blob/b31ff95ae6fe3fe9501065b11afb8435ce8f783a/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31ff95ae6fe3fe9501065b11afb8435ce8f783a/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=b31ff95ae6fe3fe9501065b11afb8435ce8f783a", "patch": "@@ -634,6 +634,46 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n+overflow occurred.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(8\", stringify!($SelfT), \".checked_pow(2), Some(64));\n+assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\",\n+$EndFeature, \"\n+```\"),\n+\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        acc = acc.checked_mul(base)?;\n+                    }\n+                    exp /= 2;\n+                    base = base.checked_mul(base)?;\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    acc = acc.checked_mul(base)?;\n+                }\n+\n+                Some(acc)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at the numeric\n bounds instead of overflowing.\n@@ -713,6 +753,34 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Saturating integer exponentiation. Computes `self.pow(exp)`,\n+saturating at the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"use std::\", stringify!($SelfT), \";\n+\n+assert_eq!((-4\", stringify!($SelfT), \").saturating_pow(3), -64);\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\n+assert_eq!(\", stringify!($SelfT), \"::MIN.saturating_pow(3), \", stringify!($SelfT), \"::MIN);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn saturating_pow(self, exp: u32) -> Self {\n+                match self.checked_pow(exp) {\n+                    Some(x) => x,\n+                    None if self < 0 && exp % 2 == 1 => Self::min_value(),\n+                    None => Self::max_value(),\n+                }\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Wrapping (modular) addition. Computes `self + rhs`, wrapping around at the\n boundary of the type.\n@@ -947,6 +1015,46 @@ $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\n+wrapping around at the boundary of the type.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(4), 81);\n+assert_eq!(3i8.wrapping_pow(5), -13);\n+assert_eq!(3i8.wrapping_pow(6), -39);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        acc = acc.wrapping_mul(base);\n+                    }\n+                    exp /= 2;\n+                    base = base.wrapping_mul(base);\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    acc = acc.wrapping_mul(base);\n+                }\n+\n+                acc\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Calculates `self` + `rhs`\n \n@@ -1202,6 +1310,56 @@ $EndFeature, \"\n         doc_comment! {\n             concat!(\"Raises self to the power of `exp`, using exponentiation by squaring.\n \n+Returns a tuple of the exponentiation along with a bool indicating\n+whether an overflow happened.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(4), (81, false));\n+assert_eq!(3i8.overflowing_pow(5), (-13, true));\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+                let mut overflown = false;\n+                // Scratch space for storing results of overflowing_mul.\n+                let mut r;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        r = acc.overflowing_mul(base);\n+                        acc = r.0;\n+                        overflown |= r.1;\n+                    }\n+                    exp /= 2;\n+                    r = base.overflowing_mul(base);\n+                    base = r.0;\n+                    overflown |= r.1;\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    r = acc.overflowing_mul(base);\n+                    acc = r.0;\n+                    overflown |= r.1;\n+                }\n+\n+                (acc, overflown)\n+            }\n+        }\n+\n+        doc_comment! {\n+            concat!(\"Raises self to the power of `exp`, using exponentiation by squaring.\n+\n # Examples\n \n Basic usage:\n@@ -1887,6 +2045,44 @@ assert_eq!(0x10\", stringify!($SelfT), \".checked_shr(129), None);\", $EndFeature,\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Checked exponentiation. Computes `self.pow(exp)`, returning `None` if\n+overflow occurred.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(2\", stringify!($SelfT), \".checked_pow(5), Some(32));\n+assert_eq!(\", stringify!($SelfT), \"::max_value().checked_pow(2), None);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn checked_pow(self, mut exp: u32) -> Option<Self> {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        acc = acc.checked_mul(base)?;\n+                    }\n+                    exp /= 2;\n+                    base = base.checked_mul(base)?;\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    acc = acc.checked_mul(base)?;\n+                }\n+\n+                Some(acc)\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Saturating integer addition. Computes `self + rhs`, saturating at\n the numeric bounds instead of overflowing.\n@@ -1953,6 +2149,32 @@ assert_eq!((\", stringify!($SelfT), \"::MAX).saturating_mul(10), \", stringify!($Se\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Saturating integer exponentiation. Computes `self.pow(exp)`,\n+saturating at the numeric bounds instead of overflowing.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"use std::\", stringify!($SelfT), \";\n+\n+assert_eq!(4\", stringify!($SelfT), \".saturating_pow(3), 64);\n+assert_eq!(\", stringify!($SelfT), \"::MAX.saturating_pow(2), \", stringify!($SelfT), \"::MAX);\",\n+$EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn saturating_pow(self, exp: u32) -> Self {\n+                match self.checked_pow(exp) {\n+                    Some(x) => x,\n+                    None => Self::max_value(),\n+                }\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Wrapping (modular) addition. Computes `self + rhs`,\n wrapping around at the boundary of the type.\n@@ -2147,6 +2369,44 @@ assert_eq!(128\", stringify!($SelfT), \".wrapping_shr(128), 128);\", $EndFeature, \"\n             }\n         }\n \n+        doc_comment! {\n+            concat!(\"Wrapping (modular) exponentiation. Computes `self.pow(exp)`,\n+wrapping around at the boundary of the type.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".wrapping_pow(5), 243);\n+assert_eq!(3u8.wrapping_pow(6), 217);\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn wrapping_pow(self, mut exp: u32) -> Self {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        acc = acc.wrapping_mul(base);\n+                    }\n+                    exp /= 2;\n+                    base = base.wrapping_mul(base);\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    acc = acc.wrapping_mul(base);\n+                }\n+\n+                acc\n+            }\n+        }\n+\n         doc_comment! {\n             concat!(\"Calculates `self` + `rhs`\n \n@@ -2353,7 +2613,55 @@ assert_eq!(0x10\", stringify!($SelfT), \".overflowing_shr(132), (0x1, true));\", $E\n             pub fn overflowing_shr(self, rhs: u32) -> (Self, bool) {\n                 (self.wrapping_shr(rhs), (rhs > ($BITS - 1)))\n             }\n+        }\n \n+        doc_comment! {\n+            concat!(\"Raises self to the power of `exp`, using exponentiation by squaring.\n+\n+Returns a tuple of the exponentiation along with a bool indicating\n+whether an overflow happened.\n+\n+# Examples\n+\n+Basic usage:\n+\n+```\n+#![feature(no_panic_pow)]\n+\", $Feature, \"assert_eq!(3\", stringify!($SelfT), \".overflowing_pow(5), (243, false));\n+assert_eq!(3u8.overflowing_pow(6), (217, true));\", $EndFeature, \"\n+```\"),\n+            #[unstable(feature = \"no_panic_pow\", issue = \"48320\")]\n+            #[inline]\n+            pub fn overflowing_pow(self, mut exp: u32) -> (Self, bool) {\n+                let mut base = self;\n+                let mut acc: Self = 1;\n+                let mut overflown = false;\n+                // Scratch space for storing results of overflowing_mul.\n+                let mut r;\n+\n+                while exp > 1 {\n+                    if (exp & 1) == 1 {\n+                        r = acc.overflowing_mul(base);\n+                        acc = r.0;\n+                        overflown |= r.1;\n+                    }\n+                    exp /= 2;\n+                    r = base.overflowing_mul(base);\n+                    base = r.0;\n+                    overflown |= r.1;\n+                }\n+\n+                // Deal with the final bit of the exponent separately, since\n+                // squaring the base afterwards is not necessary and may cause a\n+                // needless overflow.\n+                if exp == 1 {\n+                    r = acc.overflowing_mul(base);\n+                    acc = r.0;\n+                    overflown |= r.1;\n+                }\n+\n+                (acc, overflown)\n+            }\n         }\n \n         doc_comment! {"}]}