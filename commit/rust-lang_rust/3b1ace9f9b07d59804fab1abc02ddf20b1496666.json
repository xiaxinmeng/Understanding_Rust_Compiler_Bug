{"sha": "3b1ace9f9b07d59804fab1abc02ddf20b1496666", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMWFjZTlmOWIwN2Q1OTgwNGZhYjFhYmMwMmRkZjIwYjE0OTY2NjY=", "commit": {"author": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-06-16T20:22:53Z"}, "committer": {"name": "Matthijs Hofstra", "email": "thiezz@gmail.com", "date": "2013-06-23T21:21:34Z"}, "message": "Updated copyright year on shootout-binarytrees.rs", "tree": {"sha": "171a93d1deafeadc55c39a1844930267f932e77f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171a93d1deafeadc55c39a1844930267f932e77f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b1ace9f9b07d59804fab1abc02ddf20b1496666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1ace9f9b07d59804fab1abc02ddf20b1496666", "html_url": "https://github.com/rust-lang/rust/commit/3b1ace9f9b07d59804fab1abc02ddf20b1496666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b1ace9f9b07d59804fab1abc02ddf20b1496666/comments", "author": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Thiez", "id": 204550, "node_id": "MDQ6VXNlcjIwNDU1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/204550?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Thiez", "html_url": "https://github.com/Thiez", "followers_url": "https://api.github.com/users/Thiez/followers", "following_url": "https://api.github.com/users/Thiez/following{/other_user}", "gists_url": "https://api.github.com/users/Thiez/gists{/gist_id}", "starred_url": "https://api.github.com/users/Thiez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Thiez/subscriptions", "organizations_url": "https://api.github.com/users/Thiez/orgs", "repos_url": "https://api.github.com/users/Thiez/repos", "events_url": "https://api.github.com/users/Thiez/events{/privacy}", "received_events_url": "https://api.github.com/users/Thiez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4a8a4ac277f686a4d771f1a8ce5a55b27eddf5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a8a4ac277f686a4d771f1a8ce5a55b27eddf5c", "html_url": "https://github.com/rust-lang/rust/commit/a4a8a4ac277f686a4d771f1a8ce5a55b27eddf5c"}], "stats": {"total": 38, "additions": 17, "deletions": 21}, "files": [{"sha": "76ef4c12380e2ab44024086c2eac4660ea7e65ce", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3b1ace9f9b07d59804fab1abc02ddf20b1496666/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b1ace9f9b07d59804fab1abc02ddf20b1496666/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=3b1ace9f9b07d59804fab1abc02ddf20b1496666", "patch": "@@ -1,8 +1,4 @@\n-// xfail-test\n-\n-// Broken due to arena API problems.\n-\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -15,29 +11,29 @@\n extern mod extra;\n use extra::arena;\n \n-enum tree<'self> {\n-    nil,\n-    node(&'self tree<'self>, &'self tree<'self>, int),\n+enum Tree<'self> {\n+    Nil,\n+    Node(&'self Tree<'self>, &'self Tree<'self>, int),\n }\n \n-fn item_check(t: &tree) -> int {\n+fn item_check(t: &Tree) -> int {\n     match *t {\n-      nil => { return 0; }\n-      node(left, right, item) => {\n+      Nil => { return 0; }\n+      Node(left, right, item) => {\n         return item + item_check(left) - item_check(right);\n       }\n     }\n }\n \n-fn bottom_up_tree<'r>(arena: &'r mut arena::Arena, item: int, depth: int)\n-                   -> &'r tree<'r> {\n+fn bottom_up_tree<'r>(arena: &'r arena::Arena, item: int, depth: int)\n+                   -> &'r Tree<'r> {\n     if depth > 0 {\n         return arena.alloc(\n-            || node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n+            || Node(bottom_up_tree(arena, 2 * item - 1, depth - 1),\n                     bottom_up_tree(arena, 2 * item, depth - 1),\n                     item));\n     }\n-    return arena.alloc(|| nil);\n+    return arena.alloc(|| Nil);\n }\n \n fn main() {\n@@ -61,25 +57,25 @@ fn main() {\n         max_depth = n;\n     }\n \n-    let mut stretch_arena = arena::Arena();\n+    let stretch_arena = arena::Arena();\n     let stretch_depth = max_depth + 1;\n-    let stretch_tree = bottom_up_tree(&mut stretch_arena, 0, stretch_depth);\n+    let stretch_tree = bottom_up_tree(&stretch_arena, 0, stretch_depth);\n \n     println(fmt!(\"stretch tree of depth %d\\t check: %d\",\n                           stretch_depth,\n                           item_check(stretch_tree)));\n \n-    let mut long_lived_arena = arena::Arena();\n-    let long_lived_tree = bottom_up_tree(&mut long_lived_arena, 0, max_depth);\n+    let long_lived_arena = arena::Arena();\n+    let long_lived_tree = bottom_up_tree(&long_lived_arena, 0, max_depth);\n     let mut depth = min_depth;\n     while depth <= max_depth {\n         let iterations = int::pow(2, (max_depth - depth + min_depth) as uint);\n         let mut chk = 0;\n         let mut i = 1;\n         while i <= iterations {\n-            let mut temp_tree = bottom_up_tree(&mut long_lived_arena, i, depth);\n+            let mut temp_tree = bottom_up_tree(&long_lived_arena, i, depth);\n             chk += item_check(temp_tree);\n-            temp_tree = bottom_up_tree(&mut long_lived_arena, -i, depth);\n+            temp_tree = bottom_up_tree(&long_lived_arena, -i, depth);\n             chk += item_check(temp_tree);\n             i += 1;\n         }"}]}