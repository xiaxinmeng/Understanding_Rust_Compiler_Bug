{"sha": "69a879f3d199580dde491bb679df319867a44e56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTg3OWYzZDE5OTU4MGRkZTQ5MWJiNjc5ZGYzMTk4NjdhNDRlNTY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-05T15:35:22Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-03-05T15:55:15Z"}, "message": "Store `UNVERSIONED_FILES` in a data structure\n\nThis allows querying it programatically.", "tree": {"sha": "6b7cdfc47c69e36128f01f57577c8a3b1a184322", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b7cdfc47c69e36128f01f57577c8a3b1a184322"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a879f3d199580dde491bb679df319867a44e56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a879f3d199580dde491bb679df319867a44e56", "html_url": "https://github.com/rust-lang/rust/commit/69a879f3d199580dde491bb679df319867a44e56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a879f3d199580dde491bb679df319867a44e56/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ccc89bc312caa65ca46b55b47492abdd5b6910a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ccc89bc312caa65ca46b55b47492abdd5b6910a", "html_url": "https://github.com/rust-lang/rust/commit/8ccc89bc312caa65ca46b55b47492abdd5b6910a"}], "stats": {"total": 72, "additions": 39, "deletions": 33}, "files": [{"sha": "1d34359db99c0d3eef662c8855688696d66283c1", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=69a879f3d199580dde491bb679df319867a44e56", "patch": "@@ -1612,24 +1612,6 @@ impl PrimitiveType {\n         CELL.get_or_init(move || {\n             use self::PrimitiveType::*;\n \n-            /// A macro to create a FxHashMap.\n-            ///\n-            /// Example:\n-            ///\n-            /// ```\n-            /// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n-            /// ```\n-            ///\n-            /// Trailing commas are allowed.\n-            /// Commas between elements are required (even if the expression is a block).\n-            macro_rules! map {\n-                ($( $key: expr => $val: expr ),* $(,)*) => {{\n-                    let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n-                    $( map.insert($key, $val); )*\n-                    map\n-                }}\n-            }\n-\n             let single = |a: Option<DefId>| a.into_iter().collect();\n             let both = |a: Option<DefId>, b: Option<DefId>| -> ArrayVec<_> {\n                 a.into_iter().chain(b).collect()"}, {"sha": "7fcfe35f9a9671db331ae9163a51fe550e10e151", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=69a879f3d199580dde491bb679df319867a44e56", "patch": "@@ -4,6 +4,7 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io::{self, BufReader};\n use std::path::{Component, Path, PathBuf};\n+use std::lazy::SyncLazy as Lazy;\n \n use itertools::Itertools;\n use rustc_data_structures::flock;\n@@ -212,21 +213,26 @@ themePicker.onblur = handleThemeButtonsBlur;\n         static_files::NORMALIZE_CSS,\n         options.enable_minification,\n     )?;\n-    write(cx.dst.join(\"FiraSans-Regular.woff2\"), static_files::fira_sans::REGULAR2)?;\n-    write(cx.dst.join(\"FiraSans-Medium.woff2\"), static_files::fira_sans::MEDIUM2)?;\n-    write(cx.dst.join(\"FiraSans-Regular.woff\"), static_files::fira_sans::REGULAR)?;\n-    write(cx.dst.join(\"FiraSans-Medium.woff\"), static_files::fira_sans::MEDIUM)?;\n-    write(cx.dst.join(\"FiraSans-LICENSE.txt\"), static_files::fira_sans::LICENSE)?;\n-    write(cx.dst.join(\"SourceSerifPro-Regular.ttf.woff\"), static_files::source_serif_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceSerifPro-Bold.ttf.woff\"), static_files::source_serif_pro::BOLD)?;\n-    write(cx.dst.join(\"SourceSerifPro-It.ttf.woff\"), static_files::source_serif_pro::ITALIC)?;\n-    write(cx.dst.join(\"SourceSerifPro-LICENSE.md\"), static_files::source_serif_pro::LICENSE)?;\n-    write(cx.dst.join(\"SourceCodePro-Regular.woff\"), static_files::source_code_pro::REGULAR)?;\n-    write(cx.dst.join(\"SourceCodePro-Semibold.woff\"), static_files::source_code_pro::SEMIBOLD)?;\n-    write(cx.dst.join(\"SourceCodePro-LICENSE.txt\"), static_files::source_code_pro::LICENSE)?;\n-    write(cx.dst.join(\"LICENSE-MIT.txt\"), static_files::LICENSE_MIT)?;\n-    write(cx.dst.join(\"LICENSE-APACHE.txt\"), static_files::LICENSE_APACHE)?;\n-    write(cx.dst.join(\"COPYRIGHT.txt\"), static_files::COPYRIGHT)?;\n+    static FILES_UNVERSIONED: Lazy<FxHashMap<&str, &[u8]>> = Lazy::new(|| map! {\n+        \"FiraSans-Regular.woff2\" => static_files::fira_sans::REGULAR2,\n+        \"FiraSans-Medium.woff2\" => static_files::fira_sans::MEDIUM2,\n+        \"FiraSans-Regular.woff\" => static_files::fira_sans::REGULAR,\n+        \"FiraSans-Medium.woff\" => static_files::fira_sans::MEDIUM,\n+        \"FiraSans-LICENSE.txt\" => static_files::fira_sans::LICENSE,\n+        \"SourceSerifPro-Regular.ttf.woff\" => static_files::source_serif_pro::REGULAR,\n+        \"SourceSerifPro-Bold.ttf.woff\" => static_files::source_serif_pro::BOLD,\n+        \"SourceSerifPro-It.ttf.woff\" => static_files::source_serif_pro::ITALIC,\n+        \"SourceSerifPro-LICENSE.md\" => static_files::source_serif_pro::LICENSE,\n+        \"SourceCodePro-Regular.woff\" => static_files::source_code_pro::REGULAR,\n+        \"SourceCodePro-Semibold.woff\" => static_files::source_code_pro::SEMIBOLD,\n+        \"SourceCodePro-LICENSE.txt\" => static_files::source_code_pro::LICENSE,\n+        \"LICENSE-MIT.txt\" => static_files::LICENSE_MIT,\n+        \"LICENSE-APACHE.txt\" => static_files::LICENSE_APACHE,\n+        \"COPYRIGHT.txt\" => static_files::COPYRIGHT,\n+    });\n+    for (file, contents) in &*FILES_UNVERSIONED {\n+        write(cx.dst.join(file), contents)?;\n+    }\n \n     fn collect(path: &Path, krate: &str, key: &str) -> io::Result<(Vec<String>, Vec<String>)> {\n         let mut ret = Vec::new();"}, {"sha": "d214cea8fc439538d7bef70649b595c656f6f888", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a879f3d199580dde491bb679df319867a44e56/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=69a879f3d199580dde491bb679df319867a44e56", "patch": "@@ -71,6 +71,24 @@ use rustc_session::config::{make_crate_type_option, ErrorOutputType, RustcOptGro\n use rustc_session::getopts;\n use rustc_session::{early_error, early_warn};\n \n+/// A macro to create a FxHashMap.\n+///\n+/// Example:\n+///\n+/// ```\n+/// let letters = map!{\"a\" => \"b\", \"c\" => \"d\"};\n+/// ```\n+///\n+/// Trailing commas are allowed.\n+/// Commas between elements are required (even if the expression is a block).\n+macro_rules! map {\n+    ($( $key: expr => $val: expr ),* $(,)*) => {{\n+        let mut map = ::rustc_data_structures::fx::FxHashMap::default();\n+        $( map.insert($key, $val); )*\n+        map\n+    }}\n+}\n+\n #[macro_use]\n mod externalfiles;\n "}]}