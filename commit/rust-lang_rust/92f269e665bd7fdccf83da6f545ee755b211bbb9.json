{"sha": "92f269e665bd7fdccf83da6f545ee755b211bbb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyZjI2OWU2NjViZDdmZGNjZjgzZGE2ZjU0NWVlNzU1YjIxMWJiYjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-10T18:49:22Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-08-17T12:03:50Z"}, "message": "put ecx into IndexBuilder so we don't have to pass", "tree": {"sha": "79b90cdd6ed0ab374e1a641028280d83aa7aaf29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79b90cdd6ed0ab374e1a641028280d83aa7aaf29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92f269e665bd7fdccf83da6f545ee755b211bbb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92f269e665bd7fdccf83da6f545ee755b211bbb9", "html_url": "https://github.com/rust-lang/rust/commit/92f269e665bd7fdccf83da6f545ee755b211bbb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92f269e665bd7fdccf83da6f545ee755b211bbb9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25bb51d98fee9d991c06169784a48e4533fff035", "url": "https://api.github.com/repos/rust-lang/rust/commits/25bb51d98fee9d991c06169784a48e4533fff035", "html_url": "https://github.com/rust-lang/rust/commit/25bb51d98fee9d991c06169784a48e4533fff035"}], "stats": {"total": 103, "additions": 54, "deletions": 49}, "files": [{"sha": "6f0ccf5af99638eddba62970d22d691a45fafc78", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 50, "deletions": 45, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/92f269e665bd7fdccf83da6f545ee755b211bbb9/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f269e665bd7fdccf83da6f545ee755b211bbb9/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=92f269e665bd7fdccf83da6f545ee755b211bbb9", "patch": "@@ -762,10 +762,10 @@ fn encode_xrefs<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     rbml_w.end_tag();\n }\n \n-fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n-                                  rbml_w: &mut Encoder,\n+fn encode_info_for_item<'a, 'tcx>(rbml_w: &mut Encoder,\n                                   item: &hir::Item,\n                                   index: &mut IndexBuilder<'a, 'tcx>) {\n+    let ecx = index.ecx();\n     let tcx = ecx.tcx;\n \n     debug!(\"encoding info for item at {}\",\n@@ -1234,10 +1234,11 @@ fn encode_info_for_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     }\n }\n \n-fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n-                                          rbml_w: &mut Encoder,\n+fn encode_info_for_foreign_item<'a, 'tcx>(rbml_w: &mut Encoder,\n                                           nitem: &hir::ForeignItem,\n                                           index: &mut IndexBuilder<'a, 'tcx>) {\n+    let ecx = index.ecx();\n+\n     debug!(\"writing foreign item {}\", ecx.tcx.node_path_str(nitem.id));\n     let def_id = ecx.tcx.map.local_def_id(nitem.id);\n     let abi = ecx.tcx.map.get_foreign_abi(nitem.id);\n@@ -1282,10 +1283,50 @@ fn encode_info_for_foreign_item<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     rbml_w.end_tag();\n }\n \n-fn my_visit_expr(expr: &hir::Expr,\n-                 rbml_w: &mut Encoder,\n-                 ecx: &EncodeContext,\n-                 index: &mut IndexBuilder) {\n+struct EncodeVisitor<'a, 'data:'a, 'ecx: 'a, 'tcx: 'ecx> {\n+    rbml_w_for_visit_item: &'a mut Encoder<'data>,\n+    index: &'a mut IndexBuilder<'ecx, 'tcx>,\n+}\n+\n+impl<'a, 'data, 'ecx, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'data, 'ecx, 'tcx> {\n+    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n+        intravisit::walk_expr(self, ex);\n+        encode_info_for_expr(ex, self.rbml_w_for_visit_item, self.index);\n+    }\n+    fn visit_item(&mut self, i: &'tcx hir::Item) {\n+        intravisit::walk_item(self, i);\n+        encode_info_for_item(self.rbml_w_for_visit_item, i, self.index);\n+    }\n+    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n+        intravisit::walk_foreign_item(self, ni);\n+        encode_info_for_foreign_item(self.rbml_w_for_visit_item, ni, self.index);\n+    }\n+    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n+        intravisit::walk_ty(self, ty);\n+        encode_info_for_ty(ty, self.rbml_w_for_visit_item, self.index);\n+    }\n+}\n+\n+fn encode_info_for_ty(ty: &hir::Ty,\n+                      rbml_w: &mut Encoder,\n+                      index: &mut IndexBuilder) {\n+    let ecx = index.ecx();\n+    if let hir::TyImplTrait(_) = ty.node {\n+        let def_id = ecx.tcx.map.local_def_id(ty.id);\n+        let _task = index.record(def_id, rbml_w);\n+        rbml_w.start_tag(tag_items_data_item);\n+        encode_def_id_and_key(ecx, rbml_w, def_id);\n+        encode_family(rbml_w, 'y');\n+        encode_bounds_and_type_for_item(rbml_w, ecx, index, ty.id);\n+        rbml_w.end_tag();\n+    }\n+}\n+\n+fn encode_info_for_expr(expr: &hir::Expr,\n+                        rbml_w: &mut Encoder,\n+                        index: &mut IndexBuilder) {\n+    let ecx = index.ecx();\n+\n     match expr.node {\n         hir::ExprClosure(..) => {\n             let def_id = ecx.tcx.map.local_def_id(expr.id);\n@@ -1313,42 +1354,7 @@ fn my_visit_expr(expr: &hir::Expr,\n     }\n }\n \n-struct EncodeVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n-    rbml_w_for_visit_item: &'a mut Encoder<'b>,\n-    ecx: &'a EncodeContext<'c, 'tcx>,\n-    index: &'a mut IndexBuilder<'c, 'tcx>,\n-}\n-\n-impl<'a, 'b, 'c, 'tcx> Visitor<'tcx> for EncodeVisitor<'a, 'b, 'c, 'tcx> {\n-    fn visit_expr(&mut self, ex: &'tcx hir::Expr) {\n-        intravisit::walk_expr(self, ex);\n-        my_visit_expr(ex, self.rbml_w_for_visit_item, self.ecx, self.index);\n-    }\n-    fn visit_item(&mut self, i: &'tcx hir::Item) {\n-        intravisit::walk_item(self, i);\n-        encode_info_for_item(self.ecx, self.rbml_w_for_visit_item, i, self.index);\n-    }\n-    fn visit_foreign_item(&mut self, ni: &'tcx hir::ForeignItem) {\n-        intravisit::walk_foreign_item(self, ni);\n-        encode_info_for_foreign_item(self.ecx, self.rbml_w_for_visit_item, ni, self.index);\n-    }\n-    fn visit_ty(&mut self, ty: &'tcx hir::Ty) {\n-        intravisit::walk_ty(self, ty);\n-\n-        if let hir::TyImplTrait(_) = ty.node {\n-            let rbml_w = &mut *self.rbml_w_for_visit_item;\n-            let def_id = self.ecx.tcx.map.local_def_id(ty.id);\n-            let _task = self.index.record(def_id, rbml_w);\n-            rbml_w.start_tag(tag_items_data_item);\n-            encode_def_id_and_key(self.ecx, rbml_w, def_id);\n-            encode_family(rbml_w, 'y');\n-            encode_bounds_and_type_for_item(rbml_w, self.ecx, self.index, ty.id);\n-            rbml_w.end_tag();\n-        }\n-    }\n-}\n-\n-fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n+fn encode_info_for_items<'a, 'tcx>(ecx: &'a EncodeContext<'a, 'tcx>,\n                                    rbml_w: &mut Encoder)\n                                    -> IndexBuilder<'a, 'tcx> {\n     let krate = ecx.tcx.map.krate();\n@@ -1369,7 +1375,6 @@ fn encode_info_for_items<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n \n     krate.visit_all_items(&mut EncodeVisitor {\n         index: &mut index,\n-        ecx: ecx,\n         rbml_w_for_visit_item: &mut *rbml_w,\n     });\n "}, {"sha": "1e1ae06443643984de23c983fde4eb7165bf1ca9", "filename": "src/librustc_metadata/index_builder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/92f269e665bd7fdccf83da6f545ee755b211bbb9/src%2Flibrustc_metadata%2Findex_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92f269e665bd7fdccf83da6f545ee755b211bbb9/src%2Flibrustc_metadata%2Findex_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Findex_builder.rs?ref=92f269e665bd7fdccf83da6f545ee755b211bbb9", "patch": "@@ -11,12 +11,12 @@\n use encoder::EncodeContext;\n use index::IndexData;\n use rbml::writer::Encoder;\n-use rustc::dep_graph::{DepGraph, DepNode, DepTask};\n+use rustc::dep_graph::{DepNode, DepTask};\n use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc_data_structures::fnv::FnvHashMap;\n \n-pub struct IndexBuilder<'a, 'tcx> {\n+pub struct IndexBuilder<'a, 'tcx: 'a> {\n     ecx: &'a EncodeContext<'a, 'tcx>,\n     items: IndexData,\n     xrefs: FnvHashMap<XRef<'tcx>, u32>, // sequentially-assigned\n@@ -27,15 +27,15 @@ pub struct IndexBuilder<'a, 'tcx> {\n pub enum XRef<'tcx> { Predicate(ty::Predicate<'tcx>) }\n \n impl<'a, 'tcx> IndexBuilder<'a, 'tcx> {\n-    pub fn new(ecx: &EncodeContext<'a, 'tcx>) -> Self {\n+    pub fn new(ecx: &'a EncodeContext<'a, 'tcx>) -> Self {\n         IndexBuilder {\n             ecx: ecx,\n             items: IndexData::new(ecx.tcx.map.num_local_def_ids()),\n             xrefs: FnvHashMap()\n         }\n     }\n \n-    pub fn ecx(&self) {\n+    pub fn ecx(&self) -> &'a EncodeContext<'a, 'tcx> {\n         self.ecx\n     }\n "}]}