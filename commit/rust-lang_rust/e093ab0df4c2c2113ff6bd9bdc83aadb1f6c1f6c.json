{"sha": "e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOTNhYjBkZjRjMmMyMTEzZmY2YmQ5YmRjODNhYWRiMWY2YzFmNmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-29T10:24:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:13Z"}, "message": "Adjust tests to changed const err lints", "tree": {"sha": "8b0f366095c2937529b40e8b10f05d9ecc982ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b0f366095c2937529b40e8b10f05d9ecc982ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53UACgkQpp+NIls6\n19ktXg//ZKJKLVtzs1+XaSdN0a59FwPU1bBdxqsBSi9LdvB+0EubAdkk53Vhn7/D\nvpqs5pPiqARlJ8HP91twq46Q2IINLyLbeWVIQDXhG8QXPBum9cqjGh7DhiQVwc27\nwNwES106g+ytK46Tv2m/xVmnQGO6L7FDwa4yuRT5OiA7tB6rREikmlg8ILHIYmJA\nZHDv0vWnwSXBXK4pshskYSq5KHBEJ1pfgxgLPu5MBcPJ/HsXFXBXfUijic8Jw7tR\n287TIIg7mkpuRg4M9rtwHJ05I2g4LIbXYWJPNA/Iri6oEuIzl0sfjGz7EIp7jhlA\nJ61W7GFO3VmtldsxbMsmraXOwuY4xJC+gUcyvfYHTW0Xiy2h+H9aBCBnwtsi1lon\nNFXM/nGslzLMhbKp6nftlRpMGKrT0th4cGQ0PrRDfJ6V0ml2y8ezypMwubPALYWe\nLjkUcQZYiWalc0Uou1vv+4XxTjmZuR9yuB9sYEkL/RR+enRdRjYN2BH44rO4/TdK\ncj30k9wKxqMNjuW9wj2ap3JUeFGZZHx5mqIqyVVsAFcxWEV7OXYKduf4q6mc4JN0\nuHO3frjC8v/oQjhx5Q2goR2nuHCLdKpIux+MHlDKvi7BwB64rs6e4NXId+48AAul\nx4GjPTUM3azAf6j/7+GnUtS37ZzaYOMCsU2SNCFn2sTJnE/dyTo=\n=ARNC\n-----END PGP SIGNATURE-----", "payload": "tree 8b0f366095c2937529b40e8b10f05d9ecc982ab4\nparent 4667346042b526300f4172518d80dfb2da98ee27\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517221491 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494453 +0100\n\nAdjust tests to changed const err lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "html_url": "https://github.com/rust-lang/rust/commit/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4667346042b526300f4172518d80dfb2da98ee27", "url": "https://api.github.com/repos/rust-lang/rust/commits/4667346042b526300f4172518d80dfb2da98ee27", "html_url": "https://github.com/rust-lang/rust/commit/4667346042b526300f4172518d80dfb2da98ee27"}], "stats": {"total": 74, "additions": 47, "deletions": 27}, "files": [{"sha": "4a146d8de3cde5e56cded81130963f8af70e2d20", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "patch": "@@ -12,7 +12,6 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR E0080\n-//~^ ERROR attempt to negate with overflow\n //~| ERROR const_err\n //~| ERROR const_err\n pub const B: u8 = 200u8 + 200u8; //~ ERROR E0080"}, {"sha": "eb24a698419eba103616feffc1d24218f3267c86", "filename": "src/test/compile-fail/const-err-multi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-multi.rs?ref=e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(const_err)]\n \n-pub const A: i8 = -std::i8::MIN; //~ ERROR attempt to negate with overflow\n+pub const A: i8 = -std::i8::MIN;\n //~^ ERROR E0080\n //~| ERROR const_err\n //~| ERROR const_err"}, {"sha": "024aca2e66d36cd379046bc74ab38ee6d3aa9710", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 41, "deletions": 20, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "patch": "@@ -9,89 +9,110 @@\n // except according to those terms.\n \n #![deny(const_err)]\n+//~^ NOTE lint level defined here\n \n use std::{isize, i8, i16, i32, i64};\n use std::thread;\n \n fn main() {\n     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n+    //~^ NOTE attempt to divide with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n+    //~^ NOTE attempt to divide with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n+    //~^ NOTE attempt to divide with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n+    //~^ NOTE attempt to divide with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n-    //~^ ERROR attempt to divide with overflow\n+    //~^ NOTE attempt to divide with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ NOTE attempt to divide by zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ NOTE attempt to divide by zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ NOTE attempt to divide by zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ NOTE attempt to divide by zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n-    //~^ ERROR attempt to divide by zero\n+    //~^ NOTE attempt to divide by zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~^ NOTE attempt to calculate the remainder with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~^ NOTE attempt to calculate the remainder with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~^ NOTE attempt to calculate the remainder with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~^ NOTE attempt to calculate the remainder with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with overflow\n+    //~^ NOTE attempt to calculate the remainder with overflow\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n-    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~^ NOTE attempt to calculate the remainder with a divisor of zero\n+    //~| NOTE attempted to do overflowing math\n     //~| ERROR constant evaluation error\n     //~| ERROR constant evaluation error\n }"}, {"sha": "0eab143fa49e085c9601a8327cd4cc03032dd5a1", "filename": "src/test/compile-fail/lint-exceeding-bitshifts2.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts2.rs?ref=e093ab0df4c2c2113ff6bd9bdc83aadb1f6c1f6c", "patch": "@@ -8,20 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![deny(exceeding_bitshifts)]\n-#![allow(unused_variables, const_err)]\n+#![deny(exceeding_bitshifts, const_err)]\n+#![allow(unused_variables)]\n #![allow(dead_code)]\n \n fn main() {\n       let n = 1u8 << (4+3);\n-      let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1u8 << (4+4); //~ ERROR: const_err\n       let n = 1i64 >> [63][0];\n       let n = 1i64 >> [64][0]; // should be linting, needs to wait for const propagation\n \n       #[cfg(target_pointer_width = \"32\")]\n       const BITS: usize = 32;\n       #[cfg(target_pointer_width = \"64\")]\n       const BITS: usize = 64;\n-      let n = 1_isize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1_usize << BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1_isize << BITS; //~ ERROR: const_err\n+      let n = 1_usize << BITS; //~ ERROR: const_err\n }"}]}