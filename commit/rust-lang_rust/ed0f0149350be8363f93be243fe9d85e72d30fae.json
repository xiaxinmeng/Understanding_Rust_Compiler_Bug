{"sha": "ed0f0149350be8363f93be243fe9d85e72d30fae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMGYwMTQ5MzUwYmU4MzYzZjkzYmUyNDNmZTlkODVlNzJkMzBmYWU=", "commit": {"author": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-07-30T19:26:52Z"}, "committer": {"name": "Dmitry Ermolov", "email": "epdmitry@yandex.ru", "date": "2013-07-30T19:26:52Z"}, "message": "Fix opts_str.\n\nopt_val doesn't not fail! for missing options.\n\nCloses #6492", "tree": {"sha": "c24da20d82f871ee3cfbc3de450993ccdc462ed3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c24da20d82f871ee3cfbc3de450993ccdc462ed3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed0f0149350be8363f93be243fe9d85e72d30fae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed0f0149350be8363f93be243fe9d85e72d30fae", "html_url": "https://github.com/rust-lang/rust/commit/ed0f0149350be8363f93be243fe9d85e72d30fae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed0f0149350be8363f93be243fe9d85e72d30fae/comments", "author": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dim-an", "id": 88889, "node_id": "MDQ6VXNlcjg4ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/88889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dim-an", "html_url": "https://github.com/dim-an", "followers_url": "https://api.github.com/users/dim-an/followers", "following_url": "https://api.github.com/users/dim-an/following{/other_user}", "gists_url": "https://api.github.com/users/dim-an/gists{/gist_id}", "starred_url": "https://api.github.com/users/dim-an/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dim-an/subscriptions", "organizations_url": "https://api.github.com/users/dim-an/orgs", "repos_url": "https://api.github.com/users/dim-an/repos", "events_url": "https://api.github.com/users/dim-an/events{/privacy}", "received_events_url": "https://api.github.com/users/dim-an/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed8713d79048ef865f8cbdcd2d2939190c75c2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed8713d79048ef865f8cbdcd2d2939190c75c2a", "html_url": "https://github.com/rust-lang/rust/commit/0ed8713d79048ef865f8cbdcd2d2939190c75c2a"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "7e6551fbf5b5b35e4c6ecea23c45d905efdff4f2", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ed0f0149350be8363f93be243fe9d85e72d30fae/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed0f0149350be8363f93be243fe9d85e72d30fae/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=ed0f0149350be8363f93be243fe9d85e72d30fae", "patch": "@@ -369,7 +369,14 @@ fn opt_vals(mm: &Matches, nm: &str) -> ~[Optval] {\n     };\n }\n \n-fn opt_val(mm: &Matches, nm: &str) -> Optval { opt_vals(mm, nm)[0].clone() }\n+fn opt_val(mm: &Matches, nm: &str) -> Option<Optval> {\n+    let vals = opt_vals(mm, nm);\n+    if (vals.is_empty()) {\n+        None\n+    } else {\n+        Some(opt_vals(mm, nm)[0].clone())\n+    }\n+}\n \n /// Returns true if an option was matched\n pub fn opt_present(mm: &Matches, nm: &str) -> bool {\n@@ -400,7 +407,10 @@ pub fn opts_present(mm: &Matches, names: &[~str]) -> bool {\n  * argument\n  */\n pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n-    return match opt_val(mm, nm) { Val(s) => s, _ => fail!() };\n+    return match opt_val(mm, nm) {\n+        Some(Val(s)) => s,\n+        _ => fail!()\n+    };\n }\n \n /**\n@@ -412,7 +422,7 @@ pub fn opt_str(mm: &Matches, nm: &str) -> ~str {\n pub fn opts_str(mm: &Matches, names: &[~str]) -> ~str {\n     for names.iter().advance |nm| {\n         match opt_val(mm, *nm) {\n-          Val(ref s) => return (*s).clone(),\n+          Some(Val(ref s)) => return (*s).clone(),\n           _ => ()\n         }\n     }"}]}