{"sha": "24ca1ec07da202f77ed70f96ec6bfb138eaf29be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0Y2ExZWMwN2RhMjAyZjc3ZWQ3MGY5NmVjNmJmYjEzOGVhZjI5YmU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-19T12:57:34Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-04-19T13:08:45Z"}, "message": "Guard against rustc::layout diverging from rustc_trans.", "tree": {"sha": "7bf34e27e86cb66f851ec80cbe6258199be94ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bf34e27e86cb66f851ec80cbe6258199be94ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ca1ec07da202f77ed70f96ec6bfb138eaf29be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ca1ec07da202f77ed70f96ec6bfb138eaf29be", "html_url": "https://github.com/rust-lang/rust/commit/24ca1ec07da202f77ed70f96ec6bfb138eaf29be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ca1ec07da202f77ed70f96ec6bfb138eaf29be/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe48a4af8403289ebc811884964fc4ef91f6bc09", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe48a4af8403289ebc811884964fc4ef91f6bc09", "html_url": "https://github.com/rust-lang/rust/commit/fe48a4af8403289ebc811884964fc4ef91f6bc09"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "863ae3f942e937ab5db37f059aedd80e4387cd9c", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/24ca1ec07da202f77ed70f96ec6bfb138eaf29be/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ca1ec07da202f77ed70f96ec6bfb138eaf29be/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=24ca1ec07da202f77ed70f96ec6bfb138eaf29be", "patch": "@@ -17,6 +17,7 @@ use abi::FnType;\n use adt;\n use common::*;\n use machine;\n+use rustc::traits::ProjectionMode;\n use rustc::ty::{self, Ty, TypeFoldable};\n \n use type_::Type;\n@@ -121,6 +122,37 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     debug!(\"--> mapped t={:?} to llsizingty={:?}\", t, llsizingty);\n \n     cx.llsizingtypes().borrow_mut().insert(t, llsizingty);\n+\n+    // FIXME(eddyb) Temporary sanity check for ty::layout.\n+    let infcx = infer::normalizing_infer_ctxt(cx.tcx(), &cx.tcx().tables, ProjectionMode::Any);\n+    match t.layout(&infcx) {\n+        Ok(layout) => {\n+            if !type_is_sized(cx.tcx(), t) {\n+                if !layout.is_unsized() {\n+                    bug!(\"layout should be unsized for type `{}` / {:#?}\",\n+                         t, layout);\n+                }\n+\n+                // Unsized types get turned into a fat pointer for LLVM.\n+                return llsizingty;\n+            }\n+            let r = layout.size(&cx.tcx().data_layout).bytes();\n+            let l = machine::llsize_of_alloc(cx, llsizingty);\n+            if r != l {\n+                bug!(\"size differs (rustc: {}, llvm: {}) for type `{}` / {:#?}\",\n+                     r, l, t, layout);\n+            }\n+            let r = layout.align(&cx.tcx().data_layout).abi();\n+            let l = machine::llalign_of_min(cx, llsizingty) as u64;\n+            if r != l {\n+                bug!(\"align differs (rustc: {}, llvm: {}) for type `{}` / {:#?}\",\n+                     r, l, t, layout);\n+            }\n+        }\n+        Err(e) => {\n+            bug!(\"failed to get layout for `{}`: {}\", t, e);\n+        }\n+    }\n     llsizingty\n }\n "}]}