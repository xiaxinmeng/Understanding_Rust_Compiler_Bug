{"sha": "ea02d27a1e5632466cb437bad7432783bebba70f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMDJkMjdhMWU1NjMyNDY2Y2I0MzdiYWQ3NDMyNzgzYmViYmE3MGY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T11:37:40Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-07-05T11:44:42Z"}, "message": "Fixup emitted whitespace in most cases", "tree": {"sha": "5c7e769f07f5221dd45d744096ea3f215ac37197", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c7e769f07f5221dd45d744096ea3f215ac37197"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea02d27a1e5632466cb437bad7432783bebba70f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea02d27a1e5632466cb437bad7432783bebba70f", "html_url": "https://github.com/rust-lang/rust/commit/ea02d27a1e5632466cb437bad7432783bebba70f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea02d27a1e5632466cb437bad7432783bebba70f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6181154d50720d7474ade413211e2e1fcb644714", "url": "https://api.github.com/repos/rust-lang/rust/commits/6181154d50720d7474ade413211e2e1fcb644714", "html_url": "https://github.com/rust-lang/rust/commit/6181154d50720d7474ade413211e2e1fcb644714"}], "stats": {"total": 120, "additions": 93, "deletions": 27}, "files": [{"sha": "5b6992b64097a46b6a57ce54eae0401d405384fb", "filename": "crates/ide_assists/src/handlers/inline_call.rs", "status": "modified", "additions": 77, "deletions": 24, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finline_call.rs?ref=ea02d27a1e5632466cb437bad7432783bebba70f", "patch": "@@ -17,16 +17,23 @@ use crate::{\n // Inlines a function or method body.\n //\n // ```\n-// fn align(a: u32, b: u32) -> u32 { (a + b - 1) & !(b - 1) }\n+// fn align(a: u32, b: u32) -> u32 {\n+//     (a + b - 1) & !(b - 1)\n+// }\n // fn main() {\n //     let x = align$0(1, 2);\n // }\n // ```\n // ->\n // ```\n-// fn align(a: u32, b: u32) -> u32 { (a + b - 1) & !(b - 1) }\n+// fn align(a: u32, b: u32) -> u32 {\n+//     (a + b - 1) & !(b - 1)\n+// }\n // fn main() {\n-//     let x = { let b = 2; (1 + b - 1) & !(b - 1) };\n+//     let x = {\n+//         let b = 2;\n+//         (1 + b - 1) & !(b - 1)\n+//     };\n // }\n // ```\n pub(crate) fn inline_call(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -140,14 +147,14 @@ pub(crate) fn inline_(\n \n             // Rewrite `self` to `this`\n             if param_list.self_param().is_some() {\n-                let this = make::name_ref(\"this\").syntax().clone_for_update();\n+                let this = || make::name_ref(\"this\").syntax().clone_for_update();\n                 usages_for_locals(params[0].1.as_local(ctx.sema.db))\n                     .flat_map(|FileReference { name, range, .. }| match name {\n                         ast::NameLike::NameRef(_) => Some(body.syntax().covering_element(range)),\n                         _ => None,\n                     })\n                     .for_each(|it| {\n-                        ted::replace(it, &this);\n+                        ted::replace(it, &this());\n                     })\n             }\n \n@@ -212,37 +219,44 @@ fn main() {\n         );\n     }\n \n+    #[test]\n+    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n+        cov_mark::check!(inline_call_incorrect_number_of_arguments);\n+        check_assist_not_applicable(\n+            inline_call,\n+            r#\"\n+fn add(a: u32, b: u32) -> u32 { a + b }\n+fn main() { let x = add$0(42); }\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn args_with_side_effects() {\n         check_assist(\n             inline_call,\n             r#\"\n-fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn foo(name: String) {\n+    println!(\"Hello, {}!\", name);\n+}\n fn main() {\n     foo$0(String::from(\"Michael\"));\n }\n \"#,\n             r#\"\n-fn foo(name: String) { println!(\"Hello, {}!\", name); }\n+fn foo(name: String) {\n+    println!(\"Hello, {}!\", name);\n+}\n fn main() {\n-    { let name = String::from(\"Michael\"); println!(\"Hello, {}!\", name); };\n+    {\n+        let name = String::from(\"Michael\");\n+        println!(\"Hello, {}!\", name);\n+    };\n }\n \"#,\n         );\n     }\n \n-    #[test]\n-    fn not_applicable_when_incorrect_number_of_parameters_are_provided() {\n-        cov_mark::check!(inline_call_incorrect_number_of_arguments);\n-        check_assist_not_applicable(\n-            inline_call,\n-            r#\"\n-fn add(a: u32, b: u32) -> u32 { a + b }\n-fn main() { let x = add$0(42); }\n-\"#,\n-        );\n-    }\n-\n     #[test]\n     fn function_with_multiple_statements() {\n         check_assist(\n@@ -266,7 +280,8 @@ fn foo(a: u32, b: u32) -> u32 {\n }\n \n fn main() {\n-    let x = { let b = 2;\n+    let x = {\n+        let b = 2;\n         let x = 1 + b;\n         let y = x - b;\n         x * y\n@@ -369,7 +384,8 @@ impl Foo {\n }\n \n fn main() {\n-    let x = { let ref this = Foo(3);\n+    let x = {\n+        let ref this = Foo(3);\n         Foo(this.0 + 2)\n     };\n }\n@@ -406,7 +422,8 @@ impl Foo {\n \n fn main() {\n     let mut foo = Foo(3);\n-    { let ref mut this = foo;\n+    {\n+        let ref mut this = foo;\n         this.0 = 0;\n     };\n }\n@@ -458,7 +475,8 @@ fn square(x: u32) -> u32 {\n }\n fn main() {\n     let x = 51;\n-    let y = { let x = 10 + x;\n+    let y = {\n+        let x = 10 + x;\n         x * x\n     };\n }\n@@ -487,6 +505,41 @@ fn main() {\n     let local = 51;\n     let y = local * local;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn method_in_impl() {\n+        check_assist(\n+            inline_call,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {\n+        self;\n+        self;\n+    }\n+    fn bar(&self) {\n+        self.foo$0();\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Foo;\n+impl Foo {\n+    fn foo(&self) {\n+        self;\n+        self;\n+    }\n+    fn bar(&self) {\n+        {\n+            let ref this = self;\n+            this;\n+            this;\n+        };\n+    }\n+}\n \"#,\n         );\n     }"}, {"sha": "c0714c38052296715614dd81183a286111d02749", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ea02d27a1e5632466cb437bad7432783bebba70f", "patch": "@@ -923,15 +923,22 @@ fn doctest_inline_call() {\n     check_doc_test(\n         \"inline_call\",\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 { (a + b - 1) & !(b - 1) }\n+fn align(a: u32, b: u32) -> u32 {\n+    (a + b - 1) & !(b - 1)\n+}\n fn main() {\n     let x = align$0(1, 2);\n }\n \"#####,\n         r#####\"\n-fn align(a: u32, b: u32) -> u32 { (a + b - 1) & !(b - 1) }\n+fn align(a: u32, b: u32) -> u32 {\n+    (a + b - 1) & !(b - 1)\n+}\n fn main() {\n-    let x = { let b = 2; (1 + b - 1) & !(b - 1) };\n+    let x = {\n+        let b = 2;\n+        (1 + b - 1) & !(b - 1)\n+    };\n }\n \"#####,\n     )"}, {"sha": "f04feb883c78accfd00162e032300747fb1c13f3", "filename": "crates/syntax/src/ted.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fsyntax%2Fsrc%2Fted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea02d27a1e5632466cb437bad7432783bebba70f/crates%2Fsyntax%2Fsrc%2Fted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fted.rs?ref=ea02d27a1e5632466cb437bad7432783bebba70f", "patch": "@@ -188,6 +188,12 @@ fn ws_between(left: &SyntaxElement, right: &SyntaxElement) -> Option<SyntaxToken\n         return None;\n     }\n \n+    if left.kind() == T!['{'] && right.kind() == SyntaxKind::LET_STMT {\n+        let mut indent = IndentLevel::from_element(left);\n+        indent.0 += 1;\n+        return Some(make::tokens::whitespace(&format!(\"\\n{}\", indent)));\n+    }\n+\n     if right.kind() == SyntaxKind::USE {\n         let mut indent = IndentLevel::from_element(left);\n         if left.kind() == SyntaxKind::USE {"}]}