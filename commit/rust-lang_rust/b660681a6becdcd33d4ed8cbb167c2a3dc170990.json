{"sha": "b660681a6becdcd33d4ed8cbb167c2a3dc170990", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NjA2ODFhNmJlY2RjZDMzZDRlZDhjYmIxNjdjMmEzZGMxNzA5OTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:58:56Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T08:58:56Z"}, "message": "Unify tests", "tree": {"sha": "f249a5b4b21420dd833bc52e3705cd34a8b3c4f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f249a5b4b21420dd833bc52e3705cd34a8b3c4f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b660681a6becdcd33d4ed8cbb167c2a3dc170990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b660681a6becdcd33d4ed8cbb167c2a3dc170990", "html_url": "https://github.com/rust-lang/rust/commit/b660681a6becdcd33d4ed8cbb167c2a3dc170990", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b660681a6becdcd33d4ed8cbb167c2a3dc170990/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b9aab22d569c4ffe4d4f544a778bf07441ccf118", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9aab22d569c4ffe4d4f544a778bf07441ccf118", "html_url": "https://github.com/rust-lang/rust/commit/b9aab22d569c4ffe4d4f544a778bf07441ccf118"}], "stats": {"total": 65, "additions": 26, "deletions": 39}, "files": [{"sha": "79a793084bdf4b53a81eaee8eca292ed16fbb830", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b660681a6becdcd33d4ed8cbb167c2a3dc170990/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b660681a6becdcd33d4ed8cbb167c2a3dc170990/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b660681a6becdcd33d4ed8cbb167c2a3dc170990", "patch": "@@ -1262,6 +1262,7 @@ name = \"ra_syntax\"\n version = \"0.1.0\"\n dependencies = [\n  \"arrayvec\",\n+ \"expect\",\n  \"itertools\",\n  \"once_cell\",\n  \"ra_parser\","}, {"sha": "408448eedbd4100267007d96fb2c3c0a8416bfc6", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=b660681a6becdcd33d4ed8cbb167c2a3dc170990", "patch": "@@ -42,7 +42,9 @@ macro_rules! expect {\n /// expect_file![\"/crates/foo/test_data/bar.html\"]\n #[macro_export]\n macro_rules! expect_file {\n-    [$path:literal] => {$crate::ExpectFile { path: $path }};\n+    [$path:literal] => {$crate::ExpectFile {\n+        path: $crate::ExpectFilePath::Static($path)\n+    }};\n }\n \n #[derive(Debug)]\n@@ -53,7 +55,13 @@ pub struct Expect {\n \n #[derive(Debug)]\n pub struct ExpectFile {\n-    pub path: &'static str,\n+    pub path: ExpectFilePath,\n+}\n+\n+#[derive(Debug)]\n+pub enum ExpectFilePath {\n+    Static(&'static str),\n+    Dynamic(PathBuf),\n }\n \n #[derive(Debug)]\n@@ -112,6 +120,9 @@ impl Expect {\n }\n \n impl ExpectFile {\n+    pub fn new(path: PathBuf) -> ExpectFile {\n+        ExpectFile { path: ExpectFilePath::Dynamic(path) }\n+    }\n     pub fn assert_eq(&self, actual: &str) {\n         let expected = self.read();\n         if actual == expected {\n@@ -125,8 +136,14 @@ impl ExpectFile {\n     fn write(&self, contents: &str) {\n         fs::write(self.abs_path(), contents).unwrap()\n     }\n+    fn path(&self) -> &Path {\n+        match &self.path {\n+            ExpectFilePath::Static(it) => it.as_ref(),\n+            ExpectFilePath::Dynamic(it) => it.as_path(),\n+        }\n+    }\n     fn abs_path(&self) -> PathBuf {\n-        workspace_root().join(self.path)\n+        workspace_root().join(self.path())\n     }\n }\n \n@@ -154,11 +171,11 @@ impl Runtime {\n     fn fail_file(expect: &ExpectFile, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n         if update_expect() {\n-            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path);\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path().display());\n             expect.write(actual);\n             return;\n         }\n-        rt.panic(expect.path.to_string(), expected, actual);\n+        rt.panic(expect.path().display().to_string(), expected, actual);\n     }\n \n     fn panic(&mut self, position: String, expected: &str, actual: &str) {"}, {"sha": "cb21b8053f6de905be4c481a6d53885ffb94c59d", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=b660681a6becdcd33d4ed8cbb167c2a3dc170990", "patch": "@@ -31,4 +31,5 @@ serde = { version = \"1.0.106\", features = [\"derive\"] }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+expect = { path = \"../expect\" }\n walkdir = \"2.3.1\""}, {"sha": "a5b6e972e0d33480c36a5529c45e7d5ab192ac86", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b660681a6becdcd33d4ed8cbb167c2a3dc170990/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=b660681a6becdcd33d4ed8cbb167c2a3dc170990", "patch": "@@ -1,11 +1,10 @@\n use std::{\n-    env,\n     fmt::Write,\n     fs,\n     path::{Component, Path, PathBuf},\n };\n \n-use test_utils::{assert_eq_text, project_dir};\n+use test_utils::project_dir;\n \n use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n \n@@ -218,15 +217,7 @@ where\n     for (path, input_code) in collect_rust_files(test_data_dir, paths) {\n         let actual = f(&input_code, &path);\n         let path = path.with_extension(outfile_extension);\n-        if !path.exists() {\n-            println!(\"\\nfile: {}\", path.display());\n-            println!(\"No .txt file with expected result, creating...\\n\");\n-            println!(\"{}\\n{}\", input_code, actual);\n-            fs::write(&path, &actual).unwrap();\n-            panic!(\"No expected result\");\n-        }\n-        let expected = read_text(&path);\n-        assert_equal_text(&expected, &actual, &path);\n+        expect::ExpectFile::new(path).assert_eq(&actual)\n     }\n }\n \n@@ -259,29 +250,6 @@ fn rust_files_in_dir(dir: &Path) -> Vec<PathBuf> {\n     acc\n }\n \n-/// Asserts that `expected` and `actual` strings are equal. If they differ only\n-/// in trailing or leading whitespace the test won't fail and\n-/// the contents of `actual` will be written to the file located at `path`.\n-fn assert_equal_text(expected: &str, actual: &str, path: &Path) {\n-    if expected == actual {\n-        return;\n-    }\n-    let dir = project_dir();\n-    let pretty_path = path.strip_prefix(&dir).unwrap_or_else(|_| path);\n-    if expected.trim() == actual.trim() {\n-        println!(\"whitespace difference, rewriting\");\n-        println!(\"file: {}\\n\", pretty_path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    if env::var(\"UPDATE_EXPECT\").is_ok() {\n-        println!(\"rewriting {}\", pretty_path.display());\n-        fs::write(path, actual).unwrap();\n-        return;\n-    }\n-    assert_eq_text!(expected, actual, \"file: {}\", pretty_path.display());\n-}\n-\n /// Read file and normalize newlines.\n ///\n /// `rustc` seems to always normalize `\\r\\n` newlines to `\\n`:"}]}