{"sha": "11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYWUxYTY2OWM0ZGM5NDQxOTA1YjZiYjcwY2Y3OWVhZDJhNzZmMWM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-27T09:10:17Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-27T09:10:17Z"}, "message": "Merge #334\n\n334: use a::b::{self} should be fixed as use a::b instead of use a::b::self r=matklad a=gfreezy\n\n\n\nCo-authored-by: gfreezy <gfreezy@gmail.com>", "tree": {"sha": "ef52b8ddab2fbab066c152328fd4ddd9054e1dcc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef52b8ddab2fbab066c152328fd4ddd9054e1dcc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "html_url": "https://github.com/rust-lang/rust/commit/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "6bd92e66f1e8b828288516fb749b378087f9ab66", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bd92e66f1e8b828288516fb749b378087f9ab66", "html_url": "https://github.com/rust-lang/rust/commit/6bd92e66f1e8b828288516fb749b378087f9ab66"}, {"sha": "cd60998b9baa891b063fb3fa9e722922bc1d8fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd60998b9baa891b063fb3fa9e722922bc1d8fc3", "html_url": "https://github.com/rust-lang/rust/commit/cd60998b9baa891b063fb3fa9e722922bc1d8fc3"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "dcf8be5a7cb0d355721f4c6197e3d30265c6b290", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 41, "deletions": 11, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "patch": "@@ -129,22 +129,25 @@ fn check_unnecessary_braces_in_use_statement(file: &SourceFileNode) -> Vec<Diagn\n             if use_tree_list.use_trees().count() == 1 {\n                 let range = use_tree_list.syntax().range();\n                 // use_tree_list always has one child, so we use unwrap directly here.\n-                let to_replace = typing::single_use_tree(use_tree_list)\n-                    .unwrap()\n-                    .syntax()\n-                    .text()\n-                    .to_string();\n-                let mut edit_builder = TextEditBuilder::new();\n-                edit_builder.delete(range);\n-                edit_builder.insert(range.start(), to_replace);\n+                let single_use_tree: ast::UseTree = use_tree_list.use_trees().next().unwrap();\n+                let edit = text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n+                    single_use_tree,\n+                )\n+                .unwrap_or_else(|| {\n+                    let to_replace = single_use_tree.syntax().text().to_string();\n+                    let mut edit_builder = TextEditBuilder::new();\n+                    edit_builder.delete(range);\n+                    edit_builder.insert(range.start(), to_replace);\n+                    edit_builder.finish()\n+                });\n \n                 diagnostics.push(Diagnostic {\n                     range: range,\n                     msg: format!(\"Unnecessary braces in use statement\"),\n                     severity: Severity::WeakWarning,\n                     fix: Some(LocalEdit {\n                         label: \"Remove unnecessary braces\".to_string(),\n-                        edit: edit_builder.finish(),\n+                        edit: edit,\n                         cursor_position: None,\n                     }),\n                 })\n@@ -155,6 +158,28 @@ fn check_unnecessary_braces_in_use_statement(file: &SourceFileNode) -> Vec<Diagn\n     diagnostics\n }\n \n+fn text_edit_for_remove_unnecessary_braces_with_self_in_use_statement(\n+    single_use_tree: ast::UseTree,\n+) -> Option<TextEdit> {\n+    let use_tree_list_node = single_use_tree.syntax().parent()?;\n+    if single_use_tree\n+        .path()?\n+        .segment()?\n+        .syntax()\n+        .first_child()?\n+        .kind()\n+        == SyntaxKind::SELF_KW\n+    {\n+        let start = use_tree_list_node.prev_sibling()?.range().start();\n+        let end = use_tree_list_node.range().end();\n+        let range = TextRange::from_to(start, end);\n+        let mut edit_builder = TextEditBuilder::new();\n+        edit_builder.delete(range);\n+        return Some(edit_builder.finish());\n+    }\n+    None\n+}\n+\n pub fn syntax_tree(file: &SourceFileNode) -> String {\n     ::ra_syntax::utils::dump_tree(file.syntax())\n }\n@@ -191,8 +216,9 @@ pub fn find_node_at_offset<'a, N: AstNode<'a>>(\n \n #[cfg(test)]\n mod tests {\n+    use crate::test_utils::{add_cursor, assert_eq_dbg, assert_eq_text, extract_offset};\n+\n     use super::*;\n-    use crate::test_utils::{add_cursor, assert_eq_dbg, extract_offset, assert_eq_text};\n \n     #[test]\n     fn test_highlighting() {\n@@ -261,14 +287,18 @@ fn test_foo() {}\n use a;\n use {b};\n use a::{c};\n+use a::{self};\n use a::{c, d::e};\n use a::{c, d::{e}};\n fn main() {}\n \"#,\n         );\n         let diagnostics = check_unnecessary_braces_in_use_statement(&file);\n         assert_eq_dbg(\n-            \"[Diagnostic { range: [12; 15), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [12; 12), insert: \\\"b\\\" }, AtomTextEdit { delete: [12; 15), insert: \\\"\\\" }] }, cursor_position: None }) }, Diagnostic { range: [24; 27), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [24; 24), insert: \\\"c\\\" }, AtomTextEdit { delete: [24; 27), insert: \\\"\\\" }] }, cursor_position: None }) }, Diagnostic { range: [61; 64), msg: \\\"Unnecessary braces in use statement\\\", severity: WeakWarning, fix: Some(LocalEdit { label: \\\"Remove unnecessary braces\\\", edit: TextEdit { atoms: [AtomTextEdit { delete: [61; 61), insert: \\\"e\\\" }, AtomTextEdit { delete: [61; 64), insert: \\\"\\\" }] }, cursor_position: None }) }]\",\n+            r#\"[Diagnostic { range: [12; 15), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [12; 12), insert: \"b\" }, AtomTextEdit { delete: [12; 15), insert: \"\" }] }, cursor_position: None }) },\n+            Diagnostic { range: [24; 27), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [24; 24), insert: \"c\" }, AtomTextEdit { delete: [24; 27), insert: \"\" }] }, cursor_position: None }) },\n+            Diagnostic { range: [36; 42), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [34; 42), insert: \"\" }] }, cursor_position: None }) },\n+            Diagnostic { range: [76; 79), msg: \"Unnecessary braces in use statement\", severity: WeakWarning, fix: Some(LocalEdit { label: \"Remove unnecessary braces\", edit: TextEdit { atoms: [AtomTextEdit { delete: [76; 76), insert: \"e\" }, AtomTextEdit { delete: [76; 79), insert: \"\" }] }, cursor_position: None }) }]\"#,\n             &diagnostics,\n         )\n     }"}, {"sha": "f0d8dc7bbd7de81aabae05a3c142bb0c902c2936", "filename": "crates/ra_editor/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Fra_editor%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Ftyping.rs?ref=11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "patch": "@@ -254,7 +254,7 @@ fn join_single_use_tree(edit: &mut TextEditBuilder, node: SyntaxNodeRef) -> Opti\n     Some(())\n }\n \n-pub(crate) fn single_use_tree(tree_list: ast::UseTreeList) -> Option<ast::UseTree> {\n+fn single_use_tree(tree_list: ast::UseTreeList) -> Option<ast::UseTree> {\n     let sub_use_trees = tree_list.use_trees().count();\n     if sub_use_trees != 1 {\n         return None;"}, {"sha": "6f96b8120519242979940346c93a417067077144", "filename": "crates/tools/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Ftools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11ae1a669c4dc9441905b6bb70cf79ead2a76f1c/crates%2Ftools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftools%2Fsrc%2Flib.rs?ref=11ae1a669c4dc9441905b6bb70cf79ead2a76f1c", "patch": "@@ -29,7 +29,7 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n     let prefix = \"// \";\n     let comment_blocks = s\n         .lines()\n-        .map(str::trim_left)\n+        .map(str::trim_start)\n         .enumerate()\n         .group_by(|(_idx, line)| line.starts_with(prefix));\n "}]}