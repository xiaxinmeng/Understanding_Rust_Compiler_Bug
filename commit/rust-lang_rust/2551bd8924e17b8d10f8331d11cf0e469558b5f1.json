{"sha": "2551bd8924e17b8d10f8331d11cf0e469558b5f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NTFiZDg5MjRlMTdiOGQxMGY4MzMxZDExY2YwZTQ2OTU1OGI1ZjE=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T02:44:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-09-26T02:52:29Z"}, "message": "Reduce cyclomatic complexity of types::check_ty", "tree": {"sha": "1baaea62b5385b8bc28c8140d59a1d96b3040624", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1baaea62b5385b8bc28c8140d59a1d96b3040624"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2551bd8924e17b8d10f8331d11cf0e469558b5f1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlnJwO0ACgkQO79NPi73\nn5gvYhAAi2TPPjVHDg6GeOIu5nDE08NZRcun1lTmXMw5YLrWCV08xR68c88YotN3\n6M1KxXnN7qxVXTtU8nGr8ROI1j7q4q1xTTLUsG3Oh0d1EiOtuH/2Jbog9VbVQqt7\n1gZT/4+IjpVEQ9FCpEud7ZfneM1zN/Pd9uKB3BLQJAdNGTyQ5vOKYX+vQC1JtIyo\n+o8nzXbcqfU/DuePchDGcTy1dOBG+YH/RowUcA0I/tqqOmcVsLNLY0j2/zlGFma3\njrI0xsra8tCh7aFJY3edHKbwh+sFgpPOnMhVvtcyIbnIAJfq/sjiHgnizdbNZk0P\nbQ3rhZsY5AjWA1YqPtRNFdLi8BL13UEIpSAFeUC9zirkpINIuFyNhgzsHoqDCJ6r\nK6OuVpV2RlYhDvytHCh9aEd0Na0vH4ZJG5fsD0mb++tnU5586RA0ufyLJ4Zbbwpu\neA0oBIms7UilfU/lgWGRNTcDssfp+F6Aox4k6vvrnBFVAp1+rz773aH6slfVDjZe\nA5CpiUER9Y+8bRBDe5o9CEO8koI+Lj77UUjiXIoaaE43oSOREyv7tlusRunDsEJ8\nP2FBek2/D55Z1ykZplqc6Jo1O9l4KunSLaY9m1Uf8UmvkTY0su5QJR+SR3PoZDdK\nB78WIMe4NNRUSpekLu0ul4R3WAuH3QD1dnhvWDARMQdxaCof+lg=\n=kaRt\n-----END PGP SIGNATURE-----", "payload": "tree 1baaea62b5385b8bc28c8140d59a1d96b3040624\nparent fabb6b6645ec9f804b17707fb1e69ff09c15cbed\nauthor Manish Goregaokar <manishsmail@gmail.com> 1506393890 -0700\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1506394349 -0700\n\nReduce cyclomatic complexity of types::check_ty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2551bd8924e17b8d10f8331d11cf0e469558b5f1", "html_url": "https://github.com/rust-lang/rust/commit/2551bd8924e17b8d10f8331d11cf0e469558b5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2551bd8924e17b8d10f8331d11cf0e469558b5f1/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "url": "https://api.github.com/repos/rust-lang/rust/commits/fabb6b6645ec9f804b17707fb1e69ff09c15cbed", "html_url": "https://github.com/rust-lang/rust/commit/fabb6b6645ec9f804b17707fb1e69ff09c15cbed"}], "stats": {"total": 103, "additions": 55, "deletions": 48}, "files": [{"sha": "9d57527faee2a1dadbd23cd96a7827ea369ea94e", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 49, "deletions": 47, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/2551bd8924e17b8d10f8331d11cf0e469558b5f1/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2551bd8924e17b8d10f8331d11cf0e469558b5f1/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=2551bd8924e17b8d10f8331d11cf0e469558b5f1", "patch": "@@ -184,16 +184,16 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     check_ty(cx, ty, is_local);\n                     for ty in p.segments\n                         .iter()\n-                        .filter_map(|ref seg| seg.parameters.as_ref())\n-                        .flat_map(|ref params| params.types.iter())\n+                        .filter_map(|seg| seg.parameters.as_ref())\n+                        .flat_map(|params| params.types.iter())\n                     {\n                         check_ty(cx, ty, is_local);\n                     }\n                 },\n                 QPath::Resolved(None, ref p) => for ty in p.segments\n                     .iter()\n-                    .filter_map(|ref seg| seg.parameters.as_ref())\n-                    .flat_map(|ref params| params.types.iter())\n+                    .filter_map(|seg| seg.parameters.as_ref())\n+                    .flat_map(|params| params.types.iter())\n                 {\n                     check_ty(cx, ty, is_local);\n                 },\n@@ -207,49 +207,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                 },\n             }\n         },\n-        TyRptr(ref lt, MutTy { ref ty, ref mutbl }) => {\n-            match ty.node {\n-                TyPath(ref qpath) => {\n-                    let hir_id = cx.tcx.hir.node_to_hir_id(ty.id);\n-                    let def = cx.tables.qpath_def(qpath, hir_id);\n-                    if_let_chain! {[\n-                        let Some(def_id) = opt_def_id(def),\n-                        Some(def_id) == cx.tcx.lang_items().owned_box(),\n-                        let QPath::Resolved(None, ref path) = *qpath,\n-                        let [ref bx] = *path.segments,\n-                        let Some(ref params) = bx.parameters,\n-                        !params.parenthesized,\n-                        let [ref inner] = *params.types\n-                    ], {\n-                        if is_any_trait(inner) {\n-                            // Ignore `Box<Any>` types, see #1884 for details.\n-                            return;\n-                        }\n-\n-                        let ltopt = if lt.is_elided() {\n-                            \"\".to_owned()\n-                        } else {\n-                            format!(\"{} \", lt.name.name().as_str())\n-                        };\n-                        let mutopt = if *mutbl == Mutability::MutMutable {\n-                            \"mut \"\n-                        } else {\n-                            \"\"\n-                        };\n-                        span_lint_and_sugg(cx,\n-                            BORROWED_BOX,\n-                            ast_ty.span,\n-                            \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n-                            \"try\",\n-                            format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\"))\n-                        );\n-                        return; // don't recurse into the type\n-                    }};\n-                    check_ty(cx, ty, is_local);\n-                },\n-                _ => check_ty(cx, ty, is_local),\n-            }\n-        },\n+        TyRptr(ref lt, ref mut_ty) => check_ty_rptr(cx, ast_ty, is_local, lt, mut_ty),\n         // recurse\n         TySlice(ref ty) | TyArray(ref ty, _) | TyPtr(MutTy { ref ty, .. }) => check_ty(cx, ty, is_local),\n         TyTup(ref tys) => for ty in tys {\n@@ -259,6 +217,50 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n     }\n }\n \n+fn check_ty_rptr(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool, lt: &Lifetime, mut_ty: &MutTy) {\n+    match mut_ty.ty.node {\n+        TyPath(ref qpath) => {\n+            let hir_id = cx.tcx.hir.node_to_hir_id(mut_ty.ty.id);\n+            let def = cx.tables.qpath_def(qpath, hir_id);\n+            if_let_chain! {[\n+                let Some(def_id) = opt_def_id(def),\n+                Some(def_id) == cx.tcx.lang_items().owned_box(),\n+                let QPath::Resolved(None, ref path) = *qpath,\n+                let [ref bx] = *path.segments,\n+                let Some(ref params) = bx.parameters,\n+                !params.parenthesized,\n+                let [ref inner] = *params.types\n+            ], {\n+                if is_any_trait(inner) {\n+                    // Ignore `Box<Any>` types, see #1884 for details.\n+                    return;\n+                }\n+\n+                let ltopt = if lt.is_elided() {\n+                    \"\".to_owned()\n+                } else {\n+                    format!(\"{} \", lt.name.name().as_str())\n+                };\n+                let mutopt = if mut_ty.mutbl == Mutability::MutMutable {\n+                    \"mut \"\n+                } else {\n+                    \"\"\n+                };\n+                span_lint_and_sugg(cx,\n+                    BORROWED_BOX,\n+                    ast_ty.span,\n+                    \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n+                    \"try\",\n+                    format!(\"&{}{}{}\", ltopt, mutopt, &snippet(cx, inner.span, \"..\"))\n+                );\n+                return; // don't recurse into the type\n+            }};\n+            check_ty(cx, &mut_ty.ty, is_local);\n+        },\n+        _ => check_ty(cx, &mut_ty.ty, is_local),\n+    }\n+}\n+\n // Returns true if given type is `Any` trait.\n fn is_any_trait(t: &hir::Ty) -> bool {\n     if_let_chain! {["}, {"sha": "946df625cb611f5566f40da92b618347ff7f51bc", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2551bd8924e17b8d10f8331d11cf0e469558b5f1/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2551bd8924e17b8d10f8331d11cf0e469558b5f1/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=2551bd8924e17b8d10f8331d11cf0e469558b5f1", "patch": "@@ -59,7 +59,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UseSelf {\n             let Ty_::TyPath(QPath::Resolved(_, ref item_path)) = item_type.node,\n         ], {\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).parameters;\n-            if parameters.is_none() {\n+            let should_check = if let Some(ref params) = *parameters {\n+                !params.parenthesized && params.lifetimes.len() == 0 \n+            } else {\n+                true\n+            };\n+            if should_check {\n                 let visitor = &mut UseSelfVisitor {\n                     item_path: item_path,\n                     cx: cx,"}]}