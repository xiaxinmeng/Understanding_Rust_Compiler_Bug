{"sha": "98975a772a85fa37efabb8d940bc07d4030ba49d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OTc1YTc3MmE4NWZhMzdlZmFiYjhkOTQwYmMwN2Q0MDMwYmE0OWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T16:12:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T16:12:01Z"}, "message": "Merge #5626\n\n5626: Minor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e4243fc53feefa780ef0b1987ca5c92c6ea34090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4243fc53feefa780ef0b1987ca5c92c6ea34090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98975a772a85fa37efabb8d940bc07d4030ba49d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJELRCRBK7hj4Ov3rIwAAdHIIAABjQhLTypmyY3+n2Tnli/LE\n8erXYDy5vwNpGT+yMKe4yoa0h4PMZX4OiVYRByKCg9p5kdCg5Xxs+PE/575FiMbT\nSxdTL9IlXu3PUdeZgNDVcfjgzRrP6x1fXLAm5P8/q4hf2lxlbC1GaZ0H2UxvHI1G\nPlPM9YtpG9ZgJO5Ex7vneW5LsMPP4kZJduJBynavOcD+d0mSnEtcElPPvWSaHwo9\nkexpDpjwtpCvk5iBQopYEZ0jphvs5E4nOpmpshpXVdZLmDOQFNpyYcDhDy8gcmSo\nLORGWAKzd40hHLvP8RscTFYamccqTFgL0uYj1DLzWiYCzGMkyP1GdIFnIvKSTOI=\n=U2oQ\n-----END PGP SIGNATURE-----\n", "payload": "tree e4243fc53feefa780ef0b1987ca5c92c6ea34090\nparent c1e53d668f2f44656ffeca31f06b8ed380426b08\nparent 7980a7e19a679e0bc128f2c142609f7f4a197bf6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596211921 +0000\ncommitter GitHub <noreply@github.com> 1596211921 +0000\n\nMerge #5626\n\n5626: Minor r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98975a772a85fa37efabb8d940bc07d4030ba49d", "html_url": "https://github.com/rust-lang/rust/commit/98975a772a85fa37efabb8d940bc07d4030ba49d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98975a772a85fa37efabb8d940bc07d4030ba49d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1e53d668f2f44656ffeca31f06b8ed380426b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1e53d668f2f44656ffeca31f06b8ed380426b08", "html_url": "https://github.com/rust-lang/rust/commit/c1e53d668f2f44656ffeca31f06b8ed380426b08"}, {"sha": "7980a7e19a679e0bc128f2c142609f7f4a197bf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7980a7e19a679e0bc128f2c142609f7f4a197bf6", "html_url": "https://github.com/rust-lang/rust/commit/7980a7e19a679e0bc128f2c142609f7f4a197bf6"}], "stats": {"total": 147, "additions": 68, "deletions": 79}, "files": [{"sha": "b83c944049c75555ab328b3c10716d4606265cb4", "filename": "crates/ra_assists/src/handlers/change_return_type_to_result.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_return_type_to_result.rs?ref=98975a772a85fa37efabb8d940bc07d4030ba49d", "patch": "@@ -241,7 +241,6 @@ fn get_tail_expr_from_block(expr: &Expr) -> Option<Vec<NodeType>> {\n         Expr::ArrayExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::ParenExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::PathExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n-        Expr::Label(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::RecordExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::IndexExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),\n         Expr::MethodCallExpr(expr) => Some(vec![NodeType::Leaf(expr.syntax().clone())]),"}, {"sha": "0cacc63efb99d533c14fe9b95fd86c364793d928", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=98975a772a85fa37efabb8d940bc07d4030ba49d", "patch": "@@ -569,9 +569,6 @@ impl ExprCollector<'_> {\n                     }\n                 }\n             }\n-\n-            // FIXME implement HIR for these:\n-            ast::Expr::Label(_e) => self.alloc_expr(Expr::Missing, syntax_ptr),\n         }\n     }\n "}, {"sha": "e049548c9933e025cad9e5d4b0dc8d5ec5a295d6", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 62, "deletions": 68, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98975a772a85fa37efabb8d940bc07d4030ba49d/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=98975a772a85fa37efabb8d940bc07d4030ba49d", "patch": "@@ -624,6 +624,19 @@ impl CastExpr {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ClosureExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::AttrsOwner for ClosureExpr {}\n+impl ClosureExpr {\n+    pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n+    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n+    pub fn move_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![move]) }\n+    pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n+    pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n+    pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ContinueExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -690,28 +703,6 @@ impl IndexExpr {\n     pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Label {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Label {\n-    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n-        support::token(&self.syntax, T![lifetime])\n-    }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ClosureExpr {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl ast::AttrsOwner for ClosureExpr {}\n-impl ClosureExpr {\n-    pub fn static_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![static]) }\n-    pub fn async_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![async]) }\n-    pub fn move_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![move]) }\n-    pub fn param_list(&self) -> Option<ParamList> { support::child(&self.syntax) }\n-    pub fn ret_type(&self) -> Option<RetType> { support::child(&self.syntax) }\n-    pub fn body(&self) -> Option<Expr> { support::child(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct LoopExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -835,6 +826,15 @@ impl WhileExpr {\n     pub fn condition(&self) -> Option<Condition> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Label {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Label {\n+    pub fn lifetime_token(&self) -> Option<SyntaxToken> {\n+        support::token(&self.syntax, T![lifetime])\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RecordExprFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1337,14 +1337,13 @@ pub enum Expr {\n     BreakExpr(BreakExpr),\n     CallExpr(CallExpr),\n     CastExpr(CastExpr),\n+    ClosureExpr(ClosureExpr),\n     ContinueExpr(ContinueExpr),\n     EffectExpr(EffectExpr),\n     FieldExpr(FieldExpr),\n     ForExpr(ForExpr),\n     IfExpr(IfExpr),\n     IndexExpr(IndexExpr),\n-    Label(Label),\n-    ClosureExpr(ClosureExpr),\n     Literal(Literal),\n     LoopExpr(LoopExpr),\n     MacroCall(MacroCall),\n@@ -2017,6 +2016,17 @@ impl AstNode for CastExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for ClosureExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == CLOSURE_EXPR }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ContinueExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == CONTINUE_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2083,28 +2093,6 @@ impl AstNode for IndexExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Label {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n-impl AstNode for ClosureExpr {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == CLOSURE_EXPR }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for LoopExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == LOOP_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2248,6 +2236,17 @@ impl AstNode for WhileExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for Label {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LABEL }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for RecordExprFieldList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_EXPR_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3086,6 +3085,9 @@ impl From<CallExpr> for Expr {\n impl From<CastExpr> for Expr {\n     fn from(node: CastExpr) -> Expr { Expr::CastExpr(node) }\n }\n+impl From<ClosureExpr> for Expr {\n+    fn from(node: ClosureExpr) -> Expr { Expr::ClosureExpr(node) }\n+}\n impl From<ContinueExpr> for Expr {\n     fn from(node: ContinueExpr) -> Expr { Expr::ContinueExpr(node) }\n }\n@@ -3104,12 +3106,6 @@ impl From<IfExpr> for Expr {\n impl From<IndexExpr> for Expr {\n     fn from(node: IndexExpr) -> Expr { Expr::IndexExpr(node) }\n }\n-impl From<Label> for Expr {\n-    fn from(node: Label) -> Expr { Expr::Label(node) }\n-}\n-impl From<ClosureExpr> for Expr {\n-    fn from(node: ClosureExpr) -> Expr { Expr::ClosureExpr(node) }\n-}\n impl From<Literal> for Expr {\n     fn from(node: Literal) -> Expr { Expr::Literal(node) }\n }\n@@ -3159,8 +3155,8 @@ impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             ARRAY_EXPR | AWAIT_EXPR | BIN_EXPR | BLOCK_EXPR | BOX_EXPR | BREAK_EXPR | CALL_EXPR\n-            | CAST_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR | IF_EXPR\n-            | INDEX_EXPR | LABEL | CLOSURE_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n+            | CAST_EXPR | CLOSURE_EXPR | CONTINUE_EXPR | EFFECT_EXPR | FIELD_EXPR | FOR_EXPR\n+            | IF_EXPR | INDEX_EXPR | LITERAL | LOOP_EXPR | MACRO_CALL | MATCH_EXPR\n             | METHOD_CALL_EXPR | PAREN_EXPR | PATH_EXPR | PREFIX_EXPR | RANGE_EXPR\n             | RECORD_EXPR | REF_EXPR | RETURN_EXPR | TRY_EXPR | TUPLE_EXPR | WHILE_EXPR => true,\n             _ => false,\n@@ -3176,14 +3172,13 @@ impl AstNode for Expr {\n             BREAK_EXPR => Expr::BreakExpr(BreakExpr { syntax }),\n             CALL_EXPR => Expr::CallExpr(CallExpr { syntax }),\n             CAST_EXPR => Expr::CastExpr(CastExpr { syntax }),\n+            CLOSURE_EXPR => Expr::ClosureExpr(ClosureExpr { syntax }),\n             CONTINUE_EXPR => Expr::ContinueExpr(ContinueExpr { syntax }),\n             EFFECT_EXPR => Expr::EffectExpr(EffectExpr { syntax }),\n             FIELD_EXPR => Expr::FieldExpr(FieldExpr { syntax }),\n             FOR_EXPR => Expr::ForExpr(ForExpr { syntax }),\n             IF_EXPR => Expr::IfExpr(IfExpr { syntax }),\n             INDEX_EXPR => Expr::IndexExpr(IndexExpr { syntax }),\n-            LABEL => Expr::Label(Label { syntax }),\n-            CLOSURE_EXPR => Expr::ClosureExpr(ClosureExpr { syntax }),\n             LITERAL => Expr::Literal(Literal { syntax }),\n             LOOP_EXPR => Expr::LoopExpr(LoopExpr { syntax }),\n             MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n@@ -3213,14 +3208,13 @@ impl AstNode for Expr {\n             Expr::BreakExpr(it) => &it.syntax,\n             Expr::CallExpr(it) => &it.syntax,\n             Expr::CastExpr(it) => &it.syntax,\n+            Expr::ClosureExpr(it) => &it.syntax,\n             Expr::ContinueExpr(it) => &it.syntax,\n             Expr::EffectExpr(it) => &it.syntax,\n             Expr::FieldExpr(it) => &it.syntax,\n             Expr::ForExpr(it) => &it.syntax,\n             Expr::IfExpr(it) => &it.syntax,\n             Expr::IndexExpr(it) => &it.syntax,\n-            Expr::Label(it) => &it.syntax,\n-            Expr::ClosureExpr(it) => &it.syntax,\n             Expr::Literal(it) => &it.syntax,\n             Expr::LoopExpr(it) => &it.syntax,\n             Expr::MacroCall(it) => &it.syntax,\n@@ -3715,6 +3709,11 @@ impl std::fmt::Display for CastExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for ClosureExpr {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ContinueExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3745,16 +3744,6 @@ impl std::fmt::Display for IndexExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Label {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n-impl std::fmt::Display for ClosureExpr {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for LoopExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3820,6 +3809,11 @@ impl std::fmt::Display for WhileExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for Label {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for RecordExprFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "8edabc3b90937951b1f7e245a1635a9620240aae", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98975a772a85fa37efabb8d940bc07d4030ba49d/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/98975a772a85fa37efabb8d940bc07d4030ba49d/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=98975a772a85fa37efabb8d940bc07d4030ba49d", "patch": "@@ -215,14 +215,13 @@ Expr =\n | BreakExpr\n | CallExpr\n | CastExpr\n+| ClosureExpr\n | ContinueExpr\n | EffectExpr\n | FieldExpr\n | ForExpr\n | IfExpr\n | IndexExpr\n-| Label\n-| ClosureExpr\n | Literal\n | LoopExpr\n | MacroCall\n@@ -340,7 +339,7 @@ ForExpr =\n \n WhileExpr =\n   Attr* Label? 'while' Condition\n-  loop_body:BlockExpr?\n+  loop_body:BlockExpr\n \n Label =\n   'lifetime'\n@@ -418,13 +417,13 @@ SliceType =\n   '[' Type ']'\n \n InferType =\n-   '_'\n+  '_'\n \n FnPointerType =\n-   'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n+  'const'? 'async'? 'unsafe'? Abi? 'fn' ParamList RetType?\n \n ForType =\n-   'for' GenericParamList Type\n+  'for' GenericParamList Type\n \n ImplTraitType =\n   'impl' TypeBoundList\n@@ -433,7 +432,7 @@ DynTraitType =\n   'dyn' TypeBoundList\n \n TypeBoundList =\n-   bounds:(TypeBound ('+' TypeBound)* '+'?)\n+  bounds:(TypeBound ('+' TypeBound)* '+'?)\n \n TypeBound =\n   'lifetime'"}]}