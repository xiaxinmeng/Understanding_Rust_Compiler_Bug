{"sha": "7b1187968ce5385758996ec7765d886d3a659d07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMTE4Nzk2OGNlNTM4NTc1ODk5NmVjNzc2NWQ4ODZkM2E2NTlkMDc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-27T18:31:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-27T18:31:17Z"}, "message": "expand unaligned_references test", "tree": {"sha": "bda60ddc4d664987f8acb993413811c9c782e2bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bda60ddc4d664987f8acb993413811c9c782e2bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b1187968ce5385758996ec7765d886d3a659d07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b1187968ce5385758996ec7765d886d3a659d07", "html_url": "https://github.com/rust-lang/rust/commit/7b1187968ce5385758996ec7765d886d3a659d07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b1187968ce5385758996ec7765d886d3a659d07/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "783139bd8fc3b94fac9a1bf81bba2c506e8221b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/783139bd8fc3b94fac9a1bf81bba2c506e8221b6", "html_url": "https://github.com/rust-lang/rust/commit/783139bd8fc3b94fac9a1bf81bba2c506e8221b6"}], "stats": {"total": 45, "additions": 34, "deletions": 11}, "files": [{"sha": "c4e5d065643c82890cd44a5bd8cd71264d339c43", "filename": "src/test/ui/lint/unaligned_references.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7b1187968ce5385758996ec7765d886d3a659d07/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b1187968ce5385758996ec7765d886d3a659d07/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.rs?ref=7b1187968ce5385758996ec7765d886d3a659d07", "patch": "@@ -2,20 +2,27 @@\n \n #[repr(packed)]\n pub struct Good {\n-    data: &'static u32,\n-    data2: [&'static u32; 2],\n+    data: u64,\n+    ptr: &'static u64,\n+    data2: [u64; 2],\n     aligned: [u8; 32],\n }\n \n fn main() {\n     unsafe {\n-        let good = Good { data: &0, data2: [&0, &0], aligned: [0; 32] };\n+        let good = Good { data: 0, ptr: &0, data2: [0, 0], aligned: [0; 32] };\n \n+        let _ = &good.ptr; //~ ERROR reference to packed field\n         let _ = &good.data; //~ ERROR reference to packed field\n+        // Error even when turned into raw pointer immediately.\n         let _ = &good.data as *const _; //~ ERROR reference to packed field\n         let _: *const _ = &good.data; //~ ERROR reference to packed field\n+        // Error on method call.\n+        let _ = good.data.clone(); //~ ERROR reference to packed field\n+        // Error for nested fields.\n         let _ = &good.data2[0]; //~ ERROR reference to packed field\n-        let _ = &*good.data; // ok, behind a pointer\n+\n+        let _ = &*good.ptr; // ok, behind a pointer\n         let _ = &good.aligned; // ok, has align 1\n         let _ = &good.aligned[2]; // ok, has align 1\n     }"}, {"sha": "8786b9c05db271e5e16e252d9cc7305fb5394f76", "filename": "src/test/ui/lint/unaligned_references.stderr", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7b1187968ce5385758996ec7765d886d3a659d07/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b1187968ce5385758996ec7765d886d3a659d07/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funaligned_references.stderr?ref=7b1187968ce5385758996ec7765d886d3a659d07", "patch": "@@ -1,8 +1,8 @@\n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:14:17\n+  --> $DIR/unaligned_references.rs:15:17\n    |\n-LL |         let _ = &good.data;\n-   |                 ^^^^^^^^^^\n+LL |         let _ = &good.ptr;\n+   |                 ^^^^^^^^^\n    |\n note: the lint level is defined here\n   --> $DIR/unaligned_references.rs:1:9\n@@ -12,28 +12,44 @@ LL | #![deny(unaligned_references)]\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:15:17\n+  --> $DIR/unaligned_references.rs:16:17\n+   |\n+LL |         let _ = &good.data;\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:18:17\n    |\n LL |         let _ = &good.data as *const _;\n    |                 ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:16:27\n+  --> $DIR/unaligned_references.rs:19:27\n    |\n LL |         let _: *const _ = &good.data;\n    |                           ^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n error: reference to packed field is unaligned\n-  --> $DIR/unaligned_references.rs:17:17\n+  --> $DIR/unaligned_references.rs:21:17\n+   |\n+LL |         let _ = good.data.clone();\n+   |                 ^^^^^^^^^\n+   |\n+   = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n+\n+error: reference to packed field is unaligned\n+  --> $DIR/unaligned_references.rs:23:17\n    |\n LL |         let _ = &good.data2[0];\n    |                 ^^^^^^^^^^^^^^\n    |\n    = note: fields of packed structs are not properly aligned, and creating a misaligned reference is undefined behavior (even if that reference is never dereferenced)\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n "}]}