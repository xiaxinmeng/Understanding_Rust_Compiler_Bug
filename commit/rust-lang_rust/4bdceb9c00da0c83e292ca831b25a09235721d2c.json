{"sha": "4bdceb9c00da0c83e292ca831b25a09235721d2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZGNlYjljMDBkYTBjODNlMjkyY2E4MzFiMjVhMDkyMzU3MjFkMmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-19T19:42:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-19T19:42:48Z"}, "message": "auto merge of #8459 : thestinger/rust/checked, r=graydon", "tree": {"sha": "ac8f7ab2780e1124194fac4b2dfa89e7270cabb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac8f7ab2780e1124194fac4b2dfa89e7270cabb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bdceb9c00da0c83e292ca831b25a09235721d2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bdceb9c00da0c83e292ca831b25a09235721d2c", "html_url": "https://github.com/rust-lang/rust/commit/4bdceb9c00da0c83e292ca831b25a09235721d2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bdceb9c00da0c83e292ca831b25a09235721d2c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2246d56e7149402f18041d05e3c0ecf598671904", "url": "https://api.github.com/repos/rust-lang/rust/commits/2246d56e7149402f18041d05e3c0ecf598671904", "html_url": "https://github.com/rust-lang/rust/commit/2246d56e7149402f18041d05e3c0ecf598671904"}, {"sha": "b244911398c334b02ccf260c557684c4294077ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/b244911398c334b02ccf260c557684c4294077ec", "html_url": "https://github.com/rust-lang/rust/commit/b244911398c334b02ccf260c557684c4294077ec"}], "stats": {"total": 44, "additions": 42, "deletions": 2}, "files": [{"sha": "0144f926534d029ce008256b1b4b17bd43495c68", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=4bdceb9c00da0c83e292ca831b25a09235721d2c", "patch": "@@ -17,7 +17,7 @@ macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n #[allow(non_uppercase_statics)];\n \n use num::{ToStrRadix, FromStrRadix};\n-use num::{Zero, One, strconv};\n+use num::{CheckedDiv, Zero, One, strconv};\n use prelude::*;\n use str;\n \n@@ -29,6 +29,17 @@ pub static bytes : uint = ($bits / 8);\n pub static min_value: $T = (-1 as $T) << (bits - 1);\n pub static max_value: $T = min_value - 1 as $T;\n \n+impl CheckedDiv for $T {\n+    #[inline]\n+    fn checked_div(&self, v: &$T) -> Option<$T> {\n+        if *v == 0 || (*self == min_value && *v == -1) {\n+            None\n+        } else {\n+            Some(self / *v)\n+        }\n+    }\n+}\n+\n enum Range { Closed, HalfOpen }\n \n #[inline]\n@@ -551,6 +562,7 @@ mod tests {\n     use super::*;\n     use prelude::*;\n \n+    use int;\n     use i16;\n     use i32;\n     use i64;\n@@ -921,6 +933,13 @@ mod tests {\n     fn test_range_step_zero_step() {\n         do range_step(0,10,0) |_i| { true };\n     }\n+\n+    #[test]\n+    fn test_signed_checked_div() {\n+        assert_eq!(10i.checked_div(&2), Some(5));\n+        assert_eq!(5i.checked_div(&0), None);\n+        assert_eq!(int::min_value.checked_div(&-1), None);\n+    }\n }\n \n }))"}, {"sha": "fbb8913fbfa89577e0acd368e1a9bd97e3a283ed", "filename": "src/libstd/num/num.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fnum.rs?ref=4bdceb9c00da0c83e292ca831b25a09235721d2c", "patch": "@@ -892,6 +892,10 @@ impl CheckedMul for uint {\n     }\n }\n \n+pub trait CheckedDiv: Div<Self, Self> {\n+    fn checked_div(&self, v: &Self) -> Option<Self>;\n+}\n+\n /// Helper function for testing numeric operations\n #[cfg(test)]\n pub fn test_num<T:Num + NumCast>(ten: T, two: T) {"}, {"sha": "524b035c9f30928dff46665f948ae2050ea5278a", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bdceb9c00da0c83e292ca831b25a09235721d2c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=4bdceb9c00da0c83e292ca831b25a09235721d2c", "patch": "@@ -18,7 +18,7 @@ macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n \n use num::BitCount;\n use num::{ToStrRadix, FromStrRadix};\n-use num::{Zero, One, strconv};\n+use num::{CheckedDiv, Zero, One, strconv};\n use prelude::*;\n use str;\n \n@@ -30,6 +30,17 @@ pub static bytes : uint = ($bits / 8);\n pub static min_value: $T = 0 as $T;\n pub static max_value: $T = 0 as $T - 1 as $T;\n \n+impl CheckedDiv for $T {\n+    #[inline]\n+    fn checked_div(&self, v: &$T) -> Option<$T> {\n+        if *v == 0 {\n+            None\n+        } else {\n+            Some(self / *v)\n+        }\n+    }\n+}\n+\n enum Range { Closed, HalfOpen }\n \n #[inline]\n@@ -694,6 +705,12 @@ mod tests {\n     fn test_range_step_zero_step_down() {\n         do range_step(0,-10,0) |_i| { true };\n     }\n+\n+    #[test]\n+    fn test_unsigned_checked_div() {\n+        assert_eq!(10u.checked_div(&2), Some(5));\n+        assert_eq!(5u.checked_div(&0), None);\n+    }\n }\n \n }))"}]}