{"sha": "86940bed983909f092e3333a018bfd48d40f394a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2OTQwYmVkOTgzOTA5ZjA5MmUzMzMzYTAxOGJmZDQ4ZDQwZjM5NGE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-22T09:26:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-22T09:26:14Z"}, "message": "Rollup merge of #82382 - camelid:remove-fake_def_ids-refcell, r=jyn514\n\nrustdoc: Remove `fake_def_ids` RefCell", "tree": {"sha": "2b2b5d20220fd9ec675bfe81e0a7d80a0848216c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2b5d20220fd9ec675bfe81e0a7d80a0848216c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86940bed983909f092e3333a018bfd48d40f394a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgM3i2CRBK7hj4Ov3rIwAAdHIIAAAEHFZ5Gkek+m7BkOTBGimD\nsCBuYFSLDqYbiTpAZ5Y7iGaZXY8wEZ13qToVIhMwp/UBTDWVXnobu6KsimTHPDl8\nEeB4MQW8cYnwI03k6rQfJaeMNUEvOREfpQo4BsEp1xJmkqy8r0dIRmRiW0ASP9Ws\neJQiDzUjTAwa4Qrw7h5cqOqe5Xrb41c6h2Aj8qZHtzNifQQR75tlRa+hfG/u1+Ww\n0CD1178oYWso2yE+MXAgfxqzTMucnMYY7OqxYyfeuP5Hirq6uYyuBZVZzInNq7At\nLzNxlKbHTdV6rL3By2zcqyVaDa58oKw3mp39ZKx5NgF4zalamhSgu7f9QDOFHj4=\n=NFf6\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b2b5d20220fd9ec675bfe81e0a7d80a0848216c\nparent 50a2de233af392083ae3a1a8284028b352602c00\nparent 45673e2d443a7bc02469281c138b833c4d12528e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613985974 +0900\ncommitter GitHub <noreply@github.com> 1613985974 +0900\n\nRollup merge of #82382 - camelid:remove-fake_def_ids-refcell, r=jyn514\n\nrustdoc: Remove `fake_def_ids` RefCell\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86940bed983909f092e3333a018bfd48d40f394a", "html_url": "https://github.com/rust-lang/rust/commit/86940bed983909f092e3333a018bfd48d40f394a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86940bed983909f092e3333a018bfd48d40f394a/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a2de233af392083ae3a1a8284028b352602c00", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a2de233af392083ae3a1a8284028b352602c00", "html_url": "https://github.com/rust-lang/rust/commit/50a2de233af392083ae3a1a8284028b352602c00"}, {"sha": "45673e2d443a7bc02469281c138b833c4d12528e", "url": "https://api.github.com/repos/rust-lang/rust/commits/45673e2d443a7bc02469281c138b833c4d12528e", "html_url": "https://github.com/rust-lang/rust/commit/45673e2d443a7bc02469281c138b833c4d12528e"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "dbf202a7321083b8139a8d9b983b60affbbd6e5b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86940bed983909f092e3333a018bfd48d40f394a/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86940bed983909f092e3333a018bfd48d40f394a/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=86940bed983909f092e3333a018bfd48d40f394a", "patch": "@@ -64,7 +64,7 @@ crate struct DocContext<'tcx> {\n     crate ct_substs: RefCell<FxHashMap<DefId, clean::Constant>>,\n     /// Table synthetic type parameter for `impl Trait` in argument position -> bounds\n     crate impl_trait_bounds: RefCell<FxHashMap<ImplTraitParam, Vec<clean::GenericBound>>>,\n-    crate fake_def_ids: RefCell<FxHashMap<CrateNum, DefIndex>>,\n+    crate fake_def_ids: FxHashMap<CrateNum, DefIndex>,\n     /// Auto-trait or blanket impls processed so far, as `(self_ty, trait_def_id)`.\n     // FIXME(eddyb) make this a `ty::TraitRef<'tcx>` set.\n     crate generated_synthetics: RefCell<FxHashSet<(Ty<'tcx>, DefId)>>,\n@@ -137,16 +137,14 @@ impl<'tcx> DocContext<'tcx> {\n     /// [`RefCell`]: std::cell::RefCell\n     /// [`Debug`]: std::fmt::Debug\n     /// [`clean::Item`]: crate::clean::types::Item\n-    crate fn next_def_id(&self, crate_num: CrateNum) -> DefId {\n-        let mut fake_ids = self.fake_def_ids.borrow_mut();\n-\n-        let def_index = match fake_ids.entry(crate_num) {\n+    crate fn next_def_id(&mut self, crate_num: CrateNum) -> DefId {\n+        let def_index = match self.fake_def_ids.entry(crate_num) {\n             Entry::Vacant(e) => {\n                 let num_def_idx = {\n                     let num_def_idx = if crate_num == LOCAL_CRATE {\n                         self.tcx.hir().definitions().def_path_table().num_def_ids()\n                     } else {\n-                        self.enter_resolver(|r| r.cstore().num_def_ids(crate_num))\n+                        self.resolver.borrow_mut().access(|r| r.cstore().num_def_ids(crate_num))\n                     };\n \n                     DefIndex::from_usize(num_def_idx)"}]}