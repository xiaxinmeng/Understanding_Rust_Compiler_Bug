{"sha": "a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1YjYwM2IxYmYxZTlkNzQyMjdhOGEzYjJmNzNhY2Q1NThiOTUyZWY=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-01-31T21:27:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-02-02T19:40:42Z"}, "message": "Build libbacktrace/jemalloc only when their timestamps are older than sources", "tree": {"sha": "ff9d004f3566a87c49ca157f778e40007625c993", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff9d004f3566a87c49ca157f778e40007625c993"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "html_url": "https://github.com/rust-lang/rust/commit/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0253304ea9d40103dc7d1055b7fa090b48781f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0253304ea9d40103dc7d1055b7fa090b48781f8", "html_url": "https://github.com/rust-lang/rust/commit/c0253304ea9d40103dc7d1055b7fa090b48781f8"}], "stats": {"total": 165, "additions": 94, "deletions": 71}, "files": [{"sha": "ec45f45ccb608fb28653d955706de6f2a7360244", "filename": "src/Cargo.lock", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -61,6 +61,9 @@ dependencies = [\n [[package]]\n name = \"build_helper\"\n version = \"0.1.0\"\n+dependencies = [\n+ \"filetime 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n \n [[package]]\n name = \"cargotest\""}, {"sha": "776b91028a1a3a5ea0fb780ca9e041e19c111a10", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -21,10 +21,10 @@ use std::fs::{self, File};\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use build_helper::output;\n+use build_helper::{output, mtime};\n use filetime::FileTime;\n \n-use util::{exe, libdir, mtime, is_dylib, copy};\n+use util::{exe, libdir, is_dylib, copy};\n use {Build, Compiler, Mode};\n \n /// Build the standard library."}, {"sha": "3dc9b8375550c1b8021d4489183fea2109b8e9c6", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -22,7 +22,8 @@ use std::io::prelude::*;\n use std::process::Command;\n \n use {Build, Compiler, Mode};\n-use util::{up_to_date, cp_r};\n+use util::cp_r;\n+use build_helper::up_to_date;\n \n /// Invoke `rustbook` as compiled in `stage` for `target` for the doc book\n /// `name` into the `out` path."}, {"sha": "df1218752d1c9bb52a3263796b01fbd5878ef43e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -66,6 +66,7 @@\n \n #![deny(warnings)]\n \n+#[macro_use]\n extern crate build_helper;\n extern crate cmake;\n extern crate filetime;\n@@ -83,24 +84,9 @@ use std::fs::{self, File};\n use std::path::{Component, PathBuf, Path};\n use std::process::Command;\n \n-use build_helper::{run_silent, output};\n+use build_helper::{run_silent, output, mtime};\n \n-use util::{exe, mtime, libdir, add_lib_path};\n-\n-/// A helper macro to `unwrap` a result except also print out details like:\n-///\n-/// * The file/line of the panic\n-/// * The expression that failed\n-/// * The error itself\n-///\n-/// This is currently used judiciously throughout the build system rather than\n-/// using a `Result` with `try!`, but this may change one day...\n-macro_rules! t {\n-    ($e:expr) => (match $e {\n-        Ok(e) => e,\n-        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n-    })\n-}\n+use util::{exe, libdir, add_lib_path};\n \n mod cc;\n mod channel;"}, {"sha": "21fc61cc81484da74ba0eafa9b76ed8ba2e14be8", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -28,7 +28,8 @@ use cmake;\n use gcc;\n \n use Build;\n-use util::{self, up_to_date};\n+use util;\n+use build_helper::up_to_date;\n \n /// Compile LLVM for `target`.\n pub fn llvm(build: &Build, target: &str) {"}, {"sha": "520514f5fc95a77871ad6db413d9b30e5ad56fd8", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -20,8 +20,6 @@ use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::time::Instant;\n \n-use filetime::FileTime;\n-\n /// Returns the `name` as the filename of a static library for `target`.\n pub fn staticlib(name: &str, target: &str) -> String {\n     if target.contains(\"windows\") {\n@@ -31,13 +29,6 @@ pub fn staticlib(name: &str, target: &str) -> String {\n     }\n }\n \n-/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n-pub fn mtime(path: &Path) -> FileTime {\n-    fs::metadata(path).map(|f| {\n-        FileTime::from_last_modification_time(&f)\n-    }).unwrap_or(FileTime::zero())\n-}\n-\n /// Copies a file from `src` to `dst`, attempting to use hard links and then\n /// falling back to an actually filesystem copy if necessary.\n pub fn copy(src: &Path, dst: &Path) {\n@@ -132,34 +123,6 @@ pub fn add_lib_path(path: Vec<PathBuf>, cmd: &mut Command) {\n     cmd.env(dylib_path_var(), t!(env::join_paths(list)));\n }\n \n-/// Returns whether `dst` is up to date given that the file or files in `src`\n-/// are used to generate it.\n-///\n-/// Uses last-modified time checks to verify this.\n-pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n-    let threshold = mtime(dst);\n-    let meta = match fs::metadata(src) {\n-        Ok(meta) => meta,\n-        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n-    };\n-    if meta.is_dir() {\n-        dir_up_to_date(src, &threshold)\n-    } else {\n-        FileTime::from_last_modification_time(&meta) <= threshold\n-    }\n-}\n-\n-fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n-    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n-        let meta = t!(e.metadata());\n-        if meta.is_dir() {\n-            dir_up_to_date(&e.path(), threshold)\n-        } else {\n-            FileTime::from_last_modification_time(&meta) < *threshold\n-        }\n-    })\n-}\n-\n /// Returns the environment variable which the dynamic library lookup path\n /// resides in for this platform.\n pub fn dylib_path_var() -> &'static str {"}, {"sha": "f8ade0616a577a44f7bb0c970d855a99f3b58937", "filename": "src/build_helper/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbuild_helper%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbuild_helper%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2FCargo.toml?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -6,3 +6,6 @@ authors = [\"The Rust Project Developers\"]\n [lib]\n name = \"build_helper\"\n path = \"lib.rs\"\n+\n+[dependencies]\n+filetime = \"0.1\""}, {"sha": "3dfd29380828669ec75eb22b563baf3b6c91f5e6", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -10,9 +10,30 @@\n \n #![deny(warnings)]\n \n+extern crate filetime;\n+\n+use std::fs;\n use std::process::{Command, Stdio};\n use std::path::{Path, PathBuf};\n \n+use filetime::FileTime;\n+\n+/// A helper macro to `unwrap` a result except also print out details like:\n+///\n+/// * The file/line of the panic\n+/// * The expression that failed\n+/// * The error itself\n+///\n+/// This is currently used judiciously throughout the build system rather than\n+/// using a `Result` with `try!`, but this may change one day...\n+#[macro_export]\n+macro_rules! t {\n+    ($e:expr) => (match $e {\n+        Ok(e) => e,\n+        Err(e) => panic!(\"{} failed with {}\", stringify!($e), e),\n+    })\n+}\n+\n pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n     run_silent(cmd);\n@@ -103,6 +124,41 @@ pub fn rerun_if_changed_anything_in_dir(dir: &Path) {\n     }\n }\n \n+/// Returns the last-modified time for `path`, or zero if it doesn't exist.\n+pub fn mtime(path: &Path) -> FileTime {\n+    fs::metadata(path).map(|f| {\n+        FileTime::from_last_modification_time(&f)\n+    }).unwrap_or(FileTime::zero())\n+}\n+\n+/// Returns whether `dst` is up to date given that the file or files in `src`\n+/// are used to generate it.\n+///\n+/// Uses last-modified time checks to verify this.\n+pub fn up_to_date(src: &Path, dst: &Path) -> bool {\n+    let threshold = mtime(dst);\n+    let meta = match fs::metadata(src) {\n+        Ok(meta) => meta,\n+        Err(e) => panic!(\"source {:?} failed to get metadata: {}\", src, e),\n+    };\n+    if meta.is_dir() {\n+        dir_up_to_date(src, &threshold)\n+    } else {\n+        FileTime::from_last_modification_time(&meta) <= threshold\n+    }\n+}\n+\n+fn dir_up_to_date(src: &Path, threshold: &FileTime) -> bool {\n+    t!(fs::read_dir(src)).map(|e| t!(e)).all(|e| {\n+        let meta = t!(e.metadata());\n+        if meta.is_dir() {\n+            dir_up_to_date(&e.path(), threshold)\n+        } else {\n+            FileTime::from_last_modification_time(&meta) < *threshold\n+        }\n+    })\n+}\n+\n fn fail(s: &str) -> ! {\n     println!(\"\\n\\n{}\\n\\n\", s);\n     std::process::exit(1);"}, {"sha": "7e616c0ff27cfb961e3feca8f629ef8f150be366", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -10,13 +10,15 @@\n \n #![deny(warnings)]\n \n+#[macro_use]\n extern crate build_helper;\n extern crate gcc;\n \n-use std::{env, fs};\n-use std::path::PathBuf;\n+use std::env;\n+use std::fs::{self, File};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir};\n+use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n@@ -69,12 +71,13 @@ fn main() {\n     } else if !target.contains(\"windows\") && !target.contains(\"musl\") {\n         println!(\"cargo:rustc-link-lib=pthread\");\n     }\n-    if !cfg!(stage0) && target == host {\n+    let src_dir = env::current_dir().unwrap().join(\"../jemalloc\");\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n+    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n         return\n     }\n \n-    let src_dir = env::current_dir().unwrap().join(\"../jemalloc\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n@@ -184,4 +187,6 @@ fn main() {\n             .file(\"pthread_atfork_dummy.c\")\n             .compile(\"libpthread_atfork_dummy.a\");\n     }\n+\n+    t!(File::create(&timestamp));\n }"}, {"sha": "a0844821709378f4cefb96ac46936af458330867", "filename": "src/libstd/build.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5b603b1bf1e9d74227a8a3b2f73acd558b952ef/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=a5b603b1bf1e9d74227a8a3b2f73acd558b952ef", "patch": "@@ -10,13 +10,15 @@\n \n #![deny(warnings)]\n \n-extern crate gcc;\n+#[macro_use]\n extern crate build_helper;\n+extern crate gcc;\n \n-use std::{env, fs};\n-use std::path::PathBuf;\n+use std::env;\n+use std::fs::{self, File};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n-use build_helper::{run, rerun_if_changed_anything_in_dir};\n+use build_helper::{run, rerun_if_changed_anything_in_dir, up_to_date};\n \n fn main() {\n     println!(\"cargo:rustc-cfg=cargobuild\");\n@@ -71,12 +73,13 @@ fn build_libbacktrace(host: &str, target: &str) {\n \n     println!(\"cargo:rustc-link-lib=static=backtrace\");\n     println!(\"cargo:rustc-link-search=native={}/.libs\", build_dir.display());\n-    if !cfg!(stage0) && target == host {\n+    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n+    rerun_if_changed_anything_in_dir(&src_dir);\n+    let timestamp = build_dir.join(\"rustbuild.timestamp\");\n+    if up_to_date(&Path::new(\"build.rs\"), &timestamp) && up_to_date(&src_dir, &timestamp) {\n         return\n     }\n \n-    let src_dir = env::current_dir().unwrap().join(\"../libbacktrace\");\n-    rerun_if_changed_anything_in_dir(&src_dir);\n     let compiler = gcc::Config::new().get_compiler();\n     // only msvc returns None for ar so unwrap is okay\n     let ar = build_helper::cc2ar(compiler.path(), target).unwrap();\n@@ -103,4 +106,6 @@ fn build_libbacktrace(host: &str, target: &str) {\n                 .current_dir(&build_dir)\n                 .arg(format!(\"INCDIR={}\", src_dir.display()))\n                 .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n+\n+    t!(File::create(&timestamp));\n }"}]}