{"sha": "bc7752e5279f274887cd92ac76779f227264ae13", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNzc1MmU1Mjc5ZjI3NDg4N2NkOTJhYzc2Nzc5ZjIyNzI2NGFlMTM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-16T17:14:41Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-21T21:11:53Z"}, "message": "Represent FnPtr and Tuple using Substs", "tree": {"sha": "968ff225ed5b4e5b000434506b2197203f7e32ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/968ff225ed5b4e5b000434506b2197203f7e32ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc7752e5279f274887cd92ac76779f227264ae13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc7752e5279f274887cd92ac76779f227264ae13", "html_url": "https://github.com/rust-lang/rust/commit/bc7752e5279f274887cd92ac76779f227264ae13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc7752e5279f274887cd92ac76779f227264ae13/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51323a852a8979a71c21725b3b2771224132b85f", "url": "https://api.github.com/repos/rust-lang/rust/commits/51323a852a8979a71c21725b3b2771224132b85f", "html_url": "https://github.com/rust-lang/rust/commit/51323a852a8979a71c21725b3b2771224132b85f"}], "stats": {"total": 60, "additions": 33, "deletions": 27}, "files": [{"sha": "e659f903c40ac7b2ee93eeced2d1352ff884b027", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=bc7752e5279f274887cd92ac76779f227264ae13", "patch": "@@ -89,13 +89,13 @@ pub enum Ty {\n     /// fn foo() -> i32 { 1 }\n     /// let bar: fn() -> i32 = foo;\n     /// ```\n-    FnPtr(FnSig),\n+    FnPtr(Substs),\n \n     /// The never type `!`.\n     Never,\n \n     /// A tuple type.  For example, `(i32, bool)`.\n-    Tuple(Arc<[Ty]>),\n+    Tuple(Substs),\n \n     /// A type parameter; for example, `T` in `fn f<T>(x: T) {}\n     Param {\n@@ -127,6 +127,10 @@ impl Substs {\n         Substs(Arc::new([]))\n     }\n \n+    pub fn iter(&self) -> impl Iterator<Item = &Ty> {\n+        self.0.iter()\n+    }\n+\n     pub fn walk_mut(&mut self, f: &mut impl FnMut(&mut Ty)) {\n         // Without an Arc::make_mut_slice, we can't avoid the clone here:\n         let mut v: Vec<_> = self.0.iter().cloned().collect();\n@@ -148,6 +152,11 @@ impl FnSig {\n         params.push(ret);\n         FnSig { params_and_return: params.into() }\n     }\n+\n+    pub fn from_fn_ptr_substs(substs: &Substs) -> FnSig {\n+        FnSig { params_and_return: Arc::clone(&substs.0) }\n+    }\n+\n     pub fn params(&self) -> &[Ty] {\n         &self.params_and_return[0..self.params_and_return.len() - 1]\n     }\n@@ -168,7 +177,7 @@ impl FnSig {\n \n impl Ty {\n     pub fn unit() -> Self {\n-        Ty::Tuple(Arc::new([]))\n+        Ty::Tuple(Substs::empty())\n     }\n \n     pub fn walk(&self, f: &mut impl FnMut(&Ty)) {\n@@ -182,10 +191,9 @@ impl Ty {\n                 }\n             }\n             Ty::FnPtr(sig) => {\n-                for input in sig.params() {\n-                    input.walk(f);\n+                for t in sig.iter() {\n+                    t.walk(f);\n                 }\n-                sig.ret().walk(f);\n             }\n             Ty::FnDef { substs, .. } => {\n                 for t in substs.0.iter() {\n@@ -216,12 +224,7 @@ impl Ty {\n             Ty::RawPtr(t, _) => Arc::make_mut(t).walk_mut(f),\n             Ty::Ref(t, _) => Arc::make_mut(t).walk_mut(f),\n             Ty::Tuple(ts) => {\n-                // Without an Arc::make_mut_slice, we can't avoid the clone here:\n-                let mut v: Vec<_> = ts.iter().cloned().collect();\n-                for t in &mut v {\n-                    t.walk_mut(f);\n-                }\n-                *ts = v.into();\n+                ts.walk_mut(f);\n             }\n             Ty::FnPtr(sig) => {\n                 sig.walk_mut(f);\n@@ -324,15 +327,16 @@ impl HirDisplay for Ty {\n             }\n             Ty::Never => write!(f, \"!\")?,\n             Ty::Tuple(ts) => {\n-                if ts.len() == 1 {\n-                    write!(f, \"({},)\", ts[0].display(f.db))?;\n+                if ts.0.len() == 1 {\n+                    write!(f, \"({},)\", ts.0[0].display(f.db))?;\n                 } else {\n                     write!(f, \"(\")?;\n-                    f.write_joined(&**ts, \", \")?;\n+                    f.write_joined(&*ts.0, \", \")?;\n                     write!(f, \")\")?;\n                 }\n             }\n             Ty::FnPtr(sig) => {\n+                let sig = FnSig::from_fn_ptr_substs(sig);\n                 write!(f, \"fn(\")?;\n                 f.write_joined(sig.params(), \", \")?;\n                 write!(f, \") -> {}\", sig.ret().display(f.db))?;"}, {"sha": "69af8fb923a3088fb118bf692c82440df46fe730", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=bc7752e5279f274887cd92ac76779f227264ae13", "patch": "@@ -38,7 +38,7 @@ use crate::{\n     resolve::{Resolver, Resolution},\n     nameres::Namespace\n };\n-use super::{Ty, TypableDef, Substs, primitive, op};\n+use super::{Ty, TypableDef, Substs, primitive, op, FnSig};\n \n /// The entry point of type inference.\n pub fn infer(db: &impl HirDatabase, func: Function) -> Arc<InferenceResult> {\n@@ -257,10 +257,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.unify_inner(t1, t2, depth + 1)\n             }\n             (Ty::Ref(t1, m1), Ty::Ref(t2, m2)) if m1 == m2 => self.unify_inner(t1, t2, depth + 1),\n-            (Ty::FnPtr(sig1), Ty::FnPtr(sig2)) if sig1 == sig2 => true,\n-            (Ty::Tuple(ts1), Ty::Tuple(ts2)) if ts1.len() == ts2.len() => {\n-                ts1.iter().zip(ts2.iter()).all(|(t1, t2)| self.unify_inner(t1, t2, depth + 1))\n-            }\n+            (Ty::FnPtr(sig1), Ty::FnPtr(sig2)) => self.unify_substs(sig1, sig2, depth + 1),\n+            (Ty::Tuple(ts1), Ty::Tuple(ts2)) => self.unify_substs(ts1, ts2, depth + 1),\n             (Ty::Infer(InferTy::TypeVar(tv1)), Ty::Infer(InferTy::TypeVar(tv2)))\n             | (Ty::Infer(InferTy::IntVar(tv1)), Ty::Infer(InferTy::IntVar(tv2)))\n             | (Ty::Infer(InferTy::FloatVar(tv1)), Ty::Infer(InferTy::FloatVar(tv2))) => {\n@@ -632,7 +630,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         let ty = match &body[pat] {\n             Pat::Tuple(ref args) => {\n                 let expectations = match *expected {\n-                    Ty::Tuple(ref tuple_args) => &**tuple_args,\n+                    Ty::Tuple(ref tuple_args) => &*tuple_args.0,\n                     _ => &[],\n                 };\n                 let expectations_iter = expectations.iter().chain(repeat(&Ty::Unknown));\n@@ -644,7 +642,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     .collect::<Vec<_>>()\n                     .into();\n \n-                Ty::Tuple(inner_tys)\n+                Ty::Tuple(Substs(inner_tys))\n             }\n             Pat::Ref { pat, mutability } => {\n                 let expectation = match *expected {\n@@ -789,7 +787,10 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             Expr::Call { callee, args } => {\n                 let callee_ty = self.infer_expr(*callee, &Expectation::none());\n                 let (param_tys, ret_ty) = match &callee_ty {\n-                    Ty::FnPtr(sig) => (sig.params().to_vec(), sig.ret().clone()),\n+                    Ty::FnPtr(sig) => {\n+                        let sig = FnSig::from_fn_ptr_substs(sig);\n+                        (sig.params().to_vec(), sig.ret().clone())\n+                    }\n                     Ty::FnDef { substs, def, .. } => {\n                         let sig = self.db.callable_item_signature(*def);\n                         let ret_ty = sig.ret().clone().subst(&substs);\n@@ -828,6 +829,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let method_ty = self.insert_type_vars(method_ty);\n                 let (expected_receiver_ty, param_tys, ret_ty) = match &method_ty {\n                     Ty::FnPtr(sig) => {\n+                        let sig = FnSig::from_fn_ptr_substs(sig);\n                         if !sig.params().is_empty() {\n                             (sig.params()[0].clone(), sig.params()[1..].to_vec(), sig.ret().clone())\n                         } else {\n@@ -923,7 +925,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     .find_map(|derefed_ty| match derefed_ty {\n                         Ty::Tuple(fields) => {\n                             let i = name.to_string().parse::<usize>().ok();\n-                            i.and_then(|i| fields.get(i).cloned())\n+                            i.and_then(|i| fields.0.get(i).cloned())\n                         }\n                         Ty::Adt { def_id: AdtDef::Struct(s), ref substs, .. } => {\n                             s.field(self.db, name).map(|field| {\n@@ -1016,7 +1018,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     ty_vec.push(self.infer_expr(*arg, &Expectation::none()));\n                 }\n \n-                Ty::Tuple(Arc::from(ty_vec))\n+                Ty::Tuple(Substs(ty_vec.into()))\n             }\n             Expr::Array { exprs } => {\n                 let elem_ty = match &expected.ty {"}, {"sha": "20e6273a6eaa38bb983e9be5ce5de006c8768439", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc7752e5279f274887cd92ac76779f227264ae13/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=bc7752e5279f274887cd92ac76779f227264ae13", "patch": "@@ -30,7 +30,7 @@ impl Ty {\n             TypeRef::Tuple(inner) => {\n                 let inner_tys =\n                     inner.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                Ty::Tuple(inner_tys.into())\n+                Ty::Tuple(Substs(inner_tys.into()))\n             }\n             TypeRef::Path(path) => Ty::from_hir_path(db, resolver, path),\n             TypeRef::RawPtr(inner, mutability) => {\n@@ -53,7 +53,7 @@ impl Ty {\n             TypeRef::Fn(params) => {\n                 let inner_tys =\n                     params.iter().map(|tr| Ty::from_hir(db, resolver, tr)).collect::<Vec<_>>();\n-                let sig = FnSig { params_and_return: inner_tys.into() };\n+                let sig = Substs(inner_tys.into());\n                 Ty::FnPtr(sig)\n             }\n             TypeRef::Error => Ty::Unknown,"}]}