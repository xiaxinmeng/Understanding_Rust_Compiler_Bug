{"sha": "b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMWNjOGY4M2U3ZjUwZjU0YmZmYTkzZTkwOWQ1MWNkYWJmOWY1ZmE=", "commit": {"author": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T17:00:20Z"}, "committer": {"name": "CDirkx", "email": "christiaan@dirkx.com", "date": "2020-09-01T17:00:20Z"}, "message": "Make all methods of `std::net::Ipv6Addr` const\n\nMake the following methods of `std::net::Ipv6Addr` unstable const under the `const_ipv6` feature:\n- `segments`\n- `is_unspecified`\n- `is_loopback`\n- `is_global` (unstable)\n- `is_unique_local`\n- `is_unicast_link_local_strict`\n- `is_documentation`\n- `multicast_scope`\n- `is_multicast`\n- `to_ipv4_mapped`\n- `to_ipv4`\n\nChanged the implementation of `is_unspecified` and `is_loopback` to use a `match` instead of `==`.\n\nPart of #76205", "tree": {"sha": "0c7abed31c0e8427d90fa8365f4e423655f3e021", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c7abed31c0e8427d90fa8365f4e423655f3e021"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "html_url": "https://github.com/rust-lang/rust/commit/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa/comments", "author": null, "committer": null, "parents": [{"sha": "e88e908e66cd1e6e30d789b37bcd774951d01856", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88e908e66cd1e6e30d789b37bcd774951d01856", "html_url": "https://github.com/rust-lang/rust/commit/e88e908e66cd1e6e30d789b37bcd774951d01856"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "3141b3b9526d0bb5f1b42de8d1f7aa05f0b4f8c0", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "patch": "@@ -238,6 +238,7 @@\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n+#![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(container_error_extra)]\n #![feature(core_intrinsics)]"}, {"sha": "8e3dbf8fcb48b3095942b18f8bd7ad4e78177aeb", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 30, "deletions": 16, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=b31cc8f83e7f50f54bffa93e909d51cdabf9f5fa", "patch": "@@ -1102,8 +1102,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).segments(),\n     ///            [0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff]);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn segments(&self) -> [u16; 8] {\n+    pub const fn segments(&self) -> [u16; 8] {\n         // All elements in `s6_addr` must be big endian.\n         // SAFETY: `[u8; 16]` is always safe to transmute to `[u16; 8]`.\n         let [a, b, c, d, e, f, g, h] = unsafe { transmute::<_, [u16; 8]>(self.inner.s6_addr) };\n@@ -1135,9 +1136,10 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unspecified(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0).is_unspecified(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_unspecified(&self) -> bool {\n-        self.segments() == [0, 0, 0, 0, 0, 0, 0, 0]\n+    pub const fn is_unspecified(&self) -> bool {\n+        matches!(self.segments(), [0, 0, 0, 0, 0, 0, 0, 0])\n     }\n \n     /// Returns [`true`] if this is a loopback address (::1).\n@@ -1155,9 +1157,10 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_loopback(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_loopback(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_loopback(&self) -> bool {\n-        self.segments() == [0, 0, 0, 0, 0, 0, 0, 1]\n+    pub const fn is_loopback(&self) -> bool {\n+        matches!(self.segments(), [0, 0, 0, 0, 0, 0, 0, 1])\n     }\n \n     /// Returns [`true`] if the address appears to be globally routable.\n@@ -1182,7 +1185,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1).is_global(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1).is_global(), true);\n     /// ```\n-    pub fn is_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_global(&self) -> bool {\n         match self.multicast_scope() {\n             Some(Ipv6MulticastScope::Global) => true,\n             None => self.is_unicast_global(),\n@@ -1208,7 +1212,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unique_local(), false);\n     /// assert_eq!(Ipv6Addr::new(0xfc02, 0, 0, 0, 0, 0, 0, 0).is_unique_local(), true);\n     /// ```\n-    pub fn is_unique_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n     }\n \n@@ -1263,7 +1268,8 @@ impl Ipv6Addr {\n     /// [IETF RFC 4291]: https://tools.ietf.org/html/rfc4291\n     /// [IETF RFC 4291 section 2.5.6]: https://tools.ietf.org/html/rfc4291#section-2.5.6\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    pub fn is_unicast_link_local_strict(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_link_local_strict(&self) -> bool {\n         (self.segments()[0] & 0xffff) == 0xfe80\n             && (self.segments()[1] & 0xffff) == 0\n             && (self.segments()[2] & 0xffff) == 0\n@@ -1320,7 +1326,8 @@ impl Ipv6Addr {\n     ///\n     /// [IETF RFC 4291 section 2.4]: https://tools.ietf.org/html/rfc4291#section-2.4\n     /// [RFC 4291 errata 4406]: https://www.rfc-editor.org/errata/eid4406\n-    pub fn is_unicast_link_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n     }\n \n@@ -1359,7 +1366,8 @@ impl Ipv6Addr {\n     /// addresses.\n     ///\n     /// [RFC 3879]: https://tools.ietf.org/html/rfc3879\n-    pub fn is_unicast_site_local(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_site_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfec0\n     }\n \n@@ -1381,7 +1389,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_documentation(), false);\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_documentation(), true);\n     /// ```\n-    pub fn is_documentation(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n     }\n \n@@ -1416,7 +1425,8 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0, 0).is_unicast_global(), false);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_unicast_global(), true);\n     /// ```\n-    pub fn is_unicast_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn is_unicast_global(&self) -> bool {\n         !self.is_multicast()\n             && !self.is_loopback()\n             && !self.is_unicast_link_local()\n@@ -1440,7 +1450,8 @@ impl Ipv6Addr {\n     /// );\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).multicast_scope(), None);\n     /// ```\n-    pub fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn multicast_scope(&self) -> Option<Ipv6MulticastScope> {\n         if self.is_multicast() {\n             match self.segments()[0] & 0x000f {\n                 1 => Some(Ipv6MulticastScope::InterfaceLocal),\n@@ -1472,8 +1483,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0).is_multicast(), true);\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0xffff, 0xc00a, 0x2ff).is_multicast(), false);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n-    pub fn is_multicast(&self) -> bool {\n+    pub const fn is_multicast(&self) -> bool {\n         (self.segments()[0] & 0xff00) == 0xff00\n     }\n \n@@ -1498,7 +1510,8 @@ impl Ipv6Addr {\n     ///            Some(Ipv4Addr::new(192, 10, 2, 255)));\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4_mapped(), None);\n     /// ```\n-    pub fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n+    pub const fn to_ipv4_mapped(&self) -> Option<Ipv4Addr> {\n         match self.octets() {\n             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff, a, b, c, d] => {\n                 Some(Ipv4Addr::new(a, b, c, d))\n@@ -1525,8 +1538,9 @@ impl Ipv6Addr {\n     /// assert_eq!(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1).to_ipv4(),\n     ///            Some(Ipv4Addr::new(0, 0, 0, 1)));\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ipv6\", issue = \"76205\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn to_ipv4(&self) -> Option<Ipv4Addr> {\n+    pub const fn to_ipv4(&self) -> Option<Ipv4Addr> {\n         if let [0, 0, 0, 0, 0, 0 | 0xffff, ab, cd] = self.segments() {\n             let [a, b] = ab.to_be_bytes();\n             let [c, d] = cd.to_be_bytes();"}]}