{"sha": "3b6b1ab0ec93eba574dba38e3cb4861cbdb48306", "node_id": "C_kwDOAAsO6NoAKDNiNmIxYWIwZWM5M2ViYTU3NGRiYTM4ZTNjYjQ4NjFjYmRiNDgzMDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-09T18:00:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-09T18:00:40Z"}, "message": "Rollup merge of #89561 - nbdd0121:const_typeck, r=nikomatsakis\n\nType inference for inline consts\n\nFixes #78132\nFixes #78174\nFixes #81857\nFixes #89964\n\nPerform type checking/inference of inline consts in the same context as the outer def, similar to what is currently done to closure.\n\nDoing so would require `closure_base_def_id` of the inline const to return the outer def, and since `closure_base_def_id` can be called on non-local crate (and thus have no HIR available), a new `DefKind` is created for inline consts.\n\nThe type of the generated anon const can capture lifetime of outer def, so we couldn't just use the typeck result as the type of the inline const's def. Closure has a similar issue, and it uses extra type params `CK, CS, U` to capture closure kind, input/output signature and upvars. I use a similar approach for inline consts, letting it have an extra type param `R`, and then `typeof(InlineConst<[paremt generics], R>)` would just be `R`. In borrowck region requirements are also propagated to the outer MIR body just like it's currently done for closure.\n\nWith this PR, inline consts in expression position are quitely usable now; however the usage in pattern position is still incomplete -- since those does not remain in the MIR borrowck couldn't verify the lifetime there. I have left an ignored test as a FIXME.\n\nSome disucssions can be found on [this Zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/inline.20consts.20typeck).\ncc `````@spastorino````` `````@lcnr`````\nr? `````@nikomatsakis`````\n\n`````@rustbot````` label A-inference F-inline_const T-compiler", "tree": {"sha": "bbbb66abe41e26b12b3bdb5c4b71600a31d41cef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbb66abe41e26b12b3bdb5c4b71600a31d41cef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306", "html_url": "https://github.com/rust-lang/rust/commit/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d547571ca84f13e5973030c3a1b4711773f78e", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d547571ca84f13e5973030c3a1b4711773f78e", "html_url": "https://github.com/rust-lang/rust/commit/36d547571ca84f13e5973030c3a1b4711773f78e"}, {"sha": "0cb9ac2d964e67a2fe71c0a042e6db2361aba547", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb9ac2d964e67a2fe71c0a042e6db2361aba547", "html_url": "https://github.com/rust-lang/rust/commit/0cb9ac2d964e67a2fe71c0a042e6db2361aba547"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "7142df98c3f10fde54afa98e822067dd468532f2", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6b1ab0ec93eba574dba38e3cb4861cbdb48306/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=3b6b1ab0ec93eba574dba38e3cb4861cbdb48306", "patch": "@@ -1065,7 +1065,10 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 PatKind::Path(path) => {\n                     #[allow(clippy::match_same_arms)]\n                     let id = match cx.qpath_res(path, pat.hir_id) {\n-                        Res::Def(DefKind::Const | DefKind::ConstParam | DefKind::AnonConst, _) => return,\n+                        Res::Def(\n+                            DefKind::Const | DefKind::ConstParam | DefKind::AnonConst | DefKind::InlineConst,\n+                            _,\n+                        ) => return,\n                         Res::Def(_, id) => id,\n                         _ => return,\n                     };"}]}