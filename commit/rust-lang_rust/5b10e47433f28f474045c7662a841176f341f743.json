{"sha": "5b10e47433f28f474045c7662a841176f341f743", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMTBlNDc0MzNmMjhmNDc0MDQ1Yzc2NjJhODQxMTc2ZjM0MWY3NDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T07:01:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-16T07:01:05Z"}, "message": "Rollup merge of #74203 - nnethercote:enforce-static-symbol-order, r=petrochenkov\n\nEnforce the static symbol order.\n\nBy making the proc macro abort if any symbols are out of order.\n\nThe commit also changes the proc macro collect multiple errors (of order\nor duplicated symbols) and prints them at the end, which is useful if\nyou have multiple errors.\n\nr? @petrochenkov", "tree": {"sha": "d433830c51e1412b9e05fdf0bd6139de5ac22d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d433830c51e1412b9e05fdf0bd6139de5ac22d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b10e47433f28f474045c7662a841176f341f743", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfD/syCRBK7hj4Ov3rIwAAdHIIAGbdOf+ivVC91OcPCqDvwP5X\nTajIUjTgbDDWKS/8N2oTdT3WKkkgTDnGFIBWxc5c13sEHacO6aJxNkefUQ05VrFX\ngGLv6OVnV4fbh/wik3c1RsIAuNEouB7UfXadKR9AsknNzyXOx+DPZur2oLuAdm6I\nAP1Oa326S0t2fg+za8SNfOEh7Fgr2iNWhdVcPhoZAZ8j28jm4y4CCbYrIXQ5zRdY\n8gco56E2AcUF/qLJ1jUyaayw1qogYPE9HLneX+voSUS9Hk53R/nnlMqBTTMYNTbs\nUEJEJRlQKfIPL0BSKcjkAZsVtZcFAeunhNUG535wSQcN3KbuGmfHz/IAafdqxdE=\n=DNOj\n-----END PGP SIGNATURE-----\n", "payload": "tree d433830c51e1412b9e05fdf0bd6139de5ac22d0d\nparent e598ee51e4c71ef535428d6d9724bd22dfd39c6a\nparent 600b8247a8008b8e4fb2f6b6f61207ba85aba363\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594882865 -0700\ncommitter GitHub <noreply@github.com> 1594882865 -0700\n\nRollup merge of #74203 - nnethercote:enforce-static-symbol-order, r=petrochenkov\n\nEnforce the static symbol order.\n\nBy making the proc macro abort if any symbols are out of order.\n\nThe commit also changes the proc macro collect multiple errors (of order\nor duplicated symbols) and prints them at the end, which is useful if\nyou have multiple errors.\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b10e47433f28f474045c7662a841176f341f743", "html_url": "https://github.com/rust-lang/rust/commit/5b10e47433f28f474045c7662a841176f341f743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b10e47433f28f474045c7662a841176f341f743/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e598ee51e4c71ef535428d6d9724bd22dfd39c6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e598ee51e4c71ef535428d6d9724bd22dfd39c6a", "html_url": "https://github.com/rust-lang/rust/commit/e598ee51e4c71ef535428d6d9724bd22dfd39c6a"}, {"sha": "600b8247a8008b8e4fb2f6b6f61207ba85aba363", "url": "https://api.github.com/repos/rust-lang/rust/commits/600b8247a8008b8e4fb2f6b6f61207ba85aba363", "html_url": "https://github.com/rust-lang/rust/commit/600b8247a8008b8e4fb2f6b6f61207ba85aba363"}], "stats": {"total": 262, "additions": 145, "deletions": 117}, "files": [{"sha": "2e9b3a2a2562f276ee8fcd99ca7b9fe06d962f04", "filename": "src/librustc_macros/src/symbols.rs", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fsymbols.rs?ref=5b10e47433f28f474045c7662a841176f341f743", "patch": "@@ -87,18 +87,29 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n     let mut prefill_stream = quote! {};\n     let mut counter = 0u32;\n     let mut keys = HashSet::<String>::new();\n+    let mut prev_key: Option<String> = None;\n+    let mut errors = Vec::<String>::new();\n \n-    let mut check_dup = |str: &str| {\n+    let mut check_dup = |str: &str, errors: &mut Vec<String>| {\n         if !keys.insert(str.to_string()) {\n-            panic!(\"Symbol `{}` is duplicated\", str);\n+            errors.push(format!(\"Symbol `{}` is duplicated\", str));\n         }\n     };\n \n+    let mut check_order = |str: &str, errors: &mut Vec<String>| {\n+        if let Some(ref prev_str) = prev_key {\n+            if str < prev_str {\n+                errors.push(format!(\"Symbol `{}` must precede `{}`\", str, prev_str));\n+            }\n+        }\n+        prev_key = Some(str.to_string());\n+    };\n+\n     // Generate the listed keywords.\n     for keyword in &input.keywords.0 {\n         let name = &keyword.name;\n         let value = &keyword.value;\n-        check_dup(&value.value());\n+        check_dup(&value.value(), &mut errors);\n         prefill_stream.extend(quote! {\n             #value,\n         });\n@@ -116,7 +127,8 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n             Some(value) => value.value(),\n             None => name.to_string(),\n         };\n-        check_dup(&value);\n+        check_dup(&value, &mut errors);\n+        check_order(&name.to_string(), &mut errors);\n         prefill_stream.extend(quote! {\n             #value,\n         });\n@@ -131,7 +143,7 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n     // Generate symbols for the strings \"0\", \"1\", ..., \"9\".\n     for n in 0..10 {\n         let n = n.to_string();\n-        check_dup(&n);\n+        check_dup(&n, &mut errors);\n         prefill_stream.extend(quote! {\n             #n,\n         });\n@@ -141,6 +153,13 @@ pub fn symbols(input: TokenStream) -> TokenStream {\n         counter += 1;\n     }\n \n+    if !errors.is_empty() {\n+        for error in errors.into_iter() {\n+            eprintln!(\"error: {}\", error)\n+        }\n+        panic!(\"errors in `Keywords` and/or `Symbols`\");\n+    }\n+\n     let tt = TokenStream::from(quote! {\n         macro_rules! keywords {\n             () => {"}, {"sha": "75f588918a020185b84f1338f35e90c2fdc06fd6", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 117, "deletions": 108, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=5b10e47433f28f474045c7662a841176f341f743", "patch": "@@ -19,6 +19,7 @@ use crate::{Span, DUMMY_SP, SESSION_GLOBALS};\n #[cfg(test)]\n mod tests;\n \n+// The proc macro code for this is in `src/librustc_macros/src/symbols.rs`.\n symbols! {\n     // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,\n     // this should be rarely necessary though if the keywords are kept in alphabetic order.\n@@ -113,8 +114,79 @@ symbols! {\n     // As well as the symbols listed, there are symbols for the the strings\n     // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.\n     //\n-    // Keep this list in sorted order, as defined by the Unix `sort` utility.\n+    // The proc macro will abort if symbols are not in alphabetical order (as\n+    // defined by `impl Ord for str`) or if any symbols are duplicated. Vim\n+    // users can sort the list by selecting it and executing the command\n+    // `:'<,'>!LC_ALL=C sort`.\n+    //\n+    // There is currently no checking that all symbols are used; that would be\n+    // nice to have.\n     Symbols {\n+        Arc,\n+        ArgumentV1,\n+        Arguments,\n+        C,\n+        Clone,\n+        Copy,\n+        Debug,\n+        Decodable,\n+        Default,\n+        Encodable,\n+        Eq,\n+        Equal,\n+        Err,\n+        From,\n+        Future,\n+        FxHashMap,\n+        FxHashSet,\n+        GlobalAlloc,\n+        Hash,\n+        HashMap,\n+        HashSet,\n+        Input,\n+        IntoIterator,\n+        ItemContext,\n+        Iterator,\n+        Layout,\n+        LintPass,\n+        None,\n+        Ok,\n+        Option,\n+        Ord,\n+        Ordering,\n+        Output,\n+        PartialEq,\n+        PartialOrd,\n+        Pending,\n+        Pin,\n+        Poll,\n+        ProcMacroHack,\n+        ProceduralMasqueradeDummyType,\n+        Range,\n+        RangeFrom,\n+        RangeFull,\n+        RangeInclusive,\n+        RangeTo,\n+        RangeToInclusive,\n+        Rc,\n+        Ready,\n+        Result,\n+        Return,\n+        RustcDecodable,\n+        RustcEncodable,\n+        Send,\n+        Some,\n+        Sync,\n+        Target,\n+        Try,\n+        Ty,\n+        TyCtxt,\n+        TyKind,\n+        Vec,\n+        Yield,\n+        _Self,\n+        __next,\n+        _task_context,\n         aarch64_target_feature,\n         abi,\n         abi_amdgpu_kernel,\n@@ -131,8 +203,8 @@ symbols! {\n         aborts,\n         add,\n         add_assign,\n-        address,\n         add_with_overflow,\n+        address,\n         advanced_slice_patterns,\n         adx_target_feature,\n         alias,\n@@ -141,28 +213,26 @@ symbols! {\n         alignstack,\n         all,\n         alloc,\n-        allocator,\n-        allocator_internals,\n         alloc_error_handler,\n         alloc_layout,\n         alloc_zeroed,\n+        allocator,\n+        allocator_internals,\n         allow,\n-        allowed,\n         allow_fail,\n         allow_internal_unsafe,\n         allow_internal_unstable,\n         allow_internal_unstable_backcompat_hack,\n+        allowed,\n         always,\n         and,\n         any,\n         arbitrary_enum_discriminant,\n         arbitrary_self_types,\n-        Arc,\n-        Arguments,\n-        ArgumentV1,\n         arith_offset,\n         arm_target_feature,\n         array,\n+        as_str,\n         asm,\n         assert,\n         assert_inhabited,\n@@ -173,16 +243,15 @@ symbols! {\n         associated_type_bounds,\n         associated_type_defaults,\n         associated_types,\n-        as_str,\n         assume,\n         assume_init,\n         async_await,\n         async_closure,\n         atomics,\n+        att_syntax,\n         attr,\n-        attributes,\n         attr_literals,\n-        att_syntax,\n+        attributes,\n         augmented_assignments,\n         automatically_derived,\n         avx512_target_feature,\n@@ -210,11 +279,11 @@ symbols! {\n         braced_empty_structs,\n         breakpoint,\n         bswap,\n-        C,\n+        c_variadic,\n         call,\n-        caller_location,\n         call_mut,\n         call_once,\n+        caller_location,\n         cdylib,\n         ceilf32,\n         ceilf64,\n@@ -232,7 +301,6 @@ symbols! {\n         char,\n         clippy,\n         clone,\n-        Clone,\n         clone_closures,\n         clone_from,\n         closure_to_fn_coercion,\n@@ -274,7 +342,6 @@ symbols! {\n         context,\n         convert,\n         copy,\n-        Copy,\n         copy_closures,\n         copy_nonoverlapping,\n         copysignf32,\n@@ -303,18 +370,14 @@ symbols! {\n         custom_derive,\n         custom_inner_attributes,\n         custom_test_frameworks,\n-        c_variadic,\n         dead_code,\n         dealloc,\n         debug,\n-        Debug,\n         debug_assertions,\n         debug_trait,\n-        declare_lint_pass,\n         decl_macro,\n-        Decodable,\n+        declare_lint_pass,\n         decode,\n-        Default,\n         default_lib_allocator,\n         default_type_parameter_fallback,\n         default_type_params,\n@@ -339,8 +402,8 @@ symbols! {\n         doc_masked,\n         doctest,\n         document_private_items,\n-        dotdoteq_in_patterns,\n         dotdot_in_tuple_patterns,\n+        dotdoteq_in_patterns,\n         double_braced_closure: \"{{closure}}\",\n         double_braced_constant: \"{{constant}}\",\n         double_braced_constructor: \"{{constructor}}\",\n@@ -349,24 +412,20 @@ symbols! {\n         double_braced_misc: \"{{misc}}\",\n         double_braced_opaque: \"{{opaque}}\",\n         drop,\n-        dropck_eyepatch,\n-        dropck_parametricity,\n         drop_in_place,\n         drop_types_in_const,\n+        dropck_eyepatch,\n+        dropck_parametricity,\n         dylib,\n         dyn_trait,\n         eh_catch_typeinfo,\n         eh_personality,\n         enable,\n         enclosing_scope,\n-        Encodable,\n         encode,\n         env,\n         eq,\n-        Eq,\n-        Equal,\n         err,\n-        Err,\n         exact_div,\n         except,\n         exchange_malloc,\n@@ -382,12 +441,12 @@ symbols! {\n         export_name,\n         expr,\n         extern_absolute_paths,\n-        external_doc,\n         extern_crate_item_prelude,\n         extern_crate_self,\n         extern_in_paths,\n         extern_prelude,\n         extern_types,\n+        external_doc,\n         f16c_target_feature,\n         f32,\n         f32_runtime,\n@@ -424,7 +483,6 @@ symbols! {\n         freeze,\n         frem_fast,\n         from,\n-        From,\n         from_desugaring,\n         from_error,\n         from_generator,\n@@ -436,29 +494,22 @@ symbols! {\n         fsub_fast,\n         fundamental,\n         future,\n-        Future,\n         future_trait,\n-        FxHashMap,\n-        FxHashSet,\n         ge,\n+        gen_future,\n+        gen_kill,\n         generator,\n-        generators,\n         generator_state,\n+        generators,\n         generic_associated_types,\n         generic_param_attrs,\n-        gen_future,\n-        gen_kill,\n         get_context,\n-        GlobalAlloc,\n         global_allocator,\n         global_asm,\n         globs,\n         gt,\n         half_open_range_patterns,\n         hash,\n-        Hash,\n-        HashMap,\n-        HashSet,\n         hexagon_target_feature,\n         hidden,\n         homogeneous_aggregate,\n@@ -493,10 +544,8 @@ symbols! {\n         inlateout,\n         inline,\n         inout,\n-        Input,\n         intel,\n         into_iter,\n-        IntoIterator,\n         into_result,\n         intrinsics,\n         irrefutable_let_patterns,\n@@ -505,18 +554,15 @@ symbols! {\n         issue_5723_bootstrap,\n         issue_tracker_base_url,\n         item,\n-        item_context: \"ItemContext\",\n         item_like_imports,\n         iter,\n-        Iterator,\n         keyword,\n         kind,\n         label,\n         label_break_value,\n         lang,\n         lang_items,\n         lateout,\n-        Layout,\n         lazy_normalization_consts,\n         le,\n         let_chains,\n@@ -527,14 +573,13 @@ symbols! {\n         likely,\n         line,\n         link,\n-        linkage,\n         link_args,\n         link_cfg,\n         link_llvm_intrinsics,\n         link_name,\n         link_ordinal,\n         link_section,\n-        LintPass,\n+        linkage,\n         lint_reasons,\n         literal,\n         llvm_asm,\n@@ -543,9 +588,9 @@ symbols! {\n         log10f64,\n         log2f32,\n         log2f64,\n+        log_syntax,\n         logf32,\n         logf64,\n-        log_syntax,\n         loop_break_value,\n         lt,\n         macro_at_most_once_rep,\n@@ -554,9 +599,9 @@ symbols! {\n         macro_lifetime_matcher,\n         macro_literal_matcher,\n         macro_reexport,\n-        macros_in_extern,\n         macro_use,\n         macro_vis_matcher,\n+        macros_in_extern,\n         main,\n         managed_boxes,\n         manually_drop,\n@@ -567,23 +612,23 @@ symbols! {\n         match_default_bindings,\n         maxnumf32,\n         maxnumf64,\n+        may_dangle,\n         maybe_uninit,\n         maybe_uninit_uninit,\n         maybe_uninit_zeroed,\n-        may_dangle,\n-        member_constraints,\n-        memory,\n         mem_uninitialized,\n         mem_zeroed,\n+        member_constraints,\n+        memory,\n         message,\n         meta,\n         min_align_of,\n         min_align_of_val,\n         min_const_fn,\n         min_const_unsafe_fn,\n+        min_specialization,\n         minnumf32,\n         minnumf64,\n-        min_specialization,\n         mips_target_feature,\n         miri_start_panic,\n         mmx_target_feature,\n@@ -615,7 +660,6 @@ symbols! {\n         never_type,\n         never_type_fallback,\n         new,\n-        __next,\n         next,\n         nll,\n         no,\n@@ -629,47 +673,41 @@ symbols! {\n         no_link,\n         no_main,\n         no_mangle,\n+        no_niche,\n+        no_sanitize,\n+        no_stack_check,\n+        no_start,\n+        no_std,\n         nomem,\n         non_ascii_idents,\n-        None,\n-        none_error,\n         non_exhaustive,\n-        no_niche,\n         non_modrs_mods,\n+        none_error,\n         nontemporal_store,\n         nontrapping_dash_fptoint: \"nontrapping-fptoint\",\n         noreturn,\n-        no_sanitize,\n         nostack,\n-        no_stack_check,\n-        no_start,\n-        no_std,\n         not,\n         note,\n         object_safe_for_dispatch,\n         offset,\n-        Ok,\n         omit_gdb_pretty_printer_section,\n         on,\n         on_unimplemented,\n         oom,\n         opaque,\n         ops,\n+        opt_out_copy,\n         optimize,\n         optimize_attribute,\n         optin_builtin_traits,\n         option,\n-        Option,\n         option_env,\n-        options,\n         option_type,\n-        opt_out_copy,\n+        options,\n         or,\n-        Ord,\n-        Ordering,\n         or_patterns,\n         out,\n-        Output,\n         overlapping_marker_traits,\n         owned_box,\n         packed,\n@@ -686,33 +724,28 @@ symbols! {\n         param_attrs,\n         parent_trait,\n         partial_cmp,\n-        PartialEq,\n         partial_ord,\n-        PartialOrd,\n         passes,\n         pat,\n         path,\n         pattern_parentheses,\n-        Pending,\n         phantom_data,\n         pin,\n-        Pin,\n         pinned,\n         platform_intrinsics,\n         plugin,\n         plugin_registrar,\n         plugins,\n         pointer,\n         poll,\n-        Poll,\n         post_dash_lto: \"post-lto\",\n         powerpc_target_feature,\n         powf32,\n         powf64,\n         powif32,\n         powif64,\n-        precise_pointer_size_matching,\n         pre_dash_lto: \"pre-lto\",\n+        precise_pointer_size_matching,\n         pref_align_of,\n         prefetch_read_data,\n         prefetch_read_instruction,\n@@ -723,14 +756,12 @@ symbols! {\n         preserves_flags,\n         primitive,\n         proc_dash_macro: \"proc-macro\",\n-        ProceduralMasqueradeDummyType,\n         proc_macro,\n         proc_macro_attribute,\n         proc_macro_def_site,\n         proc_macro_derive,\n         proc_macro_expr,\n         proc_macro_gen,\n-        ProcMacroHack,\n         proc_macro_hygiene,\n         proc_macro_internals,\n         proc_macro_mod,\n@@ -747,18 +778,11 @@ symbols! {\n         quad_precision_float,\n         question_mark,\n         quote,\n-        Range,\n-        RangeFrom,\n-        RangeFull,\n-        RangeInclusive,\n-        RangeTo,\n-        RangeToInclusive,\n         raw_dylib,\n         raw_identifiers,\n         raw_ref_op,\n-        Rc,\n+        re_rebalance_coherence,\n         readonly,\n-        Ready,\n         realloc,\n         reason,\n         receiver,\n@@ -779,11 +803,8 @@ symbols! {\n         repr_packed,\n         repr_simd,\n         repr_transparent,\n-        re_rebalance_coherence,\n         result,\n-        Result,\n         result_type,\n-        Return,\n         rhs,\n         rintf32,\n         rintf64,\n@@ -799,6 +820,10 @@ symbols! {\n         rust_2015_preview,\n         rust_2018_preview,\n         rust_begin_unwind,\n+        rust_eh_personality,\n+        rust_eh_register_frames,\n+        rust_eh_unregister_frames,\n+        rust_oom,\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n@@ -810,7 +835,6 @@ symbols! {\n         rustc_const_stable,\n         rustc_const_unstable,\n         rustc_conversion_suggestion,\n-        RustcDecodable,\n         rustc_def_path,\n         rustc_deprecated,\n         rustc_diagnostic_item,\n@@ -820,7 +844,6 @@ symbols! {\n         rustc_dump_env_program_clauses,\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n-        RustcEncodable,\n         rustc_error,\n         rustc_expected_cgu_reuse,\n         rustc_if_this_changed,\n@@ -857,19 +880,15 @@ symbols! {\n         rustc_then_this_would_need,\n         rustc_unsafe_specialization_marker,\n         rustc_variance,\n-        rust_eh_personality,\n         rustfmt,\n-        rust_oom,\n         rvalue_static_promotion,\n         sanitize,\n         sanitizer_runtime,\n         saturating_add,\n         saturating_sub,\n-        _Self,\n         self_in_typedefs,\n         self_struct_ctor,\n         semitransparent,\n-        Send,\n         send_trait,\n         shl,\n         shl_assign,\n@@ -937,17 +956,16 @@ symbols! {\n         sinf32,\n         sinf64,\n         size,\n-        sized,\n         size_of,\n         size_of_val,\n+        sized,\n         slice,\n         slice_alloc,\n         slice_patterns,\n         slice_u8,\n         slice_u8_alloc,\n         slicing_syntax,\n         soft,\n-        Some,\n         specialization,\n         speed,\n         sqrtf32,\n@@ -957,9 +975,9 @@ symbols! {\n         staged_api,\n         start,\n         static_in_const,\n-        staticlib,\n         static_nobundle,\n         static_recursion,\n+        staticlib,\n         std,\n         std_inject,\n         stmt,\n@@ -970,20 +988,18 @@ symbols! {\n         stringify,\n         struct_field_attributes,\n         struct_inherit,\n+        struct_variant,\n         structural_match,\n         structural_peq,\n         structural_teq,\n-        struct_variant,\n         sty,\n         sub,\n         sub_assign,\n         sub_with_overflow,\n         suggestion,\n         sym,\n         sync,\n-        Sync,\n         sync_trait,\n-        Target,\n         target_arch,\n         target_endian,\n         target_env,\n@@ -998,7 +1014,6 @@ symbols! {\n         target_thread_local,\n         target_vendor,\n         task,\n-        _task_context,\n         tbm_target_feature,\n         termination,\n         termination_trait,\n@@ -1024,17 +1039,13 @@ symbols! {\n         trivial_bounds,\n         truncf32,\n         truncf64,\n-        Try,\n         try_blocks,\n         try_trait,\n         tt,\n         tuple,\n         tuple_indexing,\n         two_phase,\n         ty,\n-        Ty,\n-        TyCtxt,\n-        TyKind,\n         type_alias_enum_variants,\n         type_alias_impl_trait,\n         type_ascription,\n@@ -1082,21 +1093,20 @@ symbols! {\n         unwind,\n         unwind_attributes,\n         unwrap_or,\n-        used,\n         use_extern_macros,\n         use_nested_groups,\n+        used,\n         usize,\n         v1,\n         va_arg,\n         va_copy,\n         va_end,\n-        val,\n         va_list,\n+        va_start,\n+        val,\n         var,\n         variant_count,\n-        va_start,\n         vec,\n-        Vec,\n         vec_type,\n         version,\n         vis,\n@@ -1117,7 +1127,6 @@ symbols! {\n         wrapping_mul,\n         wrapping_sub,\n         write_bytes,\n-        Yield,\n     }\n }\n "}, {"sha": "d2b9f84af33ae3e100e2818cbffa13c3414ed1a8", "filename": "src/librustc_trait_selection/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=5b10e47433f28f474045c7662a841176f341f743", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         let mut flags = vec![];\n         flags.push((\n-            sym::item_context,\n+            sym::ItemContext,\n             self.describe_enclosure(obligation.cause.body_id).map(|s| s.to_owned()),\n         ));\n "}, {"sha": "deb33708681fa3ba8e9b1781f7d4100477fd54cf", "filename": "src/librustc_trait_selection/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b10e47433f28f474045c7662a841176f341f743/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fon_unimplemented.rs?ref=5b10e47433f28f474045c7662a841176f341f743", "patch": "@@ -286,7 +286,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     // `{from_desugaring}` is allowed\n                     Position::ArgumentNamed(s) if s == sym::from_desugaring => (),\n                     // `{ItemContext}` is allowed\n-                    Position::ArgumentNamed(s) if s == sym::item_context => (),\n+                    Position::ArgumentNamed(s) if s == sym::ItemContext => (),\n                     // So is `{A}` if A is a type parameter\n                     Position::ArgumentNamed(s) => {\n                         match generics.params.iter().find(|param| param.name == s) {\n@@ -350,7 +350,7 @@ impl<'tcx> OnUnimplementedFormatString {\n \n         let s = self.0.as_str();\n         let parser = Parser::new(&s, None, None, false, ParseMode::Format);\n-        let item_context = (options.get(&sym::item_context)).unwrap_or(&empty_string);\n+        let item_context = (options.get(&sym::ItemContext)).unwrap_or(&empty_string);\n         parser\n             .map(|p| match p {\n                 Piece::String(s) => s,\n@@ -364,7 +364,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                             } else if s == sym::from_desugaring || s == sym::from_method {\n                                 // don't break messages using these two arguments incorrectly\n                                 &empty_string\n-                            } else if s == sym::item_context {\n+                            } else if s == sym::ItemContext {\n                                 &item_context\n                             } else {\n                                 bug!("}]}