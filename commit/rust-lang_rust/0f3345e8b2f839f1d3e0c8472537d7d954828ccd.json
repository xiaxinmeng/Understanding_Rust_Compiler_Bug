{"sha": "0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmMzM0NWU4YjJmODM5ZjFkM2UwYzg0NzI1MzdkN2Q5NTQ4MjhjY2Q=", "commit": {"author": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-13T20:51:53Z"}, "committer": {"name": "Josh Mcguigan", "email": "joshmcg88@gmail.com", "date": "2018-10-13T20:51:53Z"}, "message": "OUT_OF_BOUNDS_INDEXING fix #3102 false negative", "tree": {"sha": "31ab12a1fd819b1793b06ea5b3330177ade20b54", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ab12a1fd819b1793b06ea5b3330177ade20b54"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "html_url": "https://github.com/rust-lang/rust/commit/0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/comments", "author": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JoshMcguigan", "id": 22216761, "node_id": "MDQ6VXNlcjIyMjE2NzYx", "avatar_url": "https://avatars.githubusercontent.com/u/22216761?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoshMcguigan", "html_url": "https://github.com/JoshMcguigan", "followers_url": "https://api.github.com/users/JoshMcguigan/followers", "following_url": "https://api.github.com/users/JoshMcguigan/following{/other_user}", "gists_url": "https://api.github.com/users/JoshMcguigan/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoshMcguigan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoshMcguigan/subscriptions", "organizations_url": "https://api.github.com/users/JoshMcguigan/orgs", "repos_url": "https://api.github.com/users/JoshMcguigan/repos", "events_url": "https://api.github.com/users/JoshMcguigan/events{/privacy}", "received_events_url": "https://api.github.com/users/JoshMcguigan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a", "url": "https://api.github.com/repos/rust-lang/rust/commits/601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a", "html_url": "https://github.com/rust-lang/rust/commit/601cc9d2c541f0a654b14a9c1fcc1d0207d8d33a"}], "stats": {"total": 89, "additions": 66, "deletions": 23}, "files": [{"sha": "8b7a1f7882b78e521d5ac6f6aa1c0c07f97cbf41", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 48, "deletions": 22, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "patch": "@@ -111,17 +111,43 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n                 // Ranged indexes, i.e. &x[n..m], &x[n..], &x[..n] and &x[..]\n                 if let ty::Array(_, s) = ty.sty {\n                     let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n-                    // Index is a constant range.\n-                    if let Some((start, end)) = to_const_range(cx, range, size) {\n-                        if start > size || end > size {\n-                            utils::span_lint(\n-                                cx,\n-                                OUT_OF_BOUNDS_INDEXING,\n-                                expr.span,\n-                                \"range is out of bounds\",\n-                            );\n-                        }\n-                        return;\n+\n+                    match to_const_range(cx, range, size) {\n+                        (None, None) => {},\n+                        (Some(start), None) => {\n+                            if start > size {\n+                                utils::span_lint(\n+                                    cx,\n+                                    OUT_OF_BOUNDS_INDEXING,\n+                                    expr.span,\n+                                    \"range is out of bounds\",\n+                                );\n+                                return;\n+                            }\n+                        },\n+                        (None, Some(end)) => {\n+                            if end > size {\n+                                utils::span_lint(\n+                                    cx,\n+                                    OUT_OF_BOUNDS_INDEXING,\n+                                    expr.span,\n+                                    \"range is out of bounds\",\n+                                );\n+                                return;\n+                            }\n+                        },\n+                        (Some(start), Some(end)) => {\n+                            if start > size || end > size {\n+                                utils::span_lint(\n+                                    cx,\n+                                    OUT_OF_BOUNDS_INDEXING,\n+                                    expr.span,\n+                                    \"range is out of bounds\",\n+                                );\n+                            }\n+                            // early return because both start and end are constant\n+                            return;\n+                        },\n                     }\n                 }\n \n@@ -161,34 +187,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     }\n }\n \n-/// Returns an option containing a tuple with the start and end (exclusive) of\n-/// the range.\n+/// Returns a tuple of options with the start and end (exclusive) values of\n+/// the range. If the start or end is not constant, None is returned.\n fn to_const_range<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     range: Range<'_>,\n     array_size: u128,\n-) -> Option<(u128, u128)> {\n+) -> (Option<u128>, Option<u128>) {\n     let s = range\n         .start\n         .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n     let start = match s {\n-        Some(Some(Constant::Int(x))) => x,\n-        Some(_) => return None,\n-        None => 0,\n+        Some(Some(Constant::Int(x))) => Some(x),\n+        Some(_) => None,\n+        None => Some(0),\n     };\n \n     let e = range\n         .end\n         .map(|expr| constant(cx, cx.tables, expr).map(|(c, _)| c));\n     let end = match e {\n         Some(Some(Constant::Int(x))) => if range.limits == RangeLimits::Closed {\n-            x + 1\n+            Some(x + 1)\n         } else {\n-            x\n+            Some(x)\n         },\n-        Some(_) => return None,\n-        None => array_size,\n+        Some(_) => None,\n+        None => Some(array_size),\n     };\n \n-    Some((start, end))\n+    (start, end)\n }"}, {"sha": "ff154091bb82a674e14e1dfb93b7b5d9dd3b1e97", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "patch": "@@ -91,4 +91,9 @@ fn main() {\n     x[M]; // Ok, should not produce stderr.\n     v[N];\n     v[M];\n+\n+    // issue 3102\n+    let num = 1;\n+    &x[num..10]; // should trigger out of bounds error\n+    &x[10..num]; // should trigger out of bounds error\n }"}, {"sha": "c587269e3e576969eb49f9cf793408936c902e06", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0f3345e8b2f839f1d3e0c8472537d7d954828ccd/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=0f3345e8b2f839f1d3e0c8472537d7d954828ccd", "patch": "@@ -267,5 +267,17 @@ error: indexing may panic.\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: aborting due to 37 previous errors\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:97:6\n+   |\n+97 |     &x[num..10]; // should trigger out of bounds error\n+   |      ^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:98:6\n+   |\n+98 |     &x[10..num]; // should trigger out of bounds error\n+   |      ^^^^^^^^^^\n+\n+error: aborting due to 39 previous errors\n "}]}