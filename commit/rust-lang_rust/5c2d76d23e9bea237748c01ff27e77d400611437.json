{"sha": "5c2d76d23e9bea237748c01ff27e77d400611437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjMmQ3NmQyM2U5YmVhMjM3NzQ4YzAxZmYyN2U3N2Q0MDA2MTE0Mzc=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-01T03:49:12Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T04:25:27Z"}, "message": "Add struct `macros::NameBinding`.", "tree": {"sha": "567cbab1398d986321489a7829d8098ab673f8a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/567cbab1398d986321489a7829d8098ab673f8a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c2d76d23e9bea237748c01ff27e77d400611437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c2d76d23e9bea237748c01ff27e77d400611437", "html_url": "https://github.com/rust-lang/rust/commit/5c2d76d23e9bea237748c01ff27e77d400611437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c2d76d23e9bea237748c01ff27e77d400611437/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff67da63ea4ca9b19e1e8ee97de002a64a2a0473", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff67da63ea4ca9b19e1e8ee97de002a64a2a0473", "html_url": "https://github.com/rust-lang/rust/commit/ff67da63ea4ca9b19e1e8ee97de002a64a2a0473"}], "stats": {"total": 18, "additions": 12, "deletions": 6}, "files": [{"sha": "3db4be02caea8af89bc716c8379fb0790e3bffa5", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5c2d76d23e9bea237748c01ff27e77d400611437/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2d76d23e9bea237748c01ff27e77d400611437/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5c2d76d23e9bea237748c01ff27e77d400611437", "patch": "@@ -57,7 +57,6 @@ use syntax::ext::base::MultiItemModifier;\n use syntax::ext::hygiene::Mark;\n use syntax::ast::{self, FloatTy};\n use syntax::ast::{CRATE_NODE_ID, Name, NodeId, IntTy, UintTy};\n-use syntax::ext::base::SyntaxExtension;\n use syntax::parse::token::{self, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n \n@@ -793,7 +792,7 @@ pub struct ModuleS<'a> {\n     // `populate_module_if_necessary` call.\n     populated: Cell<bool>,\n \n-    macros: RefCell<FnvHashMap<Name, Rc<SyntaxExtension>>>,\n+    macros: RefCell<FnvHashMap<Name, macros::NameBinding>>,\n     macros_escape: bool,\n }\n "}, {"sha": "f120700fd3350dff79346a75b20efedf5f20906c", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5c2d76d23e9bea237748c01ff27e77d400611437/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c2d76d23e9bea237748c01ff27e77d400611437/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=5c2d76d23e9bea237748c01ff27e77d400611437", "patch": "@@ -23,6 +23,11 @@ use syntax::ext::tt::macro_rules;\n use syntax::parse::token::intern;\n use syntax::util::lev_distance::find_best_match_for_name;\n \n+// FIXME(jseyfried) Merge with `::NameBinding`.\n+pub struct NameBinding {\n+    ext: Rc<SyntaxExtension>,\n+}\n+\n #[derive(Clone)]\n pub struct ExpansionData<'a> {\n     pub module: Module<'a>,\n@@ -87,7 +92,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n         while module.macros_escape {\n             module = module.parent.unwrap();\n         }\n-        module.macros.borrow_mut().insert(ident.name, ext);\n+        module.macros.borrow_mut().insert(ident.name, NameBinding {\n+            ext: ext,\n+        });\n     }\n \n     fn add_expansions_at_stmt(&mut self, id: ast::NodeId, macros: Vec<Mark>) {\n@@ -98,7 +105,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n         for i in 0..attrs.len() {\n             let name = intern(&attrs[i].name());\n             match self.expansion_data[&0].module.macros.borrow().get(&name) {\n-                Some(ext) => match **ext {\n+                Some(binding) => match *binding.ext {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n                     }\n@@ -127,8 +134,8 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         let mut module = self.expansion_data[&scope.as_u32()].module;\n         loop {\n-            if let Some(ext) = module.macros.borrow().get(&name) {\n-                return Some(ext.clone());\n+            if let Some(binding) = module.macros.borrow().get(&name) {\n+                return Some(binding.ext.clone());\n             }\n             match module.parent {\n                 Some(parent) => module = parent,"}]}