{"sha": "cd12f47af6e9cc107e11962230252e1d66fd9861", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMTJmNDdhZjZlOWNjMTA3ZTExOTYyMjMwMjUyZTFkNjZmZDk4NjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-24T10:46:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-24T10:46:02Z"}, "message": "make bytes conversion functions private inside read/write functions", "tree": {"sha": "b7754e704c577a8f8dc171fcb5fca9bb652ea5a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7754e704c577a8f8dc171fcb5fca9bb652ea5a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd12f47af6e9cc107e11962230252e1d66fd9861", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd12f47af6e9cc107e11962230252e1d66fd9861", "html_url": "https://github.com/rust-lang/rust/commit/cd12f47af6e9cc107e11962230252e1d66fd9861", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd12f47af6e9cc107e11962230252e1d66fd9861/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "html_url": "https://github.com/rust-lang/rust/commit/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "242e2b1d4a13d18acb70825cf1571e6897e18cc3", "filename": "src/helpers.rs", "status": "modified", "additions": 26, "deletions": 28, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cd12f47af6e9cc107e11962230252e1d66fd9861/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd12f47af6e9cc107e11962230252e1d66fd9861/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=cd12f47af6e9cc107e11962230252e1d66fd9861", "patch": "@@ -445,6 +445,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         'tcx: 'a,\n         'mir: 'a,\n     {\n+        #[cfg(target_os = \"unix\")]\n+        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+            Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n+        }\n+        #[cfg(not(target_os = \"unix\"))]\n+        fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n+            let s = std::str::from_utf8(bytes)\n+                .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n+            Ok(&OsStr::new(s))\n+        }\n+\n         let this = self.eval_context_ref();\n         let bytes = this.memory.read_c_str(scalar)?;\n         bytes_to_os_str(bytes)\n@@ -460,6 +471,21 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         scalar: Scalar<Tag>,\n         size: u64,\n     ) -> InterpResult<'tcx, bool> {\n+        #[cfg(target_os = \"unix\")]\n+        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+            std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n+        }\n+        #[cfg(not(target_os = \"unix\"))]\n+        fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n+            // On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n+            // intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n+            // valid.\n+            os_str\n+                .to_str()\n+                .map(|s| s.as_bytes())\n+                .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n+        }\n+\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n@@ -473,34 +499,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n }\n \n-#[cfg(target_os = \"unix\")]\n-fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-    std::os::unix::ffi::OsStringExt::into_bytes(os_str)\n-}\n-\n-#[cfg(target_os = \"unix\")]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-    Ok(std::os::unix::ffi::OsStringExt::from_bytes(bytes))\n-}\n-\n-// On non-unix platforms the best we can do to transform bytes from/to OS strings is to do the\n-// intermediate transformation into strings. Which invalidates non-utf8 paths that are actually\n-// valid.\n-#[cfg(not(target_os = \"unix\"))]\n-fn os_str_to_bytes<'tcx, 'a>(os_str: &'a OsStr) -> InterpResult<'tcx, &'a [u8]> {\n-    os_str\n-        .to_str()\n-        .map(|s| s.as_bytes())\n-        .ok_or_else(|| err_unsup_format!(\"{:?} is not a valid utf-8 string\", os_str).into())\n-}\n-\n-#[cfg(not(target_os = \"unix\"))]\n-fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n-    let s = std::str::from_utf8(bytes)\n-        .map_err(|_| err_unsup_format!(\"{:?} is not a valid utf-8 string\", bytes))?;\n-    Ok(&OsStr::new(s))\n-}\n-\n pub fn immty_from_int_checked<'tcx>(\n     int: impl Into<i128>,\n     layout: TyLayout<'tcx>,"}]}