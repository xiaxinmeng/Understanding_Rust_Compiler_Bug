{"sha": "d01bd19573a14d53a035bae704bdcdab0680a283", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMWJkMTk1NzNhMTRkNTNhMDM1YmFlNzA0YmRjZGFiMDY4MGEyODM=", "commit": {"author": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-21T21:08:48Z"}, "committer": {"name": "Alexis Bourget", "email": "alexis.bourget@gmail.com", "date": "2020-09-21T21:09:12Z"}, "message": "Fix missing unsafe block for target arch wasm32", "tree": {"sha": "8def2a543a8e42bde1b0e3826188b26374ea3abb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8def2a543a8e42bde1b0e3826188b26374ea3abb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d01bd19573a14d53a035bae704bdcdab0680a283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d01bd19573a14d53a035bae704bdcdab0680a283", "html_url": "https://github.com/rust-lang/rust/commit/d01bd19573a14d53a035bae704bdcdab0680a283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d01bd19573a14d53a035bae704bdcdab0680a283/comments", "author": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "committer": {"login": "poliorcetics", "id": 7951708, "node_id": "MDQ6VXNlcjc5NTE3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/7951708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/poliorcetics", "html_url": "https://github.com/poliorcetics", "followers_url": "https://api.github.com/users/poliorcetics/followers", "following_url": "https://api.github.com/users/poliorcetics/following{/other_user}", "gists_url": "https://api.github.com/users/poliorcetics/gists{/gist_id}", "starred_url": "https://api.github.com/users/poliorcetics/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/poliorcetics/subscriptions", "organizations_url": "https://api.github.com/users/poliorcetics/orgs", "repos_url": "https://api.github.com/users/poliorcetics/repos", "events_url": "https://api.github.com/users/poliorcetics/events{/privacy}", "received_events_url": "https://api.github.com/users/poliorcetics/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3afadaad4f087c86b1a8509109f544214ecad45f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3afadaad4f087c86b1a8509109f544214ecad45f", "html_url": "https://github.com/rust-lang/rust/commit/3afadaad4f087c86b1a8509109f544214ecad45f"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "7226692fa0c989059b97d695f00a9fba3878319f", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d01bd19573a14d53a035bae704bdcdab0680a283/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d01bd19573a14d53a035bae704bdcdab0680a283/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=d01bd19573a14d53a035bae704bdcdab0680a283", "patch": "@@ -377,10 +377,17 @@ pub mod statik {\n         }\n \n         pub unsafe fn get(&self, init: fn() -> T) -> Option<&'static T> {\n-            let value = match self.inner.get() {\n-                Some(ref value) => value,\n-                None => self.inner.initialize(init),\n+            // SAFETY: The caller must ensure no reference is ever handed out to\n+            // the inner cell nor mutable reference to the Option<T> inside said\n+            // cell. This make it safe to hand a reference, though the lifetime\n+            // of 'static is itself unsafe, making the get method unsafe.\n+            let value = unsafe {\n+                match self.inner.get() {\n+                    Some(ref value) => value,\n+                    None => self.inner.initialize(init),\n+                }\n             };\n+\n             Some(value)\n         }\n     }"}]}