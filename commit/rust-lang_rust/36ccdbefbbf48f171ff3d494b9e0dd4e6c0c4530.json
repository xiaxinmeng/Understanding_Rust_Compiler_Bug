{"sha": "36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "node_id": "C_kwDOAAsO6NoAKDM2Y2NkYmVmYmJmNDhmMTcxZmYzZDQ5NGI5ZTBkZDRlNmMwYzQ1MzA", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-05-11T20:36:26Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2022-06-22T17:58:56Z"}, "message": "Remove (transitive) reliance on sorting by DefId in pretty-printer\n\nThis moves us a step closer to removing the `PartialOrd/`Ord` impls\nfor `DefId`. See #90317", "tree": {"sha": "630e67ac3bd5420bf766af1f000ae0745d94e81c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630e67ac3bd5420bf766af1f000ae0745d94e81c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmKzWGEACgkQtAh+UQ6Y\nsWS1RxAAoRwG5kStZg7pRcCRa4NPT0uiF4e5HxUIyXe/HUWChjyM0ScYNTJCnhqD\ncU67nJ/09maHoq2qf8As5YiosCQgLtnGDFMlLtURal88+1XP82b0YE437L0wcsVa\nXfNlSHzGcxHW6yj+9cZaQcnOZocbmYYMudakWSC2l5I+nUSYU0ZEMCA+LPo9fqYB\n4a4o3pxOqJf7rmy7sc9BVPvufkFJ1L95yvSrKCtWC70amyUyi/hmDQVqpXMgUdmZ\ngDnNGaDMDzDZ/CBGtVHOWRQQBb1gWrVcqhl1GXPv03U3Ot8hxixdQdEMaImeFglL\nEatwufI3mtjLn6yS68mdv3p47yH12iCvFBmH22VZocOAwPPYZE96XbjEgmqleHe8\nTLS23cGOId6E31SkQExAXSg0rg4iC9VGqtJSGl6XNsr07+On6pQ3FFZ53ktxIkoP\nig/ttolaskTElZFObmfgRUDgBJzf7tmBi4ooIMByp9IkDYwFa0Vp+bUzwr1qtAR9\noNSkmE0PgDeKGotsVbB98NFZphAnSNZzOdMrVv/cdQeXcG8BHIy1bzghy9Pz7fSa\nCedvgkrNU8vdBR/BTRuUDRQKKcM9NHEK4yOtQ9zOG3RLFtRd2Lbmd/+DD5AIslZC\n3GiJ21a7fLLZd1dtQfgAIe9cttgMU1xCRcns6lp3Uc1pfirf7+8=\n=UB+f\n-----END PGP SIGNATURE-----", "payload": "tree 630e67ac3bd5420bf766af1f000ae0745d94e81c\nparent 10f4ce324baf7cfb7ce2b2096662b82b79204944\nauthor Aaron Hill <aa1ronham@gmail.com> 1652301386 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1655920736 -0500\n\nRemove (transitive) reliance on sorting by DefId in pretty-printer\n\nThis moves us a step closer to removing the `PartialOrd/`Ord` impls\nfor `DefId`. See #90317\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "html_url": "https://github.com/rust-lang/rust/commit/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10f4ce324baf7cfb7ce2b2096662b82b79204944", "url": "https://api.github.com/repos/rust-lang/rust/commits/10f4ce324baf7cfb7ce2b2096662b82b79204944", "html_url": "https://github.com/rust-lang/rust/commit/10f4ce324baf7cfb7ce2b2096662b82b79204944"}], "stats": {"total": 53, "additions": 26, "deletions": 27}, "files": [{"sha": "bfb822fab26e0085d4f0a40d2555f3103bbd3a34", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{\n     TypeSuperFoldable,\n };\n use rustc_apfloat::ieee::{Double, Single};\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n use rustc_data_structures::sso::SsoHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n@@ -779,8 +779,8 @@ pub trait PrettyPrinter<'tcx>:\n         // by looking up the projections associated with the def_id.\n         let bounds = self.tcx().bound_explicit_item_bounds(def_id);\n \n-        let mut traits = BTreeMap::new();\n-        let mut fn_traits = BTreeMap::new();\n+        let mut traits = FxIndexMap::default();\n+        let mut fn_traits = FxIndexMap::default();\n         let mut is_sized = false;\n \n         for predicate in bounds.transpose_iter().map(|e| e.map_bound(|(p, _)| *p)) {\n@@ -970,11 +970,11 @@ pub trait PrettyPrinter<'tcx>:\n         &mut self,\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         proj_ty: Option<(DefId, ty::Binder<'tcx, Term<'tcx>>)>,\n-        traits: &mut BTreeMap<\n+        traits: &mut FxIndexMap<\n             ty::PolyTraitRef<'tcx>,\n-            BTreeMap<DefId, ty::Binder<'tcx, Term<'tcx>>>,\n+            FxIndexMap<DefId, ty::Binder<'tcx, Term<'tcx>>>,\n         >,\n-        fn_traits: &mut BTreeMap<ty::PolyTraitRef<'tcx>, OpaqueFnEntry<'tcx>>,\n+        fn_traits: &mut FxIndexMap<ty::PolyTraitRef<'tcx>, OpaqueFnEntry<'tcx>>,\n     ) {\n         let trait_def_id = trait_ref.def_id();\n \n@@ -1110,19 +1110,18 @@ pub trait PrettyPrinter<'tcx>:\n         // Builtin bounds.\n         // FIXME(eddyb) avoid printing twice (needed to ensure\n         // that the auto traits are sorted *and* printed via cx).\n-        let mut auto_traits: Vec<_> =\n-            predicates.auto_traits().map(|did| (self.tcx().def_path_str(did), did)).collect();\n+        let mut auto_traits: Vec<_> = predicates.auto_traits().collect();\n \n         // The auto traits come ordered by `DefPathHash`. While\n         // `DefPathHash` is *stable* in the sense that it depends on\n         // neither the host nor the phase of the moon, it depends\n         // \"pseudorandomly\" on the compiler version and the target.\n         //\n-        // To avoid that causing instabilities in compiletest\n+        // To avoid causing instabilities in compiletest\n         // output, sort the auto-traits alphabetically.\n-        auto_traits.sort();\n+        auto_traits.sort_by_cached_key(|did| self.tcx().def_path_str(*did));\n \n-        for (_, def_id) in auto_traits {\n+        for def_id in auto_traits {\n             if !first {\n                 p!(\" + \");\n             }"}, {"sha": "384561f8ccd7e0496ef3c867ff4e015f8955a958", "filename": "src/test/ui/associated-types/issue-87261.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.rs?ref=36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "patch": "@@ -83,17 +83,17 @@ fn main() {\n     //~^ ERROR type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_foo());\n-    //~^ ERROR type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n \n     accepts_trait(returns_opaque_derived_foo());\n-    //~^ ERROR type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic());\n     //~^ ERROR type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_foo());\n-    //~^ ERROR type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n \n     accepts_generic_trait(returns_opaque_generic_duplicate());\n-    //~^ ERROR type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+    //~^ ERROR type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n }"}, {"sha": "8db4a49da3c96e4f7790d038e62ac3ad0062a3d4", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=36ccdbefbbf48f171ff3d494b9e0dd4e6c0c4530", "patch": "@@ -160,7 +160,7 @@ help: consider constraining the associated type `<impl DerivedTrait as Trait>::A\n LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static {\n    |                                                 +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Foo + Trait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:85:5\n    |\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n@@ -170,18 +170,18 @@ LL |     accepts_trait(returns_opaque_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Foo + Trait as Trait>::Associated`\n+           found associated type `<impl Trait + Foo as Trait>::Associated`\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n    |\n LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n-help: consider constraining the associated type `<impl Foo + Trait as Trait>::Associated` to `()`\n+help: consider constraining the associated type `<impl Trait + Foo as Trait>::Associated` to `()`\n    |\n LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n    |                                      +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Foo + DerivedTrait as Trait>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n   --> $DIR/issue-87261.rs:88:5\n    |\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n@@ -191,8 +191,8 @@ LL |     accepts_trait(returns_opaque_derived_foo());\n    |     ^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Foo + DerivedTrait as Trait>::Associated`\n-   = help: consider constraining the associated type `<impl Foo + DerivedTrait as Trait>::Associated` to `()`\n+           found associated type `<impl DerivedTrait + Foo as Trait>::Associated`\n+   = help: consider constraining the associated type `<impl DerivedTrait + Foo as Trait>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_trait`\n   --> $DIR/issue-87261.rs:43:27\n@@ -221,7 +221,7 @@ help: consider constraining the associated type `<impl GenericTrait<()> as Gener\n LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'static {\n    |                                                    +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:94:5\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n@@ -231,18 +231,18 @@ LL |     accepts_generic_trait(returns_opaque_generic_foo());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated`\n+           found associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated`\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46\n    |\n LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n-help: consider constraining the associated type `<impl Foo + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n+help: consider constraining the associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated` to `()`\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> + Foo {\n    |                                                        +++++++++++++++++\n \n-error[E0271]: type mismatch resolving `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n+error[E0271]: type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n   --> $DIR/issue-87261.rs:97:5\n    |\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n@@ -252,8 +252,8 @@ LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n    |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n    |\n    = note:    expected unit type `()`\n-           found associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated`\n-   = help: consider constraining the associated type `<impl GenericTrait<u8> + GenericTrait<()> as GenericTrait<()>>::Associated` to `()`\n+           found associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated`\n+   = help: consider constraining the associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated` to `()`\n    = note: for more information, visit https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\n note: required by a bound in `accepts_generic_trait`\n   --> $DIR/issue-87261.rs:44:46"}]}