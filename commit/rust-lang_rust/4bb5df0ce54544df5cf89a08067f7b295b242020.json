{"sha": "4bb5df0ce54544df5cf89a08067f7b295b242020", "node_id": "C_kwDOAAsO6NoAKDRiYjVkZjBjZTU0NTQ0ZGY1Y2Y4OWEwODA2N2Y3YjI5NWIyNDIwMjA", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-03-22T15:05:24Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-03-22T15:08:46Z"}, "message": "Avoid signature help inside multiline expressions\n\nFixes #11768", "tree": {"sha": "86736bea4cefd32386dcb1aa03e07d660a8b04eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86736bea4cefd32386dcb1aa03e07d660a8b04eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb5df0ce54544df5cf89a08067f7b295b242020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb5df0ce54544df5cf89a08067f7b295b242020", "html_url": "https://github.com/rust-lang/rust/commit/4bb5df0ce54544df5cf89a08067f7b295b242020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb5df0ce54544df5cf89a08067f7b295b242020/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9cefb9916143abcba6c743a200b27b1a519d3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cefb9916143abcba6c743a200b27b1a519d3ef", "html_url": "https://github.com/rust-lang/rust/commit/c9cefb9916143abcba6c743a200b27b1a519d3ef"}], "stats": {"total": 99, "additions": 88, "deletions": 11}, "files": [{"sha": "06fdc641f849685b093d98ba75e308fb38b9afb2", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 79, "deletions": 10, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5df0ce54544df5cf89a08067f7b295b242020/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5df0ce54544df5cf89a08067f7b295b242020/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=4bb5df0ce54544df5cf89a08067f7b295b242020", "patch": "@@ -4,11 +4,15 @@\n use either::Either;\n use hir::{HasAttrs, HirDisplay, Semantics};\n use ide_db::{\n-    active_parameter::{callable_for_token, generics_for_token},\n+    active_parameter::{callable_for_node, generics_for_token},\n     base_db::FilePosition,\n };\n use stdx::format_to;\n-use syntax::{algo, AstNode, Direction, TextRange, TextSize};\n+use syntax::{\n+    algo,\n+    ast::{self, HasArgList},\n+    AstNode, Direction, SyntaxToken, TextRange, TextSize,\n+};\n \n use crate::RootDatabase;\n \n@@ -65,8 +69,8 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n         .and_then(|tok| algo::skip_trivia_token(tok, Direction::Prev))?;\n     let token = sema.descend_into_macros_single(token);\n \n-    if let Some((callable, active_parameter)) = callable_for_token(&sema, token.clone()) {\n-        return Some(signature_help_for_callable(db, callable, active_parameter));\n+    if let Some(help) = signature_help_for_call(&sema, &token) {\n+        return Some(help);\n     }\n \n     if let Some((generic_def, active_parameter)) = generics_for_token(&sema, token.clone()) {\n@@ -76,14 +80,39 @@ pub(crate) fn signature_help(db: &RootDatabase, position: FilePosition) -> Optio\n     None\n }\n \n-fn signature_help_for_callable(\n-    db: &RootDatabase,\n-    callable: hir::Callable,\n-    active_parameter: Option<usize>,\n-) -> SignatureHelp {\n+fn signature_help_for_call(\n+    sema: &Semantics<RootDatabase>,\n+    token: &SyntaxToken,\n+) -> Option<SignatureHelp> {\n+    // Find the calling expression and its NameRef\n+    let mut node = token.parent()?;\n+    let calling_node = loop {\n+        if let Some(callable) = ast::CallableExpr::cast(node.clone()) {\n+            if callable\n+                .arg_list()\n+                .map_or(false, |it| it.syntax().text_range().contains(token.text_range().start()))\n+            {\n+                break callable;\n+            }\n+        }\n+\n+        // Stop at multi-line expressions, since the signature of the outer call is not very\n+        // helpful inside them.\n+        if let Some(expr) = ast::Expr::cast(node.clone()) {\n+            if expr.syntax().text().contains_char('\\n') {\n+                return None;\n+            }\n+        }\n+\n+        node = node.parent()?;\n+    };\n+\n+    let (callable, active_parameter) = callable_for_node(sema, &calling_node, token)?;\n+\n     let mut res =\n         SignatureHelp { doc: None, signature: String::new(), parameters: vec![], active_parameter };\n \n+    let db = sema.db;\n     match callable.kind() {\n         hir::CallableKind::Function(func) => {\n             res.doc = func.docs(db).map(|it| it.into());\n@@ -134,7 +163,7 @@ fn signature_help_for_callable(\n         }\n         hir::CallableKind::TupleStruct(_) | hir::CallableKind::TupleEnumVariant(_) => {}\n     }\n-    res\n+    Some(res)\n }\n \n fn signature_help_for_generics(\n@@ -786,6 +815,46 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn test_multiline_argument() {\n+        check(\n+            r#\"\n+fn callee(a: u8, b: u8) {}\n+fn main() {\n+    callee(match 0 {\n+        0 => 1,$0\n+    })\n+}\"#,\n+            expect![[r#\"\"#]],\n+        );\n+        check(\n+            r#\"\n+fn callee(a: u8, b: u8) {}\n+fn main() {\n+    callee(match 0 {\n+        0 => 1,\n+    },$0)\n+}\"#,\n+            expect![[r#\"\n+                fn callee(a: u8, b: u8)\n+                          -----  ^^^^^\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+fn callee(a: u8, b: u8) {}\n+fn main() {\n+    callee($0match 0 {\n+        0 => 1,\n+    })\n+}\"#,\n+            expect![[r#\"\n+                fn callee(a: u8, b: u8)\n+                          ^^^^^  -----\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_generics_simple() {\n         check("}, {"sha": "ed0c010f8365bd3bfcb13ed2681e267cb9585a8b", "filename": "crates/ide_db/src/active_parameter.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bb5df0ce54544df5cf89a08067f7b295b242020/crates%2Fide_db%2Fsrc%2Factive_parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb5df0ce54544df5cf89a08067f7b295b242020/crates%2Fide_db%2Fsrc%2Factive_parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Factive_parameter.rs?ref=4bb5df0ce54544df5cf89a08067f7b295b242020", "patch": "@@ -43,13 +43,21 @@ pub fn callable_for_token(\n     sema: &Semantics<RootDatabase>,\n     token: SyntaxToken,\n ) -> Option<(hir::Callable, Option<usize>)> {\n-    // Find the calling expression and it's NameRef\n+    // Find the calling expression and its NameRef\n     let parent = token.parent()?;\n     let calling_node = parent.ancestors().filter_map(ast::CallableExpr::cast).find(|it| {\n         it.arg_list()\n             .map_or(false, |it| it.syntax().text_range().contains(token.text_range().start()))\n     })?;\n \n+    callable_for_node(sema, &calling_node, &token)\n+}\n+\n+pub fn callable_for_node(\n+    sema: &Semantics<RootDatabase>,\n+    calling_node: &ast::CallableExpr,\n+    token: &SyntaxToken,\n+) -> Option<(hir::Callable, Option<usize>)> {\n     let callable = match &calling_node {\n         ast::CallableExpr::Call(call) => {\n             let expr = call.expr()?;"}]}