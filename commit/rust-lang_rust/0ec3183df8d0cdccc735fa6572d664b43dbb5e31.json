{"sha": "0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYzMxODNkZjhkMGNkY2NjNzM1ZmE2NTcyZDY2NGI0M2RiYjVlMzE=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-25T23:28:04Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-05-26T09:33:53Z"}, "message": "Remove ObjectCastMap", "tree": {"sha": "feb270a4f3d85ee06b91816690ea53b46febf544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feb270a4f3d85ee06b91816690ea53b46febf544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "html_url": "https://github.com/rust-lang/rust/commit/0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f4ee40ead271bffc1a251f03ccd60de4250f72e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ee40ead271bffc1a251f03ccd60de4250f72e3", "html_url": "https://github.com/rust-lang/rust/commit/f4ee40ead271bffc1a251f03ccd60de4250f72e3"}], "stats": {"total": 60, "additions": 7, "deletions": 53}, "files": [{"sha": "5f785fefa1241f93c50eb644a5d05daf467c348b", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -146,7 +146,7 @@ enum_from_u32! {\n         tag_table_closure_kinds = 0x65,\n         tag_table_upvar_capture_map = 0x66,\n         tag_table_capture_modes = 0x67,\n-        tag_table_object_cast_map = 0x68,\n+        // GAP 0x68\n         tag_table_const_qualif = 0x69,\n         tag_table_cast_kinds = 0x6a,\n     }"}, {"sha": "fda57c9dc610a5a222bc6faba121920b5ce07b77", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -1117,13 +1117,6 @@ fn encode_side_tables_for_id(ecx: &e::EncodeContext,\n         })\n     }\n \n-    if let Some(trait_ref) = tcx.object_cast_map.borrow().get(&id) {\n-        rbml_w.tag(c::tag_table_object_cast_map, |rbml_w| {\n-            rbml_w.id(id);\n-            rbml_w.emit_trait_ref(ecx, &trait_ref.0);\n-        })\n-    }\n-\n     if let Some(adjustment) = tcx.adjustments.borrow().get(&id) {\n         match *adjustment {\n             ty::AdjustDerefRef(ref adj) => {\n@@ -1708,11 +1701,6 @@ fn decode_side_tables(dcx: &DecodeContext,\n                         };\n                         dcx.tcx.method_map.borrow_mut().insert(method_call, method);\n                     }\n-                    c::tag_table_object_cast_map => {\n-                        let trait_ref = val_dsr.read_poly_trait_ref(dcx);\n-                        dcx.tcx.object_cast_map.borrow_mut()\n-                                               .insert(id, trait_ref);\n-                    }\n                     c::tag_table_adjustments => {\n                         let adj: ty::AutoAdjustment = val_dsr.read_auto_adjustment(dcx);\n                         dcx.tcx.adjustments.borrow_mut().insert(id, adj);"}, {"sha": "2ccbb0c5c103e98bcad2b9e83ee2c7a34c70270d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -503,10 +503,6 @@ impl MethodCall {\n // of the method to be invoked\n pub type MethodMap<'tcx> = RefCell<FnvHashMap<MethodCall, MethodCallee<'tcx>>>;\n \n-// For every explicit cast into an object type, maps from the cast\n-// expr to the associated trait ref.\n-pub type ObjectCastMap<'tcx> = RefCell<NodeMap<ty::PolyTraitRef<'tcx>>>;\n-\n // Contains information needed to resolve types and (in the future) look up\n // the types of AST nodes.\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n@@ -557,8 +553,7 @@ pub struct CtxtArenas<'tcx> {\n     stability: TypedArena<attr::Stability>,\n \n     // references\n-    trait_defs: TypedArena<TraitDef<'tcx>>\n-\n+    trait_defs: TypedArena<TraitDef<'tcx>>,\n }\n \n impl<'tcx> CtxtArenas<'tcx> {\n@@ -612,7 +607,6 @@ pub struct ctxt<'tcx> {\n     region_interner: RefCell<FnvHashMap<&'tcx Region, &'tcx Region>>,\n     stability_interner: RefCell<FnvHashMap<&'tcx attr::Stability, &'tcx attr::Stability>>,\n \n-\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n@@ -665,10 +659,6 @@ pub struct ctxt<'tcx> {\n     /// additional acyclicity requirements).\n     pub super_predicates: RefCell<DefIdMap<GenericPredicates<'tcx>>>,\n \n-    /// Maps from node-id of a trait object cast (like `foo as\n-    /// Box<Trait>`) to the trait reference.\n-    pub object_cast_map: ObjectCastMap<'tcx>,\n-\n     pub map: ast_map::Map<'tcx>,\n     pub freevars: RefCell<FreevarMap>,\n     pub tcache: RefCell<DefIdMap<TypeScheme<'tcx>>>,\n@@ -2742,7 +2732,6 @@ pub fn mk_ctxt<'tcx>(s: Session,\n         trait_defs: RefCell::new(DefIdMap()),\n         predicates: RefCell::new(DefIdMap()),\n         super_predicates: RefCell::new(DefIdMap()),\n-        object_cast_map: RefCell::new(NodeMap()),\n         map: map,\n         freevars: freevars,\n         tcache: RefCell::new(DefIdMap()),"}, {"sha": "62726a3ae7b64b083db3794df2bc07ceac79e590", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -1796,7 +1796,8 @@ declare_lint! {\n pub struct Stability;\n \n impl Stability {\n-    fn lint(&self, cx: &Context, _id: ast::DefId, span: Span, stability: &Option<&attr::Stability>) {\n+    fn lint(&self, cx: &Context, _id: ast::DefId,\n+            span: Span, stability: &Option<&attr::Stability>) {\n         // Deprecated attributes apply in-crate and cross-crate.\n         let (lint, label) = match *stability {\n             Some(&attr::Stability { deprecated_since: Some(_), .. }) =>"}, {"sha": "eb6e90414e3fda3f34a5031c1f3051fabbdc697e", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -98,7 +98,7 @@ use middle::ty::{FnSig, GenericPredicates, TypeScheme};\n use middle::ty::{Disr, ParamTy, ParameterEnvironment};\n use middle::ty::{self, HasProjectionTypes, RegionEscape, ToPolyTraitRef, Ty};\n use middle::ty::liberate_late_bound_regions;\n-use middle::ty::{MethodCall, MethodCallee, MethodMap, ObjectCastMap};\n+use middle::ty::{MethodCall, MethodCallee, MethodMap};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use rscope::RegionScope;\n use session::Session;\n@@ -164,7 +164,6 @@ pub struct Inherited<'a, 'tcx: 'a> {\n     upvar_capture_map: RefCell<ty::UpvarCaptureMap>,\n     closure_tys: RefCell<DefIdMap<ty::ClosureTy<'tcx>>>,\n     closure_kinds: RefCell<DefIdMap<ty::ClosureKind>>,\n-    object_cast_map: ObjectCastMap<'tcx>,\n \n     // A mapping from each fn's id to its signature, with all bound\n     // regions replaced with free ones. Unlike the other tables, this\n@@ -383,7 +382,6 @@ impl<'a, 'tcx> Inherited<'a, 'tcx> {\n             item_substs: RefCell::new(NodeMap()),\n             adjustments: RefCell::new(NodeMap()),\n             method_map: RefCell::new(FnvHashMap()),\n-            object_cast_map: RefCell::new(NodeMap()),\n             upvar_capture_map: RefCell::new(FnvHashMap()),\n             closure_tys: RefCell::new(DefIdMap()),\n             closure_kinds: RefCell::new(DefIdMap()),"}, {"sha": "7eba4c0375f9a76770ea556d0e2e1fb972cbd4f9", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -41,7 +41,6 @@ pub fn resolve_type_vars_in_expr(fcx: &FnCtxt, e: &ast::Expr) {\n     wbcx.visit_expr(e);\n     wbcx.visit_upvar_borrow_map();\n     wbcx.visit_closures();\n-    wbcx.visit_object_cast_map();\n }\n \n pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n@@ -62,7 +61,6 @@ pub fn resolve_type_vars_in_fn(fcx: &FnCtxt,\n     }\n     wbcx.visit_upvar_borrow_map();\n     wbcx.visit_closures();\n-    wbcx.visit_object_cast_map();\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -239,27 +237,6 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n         }\n     }\n \n-    fn visit_object_cast_map(&self) {\n-        if self.fcx.writeback_errors.get() {\n-            return\n-        }\n-\n-        for (&node_id, trait_ref) in self.fcx\n-                                            .inh\n-                                            .object_cast_map\n-                                            .borrow()\n-                                            .iter()\n-        {\n-            let span = ty::expr_span(self.tcx(), node_id);\n-            let reason = ResolvingExpr(span);\n-            let closure_ty = self.resolve(trait_ref, reason);\n-            self.tcx()\n-                .object_cast_map\n-                .borrow_mut()\n-                .insert(node_id, closure_ty);\n-        }\n-    }\n-\n     fn visit_node_id(&self, reason: ResolveReason, id: ast::NodeId) {\n         // Resolve any borrowings for the node with id `id`\n         self.visit_adjustments(reason, id);"}, {"sha": "212423d16d43b3bf2a1d5f8ddb1257d0a7c4021e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ec3183df8d0cdccc735fa6572d664b43dbb5e31/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0ec3183df8d0cdccc735fa6572d664b43dbb5e31", "patch": "@@ -286,7 +286,8 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n             }\n             _ => {\n                 self.crate_context.tcx.sess.span_bug(item.span,\n-                                                     \"can't convert a non-impl to an impl\");\n+                                                     \"can't convert a non-impl \\\n+                                                      to an impl\");\n             }\n         }\n     }"}]}