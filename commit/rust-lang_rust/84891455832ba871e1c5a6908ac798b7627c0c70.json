{"sha": "84891455832ba871e1c5a6908ac798b7627c0c70", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ODkxNDU1ODMyYmE4NzFlMWM1YTY5MDhhYzc5OGI3NjI3YzBjNzA=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T13:17:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T13:17:36Z"}, "message": "Merge #5202\n\n5202: Runnable env r=matklad a=vsrs\n\nThis PR adds on option to specify (in the settings.json) environment variables passed to the runnable.\r\nThe simplest way for all runnables in a bunch:\r\n```jsonc\r\n    \"rust-analyzer.runnableEnv\": {\r\n        \"RUN_SLOW_TESTS\": \"1\"\r\n    }\r\n```\r\n\r\nOr it is possible to specify vars more granularly:\r\n```jsonc\r\n    \"rust-analyzer.runnableEnv\": [\r\n        {\r\n            // \"mask\": null, // null mask means that this rule will be applied for all runnables\r\n            env: {\r\n                 \"APP_ID\": \"1\",\r\n                 \"APP_DATA\": \"asdf\"\r\n            }\r\n        },\r\n        {\r\n            \"mask\": \"test_name\",\r\n            \"env\": {\r\n                 \"APP_ID\": \"2\", // overwrites only APP_ID\r\n            }\r\n        }\r\n    ]\r\n```\r\n\r\nYou can use any valid RegExp as a mask. Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively.\r\n\r\nFixes #4450\r\n\r\nI suppose this info should be somewhere in the docs, but unsure where is the best place.\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "a0f4fb16c857d759b9f95e5d9322080fe76101b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0f4fb16c857d759b9f95e5d9322080fe76101b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84891455832ba871e1c5a6908ac798b7627c0c70", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/y/wCRBK7hj4Ov3rIwAAdHIIAK+2aXZzB1wQGkhRlQAxH5NJ\nHbx2OZHhd1Aed073W5aRhiEUgrl027xjI5gOEkYBAUe3G5iuVcgnqhmMstcace6K\nLKGnd7ysm4+TMwIh/PiKcGCTjUqT/apC7TM4E2Q5JeyI7AMHy/4nM338NPgYXOMp\nsiRKYiF+Piz9rABXhPq8d6vuOLQBvGLmV/Ujh7bj60UXD4sbo1cEFFLTKyXtF1y5\n4lphAwNTUcuwaE9haI3bCX/XkzJK9z2Xm+7i5+y+bYJSvkfPOcpxi2NAW5lpljL4\nIrw2QjYATUgPIEBxdUtOYY4ByG8JjtDXcjybEnPIvnZI9BPxSpfJV2/uMi3n8gs=\n=8UT0\n-----END PGP SIGNATURE-----\n", "payload": "tree a0f4fb16c857d759b9f95e5d9322080fe76101b5\nparent f51b0cfdd6c23dd57a0a11154179730171c0425d\nparent 188d24024cd2770822d3e525be3ea330e79625c8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593782256 +0000\ncommitter GitHub <noreply@github.com> 1593782256 +0000\n\nMerge #5202\n\n5202: Runnable env r=matklad a=vsrs\n\nThis PR adds on option to specify (in the settings.json) environment variables passed to the runnable.\r\nThe simplest way for all runnables in a bunch:\r\n```jsonc\r\n    \"rust-analyzer.runnableEnv\": {\r\n        \"RUN_SLOW_TESTS\": \"1\"\r\n    }\r\n```\r\n\r\nOr it is possible to specify vars more granularly:\r\n```jsonc\r\n    \"rust-analyzer.runnableEnv\": [\r\n        {\r\n            // \"mask\": null, // null mask means that this rule will be applied for all runnables\r\n            env: {\r\n                 \"APP_ID\": \"1\",\r\n                 \"APP_DATA\": \"asdf\"\r\n            }\r\n        },\r\n        {\r\n            \"mask\": \"test_name\",\r\n            \"env\": {\r\n                 \"APP_ID\": \"2\", // overwrites only APP_ID\r\n            }\r\n        }\r\n    ]\r\n```\r\n\r\nYou can use any valid RegExp as a mask. Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively.\r\n\r\nFixes #4450\r\n\r\nI suppose this info should be somewhere in the docs, but unsure where is the best place.\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84891455832ba871e1c5a6908ac798b7627c0c70", "html_url": "https://github.com/rust-lang/rust/commit/84891455832ba871e1c5a6908ac798b7627c0c70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84891455832ba871e1c5a6908ac798b7627c0c70/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f51b0cfdd6c23dd57a0a11154179730171c0425d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f51b0cfdd6c23dd57a0a11154179730171c0425d", "html_url": "https://github.com/rust-lang/rust/commit/f51b0cfdd6c23dd57a0a11154179730171c0425d"}, {"sha": "188d24024cd2770822d3e525be3ea330e79625c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/188d24024cd2770822d3e525be3ea330e79625c8", "html_url": "https://github.com/rust-lang/rust/commit/188d24024cd2770822d3e525be3ea330e79625c8"}], "stats": {"total": 260, "additions": 235, "deletions": 25}, "files": [{"sha": "7816287e4009594868f3b01da57487897c641f1d", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 44, "deletions": 12, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -109,18 +109,6 @@ Here are some useful self-diagnostic commands:\n * To log all LSP requests, add `\"rust-analyzer.trace.server\": \"verbose\"` to the settings and look for `Server Trace` in the panel.\n * To enable client-side logging, add `\"rust-analyzer.trace.extension\": true` to the settings and open the `Console` tab of VS Code developer tools.\n \n-==== Special `when` clause context for keybindings.\n-You may use `inRustProject` context to configure keybindings for rust projects only. For example:\n-[source,json]\n-----\n-{\n-  \"key\": \"ctrl+i\",\n-  \"command\": \"rust-analyzer.toggleInlayHints\",\n-  \"when\": \"inRustProject\"\n-}\n-----\n-More about `when` clause contexts https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts[here].\n-\n === rust-analyzer Language Server Binary\n \n Other editors generally require the `rust-analyzer` binary to be in `$PATH`.\n@@ -337,3 +325,47 @@ They are usually triggered by a shortcut or by clicking a light bulb icon in the\n Cursor position or selection is signified by `\u2503` character.\n \n include::./generated_assists.adoc[]\n+\n+== Editor Features\n+=== VS Code\n+==== Special `when` clause context for keybindings.\n+You may use `inRustProject` context to configure keybindings for rust projects only. For example:\n+[source,json]\n+----\n+{\n+  \"key\": \"ctrl+i\",\n+  \"command\": \"rust-analyzer.toggleInlayHints\",\n+  \"when\": \"inRustProject\"\n+}\n+----\n+More about `when` clause contexts https://code.visualstudio.com/docs/getstarted/keybindings#_when-clause-contexts[here].\n+\n+==== Setting runnable environment variables\n+You can use \"rust-analyzer.runnableEnv\" setting to define runnable environment-specific substitution variables.\n+The simplest way for all runnables in a bunch:\n+```jsonc\n+\"rust-analyzer.runnableEnv\": {\n+    \"RUN_SLOW_TESTS\": \"1\"\n+}\n+```\n+\n+Or it is possible to specify vars more granularly:\n+```jsonc\n+\"rust-analyzer.runnableEnv\": [\n+    {\n+        // \"mask\": null, // null mask means that this rule will be applied for all runnables\n+        env: {\n+             \"APP_ID\": \"1\",\n+             \"APP_DATA\": \"asdf\"\n+        }\n+    },\n+    {\n+        \"mask\": \"test_name\",\n+        \"env\": {\n+             \"APP_ID\": \"2\", // overwrites only APP_ID\n+        }\n+    }\n+]\n+```\n+\n+You can use any valid RegExp as a mask. Also note that a full runnable name is something like *run bin_or_example_name*, *test some::mod::test_name* or *test-mod some::mod*, so it is possible to distinguish binaries, single tests, and test modules with this masks: `\"^run\"`, `\"^test \"` (the trailing space matters!), and `\"^test-mod\"` respectively."}, {"sha": "7c8b2fbece019211330d94b5c4653dd665f8c553", "filename": "editors/code/package.json", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -344,6 +344,35 @@\n                     \"default\": null,\n                     \"description\": \"Custom cargo runner extension ID.\"\n                 },\n+                \"rust-analyzer.runnableEnv\": {\n+                    \"anyOf\": [\n+                        {\n+                            \"type\": \"null\"\n+                        },\n+                        {\n+                            \"type\": \"array\",\n+                            \"items\": {\n+                                \"type\": \"object\",\n+                                \"properties\": {\n+                                    \"mask\": {\n+                                        \"type\": \"string\",\n+                                        \"description\": \"Runnable name mask\"\n+                                    },\n+                                    \"env\": {\n+                                        \"type\": \"object\",\n+                                        \"description\": \"Variables in form of { \\\"key\\\": \\\"value\\\"}\"\n+                                    }\n+                                }\n+                            }\n+                        },\n+                        {\n+                            \"type\": \"object\",\n+                            \"description\": \"Variables in form of { \\\"key\\\": \\\"value\\\"}\"\n+                        }\n+                    ],\n+                    \"default\": null,\n+                    \"description\": \"Environment variables passed to the runnable launched using `Test ` or `Debug` lens or `rust-analyzer.run` command.\"\n+                },\n                 \"rust-analyzer.inlayHints.enable\": {\n                     \"type\": \"boolean\",\n                     \"default\": true,"}, {"sha": "23975c72616c75a665a287239bc082fc4e12aca9", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -5,6 +5,8 @@ export type UpdatesChannel = \"stable\" | \"nightly\";\n \n export const NIGHTLY_TAG = \"nightly\";\n \n+export type RunnableEnvCfg = undefined | Record<string, string> | { mask?: string; env: Record<string, string> }[];\n+\n export class Config {\n     readonly extensionId = \"matklad.rust-analyzer\";\n \n@@ -114,6 +116,10 @@ export class Config {\n         return this.get<string | undefined>(\"cargoRunner\");\n     }\n \n+    get runnableEnv() {\n+        return this.get<RunnableEnvCfg>(\"runnableEnv\");\n+    }\n+\n     get debug() {\n         // \"/rustc/<id>\" used by suggestions only.\n         const { [\"/rustc/<id>\"]: _, ...sourceFileMap } = this.get<Record<string, string>>(\"debug.sourceFileMap\");"}, {"sha": "bd92c5b6d739fbd32e87406590bfc0c14f2b2439", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -5,9 +5,10 @@ import * as ra from './lsp_ext';\n \n import { Cargo } from './toolchain';\n import { Ctx } from \"./ctx\";\n+import { prepareEnv } from \"./run\";\n \n const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n-type DebugConfigProvider = (config: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n+type DebugConfigProvider = (config: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>) => vscode.DebugConfiguration;\n \n export async function makeDebugConfig(ctx: Ctx, runnable: ra.Runnable): Promise<void> {\n     const scope = ctx.activeRustEditor?.document.uri;\n@@ -92,7 +93,8 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     const executable = await getDebugExecutable(runnable);\n-    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), debugOptions.sourceFileMap);\n+    const env = prepareEnv(runnable, ctx.config.runnableEnv);\n+    const debugConfig = knownEngines[debugEngine.id](runnable, simplifyPath(executable), env, debugOptions.sourceFileMap);\n     if (debugConfig.type in debugOptions.engineSettings) {\n         const settingsMap = (debugOptions.engineSettings as any)[debugConfig.type];\n         for (var key in settingsMap) {\n@@ -121,7 +123,7 @@ async function getDebugExecutable(runnable: ra.Runnable): Promise<string> {\n     return executable;\n }\n \n-function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getLldbDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: \"lldb\",\n         request: \"launch\",\n@@ -130,18 +132,20 @@ function getLldbDebugConfig(runnable: ra.Runnable, executable: string, sourceFil\n         args: runnable.args.executableArgs,\n         cwd: runnable.args.workspaceRoot,\n         sourceMap: sourceFileMap,\n-        sourceLanguages: [\"rust\"]\n+        sourceLanguages: [\"rust\"],\n+        env\n     };\n }\n \n-function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n+function getCppvsDebugConfig(runnable: ra.Runnable, executable: string, env: Record<string, string>, sourceFileMap?: Record<string, string>): vscode.DebugConfiguration {\n     return {\n         type: (os.platform() === \"win32\") ? \"cppvsdbg\" : \"cppdbg\",\n         request: \"launch\",\n         name: runnable.label,\n         program: executable,\n         args: runnable.args.executableArgs,\n         cwd: runnable.args.workspaceRoot,\n-        sourceFileMap: sourceFileMap,\n+        sourceFileMap,\n+        env,\n     };\n }"}, {"sha": "de68f27aec512bad9005a26712a911caa1c26564", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -5,7 +5,7 @@ import * as tasks from './tasks';\n \n import { Ctx } from './ctx';\n import { makeDebugConfig } from './debug';\n-import { Config } from './config';\n+import { Config, RunnableEnvCfg } from './config';\n \n const quickPickButtons = [{ iconPath: new vscode.ThemeIcon(\"save\"), tooltip: \"Save as a launch.json configurtation.\" }];\n \n@@ -96,6 +96,30 @@ export class RunnableQuickPick implements vscode.QuickPickItem {\n     }\n }\n \n+export function prepareEnv(runnable: ra.Runnable, runnableEnvCfg: RunnableEnvCfg): Record<string, string> {\n+    const env: Record<string, string> = { \"RUST_BACKTRACE\": \"short\" };\n+\n+    if (runnable.args.expectTest) {\n+        env[\"UPDATE_EXPECT\"] = \"1\";\n+    }\n+\n+    Object.assign(env, process.env as { [key: string]: string });\n+\n+    if (runnableEnvCfg) {\n+        if (Array.isArray(runnableEnvCfg)) {\n+            for (const it of runnableEnvCfg) {\n+                if (!it.mask || new RegExp(it.mask).test(runnable.label)) {\n+                    Object.assign(env, it.env);\n+                }\n+            }\n+        } else {\n+            Object.assign(env, runnableEnvCfg);\n+        }\n+    }\n+\n+    return env;\n+}\n+\n export async function createTask(runnable: ra.Runnable, config: Config): Promise<vscode.Task> {\n     if (runnable.kind !== \"cargo\") {\n         // rust-analyzer supports only one kind, \"cargo\"\n@@ -108,16 +132,13 @@ export async function createTask(runnable: ra.Runnable, config: Config): Promise\n     if (runnable.args.executableArgs.length > 0) {\n         args.push('--', ...runnable.args.executableArgs);\n     }\n-    const env: { [key: string]: string } = { \"RUST_BACKTRACE\": \"short\" };\n-    if (runnable.args.expectTest) {\n-        env[\"UPDATE_EXPECT\"] = \"1\";\n-    }\n+\n     const definition: tasks.CargoTaskDefinition = {\n         type: tasks.TASK_TYPE,\n         command: args[0], // run, test, etc...\n         args: args.slice(1),\n-        cwd: runnable.args.workspaceRoot,\n-        env: Object.assign({}, process.env as { [key: string]: string }, env),\n+        cwd: runnable.args.workspaceRoot || \".\",\n+        env: prepareEnv(runnable, config.runnableEnv),\n     };\n \n     const target = vscode.workspace.workspaceFolders![0]; // safe, see main activate()"}, {"sha": "f2f53e91ad92f98fa2dcacc75935fea5a9cfa4a8", "filename": "editors/code/tests/unit/runnable_env.test.ts", "status": "added", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "raw_url": "https://github.com/rust-lang/rust/raw/84891455832ba871e1c5a6908ac798b7627c0c70/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Ftests%2Funit%2Frunnable_env.test.ts?ref=84891455832ba871e1c5a6908ac798b7627c0c70", "patch": "@@ -0,0 +1,118 @@\n+import * as assert from 'assert';\n+import { prepareEnv } from '../../src/run';\n+import { RunnableEnvCfg } from '../../src/config';\n+import * as ra from '../../src/lsp_ext';\n+\n+function makeRunnable(label: string): ra.Runnable {\n+    return {\n+        label,\n+        kind: \"cargo\",\n+        args: {\n+            cargoArgs: [],\n+            executableArgs: []\n+        }\n+    };\n+}\n+\n+function fakePrepareEnv(runnableName: string, config: RunnableEnvCfg): Record<string, string> {\n+    const runnable = makeRunnable(runnableName);\n+    return prepareEnv(runnable, config);\n+}\n+\n+suite('Runnable env', () => {\n+    test('Global config works', () => {\n+        const binEnv = fakePrepareEnv(\"run project_name\", { \"GLOBAL\": \"g\" });\n+        assert.equal(binEnv[\"GLOBAL\"], \"g\");\n+\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", { \"GLOBAL\": \"g\" });\n+        assert.equal(testEnv[\"GLOBAL\"], \"g\");\n+    });\n+\n+    test('null mask works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            }\n+        ];\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"data\");\n+\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"data\");\n+    });\n+\n+    test('order works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                env: { DATA: \"newdata\" }\n+            }\n+        ];\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"newdata\");\n+\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"newdata\");\n+    });\n+\n+    test('mask works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"^run\",\n+                env: { DATA: \"rundata\" }\n+            },\n+            {\n+                mask: \"special_test$\",\n+                env: { DATA: \"special_test\" }\n+            }\n+        ];\n+        const binEnv = fakePrepareEnv(\"run project_name\", config);\n+        assert.equal(binEnv[\"DATA\"], \"rundata\");\n+\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"data\");\n+\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::special_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"special_test\");\n+    });\n+\n+    test('exact test name works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"some::mod::test_name\",\n+                env: { DATA: \"test special\" }\n+            }\n+        ];\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"test special\");\n+\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"data\");\n+    });\n+\n+    test('test mod name works', () => {\n+        const config = [\n+            {\n+                env: { DATA: \"data\" }\n+            },\n+            {\n+                mask: \"some::mod\",\n+                env: { DATA: \"mod special\" }\n+            }\n+        ];\n+        const testEnv = fakePrepareEnv(\"test some::mod::test_name\", config);\n+        assert.equal(testEnv[\"DATA\"], \"mod special\");\n+\n+        const specialTestEnv = fakePrepareEnv(\"test some::mod::another_test\", config);\n+        assert.equal(specialTestEnv[\"DATA\"], \"mod special\");\n+    });\n+\n+});"}]}