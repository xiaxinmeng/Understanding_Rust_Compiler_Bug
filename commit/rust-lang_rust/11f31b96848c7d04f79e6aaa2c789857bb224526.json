{"sha": "11f31b96848c7d04f79e6aaa2c789857bb224526", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExZjMxYjk2ODQ4YzdkMDRmNzllNmFhYTJjNzg5ODU3YmIyMjQ1MjY=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-05-31T17:37:58Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-06-01T00:02:56Z"}, "message": "Fix formatting for tidy", "tree": {"sha": "fce6bcb89a405620cc676e7a8a89e9a379050795", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce6bcb89a405620cc676e7a8a89e9a379050795"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11f31b96848c7d04f79e6aaa2c789857bb224526", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11f31b96848c7d04f79e6aaa2c789857bb224526", "html_url": "https://github.com/rust-lang/rust/commit/11f31b96848c7d04f79e6aaa2c789857bb224526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11f31b96848c7d04f79e6aaa2c789857bb224526/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5311d590230428aa5f2473d9dc6355ed943f731d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5311d590230428aa5f2473d9dc6355ed943f731d", "html_url": "https://github.com/rust-lang/rust/commit/5311d590230428aa5f2473d9dc6355ed943f731d"}], "stats": {"total": 27, "additions": 20, "deletions": 7}, "files": [{"sha": "e74a0f4e18e12e7450b908f5c4b0cceef43980d6", "filename": "src/libextra/term.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterm.rs?ref=11f31b96848c7d04f79e6aaa2c789857bb224526", "patch": "@@ -75,7 +75,8 @@ pub impl Terminal {\n         }\n \n         let mut inf = ti.get();\n-        let cs = *inf.numbers.find_or_insert(~\"colors\", 0) >= 16 && inf.strings.find(&~\"setaf\").is_some()\n+        let cs = *inf.numbers.find_or_insert(~\"colors\", 0) >= 16\n+            && inf.strings.find(&~\"setaf\").is_some()\n             && inf.strings.find_equiv(&(\"setab\")).is_some();\n \n         return Ok(Terminal {out: out, ti: inf, color_supported: cs});"}, {"sha": "fd051172792209adb04b92862a94df626a94bff1", "filename": "src/libextra/terminfo/parm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterminfo%2Fparm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterminfo%2Fparm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparm.rs?ref=11f31b96848c7d04f79e6aaa2c789857bb224526", "patch": "@@ -46,7 +46,7 @@ pub enum Param {\n   To be compatible with ncurses, `sta` and `dyn` should be the same between calls to `expand` for\n   multiple capabilities for the same terminal.\n   */\n-pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Param]) \n+pub fn expand(cap: &[u8], params: &mut [Param], sta: &mut [Param], dyn: &mut [Param])\n     -> Result<~[u8], ~str> {\n     assert!(cap.len() != 0, \"expanding an empty capability makes no sense\");\n     assert!(params.len() <= 9, \"only 9 parameters are supported by capability strings\");"}, {"sha": "03fbfc2dbff960005c9a0cfc1fec02340b65a944", "filename": "src/libextra/terminfo/parser/compiled.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11f31b96848c7d04f79e6aaa2c789857bb224526/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fterminfo%2Fparser%2Fcompiled.rs?ref=11f31b96848c7d04f79e6aaa2c789857bb224526", "patch": "@@ -1,3 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n /// ncurses-compatible compiled terminfo format parsing (term(5))\n \n use core::prelude::*;\n@@ -283,11 +293,12 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n \n \n             // Find the offset of the NUL we want to go to\n-            let nulpos = vec::position_between(string_table, offset as uint, string_table_bytes as uint,\n-                                               |&b| b == 0);\n+            let nulpos = vec::position_between(string_table, offset as uint,\n+                                               string_table_bytes as uint, |&b| b == 0);\n             match nulpos {\n                 Some(x) => {\n-                    string_map.insert(name.to_owned(), string_table.slice(offset as uint, x).to_owned())\n+                    string_map.insert(name.to_owned(),\n+                                      string_table.slice(offset as uint, x).to_owned())\n                 },\n                 None => {\n                     return Err(~\"invalid file: missing NUL in string_table\");\n@@ -303,7 +314,7 @@ pub fn parse(file: @Reader, longnames: bool) -> Result<~TermInfo, ~str> {\n #[cfg(test)]\n mod test {\n     use super::*;\n-    use p = std::path::PosixPath;\n+    use p = std::path::Path;\n \n     #[test]\n     fn test_veclens() {\n@@ -314,6 +325,7 @@ mod test {\n \n     #[test]\n     fn test_parse() {\n-        parse(io::file_reader(&p(\"/usr/share/terminfo/r/rxvt-256color\")).unwrap(), false);\n+        // FIXME #6870: Distribute a compiled file in src/tests and test there\n+        // parse(io::file_reader(&p(\"/usr/share/terminfo/r/rxvt-256color\")).unwrap(), false);\n     }\n }"}]}