{"sha": "fca248957b26414ab04b9f8c5777f804d69fb1e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYTI0ODk1N2IyNjQxNGFiMDRiOWY4YzU3NzdmODA0ZDY5ZmIxZTE=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-19T05:56:46Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2018-01-19T05:56:46Z"}, "message": "Merge branch 'master' into option_option_pr", "tree": {"sha": "8e5372c952be96d90986f1bb37d24b01c782b121", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5372c952be96d90986f1bb37d24b01c782b121"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fca248957b26414ab04b9f8c5777f804d69fb1e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fca248957b26414ab04b9f8c5777f804d69fb1e1", "html_url": "https://github.com/rust-lang/rust/commit/fca248957b26414ab04b9f8c5777f804d69fb1e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fca248957b26414ab04b9f8c5777f804d69fb1e1/comments", "author": null, "committer": null, "parents": [{"sha": "bf7efead17dcb685cff8c7696f1ba6f7c28a82f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7efead17dcb685cff8c7696f1ba6f7c28a82f1", "html_url": "https://github.com/rust-lang/rust/commit/bf7efead17dcb685cff8c7696f1ba6f7c28a82f1"}, {"sha": "5a794d3ee9f413982e8f50bbd9c48e5280e6b7fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a794d3ee9f413982e8f50bbd9c48e5280e6b7fd", "html_url": "https://github.com/rust-lang/rust/commit/5a794d3ee9f413982e8f50bbd9c48e5280e6b7fd"}], "stats": {"total": 217, "additions": 163, "deletions": 54}, "files": [{"sha": "040cb78d1c633da24d2ad3c90c3f17c0494677d1", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -43,7 +43,7 @@ cargo_metadata = \"0.2\"\n regex = \"0.2\"\n \n [dev-dependencies]\n-compiletest_rs = \"0.3\"\n+compiletest_rs = \"0.3.5\"\n duct = \"0.8.2\"\n lazy_static = \"1.0\"\n serde_derive = \"1.0\""}, {"sha": "8403974629d611568a6cd9596182c0e2344f737e", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -10,7 +10,9 @@ use utils::{is_adjusted, iter_input_pats, match_qpath, match_trait_method, match\n /// **Why is this bad?** It makes the code less readable than using the\n /// `.cloned()` adapter.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Sometimes `.cloned()` requires stricter trait\n+/// bound than `.map(|e| e.clone())` (which works because of the coercion).\n+/// See [#498](https://github.com/rust-lang-nursery/rust-clippy/issues/498).\n ///\n /// **Example:**\n /// ```rust"}, {"sha": "21a7542e6c766a65a10459d12d819673ded75605", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -6,6 +6,7 @@ use rustc::ty::{self, RegionKind, TypeFoldable};\n use rustc::traits;\n use rustc::middle::expr_use_visitor as euv;\n use rustc::middle::mem_categorization as mc;\n+use syntax::abi::Abi;\n use syntax::ast::NodeId;\n use syntax_pos::Span;\n use syntax::errors::DiagnosticBuilder;\n@@ -71,13 +72,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         }\n \n         match kind {\n-            FnKind::ItemFn(.., attrs) => for a in attrs {\n-                if_chain! {\n-                    if a.meta_item_list().is_some();\n-                    if let Some(name) = a.name();\n-                    if name == \"proc_macro_derive\";\n-                    then {\n-                        return;\n+            FnKind::ItemFn(.., abi, _, attrs) => {\n+                if abi != Abi::Rust {\n+                    return;\n+                }\n+                for a in attrs {\n+                    if_chain! {\n+                        if a.meta_item_list().is_some();\n+                        if let Some(name) = a.name();\n+                        if name == \"proc_macro_derive\";\n+                        then {\n+                            return;\n+                        }\n                     }\n                 }\n             },\n@@ -96,10 +102,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n         // Allow `Borrow` or functions to be taken by value\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n-        let fn_traits = [\n+        let whitelisted_traits = [\n             need!(cx.tcx.lang_items().fn_trait()),\n             need!(cx.tcx.lang_items().fn_once_trait()),\n             need!(cx.tcx.lang_items().fn_mut_trait()),\n+            need!(get_trait_def_id(cx, &paths::RANGE_ARGUMENT_TRAIT))\n         ];\n \n         let sized_trait = need!(cx.tcx.lang_items().sized_trait());\n@@ -183,7 +190,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                 if !is_self(arg);\n                 if !ty.is_mutable_pointer();\n                 if !is_copy(cx, ty);\n-                if !fn_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n+                if !whitelisted_traits.iter().any(|&t| implements_trait(cx, ty, t, &[]));\n                 if !implements_borrow_trait;\n                 if !all_borrowable_trait;\n \n@@ -196,6 +203,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                     // Dereference suggestion\n                     let sugg = |db: &mut DiagnosticBuilder| {\n+                        if let ty::TypeVariants::TyAdt(ref def, ..) = ty.sty {\n+                            if let Some(span) = cx.tcx.hir.span_if_local(def.did) {\n+                                let param_env = ty::ParamEnv::empty(traits::Reveal::UserFacing);\n+                                if param_env.can_type_implement_copy(cx.tcx, ty, span).is_ok() {\n+                                    db.span_help(span, \"consider marking this type as Copy\");\n+                                }\n+                            }\n+                        }\n+\n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n                             if match_type(cx, ty, &paths::VEC);"}, {"sha": "20244a19f4f08d9080c62eaf43c15329eda54687", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -55,6 +55,7 @@ pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n pub const RANGE: [&str; 3] = [\"core\", \"ops\", \"Range\"];\n+pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"alloc\", \"range\", \"RangeArgument\"];\n pub const RANGE_FROM: [&str; 3] = [\"core\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FROM_STD: [&str; 3] = [\"std\", \"ops\", \"RangeFrom\"];\n pub const RANGE_FULL: [&str; 3] = [\"core\", \"ops\", \"RangeFull\"];"}, {"sha": "8ca9b5c92a4c3f485ae6dfebdcb3656f8591e82a", "filename": "tests/dogfood.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -1,5 +1,8 @@\n #[test]\n fn dogfood() {\n+    if option_env!(\"RUSTC_TEST_SUITE\").is_some() {\n+        return;\n+    }\n     let root_dir = std::env::current_dir().unwrap();\n     for d in &[\".\", \"clippy_lints\"] {\n         std::env::set_current_dir(root_dir.join(d)).unwrap();"}, {"sha": "3459d3820b71e8d94d68e60c9490524d29d36d55", "filename": "tests/ui/needless_pass_by_value.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fui%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fui%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.rs?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -4,6 +4,8 @@\n #![warn(needless_pass_by_value)]\n #![allow(dead_code, single_match, if_let_redundant_pattern_matching, many_single_char_names, option_option)]\n \n+#![feature(collections_range)]\n+\n use std::borrow::Borrow;\n use std::convert::AsRef;\n \n@@ -110,4 +112,29 @@ trait FalsePositive {\n     }\n }\n \n+// shouldn't warn on extern funcs\n+extern \"C\" fn ext(x: String) -> usize { x.len() }\n+\n+// whitelist RangeArgument\n+fn range<T: ::std::collections::range::RangeArgument<usize>>(range: T) {\n+    let _ = range.start();\n+}\n+\n+struct CopyWrapper(u32);\n+\n+fn bar_copy(x: u32, y: CopyWrapper) {\n+    assert_eq!(x, 42);\n+    assert_eq!(y.0, 42);\n+}\n+\n+// x and y should be warned, but z is ok\n+fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    let CopyWrapper(s) = z; // moved\n+    let CopyWrapper(ref t) = y; // not moved\n+    let CopyWrapper(_) = y; // still not moved\n+\n+    assert_eq!(x.0, s);\n+    println!(\"{}\", t);\n+}\n+\n fn main() {}"}, {"sha": "469c16fa3d5bf080b4bf9d242049b3fcd6502759", "filename": "tests/ui/needless_pass_by_value.stderr", "status": "modified", "additions": 103, "deletions": 43, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fui%2Fneedless_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fca248957b26414ab04b9f8c5777f804d69fb1e1/tests%2Fui%2Fneedless_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_pass_by_value.stderr?ref=fca248957b26414ab04b9f8c5777f804d69fb1e1", "patch": "@@ -1,128 +1,188 @@\n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:12:23\n+  --> $DIR/needless_pass_by_value.rs:14:23\n    |\n-12 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n+14 | fn foo<T: Default>(v: Vec<T>, w: Vec<T>, mut x: Vec<T>, y: Vec<T>) -> Vec<T> {\n    |                       ^^^^^^ help: consider changing the type to: `&[T]`\n    |\n    = note: `-D needless-pass-by-value` implied by `-D warnings`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:11\n+  --> $DIR/needless_pass_by_value.rs:28:11\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |           ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:26:22\n+  --> $DIR/needless_pass_by_value.rs:28:22\n    |\n-26 | fn bar(x: String, y: Wrapper) {\n+28 | fn bar(x: String, y: Wrapper) {\n    |                      ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:32:71\n+  --> $DIR/needless_pass_by_value.rs:34:71\n    |\n-32 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n+34 | fn test_borrow_trait<T: Borrow<str>, U: AsRef<str>, V>(t: T, u: U, v: V) {\n    |                                                                       ^ help: consider taking a reference instead: `&V`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:44:18\n+  --> $DIR/needless_pass_by_value.rs:46:18\n    |\n-44 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n+46 | fn test_match(x: Option<Option<String>>, y: Option<Option<String>>) {\n    |                  ^^^^^^^^^^^^^^^^^^^^^^\n help: consider taking a reference instead\n    |\n-44 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n-45 |     match *x {\n+46 | fn test_match(x: &Option<Option<String>>, y: Option<Option<String>>) {\n+47 |     match *x {\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:24\n+  --> $DIR/needless_pass_by_value.rs:59:24\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                        ^^^^^^^ help: consider taking a reference instead: `&Wrapper`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:57:36\n+  --> $DIR/needless_pass_by_value.rs:59:36\n    |\n-57 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n+59 | fn test_destructure(x: Wrapper, y: Wrapper, z: Wrapper) {\n    |                                    ^^^^^^^\n help: consider taking a reference instead\n    |\n-57 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n-58 |     let Wrapper(s) = z; // moved\n-59 |     let Wrapper(ref t) = *y; // not moved\n-60 |     let Wrapper(_) = *y; // still not moved\n+59 | fn test_destructure(x: Wrapper, y: &Wrapper, z: Wrapper) {\n+60 |     let Wrapper(s) = z; // moved\n+61 |     let Wrapper(ref t) = *y; // not moved\n+62 |     let Wrapper(_) = *y; // still not moved\n    |\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:73:49\n+  --> $DIR/needless_pass_by_value.rs:75:49\n    |\n-73 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n+75 | fn test_blanket_ref<T: Foo, S: Serialize>(_foo: T, _serializable: S) {}\n    |                                                 ^ help: consider taking a reference instead: `&T`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:18\n+  --> $DIR/needless_pass_by_value.rs:77:18\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                  ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:29\n+  --> $DIR/needless_pass_by_value.rs:77:29\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: &str, u: Vec<i32>, v: Vec<i32>) {\n    |                             ^^^^\n help: change `t.clone()` to\n    |\n-77 |     let _ = t.to_string();\n+79 |     let _ = t.to_string();\n    |             ^^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:40\n+  --> $DIR/needless_pass_by_value.rs:77:40\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                        ^^^^^^^^ help: consider taking a reference instead: `&Vec<i32>`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:75:53\n+  --> $DIR/needless_pass_by_value.rs:77:53\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: Vec<i32>) {\n    |                                                     ^^^^^^^^\n help: consider changing the type to\n    |\n-75 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n+77 | fn issue_2114(s: String, t: String, u: Vec<i32>, v: &[i32]) {\n    |                                                     ^^^^^^\n help: change `v.clone()` to\n    |\n-79 |     let _ = v.to_owned();\n+81 |     let _ = v.to_owned();\n    |             ^^^^^^^^^^^^\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:87:12\n+  --> $DIR/needless_pass_by_value.rs:89:12\n    |\n-87 |         s: String,\n+89 |         s: String,\n    |            ^^^^^^ help: consider changing the type to: `&str`\n \n error: this argument is passed by value, but not consumed in the function body\n-  --> $DIR/needless_pass_by_value.rs:88:12\n+  --> $DIR/needless_pass_by_value.rs:90:12\n    |\n-88 |         t: String,\n+90 |         t: String,\n    |            ^^^^^^ help: consider taking a reference instead: `&String`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:100:13\n+   --> $DIR/needless_pass_by_value.rs:102:13\n     |\n-100 |         _u: U,\n+102 |         _u: U,\n     |             ^ help: consider taking a reference instead: `&U`\n \n error: this argument is passed by value, but not consumed in the function body\n-   --> $DIR/needless_pass_by_value.rs:101:13\n+   --> $DIR/needless_pass_by_value.rs:103:13\n     |\n-101 |         _s: Self,\n+103 |         _s: Self,\n     |             ^^^^ help: consider taking a reference instead: `&Self`\n \n-error: aborting due to 16 previous errors\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:125:24\n+    |\n+125 | fn bar_copy(x: u32, y: CopyWrapper) {\n+    |                        ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:29\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                             ^^^^^^^^^^^ help: consider taking a reference instead: `&CopyWrapper`\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:45\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: &CopyWrapper, z: CopyWrapper) {\n+132 |     let CopyWrapper(s) = z; // moved\n+133 |     let CopyWrapper(ref t) = *y; // not moved\n+134 |     let CopyWrapper(_) = *y; // still not moved\n+    |\n+\n+error: this argument is passed by value, but not consumed in the function body\n+   --> $DIR/needless_pass_by_value.rs:131:61\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: CopyWrapper) {\n+    |                                                             ^^^^^^^^^^^\n+    |\n+help: consider marking this type as Copy\n+   --> $DIR/needless_pass_by_value.rs:123:1\n+    |\n+123 | struct CopyWrapper(u32);\n+    | ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider taking a reference instead\n+    |\n+131 | fn test_destructure_copy(x: CopyWrapper, y: CopyWrapper, z: &CopyWrapper) {\n+132 |     let CopyWrapper(s) = *z; // moved\n+    |\n+\n+error: aborting due to 20 previous errors\n "}]}