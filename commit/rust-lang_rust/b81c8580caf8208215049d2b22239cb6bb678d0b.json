{"sha": "b81c8580caf8208215049d2b22239cb6bb678d0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MWM4NTgwY2FmODIwODIxNTA0OWQyYjIyMjM5Y2I2YmI2NzhkMGI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-06T13:35:03Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-10-06T14:04:38Z"}, "message": "incr.comp.: Bring back output of -Zincremental-info.", "tree": {"sha": "71e2a2c63a79bcb6495d807591a6654de33e2893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71e2a2c63a79bcb6495d807591a6654de33e2893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b81c8580caf8208215049d2b22239cb6bb678d0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b81c8580caf8208215049d2b22239cb6bb678d0b", "html_url": "https://github.com/rust-lang/rust/commit/b81c8580caf8208215049d2b22239cb6bb678d0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b81c8580caf8208215049d2b22239cb6bb678d0b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0db04b62bde392fb9846d4a90e3973bab09147a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0db04b62bde392fb9846d4a90e3973bab09147a", "html_url": "https://github.com/rust-lang/rust/commit/a0db04b62bde392fb9846d4a90e3973bab09147a"}], "stats": {"total": 115, "additions": 90, "deletions": 25}, "files": [{"sha": "99c297e36c715696b22138e28d2e291316f98127", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -131,10 +131,6 @@ fn main() {\n         // Pass down incremental directory, if any.\n         if let Ok(dir) = env::var(\"RUSTC_INCREMENTAL\") {\n             cmd.arg(format!(\"-Zincremental={}\", dir));\n-\n-            if verbose > 0 {\n-                cmd.arg(\"-Zincremental-info\");\n-            }\n         }\n \n         let crate_name = args.windows(2)"}, {"sha": "7d1400b6b95a5a423097a361390ed45d63d0e572", "filename": "src/librustc_incremental/persist/file_format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffile_format.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -117,7 +117,7 @@ fn report_format_mismatch(sess: &Session, file: &Path, message: &str) {\n     debug!(\"read_file: {}\", message);\n \n     if sess.opts.debugging_opts.incremental_info {\n-        eprintln!(\"incremental: ignoring cache artifact `{}`: {}\",\n+        println!(\"[incremental] ignoring cache artifact `{}`: {}\",\n                   file.file_name().unwrap().to_string_lossy(),\n                   message);\n     }"}, {"sha": "d53ee5c804f601d5190be2d5444568217e71bcc3", "filename": "src/librustc_incremental/persist/fs.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Ffs.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -256,11 +256,12 @@ pub fn prepare_session_directory(sess: &Session,\n         debug!(\"attempting to copy data from source: {}\",\n                source_directory.display());\n \n-        let print_file_copy_stats = sess.opts.debugging_opts.incremental_info;\n+\n \n         // Try copying over all files from the source directory\n-        if let Ok(allows_links) = copy_files(&session_dir, &source_directory,\n-                                             print_file_copy_stats) {\n+        if let Ok(allows_links) = copy_files(sess,\n+                                             &session_dir,\n+                                             &source_directory) {\n             debug!(\"successfully copied data from: {}\",\n                    source_directory.display());\n \n@@ -390,9 +391,9 @@ pub fn delete_all_session_dir_contents(sess: &Session) -> io::Result<()> {\n     Ok(())\n }\n \n-fn copy_files(target_dir: &Path,\n-              source_dir: &Path,\n-              print_stats_on_success: bool)\n+fn copy_files(sess: &Session,\n+              target_dir: &Path,\n+              source_dir: &Path)\n               -> Result<bool, ()> {\n     // We acquire a shared lock on the lock file of the directory, so that\n     // nobody deletes it out from under us while we are reading from it.\n@@ -440,9 +441,11 @@ fn copy_files(target_dir: &Path,\n         }\n     }\n \n-    if print_stats_on_success {\n-        eprintln!(\"incremental: session directory: {} files hard-linked\", files_linked);\n-        eprintln!(\"incremental: session directory: {} files copied\", files_copied);\n+    if sess.opts.debugging_opts.incremental_info {\n+        println!(\"[incremental] session directory: \\\n+                  {} files hard-linked\", files_linked);\n+        println!(\"[incremental] session directory: \\\n+                 {} files copied\", files_copied);\n     }\n \n     Ok(files_linked > 0 || files_copied == 0)"}, {"sha": "63cfbcac1452e0647749f5a9891360f8b5536724", "filename": "src/librustc_incremental/persist/load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fload.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -177,8 +177,8 @@ pub fn load_dep_graph(sess: &Session) -> PreviousDepGraph {\n \n         if prev_commandline_args_hash != sess.opts.dep_tracking_hash() {\n             if sess.opts.debugging_opts.incremental_info {\n-                eprintln!(\"incremental: completely ignoring cache because of \\\n-                           differing commandline arguments\");\n+                println!(\"[incremental] completely ignoring cache because of \\\n+                          differing commandline arguments\");\n             }\n             // We can't reuse the cache, purge it.\n             debug!(\"load_dep_graph_new: differing commandline arg hashes\");"}, {"sha": "b9f73500e273ba8cbf88ca69c5012c941029da3d", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 72, "deletions": 1, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepGraph;\n+use rustc::dep_graph::{DepGraph, DepKind};\n use rustc::hir::def_id::DefId;\n use rustc::hir::svh::Svh;\n use rustc::ich::Fingerprint;\n@@ -170,6 +170,77 @@ fn encode_dep_graph(tcx: TyCtxt,\n \n     // Encode the graph data.\n     let serialized_graph = tcx.dep_graph.serialize();\n+\n+    if tcx.sess.opts.debugging_opts.incremental_info {\n+        #[derive(Clone)]\n+        struct Stat {\n+            kind: DepKind,\n+            node_counter: u64,\n+            edge_counter: u64,\n+        }\n+\n+        let total_node_count = serialized_graph.nodes.len();\n+        let total_edge_count = serialized_graph.edge_list_data.len();\n+\n+        let mut counts: FxHashMap<_, Stat> = FxHashMap();\n+\n+        for (i, &(node, _)) in serialized_graph.nodes.iter_enumerated() {\n+            let stat = counts.entry(node.kind).or_insert(Stat {\n+                kind: node.kind,\n+                node_counter: 0,\n+                edge_counter: 0,\n+            });\n+\n+            stat.node_counter += 1;\n+            let (edge_start, edge_end) = serialized_graph.edge_list_indices[i];\n+            stat.edge_counter += (edge_end - edge_start) as u64;\n+        }\n+\n+        let mut counts: Vec<_> = counts.values().cloned().collect();\n+        counts.sort_by_key(|s| -(s.node_counter as i64));\n+\n+        let percentage_of_all_nodes: Vec<f64> = counts.iter().map(|s| {\n+            (100.0 * (s.node_counter as f64)) / (total_node_count as f64)\n+        }).collect();\n+\n+        let average_edges_per_kind: Vec<f64> = counts.iter().map(|s| {\n+            (s.edge_counter as f64) / (s.node_counter as f64)\n+        }).collect();\n+\n+        println!(\"[incremental]\");\n+        println!(\"[incremental] DepGraph Statistics\");\n+\n+        const SEPARATOR: &str = \"[incremental] --------------------------------\\\n+                                 ----------------------------------------------\\\n+                                 ------------\";\n+\n+        println!(\"{}\", SEPARATOR);\n+        println!(\"[incremental]\");\n+        println!(\"[incremental] Total Node Count: {}\", total_node_count);\n+        println!(\"[incremental] Total Edge Count: {}\", total_edge_count);\n+        println!(\"[incremental]\");\n+        println!(\"[incremental]  {:<36}| {:<17}| {:<12}| {:<17}|\",\n+                 \"Node Kind\",\n+                 \"Node Frequency\",\n+                 \"Node Count\",\n+                 \"Avg. Edge Count\");\n+        println!(\"[incremental] -------------------------------------\\\n+                  |------------------\\\n+                  |-------------\\\n+                  |------------------|\");\n+\n+        for (i, stat) in counts.iter().enumerate() {\n+            println!(\"[incremental]  {:<36}|{:>16.1}% |{:>12} |{:>17.1} |\",\n+                format!(\"{:?}\", stat.kind),\n+                percentage_of_all_nodes[i],\n+                stat.node_counter,\n+                average_edges_per_kind[i]);\n+        }\n+\n+        println!(\"{}\", SEPARATOR);\n+        println!(\"[incremental]\");\n+    }\n+\n     serialized_graph.encode(encoder)?;\n \n     Ok(())"}, {"sha": "20e4bbb2c5c4f64502666c975eced60970e8d787", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -1045,13 +1045,9 @@ fn produce_final_output_artifacts(sess: &Session,\n }\n \n pub fn dump_incremental_data(trans: &CrateTranslation) {\n-    let mut reuse = 0;\n-    for mtrans in trans.modules.iter() {\n-        if mtrans.pre_existing {\n-            reuse += 1;\n-        }\n-    }\n-    eprintln!(\"incremental: re-using {} out of {} modules\", reuse, trans.modules.len());\n+    println!(\"[incremental] Re-using {} out of {} modules\",\n+              trans.modules.iter().filter(|m| m.pre_existing).count(),\n+              trans.modules.len());\n }\n \n enum WorkItem {"}, {"sha": "53c88307329ecb33eab5ab9ff8e72119a908ce3a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b81c8580caf8208215049d2b22239cb6bb678d0b/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=b81c8580caf8208215049d2b22239cb6bb678d0b", "patch": "@@ -2036,7 +2036,6 @@ actual:\\n\\\n         // Add an extra flag pointing at the incremental directory.\n         let mut revision_props = self.props.clone();\n         revision_props.incremental_dir = Some(incremental_dir);\n-        revision_props.compile_flags.push(String::from(\"-Zincremental-info\"));\n \n         let revision_cx = TestCx {\n             config: self.config,"}]}