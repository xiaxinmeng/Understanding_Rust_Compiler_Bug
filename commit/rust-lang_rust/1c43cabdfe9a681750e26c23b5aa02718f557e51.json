{"sha": "1c43cabdfe9a681750e26c23b5aa02718f557e51", "node_id": "C_kwDOAAsO6NoAKDFjNDNjYWJkZmU5YTY4MTc1MGUyNmMyM2I1YWEwMjcxOGY1NTdlNTE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-08-11T17:17:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-11T17:17:01Z"}, "message": "Rollup merge of #100232 - cjgillot:no-desugar-methodcall, r=nagisa\n\nDo not consider method call receiver as an argument in AST.\n\nFixes https://github.com/rust-lang/rust/issues/73663", "tree": {"sha": "0927fb5d8e6f6adc3d62fb80985b8084fdb5c2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0927fb5d8e6f6adc3d62fb80985b8084fdb5c2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c43cabdfe9a681750e26c23b5aa02718f557e51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi9TmNCRBK7hj4Ov3rIwAA6mwIAErVD98fe0fIdylUiHK7UYBN\n/WgZOoi2KXQFQ+CUN57KTW0macIkFQ0yF9e+q1uyMDePQ3uBkrG19quqVKVvzzzH\nNX7v/YeawfEP+l+0KIYPccdugx1ghmeUvdFV28tJn4oMBKNGRnsAUuQlaYlzpiXe\n0rtXyuaLseEwyaE1aOdgQcLwsfNIB75eFxLoX6wbmkGA+qyT3ZAsC/b9naLS66qR\nO1K5ns94Czs6O9Je8JMkxM/KxI90TeZ1+1G+XMzP81v2/gDxUF2OPrL1iI97dBz/\ntxHzOTWgNGEBqlzKeWg6lvkdSM8okFtsSwv/xg3tikL5a+GX6JAxjYwTAxd9xEg=\n=Rw70\n-----END PGP SIGNATURE-----\n", "payload": "tree 0927fb5d8e6f6adc3d62fb80985b8084fdb5c2c3\nparent 32bd147f797a03922928f45bc6705daeefb7e9a4\nparent 69205db766acb80181462f3293a502c5a32d2ca5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1660238221 +0530\ncommitter GitHub <noreply@github.com> 1660238221 +0530\n\nRollup merge of #100232 - cjgillot:no-desugar-methodcall, r=nagisa\n\nDo not consider method call receiver as an argument in AST.\n\nFixes https://github.com/rust-lang/rust/issues/73663\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c43cabdfe9a681750e26c23b5aa02718f557e51", "html_url": "https://github.com/rust-lang/rust/commit/1c43cabdfe9a681750e26c23b5aa02718f557e51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c43cabdfe9a681750e26c23b5aa02718f557e51/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32bd147f797a03922928f45bc6705daeefb7e9a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/32bd147f797a03922928f45bc6705daeefb7e9a4", "html_url": "https://github.com/rust-lang/rust/commit/32bd147f797a03922928f45bc6705daeefb7e9a4"}, {"sha": "69205db766acb80181462f3293a502c5a32d2ca5", "url": "https://api.github.com/repos/rust-lang/rust/commits/69205db766acb80181462f3293a502c5a32d2ca5", "html_url": "https://github.com/rust-lang/rust/commit/69205db766acb80181462f3293a502c5a32d2ca5"}], "stats": {"total": 166, "additions": 109, "deletions": 57}, "files": [{"sha": "22e325cc994fd3b562471dd6f554236e6546113b", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -1338,14 +1338,13 @@ pub enum ExprKind {\n     ///\n     /// The `PathSegment` represents the method name and its generic arguments\n     /// (within the angle brackets).\n-    /// The first element of the vector of an `Expr` is the expression that evaluates\n-    /// to the object on which the method is being called on (the receiver),\n-    /// and the remaining elements are the rest of the arguments.\n-    /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n-    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n+    /// The standalone `Expr` is the receiver expression.\n+    /// The vector of `Expr` is the arguments.\n+    /// `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n+    /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, x, [a, b, c, d])`.\n     /// This `Span` is the span of the function, without the dot and receiver\n     /// (e.g. `foo(a, b)` in `x.foo(a, b)`\n-    MethodCall(PathSegment, Vec<P<Expr>>, Span),\n+    MethodCall(PathSegment, P<Expr>, Vec<P<Expr>>, Span),\n     /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(Vec<P<Expr>>),\n     /// A binary operation (e.g., `a + b`, `a * b`)."}, {"sha": "230c73c88e9092997e88ee1c1d3b5cbeb5abb930", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -1302,10 +1302,11 @@ pub fn noop_visit_expr<T: MutVisitor>(\n             vis.visit_expr(f);\n             visit_exprs(args, vis);\n         }\n-        ExprKind::MethodCall(PathSegment { ident, id, args }, exprs, span) => {\n+        ExprKind::MethodCall(PathSegment { ident, id, args }, receiver, exprs, span) => {\n             vis.visit_ident(ident);\n             vis.visit_id(id);\n             visit_opt(args, |args| vis.visit_generic_args(args));\n+            vis.visit_expr(receiver);\n             visit_exprs(exprs, vis);\n             vis.visit_span(span);\n         }"}, {"sha": "5edeb54be5f0f7a2240f56dac26439bb0740d8a2", "filename": "compiler/rustc_ast/src/util/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fparser.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -396,9 +396,9 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n             contains_exterior_struct_lit(&x)\n         }\n \n-        ast::ExprKind::MethodCall(.., ref exprs, _) => {\n+        ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n             // X { y: 1 }.bar(...)\n-            contains_exterior_struct_lit(&exprs[0])\n+            contains_exterior_struct_lit(&receiver)\n         }\n \n         _ => false,"}, {"sha": "bedbb02f033c751e92f2e796e3ed02cb1b0364a8", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -813,8 +813,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_expr(callee_expression);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n-        ExprKind::MethodCall(ref segment, ref arguments, _span) => {\n+        ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _span) => {\n             visitor.visit_path_segment(expression.span, segment);\n+            visitor.visit_expr(receiver);\n             walk_list!(visitor, visit_expr, arguments);\n         }\n         ExprKind::Binary(_, ref left_expression, ref right_expression) => {"}, {"sha": "c7d35fdb1fd561febda5db836f4a92d065fda16c", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -62,15 +62,17 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::ExprKind::Call(f, self.lower_exprs(args))\n                     }\n                 }\n-                ExprKind::MethodCall(ref seg, ref args, span) => {\n+                ExprKind::MethodCall(ref seg, ref receiver, ref args, span) => {\n                     let hir_seg = self.arena.alloc(self.lower_path_segment(\n                         e.span,\n                         seg,\n                         ParamMode::Optional,\n                         ParenthesizedGenericArgs::Err,\n                         ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     ));\n-                    let args = self.lower_exprs(args);\n+                    let args = self.arena.alloc_from_iter(\n+                        [&*receiver].into_iter().chain(args.iter()).map(|x| self.lower_expr_mut(x)),\n+                    );\n                     hir::ExprKind::MethodCall(hir_seg, args, self.lower_span(span))\n                 }\n                 ExprKind::Binary(binop, ref lhs, ref rhs) => {"}, {"sha": "bcefa8ce0b9ce6ca8ff078b10e3fb3cc8d722a0d", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -193,9 +193,13 @@ impl<'a> State<'a> {\n         self.print_call_post(args)\n     }\n \n-    fn print_expr_method_call(&mut self, segment: &ast::PathSegment, args: &[P<ast::Expr>]) {\n-        let base_args = &args[1..];\n-        self.print_expr_maybe_paren(&args[0], parser::PREC_POSTFIX);\n+    fn print_expr_method_call(\n+        &mut self,\n+        segment: &ast::PathSegment,\n+        receiver: &ast::Expr,\n+        base_args: &[P<ast::Expr>],\n+    ) {\n+        self.print_expr_maybe_paren(receiver, parser::PREC_POSTFIX);\n         self.word(\".\");\n         self.print_ident(segment.ident);\n         if let Some(ref args) = segment.args {\n@@ -303,8 +307,8 @@ impl<'a> State<'a> {\n             ast::ExprKind::Call(ref func, ref args) => {\n                 self.print_expr_call(func, &args);\n             }\n-            ast::ExprKind::MethodCall(ref segment, ref args, _) => {\n-                self.print_expr_method_call(segment, &args);\n+            ast::ExprKind::MethodCall(ref segment, ref receiver, ref args, _) => {\n+                self.print_expr_method_call(segment, &receiver, &args);\n             }\n             ast::ExprKind::Binary(op, ref lhs, ref rhs) => {\n                 self.print_expr_binary(op, lhs, rhs);"}, {"sha": "c04d04020cc679cb06c386659684876795f3fb55", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -240,8 +240,8 @@ impl<'cx, 'a> Context<'cx, 'a> {\n                 self.manage_cond_expr(prefix);\n                 self.manage_cond_expr(suffix);\n             }\n-            ExprKind::MethodCall(_, ref mut local_exprs, _) => {\n-                for local_expr in local_exprs.iter_mut().skip(1) {\n+            ExprKind::MethodCall(_, _,ref mut local_exprs, _) => {\n+                for local_expr in local_exprs.iter_mut() {\n                     self.manage_cond_expr(local_expr);\n                 }\n             }\n@@ -377,14 +377,12 @@ impl<'cx, 'a> Context<'cx, 'a> {\n                     id: DUMMY_NODE_ID,\n                     ident: Ident::new(sym::try_capture, self.span),\n                 },\n-                vec![\n-                    expr_paren(self.cx, self.span, self.cx.expr_addr_of(self.span, wrapper)),\n-                    expr_addr_of_mut(\n-                        self.cx,\n-                        self.span,\n-                        self.cx.expr_path(Path::from_ident(capture)),\n-                    ),\n-                ],\n+                expr_paren(self.cx, self.span, self.cx.expr_addr_of(self.span, wrapper)),\n+                vec![expr_addr_of_mut(\n+                    self.cx,\n+                    self.span,\n+                    self.cx.expr_path(Path::from_ident(capture)),\n+                )],\n                 self.span,\n             ))\n             .add_trailing_semicolon();\n@@ -442,10 +440,11 @@ fn expr_addr_of_mut(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {\n fn expr_method_call(\n     cx: &ExtCtxt<'_>,\n     path: PathSegment,\n+    receiver: P<Expr>,\n     args: Vec<P<Expr>>,\n     span: Span,\n ) -> P<Expr> {\n-    cx.expr(span, ExprKind::MethodCall(path, args, span))\n+    cx.expr(span, ExprKind::MethodCall(path, receiver, args, span))\n }\n \n fn expr_paren(cx: &ExtCtxt<'_>, sp: Span, e: P<Expr>) -> P<Expr> {"}, {"sha": "58b2f0a44161c273b62d6079aebfdd70acc55e00", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -608,8 +608,7 @@ trait UnusedDelimLint {\n             ref call_or_other => {\n                 let (args_to_check, ctx) = match *call_or_other {\n                     Call(_, ref args) => (&args[..], UnusedDelimsCtx::FunctionArg),\n-                    // first \"argument\" is self (which sometimes needs delims)\n-                    MethodCall(_, ref args, _) => (&args[1..], UnusedDelimsCtx::MethodArg),\n+                    MethodCall(_, _, ref args, _) => (&args[..], UnusedDelimsCtx::MethodArg),\n                     // actual catch-all arm\n                     _ => {\n                         return;"}, {"sha": "54ad6843e75e92d9aa701843111a52f61def5306", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -850,7 +850,7 @@ impl<'a> Parser<'a> {\n                     ExprKind::Index(_, _) => \"indexing\",\n                     ExprKind::Try(_) => \"`?`\",\n                     ExprKind::Field(_, _) => \"a field access\",\n-                    ExprKind::MethodCall(_, _, _) => \"a method call\",\n+                    ExprKind::MethodCall(_, _, _, _) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\",\n                     ExprKind::Await(_) => \"`.await`\",\n                     ExprKind::Err => return Ok(with_postfix),\n@@ -1280,12 +1280,14 @@ impl<'a> Parser<'a> {\n \n         if self.check(&token::OpenDelim(Delimiter::Parenthesis)) {\n             // Method call `expr.f()`\n-            let mut args = self.parse_paren_expr_seq()?;\n-            args.insert(0, self_arg);\n-\n+            let args = self.parse_paren_expr_seq()?;\n             let fn_span = fn_span_lo.to(self.prev_token.span);\n             let span = lo.to(self.prev_token.span);\n-            Ok(self.mk_expr(span, ExprKind::MethodCall(segment, args, fn_span), AttrVec::new()))\n+            Ok(self.mk_expr(\n+                span,\n+                ExprKind::MethodCall(segment, self_arg, args, fn_span),\n+                AttrVec::new(),\n+            ))\n         } else {\n             // Field access `expr.f`\n             if let Some(args) = segment.args {"}, {"sha": "cbd0ca49c99bc3c5bbe6ff10a41e12b34482db6e", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -3796,9 +3796,8 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ExprKind::Field(ref subexpression, _) => {\n                 self.resolve_expr(subexpression, Some(expr));\n             }\n-            ExprKind::MethodCall(ref segment, ref arguments, _) => {\n-                let mut arguments = arguments.iter();\n-                self.resolve_expr(arguments.next().unwrap(), Some(expr));\n+            ExprKind::MethodCall(ref segment, ref receiver, ref arguments, _) => {\n+                self.resolve_expr(receiver, Some(expr));\n                 for argument in arguments {\n                     self.resolve_expr(argument, None);\n                 }"}, {"sha": "0d9c9350efca4a0bbf7cb7bd93328e9bf509be9f", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -74,10 +74,10 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n             2 => {\n                 let seg = PathSegment::from_ident(Ident::from_str(\"x\"));\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), vec![e, make_x()], DUMMY_SP))\n+                    g(ExprKind::MethodCall(seg.clone(), e, vec![make_x()], DUMMY_SP))\n                 });\n                 iter_exprs(depth - 1, &mut |e| {\n-                    g(ExprKind::MethodCall(seg.clone(), vec![make_x(), e], DUMMY_SP))\n+                    g(ExprKind::MethodCall(seg.clone(), make_x(), vec![e], DUMMY_SP))\n                 });\n             }\n             3..=8 => {"}, {"sha": "78a072f503fab086cae78f77fb39516484e51cd0", "filename": "src/test/ui/cfg/cfg-method-receiver.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -0,0 +1,12 @@\n+macro_rules! cbor_map {\n+    ($key:expr) => {\n+        $key.signum();\n+        //~^ ERROR can't call method `signum` on ambiguous numeric type `{integer}` [E0689]\n+    };\n+}\n+\n+fn main() {\n+    cbor_map! { #[cfg(test)] 4};\n+    //~^ ERROR attributes on expressions are experimental\n+    //~| ERROR removing an expression is not supported in this position\n+}"}, {"sha": "517fc8168e72d27172295420dff651f6c0484a7f", "filename": "src/test/ui/cfg/cfg-method-receiver.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-method-receiver.stderr?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -0,0 +1,34 @@\n+error[E0658]: attributes on expressions are experimental\n+  --> $DIR/cfg-method-receiver.rs:9:17\n+   |\n+LL |     cbor_map! { #[cfg(test)] 4};\n+   |                 ^^^^^^^^^^^^\n+   |\n+   = note: see issue #15701 <https://github.com/rust-lang/rust/issues/15701> for more information\n+   = help: add `#![feature(stmt_expr_attributes)]` to the crate attributes to enable\n+\n+error: removing an expression is not supported in this position\n+  --> $DIR/cfg-method-receiver.rs:9:17\n+   |\n+LL |     cbor_map! { #[cfg(test)] 4};\n+   |                 ^^^^^^^^^^^^\n+\n+error[E0689]: can't call method `signum` on ambiguous numeric type `{integer}`\n+  --> $DIR/cfg-method-receiver.rs:3:14\n+   |\n+LL |         $key.signum();\n+   |              ^^^^^^\n+...\n+LL |     cbor_map! { #[cfg(test)] 4};\n+   |     --------------------------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `cbor_map` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: you must specify a concrete type for this numeric value, like `i32`\n+   |\n+LL |     cbor_map! { #[cfg(test)] 4_i32};\n+   |                              ~~~~~\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0658, E0689.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "0f1d701865e7d711bbf8ae1bdb949c31d5214611", "filename": "src/tools/clippy/clippy_lints/src/double_parens.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_parens.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -61,9 +61,8 @@ impl EarlyLintPass for DoubleParens {\n                     }\n                 }\n             },\n-            ExprKind::MethodCall(_, ref params, _) => {\n-                if params.len() == 2 {\n-                    let param = &params[1];\n+            ExprKind::MethodCall(_, _, ref params, _) => {\n+                if let [ref param] = params[..] {\n                     if let ExprKind::Paren(_) = param.kind {\n                         span_lint(cx, DOUBLE_PARENS, param.span, msg);\n                     }"}, {"sha": "d9ee031c9f9756ffe11968f79499cd56b0277bca", "filename": "src/tools/clippy/clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -37,9 +37,9 @@ declare_lint_pass!(OptionEnvUnwrap => [OPTION_ENV_UNWRAP]);\n impl EarlyLintPass for OptionEnvUnwrap {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path_segment, args, _) = &expr.kind;\n+            if let ExprKind::MethodCall(path_segment, receiver, _, _) = &expr.kind;\n             if matches!(path_segment.ident.name, sym::expect | sym::unwrap);\n-            if let ExprKind::Call(caller, _) = &args[0].kind;\n+            if let ExprKind::Call(caller, _) = &receiver.kind;\n             if is_direct_expn_of(caller.span, \"option_env\").is_some();\n             then {\n                 span_lint_and_help("}, {"sha": "e6e3ad05ad70abbee15e673653f9b076a43affff", "filename": "src/tools/clippy/clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fprecedence.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -109,12 +109,12 @@ impl EarlyLintPass for Precedence {\n             let mut arg = operand;\n \n             let mut all_odd = true;\n-            while let ExprKind::MethodCall(path_segment, args, _) = &arg.kind {\n+            while let ExprKind::MethodCall(path_segment, receiver, _, _) = &arg.kind {\n                 let path_segment_str = path_segment.ident.name.as_str();\n                 all_odd &= ALLOWED_ODD_FUNCTIONS\n                     .iter()\n                     .any(|odd_function| **odd_function == *path_segment_str);\n-                arg = args.first().expect(\"A method always has a receiver.\");\n+                arg = receiver;\n             }\n \n             if_chain! {"}, {"sha": "5d36f0f5ff8bc91cde11f88026437c7ceb826f21", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -595,7 +595,7 @@ fn ident_difference_expr_with_base_location(\n         | (Unary(_, _), Unary(_, _))\n         | (Binary(_, _, _), Binary(_, _, _))\n         | (Tup(_), Tup(_))\n-        | (MethodCall(_, _, _), MethodCall(_, _, _))\n+        | (MethodCall(_, _, _, _), MethodCall(_, _, _, _))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n         | (Array(_), Array(_))"}, {"sha": "e1ec357838dbd88846e97ef43c602d33500ebe85", "filename": "src/tools/clippy/clippy_lints/src/unused_rounding.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_rounding.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -30,11 +30,10 @@ declare_clippy_lint! {\n declare_lint_pass!(UnusedRounding => [UNUSED_ROUNDING]);\n \n fn is_useless_rounding(expr: &Expr) -> Option<(&str, String)> {\n-    if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind\n+    if let ExprKind::MethodCall(name_ident, receiver, _, _) = &expr.kind\n         && let method_name = name_ident.ident.name.as_str()\n         && (method_name == \"ceil\" || method_name == \"round\" || method_name == \"floor\")\n-        && !args.is_empty()\n-        && let ExprKind::Lit(spanned) = &args[0].kind\n+        && let ExprKind::Lit(spanned) = &receiver.kind\n         && let LitKind::Float(symbol, ty) = spanned.kind {\n             let f = symbol.as_str().parse::<f64>().unwrap();\n             let f_str = symbol.to_string() + if let LitFloatType::Suffixed(ty) = ty {"}, {"sha": "9f74729bdfa18487463011020784ac9c8873bbc7", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -147,7 +147,9 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Array(l), Array(r)) | (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),\n         (Call(lc, la), Call(rc, ra)) => eq_expr(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n-        (MethodCall(lc, la, _), MethodCall(rc, ra, _)) => eq_path_seg(lc, rc) && over(la, ra, |l, r| eq_expr(l, r)),\n+        (MethodCall(lc, ls, la, _), MethodCall(rc, rs, ra, _)) => {\n+            eq_path_seg(lc, rc) && eq_expr(ls, rs) && over(la, ra, |l, r| eq_expr(l, r))\n+        },\n         (Binary(lo, ll, lr), Binary(ro, rl, rr)) => lo.node == ro.node && eq_expr(ll, rl) && eq_expr(lr, rr),\n         (Unary(lo, l), Unary(ro, r)) => mem::discriminant(lo) == mem::discriminant(ro) && eq_expr(l, r),\n         (Lit(l), Lit(r)) => l.kind == r.kind,"}, {"sha": "fcc02eca42987c47c2d3f4393ce31253a81a3677", "filename": "src/tools/rustfmt/src/chains.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c43cabdfe9a681750e26c23b5aa02718f557e51/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fchains.rs?ref=1c43cabdfe9a681750e26c23b5aa02718f557e51", "patch": "@@ -145,7 +145,7 @@ impl ChainItemKind {\n \n     fn from_ast(context: &RewriteContext<'_>, expr: &ast::Expr) -> (ChainItemKind, Span) {\n         let (kind, span) = match expr.kind {\n-            ast::ExprKind::MethodCall(ref segment, ref expressions, _) => {\n+            ast::ExprKind::MethodCall(ref segment, ref receiver, ref expressions, _) => {\n                 let types = if let Some(ref generic_args) = segment.args {\n                     if let ast::GenericArgs::AngleBracketed(ref data) = **generic_args {\n                         data.args\n@@ -163,7 +163,7 @@ impl ChainItemKind {\n                 } else {\n                     vec![]\n                 };\n-                let span = mk_sp(expressions[0].span.hi(), expr.span.hi());\n+                let span = mk_sp(receiver.span.hi(), expr.span.hi());\n                 let kind = ChainItemKind::MethodCall(segment.clone(), types, expressions.clone());\n                 (kind, span)\n             }\n@@ -253,7 +253,7 @@ impl ChainItem {\n             format!(\"::<{}>\", type_list.join(\", \"))\n         };\n         let callee_str = format!(\".{}{}\", rewrite_ident(context, method_name), type_str);\n-        rewrite_call(context, &callee_str, &args[1..], span, shape)\n+        rewrite_call(context, &callee_str, &args, span, shape)\n     }\n }\n \n@@ -400,8 +400,8 @@ impl Chain {\n     // is a try! macro, we'll convert it to shorthand when the option is set.\n     fn pop_expr_chain(expr: &ast::Expr, context: &RewriteContext<'_>) -> Option<ast::Expr> {\n         match expr.kind {\n-            ast::ExprKind::MethodCall(_, ref expressions, _) => {\n-                Some(Self::convert_try(&expressions[0], context))\n+            ast::ExprKind::MethodCall(_, ref receiver, _, _) => {\n+                Some(Self::convert_try(&receiver, context))\n             }\n             ast::ExprKind::Field(ref subexpr, _)\n             | ast::ExprKind::Try(ref subexpr)"}]}