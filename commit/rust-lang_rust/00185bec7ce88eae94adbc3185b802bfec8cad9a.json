{"sha": "00185bec7ce88eae94adbc3185b802bfec8cad9a", "node_id": "C_kwDOAAsO6NoAKDAwMTg1YmVjN2NlODhlYWU5NGFkYmMzMTg1YjgwMmJmZWM4Y2FkOWE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-05-23T11:14:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-23T11:14:27Z"}, "message": "Rollup merge of #111579 - scottmcm:enum-as-signed, r=oli-obk\n\nAlso assume wrap-around discriminants in `as` MIR building\n\nResolves this FIXME:\n\nhttps://github.com/rust-lang/rust/blob/8d18c32b61476ed16dd15074e71be3970368d6d7/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L231\n\nr? `@oli-obk`", "tree": {"sha": "2593784cc1b401fa4c5b62cd477b5496e96055ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2593784cc1b401fa4c5b62cd477b5496e96055ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00185bec7ce88eae94adbc3185b802bfec8cad9a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkbKATCRBK7hj4Ov3rIwAAs08IAEcYNYzH5WyuFne9pHGY58xy\nniO19OZqGtgm2+ehC0pX/Hvg+NGrEHP6jsoNOIbdmMjxaTJEUwYkwNliT1VHk43s\nTZ6I8CkZN9hO4pHQPa93MuWENDW3kqwJghbGA4kSG2cskKGn94h2I3OWLBPcgomD\nwZDTvynLi6R745EMzQw2KYycWTMbQKnMPJu5DDi2OlfswJ1Hhrw73TrEU3fcPa8j\nur6hSDW3h0JvHH0Mhbj5e96QgQZf5PmEEw8eCKpsgNlSXCxNNyCDjz/EOJBCcmRl\nvojaI+XaUZ/wkcVJDpj3hm6gG0Skk4+JBbawwvap9gZAtdSW6F9xAT9cieIFtGo=\n=G9iM\n-----END PGP SIGNATURE-----\n", "payload": "tree 2593784cc1b401fa4c5b62cd477b5496e96055ea\nparent 731c1a5592b6b4744fa5e64201afb3d5ab085fad\nparent 400866b7ab74cb9a4e705e0c4536a8b8130eb59e\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1684840467 +0530\ncommitter GitHub <noreply@github.com> 1684840467 +0530\n\nRollup merge of #111579 - scottmcm:enum-as-signed, r=oli-obk\n\nAlso assume wrap-around discriminants in `as` MIR building\n\nResolves this FIXME:\n\nhttps://github.com/rust-lang/rust/blob/8d18c32b61476ed16dd15074e71be3970368d6d7/compiler/rustc_mir_build/src/build/expr/as_rvalue.rs#L231\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00185bec7ce88eae94adbc3185b802bfec8cad9a", "html_url": "https://github.com/rust-lang/rust/commit/00185bec7ce88eae94adbc3185b802bfec8cad9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00185bec7ce88eae94adbc3185b802bfec8cad9a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "731c1a5592b6b4744fa5e64201afb3d5ab085fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/731c1a5592b6b4744fa5e64201afb3d5ab085fad", "html_url": "https://github.com/rust-lang/rust/commit/731c1a5592b6b4744fa5e64201afb3d5ab085fad"}, {"sha": "400866b7ab74cb9a4e705e0c4536a8b8130eb59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/400866b7ab74cb9a4e705e0c4536a8b8130eb59e", "html_url": "https://github.com/rust-lang/rust/commit/400866b7ab74cb9a4e705e0c4536a8b8130eb59e"}], "stats": {"total": 301, "additions": 234, "deletions": 67}, "files": [{"sha": "bcab4c0d24b5fae0502df9e6f88a3f64462878b3", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 58, "deletions": 43, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -15,6 +15,7 @@ use rustc_middle::mir::Place;\n use rustc_middle::mir::*;\n use rustc_middle::thir::*;\n use rustc_middle::ty::cast::{mir_cast_kind, CastTy};\n+use rustc_middle::ty::layout::IntegerExt;\n use rustc_middle::ty::{self, Ty, UpvarSubsts};\n use rustc_span::Span;\n \n@@ -225,49 +226,63 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     );\n                     let (op,ty) = (Operand::Move(discr), discr_ty);\n \n-                    if let Abi::Scalar(scalar) = layout.unwrap().abi{\n-                        if let Primitive::Int(_, signed) = scalar.primitive() {\n-                            let range = scalar.valid_range(&this.tcx);\n-                            // FIXME: Handle wraparound cases too.\n-                            if range.end >= range.start {\n-                                let mut assumer = |range: u128, bin_op: BinOp| {\n-                                    // We will be overwriting this val if our scalar is signed value\n-                                    // because sign extension on unsigned types might cause unintended things\n-                                    let mut range_val =\n-                                        ConstantKind::from_bits(this.tcx, range, ty::ParamEnv::empty().and(discr_ty));\n-                                    let bool_ty = this.tcx.types.bool;\n-                                    if signed {\n-                                        let scalar_size_extend = scalar.size(&this.tcx).sign_extend(range);\n-                                        let discr_layout = this.tcx.layout_of(this.param_env.and(discr_ty));\n-                                        let truncated_val = discr_layout.unwrap().size.truncate(scalar_size_extend);\n-                                        range_val = ConstantKind::from_bits(\n-                                            this.tcx,\n-                                            truncated_val,\n-                                            ty::ParamEnv::empty().and(discr_ty),\n-                                        );\n-                                    }\n-                                    let lit_op = this.literal_operand(expr.span, range_val);\n-                                    let is_bin_op = this.temp(bool_ty, expr_span);\n-                                    this.cfg.push_assign(\n-                                        block,\n-                                        source_info,\n-                                        is_bin_op,\n-                                        Rvalue::BinaryOp(bin_op, Box::new(((lit_op), (Operand::Copy(discr))))),\n-                                    );\n-                                    this.cfg.push(\n-                                        block,\n-                                        Statement {\n-                                            source_info,\n-                                            kind: StatementKind::Intrinsic(Box::new(NonDivergingIntrinsic::Assume(\n-                                                Operand::Copy(is_bin_op),\n-                                            ))),\n-                                        },\n-                                    )\n-                                };\n-                                assumer(range.end, BinOp::Ge);\n-                                assumer(range.start, BinOp::Le);\n-                            }\n-                        }\n+                    if let Abi::Scalar(scalar) = layout.unwrap().abi\n+                        && !scalar.is_always_valid(&this.tcx)\n+                        && let Primitive::Int(int_width, _signed) = scalar.primitive()\n+                    {\n+                        let unsigned_ty = int_width.to_ty(this.tcx, false);\n+                        let unsigned_place = this.temp(unsigned_ty, expr_span);\n+                        this.cfg.push_assign(\n+                            block,\n+                            source_info,\n+                            unsigned_place,\n+                            Rvalue::Cast(CastKind::IntToInt, Operand::Copy(discr), unsigned_ty));\n+\n+                        let bool_ty = this.tcx.types.bool;\n+                        let range = scalar.valid_range(&this.tcx);\n+                        let merge_op =\n+                            if range.start <= range.end {\n+                                BinOp::BitAnd\n+                            } else {\n+                                BinOp::BitOr\n+                            };\n+\n+                        let mut comparer = |range: u128, bin_op: BinOp| -> Place<'tcx> {\n+                            let range_val =\n+                                ConstantKind::from_bits(this.tcx, range, ty::ParamEnv::empty().and(unsigned_ty));\n+                            let lit_op = this.literal_operand(expr.span, range_val);\n+                            let is_bin_op = this.temp(bool_ty, expr_span);\n+                            this.cfg.push_assign(\n+                                block,\n+                                source_info,\n+                                is_bin_op,\n+                                Rvalue::BinaryOp(bin_op, Box::new((Operand::Copy(unsigned_place), lit_op))),\n+                            );\n+                            is_bin_op\n+                        };\n+                        let assert_place = if range.start == 0 {\n+                            comparer(range.end, BinOp::Le)\n+                        } else {\n+                            let start_place = comparer(range.start, BinOp::Ge);\n+                            let end_place = comparer(range.end, BinOp::Le);\n+                            let merge_place = this.temp(bool_ty, expr_span);\n+                            this.cfg.push_assign(\n+                                block,\n+                                source_info,\n+                                merge_place,\n+                                Rvalue::BinaryOp(merge_op, Box::new((Operand::Move(start_place), Operand::Move(end_place)))),\n+                            );\n+                            merge_place\n+                        };\n+                        this.cfg.push(\n+                            block,\n+                            Statement {\n+                                source_info,\n+                                kind: StatementKind::Intrinsic(Box::new(NonDivergingIntrinsic::Assume(\n+                                    Operand::Move(assert_place),\n+                                ))),\n+                            },\n+                        );\n                     }\n \n                     (op,ty)"}, {"sha": "f5d88de76ddf5f76197ec20666d7facb5b5c4095", "filename": "tests/assembly/option-nonzero-eq.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fassembly%2Foption-nonzero-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fassembly%2Foption-nonzero-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fassembly%2Foption-nonzero-eq.rs?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -0,0 +1,28 @@\n+// revisions: WIN LIN\n+// [WIN] only-windows\n+// [LIN] only-linux\n+// assembly-output: emit-asm\n+// compile-flags: --crate-type=lib -O -C llvm-args=-x86-asm-syntax=intel\n+// only-x86_64\n+// ignore-sgx\n+// ignore-debug\n+\n+use std::cmp::Ordering;\n+\n+// CHECK-lABEL: ordering_eq:\n+#[no_mangle]\n+pub fn ordering_eq(l: Option<Ordering>, r: Option<Ordering>) -> bool {\n+    // Linux (System V): first two arguments are rdi then rsi\n+    // Windows: first two arguments are rcx then rdx\n+    // Both use rax for the return value.\n+\n+    // CHECK-NOT: mov\n+    // CHECK-NOT: test\n+    // CHECK-NOT: cmp\n+\n+    // LIN: cmp dil, sil\n+    // WIN: cmp cl, dl\n+    // CHECK-NEXT: sete al\n+    // CHECK-NEXT: ret\n+    l == r\n+}"}, {"sha": "a394695f3bd65c3e521fdec05785b3e9c02ccd58", "filename": "tests/codegen/option-nonzero-eq.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fcodegen%2Foption-nonzero-eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fcodegen%2Foption-nonzero-eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Foption-nonzero-eq.rs?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -7,6 +7,9 @@ use core::cmp::Ordering;\n use core::num::{NonZeroU32, NonZeroI64};\n use core::ptr::NonNull;\n \n+// See also tests/assembly/option-nonzero-eq.rs, for cases with `assume`s in the\n+// LLVM and thus don't optimize down clearly here, but do in assembly.\n+\n // CHECK-lABEL: @non_zero_eq\n #[no_mangle]\n pub fn non_zero_eq(l: Option<NonZeroU32>, r: Option<NonZeroU32>) -> bool {\n@@ -33,12 +36,3 @@ pub fn non_null_eq(l: Option<NonNull<u8>>, r: Option<NonNull<u8>>) -> bool {\n     // CHECK-NEXT: ret i1\n     l == r\n }\n-\n-// CHECK-lABEL: @ordering_eq\n-#[no_mangle]\n-pub fn ordering_eq(l: Option<Ordering>, r: Option<Ordering>) -> bool {\n-    // CHECK: start:\n-    // CHECK-NEXT: icmp eq i8\n-    // CHECK-NEXT: ret i1\n-    l == r\n-}"}, {"sha": "9f14c02846547503ad764a3883b84b5fb321ab7f", "filename": "tests/mir-opt/building/enum_cast.bar.built.after.mir", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -5,17 +5,16 @@ fn bar(_1: Bar) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n     let _2: Bar;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n     let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _4: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n     let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _4 = Ge(const 1_isize, _3);      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(_4);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _5 = Le(const 0_isize, _3);      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(_5);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _5 = Le(_4, const 1_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2"}, {"sha": "715dedcf24deb999ee5d82a2e17c662f41097645", "filename": "tests/mir-opt/building/enum_cast.boo.built.after.mir", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -5,17 +5,16 @@ fn boo(_1: Boo) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n     let _2: Boo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n     let mut _3: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n-    let mut _4: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n     let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _4 = Ge(const 1_u8, _3);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(_4);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        _5 = Le(const 0_u8, _3);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n-        assume(_5);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _5 = Le(_4, const 1_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2"}, {"sha": "6c177c61ecad8042be71107f39a3f7ecd6cbc593", "filename": "tests/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -6,7 +6,7 @@ fn droppy() -> () {\n     let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n     let _4: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n     let mut _5: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n+    let mut _6: u8;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n     let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n     let _8: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n     scope 1 {\n@@ -31,10 +31,9 @@ fn droppy() -> () {\n         StorageLive(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n         _4 = move _2;                    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n         _5 = discriminant(_4);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _6 = Ge(const 2_isize, _5);      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        assume(_6);                      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        _7 = Le(const 0_isize, _5);      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n-        assume(_7);                      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _6 = _5 as u8 (IntToInt);        // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _7 = Le(_6, const 2_u8);         // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        assume(move _7);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         _3 = move _5 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         drop(_4) -> [return: bb1, unwind: bb4]; // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n     }"}, {"sha": "ab8129ca01cfca925f0d1b9f2abe38ab645ff49b", "filename": "tests/mir-opt/building/enum_cast.far.built.after.mir", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.far.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -0,0 +1,22 @@\n+// MIR for `far` after built\n+\n+fn far(_1: Far) -> isize {\n+    debug far => _1;                     // in scope 0 at $DIR/enum_cast.rs:+0:8: +0:11\n+    let mut _0: isize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n+    let _2: Far;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _3: i16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _4: u16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _4 = _3 as u16 (IntToInt);       // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _5 = Le(_4, const 1_u16);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(move _5);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _0 = move _3 as isize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "7b2b583f20fb9cd669b84c4f2fc29b71199f4ead", "filename": "tests/mir-opt/building/enum_cast.offsetty.built.after.mir", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.offsetty.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -0,0 +1,26 @@\n+// MIR for `offsetty` after built\n+\n+fn offsetty(_1: NotStartingAtZero) -> u32 {\n+    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:13: +0:14\n+    let mut _0: u32;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:38: +0:41\n+    let _2: NotStartingAtZero;           // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+    let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+    let mut _4: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _4 = _3 as u8 (IntToInt);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _5 = Ge(_4, const 4_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _6 = Le(_4, const 8_u8);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _7 = BitAnd(move _5, move _6);   // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        assume(move _7);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _0 = move _3 as u32 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:12: +1:13\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "431b5c708b929bfdc832839798209c4d989b7511", "filename": "tests/mir-opt/building/enum_cast.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.rs?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -1,6 +1,7 @@\n // EMIT_MIR enum_cast.foo.built.after.mir\n // EMIT_MIR enum_cast.bar.built.after.mir\n // EMIT_MIR enum_cast.boo.built.after.mir\n+// EMIT_MIR enum_cast.far.built.after.mir\n \n enum Foo {\n     A\n@@ -15,6 +16,11 @@ enum Boo {\n     A, B\n }\n \n+#[repr(i16)]\n+enum Far {\n+    A, B\n+}\n+\n fn foo(foo: Foo) -> usize {\n     foo as usize\n }\n@@ -27,6 +33,10 @@ fn boo(boo: Boo) -> usize {\n     boo as usize\n }\n \n+fn far(far: Far) -> isize {\n+    far as isize\n+}\n+\n // EMIT_MIR enum_cast.droppy.built.after.mir\n enum Droppy {\n     A, B, C\n@@ -46,5 +56,37 @@ fn droppy() {\n     let z = Droppy::B;\n }\n \n+#[repr(i16)]\n+enum SignedAroundZero {\n+    A = -2,\n+    B = 0,\n+    C = 2,\n+}\n+\n+#[repr(u16)]\n+enum UnsignedAroundZero {\n+    A = 65535,\n+    B = 0,\n+    C = 1,\n+}\n+\n+// EMIT_MIR enum_cast.signy.built.after.mir\n+fn signy(x: SignedAroundZero) -> i16 {\n+    x as i16\n+}\n+\n+// EMIT_MIR enum_cast.unsigny.built.after.mir\n+fn unsigny(x: UnsignedAroundZero) -> u16 {\n+    // FIXME: This doesn't get an around-the-end range today, sadly.\n+    x as u16\n+}\n+\n+enum NotStartingAtZero { A = 4, B = 6, C = 8 }\n+\n+// EMIT_MIR enum_cast.offsetty.built.after.mir\n+fn offsetty(x: NotStartingAtZero) -> u32 {\n+    x as u32\n+}\n+\n fn main() {\n }"}, {"sha": "ef4fea604ec1a826e9708d142469c73633cff129", "filename": "tests/mir-opt/building/enum_cast.signy.built.after.mir", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.signy.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -0,0 +1,26 @@\n+// MIR for `signy` after built\n+\n+fn signy(_1: SignedAroundZero) -> i16 {\n+    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:10: +0:11\n+    let mut _0: i16;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:34: +0:37\n+    let _2: SignedAroundZero;            // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+    let mut _3: i16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+    let mut _4: u16;                     // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:6\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _4 = _3 as u16 (IntToInt);       // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _5 = Ge(_4, const 65534_u16);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _6 = Le(_4, const 2_u16);        // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _7 = BitOr(move _5, move _6);    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        assume(move _7);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        _0 = move _3 as i16 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+1:5: +1:13\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:12: +1:13\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2\n+    }\n+}"}, {"sha": "7ca147b1596ffad218319dbef2961c007cf6b1ae", "filename": "tests/mir-opt/building/enum_cast.unsigny.built.after.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/00185bec7ce88eae94adbc3185b802bfec8cad9a/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fenum_cast.unsigny.built.after.mir?ref=00185bec7ce88eae94adbc3185b802bfec8cad9a", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `unsigny` after built\n+\n+fn unsigny(_1: UnsignedAroundZero) -> u16 {\n+    debug x => _1;                       // in scope 0 at $DIR/enum_cast.rs:+0:12: +0:13\n+    let mut _0: u16;                     // return place in scope 0 at $DIR/enum_cast.rs:+0:38: +0:41\n+    let _2: UnsignedAroundZero;          // in scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n+    let mut _3: u16;                     // in scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n+        _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+2:5: +2:6\n+        _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+2:5: +2:13\n+        _0 = move _3 as u16 (IntToInt);  // scope 0 at $DIR/enum_cast.rs:+2:5: +2:13\n+        StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+2:12: +2:13\n+        return;                          // scope 0 at $DIR/enum_cast.rs:+3:2: +3:2\n+    }\n+}"}]}