{"sha": "c3ba1f14faaf132de7c216123878a681d7f3ca61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYmExZjE0ZmFhZjEzMmRlN2MyMTYxMjM4NzhhNjgxZDdmM2NhNjE=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2021-05-10T20:09:38Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2021-05-10T20:09:38Z"}, "message": "Allow semantic tokens for strings to be disabled", "tree": {"sha": "e9364d8209ec7ef0f7ca7440fb391576227c9388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9364d8209ec7ef0f7ca7440fb391576227c9388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3ba1f14faaf132de7c216123878a681d7f3ca61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3ba1f14faaf132de7c216123878a681d7f3ca61", "html_url": "https://github.com/rust-lang/rust/commit/c3ba1f14faaf132de7c216123878a681d7f3ca61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3ba1f14faaf132de7c216123878a681d7f3ca61/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba8620398713d6f116dd1cce1a7e1cd6e3f97461", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8620398713d6f116dd1cce1a7e1cd6e3f97461", "html_url": "https://github.com/rust-lang/rust/commit/ba8620398713d6f116dd1cce1a7e1cd6e3f97461"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "3818160b701b45a4c882fe82eb3ff33b52cc1dd0", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c3ba1f14faaf132de7c216123878a681d7f3ca61", "patch": "@@ -44,6 +44,9 @@ config_data! {\n         /// Show function name and docs in parameter hints.\n         callInfo_full: bool = \"true\",\n \n+        /// Use semantic tokens for strings. Disable to support injected grammars\n+        semanticStringTokens: bool = \"true\",\n+\n         /// Automatically refresh project info via `cargo metadata` on\n         /// `Cargo.toml` changes.\n         cargo_autoreload: bool           = \"true\",\n@@ -381,6 +384,9 @@ impl Config {\n     pub fn line_folding_only(&self) -> bool {\n         try_or!(self.caps.text_document.as_ref()?.folding_range.as_ref()?.line_folding_only?, false)\n     }\n+    pub fn semantic_strings(&self) -> bool {\n+        self.data.semanticStringTokens\n+    }\n     pub fn hierarchical_symbols(&self) -> bool {\n         try_or!(\n             self.caps"}, {"sha": "85dd73fca82cb8db9866a9949711442218feb85a", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c3ba1f14faaf132de7c216123878a681d7f3ca61", "patch": "@@ -1376,7 +1376,8 @@ pub(crate) fn handle_semantic_tokens_full(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n \n     // Unconditionally cache the tokens\n     snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n@@ -1395,8 +1396,8 @@ pub(crate) fn handle_semantic_tokens_full_delta(\n     let line_index = snap.file_line_index(file_id)?;\n \n     let highlights = snap.analysis.highlight(file_id)?;\n-\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n \n     let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n@@ -1425,7 +1426,8 @@ pub(crate) fn handle_semantic_tokens_range(\n     let line_index = snap.file_line_index(frange.file_id)?;\n \n     let highlights = snap.analysis.highlight_range(frange)?;\n-    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n+    let semantic_strings = snap.config.semantic_strings();\n+    let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights, semantic_strings);\n     Ok(Some(semantic_tokens.into()))\n }\n "}, {"sha": "01ffe8db15683e90e5e6ac706c6940b3d10fd8e8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c3ba1f14faaf132de7c216123878a681d7f3ca61", "patch": "@@ -381,6 +381,7 @@ pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HlRange>,\n+    include_strings: bool\n ) -> lsp_types::SemanticTokens {\n     let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n@@ -389,8 +390,11 @@ pub(crate) fn semantic_tokens(\n         if highlight_range.highlight.is_empty() {\n             continue;\n         }\n-        let (type_, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n-        let token_index = semantic_tokens::type_index(type_);\n+        let (typ, mods) = semantic_token_type_and_modifiers(highlight_range.highlight);\n+        if !include_strings && typ == lsp_types::SemanticTokenType::STRING {\n+            continue;\n+        }\n+        let token_index = semantic_tokens::type_index(typ);\n         let modifier_bitset = mods.0;\n \n         for mut text_range in line_index.index.lines(highlight_range.range) {"}, {"sha": "62f34b643e30b116070239f76b21eef08e7489e4", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3ba1f14faaf132de7c216123878a681d7f3ca61/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=c3ba1f14faaf132de7c216123878a681d7f3ca61", "patch": "@@ -18,15 +18,16 @@ use lsp_types::{\n     notification::DidOpenTextDocument,\n     request::{\n         CodeActionRequest, Completion, Formatting, GotoTypeDefinition, HoverRequest,\n-        WillRenameFiles,\n+        SemanticTokensRangeRequest, WillRenameFiles\n     },\n     CodeActionContext, CodeActionParams, CompletionParams, DidOpenTextDocumentParams,\n     DocumentFormattingParams, FileRename, FormattingOptions, GotoDefinitionParams, HoverParams,\n-    PartialResultParams, Position, Range, RenameFilesParams, TextDocumentItem,\n+    PartialResultParams, Position, Range, RenameFilesParams, SemanticTokensRangeParams, TextDocumentItem,\n     TextDocumentPositionParams, WorkDoneProgressParams,\n+    SemanticTokens\n };\n use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n-use serde_json::json;\n+use serde_json::{from_value, json};\n use test_utils::skip_slow_tests;\n \n use crate::{\n@@ -37,6 +38,42 @@ use crate::{\n const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n \n+#[test]\n+fn can_disable_semantic_strings() {\n+    if skip_slow_tests() {\n+        return;\n+    }\n+\n+    [true, false].iter().for_each(|semantic_strings| {\n+        let server = Project::with_fixture(\n+            r#\"\n+//- /Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- /src/lib.rs\n+const foo: &'static str = \"hi\";\n+\"#,\n+        )\n+        .with_config(serde_json::json!({\n+            \"semanticStringTokens\": semantic_strings \n+        }))\n+        .server().wait_until_workspace_is_loaded();\n+\n+        let res = server.send_request::<SemanticTokensRangeRequest>(SemanticTokensRangeParams {\n+            text_document: server.doc_id(\"src/lib.rs\"),\n+            partial_result_params: PartialResultParams::default(),\n+            work_done_progress_params: WorkDoneProgressParams::default(),\n+            range: Range::new(Position::new(0, 26), Position::new(0, 30)),\n+        });\n+\n+        let tok_res: SemanticTokens = from_value(res).expect(\"invalid server response\");\n+        assert!(tok_res.data.len() == *semantic_strings as usize);\n+    });\n+}\n+\n+\n #[test]\n fn completes_items_from_standard_library() {\n     if skip_slow_tests() {"}]}