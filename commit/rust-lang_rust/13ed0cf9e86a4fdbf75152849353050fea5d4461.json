{"sha": "13ed0cf9e86a4fdbf75152849353050fea5d4461", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZWQwY2Y5ZTg2YTRmZGJmNzUxNTI4NDkzNTMwNTBmZWE1ZDQ0NjE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-17T07:51:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-19T07:45:38Z"}, "message": "do not use mem::uninitialized in std::io", "tree": {"sha": "e36efbef3abc4f5770aca642b0d8aca04fa47803", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e36efbef3abc4f5770aca642b0d8aca04fa47803"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13ed0cf9e86a4fdbf75152849353050fea5d4461", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13ed0cf9e86a4fdbf75152849353050fea5d4461", "html_url": "https://github.com/rust-lang/rust/commit/13ed0cf9e86a4fdbf75152849353050fea5d4461", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13ed0cf9e86a4fdbf75152849353050fea5d4461/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33452b0587ad543c6d7cc0f41daad6d4be71842f", "url": "https://api.github.com/repos/rust-lang/rust/commits/33452b0587ad543c6d7cc0f41daad6d4be71842f", "html_url": "https://github.com/rust-lang/rust/commit/33452b0587ad543c6d7cc0f41daad6d4be71842f"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "a2fff913ac720c1475eeb23a6a9be0d3588ff035", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=13ed0cf9e86a4fdbf75152849353050fea5d4461", "patch": "@@ -12,10 +12,11 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter<'_>, num: &T,\n     unsafe {\n         let mut buf = MaybeUninit::<[u8; 1024]>::uninit(); // enough for f32 and f64\n         let mut parts = MaybeUninit::<[flt2dec::Part<'_>; 4]>::uninit();\n-        // FIXME(#53491): Technically, this is calling `get_mut` on an uninitialized\n-        // `MaybeUninit` (here and elsewhere in this file).  Revisit this once\n+        // FIXME(#53491): This is calling `get_mut` on an uninitialized\n+        // `MaybeUninit` (here and elsewhere in this file). Revisit this once\n         // we decided whether that is valid or not.\n-        // Using `freeze` is *not enough*; `flt2dec::Part` is an enum!\n+        // We can do this only because we are libstd and coupled to the compiler.\n+        // (FWIW, using `freeze` would not be enough; `flt2dec::Part` is an enum!)\n         let formatted = flt2dec::to_exact_fixed_str(flt2dec::strategy::grisu::format_exact,\n                                                     *num, sign, precision,\n                                                     false, buf.get_mut(), parts.get_mut());"}, {"sha": "20979e02a43735a4671b8c677f4b48c1cacc871f", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=13ed0cf9e86a4fdbf75152849353050fea5d4461", "patch": "@@ -2,7 +2,7 @@\n \n use crate::fmt;\n use crate::io::{self, Read, Initializer, Write, ErrorKind, BufRead, IoSlice, IoSliceMut};\n-use crate::mem;\n+use crate::mem::MaybeUninit;\n \n /// Copies the entire contents of a reader into a writer.\n ///\n@@ -43,27 +43,23 @@ use crate::mem;\n pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<u64>\n     where R: Read, W: Write\n {\n-    let mut buf = unsafe {\n-        // This is still technically undefined behavior due to creating a reference\n-        // to uninitialized data, but within libstd we can rely on more guarantees\n-        // than if this code were in an external lib\n-\n-        // FIXME: This should probably be changed to an array of `MaybeUninit<u8>`\n-        // once the `mem::MaybeUninit` slice APIs stabilize\n-        let mut buf: mem::MaybeUninit<[u8; super::DEFAULT_BUF_SIZE]> = mem::MaybeUninit::uninit();\n-        reader.initializer().initialize(&mut *buf.as_mut_ptr());\n-        buf.assume_init()\n-    };\n+    let mut buf = MaybeUninit::<[u8; super::DEFAULT_BUF_SIZE]>::uninit();\n+    // FIXME(#53491): This is calling `get_mut` and `get_ref` on an uninitialized\n+    // `MaybeUninit`. Revisit this once we decided whether that is valid or not.\n+    // This is still technically undefined behavior due to creating a reference\n+    // to uninitialized data, but within libstd we can rely on more guarantees\n+    // than if this code were in an external lib\n+    unsafe { reader.initializer().initialize(buf.get_mut()); }\n \n     let mut written = 0;\n     loop {\n-        let len = match reader.read(&mut buf) {\n+        let len = match reader.read(unsafe { buf.get_mut() }) {\n             Ok(0) => return Ok(written),\n             Ok(len) => len,\n             Err(ref e) if e.kind() == ErrorKind::Interrupted => continue,\n             Err(e) => return Err(e),\n         };\n-        writer.write_all(&buf[..len])?;\n+        writer.write_all(unsafe { &buf.get_ref()[..len] })?;\n         written += len as u64;\n     }\n }"}, {"sha": "49fb4be39b451d3a03ccbb339284711802bb02ce", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13ed0cf9e86a4fdbf75152849353050fea5d4461/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=13ed0cf9e86a4fdbf75152849353050fea5d4461", "patch": "@@ -272,6 +272,7 @@\n #![feature(libc)]\n #![feature(link_args)]\n #![feature(linkage)]\n+#![feature(maybe_uninit_ref)]\n #![feature(mem_take)]\n #![feature(needs_panic_runtime)]\n #![feature(never_type)]"}]}