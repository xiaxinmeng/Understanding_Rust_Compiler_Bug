{"sha": "1b6b06a03a00a7c9f156bff130b72e90b79e1127", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNmIwNmEwM2EwMGE3YzlmMTU2YmZmMTMwYjcyZTkwYjc5ZTExMjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T16:20:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-19T16:20:22Z"}, "message": "Auto merge of #80132 - matthewjasper:revert-eval-order, r=nikomatsakis\n\nRevert change to trait evaluation order\n\nThis change breaks some code and doesn't appear to enable any new code.\n\ncloses #79902\n\nr? `@nikomatsakis`", "tree": {"sha": "a7ba2f7bae11e111a56ff1970d37f1224caa1dd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7ba2f7bae11e111a56ff1970d37f1224caa1dd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b6b06a03a00a7c9f156bff130b72e90b79e1127", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b06a03a00a7c9f156bff130b72e90b79e1127", "html_url": "https://github.com/rust-lang/rust/commit/1b6b06a03a00a7c9f156bff130b72e90b79e1127", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b6b06a03a00a7c9f156bff130b72e90b79e1127/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd2f1cb2785f87177249e2bdb628ed782fcd8def", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd2f1cb2785f87177249e2bdb628ed782fcd8def", "html_url": "https://github.com/rust-lang/rust/commit/bd2f1cb2785f87177249e2bdb628ed782fcd8def"}, {"sha": "3e31ffda973d2fe8e314378a98d0b4633fce9485", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e31ffda973d2fe8e314378a98d0b4633fce9485", "html_url": "https://github.com/rust-lang/rust/commit/3e31ffda973d2fe8e314378a98d0b4633fce9485"}], "stats": {"total": 45, "additions": 42, "deletions": 3}, "files": [{"sha": "030c29171a15350ba1fe5aa8552dca8fbbdb2228", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b06a03a00a7c9f156bff130b72e90b79e1127/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b06a03a00a7c9f156bff130b72e90b79e1127/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=1b6b06a03a00a7c9f156bff130b72e90b79e1127", "patch": "@@ -334,7 +334,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     fn vtable_impl(\n         &mut self,\n         impl_def_id: DefId,\n-        mut substs: Normalized<'tcx, SubstsRef<'tcx>>,\n+        substs: Normalized<'tcx, SubstsRef<'tcx>>,\n         cause: ObligationCause<'tcx>,\n         recursion_depth: usize,\n         param_env: ty::ParamEnv<'tcx>,\n@@ -356,9 +356,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // relying on projections in the impl-trait-ref.\n         //\n         // e.g., `impl<U: Tr, V: Iterator<Item=U>> Foo<<U as Tr>::T> for V`\n-        substs.obligations.append(&mut impl_obligations);\n+        impl_obligations.extend(substs.obligations);\n \n-        ImplSourceUserDefinedData { impl_def_id, substs: substs.value, nested: substs.obligations }\n+        ImplSourceUserDefinedData { impl_def_id, substs: substs.value, nested: impl_obligations }\n     }\n \n     fn confirm_object_candidate("}, {"sha": "57809d89aa64cab75bf079a39f6977ca805868fe", "filename": "src/test/ui/traits/impl-evaluation-order.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1b6b06a03a00a7c9f156bff130b72e90b79e1127/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b6b06a03a00a7c9f156bff130b72e90b79e1127/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fimpl-evaluation-order.rs?ref=1b6b06a03a00a7c9f156bff130b72e90b79e1127", "patch": "@@ -0,0 +1,39 @@\n+// Regression test for #79902\n+\n+// Check that evaluation (which is used to determine whether to copy a type in\n+// MIR building) evaluates bounds from normalizing an impl after evaluating\n+// any bounds on the impl.\n+\n+// check-pass\n+\n+trait A {\n+    type B;\n+}\n+trait M {}\n+\n+struct G<T, U>(*const T, *const U);\n+\n+impl<T, U> Clone for G<T, U> {\n+    fn clone(&self) -> Self {\n+        G { ..*self }\n+    }\n+}\n+\n+impl<T, U> Copy for G<T, U::B>\n+where\n+    T: A<B = U>,\n+    U: A,\n+{\n+}\n+\n+impl A for () {\n+    type B = ();\n+}\n+\n+fn is_m<T: M>(_: T) {}\n+\n+fn main() {\n+    let x = G(&(), &());\n+    drop(x);\n+    drop(x);\n+}"}]}