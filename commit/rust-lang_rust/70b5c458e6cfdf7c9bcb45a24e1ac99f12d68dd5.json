{"sha": "70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYjVjNDU4ZTZjZmRmN2M5YmNiNDVhMjRlMWFjOTlmMTJkNjhkZDU=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-02-09T16:40:27Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-02-09T16:40:27Z"}, "message": "add tests for the doctest construction functionality", "tree": {"sha": "47d3d534713ebc04ec9a2db1eae3080aab955e89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47d3d534713ebc04ec9a2db1eae3080aab955e89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5", "html_url": "https://github.com/rust-lang/rust/commit/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58d1b5346806ecfe53e27916792b13c2ac42e89", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58d1b5346806ecfe53e27916792b13c2ac42e89", "html_url": "https://github.com/rust-lang/rust/commit/a58d1b5346806ecfe53e27916792b13c2ac42e89"}], "stats": {"total": 214, "additions": 214, "deletions": 0}, "files": [{"sha": "08258489a2ec22ad11bf787fb973725014423d0f", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 214, "deletions": 0, "changes": 214, "blob_url": "https://github.com/rust-lang/rust/blob/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=70b5c458e6cfdf7c9bcb45a24e1ac99f12d68dd5", "patch": "@@ -753,3 +753,217 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirCollector<'a, 'hir> {\n         self.visit_testable(macro_def.name.to_string(), &macro_def.attrs, |_| ());\n     }\n }\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::{TestOptions, make_test};\n+\n+    #[test]\n+    fn make_test_basic() {\n+        //basic use: wraps with `fn main`, adds `#![allow(unused)]`\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name_no_use() {\n+        //if you give a crate name but *don't* use it within the test, it won't bother inserting\n+        //the `extern crate` statement\n+        let opts = TestOptions::default();\n+        let input =\n+\"assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_name() {\n+        //if you give a crate name and use it within the test, it will insert an `extern crate`\n+        //statement before `fn main`\n+        let opts = TestOptions::default();\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+    }\n+\n+    #[test]\n+    fn make_test_no_crate_inject() {\n+        //even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n+        //adding it anyway\n+        let opts = TestOptions {\n+            no_crate_inject: true,\n+            attrs: vec![],\n+        };\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_ignore_std() {\n+        //even if you include a crate name, and use it in the doctest, we still won't include an\n+        //`extern crate` statement if the crate is \"std\" - that's included already by the compiler!\n+        let opts = TestOptions::default();\n+        let input =\n+\"use std::*;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+use std::*;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"std\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_manual_extern_crate() {\n+        //when you manually include an `extern crate` statement in your doctest, make_test assumes\n+        //you've included one for your own crate too\n+        let opts = TestOptions::default();\n+        let input =\n+\"extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+extern crate asdf;\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_opts_attrs() {\n+        //if you supplied some doctest attributes with #![doc(test(attr(...)))], it will use those\n+        //instead of the stock #![allow(unused)]\n+        let mut opts = TestOptions::default();\n+        opts.attrs.push(\"feature(sick_rad)\".to_string());\n+        let input =\n+\"use asdf::qwop;\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![feature(sick_rad)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 3));\n+\n+        //adding more will also bump the returned line offset\n+        opts.attrs.push(\"feature(hella_dope)\".to_string());\n+        let expected =\n+\"#![feature(sick_rad)]\n+#![feature(hella_dope)]\n+extern crate asdf;\n+fn main() {\n+use asdf::qwop;\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, Some(\"asdf\"), false, &opts);\n+        assert_eq!(output, (expected, 4));\n+    }\n+\n+    #[test]\n+    fn make_test_crate_attrs() {\n+        //including inner attributes in your doctest will apply them to the whole \"crate\", pasting\n+        //them outside the generated main function\n+        let opts = TestOptions::default();\n+        let input =\n+\"#![feature(sick_rad)]\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+#![feature(sick_rad)]\n+fn main() {\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 2));\n+    }\n+\n+    #[test]\n+    fn make_test_with_main() {\n+        //including your own `fn main` wrapper lets the test use it verbatim\n+        let opts = TestOptions::default();\n+        let input =\n+\"fn main() {\n+    assert_eq!(2+2, 4);\n+}\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+    assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected, 1));\n+    }\n+\n+    #[test]\n+    fn make_test_fake_main() {\n+        //...but putting it in a comment will still provide a wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+fn main() {\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\n+}\".to_string();\n+        let output = make_test(input, None, false, &opts);\n+        assert_eq!(output, (expected.clone(), 2));\n+    }\n+\n+    #[test]\n+    fn make_test_dont_insert_main() {\n+        //even with that, if you set `dont_insert_main`, it won't create the `fn main` wrapper\n+        let opts = TestOptions::default();\n+        let input =\n+\"//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\";\n+        let expected =\n+\"#![allow(unused)]\n+//Ceci n'est pas une `fn main`\n+assert_eq!(2+2, 4);\".to_string();\n+        let output = make_test(input, None, true, &opts);\n+        assert_eq!(output, (expected.clone(), 1));\n+    }\n+}"}]}