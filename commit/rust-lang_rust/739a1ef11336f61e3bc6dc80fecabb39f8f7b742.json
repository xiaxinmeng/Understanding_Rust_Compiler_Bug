{"sha": "739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczOWExZWYxMTMzNmY2MWUzYmM2ZGM4MGZlY2FiYjM5ZjhmN2I3NDI=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-12T14:11:33Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-03-14T21:52:31Z"}, "message": "Create the `hir_to_node_id` map before `TyCtxt`", "tree": {"sha": "961479286b4ff7d644267e480dfa6c5446c9980e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/961479286b4ff7d644267e480dfa6c5446c9980e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "html_url": "https://github.com/rust-lang/rust/commit/739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "url": "https://api.github.com/repos/rust-lang/rust/commits/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972", "html_url": "https://github.com/rust-lang/rust/commit/396aeb83c0bbb495e4cf1feb3a6dead8e9ce6972"}], "stats": {"total": 56, "additions": 25, "deletions": 31}, "files": [{"sha": "e8233c0446d1f92dcbf875b03f0d2695d92f5cd9", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "patch": "@@ -4,7 +4,6 @@ use crate::hir::map::{Entry, HirOwnerData, Map};\n use crate::hir::{HirItem, HirOwner, HirOwnerItems};\n use crate::ich::StableHashingContext;\n use crate::middle::cstore::CrateStore;\n-use rustc_ast::ast::NodeId;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n@@ -39,7 +38,6 @@ pub(super) struct NodeCollector<'a, 'hir> {\n     current_dep_node_owner: DefIndex,\n \n     definitions: &'a definitions::Definitions,\n-    hir_to_node_id: &'a FxHashMap<HirId, NodeId>,\n \n     hcx: StableHashingContext<'a>,\n \n@@ -98,7 +96,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         arena: &'hir Arena<'hir>,\n         krate: &'hir Crate<'hir>,\n         definitions: &'a definitions::Definitions,\n-        hir_to_node_id: &'a FxHashMap<HirId, NodeId>,\n         mut hcx: StableHashingContext<'a>,\n     ) -> NodeCollector<'a, 'hir> {\n         let root_mod_def_path_hash = definitions.def_path_hash(CRATE_DEF_INDEX);\n@@ -131,7 +128,6 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             parent_node: hir::CRATE_HIR_ID,\n             current_dep_node_owner: CRATE_DEF_INDEX,\n             definitions,\n-            hir_to_node_id,\n             hcx,\n             hir_body_nodes,\n             map: (0..definitions.def_index_count())\n@@ -244,7 +240,7 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n         // Make sure that the DepNode of some node coincides with the HirId\n         // owner of that node.\n         if cfg!(debug_assertions) {\n-            let node_id = self.hir_to_node_id[&hir_id];\n+            let node_id = self.definitions.hir_to_node_id(hir_id);\n             assert_eq!(self.definitions.node_to_hir_id(node_id), hir_id);\n \n             if hir_id.owner != self.current_dep_node_owner {\n@@ -345,7 +341,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         debug!(\"visit_item: {:?}\", i);\n         debug_assert_eq!(\n             i.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&i.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(i.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(i.hir_id.owner, i, |this, hash| {\n             this.insert_with_hash(i.span, i.hir_id, Node::Item(i), hash);\n@@ -377,7 +373,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(\n             ti.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&ti.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(ti.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(ti.hir_id.owner, ti, |this, hash| {\n             this.insert_with_hash(ti.span, ti.hir_id, Node::TraitItem(ti), hash);\n@@ -391,7 +387,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     fn visit_impl_item(&mut self, ii: &'hir ImplItem<'hir>) {\n         debug_assert_eq!(\n             ii.hir_id.owner,\n-            self.definitions.opt_def_index(self.hir_to_node_id[&ii.hir_id]).unwrap()\n+            self.definitions.opt_def_index(self.definitions.hir_to_node_id(ii.hir_id)).unwrap()\n         );\n         self.with_dep_node_owner(ii.hir_id.owner, ii, |this, hash| {\n             this.insert_with_hash(ii.span, ii.hir_id, Node::ImplItem(ii), hash);\n@@ -510,7 +506,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_macro_def(&mut self, macro_def: &'hir MacroDef<'hir>) {\n-        let node_id = self.hir_to_node_id[&macro_def.hir_id];\n+        let node_id = self.definitions.hir_to_node_id(macro_def.hir_id);\n         let def_index = self.definitions.opt_def_index(node_id).unwrap();\n \n         self.with_dep_node_owner(def_index, macro_def, |this, hash| {"}, {"sha": "42ccf7e72504b7f34bb39bcaa1cfc013a58edc84", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "patch": "@@ -80,7 +80,11 @@ pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n     def_index_to_node: IndexVec<DefIndex, ast::NodeId>,\n+\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n+    /// The reverse mapping of `node_to_hir_id`.\n+    pub(super) hir_to_node_id: FxHashMap<hir::HirId, ast::NodeId>,\n+\n     /// If `ExpnId` is an ID of some macro expansion,\n     /// then `DefId` is the normal module (`mod`) in which the expanded macro was defined.\n     parent_modules_of_macro_defs: FxHashMap<ExpnId, DefId>,\n@@ -346,6 +350,11 @@ impl Definitions {\n         }\n     }\n \n+    #[inline]\n+    pub fn hir_to_node_id(&self, hir_id: hir::HirId) -> ast::NodeId {\n+        self.hir_to_node_id[&hir_id]\n+    }\n+\n     #[inline]\n     pub fn node_to_hir_id(&self, node_id: ast::NodeId) -> hir::HirId {\n         self.node_to_hir_id[node_id]\n@@ -472,6 +481,13 @@ impl Definitions {\n             \"trying to initialize `NodeId` -> `HirId` mapping twice\"\n         );\n         self.node_to_hir_id = mapping;\n+\n+        // Build the reverse mapping of `node_to_hir_id`.\n+        self.hir_to_node_id = self\n+            .node_to_hir_id\n+            .iter_enumerated()\n+            .map(|(node_id, &hir_id)| (hir_id, node_id))\n+            .collect();\n     }\n \n     pub fn expansion_that_defined(&self, index: DefIndex) -> ExpnId {"}, {"sha": "bcbb6f3ec31e6e62c2e41a7b0680dd3636d4a19d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/739a1ef11336f61e3bc6dc80fecabb39f8f7b742/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=739a1ef11336f61e3bc6dc80fecabb39f8f7b742", "patch": "@@ -7,7 +7,6 @@ use crate::hir::{HirOwner, HirOwnerItems};\n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n use rustc_ast::ast::{self, Name, NodeId};\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::svh::Svh;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n@@ -139,9 +138,6 @@ pub struct IndexedHir<'hir> {\n     pub crate_hash: Svh,\n \n     pub(super) map: IndexVec<DefIndex, HirOwnerData<'hir>>,\n-\n-    /// The reverse mapping of `node_to_hir_id`.\n-    pub(super) hir_to_node_id: FxHashMap<HirId, NodeId>,\n }\n \n #[derive(Copy, Clone)]\n@@ -251,7 +247,7 @@ impl<'hir> Map<'hir> {\n \n     #[inline]\n     pub fn hir_to_node_id(&self, hir_id: HirId) -> NodeId {\n-        self.tcx.index_hir(LOCAL_CRATE).hir_to_node_id[&hir_id]\n+        self.tcx.definitions.hir_to_node_id(hir_id)\n     }\n \n     #[inline]\n@@ -1033,33 +1029,19 @@ pub(super) fn index_hir<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> &'tcx Indexe\n \n     let _prof_timer = tcx.sess.prof.generic_activity(\"build_hir_map\");\n \n-    // Build the reverse mapping of `node_to_hir_id`.\n-    let hir_to_node_id = tcx\n-        .definitions\n-        .node_to_hir_id\n-        .iter_enumerated()\n-        .map(|(node_id, &hir_id)| (hir_id, node_id))\n-        .collect();\n-\n     let (map, crate_hash) = {\n         let hcx = tcx.create_stable_hashing_context();\n \n-        let mut collector = NodeCollector::root(\n-            tcx.sess,\n-            &**tcx.arena,\n-            tcx.untracked_crate,\n-            &tcx.definitions,\n-            &hir_to_node_id,\n-            hcx,\n-        );\n+        let mut collector =\n+            NodeCollector::root(tcx.sess, &**tcx.arena, tcx.untracked_crate, &tcx.definitions, hcx);\n         intravisit::walk_crate(&mut collector, tcx.untracked_crate);\n \n         let crate_disambiguator = tcx.sess.local_crate_disambiguator();\n         let cmdline_args = tcx.sess.opts.dep_tracking_hash();\n         collector.finalize_and_compute_crate_hash(crate_disambiguator, &*tcx.cstore, cmdline_args)\n     };\n \n-    let map = tcx.arena.alloc(IndexedHir { crate_hash, map, hir_to_node_id });\n+    let map = tcx.arena.alloc(IndexedHir { crate_hash, map });\n \n     map\n }"}]}