{"sha": "885275207810dc0143b56bc4357461aa4c8ed07b", "node_id": "C_kwDOAAsO6NoAKDg4NTI3NTIwNzgxMGRjMDE0M2I1NmJjNDM1NzQ2MWFhNGM4ZWQwN2I", "commit": {"author": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-02-23T04:53:17Z"}, "committer": {"name": "David Koloski", "email": "dkoloski@google.com", "date": "2022-03-08T19:06:40Z"}, "message": "Treat unstable lints as unknown\n\nThis change causes unstable lints to be ignored if the `unknown_lints`\nlint is allowed. To achieve this, it also changes lints to apply as soon\nas they are processed. Previously, lints in the same set were processed\nas a batch and then all simultaneously applied.\n\nImplementation of https://github.com/rust-lang/compiler-team/issues/469", "tree": {"sha": "40aabd95b8572616536dc22fa95b33f3041fcead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40aabd95b8572616536dc22fa95b33f3041fcead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/885275207810dc0143b56bc4357461aa4c8ed07b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/885275207810dc0143b56bc4357461aa4c8ed07b", "html_url": "https://github.com/rust-lang/rust/commit/885275207810dc0143b56bc4357461aa4c8ed07b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/885275207810dc0143b56bc4357461aa4c8ed07b/comments", "author": null, "committer": null, "parents": [{"sha": "b97dc20784698730bd7bc1a20eabdcd32066d174", "url": "https://api.github.com/repos/rust-lang/rust/commits/b97dc20784698730bd7bc1a20eabdcd32066d174", "html_url": "https://github.com/rust-lang/rust/commit/b97dc20784698730bd7bc1a20eabdcd32066d174"}], "stats": {"total": 154, "additions": 119, "deletions": 35}, "files": [{"sha": "09557332fd7256617d06ca9ff0622531e5219526", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -169,6 +169,8 @@ declare_features! (\n     (active, staged_api, \"1.0.0\", None, None),\n     /// Added for testing E0705; perma-unstable.\n     (active, test_2018_feature, \"1.31.0\", None, Some(Edition::Edition2018)),\n+    /// Added for testing unstable lints; perma-unstable.\n+    (active, test_unstable_lint, \"1.60.0\", None, None),\n     /// Allows non-`unsafe` \u2014and thus, unsound\u2014 access to `Pin` constructions.\n     /// Marked `incomplete` since perma-unstable and unsound.\n     (incomplete, unsafe_pin_internals, \"1.60.0\", None, None),"}, {"sha": "a72e0336db915b8923b11d0571d4d724ae0bd1bd", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -93,10 +93,21 @@ impl<'s> LintLevelsBuilder<'s> {\n         self.store\n     }\n \n+    fn current_specs(&self) -> &FxHashMap<LintId, LevelAndSource> {\n+        &self.sets.list[self.cur].specs\n+    }\n+\n+    fn current_specs_mut(&mut self) -> &mut FxHashMap<LintId, LevelAndSource> {\n+        &mut self.sets.list[self.cur].specs\n+    }\n+\n     fn process_command_line(&mut self, sess: &Session, store: &LintStore) {\n-        let mut specs = FxHashMap::default();\n         self.sets.lint_cap = sess.opts.lint_cap.unwrap_or(Level::Forbid);\n \n+        self.cur = self.sets.list.push(LintSet {\n+            specs: FxHashMap::default(),\n+            parent: COMMAND_LINE,\n+        });\n         for &(ref lint_name, level) in &sess.opts.lint_opts {\n             store.check_lint_name_cmdline(sess, &lint_name, level, self.registered_tools);\n             let orig_level = level;\n@@ -108,30 +119,28 @@ impl<'s> LintLevelsBuilder<'s> {\n             };\n             for id in ids {\n                 // ForceWarn and Forbid cannot be overriden\n-                if let Some((Level::ForceWarn | Level::Forbid, _)) = specs.get(&id) {\n+                if let Some((Level::ForceWarn | Level::Forbid, _)) = self.current_specs().get(&id) {\n                     continue;\n                 }\n \n-                self.check_gated_lint(id, DUMMY_SP);\n-                let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n-                specs.insert(id, (level, src));\n+                if self.check_gated_lint(id, DUMMY_SP) {\n+                    let src = LintLevelSource::CommandLine(lint_flag_val, orig_level);\n+                    self.current_specs_mut().insert(id, (level, src));\n+                }\n             }\n         }\n-\n-        self.cur = self.sets.list.push(LintSet { specs, parent: COMMAND_LINE });\n     }\n \n     /// Attempts to insert the `id` to `level_src` map entry. If unsuccessful\n     /// (e.g. if a forbid was already inserted on the same scope), then emits a\n     /// diagnostic with no change to `specs`.\n     fn insert_spec(\n         &mut self,\n-        specs: &mut FxHashMap<LintId, LevelAndSource>,\n         id: LintId,\n         (level, src): LevelAndSource,\n     ) {\n         let (old_level, old_src) =\n-            self.sets.get_lint_level(id.lint, self.cur, Some(&specs), &self.sess);\n+            self.sets.get_lint_level(id.lint, self.cur, Some(self.current_specs()), &self.sess);\n         // Setting to a non-forbid level is an error if the lint previously had\n         // a forbid level. Note that this is not necessarily true even with a\n         // `#[forbid(..)]` attribute present, as that is overriden by `--cap-lints`.\n@@ -154,7 +163,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n-                    fcw_warning, specs, old_src, id_name\n+                    fcw_warning, self.current_specs(), old_src, id_name\n                 );\n \n                 let decorate_diag = |diag: &mut Diagnostic| {\n@@ -213,9 +222,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n         if let Level::ForceWarn = old_level {\n-            specs.insert(id, (old_level, old_src));\n+            self.current_specs_mut().insert(id, (old_level, old_src));\n         } else {\n-            specs.insert(id, (level, src));\n+            self.current_specs_mut().insert(id, (level, src));\n         }\n     }\n \n@@ -239,7 +248,11 @@ impl<'s> LintLevelsBuilder<'s> {\n         is_crate_node: bool,\n         source_hir_id: Option<HirId>,\n     ) -> BuilderPush {\n-        let mut specs = FxHashMap::default();\n+        let prev = self.cur;\n+        self.cur = self.sets.list.push(LintSet {\n+            specs: FxHashMap::default(),\n+            parent: prev,\n+        });\n         let sess = self.sess;\n         let bad_attr = |span| struct_span_err!(sess, span, E0452, \"malformed lint attribute input\");\n         for (attr_index, attr) in attrs.iter().enumerate() {\n@@ -348,8 +361,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                             reason,\n                         );\n                         for &id in *ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -368,7 +382,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -378,7 +392,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                             Err((Some(ids), ref new_lint_name)) => {\n                                 let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n                                 let (lvl, src) =\n-                                    self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                                    self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), &sess);\n                                 struct_lint_level(\n                                     self.sess,\n                                     lint,\n@@ -408,7 +422,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                                     reason,\n                                 );\n                                 for id in ids {\n-                                    self.insert_spec(&mut specs, *id, (level, src));\n+                                    self.insert_spec(*id, (level, src));\n                                 }\n                                 if let Level::Expect(expect_id) = level {\n                                     self.lint_expectations\n@@ -449,7 +463,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::Warning(msg, renamed) => {\n                         let lint = builtin::RENAMED_AND_REMOVED_LINTS;\n                         let (renamed_lint_level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), &sess);\n+                            self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), &sess);\n                         struct_lint_level(\n                             self.sess,\n                             lint,\n@@ -473,7 +487,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                     CheckLintNameResult::NoLint(suggestion) => {\n                         let lint = builtin::UNKNOWN_LINTS;\n                         let (level, src) =\n-                            self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                            self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), self.sess);\n                         struct_lint_level(self.sess, lint, level, src, Some(sp.into()), |lint| {\n                             let name = if let Some(tool_ident) = tool_ident {\n                                 format!(\"{}::{}\", tool_ident.name, name)\n@@ -504,8 +518,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                     {\n                         let src = LintLevelSource::Node(Symbol::intern(&new_name), sp, reason);\n                         for &id in ids {\n-                            self.check_gated_lint(id, attr.span);\n-                            self.insert_spec(&mut specs, id, (level, src));\n+                            if self.check_gated_lint(id, attr.span) {\n+                                self.insert_spec(id, (level, src));\n+                            }\n                         }\n                         if let Level::Expect(expect_id) = level {\n                             self.lint_expectations\n@@ -519,7 +534,7 @@ impl<'s> LintLevelsBuilder<'s> {\n         }\n \n         if !is_crate_node {\n-            for (id, &(level, ref src)) in specs.iter() {\n+            for (id, &(level, ref src)) in self.current_specs().iter() {\n                 if !id.lint.crate_level_only {\n                     continue;\n                 }\n@@ -530,7 +545,7 @@ impl<'s> LintLevelsBuilder<'s> {\n \n                 let lint = builtin::UNUSED_ATTRIBUTES;\n                 let (lint_level, lint_src) =\n-                    self.sets.get_lint_level(lint, self.cur, Some(&specs), self.sess);\n+                    self.sets.get_lint_level(lint, self.cur, Some(self.current_specs()), self.sess);\n                 struct_lint_level(\n                     self.sess,\n                     lint,\n@@ -551,9 +566,9 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n-        let prev = self.cur;\n-        if !specs.is_empty() {\n-            self.cur = self.sets.list.push(LintSet { specs, parent: prev });\n+        if self.current_specs().is_empty() {\n+            self.sets.list.pop();\n+            self.cur = prev;\n         }\n \n         BuilderPush { prev, changed: prev != self.cur }\n@@ -574,18 +589,25 @@ impl<'s> LintLevelsBuilder<'s> {\n     }\n \n     /// Checks if the lint is gated on a feature that is not enabled.\n-    fn check_gated_lint(&self, lint_id: LintId, span: Span) {\n+    ///\n+    /// Returns `true` if the lint's feature is enabled.\n+    fn check_gated_lint(&self, lint_id: LintId, span: Span) -> bool {\n         if let Some(feature) = lint_id.lint.feature_gate {\n             if !self.sess.features_untracked().enabled(feature) {\n-                feature_err(\n-                    &self.sess.parse_sess,\n-                    feature,\n-                    span,\n-                    &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n-                )\n-                .emit();\n+                let (unknown_lints_level, _) = self.lint_level(builtin::UNKNOWN_LINTS);\n+                if unknown_lints_level != Level::Allow {\n+                    feature_err(\n+                        &self.sess.parse_sess,\n+                        feature,\n+                        span,\n+                        &format!(\"the `{}` lint is unstable\", lint_id.lint.name_lower()),\n+                    )\n+                    .emit();\n+                }\n+                return false;\n             }\n         }\n+        true\n     }\n \n     /// Called after `push` when the scope of a set of attributes are exited."}, {"sha": "e1c88f74ab33c033322606bf456662a8492b4b04", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -3128,6 +3128,7 @@ declare_lint_pass! {\n         SUSPICIOUS_AUTO_TRAIT_IMPLS,\n         UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n+        TEST_UNSTABLE_LINT,\n     ]\n }\n \n@@ -3771,3 +3772,11 @@ declare_lint! {\n     Warn,\n     \"deprecated where clause location\"\n }\n+\n+declare_lint! {\n+    #[doc(hidden)]\n+    pub TEST_UNSTABLE_LINT,\n+    Deny,\n+    \"this unstable lint is only for testing\",\n+    @feature_gate = sym::test_unstable_lint;\n+}"}, {"sha": "24f802c1d4f948313e05ead6e425faf859a1c69c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -1383,6 +1383,7 @@ symbols! {\n         test_case,\n         test_removed_feature,\n         test_runner,\n+        test_unstable_lint,\n         then_with,\n         thread,\n         thread_local,"}, {"sha": "80e30f23993e34242c4ee5b022abc6ede61f6386", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-command-line.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-command-line.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,4 @@\n+// check-pass\n+// compile-flags: -Aunknown_lints -Atest_unstable_lint\n+\n+fn main() {}"}, {"sha": "992472c894a8c2c461626b322863bdbcf9be6946", "filename": "src/test/ui/unknown-unstable-lints/allow-unknown-unstable-lint-inline.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Fallow-unknown-unstable-lint-inline.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,5 @@\n+// check-pass\n+\n+#![allow(unknown_lints, test_unstable_lint)]\n+\n+fn main() {}"}, {"sha": "7663abffd9b48ba30d5bc24bcc7a5d7557d0a643", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-command-line.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,5 @@\n+// check-fail\n+// compile-flags: -Atest_unstable_lint\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+fn main() {}"}, {"sha": "d088f4c8fe5aa9f0bab14e8cb516b5f59b9e5498", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-command-line.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-command-line.stderr?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,11 @@\n+error[E0658]: the `test_unstable_lint` lint is unstable\n+   |\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `test_unstable_lint` lint is unstable\n+   |\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "43789906ed6f00bda60241d2a62409e3161a372f", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-inline.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.rs?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,6 @@\n+// check-fail\n+// error-pattern: the `test_unstable_lint` lint is unstable\n+\n+#![allow(test_unstable_lint)]\n+\n+fn main() {}"}, {"sha": "5ec85f346fec5577bb9b4a5eb6f33ffa76b0eeac", "filename": "src/test/ui/unknown-unstable-lints/unstable-lint-inline.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/885275207810dc0143b56bc4357461aa4c8ed07b/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funknown-unstable-lints%2Funstable-lint-inline.stderr?ref=885275207810dc0143b56bc4357461aa4c8ed07b", "patch": "@@ -0,0 +1,19 @@\n+error[E0658]: the `test_unstable_lint` lint is unstable\n+  --> $DIR/unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error[E0658]: the `test_unstable_lint` lint is unstable\n+  --> $DIR/unstable-lint-inline.rs:4:1\n+   |\n+LL | #![allow(test_unstable_lint)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(test_unstable_lint)]` to the crate attributes to enable\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}