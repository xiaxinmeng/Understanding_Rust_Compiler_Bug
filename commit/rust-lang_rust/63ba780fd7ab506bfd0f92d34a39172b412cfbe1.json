{"sha": "63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYmE3ODBmZDdhYjUwNmJmZDBmOTJkMzRhMzkxNzJiNDEyY2ZiZTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T21:45:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-23T21:45:29Z"}, "message": "Auto merge of #27962 - dotdash:overflow, r=alexcrichton\n\nWe're currently possibly introducing an unneeded temporary, make use of\r\nInsertValue which is said to kick us off of FastISel and we generate\r\nloads/stores of first class aggregates, which is bad as well. Let's not\r\ndo all these things.", "tree": {"sha": "26e147bd1d478de08a83408e1bf472a3b2e43027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26e147bd1d478de08a83408e1bf472a3b2e43027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "html_url": "https://github.com/rust-lang/rust/commit/63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ba780fd7ab506bfd0f92d34a39172b412cfbe1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e71bda2424c9fabee6db817d7b8365694e59897", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e71bda2424c9fabee6db817d7b8365694e59897", "html_url": "https://github.com/rust-lang/rust/commit/0e71bda2424c9fabee6db817d7b8365694e59897"}, {"sha": "274dae9a4ce210c95a11eaf98eed12eccac3913a", "url": "https://api.github.com/repos/rust-lang/rust/commits/274dae9a4ce210c95a11eaf98eed12eccac3913a", "html_url": "https://github.com/rust-lang/rust/commit/274dae9a4ce210c95a11eaf98eed12eccac3913a"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "3b6ce32e0b9c55c558801597e148a76189921f5d", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 29, "deletions": 35, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/63ba780fd7ab506bfd0f92d34a39172b412cfbe1/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ba780fd7ab506bfd0f92d34a39172b412cfbe1/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=63ba780fd7ab506bfd0f92d34a39172b412cfbe1", "patch": "@@ -616,171 +616,171 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         (_, \"i8_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.sadd.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i16_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.sadd.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i32_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.sadd.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i64_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.sadd.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n \n         (_, \"u8_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.uadd.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u16_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.uadd.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u32_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.uadd.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u64_add_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.uadd.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i8_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.ssub.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i16_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.ssub.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i32_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.ssub.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i64_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.ssub.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u8_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.usub.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u16_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.usub.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u32_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.usub.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u64_sub_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.usub.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i8_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.smul.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i16_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.smul.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i32_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.smul.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"i64_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.smul.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u8_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.umul.with.overflow.i8\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u16_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.umul.with.overflow.i16\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u32_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.umul.with.overflow.i32\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n         (_, \"u64_mul_with_overflow\") =>\n             with_overflow_intrinsic(bcx,\n                                     \"llvm.umul.with.overflow.i64\",\n-                                    ret_ty,\n                                     llargs[0],\n                                     llargs[1],\n+                                    llresult,\n                                     call_debug_location),\n \n         (_, \"unchecked_udiv\") => UDiv(bcx, llargs[0], llargs[1], call_debug_location),\n@@ -1053,9 +1053,9 @@ fn count_zeros_intrinsic(bcx: Block,\n \n fn with_overflow_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                        name: &'static str,\n-                                       t: Ty<'tcx>,\n                                        a: ValueRef,\n                                        b: ValueRef,\n+                                       out: ValueRef,\n                                        call_debug_location: DebugLoc)\n                                        -> ValueRef {\n     let llfn = bcx.ccx().get_intrinsic(&name);\n@@ -1064,16 +1064,10 @@ fn with_overflow_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n     let val = Call(bcx, llfn, &[a, b], None, call_debug_location);\n     let result = ExtractValue(bcx, val, 0);\n     let overflow = ZExt(bcx, ExtractValue(bcx, val, 1), Type::bool(bcx.ccx()));\n-    let ret = C_undef(type_of::type_of(bcx.ccx(), t));\n-    let ret = InsertValue(bcx, ret, result, 0);\n-    let ret = InsertValue(bcx, ret, overflow, 1);\n-    if !arg_is_indirect(bcx.ccx(), t) {\n-        let tmp = alloc_ty(bcx, t, \"tmp\");\n-        Store(bcx, ret, tmp);\n-        load_ty(bcx, tmp, t)\n-    } else {\n-        ret\n-    }\n+    Store(bcx, result, StructGEP(bcx, out, 0));\n+    Store(bcx, overflow, StructGEP(bcx, out, 1));\n+\n+    C_nil(bcx.ccx())\n }\n \n fn try_intrinsic<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,"}]}