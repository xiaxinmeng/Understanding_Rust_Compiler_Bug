{"sha": "ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMGJkNDJhNGE4MDFlMjUzOGU4ZDhlOTkyYzNiNzI5N2RkZDUxNGQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-13T03:21:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-13T03:21:31Z"}, "message": "Rollup merge of #67250 - nnethercote:rm-DelimSpan-from-NamedMatch-MatchedSeq, r=Centril\n\nRemove the `DelimSpan` from `NamedMatch::MatchedSeq`.\n\nBecause it's unused. This then allows the removal of\n`MatcherPos::sp_open`. It's a tiny perf win, reducing instruction counts\nby 0.1% - 0.2% on a few benchmarks.\n\nr? @Centril", "tree": {"sha": "11300355269ecd1ce4a08b08389d9d57a1454fd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11300355269ecd1ce4a08b08389d9d57a1454fd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd8wO7CRBK7hj4Ov3rIwAAdHIIAA5ERr65MoikWwnTcYNlq2Gc\nwjjoaGHc21V0xgtOt4dq2LwjOHByeztw5LWBY7tnBs95bawVn/q0xU2fewHH/G+/\nNC7sWKsfC6A6SVpbABx5KLxmL7tXyVjgiByQi4k/tnNcXCl6Q9Vl8yQjuqGnHqky\nc24A6ZDuKTip9E8jCU965l4dsiEfHnUlbHek8/9eq4W+795UU5L156p1KLa+kvrK\nGifz3VMdoXirnSB11m5mGf4ltrBwFjPS39XGei5gCQms+k5fadXOGYTaur7CSZfQ\nQ4jf5sUvpVrL4Me13u0XCfUHTdDapgFFgGkmLbJAJZS4TiFlV7IHsxjlnO8XsCA=\n=v8Ka\n-----END PGP SIGNATURE-----\n", "payload": "tree 11300355269ecd1ce4a08b08389d9d57a1454fd4\nparent 98df677c3f13ab7dadde39e3eaf837766af3a7a2\nparent ffd214299ebfce5b2d4719c3ec762c2ce1574515\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576207291 +0100\ncommitter GitHub <noreply@github.com> 1576207291 +0100\n\nRollup merge of #67250 - nnethercote:rm-DelimSpan-from-NamedMatch-MatchedSeq, r=Centril\n\nRemove the `DelimSpan` from `NamedMatch::MatchedSeq`.\n\nBecause it's unused. This then allows the removal of\n`MatcherPos::sp_open`. It's a tiny perf win, reducing instruction counts\nby 0.1% - 0.2% on a few benchmarks.\n\nr? @Centril\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "html_url": "https://github.com/rust-lang/rust/commit/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98df677c3f13ab7dadde39e3eaf837766af3a7a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/98df677c3f13ab7dadde39e3eaf837766af3a7a2", "html_url": "https://github.com/rust-lang/rust/commit/98df677c3f13ab7dadde39e3eaf837766af3a7a2"}, {"sha": "ffd214299ebfce5b2d4719c3ec762c2ce1574515", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffd214299ebfce5b2d4719c3ec762c2ce1574515", "html_url": "https://github.com/rust-lang/rust/commit/ffd214299ebfce5b2d4719c3ec762c2ce1574515"}], "stats": {"total": 31, "additions": 11, "deletions": 20}, "files": [{"sha": "1e2f3f9d1e53e7dc7935e52927faf60ddee4ef74", "filename": "src/libsyntax_expand/mbe/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_parser.rs?ref=ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "patch": "@@ -83,7 +83,7 @@ use syntax::print::pprust;\n use syntax::sess::ParseSess;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::token::{self, DocComment, Nonterminal, Token};\n-use syntax::tokenstream::{DelimSpan, TokenStream};\n+use syntax::tokenstream::TokenStream;\n \n use errors::{PResult, FatalError};\n use smallvec::{smallvec, SmallVec};\n@@ -164,11 +164,6 @@ struct MatcherPos<'root, 'tt> {\n     /// The position of the \"dot\" in this matcher\n     idx: usize,\n \n-    /// The first span of source that the beginning of this matcher corresponds to. In other\n-    /// words, the token in the source whose span is `sp_open` is matched against the first token of\n-    /// the matcher.\n-    sp_open: Span,\n-\n     /// For each named metavar in the matcher, we keep track of token trees matched against the\n     /// metavar by the black box parser. In particular, there may be more than one match per\n     /// metavar if we are in a repetition (each repetition matches each of the variables).\n@@ -307,17 +302,15 @@ fn create_matches(len: usize) -> Box<[Lrc<NamedMatchVec>]> {\n }\n \n /// Generates the top-level matcher position in which the \"dot\" is before the first token of the\n-/// matcher `ms` and we are going to start matching at the span `open` in the source.\n-fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree], open: Span) -> MatcherPos<'root, 'tt> {\n+/// matcher `ms`.\n+fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree]) -> MatcherPos<'root, 'tt> {\n     let match_idx_hi = count_names(ms);\n     let matches = create_matches(match_idx_hi);\n     MatcherPos {\n         // Start with the top level matcher given to us\n         top_elts: TtSeq(ms), // \"elts\" is an abbr. for \"elements\"\n         // The \"dot\" is before the first token of the matcher\n         idx: 0,\n-        // We start matching at the span `open` in the source code\n-        sp_open: open,\n \n         // Initialize `matches` to a bunch of empty `Vec`s -- one for each metavar in `top_elts`.\n         // `match_lo` for `top_elts` is 0 and `match_hi` is `matches.len()`. `match_cur` is 0 since\n@@ -355,7 +348,7 @@ fn initial_matcher_pos<'root, 'tt>(ms: &'tt [TokenTree], open: Span) -> MatcherP\n /// token tree it was derived from.\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n-    MatchedSeq(Lrc<NamedMatchVec>, DelimSpan),\n+    MatchedSeq(Lrc<NamedMatchVec>),\n     MatchedNonterminal(Lrc<Nonterminal>),\n }\n \n@@ -497,8 +490,7 @@ fn inner_parse_loop<'root, 'tt>(\n                     // Add matches from this repetition to the `matches` of `up`\n                     for idx in item.match_lo..item.match_hi {\n                         let sub = item.matches[idx].clone();\n-                        let span = DelimSpan::from_pair(item.sp_open, token.span);\n-                        new_pos.push_match(idx, MatchedSeq(sub, span));\n+                        new_pos.push_match(idx, MatchedSeq(sub));\n                     }\n \n                     // Move the \"dot\" past the repetition in `up`\n@@ -552,7 +544,7 @@ fn inner_parse_loop<'root, 'tt>(\n                         new_item.match_cur += seq.num_captures;\n                         new_item.idx += 1;\n                         for idx in item.match_cur..item.match_cur + seq.num_captures {\n-                            new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![]), sp));\n+                            new_item.push_match(idx, MatchedSeq(Lrc::new(smallvec![])));\n                         }\n                         cur_items.push(new_item);\n                     }\n@@ -568,7 +560,6 @@ fn inner_parse_loop<'root, 'tt>(\n                         match_cur: item.match_cur,\n                         match_hi: item.match_cur + seq.num_captures,\n                         up: Some(item),\n-                        sp_open: sp.open,\n                         top_elts: Tt(TokenTree::Sequence(sp, seq)),\n                     })));\n                 }\n@@ -663,7 +654,7 @@ pub(super) fn parse(\n     //\n     // This MatcherPos instance is allocated on the stack. All others -- and\n     // there are frequently *no* others! -- are allocated on the heap.\n-    let mut initial = initial_matcher_pos(ms, parser.token.span);\n+    let mut initial = initial_matcher_pos(ms);\n     let mut cur_items = smallvec![MatcherPosHandle::Ref(&mut initial)];\n     let mut next_items = Vec::new();\n "}, {"sha": "2dd15872a9f0a002c5cedb0d67b02656dfa42d14", "filename": "src/libsyntax_expand/mbe/macro_rules.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Fmacro_rules.rs?ref=ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "patch": "@@ -379,7 +379,7 @@ pub fn compile_declarative_macro(\n \n     // Extract the arguments:\n     let lhses = match argument_map[&lhs_nm] {\n-        MatchedSeq(ref s, _) => s\n+        MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n                 if let MatchedNonterminal(ref nt) = *m {\n@@ -402,7 +402,7 @@ pub fn compile_declarative_macro(\n     };\n \n     let rhses = match argument_map[&rhs_nm] {\n-        MatchedSeq(ref s, _) => s\n+        MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n                 if let MatchedNonterminal(ref nt) = *m {"}, {"sha": "0605f7ff36df711d1111d7d92a3b9b17b4304c5d", "filename": "src/libsyntax_expand/mbe/transcribe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac0bd42a4a801e2538e8d8e992c3b7297ddd514d/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_expand%2Fmbe%2Ftranscribe.rs?ref=ac0bd42a4a801e2538e8d8e992c3b7297ddd514d", "patch": "@@ -299,7 +299,7 @@ fn lookup_cur_matched<'a>(\n         for &(idx, _) in repeats {\n             match matched {\n                 MatchedNonterminal(_) => break,\n-                MatchedSeq(ref ads, _) => matched = ads.get(idx).unwrap(),\n+                MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),\n             }\n         }\n \n@@ -382,7 +382,7 @@ fn lockstep_iter_size(\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(matched) => match matched {\n                     MatchedNonterminal(_) => LockstepIterSize::Unconstrained,\n-                    MatchedSeq(ref ads, _) => LockstepIterSize::Constraint(ads.len(), name),\n+                    MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),\n                 },\n                 _ => LockstepIterSize::Unconstrained,\n             }"}]}