{"sha": "79ac73a3fc7364409ae261db024f535c10ebc9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YWM3M2EzZmM3MzY0NDA5YWUyNjFkYjAyNGY1MzVjMTBlYmM5YTc=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-19T11:53:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-19T11:53:43Z"}, "message": "Rollup merge of #72068 - estebank:mut-deref-hack, r=oli-obk\n\nIgnore arguments when looking for `IndexMut` for subsequent `mut` obligation\n\nGiven code like `v[&field].boo();` where `field: String` and\n`.boo(&mut self)`, typeck will have decided that `v` is accessed using\n`Index`, but when `boo` adds a new `mut` obligation,\n`convert_place_op_to_mutable` is called. When this happens, for *some\nreason* the arguments' dereference adjustments are completely ignored\ncausing an error saying that `IndexMut` is not satisfied:\n\n```\nerror[E0596]: cannot borrow data in an index of `Indexable` as mutable\n  --> src/main.rs:30:5\n   |\n30 |     v[&field].boo();\n   |     ^^^^^^^^^ cannot borrow as mutable\n   |\n   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `Indexable`\n```\n\nThis is not true, but by changing `try_overloaded_place_op` to retry\nwhen given `Needs::MutPlace` without passing the argument types, the\nexample successfully compiles.\n\nI believe there might be more appropriate ways to deal with this.\n\nFix #72002.", "tree": {"sha": "9a19da7fafac2b1aea31e9f8954ed232a3cebe9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a19da7fafac2b1aea31e9f8954ed232a3cebe9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79ac73a3fc7364409ae261db024f535c10ebc9a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJew8jHCRBK7hj4Ov3rIwAAdHIIABRhuYqlSQkkkVV0ATXp4u21\n/sNAZQb2RnwZI3QQWIVQDV0eRgF1mrnYQv78BvMy1Vh1evEY04OiH8RDiqJKcXCn\nYx5o4jQDOfK7kEkw+njCfYbvSrZ3+LlgyOJvvgw2u6zzV6kDQwuLgx9hY4PwekZk\nXgHPRLtN38J6UHZ201NEt+RsOhxSfTuTUndXuxQAmYS3vAEj1X5OUvsmtISZchhh\nL+CQ+dWnqzHTM9WXkQ/ycudojH686Ws85DwaT+PYHC9F8ZGibmp81ic+EBfpGWg5\nulI16RXFyZBfIb1FqGxZSnONgokNJeCwRytA8g0z9bcsDTHsESo6PYNDCJ/+gKg=\n=1LWU\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a19da7fafac2b1aea31e9f8954ed232a3cebe9c\nparent 12040cf665b55f10a68818d116265eeea3b082e6\nparent 0dcde02cc7bdd47f48af12e911829390c2864c47\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589889223 +0200\ncommitter GitHub <noreply@github.com> 1589889223 +0200\n\nRollup merge of #72068 - estebank:mut-deref-hack, r=oli-obk\n\nIgnore arguments when looking for `IndexMut` for subsequent `mut` obligation\n\nGiven code like `v[&field].boo();` where `field: String` and\n`.boo(&mut self)`, typeck will have decided that `v` is accessed using\n`Index`, but when `boo` adds a new `mut` obligation,\n`convert_place_op_to_mutable` is called. When this happens, for *some\nreason* the arguments' dereference adjustments are completely ignored\ncausing an error saying that `IndexMut` is not satisfied:\n\n```\nerror[E0596]: cannot borrow data in an index of `Indexable` as mutable\n  --> src/main.rs:30:5\n   |\n30 |     v[&field].boo();\n   |     ^^^^^^^^^ cannot borrow as mutable\n   |\n   = help: trait `IndexMut` is required to modify indexed content, but it is not implemented for `Indexable`\n```\n\nThis is not true, but by changing `try_overloaded_place_op` to retry\nwhen given `Needs::MutPlace` without passing the argument types, the\nexample successfully compiles.\n\nI believe there might be more appropriate ways to deal with this.\n\nFix #72002.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79ac73a3fc7364409ae261db024f535c10ebc9a7", "html_url": "https://github.com/rust-lang/rust/commit/79ac73a3fc7364409ae261db024f535c10ebc9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79ac73a3fc7364409ae261db024f535c10ebc9a7/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12040cf665b55f10a68818d116265eeea3b082e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/12040cf665b55f10a68818d116265eeea3b082e6", "html_url": "https://github.com/rust-lang/rust/commit/12040cf665b55f10a68818d116265eeea3b082e6"}, {"sha": "0dcde02cc7bdd47f48af12e911829390c2864c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/0dcde02cc7bdd47f48af12e911829390c2864c47", "html_url": "https://github.com/rust-lang/rust/commit/0dcde02cc7bdd47f48af12e911829390c2864c47"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "c4805c54a7d43e80b6bad522a345446f4c6f0b5b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79ac73a3fc7364409ae261db024f535c10ebc9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ac73a3fc7364409ae261db024f535c10ebc9a7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=79ac73a3fc7364409ae261db024f535c10ebc9a7", "patch": "@@ -468,7 +468,9 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n \n             match expr.kind {\n                 hir::ExprKind::Index(ref base_expr, ref index_expr) => {\n-                    let index_expr_ty = self.node_ty(index_expr.hir_id);\n+                    // We need to get the final type in case dereferences were needed for the trait\n+                    // to apply (#72002).\n+                    let index_expr_ty = self.tables.borrow().expr_ty_adjusted(index_expr);\n                     self.convert_place_op_to_mutable(\n                         PlaceOp::Index,\n                         expr,"}, {"sha": "54ff89355ff3aeb3b3f25aa3bdcc52f00dd722f6", "filename": "src/test/ui/issues/issue-72002.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79ac73a3fc7364409ae261db024f535c10ebc9a7/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79ac73a3fc7364409ae261db024f535c10ebc9a7/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-72002.rs?ref=79ac73a3fc7364409ae261db024f535c10ebc9a7", "patch": "@@ -0,0 +1,29 @@\n+// check-pass\n+struct Indexable;\n+\n+impl Indexable {\n+    fn boo(&mut self) {}\n+}\n+\n+impl std::ops::Index<&str> for Indexable {\n+    type Output = Indexable;\n+\n+    fn index(&self, field: &str) -> &Indexable {\n+        self\n+    }\n+}\n+\n+impl std::ops::IndexMut<&str> for Indexable {\n+    fn index_mut(&mut self, field: &str) -> &mut Indexable {\n+        self\n+    }\n+}\n+\n+fn main() {\n+    let mut v = Indexable;\n+    let field = \"hello\".to_string();\n+\n+    v[field.as_str()].boo();\n+\n+    v[&field].boo(); // < This should work\n+}"}]}