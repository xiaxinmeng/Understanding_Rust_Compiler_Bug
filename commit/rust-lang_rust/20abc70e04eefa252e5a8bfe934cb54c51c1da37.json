{"sha": "20abc70e04eefa252e5a8bfe934cb54c51c1da37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwYWJjNzBlMDRlZWZhMjUyZTVhOGJmZTkzNGNiNTRjNTFjMWRhMzc=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-03T11:45:56Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2020-06-07T14:22:20Z"}, "message": "Don't intern memory in const prop.\n\nThis isn't sound without validation. We don't want to report errors in case of failure to intern and validate, we just don't want to const prop. Interning and const prop is not built for this, let's not do it until we have a clearer picture on aggregate propagation.", "tree": {"sha": "72e12ad7e8b1d24780e2ec4866dd5730b7d932ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72e12ad7e8b1d24780e2ec4866dd5730b7d932ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20abc70e04eefa252e5a8bfe934cb54c51c1da37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20abc70e04eefa252e5a8bfe934cb54c51c1da37", "html_url": "https://github.com/rust-lang/rust/commit/20abc70e04eefa252e5a8bfe934cb54c51c1da37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20abc70e04eefa252e5a8bfe934cb54c51c1da37/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "html_url": "https://github.com/rust-lang/rust/commit/a2fc33e0c87a258542cd12d6ffae52c43aa3785a"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "4c1cf1b56ae66a2604617adaee75f4d525ecbb7f", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20abc70e04eefa252e5a8bfe934cb54c51c1da37/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20abc70e04eefa252e5a8bfe934cb54c51c1da37/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=20abc70e04eefa252e5a8bfe934cb54c51c1da37", "patch": "@@ -294,7 +294,6 @@ pub enum InternKind {\n     Static(hir::Mutability),\n     Constant,\n     Promoted,\n-    ConstProp,\n }\n \n /// Intern `ret` and everything it references.\n@@ -315,9 +314,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n     let base_intern_mode = match intern_kind {\n         InternKind::Static(mutbl) => InternMode::Static(mutbl),\n         // FIXME: what about array lengths, array initializers?\n-        InternKind::Constant | InternKind::ConstProp | InternKind::Promoted => {\n-            InternMode::ConstBase\n-        }\n+        InternKind::Constant | InternKind::Promoted => InternMode::ConstBase,\n     };\n \n     // Type based interning.\n@@ -359,7 +356,10 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n             Err(error) => {\n                 ecx.tcx.sess.delay_span_bug(\n                     ecx.tcx.span,\n-                    \"error during interning should later cause validation failure\",\n+                    &format!(\n+                        \"error during interning should later cause validation failure: {}\",\n+                        error\n+                    ),\n                 );\n                 // Some errors shouldn't come up because creating them causes\n                 // an allocation, which we should avoid. When that happens,\n@@ -400,7 +400,7 @@ pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx>>(\n                     // immutability is so important.\n                     alloc.mutability = Mutability::Not;\n                 }\n-                InternKind::Constant | InternKind::ConstProp => {\n+                InternKind::Constant => {\n                     // If it's a constant, we should not have any \"leftovers\" as everything\n                     // is tracked by const-checking.\n                     // FIXME: downgrade this to a warning? It rejects some legitimate consts,"}, {"sha": "97e5b8bc047f0be596d4e18f707d1d39e240e14b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20abc70e04eefa252e5a8bfe934cb54c51c1da37/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20abc70e04eefa252e5a8bfe934cb54c51c1da37/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=20abc70e04eefa252e5a8bfe934cb54c51c1da37", "patch": "@@ -27,9 +27,9 @@ use rustc_trait_selection::traits;\n \n use crate::const_eval::error_to_const_error;\n use crate::interpret::{\n-    self, compile_time_machine, intern_const_alloc_recursive, AllocId, Allocation, Frame, ImmTy,\n-    Immediate, InternKind, InterpCx, LocalState, LocalValue, Memory, MemoryKind, OpTy,\n-    Operand as InterpOperand, PlaceTy, Pointer, ScalarMaybeUninit, StackPopCleanup,\n+    self, compile_time_machine, AllocId, Allocation, Frame, ImmTy, Immediate, InterpCx, LocalState,\n+    LocalValue, Memory, MemoryKind, OpTy, Operand as InterpOperand, PlaceTy, Pointer,\n+    ScalarMaybeUninit, StackPopCleanup,\n };\n use crate::transform::{MirPass, MirSource};\n \n@@ -707,11 +707,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 ScalarMaybeUninit::Scalar(l),\n                 ScalarMaybeUninit::Scalar(r),\n             )) => l.is_bits() && r.is_bits(),\n-            interpret::Operand::Indirect(_) if mir_opt_level >= 2 => {\n-                let mplace = op.assert_mem_place(&self.ecx);\n-                intern_const_alloc_recursive(&mut self.ecx, InternKind::ConstProp, mplace, false);\n-                true\n-            }\n+            interpret::Operand::Indirect(_) if mir_opt_level >= 2 => true,\n             _ => false,\n         }\n     }"}]}