{"sha": "4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "node_id": "C_kwDOAAsO6NoAKDQ2NjczNzlmN2ViYWQyNWQ0MzljZGY2ZmYzZTczYWI2Y2U2Y2Y0YjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T11:17:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-14T11:17:18Z"}, "message": "Auto merge of #14575 - Veykril:attrs, r=Veykril\n\ninternal: Put Attrs behind a query instead of AttsWithOwner\n\nWe call this for pretty much every item, so this is unnecessary wasted memory", "tree": {"sha": "4ce1b5b14bac2268bb81d8e79f700b69f542eee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ce1b5b14bac2268bb81d8e79f700b69f542eee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "html_url": "https://github.com/rust-lang/rust/commit/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a331689d1b6be3ece47737838572e6d7371424d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a331689d1b6be3ece47737838572e6d7371424d", "html_url": "https://github.com/rust-lang/rust/commit/1a331689d1b6be3ece47737838572e6d7371424d"}, {"sha": "ed3a5eac3ca320c20deb4922c873b6ff9998b0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3a5eac3ca320c20deb4922c873b6ff9998b0a9", "html_url": "https://github.com/rust-lang/rust/commit/ed3a5eac3ca320c20deb4922c873b6ff9998b0a9"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "6927a017b18929b022b0ecf87b810f34e97a72cf", "filename": "crates/hir-def/src/attr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fattr.rs?ref=4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "patch": "@@ -377,7 +377,11 @@ fn parse_comma_sep<S>(subtree: &tt::Subtree<S>) -> Vec<SmolStr> {\n }\n \n impl AttrsWithOwner {\n-    pub(crate) fn attrs_query(db: &dyn DefDatabase, def: AttrDefId) -> Self {\n+    pub(crate) fn attrs_with_owner(db: &dyn DefDatabase, owner: AttrDefId) -> Self {\n+        Self { attrs: db.attrs(owner), owner }\n+    }\n+\n+    pub(crate) fn attrs_query(db: &dyn DefDatabase, def: AttrDefId) -> Attrs {\n         let _p = profile::span(\"attrs_query\");\n         // FIXME: this should use `Trace` to avoid duplication in `source_map` below\n         let raw_attrs = match def {\n@@ -412,13 +416,10 @@ impl AttrsWithOwner {\n                 }\n             }\n             AttrDefId::FieldId(it) => {\n-                return Self { attrs: db.fields_attrs(it.parent)[it.local_id].clone(), owner: def };\n+                return db.fields_attrs(it.parent)[it.local_id].clone();\n             }\n             AttrDefId::EnumVariantId(it) => {\n-                return Self {\n-                    attrs: db.variants_attrs(it.parent)[it.local_id].clone(),\n-                    owner: def,\n-                };\n+                return db.variants_attrs(it.parent)[it.local_id].clone();\n             }\n             AttrDefId::AdtId(it) => match it {\n                 AdtId::StructId(it) => attrs_from_item_tree(it.lookup(db).id, db),\n@@ -461,7 +462,7 @@ impl AttrsWithOwner {\n         };\n \n         let attrs = raw_attrs.filter(db.upcast(), def.krate(db));\n-        Self { attrs: Attrs(attrs), owner: def }\n+        Attrs(attrs)\n     }\n \n     pub fn source_map(&self, db: &dyn DefDatabase) -> AttrSourceMap {"}, {"sha": "66e8b482eb20b81c28957f4f0e7b6e50d444a5b0", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "patch": "@@ -98,6 +98,8 @@ pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDataba\n     #[salsa::invoke(DefMap::block_def_map_query)]\n     fn block_def_map(&self, block: BlockId) -> Option<Arc<DefMap>>;\n \n+    // region:data\n+\n     #[salsa::invoke(StructData::struct_data_query)]\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;\n \n@@ -153,6 +155,8 @@ pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDataba\n     #[salsa::invoke(ProcMacroData::proc_macro_data_query)]\n     fn proc_macro_data(&self, makro: ProcMacroId) -> Arc<ProcMacroData>;\n \n+    // endregion:data\n+\n     #[salsa::invoke(Body::body_with_source_map_query)]\n     fn body_with_source_map(&self, def: DefWithBodyId) -> (Arc<Body>, Arc<BodySourceMap>);\n \n@@ -165,6 +169,8 @@ pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDataba\n     #[salsa::invoke(GenericParams::generic_params_query)]\n     fn generic_params(&self, def: GenericDefId) -> Interned<GenericParams>;\n \n+    // region:attrs\n+\n     #[salsa::invoke(Attrs::variants_attrs_query)]\n     fn variants_attrs(&self, def: EnumId) -> Arc<ArenaMap<LocalEnumVariantId, Attrs>>;\n \n@@ -184,7 +190,13 @@ pub trait DefDatabase: InternDatabase + ExpandDatabase + Upcast<dyn ExpandDataba\n     ) -> Arc<ArenaMap<LocalFieldId, Either<AstPtr<ast::TupleField>, AstPtr<ast::RecordField>>>>;\n \n     #[salsa::invoke(AttrsWithOwner::attrs_query)]\n-    fn attrs(&self, def: AttrDefId) -> AttrsWithOwner;\n+    fn attrs(&self, def: AttrDefId) -> Attrs;\n+\n+    #[salsa::transparent]\n+    #[salsa::invoke(AttrsWithOwner::attrs_with_owner)]\n+    fn attrs_with_owner(&self, def: AttrDefId) -> AttrsWithOwner;\n+\n+    // endregion:attrs\n \n     #[salsa::invoke(LangItems::crate_lang_items_query)]\n     fn crate_lang_items(&self, krate: CrateId) -> Arc<LangItems>;"}, {"sha": "7a61ca4f4d36077d8bed8fde92f92915b5c7d763", "filename": "crates/hir-expand/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir-expand%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fattrs.rs?ref=4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "patch": "@@ -21,6 +21,7 @@ use crate::{\n /// Syntactical attributes, without filtering of `cfg_attr`s.\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct RawAttrs {\n+    // FIXME: Make this a ThinArc\n     entries: Option<Arc<[Attr]>>,\n }\n "}, {"sha": "d025aa8f5a49c252bff0481aaf271fc920366cec", "filename": "crates/hir/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1/crates%2Fhir%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fattrs.rs?ref=4667379f7ebad25d439cdf6ff3e73ab6ce6cf4b1", "patch": "@@ -41,7 +41,7 @@ macro_rules! impl_has_attrs {\n         impl HasAttrs for $def {\n             fn attrs(self, db: &dyn HirDatabase) -> AttrsWithOwner {\n                 let def = AttrDefId::$def_id(self.into());\n-                db.attrs(def)\n+                db.attrs_with_owner(def)\n             }\n             fn docs(self, db: &dyn HirDatabase) -> Option<Documentation> {\n                 let def = AttrDefId::$def_id(self.into());"}]}