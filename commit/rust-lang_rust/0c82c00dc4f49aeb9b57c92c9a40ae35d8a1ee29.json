{"sha": "0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODJjMDBkYzRmNDlhZWI5YjU3YzkyYzlhNDBhZTM1ZDhhMWVlMjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T18:06:50Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T18:44:05Z"}, "message": "libsyntax: Remove the restricted keyword concept", "tree": {"sha": "f0b2ccdd691ebf73ca2f5e676aaceb058d109463", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b2ccdd691ebf73ca2f5e676aaceb058d109463"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "html_url": "https://github.com/rust-lang/rust/commit/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f8cfb26c7aa38cf066c42ea500a57d48fc828d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f8cfb26c7aa38cf066c42ea500a57d48fc828d", "html_url": "https://github.com/rust-lang/rust/commit/76f8cfb26c7aa38cf066c42ea500a57d48fc828d"}], "stats": {"total": 62, "additions": 4, "deletions": 58}, "files": [{"sha": "4b8bfcda848a68e7d28c829e72cd51636740f1bc", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "patch": "@@ -37,9 +37,6 @@ trait parser_common {\n     fn is_any_keyword(tok: token::token) -> bool;\n     fn eat_keyword(word: ~str) -> bool;\n     fn expect_keyword(word: ~str);\n-    fn is_restricted_keyword(word: ~str) -> bool;\n-    fn check_restricted_keywords();\n-    fn check_restricted_keywords_(w: ~str);\n     fn expect_gt();\n     fn parse_seq_to_before_gt<T: Copy>(sep: Option<token::token>,\n                                        f: fn(parser) -> T) -> ~[T];\n@@ -104,7 +101,6 @@ impl parser: parser_common {\n     }\n \n     fn parse_value_ident() -> ast::ident {\n-        self.check_restricted_keywords();\n         return self.parse_ident();\n     }\n \n@@ -165,26 +161,6 @@ impl parser: parser_common {\n         }\n     }\n \n-    fn is_restricted_keyword(word: ~str) -> bool {\n-        self.restricted_keywords.contains_key_ref(&word)\n-    }\n-\n-    fn check_restricted_keywords() {\n-        match self.token {\n-          token::IDENT(_, false) => {\n-            let w = token_to_str(self.reader, self.token);\n-            self.check_restricted_keywords_(w);\n-          }\n-          _ => ()\n-        }\n-    }\n-\n-    fn check_restricted_keywords_(w: ~str) {\n-        if self.is_restricted_keyword(w) {\n-            self.fatal(~\"found `\" + w + ~\"` in restricted position\");\n-        }\n-    }\n-\n     fn is_strict_keyword(word: ~str) -> bool {\n         self.strict_keywords.contains_key_ref(&word)\n     }"}, {"sha": "06e68a09abedeab79edab6bfe40d142eb3891796", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "patch": "@@ -217,7 +217,6 @@ fn parser(sess: parse_sess, cfg: ast::crate_cfg,\n         restriction: UNRESTRICTED,\n         quote_depth: 0u,\n         keywords: token::keyword_table(),\n-        restricted_keywords: token::restricted_keyword_table(),\n         strict_keywords: token::strict_keyword_table(),\n         reserved_keywords: token::reserved_keyword_table(),\n         obsolete_set: std::map::HashMap(),\n@@ -239,7 +238,6 @@ struct parser {\n     reader: reader,\n     interner: interner<@~str>,\n     keywords: HashMap<~str, ()>,\n-    restricted_keywords: HashMap<~str, ()>,\n     strict_keywords: HashMap<~str, ()>,\n     reserved_keywords: HashMap<~str, ()>,\n     /// The set of seen errors about obsolete syntax. Used to suppress\n@@ -3200,7 +3198,6 @@ impl parser {\n         let ty_params = self.parse_ty_params();\n         // Newtype syntax\n         if self.token == token::EQ {\n-            self.check_restricted_keywords_(*self.id_to_str(id));\n             self.bump();\n             let ty = self.parse_ty(false);\n             self.expect(token::SEMI);"}, {"sha": "c7ecc5ae548786258c605f015ea2e0ee542b4062", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 31, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "patch": "@@ -362,20 +362,17 @@ fn mk_fake_ident_interner() -> ident_interner {\n /**\n  * All the valid words that have meaning in the Rust language.\n  *\n- * Rust keywords are either 'temporary', 'restricted', or 'strict'.  Temporary\n+ * Rust keywords are either 'temporary', 'strict' or 'reserved'.  Temporary\n  * keywords are contextual and may be used as identifiers anywhere.  They are\n- * expected to disappear from the grammar soon.  Restricted keywords may not\n- * appear in positions that might otherwise contain _value identifiers_.\n- * Strict keywords may not appear as identifiers at all.\n+ * expected to disappear from the grammar soon.  Strict keywords may not\n+ * appear as identifiers at all. Reserved keywords are not used anywhere in\n+ * the language and may not appear as identifiers.\n  */\n fn keyword_table() -> HashMap<~str, ()> {\n     let keywords = str_hash();\n     for temporary_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n     }\n-    for restricted_keyword_table().each_key |word| {\n-        keywords.insert(word, ());\n-    }\n     for strict_keyword_table().each_key |word| {\n         keywords.insert(word, ());\n     }\n@@ -397,30 +394,6 @@ fn temporary_keyword_table() -> HashMap<~str, ()> {\n     words\n }\n \n-/**\n- * Keywords that may not appear in any position that might otherwise contain a\n- * _value identifier_. Restricted keywords may still be used as other types of\n- * identifiers.\n- *\n- * Reasons:\n- *\n- * * For some (most?), if used at the start of a line, they will cause the\n- *   line to be interpreted as a specific kind of statement, which would be\n- *   confusing.\n- *\n- * * `true` or `false` as identifiers would always be shadowed by\n- *   the boolean constants\n- */\n-fn restricted_keyword_table() -> HashMap<~str, ()> {\n-    let words = str_hash();\n-    let keys = ~[\n-    ];\n-    for keys.each |word| {\n-        words.insert(word, ());\n-    }\n-    words\n-}\n-\n /// Full keywords. May not appear anywhere else.\n fn strict_keyword_table() -> HashMap<~str, ()> {\n     let words = str_hash();"}]}