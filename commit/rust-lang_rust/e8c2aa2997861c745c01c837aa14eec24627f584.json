{"sha": "e8c2aa2997861c745c01c837aa14eec24627f584", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4YzJhYTI5OTc4NjFjNzQ1YzAxYzgzN2FhMTRlZWMyNDYyN2Y1ODQ=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T01:20:22Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-13T12:03:28Z"}, "message": "Lint about `new` methods not returning `Self`", "tree": {"sha": "6edcf08918b47ed966bd22fa3d0be62a75fcb5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6edcf08918b47ed966bd22fa3d0be62a75fcb5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c2aa2997861c745c01c837aa14eec24627f584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c2aa2997861c745c01c837aa14eec24627f584", "html_url": "https://github.com/rust-lang/rust/commit/e8c2aa2997861c745c01c837aa14eec24627f584", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c2aa2997861c745c01c837aa14eec24627f584/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edc0d19a3f1f32dc16dc307e30dd2637f5a5fb04", "url": "https://api.github.com/repos/rust-lang/rust/commits/edc0d19a3f1f32dc16dc307e30dd2637f5a5fb04", "html_url": "https://github.com/rust-lang/rust/commit/edc0d19a3f1f32dc16dc307e30dd2637f5a5fb04"}], "stats": {"total": 60, "additions": 57, "deletions": 3}, "files": [{"sha": "5a405c6d4caf7f905f4a30ee5fd67b33ff3fee4a", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e8c2aa2997861c745c01c837aa14eec24627f584/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e8c2aa2997861c745c01c837aa14eec24627f584/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e8c2aa2997861c745c01c837aa14eec24627f584", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 120 lints included in this crate:\n+There are 121 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -76,6 +76,7 @@ name\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                     | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                             | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                             | warn    | using `{ ..base }` when there are no missing fields\n+[new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                             | warn    | not returning `Self` in a `new` method\n [no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                         | warn    | statements with no effect\n [non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                         | allow   | using any literal non-ASCII chars in a string literal; suggests using the \\\\u escape instead\n [nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)           | warn    | nonsensical combination of options for opening a file"}, {"sha": "8d29d6ab68aa6822136be7639afe73c692f70542", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e8c2aa2997861c745c01c837aa14eec24627f584/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c2aa2997861c745c01c837aa14eec24627f584/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e8c2aa2997861c745c01c837aa14eec24627f584", "patch": "@@ -234,6 +234,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         methods::CLONE_ON_COPY,\n         methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n+        methods::NEW_RET_NO_SELF,\n         methods::OK_EXPECT,\n         methods::OPTION_MAP_UNWRAP_OR,\n         methods::OPTION_MAP_UNWRAP_OR_ELSE,"}, {"sha": "ed3f61e4a727297720932b7e1b4e84ea70a68e52", "filename": "src/methods.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e8c2aa2997861c745c01c837aa14eec24627f584/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c2aa2997861c745c01c837aa14eec24627f584/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=e8c2aa2997861c745c01c837aa14eec24627f584", "patch": "@@ -278,6 +278,23 @@ declare_lint! {\n     pub CLONE_DOUBLE_REF, Warn, \"using `clone` on `&&T`\"\n }\n \n+/// **What it does:** This lint warns about `new` not returning `Self`.\n+///\n+/// **Why is this bad?** As a convention, `new` methods are used to make a new instance of a type.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// impl Foo {\n+///     fn new(..) -> NotAFoo {\n+///     }\n+/// }\n+/// ```\n+declare_lint! {\n+    pub NEW_RET_NO_SELF, Warn, \"not returning `Self` in a `new` method\"\n+}\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXTEND_FROM_SLICE,\n@@ -294,7 +311,8 @@ impl LintPass for MethodsPass {\n                     OR_FUN_CALL,\n                     CHARS_NEXT_CMP,\n                     CLONE_ON_COPY,\n-                    CLONE_DOUBLE_REF)\n+                    CLONE_DOUBLE_REF,\n+                    NEW_RET_NO_SELF)\n     }\n }\n \n@@ -390,6 +408,29 @@ impl LateLintPass for MethodsPass {\n                                                           .join(\" or \")));\n                         }\n                     }\n+\n+                    if &name.as_str() == &\"new\" {\n+                        let returns_self = if let FunctionRetTy::Return(ref ret_ty) = sig.decl.output {\n+                            let ast_ty_to_ty_cache = cx.tcx.ast_ty_to_ty_cache.borrow();\n+                            let ty = ast_ty_to_ty_cache.get(&ty.id);\n+                            let ret_ty = ast_ty_to_ty_cache.get(&ret_ty.id);\n+\n+                            match (ty, ret_ty) {\n+                                (Some(&ty), Some(&ret_ty)) => ret_ty.walk().any(|t| t == ty),\n+                                _ => false,\n+                            }\n+                        }\n+                        else {\n+                            false\n+                        };\n+\n+                        if !returns_self {\n+                            span_lint(cx,\n+                                      NEW_RET_NO_SELF,\n+                                      sig.explicit_self.span,\n+                                      \"methods called `new` usually return `Self`\");\n+                        }\n+                    }\n                 }\n             }\n         }"}, {"sha": "afe056e3d05fabe01472fae36e2b3acfb812462b", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e8c2aa2997861c745c01c837aa14eec24627f584/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c2aa2997861c745c01c837aa14eec24627f584/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=e8c2aa2997861c745c01c837aa14eec24627f584", "patch": "@@ -23,16 +23,27 @@ impl T {\n \n     fn to_something(self) -> u32 { 0 } //~ERROR methods called `to_*` usually take self by reference\n \n-    fn new(self) {} //~ERROR methods called `new` usually take no self\n+    fn new(self) {}\n+    //~^ ERROR methods called `new` usually take no self\n+    //~| ERROR methods called `new` usually return `Self`\n }\n \n #[derive(Clone,Copy)]\n struct U;\n \n impl U {\n+    fn new() -> Self { U }\n     fn to_something(self) -> u32 { 0 } // ok because U is Copy\n }\n \n+struct V<T> {\n+    _dummy: T\n+}\n+\n+impl<T> V<T> {\n+    fn new() -> Option<V<T>> { None }\n+}\n+\n impl Mul<T> for T {\n     type Output = T;\n     fn mul(self, other: T) -> T { self } // no error, obviously"}]}