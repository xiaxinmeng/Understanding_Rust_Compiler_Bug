{"sha": "94241e7eaf45f681d3629286c810bb3050c6114c", "node_id": "C_kwDOAAsO6NoAKDk0MjQxZTdlYWY0NWY2ODFkMzYyOTI4NmM4MTBiYjMwNTBjNjExNGM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-01T08:42:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-01T08:42:25Z"}, "message": "Rollup merge of #103584 - ouz-a:issue-102303, r=oli-obk\n\nRemove bounds check when array is indexed by enum\n\nAs the title says, this reverts the behavior introduced with 1.64.\n\nFixes #102303\n\nr? `@oli-obk`", "tree": {"sha": "a7f6805e6e3fdebe975a4c012177947abb035b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7f6805e6e3fdebe975a4c012177947abb035b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94241e7eaf45f681d3629286c810bb3050c6114c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYNvxCRBK7hj4Ov3rIwAAuGMIAFamWmCgevPcPK0rcEx6HKr1\n5ssDA945AarskOCXU1DSbnWQRe5hULR/SlsU0Xd6eYInXiJBZIguDvmzJa6YADPy\n8rZ6jaP9nUVLNgvRrJMLi3tx1CSiM1KT3lal79Zo4vWzOsg9uiSdeksQ2QtEIO6g\nXmz72lRV5J4bhgjYwxCM47NJq57xYvMDSun7irHhm4A1c5Ta88ro1uS8RjhMBXLp\n4DGx4xo7CvL2ZFXD6BYQS/jMnuiEJ+W1SwWmzLFDGEY/6dGDBCO2H9rMuebOAZTb\n3J2KXBkai7EtSqN03g5TUthKBTQLW8s0pyY9TAOqwDGHivHXk29/Ownf3RZXGCM=\n=3vFj\n-----END PGP SIGNATURE-----\n", "payload": "tree a7f6805e6e3fdebe975a4c012177947abb035b73\nparent 43634675f63c3d3cdf8234e2ec264e7327aa6b39\nparent a1672ad5b82755b94c0a72038f50b4ba8c25fe81\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667292145 +0530\ncommitter GitHub <noreply@github.com> 1667292145 +0530\n\nRollup merge of #103584 - ouz-a:issue-102303, r=oli-obk\n\nRemove bounds check when array is indexed by enum\n\nAs the title says, this reverts the behavior introduced with 1.64.\n\nFixes #102303\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94241e7eaf45f681d3629286c810bb3050c6114c", "html_url": "https://github.com/rust-lang/rust/commit/94241e7eaf45f681d3629286c810bb3050c6114c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94241e7eaf45f681d3629286c810bb3050c6114c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43634675f63c3d3cdf8234e2ec264e7327aa6b39", "url": "https://api.github.com/repos/rust-lang/rust/commits/43634675f63c3d3cdf8234e2ec264e7327aa6b39", "html_url": "https://github.com/rust-lang/rust/commit/43634675f63c3d3cdf8234e2ec264e7327aa6b39"}, {"sha": "a1672ad5b82755b94c0a72038f50b4ba8c25fe81", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1672ad5b82755b94c0a72038f50b4ba8c25fe81", "html_url": "https://github.com/rust-lang/rust/commit/a1672ad5b82755b94c0a72038f50b4ba8c25fe81"}], "stats": {"total": 139, "additions": 120, "deletions": 19}, "files": [{"sha": "5c82fb1ddc0d5a49beaf8dbce6635556517e32d4", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -2,6 +2,7 @@\n \n use rustc_index::vec::Idx;\n use rustc_middle::ty::util::IntTypeExt;\n+use rustc_target::abi::{Abi, Primitive};\n \n use crate::build::expr::as_place::PlaceBase;\n use crate::build::expr::category::{Category, RvalueFunc};\n@@ -198,15 +199,63 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let (source, ty) = if let ty::Adt(adt_def, ..) = source.ty.kind() && adt_def.is_enum() {\n                     let discr_ty = adt_def.repr().discr_type().to_ty(this.tcx);\n                     let temp = unpack!(block = this.as_temp(block, scope, source, Mutability::Not));\n+                    let layout = this.tcx.layout_of(this.param_env.and(source.ty));\n                     let discr = this.temp(discr_ty, source.span);\n                     this.cfg.push_assign(\n                         block,\n                         source_info,\n                         discr,\n                         Rvalue::Discriminant(temp.into()),\n                     );\n+                    let (op,ty) = (Operand::Move(discr), discr_ty);\n+\n+                    if let Abi::Scalar(scalar) = layout.unwrap().abi{\n+                        if let Primitive::Int(_, signed) = scalar.primitive() {\n+                            let range = scalar.valid_range(&this.tcx);\n+                            // FIXME: Handle wraparound cases too.\n+                            if range.end >= range.start {\n+                                let mut assumer = |range: u128, bin_op: BinOp| {\n+                                    // We will be overwriting this val if our scalar is signed value\n+                                    // because sign extension on unsigned types might cause unintended things\n+                                    let mut range_val =\n+                                        ConstantKind::from_bits(this.tcx, range, ty::ParamEnv::empty().and(discr_ty));\n+                                    let bool_ty = this.tcx.types.bool;\n+                                    if signed {\n+                                        let scalar_size_extend = scalar.size(&this.tcx).sign_extend(range);\n+                                        let discr_layout = this.tcx.layout_of(this.param_env.and(discr_ty));\n+                                        let truncated_val = discr_layout.unwrap().size.truncate(scalar_size_extend);\n+                                        range_val = ConstantKind::from_bits(\n+                                            this.tcx,\n+                                            truncated_val,\n+                                            ty::ParamEnv::empty().and(discr_ty),\n+                                        );\n+                                    }\n+                                    let lit_op = this.literal_operand(expr.span, range_val);\n+                                    let is_bin_op = this.temp(bool_ty, expr_span);\n+                                    this.cfg.push_assign(\n+                                        block,\n+                                        source_info,\n+                                        is_bin_op,\n+                                        Rvalue::BinaryOp(bin_op, Box::new(((lit_op), (Operand::Copy(discr))))),\n+                                    );\n+                                    this.cfg.push(\n+                                        block,\n+                                        Statement {\n+                                            source_info,\n+                                            kind: StatementKind::Intrinsic(Box::new(NonDivergingIntrinsic::Assume(\n+                                                Operand::Copy(is_bin_op),\n+                                            ))),\n+                                        },\n+                                    )\n+                                };\n+                                assumer(range.end, BinOp::Ge);\n+                                assumer(range.start, BinOp::Le);\n+                            }\n+                        }\n+                    }\n+\n+                    (op,ty)\n \n-                    (Operand::Move(discr), discr_ty)\n                 } else {\n                     let ty = source.ty;\n                     let source = unpack!("}, {"sha": "959fcf8d89e86bf3dfcfbd6c06784f3462eda65f", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -101,12 +101,10 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | StatementKind::Retag { .. }\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n+            | StatementKind::Intrinsic(..)\n             | StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }\n-\n-            // Move to above list once mir construction uses it.\n-            StatementKind::Intrinsic(..) => unreachable!(),\n         }\n         self.super_statement(statement, location);\n     }"}, {"sha": "aa66c2ed08edb777fc24e53c76b870c99b93026d", "filename": "src/test/codegen/enum-bounds-check-derived-idx.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-derived-idx.rs?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -12,15 +12,13 @@ pub enum Bar {\n // CHECK-LABEL: @lookup_inc\n #[no_mangle]\n pub fn lookup_inc(buf: &[u8; 5], f: Bar) -> u8 {\n-    // FIXME: panic check can be removed by adding the assumes back after https://github.com/rust-lang/rust/pull/98332\n-    // CHECK: panic_bounds_check\n+    // CHECK-NOT: panic_bounds_check\n     buf[f as usize + 1]\n }\n \n // CHECK-LABEL: @lookup_dec\n #[no_mangle]\n pub fn lookup_dec(buf: &[u8; 5], f: Bar) -> u8 {\n-    // FIXME: panic check can be removed by adding the assumes back after https://github.com/rust-lang/rust/pull/98332\n-    // CHECK: panic_bounds_check\n+    // CHECK-NOT: panic_bounds_check\n     buf[f as usize - 1]\n }"}, {"sha": "b26945bc54940642ee5fc04aa5600bd13a8f87b4", "filename": "src/test/codegen/enum-bounds-check-issue-13926.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check-issue-13926.rs?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -13,7 +13,6 @@ pub enum Exception {\n // CHECK-LABEL: @access\n #[no_mangle]\n pub fn access(array: &[usize; 12], exc: Exception) -> usize {\n-    // FIXME: panic check can be removed by adding the assumes back after https://github.com/rust-lang/rust/pull/98332\n-    // CHECK: panic_bounds_check\n+    // CHECK-NOT: panic_bounds_check\n     array[(exc as u8 - 4) as usize]\n }"}, {"sha": "17322d5911b9228ab1e66f35e4800d16f5b48613", "filename": "src/test/codegen/enum-bounds-check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fenum-bounds-check.rs?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -21,7 +21,6 @@ pub enum Bar {\n // CHECK-LABEL: @lookup_unmodified\n #[no_mangle]\n pub fn lookup_unmodified(buf: &[u8; 5], f: Bar) -> u8 {\n-    // FIXME: panic check can be removed by adding the assumes back after https://github.com/rust-lang/rust/pull/98332\n-    // CHECK: panic_bounds_check\n+    // CHECK-NOT: panic_bounds_check\n     buf[f as usize]\n }"}, {"sha": "0746e0b498e9543263639416c06d2dbf3c4c1f50", "filename": "src/test/mir-opt/building/enum_cast.bar.built.after.mir", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.bar.built.after.mir?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -5,11 +5,17 @@ fn bar(_1: Bar) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n     let _2: Bar;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n     let mut _3: isize;                   // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _4: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _4 = Ge(const 1_isize, _3);      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(_4);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _5 = Le(const 0_isize, _3);      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(_5);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2"}, {"sha": "699c876b01ac833c39455f3f367cd1dd1d997bfd", "filename": "src/test/mir-opt/building/enum_cast.boo.built.after.mir", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.boo.built.after.mir?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -5,11 +5,17 @@ fn boo(_1: Boo) -> usize {\n     let mut _0: usize;                   // return place in scope 0 at $DIR/enum_cast.rs:+0:21: +0:26\n     let _2: Boo;                         // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n     let mut _3: u8;                      // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n+    let mut _4: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+    let mut _5: bool;                    // in scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _2 = move _1;                    // scope 0 at $DIR/enum_cast.rs:+1:5: +1:8\n         _3 = discriminant(_2);           // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _4 = Ge(const 1_u8, _3);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(_4);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        _5 = Le(const 0_u8, _3);         // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n+        assume(_5);                      // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         _0 = move _3 as usize (IntToInt); // scope 0 at $DIR/enum_cast.rs:+1:5: +1:17\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+1:16: +1:17\n         return;                          // scope 0 at $DIR/enum_cast.rs:+2:2: +2:2"}, {"sha": "5231c2eab9574b9072da16bd250c1f75e2ed9ac4", "filename": "src/test/mir-opt/building/enum_cast.droppy.built.after.mir", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fbuilding%2Fenum_cast.droppy.built.after.mir?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -6,7 +6,9 @@ fn droppy() -> () {\n     let _2: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+2:13: +2:14\n     let _4: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n     let mut _5: isize;                   // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:18\n-    let _6: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+    let mut _6: bool;                    // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n+    let mut _7: bool;                    // in scope 0 at $DIR/enum_cast.rs:+5:17: +5:27\n+    let _8: Droppy;                      // in scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n     scope 1 {\n         debug x => _2;                   // in scope 1 at $DIR/enum_cast.rs:+2:13: +2:14\n         scope 2 {\n@@ -17,7 +19,7 @@ fn droppy() -> () {\n         }\n     }\n     scope 4 {\n-        debug z => _6;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n+        debug z => _8;                   // in scope 4 at $DIR/enum_cast.rs:+7:9: +7:10\n     }\n \n     bb0: {\n@@ -29,6 +31,10 @@ fn droppy() -> () {\n         StorageLive(_4);                 // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n         _4 = move _2;                    // scope 3 at $DIR/enum_cast.rs:+5:17: +5:18\n         _5 = discriminant(_4);           // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _6 = Ge(const 2_isize, _5);      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        assume(_6);                      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        _7 = Le(const 0_isize, _5);      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n+        assume(_7);                      // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         _3 = move _5 as usize (IntToInt); // scope 3 at $DIR/enum_cast.rs:+5:17: +5:27\n         drop(_4) -> [return: bb1, unwind: bb4]; // scope 3 at $DIR/enum_cast.rs:+5:26: +5:27\n     }\n@@ -44,15 +50,15 @@ fn droppy() -> () {\n     bb2: {\n         StorageDead(_2);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n         StorageDead(_1);                 // scope 0 at $DIR/enum_cast.rs:+6:5: +6:6\n-        StorageLive(_6);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n-        _6 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n-        FakeRead(ForLet(None), _6);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        StorageLive(_8);                 // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n+        _8 = Droppy::B;                  // scope 0 at $DIR/enum_cast.rs:+7:13: +7:22\n+        FakeRead(ForLet(None), _8);      // scope 0 at $DIR/enum_cast.rs:+7:9: +7:10\n         _0 = const ();                   // scope 0 at $DIR/enum_cast.rs:+0:13: +8:2\n-        drop(_6) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        drop(_8) -> [return: bb3, unwind: bb5]; // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n     }\n \n     bb3: {\n-        StorageDead(_6);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n+        StorageDead(_8);                 // scope 0 at $DIR/enum_cast.rs:+8:1: +8:2\n         return;                          // scope 0 at $DIR/enum_cast.rs:+8:2: +8:2\n     }\n "}, {"sha": "576fc6a4f8d51c8f03f277b32767ec45f684c947", "filename": "src/test/ui/type-alias-enum-variants/self-in-enum-definition.stderr", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94241e7eaf45f681d3629286c810bb3050c6114c/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fself-in-enum-definition.stderr?ref=94241e7eaf45f681d3629286c810bb3050c6114c", "patch": "@@ -12,6 +12,46 @@ LL |     V3 = Self::V1 {} as u8 + 2,\n note: ...which requires const-evaluating + checking `Alpha::V3::{constant#0}`...\n   --> $DIR/self-in-enum-definition.rs:5:10\n    |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires caching mir of `Alpha::V3::{constant#0}` for CTFE...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires elaborating drops for `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires borrow-checking `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires processing MIR for `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires const checking `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires preparing `Alpha::V3::{constant#0}` for borrow checking...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires unsafety-checking `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n+LL |     V3 = Self::V1 {} as u8 + 2,\n+   |          ^^^^^^^^^^^^^^^^^^^^^\n+note: ...which requires building MIR for `Alpha::V3::{constant#0}`...\n+  --> $DIR/self-in-enum-definition.rs:5:10\n+   |\n LL |     V3 = Self::V1 {} as u8 + 2,\n    |          ^^^^^^^^^^^^^^^^^^^^^\n    = note: ...which requires computing layout of `Alpha`..."}]}