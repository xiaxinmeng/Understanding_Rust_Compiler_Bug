{"sha": "4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5MzUzNDNmNmVjMDFkZmFmZGMxMTVmYWQ1ZGQzNmQzYTllZDFiN2Q=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2016-09-30T22:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2016-10-03T20:16:13Z"}, "message": "Check for overflow in Cursor<Vec<u8>>::write.\n\nEnsure that cursor position fits into usize, before proceeding with\nwrite. Fixes issue #36884.", "tree": {"sha": "66297d369968c0892a4adf073beec14d492f6b58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66297d369968c0892a4adf073beec14d492f6b58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "html_url": "https://github.com/rust-lang/rust/commit/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5045d4e39621b265eca947277f07e23f62608ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5045d4e39621b265eca947277f07e23f62608ad0", "html_url": "https://github.com/rust-lang/rust/commit/5045d4e39621b265eca947277f07e23f62608ad0"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "ae0085f1044e4bb683e37e49a67592d539013765", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=4935343f6ec01dfafdc115fad5dd36d3a9ed1b7d", "patch": "@@ -10,6 +10,7 @@\n \n use io::prelude::*;\n \n+use core::convert::TryInto;\n use cmp;\n use io::{self, SeekFrom, Error, ErrorKind};\n \n@@ -242,26 +243,28 @@ impl<'a> Write for Cursor<&'a mut [u8]> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Write for Cursor<Vec<u8>> {\n     fn write(&mut self, buf: &[u8]) -> io::Result<usize> {\n+        let pos: usize = self.position().try_into().map_err(|_| {\n+            Error::new(ErrorKind::InvalidInput,\n+                       \"cursor position exceeds maximum possible vector length\")\n+        })?;\n         // Make sure the internal buffer is as least as big as where we\n         // currently are\n-        let pos = self.position();\n-        let amt = pos.saturating_sub(self.inner.len() as u64);\n-        // use `resize` so that the zero filling is as efficient as possible\n         let len = self.inner.len();\n-        self.inner.resize(len + amt as usize, 0);\n-\n+        if len < pos {\n+            // use `resize` so that the zero filling is as efficient as possible\n+            self.inner.resize(pos, 0);\n+        }\n         // Figure out what bytes will be used to overwrite what's currently\n         // there (left), and what will be appended on the end (right)\n         {\n-            let pos = pos as usize;\n             let space = self.inner.len() - pos;\n             let (left, right) = buf.split_at(cmp::min(space, buf.len()));\n             self.inner[pos..pos + left.len()].copy_from_slice(left);\n             self.inner.extend_from_slice(right);\n         }\n \n         // Bump us forward\n-        self.set_position(pos + buf.len() as u64);\n+        self.set_position((pos + buf.len()) as u64);\n         Ok(buf.len())\n     }\n     fn flush(&mut self) -> io::Result<()> { Ok(()) }\n@@ -580,4 +583,12 @@ mod tests {\n         let mut r = Cursor::new(Vec::new());\n         assert!(r.seek(SeekFrom::End(-2)).is_err());\n     }\n+\n+    #[test]\n+    #[cfg(target_pointer_width = \"32\")]\n+    fn vec_seek_and_write_past_usize_max() {\n+        let mut c = Cursor::new(Vec::new());\n+        c.set_position(<usize>::max_value() as u64 + 1);\n+        assert!(c.write_all(&[1, 2, 3]).is_err());\n+    }\n }"}]}