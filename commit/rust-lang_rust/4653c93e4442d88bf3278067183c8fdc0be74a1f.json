{"sha": "4653c93e4442d88bf3278067183c8fdc0be74a1f", "node_id": "C_kwDOAAsO6NoAKDQ2NTNjOTNlNDQ0MmQ4OGJmMzI3ODA2NzE4M2M4ZmRjMGJlNzRhMWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T09:23:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-19T09:23:31Z"}, "message": "Auto merge of #105892 - Dylan-DPC:rollup-eozolx4, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #105682 (Use `expose_addr()` in `fmt::Pointer`)\n - #105839 (Suggest a `T: Send` bound for `&mut T` upvars in `Send` generators)\n - #105864 (clippy::complexity fixes)\n - #105882 (Don't ICE in closure arg borrow suggestion)\n - #105889 (Fix `uninlined_format_args` in libtest)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "882fb217c4882e6a83e1cf8f385b72fef7328559", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/882fb217c4882e6a83e1cf8f385b72fef7328559"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f", "html_url": "https://github.com/rust-lang/rust/commit/4653c93e4442d88bf3278067183c8fdc0be74a1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4653c93e4442d88bf3278067183c8fdc0be74a1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10723378900ba2d25fc5d8baf785e1082f385832", "url": "https://api.github.com/repos/rust-lang/rust/commits/10723378900ba2d25fc5d8baf785e1082f385832", "html_url": "https://github.com/rust-lang/rust/commit/10723378900ba2d25fc5d8baf785e1082f385832"}, {"sha": "2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a57493fa1e3e59a298bec365a6afb3df7ea5e84", "html_url": "https://github.com/rust-lang/rust/commit/2a57493fa1e3e59a298bec365a6afb3df7ea5e84"}], "stats": {"total": 283, "additions": 181, "deletions": 102}, "files": [{"sha": "0ef784a4453dcf131193f9be757250671328b413", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -600,7 +600,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.impl_trait_defs = current_impl_trait_defs;\n         self.impl_trait_bounds = current_impl_trait_bounds;\n \n-        debug_assert!(self.children.iter().find(|(id, _)| id == &def_id).is_none());\n+        debug_assert!(!self.children.iter().any(|(id, _)| id == &def_id));\n         self.children.push((def_id, hir::MaybeOwner::Owner(info)));\n     }\n "}, {"sha": "d8c22fbe59f015929ad04085baa1d6664e213ca3", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -2059,12 +2059,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n     ) -> Option<InitIndex> {\n         let mpi = self.move_data.rev_lookup.find_local(local);\n         let ii = &self.move_data.init_path_map[mpi];\n-        for &index in ii {\n-            if flow_state.ever_inits.contains(index) {\n-                return Some(index);\n-            }\n-        }\n-        None\n+        ii.into_iter().find(|&&index| flow_state.ever_inits.contains(index)).copied()\n     }\n \n     /// Adds the place into the used mutable variables set"}, {"sha": "5bf45a81e4347cd7de59a42a80fdaaa796131bd6", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -233,8 +233,8 @@ impl<'a, 'll, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         // Set KCFI operand bundle\n         let is_indirect_call = unsafe { llvm::LLVMIsAFunction(llfn).is_none() };\n         let kcfi_bundle =\n-            if self.tcx.sess.is_sanitizer_kcfi_enabled() && fn_abi.is_some() && is_indirect_call {\n-                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi.unwrap());\n+            if self.tcx.sess.is_sanitizer_kcfi_enabled() && let Some(fn_abi) = fn_abi && is_indirect_call {\n+                let kcfi_typeid = kcfi_typeid_for_fnabi(self.tcx, fn_abi);\n                 Some(llvm::OperandBundleDef::new(\"kcfi\", &[self.const_u32(kcfi_typeid)]))\n             } else {\n                 None"}, {"sha": "6eb120157da0205b34c762ec5787d2a9665bd9b0", "filename": "compiler/rustc_codegen_ssa/src/back/archive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Farchive.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -123,7 +123,7 @@ fn try_filter_fat_archs<'a>(\n ) -> io::Result<Option<(&'a [u8], u64)>> {\n     let archs = archs.map_err(|e| io::Error::new(io::ErrorKind::Other, e))?;\n \n-    let desired = match archs.iter().filter(|a| a.architecture() == target_arch).next() {\n+    let desired = match archs.iter().find(|a| a.architecture() == target_arch) {\n         Some(a) => a,\n         None => return Ok(None),\n     };"}, {"sha": "c9d179de39f391adecb9a14de7a98021d8e0347b", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -1124,9 +1124,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n \n         let hir = self.tcx.hir();\n-        let cond_parent = hir.parent_iter(expr.hir_id).skip_while(|(_, node)| {\n-            matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Binary(op, _, _), .. }) if op.node == hir::BinOpKind::And)\n-        }).next();\n+        let cond_parent = hir.parent_iter(expr.hir_id).find(|(_, node)| {\n+            !matches!(node, hir::Node::Expr(hir::Expr { kind: hir::ExprKind::Binary(op, _, _), .. }) if op.node == hir::BinOpKind::And)\n+        });\n         // Don't suggest:\n         //     `let Some(_) = a.is_some() && b`\n         //                     ++++++++++"}, {"sha": "da2c6fbc05f576f2a76128878891e828f51c546a", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -488,7 +488,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         // If this empty region is from a universe that can\n                         // name the placeholder, then the placeholder is\n                         // larger; otherwise, the only ancestor is `'static`.\n-                        if a_ui.can_name(placeholder.universe) { true } else { false }\n+                        return a_ui.can_name(placeholder.universe);\n                     }\n                 }\n             }"}, {"sha": "955c54e85157eb9279ab9f788701fb531a27ccbb", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -87,18 +87,12 @@ impl<'tcx> Rollback<UndoLog<'tcx>> for InferCtxtInner<'tcx> {\n \n /// The combined undo log for all the various unification tables. For each change to the storage\n /// for any kind of inference variable, we record an UndoLog entry in the vector here.\n-#[derive(Clone)]\n+#[derive(Clone, Default)]\n pub(crate) struct InferCtxtUndoLogs<'tcx> {\n     logs: Vec<UndoLog<'tcx>>,\n     num_open_snapshots: usize,\n }\n \n-impl Default for InferCtxtUndoLogs<'_> {\n-    fn default() -> Self {\n-        Self { logs: Default::default(), num_open_snapshots: Default::default() }\n-    }\n-}\n-\n /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any\n /// action that is convertible into an UndoLog (per the From impls above).\n impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>"}, {"sha": "0e18ba73d7129da3bd04fc6b0852ec90f493de53", "filename": "compiler/rustc_middle/src/middle/privacy.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fprivacy.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -103,12 +103,7 @@ impl EffectiveVisibilities {\n \n     pub fn public_at_level(&self, id: LocalDefId) -> Option<Level> {\n         self.effective_vis(id).and_then(|effective_vis| {\n-            for level in Level::all_levels() {\n-                if effective_vis.is_public_at_level(level) {\n-                    return Some(level);\n-                }\n-            }\n-            None\n+            Level::all_levels().into_iter().find(|&level| effective_vis.is_public_at_level(level))\n         })\n     }\n "}, {"sha": "3a2bf051516554bc6f6acdf220f42a604a5de656", "filename": "compiler/rustc_mir_transform/src/sroa.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsroa.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -182,7 +182,7 @@ fn replace_flattened_locals<'tcx>(\n     let mut fragments = IndexVec::new();\n     for (k, v) in &replacements.fields {\n         fragments.ensure_contains_elem(k.local, || Vec::new());\n-        fragments[k.local].push((&k.projection[..], *v));\n+        fragments[k.local].push((k.projection, *v));\n     }\n     debug!(?fragments);\n "}, {"sha": "deeeb9af4eb9232b38a525b98cc0cdfc19924dde", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -595,8 +595,8 @@ fn check_recursion_limit<'tcx>(\n         let def_path_str = tcx.def_path_str(def_id);\n         let (shrunk, written_to_path) = shrunk_instance_name(tcx, &instance);\n         let mut path = PathBuf::new();\n-        let was_written = if written_to_path.is_some() {\n-            path = written_to_path.unwrap();\n+        let was_written = if let Some(written_to_path) = written_to_path {\n+            path = written_to_path;\n             Some(())\n         } else {\n             None"}, {"sha": "5333d3b8587ddaafa80c49336c50890d4f25af7a", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -277,8 +277,7 @@ impl<'a> Parser<'a> {\n                         if let Some(arg) = args\n                             .iter()\n                             .rev()\n-                            .skip_while(|arg| matches!(arg, AngleBracketedArg::Constraint(_)))\n-                            .next()\n+                            .find(|arg| !matches!(arg, AngleBracketedArg::Constraint(_)))\n                         {\n                             err.span_suggestion_verbose(\n                                 arg.span().shrink_to_hi(),"}, {"sha": "f5556738bff91bfa75a6d3f4738ec0bfd4ac9586", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -787,7 +787,6 @@ impl<'tcx> DeadVisitor<'tcx> {\n         let mut dead_codes = dead_codes\n             .iter()\n             .filter(|v| !v.name.as_str().starts_with('_'))\n-            .map(|v| v)\n             .collect::<Vec<&DeadVariant>>();\n         if dead_codes.is_empty() {\n             return;"}, {"sha": "6f1b31ff9c3aec9cbce8cb0bf3b2fe053a566ba7", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -122,7 +122,7 @@ pub fn sysroot_candidates() -> SmallVec<[PathBuf; 2]> {\n     let target = crate::config::host_triple();\n     let mut sysroot_candidates: SmallVec<[PathBuf; 2]> =\n         smallvec![get_or_default_sysroot().expect(\"Failed finding sysroot\")];\n-    let path = current_dll_path().and_then(|s| Ok(s.canonicalize().map_err(|e| e.to_string())?));\n+    let path = current_dll_path().and_then(|s| s.canonicalize().map_err(|e| e.to_string()));\n     if let Ok(dll) = path {\n         // use `parent` twice to chop off the file name and then also the\n         // directory containing the dll which should be either `lib` or `bin`.\n@@ -165,7 +165,7 @@ pub fn get_or_default_sysroot() -> Result<PathBuf, String> {\n     }\n \n     fn default_from_rustc_driver_dll() -> Result<PathBuf, String> {\n-        let dll = current_dll_path().and_then(|s| Ok(canonicalize(s)))?;\n+        let dll = current_dll_path().map(|s| canonicalize(s))?;\n \n         // `dll` will be in one of the following two:\n         // - compiler's libdir: $sysroot/lib/*.dll"}, {"sha": "0845b1b6b096c600b124ec94690a231b4c5d6187", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -99,13 +99,8 @@ fn is_c_void_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> bool {\n         ty::Adt(adt_def, ..) => {\n             let def_id = adt_def.0.did;\n             let crate_name = tcx.crate_name(def_id.krate);\n-            if tcx.item_name(def_id).as_str() == \"c_void\"\n+            tcx.item_name(def_id).as_str() == \"c_void\"\n                 && (crate_name == sym::core || crate_name == sym::std || crate_name == sym::libc)\n-            {\n-                true\n-            } else {\n-                false\n-            }\n         }\n         _ => false,\n     }\n@@ -267,8 +262,7 @@ fn encode_predicates<'tcx>(\n ) -> String {\n     // <predicate1[..predicateN]>E as part of vendor extended type\n     let mut s = String::new();\n-    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> =\n-        predicates.iter().map(|predicate| predicate).collect();\n+    let predicates: Vec<ty::PolyExistentialPredicate<'tcx>> = predicates.iter().collect();\n     for predicate in predicates {\n         s.push_str(&encode_predicate(tcx, predicate, dict, options));\n     }\n@@ -322,7 +316,7 @@ fn encode_substs<'tcx>(\n ) -> String {\n     // [I<subst1..substN>E] as part of vendor extended type\n     let mut s = String::new();\n-    let substs: Vec<GenericArg<'_>> = substs.iter().map(|subst| subst).collect();\n+    let substs: Vec<GenericArg<'_>> = substs.iter().collect();\n     if !substs.is_empty() {\n         s.push('I');\n         for subst in substs {\n@@ -703,11 +697,8 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                         tcx.layout_of(param_env.and(ty)).map_or(false, |layout| layout.is_zst());\n                     !is_zst\n                 });\n-                if field.is_none() {\n-                    // Transform repr(transparent) types without non-ZST field into ()\n-                    ty = tcx.mk_unit();\n-                } else {\n-                    let ty0 = tcx.type_of(field.unwrap().did);\n+                if let Some(field) = field {\n+                    let ty0 = tcx.type_of(field.did);\n                     // Generalize any repr(transparent) user-defined type that is either a pointer\n                     // or reference, and either references itself or any other type that contains or\n                     // references itself, to avoid a reference cycle.\n@@ -720,6 +711,9 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                     } else {\n                         ty = transform_ty(tcx, ty0, options);\n                     }\n+                } else {\n+                    // Transform repr(transparent) types without non-ZST field into ()\n+                    ty = tcx.mk_unit();\n                 }\n             } else {\n                 ty = tcx.mk_adt(*adt_def, transform_substs(tcx, substs, options));"}, {"sha": "036e8f6d47bbaaf26bb2f041c2578e74ed0ac0d7", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -1789,7 +1789,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         self.note_conflicting_closure_bounds(cause, &mut err);\n \n         if let Some(found_node) = found_node {\n-            hint_missing_borrow(span, found_span, found, expected, found_node, &mut err);\n+            hint_missing_borrow(span, found, expected, found_node, &mut err);\n         }\n \n         err\n@@ -2344,28 +2344,33 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 }\n             }\n             GeneratorInteriorOrUpvar::Upvar(upvar_span) => {\n-                // `Some(ref_ty)` if `target_ty` is `&T` and `T` fails to impl `Sync`\n-                let refers_to_non_sync = match target_ty.kind() {\n-                    ty::Ref(_, ref_ty, _) => match self.evaluate_obligation(&obligation) {\n-                        Ok(eval) if !eval.may_apply() => Some(ref_ty),\n+                // `Some((ref_ty, is_mut))` if `target_ty` is `&T` or `&mut T` and fails to impl `Send`\n+                let non_send = match target_ty.kind() {\n+                    ty::Ref(_, ref_ty, mutability) => match self.evaluate_obligation(&obligation) {\n+                        Ok(eval) if !eval.may_apply() => Some((ref_ty, mutability.is_mut())),\n                         _ => None,\n                     },\n                     _ => None,\n                 };\n \n-                let (span_label, span_note) = match refers_to_non_sync {\n-                    // if `target_ty` is `&T` and `T` fails to impl `Sync`,\n-                    // include suggestions to make `T: Sync` so that `&T: Send`\n-                    Some(ref_ty) => (\n-                        format!(\n-                            \"has type `{}` which {}, because `{}` is not `Sync`\",\n-                            target_ty, trait_explanation, ref_ty\n-                        ),\n-                        format!(\n-                            \"captured value {} because `&` references cannot be sent unless their referent is `Sync`\",\n-                            trait_explanation\n-                        ),\n-                    ),\n+                let (span_label, span_note) = match non_send {\n+                    // if `target_ty` is `&T` or `&mut T` and fails to impl `Send`,\n+                    // include suggestions to make `T: Sync` so that `&T: Send`,\n+                    // or to make `T: Send` so that `&mut T: Send`\n+                    Some((ref_ty, is_mut)) => {\n+                        let ref_ty_trait = if is_mut { \"Send\" } else { \"Sync\" };\n+                        let ref_kind = if is_mut { \"&mut\" } else { \"&\" };\n+                        (\n+                            format!(\n+                                \"has type `{}` which {}, because `{}` is not `{}`\",\n+                                target_ty, trait_explanation, ref_ty, ref_ty_trait\n+                            ),\n+                            format!(\n+                                \"captured value {} because `{}` references cannot be sent unless their referent is `{}`\",\n+                                trait_explanation, ref_kind, ref_ty_trait\n+                            ),\n+                        )\n+                    }\n                     None => (\n                         format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n                         format!(\"captured value {}\", trait_explanation),\n@@ -3455,7 +3460,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n /// Add a hint to add a missing borrow or remove an unnecessary one.\n fn hint_missing_borrow<'tcx>(\n     span: Span,\n-    found_span: Span,\n     found: Ty<'tcx>,\n     expected: Ty<'tcx>,\n     found_node: Node<'_>,\n@@ -3474,9 +3478,8 @@ fn hint_missing_borrow<'tcx>(\n         }\n     };\n \n-    let fn_decl = found_node\n-        .fn_decl()\n-        .unwrap_or_else(|| span_bug!(found_span, \"found node must be a function\"));\n+    // This could be a variant constructor, for example.\n+    let Some(fn_decl) = found_node.fn_decl() else { return; };\n \n     let arg_spans = fn_decl.inputs.iter().map(|ty| ty.span);\n "}, {"sha": "e4f3e7928da5a3eb54b57a13c589d8ba26300ae9", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -76,11 +76,7 @@ mod rustc {\n                 }\n             };\n \n-            let ret = if self.visibility(def_id).is_accessible_from(parent, *self) {\n-                true\n-            } else {\n-                false\n-            };\n+            let ret: bool = self.visibility(def_id).is_accessible_from(parent, *self);\n \n             trace!(?ret, \"ret\");\n             ret"}, {"sha": "5f4a666de928439750910fc044105108d7c7a612", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -2471,8 +2471,8 @@ impl Display for char {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> Pointer for *const T {\n     fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n-        // Cast is needed here because `.addr()` requires `T: Sized`.\n-        pointer_fmt_inner((*self as *const ()).addr(), f)\n+        // Cast is needed here because `.expose_addr()` requires `T: Sized`.\n+        pointer_fmt_inner((*self as *const ()).expose_addr(), f)\n     }\n }\n "}, {"sha": "796796e07a9c18fe5673961f463753cf980e2763", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -354,8 +354,7 @@ fn get_shuffle_seed(matches: &getopts::Matches, allow_unstable: bool) -> OptPart\n             Err(e) => {\n                 return Err(format!(\n                     \"argument for --shuffle-seed must be a number \\\n-                     (error: {})\",\n-                    e\n+                     (error: {e})\"\n                 ));\n             }\n         },\n@@ -383,8 +382,7 @@ fn get_test_threads(matches: &getopts::Matches) -> OptPartRes<Option<usize>> {\n             Err(e) => {\n                 return Err(format!(\n                     \"argument for --test-threads must be a number > 0 \\\n-                     (error: {})\",\n-                    e\n+                     (error: {e})\"\n                 ));\n             }\n         },\n@@ -418,8 +416,7 @@ fn get_format(\n         Some(v) => {\n             return Err(format!(\n                 \"argument for --format must be pretty, terse, json or junit (was \\\n-                 {})\",\n-                v\n+                 {v})\"\n             ));\n         }\n     };\n@@ -436,8 +433,7 @@ fn get_color_config(matches: &getopts::Matches) -> OptPartRes<ColorConfig> {\n         Some(v) => {\n             return Err(format!(\n                 \"argument for --color must be auto, always, or never (was \\\n-                 {})\",\n-                v\n+                 {v})\"\n             ));\n         }\n     };"}, {"sha": "5526aadb67ffb84a4aafab0bd79d8ab4c12a85bf", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -53,7 +53,7 @@ impl<T: Write> JsonFormatter<T> {\n             self.write_message(&*format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n         }\n         if let Some(extra) = extra {\n-            self.write_message(&*format!(r#\", {}\"#, extra))?;\n+            self.write_message(&*format!(r#\", {extra}\"#))?;\n         }\n         self.writeln_message(\" }\")\n     }\n@@ -62,13 +62,12 @@ impl<T: Write> JsonFormatter<T> {\n impl<T: Write> OutputFormatter for JsonFormatter<T> {\n     fn write_run_start(&mut self, test_count: usize, shuffle_seed: Option<u64>) -> io::Result<()> {\n         let shuffle_seed_json = if let Some(shuffle_seed) = shuffle_seed {\n-            format!(r#\", \"shuffle_seed\": {}\"#, shuffle_seed)\n+            format!(r#\", \"shuffle_seed\": {shuffle_seed}\"#)\n         } else {\n             String::new()\n         };\n         self.writeln_message(&*format!(\n-            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {}{} }}\"#,\n-            test_count, shuffle_seed_json\n+            r#\"{{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": {test_count}{shuffle_seed_json} }}\"#\n         ))\n     }\n "}, {"sha": "cb67b6491a392286c3821cd3ec1d9089d58a018d", "filename": "library/test/src/formatters/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fmod.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -38,5 +38,5 @@ pub(crate) fn write_stderr_delimiter(test_output: &mut Vec<u8>, test_name: &Test\n         Some(_) => test_output.push(b'\\n'),\n         None => (),\n     }\n-    writeln!(test_output, \"---- {} stderr ----\", test_name).unwrap();\n+    writeln!(test_output, \"---- {test_name} stderr ----\").unwrap();\n }"}, {"sha": "0299c8b543359adb3de118bb7f91436e0cf32879", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -47,7 +47,7 @@ impl<T: Write> PrettyFormatter<T> {\n \n     pub fn write_ignored(&mut self, message: Option<&'static str>) -> io::Result<()> {\n         if let Some(message) = message {\n-            self.write_short_result(&format!(\"ignored, {}\", message), term::color::YELLOW)\n+            self.write_short_result(&format!(\"ignored, {message}\"), term::color::YELLOW)\n         } else {\n             self.write_short_result(\"ignored\", term::color::YELLOW)\n         }"}, {"sha": "f6a41bbb88c852c8090e95b003e64379cc9759bb", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -213,8 +213,7 @@ pub fn assert_test_result<T: Termination>(result: T) -> Result<(), String> {\n     } else {\n         Err(format!(\n             \"the test returned a termination value with a non-zero status code \\\n-             ({}) which indicates a failure\",\n-            code\n+             ({code}) which indicates a failure\"\n         ))\n     }\n }\n@@ -750,7 +749,7 @@ fn spawn_test_subprocess(\n         })() {\n             Ok(r) => r,\n             Err(e) => {\n-                write!(&mut test_output, \"Unexpected error: {}\", e).unwrap();\n+                write!(&mut test_output, \"Unexpected error: {e}\").unwrap();\n                 TrFailed\n             }\n         };"}, {"sha": "7c5b0d6c0f721072d0d13c40b3be84d529dee0e0", "filename": "library/test/src/test_result.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Ftest_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Ftest_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftest_result.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -44,9 +44,8 @@ pub fn calc_result<'a>(\n             } else if let Some(panic_str) = maybe_panic_str {\n                 TestResult::TrFailedMsg(format!(\n                     r#\"panic did not contain expected string\n-      panic message: `{:?}`,\n- expected substring: `{:?}`\"#,\n-                    panic_str, msg\n+      panic message: `{panic_str:?}`,\n+ expected substring: `{msg:?}`\"#\n                 ))\n             } else {\n                 TestResult::TrFailedMsg(format!("}, {"sha": "7fd69d7f7e73c66ea340f995e9f30be4be890920", "filename": "library/test/src/time.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -107,16 +107,14 @@ impl TimeThreshold {\n         let durations_str = env::var(env_var_name).ok()?;\n         let (warn_str, critical_str) = durations_str.split_once(',').unwrap_or_else(|| {\n             panic!(\n-                \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n-                env_var_name, durations_str\n+                \"Duration variable {env_var_name} expected to have 2 numbers separated by comma, but got {durations_str}\"\n             )\n         });\n \n         let parse_u64 = |v| {\n             u64::from_str(v).unwrap_or_else(|_| {\n                 panic!(\n-                    \"Duration value in variable {} is expected to be a number, but got {}\",\n-                    env_var_name, v\n+                    \"Duration value in variable {env_var_name} is expected to be a number, but got {v}\"\n                 )\n             })\n         };"}, {"sha": "eb9ef63ecfcb4fa8dfa5b440982b2bc2fbf47a73", "filename": "src/test/ui/generator/ref-upvar-not-send.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -0,0 +1,31 @@\n+// For `Send` generators, suggest a `T: Sync` requirement for `&T` upvars,\n+// and suggest a `T: Send` requirement for `&mut T` upvars.\n+\n+#![feature(generators)]\n+\n+fn assert_send<T: Send>(_: T) {}\n+//~^ NOTE required by a bound in `assert_send`\n+//~| NOTE required by this bound in `assert_send`\n+//~| NOTE required by a bound in `assert_send`\n+//~| NOTE required by this bound in `assert_send`\n+\n+fn main() {\n+    let x: &*mut () = &std::ptr::null_mut();\n+    let y: &mut *mut () = &mut std::ptr::null_mut();\n+    assert_send(move || {\n+        //~^ ERROR generator cannot be sent between threads safely\n+        //~| NOTE generator is not `Send`\n+        yield;\n+        let _x = x;\n+    });\n+    //~^^ NOTE captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+    //~| NOTE has type `&*mut ()` which is not `Send`, because `*mut ()` is not `Sync`\n+    assert_send(move || {\n+        //~^ ERROR generator cannot be sent between threads safely\n+        //~| NOTE generator is not `Send`\n+        yield;\n+        let _y = y;\n+    });\n+    //~^^ NOTE captured value is not `Send` because `&mut` references cannot be sent unless their referent is `Send`\n+    //~| NOTE has type `&mut *mut ()` which is not `Send`, because `*mut ()` is not `Send`\n+}"}, {"sha": "689ace67e34ef16297f4f7b34ce7428d05da8a6e", "filename": "src/test/ui/generator/ref-upvar-not-send.stderr", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fref-upvar-not-send.stderr?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -0,0 +1,50 @@\n+error: generator cannot be sent between threads safely\n+  --> $DIR/ref-upvar-not-send.rs:15:17\n+   |\n+LL |       assert_send(move || {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         yield;\n+LL | |         let _x = x;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: the trait `Sync` is not implemented for `*mut ()`\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/ref-upvar-not-send.rs:19:18\n+   |\n+LL |         let _x = x;\n+   |                  ^ has type `&*mut ()` which is not `Send`, because `*mut ()` is not `Sync`\n+note: required by a bound in `assert_send`\n+  --> $DIR/ref-upvar-not-send.rs:6:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: generator cannot be sent between threads safely\n+  --> $DIR/ref-upvar-not-send.rs:23:17\n+   |\n+LL |       assert_send(move || {\n+   |  _________________^\n+LL | |\n+LL | |\n+LL | |         yield;\n+LL | |         let _y = y;\n+LL | |     });\n+   | |_____^ generator is not `Send`\n+   |\n+   = help: within `[generator@$DIR/ref-upvar-not-send.rs:23:17: 23:24]`, the trait `Send` is not implemented for `*mut ()`\n+note: captured value is not `Send` because `&mut` references cannot be sent unless their referent is `Send`\n+  --> $DIR/ref-upvar-not-send.rs:27:18\n+   |\n+LL |         let _y = y;\n+   |                  ^ has type `&mut *mut ()` which is not `Send`, because `*mut ()` is not `Send`\n+note: required by a bound in `assert_send`\n+  --> $DIR/ref-upvar-not-send.rs:6:19\n+   |\n+LL | fn assert_send<T: Send>(_: T) {}\n+   |                   ^^^^ required by this bound in `assert_send`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "8de5bae92fc2ceb826871cd0acb020e5106c08b5", "filename": "src/test/ui/suggestions/enum-variant-arg-mismatch.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.rs?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -0,0 +1,10 @@\n+pub enum Sexpr<'a> {\n+    Ident(&'a str),\n+}\n+\n+fn map<'a, F: Fn(String) -> Sexpr<'a>>(f: F) {}\n+\n+fn main() {\n+    map(Sexpr::Ident);\n+    //~^ ERROR type mismatch in function arguments\n+}"}, {"sha": "f76019b700011273ab07542b4b7f4523d5b870d2", "filename": "src/test/ui/suggestions/enum-variant-arg-mismatch.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4653c93e4442d88bf3278067183c8fdc0be74a1f/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fenum-variant-arg-mismatch.stderr?ref=4653c93e4442d88bf3278067183c8fdc0be74a1f", "patch": "@@ -0,0 +1,22 @@\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/enum-variant-arg-mismatch.rs:8:9\n+   |\n+LL |     Ident(&'a str),\n+   |     ----- found signature defined here\n+...\n+LL |     map(Sexpr::Ident);\n+   |     --- ^^^^^^^^^^^^ expected due to this\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = note: expected function signature `fn(String) -> _`\n+              found function signature `fn(&str) -> _`\n+note: required by a bound in `map`\n+  --> $DIR/enum-variant-arg-mismatch.rs:5:15\n+   |\n+LL | fn map<'a, F: Fn(String) -> Sexpr<'a>>(f: F) {}\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `map`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}]}