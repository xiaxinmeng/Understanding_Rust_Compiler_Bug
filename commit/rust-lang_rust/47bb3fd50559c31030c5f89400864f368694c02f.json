{"sha": "47bb3fd50559c31030c5f89400864f368694c02f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3YmIzZmQ1MDU1OWMzMTAzMGM1Zjg5NDAwODY0ZjM2ODY5NGMwMmY=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-07T13:54:41Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-29T21:01:36Z"}, "message": "Debug flag to bypass restriction of mutation in match guards.\n\nNow, if you pass `-Z disable-ast-check-for-mutation-in-guard`, then we\nwill just allow you to mutably-borrow and assign in guards of `match`\narms.\n\nThis is wildly unsound with AST-borrowck. It is also unsound with\nMIR-borrowck without further adjustments, which come in later in the\ncommit series on this Pull Request.\n\nSee also rust-lang/rust#24535 and rust-lang/rfcs#1006.", "tree": {"sha": "0784f4343fdaf7a2f1b85b1eeda7ad14da77d24a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0784f4343fdaf7a2f1b85b1eeda7ad14da77d24a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47bb3fd50559c31030c5f89400864f368694c02f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47bb3fd50559c31030c5f89400864f368694c02f", "html_url": "https://github.com/rust-lang/rust/commit/47bb3fd50559c31030c5f89400864f368694c02f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47bb3fd50559c31030c5f89400864f368694c02f/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "524ad9b9e03656f3fdeb03ed82fe78db3916e566", "url": "https://api.github.com/repos/rust-lang/rust/commits/524ad9b9e03656f3fdeb03ed82fe78db3916e566", "html_url": "https://github.com/rust-lang/rust/commit/524ad9b9e03656f3fdeb03ed82fe78db3916e566"}], "stats": {"total": 12, "additions": 11, "deletions": 1}, "files": [{"sha": "45af66815fc2dd4bcd4c2afd73384e5bbe2e560f", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=47bb3fd50559c31030c5f89400864f368694c02f", "patch": "@@ -1290,6 +1290,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         useful for profiling / PGO.\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],\n         \"choose which RELRO level to use\"),\n+    disable_ast_check_for_mutation_in_guard: bool = (false, parse_bool, [UNTRACKED],\n+        \"skip AST-based mutation-in-guard check (mir-borrowck provides more precise check)\"),\n     nll_subminimal_causes: bool = (false, parse_bool, [UNTRACKED],\n         \"when tracking region error causes, accept subminimal results for faster execution.\"),\n     nll_facts: bool = (false, parse_bool, [UNTRACKED],"}, {"sha": "1ee28a65424d505c6bc74a98cb70d523a5d2ec2e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=47bb3fd50559c31030c5f89400864f368694c02f", "patch": "@@ -1344,6 +1344,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.on_disk_query_result_cache.serialize(self.global_tcx(), encoder)\n     }\n \n+    /// If true, we should use a naive AST walk to determine if match\n+    /// guard could perform bad mutations (or mutable-borrows).\n+    pub fn check_for_mutation_in_guard_via_ast_walk(self) -> bool {\n+        !self.sess.opts.debugging_opts.disable_ast_check_for_mutation_in_guard\n+    }\n+\n     /// If true, we should use the MIR-based borrowck (we may *also* use\n     /// the AST-based borrowck).\n     pub fn use_mir_borrowck(self) -> bool {"}, {"sha": "0a1139700984d13ca580404a6f37c43a7588305c", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47bb3fd50559c31030c5f89400864f368694c02f/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=47bb3fd50559c31030c5f89400864f368694c02f", "patch": "@@ -181,7 +181,9 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n             // Second, if there is a guard on each arm, make sure it isn't\n             // assigning or borrowing anything mutably.\n             if let Some(ref guard) = arm.guard {\n-                check_for_mutation_in_guard(self, &guard);\n+                if self.tcx.check_for_mutation_in_guard_via_ast_walk() {\n+                    check_for_mutation_in_guard(self, &guard);\n+                }\n             }\n \n             // Third, perform some lints."}]}