{"sha": "f8653c9aca23317836277ef38decb2b220d9843d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4NjUzYzlhY2EyMzMxNzgzNjI3N2VmMzhkZWNiMmIyMjBkOTg0M2Q=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-04T17:31:13Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-04-05T17:05:43Z"}, "message": "Add config file for tools enabling stage1 downloads by default\n\nOtherwise no one will be able to find the setting.", "tree": {"sha": "c7e7002974cdacef523fbf512e059bdd983d1715", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7e7002974cdacef523fbf512e059bdd983d1715"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8653c9aca23317836277ef38decb2b220d9843d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8653c9aca23317836277ef38decb2b220d9843d", "html_url": "https://github.com/rust-lang/rust/commit/f8653c9aca23317836277ef38decb2b220d9843d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8653c9aca23317836277ef38decb2b220d9843d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a7a0ac51eefbdacc5b1763f8d49a787407afb34", "html_url": "https://github.com/rust-lang/rust/commit/5a7a0ac51eefbdacc5b1763f8d49a787407afb34"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "883bfead64e4afc7d087ea2aa74c20cf6a1bfaf8", "filename": "src/bootstrap/defaults/config.compiler.toml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.compiler.toml?ref=f8653c9aca23317836277ef38decb2b220d9843d", "patch": "@@ -8,6 +8,5 @@ debug-logging = true\n incremental = true\n \n [llvm]\n-# Will download LLVM from CI if available on your platform (Linux only for now)\n-# https://github.com/rust-lang/rust/issues/77084 tracks support for more platforms\n+# Will download LLVM from CI if available on your platform.\n download-ci-llvm = \"if-available\""}, {"sha": "182fb0fb0675c1887b22746ed5038450396f9cbf", "filename": "src/bootstrap/defaults/config.tools.toml", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdefaults%2Fconfig.tools.toml?ref=f8653c9aca23317836277ef38decb2b220d9843d", "patch": "@@ -0,0 +1,16 @@\n+# These defaults are meant for contributors to tools which build on the\n+# compiler, but do not modify it directly.\n+[rust]\n+# This enables `RUSTC_LOG=debug`, avoiding confusing situations\n+# where adding `debug!()` appears to do nothing.\n+# However, it makes running the compiler slightly slower.\n+debug-logging = true\n+# This greatly increases the speed of rebuilds, especially when there are only minor changes. However, it makes the initial build slightly slower.\n+incremental = true\n+# Download rustc from CI instead of building it from source.\n+# This cuts compile times by almost 60x, but means you can't modify the compiler.\n+download-rustc = \"if-unchanged\"\n+\n+[llvm]\n+# Will download LLVM from CI if available on your platform.\n+download-ci-llvm = \"if-available\""}, {"sha": "a5829dfa9d87905192b6331a780e2f397d519431", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8653c9aca23317836277ef38decb2b220d9843d/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=f8653c9aca23317836277ef38decb2b220d9843d", "patch": "@@ -13,6 +13,7 @@ pub enum Profile {\n     Compiler,\n     Codegen,\n     Library,\n+    Tools,\n     User,\n }\n \n@@ -24,15 +25,16 @@ impl Profile {\n     pub fn all() -> impl Iterator<Item = Self> {\n         use Profile::*;\n         // N.B. these are ordered by how they are displayed, not alphabetically\n-        [Library, Compiler, Codegen, User].iter().copied()\n+        [Library, Compiler, Codegen, Tools, User].iter().copied()\n     }\n \n     pub fn purpose(&self) -> String {\n         use Profile::*;\n         match self {\n             Library => \"Contribute to the standard library\",\n-            Compiler => \"Contribute to the compiler or rustdoc\",\n+            Compiler => \"Contribute to the compiler itself\",\n             Codegen => \"Contribute to the compiler, and also modify LLVM or codegen\",\n+            Tools => \"Contribute to tools which depend on the compiler, but do not modify it directly (e.g. rustdoc, clippy, miri)\",\n             User => \"Install Rust from source\",\n         }\n         .to_string()\n@@ -53,9 +55,12 @@ impl FromStr for Profile {\n     fn from_str(s: &str) -> Result<Self, Self::Err> {\n         match s {\n             \"lib\" | \"library\" => Ok(Profile::Library),\n-            \"compiler\" | \"rustdoc\" => Ok(Profile::Compiler),\n+            \"compiler\" => Ok(Profile::Compiler),\n             \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n             \"maintainer\" | \"user\" => Ok(Profile::User),\n+            \"tools\" | \"tool\" | \"rustdoc\" | \"clippy\" | \"miri\" | \"rustfmt\" | \"rls\" => {\n+                Ok(Profile::Tools)\n+            }\n             _ => Err(format!(\"unknown profile: '{}'\", s)),\n         }\n     }\n@@ -68,6 +73,7 @@ impl fmt::Display for Profile {\n             Profile::Codegen => write!(f, \"codegen\"),\n             Profile::Library => write!(f, \"library\"),\n             Profile::User => write!(f, \"user\"),\n+            Profile::Tools => write!(f, \"tools\"),\n         }\n     }\n }\n@@ -103,6 +109,14 @@ pub fn setup(src_path: &Path, profile: Profile) {\n \n     let suggestions = match profile {\n         Profile::Codegen | Profile::Compiler => &[\"check\", \"build\", \"test\"][..],\n+        Profile::Tools => &[\n+            \"check\",\n+            \"build\",\n+            \"test src/test/rustdoc*\",\n+            \"test src/tools/clippy\",\n+            \"test src/tools/miri\",\n+            \"test src/tools/rustfmt\",\n+        ],\n         Profile::Library => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n         Profile::User => &[\"dist\", \"build\"],\n     };"}]}