{"sha": "e046360e690534229bd674ff2b1f61d324820230", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDYzNjBlNjkwNTM0MjI5YmQ2NzRmZjJiMWY2MWQzMjQ4MjAyMzA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T10:50:31Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-17T11:02:04Z"}, "message": "Add an std::md4 module", "tree": {"sha": "7e2009fd4a6f69043d52e66140e04c87e61dd9f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2009fd4a6f69043d52e66140e04c87e61dd9f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e046360e690534229bd674ff2b1f61d324820230", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e046360e690534229bd674ff2b1f61d324820230", "html_url": "https://github.com/rust-lang/rust/commit/e046360e690534229bd674ff2b1f61d324820230", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e046360e690534229bd674ff2b1f61d324820230/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d367cdf1d9c641576aae9e612acc126ae6573b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/d367cdf1d9c641576aae9e612acc126ae6573b66", "html_url": "https://github.com/rust-lang/rust/commit/d367cdf1d9c641576aae9e612acc126ae6573b66"}], "stats": {"total": 111, "additions": 111, "deletions": 0}, "files": [{"sha": "b6ef12842a112917871f80e4002c10aa8c4e0790", "filename": "src/libstd/md4.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/e046360e690534229bd674ff2b1f61d324820230/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e046360e690534229bd674ff2b1f61d324820230/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=e046360e690534229bd674ff2b1f61d324820230", "patch": "@@ -0,0 +1,110 @@\n+fn md4(msg: [u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n+    let orig_len = vec::len(msg) * 8u;\n+    // pad message\n+    let msg = msg + [0x80u8];\n+    let bitlen = orig_len + 8u;\n+    while (bitlen + 64u) % 512u > 0u {\n+        msg += [0u8];\n+        bitlen += 8u;\n+    }\n+    // append length\n+    let i = 0u;\n+    while i < 8u {\n+        msg += [(orig_len >> (i * 8u)) as u8];\n+        i += 1u;\n+    }\n+\n+    let a = 0x67452301u32;\n+    let b = 0xefcdab89u32;\n+    let c = 0x98badcfeu32;\n+    let d = 0x10325476u32;\n+\n+    fn rot(r: int, x: u32) -> u32 {\n+        let r = r as u32;\n+        (x << r) | (x >> (32u32 - r))\n+    }\n+\n+    let i = 0u, e = vec::len(msg);\n+    let x = vec::init_elt_mut(0u32, 16u);\n+    while i < e {\n+        let aa = a, bb = b, cc = c, dd = d;\n+\n+        let j = 0u, base = i;\n+        while j < 16u {\n+            x[j] = (msg[base] as u32) + (msg[base + 1u] as u32 << 8u32) +\n+                (msg[base + 2u] as u32 << 16u32) +\n+                (msg[base + 3u] as u32 << 24u32);\n+            j += 1u; base += 4u;\n+        }\n+\n+        let j = 0u;\n+        while j < 16u {\n+            a = rot(3, a + ((b & c) | (!b & d)) + x[j]);\n+            j += 1u;\n+            d = rot(7, d + ((a & b) | (!a & c)) + x[j]);\n+            j += 1u;\n+            c = rot(11, c + ((d & a) | (!d & b)) + x[j]);\n+            j += 1u;\n+            b = rot(19, b + ((c & d) | (!c & a)) + x[j]);\n+            j += 1u;\n+        }\n+\n+        let j = 0u, q = 0x5a827999u32;\n+        while j < 4u {\n+            a = rot(3, a + ((b & c) | ((b & d) | (c & d))) + x[j] + q);\n+            d = rot(5, d + ((a & b) | ((a & c) | (b & c))) + x[j + 4u] + q);\n+            c = rot(9, c + ((d & a) | ((d & b) | (a & b))) + x[j + 8u] + q);\n+            b = rot(13, b + ((c & d) | ((c & a) | (d & a))) + x[j + 12u] + q);\n+            j += 1u;\n+        }\n+\n+        let j = 0u, q = 0x6ed9eba1u32;\n+        while j < 8u {\n+            let jj = j > 2u ? j - 3u : j;\n+            a = rot(3, a + (b ^ c ^ d) + x[jj] + q);\n+            d = rot(9, d + (a ^ b ^ c) + x[jj + 8u] + q);\n+            c = rot(11, c + (d ^ a ^ b) + x[jj + 4u] + q);\n+            b = rot(15, b + (c ^ d ^ a) + x[jj + 12u] + q);\n+            j += 2u;\n+        }\n+\n+        a += aa; b += bb; c += cc; d += dd;\n+        i += 64u;\n+    }\n+    ret {a: a, b: b, c: c, d: d};\n+}\n+\n+fn md4_str(msg: [u8]) -> str {\n+    let {a, b, c, d} = md4(msg);\n+    fn app(a: u32, b: u32, c: u32, d: u32, f: block(u32)) {\n+        f(a); f(b); f(c); f(d);\n+    }\n+    let result = \"\";\n+    app(a, b, c, d) {|u|\n+        let i = 0u32;\n+        while i < 4u32 {\n+            let byte = (u >> (i * 8u32)) as u8;\n+            if byte <= 16u8 { result += \"0\"; }\n+            result += uint::to_str(byte as uint, 16u);\n+            i += 1u32;\n+        }\n+    }\n+    result\n+}\n+\n+fn md4_text(msg: str) -> str { md4_str(str::bytes(msg)) }\n+\n+#[test]\n+fn test_md4() {\n+    assert md4_text(\"\") == \"31d6cfe0d16ae931b73c59d7e0c089c0\";\n+    assert md4_text(\"a\") == \"bde52cb31de33e46245e05fbdbd6fb24\";\n+    assert md4_text(\"abc\") == \"a448017aaf21d8525fc10ae87aa6729d\";\n+    assert md4_text(\"message digest\") == \"d9130a8164549fe818874806e1c7014b\";\n+    assert md4_text(\"abcdefghijklmnopqrstuvwxyz\") ==\n+        \"d79e1c308aa5bbcdeea8ed63df412da9\";\n+    assert md4_text(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123\\\n+                     456789\") == \"043f8582f241db351ce627e153e7f0e4\";\n+    assert md4_text(\"12345678901234567890123456789012345678901234567890123456\\\n+                     789012345678901234567890\") ==\n+        \"e33b4ddc9c38f2199c3e7b164fcc0536\";\n+}"}, {"sha": "d96b6b7b66667474fd59b7b339b22a1f6bcb925e", "filename": "src/libstd/std.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e046360e690534229bd674ff2b1f61d324820230/src%2Flibstd%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/e046360e690534229bd674ff2b1f61d324820230/src%2Flibstd%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rc?ref=e046360e690534229bd674ff2b1f61d324820230", "patch": "@@ -57,6 +57,7 @@ mod getopts;\n mod json;\n mod rand;\n mod sha1;\n+mod md4;\n mod tempfile;\n mod term;\n mod time;"}]}