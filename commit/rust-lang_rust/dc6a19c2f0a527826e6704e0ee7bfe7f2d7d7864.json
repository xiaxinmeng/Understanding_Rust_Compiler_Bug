{"sha": "dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNmExOWMyZjBhNTI3ODI2ZTY3MDRlMGVlN2JmZTdmMmQ3ZDc4NjQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-02T22:55:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-02T22:55:50Z"}, "message": "Rollup merge of #73454 - mark-i-m:contributing, r=nikomatsakis\n\nMove contributing.md to rustc-dev-guide and point at getting started\n\nSee description on https://github.com/rust-lang/rustc-dev-guide/pull/753", "tree": {"sha": "4f02a0876139ba8e2a6b568a63190238f098c957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f02a0876139ba8e2a6b568a63190238f098c957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/mX2CRBK7hj4Ov3rIwAAdHIIAB5OgYYSl/q28Xt3Eua6RsGF\nU2ZGSaVZHudKMoWLlXP59H81o96q3NV/SmKBK8KzOKuxNJfUzawiygvV06qCw7vR\nryYVDDc6DCz0HR4F7E0SNJOI8O4yXnaXpM41Fni/kV6TuRcKxx45X3dG1bj8c651\nbY7kwvbePxE22fhNKh7yvvtSFju2nJAlo/dyCDpsdIt8iigudFQa6E1jRNG2lp5R\ndTccDYKNznoUXoOkHw0yAX5cQOMpBoQprP1bbGOi33XcIGw9GXiS0pEyJ3MPoB3y\nKyLJz/MOCXzqJ/s5rdAyGXJkzO9SJU8EZNxyHFJWtKWLwQDxuZRBLI0BHK0e9i4=\n=QioL\n-----END PGP SIGNATURE-----\n", "payload": "tree 4f02a0876139ba8e2a6b568a63190238f098c957\nparent 3503f565e1fb7296983757d2716346f48a4a262b\nparent 3f6928f1f6eff367e6ddbfb63ebc5e568ffe0eb1\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593730550 -0700\ncommitter GitHub <noreply@github.com> 1593730550 -0700\n\nRollup merge of #73454 - mark-i-m:contributing, r=nikomatsakis\n\nMove contributing.md to rustc-dev-guide and point at getting started\n\nSee description on https://github.com/rust-lang/rustc-dev-guide/pull/753\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "html_url": "https://github.com/rust-lang/rust/commit/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3503f565e1fb7296983757d2716346f48a4a262b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3503f565e1fb7296983757d2716346f48a4a262b", "html_url": "https://github.com/rust-lang/rust/commit/3503f565e1fb7296983757d2716346f48a4a262b"}, {"sha": "3f6928f1f6eff367e6ddbfb63ebc5e568ffe0eb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6928f1f6eff367e6ddbfb63ebc5e568ffe0eb1", "html_url": "https://github.com/rust-lang/rust/commit/3f6928f1f6eff367e6ddbfb63ebc5e568ffe0eb1"}], "stats": {"total": 556, "additions": 11, "deletions": 545}, "files": [{"sha": "373604adb0541e60d414906450bf93cd012b7529", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 524, "changes": 527, "blob_url": "https://github.com/rust-lang/rust/blob/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "patch": "@@ -1,529 +1,8 @@\n # Contributing to Rust\n-[contributing-to-rust]: #contributing-to-rust\n \n-Thank you for your interest in contributing to Rust! There are many ways to\n-contribute, and we appreciate all of them. This document is a bit long, so here's\n-links to the major sections:\n+Thank you for your interest in contributing to Rust!\n \n-* [Feature Requests](#feature-requests)\n-* [Bug Reports](#bug-reports)\n-* [The Build System](#the-build-system)\n-* [Pull Requests](#pull-requests)\n-* [Writing Documentation](#writing-documentation)\n-* [Issue Triage](#issue-triage)\n-* [Out-of-tree Contributions](#out-of-tree-contributions)\n-* [Helpful Links and Information](#helpful-links-and-information)\n+To get started, read the [Getting Started] guide in the [rustc-dev-guide].\n \n-If you have questions, please make a post on [internals.rust-lang.org][internals] or\n-hop on the [Rust Discord server][rust-discord] or [Rust Zulip server][rust-zulip].\n-\n-As a reminder, all contributors are expected to follow our [Code of Conduct][coc].\n-\n-The [rustc-dev-guide] is your friend! It describes how the compiler works and how\n-to contribute to it in more detail than this document.\n-\n-If this is your first time contributing, the [walkthrough] chapter of the guide\n-can give you a good example of how a typical contribution would go.\n-\n-[internals]: https://internals.rust-lang.org\n-[rust-discord]: http://discord.gg/rust-lang\n-[rust-zulip]: https://rust-lang.zulipchat.com\n-[coc]: https://www.rust-lang.org/conduct.html\n+[Getting Started]: https://rustc-dev-guide.rust-lang.org/getting-started.md\n [rustc-dev-guide]: https://rustc-dev-guide.rust-lang.org/\n-[walkthrough]: https://rustc-dev-guide.rust-lang.org/walkthrough.html\n-\n-## Feature Requests\n-[feature-requests]: #feature-requests\n-\n-To request a change to the way the Rust language works, please head over\n-to the [RFCs repository](https://github.com/rust-lang/rfcs) and view the\n-[README](https://github.com/rust-lang/rfcs/blob/master/README.md)\n-for instructions.\n-\n-## Bug Reports\n-[bug-reports]: #bug-reports\n-\n-While bugs are unfortunate, they're a reality in software. We can't fix what we\n-don't know about, so please report liberally. If you're not sure if something\n-is a bug or not, feel free to file a bug anyway.\n-\n-**If you believe reporting your bug publicly represents a security risk to Rust users,\n-please follow our [instructions for reporting security vulnerabilities](https://www.rust-lang.org/policies/security)**.\n-\n-If you're using the nightly channel, please check if the bug exists in the\n-latest toolchain before filing your bug. It might be fixed already.\n-\n-If you have the chance, before reporting a bug, please [search existing\n-issues](https://github.com/rust-lang/rust/search?q=&type=Issues&utf8=%E2%9C%93),\n-as it's possible that someone else has already reported your error. This doesn't\n-always work, and sometimes it's hard to know what to search for, so consider this\n-extra credit. We won't mind if you accidentally file a duplicate report.\n-\n-Similarly, to help others who encountered the bug find your issue,\n-consider filing an issue with a descriptive title, which contains information that might be unique to it.\n-This can be the language or compiler feature used, the conditions that trigger the bug,\n-or part of the error message if there is any.\n-An example could be: **\"impossible case reached\" on lifetime inference for impl Trait in return position**.\n-\n-Opening an issue is as easy as following [this\n-link](https://github.com/rust-lang/rust/issues/new) and filling out the fields.\n-Here's a template that you can use to file a bug, though it's not necessary to\n-use it exactly:\n-\n-    <short summary of the bug>\n-\n-    I tried this code:\n-\n-    <code sample that causes the bug>\n-\n-    I expected to see this happen: <explanation>\n-\n-    Instead, this happened: <explanation>\n-\n-    ## Meta\n-\n-    `rustc --version --verbose`:\n-\n-    Backtrace:\n-\n-All three components are important: what you did, what you expected, what\n-happened instead. Please include the output of `rustc --version --verbose`,\n-which includes important information about what platform you're on, what\n-version of Rust you're using, etc.\n-\n-Sometimes, a backtrace is helpful, and so including that is nice. To get\n-a backtrace, set the `RUST_BACKTRACE` environment variable to a value\n-other than `0`. The easiest way\n-to do this is to invoke `rustc` like this:\n-\n-```bash\n-$ RUST_BACKTRACE=1 rustc ...\n-```\n-\n-## The Build System\n-\n-For info on how to configure and build the compiler, please see [this\n-chapter][rustcguidebuild] of the rustc-dev-guide. This chapter contains info for\n-contributions to the compiler and the standard library. It also lists some\n-really useful commands to the build system (`./x.py`), which could save you a\n-lot of time.\n-\n-[rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n-\n-## Pull Requests\n-[pull-requests]: #pull-requests\n-\n-Pull requests are the primary mechanism we use to change Rust. GitHub itself\n-has some [great documentation][about-pull-requests] on using the Pull Request feature.\n-We use the \"fork and pull\" model [described here][development-models], where\n-contributors push changes to their personal fork and create pull requests to\n-bring those changes into the source repository.\n-\n-[about-pull-requests]: https://help.github.com/articles/about-pull-requests/\n-[development-models]: https://help.github.com/articles/about-collaborative-development-models/\n-\n-Please make pull requests against the `master` branch.\n-\n-Rust follows a no merge policy, meaning, when you encounter merge\n-conflicts you are expected to always rebase instead of merge.\n-E.g. always use rebase when bringing the latest changes from\n-the master branch to your feature branch.\n-Also, please make sure that fixup commits are squashed into other related\n-commits with meaningful commit messages.\n-\n-GitHub allows [closing issues using keywords][closing-keywords]. This feature\n-should be used to keep the issue tracker tidy. However, it is generally preferred\n-to put the \"closes #123\" text in the PR description rather than the issue commit;\n-particularly during rebasing, citing the issue number in the commit can \"spam\"\n-the issue in question.\n-\n-[closing-keywords]: https://help.github.com/en/articles/closing-issues-using-keywords\n-\n-Please make sure your pull request is in compliance with Rust's style\n-guidelines by running\n-\n-    $ python x.py test tidy\n-\n-Make this check before every pull request (and every new commit in a pull\n-request); you can add [git hooks](https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks)\n-before every push to make sure you never forget to make this check.\n-\n-All pull requests are reviewed by another person. We have a bot,\n-[@rust-highfive][rust-highfive], that will automatically assign a random person to review your\n-request.\n-\n-If you want to request that a specific person reviews your pull request,\n-you can add an `r?` to the pull request description. For example, [Steve][steveklabnik] usually reviews\n-documentation changes. So if you were to make a documentation change, add\n-\n-    r? @steveklabnik\n-\n-to the end of the pull request description, and [@rust-highfive][rust-highfive] will assign\n-[@steveklabnik][steveklabnik] instead of a random person. This is entirely optional.\n-\n-After someone has reviewed your pull request, they will leave an annotation\n-on the pull request with an `r+`. It will look something like this:\n-\n-    @bors r+\n-\n-This tells [@bors][bors], our lovable integration bot, that your pull request has\n-been approved. The PR then enters the [merge queue][merge-queue], where [@bors][bors]\n-will run all the tests on every platform we support. If it all works out,\n-[@bors][bors] will merge your code into `master` and close the pull request.\n-\n-Depending on the scale of the change, you may see a slightly different form of `r+`:\n-\n-    @bors r+ rollup\n-\n-The additional `rollup` tells [@bors][bors] that this change is eligible for to be\n-\"rolled up\". Changes that are rolled up are tested and merged at the same time, to\n-speed the process up. Typically only small changes that are expected not to conflict\n-with one another are rolled up.\n-\n-[rust-highfive]: https://github.com/rust-highfive\n-[steveklabnik]: https://github.com/steveklabnik\n-[bors]: https://github.com/bors\n-[merge-queue]: https://buildbot2.rust-lang.org/homu/queue/rust\n-\n-Speaking of tests, Rust has a comprehensive test suite. More information about\n-it can be found [here][rctd].\n-\n-### External Dependencies (subtree)\n-\n-As a developer to this repository, you don't have to treat the following external projects\n-differently from other crates that are directly in this repo:\n-\n-* Clippy\n-\n-They are just regular files and directories. This is in contrast to `submodule` dependencies\n-(see below for those). Only tool authors will actually use any operations here.\n-\n-#### Synchronizing a subtree\n-\n-There are two synchronization directions: `subtree push` and `subtree pull`.\n-\n-```\n-git subtree push -P src/tools/clippy git@github.com:your-github-name/rust-clippy sync-from-rust\n-```\n-\n-takes all the changes that\n-happened to the copy in this repo and creates commits on the remote repo that match the local\n-changes. Every local commit that touched the subtree causes a commit on the remote repo, but is\n-modified to move the files from the specified directory to the tool repo root.\n-\n-Make sure to not pick the `master` branch on the tool repo, so you can open a normal PR to the tool\n-to merge that subrepo push.\n-\n-```\n-git subtree pull -P src/tools/clippy https://github.com/rust-lang/rust-clippy master\n-```\n-\n-takes all changes since the last `subtree pull` from the tool repo\n-repo and adds these commits to the rustc repo + a merge commit that moves the tool changes into\n-the specified directory in the rust repository.\n-\n-It is recommended that you always do a push first and get that merged to the tool master branch.\n-Then, when you do a pull, the merge works without conflicts.\n-While it's definitely possible to resolve conflicts during a pull, you may have to redo the conflict\n-resolution if your PR doesn't get merged fast enough and there are new conflicts. Do not try to\n-rebase the result of a `git subtree pull`, rebasing merge commits is a bad idea in general.\n-\n-You always need to specify the `-P` prefix to the subtree directory and the corresponding remote\n-repository. If you specify the wrong directory or repository\n-you'll get very fun merges that try to push the wrong directory to the wrong remote repository.\n-Luckily you can just abort this without any consequences by throwing away either the pulled commits\n-in rustc or the pushed branch on the remote and try again. It is usually fairly obvious\n-that this is happening because you suddenly get thousands of commits that want to be synchronized.\n-\n-#### Creating a new subtree dependency\n-\n-If you want to create a new subtree dependency from an existing repository, call (from this\n-repository's root directory!)\n-\n-```\n-git subtree add -P src/tools/clippy https://github.com/rust-lang/rust-clippy.git master\n-```\n-\n-This will create a new commit, which you may not rebase under any circumstances! Delete the commit\n-and redo the operation if you need to rebase.\n-\n-Now you're done, the `src/tools/clippy` directory behaves as if Clippy were part of the rustc\n-monorepo, so no one but you (or others that synchronize subtrees) actually needs to use `git subtree`.\n-\n-\n-### External Dependencies (submodules)\n-\n-Currently building Rust will also build the following external projects:\n-\n-* [miri](https://github.com/rust-lang/miri)\n-* [rustfmt](https://github.com/rust-lang/rustfmt)\n-* [rls](https://github.com/rust-lang/rls/)\n-\n-We allow breakage of these tools in the nightly channel. Maintainers of these\n-projects will be notified of the breakages and should fix them as soon as\n-possible.\n-\n-After the external is fixed, one could add the changes with\n-\n-```sh\n-git add path/to/submodule\n-```\n-\n-outside the submodule.\n-\n-In order to prepare your tool-fixing PR, you can run the build locally by doing\n-`./x.py build src/tools/TOOL`. If you will be editing the sources\n-there, you may wish to set `submodules = false` in the `config.toml`\n-to prevent `x.py` from resetting to the original branch.\n-\n-Breakage is not allowed in the beta and stable channels, and must be addressed\n-before the PR is merged.\n-\n-#### Breaking Tools Built With The Compiler\n-\n-Rust's build system builds a number of tools that make use of the\n-internals of the compiler. This includes\n-[RLS](https://github.com/rust-lang/rls) and\n-[rustfmt](https://github.com/rust-lang/rustfmt). If these tools\n-break because of your changes, you may run into a sort of \"chicken and egg\"\n-problem. These tools rely on the latest compiler to be built so you can't update\n-them to reflect your changes to the compiler until those changes are merged into\n-the compiler. At the same time, you can't get your changes merged into the compiler\n-because the rust-lang/rust build won't pass until those tools build and pass their\n-tests.\n-\n-That means that, in the default state, you can't update the compiler without first\n-fixing rustfmt, rls and the other tools that the compiler builds.\n-\n-Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/issues/45861)\n-to make all of this easy to handle. The idea is that we allow these tools to be \"broken\",\n-so that the rust-lang/rust build passes without trying to build them, then land the change\n-in the compiler, wait for a nightly, and go update the tools that you broke. Once you're done\n-and the tools are working again, you go back in the compiler and update the tools\n-so they can be distributed again.\n-\n-This should avoid a bunch of synchronization dances and is also much easier on contributors as\n-there's no need to block on rls/rustfmt/other tools changes going upstream.\n-\n-Here are those same steps in detail:\n-\n-1. (optional) First, if it doesn't exist already, create a `config.toml` by copying\n-   `config.toml.example` in the root directory of the Rust repository.\n-   Set `submodules = false` in the `[build]` section. This will prevent `x.py`\n-   from resetting to the original branch after you make your changes. If you\n-   need to [update any submodules to their latest versions](#updating-submodules),\n-   see the section of this file about that for more information.\n-2. (optional) Run `./x.py test src/tools/rustfmt` (substituting the submodule\n-   that broke for `rustfmt`). Fix any errors in the submodule (and possibly others).\n-3. (optional) Make commits for your changes and send them to upstream repositories as a PR.\n-4. (optional) Maintainers of these submodules will **not** merge the PR. The PR can't be\n-   merged because CI will be broken. You'll want to write a message on the PR referencing\n-   your change, and how the PR should be merged once your change makes it into a nightly.\n-5. Wait for your PR to merge.\n-6. Wait for a nightly\n-7. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n-8. (optional) Send a PR to rust-lang/rust updating the submodule.\n-\n-#### Updating submodules\n-\n-These instructions are specific to updating `rustfmt`, however they may apply\n-to the other submodules as well. Please help by improving these instructions\n-if you find any discrepancies or special cases that need to be addressed.\n-\n-To update the `rustfmt` submodule, start by running the appropriate\n-[`git submodule` command](https://git-scm.com/book/en/v2/Git-Tools-Submodules).\n-For example, to update to the latest commit on the remote master branch,\n-you may want to run:\n-```\n-git submodule update --remote src/tools/rustfmt\n-```\n-If you run `./x.py build` now, and you are lucky, it may just work. If you see\n-an error message about patches that did not resolve to any crates, you will need\n-to complete a few more steps which are outlined with their rationale below.\n-\n-*(This error may change in the future to include more information.)*\n-```\n-error: failed to resolve patches for `https://github.com/rust-lang/rustfmt`\n-\n-Caused by:\n-  patch for `rustfmt-nightly` in `https://github.com/rust-lang/rustfmt` did not resolve to any crates\n-failed to run: ~/rust/build/x86_64-unknown-linux-gnu/stage0/bin/cargo build --manifest-path ~/rust/src/bootstrap/Cargo.toml\n-```\n-\n-If you haven't used the `[patch]`\n-section of `Cargo.toml` before, there is [some relevant documentation about it\n-in the cargo docs](http://doc.crates.io/manifest.html#the-patch-section). In\n-addition to that, you should read the\n-[Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#overriding-dependencies)\n-section of the documentation as well.\n-\n-Specifically, the following [section in Overriding dependencies](http://doc.crates.io/specifying-dependencies.html#testing-a-bugfix) reveals what the problem is:\n-\n-> Next up we need to ensure that our lock file is updated to use this new version of uuid so our project uses the locally checked out copy instead of one from crates.io. The way [patch] works is that it'll load the dependency at ../path/to/uuid and then whenever crates.io is queried for versions of uuid it'll also return the local version.\n->\n-> This means that the version number of the local checkout is significant and will affect whether the patch is used. Our manifest declared uuid = \"1.0\" which means we'll only resolve to >= 1.0.0, < 2.0.0, and Cargo's greedy resolution algorithm also means that we'll resolve to the maximum version within that range. Typically this doesn't matter as the version of the git repository will already be greater or match the maximum version published on crates.io, but it's important to keep this in mind!\n-\n-This says that when we updated the submodule, the version number in our\n-`src/tools/rustfmt/Cargo.toml` changed. The new version is different from\n-the version in `Cargo.lock`, so the build can no longer continue.\n-\n-To resolve this, we need to update `Cargo.lock`. Luckily, cargo provides a\n-command to do this easily.\n-\n-```\n-$ cargo update -p rustfmt-nightly\n-```\n-\n-This should change the version listed in `Cargo.lock` to the new version you updated\n-the submodule to. Running `./x.py build` should work now.\n-\n-## Writing Documentation\n-\n-Documentation improvements are very welcome. The source of `doc.rust-lang.org`\n-is located in `src/doc` in the tree, and standard API documentation is generated\n-from the source code itself. Documentation pull requests function in the same way\n-as other pull requests.\n-\n-To find documentation-related issues, sort by the [T-doc label][tdoc].\n-\n-[tdoc]: https://github.com/rust-lang/rust/issues?q=is%3Aopen%20is%3Aissue%20label%3AT-doc\n-\n-You can find documentation style guidelines in [RFC 1574][rfc1574].\n-\n-[rfc1574]: https://github.com/rust-lang/rfcs/blob/master/text/1574-more-api-documentation-conventions.md#appendix-a-full-conventions-text\n-\n-In many cases, you don't need a full `./x.py doc`, which will build the entire\n-stage 2 compiler and compile the various books published on\n-[doc.rust-lang.org]. When updating documentation for the standard library,\n-first try `./x.py doc --stage 0 src/libstd`. If that fails, or if you need to\n-see the output from the latest version of `rustdoc`, use `--stage 1` instead of\n-`--stage 0`. Results should appear in `build/$TARGET/crate-docs`.\n-\n-[doc.rust-lang.org]: htts://doc.rust-lang.org\n-\n-You can also use `rustdoc` directly to check small fixes. For example,\n-`rustdoc src/doc/reference.md` will render reference to `doc/reference.html`.\n-The CSS might be messed up, but you can verify that the HTML is right.\n-\n-Additionally, contributions to the [rustc-dev-guide] are always welcome. Contributions\n-can be made directly at [the\n-rust-lang/rustc-dev-guide](https://github.com/rust-lang/rustc-dev-guide) repo. The issue\n-tracker in that repo is also a great way to find things that need doing. There\n-are issues for beginners and advanced compiler devs alike!\n-\n-## Issue Triage\n-\n-Sometimes, an issue will stay open, even though the bug has been fixed. And\n-sometimes, the original bug may go stale because something has changed in the\n-meantime.\n-\n-It can be helpful to go through older bug reports and make sure that they are\n-still valid. Load up an older issue, double check that it's still true, and\n-leave a comment letting us know if it is or is not. The [least recently\n-updated sort][lru] is good for finding issues like this.\n-\n-Contributors with sufficient permissions on the Rust repo can help by adding\n-labels to triage issues:\n-\n-* Yellow, **A**-prefixed labels state which **area** of the project an issue\n-  relates to.\n-\n-* Magenta, **B**-prefixed labels identify bugs which are **blockers**.\n-\n-* Dark blue, **beta-** labels track changes which need to be backported into\n-  the beta branches.\n-\n-* Light purple, **C**-prefixed labels represent the **category** of an issue.\n-\n-* Green, **E**-prefixed labels explain the level of **experience** necessary\n-  to fix the issue.\n-\n-* The dark blue **final-comment-period** label marks bugs that are using the\n-  RFC signoff functionality of [rfcbot] and are currently in the final\n-  comment period.\n-\n-* Red, **I**-prefixed labels indicate the **importance** of the issue. The\n-  [I-nominated][inom] label indicates that an issue has been nominated for\n-  prioritizing at the next triage meeting.\n-\n-* The purple **metabug** label marks lists of bugs collected by other\n-  categories.\n-\n-* Purple gray, **O**-prefixed labels are the **operating system** or platform\n-  that this issue is specific to.\n-\n-* Orange, **P**-prefixed labels indicate a bug's **priority**. These labels\n-  are only assigned during triage meetings, and replace the [I-nominated][inom]\n-  label.\n-\n-* The gray **proposed-final-comment-period** label marks bugs that are using\n-  the RFC signoff functionality of [rfcbot] and are currently awaiting\n-  signoff of all team members in order to enter the final comment period.\n-\n-* Pink, **regression**-prefixed labels track regressions from stable to the\n-  release channels.\n-\n-* The light orange **relnotes** label marks issues that should be documented in\n-  the release notes of the next release.\n-\n-* Gray, **S**-prefixed labels are used for tracking the **status** of pull\n-  requests.\n-\n-* Blue, **T**-prefixed bugs denote which **team** the issue belongs to.\n-\n-If you're looking for somewhere to start, check out the [E-easy][eeasy] tag.\n-\n-[inom]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AI-nominated\n-[eeasy]: https://github.com/rust-lang/rust/issues?q=is%3Aopen+is%3Aissue+label%3AE-easy\n-[lru]: https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-asc\n-[rfcbot]: https://github.com/anp/rfcbot-rs/\n-\n-## Out-of-tree Contributions\n-\n-There are a number of other ways to contribute to Rust that don't deal with\n-this repository.\n-\n-Answer questions in the _Get Help!_ channels from the [Rust Discord server][rust-discord], on [users.rust-lang.org][users],\n-or on [StackOverflow][so].\n-\n-Participate in the [RFC process](https://github.com/rust-lang/rfcs).\n-\n-Find a [requested community library][community-library], build it, and publish\n-it to [Crates.io](http://crates.io). Easier said than done, but very, very\n-valuable!\n-\n-[rust-discord]: https://discord.gg/rust-lang\n-[users]: https://users.rust-lang.org/\n-[so]: http://stackoverflow.com/questions/tagged/rust\n-[community-library]: https://github.com/rust-lang/rfcs/labels/A-community-library\n-\n-## Helpful Links and Information\n-\n-For people new to Rust, and just starting to contribute, or even for\n-more seasoned developers, some useful places to look for information\n-are:\n-\n-* The [rustc dev guide] contains information about how various parts of the compiler work and how to contribute to the compiler\n-* [Rust Forge][rustforge] contains additional documentation, including write-ups of how to achieve common tasks\n-* The [Rust Internals forum][rif], a place to ask questions and\n-  discuss Rust's internals\n-* The [generated documentation for rust's compiler][gdfrustc]\n-* The [rust reference][rr], even though it doesn't specifically talk about Rust's internals, it's a great resource nonetheless\n-* Although out of date, [Tom Lee's great blog article][tlgba] is very helpful\n-* [rustaceans.org][ro] is helpful, but mostly dedicated to IRC\n-* The [Rust Compiler Testing Docs][rctd]\n-* For [@bors][bors], [this cheat sheet][cheatsheet] is helpful\n-(though you'll need to replace `@homu` with `@bors` in any commands)\n-* **Google!** ([search only in Rust Documentation][gsearchdocs] to find types, traits, etc. quickly)\n-* Don't be afraid to ask! The Rust community is friendly and helpful.\n-\n-[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html\n-[gdfrustc]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/\n-[gsearchdocs]: https://www.google.com/search?q=site:doc.rust-lang.org+your+query+here\n-[rif]: http://internals.rust-lang.org\n-[rr]: https://doc.rust-lang.org/book/README.html\n-[rustforge]: https://forge.rust-lang.org/\n-[tlgba]: http://tomlee.co/2014/04/a-more-detailed-tour-of-the-rust-compiler/\n-[ro]: http://www.rustaceans.org/\n-[rctd]: https://rustc-dev-guide.rust-lang.org/tests/intro.html\n-[cheatsheet]: https://buildbot2.rust-lang.org/homu/"}, {"sha": "70d3d51ce9b237962d0aae06677ffa875f2eefbc", "filename": "README.md", "status": "modified", "additions": 8, "deletions": 21, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=dc6a19c2f0a527826e6704e0ee7bfe7f2d7d7864", "patch": "@@ -7,6 +7,8 @@ standard library, and documentation.\n \n [Rust]: https://www.rust-lang.org\n \n+**Note: this README is for _users_ rather than _contributors_.**\n+\n ## Quick Start\n \n Read [\"Installation\"] from [The Book].\n@@ -16,13 +18,15 @@ Read [\"Installation\"] from [The Book].\n \n ## Installing from Source\n \n-_Note: If you wish to contribute to the compiler, you should read [this\n-chapter][rustcguidebuild] of the rustc-dev-guide instead of this section._\n+**Note: If you wish to _contribute_ to the compiler, you should read the\n+[Getting Started][gettingstarted] of the rustc-dev-guide instead of this\n+section.**\n \n The Rust build system uses a Python script called `x.py` to build the compiler,\n which manages the bootstrapping process. More information about it can be found \n by running `./x.py --help` or reading the [rustc dev guide][rustcguidebuild].\n \n+[gettingstarted]: https://rustc-dev-guide.rust-lang.org/getting-started.md\n [rustcguidebuild]: https://rustc-dev-guide.rust-lang.org/building/how-to-build-and-run.html\n \n ### Building on a Unix-like system\n@@ -225,10 +229,6 @@ Snapshot binaries are currently built and tested on several platforms:\n You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work.\n \n-There is more advice about hacking on Rust in [CONTRIBUTING.md].\n-\n-[CONTRIBUTING.md]: https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md\n-\n ## Getting Help\n \n The Rust community congregates in a few places:\n@@ -243,21 +243,8 @@ The Rust community congregates in a few places:\n \n ## Contributing\n \n-To contribute to Rust, please see [CONTRIBUTING](CONTRIBUTING.md).\n-\n-Most real-time collaboration happens in a variety of channels on the\n-[Rust Discord server][rust-discord], with channels dedicated for getting help,\n-community, documentation, and all major contribution areas in the Rust ecosystem.\n-A good place to ask for help would be the #help channel.\n-\n-The [rustc dev guide] might be a good place to start if you want to find out how\n-various parts of the compiler work.\n-\n-Also, you may find the [rustdocs for the compiler itself][rustdocs] useful.\n-\n-[rust-discord]: https://discord.gg/rust-lang\n-[rustc dev guide]: https://rustc-dev-guide.rust-lang.org/about-this-guide.html\n-[rustdocs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/\n+If you are interested in contributing to the Rust project, please take a look\n+at the [Getting Started][gettingstarted] guide in the [rustc-dev-guide].\n \n ## License\n "}]}