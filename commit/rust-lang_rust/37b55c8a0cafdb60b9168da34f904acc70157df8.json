{"sha": "37b55c8a0cafdb60b9168da34f904acc70157df8", "node_id": "C_kwDOAAsO6NoAKDM3YjU1YzhhMGNhZmRiNjBiOTE2OGRhMzRmOTA0YWNjNzAxNTdkZjg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T23:02:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-03-23T23:02:17Z"}, "message": "Auto merge of #95250 - matthiaskrgr:rollup-ma4zl69, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #94249 (Better errors when a Copy impl on a Struct is not self-consistent)\n - #95069 (Fix auto traits in rustdoc)\n - #95221 (interpret/memory: simplify check_and_deref_ptr)\n - #95225 (remove `[async output]` from `impl Future` pretty-printing)\n - #95238 (Stop emitting E0026 for struct enums with underscores)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "8693acbfc1249537c16fa1503bc295cea28f62fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8693acbfc1249537c16fa1503bc295cea28f62fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37b55c8a0cafdb60b9168da34f904acc70157df8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37b55c8a0cafdb60b9168da34f904acc70157df8", "html_url": "https://github.com/rust-lang/rust/commit/37b55c8a0cafdb60b9168da34f904acc70157df8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37b55c8a0cafdb60b9168da34f904acc70157df8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f4dc0b4db892271cd0dada6e072775b5b5d6b1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f4dc0b4db892271cd0dada6e072775b5b5d6b1e", "html_url": "https://github.com/rust-lang/rust/commit/9f4dc0b4db892271cd0dada6e072775b5b5d6b1e"}, {"sha": "fab7a6a9fd68b66f7ecd2fd1b2f6cfa0277b4413", "url": "https://api.github.com/repos/rust-lang/rust/commits/fab7a6a9fd68b66f7ecd2fd1b2f6cfa0277b4413", "html_url": "https://github.com/rust-lang/rust/commit/fab7a6a9fd68b66f7ecd2fd1b2f6cfa0277b4413"}], "stats": {"total": 269, "additions": 203, "deletions": 66}, "files": [{"sha": "871b7578abdc31e9bc3c358ff2bfd922299f9359", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -427,22 +427,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n             }\n         }\n \n-        // Extract from the pointer an `Option<AllocId>` and an offset, which is relative to the\n-        // allocation or (if that is `None`) an absolute address.\n-        let ptr_or_addr = if size.bytes() == 0 {\n-            // Let's see what we can do, but don't throw errors if there's nothing there.\n-            self.ptr_try_get_alloc(ptr)\n-        } else {\n-            // A \"real\" access, we insist on getting an `AllocId`.\n-            Ok(self.ptr_get_alloc(ptr)?)\n-        };\n-        Ok(match ptr_or_addr {\n+        Ok(match self.ptr_try_get_alloc(ptr) {\n             Err(addr) => {\n-                // No memory is actually being accessed.\n-                debug_assert!(size.bytes() == 0);\n-                // Must be non-null.\n-                if addr == 0 {\n-                    throw_ub!(DanglingIntPointer(0, msg))\n+                // We couldn't get a proper allocation. This is only okay if the access size is 0,\n+                // and the address is not null.\n+                if size.bytes() > 0 || addr == 0 {\n+                    throw_ub!(DanglingIntPointer(addr, msg));\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {"}, {"sha": "fa2dad5ce25f054b05067cfdb7c3def2c772a9c8", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -41,6 +41,7 @@\n #![feature(new_uninit)]\n #![feature(nll)]\n #![feature(once_cell)]\n+#![feature(let_chains)]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]"}, {"sha": "5cfd9a5edfb19433adc7f512d26c6beff547ed09", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -896,44 +896,48 @@ pub trait PrettyPrinter<'tcx>:\n             );\n \n             if !generics.is_empty() || !assoc_items.is_empty() {\n-                p!(\"<\");\n                 let mut first = true;\n \n                 for ty in generics {\n-                    if !first {\n+                    if first {\n+                        p!(\"<\");\n+                        first = false;\n+                    } else {\n                         p!(\", \");\n                     }\n                     p!(print(trait_ref.rebind(*ty)));\n-                    first = false;\n                 }\n \n                 for (assoc_item_def_id, term) in assoc_items {\n-                    if !first {\n+                    // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n+                    if let Some(ty) = term.skip_binder().ty() &&\n+                       let ty::Projection(ty::ProjectionTy { item_def_id, .. }) = ty.kind() &&\n+                       Some(*item_def_id) == self.tcx().lang_items().generator_return() {\n+                        continue;\n+                    }\n+\n+                    if first {\n+                        p!(\"<\");\n+                        first = false;\n+                    } else {\n                         p!(\", \");\n                     }\n+\n                     p!(write(\"{} = \", self.tcx().associated_item(assoc_item_def_id).name));\n \n                     match term.skip_binder() {\n                         Term::Ty(ty) => {\n-                            // Skip printing `<[generator@] as Generator<_>>::Return` from async blocks\n-                            if matches!(\n-                              ty.kind(), ty::Projection(ty::ProjectionTy { item_def_id, .. })\n-                              if Some(*item_def_id) == self.tcx().lang_items().generator_return()\n-                            ) {\n-                                p!(\"[async output]\")\n-                            } else {\n-                                p!(print(ty))\n-                            }\n+                            p!(print(ty))\n                         }\n                         Term::Const(c) => {\n                             p!(print(c));\n                         }\n                     };\n-\n-                    first = false;\n                 }\n \n-                p!(\">\");\n+                if !first {\n+                    p!(\">\");\n+                }\n             }\n \n             first = false;"}, {"sha": "b83b0bf1ca52eea50331e7aa1f89d254b47c7c5c", "filename": "compiler/rustc_trait_selection/src/traits/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmisc.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -11,7 +11,7 @@ use crate::traits::error_reporting::InferCtxtExt;\n \n #[derive(Clone)]\n pub enum CopyImplementationError<'tcx> {\n-    InfrigingFields(Vec<&'tcx ty::FieldDef>),\n+    InfrigingFields(Vec<(&'tcx ty::FieldDef, Ty<'tcx>)>),\n     NotAnAdt,\n     HasDestructor,\n }\n@@ -67,7 +67,7 @@ pub fn can_type_implement_copy<'tcx>(\n                 match traits::fully_normalize(&infcx, ctx, cause, param_env, ty) {\n                     Ok(ty) => {\n                         if !infcx.type_is_copy_modulo_regions(param_env, ty, span) {\n-                            infringing.push(field);\n+                            infringing.push((field, ty));\n                         }\n                     }\n                     Err(errors) => {"}, {"sha": "4135fbca06099f118e8783e65ef0b4627e1b431e", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -1270,7 +1270,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // the master cache. Since coherence executes pretty quickly,\n         // it's not worth going to more trouble to increase the\n         // hit-rate, I don't think.\n-        if self.intercrate {\n+        if self.intercrate || self.allow_negative_impls {\n             return false;\n         }\n \n@@ -1287,7 +1287,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // mode, so don't do any caching. In particular, we might\n         // re-use the same `InferCtxt` with both an intercrate\n         // and non-intercrate `SelectionContext`\n-        if self.intercrate {\n+        if self.intercrate || self.allow_negative_impls {\n             return None;\n         }\n         let tcx = self.tcx();"}, {"sha": "1c4fbbbb9bfaf8a71882a6009153043a650ab5c2", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -17,7 +17,7 @@ use rustc_session::lint::builtin::NON_EXHAUSTIVE_OMITTED_PATTERNS;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n-use rustc_span::symbol::{sym, Ident};\n+use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, MultiSpan, DUMMY_SP};\n use rustc_trait_selection::autoderef::Autoderef;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n@@ -1275,7 +1275,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             .filter(|(_, ident)| !used_fields.contains_key(ident))\n             .collect::<Vec<_>>();\n \n-        let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered()) {\n+        let inexistent_fields_err = if !(inexistent_fields.is_empty() || variant.is_recovered())\n+            && !inexistent_fields.iter().any(|field| field.name == kw::Underscore)\n+        {\n             Some(self.error_inexistent_fields(\n                 adt.variant_descr(),\n                 &inexistent_fields,"}, {"sha": "3135e9996ab8b8a7dc798dd604ac8ed09c7bfda3", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -91,8 +91,40 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                 E0204,\n                 \"the trait `Copy` may not be implemented for this type\"\n             );\n-            for span in fields.iter().map(|f| tcx.def_span(f.did)) {\n-                err.span_label(span, \"this field does not implement `Copy`\");\n+            for (field, ty) in fields {\n+                let field_span = tcx.def_span(field.did);\n+                err.span_label(field_span, \"this field does not implement `Copy`\");\n+                // Spin up a new FulfillmentContext, so we can get the _precise_ reason\n+                // why this field does not implement Copy. This is useful because sometimes\n+                // it is not immediately clear why Copy is not implemented for a field, since\n+                // all we point at is the field itself.\n+                tcx.infer_ctxt().enter(|infcx| {\n+                    let mut fulfill_cx = traits::FulfillmentContext::new_ignoring_regions();\n+                    fulfill_cx.register_bound(\n+                        &infcx,\n+                        param_env,\n+                        ty,\n+                        tcx.lang_items().copy_trait().unwrap(),\n+                        traits::ObligationCause::dummy_with_span(field_span),\n+                    );\n+                    for error in fulfill_cx.select_all_or_error(&infcx) {\n+                        let error_predicate = error.obligation.predicate;\n+                        // Only note if it's not the root obligation, otherwise it's trivial and\n+                        // should be self-explanatory (i.e. a field literally doesn't implement Copy).\n+\n+                        // FIXME: This error could be more descriptive, especially if the error_predicate\n+                        // contains a foreign type or if it's a deeply nested type...\n+                        if error_predicate != error.root_obligation.predicate {\n+                            err.span_note(\n+                                error.obligation.cause.span,\n+                                &format!(\n+                                    \"the `Copy` impl for `{}` requires that `{}`\",\n+                                    ty, error_predicate\n+                                ),\n+                            );\n+                        }\n+                    }\n+                });\n             }\n             err.emit();\n         }"}, {"sha": "7bd4f6dbd8ce37c2f2ebe2ca0f70ae017bb8ca24", "filename": "src/test/rustdoc/auto-trait-not-send.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Frustdoc%2Fauto-trait-not-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Frustdoc%2Fauto-trait-not-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauto-trait-not-send.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -0,0 +1,8 @@\n+#![crate_name = \"foo\"]\n+\n+// @has 'foo/struct.Foo.html'\n+// @has - '//*[@id=\"impl-Send\"]' 'impl !Send for Foo'\n+// @has - '//*[@id=\"impl-Sync\"]' 'impl !Sync for Foo'\n+pub struct Foo(*const i8);\n+pub trait Whatever: Send {}\n+impl<T: Send + ?Sized> Whatever for T {}"}, {"sha": "f6c6f90a39378ad316b5ab9dc3915914b2094f88", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -24,7 +24,7 @@ async fn return_targets_async_block_not_async_fn() -> u8 {\n         return 0u8;\n     };\n     let _: &dyn Future<Output = ()> = &block;\n-    //~^ ERROR type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+    //~^ ERROR type mismatch resolving `<impl Future as Future>::Output == ()`\n }\n \n fn no_break_in_async_block() {"}, {"sha": "919904ce3b6a2fd64d19593e47a6288b29531d10", "filename": "src/test/ui/async-await/async-block-control-flow-static-semantics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-block-control-flow-static-semantics.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -31,7 +31,7 @@ LL | |\n LL | | }\n    | |_^ expected `u8`, found `()`\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:26:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;\n@@ -47,7 +47,7 @@ LL | fn return_targets_async_block_not_fn() -> u8 {\n    |    |\n    |    implicitly returns `()` as its body has no tail or `return` expression\n \n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == ()`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == ()`\n   --> $DIR/async-block-control-flow-static-semantics.rs:17:39\n    |\n LL |     let _: &dyn Future<Output = ()> = &block;"}, {"sha": "79834ed7ec1a8fb08d64c5cbdbba08c9a13536ad", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -46,8 +46,8 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           the expected opaque type\n    |                                           the found opaque type\n    |\n-   = note: expected opaque type `impl Future<Output = [async output]>` (`async` closure body)\n-              found opaque type `impl Future<Output = [async output]>` (`async` closure body)\n+   = note: expected opaque type `impl Future` (`async` closure body)\n+              found opaque type `impl Future` (`async` closure body)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "19b90f1d878c71ef92d1675d684bd33c39f39a7f", "filename": "src/test/ui/async-await/issue-67252-unnamed-future.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-67252-unnamed-future.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     spawn(async {\n    |     ^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*mut ()`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*mut ()`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-67252-unnamed-future.rs:20:16\n    |"}, {"sha": "9682a7055e93c4fd16fdd7748c7e87d1853553ea", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -44,13 +44,13 @@ LL |     require_send(send_fut);\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n    = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n    = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "cf023bd0f9705f6a223ada47cbe5045b417b1676", "filename": "src/test/ui/async-await/issues/issue-65436-raw-ptr-not-send.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-65436-raw-ptr-not-send.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -4,7 +4,7 @@ error: future cannot be sent between threads safely\n LL |     assert_send(async {\n    |     ^^^^^^^^^^^ future created by async block is not `Send`\n    |\n-   = help: within `impl Future<Output = [async output]>`, the trait `Send` is not implemented for `*const u8`\n+   = help: within `impl Future`, the trait `Send` is not implemented for `*const u8`\n note: future is not `Send` as this value is used across an await\n   --> $DIR/issue-65436-raw-ptr-not-send.rs:14:35\n    |"}, {"sha": "a83b1d660c34cfb093860520095068a5e83ca7e6", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -14,7 +14,7 @@ LL | async fn foo() {\n    = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n    = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n    = note: required because it appears within the type `from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n-   = note: required because it appears within the type `impl Future<Output = [async output]>`\n+   = note: required because it appears within the type `impl Future`\n    = note: required because it appears within the type `impl Future<Output = ()>`\n note: required by a bound in `gimme_send`\n   --> $DIR/partial-drop-partial-reinit.rs:10:18"}, {"sha": "3d62f059f37cdbc6e29b0081c36eaf676dda7eee", "filename": "src/test/ui/chalkify/bugs/async.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Fbugs%2Fasync.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -28,7 +28,7 @@ note: required by a bound in `from_generator`\n LL |     T: Generator<ResumeTy, Yield = ()>,\n    |                            ^^^^^^^^^^ required by this bound in `from_generator`\n \n-error[E0280]: the requirement `<impl Future<Output = [async output]> as Future>::Output == u32` is not satisfied\n+error[E0280]: the requirement `<impl Future as Future>::Output == u32` is not satisfied\n   --> $DIR/async.rs:7:25\n    |\n LL | async fn foo(x: u32) -> u32 {"}, {"sha": "80bbe387ac719ffd612d7de87104d64abe1be762", "filename": "src/test/ui/coherence/deep-bad-copy-reason.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -0,0 +1,40 @@\n+#![feature(extern_types)]\n+\n+extern \"Rust\" {\n+    type OpaqueListContents;\n+}\n+\n+pub struct ListS<T> {\n+    len: usize,\n+    data: [T; 0],\n+    opaque: OpaqueListContents,\n+}\n+\n+pub struct Interned<'a, T>(&'a T);\n+\n+impl<'a, T> Clone for Interned<'a, T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<'a, T> Copy for Interned<'a, T> {}\n+\n+pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+//~^ NOTE this field does not implement `Copy`\n+//~| NOTE the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n+\n+impl<'tcx, T> Clone for List<'tcx, T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n+impl<'tcx, T> Copy for List<'tcx, T> {}\n+//~^ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn assert_is_copy<T: Copy>() {}\n+\n+fn main() {\n+    assert_is_copy::<List<'static, ()>>();\n+}"}, {"sha": "295538cee60962b94da2a44414709af934bda0c1", "filename": "src/test/ui/coherence/deep-bad-copy-reason.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fdeep-bad-copy-reason.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -0,0 +1,18 @@\n+error[E0204]: the trait `Copy` may not be implemented for this type\n+  --> $DIR/deep-bad-copy-reason.rs:33:15\n+   |\n+LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+   |                          ------------------------ this field does not implement `Copy`\n+...\n+LL | impl<'tcx, T> Copy for List<'tcx, T> {}\n+   |               ^^^^\n+   |\n+note: the `Copy` impl for `Interned<'tcx, ListS<T>>` requires that `OpaqueListContents: Sized`\n+  --> $DIR/deep-bad-copy-reason.rs:23:26\n+   |\n+LL | pub struct List<'tcx, T>(Interned<'tcx, ListS<T>>);\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0204`."}, {"sha": "7606afdc4ff6c7fcb0b96e66aae6c475c3f4fd6c", "filename": "src/test/ui/consts/const-deref-ptr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-deref-ptr.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/const-deref-ptr.rs:4:29\n    |\n LL |     static C: u64 = unsafe {*(0xdeadbeef as *const u64)};\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ 0xdeadbeef is not a valid pointer\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0xdeadbeef is not a valid pointer\n \n error: aborting due to previous error\n "}, {"sha": "df8a80be72cb5dd80ec2ffc5f0ae38875799b183", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops2.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -2,13 +2,13 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:7:26\n    |\n LL | const Z2: i32 = unsafe { *(42 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ 0x2a is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2a is not a valid pointer\n \n error[E0080]: evaluation of constant value failed\n   --> $DIR/const_raw_ptr_ops2.rs:9:26\n    |\n LL | const Z3: i32 = unsafe { *(44 as *const i32) };\n-   |                          ^^^^^^^^^^^^^^^^^^^ 0x2c is not a valid pointer\n+   |                          ^^^^^^^^^^^^^^^^^^^ dereferencing pointer failed: 0x2c is not a valid pointer\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f8c9dca566b93975278849a26b0279f401ccf64d", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.32bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.32bit.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "ded007ce2813979b39d47cf5674c39998867cbbe", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.64bit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.64bit.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -296,7 +296,7 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:135:5\n    |\n LL |     mem::transmute::<_, &dyn Trait>((&92u8, 0usize))\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ null pointer is not a valid pointer for this operation\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ memory access failed: null pointer is not a valid pointer\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/ub-wide-ptr.rs:139:5"}, {"sha": "9c1733e827d1963e9b5efe9850fb7c8f15f5e584", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL |     Some(&mut *(42 as *mut i32))\n    |          ^^^^^^^^^^^^^^^^^^^^^^\n    |          |\n-   |          0x2a is not a valid pointer\n+   |          dereferencing pointer failed: 0x2a is not a valid pointer\n    |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:13:10\n ...\n LL | const A: Option<&mut i32> = helper();"}, {"sha": "e774e38931377953bd97bcc48ad787dc59fbd862", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -130,7 +130,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) as *mut T }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  0x1 is not a valid pointer\n+   |                  pointer arithmetic failed: 0x1 is not a valid pointer\n    |                  inside `ptr::mut_ptr::<impl *mut u8>::offset` at $SRC_DIR/core/src/ptr/mut_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:19:42\n@@ -158,7 +158,7 @@ error[E0080]: evaluation of constant value failed\n LL |         unsafe { intrinsics::offset(self, count) }\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  0x7f..f is not a valid pointer\n+   |                  pointer arithmetic failed: 0x7f..f is not a valid pointer\n    |                  inside `ptr::const_ptr::<impl *const u8>::offset` at $SRC_DIR/core/src/ptr/const_ptr.rs:LL:COL\n    |\n   ::: $DIR/offset_ub.rs:25:47"}, {"sha": "3eb291f0f7014b654f4c5ea926f8ba2aed7b2136", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -2,7 +2,7 @@ error[E0080]: evaluation of constant value failed\n   --> $DIR/E0396-fixed.rs:5:28\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n-   |                            ^^^^^^^^^ 0x5f3759df is not a valid pointer\n+   |                            ^^^^^^^^^ dereferencing pointer failed: 0x5f3759df is not a valid pointer\n \n error: aborting due to previous error\n "}, {"sha": "3e607d4004e8510faee45646dcaba96535e78ce2", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -1,4 +1,4 @@\n-error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n+error[E0271]: type mismatch resolving `<impl Future as Future>::Output == impl Stream<Item = Repr>`\n   --> $DIR/issue-89008.rs:39:43\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;"}, {"sha": "1841d7b3d372d6cdc2067a6760a540313227d8e2", "filename": "src/test/ui/impl-trait/issue-55872-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -12,7 +12,7 @@ impl<S> Bar for S {\n     type E = impl std::marker::Copy;\n     fn foo<T>() -> Self::E {\n         //~^ ERROR type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n-        //~| ERROR the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+        //~| ERROR the trait bound `impl Future: Copy` is not satisfied\n         async {}\n     }\n }"}, {"sha": "76122e60c4cb6eb5d952811a6b57e669c788bb89", "filename": "src/test/ui/impl-trait/issue-55872-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissue-55872-2.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `impl Future<Output = [async output]>: Copy` is not satisfied\n+error[E0277]: the trait bound `impl Future: Copy` is not satisfied\n   --> $DIR/issue-55872-2.rs:13:20\n    |\n LL |     fn foo<T>() -> Self::E {\n-   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future<Output = [async output]>`\n+   |                    ^^^^^^^ the trait `Copy` is not implemented for `impl Future`\n \n error: type parameter `T` is part of concrete type but not used in parameter list for the `impl Trait` type alias\n   --> $DIR/issue-55872-2.rs:13:28"}, {"sha": "86bde9a0cddab967e843d72c87f133d05165caef", "filename": "src/test/ui/impl-trait/issues/issue-78722.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fissues%2Fissue-78722.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -15,7 +15,7 @@ LL | pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                           ------------------------------- the found opaque type\n    |\n    = note: expected opaque type `impl Future<Output = u8>`\n-              found opaque type `impl Future<Output = [async output]>`\n+              found opaque type `impl Future`\n    = note: distinct uses of `impl Trait` result in different opaque types\n \n error: aborting due to previous error"}, {"sha": "91fed81eaeff6927e99aada93a1603a4ade43b93", "filename": "src/test/ui/pattern/non-structural-match-types.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fnon-structural-match-types.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -4,7 +4,7 @@ error: `[closure@$DIR/non-structural-match-types.rs:9:17: 9:22]` cannot be used\n LL |         const { || {} } => {},\n    |         ^^^^^^^^^^^^^^^\n \n-error: `impl Future<Output = [async output]>` cannot be used in patterns\n+error: `impl Future` cannot be used in patterns\n   --> $DIR/non-structural-match-types.rs:12:9\n    |\n LL |         const { async {} } => {},"}, {"sha": "c30b8a1e1f1a7c3bd74f599c7f7e3feae8d87e5f", "filename": "src/test/ui/structs-enums/struct-enum-ignoring-field-with-underscore.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.rs?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -0,0 +1,12 @@\n+enum Foo {\n+    Bar { bar: bool },\n+    Other,\n+}\n+\n+fn main() {\n+    let foo = Some(Foo::Other);\n+\n+    if let Some(Foo::Bar {_}) = foo {}\n+    //~^ ERROR expected identifier, found reserved identifier `_`\n+    //~| ERROR pattern does not mention field `bar` [E0027]\n+}"}, {"sha": "16f751444a558c6d67cd2a567e32d3747b031ddf", "filename": "src/test/ui/structs-enums/struct-enum-ignoring-field-with-underscore.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Fstruct-enum-ignoring-field-with-underscore.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -0,0 +1,24 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/struct-enum-ignoring-field-with-underscore.rs:9:27\n+   |\n+LL |     if let Some(Foo::Bar {_}) = foo {}\n+   |                           ^ expected identifier, found reserved identifier\n+\n+error[E0027]: pattern does not mention field `bar`\n+  --> $DIR/struct-enum-ignoring-field-with-underscore.rs:9:17\n+   |\n+LL |     if let Some(Foo::Bar {_}) = foo {}\n+   |                 ^^^^^^^^^^^^ missing field `bar`\n+   |\n+help: include the missing field in the pattern\n+   |\n+LL |     if let Some(Foo::Bar {_, bar }) = foo {}\n+   |                            ~~~~~~~\n+help: if you don't care about this missing field, you can explicitly ignore it\n+   |\n+LL |     if let Some(Foo::Bar {_, .. }) = foo {}\n+   |                            ~~~~~~\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0027`."}, {"sha": "7ef4895249cec7218f08a5836b9dd9edc0d817c2", "filename": "src/test/ui/suggestions/expected-boxed-future-isnt-pinned.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fexpected-boxed-future-isnt-pinned.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -81,7 +81,7 @@ LL |   pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n    |                                             ------------------------------- the found opaque type\n    |\n    = note:   expected struct `Pin<Box<(dyn Future<Output = i32> + Send + 'static)>>`\n-           found opaque type `impl Future<Output = [async output]>`\n+           found opaque type `impl Future`\n help: you need to pin and box this expression\n    |\n LL ~     Box::pin(async {"}, {"sha": "279808dd55bb4dea18fbaa79ccbbcc66d351fb9b", "filename": "src/test/ui/union/union-copy.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37b55c8a0cafdb60b9168da34f904acc70157df8/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-copy.stderr?ref=37b55c8a0cafdb60b9168da34f904acc70157df8", "patch": "@@ -6,6 +6,12 @@ LL |     a: std::mem::ManuallyDrop<String>\n ...\n LL | impl Copy for W {}\n    |      ^^^^\n+   |\n+note: the `Copy` impl for `ManuallyDrop<String>` requires that `String: Copy`\n+  --> $DIR/union-copy.rs:8:5\n+   |\n+LL |     a: std::mem::ManuallyDrop<String>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}]}