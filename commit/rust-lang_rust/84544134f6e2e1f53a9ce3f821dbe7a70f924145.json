{"sha": "84544134f6e2e1f53a9ce3f821dbe7a70f924145", "node_id": "C_kwDOAAsO6NoAKDg0NTQ0MTM0ZjZlMmUxZjUzYTljZTNmODIxZGJlN2E3MGY5MjQxNDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T06:29:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-20T06:29:06Z"}, "message": "Auto merge of #12811 - TopGunSnake:12790, r=Veykril\n\nfix: Insert `pub(crate)` after doc comments and attribute macros\n\nFixes #12790\n\nOriginal behavior was to insert `pub(crate)` at the `first_child_or_token`, which for an item with a comment or attribute macro, would put the visibility marker before the comment or macro, instead of after.\n\nThis merge request alters the call to find the node with appropriate `SyntaxKind` in the `children_or_tokens`. It also adds a test case to the module to verify the behavior. Test case verifies function, module, records, enum, impl, trait, and type cases.", "tree": {"sha": "7f1f4690b8fb568151f98997df144419b8daaa37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f1f4690b8fb568151f98997df144419b8daaa37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "html_url": "https://github.com/rust-lang/rust/commit/84544134f6e2e1f53a9ce3f821dbe7a70f924145", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84544134f6e2e1f53a9ce3f821dbe7a70f924145/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c001b9cb06fdc24a2e69347a7f732ee58b434cf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c001b9cb06fdc24a2e69347a7f732ee58b434cf3", "html_url": "https://github.com/rust-lang/rust/commit/c001b9cb06fdc24a2e69347a7f732ee58b434cf3"}, {"sha": "6df414faa25ffbf5379c18ff054c7cd1913df66b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6df414faa25ffbf5379c18ff054c7cd1913df66b", "html_url": "https://github.com/rust-lang/rust/commit/6df414faa25ffbf5379c18ff054c7cd1913df66b"}], "stats": {"total": 190, "additions": 188, "deletions": 2}, "files": [{"sha": "154856df54823c91e929c10f312203739c0b8d81", "filename": "crates/ide-assists/src/handlers/extract_module.rs", "status": "modified", "additions": 188, "deletions": 2, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/84544134f6e2e1f53a9ce3f821dbe7a70f924145/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84544134f6e2e1f53a9ce3f821dbe7a70f924145/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_module.rs?ref=84544134f6e2e1f53a9ce3f821dbe7a70f924145", "patch": "@@ -19,7 +19,7 @@ use syntax::{\n         make, HasName, HasVisibility,\n     },\n     match_ast, ted, AstNode, SourceFile,\n-    SyntaxKind::WHITESPACE,\n+    SyntaxKind::{self, WHITESPACE},\n     SyntaxNode, TextRange,\n };\n \n@@ -380,7 +380,16 @@ impl Module {\n         }\n \n         for (vis, syntax) in replacements {\n-            add_change_vis(vis, syntax.first_child_or_token());\n+            let item = syntax.children_with_tokens().find(|node_or_token| {\n+                match node_or_token.kind() {\n+                    // We're skipping comments, doc comments, and attribute macros that may precede the keyword\n+                    // that the visibility should be placed before.\n+                    SyntaxKind::COMMENT | SyntaxKind::ATTR | SyntaxKind::WHITESPACE => false,\n+                    _ => true,\n+                }\n+            });\n+\n+            add_change_vis(vis, item);\n         }\n     }\n \n@@ -1581,4 +1590,181 @@ mod modname {\n         \",\n         )\n     }\n+\n+    #[test]\n+    fn test_issue_12790() {\n+        check_assist(\n+            extract_module,\n+            r\"\n+            $0/// A documented function\n+            fn documented_fn() {}\n+\n+            // A commented function with a #[] attribute macro\n+            #[cfg(test)]\n+            fn attribute_fn() {}\n+\n+            // A normally commented function\n+            fn normal_fn() {}\n+\n+            /// A documented Struct\n+            struct DocumentedStruct {\n+                // Normal field\n+                x: i32,\n+\n+                /// Documented field\n+                y: i32,\n+\n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+\n+            // A macroed Struct\n+            #[cfg(test)]\n+            struct MacroedStruct {\n+                // Normal field\n+                x: i32,\n+\n+                /// Documented field\n+                y: i32,\n+\n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+\n+            // A normal Struct\n+            struct NormalStruct {\n+                // Normal field\n+                x: i32,\n+\n+                /// Documented field\n+                y: i32,\n+\n+                // Macroed field\n+                #[cfg(test)]\n+                z: i32,\n+            }\n+\n+            /// A documented type\n+            type DocumentedType = i32;\n+\n+            // A macroed type\n+            #[cfg(test)]\n+            type MacroedType = i32;\n+\n+            /// A module to move\n+            mod module {}\n+\n+            /// An impl to move\n+            impl NormalStruct {\n+                /// A method\n+                fn new() {}\n+            }\n+\n+            /// A documented trait\n+            trait DocTrait {\n+                /// Inner function\n+                fn doc() {}\n+            }\n+\n+            /// An enum\n+            enum DocumentedEnum {\n+                /// A variant\n+                A,\n+                /// Another variant\n+                B { x: i32, y: i32 }\n+            }\n+\n+            /// Documented const\n+            const MY_CONST: i32 = 0;$0\n+        \",\n+            r\"\n+            mod modname {\n+                /// A documented function\n+                pub(crate) fn documented_fn() {}\n+\n+                // A commented function with a #[] attribute macro\n+                #[cfg(test)]\n+                pub(crate) fn attribute_fn() {}\n+\n+                // A normally commented function\n+                pub(crate) fn normal_fn() {}\n+\n+                /// A documented Struct\n+                pub(crate) struct DocumentedStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+\n+                    /// Documented field\n+                    pub(crate) y: i32,\n+\n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+\n+                // A macroed Struct\n+                #[cfg(test)]\n+                pub(crate) struct MacroedStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+\n+                    /// Documented field\n+                    pub(crate) y: i32,\n+\n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+\n+                // A normal Struct\n+                pub(crate) struct NormalStruct {\n+                    // Normal field\n+                    pub(crate) x: i32,\n+\n+                    /// Documented field\n+                    pub(crate) y: i32,\n+\n+                    // Macroed field\n+                    #[cfg(test)]\n+                    pub(crate) z: i32,\n+                }\n+\n+                /// A documented type\n+                pub(crate) type DocumentedType = i32;\n+\n+                // A macroed type\n+                #[cfg(test)]\n+                pub(crate) type MacroedType = i32;\n+\n+                /// A module to move\n+                pub(crate) mod module {}\n+\n+                /// An impl to move\n+                impl NormalStruct {\n+                    /// A method\n+                    pub(crate) fn new() {}\n+                }\n+\n+                /// A documented trait\n+                pub(crate) trait DocTrait {\n+                    /// Inner function\n+                    fn doc() {}\n+                }\n+\n+                /// An enum\n+                pub(crate) enum DocumentedEnum {\n+                    /// A variant\n+                    A,\n+                    /// Another variant\n+                    B { x: i32, y: i32 }\n+                }\n+\n+                /// Documented const\n+                pub(crate) const MY_CONST: i32 = 0;\n+            }\n+        \",\n+        )\n+    }\n }"}]}