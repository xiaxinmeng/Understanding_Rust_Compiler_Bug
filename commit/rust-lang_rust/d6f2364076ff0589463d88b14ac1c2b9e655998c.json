{"sha": "d6f2364076ff0589463d88b14ac1c2b9e655998c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ZjIzNjQwNzZmZjA1ODk0NjNkODhiMTRhYzFjMmI5ZTY1NTk5OGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T21:43:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-04T21:43:51Z"}, "message": "auto merge of #8260 : omasanori/rust/fix-extra-unicode, r=pcwalton\n\nWIth this patch `RUSTFLAGS='--cfg unicode' make check\"` passed successfully.\r\n\r\n* Why doesn't `#[link_name=\"icuuc\"]` make libextra to link against libicuuc.so?\r\n* In `extra::unicode::tests`, `use unicode; unicode::is_foo('a')` failed but `use unicode::*; is_foo('a')` succeeded. Is it right?", "tree": {"sha": "29929fb0f954dcd0c351c32c6de5ad9d84ed61ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29929fb0f954dcd0c351c32c6de5ad9d84ed61ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6f2364076ff0589463d88b14ac1c2b9e655998c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2364076ff0589463d88b14ac1c2b9e655998c", "html_url": "https://github.com/rust-lang/rust/commit/d6f2364076ff0589463d88b14ac1c2b9e655998c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6f2364076ff0589463d88b14ac1c2b9e655998c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d14470be4194656e2f71120f232f9349e896711", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d14470be4194656e2f71120f232f9349e896711", "html_url": "https://github.com/rust-lang/rust/commit/3d14470be4194656e2f71120f232f9349e896711"}, {"sha": "c1ad16db5a3b4774c7698a5cdb1433df2366b5b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1ad16db5a3b4774c7698a5cdb1433df2366b5b9", "html_url": "https://github.com/rust-lang/rust/commit/c1ad16db5a3b4774c7698a5cdb1433df2366b5b9"}], "stats": {"total": 51, "additions": 33, "deletions": 18}, "files": [{"sha": "3957551c846399df89eb2641051280f2d88d5a3b", "filename": "src/libextra/unicode.rs", "status": "modified", "additions": 33, "deletions": 18, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d6f2364076ff0589463d88b14ac1c2b9e655998c/src%2Flibextra%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6f2364076ff0589463d88b14ac1c2b9e655998c/src%2Flibextra%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Funicode.rs?ref=d6f2364076ff0589463d88b14ac1c2b9e655998c", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[forbid(deprecated_mode)];\n #[allow(missing_doc)];\n \n pub mod icu {\n@@ -159,7 +158,10 @@ pub mod icu {\n     pub static UCHAR_INVALID_CODE : UProperty = -1;\n \n     pub mod libicu {\n-        #[link_name = \"icuuc\"]\n+        use unicode::icu::*;\n+\n+        // #[link_name = \"icuuc\"]\n+        #[link_args = \"-licuuc\"]\n         #[abi = \"cdecl\"]\n         extern {\n             pub fn u_hasBinaryProperty(c: UChar32, which: UProperty) -> UBool;\n@@ -174,13 +176,17 @@ pub mod icu {\n }\n \n pub fn is_XID_start(c: char) -> bool {\n-    return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n-        == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n+            == icu::TRUE;\n+    }\n }\n \n pub fn is_XID_continue(c: char) -> bool {\n-    return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n-        == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_hasBinaryProperty(c, icu::UCHAR_XID_START)\n+            == icu::TRUE;\n+    }\n }\n \n /*\n@@ -189,7 +195,9 @@ Function: is_digit\n Returns true if a character is a digit.\n */\n pub fn is_digit(c: char) -> bool {\n-    return icu::libicu::u_isdigit(c) == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_isdigit(c) == icu::TRUE;\n+    }\n }\n \n /*\n@@ -198,7 +206,9 @@ Function: is_lower\n Returns true if a character is a lowercase letter.\n */\n pub fn is_lower(c: char) -> bool {\n-    return icu::libicu::u_islower(c) == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_islower(c) == icu::TRUE;\n+    }\n }\n \n /*\n@@ -207,7 +217,9 @@ Function: is_space\n Returns true if a character is space.\n */\n pub fn is_space(c: char) -> bool {\n-    return icu::libicu::u_isspace(c) == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_isspace(c) == icu::TRUE;\n+    }\n }\n \n /*\n@@ -216,33 +228,36 @@ Function: is_upper\n Returns true if a character is an uppercase letter.\n */\n pub fn is_upper(c: char) -> bool {\n-    return icu::libicu::u_isupper(c) == icu::TRUE;\n+    unsafe {\n+        return icu::libicu::u_isupper(c) == icu::TRUE;\n+    }\n }\n \n #[cfg(test)]\n mod tests {\n+    use unicode::*;\n \n     #[test]\n     fn test_is_digit() {\n-        assert!((unicode::icu::is_digit('0')));\n-        assert!((!unicode::icu::is_digit('m')));\n+        assert!((is_digit('0')));\n+        assert!((!is_digit('m')));\n     }\n \n     #[test]\n     fn test_is_lower() {\n-        assert!((unicode::icu::is_lower('m')));\n-        assert!((!unicode::icu::is_lower('M')));\n+        assert!((is_lower('m')));\n+        assert!((!is_lower('M')));\n     }\n \n     #[test]\n     fn test_is_space() {\n-        assert!((unicode::icu::is_space(' ')));\n-        assert!((!unicode::icu::is_space('m')));\n+        assert!((is_space(' ')));\n+        assert!((!is_space('m')));\n     }\n \n     #[test]\n     fn test_is_upper() {\n-        assert!((unicode::icu::is_upper('M')));\n-        assert!((!unicode::icu::is_upper('m')));\n+        assert!((is_upper('M')));\n+        assert!((!is_upper('m')));\n     }\n }"}]}