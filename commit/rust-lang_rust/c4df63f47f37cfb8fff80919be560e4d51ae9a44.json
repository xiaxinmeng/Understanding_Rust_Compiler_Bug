{"sha": "c4df63f47f37cfb8fff80919be560e4d51ae9a44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZGY2M2Y0N2YzN2NmYjhmZmY4MDkxOWJlNTYwZTRkNTFhZTlhNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T23:44:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-17T23:44:46Z"}, "message": "Auto merge of #80537 - ehuss:macos-posix-spawn-chdir, r=dtolnay\n\nDon't use posix_spawn_file_actions_addchdir_np on macOS.\n\nThere is a bug on macOS where using `posix_spawn_file_actions_addchdir_np` with a relative executable path will cause `posix_spawnp` to return ENOENT, even though it successfully spawned the process in the given directory.\n\n`posix_spawn_file_actions_addchdir_np` was introduced in macOS 10.15 first released in Oct 2019.  I have tested macOS 10.15.7 and 11.0.1.\n\nExample offending program:\n\n```rust\nuse std::fs;\nuse std::os::unix::fs::PermissionsExt;\nuse std::process::*;\n\nfn main() {\n    fs::create_dir_all(\"bar\").unwrap();\n    fs::create_dir_all(\"foo\").unwrap();\n    fs::write(\"foo/foo.sh\", \"#!/bin/sh\\necho hello ${PWD}\\n\").unwrap();\n    let perms = fs::Permissions::from_mode(0o755);\n    fs::set_permissions(\"foo/foo.sh\", perms).unwrap();\n    let c = Command::new(\"../foo/foo.sh\").current_dir(\"bar\").spawn();\n    eprintln!(\"{:?}\", c);\n}\n```\n\nThis prints:\n\n```\nErr(Os { code: 2, kind: NotFound, message: \"No such file or directory\" })\nhello /Users/eric/Temp/bar\n```\n\nI wanted to open this PR to get some feedback on possible solutions.  Alternatives:\n* Do nothing.\n* Document the bug.\n* Try to detect if the executable is a relative path on macOS, and avoid using `posix_spawn_file_actions_addchdir_np` only in that case.\n\nI looked at the [XNU source code](https://opensource.apple.com/source/xnu/xnu-6153.141.1/bsd/kern/kern_exec.c.auto.html), but I didn't see anything obvious that would explain the behavior.  The actual chdir succeeds, it is something else further down that fails, but I couldn't see where.\n\nEDIT: I forgot to mention, relative exe paths with `current_dir` in general are discouraged (see #37868).  I don't know if #37868 is fixable, since normalizing it would change the semantics for some platforms. Another option is to convert the executable to an absolute path with something like joining the cwd with the new cwd and the executable, but I'm uncertain about that.", "tree": {"sha": "353d80478a7bd778ed0314eed0915514590b9a2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/353d80478a7bd778ed0314eed0915514590b9a2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4df63f47f37cfb8fff80919be560e4d51ae9a44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4df63f47f37cfb8fff80919be560e4d51ae9a44", "html_url": "https://github.com/rust-lang/rust/commit/c4df63f47f37cfb8fff80919be560e4d51ae9a44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4df63f47f37cfb8fff80919be560e4d51ae9a44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4253153db205251f72ea4493687a31e04a2a8ca0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4253153db205251f72ea4493687a31e04a2a8ca0", "html_url": "https://github.com/rust-lang/rust/commit/4253153db205251f72ea4493687a31e04a2a8ca0"}, {"sha": "6e467b74cda020f89f1663deda5169f85d859c6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e467b74cda020f89f1663deda5169f85d859c6d", "html_url": "https://github.com/rust-lang/rust/commit/6e467b74cda020f89f1663deda5169f85d859c6d"}], "stats": {"total": 67, "additions": 63, "deletions": 4}, "files": [{"sha": "ddcb404c60ebc0ba08c765f898438e2892d10fe1", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4df63f47f37cfb8fff80919be560e4d51ae9a44/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4df63f47f37cfb8fff80919be560e4d51ae9a44/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c4df63f47f37cfb8fff80919be560e4d51ae9a44", "patch": "@@ -314,10 +314,20 @@ impl Command {\n             ) -> libc::c_int\n         }\n         let addchdir = match self.get_cwd() {\n-            Some(cwd) => match posix_spawn_file_actions_addchdir_np.get() {\n-                Some(f) => Some((f, cwd)),\n-                None => return Ok(None),\n-            },\n+            Some(cwd) => {\n+                if cfg!(target_os = \"macos\") {\n+                    // There is a bug in macOS where a relative executable\n+                    // path like \"../myprogram\" will cause `posix_spawn` to\n+                    // successfully launch the program, but erroneously return\n+                    // ENOENT when used with posix_spawn_file_actions_addchdir_np\n+                    // which was introduced in macOS 10.15.\n+                    return Ok(None);\n+                }\n+                match posix_spawn_file_actions_addchdir_np.get() {\n+                    Some(f) => Some((f, cwd)),\n+                    None => return Ok(None),\n+                }\n+            }\n             None => None,\n         };\n "}, {"sha": "91d8e4f381a368af580596eacf6a6bd236212725", "filename": "src/test/ui/command/command-current-dir.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/c4df63f47f37cfb8fff80919be560e4d51ae9a44/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4df63f47f37cfb8fff80919be560e4d51ae9a44/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcommand%2Fcommand-current-dir.rs?ref=c4df63f47f37cfb8fff80919be560e4d51ae9a44", "patch": "@@ -0,0 +1,49 @@\n+// run-pass\n+// ignore-emscripten no processes\n+// ignore-sgx no processes\n+\n+use std::env;\n+use std::fs;\n+use std::path::Path;\n+use std::process::Command;\n+\n+fn main() {\n+    // Checks the behavior of current_dir when used with a relative exe path.\n+    let me = env::current_exe().unwrap();\n+    if matches!(env::args().skip(1).next().as_deref(), Some(\"current-dir\")) {\n+        let cwd = env::current_dir().unwrap();\n+        assert_eq!(cwd.file_name().unwrap(), \"bar\");\n+        std::process::exit(0);\n+    }\n+    let exe = me.file_name().unwrap();\n+    let cwd = me.parent().unwrap();\n+    eprintln!(\"cwd={:?}\", cwd);\n+    // Change directory to where the exectuable is located, since this test\n+    // fundamentally needs to use relative paths. In some cases (like\n+    // remote-test-server), the current_dir can be somewhere else, so make\n+    // sure it is something we can use. We assume we can write to this\n+    // directory.\n+    env::set_current_dir(&cwd).unwrap();\n+    let foo = cwd.join(\"foo\");\n+    let bar = cwd.join(\"bar\");\n+    fs::create_dir_all(&foo).unwrap();\n+    fs::create_dir_all(&bar).unwrap();\n+    fs::copy(&me, foo.join(exe)).unwrap();\n+\n+    // Unfortunately this is inconsistent based on the platform, see\n+    // https://github.com/rust-lang/rust/issues/37868. On Windows,\n+    // it is relative *before* changing the directory, and on Unix\n+    // it is *after* changing the directory.\n+    let relative_exe = if cfg!(windows) {\n+        Path::new(\"foo\").join(exe)\n+    } else {\n+        Path::new(\"../foo\").join(exe)\n+    };\n+\n+    let status = Command::new(relative_exe)\n+        .arg(\"current-dir\")\n+        .current_dir(\"bar\")\n+        .status()\n+        .unwrap();\n+    assert!(status.success());\n+}"}]}