{"sha": "de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNGJkOWYwZjhhZWI0Yjg5ZTU1YmEzM2I3NTVjOWE5M2U5OTllMWM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-21T21:52:52Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:05Z"}, "message": "Attach `TokenStream` to `ast::Block`\n\nA `Block` does not have outer attributes, so we only capture tokens when\nparsing a `macro_rules!` matcher", "tree": {"sha": "05cc6034e654ed16e2c7c7dfc5e6f8999b1a2223", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05cc6034e654ed16e2c7c7dfc5e6f8999b1a2223"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5EACgkQtAh+UQ6Y\nsWRVsg//ZYy/uBt/N+hc55OK+PvsDpKobKJYOOh/AWkr9P96VZTCrLpgzQe7c/n6\nojdI2Z9wFpDw9k3jWLL+LCr9Woe7MUF/vUrhF7R/k/eicn3vtHvsKmTdMA800l24\nbT+CrdfO+EzkgzO1pl0qVyCxH2GYymNUuljAJDDiGQC6Uwy1n6sZYR5Iypg/SlbW\n206f9jVPcFxmLBgVWLKrSGQErlY7izOk4nyzrpEjke/Ggwu4RWp49ulGreDZ63lP\npRzPLjzsgZ758vf00kKMq8gQWg8fXi7FOlbRAj8Q/sMbfLhaUsUuCmX0w279feBt\n8zCyboNkznnCwNsc7M4EFqWMuxb7kg9ZbzgjDD4g2UcXg3zTHAiASYppLMPa97hA\nrUWTWecnhBpG6PnrmeRopp6bo5eeOIkvJ/XdX7gvjvnIQI9Sw6ffwoSaPh9pm302\nLpcgjBXO1jt38rDJRSA+4zcXmgjcqAGU5NRgZpfyilAdtt7RKBJhvrAURLav3QRl\nFKV4gYAOcZ+ZAPeGJRH1+o1xWs24b3Ds21cEaheZ/vF+0jE41G3NGT69mR5Cv65G\niM4Qk716mLhiFe1g2wC3evZGR2zYLYah+1e36T4k+b/6LQj7cIi2V3kcpsPTLK5K\nskV/5wnVTBTWqobyDkVknffjKLNpkKMVupkJG7eLFX23q0/yyio=\n=9Hey\n-----END PGP SIGNATURE-----", "payload": "tree 05cc6034e654ed16e2c7c7dfc5e6f8999b1a2223\nparent ad3a6f70ac9457173aa1f3f3af372aadec915f8d\nauthor Aaron Hill <aa1ronham@gmail.com> 1598046772 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773585 -0400\n\nAttach `TokenStream` to `ast::Block`\n\nA `Block` does not have outer attributes, so we only capture tokens when\nparsing a `macro_rules!` matcher\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "html_url": "https://github.com/rust-lang/rust/commit/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3a6f70ac9457173aa1f3f3af372aadec915f8d", "html_url": "https://github.com/rust-lang/rust/commit/ad3a6f70ac9457173aa1f3f3af372aadec915f8d"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "8fbf5ccf5acc9bd677dd296a52f25f1d786550fb", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -540,6 +540,7 @@ pub struct Block {\n     /// Distinguishes between `unsafe { ... }` and `{ ... }`.\n     pub rules: BlockCheckMode,\n     pub span: Span,\n+    pub tokens: Option<TokenStream>,\n }\n \n /// A match pattern."}, {"sha": "3e86528fcefe8c41cc095769ba2daf6dc4089f98", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -871,7 +871,7 @@ pub fn noop_visit_mt<T: MutVisitor>(MutTy { ty, mutbl: _ }: &mut MutTy, vis: &mu\n }\n \n pub fn noop_visit_block<T: MutVisitor>(block: &mut P<Block>, vis: &mut T) {\n-    let Block { id, stmts, rules: _, span } = block.deref_mut();\n+    let Block { id, stmts, rules: _, span, tokens: _ } = block.deref_mut();\n     vis.visit_id(id);\n     stmts.flat_map_in_place(|stmt| vis.flat_map_stmt(stmt));\n     vis.visit_span(span);"}, {"sha": "9c8e0fc2f016ccef14eb39ee1e048b82c783d024", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -75,6 +75,7 @@ fn call_intrinsic(\n         id: ast::DUMMY_NODE_ID,\n         rules: ast::BlockCheckMode::Unsafe(ast::CompilerGenerated),\n         span,\n+        tokens: None,\n     }))\n }\n "}, {"sha": "717c4e9406c99aff7e3774c019b0705f048c80f8", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -207,7 +207,13 @@ impl<'a> ExtCtxt<'a> {\n         )\n     }\n     pub fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n-        P(ast::Block { stmts, id: ast::DUMMY_NODE_ID, rules: BlockCheckMode::Default, span })\n+        P(ast::Block {\n+            stmts,\n+            id: ast::DUMMY_NODE_ID,\n+            rules: BlockCheckMode::Default,\n+            span,\n+            tokens: None,\n+        })\n     }\n \n     pub fn expr(&self, span: Span, kind: ast::ExprKind) -> P<ast::Expr> {"}, {"sha": "01441cafe8a93ee0fa2b190174c9252c68d82539", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -693,6 +693,7 @@ impl<'a> MutVisitor for ReplaceBodyWithLoop<'a, '_> {\n                 rules,\n                 id: resolver.next_node_id(),\n                 span: rustc_span::DUMMY_SP,\n+                tokens: None,\n             }\n         }\n "}, {"sha": "65ded67dcf6160aae2faab5b4c8a589e63a6064e", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -268,6 +268,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n         Nonterminal::NtItem(ref item) => {\n             prepend_attrs(sess, &item.attrs, item.tokens.as_ref(), span)\n         }\n+        Nonterminal::NtBlock(ref block) => block.tokens.clone(),\n         Nonterminal::NtPat(ref pat) => pat.tokens.clone(),\n         Nonterminal::NtIdent(ident, is_raw) => {\n             Some(tokenstream::TokenTree::token(token::Ident(ident.name, is_raw), ident.span).into())"}, {"sha": "47ed98b85994ef40b6c57e58fc98341058764222", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -111,7 +111,14 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, \"expected an item keyword\"));\n                 }\n             },\n-            NonterminalKind::Block => token::NtBlock(self.parse_block()?),\n+            NonterminalKind::Block => {\n+                let (mut block, tokens) = self.collect_tokens(|this| this.parse_block())?;\n+                // We have have eaten an NtBlock, which could already have tokens\n+                if block.tokens.is_none() {\n+                    block.tokens = Some(tokens);\n+                }\n+                token::NtBlock(block)\n+            }\n             NonterminalKind::Stmt => match self.parse_stmt()? {\n                 Some(s) => token::NtStmt(s),\n                 None => return Err(self.struct_span_err(self.token.span, \"expected a statement\")),"}, {"sha": "6cc42487684bd6a8112e31ef234777a628373ba8", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=de4bd9f0f8aeb4b89e55ba33b755c9a93e999e1c", "patch": "@@ -411,7 +411,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub(super) fn mk_block(&self, stmts: Vec<Stmt>, rules: BlockCheckMode, span: Span) -> P<Block> {\n-        P(Block { stmts, id: DUMMY_NODE_ID, rules, span })\n+        P(Block { stmts, id: DUMMY_NODE_ID, rules, span, tokens: None })\n     }\n \n     pub(super) fn mk_stmt(&self, span: Span, kind: StmtKind) -> Stmt {"}]}