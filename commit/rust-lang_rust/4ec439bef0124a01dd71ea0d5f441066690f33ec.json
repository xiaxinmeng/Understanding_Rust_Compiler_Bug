{"sha": "4ec439bef0124a01dd71ea0d5f441066690f33ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYzQzOWJlZjAxMjRhMDFkZDcxZWEwZDVmNDQxMDY2NjkwZjMzZWM=", "commit": {"author": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-14T20:04:37Z"}, "committer": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-19T16:28:10Z"}, "message": "Revisiting indexing_slicing test cases\n\nThis commit contains a few changes. In an attempt to clarify which test cases should and should not produce stderr it became clear that some cases were being handled incorrectly. In order to address these test cases, a minor re-factor was made to the linting logic itself.\n\nThe re-factor was driven by edge case handling including a need for additional match conditions for `ExprCall` (`&x[0..=4]`) and `ExprBinary` (`x[1 << 3]`). Rather than attempt to account for each potential `Expr*` the code was re-factored into simply \"if ranged index\" and an \"otherwise\" conditions.", "tree": {"sha": "47eaf55d4ab7614232ff8589474391e6ab4346b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47eaf55d4ab7614232ff8589474391e6ab4346b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ec439bef0124a01dd71ea0d5f441066690f33ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbKS8bAAoJEBfrkSLclYZDbUAP/1gYYkbLLx5DePT8X5SHxerF\n0duviIaXNf1R6DKiRXfDvZbDZAxsK/m4hUVGRegrWiD2nZNKSyLkIWY4YjTaz2cJ\nVAz93ox7HH4hC9E5Bs/cnqSXz0qJIwrj3YEIUiukpMlpbird+QTR0UsKJ8bzn6Jk\n9dC1lbNRmoNO9l+Hk/XH2/vIg3/KXESZVgxQpePYQaUmELsbK7qJD8QI9y9iCKIt\nz73YK4KBf4eqzR3LilAl86hJjN1fxhD62F8cyZ4WuuVAi1arYgiNnsbJhmBmxwQn\nZSce032ur2xB+neG0331tm+EVy1O3misZznsEItNjSZRtkJLK840uGH9tuVd0D1t\nY/61zB6WNfakHLz5gMR23yBDoaFutw+fTxBbmAYn/dbHNxCvmSCFZ8MaNAOIhPc1\nD9rBswNV1xY+3hfnh8JieLX41gUPZMzBLhzhxpJNMx2E6355PHuYxpz5SJ4vdo5R\nMeT4j/gzrOzm370OCk4TCE31EOA9my97EkwbbJv7tNgmmcBHqOE1WGZKuyQVtOZ2\npU4+D+U/ReuSLPNgW7bYA0DeebkhDEYR245Gbxyqoq9spL00Wxl3oRfpaVE3MtIk\nmF4nzsmk80tblKFMDKAg4PqKKOnldyvwF5UDAyOQUYn/pqGU3avQuQ01db3QoVcq\nr0WiOuSrVXEBCnhjOFXz\n=Tj4l\n-----END PGP SIGNATURE-----", "payload": "tree 47eaf55d4ab7614232ff8589474391e6ab4346b5\nparent 8b59542acc9901a6568731541baa9f623c1991b3\nauthor Shea Newton <shnewto@gmail.com> 1529006677 +0000\ncommitter Shea Newton <shnewto@gmail.com> 1529425690 +0000\n\nRevisiting indexing_slicing test cases\n\nThis commit contains a few changes. In an attempt to clarify which test cases should and should not produce stderr it became clear that some cases were being handled incorrectly. In order to address these test cases, a minor re-factor was made to the linting logic itself.\n\nThe re-factor was driven by edge case handling including a need for additional match conditions for `ExprCall` (`&x[0..=4]`) and `ExprBinary` (`x[1 << 3]`). Rather than attempt to account for each potential `Expr*` the code was re-factored into simply \"if ranged index\" and an \"otherwise\" conditions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec439bef0124a01dd71ea0d5f441066690f33ec", "html_url": "https://github.com/rust-lang/rust/commit/4ec439bef0124a01dd71ea0d5f441066690f33ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ec439bef0124a01dd71ea0d5f441066690f33ec/comments", "author": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b59542acc9901a6568731541baa9f623c1991b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b59542acc9901a6568731541baa9f623c1991b3", "html_url": "https://github.com/rust-lang/rust/commit/8b59542acc9901a6568731541baa9f623c1991b3"}], "stats": {"total": 387, "additions": 220, "deletions": 167}, "files": [{"sha": "b4e6414195e324aa885a483ab8cb1b0587725c60", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 55, "deletions": 78, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/4ec439bef0124a01dd71ea0d5f441066690f33ec/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec439bef0124a01dd71ea0d5f441066690f33ec/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=4ec439bef0124a01dd71ea0d5f441066690f33ec", "patch": "@@ -1,8 +1,9 @@\n //! lint on indexing and slicing operations\n \n use crate::consts::{constant, Constant};\n+use crate::utils;\n+use crate::utils::higher;\n use crate::utils::higher::Range;\n-use crate::utils::{self, higher};\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n@@ -97,89 +98,65 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n         if let ExprIndex(ref array, ref index) = &expr.node {\n             let ty = cx.tables.expr_ty(array);\n-            match &index.node {\n-                // Both ExprStruct and ExprPath require this approach's checks\n-                // on the `range` returned by `higher::range(cx, index)`.\n-                // ExprStruct handles &x[n..m], &x[n..] and &x[..n].\n-                // ExprPath handles &x[..] and x[var]\n-                ExprStruct(..) | ExprPath(..) => {\n-                    if let Some(range) = higher::range(cx, index) {\n-                        if let ty::TyArray(_, s) = ty.sty {\n-                            let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n-                            // Index is a constant range.\n-                            if let Some((start, end)) = to_const_range(cx, range, size) {\n-                                if start > size || end > size {\n-                                    utils::span_lint(\n-                                        cx,\n-                                        OUT_OF_BOUNDS_INDEXING,\n-                                        expr.span,\n-                                        \"range is out of bounds\",\n-                                    );\n-                                } // Else range is in bounds, ok.\n-\n-                                return;\n-                            }\n+            if let Some(range) = higher::range(cx, index) {\n+                // Ranged indexes, i.e. &x[n..m], &x[n..], &x[..n] and &x[..]\n+                if let ty::TyArray(_, s) = ty.sty {\n+                    let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n+                    // Index is a constant range.\n+                    if let Some((start, end)) = to_const_range(cx, range, size) {\n+                        if start > size || end > size {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                expr.span,\n+                                \"range is out of bounds\",\n+                            );\n                         }\n-\n-                        let help_msg = match (range.start, range.end) {\n-                            (None, Some(_)) => {\n-                                \"Consider using `.get(..n)`or `.get_mut(..n)` instead\"\n-                            }\n-                            (Some(_), None) => {\n-                                \"Consider using `.get(n..)` or .get_mut(n..)` instead\"\n-                            }\n-                            (Some(_), Some(_)) => {\n-                                \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\"\n-                            }\n-                            (None, None) => return, // [..] is ok.\n-                        };\n-\n-                        utils::span_help_and_lint(\n-                            cx,\n-                            INDEXING_SLICING,\n-                            expr.span,\n-                            \"slicing may panic.\",\n-                            help_msg,\n-                        );\n-                    } else {\n-                        utils::span_help_and_lint(\n-                            cx,\n-                            INDEXING_SLICING,\n-                            expr.span,\n-                            \"indexing may panic.\",\n-                            \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n-                        );\n+                        return;\n                     }\n                 }\n-                ExprLit(..) => {\n-                    // [n]\n-                    if let ty::TyArray(_, s) = ty.sty {\n-                        let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n-                        // Index is a constant uint.\n-                        if let Some((Constant::Int(const_index), _)) =\n-                            constant(cx, cx.tables, index)\n-                        {\n-                            if size <= const_index {\n-                                utils::span_lint(\n-                                    cx,\n-                                    OUT_OF_BOUNDS_INDEXING,\n-                                    expr.span,\n-                                    \"const index is out of bounds\",\n-                                );\n-                            }\n-                            // Else index is in bounds, ok.\n+\n+                let help_msg = match (range.start, range.end) {\n+                    (None, Some(_)) => \"Consider using `.get(..n)`or `.get_mut(..n)` instead\",\n+                    (Some(_), None) => \"Consider using `.get(n..)` or .get_mut(n..)` instead\",\n+                    (Some(_), Some(_)) => \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\",\n+                    (None, None) => return, // [..] is ok.\n+                };\n+\n+                utils::span_help_and_lint(\n+                    cx,\n+                    INDEXING_SLICING,\n+                    expr.span,\n+                    \"slicing may panic.\",\n+                    help_msg,\n+                );\n+            } else {\n+                // Catchall non-range index, i.e. [n] or [n << m]\n+                if let ty::TyArray(_, s) = ty.sty {\n+                    let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n+                    // Index is a constant uint.\n+                    if let Some((Constant::Int(const_index), _)) = constant(cx, cx.tables, index) {\n+                        if size <= const_index {\n+                            utils::span_lint(\n+                                cx,\n+                                OUT_OF_BOUNDS_INDEXING,\n+                                expr.span,\n+                                \"const index is out of bounds\",\n+                            );\n                         }\n-                    } else {\n-                        utils::span_help_and_lint(\n-                            cx,\n-                            INDEXING_SLICING,\n-                            expr.span,\n-                            \"indexing may panic.\",\n-                            \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n-                        );\n+                        // Else index is in bounds, ok.\n+\n+                        return;\n                     }\n                 }\n-                _ => (),\n+\n+                utils::span_help_and_lint(\n+                    cx,\n+                    INDEXING_SLICING,\n+                    expr.span,\n+                    \"indexing may panic.\",\n+                    \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n+                );\n             }\n         }\n     }"}, {"sha": "16174afb1060366f95943ae2a5ed74f0b610827c", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/4ec439bef0124a01dd71ea0d5f441066690f33ec/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ec439bef0124a01dd71ea0d5f441066690f33ec/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=4ec439bef0124a01dd71ea0d5f441066690f33ec", "patch": "@@ -9,55 +9,63 @@ fn main() {\n     let index_from: usize = 2;\n     let index_to: usize = 3;\n     x[index];\n-    &x[index_from..index_to];\n-    &x[index_from..][..index_to];\n     &x[index..];\n     &x[..index];\n-    x[0];\n-    x[3];\n+    &x[index_from..index_to];\n+    &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n     x[4];\n     x[1 << 3];\n-    &x[1..5];\n-    &x[1..][..5];\n-    &x[0..3];\n-    &x[0..][..3];\n-    &x[0..].get(..3); // Ok\n-    &x[0..=4];\n     &x[..=4];\n-    &x[..];\n-    &x[1..];\n-    &x[4..];\n+    &x[1..5];\n+    &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n     &x[5..];\n-    &x[..4];\n     &x[..5];\n     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n-    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok\n+    &x[0..=4];\n+    &x[0..][..3];\n+    &x[1..][..5];\n+\n+    &x[4..]; // Ok, should not produce stderr.\n+    &x[..4]; // Ok, should not produce stderr.\n+    &x[..]; // Ok, should not produce stderr.\n+    &x[1..]; // Ok, should not produce stderr.\n+    &x[2..].iter().map(|x| 2 * x).collect::<Vec<i32>>(); // Ok, should not produce stderr.\n+    &x[0..].get(..3); // Ok, should not produce stderr.\n+    x[0]; // Ok, should not produce stderr.\n+    x[3]; // Ok, should not produce stderr.\n+    &x[0..3]; // Ok, should not produce stderr.\n \n     let y = &x;\n     y[0];\n     &y[1..2];\n-    &y[..];\n     &y[0..=4];\n     &y[..=4];\n \n+    &y[..]; // Ok, should not produce stderr.\n+\n     let empty: [i8; 0] = [];\n     empty[0];\n     &empty[1..5];\n     &empty[0..=4];\n     &empty[..=4];\n-    &empty[..];\n-    &empty[0..];\n-    &empty[0..0];\n-    &empty[0..=0];\n-    &empty[..=0];\n-    &empty[..0];\n     &empty[1..];\n     &empty[..4];\n+    &empty[0..=0];\n+    &empty[..=0];\n+\n+    &empty[0..]; // Ok, should not produce stderr.\n+    &empty[0..0]; // Ok, should not produce stderr.\n+    &empty[..0]; // Ok, should not produce stderr.\n+    &empty[..]; // Ok, should not produce stderr.\n \n     let v = vec![0; 5];\n     v[0];\n     v[10];\n+    v[1 << 3];\n     &v[10..100];\n+    &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n     &v[10..];\n     &v[..100];\n+\n+    &v[..]; // Ok, should not produce stderr.\n }"}, {"sha": "c9aefe0349a193928dfdf5f87b8845c2a32d136c", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 135, "deletions": 67, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/4ec439bef0124a01dd71ea0d5f441066690f33ec/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4ec439bef0124a01dd71ea0d5f441066690f33ec/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=4ec439bef0124a01dd71ea0d5f441066690f33ec", "patch": "@@ -10,196 +10,264 @@ error: indexing may panic.\n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:12:6\n    |\n-12 |     &x[index_from..index_to];\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^\n+12 |     &x[index..];\n+   |      ^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:13:6\n    |\n-13 |     &x[index_from..][..index_to];\n-   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+13 |     &x[..index];\n+   |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:13:6\n+  --> $DIR/indexing_slicing.rs:14:6\n    |\n-13 |     &x[index_from..][..index_to];\n-   |      ^^^^^^^^^^^^^^^\n+14 |     &x[index_from..index_to];\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:14:6\n+  --> $DIR/indexing_slicing.rs:15:6\n    |\n-14 |     &x[index..];\n-   |      ^^^^^^^^^^\n+15 |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:15:6\n    |\n-15 |     &x[..index];\n-   |      ^^^^^^^^^^\n+15 |     &x[index_from..][..index_to]; // Two lint reports, one for [index_from..] and another for [..index_to].\n+   |      ^^^^^^^^^^^^^^^\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:18:5\n+  --> $DIR/indexing_slicing.rs:16:5\n    |\n-18 |     x[4];\n+16 |     x[4];\n    |     ^^^^\n    |\n    = note: `-D out-of-bounds-indexing` implied by `-D warnings`\n \n+error: const index is out of bounds\n+  --> $DIR/indexing_slicing.rs:17:5\n+   |\n+17 |     x[1 << 3];\n+   |     ^^^^^^^^^\n+\n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:20:6\n+  --> $DIR/indexing_slicing.rs:18:6\n    |\n-20 |     &x[1..5];\n+18 |     &x[..=4];\n    |      ^^^^^^^\n \n-error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:21:6\n-   |\n-21 |     &x[1..][..5];\n-   |      ^^^^^^^^^^^\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:19:6\n    |\n-   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+19 |     &x[1..5];\n+   |      ^^^^^^^\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:23:6\n+  --> $DIR/indexing_slicing.rs:20:6\n    |\n-23 |     &x[0..][..3];\n-   |      ^^^^^^^^^^^\n+20 |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+   |      ^^^^^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:26:6\n+  --> $DIR/indexing_slicing.rs:20:6\n    |\n-26 |     &x[..=4];\n-   |      ^^^^^^^\n+20 |     &x[5..][..10]; // Two lint reports, one for [5..] and another for [..10].\n+   |      ^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:30:6\n+  --> $DIR/indexing_slicing.rs:21:6\n    |\n-30 |     &x[5..];\n+21 |     &x[5..];\n    |      ^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:32:6\n+  --> $DIR/indexing_slicing.rs:22:6\n    |\n-32 |     &x[..5];\n+22 |     &x[..5];\n    |      ^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:33:6\n+  --> $DIR/indexing_slicing.rs:23:6\n    |\n-33 |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n+23 |     &x[5..].iter().map(|x| 2 * x).collect::<Vec<i32>>();\n    |      ^^^^^^\n \n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:24:6\n+   |\n+24 |     &x[0..=4];\n+   |      ^^^^^^^^\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:25:6\n+   |\n+25 |     &x[0..][..3];\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:26:6\n+   |\n+26 |     &x[1..][..5];\n+   |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:37:5\n+  --> $DIR/indexing_slicing.rs:39:5\n    |\n-37 |     y[0];\n+39 |     y[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:38:6\n+  --> $DIR/indexing_slicing.rs:40:6\n    |\n-38 |     &y[1..2];\n+40 |     &y[1..2];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:41:6\n    |\n-41 |     &y[..=4];\n+41 |     &y[0..=4];\n+   |      ^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:42:6\n+   |\n+42 |     &y[..=4];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:44:5\n+  --> $DIR/indexing_slicing.rs:47:5\n    |\n-44 |     empty[0];\n+47 |     empty[0];\n    |     ^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:45:6\n+  --> $DIR/indexing_slicing.rs:48:6\n    |\n-45 |     &empty[1..5];\n+48 |     &empty[1..5];\n    |      ^^^^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:47:6\n+  --> $DIR/indexing_slicing.rs:49:6\n    |\n-47 |     &empty[..=4];\n-   |      ^^^^^^^^^^^\n+49 |     &empty[0..=4];\n+   |      ^^^^^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:52:6\n+  --> $DIR/indexing_slicing.rs:50:6\n    |\n-52 |     &empty[..=0];\n+50 |     &empty[..=4];\n    |      ^^^^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:54:6\n+  --> $DIR/indexing_slicing.rs:51:6\n    |\n-54 |     &empty[1..];\n+51 |     &empty[1..];\n    |      ^^^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:55:6\n+  --> $DIR/indexing_slicing.rs:52:6\n    |\n-55 |     &empty[..4];\n+52 |     &empty[..4];\n    |      ^^^^^^^^^^\n \n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:53:6\n+   |\n+53 |     &empty[0..=0];\n+   |      ^^^^^^^^^^^^\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:54:6\n+   |\n+54 |     &empty[..=0];\n+   |      ^^^^^^^^^^^\n+\n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:58:5\n+  --> $DIR/indexing_slicing.rs:62:5\n    |\n-58 |     v[0];\n+62 |     v[0];\n    |     ^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n error: indexing may panic.\n-  --> $DIR/indexing_slicing.rs:59:5\n+  --> $DIR/indexing_slicing.rs:63:5\n    |\n-59 |     v[10];\n+63 |     v[10];\n    |     ^^^^^\n    |\n    = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:64:5\n+   |\n+64 |     v[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n+\n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:60:6\n+  --> $DIR/indexing_slicing.rs:65:6\n    |\n-60 |     &v[10..100];\n+65 |     &v[10..100];\n    |      ^^^^^^^^^^\n    |\n    = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:61:6\n+  --> $DIR/indexing_slicing.rs:66:6\n+   |\n+66 |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n+   |      ^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n+\n+error: range is out of bounds\n+  --> $DIR/indexing_slicing.rs:66:6\n+   |\n+66 |     &x[10..][..100]; // Two lint reports, one for [10..] and another for [..100].\n+   |      ^^^^^^^\n+\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:67:6\n    |\n-61 |     &v[10..];\n+67 |     &v[10..];\n    |      ^^^^^^^\n    |\n    = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: slicing may panic.\n-  --> $DIR/indexing_slicing.rs:62:6\n+  --> $DIR/indexing_slicing.rs:68:6\n    |\n-62 |     &v[..100];\n+68 |     &v[..100];\n    |      ^^^^^^^^\n    |\n    = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 38 previous errors\n "}]}