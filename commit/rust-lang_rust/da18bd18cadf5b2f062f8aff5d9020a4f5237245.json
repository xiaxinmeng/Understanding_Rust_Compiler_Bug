{"sha": "da18bd18cadf5b2f062f8aff5d9020a4f5237245", "node_id": "C_kwDOAAsO6NoAKGRhMThiZDE4Y2FkZjViMmYwNjJmOGFmZjVkOTAyMGE0ZjUyMzcyNDU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-21T16:42:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-21T16:42:06Z"}, "message": "Rollup merge of #99526 - compiler-errors:normalize-arg-spans, r=oli-obk\n\nNormalize the arg spans to be within the call span\n\nMakes more sense to point out the arg's span, and not the expression inside the macro", "tree": {"sha": "198f3dbe0b76700ef24a5b488978cfb8f74220ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/198f3dbe0b76700ef24a5b488978cfb8f74220ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da18bd18cadf5b2f062f8aff5d9020a4f5237245", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi2YHeCRBK7hj4Ov3rIwAAKa8IACUlCEtt+VlM2IEyZXCOOqs7\njrgoZGhZj5lLCDSOoQWD0D64v7OaCFs/izJ7vzpq/JfGb7mkAAxem8KBSUiw0xA3\n6VPki7qNuwi9wJRu3TM51zCZBVXOjt+t4T8278PDppnIzm3h8jrpJ776EI8kQj5N\nUk5Yc6nNzDhA0et0/+XFnNaL6QwMuAGxTGNGU1Oah/uXqUolkTnbe0MOl0LYsPxZ\nwaHvs1mziJjLZe8sSB1+LSkRox9KspN5aEmk8jqiYo6wiZTQ90v5+Cj/Gnf8PwOR\n3kqmLms5vnxdwILImXmpX9LnDVj9wXmcdi5DDP0Uv4/7PF25ZyCDdJi8/XqJKQs=\n=3tzI\n-----END PGP SIGNATURE-----\n", "payload": "tree 198f3dbe0b76700ef24a5b488978cfb8f74220ad\nparent 84a7b23fd79b65ae4cd48d4ae8e1efbb1f380910\nparent cd3204d1a272dc4739a5f86546620287941aa6e7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1658421726 +0200\ncommitter GitHub <noreply@github.com> 1658421726 +0200\n\nRollup merge of #99526 - compiler-errors:normalize-arg-spans, r=oli-obk\n\nNormalize the arg spans to be within the call span\n\nMakes more sense to point out the arg's span, and not the expression inside the macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da18bd18cadf5b2f062f8aff5d9020a4f5237245", "html_url": "https://github.com/rust-lang/rust/commit/da18bd18cadf5b2f062f8aff5d9020a4f5237245", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da18bd18cadf5b2f062f8aff5d9020a4f5237245/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84a7b23fd79b65ae4cd48d4ae8e1efbb1f380910", "url": "https://api.github.com/repos/rust-lang/rust/commits/84a7b23fd79b65ae4cd48d4ae8e1efbb1f380910", "html_url": "https://github.com/rust-lang/rust/commit/84a7b23fd79b65ae4cd48d4ae8e1efbb1f380910"}, {"sha": "cd3204d1a272dc4739a5f86546620287941aa6e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3204d1a272dc4739a5f86546620287941aa6e7", "html_url": "https://github.com/rust-lang/rust/commit/cd3204d1a272dc4739a5f86546620287941aa6e7"}], "stats": {"total": 53, "additions": 30, "deletions": 23}, "files": [{"sha": "1555f4f3fd6a6bc920440508a8d3289fb546a481", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/da18bd18cadf5b2f062f8aff5d9020a4f5237245/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da18bd18cadf5b2f062f8aff5d9020a4f5237245/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=da18bd18cadf5b2f062f8aff5d9020a4f5237245", "patch": "@@ -481,6 +481,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.set_tainted_by_errors();\n         let tcx = self.tcx;\n \n+        // Get the argument span in the context of the call span so that\n+        // suggestions and labels are (more) correct when an arg is a\n+        // macro invocation.\n+        let normalize_span = |span: Span| -> Span {\n+            let normalized_span = span.find_ancestor_inside(error_span).unwrap_or(span);\n+            // Sometimes macros mess up the spans, so do not normalize the\n+            // arg span to equal the error span, because that's less useful\n+            // than pointing out the arg expr in the wrong context.\n+            if normalized_span.source_equal(error_span) { span } else { normalized_span }\n+        };\n+\n         // Precompute the provided types and spans, since that's all we typically need for below\n         let provided_arg_tys: IndexVec<ProvidedIdx, (Ty<'tcx>, Span)> = provided_args\n             .iter()\n@@ -490,7 +501,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .borrow()\n                     .expr_ty_adjusted_opt(*expr)\n                     .unwrap_or_else(|| tcx.ty_error());\n-                (self.resolve_vars_if_possible(ty), expr.span)\n+                (self.resolve_vars_if_possible(ty), normalize_span(expr.span))\n             })\n             .collect();\n         let callee_expr = match &call_expr.peel_blocks().kind {\n@@ -600,19 +611,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // Take some care with spans, so we don't suggest wrapping a macro's\n                 // innards in parenthesis, for example.\n                 if satisfied\n-                    && let Some(lo) =\n-                        provided_args[mismatch_idx.into()].span.find_ancestor_inside(error_span)\n-                    && let Some(hi) = provided_args[(mismatch_idx + tys.len() - 1).into()]\n-                        .span\n-                        .find_ancestor_inside(error_span)\n+                    && let Some((_, lo)) =\n+                        provided_arg_tys.get(ProvidedIdx::from_usize(mismatch_idx))\n+                    && let Some((_, hi)) =\n+                        provided_arg_tys.get(ProvidedIdx::from_usize(mismatch_idx + tys.len() - 1))\n                 {\n                     let mut err;\n                     if tys.len() == 1 {\n                         // A tuple wrap suggestion actually occurs within,\n                         // so don't do anything special here.\n                         err = self.report_and_explain_type_error(\n                             TypeTrace::types(\n-                                &self.misc(lo),\n+                                &self.misc(*lo),\n                                 true,\n                                 formal_and_expected_inputs[mismatch_idx.into()].1,\n                                 provided_arg_tys[mismatch_idx.into()].0,\n@@ -1052,7 +1062,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let suggestion_text = if let Some(provided_idx) = provided_idx\n                     && let (_, provided_span) = provided_arg_tys[*provided_idx]\n                     && let Ok(arg_text) =\n-                        source_map.span_to_snippet(provided_span.source_callsite())\n+                        source_map.span_to_snippet(provided_span)\n                 {\n                     arg_text\n                 } else {"}, {"sha": "0d8e7289dc8a243e976b786d74a0fc05d2cceaf7", "filename": "src/test/ui/inference/deref-suggestion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da18bd18cadf5b2f062f8aff5d9020a4f5237245/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da18bd18cadf5b2f062f8aff5d9020a4f5237245/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.rs?ref=da18bd18cadf5b2f062f8aff5d9020a4f5237245", "patch": "@@ -1,5 +1,5 @@\n macro_rules! borrow {\n-    ($x:expr) => { &$x } //~ ERROR mismatched types\n+    ($x:expr) => { &$x }\n }\n \n fn foo(_: String) {}\n@@ -32,6 +32,7 @@ fn main() {\n     foo(&mut \"aaa\".to_owned());\n     //~^ ERROR mismatched types\n     foo3(borrow!(0));\n+    //~^ ERROR mismatched types\n     foo4(&0);\n     assert_eq!(3i32, &3i32);\n     //~^ ERROR mismatched types"}, {"sha": "d729f2d682a6144dfff38221cc278569bd5844ec", "filename": "src/test/ui/inference/deref-suggestion.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da18bd18cadf5b2f062f8aff5d9020a4f5237245/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/da18bd18cadf5b2f062f8aff5d9020a4f5237245/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fderef-suggestion.stderr?ref=da18bd18cadf5b2f062f8aff5d9020a4f5237245", "patch": "@@ -70,13 +70,10 @@ LL +     foo(\"aaa\".to_owned());\n    |\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:2:20\n+  --> $DIR/deref-suggestion.rs:34:10\n    |\n-LL |     ($x:expr) => { &$x }\n-   |                    ^^^ expected `u32`, found `&{integer}`\n-...\n LL |     foo3(borrow!(0));\n-   |     ---- ---------- in this macro invocation\n+   |     ---- ^^^^^^^^^^ expected `u32`, found `&{integer}`\n    |     |\n    |     arguments to this function are incorrect\n    |\n@@ -85,18 +82,17 @@ note: function defined here\n    |\n LL | fn foo3(_: u32) {}\n    |    ^^^^ ------\n-   = note: this error originates in the macro `borrow` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:36:5\n+  --> $DIR/deref-suggestion.rs:37:5\n    |\n LL |     assert_eq!(3i32, &3i32);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ expected `i32`, found `&i32`\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:39:17\n+  --> $DIR/deref-suggestion.rs:40:17\n    |\n LL |     let s = S { u };\n    |                 ^\n@@ -105,7 +101,7 @@ LL |     let s = S { u };\n    |                 help: consider borrowing here: `u: &u`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:41:20\n+  --> $DIR/deref-suggestion.rs:42:20\n    |\n LL |     let s = S { u: u };\n    |                    ^\n@@ -114,7 +110,7 @@ LL |     let s = S { u: u };\n    |                    help: consider borrowing here: `&u`\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:44:17\n+  --> $DIR/deref-suggestion.rs:45:17\n    |\n LL |     let r = R { i };\n    |                 ^ expected `u32`, found `&{integer}`\n@@ -125,7 +121,7 @@ LL |     let r = R { i: *i };\n    |                 ++++\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:46:20\n+  --> $DIR/deref-suggestion.rs:47:20\n    |\n LL |     let r = R { i: i };\n    |                    ^ expected `u32`, found `&{integer}`\n@@ -136,7 +132,7 @@ LL |     let r = R { i: *i };\n    |                    +\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:55:9\n+  --> $DIR/deref-suggestion.rs:56:9\n    |\n LL |         b\n    |         ^ expected `i32`, found `&{integer}`\n@@ -147,7 +143,7 @@ LL |         *b\n    |         +\n \n error[E0308]: mismatched types\n-  --> $DIR/deref-suggestion.rs:63:9\n+  --> $DIR/deref-suggestion.rs:64:9\n    |\n LL |         b\n    |         ^ expected `i32`, found `&{integer}`\n@@ -158,7 +154,7 @@ LL |         *b\n    |         +\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/deref-suggestion.rs:68:12\n+  --> $DIR/deref-suggestion.rs:69:12\n    |\n LL |        let val = if true {\n    |   _______________-"}]}