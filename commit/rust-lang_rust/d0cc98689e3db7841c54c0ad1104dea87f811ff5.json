{"sha": "d0cc98689e3db7841c54c0ad1104dea87f811ff5", "node_id": "C_kwDOAAsO6NoAKGQwY2M5ODY4OWUzZGI3ODQxYzU0YzBhZDExMDRkZWE4N2Y4MTFmZjU", "commit": {"author": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-04-05T12:52:53Z"}, "committer": {"name": "klensy", "email": "klensy@users.noreply.github.com", "date": "2022-04-08T08:45:57Z"}, "message": "check_doc_keyword: don't alloc string for emptiness check\n\ncheck_doc_alias_value: get argument as Symbol to prevent needless string convertions\n\ncheck_doc_attrs: don't alloc vec, iterate over slice. Vec introduced in #83149, but no perf run posted on merge\n\nreplace as_str() check with symbol check\n\nget_single_str_from_tts: don't prealloc string\n\ntrivial string to str replace\n\nLifetimeScopeForPath::NonElided use Vec<Symbol> instead of Vec<String>\n\nAssertModuleSource use BTreeSet<Symbol> instead of BTreeSet<String>\n\nCrateInfo.crate_name replace FxHashMap<CrateNum, String> with FxHashMap<CrateNum, Symbol>", "tree": {"sha": "9b577f2fe457711704db64063c5fd64d43b61850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b577f2fe457711704db64063c5fd64d43b61850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0cc98689e3db7841c54c0ad1104dea87f811ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0cc98689e3db7841c54c0ad1104dea87f811ff5", "html_url": "https://github.com/rust-lang/rust/commit/d0cc98689e3db7841c54c0ad1104dea87f811ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0cc98689e3db7841c54c0ad1104dea87f811ff5/comments", "author": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klensy", "id": 1782831, "node_id": "MDQ6VXNlcjE3ODI4MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1782831?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klensy", "html_url": "https://github.com/klensy", "followers_url": "https://api.github.com/users/klensy/followers", "following_url": "https://api.github.com/users/klensy/following{/other_user}", "gists_url": "https://api.github.com/users/klensy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klensy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klensy/subscriptions", "organizations_url": "https://api.github.com/users/klensy/orgs", "repos_url": "https://api.github.com/users/klensy/repos", "events_url": "https://api.github.com/users/klensy/events{/privacy}", "received_events_url": "https://api.github.com/users/klensy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f262ca12aac76152c4b46cefcf8300f0249a5eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f262ca12aac76152c4b46cefcf8300f0249a5eb2", "html_url": "https://github.com/rust-lang/rust/commit/f262ca12aac76152c4b46cefcf8300f0249a5eb2"}], "stats": {"total": 121, "additions": 56, "deletions": 65}, "files": [{"sha": "72397aa2500f9114254352b4793cdd0a8917c2e3", "filename": "compiler/rustc_builtin_macros/src/compile_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcompile_error.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -13,7 +13,7 @@ pub fn expand_compile_error<'cx>(\n         return DummyResult::any(sp);\n     };\n \n-    cx.span_err(sp, &var);\n+    cx.span_err(sp, var.as_str());\n \n     DummyResult::any(sp)\n }"}, {"sha": "b8828fa671a5ddbc30a21e130a7923fc6282842f", "filename": "compiler/rustc_builtin_macros/src/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fenv.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -21,8 +21,8 @@ pub fn expand_option_env<'cx>(\n     };\n \n     let sp = cx.with_def_site_ctxt(sp);\n-    let value = env::var(&var.as_str()).ok().as_deref().map(Symbol::intern);\n-    cx.sess.parse_sess.env_depinfo.borrow_mut().insert((Symbol::intern(&var), value));\n+    let value = env::var(var.as_str()).ok().as_deref().map(Symbol::intern);\n+    cx.sess.parse_sess.env_depinfo.borrow_mut().insert((var, value));\n     let e = match value {\n         None => {\n             let lt = cx.lifetime(sp, Ident::new(kw::StaticLifetime, sp));"}, {"sha": "41871f303b0ee673db0437b68362e8712ed5643f", "filename": "compiler/rustc_builtin_macros/src/source_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fsource_util.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -104,7 +104,7 @@ pub fn expand_include<'cx>(\n         return DummyResult::any(sp);\n     };\n     // The file will be added to the code map by the parser\n-    let file = match resolve_path(cx, file, sp) {\n+    let file = match resolve_path(cx, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -173,7 +173,7 @@ pub fn expand_include_str(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_str!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match resolve_path(cx, file, sp) {\n+    let file = match resolve_path(cx, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();\n@@ -207,7 +207,7 @@ pub fn expand_include_bytes(\n     let Some(file) = get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") else {\n         return DummyResult::any(sp);\n     };\n-    let file = match resolve_path(cx, file, sp) {\n+    let file = match resolve_path(cx, file.as_str(), sp) {\n         Ok(f) => f,\n         Err(mut err) => {\n             err.emit();"}, {"sha": "7f15bc75fda23e8fc933c892d4b94712ce9afa20", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -288,8 +288,8 @@ fn load_imported_symbols_for_jit(\n         match data[cnum.as_usize() - 1] {\n             Linkage::NotLinked | Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                let name = &crate_info.crate_name[&cnum];\n-                let mut err = sess.struct_err(&format!(\"Can't load static lib {}\", name.as_str()));\n+                let name = crate_info.crate_name[&cnum];\n+                let mut err = sess.struct_err(&format!(\"Can't load static lib {}\", name));\n                 err.note(\"rustc_codegen_cranelift can only load dylibs in JIT mode.\");\n                 err.emit();\n             }"}, {"sha": "cf32d558d4a5190bd495cc15d7b894ece75fe712", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -216,7 +216,7 @@ pub fn each_linked_rlib(\n             Some(_) => {}\n             None => return Err(\"could not find formats for rlibs\".to_string()),\n         }\n-        let name = &info.crate_name[&cnum];\n+        let name = info.crate_name[&cnum];\n         let used_crate_source = &info.used_crate_source[&cnum];\n         if let Some((path, _)) = &used_crate_source.rlib {\n             f(cnum, &path);\n@@ -467,7 +467,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n     let mut all_native_libs = vec![];\n \n     let res = each_linked_rlib(&codegen_results.crate_info, &mut |cnum, path| {\n-        let name = &codegen_results.crate_info.crate_name[&cnum];\n+        let name = codegen_results.crate_info.crate_name[&cnum];\n         let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n \n         // Here when we include the rlib into our staticlib we need to make a"}, {"sha": "7933afb50e8ce70d9dbf52cf506c98f3c2d3ed23", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -861,7 +861,7 @@ impl CrateInfo {\n         for &cnum in crates.iter() {\n             info.native_libraries\n                 .insert(cnum, tcx.native_libraries(cnum).iter().map(Into::into).collect());\n-            info.crate_name.insert(cnum, tcx.crate_name(cnum).to_string());\n+            info.crate_name.insert(cnum, tcx.crate_name(cnum));\n             info.used_crate_source.insert(cnum, tcx.used_crate_source(cnum).clone());\n             if tcx.is_compiler_builtins(cnum) {\n                 info.compiler_builtins = Some(cnum);"}, {"sha": "5273b6cc83725521dbd49caedf2806dcaf2ed5c8", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -146,7 +146,7 @@ pub struct CrateInfo {\n     pub profiler_runtime: Option<CrateNum>,\n     pub is_no_builtins: FxHashSet<CrateNum>,\n     pub native_libraries: FxHashMap<CrateNum, Vec<NativeLib>>,\n-    pub crate_name: FxHashMap<CrateNum, String>,\n+    pub crate_name: FxHashMap<CrateNum, Symbol>,\n     pub used_libraries: Vec<NativeLib>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates: Vec<CrateNum>,"}, {"sha": "6f57280abb25083db66b230f864bc01e50435eca", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -1215,7 +1215,7 @@ pub fn get_single_str_from_tts(\n     sp: Span,\n     tts: TokenStream,\n     name: &str,\n-) -> Option<String> {\n+) -> Option<Symbol> {\n     let mut p = cx.new_parser_from_tts(tts);\n     if p.token == token::Eof {\n         cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n@@ -1227,7 +1227,7 @@ pub fn get_single_str_from_tts(\n     if p.token != token::Eof {\n         cx.span_err(sp, &format!(\"{} takes 1 argument\", name));\n     }\n-    expr_to_string(cx, ret, \"argument must be a string literal\").map(|(s, _)| s.to_string())\n+    expr_to_string(cx, ret, \"argument must be a string literal\").map(|(s, _)| s)\n }\n \n /// Extracts comma-separated expressions from `tts`."}, {"sha": "7569abfbb10e59a134acea577b2ec22e3673535e", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -22,12 +22,12 @@\n //! was re-used.\n \n use rustc_ast as ast;\n+use rustc_data_structures::stable_set::FxHashSet;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::mir::mono::CodegenUnitNameBuilder;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::cgu_reuse_tracker::*;\n use rustc_span::symbol::{sym, Symbol};\n-use std::collections::BTreeSet;\n \n #[allow(missing_docs)]\n pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n@@ -36,12 +36,8 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n             return;\n         }\n \n-        let available_cgus = tcx\n-            .collect_and_partition_mono_items(())\n-            .1\n-            .iter()\n-            .map(|cgu| cgu.name().to_string())\n-            .collect::<BTreeSet<String>>();\n+        let available_cgus =\n+            tcx.collect_and_partition_mono_items(()).1.iter().map(|cgu| cgu.name()).collect();\n \n         let ams = AssertModuleSource { tcx, available_cgus };\n \n@@ -53,7 +49,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n struct AssertModuleSource<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    available_cgus: BTreeSet<String>,\n+    available_cgus: FxHashSet<Symbol>,\n }\n \n impl<'tcx> AssertModuleSource<'tcx> {\n@@ -124,18 +120,17 @@ impl<'tcx> AssertModuleSource<'tcx> {\n \n         debug!(\"mapping '{}' to cgu name '{}'\", self.field(attr, sym::module), cgu_name);\n \n-        if !self.available_cgus.contains(cgu_name.as_str()) {\n+        if !self.available_cgus.contains(&cgu_name) {\n+            let mut cgu_names: Vec<&str> =\n+                self.available_cgus.iter().map(|cgu| cgu.as_str()).collect();\n+            cgu_names.sort();\n             self.tcx.sess.span_err(\n                 attr.span,\n                 &format!(\n                     \"no module named `{}` (mangled: {}). Available modules: {}\",\n                     user_path,\n                     cgu_name,\n-                    self.available_cgus\n-                        .iter()\n-                        .map(|cgu| cgu.to_string())\n-                        .collect::<Vec<_>>()\n-                        .join(\", \")\n+                    cgu_names.join(\", \")\n                 ),\n             );\n         }"}, {"sha": "bc50730ab8b838dcb1fece038ecd73625cdc8194", "filename": "compiler/rustc_middle/src/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fresolve_lifetime.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::ItemLocalId;\n use rustc_macros::HashStable;\n+use rustc_span::symbol::Symbol;\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, Debug, HashStable)]\n pub enum Region {\n@@ -23,7 +24,7 @@ pub enum Region {\n pub enum LifetimeScopeForPath {\n     // Contains all lifetime names that are in scope and could possibly be used in generics\n     // arguments of path.\n-    NonElided(Vec<String>),\n+    NonElided(Vec<Symbol>),\n \n     // Information that allows us to suggest args of the form `<'_>` in case\n     // no generic arguments were provided for a path."}, {"sha": "69dac03883940de4d24ea32afa0a04f5bc3b9255", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -561,8 +561,7 @@ fn write_scope_tree(\n         }\n         indented_decl.push(';');\n \n-        let local_name =\n-            if local == RETURN_PLACE { \" return place\".to_string() } else { String::new() };\n+        let local_name = if local == RETURN_PLACE { \" return place\" } else { \"\" };\n \n         writeln!(\n             w,"}, {"sha": "c45326e1e6e6c483ea820894a472228e89c44363", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 27, "deletions": 31, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -20,7 +20,7 @@ use rustc_session::lint::builtin::{\n     CONFLICTING_REPR_HINTS, INVALID_DOC_ATTRIBUTES, UNUSED_ATTRIBUTES,\n };\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use std::collections::hash_map::Entry;\n \n@@ -536,7 +536,7 @@ impl CheckAttrVisitor<'_> {\n     fn check_doc_alias_value(\n         &self,\n         meta: &NestedMetaItem,\n-        doc_alias: &str,\n+        doc_alias: Symbol,\n         hir_id: HirId,\n         target: Target,\n         is_list: bool,\n@@ -554,14 +554,17 @@ impl CheckAttrVisitor<'_> {\n             );\n             false\n         };\n-        if doc_alias.is_empty() {\n+        if doc_alias == kw::Empty {\n             return err_fn(\n                 meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n                 \"attribute cannot have empty value\",\n             );\n         }\n-        if let Some(c) =\n-            doc_alias.chars().find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n+\n+        let doc_alias_str = doc_alias.as_str();\n+        if let Some(c) = doc_alias_str\n+            .chars()\n+            .find(|&c| c == '\"' || c == '\\'' || (c.is_whitespace() && c != ' '))\n         {\n             self.tcx.sess.span_err(\n                 meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n@@ -573,7 +576,7 @@ impl CheckAttrVisitor<'_> {\n             );\n             return false;\n         }\n-        if doc_alias.starts_with(' ') || doc_alias.ends_with(' ') {\n+        if doc_alias_str.starts_with(' ') || doc_alias_str.ends_with(' ') {\n             return err_fn(\n                 meta.name_value_literal_span().unwrap_or_else(|| meta.span()),\n                 \"cannot start or end with ' '\",\n@@ -608,11 +611,11 @@ impl CheckAttrVisitor<'_> {\n             return err_fn(meta.span(), &format!(\"isn't allowed on {}\", err));\n         }\n         let item_name = self.tcx.hir().name(hir_id);\n-        if item_name.as_str() == doc_alias {\n+        if item_name == doc_alias {\n             return err_fn(meta.span(), \"is the same as the item's name\");\n         }\n         let span = meta.span();\n-        if let Err(entry) = aliases.try_insert(doc_alias.to_owned(), span) {\n+        if let Err(entry) = aliases.try_insert(doc_alias_str.to_owned(), span) {\n             self.tcx.struct_span_lint_hir(UNUSED_ATTRIBUTES, hir_id, span, |lint| {\n                 lint.build(\"doc alias is duplicated\")\n                     .span_label(*entry.entry.get(), \"first defined here\")\n@@ -635,14 +638,7 @@ impl CheckAttrVisitor<'_> {\n                 match v.literal() {\n                     Some(l) => match l.kind {\n                         LitKind::Str(s, _) => {\n-                            if !self.check_doc_alias_value(\n-                                v,\n-                                s.as_str(),\n-                                hir_id,\n-                                target,\n-                                true,\n-                                aliases,\n-                            ) {\n+                            if !self.check_doc_alias_value(v, s, hir_id, target, true, aliases) {\n                                 errors += 1;\n                             }\n                         }\n@@ -670,8 +666,8 @@ impl CheckAttrVisitor<'_> {\n                 }\n             }\n             errors == 0\n-        } else if let Some(doc_alias) = meta.value_str().map(|s| s.to_string()) {\n-            self.check_doc_alias_value(meta, &doc_alias, hir_id, target, false, aliases)\n+        } else if let Some(doc_alias) = meta.value_str() {\n+            self.check_doc_alias_value(meta, doc_alias, hir_id, target, false, aliases)\n         } else {\n             self.tcx\n                 .sess\n@@ -686,8 +682,8 @@ impl CheckAttrVisitor<'_> {\n     }\n \n     fn check_doc_keyword(&self, meta: &NestedMetaItem, hir_id: HirId) -> bool {\n-        let doc_keyword = meta.value_str().map(|s| s.to_string()).unwrap_or_else(String::new);\n-        if doc_keyword.is_empty() {\n+        let doc_keyword = meta.value_str().unwrap_or(kw::Empty);\n+        if doc_keyword == kw::Empty {\n             self.doc_attr_str_error(meta, \"keyword\");\n             return false;\n         }\n@@ -718,7 +714,7 @@ impl CheckAttrVisitor<'_> {\n                 return false;\n             }\n         }\n-        if !rustc_lexer::is_ident(&doc_keyword) {\n+        if !rustc_lexer::is_ident(doc_keyword.as_str()) {\n             self.tcx\n                 .sess\n                 .struct_span_err(\n@@ -911,20 +907,20 @@ impl CheckAttrVisitor<'_> {\n     ) -> bool {\n         let mut is_valid = true;\n \n-        if let Some(list) = attr.meta().and_then(|mi| mi.meta_item_list().map(|l| l.to_vec())) {\n-            for meta in &list {\n+        if let Some(mi) = attr.meta() && let Some(list) = mi.meta_item_list() {\n+            for meta in list {\n                 if let Some(i_meta) = meta.meta_item() {\n                     match i_meta.name_or_empty() {\n                         sym::alias\n-                            if !self.check_attr_not_crate_level(&meta, hir_id, \"alias\")\n-                                || !self.check_doc_alias(&meta, hir_id, target, aliases) =>\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"alias\")\n+                                || !self.check_doc_alias(meta, hir_id, target, aliases) =>\n                         {\n                             is_valid = false\n                         }\n \n                         sym::keyword\n-                            if !self.check_attr_not_crate_level(&meta, hir_id, \"keyword\")\n-                                || !self.check_doc_keyword(&meta, hir_id) =>\n+                            if !self.check_attr_not_crate_level(meta, hir_id, \"keyword\")\n+                                || !self.check_doc_keyword(meta, hir_id) =>\n                         {\n                             is_valid = false\n                         }\n@@ -936,15 +932,15 @@ impl CheckAttrVisitor<'_> {\n                         | sym::html_root_url\n                         | sym::html_no_source\n                         | sym::test\n-                            if !self.check_attr_crate_level(&attr, &meta, hir_id) =>\n+                            if !self.check_attr_crate_level(attr, meta, hir_id) =>\n                         {\n                             is_valid = false;\n                         }\n \n                         sym::inline | sym::no_inline\n                             if !self.check_doc_inline(\n-                                &attr,\n-                                &meta,\n+                                attr,\n+                                meta,\n                                 hir_id,\n                                 target,\n                                 specified_inline,\n@@ -976,7 +972,7 @@ impl CheckAttrVisitor<'_> {\n                         | sym::plugins => {}\n \n                         sym::test => {\n-                            if !self.check_test_attr(&meta, hir_id) {\n+                            if !self.check_test_attr(meta, hir_id) {\n                                 is_valid = false;\n                             }\n                         }"}, {"sha": "ff033cbb572998bebadc7c9d76f6691b7df21d81", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -696,7 +696,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'tcx> {\n             hir::ItemKind::ExternCrate(_) => {\n                 // compiler-generated `extern crate` items have a dummy span.\n                 // `std` is still checked for the `restricted-std` feature.\n-                if item.span.is_dummy() && item.ident.as_str() != \"std\" {\n+                if item.span.is_dummy() && item.ident.name != sym::std {\n                     return;\n                 }\n "}, {"sha": "1460b5efbb058eee665b094b8743c6d14dbf8333", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -587,7 +587,7 @@ fn get_lifetime_scopes_for_path(mut scope: &Scope<'_>) -> LifetimeScopeForPath {\n         match scope {\n             Scope::Binder { lifetimes, s, .. } => {\n                 available_lifetimes.extend(lifetimes.keys().filter_map(|p| match p {\n-                    hir::ParamName::Plain(ident) => Some(ident.name.to_string()),\n+                    hir::ParamName::Plain(ident) => Some(ident.name),\n                     _ => None,\n                 }));\n                 scope = s;"}, {"sha": "1b1a2037d9eaa9dd5c819c67f8a76dea55d3b9af", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0cc98689e3db7841c54c0ad1104dea87f811ff5/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=d0cc98689e3db7841c54c0ad1104dea87f811ff5", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n                             param_names\n                                 .iter()\n                                 .take(num_params_to_take)\n-                                .map(|p| (*p).clone())\n+                                .map(|p| p.as_str())\n                                 .collect::<Vec<_>>()\n                                 .join(\", \")\n                         } else {"}]}