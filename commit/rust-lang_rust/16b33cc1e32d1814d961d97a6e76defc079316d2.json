{"sha": "16b33cc1e32d1814d961d97a6e76defc079316d2", "node_id": "C_kwDOAAsO6NoAKDE2YjMzY2MxZTMyZDE4MTRkOTYxZDk3YTZlNzZkZWZjMDc5MzE2ZDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-13T07:09:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-14T20:22:10Z"}, "message": "Point to argument if it's self type of unsatisfied projection predicate", "tree": {"sha": "6a7e3738d24c857101712321aba8f5dbcacc0117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a7e3738d24c857101712321aba8f5dbcacc0117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b33cc1e32d1814d961d97a6e76defc079316d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b33cc1e32d1814d961d97a6e76defc079316d2", "html_url": "https://github.com/rust-lang/rust/commit/16b33cc1e32d1814d961d97a6e76defc079316d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b33cc1e32d1814d961d97a6e76defc079316d2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "801821d1560f84e4716fcbd9244ec959320a13d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/801821d1560f84e4716fcbd9244ec959320a13d5", "html_url": "https://github.com/rust-lang/rust/commit/801821d1560f84e4716fcbd9244ec959320a13d5"}], "stats": {"total": 190, "additions": 125, "deletions": 65}, "files": [{"sha": "1f2dfc30ae03bc250f8b03c86d864a4de8728394", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1660,12 +1660,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ObligationCauseCode::ImplDerivedObligation(code) => {\n                         code.derived.parent_trait_pred.self_ty().skip_binder().into()\n                     }\n-                    _ if let ty::PredicateKind::Trait(predicate) =\n-                        error.obligation.predicate.kind().skip_binder() =>\n-                    {\n-                        predicate.self_ty().into()\n-                    }\n-                    _ => continue,\n+                    _ => match error.obligation.predicate.kind().skip_binder() {\n+                        ty::PredicateKind::Trait(predicate) => predicate.self_ty().into(),\n+                        ty::PredicateKind::Projection(predicate) => {\n+                            predicate.projection_ty.self_ty().into()\n+                        }\n+                        _ => continue,\n+                    },\n                 };\n             let self_ = self.resolve_vars_if_possible(self_);\n             let ty_matches_self = |ty: Ty<'tcx>| ty.walk().any(|arg| arg == self_);"}, {"sha": "a777e064f1a0ad8cc4617d97fe133660ae780d51", "filename": "src/test/ui/associated-types/associated-types-binding-to-type-defined-in-supertrait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-binding-to-type-defined-in-supertrait.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:31:19\n    |\n LL | fn b() { blue_car(ModelT); }\n-   |          ^^^^^^^^ type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n+   |          -------- ^^^^^^ type mismatch resolving `<ModelT as Vehicle>::Color == Blue`\n+   |          |\n+   |          required by a bound introduced by this call\n    |\n note: expected this to be `Blue`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:16:40\n@@ -16,10 +18,12 @@ LL | fn blue_car<C:Car<Color=Blue>>(c: C) {\n    |                   ^^^^^^^^^^ required by this bound in `blue_car`\n \n error[E0271]: type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n-  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:10\n+  --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:32:20\n    |\n LL | fn c() { black_car(ModelU); }\n-   |          ^^^^^^^^^ type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n+   |          --------- ^^^^^^ type mismatch resolving `<ModelU as Vehicle>::Color == Black`\n+   |          |\n+   |          required by a bound introduced by this call\n    |\n note: expected this to be `Black`\n   --> $DIR/associated-types-binding-to-type-defined-in-supertrait.rs:21:40"}, {"sha": "19750fe1f333f74cc0d4cd89dfc0f5a478d95907", "filename": "src/test/ui/associated-types/associated-types-eq-3.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-eq-3.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -14,10 +14,12 @@ LL | fn foo2<I: Foo<A = Bar>>(x: I) {\n    |               +++++++++\n \n error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n-  --> $DIR/associated-types-eq-3.rs:38:5\n+  --> $DIR/associated-types-eq-3.rs:38:10\n    |\n LL |     foo1(a);\n-   |     ^^^^ type mismatch resolving `<isize as Foo>::A == Bar`\n+   |     ---- ^ type mismatch resolving `<isize as Foo>::A == Bar`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14\n@@ -34,7 +36,9 @@ error[E0271]: type mismatch resolving `<isize as Foo>::A == Bar`\n   --> $DIR/associated-types-eq-3.rs:40:9\n    |\n LL |     baz(&a);\n-   |         ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n+   |     --- ^^ type mismatch resolving `<isize as Foo>::A == Bar`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `Bar`\n   --> $DIR/associated-types-eq-3.rs:12:14"}, {"sha": "b1708b96e525403771b8e642a9098f29320d8240", "filename": "src/test/ui/associated-types/associated-types-issue-20346.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-issue-20346.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,11 +1,13 @@\n error[E0271]: type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n-  --> $DIR/associated-types-issue-20346.rs:34:5\n+  --> $DIR/associated-types-issue-20346.rs:34:36\n    |\n LL | fn test_adapter<T, I: Iterator<Item=Option<T>>>(it: I) {\n    |                 - this type parameter\n ...\n LL |     is_iterator_of::<Option<T>, _>(&adapter);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n+   |     ------------------------------ ^^^^^^^^ type mismatch resolving `<Adapter<I> as Iterator>::Item == Option<T>`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `Option<T>`\n   --> $DIR/associated-types-issue-20346.rs:23:17"}, {"sha": "89cdba524be23b1ed4cc30f86e621b0ee483f469", "filename": "src/test/ui/associated-types/associated-types-multiple-types-one-trait.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-multiple-types-one-trait.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<T as Foo>::Y == i32`\n-  --> $DIR/associated-types-multiple-types-one-trait.rs:13:5\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:13:12\n    |\n LL |     want_y(t);\n-   |     ^^^^^^ expected `i32`, found associated type\n+   |     ------ ^ expected `i32`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:         expected type `i32`\n            found associated type `<T as Foo>::Y`\n@@ -17,10 +19,12 @@ LL | fn have_x_want_y<T:Foo<X=u32, Y = i32>>(t: &T)\n    |                             +++++++++\n \n error[E0271]: type mismatch resolving `<T as Foo>::X == u32`\n-  --> $DIR/associated-types-multiple-types-one-trait.rs:18:5\n+  --> $DIR/associated-types-multiple-types-one-trait.rs:18:12\n    |\n LL |     want_x(t);\n-   |     ^^^^^^ expected `u32`, found associated type\n+   |     ------ ^ expected `u32`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:         expected type `u32`\n            found associated type `<T as Foo>::X`"}, {"sha": "f24423dd106669af20debca20e3016509ac3a571", "filename": "src/test/ui/associated-types/issue-87261.stderr", "status": "modified", "additions": 56, "deletions": 28, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-87261.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<A as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:56:5\n+  --> $DIR/issue-87261.rs:56:19\n    |\n LL |     accepts_trait(a);\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<A as Trait>::Associated`\n@@ -17,10 +19,12 @@ LL |     A: Trait<Associated = ()> + 'static,\n    |             +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<B as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:59:5\n+  --> $DIR/issue-87261.rs:59:19\n    |\n LL |     accepts_trait(b);\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<B as Trait>::Associated`\n@@ -33,10 +37,12 @@ LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<C as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:62:5\n+  --> $DIR/issue-87261.rs:62:19\n    |\n LL |     accepts_trait(c);\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<C as Trait>::Associated`\n@@ -51,10 +57,12 @@ LL |     C: Trait<Associated = ()> + Foo,\n    |             +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<D as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:65:5\n+  --> $DIR/issue-87261.rs:65:19\n    |\n LL |     accepts_trait(d);\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<D as Trait>::Associated`\n@@ -67,10 +75,12 @@ LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<E as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:68:5\n+  --> $DIR/issue-87261.rs:68:27\n    |\n LL |     accepts_generic_trait(e);\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<E as GenericTrait<()>>::Associated`\n@@ -85,10 +95,12 @@ LL |     E: GenericTrait<(), Associated = ()> + 'static,\n    |                       +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<F as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:71:5\n+  --> $DIR/issue-87261.rs:71:27\n    |\n LL |     accepts_generic_trait(f);\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<F as GenericTrait<()>>::Associated`\n@@ -103,10 +115,12 @@ LL |     F: GenericTrait<(), Associated = ()> + Foo,\n    |                       +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<G as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:74:5\n+  --> $DIR/issue-87261.rs:74:27\n    |\n LL |     accepts_generic_trait(g);\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<G as GenericTrait<()>>::Associated`\n@@ -119,13 +133,15 @@ LL | fn accepts_generic_trait<T: GenericTrait<(), Associated = ()>>(_: T) {}\n    |                                              ^^^^^^^^^^^^^^^ required by this bound in `accepts_generic_trait`\n \n error[E0271]: type mismatch resolving `<impl Trait as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:79:5\n+  --> $DIR/issue-87261.rs:79:19\n    |\n LL | fn returns_opaque() -> impl Trait + 'static {\n    |                        -------------------- the found opaque type\n ...\n LL |     accepts_trait(returns_opaque());\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl Trait as Trait>::Associated`\n@@ -140,13 +156,15 @@ LL | fn returns_opaque() -> impl Trait<Associated = ()> + 'static {\n    |                                  +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl DerivedTrait as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:82:5\n+  --> $DIR/issue-87261.rs:82:19\n    |\n LL | fn returns_opaque_derived() -> impl DerivedTrait + 'static {\n    |                                --------------------------- the found opaque type\n ...\n LL |     accepts_trait(returns_opaque_derived());\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl DerivedTrait as Trait>::Associated`\n@@ -161,13 +179,15 @@ LL | fn returns_opaque_derived() -> impl DerivedTrait<Associated = ()> + 'static\n    |                                                 +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl Trait + Foo as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:85:5\n+  --> $DIR/issue-87261.rs:85:19\n    |\n LL | fn returns_opaque_foo() -> impl Trait + Foo {\n    |                            ---------------- the found opaque type\n ...\n LL |     accepts_trait(returns_opaque_foo());\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl Trait + Foo as Trait>::Associated`\n@@ -182,13 +202,15 @@ LL | fn returns_opaque_foo() -> impl Trait<Associated = ()> + Foo {\n    |                                      +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl DerivedTrait + Foo as Trait>::Associated == ()`\n-  --> $DIR/issue-87261.rs:88:5\n+  --> $DIR/issue-87261.rs:88:19\n    |\n LL | fn returns_opaque_derived_foo() -> impl DerivedTrait + Foo {\n    |                                    ----------------------- the found opaque type\n ...\n LL |     accepts_trait(returns_opaque_derived_foo());\n-   |     ^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     ------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl DerivedTrait + Foo as Trait>::Associated`\n@@ -201,13 +223,15 @@ LL | fn accepts_trait<T: Trait<Associated = ()>>(_: T) {}\n    |                           ^^^^^^^^^^^^^^^ required by this bound in `accepts_trait`\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()> as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:91:5\n+  --> $DIR/issue-87261.rs:91:27\n    |\n LL | fn returns_opaque_generic() -> impl GenericTrait<()> + 'static {\n    |                                ------------------------------- the found opaque type\n ...\n LL |     accepts_generic_trait(returns_opaque_generic());\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()> as GenericTrait<()>>::Associated`\n@@ -222,13 +246,15 @@ LL | fn returns_opaque_generic() -> impl GenericTrait<(), Associated = ()> + 'st\n    |                                                    +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:94:5\n+  --> $DIR/issue-87261.rs:94:27\n    |\n LL | fn returns_opaque_generic_foo() -> impl GenericTrait<()> + Foo {\n    |                                    --------------------------- the found opaque type\n ...\n LL |     accepts_generic_trait(returns_opaque_generic_foo());\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()> + Foo as GenericTrait<()>>::Associated`\n@@ -243,13 +269,15 @@ LL | fn returns_opaque_generic_foo() -> impl GenericTrait<(), Associated = ()> +\n    |                                                        +++++++++++++++++\n \n error[E0271]: type mismatch resolving `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated == ()`\n-  --> $DIR/issue-87261.rs:97:5\n+  --> $DIR/issue-87261.rs:97:27\n    |\n LL | fn returns_opaque_generic_duplicate() -> impl GenericTrait<()> + GenericTrait<u8> {\n    |                                          ---------------------------------------- the found opaque type\n ...\n LL |     accepts_generic_trait(returns_opaque_generic_duplicate());\n-   |     ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     --------------------- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found associated type\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n    = note:    expected unit type `()`\n            found associated type `<impl GenericTrait<()> + GenericTrait<u8> as GenericTrait<()>>::Associated`"}, {"sha": "1e2f4383459e2e40a8d2e16f9ad2eafa549515f1", "filename": "src/test/ui/error-codes/E0271.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0271.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n-  --> $DIR/E0271.rs:10:5\n+  --> $DIR/E0271.rs:10:9\n    |\n LL |     foo(3_i8);\n-   |     ^^^ type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n+   |     --- ^^^^ type mismatch resolving `<i8 as Trait>::AssociatedType == u32`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `u32`\n   --> $DIR/E0271.rs:7:43"}, {"sha": "7c2935d32bfd2a582f10df477a59c8713b958708", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n-  --> $DIR/issue-74684-2.rs:23:5\n+  --> $DIR/issue-74684-2.rs:23:9\n    |\n LL |     bug(Box::new(x));\n-   |     ^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+   |     --- ^^^^^^^^^^^ type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `[u8]`\n   --> $DIR/issue-74684-2.rs:10:18"}, {"sha": "e70f6fc3430f67726e0192f0119ffd3657d5cff2", "filename": "src/test/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.rs?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -36,9 +36,9 @@ trait Ty<'a> {\n \n fn main() {\n     let v = Unit2.m(\n-        //~^ ERROR type mismatch\n         L {\n             //~^ ERROR to be a closure that returns `Unit3`, but it returns `Unit4`\n+            //~| ERROR type mismatch\n             f: |x| {\n                 drop(x);\n                 Unit4"}, {"sha": "51017ffbd41928f12e028bded3ae04f1069ef29d", "filename": "src/test/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,16 @@\n error[E0271]: type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n-  --> $DIR/issue-62203-hrtb-ice.rs:38:19\n+  --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n-LL |     let v = Unit2.m(\n-   |                   ^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n+LL |       let v = Unit2.m(\n+   |                     - required by a bound introduced by this call\n+LL | /         L {\n+LL | |\n+LL | |\n+LL | |             f: |x| {\n+...  |\n+LL | |             },\n+LL | |         },\n+   | |_________^ type mismatch resolving `for<'r> <L<[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]> as T0<'r, (&'r u8,)>>::O == <_ as Ty<'r>>::V`\n    |\n note: expected this to be `<_ as Ty<'_>>::V`\n   --> $DIR/issue-62203-hrtb-ice.rs:21:14\n@@ -23,16 +31,15 @@ LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n \n error[E0271]: expected `[closure@$DIR/issue-62203-hrtb-ice.rs:42:16: 42:19]` to be a closure that returns `Unit3`, but it returns `Unit4`\n-  --> $DIR/issue-62203-hrtb-ice.rs:40:9\n+  --> $DIR/issue-62203-hrtb-ice.rs:39:9\n    |\n LL |       let v = Unit2.m(\n    |                     - required by a bound introduced by this call\n-LL |\n LL | /         L {\n LL | |\n+LL | |\n LL | |             f: |x| {\n-LL | |                 drop(x);\n-LL | |                 Unit4\n+...  |\n LL | |             },\n LL | |         },\n    | |_________^ expected struct `Unit3`, found struct `Unit4`"}, {"sha": "1a761ad5441cea3887270de031594c2bb21cc138", "filename": "src/test/ui/intrinsics/const-eval-select-bad.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fintrinsics%2Fconst-eval-select-bad.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -52,10 +52,12 @@ LL |     G: FnOnce<ARG, Output = RET> + ~const Destruct,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `const_eval_select`\n \n error[E0271]: expected `fn(i32) -> bool {bar}` to be a fn item that returns `i32`, but it returns `bool`\n-  --> $DIR/const-eval-select-bad.rs:29:5\n+  --> $DIR/const-eval-select-bad.rs:29:34\n    |\n LL |     const_eval_select((1,), foo, bar);\n-   |     ^^^^^^^^^^^^^^^^^ expected `i32`, found `bool`\n+   |     -----------------            ^^^ expected `i32`, found `bool`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: required by a bound in `const_eval_select`\n   --> $SRC_DIR/core/src/intrinsics.rs:LL:COL"}, {"sha": "00fdb37534613cb828a21a770606928fc317c043", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-5.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-5.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n-  --> $DIR/check-trait-object-bounds-5.rs:23:5\n+  --> $DIR/check-trait-object-bounds-5.rs:23:12\n    |\n LL |     is_obj(x)\n-   |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n+   |     ------ ^ type mismatch resolving `<i32 as Is>::T == i64`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `i64`\n   --> $DIR/check-trait-object-bounds-5.rs:9:14"}, {"sha": "9b0975e5ed3c3532e38d2507ccbb1dad0cfb143a", "filename": "src/test/ui/traits/associated_type_bound/check-trait-object-bounds-6.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/16b33cc1e32d1814d961d97a6e76defc079316d2/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fcheck-trait-object-bounds-6.stderr?ref=16b33cc1e32d1814d961d97a6e76defc079316d2", "patch": "@@ -1,8 +1,10 @@\n error[E0271]: type mismatch resolving `<i32 as Is>::T == i64`\n-  --> $DIR/check-trait-object-bounds-6.rs:20:5\n+  --> $DIR/check-trait-object-bounds-6.rs:20:12\n    |\n LL |     is_obj(x)\n-   |     ^^^^^^ type mismatch resolving `<i32 as Is>::T == i64`\n+   |     ------ ^ type mismatch resolving `<i32 as Is>::T == i64`\n+   |     |\n+   |     required by a bound introduced by this call\n    |\n note: expected this to be `i64`\n   --> $DIR/check-trait-object-bounds-6.rs:9:14"}]}