{"sha": "3e4179766bcecd712824da04356621b8df012ea4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNDE3OTc2NmJjZWNkNzEyODI0ZGEwNDM1NjYyMWI4ZGYwMTJlYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T04:09:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-03T04:09:03Z"}, "message": "Auto merge of #6667 - Manishearth:rustup, r=Manishearth\n\nRustup\n\nPulling in AST changes\n\nchangelog: none", "tree": {"sha": "52e06c436eafde0c5df571806d1792052ac8bece", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e06c436eafde0c5df571806d1792052ac8bece"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4179766bcecd712824da04356621b8df012ea4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4179766bcecd712824da04356621b8df012ea4", "html_url": "https://github.com/rust-lang/rust/commit/3e4179766bcecd712824da04356621b8df012ea4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4179766bcecd712824da04356621b8df012ea4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11edf92946c1739466d0abe7bea5c551ed98a4c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/11edf92946c1739466d0abe7bea5c551ed98a4c7", "html_url": "https://github.com/rust-lang/rust/commit/11edf92946c1739466d0abe7bea5c551ed98a4c7"}, {"sha": "741259bece521f451ae931b4f354139607aae8f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/741259bece521f451ae931b4f354139607aae8f7", "html_url": "https://github.com/rust-lang/rust/commit/741259bece521f451ae931b4f354139607aae8f7"}], "stats": {"total": 79, "additions": 49, "deletions": 30}, "files": [{"sha": "ec6e107d547f0e6d7ff63e4866a641e3d2c4d1a5", "filename": ".editorconfig", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/.editorconfig", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/.editorconfig", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.editorconfig?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -13,6 +13,8 @@ indent_style = space\n indent_size = 4\n \n [*.md]\n+# double whitespace at end of line\n+# denotes a line break in Markdown\n trim_trailing_whitespace = false\n \n [*.yml]"}, {"sha": "1348f7530f41e0a68799819eb7430894126afbb1", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -4,7 +4,7 @@ use crate::utils::{\n };\n use if_chain::if_chain;\n use itertools::Itertools;\n-use rustc_ast::ast::{Async, AttrKind, Attribute, FnRetTy, ItemKind};\n+use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n use rustc_ast::token::CommentKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n@@ -563,7 +563,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                             | ItemKind::ExternCrate(..)\n                             | ItemKind::ForeignMod(..) => return false,\n                             // We found a main function ...\n-                            ItemKind::Fn(_, sig, _, Some(block)) if item.ident.name == sym::main => {\n+                            ItemKind::Fn(box FnKind(_, sig, _, Some(block))) if item.ident.name == sym::main => {\n                                 let is_async = matches!(sig.header.asyncness, Async::Yes { .. });\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,"}, {"sha": "6a85b57af0779044cc2e6fcf009541caa8c7bc32", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -1,5 +1,5 @@\n use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n-use rustc_ast::ast::{AssocItemKind, Extern, FnSig, Item, ItemKind, Ty, TyKind};\n+use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;\n@@ -159,17 +159,17 @@ impl EarlyLintPass for ExcessiveBools {\n                     );\n                 }\n             },\n-            ItemKind::Impl {\n+            ItemKind::Impl(box ImplKind {\n                 of_trait: None, items, ..\n-            }\n-            | ItemKind::Trait(_, _, _, _, items) => {\n+            })\n+            | ItemKind::Trait(box TraitKind(.., items)) => {\n                 for item in items {\n-                    if let AssocItemKind::Fn(_, fn_sig, _, _) = &item.kind {\n+                    if let AssocItemKind::Fn(box FnKind(_, fn_sig, _, _)) = &item.kind {\n                         self.check_fn_sig(cx, fn_sig, item.span);\n                     }\n                 }\n             },\n-            ItemKind::Fn(_, fn_sig, _, _) => self.check_fn_sig(cx, fn_sig, item.span),\n+            ItemKind::Fn(box FnKind(_, fn_sig, _, _)) => self.check_fn_sig(cx, fn_sig, item.span),\n             _ => (),\n         }\n     }"}, {"sha": "7c74b31601872cdc6c51750abc60ec70125f51be", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -1,5 +1,7 @@\n use crate::utils::{span_lint, span_lint_and_then};\n-use rustc_ast::ast::{Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, Item, ItemKind, Local, Pat, PatKind};\n+use rustc_ast::ast::{\n+    Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat, PatKind,\n+};\n use rustc_ast::visit::{walk_block, walk_expr, walk_pat, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_middle::lint::in_external_macro;\n@@ -364,7 +366,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let ItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n+        if let ItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }\n@@ -374,7 +376,7 @@ impl EarlyLintPass for NonExpressiveNames {\n             return;\n         }\n \n-        if let AssocItemKind::Fn(_, ref sig, _, Some(ref blk)) = item.kind {\n+        if let AssocItemKind::Fn(box FnKind(_, ref sig, _, Some(ref blk))) = item.kind {\n             do_check(self, cx, &item.attrs, &sig.decl, blk);\n         }\n     }"}, {"sha": "44eb3968ae738113b8e226687baec8ddd3c9c8ee", "filename": "clippy_lints/src/utils/ast_utils.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fast_utils.rs?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -231,15 +231,15 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Use(l), Use(r)) => eq_use_tree(l, r),\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n         (Mod(l), Mod(r)) => l.inline == r.inline && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_item_kind)),\n         (ForeignMod(l), ForeignMod(r)) => {\n             both(&l.abi, &r.abi, |l, r| eq_str_lit(l, r))\n                 && over(&l.items, &r.items, |l, r| eq_item(l, r, eq_foreign_item_kind))\n         },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))\n@@ -251,7 +251,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         (Struct(lv, lg), Struct(rv, rg)) | (Union(lv, lg), Union(rv, rg)) => {\n             eq_variant_data(lv, rv) && eq_generics(lg, rg)\n         },\n-        (Trait(la, lu, lg, lb, li), Trait(ra, ru, rg, rb, ri)) => {\n+        (Trait(box TraitKind(la, lu, lg, lb, li)), Trait(box TraitKind(ra, ru, rg, rb, ri))) => {\n             la == ra\n                 && matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && eq_generics(lg, rg)\n@@ -260,7 +260,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n         },\n         (TraitAlias(lg, lb), TraitAlias(rg, rb)) => eq_generics(lg, rg) && over(lb, rb, |l, r| eq_generic_bound(l, r)),\n         (\n-            Impl {\n+            Impl(box ImplKind {\n                 unsafety: lu,\n                 polarity: lp,\n                 defaultness: ld,\n@@ -269,8 +269,8 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 of_trait: lot,\n                 self_ty: lst,\n                 items: li,\n-            },\n-            Impl {\n+            }),\n+            Impl(box ImplKind {\n                 unsafety: ru,\n                 polarity: rp,\n                 defaultness: rd,\n@@ -279,7 +279,7 @@ pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n                 of_trait: rot,\n                 self_ty: rst,\n                 items: ri,\n-            },\n+            }),\n         ) => {\n             matches!(lu, Unsafe::No) == matches!(ru, Unsafe::No)\n                 && matches!(lp, ImplPolarity::Positive) == matches!(rp, ImplPolarity::Positive)\n@@ -300,10 +300,10 @@ pub fn eq_foreign_item_kind(l: &ForeignItemKind, r: &ForeignItemKind) -> bool {\n     use ForeignItemKind::*;\n     match (l, r) {\n         (Static(lt, lm, le), Static(rt, rm, re)) => lm == rm && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))\n@@ -318,10 +318,10 @@ pub fn eq_assoc_item_kind(l: &AssocItemKind, r: &AssocItemKind) -> bool {\n     use AssocItemKind::*;\n     match (l, r) {\n         (Const(ld, lt, le), Const(rd, rt, re)) => eq_defaultness(*ld, *rd) && eq_ty(lt, rt) && eq_expr_opt(le, re),\n-        (Fn(ld, lf, lg, lb), Fn(rd, rf, rg, rb)) => {\n+        (Fn(box FnKind(ld, lf, lg, lb)), Fn(box FnKind(rd, rf, rg, rb))) => {\n             eq_defaultness(*ld, *rd) && eq_fn_sig(lf, rf) && eq_generics(lg, rg) && both(lb, rb, |l, r| eq_block(l, r))\n         },\n-        (TyAlias(ld, lg, lb, lt), TyAlias(rd, rg, rb, rt)) => {\n+        (TyAlias(box TyAliasKind(ld, lg, lb, lt)), TyAlias(box TyAliasKind(rd, rg, rb, rt))) => {\n             eq_defaultness(*ld, *rd)\n                 && eq_generics(lg, rg)\n                 && over(lb, rb, |l, r| eq_generic_bound(l, r))"}, {"sha": "e40fdca6a99478608f116af92c6db07af8daeed4", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -3,7 +3,7 @@ use std::ops::Range;\n \n use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n+use rustc_ast::ast::{Expr, ExprKind, ImplKind, Item, ItemKind, LitKind, MacCall, StrLit, StrStyle};\n use rustc_ast::token;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;\n@@ -231,10 +231,10 @@ impl_lint_pass!(Write => [\n \n impl EarlyLintPass for Write {\n     fn check_item(&mut self, _: &EarlyContext<'_>, item: &Item) {\n-        if let ItemKind::Impl {\n+        if let ItemKind::Impl(box ImplKind {\n             of_trait: Some(trait_ref),\n             ..\n-        } = &item.kind\n+        }) = &item.kind\n         {\n             let trait_name = trait_ref\n                 .path"}, {"sha": "b617203bef6d8208dac6f963f5df95bafa421a88", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-01-30\"\n+channel = \"nightly-2021-02-03\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\", \"rustfmt\"]"}, {"sha": "ffced49690e97bc7c57f5455d270cce81670b6b4", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e4179766bcecd712824da04356621b8df012ea4/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e4179766bcecd712824da04356621b8df012ea4/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=3e4179766bcecd712824da04356621b8df012ea4", "patch": "@@ -11,16 +11,12 @@ error: `panic` should not be present in production code\n    |\n LL |     panic!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:10:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:16:5\n@@ -29,18 +25,23 @@ LL |     todo!();\n    |     ^^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n@@ -49,18 +50,23 @@ LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n@@ -69,6 +75,7 @@ LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n@@ -83,6 +90,8 @@ error: usage of the `unreachable!` macro\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:40:5\n@@ -95,18 +104,24 @@ error: `todo` should not be present in production code\n    |\n LL |     todo!();\n    |     ^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:42:5\n    |\n LL |     unimplemented!();\n    |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();\n    |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 16 previous errors\n "}]}