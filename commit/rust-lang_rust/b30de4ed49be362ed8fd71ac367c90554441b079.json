{"sha": "b30de4ed49be362ed8fd71ac367c90554441b079", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMGRlNGVkNDliZTM2MmVkOGZkNzFhYzM2N2M5MDU1NDQ0MWIwNzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-29T16:58:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-29T16:58:29Z"}, "message": "Merge #2679\n\n2679: Resolve traits for infer using lang item infrastructure r=matklad a=kiljacken\n\nAs we already have the infrastructure for collecting lang items, use it to find the right traits when doing type-inference.\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>", "tree": {"sha": "57a73fd5f720d5890b82999fafa897eac70f0749", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a73fd5f720d5890b82999fafa897eac70f0749"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b30de4ed49be362ed8fd71ac367c90554441b079", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCNs2CRBK7hj4Ov3rIwAAdHIIAB/N6/jtkaenppLVland+/JL\nFy90/f/iTvpjstE4nIBNotmODgfjpwr6uwtfaKwv3uEoTlsXodhvmfl9qzZ602WA\nPUQUCkmXUxqdNvkeBStzHIlAbYqC5s+7F5ov3GwCljRsiUIaLIwXAp5mXSiCmS5f\nrv1hEjTu/eafs+ehRWzgts//CTDrLpxcIpx8w9BpCoelLcPfxhVKyP+PN8drV+W0\nR2WbUxgWF55L3lid6pyi9KecNO5rE7yeoWitaY4olD3UsGoCxez4xpul0Qi/gQOA\nmnE8YDUMBhtY0q+hUraK7iLacJBjCjh77hHmZhiXMwcbgqbLuJoeDmCz4HYHoZI=\n=QKu6\n-----END PGP SIGNATURE-----\n", "payload": "tree 57a73fd5f720d5890b82999fafa897eac70f0749\nparent 232785251bc80bc32c2ab52b624ecffbf5e35185\nparent 8280795a85a9a6d5ec43fea00a023e0b7dc9aaa8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577638709 +0000\ncommitter GitHub <noreply@github.com> 1577638709 +0000\n\nMerge #2679\n\n2679: Resolve traits for infer using lang item infrastructure r=matklad a=kiljacken\n\nAs we already have the infrastructure for collecting lang items, use it to find the right traits when doing type-inference.\n\nCo-authored-by: Emil Lauridsen <mine809@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b30de4ed49be362ed8fd71ac367c90554441b079", "html_url": "https://github.com/rust-lang/rust/commit/b30de4ed49be362ed8fd71ac367c90554441b079", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b30de4ed49be362ed8fd71ac367c90554441b079/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "232785251bc80bc32c2ab52b624ecffbf5e35185", "url": "https://api.github.com/repos/rust-lang/rust/commits/232785251bc80bc32c2ab52b624ecffbf5e35185", "html_url": "https://github.com/rust-lang/rust/commit/232785251bc80bc32c2ab52b624ecffbf5e35185"}, {"sha": "8280795a85a9a6d5ec43fea00a023e0b7dc9aaa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8280795a85a9a6d5ec43fea00a023e0b7dc9aaa8", "html_url": "https://github.com/rust-lang/rust/commit/8280795a85a9a6d5ec43fea00a023e0b7dc9aaa8"}], "stats": {"total": 77, "additions": 63, "deletions": 14}, "files": [{"sha": "37c861a877b1c6c25b825389c12243f53a1e6a28", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=b30de4ed49be362ed8fd71ac367c90554441b079", "patch": "@@ -22,6 +22,50 @@ pub enum LangItemTarget {\n     TraitId(TraitId),\n }\n \n+impl LangItemTarget {\n+    pub fn as_enum(self) -> Option<EnumId> {\n+        match self {\n+            LangItemTarget::EnumId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_function(self) -> Option<FunctionId> {\n+        match self {\n+            LangItemTarget::FunctionId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_impl_block(self) -> Option<ImplId> {\n+        match self {\n+            LangItemTarget::ImplBlockId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_static(self) -> Option<StaticId> {\n+        match self {\n+            LangItemTarget::StaticId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_struct(self) -> Option<StructId> {\n+        match self {\n+            LangItemTarget::StructId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn as_trait(self) -> Option<TraitId> {\n+        match self {\n+            LangItemTarget::TraitId(id) => Some(id),\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n pub struct LangItems {\n     items: FxHashMap<SmolStr, LangItemTarget>,"}, {"sha": "82cfa67a9a451658127e83a2c04c0ed19ae06b03", "filename": "crates/ra_hir_def/src/path.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath.rs?ref=b30de4ed49be362ed8fd71ac367c90554441b079", "patch": "@@ -260,12 +260,8 @@ macro_rules! __known_path {\n     (std::ops::RangeTo) => {};\n     (std::ops::RangeToInclusive) => {};\n     (std::ops::RangeInclusive) => {};\n-    (std::boxed::Box) => {};\n     (std::future::Future) => {};\n     (std::ops::Try) => {};\n-    (std::ops::Neg) => {};\n-    (std::ops::Not) => {};\n-    (std::ops::Index) => {};\n     ($path:path) => {\n         compile_error!(\"Please register your known path in the path module\")\n     };"}, {"sha": "37e69599dae8429063dc1fad6a8e778815985906", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=b30de4ed49be362ed8fd71ac367c90554441b079", "patch": "@@ -24,6 +24,7 @@ use hir_def::{\n     body::Body,\n     data::{ConstData, FunctionData},\n     expr::{BindingAnnotation, ExprId, PatId},\n+    lang_item::LangItemTarget,\n     path::{path, Path},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{Mutability, TypeRef},\n@@ -32,6 +33,7 @@ use hir_def::{\n use hir_expand::{diagnostics::DiagnosticSink, name::name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n+use ra_syntax::SmolStr;\n use test_utils::tested_by;\n \n use super::{\n@@ -482,6 +484,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.infer_expr_coerce(self.body.body_expr, &Expectation::has_type(self.return_ty.clone()));\n     }\n \n+    fn resolve_lang_item(&self, name: &str) -> Option<LangItemTarget> {\n+        let krate = self.resolver.krate()?;\n+        let name = SmolStr::new_inline_from_ascii(name.len(), name.as_bytes());\n+        self.db.lang_item(krate, name)\n+    }\n+\n     fn resolve_into_iter_item(&self) -> Option<TypeAliasId> {\n         let path = path![std::iter::IntoIterator];\n         let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n@@ -495,26 +503,22 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_ops_neg_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Neg];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"neg\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_ops_not_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Not];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"not\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_future_future_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::future::Future];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"future_trait\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n \n     fn resolve_boxed_box(&self) -> Option<AdtId> {\n-        let path = path![std::boxed::Box];\n-        let struct_ = self.resolver.resolve_known_struct(self.db, &path)?;\n+        let struct_ = self.resolve_lang_item(\"owned_box\")?.as_struct()?;\n         Some(struct_.into())\n     }\n \n@@ -555,8 +559,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn resolve_ops_index_output(&self) -> Option<TypeAliasId> {\n-        let path = path![std::ops::Index];\n-        let trait_ = self.resolver.resolve_known_trait(self.db, &path)?;\n+        let trait_ = self.resolve_lang_item(\"index\")?.as_trait()?;\n         self.db.trait_data(trait_).associated_type_by_name(&name![Output])\n     }\n }"}, {"sha": "f7e042c12b5b085667ba164f4e96de982cd6d7e4", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=b30de4ed49be362ed8fd71ac367c90554441b079", "patch": "@@ -20,6 +20,7 @@ fn test() {\n mod prelude {}\n \n mod boxed {\n+    #[lang = \"owned_box\"]\n     pub struct Box<T: ?Sized> {\n         inner: *mut T,\n     }"}, {"sha": "4b268510cf0a5d0a9933338f7a9d68c71afc556b", "filename": "crates/ra_hir_ty/src/tests/traits.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b30de4ed49be362ed8fd71ac367c90554441b079/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=b30de4ed49be362ed8fd71ac367c90554441b079", "patch": "@@ -27,6 +27,7 @@ fn test() {\n //- /std.rs crate:std\n #[prelude_import] use future::*;\n mod future {\n+    #[lang = \"future_trait\"]\n     trait Future {\n         type Output;\n     }\n@@ -56,6 +57,7 @@ fn test() {\n //- /std.rs crate:std\n #[prelude_import] use future::*;\n mod future {\n+    #[lang = \"future_trait\"]\n     trait Future {\n         type Output;\n     }\n@@ -198,6 +200,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"neg\"]\n     pub trait Neg {\n         type Output;\n     }\n@@ -230,6 +233,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"not\"]\n     pub trait Not {\n         type Output;\n     }\n@@ -506,6 +510,7 @@ fn test() {\n \n #[prelude_import] use ops::*;\n mod ops {\n+    #[lang = \"index\"]\n     pub trait Index<Idx> {\n         type Output;\n     }"}]}