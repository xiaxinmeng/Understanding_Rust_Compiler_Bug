{"sha": "f7afd461c7a1e9431a3ce46c23bc7ccd233faa99", "node_id": "C_kwDOAAsO6NoAKGY3YWZkNDYxYzdhMWU5NDMxYTNjZTQ2YzIzYmM3Y2NkMjMzZmFhOTk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-02T21:16:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-02T21:16:19Z"}, "message": "Rollup merge of #91466 - nnethercote:Symbol-interner-comments, r=Mark-Simulacrum\n\nImprove the comments in `Symbol::interner`.\n\nr? `@Mark-Simulacrum`", "tree": {"sha": "d92225aa86dc0df297ccae883b03e5e7523379fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92225aa86dc0df297ccae883b03e5e7523379fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqTejCRBK7hj4Ov3rIwAAD40IAGNWpURbOHvNYAowZilrWZ/T\nfH/jGSjdcgj7DJeIyDlrTIij7BmzqmkJ8qp32pGpYmVM5E8BEMfkNQOGBUG75mz1\nVTeBc5mnnZ1gyZTCDeOLlbp7jVyqWpmHkRSWTDY+v4BC4pJFb88cDp46x2nb3gR9\nr2qzijeAGYT1ltI8HhYnhae2IphOtbzSZQ6VONtxyw4yNx8idTUkGBJ0O/tdIsE6\nSoUMnogvAokvWERBDmG9G22VzdDSqiJkupl+bTw8ex9Ll8ixCGH6/Y+eosZcr+Af\nSUAQdj+DADBDdUiyjeoqoUcbqBt2Fa2ZZ/ExFTfiQRmTF5CpEFeiHASAOo1vbBk=\n=y28I\n-----END PGP SIGNATURE-----\n", "payload": "tree d92225aa86dc0df297ccae883b03e5e7523379fe\nparent 6e5f4c2f1b67ab46365d33c84f2bd64b25993603\nparent 66153d76e25834812d2785675c98e95d5ecb1830\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638479779 +0100\ncommitter GitHub <noreply@github.com> 1638479779 +0100\n\nRollup merge of #91466 - nnethercote:Symbol-interner-comments, r=Mark-Simulacrum\n\nImprove the comments in `Symbol::interner`.\n\nr? `@Mark-Simulacrum`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99", "html_url": "https://github.com/rust-lang/rust/commit/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5f4c2f1b67ab46365d33c84f2bd64b25993603", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5f4c2f1b67ab46365d33c84f2bd64b25993603", "html_url": "https://github.com/rust-lang/rust/commit/6e5f4c2f1b67ab46365d33c84f2bd64b25993603"}, {"sha": "66153d76e25834812d2785675c98e95d5ecb1830", "url": "https://api.github.com/repos/rust-lang/rust/commits/66153d76e25834812d2785675c98e95d5ecb1830", "html_url": "https://github.com/rust-lang/rust/commit/66153d76e25834812d2785675c98e95d5ecb1830"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "dd6ce60abfb3dd0393c36064f9f58e257af46ac5", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7afd461c7a1e9431a3ce46c23bc7ccd233faa99/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f7afd461c7a1e9431a3ce46c23bc7ccd233faa99", "patch": "@@ -1716,8 +1716,9 @@ pub(crate) struct Interner(Lock<InternerInner>);\n // found that to regress performance up to 2% in some cases. This might be\n // revisited after further improvements to `indexmap`.\n //\n-// This type is private to prevent accidentally constructing more than one `Interner` on the same\n-// thread, which makes it easy to mixup `Symbol`s between `Interner`s.\n+// This type is private to prevent accidentally constructing more than one\n+// `Interner` on the same thread, which makes it easy to mixup `Symbol`s\n+// between `Interner`s.\n #[derive(Default)]\n struct InternerInner {\n     arena: DroplessArena,\n@@ -1743,14 +1744,20 @@ impl Interner {\n \n         let name = Symbol::new(inner.strings.len() as u32);\n \n-        // `from_utf8_unchecked` is safe since we just allocated a `&str` which is known to be\n-        // UTF-8.\n+        // SAFETY: we convert from `&str` to `&[u8]`, clone it into the arena,\n+        // and immediately convert the clone back to `&[u8], all because there\n+        // is no `inner.arena.alloc_str()` method. This is clearly safe.\n         let string: &str =\n             unsafe { str::from_utf8_unchecked(inner.arena.alloc_slice(string.as_bytes())) };\n-        // It is safe to extend the arena allocation to `'static` because we only access\n-        // these while the arena is still alive.\n+\n+        // SAFETY: we can extend the arena allocation to `'static` because we\n+        // only access these while the arena is still alive.\n         let string: &'static str = unsafe { &*(string as *const str) };\n         inner.strings.push(string);\n+\n+        // This second hash table lookup can be avoided by using `RawEntryMut`,\n+        // but this code path isn't hot enough for it to be worth it. See\n+        // #91445 for details.\n         inner.names.insert(string, name);\n         name\n     }"}]}