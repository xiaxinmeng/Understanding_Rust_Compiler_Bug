{"sha": "887503ad144a8c4f955be2d1220e78cf8f707360", "node_id": "C_kwDOAAsO6NoAKDg4NzUwM2FkMTQ0YThjNGY5NTViZTJkMTIyMGU3OGNmOGY3MDczNjA", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-13T02:28:14Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-30T22:54:48Z"}, "message": "Add #[must_use] to mem/ptr functions", "tree": {"sha": "3c56d1988c1fc21cc1c26f68f4e4bc19e76419b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c56d1988c1fc21cc1c26f68f4e4bc19e76419b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/887503ad144a8c4f955be2d1220e78cf8f707360", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/887503ad144a8c4f955be2d1220e78cf8f707360", "html_url": "https://github.com/rust-lang/rust/commit/887503ad144a8c4f955be2d1220e78cf8f707360", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/887503ad144a8c4f955be2d1220e78cf8f707360/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "044674337a180c494b7e6fdce4b20dca93324b2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/044674337a180c494b7e6fdce4b20dca93324b2a", "html_url": "https://github.com/rust-lang/rust/commit/044674337a180c494b7e6fdce4b20dca93324b2a"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "7d005666a74a6514e32bd7b55e15e00f87236c74", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=887503ad144a8c4f955be2d1220e78cf8f707360", "patch": "@@ -296,6 +296,7 @@ pub fn forget_unsized<T: ?Sized>(t: T) {\n ///\n /// [alignment]: align_of\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_size_of\", since = \"1.24.0\")]\n@@ -324,6 +325,7 @@ pub const fn size_of<T>() -> usize {\n /// assert_eq!(13, mem::size_of_val(y));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_size_of_val\", issue = \"46571\")]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"mem_size_of_val\")]\n@@ -373,6 +375,7 @@ pub const fn size_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(13, unsafe { mem::size_of_val_raw(y) });\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n #[rustc_const_unstable(feature = \"const_size_of_val_raw\", issue = \"46571\")]\n pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n@@ -397,6 +400,7 @@ pub const unsafe fn size_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// assert_eq!(4, mem::min_align_of::<i32>());\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of` instead\", since = \"1.2.0\")]\n pub fn min_align_of<T>() -> usize {\n@@ -418,6 +422,7 @@ pub fn min_align_of<T>() -> usize {\n /// assert_eq!(4, mem::min_align_of_val(&5i32));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_deprecated(reason = \"use `align_of_val` instead\", since = \"1.2.0\")]\n pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n@@ -441,6 +446,7 @@ pub fn min_align_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(4, mem::align_of::<i32>());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_align_of\", since = \"1.24.0\")]\n@@ -462,6 +468,7 @@ pub const fn align_of<T>() -> usize {\n /// assert_eq!(4, mem::align_of_val(&5i32));\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_align_of_val\", issue = \"46571\")]\n #[allow(deprecated)]\n@@ -507,6 +514,7 @@ pub const fn align_of_val<T: ?Sized>(val: &T) -> usize {\n /// assert_eq!(4, unsafe { mem::align_of_val_raw(&5i32) });\n /// ```\n #[inline]\n+#[must_use]\n #[unstable(feature = \"layout_for_ptr\", issue = \"69835\")]\n #[rustc_const_unstable(feature = \"const_align_of_val_raw\", issue = \"46571\")]\n pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n@@ -571,6 +579,7 @@ pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n /// }\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.36.0\")]\n #[rustc_diagnostic_item = \"needs_drop\"]\n@@ -618,6 +627,7 @@ pub const fn needs_drop<T>() -> bool {\n /// let _y: fn() = unsafe { mem::zeroed() }; // And again!\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n #[allow(deprecated)]\n@@ -653,6 +663,7 @@ pub unsafe fn zeroed<T>() -> T {\n /// [assume_init]: MaybeUninit::assume_init\n /// [inv]: MaybeUninit#initialization-invariant\n #[inline(always)]\n+#[must_use]\n #[rustc_deprecated(since = \"1.39.0\", reason = \"use `mem::MaybeUninit` instead\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated_in_future)]\n@@ -938,6 +949,7 @@ pub fn drop<T>(_x: T) {}\n /// assert_eq!(foo_array, [10]);\n /// ```\n #[inline]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_transmute_copy\", issue = \"83165\")]\n pub const unsafe fn transmute_copy<T, U>(src: &T) -> U {\n@@ -1051,6 +1063,7 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n /// assert_eq!(mem::variant_count::<Result<!, !>>(), 2);\n /// ```\n #[inline(always)]\n+#[must_use]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_diagnostic_item = \"mem_variant_count\"]"}, {"sha": "8ab72e6aeeafa3844d37b1c0e4abeee2b64c599f", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=887503ad144a8c4f955be2d1220e78cf8f707360", "patch": "@@ -204,6 +204,7 @@ pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {\n /// assert!(p.is_null());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]\n@@ -223,6 +224,7 @@ pub const fn null<T>() -> *const T {\n /// assert!(p.is_null());\n /// ```\n #[inline(always)]\n+#[must_use]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_promotable]\n #[rustc_const_stable(feature = \"const_ptr_null\", since = \"1.24.0\")]"}, {"sha": "8e053688b21f6a02cf567f59acdd78ff5bf7769a", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=887503ad144a8c4f955be2d1220e78cf8f707360", "patch": "@@ -83,6 +83,7 @@ impl<T: Sized> NonNull<T> {\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[rustc_const_stable(feature = \"const_nonnull_dangling\", since = \"1.36.0\")]\n+    #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a non-zero usize which is then casted\n@@ -419,6 +420,7 @@ impl<T> NonNull<[T]> {\n     /// but `let slice = NonNull::from(&x[..]);` would be a better way to write code like this.)\n     #[unstable(feature = \"nonnull_slice_from_raw_parts\", issue = \"71941\")]\n     #[rustc_const_unstable(feature = \"const_nonnull_slice_from_raw_parts\", issue = \"71941\")]\n+    #[must_use]\n     #[inline]\n     pub const fn slice_from_raw_parts(data: NonNull<T>, len: usize) -> Self {\n         // SAFETY: `data` is a `NonNull` pointer which is necessarily non-null"}, {"sha": "51d67436b85d6d75d73dd44ad27ae47e356bf4e4", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887503ad144a8c4f955be2d1220e78cf8f707360/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=887503ad144a8c4f955be2d1220e78cf8f707360", "patch": "@@ -68,6 +68,7 @@ impl<T: Sized> Unique<T> {\n     /// a `T`, which means this must not be used as a \"not yet initialized\"\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n+    #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n         // SAFETY: mem::align_of() returns a valid, non-null pointer. The"}, {"sha": "d93ffcb2262eb362edb6e0cd773599847741b139", "filename": "src/test/ui/issues/issue-31299.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/887503ad144a8c4f955be2d1220e78cf8f707360/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "raw_url": "https://github.com/rust-lang/rust/raw/887503ad144a8c4f955be2d1220e78cf8f707360/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31299.rs?ref=887503ad144a8c4f955be2d1220e78cf8f707360", "patch": "@@ -29,6 +29,7 @@ struct PtrBack<T: Front>(Vec<T::Back>);\n \n struct M(PtrBack<Vec<M>>);\n \n+#[allow(unused_must_use)]\n fn main() {\n     std::mem::size_of::<M>();\n }"}]}