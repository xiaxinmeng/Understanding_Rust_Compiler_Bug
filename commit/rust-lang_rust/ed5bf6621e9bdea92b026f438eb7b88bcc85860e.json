{"sha": "ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWJmNjYyMWU5YmRlYTkyYjAyNmY0MzhlYjdiODhiY2M4NTg2MGU=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-26T01:32:04Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-30T16:55:41Z"}, "message": "lib{serialize, uuid}: Fix snake case errors.\n\nA number of functions/methods have been moved or renamed to align\nbetter with rust standard conventions.\n\nserialize::ebml::reader::Doc => seriaize::ebml::Doc::new\nserialize::ebml::reader::Decoder => Decoder::new\nserialize::ebml::writer::Encoder => Encoder::new\n\n[breaking-change]", "tree": {"sha": "4c6f704d227924e634d4cb1403a2c18c4f3fb757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c6f704d227924e634d4cb1403a2c18c4f3fb757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "html_url": "https://github.com/rust-lang/rust/commit/ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3faa6762c18333154961029393fdc5e58636be66", "url": "https://api.github.com/repos/rust-lang/rust/commits/3faa6762c18333154961029393fdc5e58636be66", "html_url": "https://github.com/rust-lang/rust/commit/3faa6762c18333154961029393fdc5e58636be66"}], "stats": {"total": 69, "additions": 37, "deletions": 32}, "files": [{"sha": "9ba2c2cd258ed0dc5643a87acd30385b7246b25f", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "patch": "@@ -26,6 +26,10 @@ pub struct Doc<'a> {\n }\n \n impl<'doc> Doc<'doc> {\n+    pub fn new(data: &'doc [u8]) -> Doc<'doc> {\n+        Doc { data: data, start: 0u, end: data.len() }\n+    }\n+\n     pub fn get<'a>(&'a self, tag: uint) -> Doc<'a> {\n         reader::get_doc(*self, tag)\n     }\n@@ -192,10 +196,6 @@ pub mod reader {\n         }\n     }\n \n-    pub fn Doc<'a>(data: &'a [u8]) -> Doc<'a> {\n-        Doc { data: data, start: 0u, end: data.len() }\n-    }\n-\n     pub fn doc_at<'a>(data: &'a [u8], start: uint) -> DecodeResult<TaggedDoc<'a>> {\n         let elt_tag = try!(vuint_at(data, start));\n         let elt_size = try!(vuint_at(data, elt_tag.next));\n@@ -296,14 +296,14 @@ pub mod reader {\n         pos: uint,\n     }\n \n-    pub fn Decoder<'a>(d: Doc<'a>) -> Decoder<'a> {\n-        Decoder {\n-            parent: d,\n-            pos: d.start\n+    impl<'doc> Decoder<'doc> {\n+        pub fn new(d: Doc<'doc>) -> Decoder<'doc> {\n+            Decoder {\n+                parent: d,\n+                pos: d.start\n+            }\n         }\n-    }\n \n-    impl<'doc> Decoder<'doc> {\n         fn _check_label(&mut self, lbl: &str) -> DecodeResult<()> {\n             if self.pos < self.parent.end {\n                 let TaggedDoc { tag: r_tag, doc: r_doc } =\n@@ -673,15 +673,15 @@ pub mod writer {\n         })\n     }\n \n-    pub fn Encoder<'a, W: Writer + Seek>(w: &'a mut W) -> Encoder<'a, W> {\n-        Encoder {\n-            writer: w,\n-            size_positions: vec!(),\n-        }\n-    }\n-\n     // FIXME (#2741): Provide a function to write the standard ebml header.\n     impl<'a, W: Writer + Seek> Encoder<'a, W> {\n+        pub fn new(w: &'a mut W) -> Encoder<'a, W> {\n+            Encoder {\n+                writer: w,\n+                size_positions: vec!(),\n+            }\n+        }\n+\n         /// FIXME(pcwalton): Workaround for badness in trans. DO NOT USE ME.\n         pub unsafe fn unsafe_clone(&self) -> Encoder<'a, W> {\n             Encoder {\n@@ -1020,6 +1020,7 @@ pub mod writer {\n \n #[cfg(test)]\n mod tests {\n+    use super::Doc;\n     use ebml::reader;\n     use ebml::writer;\n     use {Encodable, Decodable};\n@@ -1081,11 +1082,11 @@ mod tests {\n             debug!(\"v == {}\", v);\n             let mut wr = MemWriter::new();\n             {\n-                let mut ebml_w = writer::Encoder(&mut wr);\n+                let mut ebml_w = writer::Encoder::new(&mut wr);\n                 let _ = v.encode(&mut ebml_w);\n             }\n-            let ebml_doc = reader::Doc(wr.get_ref());\n-            let mut deser = reader::Decoder(ebml_doc);\n+            let ebml_doc = Doc::new(wr.get_ref());\n+            let mut deser = reader::Decoder::new(ebml_doc);\n             let v1 = Decodable::decode(&mut deser).unwrap();\n             debug!(\"v1 == {}\", v1);\n             assert_eq!(v, v1);\n@@ -1099,6 +1100,7 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    #![allow(non_snake_case_functions)]\n     extern crate test;\n     use self::test::Bencher;\n     use ebml::reader;"}, {"sha": "c157d83ced13d6bdd7ac776a867891df44376142", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -795,14 +795,16 @@ mod test {\n \n     #[test]\n     fn test_serialize_round_trip() {\n-        use serialize::ebml;\n+        use serialize::ebml::Doc;\n+        use serialize::ebml::writer::Encoder;\n+        use serialize::ebml::reader::Decoder;\n         use serialize::{Encodable, Decodable};\n \n         let u = Uuid::new_v4();\n         let mut wr = MemWriter::new();\n-        let _ = u.encode(&mut ebml::writer::Encoder(&mut wr));\n-        let doc = ebml::reader::Doc(wr.get_ref());\n-        let u2 = Decodable::decode(&mut ebml::reader::Decoder(doc)).unwrap();\n+        let _ = u.encode(&mut Encoder::new(&mut wr));\n+        let doc = Doc::new(wr.get_ref());\n+        let u2 = Decodable::decode(&mut Decoder::new(doc)).unwrap();\n         assert_eq!(u, u2);\n     }\n "}, {"sha": "217878892d62310e787677d36e28f1bc94732509", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "patch": "@@ -33,12 +33,12 @@ fn test_ebml<'a, 'b, A:\n     Decodable<EBReader::Decoder<'b>>\n >(a1: &A) {\n     let mut wr = std::io::MemWriter::new();\n-    let mut ebml_w = EBWriter::Encoder(&mut wr);\n+    let mut ebml_w = EBwriter::Encoder::new(&mut wr);\n     a1.encode(&mut ebml_w);\n     let bytes = wr.get_ref();\n \n-    let d: serialize::ebml::Doc<'a> = EBReader::Doc(bytes);\n-    let mut decoder: EBReader::Decoder<'a> = EBReader::Decoder(d);\n+    let d: serialize::ebml::Doc<'a> = EBDoc::new(bytes);\n+    let mut decoder: EBReader::Decoder<'a> = EBreader::Decoder::new(d);\n     let a2: A = Decodable::decode(&mut decoder);\n     assert!(*a1 == a2);\n }"}, {"sha": "2e6b3b8e800b97fbde36c733be9559b7bd755b02", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "patch": "@@ -22,6 +22,7 @@ use std::io::MemWriter;\n use rand::{random, Rand};\n use serialize::{Encodable, Decodable};\n use serialize::ebml;\n+use serialize::ebml::Doc;\n use serialize::ebml::writer::Encoder;\n use serialize::ebml::reader::Decoder;\n \n@@ -58,10 +59,10 @@ fn roundtrip<'a, T: Rand + Eq + Encodable<Encoder<'a>> +\n                     Decodable<Decoder<'a>>>() {\n     let obj: T = random();\n     let mut w = MemWriter::new();\n-    let mut e = Encoder(&mut w);\n+    let mut e = Encoder::new(&mut w);\n     obj.encode(&mut e);\n-    let doc = ebml::reader::Doc(@w.get_ref());\n-    let mut dec = Decoder(doc);\n+    let doc = ebml::Doc::new(@w.get_ref());\n+    let mut dec = Decoder::new(doc);\n     let obj2 = Decodable::decode(&mut dec);\n     assert!(obj == obj2);\n }"}, {"sha": "913e09dd8cb350b8f0ed1a74ddb4cc8571dabc45", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5bf6621e9bdea92b026f438eb7b88bcc85860e/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=ed5bf6621e9bdea92b026f438eb7b88bcc85860e", "patch": "@@ -43,7 +43,7 @@ fn encode_ebml<'a,\n                T: Encodable<writer::Encoder<'a, MemWriter>,\n                             std::io::IoError>>(val: &T,\n                                                wr: &'a mut MemWriter) {\n-    let mut encoder = writer::Encoder(wr);\n+    let mut encoder = writer::Encoder::new(wr);\n     val.encode(&mut encoder);\n }\n "}]}