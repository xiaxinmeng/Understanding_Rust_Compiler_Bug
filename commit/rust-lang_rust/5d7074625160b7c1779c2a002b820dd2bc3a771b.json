{"sha": "5d7074625160b7c1779c2a002b820dd2bc3a771b", "node_id": "C_kwDOAAsO6NoAKDVkNzA3NDYyNTE2MGI3YzE3NzljMmEwMDJiODIwZGQyYmMzYTc3MWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T18:43:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-06T18:43:28Z"}, "message": "Auto merge of #9920 - naosense:suppress_lint_in_const, r=xFrednet\n\nadd `suppress_restriction_lint_in_const` config\n\nAccording to #9808 , add a new lint `suppress_lint_in_const` to report even in const context. BTW, i am not good at naming either, if anyone have a better idea, i am happy to change it.\n\nThis PR is still in progress, so i keep it draft.\n\n- \\[x] Followed [lint naming conventions][lint_naming]\n- \\[x] Added passing UI tests (including committed `.stderr` file)\n- \\[x] `cargo test` passes locally\n- \\[x] Executed `cargo dev update_lints`\n- \\[x] Added lint documentation\n- \\[x] Run `cargo dev fmt`\n\nchangelog: Enhancement: [`indexing_slicing`]: add new config `suppress-restriction-lint-in-const` to enable restriction lints, even if the suggestion might not be applicable\n\nr? `@xFrendet`", "tree": {"sha": "ac94cacd4338a6229c2f7fe79bfbb8938d84b6b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac94cacd4338a6229c2f7fe79bfbb8938d84b6b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d7074625160b7c1779c2a002b820dd2bc3a771b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7074625160b7c1779c2a002b820dd2bc3a771b", "html_url": "https://github.com/rust-lang/rust/commit/5d7074625160b7c1779c2a002b820dd2bc3a771b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d7074625160b7c1779c2a002b820dd2bc3a771b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0bf70eeec8724034df39133a1960b4ac42169f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0bf70eeec8724034df39133a1960b4ac42169f", "html_url": "https://github.com/rust-lang/rust/commit/8a0bf70eeec8724034df39133a1960b4ac42169f"}, {"sha": "eec5039f09bc7992fbacaf0778adf85dcad54997", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec5039f09bc7992fbacaf0778adf85dcad54997", "html_url": "https://github.com/rust-lang/rust/commit/eec5039f09bc7992fbacaf0778adf85dcad54997"}], "stats": {"total": 242, "additions": 221, "deletions": 21}, "files": [{"sha": "eebfb753a0c5dfdefcb0e542676fcbf9c8faba6d", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 32, "deletions": 13, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -1,13 +1,13 @@\n //! lint on indexing and slicing operations\n \n use clippy_utils::consts::{constant, Constant};\n-use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::higher;\n use rustc_ast::ast::RangeLimits;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -82,15 +82,29 @@ declare_clippy_lint! {\n     \"indexing/slicing usage\"\n }\n \n-declare_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n+impl_lint_pass!(IndexingSlicing => [INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING]);\n+\n+#[derive(Copy, Clone)]\n+pub struct IndexingSlicing {\n+    suppress_restriction_lint_in_const: bool,\n+}\n+\n+impl IndexingSlicing {\n+    pub fn new(suppress_restriction_lint_in_const: bool) -> Self {\n+        Self {\n+            suppress_restriction_lint_in_const,\n+        }\n+    }\n+}\n \n impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+        if self.suppress_restriction_lint_in_const && cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n             return;\n         }\n \n         if let ExprKind::Index(array, index) = &expr.kind {\n+            let note = \"the suggestion might not be applicable in constant blocks\";\n             let ty = cx.typeck_results().expr_ty(array).peel_refs();\n             if let Some(range) = higher::Range::hir(index) {\n                 // Ranged indexes, i.e., &x[n..m], &x[n..], &x[..n] and &x[..]\n@@ -141,7 +155,13 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     (None, None) => return, // [..] is ok.\n                 };\n \n-                span_lint_and_help(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", None, help_msg);\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"slicing may panic\", |diag| {\n+                    diag.help(help_msg);\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n+                });\n             } else {\n                 // Catchall non-range index, i.e., [n] or [n << m]\n                 if let ty::Array(..) = ty.kind() {\n@@ -156,14 +176,13 @@ impl<'tcx> LateLintPass<'tcx> for IndexingSlicing {\n                     }\n                 }\n \n-                span_lint_and_help(\n-                    cx,\n-                    INDEXING_SLICING,\n-                    expr.span,\n-                    \"indexing may panic\",\n-                    None,\n-                    \"consider using `.get(n)` or `.get_mut(n)` instead\",\n-                );\n+                span_lint_and_then(cx, INDEXING_SLICING, expr.span, \"indexing may panic\", |diag| {\n+                    diag.help(\"consider using `.get(n)` or `.get_mut(n)` instead\");\n+\n+                    if cx.tcx.hir().is_inside_const_context(expr.hir_id) {\n+                        diag.note(note);\n+                    }\n+                });\n             }\n         }\n     }"}, {"sha": "3bcc2216f525e9b91740a4e13f140b4ebd523744", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -561,6 +561,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n     let allow_expect_in_tests = conf.allow_expect_in_tests;\n     let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n+    let suppress_restriction_lint_in_const = conf.suppress_restriction_lint_in_const;\n     store.register_late_pass(move |_| Box::new(approx_const::ApproxConstant::new(msrv())));\n     store.register_late_pass(move |_| {\n         Box::new(methods::Methods::new(\n@@ -682,7 +683,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(inherent_impl::MultipleInherentImpl));\n     store.register_late_pass(|_| Box::new(neg_cmp_op_on_partial_ord::NoNegCompOpForPartialOrd));\n     store.register_late_pass(|_| Box::new(unwrap::Unwrap));\n-    store.register_late_pass(|_| Box::new(indexing_slicing::IndexingSlicing));\n+    store.register_late_pass(move |_| {\n+        Box::new(indexing_slicing::IndexingSlicing::new(\n+            suppress_restriction_lint_in_const,\n+        ))\n+    });\n     store.register_late_pass(|_| Box::new(non_copy_const::NonCopyConst));\n     store.register_late_pass(|_| Box::new(ptr_offset_with_cast::PtrOffsetWithCast));\n     store.register_late_pass(|_| Box::new(redundant_clone::RedundantClone));"}, {"sha": "f5f0e3ef48cfb557fccaca962ae612d981193000", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -406,6 +406,14 @@ define_Conf! {\n     ///\n     /// Whether to allow mixed uninlined format args, e.g. `format!(\"{} {}\", a, foo.bar)`\n     (allow_mixed_uninlined_format_args: bool = true),\n+    /// Lint: INDEXING_SLICING\n+    ///\n+    /// Whether to suppress a restriction lint in constant code. In same\n+    /// cases the restructured operation might not be unavoidable, as the\n+    /// suggested counterparts are unavailable in constant code. This\n+    /// configuration will cause restriction lints to trigger even\n+    /// if no suggestion can be made.\n+    (suppress_restriction_lint_in_const: bool = false),\n }\n \n /// Search for the configuration file."}, {"sha": "1b9384d7e3ee6092512025e92324a856aadd09a4", "filename": "tests/ui-toml/suppress_lint_in_const/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Fclippy.toml?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -0,0 +1 @@\n+suppress-restriction-lint-in-const = true"}, {"sha": "5a2df9f6c5d912779067a1fe0ce6dcbd32a0f09f", "filename": "tests/ui-toml/suppress_lint_in_const/test.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.rs?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -0,0 +1,60 @@\n+#![feature(inline_const)]\n+#![warn(clippy::indexing_slicing)]\n+// We also check the out_of_bounds_indexing lint here, because it lints similar things and\n+// we want to avoid false positives.\n+#![warn(clippy::out_of_bounds_indexing)]\n+#![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n+\n+const ARR: [i32; 2] = [1, 2];\n+const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+\n+const fn idx() -> usize {\n+    1\n+}\n+const fn idx4() -> usize {\n+    4\n+}\n+\n+fn main() {\n+    let x = [1, 2, 3, 4];\n+    let index: usize = 1;\n+    x[index];\n+    x[4]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[1 << 3]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+\n+    x[0]; // Ok, should not produce stderr.\n+    x[3]; // Ok, should not produce stderr.\n+    x[const { idx() }]; // Ok, should not produce stderr.\n+    x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    const { &ARR[idx()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+    const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+\n+    let y = &x;\n+    y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021\n+    y[4]; // Ok, rustc will handle references too.\n+\n+    let v = vec![0; 5];\n+    v[0];\n+    v[10];\n+    v[1 << 3];\n+\n+    const N: usize = 15; // Out of bounds\n+    const M: usize = 3; // In bounds\n+    x[N]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n+    x[M]; // Ok, should not produce stderr.\n+    v[N];\n+    v[M];\n+}\n+\n+/// An opaque integer representation\n+pub struct Integer<'a> {\n+    /// The underlying data\n+    value: &'a [u8],\n+}\n+impl<'a> Integer<'a> {\n+    // Check whether `self` holds a negative number or not\n+    pub const fn is_negative(&self) -> bool {\n+        self.value[0] & 0b1000_0000 != 0\n+    }\n+}"}, {"sha": "bc178b7e1319d4e81f9ee4303b6338d5a7e591ef", "filename": "tests/ui-toml/suppress_lint_in_const/test.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fsuppress_lint_in_const%2Ftest.stderr?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -0,0 +1,70 @@\n+error[E0080]: evaluation of `main::{constant#3}` failed\n+  --> $DIR/test.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+note: erroneous constant used\n+  --> $DIR/test.rs:31:5\n+   |\n+LL |     const { &ARR[idx4()] }; // Ok, should not produce stderr, since `suppress-restriction-lint-in-const` is set true.\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:22:5\n+   |\n+LL |     x[index];\n+   |     ^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     v[0];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:39:5\n+   |\n+LL |     v[10];\n+   |     ^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:40:5\n+   |\n+LL |     v[1 << 3];\n+   |     ^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:46:5\n+   |\n+LL |     v[N];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error: indexing may panic\n+  --> $DIR/test.rs:47:5\n+   |\n+LL |     v[M];\n+   |     ^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/test.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "6ef2abb15b285366294714c9b81251ce9716971b", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -35,6 +35,7 @@ error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown fie\n            pass-by-value-size-limit\n            single-char-binding-names-threshold\n            standard-macro-braces\n+           suppress-restriction-lint-in-const\n            third-party\n            too-large-for-stack\n            too-many-arguments-threshold"}, {"sha": "26abc9edb5e445f16976d94e032d33003388166d", "filename": "tests/ui/indexing_slicing_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui%2Findexing_slicing_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui%2Findexing_slicing_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.rs?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -6,7 +6,7 @@\n #![allow(unconditional_panic, clippy::no_effect, clippy::unnecessary_operation)]\n \n const ARR: [i32; 2] = [1, 2];\n-const REF: &i32 = &ARR[idx()]; // Ok, should not produce stderr.\n+const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n \n const fn idx() -> usize {\n@@ -27,8 +27,8 @@ fn main() {\n     x[3]; // Ok, should not produce stderr.\n     x[const { idx() }]; // Ok, should not produce stderr.\n     x[const { idx4() }]; // Ok, let rustc's `unconditional_panic` lint handle `usize` indexing on arrays.\n-    const { &ARR[idx()] }; // Ok, should not produce stderr.\n-    const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+    const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+    const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n \n     let y = &x;\n     y[0]; // Ok, referencing shouldn't affect this lint. See the issue 6021"}, {"sha": "8fd77913a3fd97626ed617357380b578ab13ef1c", "filename": "tests/ui/indexing_slicing_index.stderr", "status": "modified", "additions": 40, "deletions": 4, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui%2Findexing_slicing_index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5d7074625160b7c1779c2a002b820dd2bc3a771b/tests%2Fui%2Findexing_slicing_index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing_index.stderr?ref=5d7074625160b7c1779c2a002b820dd2bc3a771b", "patch": "@@ -1,13 +1,32 @@\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:9:20\n+   |\n+LL | const REF: &i32 = &ARR[idx()]; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |                    ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:10:24\n+   |\n+LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n+   |                        ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n error[E0080]: evaluation of `main::{constant#3}` failed\n   --> $DIR/indexing_slicing_index.rs:31:14\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |              ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n note: erroneous constant used\n   --> $DIR/indexing_slicing_index.rs:31:5\n    |\n-LL |     const { &ARR[idx4()] }; // Ok, let rustc handle const contexts.\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: indexing may panic\n@@ -17,7 +36,24 @@ LL |     x[index];\n    |     ^^^^^^^^\n    |\n    = help: consider using `.get(n)` or `.get_mut(n)` instead\n-   = note: `-D clippy::indexing-slicing` implied by `-D warnings`\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:30:14\n+   |\n+LL |     const { &ARR[idx()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |              ^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n+\n+error: indexing may panic\n+  --> $DIR/indexing_slicing_index.rs:31:14\n+   |\n+LL |     const { &ARR[idx4()] }; // This should be linted, since `suppress-restriction-lint-in-const` default is false.\n+   |              ^^^^^^^^^^^\n+   |\n+   = help: consider using `.get(n)` or `.get_mut(n)` instead\n+   = note: the suggestion might not be applicable in constant blocks\n \n error: indexing may panic\n   --> $DIR/indexing_slicing_index.rs:38:5\n@@ -65,6 +101,6 @@ error[E0080]: evaluation of constant value failed\n LL | const REF_ERR: &i32 = &ARR[idx4()]; // Ok, let rustc handle const contexts.\n    |                        ^^^^^^^^^^^ index out of bounds: the length is 2 but the index is 4\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 12 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}]}