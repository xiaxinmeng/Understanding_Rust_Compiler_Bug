{"sha": "bd421cb5a5937ce42ddddd392ec743c8154f5d56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNDIxY2I1YTU5MzdjZTQyZGRkZGQzOTJlYzc0M2M4MTU0ZjVkNTY=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-30T16:45:35Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-01-30T16:45:35Z"}, "message": "Additionally suggest the semantic equal variant", "tree": {"sha": "dbd20387c1f98399300edbdc8cc683a1964342e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd20387c1f98399300edbdc8cc683a1964342e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd421cb5a5937ce42ddddd392ec743c8154f5d56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd421cb5a5937ce42ddddd392ec743c8154f5d56", "html_url": "https://github.com/rust-lang/rust/commit/bd421cb5a5937ce42ddddd392ec743c8154f5d56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd421cb5a5937ce42ddddd392ec743c8154f5d56/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7cb0752ff5ba28b4aa8e4bb8befc6b8977513d4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7cb0752ff5ba28b4aa8e4bb8befc6b8977513d4", "html_url": "https://github.com/rust-lang/rust/commit/b7cb0752ff5ba28b4aa8e4bb8befc6b8977513d4"}], "stats": {"total": 116, "additions": 96, "deletions": 20}, "files": [{"sha": "d285e71bd16644ecf76c4629544230b6098cb440", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 56, "deletions": 19, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/bd421cb5a5937ce42ddddd392ec743c8154f5d56/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd421cb5a5937ce42ddddd392ec743c8154f5d56/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=bd421cb5a5937ce42ddddd392ec743c8154f5d56", "patch": "@@ -1,4 +1,5 @@\n use rustc::hir;\n+use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::lint::*;\n use syntax::ast;\n use utils::{get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, SpanlessEq};\n@@ -98,13 +99,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                                 {\n                                     let a = &sugg::Sugg::hir(cx, assignee, \"..\");\n                                     let r = &sugg::Sugg::hir(cx, rhs, \"..\");\n+                                    let long = format!(\"{} = {}\", snip_a, sugg::make_binop(higher::binop(op.node), a, r));\n                                     db.span_suggestion(\n                                         expr.span,\n-                                        &format!(\"Did you mean {} = {} {} {} or {} = {}? Consider replacing it with\",\n+                                        &format!(\"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n                                                  snip_a, snip_a, op.node.as_str(), snip_r,\n-                                                 snip_a, sugg::make_binop(higher::binop(op.node), a, r)),\n+                                                 long),\n                                         format!(\"{} {}= {}\", snip_a, op.node.as_str(), snip_r)\n                                     );\n+                                    db.span_suggestion(\n+                                        expr.span,\n+                                        \"or\",\n+                                        long\n+                                    );\n                                 },\n                             );\n                         };\n@@ -193,23 +200,34 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AssignOps {\n                             );\n                         }\n                     };\n-                    // a = a op b\n-                    if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, l) {\n-                        lint(assignee, r);\n-                    }\n-                    // a = b commutative_op a\n-                    if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n-                        match op.node {\n-                            hir::BiAdd |\n-                            hir::BiMul |\n-                            hir::BiAnd |\n-                            hir::BiOr |\n-                            hir::BiBitXor |\n-                            hir::BiBitAnd |\n-                            hir::BiBitOr => {\n-                                lint(assignee, l);\n-                            },\n-                            _ => {},\n+\n+                    let mut visitor = ExprVisitor {\n+                        assignee: assignee,\n+                        counter: 0,\n+                        cx: cx\n+                    };\n+\n+                    walk_expr(&mut visitor, e);\n+\n+                    if visitor.counter == 1 {\n+                        // a = a op b\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, l) {\n+                            lint(assignee, r);\n+                        }\n+                        // a = b commutative_op a\n+                        if SpanlessEq::new(cx).ignore_fn().eq_expr(assignee, r) {\n+                            match op.node {\n+                                hir::BiAdd |\n+                                hir::BiMul |\n+                                hir::BiAnd |\n+                                hir::BiOr |\n+                                hir::BiBitXor |\n+                                hir::BiBitAnd |\n+                                hir::BiBitOr => {\n+                                    lint(assignee, l);\n+                                },\n+                                _ => {},\n+                            }\n                         }\n                     }\n                 }\n@@ -226,3 +244,22 @@ fn is_commutative(op: hir::BinOp_) -> bool {\n         BiSub | BiDiv | BiRem | BiShl | BiShr | BiLt | BiLe | BiGe | BiGt => false,\n     }\n }\n+\n+struct ExprVisitor<'a, 'tcx: 'a> {\n+    assignee: &'a hir::Expr,\n+    counter: u8,\n+    cx: &'a LateContext<'a, 'tcx>,\n+}\n+\n+impl<'a, 'tcx: 'a> Visitor<'tcx> for ExprVisitor<'a, 'tcx> {\n+    fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n+        if SpanlessEq::new(self.cx).ignore_fn().eq_expr(self.assignee, &expr) {\n+            self.counter += 1;\n+        }\n+\n+        walk_expr(self, expr);\n+    }\n+    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n+        NestedVisitorMap::None\n+    }\n+}"}, {"sha": "2d3adc2a661f945822a7b8db423e923cc42a3f74", "filename": "tests/ui/assign_ops2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd421cb5a5937ce42ddddd392ec743c8154f5d56/tests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd421cb5a5937ce42ddddd392ec743c8154f5d56/tests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.rs?ref=bd421cb5a5937ce42ddddd392ec743c8154f5d56", "patch": "@@ -2,7 +2,7 @@\n \n \n #[allow(unused_assignments)]\n-#[warn(misrefactored_assign_op)]\n+#[warn(misrefactored_assign_op, assign_op_pattern)]\n fn main() {\n     let mut a = 5;\n     a += a + 1;\n@@ -14,6 +14,9 @@ fn main() {\n     a %= a % 5;\n     a &= a & 1;\n     a *= a * a;\n+    a = a * a * a;\n+    a = a * 42 * a;\n+    a = a * 2 + a;\n     a -= 1 - a;\n     a /= 5 / a;\n     a %= 42 % a;"}, {"sha": "2858af1f8c0b5493291ec1943867d97ba23b19df", "filename": "tests/ui/assign_ops2.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bd421cb5a5937ce42ddddd392ec743c8154f5d56/tests%2Fui%2Fassign_ops2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd421cb5a5937ce42ddddd392ec743c8154f5d56/tests%2Fui%2Fassign_ops2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassign_ops2.stderr?ref=bd421cb5a5937ce42ddddd392ec743c8154f5d56", "patch": "@@ -9,6 +9,10 @@ help: Did you mean a = a + 1 or a = a + a + 1? Consider replacing it with\n   |\n 8 |     a += 1;\n   |     ^^^^^^\n+help: or\n+  |\n+8 |     a = a + a + 1;\n+  |     ^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n  --> $DIR/assign_ops2.rs:9:5\n@@ -19,6 +23,10 @@ help: Did you mean a = a + 1 or a = a + 1 + a? Consider replacing it with\n   |\n 9 |     a += 1;\n   |     ^^^^^^\n+help: or\n+  |\n+9 |     a = a + 1 + a;\n+  |     ^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:10:5\n@@ -29,6 +37,10 @@ help: Did you mean a = a - 1 or a = a - (a - 1)? Consider replacing it with\n    |\n 10 |     a -= 1;\n    |     ^^^^^^\n+help: or\n+   |\n+10 |     a = a - (a - 1);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:11:5\n@@ -39,6 +51,10 @@ help: Did you mean a = a * 99 or a = a * a * 99? Consider replacing it with\n    |\n 11 |     a *= 99;\n    |     ^^^^^^^\n+help: or\n+   |\n+11 |     a = a * a * 99;\n+   |     ^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:12:5\n@@ -49,6 +65,10 @@ help: Did you mean a = a * 42 or a = a * 42 * a? Consider replacing it with\n    |\n 12 |     a *= 42;\n    |     ^^^^^^^\n+help: or\n+   |\n+12 |     a = a * 42 * a;\n+   |     ^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:13:5\n@@ -59,6 +79,10 @@ help: Did you mean a = a / 2 or a = a / (a / 2)? Consider replacing it with\n    |\n 13 |     a /= 2;\n    |     ^^^^^^\n+help: or\n+   |\n+13 |     a = a / (a / 2);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:14:5\n@@ -69,6 +93,10 @@ help: Did you mean a = a % 5 or a = a % (a % 5)? Consider replacing it with\n    |\n 14 |     a %= 5;\n    |     ^^^^^^\n+help: or\n+   |\n+14 |     a = a % (a % 5);\n+   |     ^^^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:15:5\n@@ -79,6 +107,10 @@ help: Did you mean a = a & 1 or a = a & a & 1? Consider replacing it with\n    |\n 15 |     a &= 1;\n    |     ^^^^^^\n+help: or\n+   |\n+15 |     a = a & a & 1;\n+   |     ^^^^^^^^^^^^^\n \n error: variable appears on both sides of an assignment operation\n   --> $DIR/assign_ops2.rs:16:5\n@@ -89,6 +121,10 @@ help: Did you mean a = a * a or a = a * a * a? Consider replacing it with\n    |\n 16 |     a *= a;\n    |     ^^^^^^\n+help: or\n+   |\n+16 |     a = a * a * a;\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 9 previous errors\n "}]}