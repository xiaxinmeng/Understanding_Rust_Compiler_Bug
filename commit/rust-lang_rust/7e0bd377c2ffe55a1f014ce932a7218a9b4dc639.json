{"sha": "7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "node_id": "C_kwDOAAsO6NoAKDdlMGJkMzc3YzJmZmU1NWExZjAxNGNlOTMyYTcyMThhOWI0ZGM2Mzk", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-20T13:30:16Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2022-07-20T13:30:16Z"}, "message": "fix: don't replace default members' body", "tree": {"sha": "5fd2700040bf6a160304801b334016333c3eaaf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd2700040bf6a160304801b334016333c3eaaf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmLYA4MACgkQ4laYqTBY\nYXHMUA/5AR2DnQ3jZobvHpgytHVfh5IPCkeT2wUM+6Ld5mXwCHeaxrLfLFzW5Cbd\ntGrD6CwGfZXfwuGXvK4fhkCYiJviBKttfScqN7p7mTd1GSbQ8E2D0pwyXnyGeikK\nGsklgYof9xPWP2rjzLMkALHoxgAVxiOfGzh0JL8MGAq13saa5BHjDyLvGnhetlbW\nSSZB3wC09sf0miSdx9yc0NGPMnLL2bb98FMqUmZ34nmT8eIT8ba7jWrdi5y9IheY\n/hZl+lUIZRzz7MhyDuG++CM6c7uLD7oJQLk2ZBYaoHyl/rBY1NDBPuwhxUjjDkhY\n9zZ/8VOCZbrlV73M1xbRcXmvAwjyO2feTsBsFMV3aSNYJuKL5RvbuDaS9dVRvo9r\ns8KCSogTp0mjOia0DRtCEjfwaD2V7g/giRqYur9KgVO7im6AwQsSDYuXBolDiaPP\naU/HwPjmHlYGUIP13Fbrcbx9gjozVckVFMPu8O3q8G+ABMJKw4c20TlMJqLWh6jT\neTvjkKXBg35EPCScVLM+2T6BowuHMw5FAstxugWMLRssuV1HyTr+UzyoALY5hsYZ\nunWjcY87BQb1hJpHeaVWpLe5rdl9X5Jq+LwwPZUpPRdcyH6CtwuFWw9J1vUxkiSH\nPjM5EKJnKA9FmoV8YKu2Raj4tGl2+XTQRsq+X8s7aHa1PaxI+DM=\n=ukgD\n-----END PGP SIGNATURE-----", "payload": "tree 5fd2700040bf6a160304801b334016333c3eaaf6\nparent 0ded8e734f0280e407f8e22f8c6895cb1dda69be\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1658323816 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1658323816 +0900\n\nfix: don't replace default members' body\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "html_url": "https://github.com/rust-lang/rust/commit/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ded8e734f0280e407f8e22f8c6895cb1dda69be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ded8e734f0280e407f8e22f8c6895cb1dda69be", "html_url": "https://github.com/rust-lang/rust/commit/0ded8e734f0280e407f8e22f8c6895cb1dda69be"}], "stats": {"total": 28, "additions": 16, "deletions": 12}, "files": [{"sha": "036bdd3a21f539786f4dc64e52184090dab9fd76", "filename": "crates/ide-assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "patch": "@@ -142,13 +142,16 @@ fn add_missing_impl_members_inner(\n             Some(cap) => {\n                 let mut cursor = Cursor::Before(first_new_item.syntax());\n                 let placeholder;\n-                if let ast::AssocItem::Fn(func) = &first_new_item {\n-                    if try_gen_trait_body(ctx, func, &trait_, &impl_def).is_none() {\n-                        if let Some(m) = func.syntax().descendants().find_map(ast::MacroCall::cast)\n-                        {\n-                            if m.syntax().text() == \"todo!()\" {\n-                                placeholder = m;\n-                                cursor = Cursor::Replace(placeholder.syntax());\n+                if let DefaultMethods::No = mode {\n+                    if let ast::AssocItem::Fn(func) = &first_new_item {\n+                        if try_gen_trait_body(ctx, func, &trait_, &impl_def).is_none() {\n+                            if let Some(m) =\n+                                func.syntax().descendants().find_map(ast::MacroCall::cast)\n+                            {\n+                                if m.syntax().text() == \"todo!()\" {\n+                                    placeholder = m;\n+                                    cursor = Cursor::Replace(placeholder.syntax());\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "43aaad3150ced60ad542cf97e20f59145c461e1b", "filename": "crates/ide-assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e0bd377c2ffe55a1f014ce932a7218a9b4dc639/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=7e0bd377c2ffe55a1f014ce932a7218a9b4dc639", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     ted,\n };\n \n-/// Generate custom trait bodies where possible.\n+/// Generate custom trait bodies without default implementation where possible.\n ///\n /// Returns `Option` so that we can use `?` rather than `if let Some`. Returning\n /// `None` means that generating a custom trait body failed, and the body will remain\n@@ -28,6 +28,7 @@ pub(crate) fn gen_trait_fn_body(\n \n /// Generate a `Clone` impl based on the fields and members of the target type.\n fn gen_clone_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    debug_assert!(func.name().map_or(false, |name| name.text() == \"clone\"));\n     fn gen_clone_call(target: ast::Expr) -> ast::Expr {\n         let method = make::name_ref(\"clone\");\n         make::expr_method_call(target, method, make::arg_list(None))\n@@ -339,6 +340,7 @@ fn gen_default_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `Hash` impl based on the fields and members of the target type.\n fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    debug_assert!(func.name().map_or(false, |name| name.text() == \"hash\"));\n     fn gen_hash_call(target: ast::Expr) -> ast::Stmt {\n         let method = make::name_ref(\"hash\");\n         let arg = make::expr_path(make::ext::ident_path(\"state\"));\n@@ -394,9 +396,7 @@ fn gen_hash_impl(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n /// Generate a `PartialEq` impl based on the fields and members of the target type.\n fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n-    if func.name().map_or(false, |name| name.text() == \"ne\") {\n-        return None;\n-    }\n+    debug_assert!(func.name().map_or(false, |name| name.text() == \"eq\"));\n     fn gen_eq_chain(expr: Option<ast::Expr>, cmp: ast::Expr) -> Option<ast::Expr> {\n         match expr {\n             Some(expr) => Some(make::expr_bin_op(expr, BinaryOp::LogicOp(LogicOp::And), cmp)),\n@@ -573,6 +573,7 @@ fn gen_partial_eq(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n }\n \n fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n+    debug_assert!(func.name().map_or(false, |name| name.text() == \"partial_cmp\"));\n     fn gen_partial_eq_match(match_target: ast::Expr) -> Option<ast::Stmt> {\n         let mut arms = vec![];\n \n@@ -643,7 +644,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 make::block_expr(stmts.into_iter(), tail).indent(ast::edit::IndentLevel(1))\n             }\n \n-            // No fields in the body means there's nothing to hash.\n+            // No fields in the body means there's nothing to compare.\n             None => {\n                 let expr = make::expr_literal(\"true\").into();\n                 make::block_expr(None, Some(expr)).indent(ast::edit::IndentLevel(1))"}]}