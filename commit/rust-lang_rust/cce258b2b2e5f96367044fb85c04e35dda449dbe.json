{"sha": "cce258b2b2e5f96367044fb85c04e35dda449dbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZTI1OGIyYjJlNWY5NjM2NzA0NGZiODVjMDRlMzVkZGE0NDlkYmU=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-07T03:04:45Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2021-01-07T03:04:45Z"}, "message": "Make NonNull::as_ref (and friends) return refs with unbound lifetimes", "tree": {"sha": "972b99f95838cb0ec99e8dcc9605d88ae3bc8e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/972b99f95838cb0ec99e8dcc9605d88ae3bc8e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cce258b2b2e5f96367044fb85c04e35dda449dbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cce258b2b2e5f96367044fb85c04e35dda449dbe", "html_url": "https://github.com/rust-lang/rust/commit/cce258b2b2e5f96367044fb85c04e35dda449dbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cce258b2b2e5f96367044fb85c04e35dda449dbe/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7769b9beacc1cd10d98590838975cbbfa1d76a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7769b9beacc1cd10d98590838975cbbfa1d76a7", "html_url": "https://github.com/rust-lang/rust/commit/d7769b9beacc1cd10d98590838975cbbfa1d76a7"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "ec444ab54ac7553906eef853ff5bbc3862199f63", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cce258b2b2e5f96367044fb85c04e35dda449dbe/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce258b2b2e5f96367044fb85c04e35dda449dbe/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=cce258b2b2e5f96367044fb85c04e35dda449dbe", "patch": "@@ -103,7 +103,7 @@ impl<T: Sized> NonNull<T> {\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_ref(&self) -> &MaybeUninit<T> {\n+    pub unsafe fn as_uninit_ref<'a>(&self) -> &'a MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.cast().as_ptr() }\n@@ -135,7 +135,7 @@ impl<T: Sized> NonNull<T> {\n     /// [the module documentation]: crate::ptr#safety\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_mut(&mut self) -> &mut MaybeUninit<T> {\n+    pub unsafe fn as_uninit_mut<'a>(&mut self) -> &'a mut MaybeUninit<T> {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &mut *self.cast().as_ptr() }\n@@ -206,7 +206,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub unsafe fn as_ref(&self) -> &T {\n+    pub unsafe fn as_ref<'a>(&self) -> &'a T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n         unsafe { &*self.as_ptr() }\n@@ -242,7 +242,7 @@ impl<T: ?Sized> NonNull<T> {\n     /// [the module documentation]: crate::ptr#safety\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n-    pub unsafe fn as_mut(&mut self) -> &mut T {\n+    pub unsafe fn as_mut<'a>(&mut self) -> &'a mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n         unsafe { &mut *self.as_ptr() }\n@@ -390,7 +390,7 @@ impl<T> NonNull<[T]> {\n     /// [`pointer::offset`]: ../../std/primitive.pointer.html#method.offset\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice(&self) -> &[MaybeUninit<T>] {\n+    pub unsafe fn as_uninit_slice<'a>(&self) -> &'a [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice`.\n         unsafe { slice::from_raw_parts(self.cast().as_ptr(), self.len()) }\n     }\n@@ -452,7 +452,7 @@ impl<T> NonNull<[T]> {\n     /// ```\n     #[inline]\n     #[unstable(feature = \"ptr_as_uninit\", issue = \"75402\")]\n-    pub unsafe fn as_uninit_slice_mut(&self) -> &mut [MaybeUninit<T>] {\n+    pub unsafe fn as_uninit_slice_mut<'a>(&self) -> &'a mut [MaybeUninit<T>] {\n         // SAFETY: the caller must uphold the safety contract for `as_uninit_slice_mut`.\n         unsafe { slice::from_raw_parts_mut(self.cast().as_ptr(), self.len()) }\n     }"}]}