{"sha": "438f6b04c6fe2daf7f6000294edd50c26f6da619", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOGY2YjA0YzZmZTJkYWY3ZjYwMDAyOTRlZGQ1MGMyNmY2ZGE2MTk=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-16T07:50:19Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-03-31T01:11:55Z"}, "message": "Fix lifetime on LocalInternedString::get function", "tree": {"sha": "fe697b4619ad01961eb6da664adc49f8d7a80155", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe697b4619ad01961eb6da664adc49f8d7a80155"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/438f6b04c6fe2daf7f6000294edd50c26f6da619", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/438f6b04c6fe2daf7f6000294edd50c26f6da619", "html_url": "https://github.com/rust-lang/rust/commit/438f6b04c6fe2daf7f6000294edd50c26f6da619", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/438f6b04c6fe2daf7f6000294edd50c26f6da619/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "befeeb7c083c9e5edddc86563cc461185d897a13", "url": "https://api.github.com/repos/rust-lang/rust/commits/befeeb7c083c9e5edddc86563cc461185d897a13", "html_url": "https://github.com/rust-lang/rust/commit/befeeb7c083c9e5edddc86563cc461185d897a13"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "af069b527b0b437dd98ff73121e009d619540555", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=438f6b04c6fe2daf7f6000294edd50c26f6da619", "patch": "@@ -2165,9 +2165,11 @@ impl<'a> Parser<'a> {\n                     suffix,\n                 ) = self.token {\n                     let suffix = suffix.and_then(|s| {\n-                        let s = s.as_str().get();\n-                        if [\"f32\", \"f64\"].contains(&s) {\n-                            Some(s)\n+                        let s = s.as_str();\n+                        if s == \"f32\" {\n+                            Some(\"f32\")\n+                        } else if s == \"f64\" {\n+                            Some(\"f64\")\n                         } else {\n                             None\n                         }"}, {"sha": "740ca229030a3acd29034195f8a9d4f241aa804d", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=438f6b04c6fe2daf7f6000294edd50c26f6da619", "patch": "@@ -369,7 +369,7 @@ impl<'a> Printer<'a> {\n         Ok(())\n     }\n \n-    fn pretty_print_string(&mut self, s: Cow<'static, str>, len: isize) -> io::Result<()> {\n+    fn pretty_print_string<'s>(&mut self, s: Cow<'s, str>, len: isize) -> io::Result<()> {\n         if self.scan_stack.is_empty() {\n             debug!(\"pp String('{}')/print Vec<{},{}>\",\n                    s, self.left, self.right);\n@@ -378,7 +378,10 @@ impl<'a> Printer<'a> {\n             debug!(\"pp String('{}')/buffer Vec<{},{}>\",\n                    s, self.left, self.right);\n             self.advance_right();\n-            self.buf[self.right] = BufEntry { token: Token::String(s, len), size: len };\n+            self.buf[self.right] = BufEntry {\n+                token: Token::String(s.into_owned().into(), len),\n+                size: len\n+            };\n             self.right_total += len;\n             self.check_stream()\n         }\n@@ -576,7 +579,7 @@ impl<'a> Printer<'a> {\n         }\n     }\n \n-    pub fn print_string(&mut self, s: Cow<'static, str>, len: isize) -> io::Result<()> {\n+    pub fn print_string(&mut self, s: Cow<'_, str>, len: isize) -> io::Result<()> {\n         debug!(\"print String({})\", s);\n         // assert!(len <= space);\n         self.space -= len;\n@@ -641,7 +644,7 @@ impl<'a> Printer<'a> {\n         self.pretty_print_eof()\n     }\n \n-    pub fn word<S: Into<Cow<'static, str>>>(&mut self, wrd: S) -> io::Result<()> {\n+    pub fn word<'s, S: Into<Cow<'s, str>>>(&mut self, wrd: S) -> io::Result<()> {\n         let s = wrd.into();\n         let len = s.len() as isize;\n         self.pretty_print_string(s, len)"}, {"sha": "09dce77579001f5cbb2be5c7cec00dd481e4cc06", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=438f6b04c6fe2daf7f6000294edd50c26f6da619", "patch": "@@ -336,11 +336,11 @@ impl Ident {\n         }\n     }\n     fn new(sym: Symbol, is_raw: bool, span: Span) -> Ident {\n-        let string = sym.as_str().get();\n-        if !Self::is_valid(string) {\n+        let string = sym.as_str();\n+        if !Self::is_valid(&string) {\n             panic!(\"`{:?}` is not a valid identifier\", string)\n         }\n-        if is_raw && !ast::Ident::from_str(string).can_be_raw() {\n+        if is_raw && !ast::Ident::from_interned_str(sym.as_interned_str()).can_be_raw() {\n             panic!(\"`{}` cannot be a raw identifier\", string);\n         }\n         Ident { sym, is_raw, span }"}, {"sha": "393f52e7de517b5d42cb64ae66c1193fc6b242a8", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/438f6b04c6fe2daf7f6000294edd50c26f6da619/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=438f6b04c6fe2daf7f6000294edd50c26f6da619", "patch": "@@ -524,7 +524,11 @@ impl LocalInternedString {\n         }\n     }\n \n-    pub fn get(&self) -> &'static str {\n+    pub fn get(&self) -> &str {\n+        // This returns a valid string since we ensure that `self` outlives the interner\n+        // by creating the interner on a thread which outlives threads which can access it.\n+        // This type cannot move to a thread which outlives the interner since it does\n+        // not implement Send.\n         self.string\n     }\n }"}]}