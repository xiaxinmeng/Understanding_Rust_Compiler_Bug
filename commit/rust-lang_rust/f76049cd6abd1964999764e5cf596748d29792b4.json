{"sha": "f76049cd6abd1964999764e5cf596748d29792b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3NjA0OWNkNmFiZDE5NjQ5OTk3NjRlNWNmNTk2NzQ4ZDI5NzkyYjQ=", "commit": {"author": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-07-25T00:51:37Z"}, "committer": {"name": "John Renner", "email": "john@jrenner.net", "date": "2018-07-31T02:23:24Z"}, "message": "Reexport tests without polluting namespaces", "tree": {"sha": "f249f4bd0ebcccbb5c9322862cf8dc2ee99436be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f249f4bd0ebcccbb5c9322862cf8dc2ee99436be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f76049cd6abd1964999764e5cf596748d29792b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f76049cd6abd1964999764e5cf596748d29792b4", "html_url": "https://github.com/rust-lang/rust/commit/f76049cd6abd1964999764e5cf596748d29792b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f76049cd6abd1964999764e5cf596748d29792b4/comments", "author": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "committer": {"login": "djrenren", "id": 634666, "node_id": "MDQ6VXNlcjYzNDY2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/634666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/djrenren", "html_url": "https://github.com/djrenren", "followers_url": "https://api.github.com/users/djrenren/followers", "following_url": "https://api.github.com/users/djrenren/following{/other_user}", "gists_url": "https://api.github.com/users/djrenren/gists{/gist_id}", "starred_url": "https://api.github.com/users/djrenren/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/djrenren/subscriptions", "organizations_url": "https://api.github.com/users/djrenren/orgs", "repos_url": "https://api.github.com/users/djrenren/repos", "events_url": "https://api.github.com/users/djrenren/events{/privacy}", "received_events_url": "https://api.github.com/users/djrenren/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "487e961c6ae072d969e148def0b0856c2367ae00", "url": "https://api.github.com/repos/rust-lang/rust/commits/487e961c6ae072d969e148def0b0856c2367ae00", "html_url": "https://github.com/rust-lang/rust/commit/487e961c6ae072d969e148def0b0856c2367ae00"}], "stats": {"total": 53, "additions": 52, "deletions": 1}, "files": [{"sha": "4b17ca87d8775ed628493d168753d4c2dd3a7561", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f76049cd6abd1964999764e5cf596748d29792b4/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76049cd6abd1964999764e5cf596748d29792b4/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=f76049cd6abd1964999764e5cf596748d29792b4", "patch": "@@ -15,6 +15,7 @@ use codemap::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, respan};\n use config::{is_test_or_bench, StripUnconfigured};\n use errors::{Applicability, FatalError};\n use ext::base::*;\n+use ext::build::AstBuilder;\n use ext::derive::{add_derived_markers, collect_derives};\n use ext::hygiene::{self, Mark, SyntaxContext};\n use ext::placeholders::{placeholder, PlaceholderExpander};\n@@ -1354,12 +1355,29 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             // Ensure that test functions are accessible from the test harness.\n             ast::ItemKind::Fn(..) if self.cx.ecfg.should_test => {\n                 if item.attrs.iter().any(|attr| is_test_or_bench(attr)) {\n+                    let orig_vis = item.vis.clone();\n+\n+                    // Publicize the item under gensymed name to avoid pollution\n                     item = item.map(|mut item| {\n                         item.vis = respan(item.vis.span, ast::VisibilityKind::Public);\n+                        item.ident = Ident::from_interned_str(\n+                                                item.ident.as_interned_str()).gensym();\n                         item\n                     });\n+\n+                    // Use the gensymed name under the item's original visibility\n+                    let use_item = self.cx.item_use_simple_(\n+                        item.ident.span,\n+                        orig_vis,\n+                        Some(Ident::from_interned_str(item.ident.as_interned_str())),\n+                        self.cx.path(item.ident.span, vec![item.ident]));\n+\n+                    SmallVector::many(\n+                        noop_fold_item(item, self).into_iter()\n+                            .chain(noop_fold_item(use_item, self)))\n+                } else {\n+                    noop_fold_item(item, self)\n                 }\n-                noop_fold_item(item, self)\n             }\n             _ => noop_fold_item(item, self),\n         }"}, {"sha": "d6d272b5fadcc3910863511d0380565bd02322ec", "filename": "src/test/run-pass/issue-52557.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f76049cd6abd1964999764e5cf596748d29792b4/src%2Ftest%2Frun-pass%2Fissue-52557.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f76049cd6abd1964999764e5cf596748d29792b4/src%2Ftest%2Frun-pass%2Fissue-52557.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-52557.rs?ref=f76049cd6abd1964999764e5cf596748d29792b4", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks for namespace pollution by private tests.\n+// Tests used to marked as public causing name conflicts with normal\n+// functions only in test builds.\n+\n+// compile-flags: --test\n+\n+mod a {\n+    pub fn foo() -> bool {\n+        true\n+    }\n+}\n+\n+mod b {\n+    #[test]\n+    fn foo() {}\n+}\n+\n+use a::*;\n+use b::*;\n+\n+fn conflict() {\n+    let _: bool = foo();\n+}\n\\ No newline at end of file"}]}