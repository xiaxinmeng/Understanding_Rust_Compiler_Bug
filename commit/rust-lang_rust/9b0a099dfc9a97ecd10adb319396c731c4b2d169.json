{"sha": "9b0a099dfc9a97ecd10adb319396c731c4b2d169", "node_id": "C_kwDOAAsO6NoAKDliMGEwOTlkZmM5YTk3ZWNkMTBhZGIzMTkzOTZjNzMxYzRiMmQxNjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T10:54:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-14T10:54:32Z"}, "message": "Auto merge of #103048 - Dylan-DPC:rollup-47r62js, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #102847 (impl AsFd and AsRawFd for io::{Stdin, Stdout, Stderr}, not the sys versions)\n - #102856 (Only test duplicate inherent impl items in a single place)\n - #102914 (Migrate css highlight without change)\n - #102938 (Move some tests to more reasonable directories)\n - #103015 (fix a typo)\n - #103018 (More dupe word typos)\n - #103025 (rustdoc: remove unused CSS `.search-container > *`)\n - #103031 (Suppress irrefutable let patterns lint for prefixes in match guards)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b95ae3a4db742d337565230878b5ca00b86008e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b95ae3a4db742d337565230878b5ca00b86008e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "html_url": "https://github.com/rust-lang/rust/commit/9b0a099dfc9a97ecd10adb319396c731c4b2d169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b0a099dfc9a97ecd10adb319396c731c4b2d169/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32717603f61a566ff0b8293ef3177cb7c4f50fa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/32717603f61a566ff0b8293ef3177cb7c4f50fa9", "html_url": "https://github.com/rust-lang/rust/commit/32717603f61a566ff0b8293ef3177cb7c4f50fa9"}, {"sha": "7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cf09c57a21110a4ef76ee4fe1cba960806fd42d", "html_url": "https://github.com/rust-lang/rust/commit/7cf09c57a21110a4ef76ee4fe1cba960806fd42d"}], "stats": {"total": 741, "additions": 389, "deletions": 352}, "files": [{"sha": "2beb5e0ab5d20daf2c3e878c4462c0b71e571a78", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -414,7 +414,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let typeck_root_def_id = self.infcx.tcx.typeck_root_def_id(self.mir_def.did.to_def_id());\n \n-        // If this is is a 'root' body (not a closure/generator/inline const), then\n+        // If this is a 'root' body (not a closure/generator/inline const), then\n         // there are no extern regions, so the local regions start at the same\n         // position as the (empty) sub-list of extern regions\n         let first_local_index = if self.mir_def.did.to_def_id() == typeck_root_def_id {"}, {"sha": "3c08b6fa3894d61277a0c0b6499e23ddcdc544a9", "filename": "compiler/rustc_codegen_cranelift/build_system/rustc_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Frustc_info.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n }\n \n /// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n-/// underscores (`_`). This is specially made for the the rustc and cargo wrappers\n+/// underscores (`_`). This is specially made for the rustc and cargo wrappers\n /// which have a dash in the name, and that is not allowed in a crate name.\n pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n     let crate_name = crate_name.replace('-', \"_\");"}, {"sha": "e5ad31eb9484a85530df617646b0897c739ae783", "filename": "compiler/rustc_codegen_cranelift/src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -193,7 +193,7 @@ pub(super) fn from_casted_value<'tcx>(\n         kind: StackSlotKind::ExplicitSlot,\n         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n         // specify stack slot alignment.\n-        // Stack slot size may be bigger for for example `[u8; 3]` which is packed into an `i32`.\n+        // Stack slot size may be bigger for example `[u8; 3]` which is packed into an `i32`.\n         // It may also be smaller for example when the type is a wrapper around an integer with a\n         // larger alignment than the integer.\n         size: (std::cmp::max(abi_param_size, layout_size) + 15) / 16 * 16,"}, {"sha": "11053a8f6c45293a1b306c1c573ceed88a370efe", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -537,7 +537,7 @@ pub(crate) fn link(\n     mut modules: Vec<ModuleCodegen<ModuleLlvm>>,\n ) -> Result<ModuleCodegen<ModuleLlvm>, FatalError> {\n     use super::lto::{Linker, ModuleBuffer};\n-    // Sort the modules by name to ensure to ensure deterministic behavior.\n+    // Sort the modules by name to ensure deterministic behavior.\n     modules.sort_by(|a, b| a.name.cmp(&b.name));\n     let (first, elements) =\n         modules.split_first().expect(\"Bug! modules must contain at least one module.\");"}, {"sha": "433f043209e5314a08e3b7bb2cbc81b0bc0642db", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -129,7 +129,7 @@ impl CoverageMapGenerator {\n             // LLVM Coverage Mapping Format version 6 (zero-based encoded as 5)\n             // requires setting the first filename to the compilation directory.\n             // Since rustc generates coverage maps with relative paths, the\n-            // compilation directory can be combined with the the relative paths\n+            // compilation directory can be combined with the relative paths\n             // to get absolute paths, if needed.\n             let working_dir = tcx\n                 .sess"}, {"sha": "4977a5d6bbf0593f2edeeb33645d9e7b7d68a477", "filename": "compiler/rustc_const_eval/src/const_eval/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Ferror.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -64,7 +64,7 @@ pub struct ConstEvalErr<'tcx> {\n impl<'tcx> ConstEvalErr<'tcx> {\n     /// Turn an interpreter error into something to report to the user.\n     /// As a side-effect, if RUSTC_CTFE_BACKTRACE is set, this prints the backtrace.\n-    /// Should be called only if the error is actually going to to be reported!\n+    /// Should be called only if the error is actually going to be reported!\n     pub fn new<'mir, M: Machine<'mir, 'tcx>>(\n         ecx: &InterpCx<'mir, 'tcx, M>,\n         error: InterpErrorInfo<'tcx>,"}, {"sha": "e5e015c1e1802408293c16fae02a20bfd357b491", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -794,7 +794,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             todo.extend(static_roots);\n             while let Some(id) = todo.pop() {\n                 if reachable.insert(id) {\n-                    // This is a new allocation, add the allocation it points to to `todo`.\n+                    // This is a new allocation, add the allocation it points to `todo`.\n                     if let Some((_, alloc)) = self.memory.alloc_map.get(id) {\n                         todo.extend(\n                             alloc.provenance().values().filter_map(|prov| prov.get_alloc_id()),"}, {"sha": "e8efbd09a2c38c815647ec4cd62b5acae103bbc7", "filename": "compiler/rustc_data_structures/src/graph/vec_graph/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fvec_graph%2Fmod.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -29,8 +29,8 @@ impl<N: Idx + Ord> VecGraph<N> {\n         // Store the *target* of each edge into `edge_targets`.\n         let edge_targets: Vec<N> = edge_pairs.iter().map(|&(_, target)| target).collect();\n \n-        // Create the *edge starts* array. We are iterating over over\n-        // the (sorted) edge pairs. We maintain the invariant that the\n+        // Create the *edge starts* array. We are iterating over the\n+        // (sorted) edge pairs. We maintain the invariant that the\n         // length of the `node_starts` array is enough to store the\n         // current source node -- so when we see that the source node\n         // for an edge is greater than the current length, we grow the"}, {"sha": "59f434b941e782e135dabe56ac5f18fa3bf4ef91", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -327,7 +327,7 @@ impl InvocationKind {\n     fn placeholder_visibility(&self) -> Option<ast::Visibility> {\n         // HACK: For unnamed fields placeholders should have the same visibility as the actual\n         // fields because for tuple structs/variants resolve determines visibilities of their\n-        // constructor using these field visibilities before attributes on them are are expanded.\n+        // constructor using these field visibilities before attributes on them are expanded.\n         // The assumption is that the attribute expansion cannot change field visibilities,\n         // and it holds because only inert attributes are supported in this position.\n         match self {"}, {"sha": "474d5651bbe2f137b9c6e29aeefced6a80791192", "filename": "compiler/rustc_hir_analysis/src/check/fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffallback.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> FnCtxt<'_, 'tcx> {\n     //\n     // - Unconstrained ints are replaced with `i32`.\n     //\n-    // - Unconstrained floats are replaced with with `f64`.\n+    // - Unconstrained floats are replaced with `f64`.\n     //\n     // - Non-numerics may get replaced with `()` or `!`, depending on\n     //   how they were categorized by `calculate_diverging_fallback`"}, {"sha": "122ad7009cb497181c76386740de783fb4ad0001", "filename": "compiler/rustc_hir_analysis/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     }\n \n     /// For an expression with an uninhabited return type (e.g. a function that returns !),\n-    /// this adds a self edge to to the CFG to model the fact that the function does not\n+    /// this adds a self edge to the CFG to model the fact that the function does not\n     /// return.\n     fn handle_uninhabited_return(&mut self, expr: &Expr<'tcx>) {\n         let ty = self.typeck_results.expr_ty(expr);"}, {"sha": "4dea40829f6221a2b4e4400789676b9bd5b8b4ce", "filename": "compiler/rustc_hir_analysis/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fupvar.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// and that the path can be captured with required capture kind (depending on use in closure,\n     /// move closure etc.)\n     ///\n-    /// Returns the set of of adjusted information along with the inferred closure kind and span\n+    /// Returns the set of adjusted information along with the inferred closure kind and span\n     /// associated with the closure kind inference.\n     ///\n     /// Note that we *always* infer a minimal kind, even if"}, {"sha": "c634a57b0b5346c219e83903aa563e802a5c4050", "filename": "compiler/rustc_hir_analysis/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -58,6 +58,37 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                 == item2.ident(self.tcx).normalize_to_macros_2_0()\n     }\n \n+    fn check_for_duplicate_items_in_impl(&self, impl_: DefId) {\n+        let impl_items = self.tcx.associated_items(impl_);\n+\n+        let mut seen_items = FxHashMap::default();\n+        for impl_item in impl_items.in_definition_order() {\n+            let span = self.tcx.def_span(impl_item.def_id);\n+            let ident = impl_item.ident(self.tcx);\n+\n+            let norm_ident = ident.normalize_to_macros_2_0();\n+            match seen_items.entry(norm_ident) {\n+                Entry::Occupied(entry) => {\n+                    let former = entry.get();\n+                    let mut err = struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0592,\n+                        \"duplicate definitions with name `{}`\",\n+                        ident,\n+                    );\n+                    err.span_label(span, format!(\"duplicate definitions for `{}`\", ident));\n+                    err.span_label(*former, format!(\"other definition for `{}`\", ident));\n+\n+                    err.emit();\n+                }\n+                Entry::Vacant(entry) => {\n+                    entry.insert(span);\n+                }\n+            }\n+        }\n+    }\n+\n     fn check_for_common_items_in_impls(\n         &self,\n         impl1: DefId,\n@@ -133,12 +164,6 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n \n         let impls = self.tcx.inherent_impls(id.def_id);\n \n-        // If there is only one inherent impl block,\n-        // there is nothing to overlap check it with\n-        if impls.len() <= 1 {\n-            return;\n-        }\n-\n         let overlap_mode = OverlapMode::get(self.tcx, id.def_id.to_def_id());\n \n         let impls_items = impls\n@@ -152,6 +177,8 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n         const ALLOCATING_ALGO_THRESHOLD: usize = 500;\n         if impls.len() < ALLOCATING_ALGO_THRESHOLD {\n             for (i, &(&impl1_def_id, impl_items1)) in impls_items.iter().enumerate() {\n+                self.check_for_duplicate_items_in_impl(impl1_def_id);\n+\n                 for &(&impl2_def_id, impl_items2) in &impls_items[(i + 1)..] {\n                     if self.impls_have_common_items(impl_items1, impl_items2) {\n                         self.check_for_overlapping_inherent_impls(\n@@ -290,6 +317,8 @@ impl<'tcx> InherentOverlapChecker<'tcx> {\n                 impl_blocks.sort_unstable();\n                 for (i, &impl1_items_idx) in impl_blocks.iter().enumerate() {\n                     let &(&impl1_def_id, impl_items1) = &impls_items[impl1_items_idx];\n+                    self.check_for_duplicate_items_in_impl(impl1_def_id);\n+\n                     for &impl2_items_idx in impl_blocks[(i + 1)..].iter() {\n                         let &(&impl2_def_id, impl_items2) = &impls_items[impl2_items_idx];\n                         if self.impls_have_common_items(impl_items1, impl_items2) {"}, {"sha": "a84257b939c529cd0d30b836b5faab9529ea0ba9", "filename": "compiler/rustc_hir_analysis/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fimpl_wf_check.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -11,16 +11,14 @@\n use crate::constrained_generic_params as cgp;\n use min_specialization::check_min_specialization;\n \n-use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::LocalDefId;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n use rustc_span::{Span, Symbol};\n \n-use std::collections::hash_map::Entry::{Occupied, Vacant};\n-\n mod min_specialization;\n \n /// Checks that all the type/lifetime parameters on an impl also\n@@ -59,7 +57,6 @@ fn check_mod_impl_wf(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     for id in module.items() {\n         if matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n             enforce_impl_params_are_constrained(tcx, id.def_id.def_id);\n-            enforce_impl_items_are_distinct(tcx, id.def_id.def_id);\n             if min_specialization {\n                 check_min_specialization(tcx, id.def_id.def_id);\n             }\n@@ -194,38 +191,3 @@ fn report_unused_parameter(tcx: TyCtxt<'_>, span: Span, kind: &str, name: Symbol\n     }\n     err.emit();\n }\n-\n-/// Enforce that we do not have two items in an impl with the same name.\n-fn enforce_impl_items_are_distinct(tcx: TyCtxt<'_>, impl_def_id: LocalDefId) {\n-    if tcx.impl_trait_ref(impl_def_id).is_some() {\n-        return;\n-    }\n-    let mut seen_type_items = FxHashMap::default();\n-    let mut seen_value_items = FxHashMap::default();\n-    for &impl_item_ref in tcx.associated_item_def_ids(impl_def_id) {\n-        let impl_item = tcx.associated_item(impl_item_ref);\n-        let seen_items = match impl_item.kind {\n-            ty::AssocKind::Type => &mut seen_type_items,\n-            _ => &mut seen_value_items,\n-        };\n-        let span = tcx.def_span(impl_item_ref);\n-        let ident = impl_item.ident(tcx);\n-        match seen_items.entry(ident.normalize_to_macros_2_0()) {\n-            Occupied(entry) => {\n-                let mut err = struct_span_err!(\n-                    tcx.sess,\n-                    span,\n-                    E0201,\n-                    \"duplicate definitions with name `{}`:\",\n-                    ident\n-                );\n-                err.span_label(*entry.get(), format!(\"previous definition of `{}` here\", ident));\n-                err.span_label(span, \"duplicate definition\");\n-                err.emit();\n-            }\n-            Vacant(entry) => {\n-                entry.insert(span);\n-            }\n-        }\n-    }\n-}"}, {"sha": "167ef2791040a8c95759da7ec67dd1b57b3e2161", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1150,8 +1150,8 @@ impl<'tcx> InferCtxt<'tcx> {\n     /// Return the universe that the region `r` was created in.  For\n     /// most regions (e.g., `'static`, named regions from the user,\n     /// etc) this is the root universe U0. For inference variables or\n-    /// placeholders, however, it will return the universe which which\n-    /// they are associated.\n+    /// placeholders, however, it will return the universe which they\n+    /// are associated.\n     pub fn universe_of_region(&self, r: ty::Region<'tcx>) -> ty::UniverseIndex {\n         self.inner.borrow_mut().unwrap_region_constraints().universe(r)\n     }"}, {"sha": "886e25f2d788bc87345b00c897f4a87611a0174a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -3310,7 +3310,7 @@ declare_lint! {\n     /// explicitly.\n     ///\n     /// To access a library from a binary target within the same crate,\n-    /// use `your_crate_name::` as the path path instead of `lib::`:\n+    /// use `your_crate_name::` as the path instead of `lib::`:\n     ///\n     /// ```rust,compile_fail\n     /// // bar/src/lib.rs"}, {"sha": "8390d80a458cfb437a155c8c3626ffb6a8056122", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -3937,7 +3937,7 @@ declare_lint! {\n     ///\n     /// The compiler disables the automatic implementation if an explicit one\n     /// exists for given type constructor. The exact rules governing this\n-    /// are currently unsound and quite subtle and and will be modified in the future.\n+    /// are currently unsound, quite subtle, and will be modified in the future.\n     /// This change will cause the automatic implementation to be disabled in more\n     /// cases, potentially breaking some code.\n     pub SUSPICIOUS_AUTO_TRAIT_IMPLS,"}, {"sha": "23c2ce6474c5a271694562d4fc5b3467d119b83f", "filename": "compiler/rustc_middle/src/mir/interpret/pointer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fpointer.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -43,7 +43,7 @@ pub trait PointerArithmetic: HasDataLayout {\n         let val = val as i64;\n         // Now wrap-around into the machine_isize range.\n         if val > self.machine_isize_max() {\n-            // This can only happen the the ptr size is < 64, so we know max_usize_plus_1 fits into\n+            // This can only happen if the ptr size is < 64, so we know max_usize_plus_1 fits into\n             // i64.\n             debug_assert!(self.pointer_size().bits() < 64);\n             let max_usize_plus_1 = 1u128 << self.pointer_size().bits();"}, {"sha": "ce4a46e362d80e231e34d731a113bcc076137c66", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -13,8 +13,7 @@\n //!\n //! There are three groups of traits involved in each traversal.\n //! - `TypeFoldable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the the methods delegate to the\n-//!     folder.\n+//!   - Types of interest, for which the methods delegate to the folder.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be folded.\n //! - `TypeSuperFoldable`. This is implemented only for each type of interest,"}, {"sha": "f73d062ba30a6282d8d77667d1a7490a8ab705f0", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -958,7 +958,7 @@ impl<'tcx> Ty<'tcx> {\n         }\n     }\n \n-    /// Checks if `ty` has has a significant drop.\n+    /// Checks if `ty` has a significant drop.\n     ///\n     /// Note that this method can return false even if `ty` has a destructor\n     /// attached; even if that is the case then the adt has been marked with"}, {"sha": "6e1991b527fe3ed0bf35e64132b10745cf694e10", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -10,8 +10,7 @@\n //!\n //! There are three groups of traits involved in each traversal.\n //! - `TypeVisitable`. This is implemented once for many types, including:\n-//!   - Types of interest, for which the the methods delegate to the\n-//!     visitor.\n+//!   - Types of interest, for which the methods delegate to the visitor.\n //!   - All other types, including generic containers like `Vec` and `Option`.\n //!     It defines a \"skeleton\" of how they should be visited.\n //! - `TypeSuperVisitable`. This is implemented only for each type of interest,"}, {"sha": "5984c800d8381ee16e026d849e589247cf6d19c8", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -370,8 +370,12 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n \n             // Check if the let source is while, for there is no alternative place to put a prefix,\n             // and we shouldn't lint.\n+            // For let guards inside a match, prefixes might use bindings of the match pattern,\n+            // so can't always be moved out.\n+            // FIXME: Add checking whether the bindings are actually used in the prefix,\n+            // and lint if they are not.\n             let let_source = let_source_parent(self.tcx, top, None);\n-            if !matches!(let_source, LetSource::WhileLet) {\n+            if !matches!(let_source, LetSource::WhileLet | LetSource::IfLetGuard) {\n                 // Emit the lint\n                 let prefix = &chain_refutabilities[..until];\n                 lint_affix(prefix, \"leading\", \"outside of the construct\");\n@@ -1151,10 +1155,14 @@ fn let_source_parent(tcx: TyCtxt<'_>, parent: HirId, pat_id: Option<HirId>) -> L\n \n     let parent_parent = hir.get_parent_node(parent);\n     let parent_parent_node = hir.get(parent_parent);\n-    if let hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) =\n-        parent_parent_node\n-    {\n-        return LetSource::LetElse(*span);\n+    match parent_parent_node {\n+        hir::Node::Stmt(hir::Stmt { kind: hir::StmtKind::Local(_), span, .. }) => {\n+            return LetSource::LetElse(*span);\n+        }\n+        hir::Node::Arm(hir::Arm { guard: Some(hir::Guard::If(_)), .. }) => {\n+            return LetSource::IfLetGuard;\n+        }\n+        _ => {}\n     }\n \n     let parent_parent_parent = hir.get_parent_node(parent_parent);"}, {"sha": "8dc9976eaea8af13a0d8d98b282d9743151217e6", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -885,7 +885,7 @@ fn is_useful<'p, 'tcx>(\n             // that has the potential to trigger the `non_exhaustive_omitted_patterns` lint.\n             // To understand the workings checkout `Constructor::split` and `SplitWildcard::new/into_ctors`\n             if is_non_exhaustive_and_wild\n-                // We check that the match has a wildcard pattern and that that wildcard is useful,\n+                // We check that the match has a wildcard pattern and that wildcard is useful,\n                 // meaning there are variants that are covered by the wildcard. Without the check\n                 // for `witness_preference` the lint would trigger on `if let NonExhaustiveEnum::A = foo {}`\n                 && usefulness.is_useful() && matches!(witness_preference, RealArm)"}, {"sha": "828b7d2f2f7be6ea0435fcaec8daf8fce5a7cc98", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -2232,7 +2232,7 @@ impl<'a> Parser<'a> {\n     ///\n     /// When encountering code like `foo::< bar + 3 >` or `foo::< bar - baz >` we suggest\n     /// `foo::<{ bar + 3 }>` and `foo::<{ bar - baz }>`, respectively. We only provide a suggestion\n-    /// if we think that that the resulting expression would be well formed.\n+    /// if we think that the resulting expression would be well formed.\n     pub fn recover_const_arg(\n         &mut self,\n         start: Span,"}, {"sha": "dab8ae47779522106514164e11922392bfed8e15", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -268,7 +268,7 @@ impl CheckAttrVisitor<'_> {\n             }\n             // FIXME(#65833): We permit associated consts to have an `#[inline]` attribute with\n             // just a lint, because we previously erroneously allowed it and some crates used it\n-            // accidentally, to to be compatible with crates depending on them, we can't throw an\n+            // accidentally, to be compatible with crates depending on them, we can't throw an\n             // error here.\n             Target::AssocConst => {\n                 self.tcx.emit_spanned_lint(\n@@ -376,7 +376,7 @@ impl CheckAttrVisitor<'_> {\n             | Target::Method(MethodKind::Trait { body: true } | MethodKind::Inherent) => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[allow_internal_unstable]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"naked\");\n@@ -456,7 +456,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[track_caller]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 for attr in attrs {\n@@ -485,7 +485,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Struct | Target::Enum | Target::Variant => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[non_exhaustive]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"non_exhaustive\");\n@@ -507,7 +507,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Trait => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[marker]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"marker\");\n@@ -566,7 +566,7 @@ impl CheckAttrVisitor<'_> {\n             }\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[target_feature]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"target_feature\");\n@@ -1205,7 +1205,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Fn | Target::Method(..) | Target::ForeignFn | Target::Closure => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[cold]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"cold\");\n@@ -1247,7 +1247,7 @@ impl CheckAttrVisitor<'_> {\n             Target::ForeignFn | Target::ForeignStatic => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[link_name]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"link_name\");\n@@ -1281,7 +1281,7 @@ impl CheckAttrVisitor<'_> {\n             Target::ExternCrate => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[no_link]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"no_link\");\n@@ -1311,7 +1311,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Method(..) if self.is_impl_item(hir_id) => true,\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[export_name]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"export_name\");\n@@ -1503,7 +1503,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Static | Target::Fn | Target::Method(..) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[link_section]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"link_section\");\n@@ -1528,7 +1528,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Method(..) if self.is_impl_item(hir_id) => {}\n             // FIXME(#80564): We permit struct fields, match arms and macro defs to have an\n             // `#[no_mangle]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"no_mangle\");\n@@ -1782,7 +1782,7 @@ impl CheckAttrVisitor<'_> {\n             Target::MacroDef => true,\n             // FIXME(#80564): We permit struct fields and match arms to have an\n             // `#[allow_internal_unstable]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm => {\n                 self.inline_attr_str_error_without_macro_def(\n@@ -1877,7 +1877,7 @@ impl CheckAttrVisitor<'_> {\n             }\n             // FIXME(#80564): We permit struct fields and match arms to have an\n             // `#[allow_internal_unstable]` attribute with just a lint, because we previously\n-            // erroneously allowed it and some crates used it accidentally, to to be compatible\n+            // erroneously allowed it and some crates used it accidentally, to be compatible\n             // with crates depending on them, we can't throw an error here.\n             Target::Field | Target::Arm | Target::MacroDef => {\n                 self.inline_attr_str_error_with_macro_def(hir_id, attr, \"allow_internal_unstable\");"}, {"sha": "1c1976af5054c24c25f23b2994f23eee0dd163fb", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -2060,7 +2060,7 @@ struct Finalize {\n     /// Span of the whole path or some its characteristic fragment.\n     /// E.g. span of `b` in `foo::{a, b, c}`, or full span for regular paths.\n     path_span: Span,\n-    /// Span of the path start, suitable for prepending something to to it.\n+    /// Span of the path start, suitable for prepending something to it.\n     /// E.g. span of `foo` in `foo::{a, b, c}`, or full span for regular paths.\n     root_span: Span,\n     /// Whether to report privacy errors or silently return \"no resolution\" for them,"}, {"sha": "a8be318dea8aeb1784ca263e948e94cd9666d617", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -186,7 +186,7 @@ top_level_options!(\n         /// Remap source path prefixes in all output (messages, object files, debug, etc.).\n         remap_path_prefix: Vec<(PathBuf, PathBuf)> [TRACKED_NO_CRATE_HASH],\n         /// Base directory containing the `src/` for the Rust standard library, and\n-        /// potentially `rustc` as well, if we can can find it. Right now it's always\n+        /// potentially `rustc` as well, if we can find it. Right now it's always\n         /// `$sysroot/lib/rustlib/src/rust` (i.e. the `rustup` `rust-src` component).\n         ///\n         /// This directory is what the virtual `/rustc/$hash` is translated back to,"}, {"sha": "6aa031c8378e64333ae3c0ba32e29234bc7e2f5f", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -540,7 +540,7 @@ fn encode_ty<'tcx>(\n             let mut s = String::new();\n             let def_id = adt_def.0.did;\n             if options.contains(EncodeTyOptions::GENERALIZE_REPR_C) && adt_def.repr().c() {\n-                // For for cross-language CFI support, the encoding must be compatible at the FFI\n+                // For cross-language CFI support, the encoding must be compatible at the FFI\n                 // boundary. For instance:\n                 //\n                 //     struct type1 {};"}, {"sha": "9e5f0e4d158b287b77460f68667c43163aac554d", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -47,7 +47,7 @@ pub enum PassMode {\n     /// Pass the argument indirectly via a hidden pointer.\n     /// The `extra_attrs` value, if any, is for the extra data (vtable or length)\n     /// which indicates that it refers to an unsized rvalue.\n-    /// `on_stack` defines that the the value should be passed at a fixed\n+    /// `on_stack` defines that the value should be passed at a fixed\n     /// stack offset in accordance to the ABI rather than passed using a\n     /// pointer. This corresponds to the `byval` LLVM argument attribute.\n     Indirect { attrs: ArgAttributes, extra_attrs: Option<ArgAttributes>, on_stack: bool },"}, {"sha": "7715874743192a4851cb686e2fe4bb098c85b113", "filename": "compiler/rustc_trait_selection/src/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcoherence.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -193,7 +193,7 @@ fn overlap_within_probe<'cx, 'tcx>(\n         }\n     }\n \n-    // We disable the leak when when creating the `snapshot` by using\n+    // We disable the leak when creating the `snapshot` by using\n     // `infcx.probe_maybe_disable_leak_check`.\n     if infcx.leak_check(true, snapshot).is_err() {\n         debug!(\"overlap: leak check failed\");"}, {"sha": "b06f24ddf2e24bf653deb6982ee4306b2e88e03f", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> ConstUnifyCtxt<'tcx> {\n                         a_uv == b_uv\n                     }\n                     // FIXME(generic_const_exprs): We may want to either actually try\n-                    // to evaluate `a_ct` and `b_ct` if they are are fully concrete or something like\n+                    // to evaluate `a_ct` and `b_ct` if they are fully concrete or something like\n                     // this, for now we just return false here.\n                     _ => false,\n                 }"}, {"sha": "1ca9a1c1994f8e70c3914193219424252b3aa508", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -566,7 +566,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n                     .unwrap_or_else(|| ty.super_fold_with(self).into())\n                 };\n                 // For cases like #95134 we would like to catch overflows early\n-                // otherwise they slip away away and cause ICE.\n+                // otherwise they slip away and cause ICE.\n                 let recursion_limit = self.tcx().recursion_limit();\n                 if !recursion_limit.value_within_limit(self.depth)\n                     // HACK: Don't overflow when running cargo doc see #100991"}, {"sha": "d390a30815307295d27f52cdfa1356f98b682b3c", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -264,7 +264,7 @@ fn adt_consider_insignificant_dtor<'tcx>(\n         if is_marked_insig {\n             // In some cases like `std::collections::HashMap` where the struct is a wrapper around\n             // a type that is a Drop type, and the wrapped type (eg: `hashbrown::HashMap`) lies\n-            // outside stdlib, we might choose to still annotate the the wrapper (std HashMap) with\n+            // outside stdlib, we might choose to still annotate the wrapper (std HashMap) with\n             // `rustc_insignificant_dtor`, even if the type itself doesn't have a `Drop` impl.\n             Some(DtorType::Insignificant)\n         } else if adt_def.destructor(tcx).is_some() {"}, {"sha": "f2f5dffc25d3a58710f1fc7f590f7a274cc1e808", "filename": "library/alloc/src/collections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Flinked_list.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1613,7 +1613,7 @@ impl<'a, T> CursorMut<'a, T> {\n             None\n         } else {\n             // We can't point to the node that we pop. Copying the behavior of\n-            // `remove_current`, we move on the the next node in the sequence.\n+            // `remove_current`, we move on to the next node in the sequence.\n             // If the list is of length 1 then we end pointing to the \"ghost\"\n             // node at index 0, which is expected.\n             if self.list.head == self.current {"}, {"sha": "789a87968d154d255c27017c25a4a70b468c0f36", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -692,7 +692,7 @@ pub trait Iterator {\n     /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n     /// assert_eq!(it.next(), Some(NotClone(1)));  // The next element from `v`.\n     /// assert_eq!(it.next(), Some(NotClone(99))); // The separator.\n-    /// assert_eq!(it.next(), Some(NotClone(2)));  // The last element from from `v`.\n+    /// assert_eq!(it.next(), Some(NotClone(2)));  // The last element from `v`.\n     /// assert_eq!(it.next(), None);               // The iterator is finished.\n     /// ```\n     ///"}, {"sha": "e2ae39fbab3356fff1e473d4e370aceca09a21af", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -647,7 +647,7 @@ impl<T> MaybeUninit<T> {\n     /// implements the [`Copy`] trait or not. When using multiple copies of the\n     /// data (by calling `assume_init_read` multiple times, or first calling\n     /// `assume_init_read` and then [`assume_init`]), it is your responsibility\n-    /// to ensure that that data may indeed be duplicated.\n+    /// to ensure that data may indeed be duplicated.\n     ///\n     /// [inv]: #initialization-invariant\n     /// [`assume_init`]: MaybeUninit::assume_init"}, {"sha": "9f7594460a1d55ee7304bdb5256a2fc3ba31bf27", "filename": "library/core/src/num/dec2flt/lemire.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fdec2flt%2Flemire.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -76,7 +76,7 @@ pub fn compute_float<F: RawFloat>(q: i64, mut w: u64) -> BiasedFp {\n         return BiasedFp { f: mantissa, e: power2 };\n     }\n     // Need to handle rounding ties. Normally, we need to round up,\n-    // but if we fall right in between and and we have an even basis, we\n+    // but if we fall right in between and we have an even basis, we\n     // need to round down.\n     //\n     // This will only occur if:"}, {"sha": "80472528f6c3aedbaf7dabdf87c4025525b33637", "filename": "library/core/src/num/int_log10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_log10.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,5 +1,5 @@\n /// These functions compute the integer logarithm of their type, assuming\n-/// that someone has already checked that the the value is strictly positive.\n+/// that someone has already checked that the value is strictly positive.\n \n // 0 < val <= u8::MAX\n #[inline]"}, {"sha": "67e59460d74b0e3d293652a62a8a48e9bf03eb52", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -694,7 +694,7 @@ impl<T: ?Sized> *const T {\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n     ///\n     /// This computes the same value that [`offset_from`](#method.offset_from)\n-    /// would compute, but with the added precondition that that the offset is\n+    /// would compute, but with the added precondition that the offset is\n     /// guaranteed to be non-negative.  This method is equivalent to\n     /// `usize::from(self.offset_from(origin)).unwrap_unchecked()`,\n     /// but it provides slightly more information to the optimizer, which can"}, {"sha": "bbcc7c699e03612e8874e0f3172d80712874b964", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -867,7 +867,7 @@ impl<T: ?Sized> *mut T {\n     /// units of T: the distance in bytes is divided by `mem::size_of::<T>()`.\n     ///\n     /// This computes the same value that [`offset_from`](#method.offset_from)\n-    /// would compute, but with the added precondition that that the offset is\n+    /// would compute, but with the added precondition that the offset is\n     /// guaranteed to be non-negative.  This method is equivalent to\n     /// `usize::from(self.offset_from(origin)).unwrap_unchecked()`,\n     /// but it provides slightly more information to the optimizer, which can"}, {"sha": "cdc47e17938dc38e3e58e343f3015dd9a2545c11", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1642,8 +1642,8 @@ impl<T> AtomicPtr<T> {\n     /// and the argument `val`, and stores a pointer with provenance of the\n     /// current pointer and the resulting address.\n     ///\n-    /// This is equivalent equivalent to using [`map_addr`] to atomically\n-    /// perform `ptr = ptr.map_addr(|a| a | val)`. This can be used in tagged\n+    /// This is equivalent to using [`map_addr`] to atomically perform\n+    /// `ptr = ptr.map_addr(|a| a | val)`. This can be used in tagged\n     /// pointer schemes to atomically set tag bits.\n     ///\n     /// **Caveat**: This operation returns the previous value. To compute the\n@@ -1693,8 +1693,8 @@ impl<T> AtomicPtr<T> {\n     /// pointer, and the argument `val`, and stores a pointer with provenance of\n     /// the current pointer and the resulting address.\n     ///\n-    /// This is equivalent equivalent to using [`map_addr`] to atomically\n-    /// perform `ptr = ptr.map_addr(|a| a & val)`. This can be used in tagged\n+    /// This is equivalent to using [`map_addr`] to atomically perform\n+    /// `ptr = ptr.map_addr(|a| a & val)`. This can be used in tagged\n     /// pointer schemes to atomically unset tag bits.\n     ///\n     /// **Caveat**: This operation returns the previous value. To compute the\n@@ -1743,8 +1743,8 @@ impl<T> AtomicPtr<T> {\n     /// pointer, and the argument `val`, and stores a pointer with provenance of\n     /// the current pointer and the resulting address.\n     ///\n-    /// This is equivalent equivalent to using [`map_addr`] to atomically\n-    /// perform `ptr = ptr.map_addr(|a| a ^ val)`. This can be used in tagged\n+    /// This is equivalent to using [`map_addr`] to atomically perform\n+    /// `ptr = ptr.map_addr(|a| a ^ val)`. This can be used in tagged\n     /// pointer schemes to atomically toggle tag bits.\n     ///\n     /// **Caveat**: This operation returns the previous value. To compute the"}, {"sha": "c79e909e41db80da89efba1b94d3b41f35523c64", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -172,7 +172,7 @@ fn test_can_not_overflow() {\n \n            // Calcutate the string length for the smallest overflowing number:\n            let max_len_string = format_radix(num, base as u128);\n-           // Ensure that that string length is deemed to potentially overflow:\n+           // Ensure that string length is deemed to potentially overflow:\n            assert!(can_overflow::<$t>(base, &max_len_string));\n         }\n         )*)"}, {"sha": "9d758320cfcc68f20cd32331ae53cb08342f7588", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -6,6 +6,7 @@\n use super::raw::{AsRawFd, FromRawFd, IntoRawFd, RawFd};\n use crate::fmt;\n use crate::fs;\n+use crate::io;\n use crate::marker::PhantomData;\n use crate::mem::forget;\n #[cfg(not(any(target_arch = \"wasm32\", target_env = \"sgx\")))]\n@@ -385,3 +386,54 @@ impl<T: AsFd> AsFd for Box<T> {\n         (**self).as_fd()\n     }\n }\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stdin {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(0) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StdinLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stdin out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(0) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stdout {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(1) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StdoutLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stdout out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(1) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl AsFd for io::Stderr {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        unsafe { BorrowedFd::borrow_raw(2) }\n+    }\n+}\n+\n+#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+impl<'a> AsFd for io::StderrLock<'a> {\n+    #[inline]\n+    fn as_fd(&self) -> BorrowedFd<'_> {\n+        // SAFETY: user code should not close stderr out from under the standard library\n+        unsafe { BorrowedFd::borrow_raw(2) }\n+    }\n+}"}, {"sha": "b8249a027ad99445cc90a0f51f749b3ba12f7a93", "filename": "library/std/src/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1629,7 +1629,7 @@ impl ExitStatusError {\n     ///\n     /// This is exactly like [`code()`](Self::code), except that it returns a `NonZeroI32`.\n     ///\n-    /// Plain `code`, returning a plain integer, is provided because is is often more convenient.\n+    /// Plain `code`, returning a plain integer, is provided because it is often more convenient.\n     /// The returned value from `code()` is indeed also nonzero; use `code_nonzero()` when you want\n     /// a type-level guarantee of nonzeroness.\n     ///"}, {"sha": "66ea3db2015a40fd3868d4a51077b5c29fda3ae2", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -287,7 +287,7 @@ impl ExitStatus {\n         // SuS and POSIX) say a wait status is, but Fuchsia apparently uses a u64, so it won't\n         // necessarily fit.\n         //\n-        // It seems to me that that the right answer would be to provide std::os::fuchsia with its\n+        // It seems to me that the right answer would be to provide std::os::fuchsia with its\n         // own ExitStatusExt, rather that trying to provide a not very convincing imitation of\n         // Unix.  Ie, std::os::unix::process:ExitStatusExt ought not to exist on Fuchsia.  But\n         // fixing this up that is beyond the scope of my efforts now."}, {"sha": "b3626c564e86aa030089f814d9e95b9e49f3c367", "filename": "library/std/src/sys/unix/stdio.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fstdio.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,6 +1,6 @@\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n-use crate::os::unix::io::{AsFd, BorrowedFd, FromRawFd};\n+use crate::os::unix::io::FromRawFd;\n use crate::sys::fd::FileDesc;\n \n pub struct Stdin(());\n@@ -91,51 +91,3 @@ pub const STDIN_BUF_SIZE: usize = crate::sys_common::io::DEFAULT_BUF_SIZE;\n pub fn panic_output() -> Option<impl io::Write> {\n     Some(Stderr::new())\n }\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stdin {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDIN_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stdout {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDOUT_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl AsFd for io::Stderr {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(libc::STDERR_FILENO) }\n-    }\n-}"}, {"sha": "4cc0e4ed5a45a775f2a9879153fcd31b4e2b526d", "filename": "library/std/src/sys/wasi/stdio.rs", "status": "modified", "additions": 1, "deletions": 49, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fstdio.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -4,7 +4,7 @@ use super::fd::WasiFd;\n use crate::io::{self, IoSlice, IoSliceMut};\n use crate::mem::ManuallyDrop;\n use crate::os::raw;\n-use crate::os::wasi::io::{AsFd, AsRawFd, BorrowedFd, FromRawFd};\n+use crate::os::wasi::io::{AsRawFd, FromRawFd};\n \n pub struct Stdin;\n pub struct Stdout;\n@@ -23,22 +23,6 @@ impl AsRawFd for Stdin {\n     }\n }\n \n-impl AsFd for Stdin {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(0) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdinLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stdin out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(0) }\n-    }\n-}\n-\n impl io::Read for Stdin {\n     fn read(&mut self, data: &mut [u8]) -> io::Result<usize> {\n         self.read_vectored(&mut [IoSliceMut::new(data)])\n@@ -67,22 +51,6 @@ impl AsRawFd for Stdout {\n     }\n }\n \n-impl AsFd for Stdout {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(1) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StdoutLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stdout out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(1) }\n-    }\n-}\n-\n impl io::Write for Stdout {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])\n@@ -114,22 +82,6 @@ impl AsRawFd for Stderr {\n     }\n }\n \n-impl AsFd for Stderr {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        unsafe { BorrowedFd::borrow_raw(2) }\n-    }\n-}\n-\n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n-impl<'a> AsFd for io::StderrLock<'a> {\n-    #[inline]\n-    fn as_fd(&self) -> BorrowedFd<'_> {\n-        // SAFETY: user code should not close stderr out from under the standard library\n-        unsafe { BorrowedFd::borrow_raw(2) }\n-    }\n-}\n-\n impl io::Write for Stderr {\n     fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n         self.write_vectored(&[IoSlice::new(data)])"}, {"sha": "4ccdabe4bb67d7a7dbbb1d83c5d432826e985d54", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -464,7 +464,7 @@ fn copy_sanitizers(\n         builder.copy(&runtime.path, &dst);\n \n         if target == \"x86_64-apple-darwin\" || target == \"aarch64-apple-darwin\" {\n-            // Update the library\u2019s install name to reflect that it has has been renamed.\n+            // Update the library\u2019s install name to reflect that it has been renamed.\n             apple_darwin_update_library_name(&dst, &format!(\"@rpath/{}\", &runtime.name));\n             // Upon renaming the install name, the code signature of the file will invalidate,\n             // so we will sign it again."}, {"sha": "5f674ed7441badc1eba2d6b8c8e4e7ea8bac8f9c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1514,7 +1514,7 @@ pub(crate) fn clean_ty<'tcx>(ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> T\n                     // as we currently do not supply the parent generics to anonymous constants\n                     // but do allow `ConstKind::Param`.\n                     //\n-                    // `const_eval_poly` tries to to first substitute generic parameters which\n+                    // `const_eval_poly` tries to first substitute generic parameters which\n                     // results in an ICE while manually constructing the constant and using `eval`\n                     // does nothing for `ConstKind::Param`.\n                     let ct = ty::Const::from_anon_const(cx.tcx, def_id);"}, {"sha": "7d00002d05beee59852a1a9dde8462b35cadc2e5", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -612,7 +612,7 @@ fn generate_macro_def_id_path(\n     };\n     if path.len() < 2 {\n         // The minimum we can have is the crate name followed by the macro name. If shorter, then\n-        // it means that that `relative` was empty, which is an error.\n+        // it means that `relative` was empty, which is an error.\n         debug!(\"macro path cannot be empty!\");\n         return Err(HrefError::NotInExternalCache);\n     }"}, {"sha": "7989c5217749562af5f8362d7425836772cab94d", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 47, "deletions": 8, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -808,9 +808,6 @@ table,\n \theight: 34px;\n \tmargin-top: 4px;\n }\n-.search-container > * {\n-\theight: 100%;\n-}\n .search-results-title {\n \tmargin-top: 0;\n \twhite-space: nowrap;\n@@ -1089,8 +1086,55 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tcolor: var(--right-side-color);\n }\n \n+pre.rust {\n+\ttab-size: 4;\n+\t-moz-tab-size: 4;\n+}\n+\n+/* Code highlighting */\n+pre.rust .kw {\n+\tcolor: var(--code-highlight-kw-color);\n+}\n+pre.rust .kw-2 {\n+\tcolor: var(--code-highlight-kw-2-color);\n+}\n+pre.rust .lifetime {\n+\tcolor: var(--code-highlight-lifetime-color);\n+}\n+pre.rust .prelude-ty {\n+\tcolor: var(--code-highlight-prelude-color);\n+}\n+pre.rust .prelude-val {\n+\tcolor: var(--code-highlight-prelude-val-color);\n+}\n+pre.rust .string {\n+\tcolor: var(--code-highlight-string-color);\n+}\n+pre.rust .number {\n+\tcolor: var(--code-highlight-number-color);\n+}\n+pre.rust .bool-val {\n+\tcolor: var(--code-highlight-literal-color);\n+}\n+pre.rust .self {\n+\tcolor: var(--code-highlight-self-color);\n+}\n+pre.rust .attribute {\n+\tcolor: var(--code-highlight-attribute-color);\n+}\n+pre.rust .macro,\n+pre.rust .macro-nonterminal {\n+\tcolor: var(--code-highlight-macro-color);\n+}\n pre.rust .question-mark {\n \tfont-weight: bold;\n+\tcolor: var(--code-highlight-question-mark-color);\n+}\n+pre.rust .comment {\n+\tcolor: var(--code-highlight-comment-color);\n+}\n+pre.rust .doccomment {\n+\tcolor: var(--code-highlight-doc-comment-color);\n }\n \n .example-wrap.compile_fail,\n@@ -1296,11 +1340,6 @@ h3.variant {\n \tfont-size: 1.25rem;\n }\n \n-pre.rust {\n-\ttab-size: 4;\n-\t-moz-tab-size: 4;\n-}\n-\n .search-failed {\n \ttext-align: center;\n \tmargin-top: 20px;"}, {"sha": "ee74f81926ac67e585dfa51d6c38201c370b9c7d", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -41,6 +41,20 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--search-color: #fff;\n+\t--code-highlight-kw-color: #ff7733;\n+\t--code-highlight-kw-2-color: #ff7733;\n+\t--code-highlight-lifetime-color: #ff7733;\n+\t--code-highlight-prelude-color: #69f2df;\n+\t--code-highlight-prelude-val-color: #ff7733;\n+\t--code-highlight-number-color: #b8cc52;\n+\t--code-highlight-string-color: #b8cc52;\n+\t--code-highlight-literal-color: #ff7733;\n+\t--code-highlight-attribute-color: #e6e1cf;\n+\t--code-highlight-self-color: #36a3d9;\n+\t--code-highlight-macro-color: #a37acc;\n+\t--code-highlight-question-mark-color: #ff9011;\n+\t--code-highlight-comment-color: #788797;\n+\t--code-highlight-doc-comment-color: #a1ac88;\n }\n \n .slider {\n@@ -124,9 +138,6 @@ pre, .rustdoc.source .example-wrap {\n \n .content .item-info::before { color: #ccc; }\n \n-pre.rust .comment { color: #788797; }\n-pre.rust .doccomment { color: #a1ac88; }\n-\n .sidebar h2 a,\n .sidebar h3 a {\n \tcolor: white;\n@@ -161,23 +172,6 @@ details.rustdoc-toggle > summary::before {\n \n .src-line-numbers :target { background-color: transparent; }\n \n-/* Code highlighting */\n-pre.rust .number, pre.rust .string { color: #b8cc52; }\n-pre.rust .kw, pre.rust .kw-2, pre.rust .prelude-ty,\n-pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .lifetime { color: #ff7733; }\n-pre.rust .macro, pre.rust .macro-nonterminal { color: #a37acc; }\n-pre.rust .question-mark {\n-\tcolor: #ff9011;\n-}\n-pre.rust .self {\n-\tcolor: #36a3d9;\n-\tfont-style: italic;\n-}\n-pre.rust .attribute {\n-\tcolor: #e6e1cf;\n-}\n-\n pre.example-line-numbers {\n \tcolor: #5c67736e;\n \tborder: none;"}, {"sha": "06baceca01d3b4d05eb90b71d73019056c2769f5", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -36,6 +36,20 @@\n \t--stab-background-color: #314559;\n \t--stab-code-color: #e6e1cf;\n \t--search-color: #111;\n+\t--code-highlight-kw-color: #ab8ac1;\n+\t--code-highlight-kw-2-color: #769acb;\n+\t--code-highlight-lifetime-color: #d97f26;\n+\t--code-highlight-prelude-color: #769acb;\n+\t--code-highlight-prelude-val-color: #ee6868;\n+\t--code-highlight-number-color: #83a300;\n+\t--code-highlight-string-color: #83a300;\n+\t--code-highlight-literal-color: #ee6868;\n+\t--code-highlight-attribute-color: #ee6868;\n+\t--code-highlight-self-color: #ee6868;\n+\t--code-highlight-macro-color: #3e999f;\n+\t--code-highlight-question-mark-color: #ff9011;\n+\t--code-highlight-comment-color: #8d8d8b;\n+\t--code-highlight-doc-comment-color: #8ca375;\n }\n \n .slider {\n@@ -62,9 +76,6 @@ input:focus + .slider {\n \n .content .item-info::before { color: #ccc; }\n \n-pre.rust .comment { color: #8d8d8b; }\n-pre.rust .doccomment { color: #8ca375; }\n-\n body.source .example-wrap pre.rust a {\n \tbackground: #333;\n }\n@@ -86,18 +97,6 @@ details.rustdoc-toggle > summary::before {\n \n .src-line-numbers :target { background-color: transparent; }\n \n-/* Code highlighting */\n-pre.rust .kw { color: #ab8ac1; }\n-pre.rust .kw-2, pre.rust .prelude-ty { color: #769acb; }\n-pre.rust .number, pre.rust .string { color: #83a300; }\n-pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .attribute { color: #ee6868; }\n-pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n-pre.rust .lifetime { color: #d97f26; }\n-pre.rust .question-mark {\n-\tcolor: #ff9011;\n-}\n-\n pre.example-line-numbers {\n \tborder-color: #4a4949;\n }"}, {"sha": "058974c078c8d4049ec3aa1f24f475200096ac12", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -36,6 +36,20 @@\n \t--stab-background-color: #fff5d6;\n \t--stab-code-color: #000;\n \t--search-color: #000;\n+\t--code-highlight-kw-color: #8959a8;\n+\t--code-highlight-kw-2-color: #4271ae;\n+\t--code-highlight-lifetime-color: #b76514;\n+\t--code-highlight-prelude-color: #4271ae;\n+\t--code-highlight-prelude-val-color: #c82829;\n+\t--code-highlight-number-color: #718c00;\n+\t--code-highlight-string-color: #718c00;\n+\t--code-highlight-literal-color: #c82829;\n+\t--code-highlight-attribute-color: #c82829;\n+\t--code-highlight-self-color: #c82829;\n+\t--code-highlight-macro-color: #3e999f;\n+\t--code-highlight-question-mark-color: #ff9011;\n+\t--code-highlight-comment-color: #8e908c;\n+\t--code-highlight-doc-comment-color: #4d4d4c;\n }\n \n .slider {\n@@ -78,20 +92,6 @@ body.source .example-wrap pre.rust a {\n \n .src-line-numbers :target { background-color: transparent; }\n \n-/* Code highlighting */\n-pre.rust .kw { color: #8959A8; }\n-pre.rust .kw-2, pre.rust .prelude-ty { color: #4271AE; }\n-pre.rust .number, pre.rust .string { color: #718C00; }\n-pre.rust .self, pre.rust .bool-val, pre.rust .prelude-val,\n-pre.rust .attribute { color: #C82829; }\n-pre.rust .comment { color: #8E908C; }\n-pre.rust .doccomment { color: #4D4D4C; }\n-pre.rust .macro, pre.rust .macro-nonterminal { color: #3E999F; }\n-pre.rust .lifetime { color: #B76514; }\n-pre.rust .question-mark {\n-\tcolor: #ff9011;\n-}\n-\n pre.example-line-numbers {\n \tborder-color: #c7c7c7;\n }"}, {"sha": "5df3669056d0ff674d88e275fcc18fbdf986be8b", "filename": "src/test/codegen/vec-in-place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fcodegen%2Fvec-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fvec-in-place.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -17,7 +17,7 @@ pub struct Foo {\n \n // Going from an aggregate struct to another type currently requires Copy to\n // enable the TrustedRandomAccess specialization. Without it optimizations do not yet\n-// reliably recognize the loops as noop for for repr(C) or non-Copy structs.\n+// reliably recognize the loops as noop for repr(C) or non-Copy structs.\n #[derive(Copy, Clone)]\n pub struct Bar {\n     a: u64,"}, {"sha": "dd01dbf6148d23dbaa782158834838c6158e930e", "filename": "src/test/rustdoc-gui/highlight-colors.goml", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhighlight-colors.goml?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -0,0 +1,57 @@\n+// This test checks the highlight colors in the source code pages.\n+goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n+show-text: true\n+\n+local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+reload:\n+\n+assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n+assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(105, 242, 223)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n+assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n+assert-css: (\"pre.rust .number\", {\"color\": \"rgb(184, 204, 82)\"}, ALL)\n+assert-css: (\"pre.rust .string\", {\"color\": \"rgb(184, 204, 82)\"}, ALL)\n+assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(255, 119, 51)\"}, ALL)\n+assert-css: (\"pre.rust .self\", {\"color\": \"rgb(54, 163, 217)\"}, ALL)\n+assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(230, 225, 207)\"}, ALL)\n+assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(163, 122, 204)\"}, ALL)\n+assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n+assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(120, 135, 151)\"}, ALL)\n+assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(161, 172, 136)\"}, ALL)\n+\n+local-storage: {\"rustdoc-theme\": \"dark\"}\n+reload:\n+\n+assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(171, 138, 193)\"}, ALL)\n+assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(118, 154, 203)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(118, 154, 203)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n+assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(217, 127, 38)\"}, ALL)\n+assert-css: (\"pre.rust .number\", {\"color\": \"rgb(131, 163, 0)\"}, ALL)\n+assert-css: (\"pre.rust .string\", {\"color\": \"rgb(131, 163, 0)\"}, ALL)\n+assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n+assert-css: (\"pre.rust .self\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n+assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(238, 104, 104)\"}, ALL)\n+assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(62, 153, 159)\"}, ALL)\n+assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n+assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(141, 141, 139)\"}, ALL)\n+assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(140, 163, 117)\"}, ALL)\n+\n+local-storage: {\"rustdoc-theme\": \"light\"}\n+reload:\n+\n+assert-css: (\"pre.rust .kw\", {\"color\": \"rgb(137, 89, 168)\"}, ALL)\n+assert-css: (\"pre.rust .kw-2\", {\"color\": \"rgb(66, 113, 174)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-ty\", {\"color\": \"rgb(66, 113, 174)\"}, ALL)\n+assert-css: (\"pre.rust .prelude-val\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n+assert-css: (\"pre.rust .lifetime\", {\"color\": \"rgb(183, 101, 20)\"}, ALL)\n+assert-css: (\"pre.rust .number\", {\"color\": \"rgb(113, 140, 0)\"}, ALL)\n+assert-css: (\"pre.rust .string\", {\"color\": \"rgb(113, 140, 0)\"}, ALL)\n+assert-css: (\"pre.rust .bool-val\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n+assert-css: (\"pre.rust .self\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n+assert-css: (\"pre.rust .attribute\", {\"color\": \"rgb(200, 40, 41)\"}, ALL)\n+assert-css: (\"pre.rust .macro\", {\"color\": \"rgb(62, 153, 159)\"}, ALL)\n+assert-css: (\"pre.rust .question-mark\", {\"color\": \"rgb(255, 144, 17)\"}, ALL)\n+assert-css: (\"pre.rust .comment\", {\"color\": \"rgb(142, 144, 140)\"}, ALL)\n+assert-css: (\"pre.rust .doccomment\", {\"color\": \"rgb(77, 77, 76)\"}, ALL)"}, {"sha": "cc0efe7231a43b01c5a670974d8d3d83cdcb1fff", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -363,9 +363,24 @@ pub trait TraitWithNoDocblocks {\n \n pub struct TypeWithNoDocblocks;\n \n+impl TypeWithNoDocblocks {\n+    fn x() -> Option<Self> {\n+        Some(Self)\n+    }\n+    fn y() -> Option<u32> {\n+        // code comment\n+        let t = Self::x()?;\n+        Some(0)\n+    }\n+}\n+\n impl TypeWithNoDocblocks {\n     pub fn first_fn(&self) {}\n-    pub fn second_fn(&self) {}\n+    pub fn second_fn<'a>(&'a self) {\n+        let x = 12;\n+        let y = \"a\";\n+        let z = false;\n+    }\n }\n \n pub unsafe fn unsafe_fn() {}"}, {"sha": "0b96a6bd7c0093b6cfb2cd1c5e1061eaa116291b", "filename": "src/test/ui/associated-item/associated-item-duplicate-names-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fassociated-item-duplicate-names-2.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,11 +1,11 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/associated-item-duplicate-names-2.rs:5:5\n    |\n LL |     const bar: bool = true;\n-   |     --------------- previous definition of `bar` here\n+   |     --------------- other definition for `bar`\n LL |     fn bar() {}\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "328d54d5ac41188e8e7d1f0e7eb455d4d302c8d7", "filename": "src/test/ui/associated-item/impl-duplicate-methods.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -3,7 +3,7 @@ struct Foo;\n impl Foo {\n     fn orange(&self) {}\n     fn orange(&self) {}\n-    //~^ ERROR duplicate definition\n+    //~^ ERROR duplicate definitions with name `orange` [E0592]\n }\n \n fn main() {}", "previous_filename": "src/test/ui/impl-duplicate-methods.rs"}, {"sha": "6f753845ac85a9db6bdd304d0ed0eaa807282f97", "filename": "src/test/ui/associated-item/impl-duplicate-methods.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fimpl-duplicate-methods.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -0,0 +1,11 @@\n+error[E0592]: duplicate definitions with name `orange`\n+  --> $DIR/impl-duplicate-methods.rs:5:5\n+   |\n+LL |     fn orange(&self) {}\n+   |     ---------------- other definition for `orange`\n+LL |     fn orange(&self) {}\n+   |     ^^^^^^^^^^^^^^^^ duplicate definitions for `orange`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "015487a06aafeab403ccb40da3d5ab38e9c84f6d", "filename": "src/test/ui/borrowck/issue-17718-static-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-static-move.rs"}, {"sha": "984534bfb8b86cbe19adeef35ac5699d7343c72f", "filename": "src/test/ui/borrowck/issue-17718-static-move.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-17718-static-move.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-static-move.stderr"}, {"sha": "2e6aff1618bfbc62d53b0f04210ea96920c53bff", "filename": "src/test/ui/consts/issue-17718-constants-not-static.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-constants-not-static.rs"}, {"sha": "8f3acae71391fa56fd37b3eb5a0c8179130d8128", "filename": "src/test/ui/consts/issue-17718-constants-not-static.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-17718-constants-not-static.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-constants-not-static.stderr"}, {"sha": "c9a729c7b2071d3aa44bce0ecc36eb85ad584c46", "filename": "src/test/ui/drop/issue-17718-const-destructors.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fdrop%2Fissue-17718-const-destructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fdrop%2Fissue-17718-const-destructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fissue-17718-const-destructors.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-const-destructors.rs"}, {"sha": "80d815379bec2fa7b272fbc17bcda278ddf2e601", "filename": "src/test/ui/drop/issue-48962.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fdrop%2Fissue-48962.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fdrop%2Fissue-48962.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fissue-48962.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-48962.rs"}, {"sha": "04b37091b2f16cd1a520bf06ae46b4eb8ba6ca7d", "filename": "src/test/ui/error-codes/E0201.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -2,7 +2,7 @@ struct Foo(u8);\n \n impl Foo {\n     fn bar(&self) -> bool { self.0 > 5 }\n-    fn bar() {} //~ ERROR E0201\n+    fn bar() {} //~ ERROR E0592\n }\n \n trait Baz {"}, {"sha": "608ff691776945ee338e540c7a04d87c6fe1ce31", "filename": "src/test/ui/error-codes/E0201.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0201.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -21,14 +21,15 @@ LL |     type Quux = u32;\n LL |     type Quux = u32;\n    |     ^^^^^^^^^^^^^^^^ duplicate definition\n \n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/E0201.rs:5:5\n    |\n LL |     fn bar(&self) -> bool { self.0 > 5 }\n-   |     --------------------- previous definition of `bar` here\n+   |     --------------------- other definition for `bar`\n LL |     fn bar() {}\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0201`.\n+Some errors have detailed explanations: E0201, E0592.\n+For more information about an error, try `rustc --explain E0201`."}, {"sha": "c19702a5bf0cf26c13e7d27e6bbcfd24a0b3312b", "filename": "src/test/ui/impl-duplicate-methods.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-duplicate-methods.stderr?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -1,11 +0,0 @@\n-error[E0201]: duplicate definitions with name `orange`:\n-  --> $DIR/impl-duplicate-methods.rs:5:5\n-   |\n-LL |     fn orange(&self) {}\n-   |     ---------------- previous definition of `orange` here\n-LL |     fn orange(&self) {}\n-   |     ^^^^^^^^^^^^^^^^ duplicate definition\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0201`."}, {"sha": "8c7303f3c3c51faefd1bb1abcfe1a781495195f2", "filename": "src/test/ui/issues/issue-4265.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4265.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,12 +1,12 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/issue-4265.rs:10:5\n    |\n LL |     fn bar() {\n-   |     -------- previous definition of `bar` here\n+   |     -------- other definition for `bar`\n ...\n LL |     fn bar() {\n-   |     ^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "515b3bc09f0763fa46b5832b69ae4c4350cca432", "filename": "src/test/ui/issues/issue-77993-1.rs", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.rs?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -1,12 +0,0 @@\n-#[derive(Clone)]\n-struct InGroup<F> {\n-    it: It,\n-    //~^ ERROR cannot find type `It` in this scope\n-    f: F,\n-}\n-fn dates_in_year() -> impl Clone {\n-    InGroup { f: |d| d }\n-    //~^ ERROR missing field `it` in initializer of `InGroup<_>`\n-}\n-\n-fn main() {}"}, {"sha": "3dc78ba6f8563e13369181e55b4dcb3aed1ad861", "filename": "src/test/ui/issues/issue-77993-1.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/32717603f61a566ff0b8293ef3177cb7c4f50fa9/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-77993-1.stderr?ref=32717603f61a566ff0b8293ef3177cb7c4f50fa9", "patch": "@@ -1,16 +0,0 @@\n-error[E0412]: cannot find type `It` in this scope\n-  --> $DIR/issue-77993-1.rs:3:9\n-   |\n-LL |     it: It,\n-   |         ^^ not found in this scope\n-\n-error[E0063]: missing field `it` in initializer of `InGroup<_>`\n-  --> $DIR/issue-77993-1.rs:8:5\n-   |\n-LL |     InGroup { f: |d| d }\n-   |     ^^^^^^^ missing `it`\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0063, E0412.\n-For more information about an error, try `rustc --explain E0063`."}, {"sha": "1a75310c94ff58c51f2e1f9e2fe2c9e437aff29a", "filename": "src/test/ui/let-else/let-else-then-diverge.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,8 +1,6 @@\n-//\n-// popped up in in #94012, where an alternative desugaring was\n+// popped up in #94012, where an alternative desugaring was\n // causing unreachable code errors\n \n-\n #![deny(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "470a11d4769bc42dd401436a6b5fcfac0a78962f", "filename": "src/test/ui/let-else/let-else-then-diverge.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,11 +1,11 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-then-diverge.rs:11:13\n+  --> $DIR/let-else-then-diverge.rs:9:13\n    |\n LL |         let x = 5;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n-  --> $DIR/let-else-then-diverge.rs:6:9\n+  --> $DIR/let-else-then-diverge.rs:4:9\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^"}, {"sha": "dd616c4a5e75d43cb50cdae987ae725879363fe6", "filename": "src/test/ui/methods/method-macro-backtrace.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-macro-backtrace.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -1,11 +1,11 @@\n-error[E0201]: duplicate definitions with name `bar`:\n+error[E0592]: duplicate definitions with name `bar`\n   --> $DIR/method-macro-backtrace.rs:22:5\n    |\n LL |     fn bar(&self) { }\n-   |     ------------- previous definition of `bar` here\n+   |     ------------- other definition for `bar`\n LL |     fn bar(&self) { }\n-   |     ^^^^^^^^^^^^^ duplicate definition\n+   |     ^^^^^^^^^^^^^ duplicate definitions for `bar`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0201`.\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "98d6e1a14cb3200f1ec6be9d161d003a509eb7e1", "filename": "src/test/ui/never_type/issue-5500-1.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fnever_type%2Fissue-5500-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fnever_type%2Fissue-5500-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever_type%2Fissue-5500-1.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-5500-1.rs"}, {"sha": "d5a5f445d5bdcbbc848ef2d05dc73eaef30b4af2", "filename": "src/test/ui/parser/issue-17718-parse-const.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fparser%2Fissue-17718-parse-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fparser%2Fissue-17718-parse-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17718-parse-const.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-parse-const.rs"}, {"sha": "2ca0f67f80e5ed24c3040b0df2c79e2f184bdbe6", "filename": "src/test/ui/pattern/issue-17718-patterns.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-patterns.rs"}, {"sha": "109091c2af0c7e39f0b9a9e7863df7c2d808bf75", "filename": "src/test/ui/pattern/issue-17718-patterns.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fissue-17718-patterns.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-patterns.stderr"}, {"sha": "93cf4bf3ecce345993ec3053cbd0b3dabbd4f673", "filename": "src/test/ui/privacy/auxiliary/issue-17718-const-privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fauxiliary%2Fissue-17718-const-privacy.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/auxiliary/issue-17718-const-privacy.rs"}, {"sha": "6ab3a60df8742056438511f3a6e29ab3534d4219", "filename": "src/test/ui/privacy/issue-17718-const-privacy.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-const-privacy.rs"}, {"sha": "133a6360bf9a0b3ffc8f69c20cad9a84dc6da20c", "filename": "src/test/ui/privacy/issue-17718-const-privacy.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-17718-const-privacy.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-const-privacy.stderr"}, {"sha": "cb634671bd4fa6c4661c62f3f1ab4de8fce2e3bb", "filename": "src/test/ui/proc-macro/call-deprecated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fproc-macro%2Fcall-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fproc-macro%2Fcall-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fcall-deprecated.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -5,7 +5,7 @@ extern crate call_deprecated;\n \n // These first two `#[allow(deprecated)]` attributes\n // do nothing, since the AST nodes for `First` and `Second`\n-// haven't been been assigned a `NodeId`.\n+// haven't been assigned a `NodeId`.\n // See #63221 for a discussion about how we should\n // handle the interaction of 'inert' attributes and\n // proc-macro attributes."}, {"sha": "be4a523155825a0795e9c9fb4c89ef434dd020db", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.disallowed.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.disallowed.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -75,26 +75,26 @@ LL |     if let first = &opt && let None = Some(1) {}\n    = note: this pattern will always match\n    = help: consider moving it outside of the construct\n \n-error: irrefutable `let` patterns\n+error: irrefutable `if let` guard patterns\n   --> $DIR/irrefutable-lets.rs:44:28\n    |\n LL |         Some(ref first) if let second = first && let _third = second && let v = 4 + 4 => {},\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: these patterns will always match, so the `let` is useless\n-   = help: consider removing `let`\n+   = note: these patterns will always match, so the guard is useless\n+   = help: consider removing the guard and adding a `let` inside the match arm\n \n-error: leading irrefutable pattern in let chain\n-  --> $DIR/irrefutable-lets.rs:50:28\n+error: trailing irrefutable patterns in let chain\n+  --> $DIR/irrefutable-lets.rs:59:16\n    |\n-LL |         Some(ref first) if let Range { start: local_start, end: _ } = first\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |             && let v = local_end && let w = v => {},\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: this pattern will always match\n-   = help: consider moving it outside of the construct\n+   = note: these patterns will always match\n+   = help: consider moving them into the body\n \n error: irrefutable `while let` patterns\n-  --> $DIR/irrefutable-lets.rs:59:11\n+  --> $DIR/irrefutable-lets.rs:68:11\n    |\n LL |     while let first = &opt && let (a, b) = (1, 2) {}\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ LL |     while let first = &opt && let (a, b) = (1, 2) {}\n    = help: consider instead using a `loop { ... }` with a `let` inside it\n \n error: trailing irrefutable patterns in let chain\n-  --> $DIR/irrefutable-lets.rs:62:40\n+  --> $DIR/irrefutable-lets.rs:71:40\n    |\n LL |     while let Some(ref first) = opt && let second = first && let _third = second {}\n    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9afb6853b362752bc954bba811dae86aaf1babba", "filename": "src/test/ui/rfc-2497-if-let-chains/irrefutable-lets.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Firrefutable-lets.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -42,18 +42,27 @@ fn main() {\n \n     match opt {\n         Some(ref first) if let second = first && let _third = second && let v = 4 + 4 => {},\n-        //[disallowed]~^ ERROR irrefutable `let` patterns\n+        //[disallowed]~^ ERROR irrefutable `if let` guard patterns\n         _ => {}\n     }\n \n+    // No error about leading irrefutable patterns: the expr on the rhs might\n+    // use the bindings created by the match.\n     match opt {\n         Some(ref first) if let Range { start: local_start, end: _ } = first\n-        //[disallowed]~^ ERROR leading irrefutable pattern in let chain\n             && let None = local_start => {},\n         _ => {}\n     }\n \n-    // No error, despite the prefix being irrefutable\n+    match opt {\n+        Some(ref first) if let Range { start: Some(_), end: local_end } = first\n+            && let v = local_end && let w = v => {},\n+        //[disallowed]~^ ERROR trailing irrefutable patterns in let chain\n+        _ => {}\n+    }\n+\n+    // No error, despite the prefix being irrefutable: moving out could change the behaviour,\n+    // due to possible side effects of the operation.\n     while let first = &opt && let Some(ref second) = first && let None = second.start {}\n \n     while let first = &opt && let (a, b) = (1, 2) {}"}, {"sha": "6f278d76bb18b7a1fc6849f872ef298c27252bb8", "filename": "src/test/ui/statics/issue-17718-static-sync.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-static-sync.rs"}, {"sha": "bc6e45e59258f370cda1ad3e9541d376c2ee2cd0", "filename": "src/test/ui/statics/issue-17718-static-sync.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-sync.stderr?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-static-sync.stderr"}, {"sha": "65a8713ba056ed976854cda930b461dadd25ac61", "filename": "src/test/ui/statics/issue-17718-static-unsafe-interior.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-unsafe-interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-unsafe-interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatics%2Fissue-17718-static-unsafe-interior.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "previous_filename": "src/test/ui/issues/issue-17718-static-unsafe-interior.rs"}, {"sha": "3815259c9aac933975eb746ed415a4fcf3e608ad", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b0a099dfc9a97ecd10adb319396c731c4b2d169/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=9b0a099dfc9a97ecd10adb319396c731c4b2d169", "patch": "@@ -7,8 +7,8 @@ use std::path::Path;\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n-const ROOT_ENTRY_LIMIT: usize = 950;\n-const ISSUES_ENTRY_LIMIT: usize = 2141;\n+const ROOT_ENTRY_LIMIT: usize = 948;\n+const ISSUES_ENTRY_LIMIT: usize = 2126;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}