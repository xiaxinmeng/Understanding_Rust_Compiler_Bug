{"sha": "116d35d401b52add75bcef8edd698f72855ed3c3", "node_id": "C_kwDOAAsO6NoAKDExNmQzNWQ0MDFiNTJhZGQ3NWJjZWY4ZWRkNjk4ZjcyODU1ZWQzYzM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-18T14:31:56Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-10-18T14:31:56Z"}, "message": "`const_evaluatable_unchecked` to const eval", "tree": {"sha": "dfdfb61cd71fe7cbfbc6fbf2efa6692b8a53fa9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfdfb61cd71fe7cbfbc6fbf2efa6692b8a53fa9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116d35d401b52add75bcef8edd698f72855ed3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116d35d401b52add75bcef8edd698f72855ed3c3", "html_url": "https://github.com/rust-lang/rust/commit/116d35d401b52add75bcef8edd698f72855ed3c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116d35d401b52add75bcef8edd698f72855ed3c3/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "660ca4804175e6220a2284b8e7441aacf10367dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/660ca4804175e6220a2284b8e7441aacf10367dd", "html_url": "https://github.com/rust-lang/rust/commit/660ca4804175e6220a2284b8e7441aacf10367dd"}], "stats": {"total": 93, "additions": 51, "deletions": 42}, "files": [{"sha": "a58cbc3767ed658980878daebc399a2cb7a6d672", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -55,6 +55,7 @@\n #![feature(drain_filter)]\n #![feature(intra_doc_pointers)]\n #![feature(yeet_expr)]\n+#![feature(result_option_inspect)]\n #![feature(const_option)]\n #![recursion_limit = \"512\"]\n #![allow(rustc::potential_query_instability)]"}, {"sha": "1358425b259fa0ccde6d0555a7ccfe480cc59c43", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -4,7 +4,9 @@ use crate::mir;\n use crate::ty::subst::InternalSubsts;\n use crate::ty::visit::TypeVisitable;\n use crate::ty::{self, query::TyCtxtAt, query::TyCtxtEnsure, TyCtxt};\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::DefId;\n+use rustc_session::lint;\n use rustc_span::{Span, DUMMY_SP};\n \n impl<'tcx> TyCtxt<'tcx> {\n@@ -83,7 +85,29 @@ impl<'tcx> TyCtxt<'tcx> {\n         match ty::Instance::resolve_opt_const_arg(self, param_env, ct.def, ct.substs) {\n             Ok(Some(instance)) => {\n                 let cid = GlobalId { instance, promoted: None };\n-                self.const_eval_global_id_for_typeck(param_env, cid, span)\n+                self.const_eval_global_id_for_typeck(param_env, cid, span).inspect(|_| {\n+                    // We are emitting the lint here instead of in `is_const_evaluatable`\n+                    // as we normalize obligations before checking them, and normalization\n+                    // uses this function to evaluate this constant.\n+                    //\n+                    // @lcnr believes that successfully evaluating even though there are\n+                    // used generic parameters is a bug of evaluation, so checking for it\n+                    // here does feel somewhat sensible.\n+                    if !self.features().generic_const_exprs && ct.substs.has_non_region_param() {\n+                        assert!(matches!(self.def_kind(ct.def.did), DefKind::AnonConst));\n+                        let mir_body = self.mir_for_ctfe_opt_const_arg(ct.def);\n+                        if mir_body.is_polymorphic {\n+                            let Some(local_def_id) = ct.def.did.as_local() else { return };\n+                            self.struct_span_lint_hir(\n+                                lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n+                                self.hir().local_def_id_to_hir_id(local_def_id),\n+                                self.def_span(ct.def.did),\n+                                \"cannot use constants which depend on generic parameters in types\",\n+                                |err| err,\n+                            )\n+                        }\n+                    }\n+                })\n             }\n             Ok(None) => Err(ErrorHandled::TooGeneric),\n             Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),"}, {"sha": "84038625fb2792038f5243d02584f737d34645b2", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -9,14 +9,12 @@\n //! `thir_abstract_const` which can then be checked for structural equality with other\n //! generic constants mentioned in the `caller_bounds` of the current environment.\n use rustc_errors::ErrorGuaranteed;\n-use rustc_hir::def::DefKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::abstract_const::{\n     walk_abstract_const, AbstractConst, FailureKind, Node, NotConstEvaluatable,\n };\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n-use rustc_session::lint;\n use rustc_span::Span;\n \n use std::iter;\n@@ -262,25 +260,7 @@ pub fn is_const_evaluatable<'tcx>(\n                 Err(NotConstEvaluatable::Error(reported))\n             }\n             Err(ErrorHandled::Reported(e)) => Err(NotConstEvaluatable::Error(e)),\n-            Ok(_) => {\n-                if uv.substs.has_non_region_param() {\n-                    assert!(matches!(infcx.tcx.def_kind(uv.def.did), DefKind::AnonConst));\n-                    let mir_body = infcx.tcx.mir_for_ctfe_opt_const_arg(uv.def);\n-\n-                    if mir_body.is_polymorphic {\n-                        let Some(local_def_id) = uv.def.did.as_local() else { return Ok(()) };\n-                        tcx.struct_span_lint_hir(\n-                            lint::builtin::CONST_EVALUATABLE_UNCHECKED,\n-                            tcx.hir().local_def_id_to_hir_id(local_def_id),\n-                            span,\n-                            \"cannot use constants which depend on generic parameters in types\",\n-                            |err| err\n-                        )\n-                    }\n-                }\n-\n-                Ok(())\n-            },\n+            Ok(_) => Ok(()),\n         }\n     }\n }"}, {"sha": "d674e3acdffde4bfd4a7463648e3f27908098ee3", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.full.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.full.stderr?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/dependence_lint.rs:13:32\n+  --> $DIR/dependence_lint.rs:14:32\n    |\n LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    |                                ^ cannot perform const operation using `T`\n@@ -8,7 +8,7 @@ LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/dependence_lint.rs:20:37\n+  --> $DIR/dependence_lint.rs:21:37\n    |\n LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n    |                                     ^ cannot perform const operation using `T`\n@@ -17,7 +17,7 @@ LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable,\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/dependence_lint.rs:9:9\n+  --> $DIR/dependence_lint.rs:10:9\n    |\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_\n    = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/dependence_lint.rs:16:9\n+  --> $DIR/dependence_lint.rs:17:9\n    |\n LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "74111ef1d38cd28f321fc5211fd804be504bbdbf", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.gce.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.gce.stderr?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,29 +1,29 @@\n error: overly complex generic constant\n-  --> $DIR/dependence_lint.rs:16:9\n+  --> $DIR/dependence_lint.rs:17:9\n    |\n LL |     [0; if false { size_of::<T>() } else { 3 }]; // lint on stable, error with gce\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: overly complex generic constant\n-  --> $DIR/dependence_lint.rs:20:17\n+  --> $DIR/dependence_lint.rs:21:17\n    |\n LL |     let _: [u8; if true { size_of::<T>() } else { 3 }]; // error on stable, error with gce\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ control flow is not supported in generic constants\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n error: unconstrained generic constant\n-  --> $DIR/dependence_lint.rs:13:12\n+  --> $DIR/dependence_lint.rs:14:12\n    |\n LL |     let _: [u8; size_of::<*mut T>()]; // error on stable, error with gce\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: try adding a `where` bound using this expression: `where [(); size_of::<*mut T>()]:`\n \n error: unconstrained generic constant\n-  --> $DIR/dependence_lint.rs:9:9\n+  --> $DIR/dependence_lint.rs:10:9\n    |\n LL |     [0; size_of::<*mut T>()]; // lint on stable, error with `generic_const_exprs`\n    |         ^^^^^^^^^^^^^^^^^^^"}, {"sha": "b715e07f8fa006158d572beef23ca776d66ced39", "filename": "src/test/ui/const-generics/generic_const_exprs/dependence_lint.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fdependence_lint.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,4 +1,5 @@\n // revisions: full gce\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n \n #![cfg_attr(gce, feature(generic_const_exprs))]\n #![allow(incomplete_features)]"}, {"sha": "3c866333d60968ca84eea059b458447d9047c8e7", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n \n const fn foo<T>() -> usize {\n     // We might instead branch on `std::mem::size_of::<*mut T>() < 8` here,"}, {"sha": "84abfe57876cd12b105eb93146e1ec8a4a0f8263", "filename": "src/test/ui/const-generics/generic_const_exprs/function-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Ffunction-call.stderr?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/function-call.rs:14:17\n+  --> $DIR/function-call.rs:15:17\n    |\n LL |     let _ = [0; foo::<T>()];\n    |                 ^^^^^^^^^^"}, {"sha": "8e667aebaadc2bcdca048661bfda021fb9916a72", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,3 +1,4 @@\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n use std::mem::size_of;\n \n fn test<const N: usize>() {}"}, {"sha": "deabd05a6d5b0807af86d048978dfdccdf37dbbc", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,5 +1,5 @@\n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:9:38\n+  --> $DIR/complex-expression.rs:10:38\n    |\n LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    |                                      ^ cannot perform const operation using `N`\n@@ -8,7 +8,7 @@ LL | struct Break0<const N: usize>([u8; { N + 1 }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:12:40\n+  --> $DIR/complex-expression.rs:13:40\n    |\n LL | struct Break1<const N: usize>([u8; { { N } }]);\n    |                                        ^ cannot perform const operation using `N`\n@@ -17,7 +17,7 @@ LL | struct Break1<const N: usize>([u8; { { N } }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:16:17\n+  --> $DIR/complex-expression.rs:17:17\n    |\n LL |     let _: [u8; N + 1];\n    |                 ^ cannot perform const operation using `N`\n@@ -26,7 +26,7 @@ LL |     let _: [u8; N + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:21:17\n+  --> $DIR/complex-expression.rs:22:17\n    |\n LL |     let _ = [0; N + 1];\n    |                 ^ cannot perform const operation using `N`\n@@ -35,7 +35,7 @@ LL |     let _ = [0; N + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:25:45\n+  --> $DIR/complex-expression.rs:26:45\n    |\n LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    |                                             ^ cannot perform const operation using `T`\n@@ -44,7 +44,7 @@ LL | struct BreakTy0<T>(T, [u8; { size_of::<*mut T>() }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:28:47\n+  --> $DIR/complex-expression.rs:29:47\n    |\n LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    |                                               ^ cannot perform const operation using `T`\n@@ -53,7 +53,7 @@ LL | struct BreakTy1<T>(T, [u8; { { size_of::<*mut T>() } }]);\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n error: generic parameters may not be used in const operations\n-  --> $DIR/complex-expression.rs:32:32\n+  --> $DIR/complex-expression.rs:33:32\n    |\n LL |     let _: [u8; size_of::<*mut T>() + 1];\n    |                                ^ cannot perform const operation using `T`\n@@ -62,7 +62,7 @@ LL |     let _: [u8; size_of::<*mut T>() + 1];\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/complex-expression.rs:37:17\n+  --> $DIR/complex-expression.rs:38:17\n    |\n LL |     let _ = [0; size_of::<*mut T>() + 1];\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "e9d868093e7698b2b0e492eacd3c0147bb8cc33e", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+// compile-flags: -Zdeduplicate-diagnostics=yes\n #![allow(dead_code)]\n \n fn foo<T>() {"}, {"sha": "8003dfa4071721eea15438a768b3385aa753e22f", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/116d35d401b52add75bcef8edd698f72855ed3c3/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=116d35d401b52add75bcef8edd698f72855ed3c3", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:5:9\n+  --> $DIR/const-evaluatable-unchecked.rs:6:9\n    |\n LL |     [0; std::mem::size_of::<*mut T>()];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     [0; std::mem::size_of::<*mut T>()];\n    = note: `#[warn(const_evaluatable_unchecked)]` on by default\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:16:21\n+  --> $DIR/const-evaluatable-unchecked.rs:17:21\n    |\n LL |         let _ = [0; Self::ASSOC];\n    |                     ^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |         let _ = [0; Self::ASSOC];\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:28:21\n+  --> $DIR/const-evaluatable-unchecked.rs:29:21\n    |\n LL |         let _ = [0; Self::ASSOC];\n    |                     ^^^^^^^^^^^"}]}