{"sha": "09efea5f542512eb7d6e70cd8c9f74d0230f8b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5ZWZlYTVmNTQyNTEyZWI3ZDZlNzBjZDhjOWY3NGQwMjMwZjhiNTA=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:39:07Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:35Z"}, "message": "Update unstable book documentation with the latest RFC text", "tree": {"sha": "119e364d96a0f938e1b5b532679b92df11632b86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119e364d96a0f938e1b5b532679b92df11632b86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09efea5f542512eb7d6e70cd8c9f74d0230f8b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09efea5f542512eb7d6e70cd8c9f74d0230f8b50", "html_url": "https://github.com/rust-lang/rust/commit/09efea5f542512eb7d6e70cd8c9f74d0230f8b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09efea5f542512eb7d6e70cd8c9f74d0230f8b50/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32471f4d876bee61217034d9426bc6c63959832e", "url": "https://api.github.com/repos/rust-lang/rust/commits/32471f4d876bee61217034d9426bc6c63959832e", "html_url": "https://github.com/rust-lang/rust/commit/32471f4d876bee61217034d9426bc6c63959832e"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "0b68991fce2a1053538de77b9ec7805edcae4839", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09efea5f542512eb7d6e70cd8c9f74d0230f8b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/09efea5f542512eb7d6e70cd8c9f74d0230f8b50/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=09efea5f542512eb7d6e70cd8c9f74d0230f8b50", "patch": "@@ -427,6 +427,8 @@ Several types of operands are supported:\n   - The substituted string does not include any modifiers (e.g. GOT, PLT, relocations, etc).\n   - `<path>` is allowed to point to a `#[thread_local]` static, in which case the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) to read from thread-local data.\n \n+Operand expressions are evaluated from left to right, just like function call arguments. After the `asm!` has executed, outputs are written to in left to right order. This is significant if two outputs point to the same place: that place will contain the value of the rightmost output.\n+\n ## Register operands\n \n Input and output operands can be specified either as an explicit register or as a register class from which the register allocator can select a register. Explicit registers are specified as string literals (e.g. `\"eax\"`) while register classes are specified as identifiers (e.g. `reg`). Using string literals for register names enables support for architectures that use special characters in register names, such as MIPS (`$0`, `$1`, etc).\n@@ -438,7 +440,7 @@ Only the following types are allowed as operands for inline assembly:\n - Floating-point numbers\n - Pointers (thin only)\n - Function pointers\n-- SIMD vectors (structs defined with `#[repr(simd)]` and which implement `Copy`)\n+- SIMD vectors (structs defined with `#[repr(simd)]` and which implement `Copy`). This includes architecture-specific vector types defined in `std::arch` such as `__m128` (x86) or `int8x16_t` (ARM).\n \n Here is the list of currently supported register classes:\n \n@@ -667,7 +669,6 @@ The compiler performs some additional checks on options:\n - These flags registers must be restored upon exiting the asm block if the `preserves_flags` option is set:\n   - x86\n     - Status flags in `EFLAGS` (CF, PF, AF, ZF, SF, OF).\n-    - Direction flag in `EFLAGS` (DF).\n     - Floating-point status word (all).\n     - Floating-point exception flags in `MXCSR` (PE, UE, OE, ZE, DE, IE).\n   - ARM\n@@ -682,11 +683,17 @@ The compiler performs some additional checks on options:\n     - Floating-point status (`FPSR` register).\n   - RISC-V\n     - Floating-point exception flags in `fcsr` (`fflags`).\n+- On x86, the direction flag (DF in `EFLAGS`) is clear on entry to an asm block and must be clear on exit.\n+  - Behavior is undefined if the direction flag is set on exiting an asm block.\n - The requirement of restoring the stack pointer and non-output registers to their original value only applies when exiting an `asm!` block.\n   - This means that `asm!` blocks that never return (even if not marked `noreturn`) don't need to preserve these registers.\n   - When returning to a different `asm!` block than you entered (e.g. for context switching), these registers must contain the value they had upon entering the `asm!` block that you are *exiting*.\n     - You cannot exit an `asm!` block that has not been entered. Neither can you exit an `asm!` block that has already been exited.\n     - You are responsible for switching any target-specific state (e.g. thread-local storage, stack bounds).\n     - The set of memory locations that you may access is the intersection of those allowed by the `asm!` blocks you entered and exited.\n+- You cannot assume that an `asm!` block will appear exactly once in the output binary. The compiler is allowed to instantiate multiple copies of the `asm!` block, for example when the function containing it is inlined in multiple places.\n+  - As a consequence, you should only use [local labels] inside inline assembly code. Defining symbols in assembly code may lead to assembler and/or linker errors due to duplicate symbol definitions.\n+\n+> **Note**: As a general rule, the flags covered by `preserves_flags` are those which are *not* preserved when performing a function call.\n \n-> **Note**: As a general rule, these are the flags which are *not* preserved when performing a function call.\n+[local labels]: https://sourceware.org/binutils/docs/as/Symbol-Names.html#Local-Labels"}]}