{"sha": "afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZTcwZWU0NDA4ZTc1MDQ1NGFjNjVmOGVhYjBjZDRmYTI2NmU5YzU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-17T12:56:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-17T12:56:44Z"}, "message": "Rollup merge of #86343 - JohnTitor:issue-85581, r=estebank\n\nDo not emit invalid suggestions on multiple mutable borrow errors\n\nFixes #85581", "tree": {"sha": "7d7ecabf784a5dc12f5df3aeed60fbfb54aa98a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d7ecabf784a5dc12f5df3aeed60fbfb54aa98a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgy0aNCRBK7hj4Ov3rIwAAdfEIABUic8nsqruMnpM+K8QsiSP+\nnobFGfVDz2HMuOXb3KJ6UNb0xtM38hKqrJoMS/r2vLiAIfA1wI87nTBGeSV5HxDH\niJL3ICSY9IFIMD8/Wf4IbwLAebsAamJ/NTWWuQD5+gMJJbxbf/5iYJ8KgnfG4wuf\n4a2BrZ8UNM1x+wGfg37EUCXy2IKwkL7lGDFq4xNGCVyCewzAoy7I66ao/Hmb86hp\n2VLqil+T4MQup7rASs5XBeqqPgKxMbXlL8hnR8VmMnd3Y9IpMwQLEQgZOTVH5WM/\nFs9sC2V9T1J0Tgos2eAitAmWwgVW4margbIh7FHILj2yRYH6Sn1bLJZAWg2mOBI=\n=S4uk\n-----END PGP SIGNATURE-----\n", "payload": "tree 7d7ecabf784a5dc12f5df3aeed60fbfb54aa98a5\nparent c062f3dddda6c6d334ae3753c6afdf04f2472877\nparent c8a8a23a31e9e4831ccab4efbc085852b7a86fa5\nauthor Yuki Okushi <jtitor@2k36.org> 1623934604 +0900\ncommitter GitHub <noreply@github.com> 1623934604 +0900\n\nRollup merge of #86343 - JohnTitor:issue-85581, r=estebank\n\nDo not emit invalid suggestions on multiple mutable borrow errors\n\nFixes #85581\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "html_url": "https://github.com/rust-lang/rust/commit/afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c062f3dddda6c6d334ae3753c6afdf04f2472877", "url": "https://api.github.com/repos/rust-lang/rust/commits/c062f3dddda6c6d334ae3753c6afdf04f2472877", "html_url": "https://github.com/rust-lang/rust/commit/c062f3dddda6c6d334ae3753c6afdf04f2472877"}, {"sha": "c8a8a23a31e9e4831ccab4efbc085852b7a86fa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8a8a23a31e9e4831ccab4efbc085852b7a86fa5", "html_url": "https://github.com/rust-lang/rust/commit/c8a8a23a31e9e4831ccab4efbc085852b7a86fa5"}], "stats": {"total": 66, "additions": 58, "deletions": 8}, "files": [{"sha": "a0c9b43d5afee1e1862084dcd20544888e9d6acb", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/conflict_errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fconflict_errors.rs?ref=afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "patch": "@@ -453,6 +453,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 Some(borrow_span),\n+                None,\n             );\n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -498,6 +499,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 None,\n+                None,\n             );\n         err\n     }\n@@ -718,6 +720,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             first_borrow_desc,\n             None,\n+            Some((issued_span, span)),\n         );\n \n         err\n@@ -1076,6 +1079,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     &mut err,\n                     \"\",\n                     None,\n+                    None,\n                 );\n             }\n         } else {\n@@ -1093,6 +1097,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 &mut err,\n                 \"\",\n                 None,\n+                None,\n             );\n         }\n \n@@ -1158,6 +1163,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         err.buffer(&mut self.errors_buffer);\n@@ -1236,6 +1242,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         let within = if borrow_spans.for_generator() { \" by generator\" } else { \"\" };\n@@ -1614,6 +1621,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             &mut err,\n             \"\",\n             None,\n+            None,\n         );\n \n         self.explain_deref_coercion(loan, &mut err);"}, {"sha": "76de010d1393bbaa02ea48d9389e96c6d3875c59", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "patch": "@@ -66,6 +66,7 @@ impl BorrowExplanation {\n         err: &mut DiagnosticBuilder<'_>,\n         borrow_desc: &str,\n         borrow_span: Option<Span>,\n+        multiple_borrow_span: Option<(Span, Span)>,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span, path_span) => {\n@@ -192,14 +193,23 @@ impl BorrowExplanation {\n \n                         if let Some(info) = &local_decl.is_block_tail {\n                             if info.tail_result_is_ignored {\n-                                err.span_suggestion_verbose(\n-                                    info.span.shrink_to_hi(),\n-                                    \"consider adding semicolon after the expression so its \\\n-                                     temporaries are dropped sooner, before the local variables \\\n-                                     declared by the block are dropped\",\n-                                    \";\".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                // #85581: If the first mutable borrow's scope contains\n+                                // the second borrow, this suggestion isn't helpful.\n+                                if !multiple_borrow_span\n+                                    .map(|(old, new)| {\n+                                        old.to(info.span.shrink_to_hi()).contains(new)\n+                                    })\n+                                    .unwrap_or(false)\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        info.span.shrink_to_hi(),\n+                                        \"consider adding semicolon after the expression so its \\\n+                                        temporaries are dropped sooner, before the local variables \\\n+                                        declared by the block are dropped\",\n+                                        \";\".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             } else {\n                                 err.note(\n                                     \"the temporary is part of an expression at the end of a \\"}, {"sha": "ccc120c5421f536a1a85e5af638d7119ed08a7c8", "filename": "src/test/ui/borrowck/issue-85581.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.rs?ref=afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "patch": "@@ -0,0 +1,15 @@\n+// Regression test of #85581.\n+// Checks not to suggest to add `;` when the second mutable borrow\n+// is in the first's scope.\n+\n+use std::collections::BinaryHeap;\n+\n+fn foo(heap: &mut BinaryHeap<i32>) {\n+    match heap.peek_mut() {\n+        Some(_) => { heap.pop(); },\n+        //~^ ERROR: cannot borrow `*heap` as mutable more than once at a time\n+        None => (),\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "29c0429f2a046bf7b69d0bf2752f4f633b256b61", "filename": "src/test/ui/borrowck/issue-85581.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/afe70ee4408e750454ac65f8eab0cd4fa266e9c5/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-85581.stderr?ref=afe70ee4408e750454ac65f8eab0cd4fa266e9c5", "patch": "@@ -0,0 +1,17 @@\n+error[E0499]: cannot borrow `*heap` as mutable more than once at a time\n+  --> $DIR/issue-85581.rs:9:22\n+   |\n+LL |     match heap.peek_mut() {\n+   |           ---------------\n+   |           |\n+   |           first mutable borrow occurs here\n+   |           a temporary with access to the first borrow is created here ...\n+LL |         Some(_) => { heap.pop(); },\n+   |                      ^^^^ second mutable borrow occurs here\n+...\n+LL | }\n+   | - ... and the first borrow might be used here, when that temporary is dropped and runs the destructor for type `Option<PeekMut<'_, i32>>`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0499`."}]}