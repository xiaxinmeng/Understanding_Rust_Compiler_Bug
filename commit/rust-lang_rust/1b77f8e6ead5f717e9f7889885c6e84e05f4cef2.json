{"sha": "1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNzdmOGU2ZWFkNWY3MTdlOWY3ODg5ODg1YzZlODRlMDVmNGNlZjI=", "commit": {"author": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-26T01:22:29Z"}, "committer": {"name": "Albin Hedman", "email": "albin9604@gmail.com", "date": "2020-12-26T01:22:29Z"}, "message": "Constify intrinsics::copy[_nonoverlapping]", "tree": {"sha": "320ecb01b2f91d71d258741c40155e4d2ef0efb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/320ecb01b2f91d71d258741c40155e4d2ef0efb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "html_url": "https://github.com/rust-lang/rust/commit/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2/comments", "author": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "usbalbin", "id": 10927717, "node_id": "MDQ6VXNlcjEwOTI3NzE3", "avatar_url": "https://avatars.githubusercontent.com/u/10927717?v=4", "gravatar_id": "", "url": "https://api.github.com/users/usbalbin", "html_url": "https://github.com/usbalbin", "followers_url": "https://api.github.com/users/usbalbin/followers", "following_url": "https://api.github.com/users/usbalbin/following{/other_user}", "gists_url": "https://api.github.com/users/usbalbin/gists{/gist_id}", "starred_url": "https://api.github.com/users/usbalbin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/usbalbin/subscriptions", "organizations_url": "https://api.github.com/users/usbalbin/orgs", "repos_url": "https://api.github.com/users/usbalbin/repos", "events_url": "https://api.github.com/users/usbalbin/events{/privacy}", "received_events_url": "https://api.github.com/users/usbalbin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "463ce4042835526f0bd7bf50d6905ed7e2004a2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/463ce4042835526f0bd7bf50d6905ed7e2004a2e", "html_url": "https://github.com/rust-lang/rust/commit/463ce4042835526f0bd7bf50d6905ed7e2004a2e"}], "stats": {"total": 40, "additions": 34, "deletions": 6}, "files": [{"sha": "c182fa35ee24affbcc8ddf7a472e577c96b00521", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "patch": "@@ -322,6 +322,29 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let result = Scalar::from_uint(truncated_bits, layout.size);\n                 self.write_scalar(result, dest)?;\n             }\n+            sym::copy | sym::copy_nonoverlapping => {\n+                let elem_ty = instance.substs.type_at(0);\n+                let elem_layout = self.layout_of(elem_ty)?;\n+                let count = self.read_scalar(args[2])?.to_machine_usize(self)?;\n+                let elem_align = elem_layout.align.abi;\n+\n+                let size = elem_layout.size.checked_mul(count, self).ok_or_else(|| {\n+                    err_ub_format!(\"overflow computing total size of `{}`\", intrinsic_name)\n+                })?;\n+                let src = self.read_scalar(args[0])?.check_init()?;\n+                let src = self.memory.check_ptr_access(src, size, elem_align)?;\n+                let dest = self.read_scalar(args[1])?.check_init()?;\n+                let dest = self.memory.check_ptr_access(dest, size, elem_align)?;\n+\n+                if let (Some(src), Some(dest)) = (src, dest) {\n+                    self.memory.copy(\n+                        src,\n+                        dest,\n+                        size,\n+                        intrinsic_name == sym::copy_nonoverlapping,\n+                    )?;\n+                }\n+            }\n             sym::offset => {\n                 let ptr = self.read_scalar(args[0])?.check_init()?;\n                 let offset_count = self.read_scalar(args[1])?.to_machine_isize(self)?;"}, {"sha": "87863ab5c68f43f3658309d7d9f9b55b697f2f35", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b77f8e6ead5f717e9f7889885c6e84e05f4cef2/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1b77f8e6ead5f717e9f7889885c6e84e05f4cef2", "patch": "@@ -1846,20 +1846,22 @@ pub(crate) fn is_nonoverlapping<T>(src: *const T, dst: *const T, count: usize) -\n /// [`Vec::append`]: ../../std/vec/struct.Vec.html#method.append\n #[doc(alias = \"memcpy\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n #[inline]\n-pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n+pub const unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n         fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    if cfg!(debug_assertions)\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions)\n         && !(is_aligned_and_not_null(src)\n             && is_aligned_and_not_null(dst)\n             && is_nonoverlapping(src, dst, count))\n     {\n         // Not panicking to keep codegen impact smaller.\n         abort();\n-    }\n+    }*/\n \n     // SAFETY: the safety contract for `copy_nonoverlapping` must be\n     // upheld by the caller.\n@@ -1928,16 +1930,19 @@ pub unsafe fn copy_nonoverlapping<T>(src: *const T, dst: *mut T, count: usize) {\n /// ```\n #[doc(alias = \"memmove\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n #[inline]\n-pub unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n+pub const unsafe fn copy<T>(src: *const T, dst: *mut T, count: usize) {\n     extern \"rust-intrinsic\" {\n+        #[rustc_const_unstable(feature = \"const_intrinsic_copy\", issue = \"none\")]\n         fn copy<T>(src: *const T, dst: *mut T, count: usize);\n     }\n \n-    if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n+    // FIXME: Perform these checks only at run time\n+    /*if cfg!(debug_assertions) && !(is_aligned_and_not_null(src) && is_aligned_and_not_null(dst)) {\n         // Not panicking to keep codegen impact smaller.\n         abort();\n-    }\n+    }*/\n \n     // SAFETY: the safety contract for `copy` must be upheld by the caller.\n     unsafe { copy(src, dst, count) }"}]}