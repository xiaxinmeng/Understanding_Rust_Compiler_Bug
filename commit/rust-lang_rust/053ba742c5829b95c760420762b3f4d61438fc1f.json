{"sha": "053ba742c5829b95c760420762b3f4d61438fc1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1M2JhNzQyYzU4MjliOTVjNzYwNDIwNzYyYjNmNGQ2MTQzOGZjMWY=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T17:11:57Z"}, "committer": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-17T17:11:57Z"}, "message": "Moved strptime and strftime into private helper functions.\n\nMakes the public API much easier to see and prepares the way for making them pure.", "tree": {"sha": "cf6ccc989f758ccc1cc736ac20239f89f72ee614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf6ccc989f758ccc1cc736ac20239f89f72ee614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/053ba742c5829b95c760420762b3f4d61438fc1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/053ba742c5829b95c760420762b3f4d61438fc1f", "html_url": "https://github.com/rust-lang/rust/commit/053ba742c5829b95c760420762b3f4d61438fc1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/053ba742c5829b95c760420762b3f4d61438fc1f/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8bfdd63c18cc986cedf8b891773e844a438586", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec8bfdd63c18cc986cedf8b891773e844a438586", "html_url": "https://github.com/rust-lang/rust/commit/ec8bfdd63c18cc986cedf8b891773e844a438586"}], "stats": {"total": 160, "additions": 84, "deletions": 76}, "files": [{"sha": "23ec6fef00300614c087634b4881edc64ac1654a", "filename": "src/libstd/time.rs", "status": "modified", "additions": 84, "deletions": 76, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/053ba742c5829b95c760420762b3f4d61438fc1f/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/053ba742c5829b95c760420762b3f4d61438fc1f/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=053ba742c5829b95c760420762b3f4d61438fc1f", "patch": "@@ -152,6 +152,89 @@ pub fn now() -> Tm {\n \n /// Parses the time from the string according to the format string.\n pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n+    do_strptime(s, format)\n+}\n+\n+pub fn strftime(format: &str, tm: Tm) -> ~str {\n+    do_strftime(format, tm)\n+}\n+\n+impl Tm {\n+    /// Convert time to the seconds from January 1, 1970\n+    fn to_timespec() -> Timespec {\n+        let mut sec = 0i64;\n+        if self.tm_gmtoff == 0_i32 {\n+            rustrt::rust_timegm(self, &mut sec);\n+        } else {\n+            rustrt::rust_mktime(self, &mut sec);\n+        }\n+        { sec: sec, nsec: self.tm_nsec }\n+    }\n+\n+    /// Convert time to the local timezone\n+    fn to_local() -> Tm {\n+        at(self.to_timespec())\n+    }\n+\n+    /// Convert time to the UTC\n+    fn to_utc() -> Tm {\n+        at_utc(self.to_timespec())\n+    }\n+\n+    /**\n+     * Return a string of the current time in the form\n+     * \"Thu Jan  1 00:00:00 1970\".\n+     */\n+    fn ctime() -> ~str { self.strftime(~\"%c\") }\n+\n+    /// Formats the time according to the format string.\n+    fn strftime(format: &str) -> ~str { strftime(format, self) }\n+\n+    /**\n+     * Returns a time string formatted according to RFC 822.\n+     *\n+     * local: \"Thu, 22 Mar 2012 07:53:18 PST\"\n+     * utc:   \"Thu, 22 Mar 2012 14:53:18 UTC\"\n+     */\n+    fn rfc822() -> ~str {\n+        if self.tm_gmtoff == 0_i32 {\n+            self.strftime(~\"%a, %d %b %Y %T GMT\")\n+        } else {\n+            self.strftime(~\"%a, %d %b %Y %T %Z\")\n+        }\n+    }\n+\n+    /**\n+     * Returns a time string formatted according to RFC 822 with Zulu time.\n+     *\n+     * local: \"Thu, 22 Mar 2012 07:53:18 -0700\"\n+     * utc:   \"Thu, 22 Mar 2012 14:53:18 -0000\"\n+     */\n+    fn rfc822z() -> ~str {\n+        self.strftime(~\"%a, %d %b %Y %T %z\")\n+    }\n+\n+    /**\n+     * Returns a time string formatted according to ISO 8601.\n+     *\n+     * local: \"2012-02-22T07:53:18-07:00\"\n+     * utc:   \"2012-02-22T14:53:18Z\"\n+     */\n+    fn rfc3339() -> ~str {\n+        if self.tm_gmtoff == 0_i32 {\n+            self.strftime(~\"%Y-%m-%dT%H:%M:%SZ\")\n+        } else {\n+            let s = self.strftime(~\"%Y-%m-%dT%H:%M:%S\");\n+            let sign = if self.tm_gmtoff > 0_i32 { '+' } else { '-' };\n+            let mut m = i32::abs(self.tm_gmtoff) / 60_i32;\n+            let h = m / 60_i32;\n+            m -= h * 60_i32;\n+            s + fmt!(\"%c%02d:%02d\", sign, h as int, m as int)\n+        }\n+    }\n+}\n+\n+priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     type TmMut = {\n        mut tm_sec: i32,\n        mut tm_min: i32,\n@@ -592,7 +675,7 @@ pub fn strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     }\n }\n \n-fn strftime(format: &str, tm: Tm) -> ~str {\n+priv fn do_strftime(format: &str, tm: Tm) -> ~str {\n     fn parse_type(ch: char, tm: &Tm) -> ~str {\n         //FIXME (#2350): Implement missing types.\n       let die = || fmt!(\"strftime: can't understand this format %c \", ch);\n@@ -759,81 +842,6 @@ fn strftime(format: &str, tm: Tm) -> ~str {\n     buf\n }\n \n-impl Tm {\n-    /// Convert time to the seconds from January 1, 1970\n-    fn to_timespec() -> Timespec {\n-        let mut sec = 0i64;\n-        if self.tm_gmtoff == 0_i32 {\n-            rustrt::rust_timegm(self, &mut sec);\n-        } else {\n-            rustrt::rust_mktime(self, &mut sec);\n-        }\n-        { sec: sec, nsec: self.tm_nsec }\n-    }\n-\n-    /// Convert time to the local timezone\n-    fn to_local() -> Tm {\n-        at(self.to_timespec())\n-    }\n-\n-    /// Convert time to the UTC\n-    fn to_utc() -> Tm {\n-        at_utc(self.to_timespec())\n-    }\n-\n-    /**\n-     * Return a string of the current time in the form\n-     * \"Thu Jan  1 00:00:00 1970\".\n-     */\n-    fn ctime() -> ~str { self.strftime(~\"%c\") }\n-\n-    /// Formats the time according to the format string.\n-    fn strftime(format: &str) -> ~str { strftime(format, self) }\n-\n-    /**\n-     * Returns a time string formatted according to RFC 822.\n-     *\n-     * local: \"Thu, 22 Mar 2012 07:53:18 PST\"\n-     * utc:   \"Thu, 22 Mar 2012 14:53:18 UTC\"\n-     */\n-    fn rfc822() -> ~str {\n-        if self.tm_gmtoff == 0_i32 {\n-            self.strftime(~\"%a, %d %b %Y %T GMT\")\n-        } else {\n-            self.strftime(~\"%a, %d %b %Y %T %Z\")\n-        }\n-    }\n-\n-    /**\n-     * Returns a time string formatted according to RFC 822 with Zulu time.\n-     *\n-     * local: \"Thu, 22 Mar 2012 07:53:18 -0700\"\n-     * utc:   \"Thu, 22 Mar 2012 14:53:18 -0000\"\n-     */\n-    fn rfc822z() -> ~str {\n-        self.strftime(~\"%a, %d %b %Y %T %z\")\n-    }\n-\n-    /**\n-     * Returns a time string formatted according to ISO 8601.\n-     *\n-     * local: \"2012-02-22T07:53:18-07:00\"\n-     * utc:   \"2012-02-22T14:53:18Z\"\n-     */\n-    fn rfc3339() -> ~str {\n-        if self.tm_gmtoff == 0_i32 {\n-            self.strftime(~\"%Y-%m-%dT%H:%M:%SZ\")\n-        } else {\n-            let s = self.strftime(~\"%Y-%m-%dT%H:%M:%S\");\n-            let sign = if self.tm_gmtoff > 0_i32 { '+' } else { '-' };\n-            let mut m = i32::abs(self.tm_gmtoff) / 60_i32;\n-            let h = m / 60_i32;\n-            m -= h * 60_i32;\n-            s + fmt!(\"%c%02d:%02d\", sign, h as int, m as int)\n-        }\n-    }\n-}\n-\n #[cfg(test)]\n mod tests {\n     #[legacy_exports];"}]}