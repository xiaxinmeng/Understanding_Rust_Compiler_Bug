{"sha": "a18f0d413c1acea7c94e7e89740f47716f8efc51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExOGYwZDQxM2MxYWNlYTdjOTRlN2U4OTc0MGY0NzcxNmY4ZWZjNTE=", "commit": {"author": {"name": "Jesse Jones", "email": "jesse9jones@gmail.com", "date": "2012-11-26T04:54:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-11-27T05:49:29Z"}, "message": "Made Tm_ a struct instead of a record and added serialization support to Tm and Tm_.\n\nNot entirely clear what the best way to do this is. Right now we persist the entire\nstruct which seems to be both portable and exactly round-trippable.", "tree": {"sha": "187d5cbfd0eaa342180d89bae2860b004cca68db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/187d5cbfd0eaa342180d89bae2860b004cca68db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a18f0d413c1acea7c94e7e89740f47716f8efc51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a18f0d413c1acea7c94e7e89740f47716f8efc51", "html_url": "https://github.com/rust-lang/rust/commit/a18f0d413c1acea7c94e7e89740f47716f8efc51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a18f0d413c1acea7c94e7e89740f47716f8efc51/comments", "author": {"login": "jesse99", "id": 425055, "node_id": "MDQ6VXNlcjQyNTA1NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/425055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jesse99", "html_url": "https://github.com/jesse99", "followers_url": "https://api.github.com/users/jesse99/followers", "following_url": "https://api.github.com/users/jesse99/following{/other_user}", "gists_url": "https://api.github.com/users/jesse99/gists{/gist_id}", "starred_url": "https://api.github.com/users/jesse99/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jesse99/subscriptions", "organizations_url": "https://api.github.com/users/jesse99/orgs", "repos_url": "https://api.github.com/users/jesse99/repos", "events_url": "https://api.github.com/users/jesse99/events{/privacy}", "received_events_url": "https://api.github.com/users/jesse99/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc29c62d033c529ca8ec47fcd25842223a9bbad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc29c62d033c529ca8ec47fcd25842223a9bbad", "html_url": "https://github.com/rust-lang/rust/commit/7bc29c62d033c529ca8ec47fcd25842223a9bbad"}], "stats": {"total": 99, "additions": 82, "deletions": 17}, "files": [{"sha": "624a1068764e3e269e261450222ed182ddf1a134", "filename": "src/libstd/time.rs", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/a18f0d413c1acea7c94e7e89740f47716f8efc51/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18f0d413c1acea7c94e7e89740f47716f8efc51/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=a18f0d413c1acea7c94e7e89740f47716f8efc51", "patch": "@@ -4,6 +4,10 @@ use core::cmp::Eq;\n use libc::{c_char, c_int, c_long, size_t, time_t};\n use io::{Reader, ReaderUtil};\n use result::{Result, Ok, Err};\n+use serialization::{Serializable,\n+                         Deserializable,\n+                         Serializer,\n+                         Deserializer};\n \n #[abi = \"cdecl\"]\n extern mod rustrt {\n@@ -75,20 +79,60 @@ pub fn tzset() {\n     rustrt::rust_tzset();\n }\n \n-type Tm_ = {\n-    tm_sec: i32, // seconds after the minute ~[0-60]\n-    tm_min: i32, // minutes after the hour ~[0-59]\n-    tm_hour: i32, // hours after midnight ~[0-23]\n-    tm_mday: i32, // days of the month ~[1-31]\n-    tm_mon: i32, // months since January ~[0-11]\n-    tm_year: i32, // years since 1900\n-    tm_wday: i32, // days since Sunday ~[0-6]\n-    tm_yday: i32, // days since January 1 ~[0-365]\n-    tm_isdst: i32, // Daylight Savings Time flag\n-    tm_gmtoff: i32, // offset from UTC in seconds\n-    tm_zone: ~str, // timezone abbreviation\n-    tm_nsec: i32, // nanoseconds\n-};\n+pub struct Tm_ {\n+    pub tm_sec: i32, // seconds after the minute ~[0-60]\n+    pub tm_min: i32, // minutes after the hour ~[0-59]\n+    pub tm_hour: i32, // hours after midnight ~[0-23]\n+    pub tm_mday: i32, // days of the month ~[1-31]\n+    pub tm_mon: i32, // months since January ~[0-11]\n+    pub tm_year: i32, // years since 1900\n+    pub tm_wday: i32, // days since Sunday ~[0-6]\n+    pub tm_yday: i32, // days since January 1 ~[0-365]\n+    pub tm_isdst: i32, // Daylight Savings Time flag\n+    pub tm_gmtoff: i32, // offset from UTC in seconds\n+    pub tm_zone: ~str, // timezone abbreviation\n+    pub tm_nsec: i32, // nanoseconds\n+}\n+\n+impl<S: Serializer> Tm_: Serializable<S> {\n+    fn serialize(&self, s: &S) {\n+       s.emit_i32(self.tm_sec);\n+        s.emit_i32(self.tm_min);\n+        s.emit_i32(self.tm_hour);\n+        s.emit_i32(self.tm_mday);\n+        s.emit_i32(self.tm_mon);\n+        s.emit_i32(self.tm_year);\n+        s.emit_i32(self.tm_wday);\n+        s.emit_i32(self.tm_yday);\n+        s.emit_i32(self.tm_isdst);\n+        s.emit_i32(self.tm_gmtoff);\n+        s.emit_owned_str(self.tm_zone);\n+        s.emit_i32(self.tm_nsec);\n+    }\n+}\n+\n+pub fn deserialize_tm_<D: Deserializer>(d: &D) -> Tm_ {\n+   Tm_ {\n+        tm_sec: d.read_i32(),\n+        tm_min: d.read_i32(),\n+        tm_hour: d.read_i32(),\n+        tm_mday: d.read_i32(),\n+        tm_mon: d.read_i32(),\n+        tm_year: d.read_i32(),\n+        tm_wday: d.read_i32(),\n+        tm_yday: d.read_i32(),\n+        tm_isdst: d.read_i32(),\n+        tm_gmtoff: d.read_i32(),\n+        tm_zone: d.read_owned_str(),\n+        tm_nsec: d.read_i32(),\n+   }\n+}\n+\n+impl<D: Deserializer> Tm_: Deserializable<D> {\n+    static fn deserialize(d: &D) -> Tm_ {\n+       deserialize_tm_(d)\n+    }\n+}\n \n impl Tm_ : Eq {\n     #[cfg(stage0)]\n@@ -133,6 +177,23 @@ pub enum Tm {\n     Tm_(Tm_)\n }\n \n+impl<S: Serializer> Tm: Serializable<S> {\n+    fn serialize(&self, s: &S) {\n+        let t: Tm_ = **self;\n+        t.serialize(s);\n+    }\n+}\n+\n+pub fn deserialize_tm<D: Deserializer>(d: &D) -> Tm {\n+    Tm_(deserialize_tm_(d))\n+}\n+\n+impl<D: Deserializer> Tm: Deserializable<D> {\n+    static fn deserialize(d: &D) -> Tm {\n+       deserialize_tm(d)\n+    }\n+}\n+\n impl Tm : Eq {\n     #[cfg(stage0)]\n     pure fn eq(other: &Tm) -> bool { *self == *(*other) }\n@@ -147,7 +208,7 @@ impl Tm : Eq {\n }\n \n pub pure fn empty_tm() -> Tm {\n-    Tm_({\n+    Tm_(Tm_{\n         tm_sec: 0_i32,\n         tm_min: 0_i32,\n         tm_hour: 0_i32,\n@@ -652,7 +713,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n     }\n \n     do io::with_str_reader(str::from_slice(format)) |rdr| {\n-        let mut tm = {\n+        let mut tm = Tm_ {\n             tm_sec: 0_i32,\n             tm_min: 0_i32,\n             tm_hour: 0_i32,\n@@ -686,7 +747,7 @@ priv fn do_strptime(s: &str, format: &str) -> Result<Tm, ~str> {\n         }\n \n         if pos == len && rdr.eof() {\n-            Ok(Tm_({\n+            Ok(Tm_(Tm_ {\n                 tm_sec: tm.tm_sec,\n                 tm_min: tm.tm_min,\n                 tm_hour: tm.tm_hour,"}, {"sha": "950e22870e5386d6b7dc60932a341bf75c1135f2", "filename": "src/test/run-pass/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a18f0d413c1acea7c94e7e89740f47716f8efc51/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a18f0d413c1acea7c94e7e89740f47716f8efc51/src%2Ftest%2Frun-pass%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto_serialize.rs?ref=a18f0d413c1acea7c94e7e89740f47716f8efc51", "patch": "@@ -10,6 +10,7 @@ use EBWriter = std::ebml::Writer;\n use io::Writer;\n use std::serialization::{Serializable, Deserializable, deserialize};\n use std::prettyprint;\n+use std::time;\n \n fn test_prettyprint<A: Serializable<prettyprint::Serializer>>(\n     a: &A,\n@@ -184,4 +185,7 @@ fn main() {\n     let a = &B;\n     test_prettyprint(a, &~\"B\");\n     test_ebml(a);\n+\n+    let a = &time::now();\n+    test_ebml(a);\n }"}]}