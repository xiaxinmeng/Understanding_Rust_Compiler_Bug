{"sha": "2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYjJhZjRmMWQxMmJkNjVlMGI1OGFkZjcwMWY3NTk4YzUxY2E4MzE=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-14T21:46:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-14T21:46:54Z"}, "message": "Rollup merge of #75509 - estebank:coming-merrily-from-java-land, r=lcnr\n\nTweak suggestion for `this` -> `self`\n\n* When referring to `this` in associated `fn`s always suggest `self`.\n* Point at ident for `fn` lacking `self`\n* Suggest adding `self` to assoc `fn`s when appropriate\n\n_Improvements based on the narrative in https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust_", "tree": {"sha": "1ca7440f4b6a0c0a29750849040f1964189dd1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca7440f4b6a0c0a29750849040f1964189dd1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNwZOCRBK7hj4Ov3rIwAAdHIIAITKIRXSW/zpf9VQUkPk1Cru\nrMPuIFhBEeT1xcnjXZ54fupUZ04KDL3medi3iRETbYbqXGZfH0hTJDhLVsbfQLoT\ndp4vl/ppETnGP00c57GQGRs3b3N/GG4ZsCjj136r4eSMpNmhBapWa1mP9bh9TBfP\npvKd3/5OU30yIaEUmn4ErsrXFXtoZiO42w6OhrBF7aksGzePIaa4Gew0+5ikMr2i\nLcw6x45xwbmn0p9HLmDE3pMPsjc3LAw02VEFgy4Mcwu4WWpspZDzrWzoOW5sVYkO\n7cFDhrM2GPwhy8hYQX5btwgnlmfT0W3Y83hdnvHZhy16MbkmQX+8k5XIDDhy5w4=\n=SsL8\n-----END PGP SIGNATURE-----\n", "payload": "tree 1ca7440f4b6a0c0a29750849040f1964189dd1a2\nparent ad1bfd2f3ef01193937ded389439d3a9452c0323\nparent 4ecdec1fb665363ee46af24a9a6edf73a9b602ec\nauthor Tyler Mandry <tmandry@gmail.com> 1597441614 -0700\ncommitter GitHub <noreply@github.com> 1597441614 -0700\n\nRollup merge of #75509 - estebank:coming-merrily-from-java-land, r=lcnr\n\nTweak suggestion for `this` -> `self`\n\n* When referring to `this` in associated `fn`s always suggest `self`.\n* Point at ident for `fn` lacking `self`\n* Suggest adding `self` to assoc `fn`s when appropriate\n\n_Improvements based on the narrative in https://fasterthanli.me/articles/i-am-a-java-csharp-c-or-cplusplus-dev-time-to-do-some-rust_\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "html_url": "https://github.com/rust-lang/rust/commit/2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad1bfd2f3ef01193937ded389439d3a9452c0323", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad1bfd2f3ef01193937ded389439d3a9452c0323", "html_url": "https://github.com/rust-lang/rust/commit/ad1bfd2f3ef01193937ded389439d3a9452c0323"}, {"sha": "4ecdec1fb665363ee46af24a9a6edf73a9b602ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ecdec1fb665363ee46af24a9a6edf73a9b602ec", "html_url": "https://github.com/rust-lang/rust/commit/4ecdec1fb665363ee46af24a9a6edf73a9b602ec"}], "stats": {"total": 183, "additions": 148, "deletions": 35}, "files": [{"sha": "b65a88cb90e88501721432cced016e00185e3cef", "filename": "src/librustc_ast/visit.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Flibrustc_ast%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Flibrustc_ast%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fvisit.rs?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -50,6 +50,13 @@ impl<'a> FnKind<'a> {\n         }\n     }\n \n+    pub fn ident(&self) -> Option<&Ident> {\n+        match self {\n+            FnKind::Fn(_, ident, ..) => Some(ident),\n+            _ => None,\n+        }\n+    }\n+\n     pub fn decl(&self) -> &'a FnDecl {\n         match self {\n             FnKind::Fn(_, _, sig, _, _) => &sig.decl,"}, {"sha": "b3746ac2db2bdd36b863d322bed176933e9b7633", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -7,6 +7,7 @@ use crate::{PathResult, PathSource, Segment};\n \n use rustc_ast::ast::{self, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -175,16 +176,40 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n         let code = source.error_code(res.is_some());\n         let mut err = self.r.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n+        let is_assoc_fn = self.self_type_is_available(span);\n         // Emit help message for fake-self from other languages (e.g., `this` in Javascript).\n-        if [\"this\", \"my\"].contains(&&*item_str.as_str())\n-            && self.self_value_is_available(path[0].ident.span, span)\n-        {\n+        if [\"this\", \"my\"].contains(&&*item_str.as_str()) && is_assoc_fn {\n             err.span_suggestion_short(\n                 span,\n                 \"you might have meant to use `self` here instead\",\n                 \"self\".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n+            if !self.self_value_is_available(path[0].ident.span, span) {\n+                if let Some((FnKind::Fn(_, _, sig, ..), fn_span)) =\n+                    &self.diagnostic_metadata.current_function\n+                {\n+                    let (span, sugg) = if let Some(param) = sig.decl.inputs.get(0) {\n+                        (param.span.shrink_to_lo(), \"&self, \")\n+                    } else {\n+                        (\n+                            self.r\n+                                .session\n+                                .source_map()\n+                                .span_through_char(*fn_span, '(')\n+                                .shrink_to_hi(),\n+                            \"&self\",\n+                        )\n+                    };\n+                    err.span_suggestion_verbose(\n+                        span,\n+                        \"if you meant to use `self`, you are also missing a `self` receiver \\\n+                         argument\",\n+                        sugg.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n         }\n \n         // Emit special messages for unresolved `Self` and `self`.\n@@ -213,7 +238,38 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 if fn_kind.decl().inputs.get(0).map(|p| p.is_self()).unwrap_or(false) {\n                     err.span_label(*span, \"this function has a `self` parameter, but a macro invocation can only access identifiers it receives from parameters\");\n                 } else {\n-                    err.span_label(*span, \"this function doesn't have a `self` parameter\");\n+                    let doesnt = if is_assoc_fn {\n+                        let (span, sugg) = fn_kind\n+                            .decl()\n+                            .inputs\n+                            .get(0)\n+                            .map(|p| (p.span.shrink_to_lo(), \"&self, \"))\n+                            .unwrap_or_else(|| {\n+                                (\n+                                    self.r\n+                                        .session\n+                                        .source_map()\n+                                        .span_through_char(*span, '(')\n+                                        .shrink_to_hi(),\n+                                    \"&self\",\n+                                )\n+                            });\n+                        err.span_suggestion_verbose(\n+                            span,\n+                            \"add a `self` receiver parameter to make the associated `fn` a method\",\n+                            sugg.to_string(),\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                        \"doesn't\"\n+                    } else {\n+                        \"can't\"\n+                    };\n+                    if let Some(ident) = fn_kind.ident() {\n+                        err.span_label(\n+                            ident.span,\n+                            &format!(\"this function {} have a `self` parameter\", doesnt),\n+                        );\n+                    }\n                 }\n             }\n             return (err, Vec::new());"}, {"sha": "fa0c86ecf489423b8e1b67d765fb1ff8e2e87a99", "filename": "src/test/ui/error-codes/E0424.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.rs?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -6,6 +6,10 @@ impl Foo {\n     fn foo() {\n         self.bar(); //~ ERROR E0424\n     }\n+\n+    fn baz(_: i32) {\n+        self.bar(); //~ ERROR E0424\n+    }\n }\n \n fn main () {"}, {"sha": "9b8a29e8272492e64d8f513ec95b46b85d0d6d9b", "filename": "src/test/ui/error-codes/E0424.stderr", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0424.stderr?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -1,21 +1,37 @@\n error[E0424]: expected value, found module `self`\n   --> $DIR/E0424.rs:7:9\n    |\n-LL | /     fn foo() {\n-LL | |         self.bar();\n-   | |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n-LL | |     }\n-   | |_____- this function doesn't have a `self` parameter\n+LL |     fn foo() {\n+   |        --- this function doesn't have a `self` parameter\n+LL |         self.bar();\n+   |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+   |\n+help: add a `self` receiver parameter to make the associated `fn` a method\n+   |\n+LL |     fn foo(&self) {\n+   |            ^^^^^\n+\n+error[E0424]: expected value, found module `self`\n+  --> $DIR/E0424.rs:11:9\n+   |\n+LL |     fn baz(_: i32) {\n+   |        --- this function doesn't have a `self` parameter\n+LL |         self.bar();\n+   |         ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+   |\n+help: add a `self` receiver parameter to make the associated `fn` a method\n+   |\n+LL |     fn baz(&self, _: i32) {\n+   |            ^^^^^^\n \n error[E0424]: expected unit struct, unit variant or constant, found module `self`\n-  --> $DIR/E0424.rs:12:9\n+  --> $DIR/E0424.rs:16:9\n    |\n-LL | / fn main () {\n-LL | |     let self = \"self\";\n-   | |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n-LL | | }\n-   | |_- this function doesn't have a `self` parameter\n+LL | fn main () {\n+   |    ---- this function can't have a `self` parameter\n+LL |     let self = \"self\";\n+   |         ^^^^ `self` value is a keyword and may not be bound to variables or shadowed\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0424`."}, {"sha": "ee134835c37ed14eae101b077ee613c0dc68ee13", "filename": "src/test/ui/issues/issue-5099.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5099.rs?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -1,3 +1,10 @@\n-trait B < A > { fn a() -> A { this.a } } //~ ERROR cannot find value `this` in this scope\n+trait B <A> {\n+    fn a() -> A {\n+        this.a //~ ERROR cannot find value `this` in this scope\n+    }\n+    fn b(x: i32) {\n+        this.b(x); //~ ERROR cannot find value `this` in this scope\n+    }\n+}\n \n fn main() {}"}, {"sha": "b52fd28b2b575a9490700fbce875b36175f6f9ef", "filename": "src/test/ui/issues/issue-5099.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5099.stderr?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -1,9 +1,33 @@\n error[E0425]: cannot find value `this` in this scope\n-  --> $DIR/issue-5099.rs:1:31\n+  --> $DIR/issue-5099.rs:3:9\n    |\n-LL | trait B < A > { fn a() -> A { this.a } }\n-   |                               ^^^^ not found in this scope\n+LL |         this.a\n+   |         ^^^^ not found in this scope\n+   |\n+help: you might have meant to use `self` here instead\n+   |\n+LL |         self.a\n+   |         ^^^^\n+help: if you meant to use `self`, you are also missing a `self` receiver argument\n+   |\n+LL |     fn a(&self) -> A {\n+   |          ^^^^^\n+\n+error[E0425]: cannot find value `this` in this scope\n+  --> $DIR/issue-5099.rs:6:9\n+   |\n+LL |         this.b(x);\n+   |         ^^^^ not found in this scope\n+   |\n+help: you might have meant to use `self` here instead\n+   |\n+LL |         self.b(x);\n+   |         ^^^^\n+help: if you meant to use `self`, you are also missing a `self` receiver argument\n+   |\n+LL |     fn b(&self, x: i32) {\n+   |          ^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}, {"sha": "0339daa0d6a18c0018937304bf45bf51dd9629be", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2fb2af4f1d12bd65e0b58adf701f7598c51ca831/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=2fb2af4f1d12bd65e0b58adf701f7598c51ca831", "patch": "@@ -70,14 +70,15 @@ LL |         purr();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:65:8\n    |\n-LL | /   fn meow() {\n-LL | |     if self.whiskers > 3 {\n-   | |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n-LL | |\n-LL | |         println!(\"MEOW\");\n-LL | |     }\n-LL | |   }\n-   | |___- this function doesn't have a `self` parameter\n+LL |   fn meow() {\n+   |      ---- this function doesn't have a `self` parameter\n+LL |     if self.whiskers > 3 {\n+   |        ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n+   |\n+help: add a `self` receiver parameter to make the associated `fn` a method\n+   |\n+LL |   fn meow(&self) {\n+   |           ^^^^^\n \n error[E0425]: cannot find function `grow_older` in this scope\n   --> $DIR/issue-2356.rs:72:5\n@@ -112,12 +113,10 @@ LL |     purr_louder();\n error[E0424]: expected value, found module `self`\n   --> $DIR/issue-2356.rs:92:5\n    |\n-LL | / fn main() {\n-LL | |     self += 1;\n-   | |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n-LL | |\n-LL | | }\n-   | |_- this function doesn't have a `self` parameter\n+LL | fn main() {\n+   |    ---- this function can't have a `self` parameter\n+LL |     self += 1;\n+   |     ^^^^ `self` value is a keyword only available in methods with a `self` parameter\n \n error: aborting due to 17 previous errors\n "}]}