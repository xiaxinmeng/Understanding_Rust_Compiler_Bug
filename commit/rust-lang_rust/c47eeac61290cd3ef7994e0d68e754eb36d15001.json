{"sha": "c47eeac61290cd3ef7994e0d68e754eb36d15001", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0N2VlYWM2MTI5MGNkM2VmNzk5NGUwZDY4ZTc1NGViMzZkMTUwMDE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-29T08:13:50Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T16:00:20Z"}, "message": "Move wasm_import_module_map provider to cg_ssa", "tree": {"sha": "33ca743d8db6246707692a5f383550d09f4bc0ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33ca743d8db6246707692a5f383550d09f4bc0ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c47eeac61290cd3ef7994e0d68e754eb36d15001", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c47eeac61290cd3ef7994e0d68e754eb36d15001", "html_url": "https://github.com/rust-lang/rust/commit/c47eeac61290cd3ef7994e0d68e754eb36d15001", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c47eeac61290cd3ef7994e0d68e754eb36d15001/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "808090eb073d8b2d56479045b6ef0fe67872a077", "url": "https://api.github.com/repos/rust-lang/rust/commits/808090eb073d8b2d56479045b6ef0fe67872a077", "html_url": "https://github.com/rust-lang/rust/commit/808090eb073d8b2d56479045b6ef0fe67872a077"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "aed61e37646970ca9c08616a9e2e5405c16e3805", "filename": "compiler/rustc_codegen_llvm/src/attributes.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fattributes.rs?ref=c47eeac61290cd3ef7994e0d68e754eb36d15001", "patch": "@@ -4,12 +4,10 @@ use std::ffi::CString;\n \n use cstr::cstr;\n use rustc_codegen_ssa::traits::*;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::small_c_str::SmallCStr;\n use rustc_hir::def_id::DefId;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::ty::layout::HasTyCtxt;\n-use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::config::{OptLevel, SanitizerSet};\n use rustc_session::Session;\n@@ -339,35 +337,6 @@ pub fn from_fn_attrs(cx: &CodegenCx<'ll, 'tcx>, llfn: &'ll Value, instance: ty::\n     }\n }\n \n-pub fn provide_both(providers: &mut Providers) {\n-    providers.wasm_import_module_map = |tcx, cnum| {\n-        // Build up a map from DefId to a `NativeLib` structure, where\n-        // `NativeLib` internally contains information about\n-        // `#[link(wasm_import_module = \"...\")]` for example.\n-        let native_libs = tcx.native_libraries(cnum);\n-\n-        let def_id_to_native_lib = native_libs\n-            .iter()\n-            .filter_map(|lib| lib.foreign_module.map(|id| (id, lib)))\n-            .collect::<FxHashMap<_, _>>();\n-\n-        let mut ret = FxHashMap::default();\n-        for (def_id, lib) in tcx.foreign_modules(cnum).iter() {\n-            let module = def_id_to_native_lib.get(&def_id).and_then(|s| s.wasm_import_module);\n-            let module = match module {\n-                Some(s) => s,\n-                None => continue,\n-            };\n-            ret.extend(lib.foreign_items.iter().map(|id| {\n-                assert_eq!(id.krate, cnum);\n-                (*id, module.to_string())\n-            }));\n-        }\n-\n-        ret\n-    };\n-}\n-\n fn wasm_import_module(tcx: TyCtxt<'_>, id: DefId) -> Option<CString> {\n     tcx.wasm_import_module_map(id.krate).get(&id).map(|s| CString::new(&s[..]).unwrap())\n }"}, {"sha": "6ce11a9dfcf45ad1e3d2959faa23fb591f4b87c4", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=c47eeac61290cd3ef7994e0d68e754eb36d15001", "patch": "@@ -253,13 +253,8 @@ impl CodegenBackend for LlvmCodegenBackend {\n         Box::new(metadata::LlvmMetadataLoader)\n     }\n \n-    fn provide(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide_both(providers);\n-    }\n-\n-    fn provide_extern(&self, providers: &mut ty::query::Providers) {\n-        attributes::provide_both(providers);\n-    }\n+    fn provide(&self, _providers: &mut ty::query::Providers) {}\n+    fn provide_extern(&self, _providers: &mut ty::query::Providers) {}\n \n     fn codegen_crate<'tcx>(\n         &self,"}, {"sha": "3d7a2d2b1dd8d63a8750dd159a3696acf32988ec", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c47eeac61290cd3ef7994e0d68e754eb36d15001/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=c47eeac61290cd3ef7994e0d68e754eb36d15001", "patch": "@@ -369,11 +369,13 @@ pub fn provide(providers: &mut Providers) {\n     providers.upstream_monomorphizations = upstream_monomorphizations_provider;\n     providers.is_unreachable_local_definition = is_unreachable_local_definition_provider;\n     providers.upstream_drop_glue_for = upstream_drop_glue_for_provider;\n+    providers.wasm_import_module_map = wasm_import_module_map;\n }\n \n pub fn provide_extern(providers: &mut Providers) {\n     providers.is_reachable_non_generic = is_reachable_non_generic_provider_extern;\n     providers.upstream_monomorphizations_for = upstream_monomorphizations_for_provider;\n+    providers.wasm_import_module_map = wasm_import_module_map;\n }\n \n fn symbol_export_level(tcx: TyCtxt<'_>, sym_def_id: DefId) -> SymbolExportLevel {\n@@ -441,3 +443,30 @@ pub fn symbol_name_for_instance_in_crate<'tcx>(\n         ExportedSymbol::NoDefId(symbol_name) => symbol_name.to_string(),\n     }\n }\n+\n+fn wasm_import_module_map(tcx: TyCtxt<'_>, cnum: CrateNum) -> FxHashMap<DefId, String> {\n+    // Build up a map from DefId to a `NativeLib` structure, where\n+    // `NativeLib` internally contains information about\n+    // `#[link(wasm_import_module = \"...\")]` for example.\n+    let native_libs = tcx.native_libraries(cnum);\n+\n+    let def_id_to_native_lib = native_libs\n+        .iter()\n+        .filter_map(|lib| lib.foreign_module.map(|id| (id, lib)))\n+        .collect::<FxHashMap<_, _>>();\n+\n+    let mut ret = FxHashMap::default();\n+    for (def_id, lib) in tcx.foreign_modules(cnum).iter() {\n+        let module = def_id_to_native_lib.get(&def_id).and_then(|s| s.wasm_import_module);\n+        let module = match module {\n+            Some(s) => s,\n+            None => continue,\n+        };\n+        ret.extend(lib.foreign_items.iter().map(|id| {\n+            assert_eq!(id.krate, cnum);\n+            (*id, module.to_string())\n+        }));\n+    }\n+\n+    ret\n+}"}]}