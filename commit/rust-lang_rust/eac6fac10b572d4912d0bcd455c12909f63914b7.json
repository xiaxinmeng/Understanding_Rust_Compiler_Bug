{"sha": "eac6fac10b572d4912d0bcd455c12909f63914b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYzZmYWMxMGI1NzJkNDkxMmQwYmNkNDU1YzEyOTA5ZjYzOTE0Yjc=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2019-12-11T22:11:32Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2019-12-12T19:56:14Z"}, "message": "Update tests", "tree": {"sha": "5a3620cace948a87da14c57a3631a09b7dd77e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a3620cace948a87da14c57a3631a09b7dd77e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eac6fac10b572d4912d0bcd455c12909f63914b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eac6fac10b572d4912d0bcd455c12909f63914b7", "html_url": "https://github.com/rust-lang/rust/commit/eac6fac10b572d4912d0bcd455c12909f63914b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eac6fac10b572d4912d0bcd455c12909f63914b7/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27810e246c89777f39441d6cc050e540cb2e54e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/27810e246c89777f39441d6cc050e540cb2e54e0", "html_url": "https://github.com/rust-lang/rust/commit/27810e246c89777f39441d6cc050e540cb2e54e0"}], "stats": {"total": 88, "additions": 44, "deletions": 44}, "files": [{"sha": "4bef1012e33deb8895c125f6ccb0a7d840fc56da", "filename": "src/test/ui/autoderef-full-lval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fautoderef-full-lval.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -13,13 +13,13 @@ fn main() {\n     let a: Clam = Clam{x: box 1, y: box 2};\n     let b: Clam = Clam{x: box 10, y: box 20};\n     let z: isize = a.x + b.y;\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n     println!(\"{}\", z);\n     assert_eq!(z, 21);\n     let forty: Fish = Fish{a: box 40};\n     let two: Fish = Fish{a: box 2};\n     let answer: isize = forty.a + two.a;\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `std::boxed::Box<isize>` to `std::boxed::Box<isize>`\n     println!(\"{}\", answer);\n     assert_eq!(answer, 42);\n }"}, {"sha": "67e01b9327db1ec904673ca293afe7cfffb6daa3", "filename": "src/test/ui/binary-op-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinary-op-on-double-ref.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9];\n     let vr = v.iter().filter(|x| {\n         x % 2 == 0\n-        //~^ ERROR binary operation `%` cannot be applied to type `&&{integer}`\n+        //~^ ERROR cannot mod `&&{integer}` by `{integer}`\n     });\n     println!(\"{:?}\", vr);\n }"}, {"sha": "e98ea4df97defc71fe5dee49a36e714823fd30bf", "filename": "src/test/ui/binop/binop-bitxor-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-bitxor-str.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:`^` cannot be applied to type `std::string::String`\n+// error-pattern:no implementation for `std::string::String ^ std::string::String`\n \n fn main() { let x = \"a\".to_string() ^ \"b\".to_string(); }"}, {"sha": "27b2f8bb3ff3009ba6c55c705b7cc8ccb58f8a45", "filename": "src/test/ui/binop/binop-mul-bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-mul-bool.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:`*` cannot be applied to type `bool`\n+// error-pattern:cannot multiply `bool` to `bool`\n \n fn main() { let x = true * false; }"}, {"sha": "812fe95db4e57dcf045135cb6e144ca38058277c", "filename": "src/test/ui/binop/binop-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-typeck.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x = true;\n     let y = 1;\n     let z = x + y;\n-    //~^ ERROR binary operation `+` cannot be applied to type `bool`\n+    //~^ ERROR cannot add `{integer}` to `bool`\n }"}, {"sha": "8d9fc20f0d0d6ef0dd5189e4fd45d8895c49b2f3", "filename": "src/test/ui/for/for-loop-type-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-type-error.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,5 +1,5 @@\n pub fn main() {\n-    let x = () + (); //~ ERROR binary operation\n+    let x = () + (); //~ ERROR cannot add `()` to `()`\n \n     // this shouldn't have a flow-on error:\n     for _ in x {}"}, {"sha": "4acb51a4e50fa6ff08281ea6faedf4da716b7445", "filename": "src/test/ui/issues/issue-14915.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-14915.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let x: Box<isize> = box 0;\n \n     println!(\"{}\", x + 1);\n-    //~^ ERROR binary operation `+` cannot be applied to type `std::boxed::Box<isize>`\n+    //~^ ERROR cannot add `{integer}` to `std::boxed::Box<isize>`\n }"}, {"sha": "34726fba9c66a58323410c5b3be2db6ea8a9a3b4", "filename": "src/test/ui/issues/issue-24363.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24363.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     1.create_a_type_error[ //~ `{integer}` is a primitive type and therefore doesn't have fields\n-        ()+() //~ ERROR binary operation `+` cannot be applied\n+        ()+() //~ ERROR cannot add\n               //   ^ ensure that we typeck the inner expression ^\n     ];\n }"}, {"sha": "438a4c521b198f8dcfeaa185f07f826eb77fc8f9", "filename": "src/test/ui/issues/issue-28837.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28837.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -3,23 +3,23 @@ struct A;\n fn main() {\n     let a = A;\n \n-    a + a; //~ ERROR binary operation `+` cannot be applied to type `A`\n+    a + a; //~ ERROR cannot add `A` to `A`\n \n-    a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+    a - a; //~ ERROR cannot substract `A` from `A`\n \n-    a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+    a * a; //~ ERROR cannot multiply `A` to `A`\n \n-    a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+    a / a; //~ ERROR cannot divide `A` by `A`\n \n-    a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+    a % a; //~ ERROR cannot mod `A` by `A`\n \n-    a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+    a & a; //~ ERROR no implementation for `A & A`\n \n-    a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+    a | a; //~ ERROR no implementation for `A | A`\n \n-    a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+    a << a; //~ ERROR no implementation for `A << A`\n \n-    a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+    a >> a; //~ ERROR no implementation for `A >> A`\n \n     a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n "}, {"sha": "f9c35526ec3423ac371430bcaeb943ff0b896bf5", "filename": "src/test/ui/issues/issue-31076.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-31076.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -11,7 +11,7 @@ impl Add<i32> for i32 {}\n \n fn main() {\n     let x = 5 + 6;\n-    //~^ ERROR binary operation `+` cannot be applied to type `{integer}`\n+    //~^ ERROR cannot add `{integer}` to `{integer}`\n     let y = 5i32 + 6i32;\n-    //~^ ERROR binary operation `+` cannot be applied to type `i32`\n+    //~^ ERROR cannot add `i32` to `i32`\n }"}, {"sha": "6f6dfb00f86b71f89fd45361279c5a611b35203e", "filename": "src/test/ui/issues/issue-35668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35668.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,6 +1,6 @@\n fn func<'a, T>(a: &'a [T]) -> impl Iterator<Item=&'a T> {\n     a.iter().map(|a| a*a)\n-    //~^ ERROR binary operation `*` cannot be applied to type `&T`\n+    //~^ ERROR cannot multiply `&T` to `&T`\n }\n \n fn main() {"}, {"sha": "c090654623206b85b75f097bc6e269fe88457b05", "filename": "src/test/ui/issues/issue-3820.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3820.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -11,5 +11,5 @@ impl Thing {\n fn main() {\n     let u = Thing {x: 2};\n     let _v = u.mul(&3); // This is ok\n-    let w = u * 3; //~ ERROR binary operation `*` cannot be applied to type `Thing`\n+    let w = u * 3; //~ ERROR cannot multiply `{integer}` to `Thing`\n }"}, {"sha": "c01233605b57cbbfffada4bccdcf327012b87af9", "filename": "src/test/ui/issues/issue-40610.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40610.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -2,5 +2,5 @@ fn f(_: &[f32]) {}\n \n fn main() {\n     () + f(&[1.0]);\n-    //~^ ERROR binary operation `+` cannot be applied to type `()`\n+    //~^ ERROR cannot add `()` to `()`\n }"}, {"sha": "64873ac35a00213e78fc7479e75ba180f5029a34", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,6 +1,6 @@\n enum Foo {\n     A = \"\" + 1\n-    //~^ ERROR binary operation `+` cannot be applied to type `&str`\n+    //~^ ERROR cannot add `{integer}` to `&str`\n }\n \n enum Bar {"}, {"sha": "ce6836f30f9461e4ed3e8d12e5b0b0bf107011b0", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -21,7 +21,7 @@ use E::*;\n \n fn no_top_level_or_patterns() {\n     // We do *not* allow or-patterns at the top level of lambdas...\n-    let _ = |A | B: E| (); //~ ERROR binary operation `|` cannot be applied to type `E`\n+    let _ = |A | B: E| (); //~ ERROR no implementation for `E | ()`\n     //           -------- This looks like an or-pattern but is in fact `|A| (B: E | ())`.\n \n     // ...and for now neither do we allow or-patterns at the top level of functions."}, {"sha": "4c6d515b86af348166d1aed9bf4538cf3c6bcb61", "filename": "src/test/ui/pattern/pattern-tyvar-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpattern-tyvar-2.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,6 +1,6 @@\n enum Bar { T1((), Option<Vec<isize>>), T2, }\n \n fn foo(t: Bar) -> isize { match t { Bar::T1(_, Some(x)) => { return x * 3; } _ => { panic!(); } } }\n-//~^ ERROR binary operation `*` cannot be applied to\n+//~^ ERROR cannot multiply `{integer}` to `std::vec::Vec<isize>`\n \n fn main() { }"}, {"sha": "b6db4008db0d76e634b3e5b2fe4e727a1c3b0920", "filename": "src/test/ui/span/issue-39018.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-39018.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -1,15 +1,15 @@\n pub fn main() {\n     let x = \"Hello \" + \"World!\";\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n \n     // Make sure that the span outputs a warning\n     // for not having an implementation for std::ops::Add\n     // that won't output for the above string concatenation\n     let y = World::Hello + World::Goodbye;\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n \n     let x = \"Hello \" + \"World!\".to_owned();\n-    //~^ ERROR cannot be applied to type\n+    //~^ ERROR cannot add\n }\n \n enum World {\n@@ -23,16 +23,16 @@ fn foo() {\n     let c = \"\";\n     let d = \"\";\n     let e = &a;\n-    let _ = &a + &b; //~ ERROR binary operation\n-    let _ = &a + b; //~ ERROR binary operation\n+    let _ = &a + &b; //~ ERROR cannot add\n+    let _ = &a + b; //~ ERROR cannot add\n     let _ = a + &b; // ok\n     let _ = a + b; //~ ERROR mismatched types\n-    let _ = e + b; //~ ERROR binary operation\n-    let _ = e + &b; //~ ERROR binary operation\n-    let _ = e + d; //~ ERROR binary operation\n-    let _ = e + &d; //~ ERROR binary operation\n-    let _ = &c + &d; //~ ERROR binary operation\n-    let _ = &c + d; //~ ERROR binary operation\n-    let _ = c + &d; //~ ERROR binary operation\n-    let _ = c + d; //~ ERROR binary operation\n+    let _ = e + b; //~ ERROR cannot add\n+    let _ = e + &b; //~ ERROR cannot add\n+    let _ = e + d; //~ ERROR cannot add\n+    let _ = e + &d; //~ ERROR cannot add\n+    let _ = &c + &d; //~ ERROR cannot add\n+    let _ = &c + d; //~ ERROR cannot add\n+    let _ = c + &d; //~ ERROR cannot add\n+    let _ = c + d; //~ ERROR cannot add\n }"}, {"sha": "23e5f8920622e7247625230d74d10f4fb3e5f16f", "filename": "src/test/ui/str/str-concat-on-double-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstr%2Fstr-concat-on-double-ref.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -2,6 +2,6 @@ fn main() {\n     let a: &String = &\"1\".to_owned();\n     let b: &str = &\"2\";\n     let c = a + b;\n-    //~^ ERROR binary operation `+` cannot be applied to type `&std::string::String`\n+    //~^ ERROR cannot add `&str` to `&std::string::String`\n     println!(\"{:?}\", c);\n }"}, {"sha": "1989ea8863592038e57e42fb4a0015ac448cccfb", "filename": "src/test/ui/terminal-width/non-1-width-unicode-multiline-label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fterminal-width%2Fnon-1-width-unicode-multiline-label.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -3,5 +3,5 @@\n fn main() {\n     let unicode_is_fun = \"\u0601\u2031\u0bb9\u0bf8\u0bf5\ua9c4.\u102a\ua9c5\u2e3b\ud808\ude19\ud809\udc2b\ufdfd\ud808\udf04\ud808\ude1f\ud808\udf7c\ud808\udc4e\ud808\udc31\ud808\udf27\ud808\udd43 \ud808\ude13\ud808\udf59\ud808\ude8e\ud808\udd21\ud808\udd4c\ud808\udc4f\ud808\udc30\ud809\udc2a\ud809\udc29\ud808\ude19\ud809\udc2b\ud869\udea5\";\n     let _ = \"\u0f00\u0f01\u0f02\u0f03\u0f04\u0f05\u0f06\u0f07\u0f08\u0f09\u0f0a\u0f0b\u0f0c\u0f0d\u0f0e\u0f0f\u0f10\u0f11\u0f12\u0f13\u0f14\u0f15\u0f16\u0f17\u0f18\u0f19\u0f1a\u0f1b\u0f1c\u0f1d\u0f1e\u0f1f\u0f20\u0f21\u0f22\u0f23\u0f24\u0f25\u0f26\u0f27\u0f28\u0f29\u0f2a\u0f2b\u0f2c\u0f2d\u0f2e\u0f2f\u0f30\u0f31\u0f32\u0f33\u0f34\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3b\u0f3c\u0f3d\u0f3e\u0f3f\u0f40\u0f41\u0f42\u0f43\u0f44\u0f45\u0f46\u0f47\u0f48\u0f49\u0f4a\u0f4b\u0f4c\u0f4d\u0f4e\u0f4f\u0f50\u0f51\u0f52\u0f53\u0f54\u0f55\u0f56\u0f57\u0f58\u0f59\u0f5a\u0f5b\u0f5c\u0f5d\u0f5e\u0f5f\u0f60\u0f61\u0f62\u0f63\u0f64\u0f65\u0f66\u0f67\u0f68\u0f69\u0f6a\u0f6b\u0f6c\u0f6d\u0f6e\u0f6f\u0f70\u0f71\u0f72\u0f73\u0f74\u0f75\u0f76\u0f77\u0f78\u0f79\u0f7a\u0f7b\u0f7c\u0f7d\u0f7e\u0f7f\u0f80\u0f81\u0f82\u0f83\u0f84\u0f85\u0f86\u0f87\u0f88\u0f89\u0f8a\u0f8b\u0f8c\u0f8d\u0f8e\u0f8f\u0f90\u0f91\u0f92\u0f93\u0f94\u0f95\u0f96\u0f97\u0f98\u0f99\u0f9a\u0f9b\u0f9c\u0f9d\u0f9e\u0f9f\u0fa0\u0fa1\u0fa2\u0fa3\u0fa4\u0fa5\u0fa6\u0fa7\u0fa8\u0fa9\u0faa\u0fab\u0fac\u0fad\u0fae\u0faf\u0fb0\u0fb1\u0fb2\u0fb3\u0fb4\u0fb5\u0fb6\u0fb7\u0fb8\u0fb9\u0fba\u0fbb\u0fbc\u0fbd\u0fbe\u0fbf\u0fc0\u0fc1\u0fc2\u0fc3\u0fc4\u0fc5\u0fc6\u0fc7\u0fc8\u0fc9\u0fca\u0fcb\u0fcc\u0fcd\u0fce\u0fcf\u0fd0\u0fd1\u0fd2\u0fd3\u0fd4\u0fd5\u0fd6\u0fd7\u0fd8\u0fd9\u0fda\"; let _a = unicode_is_fun + \" really fun!\";\n-    //~^ ERROR binary operation `+` cannot be applied to type `&str`\n+    //~^ ERROR cannot add `&str` to `&str`\n }"}, {"sha": "286776985168f78ef5e2f11e0a158efc20b2646c", "filename": "src/test/ui/traits/trait-resolution-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-resolution-in-overloaded-op.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -5,7 +5,7 @@ trait MyMul<Rhs, Res> {\n }\n \n fn foo<T: MyMul<f64, f64>>(a: &T, b: f64) -> f64 {\n-    a * b //~ ERROR binary operation `*` cannot be applied to type `&T`\n+    a * b //~ ERROR cannot multiply `f64` to `&T`\n }\n \n fn main() {}"}, {"sha": "f61ada3f63ff9a1a9e7afafd4e80526099b9207c", "filename": "src/test/ui/type/type-check/missing_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fmissing_trait_impl.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -2,7 +2,7 @@ fn main() {\n }\n \n fn foo<T>(x: T, y: T) {\n-    let z = x + y; //~ ERROR binary operation `+` cannot be applied to type `T`\n+    let z = x + y; //~ ERROR cannot add `T` to `T`\n }\n \n fn bar<T>(x: T) {"}, {"sha": "4785178fb2575e825093fe77cd6644d174d1bca4", "filename": "src/test/ui/vec/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eac6fac10b572d4912d0bcd455c12909f63914b7/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvec%2Fvec-res-add.rs?ref=eac6fac10b572d4912d0bcd455c12909f63914b7", "patch": "@@ -14,6 +14,6 @@ fn main() {\n     let i = vec![r(0)];\n     let j = vec![r(1)];\n     let k = i + j;\n-    //~^ ERROR binary operation `+` cannot be applied to type\n+    //~^ ERROR cannot add `std::vec::Vec<R>` to `std::vec::Vec<R>`\n     println!(\"{:?}\", j);\n }"}]}