{"sha": "e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwYjlmM2IzY2MzY2RmM2VkY2YwODY4ZTZjODhlNjUyNDU1MDU1ZmQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-28T16:54:21Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-28T16:54:21Z"}, "message": "Support storing return values in register places for all pass modes", "tree": {"sha": "c74d763198985712954cc23fc8e65fadccdc64e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74d763198985712954cc23fc8e65fadccdc64e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "html_url": "https://github.com/rust-lang/rust/commit/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7881bb08d129a119c69ca79999cae54cef3efb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7881bb08d129a119c69ca79999cae54cef3efb4", "html_url": "https://github.com/rust-lang/rust/commit/b7881bb08d129a119c69ca79999cae54cef3efb4"}], "stats": {"total": 88, "additions": 24, "deletions": 64}, "files": [{"sha": "13790409e59f633f28292f8e2c3709f189e37806", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "patch": "@@ -14,7 +14,7 @@ use cranelift_codegen::ir::{AbiParam, SigRef};\n use self::pass_mode::*;\n use crate::prelude::*;\n \n-pub(crate) use self::returning::{can_return_to_ssa_var, codegen_return};\n+pub(crate) use self::returning::codegen_return;\n \n fn clif_sig_from_fn_abi<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "c1bdba43e6ccb4e65e622d66bbf358729c701aff", "filename": "src/abi/returning.rs", "status": "modified", "additions": 23, "deletions": 52, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "patch": "@@ -2,54 +2,9 @@\n \n use crate::prelude::*;\n \n-use rustc_middle::ty::layout::FnAbiExt;\n-use rustc_target::abi::call::{ArgAbi, FnAbi, PassMode};\n+use rustc_target::abi::call::{ArgAbi, PassMode};\n use smallvec::{smallvec, SmallVec};\n \n-/// Can the given type be returned into an ssa var or does it need to be returned on the stack.\n-pub(crate) fn can_return_to_ssa_var<'tcx>(\n-    fx: &FunctionCx<'_, '_, 'tcx>,\n-    func: &mir::Operand<'tcx>,\n-    args: &[mir::Operand<'tcx>],\n-) -> bool {\n-    let fn_ty = fx.monomorphize(func.ty(fx.mir, fx.tcx));\n-    let fn_sig =\n-        fx.tcx.normalize_erasing_late_bound_regions(ParamEnv::reveal_all(), fn_ty.fn_sig(fx.tcx));\n-\n-    // Handle special calls like instrinsics and empty drop glue.\n-    let instance = if let ty::FnDef(def_id, substs) = *fn_ty.kind() {\n-        let instance = ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n-            .unwrap()\n-            .unwrap()\n-            .polymorphize(fx.tcx);\n-\n-        match instance.def {\n-            InstanceDef::Intrinsic(_) | InstanceDef::DropGlue(_, _) => {\n-                return true;\n-            }\n-            _ => Some(instance),\n-        }\n-    } else {\n-        None\n-    };\n-\n-    let extra_args = &args[fn_sig.inputs().len()..];\n-    let extra_args = extra_args\n-        .iter()\n-        .map(|op_arg| fx.monomorphize(op_arg.ty(fx.mir, fx.tcx)))\n-        .collect::<Vec<_>>();\n-    let fn_abi = if let Some(instance) = instance {\n-        FnAbi::of_instance(&RevealAllLayoutCx(fx.tcx), instance, &extra_args)\n-    } else {\n-        FnAbi::of_fn_ptr(&RevealAllLayoutCx(fx.tcx), fn_ty.fn_sig(fx.tcx), &extra_args)\n-    };\n-    match fn_abi.ret.mode {\n-        PassMode::Ignore | PassMode::Direct(_) | PassMode::Pair(_, _) | PassMode::Cast(_) => true,\n-        // FIXME Make it possible to return Indirect to an ssa var.\n-        PassMode::Indirect { .. } => false,\n-    }\n-}\n-\n /// Return a place where the return value of the current function can be written to. If necessary\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n@@ -104,16 +59,24 @@ pub(super) fn codegen_with_call_return_arg<'tcx>(\n     ret_place: Option<CPlace<'tcx>>,\n     f: impl FnOnce(&mut FunctionCx<'_, '_, 'tcx>, Option<Value>) -> Inst,\n ) {\n-    let return_ptr = match ret_arg_abi.mode {\n-        PassMode::Ignore => None,\n+    let (ret_temp_place, return_ptr) = match ret_arg_abi.mode {\n+        PassMode::Ignore => (None, None),\n         PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => match ret_place {\n-            Some(ret_place) => Some(ret_place.to_ptr().get_addr(fx)),\n-            None => Some(fx.bcx.ins().iconst(fx.pointer_type, 43)), // FIXME allocate temp stack slot\n+            Some(ret_place) if matches!(ret_place.inner(), CPlaceInner::Addr(_, None)) => {\n+                // This is an optimization to prevent unnecessary copies of the return value when\n+                // the return place is already a memory place as opposed to a register.\n+                // This match arm can be safely removed.\n+                (None, Some(ret_place.to_ptr().get_addr(fx)))\n+            }\n+            _ => {\n+                let place = CPlace::new_stack_slot(fx, ret_arg_abi.layout);\n+                (Some(place), Some(place.to_ptr().get_addr(fx)))\n+            }\n         },\n         PassMode::Indirect { attrs: _, extra_attrs: Some(_), on_stack: _ } => {\n             unreachable!(\"unsized return value\")\n         }\n-        PassMode::Direct(_) | PassMode::Pair(_, _) | PassMode::Cast(_) => None,\n+        PassMode::Direct(_) | PassMode::Pair(_, _) | PassMode::Cast(_) => (None, None),\n     };\n \n     let call_inst = f(fx, return_ptr);\n@@ -149,7 +112,15 @@ pub(super) fn codegen_with_call_return_arg<'tcx>(\n                 ret_place.write_cvalue(fx, result);\n             }\n         }\n-        PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {}\n+        PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n+            if let (Some(ret_place), Some(ret_temp_place)) = (ret_place, ret_temp_place) {\n+                // Both ret_place and ret_temp_place must be Some. If ret_place is None, this is\n+                // a non-returning call. If ret_temp_place is None, it is not necessary to copy the\n+                // return value.\n+                let ret_temp_value = ret_temp_place.to_cvalue(fx);\n+                ret_place.write_cvalue(fx, ret_temp_value);\n+            }\n+        }\n         PassMode::Indirect { attrs: _, extra_attrs: Some(_), on_stack: _ } => {\n             unreachable!(\"unsized return value\")\n         }"}, {"sha": "35b89358b1984ee40a2c184a38753987ffbd46f7", "filename": "src/analyze.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=e0b9f3b3cc3cdf3edcf0868e6c88e652455055fd", "patch": "@@ -38,17 +38,6 @@ pub(crate) fn analyze(fx: &FunctionCx<'_, '_, '_>) -> IndexVec<Local, SsaKind> {\n                 _ => {}\n             }\n         }\n-\n-        match &bb.terminator().kind {\n-            TerminatorKind::Call { destination, func, args, .. } => {\n-                if let Some((dest_place, _dest_bb)) = destination {\n-                    if !crate::abi::can_return_to_ssa_var(fx, func, args) {\n-                        not_ssa(&mut flag_map, dest_place.local)\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n     }\n \n     flag_map"}]}