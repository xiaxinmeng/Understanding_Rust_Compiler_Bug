{"sha": "0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmZGM4YzA2ZGQzNmIyZWU1MmIzMmYyYjc0MzFlZTU5NTI0MjdmMjg=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-08-19T18:12:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T18:12:23Z"}, "message": "Rollup merge of #75674 - poliorcetics:intra-links-std-io, r=jyn514\n\nMove to intra doc links for std::io\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\nI had no problems with those files so I added some small links here and there.", "tree": {"sha": "f065476b8f7829547e57fd1652691904e311c939", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f065476b8f7829547e57fd1652691904e311c939"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPWuICRBK7hj4Ov3rIwAAdHIIAJcC01HwIZFX/s8udkgSB+td\nx7TSSDryiYUqBbaAIA8e7yCFM+foLJ2UhsVTsZF6+hE2JuGt0Z4suPUS+1ACwvOu\nPaBkHCAUUXLerG88XY7Z6Ic/XMylPHGRRHPBJ4zOejkByKeGGJ/zEhdixWzcke2U\nA2CpKlsiBrZE40pp5svbxsFnV/9GU7Rt08+xHIlAg3orN3z41b+gYSDYhB1GZVMJ\n6PNMfL20Pmaeb8QTxWj49ggYkBqlv59Jo50ZieLNcQwO37rp2En87UJ/xqQNgRuj\nF7ymOXVQ1lYQkwh9KxXkZKCidaeaOy1qOOjWnS+N3YaoJEoAfMBTx6KNIrsCufU=\n=rQIO\n-----END PGP SIGNATURE-----\n", "payload": "tree f065476b8f7829547e57fd1652691904e311c939\nparent 7d1407721c2cd9e700e2f27d12cfaa98e0e30720\nparent dad8e11e9fcbd76c0a2dc47211dcd654effed010\nauthor Tyler Mandry <tmandry@gmail.com> 1597860743 -0700\ncommitter GitHub <noreply@github.com> 1597860743 -0700\n\nRollup merge of #75674 - poliorcetics:intra-links-std-io, r=jyn514\n\nMove to intra doc links for std::io\n\nHelps with #75080.\n\n@rustbot modify labels: T-doc, A-intra-doc-links, T-rustdoc\n\nr? @jyn514\n\nI had no problems with those files so I added some small links here and there.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "html_url": "https://github.com/rust-lang/rust/commit/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d1407721c2cd9e700e2f27d12cfaa98e0e30720", "html_url": "https://github.com/rust-lang/rust/commit/7d1407721c2cd9e700e2f27d12cfaa98e0e30720"}, {"sha": "dad8e11e9fcbd76c0a2dc47211dcd654effed010", "url": "https://api.github.com/repos/rust-lang/rust/commits/dad8e11e9fcbd76c0a2dc47211dcd654effed010", "html_url": "https://github.com/rust-lang/rust/commit/dad8e11e9fcbd76c0a2dc47211dcd654effed010"}], "stats": {"total": 290, "additions": 135, "deletions": 155}, "files": [{"sha": "f3aadf29b2f2b403360ac535cc9c4d3fc0822a97", "filename": "library/std/src/io/buffered.rs", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -21,17 +21,16 @@ use crate::memchr;\n /// *repeated* read calls to the same file or network socket. It does not\n /// help when reading very large amounts at once, or reading just one or a few\n /// times. It also provides no advantage when reading from a source that is\n-/// already in memory, like a `Vec<u8>`.\n+/// already in memory, like a [`Vec`]`<u8>`.\n ///\n /// When the `BufReader<R>` is dropped, the contents of its buffer will be\n /// discarded. Creating multiple instances of a `BufReader<R>` on the same\n /// stream can cause data loss. Reading from the underlying reader after\n-/// unwrapping the `BufReader<R>` with `BufReader::into_inner` can also cause\n+/// unwrapping the `BufReader<R>` with [`BufReader::into_inner`] can also cause\n /// data loss.\n ///\n-/// [`Read`]: ../../std/io/trait.Read.html\n-/// [`TcpStream::read`]: ../../std/net/struct.TcpStream.html#method.read\n-/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n+/// [`TcpStream::read`]: Read::read\n+/// [`TcpStream`]: crate::net::TcpStream\n ///\n /// # Examples\n ///\n@@ -155,7 +154,9 @@ impl<R> BufReader<R> {\n \n     /// Returns a reference to the internally buffered data.\n     ///\n-    /// Unlike `fill_buf`, this will not attempt to fill the buffer if it is empty.\n+    /// Unlike [`fill_buf`], this will not attempt to fill the buffer if it is empty.\n+    ///\n+    /// [`fill_buf`]: BufRead::fill_buf\n     ///\n     /// # Examples\n     ///\n@@ -338,27 +339,26 @@ where\n impl<R: Seek> Seek for BufReader<R> {\n     /// Seek to an offset, in bytes, in the underlying reader.\n     ///\n-    /// The position used for seeking with `SeekFrom::Current(_)` is the\n+    /// The position used for seeking with [`SeekFrom::Current`]`(_)` is the\n     /// position the underlying reader would be at if the `BufReader<R>` had no\n     /// internal buffer.\n     ///\n     /// Seeking always discards the internal buffer, even if the seek position\n     /// would otherwise fall within it. This guarantees that calling\n-    /// `.into_inner()` immediately after a seek yields the underlying reader\n+    /// [`BufReader::into_inner()`] immediately after a seek yields the underlying reader\n     /// at the same position.\n     ///\n     /// To seek without discarding the internal buffer, use [`BufReader::seek_relative`].\n     ///\n     /// See [`std::io::Seek`] for more details.\n     ///\n-    /// Note: In the edge case where you're seeking with `SeekFrom::Current(n)`\n+    /// Note: In the edge case where you're seeking with [`SeekFrom::Current`]`(n)`\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n-    /// `Err`, the underlying reader will be left at the same position it would\n-    /// have if you called `seek` with `SeekFrom::Current(0)`.\n+    /// [`Err`], the underlying reader will be left at the same position it would\n+    /// have if you called `seek` with [`SeekFrom::Current`]`(0)`.\n     ///\n-    /// [`BufReader::seek_relative`]: struct.BufReader.html#method.seek_relative\n-    /// [`std::io::Seek`]: trait.Seek.html\n+    /// [`std::io::Seek`]: Seek\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {\n         let result: u64;\n         if let SeekFrom::Current(n) = pos {\n@@ -397,7 +397,7 @@ impl<R: Seek> Seek for BufReader<R> {\n /// *repeated* write calls to the same file or network socket. It does not\n /// help when writing very large amounts at once, or writing just one or a few\n /// times. It also provides no advantage when writing to a destination that is\n-/// in memory, like a `Vec<u8>`.\n+/// in memory, like a [`Vec`]<u8>`.\n ///\n /// It is critical to call [`flush`] before `BufWriter<W>` is dropped. Though\n /// dropping will attempt to flush the contents of the buffer, any errors\n@@ -441,10 +441,9 @@ impl<R: Seek> Seek for BufReader<R> {\n /// together by the buffer and will all be written out in one system call when\n /// the `stream` is flushed.\n ///\n-/// [`Write`]: ../../std/io/trait.Write.html\n-/// [`TcpStream::write`]: ../../std/net/struct.TcpStream.html#method.write\n-/// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-/// [`flush`]: #method.flush\n+/// [`TcpStream::write`]: Write::write\n+/// [`TcpStream`]: crate::net::TcpStream\n+/// [`flush`]: Write::flush\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BufWriter<W: Write> {\n     inner: Option<W>,\n@@ -455,7 +454,7 @@ pub struct BufWriter<W: Write> {\n     panicked: bool,\n }\n \n-/// An error returned by `into_inner` which combines an error that\n+/// An error returned by [`BufWriter::into_inner`] which combines an error that\n /// happened while writing out the buffer, and the buffered writer object\n /// which may be used to recover from the condition.\n ///\n@@ -629,7 +628,7 @@ impl<W: Write> BufWriter<W> {\n     ///\n     /// # Errors\n     ///\n-    /// An `Err` will be returned if an error occurs while flushing the buffer.\n+    /// An [`Err`] will be returned if an error occurs while flushing the buffer.\n     ///\n     /// # Examples\n     ///\n@@ -725,7 +724,8 @@ impl<W: Write> Drop for BufWriter<W> {\n }\n \n impl<W> IntoInnerError<W> {\n-    /// Returns the error which caused the call to `into_inner()` to fail.\n+    /// Returns the error which caused the call to [`BufWriter::into_inner()`]\n+    /// to fail.\n     ///\n     /// This error was returned when attempting to write the internal buffer.\n     ///\n@@ -819,17 +819,15 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// Wraps a writer and buffers output to it, flushing whenever a newline\n /// (`0x0a`, `'\\n'`) is detected.\n ///\n-/// The [`BufWriter`][bufwriter] struct wraps a writer and buffers its output.\n+/// The [`BufWriter`] struct wraps a writer and buffers its output.\n /// But it only does this batched write when it goes out of scope, or when the\n /// internal buffer is full. Sometimes, you'd prefer to write each line as it's\n /// completed, rather than the entire buffer at once. Enter `LineWriter`. It\n /// does exactly that.\n ///\n-/// Like [`BufWriter`][bufwriter], a `LineWriter`\u2019s buffer will also be flushed when the\n+/// Like [`BufWriter`], a `LineWriter`\u2019s buffer will also be flushed when the\n /// `LineWriter` goes out of scope or when its internal buffer is full.\n ///\n-/// [bufwriter]: struct.BufWriter.html\n-///\n /// If there's still a partial line in the buffer when the `LineWriter` is\n /// dropped, it will flush those contents.\n ///\n@@ -979,7 +977,7 @@ impl<W: Write> LineWriter<W> {\n     ///\n     /// # Errors\n     ///\n-    /// An `Err` will be returned if an error occurs while flushing the buffer.\n+    /// An [`Err`] will be returned if an error occurs while flushing the buffer.\n     ///\n     /// # Examples\n     ///"}, {"sha": "58343f66f3ffd18a24282e41afd277fb3b256101", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -9,7 +9,7 @@ use core::convert::TryInto;\n /// [`Seek`] implementation.\n ///\n /// `Cursor`s are used with in-memory buffers, anything implementing\n-/// `AsRef<[u8]>`, to allow them to implement [`Read`] and/or [`Write`],\n+/// [`AsRef`]`<[u8]>`, to allow them to implement [`Read`] and/or [`Write`],\n /// allowing these buffers to be used anywhere you might use a reader or writer\n /// that does actual I/O.\n ///\n@@ -23,12 +23,8 @@ use core::convert::TryInto;\n /// code, but use an in-memory buffer in our tests. We can do this with\n /// `Cursor`:\n ///\n-/// [`Seek`]: trait.Seek.html\n-/// [`Read`]: ../../std/io/trait.Read.html\n-/// [`Write`]: ../../std/io/trait.Write.html\n-/// [`Vec`]: ../../std/vec/struct.Vec.html\n-/// [bytes]: ../../std/primitive.slice.html\n-/// [`File`]: ../fs/struct.File.html\n+/// [bytes]: crate::slice\n+/// [`File`]: crate::fs::File\n ///\n /// ```no_run\n /// use std::io::prelude::*;\n@@ -81,8 +77,8 @@ pub struct Cursor<T> {\n impl<T> Cursor<T> {\n     /// Creates a new cursor wrapping the provided underlying in-memory buffer.\n     ///\n-    /// Cursor initial position is `0` even if underlying buffer (e.g., `Vec`)\n-    /// is not empty. So writing to cursor starts with overwriting `Vec`\n+    /// Cursor initial position is `0` even if underlying buffer (e.g., [`Vec`])\n+    /// is not empty. So writing to cursor starts with overwriting [`Vec`]\n     /// content, not with appending to it.\n     ///\n     /// # Examples"}, {"sha": "e6eda2caf758f88c5296fc44a023d98726f76920", "filename": "library/std/src/io/error.rs", "status": "modified", "additions": 35, "deletions": 30, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Ferror.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -4,8 +4,7 @@ use crate::fmt;\n use crate::result;\n use crate::sys;\n \n-/// A specialized [`Result`](../result/enum.Result.html) type for I/O\n-/// operations.\n+/// A specialized [`Result`] type for I/O operations.\n ///\n /// This type is broadly used across [`std::io`] for any operation which may\n /// produce an error.\n@@ -16,12 +15,13 @@ use crate::sys;\n /// While usual Rust style is to import types directly, aliases of [`Result`]\n /// often are not, to make it easier to distinguish between them. [`Result`] is\n /// generally assumed to be [`std::result::Result`][`Result`], and so users of this alias\n-/// will generally use `io::Result` instead of shadowing the prelude's import\n+/// will generally use `io::Result` instead of shadowing the [prelude]'s import\n /// of [`std::result::Result`][`Result`].\n ///\n-/// [`std::io`]: ../io/index.html\n-/// [`io::Error`]: ../io/struct.Error.html\n-/// [`Result`]: ../result/enum.Result.html\n+/// [`std::io`]: crate::io\n+/// [`io::Error`]: Error\n+/// [`Result`]: crate::result::Result\n+/// [prelude]: crate::prelude\n ///\n /// # Examples\n ///\n@@ -48,10 +48,9 @@ pub type Result<T> = result::Result<T, Error>;\n /// `Error` can be created with crafted error messages and a particular value of\n /// [`ErrorKind`].\n ///\n-/// [`Read`]: ../io/trait.Read.html\n-/// [`Write`]: ../io/trait.Write.html\n-/// [`Seek`]: ../io/trait.Seek.html\n-/// [`ErrorKind`]: enum.ErrorKind.html\n+/// [`Read`]: crate::io::Read\n+/// [`Write`]: crate::io::Write\n+/// [`Seek`]: crate::io::Seek\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Error {\n     repr: Repr,\n@@ -83,7 +82,7 @@ struct Custom {\n ///\n /// It is used with the [`io::Error`] type.\n ///\n-/// [`io::Error`]: struct.Error.html\n+/// [`io::Error`]: Error\n #[derive(Clone, Copy, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow(deprecated)]\n@@ -137,7 +136,7 @@ pub enum ErrorKind {\n     /// For example, a function that reads a file into a string will error with\n     /// `InvalidData` if the file's contents are not valid UTF-8.\n     ///\n-    /// [`InvalidInput`]: #variant.InvalidInput\n+    /// [`InvalidInput`]: ErrorKind::InvalidInput\n     #[stable(feature = \"io_invalid_data\", since = \"1.2.0\")]\n     InvalidData,\n     /// The I/O operation's timeout expired, causing it to be canceled.\n@@ -150,8 +149,8 @@ pub enum ErrorKind {\n     /// particular number of bytes but only a smaller number of bytes could be\n     /// written.\n     ///\n-    /// [`write`]: ../../std/io/trait.Write.html#tymethod.write\n-    /// [`Ok(0)`]: ../../std/io/type.Result.html\n+    /// [`write`]: crate::io::Write::write\n+    /// [`Ok(0)`]: Ok\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     WriteZero,\n     /// This operation was interrupted.\n@@ -220,9 +219,6 @@ impl From<ErrorKind> for Error {\n     /// let error = Error::from(not_found);\n     /// assert_eq!(\"entity not found\", format!(\"{}\", error));\n     /// ```\n-    ///\n-    /// [`ErrorKind`]: ../../std/io/enum.ErrorKind.html\n-    /// [`Error`]: ../../std/io/struct.Error.html\n     #[inline]\n     fn from(kind: ErrorKind) -> Error {\n         Error { repr: Repr::Simple(kind) }\n@@ -235,7 +231,7 @@ impl Error {\n     ///\n     /// This function is used to generically create I/O errors which do not\n     /// originate from the OS itself. The `error` argument is an arbitrary\n-    /// payload which will be contained in this `Error`.\n+    /// payload which will be contained in this [`Error`].\n     ///\n     /// # Examples\n     ///\n@@ -264,7 +260,7 @@ impl Error {\n     ///\n     /// This function reads the value of `errno` for the target platform (e.g.\n     /// `GetLastError` on Windows) and will return a corresponding instance of\n-    /// `Error` for the error code.\n+    /// [`Error`] for the error code.\n     ///\n     /// # Examples\n     ///\n@@ -278,7 +274,7 @@ impl Error {\n         Error::from_raw_os_error(sys::os::errno() as i32)\n     }\n \n-    /// Creates a new instance of an `Error` from a particular OS error code.\n+    /// Creates a new instance of an [`Error`] from a particular OS error code.\n     ///\n     /// # Examples\n     ///\n@@ -310,9 +306,12 @@ impl Error {\n \n     /// Returns the OS error that this error represents (if any).\n     ///\n-    /// If this `Error` was constructed via `last_os_error` or\n-    /// `from_raw_os_error`, then this function will return `Some`, otherwise\n-    /// it will return `None`.\n+    /// If this [`Error`] was constructed via [`last_os_error`] or\n+    /// [`from_raw_os_error`], then this function will return [`Some`], otherwise\n+    /// it will return [`None`].\n+    ///\n+    /// [`last_os_error`]: Error::last_os_error\n+    /// [`from_raw_os_error`]: Error::from_raw_os_error\n     ///\n     /// # Examples\n     ///\n@@ -345,8 +344,10 @@ impl Error {\n \n     /// Returns a reference to the inner error wrapped by this error (if any).\n     ///\n-    /// If this `Error` was constructed via `new` then this function will\n-    /// return `Some`, otherwise it will return `None`.\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// return [`Some`], otherwise it will return [`None`].\n+    ///\n+    /// [`new`]: Error::new\n     ///\n     /// # Examples\n     ///\n@@ -380,8 +381,10 @@ impl Error {\n     /// Returns a mutable reference to the inner error wrapped by this error\n     /// (if any).\n     ///\n-    /// If this `Error` was constructed via `new` then this function will\n-    /// return `Some`, otherwise it will return `None`.\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// return [`Some`], otherwise it will return [`None`].\n+    ///\n+    /// [`new`]: Error::new\n     ///\n     /// # Examples\n     ///\n@@ -448,8 +451,10 @@ impl Error {\n \n     /// Consumes the `Error`, returning its inner error (if any).\n     ///\n-    /// If this `Error` was constructed via `new` then this function will\n-    /// return `Some`, otherwise it will return `None`.\n+    /// If this [`Error`] was constructed via [`new`] then this function will\n+    /// return [`Some`], otherwise it will return [`None`].\n+    ///\n+    /// [`new`]: Error::new\n     ///\n     /// # Examples\n     ///\n@@ -480,7 +485,7 @@ impl Error {\n         }\n     }\n \n-    /// Returns the corresponding `ErrorKind` for this error.\n+    /// Returns the corresponding [`ErrorKind`] for this error.\n     ///\n     /// # Examples\n     ///"}, {"sha": "324562948382890d5ba99d7fd91bc617d8d75c7e", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 51, "deletions": 48, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -240,9 +240,9 @@\n //!\n //! [`File`]: crate::fs::File\n //! [`TcpStream`]: crate::net::TcpStream\n-//! [`Vec<T>`]: crate::vec::Vec\n+//! [`Vec<T>`]: Vec\n //! [`io::stdout`]: stdout\n-//! [`io::Result`]: crate::io::Result\n+//! [`io::Result`]: self::Result\n //! [`?` operator]: ../../book/appendix-02-operators.html\n //! [`Result`]: crate::result::Result\n //! [`.unwrap()`]: crate::result::Result::unwrap\n@@ -671,15 +671,15 @@ pub trait Read {\n     /// If the data in this stream is *not* valid UTF-8 then an error is\n     /// returned and `buf` is unchanged.\n     ///\n-    /// See [`read_to_end`][readtoend] for other error semantics.\n+    /// See [`read_to_end`] for other error semantics.\n     ///\n-    /// [readtoend]: Self::read_to_end\n+    /// [`read_to_end`]: Read::read_to_end\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: crate::fs::File\n+    /// [`File`]: crate::fs::File\n     ///\n     /// ```no_run\n     /// use std::io;\n@@ -790,9 +790,9 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: crate::fs::File\n+    /// [`File`]: crate::fs::File\n     ///\n     /// ```no_run\n     /// use std::io;\n@@ -834,10 +834,9 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: crate::fs::File\n-    /// [`Iterator`]: crate::iter::Iterator\n+    /// [`File`]: crate::fs::File\n     /// [`Result`]: crate::result::Result\n     /// [`io::Error`]: self::Error\n     ///\n@@ -871,9 +870,9 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: crate::fs::File\n+    /// [`File`]: crate::fs::File\n     ///\n     /// ```no_run\n     /// use std::io;\n@@ -1210,8 +1209,8 @@ impl Initializer {\n /// throughout [`std::io`] take and provide types which implement the `Write`\n /// trait.\n ///\n-/// [`write`]: Self::write\n-/// [`flush`]: Self::flush\n+/// [`write`]: Write::write\n+/// [`flush`]: Write::flush\n /// [`std::io`]: self\n ///\n /// # Examples\n@@ -1237,7 +1236,7 @@ impl Initializer {\n /// The trait also provides convenience methods like [`write_all`], which calls\n /// `write` in a loop until its entire input has been written.\n ///\n-/// [`write_all`]: Self::write_all\n+/// [`write_all`]: Write::write_all\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(spotlight)]\n pub trait Write {\n@@ -1283,30 +1282,36 @@ pub trait Write {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// [`Ok(n)`]: Ok\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn write(&mut self, buf: &[u8]) -> Result<usize>;\n \n-    /// Like `write`, except that it writes from a slice of buffers.\n+    /// Like [`write`], except that it writes from a slice of buffers.\n     ///\n     /// Data is copied from each buffer in order, with the final buffer\n     /// read from possibly being only partially consumed. This method must\n-    /// behave as a call to `write` with the buffers concatenated would.\n+    /// behave as a call to [`write`] with the buffers concatenated would.\n     ///\n-    /// The default implementation calls `write` with either the first nonempty\n+    /// The default implementation calls [`write`] with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n+    ///\n+    /// [`write`]: Write::write\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {\n         default_write_vectored(|b| self.write(b), bufs)\n     }\n \n-    /// Determines if this `Write`er has an efficient `write_vectored`\n+    /// Determines if this `Write`er has an efficient [`write_vectored`]\n     /// implementation.\n     ///\n-    /// If a `Write`er does not override the default `write_vectored`\n+    /// If a `Write`er does not override the default [`write_vectored`]\n     /// implementation, code using it may want to avoid the method all together\n     /// and coalesce writes into a single buffer for higher performance.\n     ///\n     /// The default implementation returns `false`.\n+    ///\n+    /// [`write_vectored`]: Write::write_vectored\n     #[unstable(feature = \"can_vector\", issue = \"69941\")]\n     fn is_write_vectored(&self) -> bool {\n         false\n@@ -1354,7 +1359,7 @@ pub trait Write {\n     /// This function will return the first error of\n     /// non-[`ErrorKind::Interrupted`] kind that [`write`] returns.\n     ///\n-    /// [`write`]: Self::write\n+    /// [`write`]: Write::write\n     ///\n     /// # Examples\n     ///\n@@ -1395,22 +1400,21 @@ pub trait Write {\n     ///\n     /// If the buffer contains no data, this will never call [`write_vectored`].\n     ///\n-    /// [`write_vectored`]: Self::write_vectored\n-    ///\n     /// # Notes\n     ///\n-    ///\n-    /// Unlike `io::Write::write_vectored`, this takes a *mutable* reference to\n-    /// a slice of `IoSlice`s, not an immutable one. That's because we need to\n+    /// Unlike [`write_vectored`], this takes a *mutable* reference to\n+    /// a slice of [`IoSlice`]s, not an immutable one. That's because we need to\n     /// modify the slice to keep track of the bytes already written.\n     ///\n     /// Once this function returns, the contents of `bufs` are unspecified, as\n-    /// this depends on how many calls to `write_vectored` were necessary. It is\n+    /// this depends on how many calls to [`write_vectored`] were necessary. It is\n     /// best to understand this function as taking ownership of `bufs` and to\n     /// not use `bufs` afterwards. The underlying buffers, to which the\n-    /// `IoSlice`s point (but not the `IoSlice`s themselves), are unchanged and\n+    /// [`IoSlice`]s point (but not the [`IoSlice`]s themselves), are unchanged and\n     /// can be reused.\n     ///\n+    /// [`write_vectored`]: Write::write_vectored\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -1458,12 +1462,12 @@ pub trait Write {\n     /// explicitly be called. The [`write!()`] macro should be favored to\n     /// invoke this method instead.\n     ///\n-    /// This function internally uses the [`write_all`][writeall] method on\n+    /// This function internally uses the [`write_all`] method on\n     /// this trait and hence will continuously write data so long as no errors\n     /// are received. This also means that partial writes are not indicated in\n     /// this signature.\n     ///\n-    /// [writeall]: Self::write_all\n+    /// [`write_all`]: Write::write_all\n     ///\n     /// # Errors\n     ///\n@@ -1558,9 +1562,9 @@ pub trait Write {\n ///\n /// # Examples\n ///\n-/// [`File`][file]s implement `Seek`:\n+/// [`File`]s implement `Seek`:\n ///\n-/// [file]: crate::fs::File\n+/// [`File`]: crate::fs::File\n ///\n /// ```no_run\n /// use std::io;\n@@ -1610,7 +1614,6 @@ pub trait Seek {\n     /// data is appended to a file). So calling this method multiple times does\n     /// not necessarily return the same length each time.\n     ///\n-    ///\n     /// # Example\n     ///\n     /// ```no_run\n@@ -1646,7 +1649,6 @@ pub trait Seek {\n     ///\n     /// This is equivalent to `self.seek(SeekFrom::Current(0))`.\n     ///\n-    ///\n     /// # Example\n     ///\n     /// ```no_run\n@@ -1756,8 +1758,8 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> R\n /// [`BufReader`] to the rescue!\n ///\n /// [`File`]: crate::fs::File\n-/// [`read_line`]: Self::read_line\n-/// [`lines`]: Self::lines\n+/// [`read_line`]: BufRead::read_line\n+/// [`lines`]: BufRead::lines\n ///\n /// ```no_run\n /// use std::io::{self, BufReader};\n@@ -1775,7 +1777,6 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>) -> R\n ///     Ok(())\n /// }\n /// ```\n-///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BufRead: Read {\n     /// Returns the contents of the internal buffer, filling it with more data\n@@ -1788,7 +1789,7 @@ pub trait BufRead: Read {\n     /// be called with the number of bytes that are consumed from this buffer to\n     /// ensure that the bytes are never returned twice.\n     ///\n-    /// [`consume`]: Self::consume\n+    /// [`consume`]: BufRead::consume\n     ///\n     /// An empty buffer returned indicates that the stream has reached EOF.\n     ///\n@@ -1838,7 +1839,7 @@ pub trait BufRead: Read {\n     /// Since `consume()` is meant to be used with [`fill_buf`],\n     /// that method's example includes an example of `consume()`.\n     ///\n-    /// [`fill_buf`]: Self::fill_buf\n+    /// [`fill_buf`]: BufRead::fill_buf\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn consume(&mut self, amt: usize);\n \n@@ -1862,7 +1863,7 @@ pub trait BufRead: Read {\n     /// If an I/O error is encountered then all bytes read so far will be\n     /// present in `buf` and its length will have been adjusted appropriately.\n     ///\n-    /// [`fill_buf`]: Self::fill_buf\n+    /// [`fill_buf`]: BufRead::fill_buf\n     ///\n     /// # Examples\n     ///\n@@ -1901,30 +1902,32 @@ pub trait BufRead: Read {\n         read_until(self, byte, buf)\n     }\n \n-    /// Read all bytes until a newline (the 0xA byte) is reached, and append\n+    /// Read all bytes until a newline (the `0xA` byte) is reached, and append\n     /// them to the provided buffer.\n     ///\n     /// This function will read bytes from the underlying stream until the\n-    /// newline delimiter (the 0xA byte) or EOF is found. Once found, all bytes\n+    /// newline delimiter (the `0xA` byte) or EOF is found. Once found, all bytes\n     /// up to, and including, the delimiter (if found) will be appended to\n     /// `buf`.\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n-    /// If this function returns `Ok(0)`, the stream has reached EOF.\n+    /// If this function returns [`Ok(0)`], the stream has reached EOF.\n     ///\n     /// This function is blocking and should be used carefully: it is possible for\n     /// an attacker to continuously send bytes without ever sending a newline\n     /// or EOF.\n     ///\n+    /// [`Ok(0)`]: Ok\n+    ///\n     /// # Errors\n     ///\n     /// This function has the same error semantics as [`read_until`] and will\n     /// also return an error if the read bytes are not valid UTF-8. If an I/O\n     /// error is encountered then `buf` may contain some bytes already read in\n     /// the event that all data read so far was valid UTF-8.\n     ///\n-    /// [`read_until`]: Self::read_until\n+    /// [`read_until`]: BufRead::read_until\n     ///\n     /// # Examples\n     ///\n@@ -1976,8 +1979,8 @@ pub trait BufRead: Read {\n     /// also yielded an error.\n     ///\n     /// [`io::Result`]: self::Result\n-    /// [`Vec<u8>`]: crate::vec::Vec\n-    /// [`read_until`]: Self::read_until\n+    /// [`Vec<u8>`]: Vec\n+    /// [`read_until`]: BufRead::read_until\n     ///\n     /// # Examples\n     ///\n@@ -2008,7 +2011,7 @@ pub trait BufRead: Read {\n     ///\n     /// The iterator returned from this function will yield instances of\n     /// [`io::Result`]`<`[`String`]`>`. Each string returned will *not* have a newline\n-    /// byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.\n+    /// byte (the `0xA` byte) or `CRLF` (`0xD`, `0xA` bytes) at the end.\n     ///\n     /// [`io::Result`]: self::Result\n     ///"}, {"sha": "286eb92915e49381a0dd1c42d870cfa28da28b6e", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -252,8 +252,7 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n ///\n /// Created by the [`io::stdin`] method.\n ///\n-/// [`io::stdin`]: fn.stdin.html\n-/// [`BufRead`]: trait.BufRead.html\n+/// [`io::stdin`]: stdin\n ///\n /// ### Note: Windows Portability Consideration\n ///\n@@ -283,10 +282,6 @@ pub struct Stdin {\n /// This handle implements both the [`Read`] and [`BufRead`] traits, and\n /// is constructed via the [`Stdin::lock`] method.\n ///\n-/// [`Read`]: trait.Read.html\n-/// [`BufRead`]: trait.BufRead.html\n-/// [`Stdin::lock`]: struct.Stdin.html#method.lock\n-///\n /// ### Note: Windows Portability Consideration\n ///\n /// When operating in a console, the Windows implementation of this stream does not support\n@@ -319,8 +314,6 @@ pub struct StdinLock<'a> {\n /// is synchronized via a mutex. If you need more explicit control over\n /// locking, see the [`Stdin::lock`] method.\n ///\n-/// [`Stdin::lock`]: struct.Stdin.html#method.lock\n-///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n@@ -380,9 +373,6 @@ impl Stdin {\n     /// returned guard also implements the [`Read`] and [`BufRead`] traits for\n     /// accessing the underlying data.\n     ///\n-    /// [`Read`]: trait.Read.html\n-    /// [`BufRead`]: trait.BufRead.html\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -407,8 +397,6 @@ impl Stdin {\n     /// For detailed semantics of this method, see the documentation on\n     /// [`BufRead::read_line`].\n     ///\n-    /// [`BufRead::read_line`]: trait.BufRead.html#method.read_line\n-    ///\n     /// # Examples\n     ///\n     /// ```no_run\n@@ -542,8 +530,8 @@ impl fmt::Debug for StdinLock<'_> {\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n /// an error.\n ///\n-/// [`lock`]: #method.lock\n-/// [`io::stdout`]: fn.stdout.html\n+/// [`lock`]: Stdout::lock\n+/// [`io::stdout`]: stdout\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdout {\n     // FIXME: this should be LineWriter or BufWriter depending on the state of\n@@ -561,9 +549,6 @@ pub struct Stdout {\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n /// an error.\n-///\n-/// [`Write`]: trait.Write.html\n-/// [`Stdout::lock`]: struct.Stdout.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdoutLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<LineWriter<Maybe<StdoutRaw>>>>,\n@@ -575,8 +560,6 @@ pub struct StdoutLock<'a> {\n /// is synchronized via a mutex. If you need more explicit control over\n /// locking, see the [`Stdout::lock`] method.\n ///\n-/// [`Stdout::lock`]: struct.Stdout.html#method.lock\n-///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n@@ -724,7 +707,7 @@ impl fmt::Debug for StdoutLock<'_> {\n ///\n /// For more information, see the [`io::stderr`] method.\n ///\n-/// [`io::stderr`]: fn.stderr.html\n+/// [`io::stderr`]: stderr\n ///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support\n@@ -740,8 +723,6 @@ pub struct Stderr {\n /// This handle implements the `Write` trait and is constructed via\n /// the [`Stderr::lock`] method.\n ///\n-/// [`Stderr::lock`]: struct.Stderr.html#method.lock\n-///\n /// ### Note: Windows Portability Consideration\n /// When operating in a console, the Windows implementation of this stream does not support\n /// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n@@ -819,7 +800,7 @@ impl Stderr {\n     /// guard.\n     ///\n     /// The lock is released when the returned lock goes out of scope. The\n-    /// returned guard also implements the `Write` trait for writing data.\n+    /// returned guard also implements the [`Write`] trait for writing data.\n     ///\n     /// # Examples\n     ///"}, {"sha": "a093b745b0c13cd970134465d752a69bdf541a06", "filename": "library/std/src/io/util.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fdc8c06dd36b2ee52b32f2b7431ee5952427f28/library%2Fstd%2Fsrc%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Futil.rs?ref=0fdc8c06dd36b2ee52b32f2b7431ee5952427f28", "patch": "@@ -16,14 +16,17 @@ use crate::mem::MaybeUninit;\n /// If you\u2019re wanting to copy the contents of one file to another and you\u2019re\n /// working with filesystem paths, see the [`fs::copy`] function.\n ///\n-/// [`fs::copy`]: ../fs/fn.copy.html\n+/// [`fs::copy`]: crate::fs::copy\n ///\n /// # Errors\n ///\n-/// This function will return an error immediately if any call to `read` or\n-/// `write` returns an error. All instances of `ErrorKind::Interrupted` are\n+/// This function will return an error immediately if any call to [`read`] or\n+/// [`write`] returns an error. All instances of [`ErrorKind::Interrupted`] are\n /// handled by this function and the underlying operation is retried.\n ///\n+/// [`read`]: Read::read\n+/// [`write`]: Write::write\n+///\n /// # Examples\n ///\n /// ```\n@@ -70,10 +73,8 @@ where\n \n /// A reader which is always at EOF.\n ///\n-/// This struct is generally created by calling [`empty`]. Please see\n-/// the documentation of [`empty()`][`empty`] for more details.\n-///\n-/// [`empty`]: fn.empty.html\n+/// This struct is generally created by calling [`empty()`]. Please see\n+/// the documentation of [`empty()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Empty {\n     _priv: (),\n@@ -83,8 +84,6 @@ pub struct Empty {\n ///\n /// All reads from the returned reader will return [`Ok`]`(0)`.\n ///\n-/// [`Ok`]: ../result/enum.Result.html#variant.Ok\n-///\n /// # Examples\n ///\n /// A slightly sad example of not reading anything into a buffer:\n@@ -132,10 +131,8 @@ impl fmt::Debug for Empty {\n \n /// A reader which yields one byte over and over and over and over and over and...\n ///\n-/// This struct is generally created by calling [`repeat`][repeat]. Please\n-/// see the documentation of `repeat()` for more details.\n-///\n-/// [repeat]: fn.repeat.html\n+/// This struct is generally created by calling [`repeat()`]. Please\n+/// see the documentation of [`repeat()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Repeat {\n     byte: u8,\n@@ -199,20 +196,20 @@ impl fmt::Debug for Repeat {\n \n /// A writer which will move data into the void.\n ///\n-/// This struct is generally created by calling [`sink`][sink]. Please\n-/// see the documentation of `sink()` for more details.\n-///\n-/// [sink]: fn.sink.html\n+/// This struct is generally created by calling [`sink`]. Please\n+/// see the documentation of [`sink()`] for more details.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Sink {\n     _priv: (),\n }\n \n /// Creates an instance of a writer which will successfully consume all data.\n ///\n-/// All calls to `write` on the returned instance will return `Ok(buf.len())`\n+/// All calls to [`write`] on the returned instance will return `Ok(buf.len())`\n /// and the contents of the buffer will not be inspected.\n ///\n+/// [`write`]: Write::write\n+///\n /// # Examples\n ///\n /// ```rust"}]}