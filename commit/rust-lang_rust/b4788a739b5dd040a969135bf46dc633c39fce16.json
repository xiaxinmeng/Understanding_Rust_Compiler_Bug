{"sha": "b4788a739b5dd040a969135bf46dc633c39fce16", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0Nzg4YTczOWI1ZGQwNDBhOTY5MTM1YmY0NmRjNjMzYzM5ZmNlMTY=", "commit": {"author": {"name": "Matthew Kuo", "email": "matthew.kuo@dialexa.com", "date": "2020-03-04T07:33:32Z"}, "committer": {"name": "Matthew Kuo", "email": "matthew.kuo@dialexa.com", "date": "2020-03-04T07:33:32Z"}, "message": "test(pattern): harden tests for or-patterns with slice-patterns\n\nSome of the nested OR paths were being missed", "tree": {"sha": "ce038f8904e9eb7c3ea887ad981df01e28e4f03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce038f8904e9eb7c3ea887ad981df01e28e4f03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4788a739b5dd040a969135bf46dc633c39fce16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4788a739b5dd040a969135bf46dc633c39fce16", "html_url": "https://github.com/rust-lang/rust/commit/b4788a739b5dd040a969135bf46dc633c39fce16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4788a739b5dd040a969135bf46dc633c39fce16/comments", "author": {"login": "thekuom", "id": 15683724, "node_id": "MDQ6VXNlcjE1NjgzNzI0", "avatar_url": "https://avatars.githubusercontent.com/u/15683724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thekuom", "html_url": "https://github.com/thekuom", "followers_url": "https://api.github.com/users/thekuom/followers", "following_url": "https://api.github.com/users/thekuom/following{/other_user}", "gists_url": "https://api.github.com/users/thekuom/gists{/gist_id}", "starred_url": "https://api.github.com/users/thekuom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thekuom/subscriptions", "organizations_url": "https://api.github.com/users/thekuom/orgs", "repos_url": "https://api.github.com/users/thekuom/repos", "events_url": "https://api.github.com/users/thekuom/events{/privacy}", "received_events_url": "https://api.github.com/users/thekuom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thekuom", "id": 15683724, "node_id": "MDQ6VXNlcjE1NjgzNzI0", "avatar_url": "https://avatars.githubusercontent.com/u/15683724?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thekuom", "html_url": "https://github.com/thekuom", "followers_url": "https://api.github.com/users/thekuom/followers", "following_url": "https://api.github.com/users/thekuom/following{/other_user}", "gists_url": "https://api.github.com/users/thekuom/gists{/gist_id}", "starred_url": "https://api.github.com/users/thekuom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thekuom/subscriptions", "organizations_url": "https://api.github.com/users/thekuom/orgs", "repos_url": "https://api.github.com/users/thekuom/repos", "events_url": "https://api.github.com/users/thekuom/events{/privacy}", "received_events_url": "https://api.github.com/users/thekuom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54561148581f002793ab42893de4e3f7c26bd7ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/54561148581f002793ab42893de4e3f7c26bd7ed", "html_url": "https://github.com/rust-lang/rust/commit/54561148581f002793ab42893de4e3f7c26bd7ed"}], "stats": {"total": 31, "additions": 27, "deletions": 4}, "files": [{"sha": "2526f048655aebbb694c1420d39c167704a9ee1a", "filename": "src/test/ui/or-patterns/slice-patterns.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b4788a739b5dd040a969135bf46dc633c39fce16/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4788a739b5dd040a969135bf46dc633c39fce16/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fslice-patterns.rs?ref=b4788a739b5dd040a969135bf46dc633c39fce16", "patch": "@@ -20,8 +20,8 @@ enum Test {\n \n fn test(foo: &[Option<Test>]) -> MatchArm {\n     match foo {\n-        [.., Some(Test::Foo | Test::Qux)] => MatchArm::Arm(0),\n-        [Some(Test::Foo), .., Some(Test::Bar | Test::Baz)] => MatchArm::Arm(1),\n+        [.., Some(Test::Qux | Test::Foo)] => MatchArm::Arm(0),\n+        [Some(Test::Foo), .., Some(Test::Baz | Test::Bar)] => MatchArm::Arm(1),\n         [.., Some(Test::Bar | Test::Baz), _] => MatchArm::Arm(2),\n         _ => MatchArm::Wild,\n     }\n@@ -35,8 +35,18 @@ fn main() {\n         Some(Test::Qux),\n     ];\n \n+    // path 1a\n     assert_eq!(test(&foo), MatchArm::Arm(0));\n+    // path 1b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Foo)]), MatchArm::Arm(0));\n+    // path 2a\n     assert_eq!(test(&foo[..3]), MatchArm::Arm(1));\n+    // path 2b\n+    assert_eq!(test(&[Some(Test::Foo), Some(Test::Foo), Some(Test::Bar)]), MatchArm::Arm(1));\n+    // path 3a\n     assert_eq!(test(&foo[1..3]), MatchArm::Arm(2));\n+    // path 3b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Baz), Some(Test::Baz), Some(Test::Bar)]), MatchArm::Arm(2));\n+    // path 4\n     assert_eq!(test(&foo[4..]), MatchArm::Wild);\n }"}, {"sha": "65c2b3741b3e303432e80b22f7cfc132ab90c243", "filename": "src/test/ui/pattern/bindings-after-at/or-patterns-slice-patterns.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b4788a739b5dd040a969135bf46dc633c39fce16/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4788a739b5dd040a969135bf46dc633c39fce16/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2For-patterns-slice-patterns.rs?ref=b4788a739b5dd040a969135bf46dc633c39fce16", "patch": "@@ -21,7 +21,7 @@ enum Test {\n \n fn test(foo: &[Option<Test>]) -> MatchArm {\n     match foo {\n-        bar @ [Some(Test::Foo), .., Some(Test::Foo | Test::Qux)] => {\n+        bar @ [Some(Test::Foo), .., Some(Test::Qux | Test::Foo)] => {\n             assert_eq!(bar, foo);\n \n             MatchArm::Arm(0)\n@@ -36,8 +36,21 @@ fn test(foo: &[Option<Test>]) -> MatchArm {\n }\n \n fn main() {\n-    let foo = vec![Some(Test::Foo), Some(Test::Bar), Some(Test::Baz), Some(Test::Qux)];\n+    let foo = vec![\n+        Some(Test::Foo),\n+        Some(Test::Bar),\n+        Some(Test::Baz),\n+        Some(Test::Qux),\n+    ];\n+\n+    // path 1a\n     assert_eq!(test(&foo), MatchArm::Arm(0));\n+    // path 1b\n+    assert_eq!(test(&[Some(Test::Foo), Some(Test::Bar), Some(Test::Foo)]), MatchArm::Arm(0));\n+    // path 2a\n     assert_eq!(test(&foo[..3]), MatchArm::Arm(1));\n+    // path 2b\n+    assert_eq!(test(&[Some(Test::Bar), Some(Test::Qux), Some(Test::Baz)]), MatchArm::Arm(1));\n+    // path 3\n     assert_eq!(test(&foo[1..2]), MatchArm::Wild);\n }"}]}