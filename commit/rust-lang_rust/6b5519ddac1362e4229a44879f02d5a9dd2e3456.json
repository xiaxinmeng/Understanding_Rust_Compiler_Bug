{"sha": "6b5519ddac1362e4229a44879f02d5a9dd2e3456", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTUxOWRkYWMxMzYyZTQyMjlhNDQ4NzlmMDJkNWE5ZGQyZTM0NTY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:27Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-28T23:09:27Z"}, "message": "Rollup merge of #48420 - teiesti:path_parents, r=BurntSushi\n\nFixes #47311.\nr? @nrc", "tree": {"sha": "d30efc246400c24ac48ba7aa506b6557a9e0372d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d30efc246400c24ac48ba7aa506b6557a9e0372d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b5519ddac1362e4229a44879f02d5a9dd2e3456", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEKEMXbnGOy4KpaPA5O79NPi73n5gFAlqXNqcACgkQO79NPi73\nn5gPmRAApWN2uCp1GwmxwuBbF6PVC8NY1g0axB/rnZHgqn6sO2ub1Zvpg6rmyNQF\n7qk9s2OYk4q3WPSRs6ytjsM7FNvU1lI5KV+ePMkmvjAzU6nJMqIgSr9kDsLbs0nu\nu7bZag/X+W9TuBEhVQRnN/9gTHxAihEb2rpP5Ja/V0ynAmZEUq8p5Jz0d6t34SdW\nPYLXLXfI33y5H3aPR9uGWXuAJi1KMmeXyhMXAJgjkZtOa1aXohIl09rD5l1+Bk3u\nQmiqOqraQA61rBCLG04k4X8wwZxuulkninWdp4dFlaniGQ8QMZNvLOdSyy/htoNd\nzK1mFni//TNrCOh/BHcPJgZmIHeiAJOvjPNgf3vyzH0bSC3Oe+ZnWe6nxnoq1VcO\nf9A6Z8b/4FY75tuojMOZxwldVCo75boj/MrJyUIwI33cHM+KoUb1UWFtCW3IccCS\nXZ21UELuldyX3bsWYDxlZ07hifJktoujOuEvF14KdZY++lAgltXvc5EBZxpbxSY5\nTpGN0oPXz/pUkpiCXd4b0fxbZWIFdlOH/LozLwmnsghF+mlK5y0vlnDcz+HPQzwT\n2NknPrHyYBV8B4jaGPLafCphm33zIbrFqv8dt+uuVNAFd726oIjUW54y5FZobffA\n8SAwDcrJUnjDiWDC9YK6P/sUSOr8fMELpWrb5XVGB5ctz+UCYtE=\n=NW/9\n-----END PGP SIGNATURE-----", "payload": "tree d30efc246400c24ac48ba7aa506b6557a9e0372d\nparent 12515608cb6345e3a845288dfa552ed03e3b940d\nparent b9e9b4a1461e3a49b68db56413324dc1b6a2ed60\nauthor Manish Goregaokar <manishsmail@gmail.com> 1519859367 -0800\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1519859367 -0800\n\nRollup merge of #48420 - teiesti:path_parents, r=BurntSushi\n\nFixes #47311.\nr? @nrc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5519ddac1362e4229a44879f02d5a9dd2e3456", "html_url": "https://github.com/rust-lang/rust/commit/6b5519ddac1362e4229a44879f02d5a9dd2e3456", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b5519ddac1362e4229a44879f02d5a9dd2e3456/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12515608cb6345e3a845288dfa552ed03e3b940d", "url": "https://api.github.com/repos/rust-lang/rust/commits/12515608cb6345e3a845288dfa552ed03e3b940d", "html_url": "https://github.com/rust-lang/rust/commit/12515608cb6345e3a845288dfa552ed03e3b940d"}, {"sha": "b9e9b4a1461e3a49b68db56413324dc1b6a2ed60", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9e9b4a1461e3a49b68db56413324dc1b6a2ed60", "html_url": "https://github.com/rust-lang/rust/commit/b9e9b4a1461e3a49b68db56413324dc1b6a2ed60"}], "stats": {"total": 75, "additions": 75, "deletions": 0}, "files": [{"sha": "1608a752a463fdac287f7d309d9068fd10a659d8", "filename": "src/libstd/path.rs", "status": "modified", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/6b5519ddac1362e4229a44879f02d5a9dd2e3456/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b5519ddac1362e4229a44879f02d5a9dd2e3456/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=6b5519ddac1362e4229a44879f02d5a9dd2e3456", "patch": "@@ -1035,6 +1035,50 @@ impl<'a> cmp::Ord for Components<'a> {\n     }\n }\n \n+/// An iterator over [`Path`] and its ancestors.\n+///\n+/// This `struct` is created by the [`ancestors`] method on [`Path`].\n+/// See its documentation for more.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(path_ancestors)]\n+///\n+/// use std::path::Path;\n+///\n+/// let path = Path::new(\"/foo/bar\");\n+///\n+/// for ancestor in path.ancestors() {\n+///     println!(\"{}\", ancestor.display());\n+/// }\n+/// ```\n+///\n+/// [`ancestors`]: struct.Path.html#method.ancestors\n+/// [`Path`]: struct.Path.html\n+#[derive(Copy, Clone, Debug)]\n+#[unstable(feature = \"path_ancestors\", issue = \"48581\")]\n+pub struct Ancestors<'a> {\n+    next: Option<&'a Path>,\n+}\n+\n+#[unstable(feature = \"path_ancestors\", issue = \"48581\")]\n+impl<'a> Iterator for Ancestors<'a> {\n+    type Item = &'a Path;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        let next = self.next;\n+        self.next = match next {\n+            Some(path) => path.parent(),\n+            None => None,\n+        };\n+        next\n+    }\n+}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<'a> FusedIterator for Ancestors<'a> {}\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Basic types and traits\n ////////////////////////////////////////////////////////////////////////////////\n@@ -1820,6 +1864,37 @@ impl Path {\n         })\n     }\n \n+    /// Produces an iterator over `Path` and its ancestors.\n+    ///\n+    /// The iterator will yield the `Path` that is returned if the [`parent`] method is used zero\n+    /// or more times. That means, the iterator will yield `&self`, `&self.parent().unwrap()`,\n+    /// `&self.parent().unwrap().parent().unwrap()` and so on. If the [`parent`] method returns\n+    /// [`None`], the iterator will do likewise. The iterator will always yield at least one value,\n+    /// namely `&self`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(path_ancestors)]\n+    ///\n+    /// use std::path::Path;\n+    ///\n+    /// let mut ancestors = Path::new(\"/foo/bar\").ancestors();\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"/foo/bar\")));\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"/foo\")));\n+    /// assert_eq!(ancestors.next(), Some(Path::new(\"/\")));\n+    /// assert_eq!(ancestors.next(), None);\n+    /// ```\n+    ///\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n+    /// [`parent`]: struct.Path.html#method.parent\n+    #[unstable(feature = \"path_ancestors\", issue = \"48581\")]\n+    pub fn ancestors(&self) -> Ancestors {\n+        Ancestors {\n+            next: Some(&self),\n+        }\n+    }\n+\n     /// Returns the final component of the `Path`, if there is one.\n     ///\n     /// If the path is a normal file, this is the file name. If it's the path of a directory, this"}]}