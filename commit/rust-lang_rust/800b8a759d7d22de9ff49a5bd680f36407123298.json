{"sha": "800b8a759d7d22de9ff49a5bd680f36407123298", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwMGI4YTc1OWQ3ZDIyZGU5ZmY0OWE1YmQ2ODBmMzY0MDcxMjMyOTg=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-01-04T04:20:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T07:34:34Z"}, "message": "Implement `mut` in arguments", "tree": {"sha": "9deb252c0487affbb0abf33b7d0c47f64b12f30b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9deb252c0487affbb0abf33b7d0c47f64b12f30b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/800b8a759d7d22de9ff49a5bd680f36407123298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/800b8a759d7d22de9ff49a5bd680f36407123298", "html_url": "https://github.com/rust-lang/rust/commit/800b8a759d7d22de9ff49a5bd680f36407123298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/800b8a759d7d22de9ff49a5bd680f36407123298/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d10b5c725b927c94ab73e74f036d622fdc14f4c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d10b5c725b927c94ab73e74f036d622fdc14f4c5", "html_url": "https://github.com/rust-lang/rust/commit/d10b5c725b927c94ab73e74f036d622fdc14f4c5"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "2669a2ea6cc347a7091b5bcb37d85f51e25e48b1", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/800b8a759d7d22de9ff49a5bd680f36407123298/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800b8a759d7d22de9ff49a5bd680f36407123298/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=800b8a759d7d22de9ff49a5bd680f36407123298", "patch": "@@ -453,26 +453,27 @@ impl &mem_categorization_ctxt {\n               mutbl:m_imm, ty:expr_ty}\n           }\n \n-          ast::def_arg(vid, mode, _) => {\n+          ast::def_arg(vid, mode, mutbl) => {\n             // Idea: make this could be rewritten to model by-ref\n             // stuff as `&const` and `&mut`?\n \n             // m: mutability of the argument\n             // lp: loan path, must be none for aliasable things\n-            let {m,lp} = match ty::resolved_mode(self.tcx, mode) {\n+            let m = if mutbl {m_mutbl} else {m_imm};\n+            let lp = match ty::resolved_mode(self.tcx, mode) {\n               ast::by_move | ast::by_copy => {\n-                {m: m_imm, lp: Some(@lp_arg(vid))}\n+                Some(@lp_arg(vid))\n               }\n               ast::by_ref => {\n-                {m: m_imm, lp: None}\n+                None\n               }\n               ast::by_val => {\n                 // by-value is this hybrid mode where we have a\n                 // pointer but we do not own it.  This is not\n                 // considered loanable because, for example, a by-ref\n                 // and and by-val argument might both actually contain\n                 // the same unique ptr.\n-                {m: m_imm, lp: None}\n+                None\n               }\n             };\n             @{id:id, span:span,"}, {"sha": "c023a24eceafdca8903fa77aaa014e67ed9360bc", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/800b8a759d7d22de9ff49a5bd680f36407123298/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/800b8a759d7d22de9ff49a5bd680f36407123298/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=800b8a759d7d22de9ff49a5bd680f36407123298", "patch": "@@ -4104,9 +4104,11 @@ impl Resolver {\n                     for declaration.inputs.each |argument| {\n                         let binding_mode =\n                             ArgumentIrrefutableMode(argument.mode);\n+                        let mutability =\n+                            if argument.is_mutbl {Mutable} else {Immutable};\n                         self.resolve_pattern(argument.pat,\n                                              binding_mode,\n-                                             Immutable,\n+                                             mutability,\n                                              None,\n                                              visitor);\n \n@@ -4295,12 +4297,7 @@ impl Resolver {\n     }\n \n     fn resolve_local(local: @local, visitor: ResolveVisitor) {\n-        let mut mutability;\n-        if local.node.is_mutbl {\n-            mutability = Mutable;\n-        } else {\n-            mutability = Immutable;\n-        }\n+        let mutability = if local.node.is_mutbl {Mutable} else {Immutable};\n \n         // Resolve the type.\n         self.resolve_type(local.node.ty, visitor);"}]}