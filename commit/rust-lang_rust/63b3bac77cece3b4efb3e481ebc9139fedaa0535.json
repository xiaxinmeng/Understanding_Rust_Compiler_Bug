{"sha": "63b3bac77cece3b4efb3e481ebc9139fedaa0535", "node_id": "C_kwDOAAsO6NoAKDYzYjNiYWM3N2NlY2UzYjRlZmIzZTQ4MWViYzkxMzlmZWRhYTA1MzU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T15:12:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-16T15:12:00Z"}, "message": "Auto merge of #105775 - matthiaskrgr:rollup-2o8qn7e, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #105725 (Allow `impl ~const Trait` opaque types)\n - #105744 (Rewrite `E0158` error-code docs for clarity)\n - #105747 (Fix ICE calling method on auto trait)\n - #105748 (doc: Fix a few small issues)\n - #105756 (rustdoc: simplify CSS for codeblock tooltips)\n - #105757 (rustdoc: remove unused CSS `.sub-settings`)\n - #105764 (rustdoc: name the source page sidebar-toggle `#src-sidebar-toggle`)\n - #105774 (Remove unused stderr files)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "ee22872dd20334aec80df142cda64507d33ddf27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee22872dd20334aec80df142cda64507d33ddf27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63b3bac77cece3b4efb3e481ebc9139fedaa0535", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63b3bac77cece3b4efb3e481ebc9139fedaa0535", "html_url": "https://github.com/rust-lang/rust/commit/63b3bac77cece3b4efb3e481ebc9139fedaa0535", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63b3bac77cece3b4efb3e481ebc9139fedaa0535/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03770f0e2b60c02db8fcf52fed5fb36aac70cedc", "url": "https://api.github.com/repos/rust-lang/rust/commits/03770f0e2b60c02db8fcf52fed5fb36aac70cedc", "html_url": "https://github.com/rust-lang/rust/commit/03770f0e2b60c02db8fcf52fed5fb36aac70cedc"}, {"sha": "8e35aad446fce4be32d2b61d252ce099cd50748d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e35aad446fce4be32d2b61d252ce099cd50748d", "html_url": "https://github.com/rust-lang/rust/commit/8e35aad446fce4be32d2b61d252ce099cd50748d"}], "stats": {"total": 350, "additions": 194, "deletions": 156}, "files": [{"sha": "55ea12d25ea2ceead70b4c4e6c4de49548a84852", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -42,7 +42,6 @@ enum SelfSemantic {\n /// What is the context that prevents using `~const`?\n enum DisallowTildeConstContext<'a> {\n     TraitObject,\n-    ImplTrait,\n     Fn(FnKind<'a>),\n }\n \n@@ -187,11 +186,7 @@ impl<'a> AstValidator<'a> {\n \n     fn with_impl_trait(&mut self, outer: Option<Span>, f: impl FnOnce(&mut Self)) {\n         let old = mem::replace(&mut self.outer_impl_trait, outer);\n-        if outer.is_some() {\n-            self.with_banned_tilde_const(DisallowTildeConstContext::ImplTrait, f);\n-        } else {\n-            f(self);\n-        }\n+        f(self);\n         self.outer_impl_trait = old;\n     }\n \n@@ -1384,7 +1379,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     let mut err = self.err_handler().struct_span_err(bound.span(), \"`~const` is not allowed here\");\n                     match reason {\n                         DisallowTildeConstContext::TraitObject => err.note(\"trait objects cannot have `~const` trait bounds\"),\n-                        DisallowTildeConstContext::ImplTrait => err.note(\"`impl Trait`s cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Closure(..)) => err.note(\"closures cannot have `~const` trait bounds\"),\n                         DisallowTildeConstContext::Fn(FnKind::Fn(_, ident, ..)) => err.span_note(ident.span, \"this function is not `const`, so it cannot have `~const` trait bounds\"),\n                     };"}, {"sha": "03b93d925c19a3f5c0eab3202af14735ab04cfdf", "filename": "compiler/rustc_error_codes/src/error_codes/E0158.md", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0158.md?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -1,38 +1,53 @@\n-An associated const has been referenced in a pattern.\n+An associated `const`, `const` parameter or `static` has been referenced\n+in a pattern.\n \n Erroneous code example:\n \n ```compile_fail,E0158\n-enum EFoo { A, B, C, D }\n+enum Foo {\n+    One,\n+    Two\n+}\n \n-trait Foo {\n-    const X: EFoo;\n+trait Bar {\n+    const X: Foo;\n }\n \n-fn test<A: Foo>(arg: EFoo) {\n+fn test<A: Bar>(arg: Foo) {\n     match arg {\n-        A::X => { // error!\n-            println!(\"A::X\");\n-        }\n+        A::X => println!(\"A::X\"), // error: E0158: associated consts cannot be\n+                                  //        referenced in patterns\n+        Foo::Two => println!(\"Two\")\n     }\n }\n ```\n \n-`const` and `static` mean different things. A `const` is a compile-time\n-constant, an alias for a literal value. This property means you can match it\n-directly within a pattern.\n+Associated `const`s cannot be referenced in patterns because it is impossible\n+for the compiler to prove exhaustiveness (that some pattern will always match).\n+Take the above example, because Rust does type checking in the *generic*\n+method, not the *monomorphized* specific instance. So because `Bar` could have\n+theoretically infinite implementations, there's no way to always be sure that\n+`A::X` is `Foo::One`. So this code must be rejected. Even if code can be\n+proven exhaustive by a programmer, the compiler cannot currently prove this.\n \n-The `static` keyword, on the other hand, guarantees a fixed location in memory.\n-This does not always mean that the value is constant. For example, a global\n-mutex can be declared `static` as well.\n+The same holds true of `const` parameters and `static`s.\n \n-If you want to match against a `static`, consider using a guard instead:\n+If you want to match against an associated `const`, `const` parameter or\n+`static` consider using a guard instead:\n \n ```\n-static FORTY_TWO: i32 = 42;\n+trait Trait {\n+    const X: char;\n+}\n+\n+static FOO: char = 'j';\n \n-match Some(42) {\n-    Some(x) if x == FORTY_TWO => {}\n-    _ => {}\n+fn test<A: Trait, const Y: char>(arg: char) {\n+    match arg {\n+        c if c == A::X => println!(\"A::X\"),\n+        c if c == Y => println!(\"Y\"),\n+        c if c == FOO => println!(\"FOO\"),\n+        _ => ()\n+    }\n }\n ```"}, {"sha": "d40a66715a2ea63a0d7d2af6da0b1a41fc5c06ee", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -689,6 +689,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                 let entry = spanned_predicates.entry(spans);\n                                 entry.or_insert_with(|| (path, tr_self_ty, Vec::new())).2.push(p);\n                             }\n+                            Some(Node::Item(hir::Item {\n+                                kind: hir::ItemKind::Trait(rustc_ast::ast::IsAuto::Yes, ..),\n+                                span: item_span,\n+                                ..\n+                            })) => {\n+                                tcx.sess.delay_span_bug(\n+                                        *item_span,\n+                                        \"auto trait is invoked with no method error, but no error reported?\",\n+                                    );\n+                            }\n                             Some(_) => unreachable!(),\n                             None => (),\n                         }"}, {"sha": "be615b70ced9cfffd9f0ffd2c61752a61410538a", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -2541,7 +2541,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     /// The deque is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the deque\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If the deque is not partitioned, the returned result is unspecified and meaningless,"}, {"sha": "2825e0bbb438593a9217c8a490fd6161f5f2bcd0", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -69,7 +69,7 @@ where\n /// if any element creation was unsuccessful.\n ///\n /// The return type of this function depends on the return type of the closure.\n-/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+/// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n ///\n /// # Arguments\n@@ -522,7 +522,7 @@ impl<T, const N: usize> [T; N] {\n     /// return an array the same size as `self` or the first error encountered.\n     ///\n     /// The return type of this function depends on the return type of the closure.\n-    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N]; E>`.\n+    /// If you return `Result<T, E>` from the closure, you'll get a `Result<[T; N], E>`.\n     /// If you return `Option<T>` from the closure, you'll get an `Option<[T; N]>`.\n     ///\n     /// # Examples"}, {"sha": "bac836292f8fa836c163823280463423b12b6700", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -2734,7 +2734,7 @@ pub trait Iterator {\n     /// the first true result or the first error.\n     ///\n     /// The return type of this method depends on the return type of the closure.\n-    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>; E>`.\n+    /// If you return `Result<bool, E>` from the closure, you'll get a `Result<Option<Self::Item>, E>`.\n     /// If you return `Option<bool>` from the closure, you'll get an `Option<Option<Self::Item>>`.\n     ///\n     /// # Examples"}, {"sha": "8bd2ed45c0a2aa02d19e072415e8c21a9f162f42", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -3795,7 +3795,7 @@ impl<T> [T] {\n     /// The slice is assumed to be partitioned according to the given predicate.\n     /// This means that all elements for which the predicate returns true are at the start of the slice\n     /// and all elements for which the predicate returns false are at the end.\n-    /// For example, [7, 15, 3, 5, 4, 12, 6] is a partitioned under the predicate x % 2 != 0\n+    /// For example, `[7, 15, 3, 5, 4, 12, 6]` is partitioned under the predicate `x % 2 != 0`\n     /// (all odd numbers are at the start, all even at the end).\n     ///\n     /// If this slice is not partitioned, the returned result is unspecified and meaningless,"}, {"sha": "a65bec37e1dc7630ec3c2c988354eb4936789ad7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -396,15 +396,15 @@ img {\n \toverflow-y: hidden;\n }\n \n-.source .sidebar, #sidebar-toggle, #source-sidebar {\n+.source .sidebar, #src-sidebar-toggle, #source-sidebar {\n \tbackground-color: var(--sidebar-background-color);\n }\n \n-#sidebar-toggle > button:hover, #sidebar-toggle > button:focus {\n+#src-sidebar-toggle > button:hover, #src-sidebar-toggle > button:focus {\n \tbackground-color: var(--sidebar-background-color-hover);\n }\n \n-.source .sidebar > *:not(#sidebar-toggle) {\n+.source .sidebar > *:not(#src-sidebar-toggle) {\n \tvisibility: hidden;\n }\n \n@@ -413,7 +413,7 @@ img {\n \tflex-basis: 300px;\n }\n \n-.source-sidebar-expanded .source .sidebar > *:not(#sidebar-toggle) {\n+.source-sidebar-expanded .source .sidebar > *:not(#src-sidebar-toggle) {\n \tvisibility: visible;\n }\n \n@@ -1118,8 +1118,7 @@ pre.rust .doccomment {\n \ttop: 5px;\n }\n \n-.example-wrap .tooltip::after {\n-\tdisplay: none;\n+.example-wrap .tooltip:hover::after {\n \ttext-align: center;\n \tpadding: 5px 3px 3px 3px;\n \tborder-radius: 6px;\n@@ -1134,35 +1133,30 @@ pre.rust .doccomment {\n \tcolor: var(--tooltip-color);\n }\n \n-.example-wrap .tooltip::before {\n+.example-wrap .tooltip:hover::before {\n \tcontent: \" \";\n \tposition: absolute;\n \ttop: 50%;\n \tleft: 16px;\n \tmargin-top: -5px;\n-\tdisplay: none;\n \tz-index: 1;\n \tborder: 5px solid transparent;\n \tborder-right-color: var(--tooltip-background-color);\n }\n \n-.example-wrap.ignore .tooltip::after {\n+.example-wrap.ignore .tooltip:hover::after {\n \tcontent: \"This example is not tested\";\n }\n-.example-wrap.compile_fail .tooltip::after {\n+.example-wrap.compile_fail .tooltip:hover::after {\n \tcontent: \"This example deliberately fails to compile\";\n }\n-.example-wrap.should_panic .tooltip::after {\n+.example-wrap.should_panic .tooltip:hover::after {\n \tcontent: \"This example panics\";\n }\n-.example-wrap.edition .tooltip::after {\n+.example-wrap.edition .tooltip:hover::after {\n \tcontent: \"This code runs with edition \" attr(data-edition);\n }\n \n-.example-wrap .tooltip:hover::before, .example-wrap .tooltip:hover::after {\n-\tdisplay: inline;\n-}\n-\n .example-wrap.compile_fail .tooltip,\n .example-wrap.should_panic .tooltip,\n .example-wrap.ignore .tooltip {\n@@ -1295,7 +1289,7 @@ a.test-arrow:hover {\n \tfont-size: 1rem;\n }\n \n-#sidebar-toggle {\n+#src-sidebar-toggle {\n \tposition: sticky;\n \ttop: 0;\n \tleft: 0;\n@@ -1324,7 +1318,7 @@ a.test-arrow:hover {\n #source-sidebar div.files > a.selected {\n \tbackground-color: var(--source-sidebar-background-selected);\n }\n-#sidebar-toggle > button {\n+#src-sidebar-toggle > button {\n \tfont-size: inherit;\n \tfont-weight: bold;\n \tbackground: none;\n@@ -1726,7 +1720,7 @@ in storage.js\n \t\tleft: -11px;\n \t}\n \n-\t#sidebar-toggle {\n+\t#src-sidebar-toggle {\n \t\tposition: fixed;\n \t\tleft: 1px;\n \t\ttop: 100px;\n@@ -1740,7 +1734,7 @@ in storage.js\n \t\tborder-left: 0;\n \t}\n \n-\t.source-sidebar-expanded #sidebar-toggle {\n+\t.source-sidebar-expanded #src-sidebar-toggle {\n \t\tleft: unset;\n \t\ttop: unset;\n \t\twidth: unset;\n@@ -1851,10 +1845,10 @@ in storage.js\n \t\twidth: 35px;\n \t}\n \n-\t#sidebar-toggle {\n+\t#src-sidebar-toggle {\n \t\ttop: 10px;\n \t}\n-\t.source-sidebar-expanded #sidebar-toggle {\n+\t.source-sidebar-expanded #src-sidebar-toggle {\n \t\ttop: unset;\n \t}\n }"}, {"sha": "875a260c8115ebdb849b8f26593ed7d4981cb4ba", "filename": "src/librustdoc/html/static/css/settings.css", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fsettings.css?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -59,12 +59,6 @@\n \tcursor: pointer;\n }\n \n-.setting-line > .sub-settings {\n-\tpadding-left: 42px;\n-\twidth: 100%;\n-\tdisplay: block;\n-}\n-\n #settings .setting-line {\n \tmargin: 1.2em 0.6em;\n }"}, {"sha": "0e1c864e62d84800243b619e83ba490639e76f00", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -83,7 +83,7 @@ function toggleSidebar() {\n \n function createSidebarToggle() {\n     const sidebarToggle = document.createElement(\"div\");\n-    sidebarToggle.id = \"sidebar-toggle\";\n+    sidebarToggle.id = \"src-sidebar-toggle\";\n \n     const inner = document.createElement(\"button\");\n "}, {"sha": "df665bd46c03b7f5cf053afa41c25d94741935e0", "filename": "src/test/rustdoc-gui/code-sidebar-toggle.goml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcode-sidebar-toggle.goml?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -1,7 +1,7 @@\n // This test checks that the source code pages sidebar toggle is working as expected.\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/index.html\"\n click: \".srclink\"\n-wait-for: \"#sidebar-toggle\"\n-click: \"#sidebar-toggle\"\n+wait-for: \"#src-sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n fail: true\n assert-css: (\"#source-sidebar\", { \"left\": \"-300px\" })"}, {"sha": "aab27394eb1f3b1b50d5ec902aa6a42ae61353eb", "filename": "src/test/rustdoc-gui/codeblock-tooltip.goml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcodeblock-tooltip.goml?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -20,7 +20,7 @@ define-function: (\n             {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"},\n         )),\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.compile_fail\"),\n+        (\"move-cursor-to\", \".docblock .example-wrap.compile_fail .tooltip\"),\n \n         (\"assert-css\", (\n             \".docblock .example-wrap.compile_fail .tooltip\",\n@@ -60,7 +60,7 @@ define-function: (\n             {\"border-left\": \"2px solid rgba(255, 0, 0, 0.5)\"},\n         )),\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.should_panic\"),\n+        (\"move-cursor-to\", \".docblock .example-wrap.should_panic .tooltip\"),\n \n         (\"assert-css\", (\n             \".docblock .example-wrap.should_panic .tooltip\",\n@@ -100,7 +100,7 @@ define-function: (\n             {\"border-left\": \"2px solid rgba(255, 142, 0, 0.6)\"},\n         )),\n \n-        (\"move-cursor-to\", \".docblock .example-wrap.ignore\"),\n+        (\"move-cursor-to\", \".docblock .example-wrap.ignore .tooltip\"),\n \n         (\"assert-css\", (\n             \".docblock .example-wrap.ignore .tooltip\","}, {"sha": "cb6716a76f5c0d6ae17511dfcd2617ee0d75d398", "filename": "src/test/rustdoc-gui/cursor.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcursor.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fcursor.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fcursor.goml?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -21,4 +21,4 @@ assert-css: (\".sidebar-menu-toggle\", {\"cursor\": \"pointer\"})\n \n // the sidebar toggle button on the source code pages\n goto: \"file://\" + |DOC_PATH| + \"/src/lib2/lib.rs.html\"\n-assert-css: (\"#sidebar-toggle > button\", {\"cursor\": \"pointer\"})\n+assert-css: (\"#src-sidebar-toggle > button\", {\"cursor\": \"pointer\"})"}, {"sha": "df4506e1119648a7c76f379170da131cab39d51f", "filename": "src/test/rustdoc-gui/sidebar-source-code-display.goml", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code-display.goml?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -2,18 +2,18 @@\n javascript: false\n goto: \"file://\" + |DOC_PATH| + \"/src/test_docs/lib.rs.html\"\n // Since the javascript is disabled, there shouldn't be a toggle.\n-assert-false: \"#sidebar-toggle\"\n+assert-false: \"#src-sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"display\": \"none\"})\n \n // Let's retry with javascript enabled.\n javascript: true\n reload:\n-wait-for: \"#sidebar-toggle\"\n-assert-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n-assert-css: (\".sidebar > *:not(#sidebar-toggle)\", {\"visibility\": \"hidden\"})\n+wait-for: \"#src-sidebar-toggle\"\n+assert-css: (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})\n+assert-css: (\".sidebar > *:not(#src-sidebar-toggle)\", {\"visibility\": \"hidden\"})\n // Let's expand the sidebar now.\n-click: \"#sidebar-toggle\"\n-wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n+click: \"#src-sidebar-toggle\"\n+wait-for-css: (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})\n \n // We now check that opening the sidebar and clicking a link will leave it open.\n // The behavior here on desktop is different than the behavior on mobile,\n@@ -38,25 +38,25 @@ define-function: (\n     [\n         (\"local-storage\", {\"rustdoc-theme\": |theme|, \"rustdoc-use-system-theme\": \"false\"}),\n         (\"reload\"),\n-        (\"wait-for-css\", (\"#sidebar-toggle\", {\"visibility\": \"visible\"})),\n+        (\"wait-for-css\", (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})),\n         (\"assert-css\", (\n             \"#source-sidebar details[open] > .files a.selected\",\n             {\"color\": |color_hover|, \"background-color\": |background|},\n         )),\n \n         // Without hover or focus.\n-        (\"assert-css\", (\"#sidebar-toggle > button\", {\"background-color\": |background_toggle|})),\n+        (\"assert-css\", (\"#src-sidebar-toggle > button\", {\"background-color\": |background_toggle|})),\n         // With focus.\n-        (\"focus\", \"#sidebar-toggle > button\"),\n+        (\"focus\", \"#src-sidebar-toggle > button\"),\n         (\"assert-css\", (\n-            \"#sidebar-toggle > button:focus\",\n+            \"#src-sidebar-toggle > button:focus\",\n             {\"background-color\": |background_toggle_hover|},\n         )),\n         (\"focus\", \".search-input\"),\n         // With hover.\n-        (\"move-cursor-to\", \"#sidebar-toggle > button\"),\n+        (\"move-cursor-to\", \"#src-sidebar-toggle > button\"),\n         (\"assert-css\", (\n-            \"#sidebar-toggle > button:hover\",\n+            \"#src-sidebar-toggle > button:hover\",\n             {\"background-color\": |background_toggle_hover|},\n         )),\n \n@@ -151,16 +151,16 @@ call-function: (\"check-colors\", {\n size: (500, 700)\n reload:\n // Waiting for the sidebar to be displayed...\n-wait-for-css: (\"#sidebar-toggle\", {\"visibility\": \"visible\"})\n+wait-for-css: (\"#src-sidebar-toggle\", {\"visibility\": \"visible\"})\n \n // We now check it takes the full size of the display.\n assert-property: (\"body\", {\"clientWidth\": \"500\", \"clientHeight\": \"700\"})\n assert-property: (\".sidebar\", {\"clientWidth\": \"500\", \"clientHeight\": \"700\"})\n \n // We now check the display of the toggle once the sidebar is expanded.\n-assert-property: (\"#sidebar-toggle\", {\"clientWidth\": \"500\", \"clientHeight\": \"39\"})\n+assert-property: (\"#src-sidebar-toggle\", {\"clientWidth\": \"500\", \"clientHeight\": \"39\"})\n assert-css: (\n-    \"#sidebar-toggle\",\n+    \"#src-sidebar-toggle\",\n     {\n         \"border-top-width\": \"0px\",\n         \"border-right-width\": \"0px\",\n@@ -170,36 +170,36 @@ assert-css: (\n )\n \n // We now check that the scroll position is kept when opening the sidebar.\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n // We scroll to line 117 to change the scroll position.\n scroll-to: '//*[@id=\"117\"]'\n assert-window-property: {\"pageYOffset\": \"2542\"}\n // Expanding the sidebar...\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"500px\"})\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\".sidebar\", {\"width\": \"0px\"})\n // The \"scrollTop\" property should be the same.\n assert-window-property: {\"pageYOffset\": \"2542\"}\n \n // We now check that the scroll position is restored if the window is resized.\n size: (500, 700)\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-window-property: {\"pageYOffset\": \"0\"}\n size: (900, 900)\n assert-window-property: {\"pageYOffset\": \"2542\"}\n size: (500, 700)\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"hidden\"})\n \n // We now check that opening the sidebar and clicking a link will close it.\n // The behavior here on mobile is different than the behavior on desktop,\n // but common sense dictates that if you have a list of files that fills the entire screen, and\n // you click one of them, you probably want to actually see the file's contents, and not just\n // make it the current selection.\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}\n click: \".sidebar a.selected\"\n@@ -210,6 +210,6 @@ assert-local-storage: {\"rustdoc-source-sidebar-show\": \"false\"}\n size: (1000, 1000)\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"hidden\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"false\"}\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n wait-for-css: (\"#source-sidebar\", {\"visibility\": \"visible\"})\n assert-local-storage: {\"rustdoc-source-sidebar-show\": \"true\"}"}, {"sha": "25da74e5173eba34e77995a5e0ee083e010a8d24", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -97,7 +97,7 @@ assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n // Checking the source code sidebar.\n \n // First we \"open\" it.\n-click: \"#sidebar-toggle\"\n+click: \"#src-sidebar-toggle\"\n assert: \".source-sidebar-expanded\"\n \n // We check that the first entry of the sidebar is collapsed"}, {"sha": "8e8d26a00043d20abf550822b00e45f1f4f601cf", "filename": "src/test/ui/const-generics/defaults/complex-unord-param.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03770f0e2b60c02db8fcf52fed5fb36aac70cedc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03770f0e2b60c02db8fcf52fed5fb36aac70cedc/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcomplex-unord-param.min.stderr?ref=03770f0e2b60c02db8fcf52fed5fb36aac70cedc", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/complex-unord-param.rs:8:41\n-   |\n-LL | struct NestedArrays<'a, const N: usize, A: 'a, const M: usize, T:'a =u32> {\n-   |                    ---------------------^----------------------^--------- help: reorder the parameters: lifetimes, then types, then consts: `<'a, A: 'a, T: 'a = u32, const N: usize, const M: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ad38754c7412e74057a30e76d75284f969e9db4c", "filename": "src/test/ui/const-generics/type-after-const-ok.min.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03770f0e2b60c02db8fcf52fed5fb36aac70cedc/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03770f0e2b60c02db8fcf52fed5fb36aac70cedc/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftype-after-const-ok.min.stderr?ref=03770f0e2b60c02db8fcf52fed5fb36aac70cedc", "patch": "@@ -1,8 +0,0 @@\n-error: type parameters must be declared prior to const parameters\n-  --> $DIR/type-after-const-ok.rs:8:26\n-   |\n-LL | struct A<const N: usize, T>(T);\n-   |         -----------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const N: usize>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "98b7a8d0d04ebab915d60547d001faa6a505f39a", "filename": "src/test/ui/methods/issues/issue-105732.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -0,0 +1,13 @@\n+#![feature(auto_traits)]\n+\n+auto trait Foo {\n+    fn g(&self); //~ ERROR auto traits cannot have associated items\n+}\n+\n+trait Bar {\n+    fn f(&self) {\n+        self.g(); //~ ERROR the method `g` exists for reference `&Self`, but its trait bounds were not satisfied\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "fb2bdf47de7e540022b78cba209412110fe780f7", "filename": "src/test/ui/methods/issues/issue-105732.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fissues%2Fissue-105732.stderr?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -0,0 +1,28 @@\n+error[E0380]: auto traits cannot have associated items\n+  --> $DIR/issue-105732.rs:4:8\n+   |\n+LL | auto trait Foo {\n+   |            --- auto trait cannot have associated items\n+LL |     fn g(&self);\n+   |     ---^-------- help: remove these associated items\n+\n+error[E0599]: the method `g` exists for reference `&Self`, but its trait bounds were not satisfied\n+  --> $DIR/issue-105732.rs:9:14\n+   |\n+LL |         self.g();\n+   |              ^\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `Self: Foo`\n+           which is required by `&Self: Foo`\n+           `&Self: Foo`\n+   = help: items from traits can only be used if the type parameter is bounded by the trait\n+help: the following trait defines an item `g`, perhaps you need to add a supertrait for it:\n+   |\n+LL | trait Bar: Foo {\n+   |          +++++\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0380, E0599.\n+For more information about an error, try `rustc --explain E0380`."}, {"sha": "0622f96e70d818ebf7772d472d4a11aa4337d5a3", "filename": "src/test/ui/rfc-2632-const-trait-impl/const-impl-trait.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fconst-impl-trait.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -0,0 +1,55 @@\n+// check-pass\n+#![allow(incomplete_features)]\n+#![feature(\n+    associated_type_bounds,\n+    const_trait_impl,\n+    const_cmp,\n+    return_position_impl_trait_in_trait,\n+)]\n+\n+use std::marker::Destruct;\n+\n+const fn cmp(a: &impl ~const PartialEq) -> bool {\n+    a == a\n+}\n+\n+const fn wrap(x: impl ~const PartialEq + ~const Destruct)\n+    -> impl ~const PartialEq + ~const Destruct\n+{\n+    x\n+}\n+\n+#[const_trait]\n+trait Foo {\n+    fn huh() -> impl ~const PartialEq + ~const Destruct + Copy;\n+}\n+\n+impl const Foo for () {\n+    fn huh() -> impl ~const PartialEq + ~const Destruct + Copy {\n+        123\n+    }\n+}\n+\n+const _: () = {\n+    assert!(cmp(&0xDEADBEEFu32));\n+    assert!(cmp(&()));\n+    assert!(wrap(123) == wrap(123));\n+    assert!(wrap(123) != wrap(456));\n+    let x = <() as Foo>::huh();\n+    assert!(x == x);\n+};\n+\n+#[const_trait]\n+trait T {}\n+struct S;\n+impl const T for S {}\n+\n+const fn rpit() -> impl ~const T { S }\n+\n+const fn apit(_: impl ~const T + ~const Destruct) {}\n+\n+const fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n+\n+const fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T> + ~const Destruct) {}\n+\n+fn main() {}"}, {"sha": "95f7aaba0fc389fe5d8c895e6a319947bb554829", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.rs?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -1,23 +1,6 @@\n #![feature(const_trait_impl)]\n #![feature(associated_type_bounds)]\n \n-#[const_trait]\n-trait T {}\n-struct S;\n-impl T for S {}\n-\n-fn rpit() -> impl ~const T { S }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit(_: impl ~const T) {}\n-//~^ ERROR `~const` is not allowed\n-\n-fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-//~^ ERROR `~const` is not allowed\n-\n-fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-//~^ ERROR `~const` is not allowed\n-\n struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n //~^ ERROR `~const` and `?` are mutually exclusive\n "}, {"sha": "d20f146df3f1a102fa36cbe168734f1cec616f91", "filename": "src/test/ui/rfc-2632-const-trait-impl/tilde-const-invalid-places.stderr", "status": "modified", "additions": 2, "deletions": 34, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/63b3bac77cece3b4efb3e481ebc9139fedaa0535/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Ftilde-const-invalid-places.stderr?ref=63b3bac77cece3b4efb3e481ebc9139fedaa0535", "patch": "@@ -1,40 +1,8 @@\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:9:19\n-   |\n-LL | fn rpit() -> impl ~const T { S }\n-   |                   ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:12:17\n-   |\n-LL | fn apit(_: impl ~const T) {}\n-   |                 ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:15:50\n-   |\n-LL | fn rpit_assoc_bound() -> impl IntoIterator<Item: ~const T> { Some(S) }\n-   |                                                  ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n-error: `~const` is not allowed here\n-  --> $DIR/tilde-const-invalid-places.rs:18:48\n-   |\n-LL | fn apit_assoc_bound(_: impl IntoIterator<Item: ~const T>) {}\n-   |                                                ^^^^^^^^\n-   |\n-   = note: `impl Trait`s cannot have `~const` trait bounds\n-\n error: `~const` and `?` are mutually exclusive\n-  --> $DIR/tilde-const-invalid-places.rs:21:25\n+  --> $DIR/tilde-const-invalid-places.rs:4:25\n    |\n LL | struct TildeQuestion<T: ~const ?Sized>(std::marker::PhantomData<T>);\n    |                         ^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: aborting due to previous error\n "}]}