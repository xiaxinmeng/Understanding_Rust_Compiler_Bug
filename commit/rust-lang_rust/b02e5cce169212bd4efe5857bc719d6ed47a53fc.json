{"sha": "b02e5cce169212bd4efe5857bc719d6ed47a53fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMmU1Y2NlMTY5MjEyYmQ0ZWZlNTg1N2JjNzE5ZDZlZDQ3YTUzZmM=", "commit": {"author": {"name": "Denis Merigoux", "email": "denis.merigoux@gmail.com", "date": "2018-10-01T08:32:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-11-16T12:40:16Z"}, "message": "Moved Backend interface into rustc_codegen_utils", "tree": {"sha": "1e2f764304be421ed8b51400f97988890144343d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e2f764304be421ed8b51400f97988890144343d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b02e5cce169212bd4efe5857bc719d6ed47a53fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b02e5cce169212bd4efe5857bc719d6ed47a53fc", "html_url": "https://github.com/rust-lang/rust/commit/b02e5cce169212bd4efe5857bc719d6ed47a53fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b02e5cce169212bd4efe5857bc719d6ed47a53fc/comments", "author": {"login": "denismerigoux", "id": 1766128, "node_id": "MDQ6VXNlcjE3NjYxMjg=", "avatar_url": "https://avatars.githubusercontent.com/u/1766128?v=4", "gravatar_id": "", "url": "https://api.github.com/users/denismerigoux", "html_url": "https://github.com/denismerigoux", "followers_url": "https://api.github.com/users/denismerigoux/followers", "following_url": "https://api.github.com/users/denismerigoux/following{/other_user}", "gists_url": "https://api.github.com/users/denismerigoux/gists{/gist_id}", "starred_url": "https://api.github.com/users/denismerigoux/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/denismerigoux/subscriptions", "organizations_url": "https://api.github.com/users/denismerigoux/orgs", "repos_url": "https://api.github.com/users/denismerigoux/repos", "events_url": "https://api.github.com/users/denismerigoux/events{/privacy}", "received_events_url": "https://api.github.com/users/denismerigoux/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b06836e71a1358021c24a000be26612b5fcbee79", "url": "https://api.github.com/repos/rust-lang/rust/commits/b06836e71a1358021c24a000be26612b5fcbee79", "html_url": "https://github.com/rust-lang/rust/commit/b06836e71a1358021c24a000be26612b5fcbee79"}], "stats": {"total": 242, "additions": 129, "deletions": 113}, "files": [{"sha": "de69531fa8bffd5625b47255b10f10f2f7b06ae3", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -24,7 +24,8 @@ use rustc::util::common::time_ext;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_codegen_utils::symbol_export;\n use time_graph::Timeline;\n-use {ModuleCodegen, ModuleLlvm, ModuleKind};\n+use ModuleLlvm;\n+use rustc_codegen_utils::{ModuleCodegen, ModuleKind};\n \n use libc;\n "}, {"sha": "d96dd93e3e2c3a5ee1fd220dd25c30d813b79413", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -26,8 +26,8 @@ use rustc::util::nodemap::FxHashMap;\n use time_graph::{self, TimeGraph, Timeline};\n use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use llvm_util;\n-use {CodegenResults, ModuleCodegen, CompiledModule, ModuleKind, ModuleLlvm,\n-     CachedModuleCodegen};\n+use {CodegenResults, ModuleLlvm};\n+use rustc_codegen_utils::{ModuleCodegen, ModuleKind, CachedModuleCodegen, CompiledModule};\n use CrateInfo;\n use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;"}, {"sha": "d8f5c25714f664339b8ef8cd8a512198be716a1e", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -24,9 +24,7 @@\n //!     int) and rec(x=int, y=int, z=int) will have the same llvm::Type.\n \n use super::ModuleLlvm;\n-use super::ModuleCodegen;\n-use super::ModuleKind;\n-use super::CachedModuleCodegen;\n+use rustc_codegen_utils::{ModuleCodegen, ModuleKind, CachedModuleCodegen};\n use super::LlvmCodegenBackend;\n \n use abi;\n@@ -1197,25 +1195,3 @@ pub fn visibility_to_llvm(linkage: Visibility) -> llvm::Visibility {\n         Visibility::Protected => llvm::Visibility::Protected,\n     }\n }\n-\n-// FIXME(mw): Anything that is produced via DepGraph::with_task() must implement\n-//            the HashStable trait. Normally DepGraph::with_task() calls are\n-//            hidden behind queries, but CGU creation is a special case in two\n-//            ways: (1) it's not a query and (2) CGU are output nodes, so their\n-//            Fingerprints are not actually needed. It remains to be clarified\n-//            how exactly this case will be handled in the red/green system but\n-//            for now we content ourselves with providing a no-op HashStable\n-//            implementation for CGUs.\n-mod temp_stable_hash_impls {\n-    use rustc_data_structures::stable_hasher::{StableHasherResult, StableHasher,\n-                                               HashStable};\n-    use {ModuleCodegen, ModuleLlvm};\n-\n-    impl<HCX> HashStable<HCX> for ModuleCodegen<ModuleLlvm> {\n-        fn hash_stable<W: StableHasherResult>(&self,\n-                                              _: &mut HCX,\n-                                              _: &mut StableHasher<W>) {\n-            // do nothing\n-        }\n-    }\n-}"}, {"sha": "ffe9679fcd6cbc8c358fc4bf43ece9ac4b726120", "filename": "src/librustc_codegen_llvm/interfaces/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fasm.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use super::HasCodegen;\n use mir::place::PlaceRef;\n use rustc::hir::{GlobalAsm, InlineAsm};"}, {"sha": "74a31975a390e0b3f2ea95ad055610a3ff5dfd58", "filename": "src/librustc_codegen_llvm/interfaces/builder.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fbuilder.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -213,7 +213,8 @@ pub trait BuilderMethods<'a, 'tcx: 'a>:\n     fn set_cleanup(&self, landing_pad: Self::Value);\n     fn resume(&self, exn: Self::Value) -> Self::Value;\n     fn cleanup_pad(&self, parent: Option<Self::Value>, args: &[Self::Value]) -> Self::Funclet;\n-    fn cleanup_ret(&self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>) -> Self::Value;\n+    fn cleanup_ret(&self, funclet: &Self::Funclet, unwind: Option<Self::BasicBlock>)\n+        -> Self::Value;\n     fn catch_pad(&self, parent: Self::Value, args: &[Self::Value]) -> Self::Funclet;\n     fn catch_ret(&self, funclet: &Self::Funclet, unwind: Self::BasicBlock) -> Self::Value;\n     fn catch_switch("}, {"sha": "24f6cb85c7bd02c190cdb6f7b64d9488a754dc2d", "filename": "src/librustc_codegen_llvm/interfaces/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdebuginfo.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use super::HasCodegen;\n use debuginfo::{FunctionDebugContext, MirDebugScope, VariableAccess, VariableKind};\n use monomorphize::Instance;"}, {"sha": "373220fd345e8b82cfa1c5a65a00effa45e5df6c", "filename": "src/librustc_codegen_llvm/interfaces/declare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fdeclare.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use monomorphize::Instance;\n use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};"}, {"sha": "1ea377b5a1d020c7808494fdcead598a9f6567ed", "filename": "src/librustc_codegen_llvm/interfaces/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fintrinsic.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use super::HasCodegen;\n use abi::FnType;\n use mir::operand::OperandRef;"}, {"sha": "6e6af597a763f1617c11136bc68b921d70635bc6", "filename": "src/librustc_codegen_llvm/interfaces/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmisc.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use libc::c_uint;\n use monomorphize::partitioning::CodegenUnit;\n use rustc::mir::mono::Stats;"}, {"sha": "61aa7e29326ba39bd83ed2f312ba13650b1e4451", "filename": "src/librustc_codegen_llvm/interfaces/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fmod.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -10,7 +10,6 @@\n \n mod abi;\n mod asm;\n-mod backend;\n mod builder;\n mod consts;\n mod debuginfo;\n@@ -22,7 +21,6 @@ mod type_;\n \n pub use self::abi::{AbiBuilderMethods, AbiMethods};\n pub use self::asm::{AsmBuilderMethods, AsmMethods};\n-pub use self::backend::{Backend, BackendMethods, BackendTypes};\n pub use self::builder::BuilderMethods;\n pub use self::consts::ConstMethods;\n pub use self::debuginfo::{DebugInfoBuilderMethods, DebugInfoMethods};\n@@ -33,8 +31,7 @@ pub use self::statics::StaticMethods;\n pub use self::type_::{\n     ArgTypeMethods, BaseTypeMethods, DerivedTypeMethods, LayoutTypeMethods, TypeMethods,\n };\n-\n-use std::fmt;\n+pub use rustc_codegen_utils::interfaces::{Backend, BackendMethods, BackendTypes, CodegenObject};\n \n pub trait CodegenMethods<'tcx>:\n     Backend<'tcx>\n@@ -76,6 +73,3 @@ pub trait HasCodegen<'tcx>: Backend<'tcx> {\n             DIScope = Self::DIScope,\n         >;\n }\n-\n-pub trait CodegenObject: Copy + PartialEq + fmt::Debug {}\n-impl<T: Copy + PartialEq + fmt::Debug> CodegenObject for T {}"}, {"sha": "27748a8dd427f82a835e2a49b6adca4305d3689e", "filename": "src/librustc_codegen_llvm/interfaces/statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Fstatics.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use rustc::hir::def_id::DefId;\n use rustc::ty::layout::Align;\n "}, {"sha": "775ca2d2d0268dd77a342d67917e40aacfc2fbf0", "filename": "src/librustc_codegen_llvm/interfaces/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Finterfaces%2Ftype_.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use super::backend::Backend;\n+use super::Backend;\n use super::HasCodegen;\n use mir::place::PlaceRef;\n use rustc::ty::layout::TyLayout;"}, {"sha": "e8f488ab04c17ef33eb950c1cf387d1197f86066", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -37,7 +37,6 @@\n #![feature(static_nobundle)]\n \n use back::write::create_target_machine;\n-use rustc::dep_graph::WorkProduct;\n use syntax_pos::symbol::Symbol;\n \n #[macro_use] extern crate bitflags;\n@@ -67,7 +66,6 @@ extern crate cc; // Used to locate MSVC\n extern crate tempfile;\n extern crate memmap;\n \n-use back::bytecode::RLIB_BYTECODE_EXTENSION;\n use interfaces::*;\n use time_graph::TimeGraph;\n use std::sync::mpsc::Receiver;\n@@ -93,7 +91,7 @@ use rustc::util::time_graph;\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::util::profiling::ProfileCategory;\n use rustc_mir::monomorphize;\n-use rustc_codegen_utils::{CompiledModule, ModuleKind};\n+use rustc_codegen_utils::{ModuleCodegen, CompiledModule};\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use rustc_data_structures::svh::Svh;\n \n@@ -329,56 +327,6 @@ pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n     LlvmCodegenBackend::new()\n }\n \n-pub struct ModuleCodegen<M> {\n-    /// The name of the module. When the crate may be saved between\n-    /// compilations, incremental compilation requires that name be\n-    /// unique amongst **all** crates.  Therefore, it should contain\n-    /// something unique to this crate (e.g., a module path) as well\n-    /// as the crate name and disambiguator.\n-    /// We currently generate these names via CodegenUnit::build_cgu_name().\n-    name: String,\n-    module_llvm: M,\n-    kind: ModuleKind,\n-}\n-\n-struct CachedModuleCodegen {\n-    name: String,\n-    source: WorkProduct,\n-}\n-\n-impl ModuleCodegen<ModuleLlvm> {\n-    fn into_compiled_module(self,\n-                            emit_obj: bool,\n-                            emit_bc: bool,\n-                            emit_bc_compressed: bool,\n-                            outputs: &OutputFilenames) -> CompiledModule {\n-        let object = if emit_obj {\n-            Some(outputs.temp_path(OutputType::Object, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode = if emit_bc {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name)))\n-        } else {\n-            None\n-        };\n-        let bytecode_compressed = if emit_bc_compressed {\n-            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n-                        .with_extension(RLIB_BYTECODE_EXTENSION))\n-        } else {\n-            None\n-        };\n-\n-        CompiledModule {\n-            name: self.name.clone(),\n-            kind: self.kind,\n-            object,\n-            bytecode,\n-            bytecode_compressed,\n-        }\n-    }\n-}\n-\n pub struct ModuleLlvm {\n     llcx: &'static mut llvm::Context,\n     llmod_raw: *const llvm::Module,"}, {"sha": "3f4389913ae49bad346b661eb61f8c050520f68f", "filename": "src/librustc_codegen_utils/common.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcommon.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -113,3 +113,25 @@ pub enum TypeKind {\n     X86_MMX,\n     Token,\n }\n+\n+// FIXME(mw): Anything that is produced via DepGraph::with_task() must implement\n+//            the HashStable trait. Normally DepGraph::with_task() calls are\n+//            hidden behind queries, but CGU creation is a special case in two\n+//            ways: (1) it's not a query and (2) CGU are output nodes, so their\n+//            Fingerprints are not actually needed. It remains to be clarified\n+//            how exactly this case will be handled in the red/green system but\n+//            for now we content ourselves with providing a no-op HashStable\n+//            implementation for CGUs.\n+mod temp_stable_hash_impls {\n+    use rustc_data_structures::stable_hasher::{StableHasherResult, StableHasher,\n+                                               HashStable};\n+    use ModuleCodegen;\n+\n+    impl<HCX, M> HashStable<HCX> for ModuleCodegen<M> {\n+        fn hash_stable<W: StableHasherResult>(&self,\n+                                              _: &mut HCX,\n+                                              _: &mut StableHasher<W>) {\n+            // do nothing\n+        }\n+    }\n+}"}, {"sha": "3cdb1c6a0dde1ba03cb34da543950c4711209bcf", "filename": "src/librustc_codegen_utils/interfaces/backend.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Finterfaces%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Finterfaces%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Finterfaces%2Fbackend.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -17,10 +17,10 @@ use rustc::middle::cstore::EncodedMetadata;\n use rustc::mir::mono::Stats;\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc::util::time_graph::TimeGraph;\n use std::any::Any;\n use std::sync::mpsc::Receiver;\n use syntax_pos::symbol::InternedString;\n-use time_graph::TimeGraph;\n use ModuleCodegen;\n \n pub trait BackendTypes {", "previous_filename": "src/librustc_codegen_llvm/interfaces/backend.rs"}, {"sha": "f958dbabe68ad506ffcefb2bf35dc6cb3bb7a5c4", "filename": "src/librustc_codegen_utils/interfaces/mod.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Finterfaces%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Finterfaces%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Finterfaces%2Fmod.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod backend;\n+\n+pub use self::backend::{Backend, BackendMethods, BackendTypes};\n+\n+use std::fmt;\n+\n+pub trait CodegenObject: Copy + PartialEq + fmt::Debug {}\n+impl<T: Copy + PartialEq + fmt::Debug> CodegenObject for T {}"}, {"sha": "4fb182e4f05402e1aae56228fc814a37de76508c", "filename": "src/librustc_codegen_utils/lib.rs", "status": "modified", "additions": 72, "deletions": 16, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b02e5cce169212bd4efe5857bc719d6ed47a53fc/src%2Flibrustc_codegen_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Flib.rs?ref=b02e5cce169212bd4efe5857bc719d6ed47a53fc", "patch": "@@ -21,6 +21,7 @@\n #![feature(custom_attribute)]\n #![feature(nll)]\n #![allow(unused_attributes)]\n+#![allow(dead_code)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n \n@@ -46,8 +47,11 @@ use std::path::PathBuf;\n \n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n+use rustc::dep_graph::WorkProduct;\n+use rustc::session::config::{OutputFilenames, OutputType};\n \n pub mod command;\n+pub mod interfaces;\n pub mod link;\n pub mod linker;\n pub mod codegen_backend;\n@@ -56,27 +60,53 @@ pub mod symbol_names;\n pub mod symbol_names_test;\n pub mod common;\n \n-/// check for the #[rustc_error] annotation, which forces an\n-/// error in codegen. This is used to write compile-fail tests\n-/// that actually test that compilation succeeds without\n-/// reporting an error.\n-pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n-    if let Some((id, span, _)) = *tcx.sess.entry_fn.borrow() {\n-        let main_def_id = tcx.hir.local_def_id(id);\n+pub struct ModuleCodegen<M> {\n+    /// The name of the module. When the crate may be saved between\n+    /// compilations, incremental compilation requires that name be\n+    /// unique amongst **all** crates.  Therefore, it should contain\n+    /// something unique to this crate (e.g., a module path) as well\n+    /// as the crate name and disambiguator.\n+    /// We currently generate these names via CodegenUnit::build_cgu_name().\n+    pub name: String,\n+    pub module_llvm: M,\n+    pub kind: ModuleKind,\n+}\n \n-        if tcx.has_attr(main_def_id, \"rustc_error\") {\n-            tcx.sess.span_fatal(span, \"compilation successful\");\n+pub const RLIB_BYTECODE_EXTENSION: &str = \"bc.z\";\n+\n+impl<M> ModuleCodegen<M> {\n+    pub fn into_compiled_module(self,\n+                            emit_obj: bool,\n+                            emit_bc: bool,\n+                            emit_bc_compressed: bool,\n+                            outputs: &OutputFilenames) -> CompiledModule {\n+        let object = if emit_obj {\n+            Some(outputs.temp_path(OutputType::Object, Some(&self.name)))\n+        } else {\n+            None\n+        };\n+        let bytecode = if emit_bc {\n+            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name)))\n+        } else {\n+            None\n+        };\n+        let bytecode_compressed = if emit_bc_compressed {\n+            Some(outputs.temp_path(OutputType::Bitcode, Some(&self.name))\n+                    .with_extension(RLIB_BYTECODE_EXTENSION))\n+        } else {\n+            None\n+        };\n+\n+        CompiledModule {\n+            name: self.name.clone(),\n+            kind: self.kind,\n+            object,\n+            bytecode,\n+            bytecode_compressed,\n         }\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n-pub enum ModuleKind {\n-    Regular,\n-    Metadata,\n-    Allocator,\n-}\n-\n #[derive(Debug)]\n pub struct CompiledModule {\n     pub name: String,\n@@ -86,6 +116,32 @@ pub struct CompiledModule {\n     pub bytecode_compressed: Option<PathBuf>,\n }\n \n+pub struct CachedModuleCodegen {\n+    pub name: String,\n+    pub source: WorkProduct,\n+}\n+\n+#[derive(Copy, Clone, Debug, PartialEq)]\n+pub enum ModuleKind {\n+    Regular,\n+    Metadata,\n+    Allocator,\n+}\n+\n+/// check for the #[rustc_error] annotation, which forces an\n+/// error in codegen. This is used to write compile-fail tests\n+/// that actually test that compilation succeeds without\n+/// reporting an error.\n+pub fn check_for_rustc_errors_attr(tcx: TyCtxt) {\n+    if let Some((id, span, _)) = *tcx.sess.entry_fn.borrow() {\n+        let main_def_id = tcx.hir.local_def_id(id);\n+\n+        if tcx.has_attr(main_def_id, \"rustc_error\") {\n+            tcx.sess.span_fatal(span, \"compilation successful\");\n+        }\n+    }\n+}\n+\n pub fn find_library(name: &str, search_paths: &[PathBuf], sess: &Session)\n                     -> PathBuf {\n     // On Windows, static libraries sometimes show up as libfoo.a and other"}]}