{"sha": "1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjY2FkYTZjZDNkMTg3YWJlM2I0Y2JiYjUxYjA3ZmE4YzBjNjFjZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-23T14:53:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-23T14:53:43Z"}, "message": "Auto merge of #33735 - jseyfried:concat_idents_in_ty_positions, r=nrc\n\nAllow `concat_idents!` in type positions as well as in expression positions\n\nThis allows the `concat_idents!` macro in type positions as well as in expression positions.\nr? @nrc", "tree": {"sha": "1eed7a9c2de9fbe61c52c7744a0c116a20452880", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eed7a9c2de9fbe61c52c7744a0c116a20452880"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "html_url": "https://github.com/rust-lang/rust/commit/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c6b6c200befdef9d5882a8edf135efc20de905a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6b6c200befdef9d5882a8edf135efc20de905a", "html_url": "https://github.com/rust-lang/rust/commit/4c6b6c200befdef9d5882a8edf135efc20de905a"}, {"sha": "e99279428223683bc149c12db712c9bca5b74cac", "url": "https://api.github.com/repos/rust-lang/rust/commits/e99279428223683bc149c12db712c9bca5b74cac", "html_url": "https://github.com/rust-lang/rust/commit/e99279428223683bc149c12db712c9bca5b74cac"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "3d5f32eadb3c4dec8d28d950a62e1ea7f194258f", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "patch": "@@ -52,22 +52,36 @@ pub fn expand_syntax_ext<'cx>(cx: &mut ExtCtxt, sp: Span, tts: &[TokenTree])\n     }\n     let res = str_to_ident(&res_str);\n \n-    let e = P(ast::Expr {\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprKind::Path(None,\n-            ast::Path {\n-                 span: sp,\n-                 global: false,\n-                 segments: vec!(\n-                    ast::PathSegment {\n-                        identifier: res,\n-                        parameters: ast::PathParameters::none(),\n-                    }\n-                )\n-            }\n-        ),\n-        span: sp,\n-        attrs: None,\n-    });\n-    MacEager::expr(e)\n+    struct Result { ident: ast::Ident, span: Span };\n+\n+    impl Result {\n+        fn path(&self) -> ast::Path {\n+            let segment = ast::PathSegment {\n+                identifier: self.ident,\n+                parameters: ast::PathParameters::none()\n+            };\n+            ast::Path { span: self.span, global: false, segments: vec![segment] }\n+        }\n+    }\n+\n+    impl base::MacResult for Result {\n+        fn make_expr(self: Box<Self>) -> Option<P<ast::Expr>> {\n+            Some(P(ast::Expr {\n+                id: ast::DUMMY_NODE_ID,\n+                node: ast::ExprKind::Path(None, self.path()),\n+                span: self.span,\n+                attrs: None,\n+            }))\n+        }\n+\n+        fn make_ty(self: Box<Self>) -> Option<P<ast::Ty>> {\n+            Some(P(ast::Ty {\n+                id: ast::DUMMY_NODE_ID,\n+                node: ast::TyKind::Path(None, self.path()),\n+                span: self.span,\n+            }))\n+        }\n+    }\n+\n+    Box::new(Result { ident: res, span: sp })\n }"}, {"sha": "3e36b126523a7f84828dd5fd7180ae54724c5aaf", "filename": "src/test/compile-fail/syntax-extension-minor.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-minor.rs?ref=1ccada6cd3d187abe3b4cbbb51b07fa8c0c61cea", "patch": "@@ -8,12 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// this now fails (correctly, I claim) because hygiene prevents\n-// the assembled identifier from being a reference to the binding.\n-#![feature(concat_idents)]\n+#![feature(concat_idents, type_macros)]\n \n pub fn main() {\n+    struct Foo;\n+    let _: concat_idents!(F, oo) = Foo; // Test that `concat_idents!` can be used in type positions\n+\n     let asdf_fdsa = \"<.<\".to_string();\n+    // this now fails (correctly, I claim) because hygiene prevents\n+    // the assembled identifier from being a reference to the binding.\n     assert!(concat_idents!(asd, f_f, dsa) == \"<.<\".to_string());\n     //~^ ERROR: unresolved name `asdf_fdsa`\n "}]}