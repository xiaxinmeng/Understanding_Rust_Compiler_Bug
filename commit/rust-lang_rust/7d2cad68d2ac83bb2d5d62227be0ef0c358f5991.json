{"sha": "7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "node_id": "C_kwDOAAsO6NoAKDdkMmNhZDY4ZDJhYzgzYmIyZDVkNjIyMjdiZTBlZjBjMzU4ZjU5OTE", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-07T13:52:59Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-07T13:52:59Z"}, "message": "Deduplicate the error printing code for hidden type mismatches", "tree": {"sha": "7002c3195a8bb2414cb2e0d377fe5e6300a003bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7002c3195a8bb2414cb2e0d377fe5e6300a003bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "html_url": "https://github.com/rust-lang/rust/commit/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25876b35410d3b6fddc895c73033c31200dd059b", "url": "https://api.github.com/repos/rust-lang/rust/commits/25876b35410d3b6fddc895c73033c31200dd059b", "html_url": "https://github.com/rust-lang/rust/commit/25876b35410d3b6fddc895c73033c31200dd059b"}], "stats": {"total": 49, "additions": 24, "deletions": 25}, "files": [{"sha": "fa07c4fa9491dfb7952c33c6d1feaa21373cc5f7", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "patch": "@@ -128,17 +128,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let Some(prev) = result.get_mut(&opaque_type_key.def_id) {\n                 if prev.ty != ty {\n                     if !ty.references_error() {\n-                        let mut err = infcx.tcx.sess.struct_span_err(\n-                            concrete_type.span,\n-                            \"concrete type differs from previous defining opaque type use\",\n+                        prev.report_mismatch(\n+                            &OpaqueHiddenType { ty, span: concrete_type.span },\n+                            infcx.tcx,\n                         );\n-                        err.span_label(prev.span, format!(\"expected `{}`, got `{}`\", prev.ty, ty));\n-                        if prev.span == concrete_type.span {\n-                            err.span_label(prev.span, \"this expression supplies two conflicting concrete types for the same opaque type\");\n-                        } else {\n-                            err.span_note(prev.span, \"previous use here\");\n-                        }\n-                        err.emit();\n                     }\n                     prev.ty = infcx.tcx.ty_error();\n                 }"}, {"sha": "6e3dc92a2332f271adb32d280c06b6836e5067eb", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "patch": "@@ -1112,6 +1112,26 @@ pub struct OpaqueHiddenType<'tcx> {\n     pub ty: Ty<'tcx>,\n }\n \n+impl<'tcx> OpaqueHiddenType<'tcx> {\n+    pub fn report_mismatch(&self, other: &Self, tcx: TyCtxt<'tcx>) {\n+        // Found different concrete types for the opaque type.\n+        let mut err = tcx.sess.struct_span_err(\n+            other.span,\n+            \"concrete type differs from previous defining opaque type use\",\n+        );\n+        err.span_label(other.span, format!(\"expected `{}`, got `{}`\", self.ty, other.ty));\n+        if self.span == other.span {\n+            err.span_label(\n+                self.span,\n+                \"this expression supplies two conflicting concrete types for the same opaque type\",\n+            );\n+        } else {\n+            err.span_note(self.span, \"previous use here\");\n+        }\n+        err.emit();\n+    }\n+}\n+\n rustc_index::newtype_index! {\n     /// \"Universes\" are used during type- and trait-checking in the\n     /// presence of `for<..>` binders to control what sets of names are"}, {"sha": "785538ab0df3d621c3517d5094f06230968cbd33", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d2cad68d2ac83bb2d5d62227be0ef0c358f5991/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7d2cad68d2ac83bb2d5d62227be0ef0c358f5991", "patch": "@@ -601,21 +601,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Ty<'_> {\n \n                 if let Some(prev) = self.found {\n                     if concrete_type.ty != prev.ty && !(concrete_type, prev).references_error() {\n-                        // Found different concrete types for the opaque type.\n-                        let mut err = self.tcx.sess.struct_span_err(\n-                            concrete_type.span,\n-                            \"concrete type differs from previous defining opaque type use\",\n-                        );\n-                        err.span_label(\n-                            concrete_type.span,\n-                            format!(\"expected `{}`, got `{}`\", prev.ty, concrete_type.ty),\n-                        );\n-                        if prev.span == concrete_type.span {\n-                            err.span_label(prev.span, \"this expression supplies two conflicting concrete types for the same opaque type\");\n-                        } else {\n-                            err.span_note(prev.span, \"previous use here\");\n-                        }\n-                        err.emit();\n+                        prev.report_mismatch(&concrete_type, self.tcx);\n                     }\n                 } else {\n                     self.found = Some(concrete_type);"}]}