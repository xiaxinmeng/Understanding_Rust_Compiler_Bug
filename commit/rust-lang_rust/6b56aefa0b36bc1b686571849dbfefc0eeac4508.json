{"sha": "6b56aefa0b36bc1b686571849dbfefc0eeac4508", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTZhZWZhMGIzNmJjMWI2ODY1NzE4NDlkYmZlZmMwZWVhYzQ1MDg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T12:20:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-18T12:20:30Z"}, "message": "Auto merge of #1239 - elichai:2020-03-abort-intrinsics, r=RalfJung\n\nAbort instead of panic on asserting intrinsics\n\nThis fixes #1222\nreplacing the panic with an abort and a corresponding message.\nthe stack trace is already printed, this just adds an optional message the caller can pass, and I just pass the same message we passed to the panic but now to the abort instead.\n\nr? @RalfJung", "tree": {"sha": "fce9514f56d312c403f5693013514e26bbf72364", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fce9514f56d312c403f5693013514e26bbf72364"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b56aefa0b36bc1b686571849dbfefc0eeac4508", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b56aefa0b36bc1b686571849dbfefc0eeac4508", "html_url": "https://github.com/rust-lang/rust/commit/6b56aefa0b36bc1b686571849dbfefc0eeac4508", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b56aefa0b36bc1b686571849dbfefc0eeac4508/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51", "html_url": "https://github.com/rust-lang/rust/commit/5e7fd2b44d802d0a3c0aa8f5e2598b9a3c10fa51"}, {"sha": "0826899ca04af6700269bde37137ab41d2f4dae5", "url": "https://api.github.com/repos/rust-lang/rust/commits/0826899ca04af6700269bde37137ab41d2f4dae5", "html_url": "https://github.com/rust-lang/rust/commit/0826899ca04af6700269bde37137ab41d2f4dae5"}], "stats": {"total": 85, "additions": 23, "deletions": 62}, "files": [{"sha": "b2590a843ba9676ebb9b691060de71856d1e366d", "filename": "src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -20,7 +20,8 @@ pub fn report_diagnostic<'tcx, 'mir>(\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n             match info {\n                 TerminationInfo::Exit(code) => return Some(*code),\n-                TerminationInfo::Abort => format!(\"the evaluated program aborted execution\"),\n+                TerminationInfo::Abort(None) => format!(\"the evaluated program aborted execution\"),\n+                TerminationInfo::Abort(Some(msg)) => format!(\"the evaluated program aborted execution: {}\", msg),\n             }\n         }\n         err_unsup!(NoMirFor(..)) => format!("}, {"sha": "898e1ff6e4be4a5aed45858fcfd67e03cece9c27", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -54,7 +54,7 @@ impl Default for MiriConfig {\n /// Details of premature program termination.\n pub enum TerminationInfo {\n     Exit(i64),\n-    Abort,\n+    Abort(Option<String>),\n }\n \n /// Returns a freshly created `InterpCx`, along with an `MPlaceTy` representing"}, {"sha": "3a8e7fc9024132e668e84edd0194982fb38eba0f", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -273,7 +273,7 @@ impl<'mir, 'tcx> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n \n     #[inline(always)]\n     fn abort(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx, !> {\n-        throw_machine_stop!(TerminationInfo::Abort)\n+        throw_machine_stop!(TerminationInfo::Abort(None))\n     }\n \n     #[inline(always)]"}, {"sha": "a08c8a56cf2d548421be5a7f0c619d7119cedb46", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -410,15 +410,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"assert_uninit_valid\" => {\n                 let ty = substs.type_at(0);\n                 let layout = this.layout_of(ty)?;\n-                // Return here because we panicked instead of returning normally from the intrinsic.\n+                // Abort here because the caller might not be panic safe.\n                 if layout.abi.is_uninhabited() {\n-                    return this.start_panic(&format!(\"attempted to instantiate uninhabited type `{}`\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to instantiate uninhabited type `{}`\", ty))))\n                 }\n                 if intrinsic_name == \"assert_zero_valid\" && !layout.might_permit_raw_init(this, /*zero:*/ true).unwrap() {\n-                    return this.start_panic(&format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to zero-initialize type `{}`, which is invalid\", ty))))\n                 }\n                 if intrinsic_name == \"assert_uninit_valid\" && !layout.might_permit_raw_init(this, /*zero:*/ false).unwrap() {\n-                    return this.start_panic(&format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty), unwind);\n+                    throw_machine_stop!(TerminationInfo::Abort(Some(format!(\"attempted to leave type `{}` uninitialized, which is invalid\", ty))))\n                 }\n             }\n "}, {"sha": "78c2b0fbeeb7232f6e142b15ac799edfbb24a74f", "filename": "tests/compile-fail/invalid_zero_init.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Fcompile-fail%2Finvalid_zero_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Fcompile-fail%2Finvalid_zero_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_zero_init.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -0,0 +1,6 @@\n+ // error-pattern: the evaluated program aborted execution: attempted to zero-initialize type `fn()`, which is invalid\n+\n+#[allow(deprecated, invalid_value)]\n+fn main() {\n+    unsafe { std::mem::zeroed::<fn()>() };\n+}"}, {"sha": "b9048830783f8e1ae7877e87e36136c580cb4153", "filename": "tests/compile-fail/uninit_uninhabited_type.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Fcompile-fail%2Funinit_uninhabited_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Fcompile-fail%2Funinit_uninhabited_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funinit_uninhabited_type.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -0,0 +1,7 @@\n+ // error-pattern: the evaluated program aborted execution: attempted to instantiate uninhabited type `!`\n+#![feature(never_type)]\n+\n+#[allow(deprecated, invalid_value)]\n+fn main() {\n+    unsafe { std::mem::uninitialized::<!>() };\n+}"}, {"sha": "6408c940d98a4be5afc735db653178767a2f8544", "filename": "tests/run-pass/panic/catch_panic.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.rs?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -67,43 +67,6 @@ fn main() {\n         |_old_val| { let _val = 1/0; loop {} },\n     );\n \n-    // libcore panics from shims.\n-    #[allow(deprecated, invalid_value)]\n-    {\n-        test(\n-            Some(\"attempted to instantiate uninhabited type `!`\"),\n-            |_old_val| unsafe { std::mem::uninitialized::<!>() },\n-        );\n-        test(\n-            Some(\"attempted to instantiate uninhabited type `!`\"),\n-            |_old_val| unsafe { std::mem::zeroed::<!>() },\n-        );\n-        test(\n-            Some(\"attempted to leave type `fn()` uninitialized, which is invalid\"),\n-            |_old_val| unsafe { std::mem::uninitialized::<fn()>(); loop {} },\n-        );\n-        test(\n-            Some(\"attempted to zero-initialize type `fn()`, which is invalid\"),\n-            |_old_val| unsafe { std::mem::zeroed::<fn()>(); loop {} },\n-        );\n-        test(\n-            Some(\"attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid\"),\n-            |_old_val| unsafe { std::mem::uninitialized::<*const dyn Sync>(); loop {} },\n-        );\n-        test(\n-            Some(\"attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid\"),\n-            |_old_val| unsafe { std::mem::zeroed::<*mut dyn Sync>(); loop {} },\n-        );\n-        test(\n-            Some(\"attempted to leave type `&u8` uninitialized, which is invalid\"),\n-            |_old_val| unsafe { std::mem::uninitialized::<&u8>(); loop {} },\n-        );\n-        test(\n-            Some(\"attempted to zero-initialize type `&u8`, which is invalid\"),\n-            |_old_val| unsafe { std::mem::zeroed::<&u8>(); loop {} },\n-        );\n-    }\n-\n     test(\n         Some(\"align_offset: align is not a power-of-two\"),\n         |_old_val| { (0usize as *const u8).align_offset(3); loop {} },"}, {"sha": "6da9cd29963a6b09dc8b75a1fea7f2e2f572f80a", "filename": "tests/run-pass/panic/catch_panic.stderr", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b56aefa0b36bc1b686571849dbfefc0eeac4508/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Fcatch_panic.stderr?ref=6b56aefa0b36bc1b686571849dbfefc0eeac4508", "patch": "@@ -16,27 +16,11 @@ thread 'main' panicked at 'index out of bounds: the len is 3 but the index is 4'\n Caught panic message (String): index out of bounds: the len is 3 but the index is 4\n thread 'main' panicked at 'attempt to divide by zero', $DIR/catch_panic.rs:67:33\n Caught panic message (String): attempt to divide by zero\n-thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n-Caught panic message (String): attempted to instantiate uninhabited type `!`\n-thread 'main' panicked at 'attempted to instantiate uninhabited type `!`', $LOC\n-Caught panic message (String): attempted to instantiate uninhabited type `!`\n-thread 'main' panicked at 'attempted to leave type `fn()` uninitialized, which is invalid', $LOC\n-Caught panic message (String): attempted to leave type `fn()` uninitialized, which is invalid\n-thread 'main' panicked at 'attempted to zero-initialize type `fn()`, which is invalid', $LOC\n-Caught panic message (String): attempted to zero-initialize type `fn()`, which is invalid\n-thread 'main' panicked at 'attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid', $LOC\n-Caught panic message (String): attempted to leave type `*const dyn std::marker::Sync` uninitialized, which is invalid\n-thread 'main' panicked at 'attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid', $LOC\n-Caught panic message (String): attempted to zero-initialize type `*mut dyn std::marker::Sync`, which is invalid\n-thread 'main' panicked at 'attempted to leave type `&u8` uninitialized, which is invalid', $LOC\n-Caught panic message (String): attempted to leave type `&u8` uninitialized, which is invalid\n-thread 'main' panicked at 'attempted to zero-initialize type `&u8`, which is invalid', $LOC\n-Caught panic message (String): attempted to zero-initialize type `&u8`, which is invalid\n thread 'main' panicked at 'align_offset: align is not a power-of-two', $LOC\n Caught panic message (String): align_offset: align is not a power-of-two\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:113:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:76:29\n Caught panic message (&str): assertion failed: false\n-thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:114:29\n+thread 'main' panicked at 'assertion failed: false', $DIR/catch_panic.rs:77:29\n Caught panic message (&str): assertion failed: false\n thread 'main' panicked at 'attempt to copy from unaligned or null pointer', $LOC\n Caught panic message (String): attempt to copy from unaligned or null pointer"}]}