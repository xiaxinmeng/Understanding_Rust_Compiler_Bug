{"sha": "fae6870d05683e372dd13ec9849dab0b55a66fb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhZTY4NzBkMDU2ODNlMzcyZGQxM2VjOTg0OWRhYjBiNTVhNjZmYjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T19:49:35Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-03T19:50:35Z"}, "message": "rustc: Make populate_fn_ctxt_from_llself() generic-aware", "tree": {"sha": "b364370a753b770732cac455eed2952786eda662", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b364370a753b770732cac455eed2952786eda662"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fae6870d05683e372dd13ec9849dab0b55a66fb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fae6870d05683e372dd13ec9849dab0b55a66fb8", "html_url": "https://github.com/rust-lang/rust/commit/fae6870d05683e372dd13ec9849dab0b55a66fb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fae6870d05683e372dd13ec9849dab0b55a66fb8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5876da00cfb78a849211804c820547fadef935f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5876da00cfb78a849211804c820547fadef935f8", "html_url": "https://github.com/rust-lang/rust/commit/5876da00cfb78a849211804c820547fadef935f8"}], "stats": {"total": 92, "additions": 54, "deletions": 38}, "files": [{"sha": "f47aed2d8c55dff832c20990d9a29501e79a4854", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 54, "deletions": 38, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/fae6870d05683e372dd13ec9849dab0b55a66fb8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fae6870d05683e372dd13ec9849dab0b55a66fb8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fae6870d05683e372dd13ec9849dab0b55a66fb8", "patch": "@@ -401,20 +401,19 @@ fn T_captured_tydescs(type_names tn, uint n) -> TypeRef {\n     ret T_struct(_vec.init_elt[TypeRef](T_ptr(T_tydesc(tn)), n));\n }\n \n-fn T_obj(type_names tn, uint n_captured_tydescs,\n-         TypeRef llfields_ty) -> TypeRef {\n-    ret T_struct(vec(T_ptr(T_tydesc(tn)),\n-                     T_captured_tydescs(tn, n_captured_tydescs),\n-                     llfields_ty));\n-}\n+fn T_obj_ptr(type_names tn, uint n_captured_tydescs) -> TypeRef {\n+    // This function is not publicly exposed because it returns an incomplete\n+    // type. The dynamically-sized fields follow the captured tydescs.\n+    fn T_obj(type_names tn, uint n_captured_tydescs) -> TypeRef {\n+        ret T_struct(vec(T_ptr(T_tydesc(tn)),\n+                         T_captured_tydescs(tn, n_captured_tydescs)));\n+    }\n \n-fn T_obj_ptr(type_names tn, uint n_captured_tydescs,\n-             TypeRef llfields_ty) -> TypeRef {\n-    ret T_ptr(T_box(T_obj(tn, n_captured_tydescs, llfields_ty)));\n+    ret T_ptr(T_box(T_obj(tn, n_captured_tydescs)));\n }\n \n fn T_opaque_obj_ptr(type_names tn) -> TypeRef {\n-    ret T_obj_ptr(tn, 0u, T_nil());\n+    ret T_obj_ptr(tn, 0u);\n }\n \n \n@@ -4265,56 +4264,73 @@ fn ret_ty_of_fn(ast.ann ann) -> @ty.t {\n     ret ret_ty_of_fn_ty(ty.ann_to_type(ann));\n }\n \n-fn populate_fn_ctxt_from_llself(@block_ctxt cx, ValueRef llself) {\n+fn populate_fn_ctxt_from_llself(@block_ctxt cx, ValueRef llself) -> result {\n+    auto bcx = cx;\n \n-    let vec[TypeRef] llfield_tys = vec();\n+    let vec[@ty.t] field_tys = vec();\n \n-    for (ast.obj_field f in cx.fcx.ccx.obj_fields) {\n-        llfield_tys += node_type(cx.fcx.ccx, f.ann);\n+    for (ast.obj_field f in bcx.fcx.ccx.obj_fields) {\n+        field_tys += vec(node_ann_type(bcx.fcx.ccx, f.ann));\n     }\n \n-    auto n_typarams = _vec.len[ast.ty_param](cx.fcx.ccx.obj_typarams);\n-    let TypeRef llobj_box_ty = T_obj_ptr(cx.fcx.ccx.tn, n_typarams,\n-                                         T_struct(llfield_tys));\n+    // Synthesize a tuple type for the fields so that GEP_tup_like() can work\n+    // its magic.\n+    auto fields_tup_ty = ty.plain_ty(ty.ty_tup(field_tys));\n+\n+    auto n_typarams = _vec.len[ast.ty_param](bcx.fcx.ccx.obj_typarams);\n+    let TypeRef llobj_box_ty = T_obj_ptr(bcx.fcx.ccx.tn, n_typarams);\n \n     auto box_cell =\n-        cx.build.GEP(llself,\n-                     vec(C_int(0),\n-                         C_int(abi.obj_field_box)));\n+        bcx.build.GEP(llself,\n+                      vec(C_int(0),\n+                          C_int(abi.obj_field_box)));\n \n-    auto box_ptr = cx.build.Load(box_cell);\n+    auto box_ptr = bcx.build.Load(box_cell);\n \n-    box_ptr = cx.build.PointerCast(box_ptr, llobj_box_ty);\n+    box_ptr = bcx.build.PointerCast(box_ptr, llobj_box_ty);\n \n-    auto obj_typarams = cx.build.GEP(box_ptr,\n+    auto obj_typarams = bcx.build.GEP(box_ptr,\n                                      vec(C_int(0),\n                                          C_int(abi.box_rc_field_body),\n                                          C_int(abi.obj_body_elt_typarams)));\n \n-    auto obj_fields = cx.build.GEP(box_ptr,\n-                                   vec(C_int(0),\n-                                       C_int(abi.box_rc_field_body),\n-                                       C_int(abi.obj_body_elt_fields)));\n+    // The object fields immediately follow the type parameters, so we skip\n+    // over them to get the pointer.\n+    auto obj_fields = bcx.build.Add(vp2i(bcx, obj_typarams),\n+        llsize_of(llvm.LLVMGetElementType(val_ty(obj_typarams))));\n+\n+    // If we can (i.e. the type is statically sized), then cast the resulting\n+    // fields pointer to the appropriate LLVM type. If not, just leave it as\n+    // i8 *.\n+    if (!ty.type_has_dynamic_size(fields_tup_ty)) {\n+        auto llfields_ty = type_of(bcx.fcx.ccx, fields_tup_ty);\n+        obj_fields = vi2p(bcx, obj_fields, T_ptr(llfields_ty));\n+    } else {\n+        obj_fields = vi2p(bcx, obj_fields, T_ptr(T_i8()));\n+    }\n+\n \n     let int i = 0;\n \n-    for (ast.ty_param p in cx.fcx.ccx.obj_typarams) {\n-        let ValueRef lltyparam = cx.build.GEP(obj_typarams,\n-                                              vec(C_int(0),\n-                                                  C_int(i)));\n-        lltyparam = cx.build.Load(lltyparam);\n-        cx.fcx.lltydescs.insert(p.id, lltyparam);\n+    for (ast.ty_param p in bcx.fcx.ccx.obj_typarams) {\n+        let ValueRef lltyparam = bcx.build.GEP(obj_typarams,\n+                                               vec(C_int(0),\n+                                                   C_int(i)));\n+        lltyparam = bcx.build.Load(lltyparam);\n+        bcx.fcx.lltydescs.insert(p.id, lltyparam);\n         i += 1;\n     }\n \n     i = 0;\n-    for (ast.obj_field f in cx.fcx.ccx.obj_fields) {\n-        let ValueRef llfield = cx.build.GEP(obj_fields,\n-                                            vec(C_int(0),\n-                                                C_int(i)));\n+    for (ast.obj_field f in bcx.fcx.ccx.obj_fields) {\n+        auto rslt = GEP_tup_like(bcx, fields_tup_ty, obj_fields, vec(0, i));\n+        bcx = rslt.bcx;\n+        auto llfield = rslt.val;\n         cx.fcx.llobjfields.insert(f.id, llfield);\n         i += 1;\n     }\n+\n+    ret res(bcx, C_nil());\n }\n \n fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n@@ -4335,7 +4351,7 @@ fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n \n     alt (fcx.llself) {\n         case (some[ValueRef](?llself)) {\n-            populate_fn_ctxt_from_llself(bcx, llself);\n+            bcx = populate_fn_ctxt_from_llself(bcx, llself).bcx;\n         }\n         case (_) {\n         }"}]}