{"sha": "0812eebc4a709f8fa39ecdd918b5df3113576129", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MTJlZWJjNGE3MDlmOGZhMzllY2RkOTE4YjVkZjMxMTM1NzYxMjk=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-16T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2019-11-22T18:32:45Z"}, "message": "Add support for tracking origins of uninitialized memory", "tree": {"sha": "b59fe93d324fa9a5a0b76e6a7ab9db01505d9432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b59fe93d324fa9a5a0b76e6a7ab9db01505d9432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0812eebc4a709f8fa39ecdd918b5df3113576129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0812eebc4a709f8fa39ecdd918b5df3113576129", "html_url": "https://github.com/rust-lang/rust/commit/0812eebc4a709f8fa39ecdd918b5df3113576129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0812eebc4a709f8fa39ecdd918b5df3113576129/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b907032891712c21ef9c8ff20c46cd2b20fcf30", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b907032891712c21ef9c8ff20c46cd2b20fcf30", "html_url": "https://github.com/rust-lang/rust/commit/9b907032891712c21ef9c8ff20c46cd2b20fcf30"}], "stats": {"total": 55, "additions": 53, "deletions": 2}, "files": [{"sha": "66c73d138e24124e2f560322ca499093750bcfda", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0812eebc4a709f8fa39ecdd918b5df3113576129", "patch": "@@ -834,6 +834,7 @@ macro_rules! options {\n             Some(\"one of: `address`, `leak`, `memory` or `thread`\");\n         pub const parse_sanitizer_list: Option<&str> =\n             Some(\"comma separated list of sanitizers\");\n+        pub const parse_sanitizer_memory_track_origins: Option<&str> = None;\n         pub const parse_linker_flavor: Option<&str> =\n             Some(::rustc_target::spec::LinkerFlavor::one_of());\n         pub const parse_optimization_fuel: Option<&str> =\n@@ -1054,6 +1055,22 @@ macro_rules! options {\n             }\n         }\n \n+        fn parse_sanitizer_memory_track_origins(slot: &mut usize, v: Option<&str>) -> bool {\n+            match v.map(|s| s.parse()) {\n+                None => {\n+                    *slot = 2;\n+                    true\n+                }\n+                Some(Ok(i)) if i <= 2 => {\n+                    *slot = i;\n+                    true\n+                }\n+                _ => {\n+                    false\n+                }\n+            }\n+        }\n+\n         fn parse_linker_flavor(slote: &mut Option<LinkerFlavor>, v: Option<&str>) -> bool {\n             match v.and_then(LinkerFlavor::from_str) {\n                 Some(lf) => *slote = Some(lf),\n@@ -1411,6 +1428,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n                                     \"use a sanitizer\"),\n     sanitizer_recover: Vec<Sanitizer> = (vec![], parse_sanitizer_list, [TRACKED],\n         \"Enable recovery for selected sanitizers\"),\n+    sanitizer_memory_track_origins: usize = (0, parse_sanitizer_memory_track_origins, [TRACKED],\n+        \"Enable origins tracking in MemorySanitizer\"),\n     fuel: Option<(String, u64)> = (None, parse_optimization_fuel, [TRACKED],\n         \"set the optimization fuel quota for a crate\"),\n     print_fuel: Option<String> = (None, parse_opt_string, [TRACKED],"}, {"sha": "b664c78f6584349535fb02fa7a1759a276c82a40", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=0812eebc4a709f8fa39ecdd918b5df3113576129", "patch": "@@ -29,7 +29,7 @@ use std::path::{Path, PathBuf};\n use std::str;\n use std::sync::Arc;\n use std::slice;\n-use libc::{c_uint, c_void, c_char, size_t};\n+use libc::{c_int, c_uint, c_void, c_char, size_t};\n \n pub const RELOC_MODEL_ARGS : [(&str, llvm::RelocMode); 7] = [\n     (\"pic\", llvm::RelocMode::PIC),\n@@ -373,7 +373,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n                                 recover));\n                     }\n                     Sanitizer::Memory => {\n-                        let track_origins = 0;\n+                        let track_origins = config.sanitizer_memory_track_origins as c_int;\n                         extra_passes.push(llvm::LLVMRustCreateMemorySanitizerPass(\n                                 track_origins, recover));\n                     }"}, {"sha": "9d3e57449f899e5a11813194e686020b1c50eabd", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=0812eebc4a709f8fa39ecdd918b5df3113576129", "patch": "@@ -61,6 +61,7 @@ pub struct ModuleConfig {\n \n     pub sanitizer: Option<Sanitizer>,\n     pub sanitizer_recover: Vec<Sanitizer>,\n+    pub sanitizer_memory_track_origins: usize,\n \n     // Flags indicating which outputs to produce.\n     pub emit_pre_lto_bc: bool,\n@@ -102,6 +103,7 @@ impl ModuleConfig {\n \n             sanitizer: None,\n             sanitizer_recover: Default::default(),\n+            sanitizer_memory_track_origins: 0,\n \n             emit_no_opt_bc: false,\n             emit_pre_lto_bc: false,\n@@ -359,6 +361,8 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n     modules_config.sanitizer = sess.opts.debugging_opts.sanitizer.clone();\n     modules_config.sanitizer_recover = sess.opts.debugging_opts.sanitizer_recover.clone();\n+    modules_config.sanitizer_memory_track_origins =\n+        sess.opts.debugging_opts.sanitizer_memory_track_origins;\n     modules_config.opt_level = Some(sess.opts.optimize);\n     modules_config.opt_size = Some(sess.opts.optimize);\n "}, {"sha": "fd8be0bced796372ad2dc55b65c43e8a00fea4a5", "filename": "src/test/codegen/sanitizer-memory-track-orgins.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0812eebc4a709f8fa39ecdd918b5df3113576129/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fsanitizer-memory-track-orgins.rs?ref=0812eebc4a709f8fa39ecdd918b5df3113576129", "patch": "@@ -0,0 +1,28 @@\n+// Verifies that MemorySanitizer track-origins level can be controlled\n+// with -Zsanitizer-memory-track-origins option.\n+//\n+// needs-sanitizer-support\n+// only-linux\n+// only-x86_64\n+// revisions:MSAN-0 MSAN-1 MSAN-2\n+//\n+//[MSAN-0] compile-flags: -Zsanitizer=memory\n+//[MSAN-1] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins=1\n+//[MSAN-2] compile-flags: -Zsanitizer=memory -Zsanitizer-memory-track-origins\n+\n+#![crate_type=\"lib\"]\n+\n+// MSAN-0-NOT: @__msan_track_origins\n+// MSAN-1:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 1\n+// MSAN-2:     @__msan_track_origins = weak_odr local_unnamed_addr constant i32 2\n+//\n+// MSAN-0-LABEL: define void @copy(\n+// MSAN-1-LABEL: define void @copy(\n+// MSAN-2-LABEL: define void @copy(\n+#[no_mangle]\n+pub fn copy(dst: &mut i32, src: &i32) {\n+    // MSAN-0-NOT: call i32 @__msan_chain_origin(\n+    // MSAN-1-NOT: call i32 @__msan_chain_origin(\n+    // MSAN-2:     call i32 @__msan_chain_origin(\n+    *dst = *src;\n+}"}]}