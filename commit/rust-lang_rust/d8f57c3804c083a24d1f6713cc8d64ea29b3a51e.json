{"sha": "d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ZjU3YzM4MDRjMDgzYTI0ZDFmNjcxM2NjOGQ2NGVhMjliM2E1MWU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-18T19:03:56Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:25:37Z"}, "message": "rustc: middle: move DefMap from resolve to def.", "tree": {"sha": "a2ab4ad51da2f06cf9841adf6804d5d4f8daae7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2ab4ad51da2f06cf9841adf6804d5d4f8daae7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "html_url": "https://github.com/rust-lang/rust/commit/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1d6f24fc2a657cae180d6e4c572557bf20070a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1d6f24fc2a657cae180d6e4c572557bf20070a", "html_url": "https://github.com/rust-lang/rust/commit/fb1d6f24fc2a657cae180d6e4c572557bf20070a"}], "stats": {"total": 50, "additions": 24, "deletions": 26}, "files": [{"sha": "90242a3252ec7119f0e80693d627b2f89748ba95", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -12,8 +12,7 @@\n // recursively.\n \n use session::Session;\n-use middle::resolve;\n-use middle::def::{DefStatic, DefConst};\n+use middle::def::{DefStatic, DefConst, DefMap};\n \n use syntax::ast;\n use syntax::{ast_util, ast_map};\n@@ -22,7 +21,7 @@ use syntax::visit;\n \n struct CheckCrateVisitor<'a, 'ast: 'a> {\n     sess: &'a Session,\n-    def_map: &'a resolve::DefMap,\n+    def_map: &'a DefMap,\n     ast_map: &'a ast_map::Map<'ast>\n }\n \n@@ -34,7 +33,7 @@ impl<'v, 'a, 'ast> Visitor<'v> for CheckCrateVisitor<'a, 'ast> {\n \n pub fn check_crate<'ast>(sess: &Session,\n                          krate: &ast::Crate,\n-                         def_map: &resolve::DefMap,\n+                         def_map: &DefMap,\n                          ast_map: &ast_map::Map<'ast>) {\n     let mut visitor = CheckCrateVisitor {\n         sess: sess,\n@@ -60,15 +59,15 @@ struct CheckItemRecursionVisitor<'a, 'ast: 'a> {\n     root_it: &'a ast::Item,\n     sess: &'a Session,\n     ast_map: &'a ast_map::Map<'ast>,\n-    def_map: &'a resolve::DefMap,\n+    def_map: &'a DefMap,\n     idstack: Vec<ast::NodeId>\n }\n \n // Make sure a const item doesn't recursively refer to itself\n // FIXME: Should use the dependency graph when it's available (#1356)\n pub fn check_item_recursion<'a>(sess: &'a Session,\n                                 ast_map: &'a ast_map::Map,\n-                                def_map: &'a resolve::DefMap,\n+                                def_map: &'a DefMap,\n                                 it: &'a ast::Item) {\n \n     let mut visitor = CheckItemRecursionVisitor {"}, {"sha": "ae79e0f3fd101ce3b492e199749084629c151e9a", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -12,9 +12,12 @@ pub use self::Def::*;\n pub use self::MethodProvenance::*;\n \n use middle::subst::ParamSpace;\n+use util::nodemap::NodeMap;\n use syntax::ast;\n use syntax::ast_util::local_def;\n \n+use std::cell::RefCell;\n+\n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Def {\n     DefFn(ast::DefId, bool /* is_ctor */),\n@@ -56,6 +59,9 @@ pub enum Def {\n     DefMethod(ast::DefId /* method */, Option<ast::DefId> /* trait */, MethodProvenance),\n }\n \n+// Definition mapping\n+pub type DefMap = RefCell<NodeMap<Def>>;\n+\n #[deriving(Clone, Copy, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum MethodProvenance {\n     FromTrait(ast::DefId),"}, {"sha": "0a6c29d1cb65a154e4bf4461d515e4ece52316e6", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use middle::def::*;\n-use middle::resolve;\n use middle::ty;\n use util::nodemap::FnvHashMap;\n \n@@ -21,15 +20,15 @@ pub type PatIdMap = FnvHashMap<ast::Ident, ast::NodeId>;\n \n // This is used because same-named variables in alternative patterns need to\n // use the NodeId of their namesake in the first pattern.\n-pub fn pat_id_map(dm: &resolve::DefMap, pat: &ast::Pat) -> PatIdMap {\n+pub fn pat_id_map(dm: &DefMap, pat: &ast::Pat) -> PatIdMap {\n     let mut map = FnvHashMap::new();\n     pat_bindings(dm, pat, |_bm, p_id, _s, path1| {\n         map.insert(path1.node, p_id);\n     });\n     map\n }\n \n-pub fn pat_is_refutable(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_is_refutable(dm: &DefMap, pat: &ast::Pat) -> bool {\n     match pat.node {\n         ast::PatLit(_) | ast::PatRange(_, _) => true,\n         ast::PatEnum(_, _) |\n@@ -45,7 +44,7 @@ pub fn pat_is_refutable(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_variant_or_struct(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_is_variant_or_struct(dm: &DefMap, pat: &ast::Pat) -> bool {\n     match pat.node {\n         ast::PatEnum(_, _) |\n         ast::PatIdent(_, _, None) |\n@@ -59,7 +58,7 @@ pub fn pat_is_variant_or_struct(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_const(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_is_const(dm: &DefMap, pat: &ast::Pat) -> bool {\n     match pat.node {\n         ast::PatIdent(_, _, None) | ast::PatEnum(..) => {\n             match dm.borrow().get(&pat.id) {\n@@ -71,7 +70,7 @@ pub fn pat_is_const(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_binding(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_is_binding(dm: &DefMap, pat: &ast::Pat) -> bool {\n     match pat.node {\n         ast::PatIdent(..) => {\n             !pat_is_variant_or_struct(dm, pat) &&\n@@ -81,7 +80,7 @@ pub fn pat_is_binding(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n     }\n }\n \n-pub fn pat_is_binding_or_wild(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_is_binding_or_wild(dm: &DefMap, pat: &ast::Pat) -> bool {\n     match pat.node {\n         ast::PatIdent(..) => pat_is_binding(dm, pat),\n         ast::PatWild(_) => true,\n@@ -91,7 +90,7 @@ pub fn pat_is_binding_or_wild(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n \n /// Call `it` on every \"binding\" in a pattern, e.g., on `a` in\n /// `match foo() { Some(a) => (), None => () }`\n-pub fn pat_bindings<I>(dm: &resolve::DefMap, pat: &ast::Pat, mut it: I) where\n+pub fn pat_bindings<I>(dm: &DefMap, pat: &ast::Pat, mut it: I) where\n     I: FnMut(ast::BindingMode, ast::NodeId, Span, &ast::SpannedIdent),\n {\n     walk_pat(pat, |p| {\n@@ -107,7 +106,7 @@ pub fn pat_bindings<I>(dm: &resolve::DefMap, pat: &ast::Pat, mut it: I) where\n \n /// Checks if the pattern contains any patterns that bind something to\n /// an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(..)`.\n-pub fn pat_contains_bindings(dm: &resolve::DefMap, pat: &ast::Pat) -> bool {\n+pub fn pat_contains_bindings(dm: &DefMap, pat: &ast::Pat) -> bool {\n     let mut contains_bindings = false;\n     walk_pat(pat, |p| {\n         if pat_is_binding(dm, p) {"}, {"sha": "be46b80b54df52ff3d68c2d1d4e38ddd646b5de8", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -84,9 +84,6 @@ use std::mem::replace;\n use std::rc::{Rc, Weak};\n use std::uint;\n \n-// Definition mapping\n-pub type DefMap = RefCell<NodeMap<Def>>;\n-\n #[deriving(Copy)]\n struct BindingInfo {\n     span: Span,"}, {"sha": "c8f53df6727e5fdc8bbae86f2067c0666587f01e", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -19,9 +19,8 @@ pub use self::DefRegion::*;\n use self::ScopeChain::*;\n \n use session::Session;\n-use middle::def;\n+use middle::def::{mod, DefMap};\n use middle::region;\n-use middle::resolve::DefMap;\n use middle::subst;\n use middle::ty;\n use std::fmt;"}, {"sha": "e93f3ca7d2e0ea799d0a7db44ead2aa849106710", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -46,13 +46,12 @@ use lint;\n use metadata::csearch;\n use middle;\n use middle::const_eval;\n-use middle::def;\n+use middle::def::{mod, DefMap};\n use middle::dependency_format;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem};\n use middle::lang_items::{FnOnceTraitLangItem, TyDescStructLangItem};\n use middle::mem_categorization as mc;\n use middle::region;\n-use middle::resolve;\n use middle::resolve_lifetime;\n use middle::infer;\n use middle::stability;\n@@ -615,7 +614,7 @@ pub struct ctxt<'tcx> {\n     // queried from a HashSet.\n     interner: RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>,\n     pub sess: Session,\n-    pub def_map: resolve::DefMap,\n+    pub def_map: DefMap,\n \n     pub named_region_map: resolve_lifetime::NamedRegionMap,\n \n@@ -1967,7 +1966,7 @@ impl UnboxedClosureKind {\n \n pub fn mk_ctxt<'tcx>(s: Session,\n                      type_arena: &'tcx TypedArena<TyS<'tcx>>,\n-                     dm: resolve::DefMap,\n+                     dm: DefMap,\n                      named_region_map: resolve_lifetime::NamedRegionMap,\n                      map: ast_map::Map<'tcx>,\n                      freevars: RefCell<FreevarMap>,"}, {"sha": "2bcd723fc83a422f698574b5523d512f69576700", "filename": "src/librustc_trans/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8f57c3804c083a24d1f6713cc8d64ea29b3a51e/src%2Flibrustc_trans%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2F_match.rs?ref=d8f57c3804c083a24d1f6713cc8d64ea29b3a51e", "patch": "@@ -193,12 +193,11 @@ use llvm::{ValueRef, BasicBlockRef};\n use middle::check_match::StaticInliner;\n use middle::check_match;\n use middle::const_eval;\n-use middle::def;\n+use middle::def::{mod, DefMap};\n use middle::expr_use_visitor as euv;\n use middle::lang_items::StrEqFnLangItem;\n use middle::mem_categorization as mc;\n use middle::pat_util::*;\n-use middle::resolve::DefMap;\n use trans::adt;\n use trans::base::*;\n use trans::build::{AddCase, And, BitCast, Br, CondBr, GEPi, InBoundsGEP, Load};"}]}