{"sha": "7b4f8f969caa9321b2c4881b00162ee2d68896fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiNGY4Zjk2OWNhYTkzMjFiMmM0ODgxYjAwMTYyZWUyZDY4ODk2ZmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-01T05:17:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-01T05:17:14Z"}, "message": "Auto merge of #58689 - memoryruins:exclude_should_panic, r=oli-obk\n\nAdd unstable option to ignore should_panic tests\n\nAdd an unstable option `--exclude-should-panic` to libtest to workaround https://github.com/rust-lang/miri/issues/636\n\n?r @oli-obk\ncc @RalfJung", "tree": {"sha": "783a4d382b0a43eec62eecf6828ebd67154b03c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/783a4d382b0a43eec62eecf6828ebd67154b03c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b4f8f969caa9321b2c4881b00162ee2d68896fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f8f969caa9321b2c4881b00162ee2d68896fd", "html_url": "https://github.com/rust-lang/rust/commit/7b4f8f969caa9321b2c4881b00162ee2d68896fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f8f969caa9321b2c4881b00162ee2d68896fd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20cfc9deb5a85c4daf235871e47c0a81daa9b700", "url": "https://api.github.com/repos/rust-lang/rust/commits/20cfc9deb5a85c4daf235871e47c0a81daa9b700", "html_url": "https://github.com/rust-lang/rust/commit/20cfc9deb5a85c4daf235871e47c0a81daa9b700"}, {"sha": "43e7434120a10f86713091667258f58b6c245e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43e7434120a10f86713091667258f58b6c245e2d", "html_url": "https://github.com/rust-lang/rust/commit/43e7434120a10f86713091667258f58b6c245e2d"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "ea821a1d9392c9211d9cd569ca8ceb9e1a716412", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7b4f8f969caa9321b2c4881b00162ee2d68896fd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b4f8f969caa9321b2c4881b00162ee2d68896fd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7b4f8f969caa9321b2c4881b00162ee2d68896fd", "patch": "@@ -366,6 +366,7 @@ pub struct TestOpts {\n     pub list: bool,\n     pub filter: Option<String>,\n     pub filter_exact: bool,\n+    pub exclude_should_panic: bool,\n     pub run_ignored: RunIgnored,\n     pub run_tests: bool,\n     pub bench_benchmarks: bool,\n@@ -385,6 +386,7 @@ impl TestOpts {\n             list: false,\n             filter: None,\n             filter_exact: false,\n+            exclude_should_panic: false,\n             run_ignored: RunIgnored::No,\n             run_tests: false,\n             bench_benchmarks: false,\n@@ -406,6 +408,7 @@ fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n     opts.optflag(\"\", \"include-ignored\", \"Run ignored and not ignored tests\")\n         .optflag(\"\", \"ignored\", \"Run only ignored tests\")\n+        .optflag(\"\", \"exclude-should-panic\", \"Excludes tests marked as should_panic\")\n         .optflag(\"\", \"test\", \"Run tests and not benchmarks\")\n         .optflag(\"\", \"bench\", \"Run benchmarks instead of tests\")\n         .optflag(\"\", \"list\", \"List all tests and benchmarks\")\n@@ -558,6 +561,13 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         None\n     };\n \n+    let exclude_should_panic = matches.opt_present(\"exclude-should-panic\");\n+    if !allow_unstable && exclude_should_panic {\n+        return Some(Err(\n+            \"The \\\"exclude-should-panic\\\" flag is only accepted on the nightly compiler\".into(),\n+        ));\n+    }\n+\n     let include_ignored = matches.opt_present(\"include-ignored\");\n     if !allow_unstable && include_ignored {\n         return Some(Err(\n@@ -648,6 +658,7 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         list,\n         filter,\n         filter_exact: exact,\n+        exclude_should_panic,\n         run_ignored,\n         run_tests,\n         bench_benchmarks,\n@@ -1365,6 +1376,11 @@ pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescA\n     // Skip tests that match any of the skip filters\n     filtered.retain(|test| !opts.skip.iter().any(|sf| matches_filter(test, sf)));\n \n+    // Excludes #[should_panic] tests\n+    if opts.exclude_should_panic {\n+        filtered.retain(|test| test.desc.should_panic == ShouldPanic::No);\n+    }\n+\n     // maybe unignore tests\n     match opts.run_ignored {\n         RunIgnored::Yes => {\n@@ -1983,6 +1999,29 @@ mod tests {\n         assert!(!filtered[1].desc.ignore);\n     }\n \n+    #[test]\n+    pub fn exclude_should_panic_option() {\n+        let mut opts = TestOpts::new();\n+        opts.run_tests = true;\n+        opts.exclude_should_panic = true;\n+\n+        let mut tests = one_ignored_one_unignored_test();\n+        tests.push(TestDescAndFn {\n+            desc: TestDesc {\n+                name: StaticTestName(\"3\"),\n+                ignore: false,\n+                should_panic: ShouldPanic::Yes,\n+                allow_fail: false,\n+            },\n+            testfn: DynTestFn(Box::new(move || {})),\n+        });\n+\n+        let filtered = filter_tests(&opts, tests);\n+\n+        assert_eq!(filtered.len(), 2);\n+        assert!(filtered.iter().all(|test| test.desc.should_panic == ShouldPanic::No));\n+    }\n+\n     #[test]\n     pub fn exact_filter_match() {\n         fn tests() -> Vec<TestDescAndFn> {"}]}