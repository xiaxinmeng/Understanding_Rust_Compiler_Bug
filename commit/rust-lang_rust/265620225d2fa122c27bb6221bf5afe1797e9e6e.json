{"sha": "265620225d2fa122c27bb6221bf5afe1797e9e6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2NTYyMDIyNWQyZmExMjJjMjdiYjYyMjFiZjVhZmUxNzk3ZTllNmU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-09-13T14:59:42Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2016-09-13T15:11:20Z"}, "message": "rustc: Don't pass --whole-archive for compiler-builtins\n\nThis flag is intended for rlibs included once, not rlibs that are repeatedly\nincluded.", "tree": {"sha": "b7e5e8eff7f470ffcfda54b9e138148d1ec6232e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e5e8eff7f470ffcfda54b9e138148d1ec6232e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/265620225d2fa122c27bb6221bf5afe1797e9e6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/265620225d2fa122c27bb6221bf5afe1797e9e6e", "html_url": "https://github.com/rust-lang/rust/commit/265620225d2fa122c27bb6221bf5afe1797e9e6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/265620225d2fa122c27bb6221bf5afe1797e9e6e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2140c4ba36301a71f43f4d488c45bc8ca27bf386", "url": "https://api.github.com/repos/rust-lang/rust/commits/2140c4ba36301a71f43f4d488c45bc8ca27bf386", "html_url": "https://github.com/rust-lang/rust/commit/2140c4ba36301a71f43f4d488c45bc8ca27bf386"}], "stats": {"total": 54, "additions": 35, "deletions": 19}, "files": [{"sha": "09c400b52bc8325c627d11ea1547953145d83f99", "filename": "src/libcompiler_builtins/build.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/265620225d2fa122c27bb6221bf5afe1797e9e6e/src%2Flibcompiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265620225d2fa122c27bb6221bf5afe1797e9e6e/src%2Flibcompiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcompiler_builtins%2Fbuild.rs?ref=265620225d2fa122c27bb6221bf5afe1797e9e6e", "patch": "@@ -50,10 +50,12 @@ impl Sources {\n     }\n \n     fn extend(&mut self, sources: &[&'static str]) {\n-        // NOTE Some intrinsics have both a generic implementation (e.g. `floatdidf.c`) and an arch\n-        // optimized implementation (`x86_64/floatdidf.c`). In those cases, we keep the arch\n-        // optimized implementation and discard the generic implementation. If we don't and keep\n-        // both implementations, the linker will yell at us about duplicate symbols!\n+        // NOTE Some intrinsics have both a generic implementation (e.g.\n+        // `floatdidf.c`) and an arch optimized implementation\n+        // (`x86_64/floatdidf.c`). In those cases, we keep the arch optimized\n+        // implementation and discard the generic implementation. If we don't\n+        // and keep both implementations, the linker will yell at us about\n+        // duplicate symbols!\n         for &src in sources {\n             let symbol = Path::new(src).file_stem().unwrap().to_str().unwrap();\n             if src.contains(\"/\") {"}, {"sha": "288249a7d9934dbc1e202fc7173c4f3b2b7a1224", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/265620225d2fa122c27bb6221bf5afe1797e9e6e/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/265620225d2fa122c27bb6221bf5afe1797e9e6e/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=265620225d2fa122c27bb6221bf5afe1797e9e6e", "patch": "@@ -943,8 +943,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n             Linkage::NotLinked |\n             Linkage::IncludedFromDylib => {}\n             Linkage::Static => {\n-                add_static_crate(cmd, sess, tmpdir, crate_type,\n-                                 &src.rlib.unwrap().0, sess.cstore.is_no_builtins(cnum))\n+                add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n             }\n             Linkage::Dynamic => {\n                 add_dynamic_crate(cmd, sess, &src.dylib.unwrap().0)\n@@ -956,9 +955,7 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n     // was already \"included\" in a dylib (e.g. `libstd` when `-C prefer-dynamic`\n     // is used)\n     if let Some(cnum) = compiler_builtins {\n-        let src = sess.cstore.used_crate_source(cnum);\n-        add_static_crate(cmd, sess, tmpdir, crate_type,\n-                         &src.rlib.unwrap().0, sess.cstore.is_no_builtins(cnum));\n+        add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n     }\n \n     // Converts a library file-stem into a cc -l argument\n@@ -1006,8 +1003,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                         sess: &Session,\n                         tmpdir: &Path,\n                         crate_type: config::CrateType,\n-                        cratepath: &Path,\n-                        is_a_no_builtins_crate: bool) {\n+                        cnum: ast::CrateNum) {\n+        let src = sess.cstore.used_crate_source(cnum);\n+        let cratepath = &src.rlib.unwrap().0;\n         if !sess.lto() && crate_type != config::CrateTypeDylib {\n             cmd.link_rlib(&fix_windows_verbatim_for_gcc(cratepath));\n             return\n@@ -1031,7 +1029,13 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 }\n                 let canonical = f.replace(\"-\", \"_\");\n                 let canonical_name = name.replace(\"-\", \"_\");\n-                if sess.lto() && !is_a_no_builtins_crate &&\n+\n+                // If we're performing LTO and this is a rust-generated object\n+                // file, then we don't need the object file as it's part of the\n+                // LTO module. Note that `#![no_builtins]` is excluded from LTO,\n+                // though, so we let that object file slide.\n+                if sess.lto() &&\n+                   !sess.cstore.is_no_builtins(cnum) &&\n                    canonical.starts_with(&canonical_name) &&\n                    canonical.ends_with(\".o\") {\n                     let num = &f[name.len()..f.len() - 2];\n@@ -1043,13 +1047,23 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n                 any_objects = true;\n             }\n \n-            if any_objects {\n-                archive.build();\n-                if crate_type == config::CrateTypeDylib {\n-                    cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n-                } else {\n-                    cmd.link_rlib(&fix_windows_verbatim_for_gcc(&dst));\n-                }\n+            if !any_objects {\n+                return\n+            }\n+            archive.build();\n+\n+            // If we're creating a dylib, then we need to include the\n+            // whole of each object in our archive into that artifact. This is\n+            // because a `dylib` can be reused as an intermediate artifact.\n+            //\n+            // Note, though, that we don't want to include the whole of a\n+            // compiler-builtins crate (e.g. compiler-rt) because it'll get\n+            // repeatedly linked anyway.\n+            if crate_type == config::CrateTypeDylib &&\n+               !sess.cstore.is_compiler_builtins(cnum) {\n+                cmd.link_whole_rlib(&fix_windows_verbatim_for_gcc(&dst));\n+            } else {\n+                cmd.link_rlib(&fix_windows_verbatim_for_gcc(&dst));\n             }\n         });\n     }"}]}