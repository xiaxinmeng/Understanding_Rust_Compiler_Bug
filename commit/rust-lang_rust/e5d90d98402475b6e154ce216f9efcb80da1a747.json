{"sha": "e5d90d98402475b6e154ce216f9efcb80da1a747", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1ZDkwZDk4NDAyNDc1YjZlMTU0Y2UyMTZmOWVmY2I4MGRhMWE3NDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-07T17:58:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-08-07T17:58:17Z"}, "message": "Auto merge of #27378 - GuillaumeGomez:patch-2, r=brson\n\nPart of #24407.\r\nr? @Manishearth", "tree": {"sha": "fc3872c5dd85b149302332b4213c2175e820ed53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc3872c5dd85b149302332b4213c2175e820ed53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5d90d98402475b6e154ce216f9efcb80da1a747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5d90d98402475b6e154ce216f9efcb80da1a747", "html_url": "https://github.com/rust-lang/rust/commit/e5d90d98402475b6e154ce216f9efcb80da1a747", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5d90d98402475b6e154ce216f9efcb80da1a747/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b5d52122e4dfa1cfd9d8c5afab931150269a7ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b5d52122e4dfa1cfd9d8c5afab931150269a7ff", "html_url": "https://github.com/rust-lang/rust/commit/1b5d52122e4dfa1cfd9d8c5afab931150269a7ff"}, {"sha": "c3d147eea60c891823e7e1c21003c392654a633b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d147eea60c891823e7e1c21003c392654a633b", "html_url": "https://github.com/rust-lang/rust/commit/c3d147eea60c891823e7e1c21003c392654a633b"}], "stats": {"total": 230, "additions": 220, "deletions": 10}, "files": [{"sha": "5c55fc53e023bac5af952dec9c615fbfc2d97040", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 178, "deletions": 9, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/e5d90d98402475b6e154ce216f9efcb80da1a747/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d90d98402475b6e154ce216f9efcb80da1a747/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=e5d90d98402475b6e154ce216f9efcb80da1a747", "patch": "@@ -397,6 +397,114 @@ impl Bar {\n ```\n \"##,\n \n+E0412: r##\"\n+An undeclared type name was used. Example of erroneous codes:\n+\n+```\n+impl Something {} // error: use of undeclared type name `Something`\n+// or:\n+trait Foo {\n+    fn bar(N); // error: use of undeclared type name `N`\n+}\n+// or:\n+fn foo(x: T) {} // error: use of undeclared type name `T`\n+```\n+\n+To fix this error, please verify you didn't misspell the type name,\n+you did declare it or imported it into the scope. Examples:\n+\n+```\n+struct Something;\n+\n+impl Something {} // ok!\n+// or:\n+trait Foo {\n+    type N;\n+\n+    fn bar(Self::N); // ok!\n+}\n+//or:\n+fn foo<T>(x: T) {} // ok!\n+```\n+\"##,\n+\n+E0413: r##\"\n+A declaration shadows an enum variant or unit-like struct in scope.\n+Example of erroneous code:\n+\n+```\n+struct Foo;\n+\n+let Foo = 12i32; // error: declaration of `Foo` shadows an enum variant or\n+                 //        unit-like struct in scope\n+```\n+\n+\n+To fix this error, rename the variable such that it doesn't shadow any enum\n+variable or structure in scope. Example:\n+\n+```\n+struct Foo;\n+\n+let foo = 12i32; // ok!\n+```\n+\n+Or:\n+\n+```\n+struct FooStruct;\n+\n+let Foo = 12i32; // ok!\n+```\n+\n+The goal here is to avoid a conflict of names.\n+\"##,\n+\n+E0415: r##\"\n+More than one function parameter have the same name. Example of erroneous\n+code:\n+\n+```\n+fn foo(f: i32, f: i32) {} // error: identifier `f` is bound more than\n+                          //        once in this parameter list\n+```\n+\n+Please verify you didn't misspell parameters' name. Example:\n+\n+```\n+fn foo(f: i32, g: i32) {} // ok!\n+```\n+\"##,\n+\n+E0416: r##\"\n+An identifier is bound more than once in a pattern. Example of erroneous\n+code:\n+\n+```\n+match (1, 2) {\n+    (x, x) => {} // error: identifier `x` is bound more than once in the\n+                 //        same pattern\n+}\n+```\n+\n+Please verify you didn't misspell identifiers' name. Example:\n+\n+```\n+match (1, 2) {\n+    (x, y) => {} // ok!\n+}\n+```\n+\n+Or maybe did you mean to unify? Consider using a guard:\n+\n+```\n+match (A, B, C) {\n+    (x, x2, see) if x == x2 => { /* A and B are equal, do one thing */ }\n+    (y, z, see) => { /* A and B unequal; do another thing */ }\n+}\n+```\n+\"##,\n+\n E0417: r##\"\n A static variable was referenced in a pattern. Example of erroneous code:\n \n@@ -425,6 +533,55 @@ match 0 {\n ```\n \"##,\n \n+E0419: r##\"\n+An unknown enum variant, struct or const was used. Example of\n+erroneous code:\n+\n+```\n+match 0 {\n+    Something::Foo => {} // error: unresolved enum variant, struct\n+                         //        or const `Foo`\n+}\n+```\n+\n+Please verify you didn't misspell it and the enum variant, struct or const has\n+been declared and imported into scope. Example:\n+\n+```\n+enum Something {\n+    Foo,\n+    NotFoo,\n+}\n+\n+match Something::NotFoo {\n+    Something::Foo => {} // ok!\n+    _ => {}\n+}\n+```\n+\"##,\n+\n+E0423: r##\"\n+A `struct` variant name was used like a function name. Example of\n+erroneous code:\n+\n+```\n+struct Foo { a: bool};\n+\n+let f = Foo();\n+// error: `Foo` is a struct variant name, but this expression uses\n+//        it like a function name\n+```\n+\n+Please verify you didn't misspell the name of what you actually wanted\n+to use here. Example:\n+\n+```\n+fn Foo() -> u32 { 0 }\n+\n+let f = Foo(); // ok!\n+```\n+\"##,\n+\n E0424: r##\"\n The `self` keyword was used in a static method. Example of erroneous code:\n \n@@ -582,6 +739,27 @@ use something_which_doesnt_exist;\n Please verify you didn't misspell the import's name.\n \"##,\n \n+E0435: r##\"\n+A non-constant value was used to initialise a constant. Example of erroneous\n+code:\n+\n+```\n+let foo = 42u32;\n+const FOO : u32 = foo; // error: attempt to use a non-constant value in a\n+                       //        constant\n+```\n+\n+To fix this error, please replace the value with a constant. Example:\n+\n+```\n+const FOO : u32 = 42u32; // ok!\n+\n+// or:\n+const OTHER_FOO : u32 = 42u32;\n+const FOO : u32 = OTHER_FOO; // ok!\n+```\n+\"##,\n+\n E0437: r##\"\n Trait implementations can only implement associated types that are members of\n the trait in question. This error indicates that you attempted to implement\n@@ -650,21 +828,12 @@ register_diagnostics! {\n            // pattern #1\n     E0410, // variable from pattern is not bound in pattern 1\n     E0411, // use of `Self` outside of an impl or trait\n-    E0412, // use of undeclared\n-    E0413, // declaration of shadows an enum variant or unit-like struct in\n-           // scope\n     E0414, // only irrefutable patterns allowed here\n-    E0415, // identifier is bound more than once in this parameter list\n-    E0416, // identifier is bound more than once in the same pattern\n     E0418, // is not an enum variant, struct or const\n-    E0419, // unresolved enum variant, struct or const\n     E0420, // is not an associated const\n     E0421, // unresolved associated const\n     E0422, // does not name a structure\n-    E0423, // is a struct variant name, but this expression uses it like a\n-           // function name\n     E0427, // cannot use `ref` binding mode with ...\n     E0429, // `self` imports are only allowed within a { } list\n     E0434, // can't capture dynamic environment in a fn item\n-    E0435, // attempt to use a non-constant value in a constant\n }"}, {"sha": "343faf7e477b286b2e47f4e87e051365b2db42ae", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 42, "deletions": 1, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/e5d90d98402475b6e154ce216f9efcb80da1a747/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5d90d98402475b6e154ce216f9efcb80da1a747/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=e5d90d98402475b6e154ce216f9efcb80da1a747", "patch": "@@ -1233,6 +1233,48 @@ fn main() {\n ```\n \"##,\n \n+E0102: r##\"\n+You hit this error because the compiler lacks information to\n+determine a type for this variable. Erroneous code example:\n+\n+```\n+fn demo(devil: fn () -> !) {\n+    let x: &_ = devil();\n+    // error: cannot determine a type for this local variable\n+}\n+\n+fn oh_no() -> ! { panic!(\"the devil is in the details\") }\n+\n+fn main() {\n+    demo(oh_no);\n+}\n+```\n+\n+To solve this situation, constrain the type of the variable.\n+Examples:\n+\n+```\n+fn some_func(x: &u32) {\n+    // some code\n+}\n+\n+fn demo(devil: fn () -> !) {\n+    let x: &u32 = devil();\n+    // Here we defined the type at the variable creation\n+\n+    let x: &_ = devil();\n+    some_func(x);\n+    // Here, the type is determined by the function argument type\n+}\n+\n+fn oh_no() -> ! { panic!(\"the devil is in the details\") }\n+\n+fn main() {\n+    demo(oh_no);\n+}\n+```\n+\"##,\n+\n E0106: r##\"\n This error indicates that a lifetime is missing from a type. If it is an error\n inside a function signature, the problem may be with failing to adhere to the\n@@ -2496,7 +2538,6 @@ register_diagnostics! {\n     E0085,\n     E0086,\n     E0090,\n-    E0102,\n     E0103,\n     E0104,\n     E0118,"}]}