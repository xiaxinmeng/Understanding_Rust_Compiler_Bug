{"sha": "302157d7bdac5e2849f194b24b2508ab502e6c8b", "node_id": "C_kwDOAAsO6NoAKDMwMjE1N2Q3YmRhYzVlMjg0OWYxOTRiMjRiMjUwOGFiNTAyZTZjOGI", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2022-06-18T15:25:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-18T15:25:34Z"}, "message": "Merge pull request #181 from GuillaumeGomez/more-intrinsics\n\nMore intrinsics", "tree": {"sha": "ea05e441e9b5a2a2a92400f56133425907ff84c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea05e441e9b5a2a2a92400f56133425907ff84c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302157d7bdac5e2849f194b24b2508ab502e6c8b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJire5uCRBK7hj4Ov3rIwAAXHMIAHxv3BfBqkgX9l4sNG2QI8yG\nn6MvzAC7oYJZy2pczrFWO4lepHAQk7SqKBSbniFyFiyU2BjDrE7a/YkCxZEWqJyy\nwRi8m3TrSzM+Rle0zxR+q7J6HUZJ89GgRhtF8vahGjp+942wZJLF/xIs1Kod4Gyo\nR6DQ7Ueq34gV3S1Uu/03EBAqU4BbdSAhU+4w8eDXa/yXeilbypDh2qLNraO13c+U\n/8S1WM4P0CUP9JHeOZKDE94GrkoaZw/K2KxO0CcPgVkEQ8RFyR22JF/CTs2wUq9k\nghVEJ198CpecLKvKQCdTEg62LzPrmQrOtIe6oBM6cGNvdFGFEReyS486mfyaDqQ=\n=VnrA\n-----END PGP SIGNATURE-----\n", "payload": "tree ea05e441e9b5a2a2a92400f56133425907ff84c1\nparent 8ac2af17cafa34cef317b20fa075e15e84bc96e1\nparent c66055c193b0df2bbb5fbb21d17eca7c8d7ac5a5\nauthor antoyo <antoyo@users.noreply.github.com> 1655565934 -0400\ncommitter GitHub <noreply@github.com> 1655565934 -0400\n\nMerge pull request #181 from GuillaumeGomez/more-intrinsics\n\nMore intrinsics"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302157d7bdac5e2849f194b24b2508ab502e6c8b", "html_url": "https://github.com/rust-lang/rust/commit/302157d7bdac5e2849f194b24b2508ab502e6c8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302157d7bdac5e2849f194b24b2508ab502e6c8b/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac2af17cafa34cef317b20fa075e15e84bc96e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac2af17cafa34cef317b20fa075e15e84bc96e1", "html_url": "https://github.com/rust-lang/rust/commit/8ac2af17cafa34cef317b20fa075e15e84bc96e1"}, {"sha": "c66055c193b0df2bbb5fbb21d17eca7c8d7ac5a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c66055c193b0df2bbb5fbb21d17eca7c8d7ac5a5", "html_url": "https://github.com/rust-lang/rust/commit/c66055c193b0df2bbb5fbb21d17eca7c8d7ac5a5"}], "stats": {"total": 2336, "additions": 2267, "deletions": 69}, "files": [{"sha": "9375f0fc1ad5cdbdcc11875fd58d4dc65befb64d", "filename": "src/intrinsic/archs.rs", "status": "modified", "additions": 2228, "deletions": 19, "changes": 2247, "blob_url": "https://github.com/rust-lang/rust/blob/302157d7bdac5e2849f194b24b2508ab502e6c8b/src%2Fintrinsic%2Farchs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302157d7bdac5e2849f194b24b2508ab502e6c8b/src%2Fintrinsic%2Farchs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Farchs.rs?ref=302157d7bdac5e2849f194b24b2508ab502e6c8b"}, {"sha": "e13e8b1466989b637977f719eef70945c51e55c9", "filename": "tools/generate_intrinsics.py", "status": "modified", "additions": 39, "deletions": 50, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/302157d7bdac5e2849f194b24b2508ab502e6c8b/tools%2Fgenerate_intrinsics.py", "raw_url": "https://github.com/rust-lang/rust/raw/302157d7bdac5e2849f194b24b2508ab502e6c8b/tools%2Fgenerate_intrinsics.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fgenerate_intrinsics.py?ref=302157d7bdac5e2849f194b24b2508ab502e6c8b", "patch": "@@ -13,7 +13,7 @@ def run_command(command, cwd=None):\n         sys.exit(1)\n \n \n-def clone_repository(repo_name, path, repo_url, sub_path=None):\n+def clone_repository(repo_name, path, repo_url, sub_paths=None):\n     if os.path.exists(path):\n         while True:\n             choice = input(\"There is already a `{}` folder, do you want to update it? [y/N]\".format(path))\n@@ -27,69 +27,58 @@ def clone_repository(repo_name, path, repo_url, sub_path=None):\n             else:\n                 print(\"Didn't understand answer...\")\n     print(\"Cloning {} repository...\".format(repo_name))\n-    if sub_path is None:\n+    if sub_paths is None:\n         run_command([\"git\", \"clone\", repo_url, \"--depth\", \"1\", path])\n     else:\n         run_command([\"git\", \"clone\", repo_url, \"--filter=tree:0\", \"--no-checkout\", path])\n         run_command([\"git\", \"sparse-checkout\", \"init\"], cwd=path)\n-        run_command([\"git\", \"sparse-checkout\", \"set\", \"add\", sub_path], cwd=path)\n+        run_command([\"git\", \"sparse-checkout\", \"set\", *sub_paths], cwd=path)\n         run_command([\"git\", \"checkout\"], cwd=path)\n \n \n def append_intrinsic(array, intrinsic_name, translation):\n     array.append((intrinsic_name, translation))\n \n \n-def extract_instrinsics(intrinsics, file):\n-    print(\"Extracting intrinsics from `{}`...\".format(file))\n-    with open(file, \"r\", encoding=\"utf8\") as f:\n-        content = f.read()\n+def convert_to_string(content):\n+    if content.__class__.__name__ == 'bytes':\n+        return content.decode('utf-8')\n+    return content\n \n-    lines = content.splitlines()\n+\n+def extract_instrinsics_from_llvm(llvm_path, intrinsics):\n+    p = subprocess.Popen(\n+        [\"llvm-tblgen\", \"llvm/IR/Intrinsics.td\"],\n+        cwd=os.path.join(llvm_path, \"llvm/include\"),\n+        stdout=subprocess.PIPE)\n+    output, err = p.communicate()\n+    lines = convert_to_string(output).splitlines()\n     pos = 0\n-    current_arch = None\n     while pos < len(lines):\n-        line = lines[pos].strip()\n-        if line.startswith(\"let TargetPrefix =\"):\n-            current_arch = line.split('\"')[1].strip()\n-            if len(current_arch) == 0:\n-                current_arch = None\n-        elif current_arch is None:\n-            pass\n-        elif line == \"}\":\n-            current_arch = None\n-        elif line.startswith(\"def \"):\n-            content = \"\"\n-            while not content.endswith(\";\") and not content.endswith(\"}\") and pos < len(lines):\n-                line = lines[pos].split(\" // \")[0].strip()\n-                content += line\n-                pos += 1\n-            entries = re.findall('GCCBuiltin<\"(\\\\w+)\">', content)\n-            if len(entries) > 0:\n-                intrinsic = content.split(\"def \")[1].strip().split(\":\")[0].strip()\n-                intrinsic = intrinsic.split(\"_\")\n-                if len(intrinsic) < 2 or intrinsic[0] != \"int\":\n-                    continue\n-                intrinsic[0] = \"llvm\"\n-                intrinsic = \".\".join(intrinsic)\n-                if current_arch not in intrinsics:\n-                    intrinsics[current_arch] = []\n-                for entry in entries:\n-                    append_intrinsic(intrinsics[current_arch], intrinsic, entry)\n+        line = lines[pos]\n+        if not line.startswith(\"def \"):\n+            pos += 1\n             continue\n-        pos += 1\n-        continue\n-    print(\"Done!\")\n-\n-\n-def extract_instrinsics_from_llvm(llvm_path, intrinsics):\n-    files = []\n-    intrinsics_path = os.path.join(llvm_path, \"llvm/include/llvm/IR\")\n-    for (dirpath, dirnames, filenames) in walk(intrinsics_path):\n-        files.extend([os.path.join(intrinsics_path, f) for f in filenames if f.endswith(\".td\")])\n-\n-    for file in files:\n-        extract_instrinsics(intrinsics, file)\n+        intrinsic = line.split(\" \")[1].strip()\n+        content = line\n+        while pos < len(lines):\n+            line = lines[pos].split(\" // \")[0].strip()\n+            content += line\n+            pos += 1\n+            if line == \"}\":\n+                break\n+        entries = re.findall('string GCCBuiltinName = \"(\\\\w+)\";', content)\n+        current_arch = re.findall('string TargetPrefix = \"(\\\\w+)\";', content)\n+        if len(entries) == 1 and len(current_arch) == 1:\n+            current_arch = current_arch[0]\n+            intrinsic = intrinsic.split(\"_\")\n+            if len(intrinsic) < 2 or intrinsic[0] != \"int\":\n+                continue\n+            intrinsic[0] = \"llvm\"\n+            intrinsic = \".\".join(intrinsic)\n+            if current_arch not in intrinsics:\n+                intrinsics[current_arch] = []\n+            append_intrinsic(intrinsics[current_arch], intrinsic, entries[0])\n \n \n def append_translation(json_data, p, array):\n@@ -219,7 +208,7 @@ def main():\n         \"llvm-project\",\n         llvm_path,\n         \"https://github.com/llvm/llvm-project\",\n-        sub_path=\"llvm/include/llvm/IR\",\n+        sub_paths=[\"llvm/include/llvm/IR\", \"llvm/include/llvm/CodeGen/\"],\n     )\n     clone_repository(\n         \"llvmint\","}]}