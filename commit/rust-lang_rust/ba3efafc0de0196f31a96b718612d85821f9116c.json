{"sha": "ba3efafc0de0196f31a96b718612d85821f9116c", "node_id": "C_kwDOAAsO6NoAKGJhM2VmYWZjMGRlMDE5NmYzMWE5NmI3MTg2MTJkODU4MjFmOTExNmM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-14T11:15:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-14T11:15:43Z"}, "message": "fix: Adjust `.` typing auto indentation", "tree": {"sha": "9021b5aa60e1b2ac46e418e47ef631f71032340a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9021b5aa60e1b2ac46e418e47ef631f71032340a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba3efafc0de0196f31a96b718612d85821f9116c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba3efafc0de0196f31a96b718612d85821f9116c", "html_url": "https://github.com/rust-lang/rust/commit/ba3efafc0de0196f31a96b718612d85821f9116c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba3efafc0de0196f31a96b718612d85821f9116c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1cb5ed9b036ea0bfe70fa331ec90032bc6f4c76", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1cb5ed9b036ea0bfe70fa331ec90032bc6f4c76", "html_url": "https://github.com/rust-lang/rust/commit/f1cb5ed9b036ea0bfe70fa331ec90032bc6f4c76"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "95a774df05e34697ce481556ba1add888bede6f2", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 63, "deletions": 10, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ba3efafc0de0196f31a96b718612d85821f9116c/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba3efafc0de0196f31a96b718612d85821f9116c/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=ba3efafc0de0196f31a96b718612d85821f9116c", "patch": "@@ -22,9 +22,7 @@ use ide_db::{\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, edit::IndentLevel, AstToken},\n-    AstNode, Parse, SourceFile,\n-    SyntaxKind::{self, FIELD_EXPR, METHOD_CALL_EXPR},\n-    TextRange, TextSize,\n+    AstNode, Parse, SourceFile, SyntaxKind, TextRange, TextSize,\n };\n \n use text_edit::{Indel, TextEdit};\n@@ -195,22 +193,46 @@ fn on_dot_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n     let whitespace =\n         file.syntax().token_at_offset(offset).left_biased().and_then(ast::Whitespace::cast)?;\n \n+    // if prior is fn call over multiple lines dont indent\n+    // or if previous is method call over multiples lines keep that indent\n     let current_indent = {\n         let text = whitespace.text();\n-        let newline = text.rfind('\\n')?;\n-        &text[newline + 1..]\n+        let (_prefix, suffix) = text.rsplit_once('\\n')?;\n+        suffix\n     };\n     let current_indent_len = TextSize::of(current_indent);\n \n     let parent = whitespace.syntax().parent()?;\n     // Make sure dot is a part of call chain\n-    if !matches!(parent.kind(), FIELD_EXPR | METHOD_CALL_EXPR) {\n+    let receiver = if let Some(field_expr) = ast::FieldExpr::cast(parent.clone()) {\n+        field_expr.expr()?\n+    } else if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent.clone()) {\n+        method_call_expr.receiver()?\n+    } else {\n         return None;\n+    };\n+\n+    let receiver_is_multiline = receiver.syntax().text().find_char('\\n').is_some();\n+    let target_indent = match (receiver, receiver_is_multiline) {\n+        // if receiver is multiline field or method call, just take the previous `.` indentation\n+        (ast::Expr::MethodCallExpr(expr), true) => {\n+            expr.dot_token().as_ref().map(IndentLevel::from_token)\n+        }\n+        (ast::Expr::FieldExpr(expr), true) => {\n+            expr.dot_token().as_ref().map(IndentLevel::from_token)\n+        }\n+        // if receiver is multiline expression, just keeps its indentation\n+        (_, true) => Some(IndentLevel::from_node(&parent)),\n+        _ => None,\n+    };\n+    let target_indent = match target_indent {\n+        Some(x) => x,\n+        // in all other cases, take previous indentation and indent once\n+        None => IndentLevel::from_node(&parent) + 1,\n     }\n-    let prev_indent = IndentLevel::from_node(&parent);\n-    let target_indent = format!(\"    {}\", prev_indent);\n-    let target_indent_len = TextSize::of(&target_indent);\n-    if current_indent_len == target_indent_len {\n+    .to_string();\n+\n+    if current_indent_len == TextSize::of(&target_indent) {\n         return None;\n     }\n \n@@ -661,4 +683,35 @@ use some::pa$0th::to::Item;\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn regression_629() {\n+        type_char_noop(\n+            '.',\n+            r#\"\n+fn foo() {\n+    CompletionItem::new(\n+        CompletionKind::Reference,\n+        ctx.source_range(),\n+        field.name().to_string(),\n+    )\n+    .foo()\n+    $0\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '.',\n+            r#\"\n+fn foo() {\n+    CompletionItem::new(\n+        CompletionKind::Reference,\n+        ctx.source_range(),\n+        field.name().to_string(),\n+    )\n+    $0\n+}\n+\"#,\n+        );\n+    }\n }"}]}