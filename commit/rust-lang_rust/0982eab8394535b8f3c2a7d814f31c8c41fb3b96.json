{"sha": "0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "node_id": "C_kwDOAAsO6NoAKDA5ODJlYWI4Mzk0NTM1YjhmM2MyYTdkODE0ZjMxYzhjNDFmYjNiOTY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-22T19:05:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-22T19:05:57Z"}, "message": "Rollup merge of #107736 - tgross35:atomic-as-ptr, r=m-ou-se\n\n Rename atomic 'as_mut_ptr' to 'as_ptr' to match Cell (ref #66893)\n\nOriginally discussed in https://github.com/rust-lang/rust/issues/66893#issuecomment-1419198623\n\n~~This uses #107706 as a base to avoid a merge conflict once that gets rolled up (so disregard const changes in the diff until it does)~~ all merged & rebased\n\n`@rustbot` label +T-libs-api\nr? m-ou-se", "tree": {"sha": "2766eadd3e9ba47b58d5090507c8c9b984b94111", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2766eadd3e9ba47b58d5090507c8c9b984b94111"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj9meVCRBK7hj4Ov3rIwAAQsMIAJate/hzs3iQ9LBLfoN3nR2s\ntI/bFsfglnZQTSMYirf0mhwajpHQmo7WxO3tH6CerHO/cFfHMzeYCjjSllqEglV0\ns30R9251WY9rCmaex0g0uasTKMyEHjb70+EY9Y5mU9KwNFXnVADBnHpO9dj1qCOQ\n0GXoz9qt6zHczlcnBmELUfnH/RieSwJ8Kki6GZujn+z/LrEeIXjlsZD5YZsc8FB9\nMzPJ9ipqryP1kb3N9rtMuf6Vk62ejo7JwQrG/ClcMgxQZOlV0HXQ27Zh30PeheID\nMmwIj81pxpSoQCKJqgUJKJ3hJtL/S0voNDe7esnpuv81e4QPyouLsh67hrhBb7w=\n=mJ9y\n-----END PGP SIGNATURE-----\n", "payload": "tree 2766eadd3e9ba47b58d5090507c8c9b984b94111\nparent b869e84e581612f4a30a4bca63bd9e90e9a17003\nparent 787b1116e80bfa6138227212814990aa4eccf186\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677092757 +0100\ncommitter GitHub <noreply@github.com> 1677092757 +0100\n\nRollup merge of #107736 - tgross35:atomic-as-ptr, r=m-ou-se\n\n Rename atomic 'as_mut_ptr' to 'as_ptr' to match Cell (ref #66893)\n\nOriginally discussed in https://github.com/rust-lang/rust/issues/66893#issuecomment-1419198623\n\n~~This uses #107706 as a base to avoid a merge conflict once that gets rolled up (so disregard const changes in the diff until it does)~~ all merged & rebased\n\n`@rustbot` label +T-libs-api\nr? m-ou-se\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "html_url": "https://github.com/rust-lang/rust/commit/0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0982eab8394535b8f3c2a7d814f31c8c41fb3b96/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b869e84e581612f4a30a4bca63bd9e90e9a17003", "url": "https://api.github.com/repos/rust-lang/rust/commits/b869e84e581612f4a30a4bca63bd9e90e9a17003", "html_url": "https://github.com/rust-lang/rust/commit/b869e84e581612f4a30a4bca63bd9e90e9a17003"}, {"sha": "787b1116e80bfa6138227212814990aa4eccf186", "url": "https://api.github.com/repos/rust-lang/rust/commits/787b1116e80bfa6138227212814990aa4eccf186", "html_url": "https://github.com/rust-lang/rust/commit/787b1116e80bfa6138227212814990aa4eccf186"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "00bcaf3e18c3d8fe8eeb47c7ca731b0ad77264a9", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0982eab8394535b8f3c2a7d814f31c8c41fb3b96/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0982eab8394535b8f3c2a7d814f31c8c41fb3b96/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "patch": "@@ -922,13 +922,13 @@ impl AtomicBool {\n     ///\n     /// let mut atomic = AtomicBool::new(true);\n     /// unsafe {\n-    ///     my_atomic_op(atomic.as_mut_ptr());\n+    ///     my_atomic_op(atomic.as_ptr());\n     /// }\n     /// # }\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub const fn as_mut_ptr(&self) -> *mut bool {\n+    pub const fn as_ptr(&self) -> *mut bool {\n         self.v.get().cast()\n     }\n \n@@ -1814,12 +1814,12 @@ impl<T> AtomicPtr<T> {\n     ///\n     /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n     /// unsafe {\n-    ///     my_atomic_op(atomic.as_mut_ptr());\n+    ///     my_atomic_op(atomic.as_ptr());\n     /// }\n     /// ```\n     #[inline]\n     #[unstable(feature = \"atomic_mut_ptr\", reason = \"recently added\", issue = \"66893\")]\n-    pub const fn as_mut_ptr(&self) -> *mut *mut T {\n+    pub const fn as_ptr(&self) -> *mut *mut T {\n         self.p.get()\n     }\n }\n@@ -2719,15 +2719,15 @@ macro_rules! atomic_int {\n             ///\n             /// // SAFETY: Safe as long as `my_atomic_op` is atomic.\n             /// unsafe {\n-            ///     my_atomic_op(atomic.as_mut_ptr());\n+            ///     my_atomic_op(atomic.as_ptr());\n             /// }\n             /// # }\n             /// ```\n             #[inline]\n             #[unstable(feature = \"atomic_mut_ptr\",\n                    reason = \"recently added\",\n                    issue = \"66893\")]\n-            pub const fn as_mut_ptr(&self) -> *mut $int_type {\n+            pub const fn as_ptr(&self) -> *mut $int_type {\n                 self.v.get()\n             }\n         }"}, {"sha": "575988ec760c7a84cd5109b3e7754d51b756816a", "filename": "library/std/src/sys_common/thread_parking/id.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0982eab8394535b8f3c2a7d814f31c8c41fb3b96/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0982eab8394535b8f3c2a7d814f31c8c41fb3b96/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_parking%2Fid.rs?ref=0982eab8394535b8f3c2a7d814f31c8c41fb3b96", "patch": "@@ -60,7 +60,7 @@ impl Parker {\n         if state == PARKED {\n             // Loop to guard against spurious wakeups.\n             while state == PARKED {\n-                park(self.state.as_mut_ptr().addr());\n+                park(self.state.as_ptr().addr());\n                 state = self.state.load(Acquire);\n             }\n \n@@ -76,7 +76,7 @@ impl Parker {\n \n         let state = self.state.fetch_sub(1, Acquire).wrapping_sub(1);\n         if state == PARKED {\n-            park_timeout(dur, self.state.as_mut_ptr().addr());\n+            park_timeout(dur, self.state.as_ptr().addr());\n             // Swap to ensure that we observe all state changes with acquire\n             // ordering, even if the state has been changed after the timeout\n             // occured.\n@@ -99,7 +99,7 @@ impl Parker {\n             // and terminated before this call is made. This call then returns an\n             // error or wakes up an unrelated thread. The platform API and\n             // environment does allow this, however.\n-            unpark(tid, self.state.as_mut_ptr().addr());\n+            unpark(tid, self.state.as_ptr().addr());\n         }\n     }\n }"}]}