{"sha": "e155ecdc9714f3ac76b554dc15ba06e219f576e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNTVlY2RjOTcxNGYzYWM3NmI1NTRkYzE1YmEwNmUyMTlmNTc2ZTA=", "commit": {"author": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-15T15:56:45Z"}, "committer": {"name": "Emilio Cobos \u00c1lvarez", "email": "emilio@crisal.io", "date": "2018-03-25T01:30:06Z"}, "message": "try to fix the build on older LLVM versions.", "tree": {"sha": "b8cbf88cec2f0be8f3442c667875a1cc049ddc36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8cbf88cec2f0be8f3442c667875a1cc049ddc36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e155ecdc9714f3ac76b554dc15ba06e219f576e0", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE+uMrE+H37zcdV8pyBWtye7nBAnwFAlq2+54ACgkQBWtye7nB\nAnwTKwf+ONn9tiHKZ7nRRbR9m+TqnPlgNmlZ1xPv/ny/iezdxTCc0gua7b/j0yNY\nZCvfbYpmKvJz+zFBY30GfP9pxvlJOyFKSsFlyWb+WATJEyusmtA04FILYujKVZfy\nKRHwjiiUM9FuTakaVk+o0I1xcl//9gaOkFiP7krxCpffrOCX1TbzHxV7ciZcoQLA\nE/u7RjBEuHfI4s/siXh9Jtv7B+72ZwuM0kyA8quPxlCMRK8ga4SikED0mrwlCjdO\nb/t9wQBa6QgeT3CeG3Zo+Bn+pQsDil22XYk5eSJrAXCFUV2wnLSbHsSMCU0jz6J3\nKhXmTMNcyRvVGh5lB23rR836d1pq1w==\n=ljUN\n-----END PGP SIGNATURE-----", "payload": "tree b8cbf88cec2f0be8f3442c667875a1cc049ddc36\nparent 4053e25bfb55b6e1bf6766158ccd06cb87de79c7\nauthor Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521129405 +0100\ncommitter Emilio Cobos \u00c1lvarez <emilio@crisal.io> 1521941406 +0200\n\ntry to fix the build on older LLVM versions.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e155ecdc9714f3ac76b554dc15ba06e219f576e0", "html_url": "https://github.com/rust-lang/rust/commit/e155ecdc9714f3ac76b554dc15ba06e219f576e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e155ecdc9714f3ac76b554dc15ba06e219f576e0/comments", "author": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emilio", "id": 1323194, "node_id": "MDQ6VXNlcjEzMjMxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1323194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emilio", "html_url": "https://github.com/emilio", "followers_url": "https://api.github.com/users/emilio/followers", "following_url": "https://api.github.com/users/emilio/following{/other_user}", "gists_url": "https://api.github.com/users/emilio/gists{/gist_id}", "starred_url": "https://api.github.com/users/emilio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emilio/subscriptions", "organizations_url": "https://api.github.com/users/emilio/orgs", "repos_url": "https://api.github.com/users/emilio/repos", "events_url": "https://api.github.com/users/emilio/events{/privacy}", "received_events_url": "https://api.github.com/users/emilio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4053e25bfb55b6e1bf6766158ccd06cb87de79c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4053e25bfb55b6e1bf6766158ccd06cb87de79c7", "html_url": "https://github.com/rust-lang/rust/commit/4053e25bfb55b6e1bf6766158ccd06cb87de79c7"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "d9c18e6cf0c4069bd9fa181b4d3dd7d4c1ca981e", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=e155ecdc9714f3ac76b554dc15ba06e219f576e0", "patch": "@@ -1739,6 +1739,7 @@ extern \"C\" {\n     pub fn LLVMRustModuleCost(M: ModuleRef) -> u64;\n \n     pub fn LLVMRustThinLTOAvailable() -> bool;\n+    pub fn LLVMRustPGOAvailable() -> bool;\n     pub fn LLVMRustWriteThinBitcodeToFile(PMR: PassManagerRef,\n                                           M: ModuleRef,\n                                           BC: *const c_char) -> bool;"}, {"sha": "c839e5340f58dd7062c34a71ef639b68d5e6be21", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=e155ecdc9714f3ac76b554dc15ba06e219f576e0", "patch": "@@ -708,6 +708,13 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n     }\n \n+    if (tcx.sess.opts.debugging_opts.pgo_gen.is_some() ||\n+        !tcx.sess.opts.debugging_opts.pgo_use.is_empty()) &&\n+        unsafe { !llvm::LLVMRustPGOAvailable() }\n+    {\n+        tcx.sess.fatal(\"this compiler's LLVM does not support PGO\");\n+    }\n+\n     let crate_hash = tcx.crate_hash(LOCAL_CRATE);\n     let link_meta = link::build_link_meta(crate_hash);\n "}, {"sha": "3d5cce81278ac872979800bbcbe3c1f740eeae82", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e155ecdc9714f3ac76b554dc15ba06e219f576e0/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e155ecdc9714f3ac76b554dc15ba06e219f576e0", "patch": "@@ -44,6 +44,10 @@\n \n #include \"llvm-c/Transforms/PassManagerBuilder.h\"\n \n+#if LLVM_VERSION_GE(4, 0)\n+#define PGO_AVAILABLE\n+#endif\n+\n using namespace llvm;\n using namespace llvm::legacy;\n \n@@ -435,6 +439,8 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n   unwrap(PMBR)->SLPVectorize = SLPVectorize;\n   unwrap(PMBR)->OptLevel = fromRust(OptLevel);\n   unwrap(PMBR)->LoopVectorize = LoopVectorize;\n+\n+#ifdef PGO_AVAILABLE\n   if (PGOGenPath) {\n     assert(!PGOUsePath);\n     unwrap(PMBR)->EnablePGOInstrGen = true;\n@@ -444,6 +450,9 @@ extern \"C\" void LLVMRustConfigurePassManagerBuilder(\n     assert(!PGOGenPath);\n     unwrap(PMBR)->PGOInstrUse = PGOUsePath;\n   }\n+#else\n+  assert(!PGOGenPath && !PGOUsePath && \"Should've caught earlier\");\n+#endif\n }\n \n // Unfortunately, the LLVM C API doesn't provide a way to set the `LibraryInfo`\n@@ -776,6 +785,15 @@ LLVMRustThinLTOAvailable() {\n #endif\n }\n \n+extern \"C\" bool\n+LLVMRustPGOAvailable() {\n+#ifdef PGO_AVAILABLE\n+  return true;\n+#else\n+  return false;\n+#endif\n+}\n+\n #if LLVM_VERSION_GE(4, 0)\n \n // Here you'll find an implementation of ThinLTO as used by the Rust compiler"}]}