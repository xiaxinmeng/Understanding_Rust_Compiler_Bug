{"sha": "cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMmMzM2ExNTY3ZjNhMjlhNDQ2YWUyOTg1MDgwZTU1YzRkYzJiOGI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-11-29T21:05:28Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-12-03T17:19:16Z"}, "message": "Move Session to librustc_session", "tree": {"sha": "86cd25152e5a0aa630545b10e123a56b08e2c21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86cd25152e5a0aa630545b10e123a56b08e2c21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "html_url": "https://github.com/rust-lang/rust/commit/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52d4d478a11c459645ba13abffcaf95014f38509", "url": "https://api.github.com/repos/rust-lang/rust/commits/52d4d478a11c459645ba13abffcaf95014f38509", "html_url": "https://github.com/rust-lang/rust/commit/52d4d478a11c459645ba13abffcaf95014f38509"}], "stats": {"total": 152, "additions": 87, "deletions": 65}, "files": [{"sha": "b9a3e920e4b67c81abbd5820a18064593f654ff8", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -3893,9 +3893,13 @@ name = \"rustc_session\"\n version = \"0.0.0\"\n dependencies = [\n  \"log\",\n+ \"num_cpus\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_feature\",\n+ \"rustc_fs_util\",\n  \"rustc_index\",\n+ \"rustc_target\",\n  \"serialize\",\n  \"syntax_pos\",\n ]"}, {"sha": "e708c5ab6e77d0da21e6e75270a1c4dda3d19bec", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -64,7 +64,6 @@\n #![recursion_limit=\"512\"]\n \n #[macro_use] extern crate bitflags;\n-extern crate getopts;\n #[macro_use] extern crate scoped_tls;\n #[cfg(windows)]\n extern crate libc;\n@@ -74,10 +73,6 @@ extern crate libc;\n #[macro_use] extern crate syntax;\n #[macro_use] extern crate smallvec;\n \n-// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n-// librustc_driver and libtest.\n-extern crate test as _;\n-\n #[cfg(test)]\n mod tests;\n \n@@ -113,7 +108,7 @@ pub mod middle {\n }\n \n pub mod mir;\n-pub mod session;\n+pub use rustc_session as session;\n pub mod traits;\n pub mod ty;\n "}, {"sha": "dbbb4b92dea3559d6a020b447afef450790365bf", "filename": "src/librustc_session/Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2FCargo.toml?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -11,7 +11,11 @@ path = \"lib.rs\"\n [dependencies]\n log = \"0.4\"\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_feature = { path = \"../librustc_feature\" }\n+rustc_target = { path = \"../librustc_target\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n rustc_index = { path = \"../librustc_index\" }\n+rustc_fs_util = { path = \"../librustc_fs_util\" }\n+num_cpus = \"1.0\""}, {"sha": "5baf0c5948f28a5481a25ee1111f52494d9c7349", "filename": "src/librustc_session/code_stats.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fcode_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fcode_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fcode_stats.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "previous_filename": "src/librustc/session/code_stats.rs"}, {"sha": "c05704dbab54cfe727844cb002948714f23fdd4a", "filename": "src/librustc_session/config.rs", "status": "renamed", "additions": 21, "deletions": 18, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -1,26 +1,27 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command-line options.\n \n-use rustc_session::lint;\n-use rustc_session::utils::NativeLibraryKind;\n-use crate::session::{early_error, early_warn, Session};\n-use crate::session::search_paths::SearchPath;\n+use crate::lint;\n+use crate::utils::NativeLibraryKind;\n+use crate::{early_error, early_warn, Session};\n+use crate::search_paths::SearchPath;\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_feature::UnstableFeatures;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::spec::{LinkerFlavor, MergeFunctions, PanicStrategy, RelroLevel};\n use rustc_target::spec::{Target, TargetTriple};\n \n // Duplicated from syntax::ast for now\n type CrateConfig = FxHashSet<(Symbol, Option<Symbol>)>;\n \n-use syntax::source_map::{FileName, FilePathMapping};\n-use syntax::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n-use syntax::symbol::{sym, Symbol};\n+use syntax_pos::source_map::{FileName, FilePathMapping};\n+use syntax_pos::edition::{Edition, EDITION_NAME_LIST, DEFAULT_EDITION};\n+use syntax_pos::symbol::{sym, Symbol};\n+use rustc_feature::UnstableFeatures;\n \n-use errors::emitter::HumanReadableErrorType;\n-use errors::{ColorConfig, FatalError, Handler};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::{ColorConfig, FatalError, Handler};\n \n use getopts;\n \n@@ -349,7 +350,7 @@ macro_rules! hash_option {\n     ($opt_name:ident, $opt_expr:expr, $sub_hashes:expr, [TRACKED]) => ({\n         if $sub_hashes.insert(stringify!($opt_name),\n                               $opt_expr as &dyn dep_tracking::DepTrackingHash).is_some() {\n-            bug!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n+            panic!(\"duplicate key in CLI DepTrackingHash: {}\", stringify!($opt_name))\n         }\n     });\n }\n@@ -702,7 +703,7 @@ pub enum EntryFnType {\n \n impl_stable_hash_via_hash!(EntryFnType);\n \n-#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, HashStable)]\n+#[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug)]\n pub enum CrateType {\n     Executable,\n     Dylib,\n@@ -712,6 +713,8 @@ pub enum CrateType {\n     ProcMacro,\n }\n \n+impl_stable_hash_via_hash!(CrateType);\n+\n #[derive(Clone, Hash)]\n pub enum Passes {\n     Some(Vec<String>),\n@@ -782,7 +785,7 @@ macro_rules! options {\n                                                                value, $outputname,\n                                                                key, type_desc))\n                         }\n-                        (None, None) => bug!()\n+                        (None, None) => panic!()\n                     }\n                 }\n                 found = true;\n@@ -2720,7 +2723,7 @@ pub mod nightly_options {\n     use getopts;\n     use rustc_feature::UnstableFeatures;\n     use super::{ErrorOutputType, OptionStability, RustcOptGroup};\n-    use crate::session::early_error;\n+    use crate::early_error;\n \n     pub fn is_unstable_enabled(matches: &getopts::Matches) -> bool {\n         is_nightly_build()\n@@ -2858,18 +2861,18 @@ impl PpMode {\n /// we have an opt-in scheme here, so one is hopefully forced to think about\n /// how the hash should be calculated when adding a new command-line argument.\n mod dep_tracking {\n-    use rustc_session::lint;\n-    use rustc_session::utils::NativeLibraryKind;\n+    use crate::lint;\n+    use crate::utils::NativeLibraryKind;\n     use std::collections::BTreeMap;\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{CrateType, DebugInfo, ErrorOutputType, OptLevel, OutputTypes,\n                 Passes, Sanitizer, LtoCli, LinkerPluginLto, SwitchWithOptPath,\n                 SymbolManglingVersion};\n-    use rustc_feature::UnstableFeatures;\n     use rustc_target::spec::{MergeFunctions, PanicStrategy, RelroLevel, TargetTriple};\n-    use syntax::edition::Edition;\n+    use syntax_pos::edition::Edition;\n+    use rustc_feature::UnstableFeatures;\n \n     pub trait DepTrackingHash {\n         fn hash(&self, hasher: &mut DefaultHasher, error_format: ErrorOutputType);", "previous_filename": "src/librustc/session/config.rs"}, {"sha": "a0bdc6a3254a151b07aaa27e48b7bd182497fd2c", "filename": "src/librustc_session/filesearch.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Ffilesearch.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -7,8 +7,9 @@ use std::env;\n use std::fs;\n use std::path::{Path, PathBuf};\n \n-use crate::session::search_paths::{SearchPath, PathKind};\n+use crate::search_paths::{SearchPath, PathKind};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n+use log::debug;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {\n@@ -124,7 +125,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 // gcc chokes on verbatim paths which fs::canonicalize generates\n                 // so we try to avoid those kinds of paths.\n                 Ok(canon) => Some(fix_windows_verbatim_for_gcc(&canon)),\n-                Err(e) => bug!(\"failed to get realpath: {}\", e),\n+                Err(e) => panic!(\"failed to get realpath: {}\", e),\n             }\n         })\n     }\n@@ -133,7 +134,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n                 Some(mut p) => { p.pop(); p.pop(); p },\n-                None => bug!(\"can't determine value for sysroot\")\n+                None => panic!(\"can't determine value for sysroot\")\n             }\n         }\n         Err(ref e) => panic!(format!(\"failed to get current_exe: {}\", e))", "previous_filename": "src/librustc/session/filesearch.rs"}, {"sha": "9d7c23100a0fe518fe579172af24276cdee6ae69", "filename": "src/librustc_session/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Flib.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -1,6 +1,21 @@\n+#![feature(test)]\n+\n+// Use the test crate here so we depend on getopts through it. This allow tools to link to both\n+// librustc_session and libtest.\n+extern crate test as _;\n+extern crate getopts;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n #[macro_use]\n pub mod lint;\n pub mod node_id;\n pub mod parse;\n+\n+mod code_stats;\n+pub mod config;\n+pub mod filesearch;\n+pub mod search_paths;\n+\n+mod session;\n+pub use session::*;"}, {"sha": "b9f2ae7618b91d93a0987e965d824def732a57e3", "filename": "src/librustc_session/search_paths.rs", "status": "renamed", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fsearch_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fsearch_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsearch_paths.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -1,6 +1,6 @@\n use std::path::{Path, PathBuf};\n-use crate::session::{early_error, config};\n-use crate::session::filesearch::make_target_lib_path;\n+use crate::{early_error, config};\n+use crate::filesearch::make_target_lib_path;\n \n #[derive(Clone, Debug)]\n pub struct SearchPath {\n@@ -9,7 +9,7 @@ pub struct SearchPath {\n     pub files: Vec<PathBuf>,\n }\n \n-#[derive(PartialEq, Clone, Copy, Debug, HashStable)]\n+#[derive(PartialEq, Clone, Copy, Debug, Hash, Eq)]\n pub enum PathKind {\n     Native,\n     Crate,\n@@ -19,6 +19,8 @@ pub enum PathKind {\n     All,\n }\n \n+rustc_data_structures::impl_stable_hash_via_hash!(PathKind);\n+\n impl PathKind {\n     pub fn matches(&self, kind: PathKind) -> bool {\n         match (self, kind) {", "previous_filename": "src/librustc/session/search_paths.rs"}, {"sha": "9369c1771a35ed10c6c90caa5e5db0e3c7043ed8", "filename": "src/librustc_session/session.rs", "status": "renamed", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc2c33a1567f3a29a446ae2985080e55c4dc2b8b/src%2Flibrustc_session%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fsession.rs?ref=cc2c33a1567f3a29a446ae2985080e55c4dc2b8b", "patch": "@@ -1,29 +1,32 @@\n-pub use self::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n-use self::code_stats::CodeStats;\n+pub use crate::code_stats::{DataTypeKind, SizeKind, FieldInfo, VariantInfo};\n+use crate::code_stats::CodeStats;\n \n-use rustc_session::cgu_reuse_tracker::CguReuseTracker;\n+use crate::cgu_reuse_tracker::CguReuseTracker;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n-use rustc_session::lint;\n-use crate::session::config::{OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n-use crate::session::search_paths::{PathKind, SearchPath};\n-use crate::util::common::{duration_to_secs_str, ErrorReported};\n+use crate::lint;\n+use crate::filesearch;\n+use crate::config::{self, OutputType, PrintRequest, Sanitizer, SwitchWithOptPath};\n+use crate::search_paths::{PathKind, SearchPath};\n+use crate::utils::duration_to_secs_str;\n+use rustc_errors::ErrorReported;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::sync::{\n     self, Lrc, Lock, OneThread, Once, AtomicU64, AtomicUsize, Ordering,\n     Ordering::SeqCst,\n };\n-\n-use errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n-use errors::emitter::{Emitter, EmitterWriter};\n-use errors::emitter::HumanReadableErrorType;\n-use errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n-use syntax::edition::Edition;\n-use errors::json::JsonEmitter;\n-use syntax::source_map;\n-use syntax::sess::ParseSess;\n+use rustc_data_structures::impl_stable_hash_via_hash;\n+\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId, Applicability};\n+use rustc_errors::emitter::{Emitter, EmitterWriter};\n+use rustc_errors::emitter::HumanReadableErrorType;\n+use rustc_errors::annotate_snippet_emitter_writer::{AnnotateSnippetEmitterWriter};\n+use syntax_pos::edition::Edition;\n+use rustc_errors::json::JsonEmitter;\n+use syntax_pos::source_map;\n+use crate::parse::ParseSess;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n@@ -41,11 +44,6 @@ use std::path::PathBuf;\n use std::time::Duration;\n use std::sync::Arc;\n \n-mod code_stats;\n-pub mod config;\n-pub mod filesearch;\n-pub mod search_paths;\n-\n pub struct OptimizationFuel {\n     /// If `-zfuel=crate=n` is specified, initially set to `n`, otherwise `0`.\n     remaining: u64,\n@@ -334,7 +332,7 @@ impl Session {\n         self.diagnostic().span_note_without_error(sp, msg)\n     }\n \n-    pub fn diagnostic(&self) -> &errors::Handler {\n+    pub fn diagnostic(&self) -> &rustc_errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n \n@@ -679,7 +677,7 @@ impl Session {\n \n         if let IncrCompSession::NotInitialized = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"Trying to initialize IncrCompSession `{:?}`\",\n                 *incr_comp_session\n             )\n@@ -697,7 +695,7 @@ impl Session {\n \n         if let IncrCompSession::Active { .. } = *incr_comp_session {\n         } else {\n-            bug!(\n+            panic!(\n                 \"trying to finalize `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             );\n@@ -718,7 +716,7 @@ impl Session {\n                 ..\n             } => session_directory.clone(),\n             IncrCompSession::InvalidBecauseOfErrors { .. } => return,\n-            _ => bug!(\n+            _ => panic!(\n                 \"trying to invalidate `IncrCompSession` `{:?}`\",\n                 *incr_comp_session\n             ),\n@@ -735,7 +733,7 @@ impl Session {\n         cell::Ref::map(\n             incr_comp_session,\n             |incr_comp_session| match *incr_comp_session {\n-                IncrCompSession::NotInitialized => bug!(\n+                IncrCompSession::NotInitialized => panic!(\n                     \"trying to get session directory from `IncrCompSession`: {:?}\",\n                     *incr_comp_session,\n                 ),\n@@ -915,7 +913,7 @@ impl Session {\n pub fn build_session(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n ) -> Session {\n     let file_path_mapping = sopts.file_path_mapping();\n \n@@ -931,7 +929,7 @@ pub fn build_session(\n \n fn default_emitter(\n     sopts: &config::Options,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: &Lrc<source_map::SourceMap>,\n     emitter_dest: Option<Box<dyn Write + Send>>,\n ) -> Box<dyn Emitter + sync::Send> {\n@@ -1000,7 +998,7 @@ pub enum DiagnosticOutput {\n pub fn build_session_with_source_map(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    registry: errors::registry::Registry,\n+    registry: rustc_errors::registry::Registry,\n     source_map: Lrc<source_map::SourceMap>,\n     diagnostics_output: DiagnosticOutput,\n     lint_caps: FxHashMap<lint::LintId, lint::Level>,\n@@ -1031,9 +1029,9 @@ pub fn build_session_with_source_map(\n     };\n     let emitter = default_emitter(&sopts, registry, &source_map, write_dest);\n \n-    let diagnostic_handler = errors::Handler::with_emitter_and_flags(\n+    let diagnostic_handler = rustc_errors::Handler::with_emitter_and_flags(\n         emitter,\n-        errors::HandlerFlags {\n+        rustc_errors::HandlerFlags {\n             can_emit_warnings,\n             treat_err_as_bug,\n             report_delayed_bugs,\n@@ -1055,7 +1053,7 @@ pub fn build_session_with_source_map(\n fn build_session_(\n     sopts: config::Options,\n     local_crate_source_file: Option<PathBuf>,\n-    span_diagnostic: errors::Handler,\n+    span_diagnostic: rustc_errors::Handler,\n     source_map: Lrc<source_map::SourceMap>,\n     driver_lint_caps: FxHashMap<lint::LintId, lint::Level>,\n ) -> Session {\n@@ -1280,9 +1278,9 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_fatal(msg).emit();\n-    errors::FatalError.raise();\n+    rustc_errors::FatalError.raise();\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n@@ -1294,7 +1292,7 @@ pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n         config::ErrorOutputType::Json { pretty, json_rendered } =>\n             Box::new(JsonEmitter::basic(pretty, json_rendered, false)),\n     };\n-    let handler = errors::Handler::with_emitter(true, None, emitter);\n+    let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_warn(msg).emit();\n }\n ", "previous_filename": "src/librustc/session/mod.rs"}]}