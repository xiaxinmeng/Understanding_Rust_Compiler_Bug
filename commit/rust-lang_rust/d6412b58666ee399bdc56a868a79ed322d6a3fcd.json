{"sha": "d6412b58666ee399bdc56a868a79ed322d6a3fcd", "node_id": "C_kwDOAAsO6NoAKGQ2NDEyYjU4NjY2ZWUzOTliZGM1NmE4NjhhNzllZDMyMmQ2YTNmY2Q", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-17T09:55:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-17T09:55:14Z"}, "message": "Auto merge of #13034 - lowr:fix/regression-from-12993, r=lowr\n\nfix: escape keywords used as names in earlier editions\n\nFixes #13030\n\nThere are keywords in Rust 2018+ that you can use as names without escaping when your crate is in Rust 2015 e.g. \"try\". We need to be consistent on how to keep track of the names regardless of how they are actually written in each crate. This patch attempts at it by taking such names into account and storing them uniformly in their escaped form.", "tree": {"sha": "46463e1305ee6614b7009bcc1f00670a01e41b1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46463e1305ee6614b7009bcc1f00670a01e41b1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6412b58666ee399bdc56a868a79ed322d6a3fcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6412b58666ee399bdc56a868a79ed322d6a3fcd", "html_url": "https://github.com/rust-lang/rust/commit/d6412b58666ee399bdc56a868a79ed322d6a3fcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6412b58666ee399bdc56a868a79ed322d6a3fcd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9ead591e6df07bec6f9dfd72ae9e7c98158377", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9ead591e6df07bec6f9dfd72ae9e7c98158377", "html_url": "https://github.com/rust-lang/rust/commit/dd9ead591e6df07bec6f9dfd72ae9e7c98158377"}, {"sha": "a3409c3a83fb1d8139bac8b3e438f56f2ac633a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3409c3a83fb1d8139bac8b3e438f56f2ac633a3", "html_url": "https://github.com/rust-lang/rust/commit/a3409c3a83fb1d8139bac8b3e438f56f2ac633a3"}], "stats": {"total": 14, "additions": 11, "deletions": 3}, "files": [{"sha": "a1bb353374be074a71c438b94b326bc4e8dc476a", "filename": "crates/hir-expand/src/name.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d6412b58666ee399bdc56a868a79ed322d6a3fcd/crates%2Fhir-expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6412b58666ee399bdc56a868a79ed322d6a3fcd/crates%2Fhir-expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fname.rs?ref=d6412b58666ee399bdc56a868a79ed322d6a3fcd", "patch": "@@ -90,10 +90,16 @@ impl Name {\n \n     /// Resolve a name from the text of token.\n     fn resolve(raw_text: &str) -> Name {\n-        // When `raw_text` starts with \"r#\" but the name does not coincide with any\n-        // keyword, we never need the prefix so we strip it.\n         match raw_text.strip_prefix(\"r#\") {\n+            // When `raw_text` starts with \"r#\" but the name does not coincide with any\n+            // keyword, we never need the prefix so we strip it.\n             Some(text) if !is_raw_identifier(text) => Name::new_text(SmolStr::new(text)),\n+            // Keywords (in the current edition) *can* be used as a name in earlier editions of\n+            // Rust, e.g. \"try\" in Rust 2015. Even in such cases, we keep track of them in their\n+            // escaped form.\n+            None if is_raw_identifier(raw_text) => {\n+                Name::new_text(SmolStr::from_iter([\"r#\", raw_text]))\n+            }\n             _ => Name::new_text(raw_text.into()),\n         }\n     }"}, {"sha": "2f4aa113170a6f6865a3b6e560db8aa2727cfcce", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6412b58666ee399bdc56a868a79ed322d6a3fcd/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6412b58666ee399bdc56a868a79ed322d6a3fcd/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=d6412b58666ee399bdc56a868a79ed322d6a3fcd", "patch": "@@ -402,7 +402,9 @@ impl<'a> FindUsages<'a> {\n                             .or_else(|| ty.as_builtin().map(|builtin| builtin.name()))\n                     })\n                 };\n-                self.def.name(sema.db).or_else(self_kw_refs).map(|it| it.to_smol_str())\n+                // We need to unescape the name in case it is written without \"r#\" in earlier\n+                // editions of Rust where it isn't a keyword.\n+                self.def.name(sema.db).or_else(self_kw_refs).map(|it| it.unescaped().to_smol_str())\n             }\n         };\n         let name = match &name {"}]}