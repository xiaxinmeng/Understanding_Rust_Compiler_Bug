{"sha": "b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "node_id": "C_kwDOAAsO6NoAKGI4MjViMGZlNjMzM2ZmMDg1NTJhZWZhMWZiMjVkZmRjOTMyYjhiY2E", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-11-16T22:06:25Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-13T17:09:16Z"}, "message": "Fix rebase and clippy tests", "tree": {"sha": "a9d8b7032ebd9843f759da46b97239a3a902ba1c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9d8b7032ebd9843f759da46b97239a3a902ba1c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "html_url": "https://github.com/rust-lang/rust/commit/b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8888d0d61e800654db4e1cd52e9e81dffb5c8ee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8888d0d61e800654db4e1cd52e9e81dffb5c8ee2", "html_url": "https://github.com/rust-lang/rust/commit/8888d0d61e800654db4e1cd52e9e81dffb5c8ee2"}], "stats": {"total": 320, "additions": 136, "deletions": 184}, "files": [{"sha": "75a45a437e77eb893757f9ebf835a5a1931da9c6", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -130,7 +130,15 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         hir::AsyncGeneratorKind::Block,\n                         |this| this.with_new_scopes(|this| this.lower_block_expr(block)),\n                     ),\n-                ExprKind::Await(ref expr) => self.lower_expr_await(e.span, expr),\n+                ExprKind::Await(ref expr) => {\n+                    let span = if expr.span.hi() < e.span.hi() {\n+                        expr.span.shrink_to_hi().with_hi(e.span.hi())\n+                    } else {\n+                        // this is a recovered `await expr`\n+                        e.span\n+                    };\n+                    self.lower_expr_await(span, expr)\n+                }\n                 ExprKind::Closure(\n                     capture_clause,\n                     asyncness,\n@@ -639,6 +647,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.allow_gen_future.clone(),\n         );\n         let expr = self.lower_expr_mut(expr);\n+        let expr_hir_id = expr.hir_id;\n \n         let pinned_ident = Ident::with_dummy_span(sym::pinned);\n         let (pinned_pat, pinned_pat_hid) =\n@@ -665,19 +674,19 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n                 hir::LangItem::PinNewUnchecked,\n                 arena_vec![self; ref_mut_pinned],\n-                Some(expr.hir_id),\n+                Some(expr_hir_id),\n             );\n             let get_context = self.expr_call_lang_item_fn_mut(\n                 gen_future_span,\n                 hir::LangItem::GetContext,\n                 arena_vec![self; task_context],\n-                Some(expr.hir_id),\n+                Some(expr_hir_id),\n             );\n             let call = self.expr_call_lang_item_fn(\n                 span,\n                 hir::LangItem::FuturePoll,\n                 arena_vec![self; new_unchecked, get_context],\n-                Some(expr.hir_id),\n+                Some(expr_hir_id),\n             );\n             self.arena.alloc(self.expr_unsafe(call))\n         };\n@@ -694,7 +703,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n                 hir::LangItem::PollReady,\n                 ready_field,\n-                Some(expr.hir_id),\n+                Some(expr_hir_id),\n             );\n             let break_x = self.with_loop_scope(loop_node_id, move |this| {\n                 let expr_break =\n@@ -710,7 +719,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 span,\n                 hir::LangItem::PollPending,\n                 &[],\n-                Some(expr.hir_id),\n+                Some(expr_hir_id),\n             );\n             let empty_block = self.expr_block_empty(span);\n             self.arm(pending_pat, empty_block)\n@@ -731,7 +740,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             let unit = self.expr_unit(span);\n             let yield_expr = self.expr(\n                 span,\n-                hir::ExprKind::Yield(unit, hir::YieldSource::Await { expr: Some(expr.hir_id) }),\n+                hir::ExprKind::Yield(unit, hir::YieldSource::Await { expr: Some(expr_hir_id) }),\n                 ThinVec::new(),\n             );\n             let yield_expr = self.arena.alloc(yield_expr);\n@@ -778,6 +787,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             into_future_span,\n             hir::LangItem::IntoFutureIntoFuture,\n             arena_vec![self; expr],\n+            Some(expr_hir_id),\n         );\n \n         // match <into_future_expr> {"}, {"sha": "0f8c0e1b8cff85c36fabc3678c1c4c90bcf66273", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1153,7 +1153,7 @@ impl<'a> Parser<'a> {\n     /// Assuming we have just parsed `.`, continue parsing into an expression.\n     fn parse_dot_suffix(&mut self, self_arg: P<Expr>, lo: Span) -> PResult<'a, P<Expr>> {\n         if self.token.uninterpolated_span().rust_2018() && self.eat_keyword(kw::Await) {\n-            return Ok(self.mk_await_expr(self_arg));\n+            return Ok(self.mk_await_expr(self_arg, lo));\n         }\n \n         let fn_span_lo = self.token.span;\n@@ -2838,8 +2838,8 @@ impl<'a> Parser<'a> {\n         ExprKind::Call(f, args)\n     }\n \n-    fn mk_await_expr(&mut self, self_arg: P<Expr>) -> P<Expr> {\n-        let span = self.prev_token.span;\n+    fn mk_await_expr(&mut self, self_arg: P<Expr>, lo: Span) -> P<Expr> {\n+        let span = lo.to(self.prev_token.span);\n         let await_expr = self.mk_expr(span, ExprKind::Await(self_arg), AttrVec::new());\n         self.recover_from_await_method_call();\n         await_expr"}, {"sha": "8968c163987dcc01951856789412932ab3d63145", "filename": "compiler/rustc_passes/src/region.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_passes%2Fsrc%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fregion.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -421,11 +421,14 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n         // Mark this expr's scope and all parent scopes as containing `yield`.\n         let mut scope = Scope { id: expr.hir_id.local_id, data: ScopeData::Node };\n         loop {\n-            let data = YieldData {\n-                span: expr.span,\n-                expr_and_pat_count: visitor.expr_and_pat_count,\n-                source: *source,\n+            let span = match expr.kind {\n+                hir::ExprKind::Yield(expr, hir::YieldSource::Await { .. }) => {\n+                    expr.span.shrink_to_hi().to(expr.span)\n+                }\n+                _ => expr.span,\n             };\n+            let data =\n+                YieldData { span, expr_and_pat_count: visitor.expr_and_pat_count, source: *source };\n             visitor.scope_tree.yield_in_scope.insert(scope, data);\n             if visitor.pessimistic_yield {\n                 debug!(\"resolve_expr in pessimistic_yield - marking scope {:?} for fixup\", scope);"}, {"sha": "67088ec83fa1d218245c828efb08c490fd1973b8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -886,46 +886,48 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let span = obligation.cause.span;\n \n-        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code {\n-            // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n-            // and if not maybe suggest doing something else? If we kept the expression around we\n-            // could also check if it is an fn call (very likely) and suggest changing *that*, if\n-            // it is from the local crate.\n-            err.span_suggestion_verbose(\n-                span,\n-                \"do not `.await` the expression\",\n-                String::new(),\n-                Applicability::MachineApplicable,\n-            );\n-            // FIXME: account for associated `async fn`s.\n+        if let ObligationCauseCode::AwaitableExpr(hir_id) = obligation.cause.code.peel_derives() {\n             let hir = self.tcx.hir();\n             if let Some(node) = hir_id.and_then(|hir_id| hir.find(hir_id)) {\n-                if let hir::Node::Expr(hir::Expr {\n-                    span, kind: hir::ExprKind::Call(base, _), ..\n-                }) = node\n-                {\n-                    if let ty::PredicateKind::Trait(pred) =\n-                        obligation.predicate.kind().skip_binder()\n-                    {\n-                        err.span_label(*span, &format!(\"this call returns `{}`\", pred.self_ty()));\n-                    }\n-                    if let Some(typeck_results) =\n-                        self.in_progress_typeck_results.map(|t| t.borrow())\n-                    {\n-                        let ty = typeck_results.expr_ty_adjusted(base);\n-                        if let ty::FnDef(def_id, _substs) = ty.kind() {\n-                            if let Some(hir::Node::Item(hir::Item { span, ident, .. })) =\n-                                hir.get_if_local(*def_id)\n-                            {\n-                                err.span_suggestion_verbose(\n-                                    span.shrink_to_lo(),\n-                                    &format!(\n-                                        \"alternatively, consider making `fn {}` asynchronous\",\n-                                        ident\n-                                    ),\n-                                    \"async \".to_string(),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                if let hir::Node::Expr(expr) = node {\n+                    // FIXME: use `obligation.predicate.kind()...trait_ref.self_ty()` to see if we have `()`\n+                    // and if not maybe suggest doing something else? If we kept the expression around we\n+                    // could also check if it is an fn call (very likely) and suggest changing *that*, if\n+                    // it is from the local crate.\n+                    err.span_suggestion_verbose(\n+                        expr.span.shrink_to_hi().with_hi(span.hi()),\n+                        \"do not `.await` the expression\",\n+                        String::new(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                    // FIXME: account for associated `async fn`s.\n+                    if let hir::Expr { span, kind: hir::ExprKind::Call(base, _), .. } = expr {\n+                        if let ty::PredicateKind::Trait(pred) =\n+                            obligation.predicate.kind().skip_binder()\n+                        {\n+                            err.span_label(\n+                                *span,\n+                                &format!(\"this call returns `{}`\", pred.self_ty()),\n+                            );\n+                        }\n+                        if let Some(typeck_results) =\n+                            self.in_progress_typeck_results.map(|t| t.borrow())\n+                        {\n+                            let ty = typeck_results.expr_ty_adjusted(base);\n+                            if let ty::FnDef(def_id, _substs) = ty.kind() {\n+                                if let Some(hir::Node::Item(hir::Item { span, ident, .. })) =\n+                                    hir.get_if_local(*def_id)\n+                                {\n+                                    err.span_suggestion_verbose(\n+                                        span.shrink_to_lo(),\n+                                        &format!(\n+                                            \"alternatively, consider making `fn {}` asynchronous\",\n+                                            ident\n+                                        ),\n+                                        \"async \".to_string(),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "738af9bfb8cc56b04e6a24524d282e28de41093f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -810,7 +810,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             def_id,\n             &substs,\n             match lang_item {\n-                hir::LangItem::FuturePoll => ObligationCauseCode::AwaitableExpr(expr_hir_id),\n+                hir::LangItem::IntoFutureIntoFuture => {\n+                    ObligationCauseCode::AwaitableExpr(expr_hir_id)\n+                }\n                 hir::LangItem::IteratorNext | hir::LangItem::IntoIterIntoIter => {\n                     ObligationCauseCode::ForLoopIterator\n                 }"}, {"sha": "b4323c314badcc4659542f884b919b924f164cdb", "filename": "src/test/ui/async-await/await-keyword/incorrect-syntax-suggestions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fawait-keyword%2Fincorrect-syntax-suggestions.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -162,68 +162,68 @@ LL |     let _ = (await bar())?;\n    |              ^^^^^^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:71:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:71:18\n    |\n LL | fn foo13() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await();\n-   |                   ^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:76:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:76:18\n    |\n LL | fn foo14() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await()?;\n-   |                   ^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:81:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:81:18\n    |\n LL | fn foo15() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await;\n-   |                   ^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:85:19\n+  --> $DIR/incorrect-syntax-suggestions.rs:85:18\n    |\n LL | fn foo16() -> Result<(), ()> {\n    |    ----- this is not `async`\n LL |     let _ = bar().await?;\n-   |                   ^^^^^ only allowed inside `async` functions and blocks\n+   |                  ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:90:23\n+  --> $DIR/incorrect-syntax-suggestions.rs:90:22\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = bar().await?;\n-   |                       ^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:97:23\n+  --> $DIR/incorrect-syntax-suggestions.rs:97:22\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = bar().await?;\n-   |                       ^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:113:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:113:29\n    |\n LL |     fn foo() -> Result<(), ()> {\n    |        --- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                             ^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/incorrect-syntax-suggestions.rs:121:17\n+  --> $DIR/incorrect-syntax-suggestions.rs:121:29\n    |\n LL |     let foo = || {\n    |               -- this is not `async`\n LL |         let _ = await!(bar())?;\n-   |                 ^^^^^^^^^^^^^ only allowed inside `async` functions and blocks\n+   |                             ^ only allowed inside `async` functions and blocks\n \n error: aborting due to 33 previous errors\n "}, {"sha": "9e7c5847b3b2ee846aff7bea81d414cef29f0725", "filename": "src/test/ui/async-await/issue-70594.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -6,7 +6,6 @@ async fn fun() {\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `.await` is not allowed in a `const`\n     //~| error: `()` is not a future\n-    //~| error: `()` is not a future\n }\n \n fn main() {}"}, {"sha": "405709286822a029e88346ff1b1b5ea6ec5750b6", "filename": "src/test/ui/async-await/issue-70594.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70594.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,33 +1,23 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-70594.rs:4:12\n+  --> $DIR/issue-70594.rs:4:11\n    |\n LL | async fn fun() {\n    |          --- this is not `async`\n LL |     [1; ().await];\n-   |            ^^^^^ only allowed inside `async` functions and blocks\n+   |           ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0744]: `.await` is not allowed in a `const`\n-  --> $DIR/issue-70594.rs:4:12\n+  --> $DIR/issue-70594.rs:4:9\n    |\n LL |     [1; ().await];\n-   |            ^^^^^\n+   |         ^^^^^^^^\n \n error[E0744]: `.await` is not allowed in a `const`\n   --> $DIR/issue-70594.rs:4:11\n    |\n LL |     [1; ().await];\n    |           ^^^^^^\n \n-error[E0277]: `()` is not a future\n-  --> $DIR/issue-70594.rs:4:12\n-   |\n-LL |     [1; ().await];\n-   |            ^^^^^ `()` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `()`\n-   = note: () must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n-\n error[E0277]: `()` is not a future\n   --> $DIR/issue-70594.rs:4:11\n    |\n@@ -36,13 +26,14 @@ LL |     [1; ().await];\n    |\n    = help: the trait `Future` is not implemented for `()`\n    = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n help: do not `.await` the expression\n    |\n LL -     [1; ().await];\n LL +     [1; ()];\n    | \n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0728, E0744.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "f3ce5d1c897c3c5118af87de8d64fde83adf67a8", "filename": "src/test/ui/async-await/issues/issue-51719.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51719.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,8 +1,8 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51719.rs:8:25\n+  --> $DIR/issue-51719.rs:8:24\n    |\n LL |     let _gen = || foo().await;\n-   |                --       ^^^^^ only allowed inside `async` functions and blocks\n+   |                --      ^^^^^^ only allowed inside `async` functions and blocks\n    |                |\n    |                this is not `async`\n "}, {"sha": "8696a5b798b3c3259d62301ee82e28f05be5d8b0", "filename": "src/test/ui/async-await/issues/issue-51751.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-51751.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-51751.rs:9:27\n+  --> $DIR/issue-51751.rs:9:26\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let result = inc(10000);\n LL |     let finished = result.await;\n-   |                           ^^^^^ only allowed inside `async` functions and blocks\n+   |                          ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "40ccf25712e2b06dc6833b227d7e15a55a31cc85", "filename": "src/test/ui/async-await/issues/issue-62009-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -12,5 +12,4 @@ fn main() {\n     (|_| 2333).await;\n     //~^ ERROR `await` is only allowed inside `async` functions and blocks\n     //~| ERROR is not a future\n-    //~| ERROR is not a future\n }"}, {"sha": "3ea5dac76d4c5ea5e583d3c306abffa97941464a", "filename": "src/test/ui/async-await/issues/issue-62009-1.stderr", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-1.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,38 +1,28 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:6:23\n+  --> $DIR/issue-62009-1.rs:6:22\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     async { let (); }.await;\n-   |                       ^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:10:7\n+  --> $DIR/issue-62009-1.rs:10:6\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     }.await;\n-   |       ^^^^^ only allowed inside `async` functions and blocks\n+   |      ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-1.rs:12:16\n+  --> $DIR/issue-62009-1.rs:12:15\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n ...\n LL |     (|_| 2333).await;\n-   |                ^^^^^ only allowed inside `async` functions and blocks\n-\n-error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n-  --> $DIR/issue-62009-1.rs:12:16\n-   |\n-LL |     (|_| 2333).await;\n-   |                ^^^^^ `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n-   |\n-   = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n-   = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n-   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n+   |               ^^^^^^ only allowed inside `async` functions and blocks\n \n error[E0277]: `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]` is not a future\n   --> $DIR/issue-62009-1.rs:12:15\n@@ -42,13 +32,14 @@ LL |     (|_| 2333).await;\n    |\n    = help: the trait `Future` is not implemented for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n    = note: [closure@$DIR/issue-62009-1.rs:12:5: 12:15] must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `[closure@$DIR/issue-62009-1.rs:12:5: 12:15]`\n help: do not `.await` the expression\n    |\n LL -     (|_| 2333).await;\n LL +     (|_| 2333);\n    | \n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0277, E0728.\n For more information about an error, try `rustc --explain E0277`."}, {"sha": "92e9a8a69a88b1e0df087dc32130c454a173489e", "filename": "src/test/ui/async-await/issues/issue-62009-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62009-2.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,10 +1,10 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/issue-62009-2.rs:8:23\n+  --> $DIR/issue-62009-2.rs:8:22\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     (async || 2333)().await;\n-   |                       ^^^^^ only allowed inside `async` functions and blocks\n+   |                      ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "20b827479fa808c75804caa4ff6caf5111070d0c", "filename": "src/test/ui/async-await/issues/non-async-enclosing-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fnon-async-enclosing-span.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,11 +1,11 @@\n error[E0728]: `await` is only allowed inside `async` functions and blocks\n-  --> $DIR/non-async-enclosing-span.rs:9:28\n+  --> $DIR/non-async-enclosing-span.rs:9:27\n    |\n LL | fn main() {\n    |    ---- this is not `async`\n LL |     let x = move || {};\n LL |     let y = do_the_thing().await;\n-   |                            ^^^^^ only allowed inside `async` functions and blocks\n+   |                           ^^^^^^ only allowed inside `async` functions and blocks\n \n error: aborting due to previous error\n "}, {"sha": "3cca9616a358a34d7489d0efbd75aca2c185c2ba", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -39,7 +39,7 @@ LL |     dummy();\n    |            +\n \n error[E0308]: `if` and `else` have incompatible types\n-  --> $DIR/suggest-missing-await.rs:35:17\n+  --> $DIR/suggest-missing-await.rs:35:9\n    |\n LL |       let _x = if true {\n    |  ______________-\n@@ -48,7 +48,7 @@ LL | |         dummy()\n LL | |\n LL | |     } else {\n LL | |         dummy().await\n-   | |                 ^^^^^ expected opaque type, found `()`\n+   | |         ^^^^^^^^^^^^^ expected opaque type, found `()`\n LL | |\n LL | |     };\n    | |_____- `if` and `else` have incompatible types\n@@ -61,7 +61,7 @@ LL |         dummy().await\n    |                ++++++\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/suggest-missing-await.rs:45:22\n+  --> $DIR/suggest-missing-await.rs:45:14\n    |\n LL |       let _x = match 0usize {\n    |  ______________-\n@@ -70,7 +70,7 @@ LL | |         0 => dummy(),\n LL | |         1 => dummy(),\n    | |              ------- this is found to be of type `impl Future<Output = ()>`\n LL | |         2 => dummy().await,\n-   | |                      ^^^^^ expected opaque type, found `()`\n+   | |              ^^^^^^^^^^^^^ expected opaque type, found `()`\n LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types"}, {"sha": "fc22ebc5972bc9f67e589915e7e05f209d25c82a", "filename": "src/test/ui/async-await/unnecessary-await.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Funnecessary-await.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -7,6 +7,8 @@ LL |     boo().await;\n    |     this call returns `()`\n    |\n    = help: the trait `Future` is not implemented for `()`\n+   = note: () must be a future or must implement `IntoFuture` to be awaited\n+   = note: required because of the requirements on the impl of `IntoFuture` for `()`\n help: do not `.await` the expression\n    |\n LL -     boo().await;"}, {"sha": "c6650d60c21e97371bf7d0614276a88c5eb47022", "filename": "src/test/ui/issues/issue-33941.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33941.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -23,20 +23,6 @@ LL |     for _ in HashMap::new().iter().cloned() {}\n    = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n    = note: required because of the requirements on the impl of `IntoIterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n \n-<<<<<<< HEAD\n error: aborting due to 2 previous errors\n-=======\n-error[E0271]: type mismatch resolving `<std::collections::hash_map::Iter<'_, _, _> as Iterator>::Item == &_`\n-  --> $DIR/issue-33941.rs:4:14\n-   |\n-LL |     for _ in HashMap::new().iter().cloned() {}\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected tuple, found reference\n-   |\n-   = note:  expected tuple `(&_, &_)`\n-           found reference `&_`\n-   = note: required because of the requirements on the impl of `Iterator` for `Cloned<std::collections::hash_map::Iter<'_, _, _>>`\n-\n-error: aborting due to 3 previous errors\n->>>>>>> 330b90f5fc1 (Remove yet more output from `for`-loop and `?` errors)\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "5b098659377c64805c5dc72eb8904bc740ca8ba1", "filename": "src/tools/clippy/clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -73,7 +73,7 @@ fn contains_assign_expr<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) ->\n     seen\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone)]\n struct LocalAssign {\n     lhs_id: HirId,\n     lhs_span: Span,\n@@ -154,9 +154,14 @@ fn assignment_suggestions<'tcx>(\n         assignments.push(assign);\n     }\n \n-    let suggestions = assignments\n+    let suggestions = assignments.clone()\n         .into_iter()\n-        .map(|assignment| Some((assignment.span, snippet_opt(cx, assignment.rhs_span)?)))\n+        .map(|assignment| Some((assignment.span.until(assignment.rhs_span), String::new())))\n+        .chain(\n+            assignments\n+                .into_iter()\n+                .map(|assignment| Some((assignment.rhs_span.shrink_to_hi().with_hi(assignment.span.hi()), String::new())))\n+        )\n         .collect::<Option<Vec<(Span, String)>>>()?;\n \n     let applicability = if suggestions.len() > 1 {"}, {"sha": "32d5d04fde4d52001484eef8e615a157eaad177e", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.fixed", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8888d0d61e800654db4e1cd52e9e81dffb5c8ee2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8888d0d61e800654db4e1cd52e9e81dffb5c8ee2/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.fixed?ref=8888d0d61e800654db4e1cd52e9e81dffb5c8ee2", "patch": "@@ -1,38 +0,0 @@\n-// run-rustfix\n-\n-#![allow(unused, clippy::assign_op_pattern)]\n-\n-fn main() {\n-    \n-    let a = \"zero\";\n-\n-    \n-    \n-    let b = 1;\n-    let c = 2;\n-\n-    \n-    let d: usize = 1;\n-\n-    \n-    let mut e = 1;\n-    e = 2;\n-\n-    \n-    let f = match 1 {\n-        1 => \"three\",\n-        _ => return,\n-    }; // has semi\n-\n-    \n-    let g: usize = if true {\n-        5\n-    } else {\n-        panic!();\n-    };\n-\n-    \n-    let h = format!(\"{}\", e);\n-\n-    println!(\"{}\", a);\n-}"}, {"sha": "76099df0e0689cfa8e51b25fe3564315d171b2cf", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.rs?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![allow(unused, clippy::assign_op_pattern)]\n \n fn main() {"}, {"sha": "728e19252ea707b4428fed20f466f12646e0d6d8", "filename": "src/tools/clippy/tests/ui/needless_late_init_fixable.stderr", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b825b0fe6333ff08552aefa1fb25dfdc932b8bca/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_late_init_fixable.stderr?ref=b825b0fe6333ff08552aefa1fb25dfdc932b8bca", "patch": "@@ -1,5 +1,5 @@\n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:6:5\n+  --> $DIR/needless_late_init_fixable.rs:4:5\n    |\n LL |     let a;\n    |     ^^^^^^\n@@ -11,7 +11,7 @@ LL |     let a = \"zero\";\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:9:5\n+  --> $DIR/needless_late_init_fixable.rs:7:5\n    |\n LL |     let b;\n    |     ^^^^^^\n@@ -22,7 +22,7 @@ LL |     let b = 1;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:10:5\n+  --> $DIR/needless_late_init_fixable.rs:8:5\n    |\n LL |     let c;\n    |     ^^^^^^\n@@ -33,7 +33,7 @@ LL |     let c = 2;\n    |     ~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:14:5\n+  --> $DIR/needless_late_init_fixable.rs:12:5\n    |\n LL |     let d: usize;\n    |     ^^^^^^^^^^^^^\n@@ -44,7 +44,7 @@ LL |     let d: usize = 1;\n    |     ~~~~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:17:5\n+  --> $DIR/needless_late_init_fixable.rs:15:5\n    |\n LL |     let mut e;\n    |     ^^^^^^^^^^\n@@ -55,7 +55,7 @@ LL |     let mut e = 1;\n    |     ~~~~~~~~~\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:21:5\n+  --> $DIR/needless_late_init_fixable.rs:19:5\n    |\n LL |     let f;\n    |     ^^^^^^\n@@ -66,11 +66,12 @@ LL |     let f = match 1 {\n    |     +++++++\n help: remove the assignments from the `match` arms\n    |\n-LL |         1 => \"three\",\n-   |              ~~~~~~~\n+LL -         1 => f = \"three\",\n+LL +         1 => \"three\",\n+   | \n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:27:5\n+  --> $DIR/needless_late_init_fixable.rs:25:5\n    |\n LL |     let g: usize;\n    |     ^^^^^^^^^^^^^\n@@ -81,15 +82,16 @@ LL |     let g: usize = if true {\n    |     ++++++++++++++\n help: remove the assignments from the branches\n    |\n-LL |         5\n-   |\n+LL -         g = 5;\n+LL +         5\n+   | \n help: add a semicolon after the `if` expression\n    |\n LL |     };\n    |      +\n \n error: unneeded late initalization\n-  --> $DIR/needless_late_init_fixable.rs:34:5\n+  --> $DIR/needless_late_init_fixable.rs:32:5\n    |\n LL |     let h;\n    |     ^^^^^^"}]}