{"sha": "4f8938c616af167e47a05abafdfa67eed5f13533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmODkzOGM2MTZhZjE2N2U0N2EwNWFiYWZkZmE2N2VlZDVmMTM1MzM=", "commit": {"author": {"name": "Victor M. Suarez", "email": "svmnotn@gmail.com", "date": "2016-01-12T23:12:48Z"}, "committer": {"name": "Victor M. Suarez", "email": "svmnotn@gmail.com", "date": "2016-01-12T23:12:48Z"}, "message": "Allow for setting of write-mode via config file. FIxes #215\n\nAlso from @marcusklaas:\n Refactor code output functions\n\n Specifically, `write_all_files` no longer returns a HashMap. It would sometimes\n contain items, and sometimes be empty. When \"fixed\" newlines are required, this\n must now be done with a separate call. The tests use this strategy and should now pass!", "tree": {"sha": "994b148dd6b731f42e1b93042656de361395a290", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/994b148dd6b731f42e1b93042656de361395a290"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f8938c616af167e47a05abafdfa67eed5f13533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8938c616af167e47a05abafdfa67eed5f13533", "html_url": "https://github.com/rust-lang/rust/commit/4f8938c616af167e47a05abafdfa67eed5f13533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f8938c616af167e47a05abafdfa67eed5f13533/comments", "author": {"login": "svmnotn", "id": 12618337, "node_id": "MDQ6VXNlcjEyNjE4MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/12618337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svmnotn", "html_url": "https://github.com/svmnotn", "followers_url": "https://api.github.com/users/svmnotn/followers", "following_url": "https://api.github.com/users/svmnotn/following{/other_user}", "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}", "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions", "organizations_url": "https://api.github.com/users/svmnotn/orgs", "repos_url": "https://api.github.com/users/svmnotn/repos", "events_url": "https://api.github.com/users/svmnotn/events{/privacy}", "received_events_url": "https://api.github.com/users/svmnotn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "svmnotn", "id": 12618337, "node_id": "MDQ6VXNlcjEyNjE4MzM3", "avatar_url": "https://avatars.githubusercontent.com/u/12618337?v=4", "gravatar_id": "", "url": "https://api.github.com/users/svmnotn", "html_url": "https://github.com/svmnotn", "followers_url": "https://api.github.com/users/svmnotn/followers", "following_url": "https://api.github.com/users/svmnotn/following{/other_user}", "gists_url": "https://api.github.com/users/svmnotn/gists{/gist_id}", "starred_url": "https://api.github.com/users/svmnotn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/svmnotn/subscriptions", "organizations_url": "https://api.github.com/users/svmnotn/orgs", "repos_url": "https://api.github.com/users/svmnotn/repos", "events_url": "https://api.github.com/users/svmnotn/events{/privacy}", "received_events_url": "https://api.github.com/users/svmnotn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba465e0fc2b2203f7ebbdd50be7400ae43389467", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba465e0fc2b2203f7ebbdd50be7400ae43389467", "html_url": "https://github.com/rust-lang/rust/commit/ba465e0fc2b2203f7ebbdd50be7400ae43389467"}], "stats": {"total": 202, "additions": 97, "deletions": 105}, "files": [{"sha": "c795d5294090b58b1f5ac35e7d5d8b457bf03419", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -17,8 +17,8 @@ extern crate toml;\n extern crate env_logger;\n extern crate getopts;\n \n-use rustfmt::{WriteMode, run, run_from_stdin};\n-use rustfmt::config::Config;\n+use rustfmt::{run, run_from_stdin};\n+use rustfmt::config::{Config, WriteMode};\n \n use std::env;\n use std::fs::{self, File};\n@@ -216,7 +216,7 @@ fn determine_operation(matches: &Matches) -> Operation {\n                 Err(..) => return Operation::InvalidInput(\"Unrecognized write mode\".into()),\n             }\n         }\n-        None => WriteMode::Replace,\n+        None => WriteMode::Default,\n     };\n \n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();"}, {"sha": "4576ecc5d2abf1abe0de886661eeaad788f01ae3", "filename": "src/config.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -120,6 +120,24 @@ configuration_option_enum! { ReportTactic:\n     Never,\n }\n \n+configuration_option_enum! { WriteMode:\n+    // Used internally to represent when no option is given\n+    // Treated as Replace.\n+    Default,\n+    // Backsup the original file and overwrites the orignal.\n+    Replace,\n+    // Overwrites original file without backup.\n+    Overwrite,\n+    // Write the output to stdout.\n+    Display,\n+    // Write the diff to stdout.\n+    Diff,\n+    // Display how much of the input file was processed\n+    Coverage,\n+    // Unfancy stdout\n+    Plain,\n+}\n+\n // This trait and the following impl blocks are there so that we an use\n // UCFS inside the get_docs() function on types for configs.\n pub trait ConfigType {\n@@ -323,4 +341,6 @@ create_config! {\n     match_block_trailing_comma: bool, false,\n         \"Put a trailing comma after a block based match arm (non-block arms are not affected)\";\n     match_wildcard_trailing_comma: bool, true, \"Put a trailing comma after a wildcard arm\";\n+    write_mode: WriteMode, WriteMode::Default,\n+        \"What Write Mode to use when none is supplied: Replace, Overwrite, Display, Diff, Coverage\";\n }"}, {"sha": "b518eaaa3440b02576b0ada27d111e180cb09f6b", "filename": "src/filemap.rs", "status": "modified", "additions": 40, "deletions": 52, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -15,10 +15,9 @@ use strings::string_buffer::StringBuffer;\n \n use std::collections::HashMap;\n use std::fs::{self, File};\n-use std::io::{self, Write, Read, stdout};\n+use std::io::{self, Write, Read, stdout, BufWriter};\n \n-use WriteMode;\n-use config::{NewlineStyle, Config};\n+use config::{NewlineStyle, Config, WriteMode};\n use rustfmt_diff::{make_diff, print_diff};\n \n // A map of the files of a crate, with their new content\n@@ -34,56 +33,55 @@ pub fn append_newlines(file_map: &mut FileMap) {\n pub fn write_all_files(file_map: &FileMap,\n                        mode: WriteMode,\n                        config: &Config)\n-                       -> Result<(HashMap<String, String>), io::Error> {\n-    let mut result = HashMap::new();\n+                       -> Result<(), io::Error> {\n     for filename in file_map.keys() {\n-        let one_result = try!(write_file(&file_map[filename], filename, mode, config));\n-        if let Some(r) = one_result {\n-            result.insert(filename.clone(), r);\n-        }\n+        try!(write_file(&file_map[filename], filename, mode, config));\n     }\n \n-    Ok(result)\n+    Ok(())\n }\n \n-pub fn write_file(text: &StringBuffer,\n-                  filename: &str,\n-                  mode: WriteMode,\n-                  config: &Config)\n-                  -> Result<Option<String>, io::Error> {\n-\n-    // prints all newlines either as `\\n` or as `\\r\\n`\n-    fn write_system_newlines<T>(mut writer: T,\n+// Prints all newlines either as `\\n` or as `\\r\\n`.\n+pub fn write_system_newlines<T>(writer: T,\n                                 text: &StringBuffer,\n                                 config: &Config)\n                                 -> Result<(), io::Error>\n-        where T: Write\n-    {\n-        let style = if config.newline_style == NewlineStyle::Native {\n-            if cfg!(windows) {\n-                NewlineStyle::Windows\n-            } else {\n-                NewlineStyle::Unix\n-            }\n+    where T: Write\n+{\n+    // Buffer output, since we're writing a since char at a time.\n+    let mut writer = BufWriter::new(writer);\n+\n+    let style = if config.newline_style == NewlineStyle::Native {\n+        if cfg!(windows) {\n+            NewlineStyle::Windows\n         } else {\n-            config.newline_style\n-        };\n-\n-        match style {\n-            NewlineStyle::Unix => write!(writer, \"{}\", text),\n-            NewlineStyle::Windows => {\n-                for (c, _) in text.chars() {\n-                    match c {\n-                        '\\n' => try!(write!(writer, \"\\r\\n\")),\n-                        '\\r' => continue,\n-                        c => try!(write!(writer, \"{}\", c)),\n-                    }\n+            NewlineStyle::Unix\n+        }\n+    } else {\n+        config.newline_style\n+    };\n+\n+    match style {\n+        NewlineStyle::Unix => write!(writer, \"{}\", text),\n+        NewlineStyle::Windows => {\n+            for (c, _) in text.chars() {\n+                match c {\n+                    '\\n' => try!(write!(writer, \"\\r\\n\")),\n+                    '\\r' => continue,\n+                    c => try!(write!(writer, \"{}\", c)),\n                 }\n-                Ok(())\n             }\n-            NewlineStyle::Native => unreachable!(),\n+            Ok(())\n         }\n+        NewlineStyle::Native => unreachable!(),\n     }\n+}\n+\n+pub fn write_file(text: &StringBuffer,\n+                  filename: &str,\n+                  mode: WriteMode,\n+                  config: &Config)\n+                  -> Result<Option<String>, io::Error> {\n \n     fn source_and_formatted_text(text: &StringBuffer,\n                                  filename: &str,\n@@ -123,11 +121,6 @@ pub fn write_file(text: &StringBuffer,\n             let file = try!(File::create(filename));\n             try!(write_system_newlines(file, text, config));\n         }\n-        WriteMode::NewFile(extn) => {\n-            let filename = filename.to_owned() + \".\" + extn;\n-            let file = try!(File::create(&filename));\n-            try!(write_system_newlines(file, text, config));\n-        }\n         WriteMode::Plain => {\n             let stdout = stdout();\n             let stdout = stdout.lock();\n@@ -146,13 +139,8 @@ pub fn write_file(text: &StringBuffer,\n                            |line_num| format!(\"\\nDiff at line {}:\", line_num));\n             }\n         }\n-        WriteMode::Return => {\n-            // io::Write is not implemented for String, working around with\n-            // Vec<u8>\n-            let mut v = Vec::new();\n-            try!(write_system_newlines(&mut v, text, config));\n-            // won't panic, we are writing correct utf8\n-            return Ok(Some(String::from_utf8(v).unwrap()));\n+        WriteMode::Default => {\n+            unreachable!(\"The WriteMode should NEVER Be default at this point!\");\n         }\n     }\n "}, {"sha": "fccc0f0934c9a3abf5a6c1925f2a01aca5439421", "filename": "src/lib.rs", "status": "modified", "additions": 16, "deletions": 41, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -34,12 +34,11 @@ use std::ops::{Add, Sub};\n use std::path::Path;\n use std::collections::HashMap;\n use std::fmt;\n-use std::str::FromStr;\n \n use issues::{BadIssueSeeker, Issue};\n use filemap::FileMap;\n use visitor::FmtVisitor;\n-use config::Config;\n+use config::{Config, WriteMode};\n \n #[macro_use]\n mod utils;\n@@ -187,42 +186,6 @@ impl Sub<usize> for Indent {\n     }\n }\n \n-#[derive(Copy, Clone)]\n-pub enum WriteMode {\n-    // Backsup the original file and overwrites the orignal.\n-    Replace,\n-    // Overwrites original file without backup.\n-    Overwrite,\n-    // str is the extension of the new file.\n-    NewFile(&'static str),\n-    // Write the output to stdout.\n-    Display,\n-    // Write the diff to stdout.\n-    Diff,\n-    // Return the result as a mapping from filenames to Strings.\n-    Return,\n-    // Display how much of the input file was processed\n-    Coverage,\n-    // Unfancy stdout\n-    Plain,\n-}\n-\n-impl FromStr for WriteMode {\n-    type Err = ();\n-\n-    fn from_str(s: &str) -> Result<Self, Self::Err> {\n-        match s {\n-            \"replace\" => Ok(WriteMode::Replace),\n-            \"display\" => Ok(WriteMode::Display),\n-            \"overwrite\" => Ok(WriteMode::Overwrite),\n-            \"diff\" => Ok(WriteMode::Diff),\n-            \"coverage\" => Ok(WriteMode::Coverage),\n-            \"plain\" => Ok(WriteMode::Plain),\n-            _ => Err(()),\n-        }\n-    }\n-}\n-\n pub enum ErrorKind {\n     // Line has exceeded character limit\n     LineOverflow,\n@@ -445,24 +408,36 @@ pub fn format(file: &Path, config: &Config, mode: WriteMode) -> FileMap {\n     file_map\n }\n \n+// Make sure that we are using the correct WriteMode,\n+// preferring what is passed as an argument\n+fn check_write_mode(arg: WriteMode, config: WriteMode) -> WriteMode {\n+    match (arg, config) {\n+        (WriteMode::Default, WriteMode::Default) => WriteMode::Replace,\n+        (WriteMode::Default, mode) => mode,\n+        (mode, _) => mode,\n+    }\n+}\n+\n // args are the arguments passed on the command line, generally passed through\n // to the compiler.\n // write_mode determines what happens to the result of running rustfmt, see\n // WriteMode.\n pub fn run(file: &Path, write_mode: WriteMode, config: &Config) {\n-    let mut result = format(file, config, write_mode);\n+    let mode = check_write_mode(write_mode, config.write_mode);\n+    let mut result = format(file, config, mode);\n \n     print!(\"{}\", fmt_lines(&mut result, config));\n \n-    let write_result = filemap::write_all_files(&result, write_mode, config);\n+    let write_result = filemap::write_all_files(&result, mode, config);\n \n     if let Err(msg) = write_result {\n         println!(\"Error writing files: {}\", msg);\n     }\n }\n \n // Similar to run, but takes an input String instead of a file to format\n-pub fn run_from_stdin(input: String, mode: WriteMode, config: &Config) {\n+pub fn run_from_stdin(input: String, write_mode: WriteMode, config: &Config) {\n+    let mode = check_write_mode(write_mode, config.write_mode);\n     let mut result = format_string(input, config, mode);\n     fmt_lines(&mut result, config);\n "}, {"sha": "cd69b6dcc80b90c0b06b142efec42ee444975949", "filename": "src/missed_spans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use WriteMode;\n+use config::WriteMode;\n use visitor::FmtVisitor;\n use syntax::codemap::{self, BytePos, Span, Pos};\n use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};"}, {"sha": "1f7de66f91ce9c457932bc285b7ef1719c5f503d", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -15,9 +15,9 @@ use syntax::visit;\n \n use strings::string_buffer::StringBuffer;\n \n-use {Indent, WriteMode};\n+use Indent;\n use utils;\n-use config::Config;\n+use config::{Config, WriteMode};\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n use macros::rewrite_macro;"}, {"sha": "378998e30a916f4312afa7d2aebc4e962f9802dc", "filename": "tests/system.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f8938c616af167e47a05abafdfa67eed5f13533/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f8938c616af167e47a05abafdfa67eed5f13533/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=4f8938c616af167e47a05abafdfa67eed5f13533", "patch": "@@ -19,7 +19,8 @@ use std::io::{self, Read, BufRead, BufReader};\n use std::path::Path;\n \n use rustfmt::*;\n-use rustfmt::config::{Config, ReportTactic};\n+use rustfmt::filemap::write_system_newlines;\n+use rustfmt::config::{Config, ReportTactic, WriteMode};\n use rustfmt::rustfmt_diff::*;\n \n static DIFF_CONTEXT_SIZE: usize = 3;\n@@ -43,7 +44,7 @@ fn system_tests() {\n     // Turn a DirEntry into a String that represents the relative path to the\n     // file.\n     let files = files.map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, WriteMode::Return);\n+    let (_reports, count, fails) = check_files(files, WriteMode::Default);\n \n     // Display results.\n     println!(\"Ran {} system tests.\", count);\n@@ -71,7 +72,7 @@ fn idempotence_tests() {\n                     .ok()\n                     .expect(\"Couldn't read target dir.\")\n                     .map(get_path_string);\n-    let (_reports, count, fails) = check_files(files, WriteMode::Return);\n+    let (_reports, count, fails) = check_files(files, WriteMode::Default);\n \n     // Display results.\n     println!(\"Ran {} idempotent tests.\", count);\n@@ -90,7 +91,7 @@ fn self_tests() {\n     // Hack because there's no `IntoIterator` impl for `[T; N]`.\n     let files = files.chain(Some(\"src/lib.rs\".to_owned()).into_iter());\n \n-    let (reports, count, fails) = check_files(files, WriteMode::Return);\n+    let (reports, count, fails) = check_files(files, WriteMode::Default);\n     let mut warnings = 0;\n \n     // Display results.\n@@ -162,8 +163,16 @@ pub fn idempotent_check(filename: String,\n     let mut file_map = format(Path::new(&filename), &config, write_mode);\n     let format_report = fmt_lines(&mut file_map, &config);\n \n-    // Won't panic, as we're not doing any IO.\n-    let write_result = filemap::write_all_files(&file_map, WriteMode::Return, &config).unwrap();\n+    let mut write_result = HashMap::new();\n+    for (filename, text) in file_map.iter() {\n+        let mut v = Vec::new();\n+        // Won't panic, as we're not doing any IO.\n+        write_system_newlines(&mut v, text, &config).unwrap();\n+        // Won't panic, we are writing correct utf8.\n+        let one_result = String::from_utf8(v).unwrap();\n+        write_result.insert(filename.clone(), one_result);\n+    }\n+\n     let target = sig_comments.get(\"target\").map(|x| &(*x)[..]);\n \n     handle_result(write_result, target, write_mode).map(|_| format_report)"}]}