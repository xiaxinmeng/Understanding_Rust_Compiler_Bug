{"sha": "83ecbb4a294abca245f8c515e298464e9425b9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZWNiYjRhMjk0YWJjYTI0NWY4YzUxNWUyOTg0NjRlOTQyNWI5YTI=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T20:08:21Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-10-23T20:10:44Z"}, "message": "add tests for self with const params", "tree": {"sha": "f5eb924523f50cda5128b9405ac245a11958c451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5eb924523f50cda5128b9405ac245a11958c451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83ecbb4a294abca245f8c515e298464e9425b9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83ecbb4a294abca245f8c515e298464e9425b9a2", "html_url": "https://github.com/rust-lang/rust/commit/83ecbb4a294abca245f8c515e298464e9425b9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83ecbb4a294abca245f8c515e298464e9425b9a2/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a15a256626d3a9e017a18bb60bf98b1a6358bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a15a256626d3a9e017a18bb60bf98b1a6358bd5", "html_url": "https://github.com/rust-lang/rust/commit/4a15a256626d3a9e017a18bb60bf98b1a6358bd5"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "193247af584bb579d240582f8de712df42b22aed", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/83ecbb4a294abca245f8c515e298464e9425b9a2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ecbb4a294abca245f8c515e298464e9425b9a2/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=83ecbb4a294abca245f8c515e298464e9425b9a2", "patch": "@@ -206,8 +206,10 @@ pub enum Res<Id = hir::HirId> {\n     /// ```rust\n     /// impl Foo { fn test() -> [u8; std::mem::size_of::<Self>()] {} }\n     /// ```\n+    /// We do however allow `Self` in repeat expression even if it is generic to not break code\n+    /// which already works on stable while causing the `const_evaluatable_unchecked` future compat lint.\n     ///\n-    /// FIXME(lazy_normalization_consts): Remove this bodge once this feature is stable.\n+    /// FIXME(lazy_normalization_consts): Remove this bodge once that feature is stable.\n     SelfTy(Option<DefId> /* trait */, Option<(DefId, bool)> /* impl */),\n     ToolMod, // e.g., `rustfmt` in `#[rustfmt::skip]`\n "}, {"sha": "dd82be33a8e80b7be29d5c4c1da7641f28bcd49d", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/83ecbb4a294abca245f8c515e298464e9425b9a2/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83ecbb4a294abca245f8c515e298464e9425b9a2/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.rs?ref=83ecbb4a294abca245f8c515e298464e9425b9a2", "patch": "@@ -1,4 +1,5 @@\n // check-pass\n+#![feature(min_const_generics)]\n #![allow(dead_code)]\n \n fn foo<T>() {\n@@ -13,7 +14,19 @@ impl<T> Foo<T> {\n     const ASSOC: usize = 4;\n \n     fn test() {\n-        [0; Self::ASSOC];\n+        let _ = [0; Self::ASSOC];\n+        //~^ WARN cannot use constants which depend on generic parameters in types\n+        //~| WARN this was previously accepted by the compiler but is being phased out\n+    }\n+}\n+\n+struct Bar<const N: usize>;\n+\n+impl<const N: usize> Bar<N> {\n+    const ASSOC: usize = 4;\n+\n+    fn test() {\n+        let _ = [0; Self::ASSOC];\n         //~^ WARN cannot use constants which depend on generic parameters in types\n         //~| WARN this was previously accepted by the compiler but is being phased out\n     }"}, {"sha": "4d0cab012f99e1fef4c9ab31b4c6422d4dfa89d0", "filename": "src/test/ui/const-generics/min_const_generics/const-evaluatable-unchecked.stderr", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83ecbb4a294abca245f8c515e298464e9425b9a2/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83ecbb4a294abca245f8c515e298464e9425b9a2/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fconst-evaluatable-unchecked.stderr?ref=83ecbb4a294abca245f8c515e298464e9425b9a2", "patch": "@@ -1,5 +1,5 @@\n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:5:9\n+  --> $DIR/const-evaluatable-unchecked.rs:6:9\n    |\n LL |     [0; std::mem::size_of::<*mut T>()];\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -9,13 +9,22 @@ LL |     [0; std::mem::size_of::<*mut T>()];\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n \n warning: cannot use constants which depend on generic parameters in types\n-  --> $DIR/const-evaluatable-unchecked.rs:16:13\n+  --> $DIR/const-evaluatable-unchecked.rs:17:21\n    |\n-LL |         [0; Self::ASSOC];\n-   |             ^^^^^^^^^^^\n+LL |         let _ = [0; Self::ASSOC];\n+   |                     ^^^^^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n \n-warning: 2 warnings emitted\n+warning: cannot use constants which depend on generic parameters in types\n+  --> $DIR/const-evaluatable-unchecked.rs:29:21\n+   |\n+LL |         let _ = [0; Self::ASSOC];\n+   |                     ^^^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #76200 <https://github.com/rust-lang/rust/issues/76200>\n+\n+warning: 3 warnings emitted\n "}]}