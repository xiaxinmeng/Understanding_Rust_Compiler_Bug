{"sha": "5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42", "node_id": "C_kwDOAAsO6NoAKDVmNzhiYjQ4ZWNiNTZjMGUyMjVkN2E3ZDdmMzllMDc0N2NlMjlhNDI", "commit": {"author": {"name": "Giles Cope", "email": "gilescope@gmail.com", "date": "2021-05-27T07:31:26Z"}, "committer": {"name": "gilescope", "email": "gilescope@gmail.com", "date": "2022-03-26T14:25:45Z"}, "message": "Better explanation", "tree": {"sha": "d639f2409cff1c9ebcfb7d2d12a6cf6aef82d92b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d639f2409cff1c9ebcfb7d2d12a6cf6aef82d92b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEh0hoVRXRPubZAqGkYx9jUtSpSe8FAmI/ImkACgkQYx9jUtSp\nSe+YJA//fw5blrtyxvNZH8m4vZFhEjcvkCnEiAgrbBZs43cGLbCiyVzounje45HA\nTIrGBfPucFJb4wjDq/4eNJvzxDbzU3S0VYTrtlb6DvtloeW+Z0foFVVrwuNjVViu\nEO36XADA4RpqNhK6AE+zDs+PtT6GNROF0pKGD7fXE1ODJJ3BXA1GRjvpQ02gBDe4\nl35V2+u73BXRIl+9yersSg2POpewWiuFjDbuZ7csJFAqnA266jZqx7ELcA1JbWpV\n6+upV3nu6UkieMbM51FNQ5BsOT1X42xIegjbVSE2YycFYlRyQQk30K0/xNvi+CWK\nyUeQ9Nui4ansvAoHLKNkZC1iVA+cerTG8SJRwYxcrpeW8t8TZGwfFB7kfq+gONh4\ndZcuLcOzewDyoGGS8yq7WIOIxI1AOtcco6Jst7ZgV0e4ZLZNllCGJygi5dzEhlcz\nrVJTVbS1nsAWNy48ZJPmy+LlBsjFkjyRmWRC3vEoi75+B6ST5UAbgk0a3wTG7BRq\n3bTxCGF3Selzpi4MHWPm8s9r+u7W2pDIr9/ZztDY1VpJYao4nbrYpCMGZ9ghCHyT\n/Cq3VKPuGC5dWh7hwrtlstrJUU6ZPc+5pmVJ8GgmSa/1AfDl+Ode1CGYnLedBh5H\niWbWHNP7PyWy9PJSstZkLpOEyskedURwMDvSPerP0Iu+gpM5vW0=\n=k6Nr\n-----END PGP SIGNATURE-----", "payload": "tree d639f2409cff1c9ebcfb7d2d12a6cf6aef82d92b\nparent e898257c088f7208cc33c50df1c1154103e2b3c7\nauthor Giles Cope <gilescope@gmail.com> 1622100686 +0100\ncommitter gilescope <gilescope@gmail.com> 1648304745 +0000\n\nBetter explanation\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42", "html_url": "https://github.com/rust-lang/rust/commit/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42/comments", "author": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gilescope", "id": 803976, "node_id": "MDQ6VXNlcjgwMzk3Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/803976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gilescope", "html_url": "https://github.com/gilescope", "followers_url": "https://api.github.com/users/gilescope/followers", "following_url": "https://api.github.com/users/gilescope/following{/other_user}", "gists_url": "https://api.github.com/users/gilescope/gists{/gist_id}", "starred_url": "https://api.github.com/users/gilescope/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gilescope/subscriptions", "organizations_url": "https://api.github.com/users/gilescope/orgs", "repos_url": "https://api.github.com/users/gilescope/repos", "events_url": "https://api.github.com/users/gilescope/events{/privacy}", "received_events_url": "https://api.github.com/users/gilescope/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e898257c088f7208cc33c50df1c1154103e2b3c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e898257c088f7208cc33c50df1c1154103e2b3c7", "html_url": "https://github.com/rust-lang/rust/commit/e898257c088f7208cc33c50df1c1154103e2b3c7"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "e13a3209b495a2cb54ff398a1ec2289c0bee5bbf", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=5f78bb48ecb56c0e225d7a7d7f39e0747ce29a42", "patch": "@@ -1069,13 +1069,14 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     let mut result = T::from_u32(0);\n \n     if radix <= 16 && digits.len() <= mem::size_of::<T>() * 2 - is_signed_ty as usize {\n-        // SAFETY: We can take this fast path when `radix.pow(digits.len()) - 1 <= T::MAX`\n-        // but the condition above is a faster (conservative) approximation of this.\n+        // SAFETY: If the len of the str is short compared to the range of the type\n+        // we are parsing into, then we can be certain that an overflow will not occur.\n+        // This bound is when `radix.pow(digits.len()) - 1 <= T::MAX` but the condition\n+        // above is a faster (conservative) approximation of this.\n         //\n-        // Consider the highest radix of 16:\n-        // `u8::MAX` is `ff` (2 characters), `u16::MAX` is `ffff` (4 characters)\n-        // We can be sure that any src len of 2 would fit in a u8 so we don't need\n-        // to check for overflow.\n+        // Consider radix 16 as it has the most chance of overflow per digit:\n+        // `u8::MAX` is `ff` - any str of len 2 is guaranteed to not overflow.\n+        // `i8::MAX` is `7f` - only a str of len 1 is guaranteed to not overflow.\n         unsafe {\n             let unchecked_additive_op =\n                 if is_positive { T::unchecked_add } else { T::unchecked_sub };"}]}