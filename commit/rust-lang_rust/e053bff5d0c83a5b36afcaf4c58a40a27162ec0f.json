{"sha": "e053bff5d0c83a5b36afcaf4c58a40a27162ec0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNTNiZmY1ZDBjODNhNWIzNmFmY2FmNGM1OGE0MGEyNzE2MmVjMGY=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-07T04:06:12Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-07T21:06:45Z"}, "message": "std: Fix c_str.iter() and add test", "tree": {"sha": "747f485962acb15803ccf8f4a2500c322b9dd314", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747f485962acb15803ccf8f4a2500c322b9dd314"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f", "html_url": "https://github.com/rust-lang/rust/commit/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5eaa4d1d2f6eafc4233892d3d1dafb0d05799ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eaa4d1d2f6eafc4233892d3d1dafb0d05799ac3", "html_url": "https://github.com/rust-lang/rust/commit/5eaa4d1d2f6eafc4233892d3d1dafb0d05799ac3"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "25c6d4379fa2c58a494a7870f683bdbd98556505", "filename": "src/libstd/c_str.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f/src%2Flibstd%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e053bff5d0c83a5b36afcaf4c58a40a27162ec0f/src%2Flibstd%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_str.rs?ref=e053bff5d0c83a5b36afcaf4c58a40a27162ec0f", "patch": "@@ -148,10 +148,10 @@ pub struct CStringIterator<'self> {\n \n impl<'self> Iterator<libc::c_char> for CStringIterator<'self> {\n     fn next(&mut self) -> Option<libc::c_char> {\n-        if self.ptr.is_null() {\n+        let ch = unsafe { *self.ptr };\n+        if ch == 0 {\n             None\n         } else {\n-            let ch = unsafe { *self.ptr };\n             self.ptr = ptr::offset(self.ptr, 1);\n             Some(ch)\n         }\n@@ -163,6 +163,7 @@ mod tests {\n     use super::*;\n     use libc;\n     use ptr;\n+    use option::{Some, None};\n \n     #[test]\n     fn test_to_c_str() {\n@@ -210,7 +211,23 @@ mod tests {\n     #[should_fail]\n     #[ignore(cfg(windows))]\n     fn test_with_ref_empty_fail() {\n-        let c_str = CString::new(ptr::null(), false);\n+        let c_str = unsafe { CString::new(ptr::null(), false) };\n         c_str.with_ref(|_| ());\n     }\n+\n+    #[test]\n+    fn test_iterator() {\n+        let c_str = \"\".to_c_str();\n+        let mut iter = c_str.iter();\n+        assert_eq!(iter.next(), None);\n+\n+        let c_str = \"hello\".to_c_str();\n+        let mut iter = c_str.iter();\n+        assert_eq!(iter.next(), Some('h' as libc::c_char));\n+        assert_eq!(iter.next(), Some('e' as libc::c_char));\n+        assert_eq!(iter.next(), Some('l' as libc::c_char));\n+        assert_eq!(iter.next(), Some('l' as libc::c_char));\n+        assert_eq!(iter.next(), Some('o' as libc::c_char));\n+        assert_eq!(iter.next(), None);\n+    }\n }"}]}