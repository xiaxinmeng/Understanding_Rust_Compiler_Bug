{"sha": "02f78fdb940b913228953b7530c9e429ce35bb8a", "node_id": "C_kwDOAAsO6NoAKDAyZjc4ZmRiOTQwYjkxMzIyODk1M2I3NTMwYzllNDI5Y2UzNWJiOGE", "commit": {"author": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-10-03T10:45:02Z"}, "committer": {"name": "Ali MJ Al-Nasrawy", "email": "alimjalnasrawy@gmail.com", "date": "2022-11-05T04:36:47Z"}, "message": "use spans in TypeTest rather than mir::Location\n\nSpans are independent of the body being borrow-checked, so they don't\nneed remapping when promoting type-tests and they yield more specific\nerror spans inside bodies of closures/inline consts.", "tree": {"sha": "56f85ddf680ac1ebc7f74b2b455c76dd7f43de61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56f85ddf680ac1ebc7f74b2b455c76dd7f43de61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f78fdb940b913228953b7530c9e429ce35bb8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f78fdb940b913228953b7530c9e429ce35bb8a", "html_url": "https://github.com/rust-lang/rust/commit/02f78fdb940b913228953b7530c9e429ce35bb8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f78fdb940b913228953b7530c9e429ce35bb8a/comments", "author": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aliemjay", "id": 28497461, "node_id": "MDQ6VXNlcjI4NDk3NDYx", "avatar_url": "https://avatars.githubusercontent.com/u/28497461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aliemjay", "html_url": "https://github.com/aliemjay", "followers_url": "https://api.github.com/users/aliemjay/followers", "following_url": "https://api.github.com/users/aliemjay/following{/other_user}", "gists_url": "https://api.github.com/users/aliemjay/gists{/gist_id}", "starred_url": "https://api.github.com/users/aliemjay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aliemjay/subscriptions", "organizations_url": "https://api.github.com/users/aliemjay/orgs", "repos_url": "https://api.github.com/users/aliemjay/repos", "events_url": "https://api.github.com/users/aliemjay/events{/privacy}", "received_events_url": "https://api.github.com/users/aliemjay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df668b9fb960855ca1483ea520862c1eb8184d25", "url": "https://api.github.com/repos/rust-lang/rust/commits/df668b9fb960855ca1483ea520862c1eb8184d25", "html_url": "https://github.com/rust-lang/rust/commit/df668b9fb960855ca1483ea520862c1eb8184d25"}], "stats": {"total": 188, "additions": 76, "deletions": 112}, "files": [{"sha": "196ddbe8d5046696ad2e1756d1a89acc3dda9598", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     // Try to convert the lower-bound region into something named we can print for the user.\n                     let lower_bound_region = self.to_error_region(type_test.lower_bound);\n \n-                    let type_test_span = type_test.locations.span(&self.body);\n+                    let type_test_span = type_test.span;\n \n                     if let Some(lower_bound_region) = lower_bound_region {\n                         let generic_ty = type_test.generic_kind.to_ty(self.infcx.tcx);"}, {"sha": "94e9e05e5d640936be66ffb5bec23018b3d0a82f", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -214,8 +214,8 @@ pub struct TypeTest<'tcx> {\n     /// The region `'x` that the type must outlive.\n     pub lower_bound: RegionVid,\n \n-    /// Where did this constraint arise and why?\n-    pub locations: Locations,\n+    /// The span to blame.\n+    pub span: Span,\n \n     /// A test which, if met by the region `'x`, proves that this type\n     /// constraint is satisfied.\n@@ -870,13 +870,13 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if deduplicate_errors.insert((\n                 erased_generic_kind,\n                 type_test.lower_bound,\n-                type_test.locations,\n+                type_test.span,\n             )) {\n                 debug!(\n                     \"check_type_test: reporting error for erased_generic_kind={:?}, \\\n                      lower_bound_region={:?}, \\\n-                     type_test.locations={:?}\",\n-                    erased_generic_kind, type_test.lower_bound, type_test.locations,\n+                     type_test.span={:?}\",\n+                    erased_generic_kind, type_test.lower_bound, type_test.span,\n                 );\n \n                 errors_buffer.push(RegionErrorKind::TypeTestError { type_test: type_test.clone() });\n@@ -919,7 +919,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) -> bool {\n         let tcx = infcx.tcx;\n \n-        let TypeTest { generic_kind, lower_bound, locations, verify_bound: _ } = type_test;\n+        let TypeTest { generic_kind, lower_bound, span: _, verify_bound: _ } = type_test;\n \n         let generic_ty = generic_kind.to_ty(tcx);\n         let Some(subject) = self.try_promote_type_test_subject(infcx, generic_ty) else {\n@@ -947,7 +947,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             propagated_outlives_requirements.push(ClosureOutlivesRequirement {\n                 subject,\n                 outlived_free_region: static_r,\n-                blame_span: locations.span(body),\n+                blame_span: type_test.span,\n                 category: ConstraintCategory::Boring,\n             });\n \n@@ -999,7 +999,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 let requirement = ClosureOutlivesRequirement {\n                     subject,\n                     outlived_free_region: upper_bound,\n-                    blame_span: locations.span(body),\n+                    blame_span: type_test.span,\n                     category: ConstraintCategory::Boring,\n                 };\n                 debug!(\"try_promote_type_test: pushing {:#?}\", requirement);"}, {"sha": "ce7f857e27310aa64b01f6d2529c08cd96ff00de", "filename": "compiler/rustc_borrowck/src/type_check/constraint_conversion.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fconstraint_conversion.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -169,10 +169,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n                 .type_must_outlive(origin, t1, r2, constraint_category);\n             }\n \n-            GenericArgKind::Const(_) => {\n-                // Consts cannot outlive one another, so we\n-                // don't need to handle any relations here.\n-            }\n+            GenericArgKind::Const(_) => unreachable!(),\n         }\n     }\n \n@@ -202,7 +199,7 @@ impl<'a, 'tcx> ConstraintConversion<'a, 'tcx> {\n         verify_bound: VerifyBound<'tcx>,\n     ) -> TypeTest<'tcx> {\n         let lower_bound = self.to_region_vid(region);\n-        TypeTest { generic_kind, lower_bound, locations: self.locations, verify_bound }\n+        TypeTest { generic_kind, lower_bound, span: self.span, verify_bound }\n     }\n \n     fn to_region_vid(&mut self, r: ty::Region<'tcx>) -> ty::RegionVid {"}, {"sha": "50af229baaaedf297abc0ab836c3a655b6fbdb7c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -583,7 +583,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         // modify their locations.\n         let all_facts = &mut None;\n         let mut constraints = Default::default();\n-        let mut type_tests = Default::default();\n         let mut liveness_constraints =\n             LivenessValues::new(Rc::new(RegionValueElements::new(&promoted_body)));\n         // Don't try to add borrow_region facts for the promoted MIR\n@@ -594,7 +593,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n                 &mut this.cx.borrowck_context.constraints.outlives_constraints,\n                 &mut constraints,\n             );\n-            mem::swap(&mut this.cx.borrowck_context.constraints.type_tests, &mut type_tests);\n             mem::swap(\n                 &mut this.cx.borrowck_context.constraints.liveness_constraints,\n                 &mut liveness_constraints,\n@@ -615,13 +613,6 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n         swap_constraints(self);\n \n         let locations = location.to_locations();\n-\n-        // Use location of promoted const in collected constraints\n-        for type_test in type_tests.iter() {\n-            let mut type_test = type_test.clone();\n-            type_test.locations = locations;\n-            self.cx.borrowck_context.constraints.type_tests.push(type_test)\n-        }\n         for constraint in constraints.outlives().iter() {\n             let mut constraint = constraint.clone();\n             constraint.locations = locations;"}, {"sha": "3ed90aed2350d4d8003b4b89440ad63973dc1540", "filename": "src/test/ui/consts/issue-102117.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -14,11 +14,11 @@ pub struct VTable {\n impl VTable {\n     pub fn new<T>() -> &'static Self {\n         const {\n-          //~^ ERROR the parameter type `T` may not live long enough\n-          //~| ERROR the parameter type `T` may not live long enough\n             &VTable {\n                 layout: Layout::new::<T>(),\n                 type_id: TypeId::of::<T>(),\n+                //~^ ERROR the parameter type `T` may not live long enough\n+                //~| ERROR the parameter type `T` may not live long enough\n                 drop_in_place: unsafe {\n                     transmute::<unsafe fn(*mut T), unsafe fn(*mut ())>(drop_in_place::<T>)\n                 },"}, {"sha": "f42bcf90fb756b684a696abcca579c076e44e8f6", "filename": "src/test/ui/consts/issue-102117.stderr", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-102117.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -1,31 +1,19 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-102117.rs:16:9\n+  --> $DIR/issue-102117.rs:19:26\n    |\n-LL | /         const {\n-LL | |\n-LL | |\n-LL | |             &VTable {\n-...  |\n-LL | |             }\n-LL | |         }\n-   | |_________^ ...so that the type `T` will meet its required lifetime bounds\n+LL |                 type_id: TypeId::of::<T>(),\n+   |                          ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n LL |     pub fn new<T: 'static>() -> &'static Self {\n    |                 +++++++++\n \n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-102117.rs:16:9\n+  --> $DIR/issue-102117.rs:19:26\n    |\n-LL | /         const {\n-LL | |\n-LL | |\n-LL | |             &VTable {\n-...  |\n-LL | |             }\n-LL | |         }\n-   | |_________^ ...so that the type `T` will meet its required lifetime bounds\n+LL |                 type_id: TypeId::of::<T>(),\n+   |                          ^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "e321da53d5668bd61237ae89c268518b023ef549", "filename": "src/test/ui/generic-associated-types/issue-91139.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -21,6 +21,7 @@ fn foo<T>() {\n     //~| ERROR `T` does not live long enough\n     //~| ERROR `T` does not live long enough\n     //~| ERROR `T` may not live long enough\n+    //~| ERROR `T` may not live long enough\n     //\n     // FIXME: This error is bogus, but it arises because we try to validate\n     // that `<() as Foo<T>>::Type<'a>` is valid, which requires proving"}, {"sha": "5485570cecd76eb0d1c245163c250b07ad3729fa", "filename": "src/test/ui/generic-associated-types/issue-91139.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91139.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -22,6 +22,17 @@ error: `T` does not live long enough\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n+error[E0310]: the parameter type `T` may not live long enough\n+  --> $DIR/issue-91139.rs:14:58\n+   |\n+LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n+   |                                                          ^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | fn foo<T: 'static>() {\n+   |         +++++++++\n+\n error: `T` does not live long enough\n   --> $DIR/issue-91139.rs:14:58\n    |\n@@ -57,6 +68,6 @@ error: `T` does not live long enough\n LL |     let _: for<'a> fn(<() as Foo<T>>::Type<'a>, &'a T) = |_, _| ();\n    |                                                          ^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0310`."}, {"sha": "cda781d8e263797618aeb54741b0a17188ac1ae4", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -30,8 +30,6 @@ where\n     T: Trait<'a>,\n {\n     establish_relationships(value, |value| {\n-        //~^ ERROR the parameter type `T` may not live long enough\n-\n         // This function call requires that\n         //\n         // (a) T: Trait<'a>\n@@ -43,6 +41,7 @@ where\n         // The latter does not hold.\n \n         require(value);\n+        //~^ ERROR the parameter type `T` may not live long enough\n     });\n }\n "}, {"sha": "038a5e11f88ce7205027cd009984d57bbe7d4b97", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -23,17 +23,10 @@ LL | |     T: Trait<'a>,\n    = note: defining type: supply::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/propagate-from-trait-match.rs:32:36\n+  --> $DIR/propagate-from-trait-match.rs:43:9\n    |\n-LL |       establish_relationships(value, |value| {\n-   |  ____________________________________^\n-LL | |\n-LL | |\n-LL | |         // This function call requires that\n-...  |\n-LL | |         require(value);\n-LL | |     });\n-   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+LL |         require(value);\n+   |         ^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "d8b26f0b0171ed54e0db51d9d006422c387b8d3b", "filename": "src/test/ui/nll/issue-98589-closures-relate-named-regions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98589-closures-relate-named-regions.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -35,21 +35,21 @@ LL |     || { None::<&'a &'b ()>; };\n    = help: consider adding the following bound: `'b: 'a`\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-98589-closures-relate-named-regions.rs:26:5\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:26:10\n    |\n LL |     || { None::<&'a T>; };\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |          ^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n LL | fn test_early_type<'a: 'a, T: 'a>() {\n    |                             ++++\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-98589-closures-relate-named-regions.rs:32:5\n+  --> $DIR/issue-98589-closures-relate-named-regions.rs:32:10\n    |\n LL |     || { None::<&'a T>; };\n-   |     ^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |          ^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "7a325e2e998f36ce1161dfab0ba8fc80ffbfb4d3", "filename": "src/test/ui/nll/issue-98693.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98693.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98693.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98693.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -13,8 +13,8 @@ where\n \n fn test<T>() {\n     || {\n-        //~^ ERROR the parameter type `T` may not live long enough\n         assert_static::<T>();\n+        //~^ ERROR the parameter type `T` may not live long enough\n     };\n }\n "}, {"sha": "15ca38aa25dce03c871d4aac4a596ff7b6f88f34", "filename": "src/test/ui/nll/issue-98693.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98693.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fissue-98693.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98693.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -1,11 +1,8 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/issue-98693.rs:15:5\n+  --> $DIR/issue-98693.rs:16:9\n    |\n-LL | /     || {\n-LL | |\n-LL | |         assert_static::<T>();\n-LL | |     };\n-   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+LL |         assert_static::<T>();\n+   |         ^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "d949e29b2b812a6f48b3ff3baa04ca47b887cc8b", "filename": "src/test/ui/nll/ty-outlives/projection-implied-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-implied-bounds.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -1,8 +1,8 @@\n error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-implied-bounds.rs:30:18\n+  --> $DIR/projection-implied-bounds.rs:30:36\n    |\n LL |     twice(value, |value_ref, item| invoke2(value_ref, item));\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "4933b93486831bca0718ff8ed462004aff97cc40", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -23,10 +23,10 @@ LL | |     T: Iterator,\n    = note: defining type: no_region::<'_#1r, T>\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:25:23\n+  --> $DIR/projection-no-regions-closure.rs:25:31\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n    = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds\n@@ -80,10 +80,10 @@ LL | |     T: 'b + Iterator,\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>\n \n error[E0309]: the associated type `<T as Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:42:23\n+  --> $DIR/projection-no-regions-closure.rs:42:31\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                               ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Iterator>::Item: 'a`...\n    = note: ...so that the type `<T as Iterator>::Item` will meet its required lifetime bounds"}, {"sha": "dbda04c42c5c76753695d88cfa113878f62f9e2d", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -25,10 +25,10 @@ LL | |     T: Anything<'b>,\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:45:29\n+  --> $DIR/projection-one-region-closure.rs:45:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                                       ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n@@ -75,10 +75,10 @@ LL | |     'a: 'a,\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:56:29\n+  --> $DIR/projection-one-region-closure.rs:56:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                                       ^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "90f04914286c15f511b38bfecf9eefcfe90d8b16", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -24,10 +24,10 @@ LL | |     T: Anything<'b, 'c>,\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n error[E0309]: the associated type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:38:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType: 'a`...\n    = note: ...so that the type `<T as Anything<ReEarlyBound(0, 'b), ReEarlyBound(1, 'c)>>::AssocType` will meet its required lifetime bounds\n@@ -58,10 +58,10 @@ LL | |     'a: 'a,\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n error[E0309]: the associated type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:48:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                       ^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType: 'a`...\n    = note: ...so that the type `<T as Anything<ReEarlyBound(1, 'b), ReEarlyBound(2, 'c)>>::AssocType` will meet its required lifetime bounds"}, {"sha": "f316a551cffa69543a0d779222a8b56f23cae16d", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -44,10 +44,10 @@ LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n    = note: defining type: generic_fail::<T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:31\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                               ^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "35979c8bf5171304a0b0dc61299e45b2e087bf4c", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -23,10 +23,10 @@ LL | |     T: Debug,\n    = note: defining type: no_region::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:27\n    |\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^ ...so that the type `T` will meet its required lifetime bounds\n+   |                           ^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |"}, {"sha": "b8028761050414c50f5ab74599b48403b9028aae", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -25,13 +25,12 @@ where\n #[rustc_regions]\n fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n     with_signature(a, b, |x, y| {\n-        //~^ ERROR the parameter type `T` may not live long enough\n-        //\n         // See `correct_region`, which explains the point of this\n         // test.  The only difference is that, in the case of this\n         // function, there is no where clause *anywhere*, and hence we\n         // get an error (but reported by the closure creator).\n         require(&x, &y)\n+        //~^ ERROR the parameter type `T` may not live long enough\n     })\n }\n \n@@ -62,9 +61,9 @@ where\n     T: 'b,\n {\n     with_signature(a, b, |x, y| {\n-        //~^ ERROR the parameter type `T` may not live long enough\n         // See `correct_region`\n         require(&x, &y)\n+        //~^ ERROR the parameter type `T` may not live long enough\n     })\n }\n "}, {"sha": "4c97db58c6c3db9c9828b700f309f68514855d52", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02f78fdb940b913228953b7530c9e429ce35bb8a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=02f78fdb940b913228953b7530c9e429ce35bb8a", "patch": "@@ -22,25 +22,18 @@ LL | fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n    = note: defining type: no_region::<T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:32:9\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         //\n-LL | |         // See `correct_region`, which explains the point of this\n-...  |\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+LL |         require(&x, &y)\n+   |         ^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n LL | fn no_region<'a, T: 'a>(a: Cell<&'a ()>, b: T) {\n    |                   ++++\n \n note: external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:42:26\n    |\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n@@ -54,7 +47,7 @@ LL |     with_signature(a, b, |x, y| {\n    = note: where T: '_#2r\n \n note: no external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:39:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:1\n    |\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n@@ -64,7 +57,7 @@ LL | |     T: 'a,\n    = note: defining type: correct_region::<'_#1r, T>\n \n note: external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:63:26\n    |\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n@@ -79,7 +72,7 @@ LL |     with_signature(a, b, |x, y| {\n    = note: where T: '_#2r\n \n note: no external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:60:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:59:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n@@ -89,23 +82,18 @@ LL | |     T: 'b,\n    = note: defining type: wrong_region::<'_#1r, T>\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:65:9\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^ ...so that the type `T` will meet its required lifetime bounds\n+LL |         require(&x, &y)\n+   |         ^^^^^^^^^^^^^^^ ...so that the type `T` will meet its required lifetime bounds\n    |\n help: consider adding an explicit lifetime bound...\n    |\n LL |     T: 'b + 'a,\n    |           ++++\n \n note: external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n    |\n LL |     with_signature(a, b, |x, y| {\n    |                          ^^^^^^\n@@ -119,7 +107,7 @@ LL |     with_signature(a, b, |x, y| {\n    = note: where T: '_#3r\n \n note: no external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:72:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:71:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where"}]}