{"sha": "e5280e452f194ea7b4066c50b7954e07cb054161", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MjgwZTQ1MmYxOTRlYTdiNDA2NmM1MGI3OTU0ZTA3Y2IwNTQxNjE=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-29T22:13:49Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-04-29T22:13:49Z"}, "message": "use const trick", "tree": {"sha": "a07e96a66b3c56b8be0da3400ceb3ded9fd8310c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a07e96a66b3c56b8be0da3400ceb3ded9fd8310c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5280e452f194ea7b4066c50b7954e07cb054161", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5280e452f194ea7b4066c50b7954e07cb054161", "html_url": "https://github.com/rust-lang/rust/commit/e5280e452f194ea7b4066c50b7954e07cb054161", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5280e452f194ea7b4066c50b7954e07cb054161/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0212e0230a500c3b50a6830a20c12d1db3520b99", "url": "https://api.github.com/repos/rust-lang/rust/commits/0212e0230a500c3b50a6830a20c12d1db3520b99", "html_url": "https://github.com/rust-lang/rust/commit/0212e0230a500c3b50a6830a20c12d1db3520b99"}], "stats": {"total": 31, "additions": 7, "deletions": 24}, "files": [{"sha": "6ca668fda59fbff1ae554f60e52287e94ddd7c14", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 23, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5280e452f194ea7b4066c50b7954e07cb054161/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5280e452f194ea7b4066c50b7954e07cb054161/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=e5280e452f194ea7b4066c50b7954e07cb054161", "patch": "@@ -54,28 +54,18 @@ pub struct RawVec<T, A: Alloc = Global> {\n }\n \n impl<T, A: Alloc> RawVec<T, A> {\n-    // FIXME: this should be made `const` when `if` statements are allowed\n     /// Like `new` but parameterized over the choice of allocator for\n     /// the returned RawVec.\n-    pub fn new_in(a: A) -> Self {\n+    pub const fn new_in(a: A) -> Self {\n         // !0 is usize::MAX. This branch should be stripped at compile time.\n-        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`\n+        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n         // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n         RawVec {\n             ptr: Unique::empty(),\n-            cap,\n-            a,\n-        }\n-    }\n-\n-    // FIXME: this should removed when `new_in` can be made `const`\n-    /// Like `empty` but parametrized over the choice of allocator for the returned `RawVec`.\n-    pub const fn empty_in(a: A) -> Self {\n-        // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n-        RawVec {\n-            ptr: Unique::empty(),\n-            cap: 0,\n+            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap: [0, !0][(mem::size_of::<T>() != 0) as usize],\n             a,\n         }\n     }\n@@ -132,17 +122,10 @@ impl<T> RawVec<T, Global> {\n     /// RawVec with capacity 0. If T has 0 size, then it makes a\n     /// RawVec with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n-    pub fn new() -> Self {\n+    pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n \n-    // FIXME: this should removed when `new` can be made `const`\n-    /// Create a `RawVec` with capcity 0 (on the system heap), regardless of `T`, without\n-    /// allocating.\n-    pub const fn empty() -> Self {\n-        Self::empty_in(Global)\n-    }\n-\n     /// Creates a RawVec (on the system heap) with exactly the\n     /// capacity and alignment requirements for a `[T; cap]`. This is\n     /// equivalent to calling RawVec::new when `cap` is 0 or T is"}, {"sha": "35d0a69a05abe846942a0caad8d47b5bf08a48e6", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e5280e452f194ea7b4066c50b7954e07cb054161/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5280e452f194ea7b4066c50b7954e07cb054161/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=e5280e452f194ea7b4066c50b7954e07cb054161", "patch": "@@ -325,7 +325,7 @@ impl<T> Vec<T> {\n     #[rustc_const_unstable(feature = \"const_vec_new\")]\n     pub const fn new() -> Vec<T> {\n         Vec {\n-            buf: RawVec::empty(),\n+            buf: RawVec::new(),\n             len: 0,\n         }\n     }"}]}