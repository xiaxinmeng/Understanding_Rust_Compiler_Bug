{"sha": "c3a71943545516557f40f93d30c1512f1f16ff64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTcxOTQzNTQ1NTE2NTU3ZjQwZjkzZDMwYzE1MTJmMWYxNmZmNjQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T23:44:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-20T23:44:02Z"}, "message": "Auto merge of #60088 - varkor:async_await-method-feature-gate, r=cramertj\n\nFeature gate async methods\n\nFixes https://github.com/rust-lang/rust/issues/60069.", "tree": {"sha": "a71e7d4643cb3219010181d513946aff20ede024", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a71e7d4643cb3219010181d513946aff20ede024"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a71943545516557f40f93d30c1512f1f16ff64", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a71943545516557f40f93d30c1512f1f16ff64", "html_url": "https://github.com/rust-lang/rust/commit/c3a71943545516557f40f93d30c1512f1f16ff64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a71943545516557f40f93d30c1512f1f16ff64/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33fe1131cadba69d317156847be9a402b89f11bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/33fe1131cadba69d317156847be9a402b89f11bb", "html_url": "https://github.com/rust-lang/rust/commit/33fe1131cadba69d317156847be9a402b89f11bb"}, {"sha": "ee496057a5ba9f006bfad77b2c64603deb6c2450", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee496057a5ba9f006bfad77b2c64603deb6c2450", "html_url": "https://github.com/rust-lang/rust/commit/ee496057a5ba9f006bfad77b2c64603deb6c2450"}], "stats": {"total": 120, "additions": 79, "deletions": 41}, "files": [{"sha": "007eaef74a7ad21d6cbcda4ba7c9b8b74a980513", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -57,6 +57,14 @@ impl<'a> FnKind<'a> {\n             FnKind::Closure(attrs) => attrs,\n         }\n     }\n+\n+    pub fn header(&self) -> Option<FnHeader> {\n+        match *self {\n+            FnKind::ItemFn(_, _, header, _, _) => Some(header),\n+            FnKind::Method(_, sig, _, _) => Some(sig.header),\n+            FnKind::Closure(_) => None,\n+        }\n+    }\n }\n \n /// Specifies what nested things a visitor wants to visit. The most"}, {"sha": "f50037a746d9774bfc03953c977c42411bc910c6", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -175,27 +175,15 @@ impl<'a> FnLikeNode<'a> {\n     }\n \n     pub fn constness(self) -> ast::Constness {\n-        match self.kind() {\n-            FnKind::ItemFn(_, _, header, ..) => header.constness,\n-            FnKind::Method(_, m, ..) => m.header.constness,\n-            _ => ast::Constness::NotConst\n-        }\n+        self.kind().header().map_or(ast::Constness::NotConst, |header| header.constness)\n     }\n \n     pub fn asyncness(self) -> ast::IsAsync {\n-        match self.kind() {\n-            FnKind::ItemFn(_, _, header, ..) => header.asyncness,\n-            FnKind::Method(_, m, ..) => m.header.asyncness,\n-            _ => ast::IsAsync::NotAsync\n-        }\n+        self.kind().header().map_or(ast::IsAsync::NotAsync, |header| header.asyncness)\n     }\n \n     pub fn unsafety(self) -> ast::Unsafety {\n-        match self.kind() {\n-            FnKind::ItemFn(_, _, header, ..) => header.unsafety,\n-            FnKind::Method(_, m, ..) => m.header.unsafety,\n-            _ => ast::Unsafety::Normal\n-        }\n+        self.kind().header().map_or(ast::Unsafety::Normal, |header| header.unsafety)\n     }\n \n     pub fn kind(self) -> FnKind<'a> {"}, {"sha": "bc87a88f9f11a3e9eb34f306efb8a0bc039fa699", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -2035,28 +2035,22 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 fn_decl: &'a ast::FnDecl,\n                 span: Span,\n                 _node_id: NodeId) {\n-        match fn_kind {\n-            FnKind::ItemFn(_, header, _, _) => {\n-                // Check for const fn and async fn declarations.\n-                if header.asyncness.node.is_async() {\n-                    gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n-                }\n+        if let Some(header) = fn_kind.header() {\n+            // Check for const fn and async fn declarations.\n+            if header.asyncness.node.is_async() {\n+                gate_feature_post!(&self, async_await, span, \"async fn is unstable\");\n+            }\n \n-                if fn_decl.c_variadic {\n-                    gate_feature_post!(&self, c_variadic, span,\n-                                       \"C-varaidic functions are unstable\");\n-                }\n-                // Stability of const fn methods are covered in\n-                // `visit_trait_item` and `visit_impl_item` below; this is\n-                // because default methods don't pass through this point.\n+            // Stability of const fn methods are covered in\n+            // `visit_trait_item` and `visit_impl_item` below; this is\n+            // because default methods don't pass through this point.\n+            self.check_abi(header.abi, span);\n+        }\n \n-                self.check_abi(header.abi, span);\n-            }\n-            FnKind::Method(_, sig, _, _) => {\n-                self.check_abi(sig.header.abi, span);\n-            }\n-            _ => {}\n+        if fn_decl.c_variadic {\n+            gate_feature_post!(&self, c_variadic, span, \"C-variadic functions are unstable\");\n         }\n+\n         visit::walk_fn(self, fn_kind, fn_decl, span);\n     }\n \n@@ -2074,9 +2068,12 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 if block.is_none() {\n                     self.check_abi(sig.header.abi, ti.span);\n                 }\n+                if sig.header.asyncness.node.is_async() {\n+                    gate_feature_post!(&self, async_await, ti.span, \"async fn is unstable\");\n+                }\n                 if sig.decl.c_variadic {\n                     gate_feature_post!(&self, c_variadic, ti.span,\n-                                       \"C-varaidic functions are unstable\");\n+                                       \"C-variadic functions are unstable\");\n                 }\n                 if sig.header.constness.node == ast::Constness::Const {\n                     gate_feature_post!(&self, const_fn, ti.span, \"const fn is unstable\");"}, {"sha": "fe74cbd649612d23675069b0e6ee429a9e60e95a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -31,6 +31,16 @@ pub enum FnKind<'a> {\n     Closure(&'a Expr),\n }\n \n+impl<'a> FnKind<'a> {\n+    pub fn header(&self) -> Option<&'a FnHeader> {\n+        match *self {\n+            FnKind::ItemFn(_, header, _, _) => Some(header),\n+            FnKind::Method(_, sig, _, _) => Some(&sig.header),\n+            FnKind::Closure(_) => None,\n+        }\n+    }\n+}\n+\n /// Each method of the Visitor trait is a hook to be potentially\n /// overridden. Each method's default implementation recursively visits\n /// the substructure of the input via the corresponding `walk` method;"}, {"sha": "8b40c36c7db5e1b68728f6f1b45f36d75f6f2bf9", "filename": "src/test/ui/feature-gate/feature-gate-c_variadic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -1,4 +1,4 @@\n #![crate_type=\"lib\"]\n \n pub unsafe extern \"C\" fn test(_: i32, ap: ...) { }\n-//~^ C-varaidic functions are unstable\n+//~^ C-variadic functions are unstable"}, {"sha": "4367dee55a118f2e13bcd1db272809f9d2148d68", "filename": "src/test/ui/feature-gate/feature-gate-c_variadic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Ffeature-gate-c_variadic.stderr?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: C-varaidic functions are unstable\n+error[E0658]: C-variadic functions are unstable\n   --> $DIR/feature-gate-c_variadic.rs:3:1\n    |\n LL | pub unsafe extern \"C\" fn test(_: i32, ap: ...) { }"}, {"sha": "1fdaec75e9d5ab8113564c274cc5d1360ae92f61", "filename": "src/test/ui/feature-gates/feature-gate-async-await.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.rs?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -2,6 +2,17 @@\n \n #![feature(futures_api)]\n \n+struct S;\n+\n+impl S {\n+    async fn foo() {} //~ ERROR async fn is unstable\n+}\n+\n+trait T {\n+    async fn foo(); //~ ERROR trait fns cannot be declared `async`\n+    //~^ ERROR async fn is unstable\n+}\n+\n async fn foo() {} //~ ERROR async fn is unstable\n \n fn main() {"}, {"sha": "1fa21f52045fc8122c50f7b4e79881c2bcb76b04", "filename": "src/test/ui/feature-gates/feature-gate-async-await.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a71943545516557f40f93d30c1512f1f16ff64/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-async-await.stderr?ref=c3a71943545516557f40f93d30c1512f1f16ff64", "patch": "@@ -1,5 +1,29 @@\n+error[E0706]: trait fns cannot be declared `async`\n+  --> $DIR/feature-gate-async-await.rs:12:5\n+   |\n+LL |     async fn foo();\n+   |     ^^^^^^^^^^^^^^^\n+\n+error[E0658]: async fn is unstable\n+  --> $DIR/feature-gate-async-await.rs:8:5\n+   |\n+LL |     async fn foo() {}\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n+   = help: add #![feature(async_await)] to the crate attributes to enable\n+\n+error[E0658]: async fn is unstable\n+  --> $DIR/feature-gate-async-await.rs:12:5\n+   |\n+LL |     async fn foo();\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n+   = help: add #![feature(async_await)] to the crate attributes to enable\n+\n error[E0658]: async fn is unstable\n-  --> $DIR/feature-gate-async-await.rs:5:1\n+  --> $DIR/feature-gate-async-await.rs:16:1\n    |\n LL | async fn foo() {}\n    | ^^^^^^^^^^^^^^^^^\n@@ -8,7 +32,7 @@ LL | async fn foo() {}\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async blocks are unstable\n-  --> $DIR/feature-gate-async-await.rs:8:13\n+  --> $DIR/feature-gate-async-await.rs:19:13\n    |\n LL |     let _ = async {};\n    |             ^^^^^^^^\n@@ -17,14 +41,14 @@ LL |     let _ = async {};\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n error[E0658]: async closures are unstable\n-  --> $DIR/feature-gate-async-await.rs:9:13\n+  --> $DIR/feature-gate-async-await.rs:20:13\n    |\n LL |     let _ = async || {};\n    |             ^^^^^^^^^^^\n    |\n    = note: for more information, see https://github.com/rust-lang/rust/issues/50547\n    = help: add #![feature(async_await)] to the crate attributes to enable\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}]}