{"sha": "1767c8bdf0c57ca10862dae98a4955044ccc1cbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3NjdjOGJkZjBjNTdjYTEwODYyZGFlOThhNDk1NTA0NGNjYzFjYmY=", "commit": {"author": {"name": "rodrimati1992", "email": "rodrimatt1985@gmail.com", "date": "2020-08-13T18:56:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T18:56:23Z"}, "message": "Replaced union with transmute", "tree": {"sha": "236f93a833eae2b9fd7a944dc94152165fe5a010", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/236f93a833eae2b9fd7a944dc94152165fe5a010"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1767c8bdf0c57ca10862dae98a4955044ccc1cbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNYzXCRBK7hj4Ov3rIwAAdHIIACnrQfXaQjjr0IQyAyFmCPCe\nI0Ks15yNxUtCJvshoG4iDC60WS0+R4vvUl33tP/D02d4HDJCAA9DgBVJqSThDi0S\nGcPWtrIh3e3m+9C+KKTSMvaPkN8igO65b2Sirhi9eJKqGjDfcQryg4FPPUy0Yhmv\ndv4OE5G805KwKSOWl2QNNK/+I//4/Ny3VmZoqEQNttxY/Jh/5Oi+Tc/Kzg4neP7H\naYx3OWM1g3v9byG4xUwQo4PSHOzJtb0Y5xUTBESHMKBv0m9PeqROcltb2iI/VsKd\nzMl9OpjaKyhctRhLgRui/7Ycrj5ibdLOan68GiM8+8+13g8j1D4QIaf3Mr/wAoE=\n=eVtc\n-----END PGP SIGNATURE-----\n", "payload": "tree 236f93a833eae2b9fd7a944dc94152165fe5a010\nparent a915bbf780a6893e10d7df8af772caa18073d389\nauthor rodrimati1992 <rodrimatt1985@gmail.com> 1597344983 -0300\ncommitter GitHub <noreply@github.com> 1597344983 -0300\n\nReplaced union with transmute"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1767c8bdf0c57ca10862dae98a4955044ccc1cbf", "html_url": "https://github.com/rust-lang/rust/commit/1767c8bdf0c57ca10862dae98a4955044ccc1cbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1767c8bdf0c57ca10862dae98a4955044ccc1cbf/comments", "author": {"login": "rodrimati1992", "id": 18036327, "node_id": "MDQ6VXNlcjE4MDM2MzI3", "avatar_url": "https://avatars.githubusercontent.com/u/18036327?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodrimati1992", "html_url": "https://github.com/rodrimati1992", "followers_url": "https://api.github.com/users/rodrimati1992/followers", "following_url": "https://api.github.com/users/rodrimati1992/following{/other_user}", "gists_url": "https://api.github.com/users/rodrimati1992/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodrimati1992/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodrimati1992/subscriptions", "organizations_url": "https://api.github.com/users/rodrimati1992/orgs", "repos_url": "https://api.github.com/users/rodrimati1992/repos", "events_url": "https://api.github.com/users/rodrimati1992/events{/privacy}", "received_events_url": "https://api.github.com/users/rodrimati1992/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a915bbf780a6893e10d7df8af772caa18073d389", "url": "https://api.github.com/repos/rust-lang/rust/commits/a915bbf780a6893e10d7df8af772caa18073d389", "html_url": "https://github.com/rust-lang/rust/commit/a915bbf780a6893e10d7df8af772caa18073d389"}], "stats": {"total": 14, "additions": 4, "deletions": 10}, "files": [{"sha": "80f01dcdf02a62aceb3e31ba3d6ddeb0958447bf", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1767c8bdf0c57ca10862dae98a4955044ccc1cbf/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1767c8bdf0c57ca10862dae98a4955044ccc1cbf/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=1767c8bdf0c57ca10862dae98a4955044ccc1cbf", "patch": "@@ -381,12 +381,6 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n     Ok(unsafe { from_utf8_unchecked_mut(v) })\n }\n \n-#[repr(C)]\n-union StrOrSlice<'a> {\n-    str: &'a str,\n-    slice: &'a [u8],\n-}\n-\n /// Converts a slice of bytes to a string slice without checking\n /// that the string contains valid UTF-8.\n ///\n@@ -422,11 +416,11 @@ union StrOrSlice<'a> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked\", issue = \"75196\")]\n #[allow(unused_attributes)]\n-#[allow_internal_unstable(const_fn_union)]\n+#[allow_internal_unstable(const_fn_transmute)]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout.\n-    unsafe { StrOrSlice { slice: v }.str }\n+    unsafe { mem::transmute(self) }\n }\n \n /// Converts a slice of bytes to a string slice without checking\n@@ -2355,10 +2349,10 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[allow_internal_unstable(const_fn_union)]\n+    #[allow_internal_unstable(const_fn_transmute)]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n-        unsafe { StrOrSlice { str: self }.slice }\n+        unsafe { mem::transmute(self) }\n     }\n \n     /// Converts a mutable string slice to a mutable byte slice."}]}