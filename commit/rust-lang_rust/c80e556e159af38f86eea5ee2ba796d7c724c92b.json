{"sha": "c80e556e159af38f86eea5ee2ba796d7c724c92b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MGU1NTZlMTU5YWYzOGY4NmVlYTVlZTJiYTc5NmQ3YzcyNGM5MmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T18:46:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-25T18:46:33Z"}, "message": "Auto merge of #21519 - michaelwoerister:misc, r=eddyb\n\nTwo minor improvements that have been on my TODO list for a while:\r\n* Clang uses a size of `-1` for arrays of unknown size and we should do that too as it will tell LLVM to omit the size information in debuginfo.\r\n* There was no LLDB test case for handling the optimized enum representation introduced by @luqmana. This PR finally adds one.", "tree": {"sha": "96e77c61152fa22f7d7144da19064c738d9a0df7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e77c61152fa22f7d7144da19064c738d9a0df7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80e556e159af38f86eea5ee2ba796d7c724c92b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80e556e159af38f86eea5ee2ba796d7c724c92b", "html_url": "https://github.com/rust-lang/rust/commit/c80e556e159af38f86eea5ee2ba796d7c724c92b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80e556e159af38f86eea5ee2ba796d7c724c92b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15192317aa025ff06faa56ca00950fb7ce6ff4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15192317aa025ff06faa56ca00950fb7ce6ff4b", "html_url": "https://github.com/rust-lang/rust/commit/d15192317aa025ff06faa56ca00950fb7ce6ff4b"}, {"sha": "75ad1161dd598ba0e61b9215a08216e744dd9f4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ad1161dd598ba0e61b9215a08216e744dd9f4c", "html_url": "https://github.com/rust-lang/rust/commit/75ad1161dd598ba0e61b9215a08216e744dd9f4c"}], "stats": {"total": 60, "additions": 48, "deletions": 12}, "files": [{"sha": "b366c7faefab08e0ee5eab94204d6ce90799ba40", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c80e556e159af38f86eea5ee2ba796d7c724c92b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80e556e159af38f86eea5ee2ba796d7c724c92b/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=c80e556e159af38f86eea5ee2ba796d7c724c92b", "patch": "@@ -207,7 +207,7 @@ use session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n use util::nodemap::{DefIdMap, NodeMap, FnvHashMap, FnvHashSet};\n use util::ppaux;\n \n-use libc::c_uint;\n+use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n use std::cell::{Cell, RefCell};\n use std::ptr;\n@@ -2764,7 +2764,7 @@ fn create_struct_stub(cx: &CrateContext,\n fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n                                 unique_type_id: UniqueTypeId,\n                                 element_type: Ty<'tcx>,\n-                                len: uint,\n+                                len: Option<u64>,\n                                 span: Span)\n                                 -> MetadataCreationResult {\n     let element_type_metadata = type_metadata(cx, element_type, span);\n@@ -2774,18 +2774,20 @@ fn fixed_vec_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n     let element_llvm_type = type_of::type_of(cx, element_type);\n     let (element_type_size, element_type_align) = size_and_align_of(cx, element_llvm_type);\n \n+    let (array_size_in_bytes, upper_bound) = match len {\n+        Some(len) => (element_type_size * len, len as c_longlong),\n+        None => (0, -1)\n+    };\n+\n     let subrange = unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateSubrange(\n-            DIB(cx),\n-            0,\n-            len as i64)\n+        llvm::LLVMDIBuilderGetOrCreateSubrange(DIB(cx), 0, upper_bound)\n     };\n \n     let subscripts = create_DIArray(DIB(cx), &[subrange]);\n     let metadata = unsafe {\n         llvm::LLVMDIBuilderCreateArrayType(\n             DIB(cx),\n-            bytes_to_bits(element_type_size * (len as u64)),\n+            bytes_to_bits(array_size_in_bytes),\n             bytes_to_bits(element_type_align),\n             element_type_metadata,\n             subscripts)\n@@ -2991,12 +2993,12 @@ fn type_metadata<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         ty::ty_enum(def_id, _) => {\n             prepare_enum_metadata(cx, t, def_id, unique_type_id, usage_site_span).finalize(cx)\n         }\n-        ty::ty_vec(typ, Some(len)) => {\n-            fixed_vec_metadata(cx, unique_type_id, typ, len, usage_site_span)\n+        ty::ty_vec(typ, len) => {\n+            fixed_vec_metadata(cx, unique_type_id, typ, len.map(|x| x as u64), usage_site_span)\n+        }\n+        ty::ty_str => {\n+            fixed_vec_metadata(cx, unique_type_id, cx.tcx().types.i8, None, usage_site_span)\n         }\n-        // FIXME Can we do better than this for unsized vec/str fields?\n-        ty::ty_vec(typ, None) => fixed_vec_metadata(cx, unique_type_id, typ, 0, usage_site_span),\n-        ty::ty_str => fixed_vec_metadata(cx, unique_type_id, cx.tcx().types.i8, 0, usage_site_span),\n         ty::ty_trait(..) => {\n             MetadataCreationResult::new(\n                         trait_pointer_metadata(cx, t, None, unique_type_id),"}, {"sha": "fdfbcda7421cd91cf245f685b06054934beb60f4", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c80e556e159af38f86eea5ee2ba796d7c724c92b/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80e556e159af38f86eea5ee2ba796d7c724c92b/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=c80e556e159af38f86eea5ee2ba796d7c724c92b", "patch": "@@ -36,6 +36,12 @@\n // gdb-command:print void_droid_gdb->internals\n // gdb-check:$6 = (isize *) 0x0\n \n+// gdb-command:print nested_non_zero_yep\n+// gdb-check:$7 = {RUST$ENCODED$ENUM$1$2$Nope = {10.5, {a = 10, b = 20, c = [...]}}}\n+\n+// gdb-command:print nested_non_zero_nope\n+// gdb-check:$8 = {RUST$ENCODED$ENUM$1$2$Nope = {[...], {a = [...], b = [...], c = 0x0}}}\n+\n // gdb-command:continue\n \n \n@@ -67,6 +73,12 @@\n // lldb-command:print none_str\n // lldb-check:[...]$7 = None\n \n+// lldb-command:print nested_non_zero_yep\n+// lldb-check:[...]$8 = Yep(10.5, NestedNonZeroField { a: 10, b: 20, c: &[...] })\n+\n+// lldb-command:print nested_non_zero_nope\n+// lldb-check:[...]$9 = Nope\n+\n \n #![omit_gdb_pretty_printer_section]\n \n@@ -102,6 +114,17 @@ struct NamedFieldsRepr<'a> {\n     internals: &'a isize\n }\n \n+struct NestedNonZeroField<'a> {\n+    a: u16,\n+    b: u32,\n+    c: &'a char,\n+}\n+\n+enum NestedNonZero<'a> {\n+    Yep(f64, NestedNonZeroField<'a>),\n+    Nope\n+}\n+\n fn main() {\n \n     let some_str: Option<&'static str> = Some(\"abc\");\n@@ -124,6 +147,17 @@ fn main() {\n     let void_droid = NamedFields::Void;\n     let void_droid_gdb: &NamedFieldsRepr = unsafe { std::mem::transmute(&NamedFields::Void) };\n \n+    let x = 'x';\n+    let nested_non_zero_yep = NestedNonZero::Yep(\n+        10.5,\n+        NestedNonZeroField {\n+            a: 10,\n+            b: 20,\n+            c: &x\n+        });\n+\n+    let nested_non_zero_nope = NestedNonZero::Nope;\n+\n     zzz(); // #break\n }\n "}]}