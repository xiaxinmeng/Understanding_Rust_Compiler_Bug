{"sha": "522f4e1f3e69a29ab3772df877f2e2e30f986256", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMmY0ZTFmM2U2OWEyOWFiMzc3MmRmODc3ZjJlMmUzMGY5ODYyNTY=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-09-17T10:41:12Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-09-17T10:41:12Z"}, "message": "Add an example to Pin::as_mut", "tree": {"sha": "fbae4c1160fe47a474ca02d737aa27c0c0df9628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbae4c1160fe47a474ca02d737aa27c0c0df9628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/522f4e1f3e69a29ab3772df877f2e2e30f986256", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/522f4e1f3e69a29ab3772df877f2e2e30f986256", "html_url": "https://github.com/rust-lang/rust/commit/522f4e1f3e69a29ab3772df877f2e2e30f986256", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/522f4e1f3e69a29ab3772df877f2e2e30f986256/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5670d048c0f88af9976b5505c7853b23dd06770d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5670d048c0f88af9976b5505c7853b23dd06770d", "html_url": "https://github.com/rust-lang/rust/commit/5670d048c0f88af9976b5505c7853b23dd06770d"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "e8d63b8c3130b84497a5ceb87621807356fb056f", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/522f4e1f3e69a29ab3772df877f2e2e30f986256/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/522f4e1f3e69a29ab3772df877f2e2e30f986256/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=522f4e1f3e69a29ab3772df877f2e2e30f986256", "patch": "@@ -584,6 +584,27 @@ impl<P: DerefMut> Pin<P> {\n     /// the pointee cannot move after `Pin<Pointer<T>>` got created.\n     /// \"Malicious\" implementations of `Pointer::DerefMut` are likewise\n     /// ruled out by the contract of `Pin::new_unchecked`.\n+    ///\n+    /// This method is useful when doing multiple calls to functions that consume the pinned type.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::pin::Pin;\n+    ///\n+    /// # struct Type {}\n+    /// impl Type {\n+    ///     fn method(self: Pin<&mut Self>) {\n+    ///         // do something\n+    ///     }\n+    ///\n+    ///     fn call_method_twice(mut self: Pin<&mut Self>) {\n+    ///         // `method` consumes `self`, so reborrow the `Pin<&mut Self>` via `as_mut`.\n+    ///         self.as_mut().method();\n+    ///         self.as_mut().method();\n+    ///     }\n+    /// }\n+    /// ```\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     #[inline(always)]\n     pub fn as_mut(&mut self) -> Pin<&mut P::Target> {"}]}