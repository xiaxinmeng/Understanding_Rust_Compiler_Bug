{"sha": "82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjQxZDRjMzlkZDU0N2M0NGMyZDJlZjRjMGM5OGM1YmZiZDhiNTU=", "commit": {"author": {"name": "Jens Nockert", "email": "jens@nockert.se", "date": "2012-12-21T18:30:33Z"}, "committer": {"name": "Jens Nockert", "email": "jens@nockert.se", "date": "2012-12-21T18:30:33Z"}, "message": "Add support for bitcount intrinsics\nAdds support for the llvm.ctpop, llvm.ctlz and llvm.cttz intrinsics.", "tree": {"sha": "2a049fef990c66980b65ba8bb302db6d43ea87e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a049fef990c66980b65ba8bb302db6d43ea87e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "html_url": "https://github.com/rust-lang/rust/commit/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/comments", "author": {"login": "auroranockert", "id": 49616, "node_id": "MDQ6VXNlcjQ5NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/49616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auroranockert", "html_url": "https://github.com/auroranockert", "followers_url": "https://api.github.com/users/auroranockert/followers", "following_url": "https://api.github.com/users/auroranockert/following{/other_user}", "gists_url": "https://api.github.com/users/auroranockert/gists{/gist_id}", "starred_url": "https://api.github.com/users/auroranockert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auroranockert/subscriptions", "organizations_url": "https://api.github.com/users/auroranockert/orgs", "repos_url": "https://api.github.com/users/auroranockert/repos", "events_url": "https://api.github.com/users/auroranockert/events{/privacy}", "received_events_url": "https://api.github.com/users/auroranockert/received_events", "type": "User", "site_admin": false}, "committer": {"login": "auroranockert", "id": 49616, "node_id": "MDQ6VXNlcjQ5NjE2", "avatar_url": "https://avatars.githubusercontent.com/u/49616?v=4", "gravatar_id": "", "url": "https://api.github.com/users/auroranockert", "html_url": "https://github.com/auroranockert", "followers_url": "https://api.github.com/users/auroranockert/followers", "following_url": "https://api.github.com/users/auroranockert/following{/other_user}", "gists_url": "https://api.github.com/users/auroranockert/gists{/gist_id}", "starred_url": "https://api.github.com/users/auroranockert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/auroranockert/subscriptions", "organizations_url": "https://api.github.com/users/auroranockert/orgs", "repos_url": "https://api.github.com/users/auroranockert/repos", "events_url": "https://api.github.com/users/auroranockert/events{/privacy}", "received_events_url": "https://api.github.com/users/auroranockert/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a2891febd8b54fb8bea07cdb60184d24c324d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a2891febd8b54fb8bea07cdb60184d24c324d9", "html_url": "https://github.com/rust-lang/rust/commit/76a2891febd8b54fb8bea07cdb60184d24c324d9"}], "stats": {"total": 271, "additions": 270, "deletions": 1}, "files": [{"sha": "d0ce66da43f52708ca4c541060be68272a38fcc7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "patch": "@@ -2396,6 +2396,30 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n                                 T_fn(~[T_f32()], T_f32()));\n     let truncf64 = decl_cdecl_fn(llmod, ~\"llvm.trunc.f64\",\n                                 T_fn(~[T_f64()], T_f64()));\n+    let ctpop8 = decl_cdecl_fn(llmod, ~\"llvm.ctpop.i8\",\n+                                T_fn(~[T_i8()], T_i8()));\n+    let ctpop16 = decl_cdecl_fn(llmod, ~\"llvm.ctpop.i16\",\n+                                T_fn(~[T_i16()], T_i16()));\n+    let ctpop32 = decl_cdecl_fn(llmod, ~\"llvm.ctpop.i32\",\n+                                T_fn(~[T_i32()], T_i32()));\n+    let ctpop64 = decl_cdecl_fn(llmod, ~\"llvm.ctpop.i64\",\n+                                T_fn(~[T_i64()], T_i64()));\n+    let ctlz8 = decl_cdecl_fn(llmod, ~\"llvm.ctlz.i8\",\n+                                T_fn(~[T_i8(), T_i1()], T_i8()));\n+    let ctlz16 = decl_cdecl_fn(llmod, ~\"llvm.ctlz.i16\",\n+                                T_fn(~[T_i16(), T_i1()], T_i16()));\n+    let ctlz32 = decl_cdecl_fn(llmod, ~\"llvm.ctlz.i32\",\n+                                T_fn(~[T_i32(), T_i1()], T_i32()));\n+    let ctlz64 = decl_cdecl_fn(llmod, ~\"llvm.ctlz.i64\",\n+                                T_fn(~[T_i64(), T_i1()], T_i64()));\n+    let cttz8 = decl_cdecl_fn(llmod, ~\"llvm.cttz.i8\",\n+                                T_fn(~[T_i8(), T_i1()], T_i8()));\n+    let cttz16 = decl_cdecl_fn(llmod, ~\"llvm.cttz.i16\",\n+                                T_fn(~[T_i16(), T_i1()], T_i16()));\n+    let cttz32 = decl_cdecl_fn(llmod, ~\"llvm.cttz.i32\",\n+                                T_fn(~[T_i32(), T_i1()], T_i32()));\n+    let cttz64 = decl_cdecl_fn(llmod, ~\"llvm.cttz.i64\",\n+                                T_fn(~[T_i64(), T_i1()], T_i64()));\n \n     let intrinsics = HashMap();\n     intrinsics.insert(~\"llvm.gcroot\", gcroot);\n@@ -2436,6 +2460,18 @@ fn declare_intrinsics(llmod: ModuleRef) -> HashMap<~str, ValueRef> {\n     intrinsics.insert(~\"llvm.ceil.f64\", ceilf64);\n     intrinsics.insert(~\"llvm.trunc.f32\", truncf32);\n     intrinsics.insert(~\"llvm.trunc.f64\", truncf64);\n+    intrinsics.insert(~\"llvm.ctpop.i8\", ctpop8);\n+    intrinsics.insert(~\"llvm.ctpop.i16\", ctpop16);\n+    intrinsics.insert(~\"llvm.ctpop.i32\", ctpop32);\n+    intrinsics.insert(~\"llvm.ctpop.i64\", ctpop64);\n+    intrinsics.insert(~\"llvm.ctlz.i8\", ctlz8);\n+    intrinsics.insert(~\"llvm.ctlz.i16\", ctlz16);\n+    intrinsics.insert(~\"llvm.ctlz.i32\", ctlz32);\n+    intrinsics.insert(~\"llvm.ctlz.i64\", ctlz64);\n+    intrinsics.insert(~\"llvm.cttz.i8\", cttz8);\n+    intrinsics.insert(~\"llvm.cttz.i16\", cttz16);\n+    intrinsics.insert(~\"llvm.cttz.i32\", cttz32);\n+    intrinsics.insert(~\"llvm.cttz.i64\", cttz64);\n \n     return intrinsics;\n }"}, {"sha": "e7cdf82fd151664b72f3a9867d676dee1015824b", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "patch": "@@ -1194,6 +1194,74 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n             let truncf = ccx.intrinsics.get(~\"llvm.trunc.f64\");\n             Store(bcx, Call(bcx, truncf, ~[x]), fcx.llretptr);\n         }\n+        ~\"ctpop8\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let ctpop = ccx.intrinsics.get(~\"llvm.ctpop.i8\");\n+            Store(bcx, Call(bcx, ctpop, ~[x]), fcx.llretptr)\n+        }\n+        ~\"ctpop16\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let ctpop = ccx.intrinsics.get(~\"llvm.ctpop.i16\");\n+            Store(bcx, Call(bcx, ctpop, ~[x]), fcx.llretptr)\n+        }\n+        ~\"ctpop32\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let ctpop = ccx.intrinsics.get(~\"llvm.ctpop.i32\");\n+            Store(bcx, Call(bcx, ctpop, ~[x]), fcx.llretptr)\n+        }\n+        ~\"ctpop64\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let ctpop = ccx.intrinsics.get(~\"llvm.ctpop.i64\");\n+            Store(bcx, Call(bcx, ctpop, ~[x]), fcx.llretptr)\n+        }\n+        ~\"ctlz8\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let ctlz = ccx.intrinsics.get(~\"llvm.ctlz.i8\");\n+            Store(bcx, Call(bcx, ctlz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"ctlz16\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let ctlz = ccx.intrinsics.get(~\"llvm.ctlz.i16\");\n+            Store(bcx, Call(bcx, ctlz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"ctlz32\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let ctlz = ccx.intrinsics.get(~\"llvm.ctlz.i32\");\n+            Store(bcx, Call(bcx, ctlz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"ctlz64\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let ctlz = ccx.intrinsics.get(~\"llvm.ctlz.i64\");\n+            Store(bcx, Call(bcx, ctlz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"cttz8\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let cttz = ccx.intrinsics.get(~\"llvm.cttz.i8\");\n+            Store(bcx, Call(bcx, cttz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"cttz16\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let cttz = ccx.intrinsics.get(~\"llvm.cttz.i16\");\n+            Store(bcx, Call(bcx, cttz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"cttz32\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let cttz = ccx.intrinsics.get(~\"llvm.cttz.i32\");\n+            Store(bcx, Call(bcx, cttz, ~[x, y]), fcx.llretptr)\n+        }\n+        ~\"cttz64\" => {\n+            let x = get_param(decl, first_real_arg);\n+            let y = C_bool(false);\n+            let cttz = ccx.intrinsics.get(~\"llvm.cttz.i64\");\n+            Store(bcx, Call(bcx, cttz, ~[x, y]), fcx.llretptr)\n+        }\n         _ => {\n             // Could we make this an enum rather than a string? does it get\n             // checked earlier?"}, {"sha": "7f3b78359fec466904cc3db2389308bfb3b07b1c", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "patch": "@@ -130,6 +130,11 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                 ~\"floorf32\"| ~\"floorf64\"| ~\"ceilf32\" | ~\"ceilf64\" |\n                 ~\"truncf32\"| ~\"truncf64\" => 0,\n \n+                ~\"ctpop8\" | ~\"ctpop16\" | ~\"ctpop32\" | ~\"ctpop64\" => 0,\n+\n+                ~\"ctlz8\" | ~\"ctlz16\" | ~\"ctlz32\" | ~\"ctlz64\" => 0,\n+                ~\"cttz8\" | ~\"cttz16\" | ~\"cttz32\" | ~\"cttz64\" => 0,\n+\n                 // would be cool to make these an enum instead of strings!\n                 _ => fail ~\"unknown intrinsic in type_use\"\n             };"}, {"sha": "93bdfd5ccda631a6d046a6311fc2a9b179961369", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "patch": "@@ -3156,7 +3156,55 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n         (0u, ~[arg(ast::by_copy, ty::mk_f64(tcx))],\n          ty::mk_f64(tcx))\n      }\n-      ref other => {\n+     ~\"ctpop8\" => {\n+        (0u, ~[arg(ast::by_copy, ty::mk_i8(tcx))],\n+         ty::mk_i8(tcx))\n+     }\n+     ~\"ctpop16\" => {\n+        (0u, ~[arg(ast::by_copy, ty::mk_i16(tcx))],\n+         ty::mk_i16(tcx))\n+     }\n+     ~\"ctpop32\" => {\n+        (0u, ~[arg(ast::by_copy, ty::mk_i32(tcx))],\n+         ty::mk_i32(tcx))\n+     }\n+     ~\"ctpop64\" => {\n+        (0u, ~[arg(ast::by_copy, ty::mk_i64(tcx))],\n+         ty::mk_i64(tcx))\n+     }\n+     ~\"ctlz8\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i8(tcx))],\n+         ty::mk_i8(tcx))\n+     }\n+     ~\"ctlz16\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i16(tcx))],\n+         ty::mk_i16(tcx))\n+     }\n+     ~\"ctlz32\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i32(tcx))],\n+         ty::mk_i32(tcx))\n+     }\n+     ~\"ctlz64\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i64(tcx))],\n+         ty::mk_i64(tcx))\n+     }\n+     ~\"cttz8\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i8(tcx))],\n+         ty::mk_i8(tcx))\n+     }\n+     ~\"cttz16\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i16(tcx))],\n+         ty::mk_i16(tcx))\n+     }\n+     ~\"cttz32\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i32(tcx))],\n+         ty::mk_i32(tcx))\n+     }\n+     ~\"cttz64\" => {\n+         (0u, ~[arg(ast::by_copy, ty::mk_i64(tcx))],\n+         ty::mk_i64(tcx))\n+     }\n+     ref other => {\n         tcx.sess.span_err(it.span, ~\"unrecognized intrinsic function: `\" +\n                           (*other) + ~\"`\");\n         return;"}, {"sha": "588cc496b28215fe6880bfed1eb342ac36138997", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=82641d4c39dd547c44c2d2ef4c0c98c5bfbd8b55", "patch": "@@ -0,0 +1,112 @@\n+// xfail-fast\n+\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern mod std;\n+\n+#[abi = \"rust-intrinsic\"]  \n+extern mod rusti {\n+    fn ctpop8(x: i8) -> i8;\n+    fn ctpop16(x: i16) -> i16;\n+    fn ctpop32(x: i32) -> i32;\n+    fn ctpop64(x: i64) -> i64;\n+\n+    fn ctlz8(x: i8) -> i8;\n+    fn ctlz16(x: i16) -> i16;\n+    fn ctlz32(x: i32) -> i32;\n+    fn ctlz64(x: i64) -> i64;\n+\n+    fn cttz8(x: i8) -> i8;\n+    fn cttz16(x: i16) -> i16;\n+    fn cttz32(x: i32) -> i32;\n+    fn cttz64(x: i64) -> i64;\n+}\n+\n+fn main() {\n+\n+    use rusti::*;\n+\n+    assert(ctpop8(0i8) == 0i8);\n+    assert(ctpop16(0i16) == 0i16);\n+    assert(ctpop32(0i32) == 0i32);\n+    assert(ctpop64(0i64) == 0i64);\n+\n+    assert(ctpop8(1i8) == 1i8);\n+    assert(ctpop16(1i16) == 1i16);\n+    assert(ctpop32(1i32) == 1i32);\n+    assert(ctpop64(1i64) == 1i64);\n+\n+    assert(ctpop8(10i8) == 2i8);\n+    assert(ctpop16(10i16) == 2i16);\n+    assert(ctpop32(10i32) == 2i32);\n+    assert(ctpop64(10i64) == 2i64);\n+\n+    assert(ctpop8(100i8) == 3i8);\n+    assert(ctpop16(100i16) == 3i16);\n+    assert(ctpop32(100i32) == 3i32);\n+    assert(ctpop64(100i64) == 3i64);\n+\n+    assert(ctpop8(-1i8) == 8i8);\n+    assert(ctpop16(-1i16) == 16i16);\n+    assert(ctpop32(-1i32) == 32i32);\n+    assert(ctpop64(-1i64) == 64i64);\n+\n+    assert(ctlz8(0i8) == 8i8);\n+    assert(ctlz16(0i16) == 16i16);\n+    assert(ctlz32(0i32) == 32i32);\n+    assert(ctlz64(0i64) == 64i64);\n+\n+    assert(ctlz8(1i8) == 7i8);\n+    assert(ctlz16(1i16) == 15i16);\n+    assert(ctlz32(1i32) == 31i32);\n+    assert(ctlz64(1i64) == 63i64);\n+\n+    assert(ctlz8(10i8) == 4i8);\n+    assert(ctlz16(10i16) == 12i16);\n+    assert(ctlz32(10i32) == 28i32);\n+    assert(ctlz64(10i64) == 60i64);\n+\n+    assert(ctlz8(100i8) == 1i8);\n+    assert(ctlz16(100i16) == 9i16);\n+    assert(ctlz32(100i32) == 25i32);\n+    assert(ctlz64(100i64) == 57i64);\n+\n+    assert(cttz8(-1i8) == 0i8);\n+    assert(cttz16(-1i16) == 0i16);\n+    assert(cttz32(-1i32) == 0i32);\n+    assert(cttz64(-1i64) == 0i64);\n+    \n+    assert(cttz8(0i8) == 8i8);\n+    assert(cttz16(0i16) == 16i16);\n+    assert(cttz32(0i32) == 32i32);\n+    assert(cttz64(0i64) == 64i64);\n+\n+    assert(cttz8(1i8) == 0i8);\n+    assert(cttz16(1i16) == 0i16);\n+    assert(cttz32(1i32) == 0i32);\n+    assert(cttz64(1i64) == 0i64);\n+\n+    assert(cttz8(10i8) == 1i8);\n+    assert(cttz16(10i16) == 1i16);\n+    assert(cttz32(10i32) == 1i32);\n+    assert(cttz64(10i64) == 1i64);\n+\n+    assert(cttz8(100i8) == 2i8);\n+    assert(cttz16(100i16) == 2i16);\n+    assert(cttz32(100i32) == 2i32);\n+    assert(cttz64(100i64) == 2i64);\n+\n+    assert(cttz8(-1i8) == 0i8);\n+    assert(cttz16(-1i16) == 0i16);\n+    assert(cttz32(-1i32) == 0i32);\n+    assert(cttz64(-1i64) == 0i64);\n+\n+}"}]}