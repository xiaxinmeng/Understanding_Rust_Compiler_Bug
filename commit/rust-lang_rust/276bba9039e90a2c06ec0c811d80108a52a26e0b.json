{"sha": "276bba9039e90a2c06ec0c811d80108a52a26e0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3NmJiYTkwMzllOTBhMmMwNmVjMGM4MTFkODAxMDhhNTJhMjZlMGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-09T14:53:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-03-30T11:55:29Z"}, "message": "refactor if so that the \"then type\" is an expression", "tree": {"sha": "9609df50e99364e019ee7524f1af3d056e20af48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9609df50e99364e019ee7524f1af3d056e20af48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/276bba9039e90a2c06ec0c811d80108a52a26e0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/276bba9039e90a2c06ec0c811d80108a52a26e0b", "html_url": "https://github.com/rust-lang/rust/commit/276bba9039e90a2c06ec0c811d80108a52a26e0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/276bba9039e90a2c06ec0c811d80108a52a26e0b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe151194e9a919ab23c2bb356767a5cbfa3811e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe151194e9a919ab23c2bb356767a5cbfa3811e7", "html_url": "https://github.com/rust-lang/rust/commit/fe151194e9a919ab23c2bb356767a5cbfa3811e7"}], "stats": {"total": 62, "additions": 26, "deletions": 36}, "files": [{"sha": "388d019f654a4f51b53becd6c214827e2b42831b", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -195,7 +195,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 //   [..expr..]\n                 //\n                 let cond_exit = self.expr(&cond, pred);                // 1\n-                let then_exit = self.block(&then, cond_exit);          // 2\n+                let then_exit = self.expr(&then, cond_exit);          // 2\n                 self.add_ast_node(expr.id, &[cond_exit, then_exit])      // 3,4\n             }\n \n@@ -215,7 +215,7 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 //   [..expr..]\n                 //\n                 let cond_exit = self.expr(&cond, pred);                // 1\n-                let then_exit = self.block(&then, cond_exit);          // 2\n+                let then_exit = self.expr(&then, cond_exit);          // 2\n                 let else_exit = self.expr(&otherwise, cond_exit);      // 3\n                 self.add_ast_node(expr.id, &[then_exit, else_exit])      // 4, 5\n             }"}, {"sha": "c7ad143c94979762f7ac060dc2be4ba9e91a865a", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -960,7 +960,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n         }\n         ExprIf(ref head_expression, ref if_block, ref optional_else) => {\n             visitor.visit_expr(head_expression);\n-            visitor.visit_block(if_block);\n+            visitor.visit_expr(if_block);\n             walk_list!(visitor, visit_expr, optional_else);\n         }\n         ExprWhile(ref subexpression, ref block, ref opt_sp_name) => {"}, {"sha": "fbc8a97dacc4c76a0bd269f80be06d757c493590", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -1856,7 +1856,10 @@ impl<'a> LoweringContext<'a> {\n                     }\n                 });\n \n-                hir::ExprIf(P(self.lower_expr(cond)), self.lower_block(blk, None), else_opt)\n+                let then_blk = self.lower_block(blk, None);\n+                let then_expr = self.expr_block(then_blk, ThinVec::new());\n+\n+                hir::ExprIf(P(self.lower_expr(cond)), P(then_expr), else_opt)\n             }\n             ExprKind::While(ref cond, ref body, opt_ident) => {\n                 self.with_loop_scope(e.id, |this|"}, {"sha": "59cefa36cbf1d5456d32979e0ae10202ae5a6def", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -994,7 +994,7 @@ pub enum Expr_ {\n     /// An `if` block, with an optional else block\n     ///\n     /// `if expr { block } else { expr }`\n-    ExprIf(P<Expr>, P<Block>, Option<P<Expr>>),\n+    ExprIf(P<Expr>, P<Expr>, Option<P<Expr>>),\n     /// A while loop, with an optional label\n     ///\n     /// `'label: while expr { block }`"}, {"sha": "04a65fd5e3aa47c0a748993578135da24124bf5b", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -1036,7 +1036,7 @@ impl<'a> State<'a> {\n                         word(&mut self.s, \" else if \")?;\n                         self.print_expr(&i)?;\n                         space(&mut self.s)?;\n-                        self.print_block(&then)?;\n+                        self.print_expr(&then)?;\n                         self.print_else(e.as_ref().map(|e| &**e))\n                     }\n                     // \"final else\"\n@@ -1058,13 +1058,13 @@ impl<'a> State<'a> {\n \n     pub fn print_if(&mut self,\n                     test: &hir::Expr,\n-                    blk: &hir::Block,\n+                    blk: &hir::Expr,\n                     elseopt: Option<&hir::Expr>)\n                     -> io::Result<()> {\n         self.head(\"if\")?;\n         self.print_expr(test)?;\n         space(&mut self.s)?;\n-        self.print_block(blk)?;\n+        self.print_expr(blk)?;\n         self.print_else(elseopt)\n     }\n "}, {"sha": "c7cf4a35a4bc780a6f16b45b65325945409af24e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -414,9 +414,9 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                 self.consume_exprs(exprs);\n             }\n \n-            hir::ExprIf(ref cond_expr, ref then_blk, ref opt_else_expr) => {\n+            hir::ExprIf(ref cond_expr, ref then_expr, ref opt_else_expr) => {\n                 self.consume_expr(&cond_expr);\n-                self.walk_block(&then_blk);\n+                self.walk_expr(&then_expr);\n                 if let Some(ref else_expr) = *opt_else_expr {\n                     self.consume_expr(&else_expr);\n                 }"}, {"sha": "e146663d4c8d6f7294129a1e1d6f4bca2c139f9d", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -951,7 +951,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             //   (  succ  )\n             //\n             let else_ln = self.propagate_through_opt_expr(els.as_ref().map(|e| &**e), succ);\n-            let then_ln = self.propagate_through_block(&then, succ);\n+            let then_ln = self.propagate_through_expr(&then, succ);\n             let ln = self.live_node(expr.id, expr.span);\n             self.init_from_succ(ln, else_ln);\n             self.merge_from_succ(ln, then_ln, false);"}, {"sha": "d9b8d04ad386ff6e98833472b4cadfa2212b40ad", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -636,7 +636,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprIf(ref cond, ref then, ref otherwise) => {\n             ExprKind::If {\n                 condition: cond.to_ref(),\n-                then: block::to_expr_ref(cx, then),\n+                then: then.to_ref(),\n                 otherwise: otherwise.to_ref(),\n             }\n         }"}, {"sha": "54da0b2b0047e02250a78fb8f76b6f24b0e7fee4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/276bba9039e90a2c06ec0c811d80108a52a26e0b/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=276bba9039e90a2c06ec0c811d80108a52a26e0b", "patch": "@@ -2739,7 +2739,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // or if-else.\n     fn check_then_else(&self,\n                        cond_expr: &'gcx hir::Expr,\n-                       then_blk: &'gcx hir::Block,\n+                       then_expr: &'gcx hir::Expr,\n                        opt_else_expr: Option<&'gcx hir::Expr>,\n                        sp: Span,\n                        expected: Expectation<'tcx>) -> Ty<'tcx> {\n@@ -2748,7 +2748,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         self.diverges.set(Diverges::Maybe);\n \n         let expected = expected.adjust_for_branches(self);\n-        let then_ty = self.check_block_with_expected(then_blk, expected);\n+        let then_ty = self.check_expr_with_expectation(then_expr, expected);\n         let then_diverges = self.diverges.get();\n         self.diverges.set(Diverges::Maybe);\n \n@@ -2763,26 +2763,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // to assign coercions to, otherwise it's () or diverging.\n             expected_ty = then_ty;\n             found_ty = else_ty;\n-            result = if let Some(ref then) = then_blk.expr {\n-                let res = self.try_find_coercion_lub(&cause, || Some(&**then),\n-                                                     then_ty, else_expr, else_ty);\n-\n-                // In case we did perform an adjustment, we have to update\n-                // the type of the block, because old trans still uses it.\n-                if res.is_ok() {\n-                    let adj = self.tables.borrow().adjustments.get(&then.id).cloned();\n-                    if let Some(adj) = adj {\n-                        self.write_ty(then_blk.id, adj.target);\n-                    }\n-                }\n \n-                res\n-            } else {\n-                self.commit_if_ok(|_| {\n-                    let trace = TypeTrace::types(&cause, true, then_ty, else_ty);\n-                    self.lub(true, trace, &then_ty, &else_ty)\n-                        .map(|ok| self.register_infer_ok_obligations(ok))\n-                })\n+            let coerce_to = expected.only_has_type(self).unwrap_or(then_ty);\n+            result = {\n+                self.try_coerce(then_expr, then_ty, coerce_to)\n+                    .and_then(|t| {\n+                        self.try_find_coercion_lub(&cause, || Some(then_expr), t, else_expr, else_ty)\n+                    })\n             };\n \n             // We won't diverge unless both branches do (or the condition does).\n@@ -3587,9 +3574,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 tcx.mk_nil()\n             }\n           }\n-          hir::ExprIf(ref cond, ref then_blk, ref opt_else_expr) => {\n-            self.check_then_else(&cond, &then_blk, opt_else_expr.as_ref().map(|e| &**e),\n-                                 expr.span, expected)\n+          hir::ExprIf(ref cond, ref then_expr, ref opt_else_expr) => {\n+              self.check_then_else(&cond, then_expr, opt_else_expr.as_ref().map(|e| &**e),\n+                                   expr.span, expected)\n           }\n           hir::ExprWhile(ref cond, ref body, _) => {\n             let unified = self.tcx.mk_nil();"}]}