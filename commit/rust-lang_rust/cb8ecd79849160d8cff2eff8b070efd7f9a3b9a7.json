{"sha": "cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiOGVjZDc5ODQ5MTYwZDhjZmYyZWZmOGIwNzBlZmQ3ZjlhM2I5YTc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-29T19:22:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-29T19:22:05Z"}, "message": "Allow extern mods to be anonymous\n\nextern mod {\n  f();\n}\n\nis now allowed, and puts f in the enclosing scope. (Requires a\nlink_name attribute to be really useful...)", "tree": {"sha": "8dd4917d09b01017532ed6c8037c5bf5cc88cd56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dd4917d09b01017532ed6c8037c5bf5cc88cd56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "html_url": "https://github.com/rust-lang/rust/commit/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcf5a7580147a58ecbe06323ad7c267f2e5ae28", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcf5a7580147a58ecbe06323ad7c267f2e5ae28", "html_url": "https://github.com/rust-lang/rust/commit/cdcf5a7580147a58ecbe06323ad7c267f2e5ae28"}], "stats": {"total": 74, "additions": 54, "deletions": 20}, "files": [{"sha": "b04a55629d294dc8aed52bcfc7ac876a31d8cb83", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -656,9 +656,14 @@ enum foreign_abi {\n     foreign_abi_stdcall,\n }\n \n+// Foreign mods can be named or anonymous\n+#[auto_serialize]\n+enum foreign_mod_sort { named, anonymous }\n+\n #[auto_serialize]\n type foreign_mod =\n-    {view_items: ~[@view_item],\n+    {sort: foreign_mod_sort,\n+     view_items: ~[@view_item],\n      items: ~[@foreign_item]};\n \n #[auto_serialize]\n@@ -775,6 +780,10 @@ type struct_def = {\n     dtor: Option<class_dtor>\n };\n \n+/*\n+  FIXME (#3300): Should allow items to be anonymous. Right now\n+  we just use dummy names for anon items.\n+ */\n #[auto_serialize]\n type item = {ident: ident, attrs: ~[attribute],\n              id: node_id, node: item_,"}, {"sha": "7375eb49aed1d8e939c1c8d9ab0780273c570473", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -554,7 +554,8 @@ fn noop_fold_mod(m: _mod, fld: ast_fold) -> _mod {\n }\n \n fn noop_fold_foreign_mod(nm: foreign_mod, fld: ast_fold) -> foreign_mod {\n-    return {view_items: vec::map(nm.view_items, |x| fld.fold_view_item(x)),\n+    return {sort: nm.sort,\n+         view_items: vec::map(nm.view_items, |x| fld.fold_view_item(x)),\n          items: vec::map(nm.items, |x| fld.fold_foreign_item(x))}\n }\n "}, {"sha": "f9a9a8261e9c938b663392c944053c2ebe3373f5", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -2890,7 +2890,8 @@ struct parser {\n         }\n     }\n \n-    fn parse_foreign_mod_items(+first_item_attrs: ~[attribute]) ->\n+    fn parse_foreign_mod_items(sort: ast::foreign_mod_sort,\n+                               +first_item_attrs: ~[attribute]) ->\n         foreign_mod {\n         // Shouldn't be any view items since we've already parsed an item attr\n         let {attrs_remaining, view_items, items: _} =\n@@ -2905,7 +2906,7 @@ struct parser {\n             initial_attrs = ~[];\n             vec::push(items, self.parse_foreign_item(attrs));\n         }\n-        return {view_items: view_items,\n+        return {sort: sort, view_items: view_items,\n              items: items};\n     }\n \n@@ -2919,12 +2920,16 @@ struct parser {\n         } else {\n             self.expect_keyword(~\"module\");\n         }\n-        let ident = self.parse_ident();\n+        let (sort, ident) = match self.token {\n+                token::IDENT(*) => (ast::named, self.parse_ident()),\n+                _ => (ast::anonymous,\n+                      token::special_idents::clownshoes_foreign_mod)\n+        };\n \n         // extern mod { ... }\n         if items_allowed && self.eat(token::LBRACE) {\n             let extra_attrs = self.parse_inner_attrs_and_next();\n-            let m = self.parse_foreign_mod_items(extra_attrs.next);\n+            let m = self.parse_foreign_mod_items(sort, extra_attrs.next);\n             self.expect(token::RBRACE);\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident,\n                                           item_foreign_mod(m), visibility,"}, {"sha": "ae1c829b3fbb164d64522a03e8947afecd3ad8bb", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -319,7 +319,7 @@ mod special_idents {\n     const blk : ident = 30u;\n     const static : ident = 31u;\n     const intrinsic : ident = 32u;\n-\n+    const clownshoes_foreign_mod: ident = 33;\n }\n \n type ident_interner = util::interner::interner<@~str>;\n@@ -343,7 +343,7 @@ fn mk_ident_interner() -> ident_interner {\n                      @~\"str\", @~\"ty_visitor\", @~\"arg\", @~\"descrim\",\n                      @~\"__rust_abi\", @~\"__rust_stack_shim\", @~\"tydesc\",\n                      @~\"dtor\", @~\"main\", @~\"<opaque>\", @~\"blk\", @~\"static\",\n-                     @~\"intrinsic\"];\n+                     @~\"intrinsic\", @~\"__foreign_mod__\"];\n \n     let rv = interner::mk_prefill::<@~str>(|x| str::hash(*x),\n                                            |x,y| str::eq(*x, *y), init_vec);"}, {"sha": "f24226d9edc3d7ff8db35ff63008df903706fa09", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -469,7 +469,10 @@ fn print_item(s: ps, &&item: @ast::item) {\n       ast::item_foreign_mod(nmod) => {\n         head(s, ~\"extern\");\n         word_nbsp(s, ~\"mod\");\n-        print_ident(s, item.ident);\n+        match nmod.sort {\n+            ast::named => print_ident(s, item.ident),\n+            ast::anonymous => {}\n+        }\n         nbsp(s);\n         bopen(s);\n         print_foreign_mod(s, nmod, item.attrs);"}, {"sha": "50ed5f6132caff66b6b6a06f366d40a102dfa628", "filename": "src/rustc/front/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Frustc%2Ffront%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Frustc%2Ffront%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fconfig.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -75,6 +75,7 @@ fn fold_foreign_mod(cx: ctxt, nm: ast::foreign_mod,\n     let filtered_view_items = vec::filter_map(\n         nm.view_items, view_item_filter);\n     return {\n+        sort: nm.sort,\n         view_items: vec::map(filtered_view_items, |x| fld.fold_view_item(x)),\n         items: filtered_items\n     };"}, {"sha": "33260e1fe6f6fd7f9a2253c8a777a1f510ad7948", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 17, "deletions": 11, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -41,7 +41,7 @@ import syntax::ast::{ty_int, ty_param, ty_path, ty_str, ty_u, ty_u16, ty_u32};\n import syntax::ast::{ty_u64, ty_u8, ty_uint, variant, view_item};\n import syntax::ast::{view_item_export, view_item_import, view_item_use};\n import syntax::ast::{view_path_glob, view_path_list, view_path_simple};\n-import syntax::ast::{visibility};\n+import syntax::ast::{visibility, anonymous, named};\n import syntax::ast_util::{def_id_of_def, dummy_sp, local_def, new_def_hash};\n import syntax::ast_util::{path_to_ident, walk_pat, trait_method_to_ty_method};\n import syntax::attr::{attr_metas, contains_name};\n@@ -866,19 +866,25 @@ struct Resolver {\n \n                 visit_mod(module_, sp, item.id, new_parent, visitor);\n             }\n-            item_foreign_mod(*) => {\n-              let (name_bindings, new_parent) = self.add_child(atom, parent,\n-                                                           ~[ModuleNS], sp);\n+            item_foreign_mod(fm) => {\n+              let new_parent = match fm.sort {\n+                named => {\n+                  let (name_bindings, new_parent) = self.add_child(atom,\n+                     parent, ~[ModuleNS], sp);\n \n-                let parent_link = self.get_parent_link(new_parent, atom);\n-                let def_id = { crate: 0, node: item.id };\n-                (*name_bindings).define_module(parent_link, Some(def_id),\n-                                               sp);\n+                  let parent_link = self.get_parent_link(new_parent, atom);\n+                  let def_id = { crate: 0, node: item.id };\n+                  (*name_bindings).define_module(parent_link, Some(def_id),\n+                                                 sp);\n \n-                let new_parent =\n-                    ModuleReducedGraphParent((*name_bindings).get_module());\n+                  ModuleReducedGraphParent((*name_bindings).get_module())\n+                }\n+                // For anon foreign mods, the contents just go in the\n+                // current scope\n+                anonymous => parent\n+              };\n \n-                visit_item(item, new_parent, visitor);\n+              visit_item(item, new_parent, visitor);\n             }\n \n             // These items live in the value namespace."}, {"sha": "168a3ccc59b254eaa7e26784bed6617fde2ccb6e", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=cb8ecd79849160d8cff2eff8b070efd7f9a3b9a7", "patch": "@@ -0,0 +1,9 @@\n+#[abi = \"cdecl\"]\n+#[link_name = \"rustrt\"]\n+extern mod {\n+  fn last_os_error() -> ~str;\n+}\n+\n+fn main() {\n+  last_os_error();\n+}\n\\ No newline at end of file"}]}