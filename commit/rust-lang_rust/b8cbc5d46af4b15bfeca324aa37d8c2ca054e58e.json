{"sha": "b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2JjNWQ0NmFmNGIxNWJmZWNhMzI0YWEzN2Q4YzJjYTA1NGU1OGU=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-27T14:38:17Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-03-27T14:38:17Z"}, "message": "Addressed requested changes for PR #40838\n\n* Fixed spelling ToSocketAddr -> ToSocketAddrs in module docs\n  (which also fixes a link)\n* Added missing \"when\" before \"interacting\" in module docs\n* Changed SocketAddr's top-level docs to explicitly state what socket\n  addresses consist of, making them more consistent with SocketAddrV4's\n  and SocketAddrV6's docs\n* Changed \"in C\" -> \"in C's `netinet/in.h`\"\n* Changed wording in is_ipv4/is_ipv6 methods to \", `false` otherwise\"\n* Add missing closing ` ``` ` in Ipv6Addr's examples\n* Removed \"Errors\" section in ToSocketAddrs' to_socket_addrs method as it\n  was rather redundant", "tree": {"sha": "14caf1e7736195735b9b6d82f0c04e62e4fab515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14caf1e7736195735b9b6d82f0c04e62e4fab515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "html_url": "https://github.com/rust-lang/rust/commit/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2601fd358769cbecae479e8d32521f6e5d5c633", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2601fd358769cbecae479e8d32521f6e5d5c633", "html_url": "https://github.com/rust-lang/rust/commit/c2601fd358769cbecae479e8d32521f6e5d5c633"}], "stats": {"total": 43, "additions": 17, "deletions": 26}, "files": [{"sha": "36c06dc0b58d057d8a0f6df048b48e8837ebfafd", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "patch": "@@ -22,9 +22,11 @@ use slice;\n \n /// An internet socket address, either IPv4 or IPv6.\n ///\n-/// This enum can contain either an [`SocketAddrV4`] or an [`SocketAddrV6`]. see their\n-/// respective documentation for more details.\n+/// Internet socket addresses consist of an [IP address], a 16-bit port number, as well\n+/// as possibly some version-dependent additional information. See [`SocketAddrV4`]'s and\n+/// [`SocketAddrV6`]'s respective documentation for more details.\n ///\n+/// [IP address]: ../../std/net/enum.IpAddr.html\n /// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n /// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n ///\n@@ -202,13 +204,12 @@ impl SocketAddr {\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n-    /// [IPv4 address] and [`false`] if it's an [IPv6 address].\n+    /// [IPv4 address], and [`false`] otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n     /// [IP address]: ../../std/net/enum.IpAddr.html\n     /// [IPv4 address]: ../../std/net/enum.IpAddr.html#variant.V4\n-    /// [IPv6 address]: ../../std/net/enum.IpAddr.html#variant.V6\n     ///\n     /// # Examples\n     ///\n@@ -230,12 +231,11 @@ impl SocketAddr {\n     }\n \n     /// Returns [`true`] if the [IP address] in this `SocketAddr` is an\n-    /// [IPv6 address] and [`false`] if it's an [IPv4 address].\n+    /// [IPv6 address], and [`false`] otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n     /// [IP address]: ../../std/net/enum.IpAddr.html\n-    /// [IPv4 address]: ../../std/net/enum.IpAddr.html#variant.V4\n     /// [IPv6 address]: ../../std/net/enum.IpAddr.html#variant.V6\n     ///\n     /// # Examples\n@@ -446,10 +446,10 @@ impl SocketAddrV6 {\n \n     /// Returns the flow information associated with this address.\n     ///\n-    /// This information corresponds to the `sin6_flowinfo` field in C, as specified in\n-    /// [IETF RFC 2553, Section 3.3]. It combines information about the flow label and\n-    /// the traffic class as specified in [IETF RFC 2460], respectively [Section 6] and\n-    /// [Section 7].\n+    /// This information corresponds to the `sin6_flowinfo` field in C's `netinet/in.h`,\n+    /// as specified in [IETF RFC 2553, Section 3.3].\n+    /// It combines information about the flow label and the traffic class as specified\n+    /// in [IETF RFC 2460], respectively [Section 6] and [Section 7].\n     ///\n     /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n     /// [IETF RFC 2460]: https://tools.ietf.org/html/rfc2460\n@@ -491,8 +491,8 @@ impl SocketAddrV6 {\n \n     /// Returns the scope ID associated with this address.\n     ///\n-    /// This information corresponds to the `sin6_scope_id` field in C, as specified in\n-    /// [IETF RFC 2553, Section 3.3].\n+    /// This information corresponds to the `sin6_scope_id` field in C's `netinet/in.h`,\n+    /// as specified in [IETF RFC 2553, Section 3.3].\n     ///\n     /// [IETF RFC 2553, Section 3.3]: https://tools.ietf.org/html/rfc2553#section-3.3\n     ///\n@@ -743,12 +743,6 @@ pub trait ToSocketAddrs {\n     ///\n     /// Note that this function may block the current thread while resolution is\n     /// performed.\n-    ///\n-    /// # Errors\n-    ///\n-    /// Any errors encountered during resolution will be returned as an [`Err`].\n-    ///\n-    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn to_socket_addrs(&self) -> io::Result<Self::Iter>;\n }"}, {"sha": "c46fe4a58c7e246f919c74ec28afb9b679f63948", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "patch": "@@ -114,6 +114,7 @@ pub struct Ipv4Addr {\n /// let localhost = Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 1);\n /// assert_eq!(\"::1\".parse(), Ok(localhost));\n /// assert_eq!(localhost.is_loopback(), true);\n+/// ```\n #[derive(Copy)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Ipv6Addr {\n@@ -266,13 +267,11 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns [`true`] if this address is an [IPv4 address] and [`false`] if it's an\n-    /// [IPv6 address].\n+    /// Returns [`true`] if this address is an [IPv4 address], and [`false`] otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n     /// [IPv4 address]: #variant.V4\n-    /// [IPv6 address]: #variant.V6\n     ///\n     /// # Examples\n     ///\n@@ -293,12 +292,10 @@ impl IpAddr {\n         }\n     }\n \n-    /// Returns [`true`] if this address is an [IPv6 address] and [`false`] if it's an\n-    /// [IPv4 address].\n+    /// Returns [`true`] if this address is an [IPv6 address], and [`false`] otherwise.\n     ///\n     /// [`true`]: ../../std/primitive.bool.html\n     /// [`false`]: ../../std/primitive.bool.html\n-    /// [IPv4 address]: #variant.V4\n     /// [IPv6 address]: #variant.V6\n     ///\n     /// # Examples"}, {"sha": "9fcb93e2032b3ce40489f2cb6d4be9cd103cdb24", "filename": "src/libstd/net/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e/src%2Flibstd%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fmod.rs?ref=b8cbc5d46af4b15bfeca324aa37d8c2ca054e58e", "patch": "@@ -21,7 +21,7 @@\n //!   [`Ipv6Addr`] are respectively IPv4 and IPv6 addresses\n //! * [`SocketAddr`] represents socket addresses of either IPv4 or IPv6; [`SocketAddrV4`]\n //!   and [`SocketAddrV6`] are respectively IPv4 and IPv6 socket addresses\n-//! * [`ToSocketAddr`] is a trait that used for generic address resolution interacting\n+//! * [`ToSocketAddrs`] is a trait that used for generic address resolution when interacting\n //!   with networking objects like [`TcpListener`], [`TcpStream`] or [`UdpSocket`]\n //! * Other types are return or parameter types for various methods in this module\n //!\n@@ -33,7 +33,7 @@\n //! [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n //! [`TcpListener`]: ../../std/net/struct.TcpListener.html\n //! [`TcpStream`]: ../../std/net/struct.TcpStream.html\n-//! [`ToSocketAddr`]: ../../std/net/trait.ToSocketAddr.html\n+//! [`ToSocketAddrs`]: ../../std/net/trait.ToSocketAddrs.html\n //! [`UdpSocket`]: ../../std/net/struct.UdpSocket.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}