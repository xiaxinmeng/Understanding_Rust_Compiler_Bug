{"sha": "4a52ff078623137ac451ff9ed0bfa145183bfa56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNTJmZjA3ODYyMzEzN2FjNDUxZmY5ZWQwYmZhMTQ1MTgzYmZhNTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-12T05:31:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-12T05:31:39Z"}, "message": "auto merge of #7072 : thestinger/rust/ptr, r=catamorphism\n\nI don't think this will even show up in the documentation right now.... but it should still be correct :).", "tree": {"sha": "651de296522b8ee1a551b7b0d8e95561b1500cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/651de296522b8ee1a551b7b0d8e95561b1500cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a52ff078623137ac451ff9ed0bfa145183bfa56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a52ff078623137ac451ff9ed0bfa145183bfa56", "html_url": "https://github.com/rust-lang/rust/commit/4a52ff078623137ac451ff9ed0bfa145183bfa56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a52ff078623137ac451ff9ed0bfa145183bfa56/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc80652e4a627378a36b50fab9e72349129cb56a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc80652e4a627378a36b50fab9e72349129cb56a", "html_url": "https://github.com/rust-lang/rust/commit/cc80652e4a627378a36b50fab9e72349129cb56a"}, {"sha": "fbae011ad17fb4986a861c5358a5a274892397dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbae011ad17fb4986a861c5358a5a274892397dd", "html_url": "https://github.com/rust-lang/rust/commit/fbae011ad17fb4986a861c5358a5a274892397dd"}], "stats": {"total": 42, "additions": 29, "deletions": 13}, "files": [{"sha": "cd5a3182f6b87ad494d6bd7633d27141401c5d31", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/4a52ff078623137ac451ff9ed0bfa145183bfa56/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a52ff078623137ac451ff9ed0bfa145183bfa56/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=4a52ff078623137ac451ff9ed0bfa145183bfa56", "patch": "@@ -69,7 +69,7 @@ pub fn is_null<T>(ptr: *const T) -> bool { ptr == null() }\n pub fn is_not_null<T>(ptr: *const T) -> bool { !is_null(ptr) }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -83,7 +83,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -95,6 +95,12 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     memmove32(dst, src as *T, count as u32);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -104,7 +110,7 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n }\n \n /**\n- * Copies data from one location to another\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n  * and destination may overlap.\n@@ -116,6 +122,12 @@ pub unsafe fn copy_memory<T>(dst: *mut T, src: *const T, count: uint) {\n     memmove64(dst, src as *T, count as u64);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may *not* overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"32\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -125,11 +137,10 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n /**\n- * Copies data from one location to another. This uses memcpy instead of memmove\n- * to take advantage of the knowledge that the memory does not overlap.\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n+ * and destination may *not* overlap.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"32\", not(stage0))]\n@@ -138,6 +149,12 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n     memcpy32(dst, src as *T, count as u32);\n }\n \n+/**\n+ * Copies data from one location to another.\n+ *\n+ * Copies `count` elements (not bytes) from `src` to `dst`. The source\n+ * and destination may *not* overlap.\n+ */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", stage0)]\n pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: uint) {\n@@ -147,11 +164,10 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n /**\n- * Copies data from one location to another. This uses memcpy instead of memmove\n- * to take advantage of the knowledge that the memory does not overlap.\n+ * Copies data from one location to another.\n  *\n  * Copies `count` elements (not bytes) from `src` to `dst`. The source\n- * and destination may overlap.\n+ * and destination may *not* overlap.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", not(stage0))]\n@@ -161,8 +177,8 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n /**\n- * Invokes memset on the specified pointer, setting `count` bytes of memory\n- * starting at `dst` to `c`.\n+ * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n+ * bytes of memory starting at `dst` to `c`.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"32\", not(stage0))]\n@@ -172,8 +188,8 @@ pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n }\n \n /**\n- * Invokes memset on the specified pointer, setting `count` bytes of memory\n- * starting at `dst` to `c`.\n+ * Invokes memset on the specified pointer, setting `count * size_of::<T>()`\n+ * bytes of memory starting at `dst` to `c`.\n  */\n #[inline(always)]\n #[cfg(target_word_size = \"64\", not(stage0))]"}]}