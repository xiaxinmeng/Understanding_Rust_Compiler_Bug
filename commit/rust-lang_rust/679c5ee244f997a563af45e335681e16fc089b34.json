{"sha": "679c5ee244f997a563af45e335681e16fc089b34", "node_id": "C_kwDOAAsO6NoAKDY3OWM1ZWUyNDRmOTk3YTU2M2FmNDVlMzM1NjgxZTE2ZmMwODliMzQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T20:46:30Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-30T20:46:30Z"}, "message": "Optimize `Vec::insert` for the case where `index == len`.\n\nBy skipping the call to `copy` with a zero length. This makes it closer\nto `push`.\n\nI did this recently for `SmallVec`\n(https://github.com/servo/rust-smallvec/pull/282) and it was a big perf win in\none case. Although I don't have a specific use case in mind, it seems\nworth doing it for `Vec` as well.\n\nThings to note:\n- In the `index < len` case, the number of conditions checked is\n  unchanged.\n- In the `index == len` case, the number of conditions checked increases\n  by one, but the more expensive zero-length copy is avoided.\n- In the `index > len` case the code now reserves space for the extra\n  element before panicking. This seems like an unimportant change.", "tree": {"sha": "e101d6317e6f66f03bc70deffbc9ca3a5665b3eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e101d6317e6f66f03bc70deffbc9ca3a5665b3eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679c5ee244f997a563af45e335681e16fc089b34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679c5ee244f997a563af45e335681e16fc089b34", "html_url": "https://github.com/rust-lang/rust/commit/679c5ee244f997a563af45e335681e16fc089b34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679c5ee244f997a563af45e335681e16fc089b34/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddcbba036aee08f0709f98a92a342a278eae5c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddcbba036aee08f0709f98a92a342a278eae5c05", "html_url": "https://github.com/rust-lang/rust/commit/ddcbba036aee08f0709f98a92a342a278eae5c05"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "b2f72d1d32a8dc06386d6b36610d129f3346b7f2", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679c5ee244f997a563af45e335681e16fc089b34/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679c5ee244f997a563af45e335681e16fc089b34/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=679c5ee244f997a563af45e335681e16fc089b34", "patch": "@@ -1379,9 +1379,6 @@ impl<T, A: Allocator> Vec<T, A> {\n         }\n \n         let len = self.len();\n-        if index > len {\n-            assert_failed(index, len);\n-        }\n \n         // space for the new element\n         if len == self.buf.capacity() {\n@@ -1393,9 +1390,15 @@ impl<T, A: Allocator> Vec<T, A> {\n             // The spot to put the new value\n             {\n                 let p = self.as_mut_ptr().add(index);\n-                // Shift everything over to make space. (Duplicating the\n-                // `index`th element into two consecutive places.)\n-                ptr::copy(p, p.offset(1), len - index);\n+                if index < len {\n+                    // Shift everything over to make space. (Duplicating the\n+                    // `index`th element into two consecutive places.)\n+                    ptr::copy(p, p.offset(1), len - index);\n+                } else if index == len {\n+                    // No elements need shifting.\n+                } else {\n+                    assert_failed(index, len);\n+                }\n                 // Write it in, overwriting the first copy of the `index`th\n                 // element.\n                 ptr::write(p, element);"}]}