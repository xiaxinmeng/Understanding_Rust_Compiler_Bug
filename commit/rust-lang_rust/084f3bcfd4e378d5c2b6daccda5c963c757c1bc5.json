{"sha": "084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4NGYzYmNmZDRlMzc4ZDVjMmI2ZGFjY2RhNWM5NjNjNzU3YzFiYzU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-16T23:02:58Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-03-18T12:24:57Z"}, "message": "ast: Document Lit", "tree": {"sha": "de68eb074135b3331abfa1e4f81e2ba5c69939dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de68eb074135b3331abfa1e4f81e2ba5c69939dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "html_url": "https://github.com/rust-lang/rust/commit/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b08d5eee6a1bb3aaf7385c84b255be964caff9d1", "html_url": "https://github.com/rust-lang/rust/commit/b08d5eee6a1bb3aaf7385c84b255be964caff9d1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "a16cd8bfa19f70cadff2b7088d7a999e94ce1b31", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/084f3bcfd4e378d5c2b6daccda5c963c757c1bc5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=084f3bcfd4e378d5c2b6daccda5c963c757c1bc5", "patch": "@@ -678,6 +678,7 @@ pub enum UnOp {\n     UnNeg\n }\n \n+/// A statement\n pub type Stmt = Spanned<Stmt_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n@@ -722,6 +723,7 @@ pub enum LocalSource {\n pub struct Local {\n     pub pat: P<Pat>,\n     pub ty: Option<P<Ty>>,\n+    /// Initializer expression to set the value, if any\n     pub init: Option<P<Expr>>,\n     pub id: NodeId,\n     pub span: Span,\n@@ -768,6 +770,7 @@ pub enum UnsafeSource {\n     UserProvided,\n }\n \n+/// An expression\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct Expr {\n     pub id: NodeId,\n@@ -981,7 +984,6 @@ pub enum KleeneOp {\n /// The RHS of an MBE macro is the only place `SubstNt`s are substituted.\n /// Nothing special happens to misnamed or misplaced `SubstNt`s.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n-#[doc=\"For macro invocations; parsing is delegated to the macro\"]\n pub enum TokenTree {\n     /// A single token\n     TtToken(Span, token::Token),\n@@ -1092,10 +1094,14 @@ pub enum Mac_ {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n pub enum StrStyle {\n+    /// A regular string, like `\"fooo\"`\n     CookedStr,\n+    /// A raw string, like `r##\"foo\"##`\n+    /// The uint is the number of `#` symbols used\n     RawStr(usize)\n }\n \n+/// A literal\n pub type Lit = Spanned<Lit_>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n@@ -1133,13 +1139,21 @@ impl LitIntType {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum Lit_ {\n+    /// A string literal (`\"foo\"`)\n     LitStr(InternedString, StrStyle),\n+    /// A byte string (`b\"foo\"`)\n     LitBinary(Rc<Vec<u8>>),\n+    /// A byte char (`b'f'`)\n     LitByte(u8),\n+    /// A character literal (`'a'`)\n     LitChar(char),\n+    /// An integer liteal (`1u8`)\n     LitInt(u64, LitIntType),\n+    /// A float literal (`1f64` or `1E10f64`)\n     LitFloat(InternedString, FloatTy),\n+    /// A float literal without a suffix (`1.0 or 1.0E10`)\n     LitFloatUnsuffixed(InternedString),\n+    /// A boolean literal\n     LitBool(bool),\n }\n "}]}