{"sha": "6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTM5M2E4ZDE4MWRmZWViYmFiOWNjMWY4YTA4YWY3YTY3NWJlMTQ=", "commit": {"author": {"name": "petr-tik", "email": "petr-tik@users.noreply.github.com", "date": "2020-07-29T21:12:53Z"}, "committer": {"name": "petr-tik", "email": "petr-tik@users.noreply.github.com", "date": "2020-07-29T21:12:53Z"}, "message": "Addressed code review\n\nreplaced match with let-if variable assignment\nremoved the unnecessary semicolon_on_end variable\nconverted all code and expected test variables to raw strings\nand inlined them in asserts", "tree": {"sha": "f25c93c6a03fb862be4dc80d1726aa3cd791022a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f25c93c6a03fb862be4dc80d1726aa3cd791022a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "html_url": "https://github.com/rust-lang/rust/commit/6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea393a8d181dfeebbab9cc1f8a08af7a675be14/comments", "author": {"login": "petr-tik", "id": 14153264, "node_id": "MDQ6VXNlcjE0MTUzMjY0", "avatar_url": "https://avatars.githubusercontent.com/u/14153264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petr-tik", "html_url": "https://github.com/petr-tik", "followers_url": "https://api.github.com/users/petr-tik/followers", "following_url": "https://api.github.com/users/petr-tik/following{/other_user}", "gists_url": "https://api.github.com/users/petr-tik/gists{/gist_id}", "starred_url": "https://api.github.com/users/petr-tik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petr-tik/subscriptions", "organizations_url": "https://api.github.com/users/petr-tik/orgs", "repos_url": "https://api.github.com/users/petr-tik/repos", "events_url": "https://api.github.com/users/petr-tik/events{/privacy}", "received_events_url": "https://api.github.com/users/petr-tik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petr-tik", "id": 14153264, "node_id": "MDQ6VXNlcjE0MTUzMjY0", "avatar_url": "https://avatars.githubusercontent.com/u/14153264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petr-tik", "html_url": "https://github.com/petr-tik", "followers_url": "https://api.github.com/users/petr-tik/followers", "following_url": "https://api.github.com/users/petr-tik/following{/other_user}", "gists_url": "https://api.github.com/users/petr-tik/gists{/gist_id}", "starred_url": "https://api.github.com/users/petr-tik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petr-tik/subscriptions", "organizations_url": "https://api.github.com/users/petr-tik/orgs", "repos_url": "https://api.github.com/users/petr-tik/repos", "events_url": "https://api.github.com/users/petr-tik/events{/privacy}", "received_events_url": "https://api.github.com/users/petr-tik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "html_url": "https://github.com/rust-lang/rust/commit/6ea28c377947b7e26efcb107d0dbbd804ed5e27f"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "9430ce1b5b85a3d6ef1b2027e811f7abc11cd2ce", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 41, "deletions": 27, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/6ea393a8d181dfeebbab9cc1f8a08af7a675be14/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea393a8d181dfeebbab9cc1f8a08af7a675be14/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=6ea393a8d181dfeebbab9cc1f8a08af7a675be14", "patch": "@@ -27,25 +27,26 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    let semicolon_on_end = macro_call.semicolon_token().is_some();\n     let is_leaf = macro_call.syntax().next_sibling().is_none();\n \n-    let macro_end = match semicolon_on_end {\n-        true => macro_call.syntax().text_range().end() - TextSize::of(';'),\n-        false => macro_call.syntax().text_range().end(),\n+    let macro_end = if macro_call.semicolon_token().is_some() {\n+        macro_call.syntax().text_range().end() - TextSize::of(';')\n+    } else {\n+        macro_call.syntax().text_range().end()\n     };\n \n     // macro_range determines what will be deleted and replaced with macro_content\n     let macro_range = TextRange::new(macro_call.syntax().text_range().start(), macro_end);\n     let paste_instead_of_dbg = {\n         let text = macro_call.token_tree()?.syntax().text();\n \n-        // leafines determines if we should include the parenthesis or not\n-        let slice_index: TextRange = match is_leaf {\n+        // leafiness determines if we should include the parenthesis or not\n+        let slice_index: TextRange = if is_leaf {\n             // leaf means - we can extract the contents of the dbg! in text\n-            true => TextRange::new(TextSize::of('('), text.len() - TextSize::of(')')),\n+            TextRange::new(TextSize::of('('), text.len() - TextSize::of(')'))\n+        } else {\n             // not leaf - means we should keep the parens\n-            false => TextRange::new(TextSize::from(0 as u32), text.len()),\n+            TextRange::up_to(text.len())\n         };\n         text.slice(slice_index).to_string()\n     };\n@@ -147,45 +148,58 @@ fn foo(n: usize) {\n         // not quite though\n         // adding a comment at the end of the line makes\n         // the ast::MacroCall to include the semicolon at the end\n-        let code = \"\n-let res = <|>dbg!(1 * 20); // needless comment\n-\";\n-        let expected = \"\n-let res = 1 * 20; // needless comment\n-\";\n-        check_assist(remove_dbg, code, expected);\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(1 * 20); // needless comment\"#,\n+            r#\"let res = 1 * 20; // needless comment\"#,\n+        );\n     }\n \n     #[test]\n     fn test_remove_dbg_keep_expression() {\n-        let code = \"\n-let res = <|>dbg!(a + b).foo();\";\n-        let expected = \"let res = (a + b).foo();\";\n-        check_assist(remove_dbg, code, expected);\n+        check_assist(\n+            remove_dbg,\n+            r#\"let res = <|>dbg!(a + b).foo();\"#,\n+            r#\"let res = (a + b).foo();\"#,\n+        );\n     }\n \n     #[test]\n     fn test_remove_dbg_from_inside_fn() {\n-        let code = \"\n+        check_assist_target(\n+            remove_dbg,\n+            r#\"\n fn square(x: u32) -> u32 {\n     x * x\n }\n \n fn main() {\n     let x = square(dbg<|>!(5 + 10));\n-    println!(\\\"{}\\\", x);\n-}\";\n+    println!(\"{}\", x);\n+}\"#,\n+            \"dbg!(5 + 10)\",\n+        );\n \n-        let expected = \"\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn square(x: u32) -> u32 {\n+    x * x\n+}\n+\n+fn main() {\n+    let x = square(dbg<|>!(5 + 10));\n+    println!(\"{}\", x);\n+}\"#,\n+            r#\"\n fn square(x: u32) -> u32 {\n     x * x\n }\n \n fn main() {\n     let x = square(5 + 10);\n-    println!(\\\"{}\\\", x);\n-}\";\n-        check_assist_target(remove_dbg, code, \"dbg!(5 + 10)\");\n-        check_assist(remove_dbg, code, expected);\n+    println!(\"{}\", x);\n+}\"#,\n+        );\n     }\n }"}]}