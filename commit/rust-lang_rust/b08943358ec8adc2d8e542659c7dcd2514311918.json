{"sha": "b08943358ec8adc2d8e542659c7dcd2514311918", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwODk0MzM1OGVjOGFkYzJkOGU1NDI2NTljN2RjZDI1MTQzMTE5MTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-06T17:36:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T08:34:57Z"}, "message": "Unpack type arguments for QueryStateShard.", "tree": {"sha": "ebb8eb938510811f1acebfb721a189735b3358ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebb8eb938510811f1acebfb721a189735b3358ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b08943358ec8adc2d8e542659c7dcd2514311918", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b08943358ec8adc2d8e542659c7dcd2514311918", "html_url": "https://github.com/rust-lang/rust/commit/b08943358ec8adc2d8e542659c7dcd2514311918", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b08943358ec8adc2d8e542659c7dcd2514311918/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1249032aabe3a0a80c0a852ef803702d7fb70d21", "url": "https://api.github.com/repos/rust-lang/rust/commits/1249032aabe3a0a80c0a852ef803702d7fb70d21", "html_url": "https://github.com/rust-lang/rust/commit/1249032aabe3a0a80c0a852ef803702d7fb70d21"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "b688365b2bb9ad0a85046a7441b1737b1ab497fc", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b08943358ec8adc2d8e542659c7dcd2514311918/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b08943358ec8adc2d8e542659c7dcd2514311918/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=b08943358ec8adc2d8e542659c7dcd2514311918", "patch": "@@ -4,7 +4,7 @@\n \n use crate::dep_graph::{DepNode, DepNodeIndex, SerializedDepNodeIndex};\n use crate::ty::query::caches::QueryCache;\n-use crate::ty::query::config::{QueryAccessors, QueryDescription};\n+use crate::ty::query::config::{QueryAccessors, QueryConfig, QueryDescription};\n use crate::ty::query::job::{QueryInfo, QueryJob, QueryJobId, QueryShardJobId};\n use crate::ty::query::Query;\n use crate::ty::tls;\n@@ -27,25 +27,32 @@ use std::ptr;\n #[cfg(debug_assertions)]\n use std::sync::atomic::{AtomicUsize, Ordering};\n \n-pub(crate) struct QueryStateShard<'tcx, D: QueryAccessors<'tcx> + ?Sized> {\n-    pub(super) cache: <<D as QueryAccessors<'tcx>>::Cache as QueryCache<D::Key, D::Value>>::Sharded,\n-    pub(super) active: FxHashMap<D::Key, QueryResult<'tcx>>,\n+pub(crate) type QueryStateShard<'tcx, Q> = QueryStateShardImpl<\n+    'tcx,\n+    <Q as QueryConfig<'tcx>>::Key,\n+    <<Q as QueryAccessors<'tcx>>::Cache as QueryCache<\n+        <Q as QueryConfig<'tcx>>::Key,\n+        <Q as QueryConfig<'tcx>>::Value,\n+    >>::Sharded,\n+>;\n+\n+pub(crate) struct QueryStateShardImpl<'tcx, K, C> {\n+    pub(super) cache: C,\n+    pub(super) active: FxHashMap<K, QueryResult<'tcx>>,\n \n     /// Used to generate unique ids for active jobs.\n     pub(super) jobs: u32,\n }\n \n-impl<'tcx, Q: QueryAccessors<'tcx>> QueryStateShard<'tcx, Q> {\n-    fn get_cache(\n-        &mut self,\n-    ) -> &mut <<Q as QueryAccessors<'tcx>>::Cache as QueryCache<Q::Key, Q::Value>>::Sharded {\n+impl<'tcx, K, C> QueryStateShardImpl<'tcx, K, C> {\n+    fn get_cache(&mut self) -> &mut C {\n         &mut self.cache\n     }\n }\n \n-impl<'tcx, Q: QueryAccessors<'tcx>> Default for QueryStateShard<'tcx, Q> {\n-    fn default() -> QueryStateShard<'tcx, Q> {\n-        QueryStateShard { cache: Default::default(), active: Default::default(), jobs: 0 }\n+impl<'tcx, K, C: Default> Default for QueryStateShardImpl<'tcx, K, C> {\n+    fn default() -> QueryStateShardImpl<'tcx, K, C> {\n+        QueryStateShardImpl { cache: Default::default(), active: Default::default(), jobs: 0 }\n     }\n }\n \n@@ -122,7 +129,7 @@ pub(super) struct JobOwner<'tcx, Q: QueryDescription<'tcx>> {\n     id: QueryJobId,\n }\n \n-impl<'tcx, Q: QueryDescription<'tcx>> JobOwner<'tcx, Q> {\n+impl<'tcx, Q: QueryDescription<'tcx> + 'tcx> JobOwner<'tcx, Q> {\n     /// Either gets a `JobOwner` corresponding the query, allowing us to\n     /// start executing the query, or returns with the result of the query.\n     /// This function assumes that `try_get_cached` is already called and returned `lookup`.\n@@ -470,7 +477,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    pub(super) fn try_execute_query<Q: QueryDescription<'tcx>>(\n+    pub(super) fn try_execute_query<Q: QueryDescription<'tcx> + 'tcx>(\n         self,\n         span: Span,\n         key: Q::Key,\n@@ -634,7 +641,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     #[inline(always)]\n-    fn force_query_with_job<Q: QueryDescription<'tcx>>(\n+    fn force_query_with_job<Q: QueryDescription<'tcx> + 'tcx>(\n         self,\n         key: Q::Key,\n         job: JobOwner<'tcx, Q>,"}]}