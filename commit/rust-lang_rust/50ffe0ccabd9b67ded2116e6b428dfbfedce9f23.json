{"sha": "50ffe0ccabd9b67ded2116e6b428dfbfedce9f23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZmZlMGNjYWJkOWI2N2RlZDIxMTZlNmI0MjhkZmJmZWRjZTlmMjM=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-04T21:43:48Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2014-08-08T14:39:48Z"}, "message": "Guide: method syntax", "tree": {"sha": "9591c2b9a8b5d89a3fb010a2c36bf97d8ab7438d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9591c2b9a8b5d89a3fb010a2c36bf97d8ab7438d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23", "html_url": "https://github.com/rust-lang/rust/commit/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b1f983584218fb9c2d1274e0361bca89c25e8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b1f983584218fb9c2d1274e0361bca89c25e8a9", "html_url": "https://github.com/rust-lang/rust/commit/3b1f983584218fb9c2d1274e0361bca89c25e8a9"}], "stats": {"total": 88, "additions": 88, "deletions": 0}, "files": [{"sha": "c3dfa93cda36a5bc20a6265150a2cafb9d685df1", "filename": "src/doc/guide.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23/src%2Fdoc%2Fguide.md", "raw_url": "https://github.com/rust-lang/rust/raw/50ffe0ccabd9b67ded2116e6b428dfbfedce9f23/src%2Fdoc%2Fguide.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide.md?ref=50ffe0ccabd9b67ded2116e6b428dfbfedce9f23", "patch": "@@ -3614,6 +3614,94 @@ guide](http://doc.rust-lang.org/guide-pointers.html#rc-and-arc).\n \n # Patterns\n \n+# Method Syntax\n+\n+Functions are great, but if you want to call a bunch of them on some data, it\n+can be awkward. Consider this code:\n+\n+```{rust,ignore}\n+baz(bar(foo(x)));\n+```\n+\n+We would read this left-to right, and so we see 'baz bar foo.' But this isn't the\n+order that the functions would get called in, that's inside-out: 'foo bar baz.'\n+Wouldn't it be nice if we could do this instead?\n+\n+```{rust,ignore}\n+x.foo().bar().baz();\n+```\n+\n+Luckily, as you may have guessed with the leading question, you can! Rust provides\n+the ability to use this **method call syntax** via the `impl` keyword.\n+\n+Here's how it works:\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn area(&self) -> f64 {\n+        std::f64::consts::PI * (self.radius * self.radius)\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle { x: 0.0, y: 0.0, radius: 2.0 };\n+    println!(\"{}\", c.area());\n+}\n+```\n+\n+This will print `12.566371`.\n+\n+We've made a struct that represents a circle. We then write an `impl` block,\n+and inside it, define a method, `area`. Methods take a  special first\n+parameter, `&self`. There are three variants: `self`, `&self`, and `&mut self`.\n+You can think of this first parameter as being the `x` in `x.foo()`. The three\n+variants correspond to the three kinds of thing `x` could be: `self` if it's\n+just a value on the stack, `&self` if it's a reference, and `&mut self` if it's\n+a mutable reference. We should default to using `&self`, as it's the most\n+common.\n+\n+Finally, as you may remember, the value of the area of a circle is `\u03c0*r\u00b2`.\n+Because we took the `&self` parameter to `area`, we can use it just like any\n+other parameter. Because we know it's a `Circle`, we can access the `radius`\n+just like we would with any other struct. An import of \u03c0 and some\n+multiplications later, and we have our area.\n+\n+You can also define methods that do not take a `self` parameter. Here's a\n+pattern that's very common in Rust code:\n+\n+```\n+struct Circle {\n+    x: f64,\n+    y: f64,\n+    radius: f64,\n+}\n+\n+impl Circle {\n+    fn new(x: f64, y: f64, radius: f64) -> Circle {\n+        Circle {\n+            x: x,\n+            y: y,\n+            radius: radius,\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let c = Circle::new(0.0, 0.0, 2.0);\n+}\n+```\n+\n+This **static method** builds a new `Circle` for us. Note that static methods\n+are called with the `Struct::method()` syntax, rather than the `ref.method()`\n+syntax.\n+\n+\n # Closures\n \n So far, we've made lots of functions in Rust. But we've given them all names."}]}