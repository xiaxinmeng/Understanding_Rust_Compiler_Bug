{"sha": "339257397d691dda250348d5c89c761ee740a5dc", "node_id": "C_kwDOAAsO6NoAKDMzOTI1NzM5N2Q2OTFkZGEyNTAzNDhkNWM4OWM3NjFlZTc0MGE1ZGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T19:18:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-19T19:18:00Z"}, "message": "Auto merge of #13439 - Veykril:simplify, r=Veykril\n\nSimplify", "tree": {"sha": "25c6101c4a4a6cbe11f60db7c1b0f77180ddfcdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25c6101c4a4a6cbe11f60db7c1b0f77180ddfcdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/339257397d691dda250348d5c89c761ee740a5dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/339257397d691dda250348d5c89c761ee740a5dc", "html_url": "https://github.com/rust-lang/rust/commit/339257397d691dda250348d5c89c761ee740a5dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/339257397d691dda250348d5c89c761ee740a5dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64", "html_url": "https://github.com/rust-lang/rust/commit/97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64"}, {"sha": "9d3e616f82aecd4ba81ee632483f26169aca1aa3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d3e616f82aecd4ba81ee632483f26169aca1aa3", "html_url": "https://github.com/rust-lang/rust/commit/9d3e616f82aecd4ba81ee632483f26169aca1aa3"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "cf9868740cb03a0d702fd65f517c101839caadd6", "filename": "crates/project-model/Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2FCargo.toml?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -17,7 +17,6 @@ semver = \"1.0.14\"\n serde = { version = \"1.0.137\", features = [\"derive\"] }\n serde_json = \"1.0.86\"\n anyhow = \"1.0.62\"\n-expect-test = \"1.4.0\"\n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n \n cfg = { path = \"../cfg\", version = \"0.0.0\" }\n@@ -26,3 +25,6 @@ toolchain = { path = \"../toolchain\", version = \"0.0.0\" }\n paths = { path = \"../paths\", version = \"0.0.0\" }\n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n profile = { path = \"../profile\", version = \"0.0.0\" }\n+\n+[dev-dependencies]\n+expect-test = \"1.4.0\""}, {"sha": "8d011f22e621a80593112ef92136185850862b42", "filename": "crates/project-model/src/cargo_workspace.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fcargo_workspace.rs?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -283,8 +283,6 @@ impl CargoWorkspace {\n             }\n             CargoFeatures::Selected { features, no_default_features } => {\n                 if *no_default_features {\n-                    // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n-                    // https://github.com/oli-obk/cargo_metadata/issues/79\n                     meta.features(CargoOpt::NoDefaultFeatures);\n                 }\n                 if !features.is_empty() {\n@@ -329,18 +327,21 @@ impl CargoWorkspace {\n         let ws_members = &meta.workspace_members;\n \n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n-        for meta_pkg in &meta.packages {\n+        for meta_pkg in meta.packages {\n             let cargo_metadata::Package {\n-                id,\n-                edition,\n                 name,\n-                manifest_path,\n                 version,\n-                metadata,\n+                id,\n+                source,\n+                targets: meta_targets,\n+                features,\n+                manifest_path,\n                 repository,\n+                edition,\n+                metadata,\n                 ..\n             } = meta_pkg;\n-            let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n+            let meta = from_value::<PackageMetadata>(metadata).unwrap_or_default();\n             let edition = match edition {\n                 cargo_metadata::Edition::E2015 => Edition::Edition2015,\n                 cargo_metadata::Edition::E2018 => Edition::Edition2018,\n@@ -352,35 +353,36 @@ impl CargoWorkspace {\n             };\n             // We treat packages without source as \"local\" packages. That includes all members of\n             // the current workspace, as well as any path dependency outside the workspace.\n-            let is_local = meta_pkg.source.is_none();\n-            let is_member = ws_members.contains(id);\n+            let is_local = source.is_none();\n+            let is_member = ws_members.contains(&id);\n \n             let pkg = packages.alloc(PackageData {\n                 id: id.repr.clone(),\n-                name: name.clone(),\n-                version: version.clone(),\n-                manifest: AbsPathBuf::assert(PathBuf::from(&manifest_path)).try_into().unwrap(),\n+                name,\n+                version,\n+                manifest: AbsPathBuf::assert(manifest_path.into()).try_into().unwrap(),\n                 targets: Vec::new(),\n                 is_local,\n                 is_member,\n                 edition,\n-                repository: repository.clone(),\n+                repository,\n                 dependencies: Vec::new(),\n-                features: meta_pkg.features.clone().into_iter().collect(),\n+                features: features.into_iter().collect(),\n                 active_features: Vec::new(),\n                 metadata: meta.rust_analyzer.unwrap_or_default(),\n             });\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);\n-            for meta_tgt in &meta_pkg.targets {\n-                let is_proc_macro = meta_tgt.kind.as_slice() == [\"proc-macro\"];\n+            for meta_tgt in meta_targets {\n+                let cargo_metadata::Target { name, kind, required_features, src_path, .. } =\n+                    meta_tgt;\n                 let tgt = targets.alloc(TargetData {\n                     package: pkg,\n-                    name: meta_tgt.name.clone(),\n-                    root: AbsPathBuf::assert(PathBuf::from(&meta_tgt.src_path)),\n-                    kind: TargetKind::new(meta_tgt.kind.as_slice()),\n-                    is_proc_macro,\n-                    required_features: meta_tgt.required_features.clone(),\n+                    name,\n+                    root: AbsPathBuf::assert(src_path.into()),\n+                    kind: TargetKind::new(&kind),\n+                    is_proc_macro: &*kind == [\"proc-macro\"],\n+                    required_features,\n                 });\n                 pkg_data.targets.push(tgt);\n             }"}, {"sha": "28e9379c1ae8c13ef3d627ce015a2a88814e9e85", "filename": "crates/project-model/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Flib.rs?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -67,7 +67,7 @@ impl ProjectManifest {\n         if path.file_name().unwrap_or_default() == \"Cargo.toml\" {\n             return Ok(ProjectManifest::CargoToml(path));\n         }\n-        bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display())\n+        bail!(\"project root must point to Cargo.toml or rust-project.json: {}\", path.display());\n     }\n \n     pub fn discover_single(path: &AbsPath) -> Result<ProjectManifest> {\n@@ -78,7 +78,7 @@ impl ProjectManifest {\n         };\n \n         if !candidates.is_empty() {\n-            bail!(\"more than one project\")\n+            bail!(\"more than one project\");\n         }\n         Ok(res)\n     }"}, {"sha": "d4f6940d7ed27f2789ddc1b49e46627d72e6fc62", "filename": "crates/project-model/src/sysroot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fproject-model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fsysroot.rs?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -189,6 +189,7 @@ fn discover_sysroot_src_dir(sysroot_path: &AbsPathBuf) -> Option<AbsPathBuf> {\n \n     get_rust_src(sysroot_path)\n }\n+\n fn discover_sysroot_src_dir_or_add_component(\n     sysroot_path: &AbsPathBuf,\n     current_dir: &AbsPath,"}, {"sha": "660c057e99c5671636e8cd0d5d3a75b2545fe08e", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -645,7 +645,7 @@ impl ast::RecordPatFieldList {\n }\n \n fn get_or_insert_comma_after(syntax: &SyntaxNode) -> SyntaxToken {\n-    let comma = match syntax\n+    match syntax\n         .siblings_with_tokens(Direction::Next)\n         .filter_map(|it| it.into_token())\n         .find(|it| it.kind() == T![,])\n@@ -656,8 +656,7 @@ fn get_or_insert_comma_after(syntax: &SyntaxNode) -> SyntaxToken {\n             ted::insert(Position::after(syntax), &comma);\n             comma\n         }\n-    };\n-    comma\n+    }\n }\n \n impl ast::StmtList {"}, {"sha": "84c66b27e69faa531336463f2a2366409bb468e5", "filename": "crates/syntax/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fsyntax%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/339257397d691dda250348d5c89c761ee740a5dc/crates%2Fsyntax%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Flib.rs?ref=339257397d691dda250348d5c89c761ee740a5dc", "patch": "@@ -92,7 +92,7 @@ impl<T> Parse<T> {\n         SyntaxNode::new_root(self.green.clone())\n     }\n     pub fn errors(&self) -> &[SyntaxError] {\n-        &*self.errors\n+        &self.errors\n     }\n }\n "}]}