{"sha": "13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZGIzY2MxZThkMmZkNGI4ZTdjNzRkOTEwMDIyNzRkN2I2MjgwMWI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-05-13T21:22:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2020-07-17T21:32:18Z"}, "message": "std: Switch from libbacktrace to gimli\n\nThis commit is a proof-of-concept for switching the standard library's\nbacktrace symbolication mechanism on most platforms from libbacktrace to\ngimli. The standard library's support for `RUST_BACKTRACE=1` requires\nin-process parsing of object files and DWARF debug information to\ninterpret it and print the filename/line number of stack frames as part\nof a backtrace.\n\nHistorically this support in the standard library has come from a\nlibrary called \"libbacktrace\". The libbacktrace library seems to have\nbeen extracted from gcc at some point and is written in C. We've had a\nlot of issues with libbacktrace over time, unfortunately, though. The\nlibrary does not appear to be actively maintained since we've had\npatches sit for months-to-years without comments. We have discovered a\ngood number of soundness issues with the library itself, both when\nparsing valid DWARF as well as invalid DWARF. This is enough of an issue\nthat the libs team has previously decided that we cannot feed untrusted\ninputs to libbacktrace. This also doesn't take into account the\nportability of libbacktrace which has been difficult to manage and\nmaintain over time. While possible there are lots of exceptions and it's\nthe main C dependency of the standard library right now.\n\nFor years it's been the desire to switch over to a Rust-based solution\nfor symbolicating backtraces. It's been assumed that we'll be using the\nGimli family of crates for this purpose, which are targeted at safely\nand efficiently parsing DWARF debug information. I've been working\nrecently to shore up the Gimli support in the `backtrace` crate. As of a\nfew weeks ago the `backtrace` crate, by default, uses Gimli when loaded\nfrom crates.io. This transition has gone well enough that I figured it\nwas time to start talking seriously about this change to the standard\nlibrary.\n\nThis commit is a preview of what's probably the best way to integrate\nthe `backtrace` crate into the standard library with the Gimli feature\nturned on. While today it's used as a crates.io dependency, this commit\nswitches the `backtrace` crate to a submodule of this repository which\nwill need to be updated manually. This is not done lightly, but is\nthought to be the best solution. The primary reason for this is that the\n`backtrace` crate needs to do some pretty nontrivial filesystem\ninteractions to locate debug information. Working without `std::fs` is\nnot an option, and while it might be possible to do some sort of\ntrait-based solution when prototyped it was found to be too unergonomic.\nUsing a submodule allows the `backtrace` crate to build as a submodule\nof the `std` crate itself, enabling it to use `std::fs` and such.\n\nOtherwise this adds new dependencies to the standard library. This step\nrequires extra attention because this means that these crates are now\ngoing to be included with all Rust programs by default. It's important\nto note, however, that we're already shipping libbacktrace with all Rust\nprograms by default and it has a bunch of C code implementing all of\nthis internally anyway, so we're basically already switching\nalready-shipping functionality to Rust from C.\n\n* `object` - this crate is used to parse object file headers and\n  contents. Very low-level support is used from this crate and almost\n  all of it is disabled. Largely we're just using struct definitions as\n  well as convenience methods internally to read bytes and such.\n\n* `addr2line` - this is the main meat of the implementation for\n  symbolication. This crate depends on `gimli` for DWARF parsing and\n  then provides interfaces needed by the `backtrace` crate to turn an\n  address into a filename / line number. This crate is actually pretty\n  small (fits in a single file almost!) and mirrors most of what\n  `dwarf.c` does for libbacktrace.\n\n* `miniz_oxide` - the libbacktrace crate transparently handles\n  compressed debug information which is compressed with zlib. This crate\n  is used to decompress compressed debug sections.\n\n* `gimli` - not actually used directly, but a dependency of `addr2line`.\n\n* `adler32`- not used directly either, but a dependency of\n  `miniz_oxide`.\n\nThe goal of this change is to improve the safety of backtrace\nsymbolication in the standard library, especially in the face of\npossibly malformed DWARF debug information. Even to this day we're still\nseeing segfaults in libbacktrace which could possibly become security\nvulnerabilities. This change should almost entirely eliminate this\npossibility whilc also paving the way forward to adding more features\nlike split debug information.\n\nSome references for those interested are:\n\n* Original addition of libbacktrace - #12602\n* OOM with libbacktrace - #24231\n* Backtrace failure due to use of uninitialized value - #28447\n* Possibility to feed untrusted data to libbacktrace - #21889\n* Soundness fix for libbacktrace - #33729\n* Crash in libbacktrace - #39468\n* Support for macOS, never merged - ianlancetaylor/libbacktrace#2\n* Performance issues with libbacktrace - #29293, #37477\n* Update procedure is quite complicated due to how many patches we\n  need to carry - #50955\n* Libbacktrace doesn't work on MinGW with dynamic libs - #71060\n* Segfault in libbacktrace on macOS - #71397\n\nSwitching to Rust will not make us immune to all of these issues. The\ncrashes are expected to go away, but correctness and performance may\nstill have bugs arise. The gimli and `backtrace` crates, however, are\nactively maintained unlike libbacktrace, so this should enable us to at\nleast efficiently apply fixes as situations come up.", "tree": {"sha": "1af179ac1abcca837ff7a4c6b8851453387a9591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1af179ac1abcca837ff7a4c6b8851453387a9591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "html_url": "https://github.com/rust-lang/rust/commit/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "html_url": "https://github.com/rust-lang/rust/commit/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50"}], "stats": {"total": 163, "additions": 108, "deletions": 55}, "files": [{"sha": "b914b7d6fa12961cb20f627f0a2133715e86c481", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -44,3 +44,6 @@\n [submodule \"src/tools/rust-analyzer\"]\n \tpath = src/tools/rust-analyzer\n \turl = https://github.com/rust-analyzer/rust-analyzer.git\n+[submodule \"src/backtrace\"]\n+\tpath = src/backtrace\n+\turl = https://github.com/rust-lang/backtrace-rs.git"}, {"sha": "6f27619258adf163a9b6230c43d3f076f61a232a", "filename": "Cargo.lock", "status": "modified", "additions": 59, "deletions": 29, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -1,10 +1,26 @@\n # This file is automatically @generated by Cargo.\n # It is not intended for manual editing.\n [[package]]\n-name = \"adler32\"\n-version = \"1.0.3\"\n+name = \"addr2line\"\n+version = \"0.13.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7e522997b529f05601e05166c07ed17789691f562762c7f3b987263d2dedee5c\"\n+checksum = \"1b6a2d3371669ab3ca9797670853d61402b03d0b4b9ebf33d677dfa720203072\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"gimli\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"0.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ccc9a9dd069569f212bc4330af9f17c4afb5e8ce185e83dbb14f1349dda18b10\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-core\",\n+]\n \n [[package]]\n name = \"aho-corasick\"\n@@ -125,28 +141,14 @@ checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.46\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b1e692897359247cc6bb902933361652380af0f1b7651ae5c5013407f30e109e\"\n+version = \"0.3.50\"\n dependencies = [\n- \"backtrace-sys\",\n+ \"addr2line\",\n  \"cfg-if\",\n- \"compiler_builtins\",\n  \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n  \"rustc-demangle\",\n- \"rustc-std-workspace-core\",\n-]\n-\n-[[package]]\n-name = \"backtrace-sys\"\n-version = \"0.1.37\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18fbebbe1c9d1f383a9cc7e8ccdb471b91c8d024ee9c2ca5b5346121fe8b4399\"\n-dependencies = [\n- \"cc\",\n- \"compiler_builtins\",\n- \"libc\",\n- \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n@@ -688,9 +690,9 @@ dependencies = [\n \n [[package]]\n name = \"crc32fast\"\n-version = \"1.1.2\"\n+version = \"1.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e91d5240c6975ef33aeb5f148f35275c25eda8e8a5f95abe421978b05b8bf192\"\n+checksum = \"ba125de2af0df55319f41944744ad91c71113bf74a4646efff39afe1f6842db1\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -1023,9 +1025,9 @@ checksum = \"37ab347416e802de484e4d03c7316c48f1ecb56574dfd4a46a80f173ce1de04d\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.12\"\n+version = \"1.0.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ad3c5233c9a940c8719031b423d7e6c16af66e031cb0420b0896f5245bf181d3\"\n+checksum = \"68c90b0fc46cf89d227cc78b40e494ff81287a92dd07631e5af0d06fe3cf885e\"\n dependencies = [\n  \"cfg-if\",\n  \"crc32fast\",\n@@ -1159,6 +1161,17 @@ dependencies = [\n  \"wasi\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.22.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"aaf91faf136cb47367fa430cd46e37a788775e7fa104f8b4bcb3861dc389b724\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"git2\"\n version = \"0.13.5\"\n@@ -1819,11 +1832,14 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.3.5\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f3f74f726ae935c3f514300cc6773a0c9492abc5e972d42ba0c0ebb88757625\"\n+checksum = \"be0f75932c1f6cfae3c04000e40114adf955636e19040f9c0a2c380702aa1c7f\"\n dependencies = [\n- \"adler32\",\n+ \"adler\",\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n ]\n \n [[package]]\n@@ -1955,6 +1971,17 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.20.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ab52be62400ca80aa00285d25253d7f7c437b7375c4de678f5405d3afe82ca5\"\n+dependencies = [\n+ \"compiler_builtins\",\n+ \"rustc-std-workspace-alloc\",\n+ \"rustc-std-workspace-core\",\n+]\n+\n [[package]]\n name = \"once_cell\"\n version = \"1.1.0\"\n@@ -4332,8 +4359,8 @@ dependencies = [\n name = \"std\"\n version = \"0.0.0\"\n dependencies = [\n+ \"addr2line\",\n  \"alloc\",\n- \"backtrace\",\n  \"cfg-if\",\n  \"compiler_builtins\",\n  \"core\",\n@@ -4342,10 +4369,13 @@ dependencies = [\n  \"hashbrown\",\n  \"hermit-abi\",\n  \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n  \"panic_abort\",\n  \"panic_unwind\",\n  \"profiler_builtins\",\n  \"rand 0.7.3\",\n+ \"rustc-demangle\",\n  \"unwind\",\n  \"wasi\",\n ]"}, {"sha": "4270cabec15c772acf81be57b3e95d3e2e57114f", "filename": "Cargo.toml", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -79,5 +79,11 @@ rustc-std-workspace-core = { path = 'src/tools/rustc-std-workspace-core' }\n rustc-std-workspace-alloc = { path = 'src/tools/rustc-std-workspace-alloc' }\n rustc-std-workspace-std = { path = 'src/tools/rustc-std-workspace-std' }\n \n+# This crate's integration with libstd is a bit wonky, so we use a submodule\n+# instead of a crates.io dependency. Make sure everything else in the repo is\n+# also using the submodule, however, so we can avoid duplicate copies of the\n+# source code for this crate.\n+backtrace = { path = \"src/backtrace\" }\n+\n [patch.\"https://github.com/rust-lang/rust-clippy\"]\n clippy_lints = { path = \"src/tools/clippy/clippy_lints\" }"}, {"sha": "b16aecc463c9191c591d0c135ab50e975afc1000", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -30,6 +30,7 @@ ignore = [\n     \"src/tools/rust-analyzer\",\n     \"src/tools/rust-installer\",\n     \"src/tools/rustfmt\",\n+    \"src/backtrace\",\n \n     # We do not format this file as it is externally sourced and auto-generated.\n     \"src/libstd/sys/cloudabi/abi/cloudabi.rs\","}, {"sha": "8f89434446f72f27f8145d8bbc1a302c6ef29d1e", "filename": "src/backtrace", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbacktrace?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -0,0 +1 @@\n+Subproject commit 8f89434446f72f27f8145d8bbc1a302c6ef29d1e"}, {"sha": "136db6d5d3239d55211c9cf27a669b033d2d5428", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -25,11 +25,15 @@ profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n unwind = { path = \"../libunwind\" }\n hashbrown = { version = \"0.6.2\", default-features = false, features = ['rustc-dep-of-std'] }\n \n-[dependencies.backtrace_rs]\n-package = \"backtrace\"\n-version = \"0.3.46\"\n-default-features = false # without the libstd `backtrace` feature, stub out everything\n-features = [ \"rustc-dep-of-std\" ] # enable build support for integrating into libstd\n+# Dependencies of the `backtrace` crate\n+addr2line = { version = \"0.13.0\", optional = true, default-features = false }\n+rustc-demangle = { version = \"0.1.4\", optional = true }\n+miniz_oxide = { version = \"0.4.0\", optional = true, default-features = false }\n+[dependencies.object]\n+version = \"0.20\"\n+optional = true\n+default-features = false\n+features = ['read_core', 'elf', 'macho', 'pe']\n \n [dev-dependencies]\n rand = \"0.7\"\n@@ -48,11 +52,13 @@ wasi = { version = \"0.9.0\", features = ['rustc-dep-of-std'], default-features =\n \n [features]\n backtrace = [\n-  \"backtrace_rs/dbghelp\",          # backtrace/symbolize on MSVC\n-  \"backtrace_rs/libbacktrace\",     # symbolize on most platforms\n-  \"backtrace_rs/libunwind\",        # backtrace on most platforms\n-  \"backtrace_rs/dladdr\",           # symbolize on platforms w/o libbacktrace\n+  \"gimli-symbolize\",\n+  'addr2line/rustc-dep-of-std',\n+  'object/rustc-dep-of-std',\n+  'rustc-demangle/rustc-dep-of-std',\n+  'miniz_oxide/rustc-dep-of-std',\n ]\n+gimli-symbolize = []\n \n panic-unwind = [\"panic_unwind\"]\n profiler = [\"profiler_builtins\"]"}, {"sha": "e65775c1ced67909ad9d5e0954f946e78ffd55b5", "filename": "src/libstd/backtrace.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbacktrace.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -91,15 +91,14 @@\n // `Backtrace`, but that's a relatively small price to pay relative to capturing\n // a backtrace or actually symbolizing it.\n \n+use crate::backtrace_rs::{self, BytesOrWideString};\n use crate::env;\n use crate::ffi::c_void;\n use crate::fmt;\n use crate::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n use crate::sync::Mutex;\n use crate::sys_common::backtrace::{lock, output_filename};\n use crate::vec::Vec;\n-use backtrace::BytesOrWideString;\n-use backtrace_rs as backtrace;\n \n /// A captured OS thread stack backtrace.\n ///\n@@ -150,7 +149,7 @@ struct BacktraceFrame {\n }\n \n enum RawFrame {\n-    Actual(backtrace::Frame),\n+    Actual(backtrace_rs::Frame),\n     #[cfg(test)]\n     Fake,\n }\n@@ -197,7 +196,7 @@ impl fmt::Debug for BacktraceSymbol {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(fmt, \"{{ \")?;\n \n-        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace::SymbolName::new(b)) {\n+        if let Some(fn_name) = self.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)) {\n             write!(fmt, \"fn: \\\"{:#}\\\"\", fn_name)?;\n         } else {\n             write!(fmt, \"fn: <unknown>\")?;\n@@ -223,7 +222,7 @@ impl fmt::Debug for BytesOrWide {\n                 BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                 BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n             },\n-            backtrace::PrintFmt::Short,\n+            backtrace_rs::PrintFmt::Short,\n             crate::env::current_dir().as_ref().ok(),\n         )\n     }\n@@ -299,7 +298,7 @@ impl Backtrace {\n         let mut frames = Vec::new();\n         let mut actual_start = None;\n         unsafe {\n-            backtrace::trace_unsynchronized(|frame| {\n+            backtrace_rs::trace_unsynchronized(|frame| {\n                 frames.push(BacktraceFrame {\n                     frame: RawFrame::Actual(frame.clone()),\n                     symbols: Vec::new(),\n@@ -350,9 +349,9 @@ impl fmt::Display for Backtrace {\n \n         let full = fmt.alternate();\n         let (frames, style) = if full {\n-            (&capture.frames[..], backtrace::PrintFmt::Full)\n+            (&capture.frames[..], backtrace_rs::PrintFmt::Full)\n         } else {\n-            (&capture.frames[capture.actual_start..], backtrace::PrintFmt::Short)\n+            (&capture.frames[capture.actual_start..], backtrace_rs::PrintFmt::Short)\n         };\n \n         // When printing paths we try to strip the cwd if it exists, otherwise\n@@ -364,7 +363,7 @@ impl fmt::Display for Backtrace {\n             output_filename(fmt, path, style, cwd.as_ref().ok())\n         };\n \n-        let mut f = backtrace::BacktraceFmt::new(fmt, style, &mut print_path);\n+        let mut f = backtrace_rs::BacktraceFmt::new(fmt, style, &mut print_path);\n         f.add_context()?;\n         for frame in frames {\n             let mut f = f.frame();\n@@ -374,7 +373,7 @@ impl fmt::Display for Backtrace {\n                 for symbol in frame.symbols.iter() {\n                     f.print_raw(\n                         frame.frame.ip(),\n-                        symbol.name.as_ref().map(|b| backtrace::SymbolName::new(b)),\n+                        symbol.name.as_ref().map(|b| backtrace_rs::SymbolName::new(b)),\n                         symbol.filename.as_ref().map(|b| match b {\n                             BytesOrWide::Bytes(w) => BytesOrWideString::Bytes(w),\n                             BytesOrWide::Wide(w) => BytesOrWideString::Wide(w),\n@@ -409,7 +408,7 @@ impl Capture {\n                 RawFrame::Fake => unimplemented!(),\n             };\n             unsafe {\n-                backtrace::resolve_frame_unsynchronized(frame, |symbol| {\n+                backtrace_rs::resolve_frame_unsynchronized(frame, |symbol| {\n                     symbols.push(BacktraceSymbol {\n                         name: symbol.name().map(|m| m.as_bytes().to_vec()),\n                         filename: symbol.filename_raw().map(|b| match b {"}, {"sha": "58fb6fda19aabed41aafde057139836be1c69c2e", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -87,4 +87,5 @@ fn main() {\n         println!(\"cargo:rustc-cfg=feature=\\\"restricted-std\\\"\");\n     }\n     println!(\"cargo:rustc-env=STD_ENV_ARCH={}\", env::var(\"CARGO_CFG_TARGET_ARCH\").unwrap());\n+    println!(\"cargo:rustc-cfg=backtrace_in_libstd\");\n }"}, {"sha": "090dbe3d39ecc93bfa45adccab9d19a1084dd9b9", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -508,6 +508,10 @@ mod panicking;\n // compiler\n pub mod rt;\n \n+#[path = \"../backtrace/src/lib.rs\"]\n+#[allow(dead_code, unused_attributes)]\n+mod backtrace_rs;\n+\n // Pull in the `std_detect` crate directly into libstd. The contents of\n // `std_detect` are in a different repository: rust-lang/stdarch.\n //"}, {"sha": "ab2a60103069d6571179c20c565f5e64800d6f0b", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -171,7 +171,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n     // If this is a double panic, make sure that we print a backtrace\n     // for this panic. Otherwise only print it if logging is enabled.\n     let backtrace_env = if panic_count::get() >= 2 {\n-        RustBacktrace::Print(backtrace_rs::PrintFmt::Full)\n+        RustBacktrace::Print(crate::backtrace_rs::PrintFmt::Full)\n     } else {\n         backtrace::rust_backtrace_env()\n     };"}, {"sha": "d386a656e4ffdc896aa93fdceb53060d1c75a71c", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -1,3 +1,4 @@\n+use crate::backtrace_rs::{self, BacktraceFmt, BytesOrWideString, PrintFmt};\n use crate::borrow::Cow;\n /// Common code for printing the backtrace in the same way across the different\n /// supported platforms.\n@@ -9,8 +10,6 @@ use crate::path::{self, Path, PathBuf};\n use crate::sync::atomic::{self, Ordering};\n use crate::sys::mutex::Mutex;\n \n-use backtrace_rs::{BacktraceFmt, BytesOrWideString, PrintFmt};\n-\n /// Max number of frames to print.\n const MAX_NB_FRAMES: usize = 100;\n "}, {"sha": "eeea47b7aa377d5b00edfe5fd94989f56e50036a", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -17,6 +17,7 @@ const LICENSES: &[&str] = &[\n     \"MIT\",\n     \"Unlicense/MIT\",\n     \"Unlicense OR MIT\",\n+    \"0BSD OR MIT OR Apache-2.0\", // adler license\n ];\n \n /// These are exceptions to Rust's permissive licensing policy, and\n@@ -36,7 +37,6 @@ const EXCEPTIONS: &[(&str, &str)] = &[\n     (\"ryu\", \"Apache-2.0 OR BSL-1.0\"),       // rls/cargo/... (because of serde)\n     (\"bytesize\", \"Apache-2.0\"),             // cargo\n     (\"im-rc\", \"MPL-2.0+\"),                  // cargo\n-    (\"adler32\", \"BSD-3-Clause AND Zlib\"),   // cargo dep that isn't used\n     (\"constant_time_eq\", \"CC0-1.0\"),        // rustfmt\n     (\"sized-chunks\", \"MPL-2.0+\"),           // cargo via im-rc\n     (\"bitmaps\", \"MPL-2.0+\"),                // cargo via im-rc\n@@ -57,15 +57,15 @@ const RESTRICTED_DEPENDENCY_CRATES: &[&str] = &[\"rustc_middle\", \"rustc_codegen_l\n /// This list is here to provide a speed-bump to adding a new dependency to\n /// rustc. Please check with the compiler team before adding an entry.\n const PERMITTED_DEPENDENCIES: &[&str] = &[\n-    \"adler32\",\n+    \"addr2line\",\n+    \"adler\",\n     \"aho-corasick\",\n     \"annotate-snippets\",\n     \"ansi_term\",\n     \"arrayvec\",\n     \"atty\",\n     \"autocfg\",\n     \"backtrace\",\n-    \"backtrace-sys\",\n     \"bitflags\",\n     \"block-buffer\",\n     \"block-padding\",\n@@ -98,6 +98,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"generic-array\",\n     \"getopts\",\n     \"getrandom\",\n+    \"gimli\",\n     \"hashbrown\",\n     \"hermit-abi\",\n     \"humantime\",\n@@ -119,6 +120,7 @@ const PERMITTED_DEPENDENCIES: &[&str] = &[\n     \"miniz_oxide\",\n     \"nodrop\",\n     \"num_cpus\",\n+    \"object\",\n     \"once_cell\",\n     \"opaque-debug\",\n     \"parking_lot\","}, {"sha": "c0671596e19f1b365a990243d3b02ad7a1b51389", "filename": "src/tools/tidy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13db3cc1e8d2fd4b8e7c74d91002274d7b62801b/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Flib.rs?ref=13db3cc1e8d2fd4b8e7c74d91002274d7b62801b", "patch": "@@ -60,6 +60,7 @@ fn filter_dirs(path: &Path) -> bool {\n         \"src/tools/rust-installer\",\n         \"src/tools/rustfmt\",\n         \"src/doc/book\",\n+        \"src/backtrace\",\n         // Filter RLS output directories\n         \"target/rls\",\n     ];"}]}