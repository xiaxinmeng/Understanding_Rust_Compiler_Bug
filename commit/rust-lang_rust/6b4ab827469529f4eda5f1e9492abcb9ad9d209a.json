{"sha": "6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNGFiODI3NDY5NTI5ZjRlZGE1ZjFlOTQ5MmFiY2I5YWQ5ZDIwOWE=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-01-23T15:28:01Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-15T15:18:12Z"}, "message": "Global rework + fix imports", "tree": {"sha": "8562964fe3117d5462637ce259208cf80bb05de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8562964fe3117d5462637ce259208cf80bb05de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "html_url": "https://github.com/rust-lang/rust/commit/6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d986850d795f8aa3bdea1d2c840b080c9df81c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d986850d795f8aa3bdea1d2c840b080c9df81c", "html_url": "https://github.com/rust-lang/rust/commit/b2d986850d795f8aa3bdea1d2c840b080c9df81c"}], "stats": {"total": 182, "additions": 89, "deletions": 93}, "files": [{"sha": "eb5a6af97d361fd8470e4a4c53a571945171f70c", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -1256,6 +1256,7 @@ Released 2018-09-13\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expl_impl_clone_on_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#expl_impl_clone_on_copy\n [`explicit_counter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_counter_loop\n+[`explicit_deref_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_deref_method\n [`explicit_into_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_into_iter_loop\n [`explicit_iter_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_iter_loop\n [`explicit_write`]: https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write"}, {"sha": "dea00e5aa3b6cb595709cb18906d3246fb0a53c2", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -1,47 +1,51 @@\n-use crate::rustc::hir::{Expr, ExprKind, QPath};\n-use crate::rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n-use crate::rustc::{declare_tool_lint, lint_array};\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_errors::Applicability;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_tool_lint, declare_lint_pass};\n use crate::utils::{in_macro, span_lint_and_sugg};\n use if_chain::if_chain;\n \n-/// **What it does:** Checks for explicit deref() or deref_mut() method calls.\n-///\n-/// **Why is this bad?** Derefencing by &*x or &mut *x is clearer and more concise,\n-/// when not part of a method chain.\n-///\n-/// **Example:**\n-/// ```rust\n-/// let b = a.deref();\n-/// let c = a.deref_mut();\n-///\n-/// // excludes\n-/// let e = d.unwrap().deref();\n-/// ```\n declare_clippy_lint! {\n+    /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n+    ///\n+    /// **Why is this bad?** Derefencing by `&*x` or `&mut *x` is clearer and more concise,\n+    /// when not part of a method chain.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// let b = a.deref();\n+    /// let c = a.deref_mut();\n+    /// ```\n+    /// Could be written as:\n+    /// ```rust\n+    /// let b = &*a;\n+    /// let c = &mut *a;\n+    /// ```\n+    /// \n+    /// This lint excludes\n+    /// ```rust\n+    /// let e = d.unwrap().deref();\n+    /// ```\n     pub EXPLICIT_DEREF_METHOD,\n     pedantic,\n     \"Explicit use of deref or deref_mut method while not in a method chain.\"\n }\n \n-pub struct Pass;\n+declare_lint_pass!(Dereferencing => [\n+    EXPLICIT_DEREF_METHOD\n+]);\n \n-impl LintPass for Pass {\n-    fn get_lints(&self) -> LintArray {\n-        lint_array!(EXPLICIT_DEREF_METHOD)\n-    }\n-}\n-\n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n-    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &Expr) {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Dereferencing {\n+    fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {\n         if in_macro(expr.span) {\n             return;\n         }\n \n         if_chain! {\n             // if this is a method call\n-            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.node;\n+            if let ExprKind::MethodCall(ref method_name, _, ref args) = &expr.kind;\n             // on a Path (i.e. a variable/name, not another method)\n-            if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].node;\n+            if let ExprKind::Path(QPath::Resolved(None, path)) = &args[0].kind;\n             then {\n                 let name = method_name.ident.as_str();\n                 // alter help slightly to account for _mut\n@@ -54,6 +58,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             \"explicit deref method call\",\n                             \"try this\",\n                             format!(\"&*{}\", path),\n+                            Applicability::MachineApplicable\n                         );\n                     },\n                     \"deref_mut\" => {\n@@ -64,6 +69,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                             \"explicit deref_mut method call\",\n                             \"try this\",\n                             format!(\"&mut *{}\", path),\n+                            Applicability::MachineApplicable\n                         );\n                     },\n                     _ => ()"}, {"sha": "6443caa89d62c07810fddc4dd68b6da44e47b908", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -391,7 +391,7 @@ pub fn read_conf(args: &[rustc_ast::ast::NestedMetaItem], sess: &Session) -> Con\n             }\n \n             conf\n-        }\n+        },\n         Err((err, span)) => {\n             sess.struct_span_err(span, err)\n                 .span_note(span, \"Clippy will use default configuration\")\n@@ -513,7 +513,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &copy_iterator::COPY_ITERATOR,\n         &dbg_macro::DBG_MACRO,\n         &default_trait_access::DEFAULT_TRAIT_ACCESS,\n-        &dereference::DEREF_METHOD_EXPLICIT,\n+        &dereference::EXPLICIT_DEREF_METHOD,\n         &derive::DERIVE_HASH_XOR_EQ,\n         &derive::EXPL_IMPL_CLONE_ON_COPY,\n         &doc::DOC_MARKDOWN,\n@@ -1040,7 +1040,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n-    store.register_late_pass(|| box dereference::DerefMethodExplicit);\n+    store.register_late_pass(|| box dereference::Dereferencing);\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1181,7 +1181,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n-        LintId::of(&dereference::EXPLICIT_DEREF_METHOD),\n         LintId::of(&derive::DERIVE_HASH_XOR_EQ),\n         LintId::of(&doc::MISSING_SAFETY_DOC),\n         LintId::of(&doc::NEEDLESS_DOCTEST_MAIN),"}, {"sha": "3f1d31f0302c850145f3780c1ac8200996dcac08", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -528,6 +528,13 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"loops\",\n     },\n+    Lint {\n+        name: \"explicit_deref_method\",\n+        group: \"pedantic\",\n+        desc: \"Explicit use of deref or deref_mut method while not in a method chain.\",\n+        deprecation: None,\n+        module: \"dereference\",\n+    },\n     Lint {\n         name: \"explicit_into_iter_loop\",\n         group: \"pedantic\","}, {"sha": "07421eb715df0da457337bd0a6147713063c830f", "filename": "tests/ui/dereference.rs", "status": "modified", "additions": 21, "deletions": 38, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/tests%2Fui%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/tests%2Fui%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.rs?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -1,55 +1,38 @@\n-#![feature(tool_lints)]\n+#![allow(unused_variables, clippy::many_single_char_names, clippy::clone_double_ref)]\n+#![warn(clippy::explicit_deref_method)]\n \n use std::ops::{Deref, DerefMut};\n \n-#[allow(clippy::many_single_char_names, clippy::clone_double_ref)]\n-#[allow(unused_variables)]\n-#[warn(clippy::explicit_deref_method)]\n fn main() {\n     let a: &mut String = &mut String::from(\"foo\");\n \n     // these should require linting\n-    {\n-        let b: &str = a.deref();\n-    }\n+    let b: &str = a.deref();\n \n-    {\n-        let b: &mut str = a.deref_mut();\n-    }\n+    let b: &mut str = a.deref_mut();\n \n-    {\n-        let b: String = a.deref().clone();\n-    }\n-    \n-    {\n-        let b: usize = a.deref_mut().len();\n-    }\n-    \n-    {\n-        let b: &usize = &a.deref().len();\n-    }\n+    let b: String = a.deref().clone();\n \n-    {\n-        // only first deref should get linted here\n-        let b: &str = a.deref().deref();\n-    }\n+    let b: usize = a.deref_mut().len();\n \n-    {\n-        // both derefs should get linted here\n-        let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n-    }\n+    let b: &usize = &a.deref().len();\n+\n+    // only first deref should get linted here\n+    let b: &str = a.deref().deref();\n+\n+    // both derefs should get linted here\n+    let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n \n     // these should not require linting\n-    {\n-        let b: &str = &*a;\n-    }\n \n-    {\n-        let b: &mut str = &mut *a;\n-    }\n+    let b: &str = &*a;\n+\n+    let b: &mut str = &mut *a;\n \n-    {\n-        macro_rules! expr_deref { ($body:expr) => { $body.deref() } }\n-        let b: &str = expr_deref!(a);\n+    macro_rules! expr_deref {\n+        ($body:expr) => {\n+            $body.deref()\n+        };\n     }\n+    let b: &str = expr_deref!(a);\n }"}, {"sha": "7169b689a860a676eb1a3b9a60c7f8e4a4632f8c", "filename": "tests/ui/dereference.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/tests%2Fui%2Fdereference.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b4ab827469529f4eda5f1e9492abcb9ad9d209a/tests%2Fui%2Fdereference.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdereference.stderr?ref=6b4ab827469529f4eda5f1e9492abcb9ad9d209a", "patch": "@@ -1,52 +1,52 @@\n error: explicit deref method call\n-  --> $DIR/dereference.rs:13:23\n+  --> $DIR/dereference.rs:10:19\n    |\n-13 |         let b: &str = a.deref();\n-   |                       ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: &str = a.deref();\n+   |                   ^^^^^^^^^ help: try this: `&*a`\n    |\n    = note: `-D clippy::explicit-deref-method` implied by `-D warnings`\n \n error: explicit deref_mut method call\n-  --> $DIR/dereference.rs:17:27\n+  --> $DIR/dereference.rs:12:23\n    |\n-17 |         let b: &mut str = a.deref_mut();\n-   |                           ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+LL |     let b: &mut str = a.deref_mut();\n+   |                       ^^^^^^^^^^^^^ help: try this: `&mut *a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:21:25\n+  --> $DIR/dereference.rs:14:21\n    |\n-21 |         let b: String = a.deref().clone();\n-   |                         ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: String = a.deref().clone();\n+   |                     ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref_mut method call\n-  --> $DIR/dereference.rs:25:24\n+  --> $DIR/dereference.rs:16:20\n    |\n-25 |         let b: usize = a.deref_mut().len();\n-   |                        ^^^^^^^^^^^^^ help: try this: `&mut *a`\n+LL |     let b: usize = a.deref_mut().len();\n+   |                    ^^^^^^^^^^^^^ help: try this: `&mut *a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:29:26\n+  --> $DIR/dereference.rs:18:22\n    |\n-29 |         let b: &usize = &a.deref().len();\n-   |                          ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: &usize = &a.deref().len();\n+   |                      ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:34:23\n+  --> $DIR/dereference.rs:21:19\n    |\n-34 |         let b: &str = a.deref().deref();\n-   |                       ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: &str = a.deref().deref();\n+   |                   ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:39:43\n+  --> $DIR/dereference.rs:24:39\n    |\n-39 |         let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n-   |                                           ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                       ^^^^^^^^^ help: try this: `&*a`\n \n error: explicit deref method call\n-  --> $DIR/dereference.rs:39:54\n+  --> $DIR/dereference.rs:24:50\n    |\n-39 |         let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n-   |                                                      ^^^^^^^^^ help: try this: `&*a`\n+LL |     let b: String = format!(\"{}, {}\", a.deref(), a.deref());\n+   |                                                  ^^^^^^^^^ help: try this: `&*a`\n \n error: aborting due to 8 previous errors\n "}]}