{"sha": "53cc673db13608f27bec18ab71ce3fe36b6b303e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzY2M2NzNkYjEzNjA4ZjI3YmVjMThhYjcxY2UzZmUzNmI2YjMwM2U=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-08T00:09:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-04-08T00:23:14Z"}, "message": "Re-add a read_byte() method to buf_reader objs\n\nThis was removed because of the repetition, but doing single-byte\nreads in terms of read_bytes (which allocates a vec) is needlessly\nslow. This change speeds up parsing by 22%.\n\n(Eventually, we won't be able to escape handling the buffering in the\nstdlib itself.)", "tree": {"sha": "cc57f1ef7b13c2f9a7cdfce016990903ca125fc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc57f1ef7b13c2f9a7cdfce016990903ca125fc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53cc673db13608f27bec18ab71ce3fe36b6b303e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53cc673db13608f27bec18ab71ce3fe36b6b303e", "html_url": "https://github.com/rust-lang/rust/commit/53cc673db13608f27bec18ab71ce3fe36b6b303e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53cc673db13608f27bec18ab71ce3fe36b6b303e/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb56253015a5cd499e9d6d109d249778cb078877", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb56253015a5cd499e9d6d109d249778cb078877", "html_url": "https://github.com/rust-lang/rust/commit/bb56253015a5cd499e9d6d109d249778cb078877"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "4a3274ac999c4210bae8c251eea2895e045e936d", "filename": "src/lib/io.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/53cc673db13608f27bec18ab71ce3fe36b6b303e/src%2Flib%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53cc673db13608f27bec18ab71ce3fe36b6b303e/src%2Flib%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fio.rs?ref=53cc673db13608f27bec18ab71ce3fe36b6b303e", "patch": "@@ -15,6 +15,7 @@ tag seek_style {seek_set; seek_end; seek_cur;}\n type buf_reader =\n     state obj {\n         impure fn read(uint len) -> vec[u8];\n+        impure fn read_byte() -> int;\n         impure fn unread_byte(int byte);\n         impure fn eof() -> bool;\n \n@@ -60,6 +61,9 @@ state obj FILE_buf_reader(os.libc.FILE f, bool must_close) {\n         _vec.len_set[u8](buf, read);\n         ret buf;\n     }\n+    impure fn read_byte() -> int {\n+        ret os.libc.fgetc(f);\n+    }\n     impure fn unread_byte(int byte) {\n         os.libc.ungetc(byte, f);\n     }\n@@ -77,25 +81,13 @@ state obj FILE_buf_reader(os.libc.FILE f, bool must_close) {\n     }\n }\n \n-// FIXME: When we have a \"self\" keyword, move this into read_byte(). This is\n-// only here so that multiple method implementations below can use it.\n-//\n-// FIXME: Return value should be option[u8], not int.\n-impure fn read_byte_from_buf_reader(buf_reader rdr) -> int {\n-    auto buf = rdr.read(1u);\n-    if (_vec.len[u8](buf) == 0u) {\n-        ret -1;\n-    }\n-    ret buf.(0) as int;\n-}\n-\n // FIXME: Convert this into pseudomethods on buf_reader.\n state obj new_reader(buf_reader rdr) {\n     impure fn get_buf_reader() -> buf_reader {\n         ret rdr;\n     }\n     impure fn read_byte() -> int {\n-        ret read_byte_from_buf_reader(rdr);\n+        ret rdr.read_byte();\n     }\n     impure fn unread_byte(int byte) {\n         ret rdr.unread_byte(byte);\n@@ -104,7 +96,7 @@ state obj new_reader(buf_reader rdr) {\n         ret rdr.read(len);\n     }\n     impure fn read_char() -> char {\n-        auto c0 = read_byte_from_buf_reader(rdr);\n+        auto c0 = rdr.read_byte();\n         if (c0 == -1) {ret -1 as char;} // FIXME will this stay valid?\n         auto b0 = c0 as u8;\n         auto w = _str.utf8_char_width(b0);\n@@ -113,7 +105,7 @@ state obj new_reader(buf_reader rdr) {\n         auto val = 0u;\n         while (w > 1u) {\n             w -= 1u;\n-            auto next = read_byte_from_buf_reader(rdr);\n+            auto next = rdr.read_byte();\n             check(next > -1);\n             check(next & 0xc0 == 0x80);\n             val <<= 6u;\n@@ -131,7 +123,7 @@ state obj new_reader(buf_reader rdr) {\n         // No break yet in rustc\n         auto go_on = true;\n         while (go_on) {\n-            auto ch = read_byte_from_buf_reader(rdr);\n+            auto ch = rdr.read_byte();\n             if (ch == -1 || ch == 10) {go_on = false;}\n             else {_vec.push[u8](buf, ch as u8);}\n         }\n@@ -141,7 +133,7 @@ state obj new_reader(buf_reader rdr) {\n         let vec[u8] buf = vec();\n         auto go_on = true;\n         while (go_on) {\n-            auto ch = read_byte_from_buf_reader(rdr);\n+            auto ch = rdr.read_byte();\n             if (ch < 1) {go_on = false;}\n             else {_vec.push[u8](buf, ch as u8);}\n         }\n@@ -152,7 +144,7 @@ state obj new_reader(buf_reader rdr) {\n         auto val = 0u;\n         auto pos = 0u;\n         while (size > 0u) {\n-            val += (read_byte_from_buf_reader(rdr) as uint) << pos;\n+            val += (rdr.read_byte() as uint) << pos;\n             pos += 8u;\n             size -= 1u;\n         }\n@@ -162,7 +154,7 @@ state obj new_reader(buf_reader rdr) {\n         auto val = 0u;\n         auto pos = 0u;\n         while (size > 0u) {\n-            val += (read_byte_from_buf_reader(rdr) as uint) << pos;\n+            val += (rdr.read_byte() as uint) << pos;\n             pos += 8u;\n             size -= 1u;\n         }\n@@ -174,7 +166,7 @@ state obj new_reader(buf_reader rdr) {\n         auto sz = size; // FIXME: trans.ml bug workaround\n         while (sz > 0u) {\n             sz -= 1u;\n-            val += (read_byte_from_buf_reader(rdr) as uint) << (sz * 8u);\n+            val += (rdr.read_byte() as uint) << (sz * 8u);\n         }\n         ret val;\n     }\n@@ -221,6 +213,12 @@ state obj byte_buf_reader(byte_buf bbuf) {\n         bbuf.pos += to_read;\n         ret range;\n     }\n+    impure fn read_byte() -> int {\n+        if (bbuf.pos == _vec.len[u8](bbuf.buf)) {ret -1;}\n+        auto b = bbuf.buf.(bbuf.pos);\n+        bbuf.pos += 1u;\n+        ret b as int;\n+    }\n \n     impure fn unread_byte(int byte) {\n         log \"TODO: unread_byte\";"}]}