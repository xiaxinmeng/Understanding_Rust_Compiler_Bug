{"sha": "e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYWE5NmYyYzViNmNkYmYwZmI3ZjQ5YjQ3MjA5MDU1YjdhOTM3ZjI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-09T09:26:46Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-03-09T09:26:46Z"}, "message": "Less abstract CrateData api", "tree": {"sha": "3bf11b84559f60cf1aa8cf4098f2b310da20aa91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bf11b84559f60cf1aa8cf4098f2b310da20aa91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "html_url": "https://github.com/rust-lang/rust/commit/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cffef56e2c373f6d67b0f7b70d7ade995795c04", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cffef56e2c373f6d67b0f7b70d7ade995795c04", "html_url": "https://github.com/rust-lang/rust/commit/5cffef56e2c373f6d67b0f7b70d7ade995795c04"}], "stats": {"total": 99, "additions": 48, "deletions": 51}, "files": [{"sha": "4069c0fedb532654d882f69fe5c0690f4a0069c6", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 27, "deletions": 33, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -104,13 +104,16 @@ impl CrateName {\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-struct CrateData {\n-    file_id: FileId,\n-    edition: Edition,\n-    declaration_name: Option<String>,\n+pub struct CrateData {\n+    pub root_file_id: FileId,\n+    pub edition: Edition,\n+    /// The name to display to the end user.\n+    /// This actual crate name can be different in a particular dependent crate\n+    /// or may even be missing for some cases, such as a dummy crate for the code snippet.\n+    pub display_name: Option<String>,\n     cfg_options: CfgOptions,\n     env: Env,\n-    dependencies: Vec<Dependency>,\n+    pub dependencies: Vec<Dependency>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -135,11 +138,11 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n-        declaration_name: Option<String>,\n+        display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n     ) -> CrateId {\n-        let data = CrateData::new(file_id, edition, declaration_name, cfg_options, env);\n+        let data = CrateData::new(file_id, edition, display_name, cfg_options, env);\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n         assert!(prev.is_none());\n@@ -171,33 +174,17 @@ impl CrateGraph {\n         self.arena.keys().copied()\n     }\n \n-    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n-        self.arena[&crate_id].file_id\n-    }\n-\n-    pub fn edition(&self, crate_id: CrateId) -> Edition {\n-        self.arena[&crate_id].edition\n-    }\n-\n-    /// Returns a name of a crate, declared in the root project.\n-    /// May be missing for some cases, such as when the crate definition was created for a code snippet.\n-    ///\n-    /// This should not be considered as a normal crate name, since the actual name can be different in\n-    /// a particular dependent crate, where it is specified.\n-    pub fn declaration_name(&self, crate_id: &CrateId) -> Option<&String> {\n-        self.arena[crate_id].declaration_name.as_ref()\n+    pub fn crate_data(&self, crate_id: &CrateId) -> &CrateData {\n+        &self.arena[crate_id]\n     }\n \n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n-        let (&crate_id, _) = self.arena.iter().find(|(_crate_id, data)| data.file_id == file_id)?;\n+        let (&crate_id, _) =\n+            self.arena.iter().find(|(_crate_id, data)| data.root_file_id == file_id)?;\n         Some(crate_id)\n     }\n \n-    pub fn dependencies(&self, crate_id: CrateId) -> impl Iterator<Item = &Dependency> {\n-        self.arena[&crate_id].dependencies.iter()\n-    }\n-\n     /// Extends this crate graph by adding a complete disjoint second crate\n     /// graph.\n     ///\n@@ -220,7 +207,7 @@ impl CrateGraph {\n             return false;\n         }\n \n-        for dep in self.dependencies(from) {\n+        for dep in &self.crate_data(&from).dependencies {\n             let crate_id = dep.crate_id();\n             if crate_id == target {\n                 return true;\n@@ -242,13 +229,20 @@ impl CrateId {\n \n impl CrateData {\n     fn new(\n-        file_id: FileId,\n+        root_file_id: FileId,\n         edition: Edition,\n-        declaration_name: Option<String>,\n+        display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n     ) -> CrateData {\n-        CrateData { file_id, edition, declaration_name, dependencies: Vec::new(), cfg_options, env }\n+        CrateData {\n+            root_file_id,\n+            edition,\n+            display_name,\n+            dependencies: Vec::new(),\n+            cfg_options,\n+            env,\n+        }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -382,8 +376,8 @@ mod tests {\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n             .is_ok());\n         assert_eq!(\n-            graph.dependencies(crate1).collect::<Vec<_>>(),\n-            vec![&Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n+            graph.crate_data(&crate1).dependencies,\n+            vec![Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n         );\n     }\n }"}, {"sha": "9685d6982a698fa79a8f1a91c997e7882ba413c5", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -55,7 +55,9 @@ pub struct CrateDependency {\n impl Crate {\n     pub fn dependencies(self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n         db.crate_graph()\n-            .dependencies(self.id)\n+            .crate_data(&self.id)\n+            .dependencies\n+            .iter()\n             .map(|dep| {\n                 let krate = Crate { id: dep.crate_id() };\n                 let name = dep.as_name();\n@@ -69,7 +71,9 @@ impl Crate {\n         let crate_graph = db.crate_graph();\n         crate_graph\n             .iter()\n-            .filter(|&krate| crate_graph.dependencies(krate).any(|it| it.crate_id == self.id))\n+            .filter(|&krate| {\n+                crate_graph.crate_data(&krate).dependencies.iter().any(|it| it.crate_id == self.id)\n+            })\n             .map(|id| Crate { id })\n             .collect()\n     }\n@@ -80,12 +84,11 @@ impl Crate {\n     }\n \n     pub fn root_file(self, db: &impl DefDatabase) -> FileId {\n-        db.crate_graph().crate_root(self.id)\n+        db.crate_graph().crate_data(&self.id).root_file_id\n     }\n \n     pub fn edition(self, db: &impl DefDatabase) -> Edition {\n-        let crate_graph = db.crate_graph();\n-        crate_graph.edition(self.id)\n+        db.crate_graph().crate_data(&self.id).edition\n     }\n \n     pub fn all(db: &impl DefDatabase) -> Vec<Crate> {"}, {"sha": "217e19b01d36d2c586437723c544ca2e4e698505", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -176,7 +176,7 @@ fn find_importable_locations(\n     // directly (only through reexports in direct dependencies).\n     for krate in Some(from.krate)\n         .into_iter()\n-        .chain(crate_graph.dependencies(from.krate).map(|dep| dep.crate_id))\n+        .chain(crate_graph.crate_data(&from.krate).dependencies.iter().map(|dep| dep.crate_id))\n     {\n         result.extend(\n             importable_locations_in_crate(db, item, krate)"}, {"sha": "79e8d8038a01b9e290578ed777740ab554fc9a6a", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -117,7 +117,9 @@ impl LangItems {\n             return Some(*target);\n         }\n         db.crate_graph()\n-            .dependencies(start_crate)\n+            .crate_data(&start_crate)\n+            .dependencies\n+            .iter()\n             .find_map(|dep| db.lang_item(dep.crate_id, item.clone()))\n     }\n "}, {"sha": "6af0f4a8e9da72dc5e39446471115cd5c77f0ee7", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -179,8 +179,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n-            let crate_graph = db.crate_graph();\n-            let edition = crate_graph.edition(krate);\n+            let edition = db.crate_graph().crate_data(&krate).edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "e69f89b80eefb2dc43fe3dc63798e308ae5cb7ae", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -34,7 +34,7 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n     let crate_graph = db.crate_graph();\n \n     // populate external prelude\n-    for dep in crate_graph.dependencies(def_map.krate) {\n+    for dep in &crate_graph.crate_data(&def_map.krate).dependencies {\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         def_map.extern_prelude.insert(\n@@ -128,8 +128,7 @@ where\n     DB: DefDatabase,\n {\n     fn collect(&mut self) {\n-        let crate_graph = self.db.crate_graph();\n-        let file_id = crate_graph.crate_root(self.def_map.krate);\n+        let file_id = self.db.crate_graph().crate_data(&self.def_map.krate).root_file_id;\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n@@ -955,7 +954,7 @@ mod tests {\n         let krate = db.test_crate();\n \n         let def_map = {\n-            let edition = db.crate_graph().edition(krate);\n+            let edition = db.crate_graph().crate_data(&krate).edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "6c653c4f5d09c925dc577dbad5bddf4f663e86d2", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn impls_for_trait_query(\n     // will only ever get called for a few crates near the root of the tree (the\n     // ones the user is editing), so this may actually be a waste of memory. I'm\n     // doing it like this mainly for simplicity for now.\n-    for dep in db.crate_graph().dependencies(krate) {\n+    for dep in &db.crate_graph().crate_data(&krate).dependencies {\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n     let crate_impl_defs = db.impls_in_crate(krate);"}, {"sha": "8b8af35fc7f8e3263d4034be3d308d0babdd7498", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -121,7 +121,7 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n \n fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n     let mod_path = def.module(db).map(|module| {\n-        once(db.crate_graph().declaration_name(&module.krate().into()).cloned())\n+        once(db.crate_graph().crate_data(&module.krate().into()).display_name.clone())\n             .chain(\n                 module\n                     .path_to_root(db)\n@@ -130,7 +130,7 @@ fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n                     .map(|it| it.name(db).map(|name| name.to_string())),\n             )\n             .chain(once(definition_owner_name(db, def)))\n-            .filter_map(std::convert::identity)\n+            .flatten()\n             .join(\"::\")\n     });\n     mod_path"}, {"sha": "903624381a5c12191a16e417ac5094896222c124", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "patch": "@@ -421,12 +421,12 @@ impl Analysis {\n \n     /// Returns the edition of the given crate.\n     pub fn crate_edition(&self, crate_id: CrateId) -> Cancelable<Edition> {\n-        self.with_db(|db| db.crate_graph().edition(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_data(&crate_id).edition)\n     }\n \n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        self.with_db(|db| db.crate_graph().crate_root(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_data(&crate_id).root_file_id)\n     }\n \n     /// Returns the set of possible targets to run for the current file."}]}