{"sha": "5cc1baa2900ab344e8e8386aa8314b59051868ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjYzFiYWEyOTAwYWIzNDRlOGU4Mzg2YWE4MzE0YjU5MDUxODY4Y2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T17:07:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-27T17:07:58Z"}, "message": "Auto merge of #43482 - Mark-Simulacrum:single-rustdoc, r=alexcrichton\n\nCompile rustdoc on-demand\n\nFixes #43284, fixes #38318, and fixes #39505.\n\nDoesn't directly help with https://github.com/rust-lang/rust/issues/42686, since we need to rebuild just as much. In fact, this hurts it, since `./x.py doc --stage 0` will now fail. I'm not sure if it did before, but with these changes it runs into the problem where we attempt to use artifacts from bootstrap rustc with a non-bootstrap rustdoc, running into version conflicts. I believe this is solvable, but leaving for a future PR.\n\nThis means that rustdoc will no longer be compiled when compiling rustc, by default. However, it is still built from `./x.py build` (for hosts, but not targets, since we don't produce compiler toolchains for them) and will be built for doc tests and crate tests.\n\nAfter this, the recommended workflow if you want a rustdoc is: `./x.py build --stage 1 src/tools/rustdoc` which will give you a working rustdoc in `build/triple/stage1/bin/rustdoc`. Note that you can add `src/libstd` onto the command to compile libstd as well so that the rustdoc can easily compile crates in the wild. `./x.py doc --stage 1 src/libstd` will document `libstd` with a freshly built rustdoc (if necessary), and will not rebuild rustc on modifications to rustdoc.\n\nr? @alexcrichton", "tree": {"sha": "84f87eb9376358b870ca40dbb1962b85341dbad4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/84f87eb9376358b870ca40dbb1962b85341dbad4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca", "html_url": "https://github.com/rust-lang/rust/commit/5cc1baa2900ab344e8e8386aa8314b59051868ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1baa2900ab344e8e8386aa8314b59051868ca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0565653eecd7d667dbb28bb5d3008e783950892a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0565653eecd7d667dbb28bb5d3008e783950892a", "html_url": "https://github.com/rust-lang/rust/commit/0565653eecd7d667dbb28bb5d3008e783950892a"}, {"sha": "9ee877bbe6300b987dc29f90b192de7a6e258bcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee877bbe6300b987dc29f90b192de7a6e258bcf", "html_url": "https://github.com/rust-lang/rust/commit/9ee877bbe6300b987dc29f90b192de7a6e258bcf"}], "stats": {"total": 325, "additions": 181, "deletions": 144}, "files": [{"sha": "e193cc612c52d6b67c264a1e0edfe393fe5c5025", "filename": "src/Cargo.lock", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -439,6 +439,9 @@ dependencies = [\n [[package]]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n+dependencies = [\n+ \"rustdoc 0.0.0\",\n+]\n \n [[package]]\n name = \"filetime\"\n@@ -1222,7 +1225,6 @@ version = \"0.0.0\"\n dependencies = [\n  \"rustc_back 0.0.0\",\n  \"rustc_driver 0.0.0\",\n- \"rustdoc 0.0.0\",\n ]\n \n [[package]]\n@@ -1560,25 +1562,18 @@ dependencies = [\n name = \"rustdoc\"\n version = \"0.0.0\"\n dependencies = [\n- \"arena 0.0.0\",\n  \"build_helper 0.1.0\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"gcc 0.3.51 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.0.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc 0.0.0\",\n- \"rustc_back 0.0.0\",\n- \"rustc_data_structures 0.0.0\",\n- \"rustc_driver 0.0.0\",\n- \"rustc_errors 0.0.0\",\n- \"rustc_lint 0.0.0\",\n- \"rustc_metadata 0.0.0\",\n- \"rustc_resolve 0.0.0\",\n- \"rustc_trans 0.0.0\",\n- \"rustc_typeck 0.0.0\",\n- \"serialize 0.0.0\",\n- \"syntax 0.0.0\",\n- \"syntax_pos 0.0.0\",\n+]\n+\n+[[package]]\n+name = \"rustdoc-tool\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"rustdoc 0.0.0\",\n ]\n \n [[package]]"}, {"sha": "4b84272df98126b69284165fbb2b7755d248739d", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -16,6 +16,7 @@ members = [\n   \"tools/remote-test-server\",\n   \"tools/rust-installer\",\n   \"tools/cargo\",\n+  \"tools/rustdoc\",\n   \"tools/rls\",\n   # FIXME(https://github.com/rust-lang/cargo/issues/4089): move these to exclude\n   \"tools/rls/test_data/borrow_error\","}, {"sha": "2f6e3ca9253f848b0cfc925a7434e42d5e725f27", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -256,7 +256,7 @@ impl<'a> Builder<'a> {\n                 compile::StartupObjects, tool::BuildManifest, tool::Rustbook, tool::ErrorIndex,\n                 tool::UnstableBookGen, tool::Tidy, tool::Linkchecker, tool::CargoTest,\n                 tool::Compiletest, tool::RemoteTestServer, tool::RemoteTestClient,\n-                tool::RustInstaller, tool::Cargo, tool::Rls),\n+                tool::RustInstaller, tool::Cargo, tool::Rls, tool::Rustdoc),\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Linkcheck,\n                 check::Cargotest, check::Cargo, check::Rls, check::Docs, check::ErrorIndex,\n@@ -412,12 +412,23 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n-    /// Get the `rustdoc` executable next to the specified compiler\n     pub fn rustdoc(&self, compiler: Compiler) -> PathBuf {\n-        let mut rustdoc = self.rustc(compiler);\n-        rustdoc.pop();\n-        rustdoc.push(exe(\"rustdoc\", &compiler.host));\n-        rustdoc\n+        self.ensure(tool::Rustdoc { target_compiler: compiler })\n+    }\n+\n+    pub fn rustdoc_cmd(&self, compiler: Compiler) -> Command {\n+        let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n+        cmd\n+            .env(\"RUSTC_STAGE\", compiler.stage.to_string())\n+            .env(\"RUSTC_SYSROOT\", if compiler.is_snapshot(&self.build) {\n+                INTERNER.intern_path(self.build.rustc_snapshot_libdir())\n+            } else {\n+                self.sysroot(compiler)\n+            })\n+            .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n+            .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n+            .env(\"RUSTDOC_REAL\", self.rustdoc(compiler));\n+        cmd\n     }\n \n     /// Prepares an invocation of `cargo` to be run.\n@@ -469,7 +480,11 @@ impl<'a> Builder<'a> {\n              .env(\"RUSTC_LIBDIR\", self.rustc_libdir(compiler))\n              .env(\"RUSTC_RPATH\", self.config.rust_rpath.to_string())\n              .env(\"RUSTDOC\", self.out.join(\"bootstrap/debug/rustdoc\"))\n-             .env(\"RUSTDOC_REAL\", self.rustdoc(compiler))\n+             .env(\"RUSTDOC_REAL\", if cmd == \"doc\" || cmd == \"test\" {\n+                 self.rustdoc(compiler)\n+             } else {\n+                 PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n+             })\n              .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n \n         if mode != Mode::Tool {\n@@ -560,6 +575,9 @@ impl<'a> Builder<'a> {\n         // FIXME: should update code to not require this env var\n         cargo.env(\"CFG_COMPILER_HOST_TRIPLE\", target);\n \n+        // Set this for all builds to make sure doc builds also get it.\n+        cargo.env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel);\n+\n         if self.is_verbose() {\n             cargo.arg(\"-v\");\n         }"}, {"sha": "b04e4de774453db9b3d143725fb0ece467fe103c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -119,7 +119,7 @@ impl Step for Linkcheck {\n     }\n \n     fn make_run(run: RunConfig) {\n-        run.builder.ensure(Linkcheck { host: run.host });\n+        run.builder.ensure(Linkcheck { host: run.target });\n     }\n }\n \n@@ -140,7 +140,7 @@ impl Step for Cargotest {\n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Cargotest {\n             stage: run.builder.top_stage,\n-            host: run.host,\n+            host: run.target,\n         });\n     }\n \n@@ -194,7 +194,7 @@ impl Step for Cargo {\n         let build = builder.build;\n         let compiler = builder.compiler(self.stage, self.host);\n \n-        builder.ensure(tool::Cargo { stage: self.stage, target: self.host });\n+        builder.ensure(tool::Cargo { compiler, target: self.host });\n         let mut cargo = builder.cargo(compiler, Mode::Tool, self.host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n         if !build.fail_fast {\n@@ -240,7 +240,7 @@ impl Step for Rls {\n         let host = self.host;\n         let compiler = builder.compiler(stage, host);\n \n-        builder.ensure(tool::Rls { stage: self.stage, target: self.host });\n+        builder.ensure(tool::Rls { compiler, target: self.host });\n         let mut cargo = builder.cargo(compiler, Mode::Tool, host, \"test\");\n         cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/rls/Cargo.toml\"));\n \n@@ -562,7 +562,12 @@ impl Step for Compiletest {\n         cmd.arg(\"--compile-lib-path\").arg(builder.rustc_libdir(compiler));\n         cmd.arg(\"--run-lib-path\").arg(builder.sysroot_libdir(compiler, target));\n         cmd.arg(\"--rustc-path\").arg(builder.rustc(compiler));\n-        cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler));\n+\n+        // Avoid depending on rustdoc when we don't need it.\n+        if mode == \"rustdoc\" || mode == \"run-make\" {\n+            cmd.arg(\"--rustdoc-path\").arg(builder.rustdoc(compiler));\n+        }\n+\n         cmd.arg(\"--src-base\").arg(build.src.join(\"src/test\").join(suite));\n         cmd.arg(\"--build-base\").arg(testdir(build, compiler.host).join(suite));\n         cmd.arg(\"--stage-id\").arg(format!(\"stage{}-{}\", compiler.stage, target));\n@@ -809,8 +814,7 @@ fn markdown_test(builder: &Builder, compiler: Compiler, markdown: &Path) {\n     }\n \n     println!(\"doc tests for: {}\", markdown.display());\n-    let mut cmd = Command::new(builder.rustdoc(compiler));\n-    builder.add_rustc_lib_path(compiler, &mut cmd);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n     build.add_rust_test_threads(&mut cmd);\n     cmd.arg(\"--test\");\n     cmd.arg(markdown);\n@@ -1165,7 +1169,7 @@ impl Step for RemoteCopyLibs {\n         println!(\"REMOTE copy libs to emulator ({})\", target);\n         t!(fs::create_dir_all(build.out.join(\"tmp\")));\n \n-        let server = builder.ensure(tool::RemoteTestServer { stage: compiler.stage, target });\n+        let server = builder.ensure(tool::RemoteTestServer { compiler, target });\n \n         // Spawn the emulator and wait for it to come online\n         let tool = builder.tool_exe(Tool::RemoteTestClient);"}, {"sha": "92a42b59212b4be3a1d137d88ecac6fc766e3fc0", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -719,15 +719,6 @@ impl Step for Assemble {\n         let _ = fs::remove_file(&compiler);\n         copy(&rustc, &compiler);\n \n-        // See if rustdoc exists to link it into place\n-        let rustdoc = exe(\"rustdoc\", &*host);\n-        let rustdoc_src = out_dir.join(&rustdoc);\n-        let rustdoc_dst = bindir.join(&rustdoc);\n-        if fs::metadata(&rustdoc_src).is_ok() {\n-            let _ = fs::remove_file(&rustdoc_dst);\n-            copy(&rustdoc_src, &rustdoc_dst);\n-        }\n-\n         target_compiler\n     }\n }"}, {"sha": "c322d75dd5b45e04bf4664d845459ef10abb31bc", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -413,6 +413,9 @@ impl Step for Rustc {\n             t!(fs::create_dir_all(image.join(\"bin\")));\n             cp_r(&src.join(\"bin\"), &image.join(\"bin\"));\n \n+            install(&builder.ensure(tool::Rustdoc { target_compiler: compiler }),\n+                &image.join(\"bin\"), 0o755);\n+\n             // Copy runtime DLLs needed by the compiler\n             if libdir != \"bin\" {\n                 for entry in t!(src.join(libdir).read_dir()).map(|e| t!(e)) {\n@@ -963,7 +966,10 @@ impl Step for Cargo {\n         // Prepare the image directory\n         t!(fs::create_dir_all(image.join(\"share/zsh/site-functions\")));\n         t!(fs::create_dir_all(image.join(\"etc/bash_completion.d\")));\n-        let cargo = builder.ensure(tool::Cargo { stage, target });\n+        let cargo = builder.ensure(tool::Cargo {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        });\n         install(&cargo, &image.join(\"bin\"), 0o755);\n         for man in t!(etc.join(\"man\").read_dir()) {\n             let man = t!(man);\n@@ -1046,7 +1052,10 @@ impl Step for Rls {\n         t!(fs::create_dir_all(&image));\n \n         // Prepare the image directory\n-        let rls = builder.ensure(tool::Rls { stage, target });\n+        let rls = builder.ensure(tool::Rls {\n+            compiler: builder.compiler(stage, build.build),\n+            target\n+        });\n         install(&rls, &image.join(\"bin\"), 0o755);\n         let doc = image.join(\"share/doc/rls\");\n         install(&src.join(\"README.md\"), &doc, 0o644);"}, {"sha": "1ee578bb62b19e6ac95bce453da81a7621d19a53", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 14, "deletions": 19, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -21,13 +21,12 @@ use std::fs::{self, File};\n use std::io::prelude::*;\n use std::io;\n use std::path::{PathBuf, Path};\n-use std::process::Command;\n \n use Mode;\n use build_helper::up_to_date;\n \n use util::{cp_r, symlink_dir};\n-use builder::{Builder, RunConfig, ShouldRun, Step};\n+use builder::{Builder, Compiler, RunConfig, ShouldRun, Step};\n use tool::Tool;\n use compile;\n use cache::{INTERNER, Interned};\n@@ -177,6 +176,7 @@ impl Step for RustbookSrc {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct TheBook {\n+    compiler: Compiler,\n     target: Interned<String>,\n     name: &'static str,\n }\n@@ -192,6 +192,7 @@ impl Step for TheBook {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(TheBook {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n             name: \"book\",\n         });\n@@ -224,7 +225,7 @@ impl Step for TheBook {\n         // build the index page\n         let index = format!(\"{}/index.md\", name);\n         println!(\"Documenting book index ({})\", target);\n-        invoke_rustdoc(builder, target, &index);\n+        invoke_rustdoc(builder, self.compiler, target, &index);\n \n         // build the redirect pages\n         println!(\"Documenting book redirect pages ({})\", target);\n@@ -233,21 +234,17 @@ impl Step for TheBook {\n             let path = file.path();\n             let path = path.to_str().unwrap();\n \n-            invoke_rustdoc(builder, target, path);\n+            invoke_rustdoc(builder, self.compiler, target, path);\n         }\n     }\n }\n \n-fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n+fn invoke_rustdoc(builder: &Builder, compiler: Compiler, target: Interned<String>, markdown: &str) {\n     let build = builder.build;\n     let out = build.doc_out(target);\n \n-    let compiler = builder.compiler(0, build.build);\n-\n     let path = build.src.join(\"src/doc\").join(markdown);\n \n-    let rustdoc = builder.rustdoc(compiler);\n-\n     let favicon = build.src.join(\"src/doc/favicon.inc\");\n     let footer = build.src.join(\"src/doc/footer.inc\");\n \n@@ -263,9 +260,7 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n         t!(t!(File::create(&version_info)).write_all(info.as_bytes()));\n     }\n \n-    let mut cmd = Command::new(&rustdoc);\n-\n-    builder.add_rustc_lib_path(compiler, &mut cmd);\n+    let mut cmd = builder.rustdoc_cmd(compiler);\n \n     let out = out.join(\"book\");\n \n@@ -286,6 +281,7 @@ fn invoke_rustdoc(builder: &Builder, target: Interned<String>, markdown: &str) {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Standalone {\n+    compiler: Compiler,\n     target: Interned<String>,\n }\n \n@@ -300,6 +296,7 @@ impl Step for Standalone {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Standalone {\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -315,12 +312,11 @@ impl Step for Standalone {\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n         let target = self.target;\n+        let compiler = self.compiler;\n         println!(\"Documenting standalone ({})\", target);\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n \n-        let compiler = builder.compiler(0, build.build);\n-\n         let favicon = build.src.join(\"src/doc/favicon.inc\");\n         let footer = build.src.join(\"src/doc/footer.inc\");\n         let full_toc = build.src.join(\"src/doc/full-toc.inc\");\n@@ -357,8 +353,7 @@ impl Step for Standalone {\n                 continue\n             }\n \n-            let mut cmd = Command::new(&rustdoc);\n-            builder.add_rustc_lib_path(compiler, &mut cmd);\n+            let mut cmd = builder.rustdoc_cmd(compiler);\n             cmd.arg(\"--html-after-content\").arg(&footer)\n                .arg(\"--html-before-content\").arg(&version_info)\n                .arg(\"--html-in-header\").arg(&favicon)\n@@ -413,6 +408,7 @@ impl Step for Std {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -422,7 +418,6 @@ impl Step for Std {\n         builder.ensure(compile::Std { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libstd)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // Here what we're doing is creating a *symlink* (directory junction on\n         // Windows) to the final output location. This is not done as an\n@@ -498,6 +493,7 @@ impl Step for Test {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -510,7 +506,6 @@ impl Step for Test {\n         builder.ensure(compile::Test { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Libtest)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);\n@@ -559,6 +554,7 @@ impl Step for Rustc {\n         let out = build.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, build.build);\n+        let rustdoc = builder.rustdoc(compiler);\n         let compiler = if build.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -571,7 +567,6 @@ impl Step for Rustc {\n         builder.ensure(compile::Rustc { compiler, target });\n         let out_dir = build.stage_out(compiler, Mode::Librustc)\n                            .join(target).join(\"doc\");\n-        let rustdoc = builder.rustdoc(compiler);\n \n         // See docs in std above for why we symlink\n         let my_out = build.crate_doc_out(target);"}, {"sha": "862b3e2b1edb0beeccfad60b2ad4910f229dff10", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 84, "deletions": 33, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -8,24 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fs;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n \n use Mode;\n use Compiler;\n use builder::{Step, RunConfig, ShouldRun, Builder};\n-use util::{exe, add_lib_path};\n+use util::{copy, exe, add_lib_path};\n use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n use native;\n use channel::GitInfo;\n use cache::Interned;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct CleanTools {\n-    pub stage: u32,\n-    pub target: Interned<String>,\n-    pub mode: Mode,\n+struct CleanTools {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    mode: Mode,\n }\n \n impl Step for CleanTools {\n@@ -41,12 +42,10 @@ impl Step for CleanTools {\n     /// `stage` into the normal cargo output directory.\n     fn run(self, builder: &Builder) {\n         let build = builder.build;\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         let mode = self.mode;\n \n-        let compiler = builder.compiler(stage, build.build);\n-\n         let stamp = match mode {\n             Mode::Libstd => libstd_stamp(build, compiler, target),\n             Mode::Libtest => libtest_stamp(build, compiler, target),\n@@ -59,11 +58,11 @@ impl Step for CleanTools {\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub struct ToolBuild {\n-    pub stage: u32,\n-    pub target: Interned<String>,\n-    pub tool: &'static str,\n-    pub mode: Mode,\n+struct ToolBuild {\n+    compiler: Compiler,\n+    target: Interned<String>,\n+    tool: &'static str,\n+    mode: Mode,\n }\n \n impl Step for ToolBuild {\n@@ -79,21 +78,20 @@ impl Step for ToolBuild {\n     /// `stage` into the normal cargo output directory.\n     fn run(self, builder: &Builder) -> PathBuf {\n         let build = builder.build;\n-        let stage = self.stage;\n+        let compiler = self.compiler;\n         let target = self.target;\n         let tool = self.tool;\n \n-        let compiler = builder.compiler(stage, build.build);\n-        builder.ensure(CleanTools { stage, target, mode: self.mode });\n+        builder.ensure(CleanTools { compiler, target, mode: self.mode });\n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n             Mode::Libtest => builder.ensure(compile::Test { compiler, target }),\n             Mode::Librustc => builder.ensure(compile::Rustc { compiler, target }),\n             Mode::Tool => panic!(\"unexpected Mode::Tool for tool build\")\n         }\n \n-        let _folder = build.fold_output(|| format!(\"stage{}-{}\", stage, tool));\n-        println!(\"Building stage{} tool {} ({})\", stage, tool, target);\n+        let _folder = build.fold_output(|| format!(\"stage{}-{}\", compiler.stage, tool));\n+        println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = builder.cargo(compiler, Mode::Tool, target, \"build\");\n         let dir = build.src.join(\"src/tools\").join(tool);\n@@ -141,7 +139,7 @@ macro_rules! tool {\n                 match tool {\n                     $(Tool::$name =>\n                         self.ensure($name {\n-                            stage: 0,\n+                            compiler: self.compiler(0, self.build.build),\n                             target: self.build.build,\n                         }),\n                     )+\n@@ -152,7 +150,7 @@ macro_rules! tool {\n         $(\n             #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n         pub struct $name {\n-            pub stage: u32,\n+            pub compiler: Compiler,\n             pub target: Interned<String>,\n         }\n \n@@ -165,14 +163,14 @@ macro_rules! tool {\n \n             fn make_run(run: RunConfig) {\n                 run.builder.ensure($name {\n-                    stage: run.builder.top_stage,\n+                    compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n                     target: run.target,\n                 });\n             }\n \n             fn run(self, builder: &Builder) -> PathBuf {\n                 builder.ensure(ToolBuild {\n-                    stage: self.stage,\n+                    compiler: self.compiler,\n                     target: self.target,\n                     tool: $tool_name,\n                     mode: $mode,\n@@ -198,7 +196,7 @@ tool!(\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct RemoteTestServer {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -211,24 +209,77 @@ impl Step for RemoteTestServer {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(RemoteTestServer {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder) -> PathBuf {\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n         })\n     }\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct Rustdoc {\n+    pub target_compiler: Compiler,\n+}\n+\n+impl Step for Rustdoc {\n+    type Output = PathBuf;\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/tools/rustdoc\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(Rustdoc {\n+            target_compiler: run.builder.compiler(run.builder.top_stage, run.host),\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) -> PathBuf {\n+        let target_compiler = self.target_compiler;\n+        let build_compiler = if target_compiler.stage == 0 {\n+            builder.compiler(0, builder.build.build)\n+        } else {\n+            // Similar to `compile::Assemble`, build with the previous stage's compiler. Otherwise\n+            // we'd have stageN/bin/rustc and stageN/bin/rustdoc be effectively different stage\n+            // compilers, which isn't what we want.\n+            builder.compiler(target_compiler.stage - 1, builder.build.build)\n+        };\n+\n+        let tool_rustdoc = builder.ensure(ToolBuild {\n+            compiler: build_compiler,\n+            target: target_compiler.host,\n+            tool: \"rustdoc\",\n+            mode: Mode::Librustc,\n+        });\n+\n+        // don't create a stage0-sysroot/bin directory.\n+        if target_compiler.stage > 0 {\n+            let sysroot = builder.sysroot(target_compiler);\n+            let bindir = sysroot.join(\"bin\");\n+            t!(fs::create_dir_all(&bindir));\n+            let bin_rustdoc = bindir.join(exe(\"rustdoc\", &*target_compiler.host));\n+            let _ = fs::remove_file(&bin_rustdoc);\n+            copy(&tool_rustdoc, &bin_rustdoc);\n+            bin_rustdoc\n+        } else {\n+            tool_rustdoc\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Cargo {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -244,7 +295,7 @@ impl Step for Cargo {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Cargo {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -256,11 +307,11 @@ impl Step for Cargo {\n         // Cargo depends on procedural macros, which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {\n-            compiler: builder.compiler(self.stage, builder.build.build),\n+            compiler: self.compiler,\n             target: builder.build.build,\n         });\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n@@ -270,7 +321,7 @@ impl Step for Cargo {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rls {\n-    pub stage: u32,\n+    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -286,7 +337,7 @@ impl Step for Rls {\n \n     fn make_run(run: RunConfig) {\n         run.builder.ensure(Rls {\n-            stage: run.builder.top_stage,\n+            compiler: run.builder.compiler(run.builder.top_stage, run.builder.build.build),\n             target: run.target,\n         });\n     }\n@@ -298,11 +349,11 @@ impl Step for Rls {\n         // RLS depends on procedural macros, which requires a full host\n         // compiler to be available, so we need to depend on that.\n         builder.ensure(compile::Rustc {\n-            compiler: builder.compiler(self.stage, builder.build.build),\n+            compiler: self.compiler,\n             target: builder.build.build,\n         });\n         builder.ensure(ToolBuild {\n-            stage: self.stage,\n+            compiler: self.compiler,\n             target: self.target,\n             tool: \"rls\",\n             mode: Mode::Librustc,"}, {"sha": "e74652d85d788accd12f4e09660da3a9ea33cad8", "filename": "src/driver/driver.rs", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0565653eecd7d667dbb28bb5d3008e783950892a/src%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0565653eecd7d667dbb28bb5d3008e783950892a/src%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fdriver.rs?ref=0565653eecd7d667dbb28bb5d3008e783950892a", "patch": "@@ -1,22 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![cfg_attr(rustc, feature(rustc_private))]\n-#![cfg_attr(rustdoc, feature(rustdoc))]\n-\n-#[cfg(rustdoc)]\n-extern crate rustdoc as this;\n-\n-#[cfg(rustc)]\n-extern crate rustc_driver as this;\n-\n-fn main() {\n-    this::main()\n-}"}, {"sha": "f9400e68a16c58d2c15a527207758794d5685027", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -7,25 +7,10 @@ build = \"build.rs\"\n [lib]\n name = \"rustdoc\"\n path = \"lib.rs\"\n-crate-type = [\"dylib\"]\n \n [dependencies]\n-arena = { path = \"../libarena\" }\n env_logger = { version = \"0.4\", default-features = false }\n log = \"0.3\"\n-rustc = { path = \"../librustc\" }\n-rustc_back = { path = \"../librustc_back\" }\n-rustc_data_structures = { path = \"../librustc_data_structures\" }\n-rustc_driver = { path = \"../librustc_driver\" }\n-rustc_errors = { path = \"../librustc_errors\" }\n-rustc_lint = { path = \"../librustc_lint\" }\n-rustc_metadata = { path = \"../librustc_metadata\" }\n-rustc_resolve = { path = \"../librustc_resolve\" }\n-rustc_typeck = { path = \"../librustc_typeck\" }\n-rustc_trans = { path = \"../librustc_trans\" }\n-serialize = { path = \"../libserialize\" }\n-syntax = { path = \"../libsyntax\" }\n-syntax_pos = { path = \"../libsyntax_pos\" }\n pulldown-cmark = { version = \"0.0.14\", default-features = false }\n \n [build-dependencies]"}, {"sha": "64240d26894d00347cfc339b4df197e68d42c504", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -17,6 +17,7 @@\n        html_playground_url = \"https://play.rust-lang.org/\")]\n #![deny(warnings)]\n \n+#![feature(rustc_private)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(libc)]"}, {"sha": "4452f4a2f446bb804b1f3a82085a1ecd529d88ac", "filename": "src/rustc/Cargo.toml", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2FCargo.toml?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -7,16 +7,11 @@ version = \"0.0.0\"\n name = \"rustc\"\n path = \"rustc.rs\"\n \n-[[bin]]\n-name = \"rustdoc\"\n-path = \"rustdoc.rs\"\n-\n # All optional dependencies so the features passed to this Cargo.toml select\n # what should actually be built.\n [dependencies]\n rustc_back = { path = \"../librustc_back\" }\n rustc_driver = { path = \"../librustc_driver\" }\n-rustdoc = { path = \"../librustdoc\" }\n \n [features]\n jemalloc = [\"rustc_back/jemalloc\"]"}, {"sha": "0d6b350a1d431b1b5ff2eb2c6c1ea9b58db72f25", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -93,7 +93,7 @@ pub struct Config {\n     pub rustc_path: PathBuf,\n \n     // The rustdoc executable\n-    pub rustdoc_path: PathBuf,\n+    pub rustdoc_path: Option<PathBuf>,\n \n     // The python executable to use for LLDB\n     pub lldb_python: String,"}, {"sha": "6fa758aeabe4d4b853e7604f7269a7f6f37a6dd8", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -67,7 +67,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n     opts.reqopt(\"\", \"compile-lib-path\", \"path to host shared libraries\", \"PATH\")\n         .reqopt(\"\", \"run-lib-path\", \"path to target shared libraries\", \"PATH\")\n         .reqopt(\"\", \"rustc-path\", \"path to rustc to use for compiling\", \"PATH\")\n-        .reqopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n+        .optopt(\"\", \"rustdoc-path\", \"path to rustdoc to use for compiling\", \"PATH\")\n         .reqopt(\"\", \"lldb-python\", \"path to python to use for doc tests\", \"PATH\")\n         .reqopt(\"\", \"docck-python\", \"path to python to use for doc tests\", \"PATH\")\n         .optopt(\"\", \"valgrind-path\", \"path to Valgrind executable for Valgrind tests\", \"PROGRAM\")\n@@ -157,7 +157,7 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         compile_lib_path: make_absolute(opt_path(matches, \"compile-lib-path\")),\n         run_lib_path: make_absolute(opt_path(matches, \"run-lib-path\")),\n         rustc_path: opt_path(matches, \"rustc-path\"),\n-        rustdoc_path: opt_path(matches, \"rustdoc-path\"),\n+        rustdoc_path: matches.opt_str(\"rustdoc-path\").map(PathBuf::from),\n         lldb_python: matches.opt_str(\"lldb-python\").unwrap(),\n         docck_python: matches.opt_str(\"docck-python\").unwrap(),\n         valgrind_path: matches.opt_str(\"valgrind-path\"),\n@@ -210,7 +210,7 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"compile_lib_path: {:?}\", config.compile_lib_path));\n     logv(c, format!(\"run_lib_path: {:?}\", config.run_lib_path));\n     logv(c, format!(\"rustc_path: {:?}\", config.rustc_path.display()));\n-    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path.display()));\n+    logv(c, format!(\"rustdoc_path: {:?}\", config.rustdoc_path));\n     logv(c, format!(\"src_base: {:?}\", config.src_base.display()));\n     logv(c, format!(\"build_base: {:?}\", config.build_base.display()));\n     logv(c, format!(\"stage_id: {}\", config.stage_id));"}, {"sha": "93696561708738905beefecf607c591e14866ec6", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -1192,7 +1192,8 @@ actual:\\n\\\n                             self.testpaths.file.to_str().unwrap().to_owned()];\n         args.extend(self.props.compile_flags.iter().cloned());\n         let args = ProcArgs {\n-            prog: self.config.rustdoc_path.to_str().unwrap().to_owned(),\n+            prog: self.config.rustdoc_path\n+                .as_ref().expect(\"--rustdoc-path passed\").to_str().unwrap().to_owned(),\n             args: args,\n         };\n         self.compose_and_run_compiler(args, None)\n@@ -2163,7 +2164,8 @@ actual:\\n\\\n            .env(\"S\", src_root)\n            .env(\"RUST_BUILD_STAGE\", &self.config.stage_id)\n            .env(\"RUSTC\", cwd.join(&self.config.rustc_path))\n-           .env(\"RUSTDOC\", cwd.join(&self.config.rustdoc_path))\n+           .env(\"RUSTDOC\",\n+               cwd.join(&self.config.rustdoc_path.as_ref().expect(\"--rustdoc-path passed\")))\n            .env(\"TMPDIR\", &tmpdir)\n            .env(\"LD_LIB_PATH_ENVVAR\", procsrv::dylib_env_var())\n            .env(\"HOST_RPATH_DIR\", cwd.join(&self.config.compile_lib_path))"}, {"sha": "7f8783c9d89bea3af6ac58f65122d855ed2851b6", "filename": "src/tools/error_index_generator/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Ferror_index_generator%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2FCargo.toml?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -3,6 +3,9 @@ authors = [\"The Rust Project Developers\"]\n name = \"error_index_generator\"\n version = \"0.0.0\"\n \n+[dependencies]\n+rustdoc = { path = \"../../librustdoc\" }\n+\n [[bin]]\n name = \"error_index_generator\"\n path = \"main.rs\""}, {"sha": "b6edb76d7f98f8a2acfa457357dd603713d241e3", "filename": "src/tools/rustdoc/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Frustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Frustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2FCargo.toml?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"rustdoc-tool\"\n+version = \"0.0.0\"\n+authors = [\"The Rust Project Developers\"]\n+\n+[[bin]]\n+name = \"rustdoc\"\n+path = \"main.rs\"\n+\n+[dependencies]\n+rustdoc = { path = \"../../librustdoc\" }"}, {"sha": "9c37e249ba8cc9bdf0f674a6152ee3160c21382a", "filename": "src/tools/rustdoc/main.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Frustdoc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cc1baa2900ab344e8e8386aa8314b59051868ca/src%2Ftools%2Frustdoc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc%2Fmain.rs?ref=5cc1baa2900ab344e8e8386aa8314b59051868ca", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_private)]\n-\n extern crate rustdoc;\n \n fn main() { rustdoc::main() }", "previous_filename": "src/rustc/rustdoc.rs"}]}