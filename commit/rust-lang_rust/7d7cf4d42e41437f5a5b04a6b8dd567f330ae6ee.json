{"sha": "7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkN2NmNGQ0MmU0MTQzN2Y1YTViMDRhNmI4ZGQ1NjdmMzMwYWU2ZWU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-18T15:21:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-18T15:21:04Z"}, "message": "Merge pull request #696 from TimDiekmann/realloc\n\nAdd `realloc`", "tree": {"sha": "03dc77830b58f3e9ab43f9956d46d3bef68f5e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03dc77830b58f3e9ab43f9956d46d3bef68f5e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcuJXgCRBK7hj4Ov3rIwAAdHIIAGUcut++t+520Bz47Xccu0Bv\nALR/NX/X6hh4QBQ+q19g7LP8emlchQqOoth03KJoKFDkUrh9r9qZrXTOc8g1oidg\nbFFHIOpCH3XT60goyunCZ9RHIQXaypjP7mIlHAZ/ul8X7YNAGs/IxCX66npj0sCs\n1IXK27rbPZja2OdXpANz9EI7yjIpkKlrafYP4Lz14xsIav37NRsjT4ojKONMyF3C\nmOi6cfaw1rilYt+tevSO1pOtNpmLRXvmIDSokUv5kK5O/WtJuucRgXD3t3TCLoIS\nF5Kg+MXJXZKQNGXwfAv4qL7Q6EhW04Jjn1udEmJDHL5nw58YEMqzQNjY7S9NjkA=\n=Y22r\n-----END PGP SIGNATURE-----\n", "payload": "tree 03dc77830b58f3e9ab43f9956d46d3bef68f5e57\nparent ae9e9cb47c7b79d8bb29fab90929bd9b3606348a\nparent 9ecc07c9b2df3cf88223d97ddea95a61a548e09e\nauthor Ralf Jung <post@ralfj.de> 1555600864 +0200\ncommitter GitHub <noreply@github.com> 1555600864 +0200\n\nMerge pull request #696 from TimDiekmann/realloc\n\nAdd `realloc`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "html_url": "https://github.com/rust-lang/rust/commit/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae9e9cb47c7b79d8bb29fab90929bd9b3606348a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9e9cb47c7b79d8bb29fab90929bd9b3606348a", "html_url": "https://github.com/rust-lang/rust/commit/ae9e9cb47c7b79d8bb29fab90929bd9b3606348a"}, {"sha": "9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ecc07c9b2df3cf88223d97ddea95a61a548e09e", "html_url": "https://github.com/rust-lang/rust/commit/9ecc07c9b2df3cf88223d97ddea95a61a548e09e"}], "stats": {"total": 84, "additions": 84, "deletions": 0}, "files": [{"sha": "ae6aff10ac209728a85fb244e787fd19cf757709", "filename": "src/fn_call.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "patch": "@@ -147,6 +147,45 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                     )?;\n                 }\n             }\n+            \"realloc\" => {\n+                let old_ptr = this.read_scalar(args[0])?.not_undef()?;\n+                let new_size = this.read_scalar(args[1])?.to_usize(this)?;\n+                let align = this.tcx.data_layout.pointer_align.abi;\n+                if old_ptr.is_null_ptr(this) {\n+                    if new_size == 0 {\n+                        this.write_null(dest)?;\n+                    } else {\n+                        let new_ptr = this.memory_mut().allocate(\n+                            Size::from_bytes(new_size),\n+                            align,\n+                            MiriMemoryKind::C.into()\n+                        );\n+                        this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                    }\n+                } else {\n+                    let old_ptr = old_ptr.to_ptr()?;\n+                    let memory = this.memory_mut();\n+                    let old_size = Size::from_bytes(memory.get(old_ptr.alloc_id)?.bytes.len() as u64);\n+                    if new_size == 0 {\n+                        memory.deallocate(\n+                            old_ptr,\n+                            Some((old_size, align)),\n+                            MiriMemoryKind::C.into(),\n+                        )?;\n+                        this.write_null(dest)?;\n+                    } else {\n+                        let new_ptr = memory.reallocate(\n+                            old_ptr,\n+                            old_size,\n+                            align,\n+                            Size::from_bytes(new_size),\n+                            align,\n+                            MiriMemoryKind::C.into(),\n+                        )?;\n+                        this.write_scalar(Scalar::Ptr(new_ptr), dest)?;\n+                    }\n+                }\n+            }\n \n             \"__rust_alloc\" => {\n                 let size = this.read_scalar(args[0])?.to_usize(this)?;"}, {"sha": "c23b3e645c70350913de10b72ba54d5602526f8a", "filename": "tests/run-pass/realloc.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee/tests%2Frun-pass%2Frealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee/tests%2Frun-pass%2Frealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Frealloc.rs?ref=7d7cf4d42e41437f5a5b04a6b8dd567f330ae6ee", "patch": "@@ -0,0 +1,45 @@\n+//ignore-windows: Uses POSIX APIs\n+\n+#![feature(rustc_private)]\n+\n+use core::{slice, ptr};\n+\n+extern crate libc;\n+\n+fn main() {\n+    unsafe {\n+        // Use calloc for initialized memory\n+        let p1 = libc::calloc(20, 1);\n+\n+        // old size < new size\n+        let p2 = libc::realloc(p1, 40);\n+        let slice = slice::from_raw_parts(p2 as *const u8, 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n+\n+        // old size == new size\n+        let p3 = libc::realloc(p2, 40);\n+        let slice = slice::from_raw_parts(p3 as *const u8, 20);\n+        assert_eq!(&slice, &[0_u8; 20]);\n+\n+        // old size > new size\n+        let p4 = libc::realloc(p3, 10);\n+        let slice = slice::from_raw_parts(p4 as *const u8, 10);\n+        assert_eq!(&slice, &[0_u8; 10]);\n+\n+        libc::free(p4);\n+    }\n+\n+    unsafe {\n+        let p1 = libc::malloc(20);\n+\n+        let p2 = libc::realloc(p1, 0);\n+        assert!(p2.is_null());\n+    }\n+\n+    unsafe {\n+        let p1 = libc::realloc(ptr::null_mut(), 20);\n+        assert!(!p1.is_null());\n+\n+        libc::free(p1);\n+    }\n+}"}]}