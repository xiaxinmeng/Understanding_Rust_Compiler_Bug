{"sha": "6200e761f0ef58510ad2acc383b29de7e7a79bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDBlNzYxZjBlZjU4NTEwYWQyYWNjMzgzYjI5ZGU3ZTdhNzliY2Q=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-03-20T13:12:56Z"}, "committer": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2014-03-25T20:49:55Z"}, "message": "Changed `iter::Extendable` and `iter::FromIterator` to take a `Iterator` by value", "tree": {"sha": "4eb8bee6a91f0d8cbc79b33506344a56f1891e5d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4eb8bee6a91f0d8cbc79b33506344a56f1891e5d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6200e761f0ef58510ad2acc383b29de7e7a79bcd", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6200e761f0ef58510ad2acc383b29de7e7a79bcd", "html_url": "https://github.com/rust-lang/rust/commit/6200e761f0ef58510ad2acc383b29de7e7a79bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6200e761f0ef58510ad2acc383b29de7e7a79bcd/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5571abc222520537daa00fc8256040647eec86", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5571abc222520537daa00fc8256040647eec86", "html_url": "https://github.com/rust-lang/rust/commit/1f5571abc222520537daa00fc8256040647eec86"}], "stats": {"total": 153, "additions": 75, "deletions": 78}, "files": [{"sha": "914244cc4319ea695709dd6e353a0cd6979cb5a7", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -582,16 +582,16 @@ impl<A> DoubleEndedIterator<A> for MoveItems<A> {\n }\n \n impl<A> FromIterator<A> for DList<A> {\n-    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> DList<A> {\n+    fn from_iterator<T: Iterator<A>>(iterator: T) -> DList<A> {\n         let mut ret = DList::new();\n         ret.extend(iterator);\n         ret\n     }\n }\n \n impl<A> Extendable<A> for DList<A> {\n-    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n-        for elt in *iterator { self.push_back(elt); }\n+    fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n+        for elt in iterator { self.push_back(elt); }\n     }\n }\n "}, {"sha": "b03cfced7cdbe869378cebc0e5d44a62fbf273fe", "filename": "src/libcollections/hashmap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhashmap.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -1356,7 +1356,7 @@ pub type Values<'a, K, V> =\n     iter::Map<'static, (&'a K, &'a V), &'a V, Entries<'a, K, V>>;\n \n impl<K: TotalEq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> for HashMap<K, V, H> {\n-    fn from_iterator<T: Iterator<(K, V)>>(iter: &mut T) -> HashMap<K, V, H> {\n+    fn from_iterator<T: Iterator<(K, V)>>(iter: T) -> HashMap<K, V, H> {\n         let (lower, _) = iter.size_hint();\n         let mut map = HashMap::with_capacity_and_hasher(lower, Default::default());\n         map.extend(iter);\n@@ -1365,8 +1365,8 @@ impl<K: TotalEq + Hash<S>, V, S, H: Hasher<S> + Default> FromIterator<(K, V)> fo\n }\n \n impl<K: TotalEq + Hash<S>, V, S, H: Hasher<S> + Default> Extendable<(K, V)> for HashMap<K, V, H> {\n-    fn extend<T: Iterator<(K, V)>>(&mut self, iter: &mut T) {\n-        for (k, v) in *iter {\n+    fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n+        for (k, v) in iter {\n             self.insert(k, v);\n         }\n     }\n@@ -1540,7 +1540,7 @@ impl<T: TotalEq + Hash<S> + fmt::Show, S, H: Hasher<S>> fmt::Show for HashSet<T,\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSet<T, H> {\n-    fn from_iterator<I: Iterator<T>>(iter: &mut I) -> HashSet<T, H> {\n+    fn from_iterator<I: Iterator<T>>(iter: I) -> HashSet<T, H> {\n         let (lower, _) = iter.size_hint();\n         let mut set = HashSet::with_capacity_and_hasher(lower, Default::default());\n         set.extend(iter);\n@@ -1549,8 +1549,8 @@ impl<T: TotalEq + Hash<S>, S, H: Hasher<S> + Default> FromIterator<T> for HashSe\n }\n \n impl<T: TotalEq + Hash<S>, S, H: Hasher<S> + Default> Extendable<T> for HashSet<T, H> {\n-    fn extend<I: Iterator<T>>(&mut self, iter: &mut I) {\n-        for k in *iter {\n+    fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n+        for k in iter {\n             self.insert(k);\n         }\n     }"}, {"sha": "65ccfe3ff7080fd9882b56dc0bb37a913bba5f00", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -193,22 +193,21 @@ impl<'a, T> Iterator<&'a T> for Items<'a, T> {\n }\n \n impl<T: Ord> FromIterator<T> for PriorityQueue<T> {\n-    fn from_iterator<Iter: Iterator<T>>(iter: &mut Iter) -> PriorityQueue<T> {\n+    fn from_iterator<Iter: Iterator<T>>(iter: Iter) -> PriorityQueue<T> {\n         let mut q = PriorityQueue::new();\n         q.extend(iter);\n-\n         q\n     }\n }\n \n impl<T: Ord> Extendable<T> for PriorityQueue<T> {\n-    fn extend<Iter: Iterator<T>>(&mut self, iter: &mut Iter) {\n+    fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n         let (lower, _) = iter.size_hint();\n \n         let len = self.capacity();\n         self.reserve(len + lower);\n \n-        for elem in *iter {\n+        for elem in iter {\n             self.push(elem);\n         }\n     }"}, {"sha": "05a4a2ba5fb31e90191ba4a04bd6fd397db37278", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -386,7 +386,7 @@ impl<A: Eq> Eq for RingBuf<A> {\n }\n \n impl<A> FromIterator<A> for RingBuf<A> {\n-    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> RingBuf<A> {\n+    fn from_iterator<T: Iterator<A>>(iterator: T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n         let mut deq = RingBuf::with_capacity(lower);\n         deq.extend(iterator);\n@@ -395,8 +395,8 @@ impl<A> FromIterator<A> for RingBuf<A> {\n }\n \n impl<A> Extendable<A> for RingBuf<A> {\n-    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n-        for elt in *iterator {\n+    fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n+        for elt in iterator {\n             self.push_back(elt);\n         }\n     }"}, {"sha": "80886f9608686dd17001487f9b806996b72decb3", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -971,7 +971,7 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n }\n \n impl<K: TotalOrd, V> FromIterator<(K, V)> for TreeMap<K, V> {\n-    fn from_iterator<T: Iterator<(K, V)>>(iter: &mut T) -> TreeMap<K, V> {\n+    fn from_iterator<T: Iterator<(K, V)>>(iter: T) -> TreeMap<K, V> {\n         let mut map = TreeMap::new();\n         map.extend(iter);\n         map\n@@ -980,15 +980,15 @@ impl<K: TotalOrd, V> FromIterator<(K, V)> for TreeMap<K, V> {\n \n impl<K: TotalOrd, V> Extendable<(K, V)> for TreeMap<K, V> {\n     #[inline]\n-    fn extend<T: Iterator<(K, V)>>(&mut self, iter: &mut T) {\n-        for (k, v) in *iter {\n+    fn extend<T: Iterator<(K, V)>>(&mut self, mut iter: T) {\n+        for (k, v) in iter {\n             self.insert(k, v);\n         }\n     }\n }\n \n impl<T: TotalOrd> FromIterator<T> for TreeSet<T> {\n-    fn from_iterator<Iter: Iterator<T>>(iter: &mut Iter) -> TreeSet<T> {\n+    fn from_iterator<Iter: Iterator<T>>(iter: Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n         set.extend(iter);\n         set\n@@ -997,8 +997,8 @@ impl<T: TotalOrd> FromIterator<T> for TreeSet<T> {\n \n impl<T: TotalOrd> Extendable<T> for TreeSet<T> {\n     #[inline]\n-    fn extend<Iter: Iterator<T>>(&mut self, iter: &mut Iter) {\n-        for elem in *iter {\n+    fn extend<Iter: Iterator<T>>(&mut self, mut iter: Iter) {\n+        for elem in iter {\n             self.insert(elem);\n         }\n     }"}, {"sha": "f1cc9367509ad205cff9c34e2c98fa3e42a094e5", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -261,16 +261,16 @@ impl<T> TrieMap<T> {\n }\n \n impl<T> FromIterator<(uint, T)> for TrieMap<T> {\n-    fn from_iterator<Iter: Iterator<(uint, T)>>(iter: &mut Iter) -> TrieMap<T> {\n+    fn from_iterator<Iter: Iterator<(uint, T)>>(iter: Iter) -> TrieMap<T> {\n         let mut map = TrieMap::new();\n         map.extend(iter);\n         map\n     }\n }\n \n impl<T> Extendable<(uint, T)> for TrieMap<T> {\n-    fn extend<Iter: Iterator<(uint, T)>>(&mut self, iter: &mut Iter) {\n-        for (k, v) in *iter {\n+    fn extend<Iter: Iterator<(uint, T)>>(&mut self, mut iter: Iter) {\n+        for (k, v) in iter {\n             self.insert(k, v);\n         }\n     }\n@@ -346,16 +346,16 @@ impl TrieSet {\n }\n \n impl FromIterator<uint> for TrieSet {\n-    fn from_iterator<Iter: Iterator<uint>>(iter: &mut Iter) -> TrieSet {\n+    fn from_iterator<Iter: Iterator<uint>>(iter: Iter) -> TrieSet {\n         let mut set = TrieSet::new();\n         set.extend(iter);\n         set\n     }\n }\n \n impl Extendable<uint> for TrieSet {\n-    fn extend<Iter: Iterator<uint>>(&mut self, iter: &mut Iter) {\n-        for elem in *iter {\n+    fn extend<Iter: Iterator<uint>>(&mut self, mut iter: Iter) {\n+        for elem in iter {\n             self.insert(elem);\n         }\n     }"}, {"sha": "9c017a27faa1fabf3b1979404910f92e74e2efd0", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -153,7 +153,7 @@ impl Iterator<Path> for Paths {\n                     // so we don't need to check the children\n                     return Some(path);\n                 } else {\n-                    self.todo.extend(&mut list_dir_sorted(&path).move_iter().map(|x|(x,idx+1)));\n+                    self.todo.extend(list_dir_sorted(&path).move_iter().map(|x|(x,idx+1)));\n                 }\n             }\n         }"}, {"sha": "86db7cbb625103cbbb840ce79f15533254a81e90", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -2185,7 +2185,7 @@ mod bigint_tests {\n             nums.push(BigInt::from_slice(Minus, *s));\n         }\n         nums.push(Zero::zero());\n-        nums.extend(&mut vs.iter().map(|s| BigInt::from_slice(Plus, *s)));\n+        nums.extend(vs.iter().map(|s| BigInt::from_slice(Plus, *s)));\n \n         for (i, ni) in nums.iter().enumerate() {\n             for (j0, nj) in nums.slice(i, nums.len()).iter().enumerate() {"}, {"sha": "786be3798a1a01207c3d19ec51edff09f26aea81", "filename": "src/librustc/back/archive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farchive.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -41,8 +41,8 @@ fn run_ar(sess: &Session, args: &str, cwd: Option<&Path>,\n     let ar = get_ar_prog(sess);\n \n     let mut args = vec!(args.to_owned());\n-    let mut paths = paths.iter().map(|p| p.as_str().unwrap().to_owned());\n-    args.extend(&mut paths);\n+    let paths = paths.iter().map(|p| p.as_str().unwrap().to_owned());\n+    args.extend(paths);\n     debug!(\"{} {}\", ar, args.connect(\" \"));\n     match cwd {\n         Some(p) => { debug!(\"inside {}\", p.display()); }\n@@ -190,7 +190,7 @@ impl<'a> Archive<'a> {\n \n         // Finally, add all the renamed files to this archive\n         let mut args = vec!(&self.dst);\n-        args.extend(&mut inputs.iter());\n+        args.extend(inputs.iter());\n         run_ar(self.sess, \"r\", None, args.as_slice());\n         Ok(())\n     }"}, {"sha": "1e0e38bb45b39ef4a2058bffbbffd905c8a482a5", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -496,7 +496,7 @@ pub fn collect_crate_types(session: &Session,\n         return vec!(CrateTypeExecutable)\n     }\n     let mut base = session.opts.crate_types.clone();\n-    let mut iter = attrs.iter().filter_map(|a| {\n+    let iter = attrs.iter().filter_map(|a| {\n         if a.name().equiv(&(\"crate_type\")) {\n             match a.value_str() {\n                 Some(ref n) if n.equiv(&(\"rlib\")) => Some(CrateTypeRlib),\n@@ -525,7 +525,7 @@ pub fn collect_crate_types(session: &Session,\n             None\n         }\n     });\n-    base.extend(&mut iter);\n+    base.extend(iter);\n     if base.len() == 0 {\n         base.push(CrateTypeExecutable);\n     }"}, {"sha": "1d2e1d0232c348a411d4dcaf39a41daf86811b57", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -476,7 +476,7 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n         }\n         None => {}\n     }\n-    llargs.extend(&mut args.iter().map(|arg| arg.val));\n+    llargs.extend(args.iter().map(|arg| arg.val));\n \n     let retval = Call(bcx, fn_ptr, llargs.as_slice(), []);\n     if type_is_zero_size(ccx, f.sig.output) || fcx.llretptr.get().is_some() {"}, {"sha": "684a6624c5e1a7262ec1dbacc1e028d5e00dd090", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -57,8 +57,8 @@ pub fn type_of_rust_fn(cx: &CrateContext, has_env: bool,\n     }\n \n     // ... then explicit args.\n-    let mut input_tys = inputs.iter().map(|&arg_ty| type_of_explicit_arg(cx, arg_ty));\n-    atys.extend(&mut input_tys);\n+    let input_tys = inputs.iter().map(|&arg_ty| type_of_explicit_arg(cx, arg_ty));\n+    atys.extend(input_tys);\n \n     // Use the output as the actual return value if it's immediate.\n     if use_out_pointer || return_type_is_void(cx, output) {"}, {"sha": "0098bcfb4b77f682483ef9c0e8e8d121d2393cf8", "filename": "src/librustdoc/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibrustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ffold.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -25,7 +25,7 @@ pub trait DocFolder {\n             StructItem(mut i) => {\n                 let mut foo = Vec::new(); swap(&mut foo, &mut i.fields);\n                 let num_fields = foo.len();\n-                i.fields.extend(&mut foo.move_iter().filter_map(|x| self.fold_item(x)));\n+                i.fields.extend(foo.move_iter().filter_map(|x| self.fold_item(x)));\n                 i.fields_stripped |= num_fields != i.fields.len();\n                 StructItem(i)\n             },\n@@ -35,7 +35,7 @@ pub trait DocFolder {\n             EnumItem(mut i) => {\n                 let mut foo = Vec::new(); swap(&mut foo, &mut i.variants);\n                 let num_variants = foo.len();\n-                i.variants.extend(&mut foo.move_iter().filter_map(|x| self.fold_item(x)));\n+                i.variants.extend(foo.move_iter().filter_map(|x| self.fold_item(x)));\n                 i.variants_stripped |= num_variants != i.variants.len();\n                 EnumItem(i)\n             },\n@@ -57,12 +57,12 @@ pub trait DocFolder {\n                     }\n                 }\n                 let mut foo = Vec::new(); swap(&mut foo, &mut i.methods);\n-                i.methods.extend(&mut foo.move_iter().filter_map(|x| vtrm(self, x)));\n+                i.methods.extend(foo.move_iter().filter_map(|x| vtrm(self, x)));\n                 TraitItem(i)\n             },\n             ImplItem(mut i) => {\n                 let mut foo = Vec::new(); swap(&mut foo, &mut i.methods);\n-                i.methods.extend(&mut foo.move_iter().filter_map(|x| self.fold_item(x)));\n+                i.methods.extend(foo.move_iter().filter_map(|x| self.fold_item(x)));\n                 ImplItem(i)\n             },\n             VariantItem(i) => {\n@@ -72,7 +72,7 @@ pub trait DocFolder {\n                         let mut foo = Vec::new(); swap(&mut foo, &mut j.fields);\n                         let num_fields = foo.len();\n                         let c = |x| self.fold_item(x);\n-                        j.fields.extend(&mut foo.move_iter().filter_map(c));\n+                        j.fields.extend(foo.move_iter().filter_map(c));\n                         j.fields_stripped |= num_fields != j.fields.len();\n                         VariantItem(Variant {kind: StructVariant(j), ..i2})\n                     },"}, {"sha": "0a19bc43b281d19ece0ade63ea132683a6d2fe47", "filename": "src/libstd/iter.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiter.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -76,13 +76,13 @@ use mem;\n /// Conversion from an `Iterator`\n pub trait FromIterator<A> {\n     /// Build a container with elements from an external iterator.\n-    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> Self;\n+    fn from_iterator<T: Iterator<A>>(iterator: T) -> Self;\n }\n \n /// A type growable from an `Iterator` implementation\n pub trait Extendable<A>: FromIterator<A> {\n     /// Extend a container with the elements yielded by an iterator\n-    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T);\n+    fn extend<T: Iterator<A>>(&mut self, iterator: T);\n }\n \n /// An interface for dealing with \"external iterators\". These types of iterators\n@@ -460,7 +460,7 @@ pub trait Iterator<A> {\n     /// ```\n     #[inline]\n     fn collect<B: FromIterator<A>>(&mut self) -> B {\n-        FromIterator::from_iterator(self)\n+        FromIterator::from_iterator(self.by_ref())\n     }\n \n     /// Loops through `n` iterations, returning the `n`th element of the\n@@ -2336,7 +2336,7 @@ mod tests {\n     #[test]\n     fn test_counter_from_iter() {\n         let mut it = count(0, 5).take(10);\n-        let xs: ~[int] = FromIterator::from_iterator(&mut it);\n+        let xs: ~[int] = FromIterator::from_iterator(it);\n         assert_eq!(xs, ~[0, 5, 10, 15, 20, 25, 30, 35, 40, 45]);\n     }\n "}, {"sha": "14dc42195e190f6822b593ba624615f0dfcc5250", "filename": "src/libstd/option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Foption.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -593,7 +593,7 @@ pub fn collect<T, Iter: Iterator<Option<T>>, V: FromIterator<T>>(iter: Iter) ->\n         }\n     });\n \n-    let v: V = FromIterator::from_iterator(&mut iter);\n+    let v: V = FromIterator::from_iterator(iter.by_ref());\n \n     if iter.state {\n         None"}, {"sha": "cb4c830f380e2e93952c8c2eaa6c9c7e735b70c7", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -277,7 +277,7 @@ impl GenericPath for Path {\n                     (None, None) => break,\n                     (Some(a), None) => {\n                         comps.push(a);\n-                        comps.extend(&mut ita);\n+                        comps.extend(ita.by_ref());\n                         break;\n                     }\n                     (None, _) => comps.push(dot_dot_static),\n@@ -290,7 +290,7 @@ impl GenericPath for Path {\n                             comps.push(dot_dot_static);\n                         }\n                         comps.push(a);\n-                        comps.extend(&mut ita);\n+                        comps.extend(ita.by_ref());\n                         break;\n                     }\n                 }"}, {"sha": "d488997b0c292c552acd01e07d5e8f9e002e7f54", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -539,7 +539,7 @@ impl GenericPath for Path {\n                     (Some(a), None) => {\n                         comps.push(a);\n                         if !a_verb {\n-                            comps.extend(&mut ita);\n+                            comps.extend(ita.by_ref());\n                             break;\n                         }\n                     }\n@@ -561,7 +561,7 @@ impl GenericPath for Path {\n                         }\n                         comps.push(a);\n                         if !a_verb {\n-                            comps.extend(&mut ita);\n+                            comps.extend(ita.by_ref());\n                             break;\n                         }\n                     }"}, {"sha": "df1c4ae60ba0b22fa3e64acb6c6ae4e60e0882f6", "filename": "src/libstd/result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fresult.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -230,7 +230,7 @@ pub fn collect<T, E, Iter: Iterator<Result<T, E>>, V: FromIterator<T>>(iter: Ite\n         }\n     });\n \n-    let v: V = FromIterator::from_iterator(&mut iter);\n+    let v: V = FromIterator::from_iterator(iter.by_ref());\n \n     match iter.state {\n         Some(err) => Err(err),"}, {"sha": "8788a584f30ef1afe654a766e1df376b390de347", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -2919,22 +2919,22 @@ impl<T> Drop for MoveItems<T> {\n pub type RevMoveItems<T> = Rev<MoveItems<T>>;\n \n impl<A> FromIterator<A> for ~[A] {\n-    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n+    fn from_iterator<T: Iterator<A>>(mut iterator: T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n-        for x in *iterator {\n+        for x in iterator {\n             xs.push(x);\n         }\n         xs\n     }\n }\n \n impl<A> Extendable<A> for ~[A] {\n-    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n+    fn extend<T: Iterator<A>>(&mut self, mut iterator: T) {\n         let (lower, _) = iterator.size_hint();\n         let len = self.len();\n         self.reserve_exact(len + lower);\n-        for x in *iterator {\n+        for x in iterator {\n             self.push(x);\n         }\n     }"}, {"sha": "fac4202217f49c49a89fa5f00c7751c3be2b85a0", "filename": "src/libstd/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -3019,7 +3019,7 @@ impl Clone for ~str {\n \n impl FromIterator<char> for ~str {\n     #[inline]\n-    fn from_iterator<T: Iterator<char>>(iterator: &mut T) -> ~str {\n+    fn from_iterator<T: Iterator<char>>(iterator: T) -> ~str {\n         let (lower, _) = iterator.size_hint();\n         let mut buf = with_capacity(lower);\n         buf.extend(iterator);\n@@ -3029,11 +3029,11 @@ impl FromIterator<char> for ~str {\n \n impl Extendable<char> for ~str {\n     #[inline]\n-    fn extend<T: Iterator<char>>(&mut self, iterator: &mut T) {\n+    fn extend<T: Iterator<char>>(&mut self, mut iterator: T) {\n         let (lower, _) = iterator.size_hint();\n         let reserve = lower + self.len();\n         self.reserve(reserve);\n-        for ch in *iterator {\n+        for ch in iterator {\n             self.push_char(ch)\n         }\n     }\n@@ -3219,7 +3219,7 @@ mod tests {\n         let mut cpy = data.clone();\n         let other = \"abc\";\n         let mut it = other.chars();\n-        cpy.extend(&mut it);\n+        cpy.extend(it);\n         assert_eq!(cpy, data + other);\n     }\n "}, {"sha": "4454801c12946f1d13ccec6353e665a96777743f", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -305,21 +305,21 @@ impl<T:Clone> Clone for Vec<T> {\n }\n \n impl<T> FromIterator<T> for Vec<T> {\n-    fn from_iterator<I:Iterator<T>>(iterator: &mut I) -> Vec<T> {\n+    fn from_iterator<I:Iterator<T>>(mut iterator: I) -> Vec<T> {\n         let (lower, _) = iterator.size_hint();\n         let mut vector = Vec::with_capacity(lower);\n-        for element in *iterator {\n+        for element in iterator {\n             vector.push(element)\n         }\n         vector\n     }\n }\n \n impl<T> Extendable<T> for Vec<T> {\n-    fn extend<I: Iterator<T>>(&mut self, iterator: &mut I) {\n+    fn extend<I: Iterator<T>>(&mut self, mut iterator: I) {\n         let (lower, _) = iterator.size_hint();\n         self.reserve_additional(lower);\n-        for element in *iterator {\n+        for element in iterator {\n             self.push(element)\n         }\n     }\n@@ -1429,12 +1429,12 @@ mod tests {\n         let mut v = Vec::new();\n         let mut w = Vec::new();\n \n-        v.extend(&mut range(0, 3));\n+        v.extend(range(0, 3));\n         for i in range(0, 3) { w.push(i) }\n \n         assert_eq!(v, w);\n \n-        v.extend(&mut range(3, 10));\n+        v.extend(range(3, 10));\n         for i in range(3, 10) { w.push(i) }\n \n         assert_eq!(v, w);"}, {"sha": "2bcb9c4a229be1ec2fb2e65a635ff62ca7f10c38", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -359,7 +359,7 @@ impl<'a> ExtCtxt<'a> {\n     pub fn mod_path(&self) -> Vec<ast::Ident> {\n         let mut v = Vec::new();\n         v.push(token::str_to_ident(self.ecfg.crate_id.name));\n-        v.extend(&mut self.mod_path.iter().map(|a| *a));\n+        v.extend(self.mod_path.iter().map(|a| *a));\n         return v;\n     }\n     pub fn bt_push(&mut self, ei: codemap::ExpnInfo) {"}, {"sha": "a959e388bcbec6d64dab05aa51e4a3cefc00ae70", "filename": "src/libsyntax/ext/deriving/generic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -365,10 +365,10 @@ impl<'a> TraitDef<'a> {\n         let mut ty_params = ty_params.into_vec();\n \n         // Copy the lifetimes\n-        lifetimes.extend(&mut generics.lifetimes.iter().map(|l| *l));\n+        lifetimes.extend(generics.lifetimes.iter().map(|l| *l));\n \n         // Create the type parameters.\n-        ty_params.extend(&mut generics.ty_params.iter().map(|ty_param| {\n+        ty_params.extend(generics.ty_params.iter().map(|ty_param| {\n             // I don't think this can be moved out of the loop, since\n             // a TyParamBound requires an ast id\n             let mut bounds ="}, {"sha": "e6494bf1aca8a8179d24699c8f26a86a19573a6f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -282,7 +282,7 @@ pub fn expand_item(it: @ast::Item, fld: &mut MacroExpander)\n                 let mut items: SmallVector<@ast::Item> = SmallVector::zero();\n                 dec_fn(fld.cx, attr.span, attr.node.value, it,\n                        |item| items.push(item));\n-                decorator_items.extend(&mut items.move_iter()\n+                decorator_items.extend(items.move_iter()\n                     .flat_map(|item| expand_item(item, fld).move_iter()));\n \n                 fld.cx.bt_pop();"}, {"sha": "57051e78667149cf37d2644a235cb65f553e1f9d", "filename": "src/libsyntax/owned_slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fowned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Fowned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fowned_slice.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -126,7 +126,7 @@ impl<T> Container for OwnedSlice<T> {\n }\n \n impl<T> FromIterator<T> for OwnedSlice<T> {\n-    fn from_iterator<I: Iterator<T>>(iter: &mut I) -> OwnedSlice<T> {\n+    fn from_iterator<I: Iterator<T>>(mut iter: I) -> OwnedSlice<T> {\n         OwnedSlice::from_vec(iter.collect())\n     }\n }"}, {"sha": "9d6295e3f28011ef8e4746fa44e52e9f19bd4af4", "filename": "src/libsyntax/util/small_vector.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6200e761f0ef58510ad2acc383b29de7e7a79bcd/src%2Flibsyntax%2Futil%2Fsmall_vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fsmall_vector.rs?ref=6200e761f0ef58510ad2acc383b29de7e7a79bcd", "patch": "@@ -29,18 +29,16 @@ impl<T> Container for SmallVector<T> {\n }\n \n impl<T> FromIterator<T> for SmallVector<T> {\n-    fn from_iterator<I: Iterator<T>>(iter: &mut I) -> SmallVector<T> {\n+    fn from_iterator<I: Iterator<T>>(iter: I) -> SmallVector<T> {\n         let mut v = Zero;\n-        for val in *iter {\n-            v.push(val);\n-        }\n+        v.extend(iter);\n         v\n     }\n }\n \n impl<T> Extendable<T> for SmallVector<T> {\n-    fn extend<I: Iterator<T>>(&mut self, iter: &mut I) {\n-        for val in *iter {\n+    fn extend<I: Iterator<T>>(&mut self, mut iter: I) {\n+        for val in iter {\n             self.push(val);\n         }\n     }"}]}