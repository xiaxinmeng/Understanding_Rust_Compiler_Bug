{"sha": "22824d21da0397d61c15a56dbb88405f4866293d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyODI0ZDIxZGEwMzk3ZDYxYzE1YTU2ZGJiODg0MDVmNDg2NjI5M2Q=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-12-23T12:02:02Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-01-23T01:18:11Z"}, "message": "rename symbols: krate -> crate", "tree": {"sha": "cdcfb835b1527bd5fbc3fa5c83fcfd8d1105d62b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdcfb835b1527bd5fbc3fa5c83fcfd8d1105d62b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22824d21da0397d61c15a56dbb88405f4866293d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22824d21da0397d61c15a56dbb88405f4866293d", "html_url": "https://github.com/rust-lang/rust/commit/22824d21da0397d61c15a56dbb88405f4866293d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22824d21da0397d61c15a56dbb88405f4866293d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f986d78c5e6d401ea3c57c7d00d24d1890675f0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f986d78c5e6d401ea3c57c7d00d24d1890675f0c", "html_url": "https://github.com/rust-lang/rust/commit/f986d78c5e6d401ea3c57c7d00d24d1890675f0c"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "6202acfad06c91c500c042f87a1fb64ae05d22dd", "filename": "clippy_dev/src/crater.rs", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/22824d21da0397d61c15a56dbb88405f4866293d/clippy_dev%2Fsrc%2Fcrater.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22824d21da0397d61c15a56dbb88405f4866293d/clippy_dev%2Fsrc%2Fcrater.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fcrater.rs?ref=22824d21da0397d61c15a56dbb88405f4866293d", "patch": "@@ -1,21 +1,29 @@\n+// Run clippy on a fixed set of crates and collect the warnings.\n+// This helps observing the impact clippy changs have on a set of real-world code.\n+//\n+// When a new lint is introduced, we can search the results for new warnings and check for false\n+// positives.\n+\n #![allow(clippy::filter_map)]\n \n use crate::clippy_project_root;\n-use serde::{Deserialize, Serialize};\n+\n use std::collections::HashMap;\n use std::process::Command;\n use std::{fs::write, path::PathBuf};\n \n+use serde::{Deserialize, Serialize};\n+\n // crate data we stored in the toml, can have multiple versions.\n // if so, one TomlKrate maps to several KrateSources\n-struct TomlKrate {\n+struct TomlCrate {\n     name: String,\n     versions: Vec<String>,\n }\n \n // represents an archive we download from crates.io\n #[derive(Debug, Serialize, Deserialize, Eq, Hash, PartialEq)]\n-struct KrateSource {\n+struct CrateSource {\n     name: String,\n     version: String,\n }\n@@ -28,22 +36,15 @@ struct CrateList {\n \n // represents the extracted sourcecode of a crate\n #[derive(Debug)]\n-struct Krate {\n+struct Crate {\n     version: String,\n     name: String,\n     // path to the extracted sources that clippy can check\n     path: PathBuf,\n }\n \n-impl KrateSource {\n-    fn new(name: &str, version: &str) -> Self {\n-        KrateSource {\n-            version: version.into(),\n-            name: name.into(),\n-        }\n-    }\n-\n-    fn download_and_extract(&self) -> Krate {\n+impl CrateSource {\n+    fn download_and_extract(&self) -> Crate {\n         let extract_dir = PathBuf::from(\"target/crater/crates\");\n         let krate_download_dir = PathBuf::from(\"target/crater/downloads\");\n \n@@ -80,15 +81,15 @@ impl KrateSource {\n         }\n         // crate is extracted, return a new Krate object which contains the path to the extracted\n         // sources that clippy can check\n-        Krate {\n+        Crate {\n             version: self.version.clone(),\n             name: self.name.clone(),\n             path: extract_dir.join(format!(\"{}-{}/\", self.name, self.version)),\n         }\n     }\n }\n \n-impl Krate {\n+impl Crate {\n     fn run_clippy_lints(&self, cargo_clippy_path: &PathBuf) -> Vec<String> {\n         println!(\"Linting {} {}...\", &self.name, &self.version);\n         let cargo_clippy_path = std::fs::canonicalize(cargo_clippy_path).unwrap();\n@@ -144,32 +145,32 @@ fn build_clippy() {\n         .expect(\"Failed to build clippy!\");\n }\n \n-// get a list of KrateSources we want to check from a \"crater_crates.toml\" file.\n-fn read_crates() -> Vec<KrateSource> {\n+// get a list of CrateSources we want to check from a \"crater_crates.toml\" file.\n+fn read_crates() -> Vec<CrateSource> {\n     let toml_path = PathBuf::from(\"clippy_dev/crater_crates.toml\");\n     let toml_content: String =\n         std::fs::read_to_string(&toml_path).unwrap_or_else(|_| panic!(\"Failed to read {}\", toml_path.display()));\n     let crate_list: CrateList =\n         toml::from_str(&toml_content).unwrap_or_else(|e| panic!(\"Failed to parse {}: \\n{}\", toml_path.display(), e));\n     // parse the hashmap of the toml file into a list of crates\n-    let tomlkrates: Vec<TomlKrate> = crate_list\n+    let tomlcrates: Vec<TomlCrate> = crate_list\n         .crates\n         .into_iter()\n-        .map(|(name, versions)| TomlKrate { name, versions })\n+        .map(|(name, versions)| TomlCrate { name, versions })\n         .collect();\n \n-    // flatten TomlKrates into KrateSources (one TomlKrates may represent several versions of a crate =>\n-    // multiple kratesources)\n-    let mut krate_sources = Vec::new();\n-    tomlkrates.into_iter().for_each(|tk| {\n+    // flatten TomlCrates into CrateSources (one TomlCrates may represent several versions of a crate =>\n+    // multiple Cratesources)\n+    let mut crate_sources = Vec::new();\n+    tomlcrates.into_iter().for_each(|tk| {\n         tk.versions.iter().for_each(|ver| {\n-            krate_sources.push(KrateSource {\n+            crate_sources.push(CrateSource {\n                 name: tk.name.clone(),\n                 version: ver.to_string(),\n             });\n         })\n     });\n-    krate_sources\n+    crate_sources\n }\n \n // the main fn"}]}