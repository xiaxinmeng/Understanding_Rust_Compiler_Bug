{"sha": "a2a74bf27889d32a22fff6a0004e0bf471398c47", "node_id": "C_kwDOAAsO6NoAKGEyYTc0YmYyNzg4OWQzMmEyMmZmZjZhMDAwNGUwYmY0NzEzOThjNDc", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T18:49:25Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T18:49:25Z"}, "message": "Remove some of the unnecessary helpfer functions from CompletionContext", "tree": {"sha": "49ed2e2eb7d232bdf0d5a6cffa96fbe1021a6636", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49ed2e2eb7d232bdf0d5a6cffa96fbe1021a6636"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2a74bf27889d32a22fff6a0004e0bf471398c47", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a74bf27889d32a22fff6a0004e0bf471398c47", "html_url": "https://github.com/rust-lang/rust/commit/a2a74bf27889d32a22fff6a0004e0bf471398c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2a74bf27889d32a22fff6a0004e0bf471398c47/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0c1816e3a59fb7bf334196a3d990b3dafc2b586", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0c1816e3a59fb7bf334196a3d990b3dafc2b586", "html_url": "https://github.com/rust-lang/rust/commit/a0c1816e3a59fb7bf334196a3d990b3dafc2b586"}], "stats": {"total": 346, "additions": 151, "deletions": 195}, "files": [{"sha": "a11652ca302fb78cd81ca0168e38d9c7c97bd4b4", "filename": "crates/ide-completion/src/completions/dot.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -46,12 +46,14 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n     match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            is_absolute_path: false,\n-            qualifier: None,\n-            kind: PathKind::Expr { .. },\n-            ..\n-        }) if !ctx.is_path_disallowed() => {}\n+        Some(\n+            path_ctx @ PathCompletionCtx {\n+                is_absolute_path: false,\n+                qualifier: None,\n+                kind: PathKind::Expr { .. },\n+                ..\n+            },\n+        ) if path_ctx.is_trivial_path() && ctx.qualifier_ctx.none() => {}\n         _ => return,\n     }\n "}, {"sha": "7c3296a0b31b13c866f3ec26541afa44b8c5ca8a", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 78, "deletions": 43, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -11,32 +11,38 @@ use crate::{\n \n pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_expr_path\");\n-    if ctx.is_path_disallowed() {\n-        return;\n-    }\n \n-    let (is_absolute_path, qualifier, in_block_expr, in_loop_body, is_func_update, after_if_expr) =\n-        match ctx.nameref_ctx() {\n-            Some(NameRefContext {\n-                path_ctx:\n-                    Some(PathCompletionCtx {\n-                        kind: PathKind::Expr { in_block_expr, in_loop_body, after_if_expr },\n-                        is_absolute_path,\n-                        qualifier,\n-                        ..\n-                    }),\n-                record_expr,\n-                ..\n-            }) => (\n-                *is_absolute_path,\n-                qualifier,\n-                *in_block_expr,\n-                *in_loop_body,\n-                record_expr.as_ref().map_or(false, |&(_, it)| it),\n-                *after_if_expr,\n-            ),\n-            _ => return,\n-        };\n+    let (\n+        is_absolute_path,\n+        qualifier,\n+        in_block_expr,\n+        in_loop_body,\n+        is_func_update,\n+        after_if_expr,\n+        wants_mut_token,\n+    ) = match ctx.nameref_ctx() {\n+        Some(NameRefContext {\n+            path_ctx:\n+                Some(PathCompletionCtx {\n+                    kind:\n+                        PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent },\n+                    is_absolute_path,\n+                    qualifier,\n+                    ..\n+                }),\n+            record_expr,\n+            ..\n+        }) if ctx.qualifier_ctx.none() => (\n+            *is_absolute_path,\n+            qualifier,\n+            *in_block_expr,\n+            *in_loop_body,\n+            record_expr.as_ref().map_or(false, |&(_, it)| it),\n+            *after_if_expr,\n+            ref_expr_parent.as_ref().map(|it| it.mut_token().is_none()).unwrap_or(false),\n+        ),\n+        _ => return,\n+    };\n \n     let scope_def_applicable = |def| {\n         use hir::{GenericParam::*, ModuleDef::*};\n@@ -164,12 +170,43 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n         None if is_absolute_path => acc.add_crate_roots(ctx),\n         None => {\n             acc.add_nameref_keywords_with_colon(ctx);\n-            if let Some(hir::Adt::Enum(e)) =\n+            if let Some(adt) =\n                 ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n             {\n-                super::enum_variants_with_paths(acc, ctx, e, |acc, ctx, variant, path| {\n-                    acc.add_qualified_enum_variant(ctx, variant, path)\n-                });\n+                let self_ty =\n+                    (|| ctx.sema.to_def(ctx.impl_def.as_ref()?)?.self_ty(ctx.db).as_adt())();\n+                let complete_self = self_ty == Some(adt);\n+\n+                match adt {\n+                    hir::Adt::Struct(strukt) => {\n+                        let path = ctx\n+                            .module\n+                            .find_use_path(ctx.db, hir::ModuleDef::from(strukt))\n+                            .filter(|it| it.len() > 1);\n+\n+                        acc.add_struct_literal(ctx, strukt, path, None);\n+\n+                        if complete_self {\n+                            acc.add_struct_literal(ctx, strukt, None, Some(hir::known::SELF_TYPE));\n+                        }\n+                    }\n+                    hir::Adt::Union(un) => {\n+                        let path = ctx\n+                            .module\n+                            .find_use_path(ctx.db, hir::ModuleDef::from(un))\n+                            .filter(|it| it.len() > 1);\n+\n+                        acc.add_union_literal(ctx, un, path, None);\n+                        if complete_self {\n+                            acc.add_union_literal(ctx, un, None, Some(hir::known::SELF_TYPE));\n+                        }\n+                    }\n+                    hir::Adt::Enum(e) => {\n+                        super::enum_variants_with_paths(acc, ctx, e, |acc, ctx, variant, path| {\n+                            acc.add_qualified_enum_variant(ctx, variant, path)\n+                        });\n+                    }\n+                }\n             }\n             ctx.process_all_names(&mut |name, def| {\n                 if scope_def_applicable(def) {\n@@ -180,20 +217,18 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n             if !is_func_update {\n                 let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n-                if ctx.expects_expression() {\n-                    if !in_block_expr {\n-                        add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");\n-                    }\n-                    add_keyword(\"match\", \"match $1 {\\n    $0\\n}\");\n-                    add_keyword(\"while\", \"while $1 {\\n    $0\\n}\");\n-                    add_keyword(\"while let\", \"while let $1 = $2 {\\n    $0\\n}\");\n-                    add_keyword(\"loop\", \"loop {\\n    $0\\n}\");\n-                    add_keyword(\"if\", \"if $1 {\\n    $0\\n}\");\n-                    add_keyword(\"if let\", \"if let $1 = $2 {\\n    $0\\n}\");\n-                    add_keyword(\"for\", \"for $1 in $2 {\\n    $0\\n}\");\n-                    add_keyword(\"true\", \"true\");\n-                    add_keyword(\"false\", \"false\");\n+                if !in_block_expr {\n+                    add_keyword(\"unsafe\", \"unsafe {\\n    $0\\n}\");\n                 }\n+                add_keyword(\"match\", \"match $1 {\\n    $0\\n}\");\n+                add_keyword(\"while\", \"while $1 {\\n    $0\\n}\");\n+                add_keyword(\"while let\", \"while let $1 = $2 {\\n    $0\\n}\");\n+                add_keyword(\"loop\", \"loop {\\n    $0\\n}\");\n+                add_keyword(\"if\", \"if $1 {\\n    $0\\n}\");\n+                add_keyword(\"if let\", \"if let $1 = $2 {\\n    $0\\n}\");\n+                add_keyword(\"for\", \"for $1 in $2 {\\n    $0\\n}\");\n+                add_keyword(\"true\", \"true\");\n+                add_keyword(\"false\", \"false\");\n \n                 if ctx.previous_token_is(T![if])\n                     || ctx.previous_token_is(T![while])\n@@ -207,7 +242,7 @@ pub(crate) fn complete_expr_path(acc: &mut Completions, ctx: &CompletionContext)\n                     add_keyword(\"else if\", \"else if $1 {\\n    $0\\n}\");\n                 }\n \n-                if ctx.expects_ident_ref_expr() {\n+                if wants_mut_token {\n                     add_keyword(\"mut\", \"mut \");\n                 }\n "}, {"sha": "901f7519d25cef78f09509f4215466336d921192", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 23, "deletions": 21, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -8,7 +8,7 @@ use itertools::Itertools;\n use syntax::{AstNode, SyntaxNode, T};\n \n use crate::{\n-    context::{CompletionContext, PathKind},\n+    context::{CompletionContext, NameRefContext, PathCompletionCtx, PathKind, PatternContext},\n     patterns::ImmediateLocation,\n     render::{render_resolution_with_import, RenderContext},\n };\n@@ -110,16 +110,26 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if matches!(ctx.path_kind(), Some(PathKind::Vis { .. } | PathKind::Use | PathKind::Item { .. }))\n-        || ctx.is_path_disallowed()\n-    {\n-        return None;\n-    }\n-    // FIXME: This should be encoded in a different way\n-    if ctx.pattern_ctx.is_none() && ctx.path_context().is_none() && !ctx.has_dot_receiver() {\n-        // completion inside `ast::Name` of a item declaration\n-        return None;\n-    }\n+    let path_kind = match ctx.nameref_ctx() {\n+        Some(NameRefContext { path_ctx: Some(PathCompletionCtx { kind, .. }), .. })\n+            if matches!(\n+                kind,\n+                PathKind::Expr { .. }\n+                    | PathKind::Type { .. }\n+                    | PathKind::Attr { .. }\n+                    | PathKind::Derive\n+                    | PathKind::Pat\n+            ) =>\n+        {\n+            Some(kind)\n+        }\n+        Some(NameRefContext { dot_access: Some(_), .. }) => None,\n+        None if matches!(ctx.pattern_ctx, Some(PatternContext { record_pat: None, .. })) => {\n+            Some(&PathKind::Pat)\n+        }\n+        _ => return None,\n+    };\n+\n     let potential_import_name = {\n         let token_kind = ctx.token.kind();\n         if matches!(token_kind, T![.] | T![::]) {\n@@ -138,18 +148,10 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n         return None;\n     }\n \n-    let path_kind = match ctx.path_kind() {\n-        Some(kind) => Some(kind),\n-        None if ctx.pattern_ctx.is_some() => Some(PathKind::Pat),\n-        None => None,\n-    };\n     let ns_filter = |import: &LocatedImport| {\n         let path_kind = match path_kind {\n-            Some(path_kind) => path_kind,\n-            None => match import.original_item {\n-                ItemInNs::Macros(mac) => return mac.is_fn_like(ctx.db),\n-                _ => return true,\n-            },\n+            Some(it) => it,\n+            None => return true,\n         };\n         match (path_kind, import.original_item) {\n             // Aren't handled in flyimport"}, {"sha": "d44bf0a6ab743d68ef3e398e2a154820ab2fc4c4", "filename": "crates/ide-completion/src/completions/item_list.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fitem_list.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -16,27 +16,33 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n         return;\n     }\n \n-    let (&is_absolute_path, path_qualifier, kind) = match ctx.path_context() {\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Item { kind },\n-            is_absolute_path,\n-            qualifier,\n-            ..\n-        }) => (is_absolute_path, qualifier, Some(kind)),\n-        Some(PathCompletionCtx {\n-            kind: PathKind::Expr { in_block_expr: true, .. },\n-            is_absolute_path,\n-            qualifier,\n-            ..\n-        }) => (is_absolute_path, qualifier, None),\n+    let (&is_absolute_path, path_qualifier, kind, is_trivial_path) = match ctx.path_context() {\n+        Some(\n+            ctx @ PathCompletionCtx {\n+                kind: PathKind::Item { kind },\n+                is_absolute_path,\n+                qualifier,\n+                ..\n+            },\n+        ) => (is_absolute_path, qualifier, Some(kind), ctx.is_trivial_path()),\n+        Some(\n+            ctx @ PathCompletionCtx {\n+                kind: PathKind::Expr { in_block_expr: true, .. },\n+                is_absolute_path,\n+                qualifier,\n+                ..\n+            },\n+        ) => (is_absolute_path, qualifier, None, ctx.is_trivial_path()),\n         _ => return,\n     };\n \n     if matches!(kind, Some(ItemListKind::TraitImpl)) {\n         trait_impl::complete_trait_impl(acc, ctx);\n     }\n \n-    add_keywords(acc, ctx, kind);\n+    if is_trivial_path {\n+        add_keywords(acc, ctx, kind);\n+    }\n \n     if kind.is_none() {\n         // this is already handled by expression\n@@ -71,9 +77,6 @@ pub(crate) fn complete_item_list(acc: &mut Completions, ctx: &CompletionContext)\n }\n \n fn add_keywords(acc: &mut Completions, ctx: &CompletionContext, kind: Option<&ItemListKind>) {\n-    if ctx.is_non_trivial_path() {\n-        return;\n-    }\n     let mut add_keyword = |kw, snippet| acc.add_keyword_snippet(ctx, kw, snippet);\n \n     let in_item_list = matches!(kind, Some(ItemListKind::SourceFile | ItemListKind::Module) | None);"}, {"sha": "65fa1191781e8e4e7e2575b302f6f951a2749aeb", "filename": "crates/ide-completion/src/completions/keyword.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -8,11 +8,7 @@ use crate::{context::NameRefContext, CompletionContext, Completions};\n \n pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     let item = match ctx.nameref_ctx() {\n-        Some(NameRefContext { keyword: Some(item), record_expr: None, .. })\n-            if !ctx.is_non_trivial_path() =>\n-        {\n-            item\n-        }\n+        Some(NameRefContext { keyword: Some(item), record_expr: None, .. }) => item,\n         _ => return,\n     };\n "}, {"sha": "65805dba1ce9f22919f503c92b9fa263772ddcef", "filename": "crates/ide-completion/src/completions/record.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -71,43 +71,6 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n     Some(())\n }\n \n-pub(crate) fn complete_record_literal(\n-    acc: &mut Completions,\n-    ctx: &CompletionContext,\n-) -> Option<()> {\n-    if !ctx.expects_expression() {\n-        return None;\n-    }\n-\n-    match ctx.expected_type.as_ref()?.as_adt()? {\n-        hir::Adt::Struct(strukt) if ctx.path_qual().is_none() => {\n-            let path = ctx\n-                .module\n-                .find_use_path(ctx.db, hir::ModuleDef::from(strukt))\n-                .filter(|it| it.len() > 1);\n-\n-            acc.add_struct_literal(ctx, strukt, path, None);\n-\n-            let impl_ = ctx.impl_def.as_ref()?;\n-            let impl_adt = ctx.sema.to_def(impl_)?.self_ty(ctx.db).as_adt()?;\n-            if hir::Adt::Struct(strukt) == impl_adt {\n-                acc.add_struct_literal(ctx, strukt, None, Some(hir::known::SELF_TYPE));\n-            }\n-        }\n-        hir::Adt::Union(un) if ctx.path_qual().is_none() => {\n-            let path = ctx\n-                .module\n-                .find_use_path(ctx.db, hir::ModuleDef::from(un))\n-                .filter(|it| it.len() > 1);\n-\n-            acc.add_union_literal(ctx, un, path, None);\n-        }\n-        _ => {}\n-    };\n-\n-    Some(())\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::tests::check_edit;"}, {"sha": "9cf0b87ad6f9b76664ae2514805d754d9bfbf77b", "filename": "crates/ide-completion/src/completions/type.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Ftype.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -13,9 +13,6 @@ use crate::{\n \n pub(crate) fn complete_type_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let _p = profile::span(\"complete_type_path\");\n-    if ctx.is_path_disallowed() {\n-        return;\n-    }\n \n     let (&is_absolute_path, qualifier) = match ctx.path_context() {\n         Some(PathCompletionCtx {"}, {"sha": "02307def9e6e630b26da238969983ccb97bf1555", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 9, "deletions": 31, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -43,12 +43,13 @@ pub(crate) enum Visible {\n     No,\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub(super) enum PathKind {\n     Expr {\n         in_block_expr: bool,\n         in_loop_body: bool,\n         after_if_expr: bool,\n+        ref_expr_parent: Option<ast::RefExpr>,\n     },\n     Type {\n         in_tuple_struct: bool,\n@@ -356,41 +357,14 @@ impl<'a> CompletionContext<'a> {\n         matches!(self.completion_location, Some(ImmediateLocation::GenericArgList(_)))\n     }\n \n-    pub(crate) fn expects_ident_ref_expr(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::RefExpr))\n-    }\n-\n-    // FIXME: This shouldn't exist\n-    pub(crate) fn is_path_disallowed(&self) -> bool {\n-        !self.qualifier_ctx.none()\n-            || (matches!(self.name_ctx(), Some(NameContext { .. })) && self.pattern_ctx.is_none())\n-            || matches!(self.pattern_ctx, Some(PatternContext { record_pat: Some(_), .. }))\n-            || matches!(\n-                self.nameref_ctx(),\n-                Some(NameRefContext { record_expr: Some((_, false)), .. })\n-            )\n-    }\n-\n     pub(crate) fn path_context(&self) -> Option<&PathCompletionCtx> {\n         self.nameref_ctx().and_then(|ctx| ctx.path_ctx.as_ref())\n     }\n \n-    pub(crate) fn expects_expression(&self) -> bool {\n-        matches!(self.path_context(), Some(PathCompletionCtx { kind: PathKind::Expr { .. }, .. }))\n-    }\n-\n-    pub(crate) fn is_non_trivial_path(&self) -> bool {\n-        self.path_context().as_ref().map_or(false, |it| !it.is_trivial_path())\n-    }\n-\n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n         self.path_context().and_then(|it| it.qualifier.as_ref().map(|it| &it.path))\n     }\n \n-    pub(crate) fn path_kind(&self) -> Option<PathKind> {\n-        self.path_context().map(|it| it.kind)\n-    }\n-\n     /// Checks if an item is visible and not `doc(hidden)` at the completion site.\n     pub(crate) fn is_visible<I>(&self, item: &I) -> Visible\n     where\n@@ -1210,8 +1184,10 @@ impl<'a> CompletionContext<'a> {\n                         let in_block_expr = is_in_block(it.syntax());\n                         let in_loop_body = is_in_loop_body(it.syntax());\n                         let after_if_expr = after_if_expr(it.syntax().clone());\n+                        let ref_expr_parent = path.as_single_name_ref()\n+                            .and_then(|_| it.syntax().parent()).and_then(ast::RefExpr::cast);\n \n-                        Some(PathKind::Expr { in_block_expr, in_loop_body, after_if_expr })\n+                        Some(PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent })\n                     },\n                     ast::TupleStructPat(it) => {\n                         path_ctx.has_call_parens = true;\n@@ -1261,7 +1237,9 @@ impl<'a> CompletionContext<'a> {\n                                     let in_block_expr = is_in_block(it.syntax());\n                                     let after_if_expr = after_if_expr(it.syntax().clone());\n                                     fill_record_expr(it.syntax());\n-                                    PathKind::Expr { in_block_expr, in_loop_body, after_if_expr }\n+                                    let ref_expr_parent = path.as_single_name_ref()\n+                                        .and_then(|_| it.syntax().parent()).and_then(ast::RefExpr::cast);\n+                                    PathKind::Expr { in_block_expr, in_loop_body, after_if_expr, ref_expr_parent }\n                                 });\n                             },\n                         }\n@@ -1368,7 +1346,7 @@ impl<'a> CompletionContext<'a> {\n                     }\n                 }\n \n-                if let Some(PathKind::Item { .. }) = kind {\n+                if let PathKind::Item { .. } = path_ctx.kind {\n                     if qualifier_ctx.none() {\n                         if let Some(t) = top.first_token() {\n                             if let Some(prev) = t"}, {"sha": "9dc367b0bcc4ca28a8249662dde65eb055ada4ac", "filename": "crates/ide-completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Flib.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -169,7 +169,6 @@ pub fn completions(\n             completions::mod_::complete_mod(acc, ctx);\n             completions::pattern::complete_pattern(acc, ctx);\n             completions::postfix::complete_postfix(acc, ctx);\n-            completions::record::complete_record_literal(acc, ctx);\n             completions::record::complete_record(acc, ctx);\n             completions::snippet::complete_expr_snippet(acc, ctx);\n             completions::snippet::complete_item_snippet(acc, ctx);"}, {"sha": "761c97b9a962b8b35e56c5c4d61512f752c03bc9", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -30,7 +30,6 @@ pub(crate) enum TypeAnnotation {\n /// from which file the nodes are.\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n-    RefExpr,\n     TypeBound,\n     /// Original file ast node\n     TypeAnnotation(TypeAnnotation),\n@@ -80,7 +79,6 @@ pub(crate) fn determine_location(\n \n     let res = match_ast! {\n         match parent {\n-            ast::RefExpr(_) => ImmediateLocation::RefExpr,\n             ast::TypeBound(_) => ImmediateLocation::TypeBound,\n             ast::TypeBoundList(_) => ImmediateLocation::TypeBound,\n             ast::GenericArgList(_) => sema\n@@ -248,30 +246,3 @@ fn next_non_trivia_sibling(ele: SyntaxElement) -> Option<SyntaxElement> {\n     }\n     None\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use syntax::algo::find_node_at_offset;\n-\n-    use crate::tests::position;\n-\n-    use super::*;\n-\n-    fn check_location(code: &str, loc: impl Into<Option<ImmediateLocation>>) {\n-        let (db, pos) = position(code);\n-\n-        let sema = Semantics::new(&db);\n-        let original_file = sema.parse(pos.file_id);\n-\n-        let name_like = find_node_at_offset(original_file.syntax(), pos.offset).unwrap();\n-        assert_eq!(\n-            determine_location(&sema, original_file.syntax(), pos.offset, &name_like),\n-            loc.into()\n-        );\n-    }\n-\n-    #[test]\n-    fn test_ref_expr_loc() {\n-        check_location(r\"fn my_fn() { let x = &m$0 foo; }\", ImmediateLocation::RefExpr);\n-    }\n-}"}, {"sha": "942dc033687b3a5d0e00110fe913690d5988ccb6", "filename": "crates/ide-completion/src/render.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -1099,6 +1099,8 @@ fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n                 lc world [type+name+local]\n+                st WorldSnapshot {\u2026} []\n+                st &WorldSnapshot {\u2026} [type]\n                 st WorldSnapshot []\n                 fn go(\u2026) []\n             \"#]],\n@@ -1197,6 +1199,8 @@ fn main() {\n                 lc s [name+local]\n                 lc &mut s [type+name+local]\n                 st S []\n+                st &mut S [type]\n+                st S []\n                 fn main() []\n                 fn foo(\u2026) []\n             \"#]],\n@@ -1266,6 +1270,8 @@ fn main() {\n                 lc m [local]\n                 lc t [local]\n                 lc &t [type+local]\n+                st S []\n+                st &S [type]\n                 st T []\n                 st S []\n                 fn main() []\n@@ -1311,6 +1317,8 @@ fn main() {\n                 lc m [local]\n                 lc t [local]\n                 lc &mut t [type+local]\n+                st S []\n+                st &mut S [type]\n                 st T []\n                 st S []\n                 fn main() []\n@@ -1405,6 +1413,8 @@ fn main() {\n }\n \"#,\n             expect![[r#\"\n+                st S []\n+                st &S [type]\n                 st T []\n                 st S []\n                 fn main() []"}, {"sha": "de527860d8c3481a7403bcb48687edf7739f80de", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2a74bf27889d32a22fff6a0004e0bf471398c47/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=a2a74bf27889d32a22fff6a0004e0bf471398c47", "patch": "@@ -34,8 +34,8 @@ fn render(\n     let (bra, ket) = if is_fn_like { guess_macro_braces(&name, docs_str) } else { (\"\", \"\") };\n \n     let needs_bang = match completion.path_context() {\n-        Some(&PathCompletionCtx { kind, has_macro_bang, .. }) => {\n-            is_fn_like && kind != PathKind::Use && !has_macro_bang\n+        Some(PathCompletionCtx { kind, has_macro_bang, .. }) => {\n+            is_fn_like && *kind != PathKind::Use && !has_macro_bang\n         }\n         _ => is_fn_like,\n     };"}]}