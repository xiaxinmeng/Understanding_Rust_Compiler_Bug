{"sha": "581a95a804f77259153c030d39f861282b468612", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MWE5NWE4MDRmNzcyNTkxNTNjMDMwZDM5Zjg2MTI4MmI0Njg2MTI=", "commit": {"author": {"name": "Jeffrey Yasskin", "email": "jyasskin@gmail.com", "date": "2010-07-24T23:01:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-08-07T00:25:27Z"}, "message": "Add an int->str conversion function.\nThe test currently fails because string equality isn't implemented.", "tree": {"sha": "9b31cad6fe2ac9107a99baa70c4872666a1b7188", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b31cad6fe2ac9107a99baa70c4872666a1b7188"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/581a95a804f77259153c030d39f861282b468612", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/581a95a804f77259153c030d39f861282b468612", "html_url": "https://github.com/rust-lang/rust/commit/581a95a804f77259153c030d39f861282b468612", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/581a95a804f77259153c030d39f861282b468612/comments", "author": {"login": "jyasskin", "id": 83420, "node_id": "MDQ6VXNlcjgzNDIw", "avatar_url": "https://avatars.githubusercontent.com/u/83420?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyasskin", "html_url": "https://github.com/jyasskin", "followers_url": "https://api.github.com/users/jyasskin/followers", "following_url": "https://api.github.com/users/jyasskin/following{/other_user}", "gists_url": "https://api.github.com/users/jyasskin/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyasskin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyasskin/subscriptions", "organizations_url": "https://api.github.com/users/jyasskin/orgs", "repos_url": "https://api.github.com/users/jyasskin/repos", "events_url": "https://api.github.com/users/jyasskin/events{/privacy}", "received_events_url": "https://api.github.com/users/jyasskin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987589e94691a82a551677740d47444f6c9acfd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/987589e94691a82a551677740d47444f6c9acfd5", "html_url": "https://github.com/rust-lang/rust/commit/987589e94691a82a551677740d47444f6c9acfd5"}], "stats": {"total": 41, "additions": 29, "deletions": 12}, "files": [{"sha": "792eeec0a3b9bd682e934cd619402b1a77e981b8", "filename": "src/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/581a95a804f77259153c030d39f861282b468612/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/581a95a804f77259153c030d39f861282b468612/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=581a95a804f77259153c030d39f861282b468612", "patch": "@@ -395,6 +395,7 @@ TEST_XFAILS_X86 :=  $(TASK_XFAILS) \\\n                     test/run-pass/fn-lval.rs \\\n                     test/run-pass/generic-fn-infer.rs \\\n                     test/run-pass/generic-recursive-tag.rs \\\n+                    test/run-pass/int-lib.rs \\\n                     test/run-pass/iter-ret.rs \\\n                     test/run-pass/lib-deque.rs \\\n                     test/run-pass/lib-map.rs \\\n@@ -464,6 +465,7 @@ TEST_XFAILS_LLVM := $(TASK_XFAILS) \\\n                       import.rs \\\n                       inner-module.rs \\\n                       integral-indexing.rs \\\n+                      int-lib.rs \\\n                       iter-range.rs \\\n                       iter-ret.rs \\\n                       large-records.rs \\"}, {"sha": "e76c2bf5062896373949eaeaac54b07be882ce09", "filename": "src/lib/_int.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/581a95a804f77259153c030d39f861282b468612/src%2Flib%2F_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581a95a804f77259153c030d39f861282b468612/src%2Flib%2F_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_int.rs?ref=581a95a804f77259153c030d39f861282b468612", "patch": "@@ -45,7 +45,7 @@ fn next_power_of_two(uint n) -> uint {\n   ret tmp + 1u;\n }\n \n-fn uto_string(mutable uint n, uint radix) -> str\n+fn uto_str(mutable uint n, uint radix) -> str\n {\n   check (0u < radix && radix <= 16u);\n   fn digit(uint n) -> str {\n@@ -60,12 +60,12 @@ fn uto_string(mutable uint n, uint radix) -> str\n       case (7u) { ret \"7\"; }\n       case (8u) { ret \"8\"; }\n       case (9u) { ret \"9\"; }\n-      case (10u) { ret \"A\"; }\n-      case (11u) { ret \"B\"; }\n-      case (12u) { ret \"C\"; }\n-      case (13u) { ret \"D\"; }\n-      case (14u) { ret \"E\"; }\n-      case (15u) { ret \"F\"; }\n+      case (10u) { ret \"a\"; }\n+      case (11u) { ret \"b\"; }\n+      case (12u) { ret \"c\"; }\n+      case (13u) { ret \"d\"; }\n+      case (14u) { ret \"e\"; }\n+      case (15u) { ret \"f\"; }\n     }\n   }\n \n@@ -79,12 +79,12 @@ fn uto_string(mutable uint n, uint radix) -> str\n   ret s;\n }\n \n-fn to_string(mutable int n, uint radix) -> str\n+fn to_str(mutable int n, uint radix) -> str\n {\n   check (0u < radix && radix <= 16u);\n   if (n < 0) {\n-    ret \"-\" + uto_string((-n) as uint, radix);\n+    ret \"-\" + uto_str((-n) as uint, radix);\n   } else {\n-    ret uto_string(n as uint, radix);\n+    ret uto_str(n as uint, radix);\n   }\n }"}, {"sha": "93d06d416fb81957a86b722d93cdfe62eb390ef8", "filename": "src/lib/_io.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/581a95a804f77259153c030d39f861282b468612/src%2Flib%2F_io.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581a95a804f77259153c030d39f861282b468612/src%2Flib%2F_io.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_io.rs?ref=581a95a804f77259153c030d39f861282b468612", "patch": "@@ -125,8 +125,8 @@ fn file_writer(str path,\n {\n   unsafe obj fw(buf_writer out) {\n     fn write_str(str s)   { out.write(_str.bytes(s)); }\n-    fn write_int(int n)   { out.write(_str.bytes(_int.to_string(n, 10u))); }\n-    fn write_uint(uint n) { out.write(_str.bytes(_int.uto_string(n, 10u))); }\n+    fn write_int(int n)   { out.write(_str.bytes(_int.to_str(n, 10u))); }\n+    fn write_uint(uint n) { out.write(_str.bytes(_int.uto_str(n, 10u))); }\n   }\n   ret fw(new_buf_writer(path, flags));\n }"}, {"sha": "ce39de4392106a5679f8b2472e078478fd30a221", "filename": "src/test/run-pass/int-lib.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/581a95a804f77259153c030d39f861282b468612/src%2Ftest%2Frun-pass%2Fint-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/581a95a804f77259153c030d39f861282b468612/src%2Ftest%2Frun-pass%2Fint-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fint-lib.rs?ref=581a95a804f77259153c030d39f861282b468612", "patch": "@@ -0,0 +1,15 @@\n+use std;\n+\n+import std._int;\n+\n+fn test_to_str() {\n+  check (_int.to_str(0, 10u) == \"0\");\n+  check (_int.to_str(1, 10u) == \"1\");\n+  check (_int.to_str(-1, 10u) == \"-1\");\n+  check (_int.to_str(255, 16u) == \"ff\");\n+  check (_int.to_str(-71, 36u) == \"-1z\");\n+}\n+\n+fn main() {\n+  test_to_str();\n+}"}]}