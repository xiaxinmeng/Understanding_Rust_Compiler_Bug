{"sha": "b37f968632fc2c66f144d132bb9bb6187709f1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzN2Y5Njg2MzJmYzJjNjZmMTQ0ZDEzMmJiOWJiNjE4NzcwOWYxZGU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-05T12:14:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-05T12:14:37Z"}, "message": "Rollup merge of #68858 - ljedrz:collapse_stable_hash_foos, r=michaelwoerister\n\nMerge item id stable hashing functions\n\nSupersedes https://github.com/rust-lang/rust/pull/67999 splitting out the pure cleanup bits, i.e. merging `hash_item_id`, `hash_impl_item_id` and `hash_trait_item_id` into a common `hash_reference_to_item`.\n\nr? @michaelwoerister", "tree": {"sha": "c3f8eab3af010124265d73e13b42f3cb7a862245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f8eab3af010124265d73e13b42f3cb7a862245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b37f968632fc2c66f144d132bb9bb6187709f1de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeOrGuCRBK7hj4Ov3rIwAAdHIIAC7QapRUb3PD6SqAhykHfqvA\nEcfdgDMuae/rAZ9c8iNlDf/2yrlpn812Ru/XSn+PnMLMG796o24UO7UMIL1izUv+\nYZvPSKaJulIVUnvCp523chr7q/Hg1X60H5e8Bb9UOT+P49duTG4/ewSqDLI8buvK\nGynGoMyRxEAfzXejhsVlIzrQ03/8UMFpXvA4wdqGRWCZVefnVrJnieE4vEq1cp+U\n8lP4MCNMtAogXsBcPzkQxVKA180WHiz86BkYX4myjMOmPt5Skl8pU3BpX2FD6UKK\nG8LrsRzgZh/saCeGEiCI235vHI8Wwdd2Xc8fi/FEMGkTPkkCeoSBqfbP8+65VxQ=\n=Yu1Z\n-----END PGP SIGNATURE-----\n", "payload": "tree c3f8eab3af010124265d73e13b42f3cb7a862245\nparent cf32b7118dd307016aa2d08edb66ebe1d936d636\nparent e8b72f44b0064d0e591f078f6b7f2cf3aa28f540\nauthor Dylan DPC <dylan.dpc@gmail.com> 1580904877 +0100\ncommitter GitHub <noreply@github.com> 1580904877 +0100\n\nRollup merge of #68858 - ljedrz:collapse_stable_hash_foos, r=michaelwoerister\n\nMerge item id stable hashing functions\n\nSupersedes https://github.com/rust-lang/rust/pull/67999 splitting out the pure cleanup bits, i.e. merging `hash_item_id`, `hash_impl_item_id` and `hash_trait_item_id` into a common `hash_reference_to_item`.\n\nr? @michaelwoerister\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b37f968632fc2c66f144d132bb9bb6187709f1de", "html_url": "https://github.com/rust-lang/rust/commit/b37f968632fc2c66f144d132bb9bb6187709f1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b37f968632fc2c66f144d132bb9bb6187709f1de/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf32b7118dd307016aa2d08edb66ebe1d936d636", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf32b7118dd307016aa2d08edb66ebe1d936d636", "html_url": "https://github.com/rust-lang/rust/commit/cf32b7118dd307016aa2d08edb66ebe1d936d636"}, {"sha": "e8b72f44b0064d0e591f078f6b7f2cf3aa28f540", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8b72f44b0064d0e591f078f6b7f2cf3aa28f540", "html_url": "https://github.com/rust-lang/rust/commit/e8b72f44b0064d0e591f078f6b7f2cf3aa28f540"}], "stats": {"total": 45, "additions": 12, "deletions": 33}, "files": [{"sha": "01558615497731073ab20985800fc9bdae7ad986", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 27, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b37f968632fc2c66f144d132bb9bb6187709f1de/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37f968632fc2c66f144d132bb9bb6187709f1de/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b37f968632fc2c66f144d132bb9bb6187709f1de", "patch": "@@ -40,40 +40,14 @@ impl<'ctx> rustc_hir::HashStableContext for StableHashingContext<'ctx> {\n         }\n     }\n \n-    // The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n-    // `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n-    // the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n-    // are used when another item in the HIR is *referenced* and we certainly\n-    // want to pick up on a reference changing its target, so we hash the NodeIds\n-    // in \"DefPath Mode\".\n-\n-    fn hash_item_id(&mut self, id: hir::ItemId, hasher: &mut StableHasher) {\n+    fn hash_reference_to_item(&mut self, id: hir::HirId, hasher: &mut StableHasher) {\n         let hcx = self;\n-        let hir::ItemId { id } = id;\n \n         hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n             id.hash_stable(hcx, hasher);\n         })\n     }\n \n-    fn hash_impl_item_id(&mut self, id: hir::ImplItemId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        let hir::ImplItemId { hir_id } = id;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-\n-    fn hash_trait_item_id(&mut self, id: hir::TraitItemId, hasher: &mut StableHasher) {\n-        let hcx = self;\n-        let hir::TraitItemId { hir_id } = id;\n-\n-        hcx.with_node_id_hashing_mode(NodeIdHashingMode::HashDefPath, |hcx| {\n-            hir_id.hash_stable(hcx, hasher);\n-        })\n-    }\n-\n     fn hash_hir_mod(&mut self, module: &hir::Mod<'_>, hasher: &mut StableHasher) {\n         let hcx = self;\n         let hir::Mod { inner: ref inner_span, ref item_ids } = *module;"}, {"sha": "294074cd3e5a47a55dfe87f5a26bf31275fec7e9", "filename": "src/librustc_hir/stable_hash_impls.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b37f968632fc2c66f144d132bb9bb6187709f1de/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b37f968632fc2c66f144d132bb9bb6187709f1de/src%2Flibrustc_hir%2Fstable_hash_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fstable_hash_impls.rs?ref=b37f968632fc2c66f144d132bb9bb6187709f1de", "patch": "@@ -11,9 +11,7 @@ pub trait HashStableContext: syntax::HashStableContext + rustc_target::HashStabl\n     fn hash_def_id(&mut self, _: DefId, hasher: &mut StableHasher);\n     fn hash_hir_id(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_body_id(&mut self, _: BodyId, hasher: &mut StableHasher);\n-    fn hash_item_id(&mut self, _: ItemId, hasher: &mut StableHasher);\n-    fn hash_impl_item_id(&mut self, _: ImplItemId, hasher: &mut StableHasher);\n-    fn hash_trait_item_id(&mut self, _: TraitItemId, hasher: &mut StableHasher);\n+    fn hash_reference_to_item(&mut self, _: HirId, hasher: &mut StableHasher);\n     fn hash_hir_mod(&mut self, _: &Mod<'_>, hasher: &mut StableHasher);\n     fn hash_hir_expr(&mut self, _: &Expr<'_>, hasher: &mut StableHasher);\n     fn hash_hir_ty(&mut self, _: &Ty<'_>, hasher: &mut StableHasher);\n@@ -38,21 +36,28 @@ impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for BodyId {\n     }\n }\n \n+// The following implementations of HashStable for `ItemId`, `TraitItemId`, and\n+// `ImplItemId` deserve special attention. Normally we do not hash `NodeId`s within\n+// the HIR, since they just signify a HIR nodes own path. But `ItemId` et al\n+// are used when another item in the HIR is *referenced* and we certainly\n+// want to pick up on a reference changing its target, so we hash the NodeIds\n+// in \"DefPath Mode\".\n+\n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.id, hasher)\n     }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for ImplItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_impl_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.hir_id, hasher)\n     }\n }\n \n impl<HirCtx: crate::HashStableContext> HashStable<HirCtx> for TraitItemId {\n     fn hash_stable(&self, hcx: &mut HirCtx, hasher: &mut StableHasher) {\n-        hcx.hash_trait_item_id(*self, hasher)\n+        hcx.hash_reference_to_item(self.hir_id, hasher)\n     }\n }\n "}]}