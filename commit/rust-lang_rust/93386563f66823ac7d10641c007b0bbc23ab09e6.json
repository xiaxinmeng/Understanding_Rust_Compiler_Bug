{"sha": "93386563f66823ac7d10641c007b0bbc23ab09e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzg2NTYzZjY2ODIzYWM3ZDEwNjQxYzAwN2IwYmJjMjNhYjA5ZTY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-03T17:58:27Z"}, "committer": {"name": "Thibaud Genty", "email": "thibaud.genty@cosmian.com", "date": "2020-05-15T07:17:39Z"}, "message": "Rename lint `map_unwrap` to `map_unwrap_or` and register lints as renamed", "tree": {"sha": "f1418b72011edb8616b2b8a7ff36725a0e7b624e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1418b72011edb8616b2b8a7ff36725a0e7b624e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93386563f66823ac7d10641c007b0bbc23ab09e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93386563f66823ac7d10641c007b0bbc23ab09e6", "html_url": "https://github.com/rust-lang/rust/commit/93386563f66823ac7d10641c007b0bbc23ab09e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93386563f66823ac7d10641c007b0bbc23ab09e6/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbdf7549c6b24c37629eabdc4be0346e0c8fd56", "html_url": "https://github.com/rust-lang/rust/commit/adbdf7549c6b24c37629eabdc4be0346e0c8fd56"}], "stats": {"total": 69, "additions": 36, "deletions": 33}, "files": [{"sha": "77272f4f78b96fc4cb6bf9a3ae9c23f260e5b277", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -1430,7 +1430,7 @@ Released 2018-09-13\n [`map_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_clone\n [`map_entry`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_entry\n [`map_flatten`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_flatten\n-[`map_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap\n+[`map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or\n [`match_as_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_as_ref\n [`match_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_bool\n [`match_on_vec_items`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_on_vec_items\n@@ -1538,7 +1538,6 @@ Released 2018-09-13\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n-[`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n [`search_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some"}, {"sha": "ff67ccae794d55e692165d2bd0357eaaa4dce96c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -673,7 +673,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &methods::ITER_SKIP_NEXT,\n         &methods::MANUAL_SATURATING_ARITHMETIC,\n         &methods::MAP_FLATTEN,\n-        &methods::MAP_UNWRAP,\n+        &methods::MAP_UNWRAP_OR,\n         &methods::NEW_RET_NO_SELF,\n         &methods::OK_EXPECT,\n         &methods::OPTION_AND_THEN_SOME,\n@@ -1145,7 +1145,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&methods::FIND_MAP),\n         LintId::of(&methods::INEFFICIENT_TO_STRING),\n         LintId::of(&methods::MAP_FLATTEN),\n-        LintId::of(&methods::MAP_UNWRAP),\n+        LintId::of(&methods::MAP_UNWRAP_OR),\n         LintId::of(&misc::USED_UNDERSCORE_BINDING),\n         LintId::of(&misc_early::UNSEPARATED_LITERAL_SUFFIX),\n         LintId::of(&mut_mut::MUT_MUT),\n@@ -1785,6 +1785,17 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::new_without_default_derive\", \"clippy::new_without_default\");\n     ls.register_renamed(\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\");\n     ls.register_renamed(\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_expr\", \"clippy::block_in_if_condition\");\n+    ls.register_renamed(\"clippy::block_in_if_condition_stmt\", \"clippy::block_in_if_condition\");\n+    ls.register_renamed(\"clippy::option_map_unwrap_or\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::option_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::result_map_unwrap_or_else\", \"clippy::map_unwrap_or\");\n+    ls.register_renamed(\"clippy::option_unwrap_used\", \"clippy::unwrap_used\");\n+    ls.register_renamed(\"clippy::result_unwrap_used\", \"clippy::unwrap_used\");\n+    ls.register_renamed(\"clippy::option_expect_used\", \"clippy::expect_used\");\n+    ls.register_renamed(\"clippy::result_expect_used\", \"clippy::expect_used\");\n+    ls.register_renamed(\"clippy::for_loop_over_option\", \"clippy::for_loop_over_fallible\");\n+    ls.register_renamed(\"clippy::for_loop_over_result\", \"clippy::for_loop_over_fallible\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "e6094edc5d704c17958e904538c4fc1feb14bb15", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -255,7 +255,7 @@ declare_clippy_lint! {\n     /// // Good\n     /// x.map_or_else(some_function, |a| a + 1);\n     /// ```\n-    pub MAP_UNWRAP,\n+    pub MAP_UNWRAP_OR,\n     pedantic,\n     \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\"\n }\n@@ -1240,7 +1240,7 @@ declare_lint_pass!(Methods => [\n     WRONG_SELF_CONVENTION,\n     WRONG_PUB_SELF_CONVENTION,\n     OK_EXPECT,\n-    MAP_UNWRAP,\n+    MAP_UNWRAP_OR,\n     RESULT_MAP_OR_INTO_OPTION,\n     OPTION_MAP_OR_NONE,\n     OPTION_AND_THEN_SOME,\n@@ -2512,7 +2512,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n         if same_span && !multiline {\n             span_lint_and_note(\n                 cx,\n-                MAP_UNWRAP,\n+                MAP_UNWRAP_OR,\n                 expr.span,\n                 msg,\n                 None,\n@@ -2522,7 +2522,7 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n                 ),\n             );\n         } else if same_span && multiline {\n-            span_lint(cx, MAP_UNWRAP, expr.span, msg);\n+            span_lint(cx, MAP_UNWRAP_OR, expr.span, msg);\n         };\n     }\n }"}, {"sha": "20c60ef33189dc45f41ffa9f421b369a2648af00", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n \n-use super::MAP_UNWRAP;\n+use super::MAP_UNWRAP_OR;\n \n /// lint use of `map().unwrap_or()` for `Option`s\n pub(super) fn lint<'a, 'tcx>(\n@@ -66,7 +66,7 @@ pub(super) fn lint<'a, 'tcx>(\n             arg, suggest\n         );\n \n-        span_lint_and_then(cx, MAP_UNWRAP, expr.span, msg, |diag| {\n+        span_lint_and_then(cx, MAP_UNWRAP_OR, expr.span, msg, |diag| {\n             let map_arg_span = map_args[1].span;\n \n             let mut suggestion = vec!["}, {"sha": "e90b9c157476907b41b834c4de9f82f5a97c8e20", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -1138,7 +1138,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         module: \"methods\",\n     },\n     Lint {\n-        name: \"map_unwrap\",\n+        name: \"map_unwrap_or\",\n         group: \"pedantic\",\n         desc: \"using `.map(f).unwrap_or(a)` or `.map(f).unwrap_or_else(func)`, which are more succinctly expressed as `map_or(a, f)` or `map_or_else(a, f)`\",\n         deprecation: None,\n@@ -1872,13 +1872,6 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n         deprecation: None,\n         module: \"map_unit_fn\",\n     },\n-    Lint {\n-        name: \"result_unwrap_used\",\n-        group: \"restriction\",\n-        desc: \"using `Result.unwrap()`, which might be better handled\",\n-        deprecation: None,\n-        module: \"methods\",\n-    },\n     Lint {\n         name: \"reversed_empty_ranges\",\n         group: \"correctness\","}, {"sha": "585944032e70d73bf6d144d580169b39ebbd1ea1", "filename": "tests/ui/map_unwrap_or.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/tests%2Fui%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/tests%2Fui%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.rs?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -1,7 +1,7 @@\n // FIXME: Add \"run-rustfix\" once it's supported for multipart suggestions\n // aux-build:option_helpers.rs\n \n-#![warn(clippy::map_unwrap)]\n+#![warn(clippy::map_unwrap_or)]\n \n #[macro_use]\n extern crate option_helpers;", "previous_filename": "tests/ui/map_unwrap.rs"}, {"sha": "b62080a073f352dc0760d2b63318ecc27cf86b9a", "filename": "tests/ui/map_unwrap_or.stderr", "status": "renamed", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93386563f66823ac7d10641c007b0bbc23ab09e6/tests%2Fui%2Fmap_unwrap_or.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/93386563f66823ac7d10641c007b0bbc23ab09e6/tests%2Fui%2Fmap_unwrap_or.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_unwrap_or.stderr?ref=93386563f66823ac7d10641c007b0bbc23ab09e6", "patch": "@@ -1,20 +1,20 @@\n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap.rs:17:13\n+  --> $DIR/map_unwrap_or.rs:17:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n LL | |         // Should lint even though this call is on a separate line.\n LL | |         .unwrap_or(0);\n    | |_____________________^\n    |\n-   = note: `-D clippy::map-unwrap` implied by `-D warnings`\n+   = note: `-D clippy::map-unwrap-or` implied by `-D warnings`\n help: use `map_or(a, f)` instead\n    |\n LL |     let _ = opt.map_or(0, |x| x + 1);\n    |                 ^^^^^^ ^^          --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap.rs:21:13\n+  --> $DIR/map_unwrap_or.rs:21:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -32,7 +32,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap.rs:25:13\n+  --> $DIR/map_unwrap_or.rs:25:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -49,7 +49,7 @@ LL |         }, |x| x + 1);\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap.rs:30:13\n+  --> $DIR/map_unwrap_or.rs:30:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -60,7 +60,7 @@ LL |     let _ = opt.and_then(|x| Some(x + 1));\n    |                 ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap.rs:32:13\n+  --> $DIR/map_unwrap_or.rs:32:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -78,7 +78,7 @@ LL |     );\n    |\n \n error: called `map(f).unwrap_or(None)` on an `Option` value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/map_unwrap.rs:36:13\n+  --> $DIR/map_unwrap_or.rs:36:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -92,7 +92,7 @@ LL |         .and_then(|x| Some(x + 1));\n    |          ^^^^^^^^                --\n \n error: called `map(f).unwrap_or(a)` on an `Option` value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/map_unwrap.rs:47:13\n+  --> $DIR/map_unwrap_or.rs:47:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -103,7 +103,7 @@ LL |     let _ = Some(\"prefix\").map_or(id, |p| format!(\"{}.\", p));\n    |                            ^^^^^^ ^^^                      --\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:51:13\n+  --> $DIR/map_unwrap_or.rs:51:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -114,7 +114,7 @@ LL | |         .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:55:13\n+  --> $DIR/map_unwrap_or.rs:55:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -124,7 +124,7 @@ LL | |     ).unwrap_or_else(|| 0);\n    | |__________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:59:13\n+  --> $DIR/map_unwrap_or.rs:59:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -134,23 +134,23 @@ LL | |         );\n    | |_________^\n \n error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:88:13\n+  --> $DIR/map_unwrap_or.rs:88:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:90:13\n+  --> $DIR/map_unwrap_or.rs:90:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling `.map_or_else(g, f)` instead\n-  --> $DIR/map_unwrap.rs:91:13\n+  --> $DIR/map_unwrap_or.rs:91:13\n    |\n LL |     let _ = res.map(|x| x + 1).unwrap_or_else(|e| 0);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "tests/ui/map_unwrap.stderr"}]}