{"sha": "a6cc398207009884a2885855e79ba424c2f4c303", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2Y2MzOTgyMDcwMDk4ODRhMjg4NTg1NWU3OWJhNDI0YzJmNGMzMDM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-09T09:55:11Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2016-11-22T05:21:21Z"}, "message": "Revert libcore changes, redefine Void instead", "tree": {"sha": "40fdf91521e57ee6ea40afc706944bddf1d960ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40fdf91521e57ee6ea40afc706944bddf1d960ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6cc398207009884a2885855e79ba424c2f4c303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6cc398207009884a2885855e79ba424c2f4c303", "html_url": "https://github.com/rust-lang/rust/commit/a6cc398207009884a2885855e79ba424c2f4c303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6cc398207009884a2885855e79ba424c2f4c303/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b20c6aec716abd1b1e8cd8750ae0d106db5f616", "html_url": "https://github.com/rust-lang/rust/commit/5b20c6aec716abd1b1e8cd8750ae0d106db5f616"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c5116b996dd87d49408936a9386093ce0370fcfb", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6cc398207009884a2885855e79ba424c2f4c303/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6cc398207009884a2885855e79ba424c2f4c303/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=a6cc398207009884a2885855e79ba424c2f4c303", "patch": "@@ -166,7 +166,9 @@ pub struct Formatter<'a> {\n // NB. Argument is essentially an optimized partially applied formatting function,\n // equivalent to `exists T.(&T, fn(&T, &mut Formatter) -> Result`.\n \n-enum Void {}\n+struct Void {\n+    _private: (),\n+}\n \n /// This struct represents the generic \"argument\" which is taken by the Xprintf\n /// family of functions. It contains a function to format the given value. At\n@@ -178,9 +180,8 @@ enum Void {}\n            issue = \"0\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n-    _ph: PhantomData<&'a ()>,\n-    value: *const Void,\n-    formatter: fn(*const Void, &mut Formatter) -> Result,\n+    value: &'a Void,\n+    formatter: fn(&Void, &mut Formatter) -> Result,\n }\n \n #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n@@ -204,7 +205,6 @@ impl<'a> ArgumentV1<'a> {\n                       f: fn(&T, &mut Formatter) -> Result) -> ArgumentV1<'b> {\n         unsafe {\n             ArgumentV1 {\n-                _ph: PhantomData,\n                 formatter: mem::transmute(f),\n                 value: mem::transmute(x)\n             }\n@@ -220,7 +220,7 @@ impl<'a> ArgumentV1<'a> {\n \n     fn as_usize(&self) -> Option<usize> {\n         if self.formatter as usize == ArgumentV1::show_usize as usize {\n-            Some(unsafe { *(self.value as *const usize) })\n+            Some(unsafe { *(self.value as *const _ as *const usize) })\n         } else {\n             None\n         }"}]}