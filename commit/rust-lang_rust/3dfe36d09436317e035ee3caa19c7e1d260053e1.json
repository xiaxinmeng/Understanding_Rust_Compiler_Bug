{"sha": "3dfe36d09436317e035ee3caa19c7e1d260053e1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZmUzNmQwOTQzNjMxN2UwMzVlZTNjYWExOWM3ZTFkMjYwMDUzZTE=", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-03T19:28:20Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2019-01-06T19:40:34Z"}, "message": "use `Ident` in `ItemFn`", "tree": {"sha": "9918d8e92b8dddbe951127b775efaeef00a0a44f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9918d8e92b8dddbe951127b775efaeef00a0a44f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dfe36d09436317e035ee3caa19c7e1d260053e1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAlwyWbIWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdMMIB/0dctj8Od/wEDNeeH0+r0X5n10H\n+YjWmPzvRd3aOio61IkTYhhTBY5QdF52NeB8/eJQNCJjUTOHrUzc2vAqX+V6pTke\nhClczkn1XGN2eUZk8fhdgvsWTT367shMdLziFVd6LHf4PjCv29EwtsqwfK6iFwO0\nZhmUBefQaD4J+D4n98P4fz81MpQh+ond71TWQ0AEbK3uhGaC+zIDX7hPRHd9l9ht\n0ooRE8inU/gdL04VWSJQNQKUs98VJmHrMipDEd7WOJqQW74wivaZS+SeHy0cjaYp\nH2hFb8rywRzSMiMO8oa4WwkoFnL/WVuKuZVIoz1itWOXT+XoT77z7oI4jcoE\n=B6QG\n-----END PGP SIGNATURE-----", "payload": "tree 9918d8e92b8dddbe951127b775efaeef00a0a44f\nparent b92552d5578e4544006da0dd5e793a19c2149321\nauthor Andy Russell <arussell123@gmail.com> 1546543700 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1546803634 -0500\n\nuse `Ident` in `ItemFn`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dfe36d09436317e035ee3caa19c7e1d260053e1", "html_url": "https://github.com/rust-lang/rust/commit/3dfe36d09436317e035ee3caa19c7e1d260053e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dfe36d09436317e035ee3caa19c7e1d260053e1/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b92552d5578e4544006da0dd5e793a19c2149321", "url": "https://api.github.com/repos/rust-lang/rust/commits/b92552d5578e4544006da0dd5e793a19c2149321", "html_url": "https://github.com/rust-lang/rust/commit/b92552d5578e4544006da0dd5e793a19c2149321"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f633703be56d409106b73e1c8b9913acdd64935b", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3dfe36d09436317e035ee3caa19c7e1d260053e1", "patch": "@@ -42,13 +42,13 @@ use std::cmp;\n \n #[derive(Copy, Clone)]\n pub enum FnKind<'a> {\n-    /// #[xxx] pub async/const/extern \"Abi\" fn foo()\n-    ItemFn(Name, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n+    /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`\n+    ItemFn(Ident, &'a Generics, FnHeader, &'a Visibility, &'a [Attribute]),\n \n-    /// fn foo(&self)\n+    /// `fn foo(&self)`\n     Method(Ident, &'a MethodSig, Option<&'a Visibility>, &'a [Attribute]),\n \n-    /// |x, y| {}\n+    /// `|x, y| {}`\n     Closure(&'a [Attribute]),\n }\n \n@@ -472,7 +472,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n             visitor.visit_nested_body(body);\n         }\n         ItemKind::Fn(ref declaration, header, ref generics, body_id) => {\n-            visitor.visit_fn(FnKind::ItemFn(item.ident.name,\n+            visitor.visit_fn(FnKind::ItemFn(item.ident,\n                                             generics,\n                                             header,\n                                             &item.vis,"}, {"sha": "f61b8551927bbd659b680bb6ce1deee18868b914", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dfe36d09436317e035ee3caa19c7e1d260053e1/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=3dfe36d09436317e035ee3caa19c7e1d260053e1", "patch": "@@ -15,7 +15,7 @@ use hir as ast;\n use hir::map;\n use hir::{Expr, FnDecl, Node};\n use hir::intravisit::FnKind;\n-use syntax::ast::{Attribute, Ident, Name, NodeId};\n+use syntax::ast::{Attribute, Ident, NodeId};\n use syntax_pos::Span;\n \n /// An FnLikeNode is a Node that is like a fn, in that it has a decl\n@@ -98,7 +98,7 @@ impl<'a> Code<'a> {\n /// These are all the components one can extract from a fn item for\n /// use when implementing FnLikeNode operations.\n struct ItemFnParts<'a> {\n-    name:     Name,\n+    ident:    Ident,\n     decl:     &'a ast::FnDecl,\n     header:   ast::FnHeader,\n     vis:      &'a ast::Visibility,\n@@ -200,7 +200,7 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.name, p.generics, p.header, p.vis, p.attrs)\n+            FnKind::ItemFn(p.ident, p.generics, p.header, p.vis, p.attrs)\n         };\n         let closure = |c: ClosureParts<'a>| {\n             FnKind::Closure(c.attrs)\n@@ -228,7 +228,7 @@ impl<'a> FnLikeNode<'a> {\n                 ast::ItemKind::Fn(ref decl, header, ref generics, block) =>\n                     item_fn(ItemFnParts {\n                         id: i.id,\n-                        name: i.ident.name,\n+                        ident: i.ident,\n                         decl: &decl,\n                         body: block,\n                         vis: &i.vis,"}]}