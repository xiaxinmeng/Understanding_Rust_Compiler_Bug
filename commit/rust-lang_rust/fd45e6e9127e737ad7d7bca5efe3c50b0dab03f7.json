{"sha": "fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNDVlNmU5MTI3ZTczN2FkN2Q3YmNhNWVmZTNjNTBiMGRhYjAzZjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-06-29T15:51:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-29T15:51:21Z"}, "message": "Rollup merge of #34459 - jseyfried:expansion_cleanup, r=nrc\n\nMiscellaneous macro expansion cleanup and groundwork\n\nr? @nrc", "tree": {"sha": "efa5b5d02389e82c7b683bab044b9977c0760e6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efa5b5d02389e82c7b683bab044b9977c0760e6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "html_url": "https://github.com/rust-lang/rust/commit/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "470c5191f553eb86a3a849e88d642dbd09a32e25", "url": "https://api.github.com/repos/rust-lang/rust/commits/470c5191f553eb86a3a849e88d642dbd09a32e25", "html_url": "https://github.com/rust-lang/rust/commit/470c5191f553eb86a3a849e88d642dbd09a32e25"}, {"sha": "e58963d3e45895c150a8c5894c2b7ad87b448568", "url": "https://api.github.com/repos/rust-lang/rust/commits/e58963d3e45895c150a8c5894c2b7ad87b448568", "html_url": "https://github.com/rust-lang/rust/commit/e58963d3e45895c150a8c5894c2b7ad87b448568"}], "stats": {"total": 318, "additions": 121, "deletions": 197}, "files": [{"sha": "2cc39412182dc5a771417a8f7e714cdf6cad4a3d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -50,6 +50,7 @@ use session::Session;\n use std::collections::BTreeMap;\n use std::iter;\n use syntax::ast::*;\n+use syntax::errors;\n use syntax::ptr::P;\n use syntax::codemap::{respan, Spanned};\n use syntax::parse::token;\n@@ -60,7 +61,7 @@ use syntax_pos::Span;\n pub struct LoweringContext<'a> {\n     crate_root: Option<&'static str>,\n     // Use to assign ids to hir nodes that do not directly correspond to an ast node\n-    id_assigner: &'a NodeIdAssigner,\n+    sess: Option<&'a Session>,\n     // As we walk the AST we must keep track of the current 'parent' def id (in\n     // the form of a DefIndex) so that if we create a new node which introduces\n     // a definition, then we can properly create the def id.\n@@ -99,7 +100,6 @@ impl Resolver for DummyResolver {\n \n pub fn lower_crate(sess: &Session,\n                    krate: &Crate,\n-                   id_assigner: &NodeIdAssigner,\n                    resolver: &mut Resolver)\n                    -> hir::Crate {\n     // We're constructing the HIR here; we don't care what we will\n@@ -115,17 +115,17 @@ pub fn lower_crate(sess: &Session,\n         } else {\n             Some(\"std\")\n         },\n-        id_assigner: id_assigner,\n+        sess: Some(sess),\n         parent_def: None,\n         resolver: resolver,\n     }.lower_crate(krate)\n }\n \n impl<'a> LoweringContext<'a> {\n-    pub fn testing_context(id_assigner: &'a NodeIdAssigner, resolver: &'a mut Resolver) -> Self {\n+    pub fn testing_context(resolver: &'a mut Resolver) -> Self {\n         LoweringContext {\n             crate_root: None,\n-            id_assigner: id_assigner,\n+            sess: None,\n             parent_def: None,\n             resolver: resolver,\n         }\n@@ -161,7 +161,12 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn next_id(&self) -> NodeId {\n-        self.id_assigner.next_node_id()\n+        self.sess.map(Session::next_node_id).unwrap_or(0)\n+    }\n+\n+    fn diagnostic(&self) -> &errors::Handler {\n+        self.sess.map(Session::diagnostic)\n+                 .unwrap_or_else(|| panic!(\"this lowerer cannot emit diagnostics\"))\n     }\n \n     fn str_to_ident(&self, s: &'static str) -> Name {\n@@ -786,7 +791,7 @@ impl<'a> LoweringContext<'a> {\n         if let Some(SelfKind::Explicit(..)) = sig.decl.get_self().map(|eself| eself.node) {\n             match hir_sig.decl.get_self().map(|eself| eself.node) {\n                 Some(hir::SelfKind::Value(..)) | Some(hir::SelfKind::Region(..)) => {\n-                    self.id_assigner.diagnostic().span_err(sig.decl.inputs[0].ty.span,\n+                    self.diagnostic().span_err(sig.decl.inputs[0].ty.span,\n                         \"the type placeholder `_` is not allowed within types on item signatures\");\n                 }\n                 _ => {}\n@@ -1212,7 +1217,7 @@ impl<'a> LoweringContext<'a> {\n                             make_struct(self, e, &[\"RangeInclusive\", \"NonEmpty\"],\n                                                  &[(\"start\", e1), (\"end\", e2)]),\n \n-                        _ => panic!(self.id_assigner.diagnostic()\n+                        _ => panic!(self.diagnostic()\n                                         .span_fatal(e.span, \"inclusive range with no end\")),\n                     };\n                 }"}, {"sha": "2b89695ab41cad2fdbb39f846547a314f1ece101", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -25,15 +25,15 @@ pub struct DefCollector<'ast> {\n     // If we are walking HIR (c.f., AST), we need to keep a reference to the\n     // crate.\n     hir_crate: Option<&'ast hir::Crate>,\n-    pub definitions: Definitions,\n+    definitions: &'ast mut Definitions,\n     parent_def: Option<DefIndex>,\n }\n \n impl<'ast> DefCollector<'ast> {\n-    pub fn root() -> DefCollector<'ast> {\n+    pub fn root(definitions: &'ast mut Definitions) -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             hir_crate: None,\n-            definitions: Definitions::new(),\n+            definitions: definitions,\n             parent_def: None,\n         };\n         let root = collector.create_def_with_parent(None, CRATE_NODE_ID, DefPathData::CrateRoot);\n@@ -48,7 +48,7 @@ impl<'ast> DefCollector<'ast> {\n     pub fn extend(parent_node: NodeId,\n                   parent_def_path: DefPath,\n                   parent_def_id: DefId,\n-                  definitions: Definitions)\n+                  definitions: &'ast mut Definitions)\n                   -> DefCollector<'ast> {\n         let mut collector = DefCollector {\n             hir_crate: None,"}, {"sha": "3317585f820aa60b30647c97d7b33c1561a7b784", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -10,8 +10,9 @@\n \n use middle::cstore::LOCAL_CRATE;\n use hir::def_id::{DefId, DefIndex};\n+use hir::map::def_collector::DefCollector;\n use rustc_data_structures::fnv::FnvHashMap;\n-use syntax::ast;\n+use syntax::{ast, visit};\n use syntax::parse::token::InternedString;\n use util::nodemap::NodeMap;\n \n@@ -189,6 +190,11 @@ impl Definitions {\n         }\n     }\n \n+    pub fn collect(&mut self, krate: &ast::Crate) {\n+        let mut def_collector = DefCollector::root(self);\n+        visit::walk_crate(&mut def_collector, krate);\n+    }\n+\n     /// Get the number of definitions.\n     pub fn len(&self) -> usize {\n         self.data.len()"}, {"sha": "960e32ae99faf0810cdde1ff5fe9adf479c7f7dc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -24,7 +24,6 @@ use hir::def_id::{CRATE_DEF_INDEX, DefId, DefIndex};\n use syntax::abi::Abi;\n use syntax::ast::{self, Name, NodeId, DUMMY_NODE_ID, };\n use syntax::codemap::Spanned;\n-use syntax::visit;\n use syntax_pos::Span;\n \n use hir::*;\n@@ -780,12 +779,6 @@ impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n     }\n }\n \n-pub fn collect_definitions<'ast>(krate: &'ast ast::Crate) -> Definitions {\n-    let mut def_collector = DefCollector::root();\n-    visit::walk_crate(&mut def_collector, krate);\n-    def_collector.definitions\n-}\n-\n pub fn map_crate<'ast>(forest: &'ast mut Forest,\n                        definitions: Definitions)\n                        -> Map<'ast> {\n@@ -842,13 +835,12 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     let ii = map.forest.inlined_items.alloc(ii);\n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n \n-    let defs = mem::replace(&mut *map.definitions.borrow_mut(), Definitions::new());\n+    let defs = &mut *map.definitions.borrow_mut();\n     let mut def_collector = DefCollector::extend(ii_parent_id,\n                                                  parent_def_path.clone(),\n                                                  parent_def_id,\n                                                  defs);\n     def_collector.walk_item(ii, map.krate());\n-    *map.definitions.borrow_mut() = def_collector.definitions;\n \n     let mut collector = NodeCollector::extend(map.krate(),\n                                               ii,"}, {"sha": "fdaf182c6054246e0ed2d62b6958f8dc38c1c5f1", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -20,7 +20,7 @@ use ty::tls;\n use util::nodemap::{NodeMap, FnvHashMap};\n use mir::transform as mir_pass;\n \n-use syntax::ast::{NodeId, NodeIdAssigner, Name};\n+use syntax::ast::{NodeId, Name};\n use errors::{self, DiagnosticBuilder};\n use errors::emitter::{Emitter, BasicEmitter, EmitterWriter};\n use syntax::json::JsonEmitter;\n@@ -272,6 +272,9 @@ impl Session {\n \n         id\n     }\n+    pub fn next_node_id(&self) -> NodeId {\n+        self.reserve_node_ids(1)\n+    }\n     pub fn diagnostic<'a>(&'a self) -> &'a errors::Handler {\n         &self.parse_sess.span_diagnostic\n     }\n@@ -345,20 +348,6 @@ impl Session {\n     }\n }\n \n-impl NodeIdAssigner for Session {\n-    fn next_node_id(&self) -> NodeId {\n-        self.reserve_node_ids(1)\n-    }\n-\n-    fn peek_node_id(&self) -> NodeId {\n-        self.next_node_id.get().checked_add(1).unwrap()\n-    }\n-\n-    fn diagnostic(&self) -> &errors::Handler {\n-        self.diagnostic()\n-    }\n-}\n-\n fn split_msg_into_multilines(msg: &str) -> Option<String> {\n     // Conditions for enabling multi-line errors:\n     if !msg.contains(\"mismatched types\") &&"}, {"sha": "46009e581309444f7496ba886aff3f180899840f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 35, "deletions": 50, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::dep_graph::DepGraph;\n use rustc::hir;\n use rustc::hir::{map as hir_map, FreevarMap, TraitMap};\n use rustc::hir::def::DefMap;\n@@ -27,7 +26,7 @@ use rustc::util::nodemap::NodeSet;\n use rustc_back::sha2::{Sha256, Digest};\n use rustc_borrowck as borrowck;\n use rustc_incremental;\n-use rustc_resolve as resolve;\n+use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::macro_import;\n use rustc_metadata::creader::read_local_crates;\n use rustc_metadata::cstore::CStore;\n@@ -49,13 +48,11 @@ use std::ffi::{OsString, OsStr};\n use std::fs;\n use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n-use syntax::ast::{self, NodeIdAssigner};\n+use syntax::{ast, diagnostics, visit};\n use syntax::attr::{self, AttrMetaMethods};\n-use syntax::diagnostics;\n use syntax::fold::Folder;\n use syntax::parse::{self, PResult, token};\n use syntax::util::node_count::NodeCounter;\n-use syntax::visit;\n use syntax;\n use syntax_ext;\n \n@@ -293,7 +290,7 @@ pub struct CompileController<'a> {\n     pub after_analysis: PhaseController<'a>,\n     pub after_llvm: PhaseController<'a>,\n \n-    pub make_glob_map: resolve::MakeGlobMap,\n+    pub make_glob_map: MakeGlobMap,\n }\n \n impl<'a> CompileController<'a> {\n@@ -305,7 +302,7 @@ impl<'a> CompileController<'a> {\n             after_hir_lowering: PhaseController::basic(),\n             after_analysis: PhaseController::basic(),\n             after_llvm: PhaseController::basic(),\n-            make_glob_map: resolve::MakeGlobMap::No,\n+            make_glob_map: MakeGlobMap::No,\n         }\n     }\n }\n@@ -564,7 +561,7 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n                                         mut krate: ast::Crate,\n                                         crate_name: &'a str,\n                                         addl_plugins: Option<Vec<String>>,\n-                                        make_glob_map: resolve::MakeGlobMap)\n+                                        make_glob_map: MakeGlobMap)\n                                         -> Result<ExpansionResult<'a>, usize> {\n     let time_passes = sess.time_passes();\n \n@@ -729,13 +726,16 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n \n     krate = assign_node_ids(sess, krate);\n \n+    let resolver_arenas = Resolver::arenas();\n+    let mut resolver = Resolver::new(sess, make_glob_map, &resolver_arenas);\n+\n     // Collect defintions for def ids.\n-    let mut defs =\n-        time(sess.time_passes(), \"collecting defs\", || hir_map::collect_definitions(&krate));\n+    time(sess.time_passes(), \"collecting defs\", || resolver.definitions.collect(&krate));\n \n-    time(sess.time_passes(),\n-         \"external crate/lib resolution\",\n-         || read_local_crates(sess, &cstore, &defs, &krate, crate_name, &sess.dep_graph));\n+    time(sess.time_passes(), \"external crate/lib resolution\", || {\n+        let defs = &resolver.definitions;\n+        read_local_crates(sess, &cstore, defs, &krate, crate_name, &sess.dep_graph)\n+    });\n \n     time(sess.time_passes(),\n          \"early lint checks\",\n@@ -745,8 +745,14 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n          \"AST validation\",\n          || ast_validation::check_crate(sess, &krate));\n \n-    let (analysis, resolutions, hir_forest) =\n-        lower_and_resolve(sess, crate_name, &mut defs, &krate, &sess.dep_graph, make_glob_map);\n+    time(sess.time_passes(), \"name resolution\", || {\n+        resolver.resolve_crate(&krate);\n+    });\n+\n+    // Lower ast -> hir.\n+    let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n+        hir_map::Forest::new(lower_crate(sess, &krate, &mut resolver), &sess.dep_graph)\n+    });\n \n     // Discard MTWT tables that aren't required past lowering to HIR.\n     if !keep_mtwt_tables(sess) {\n@@ -755,9 +761,20 @@ pub fn phase_2_configure_and_expand<'a>(sess: &Session,\n \n     Ok(ExpansionResult {\n         expanded_crate: krate,\n-        defs: defs,\n-        analysis: analysis,\n-        resolutions: resolutions,\n+        defs: resolver.definitions,\n+        analysis: ty::CrateAnalysis {\n+            export_map: resolver.export_map,\n+            access_levels: AccessLevels::default(),\n+            reachable: NodeSet(),\n+            name: crate_name,\n+            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n+        },\n+        resolutions: Resolutions {\n+            def_map: resolver.def_map,\n+            freevars: resolver.freevars,\n+            trait_map: resolver.trait_map,\n+            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n+        },\n         hir_forest: hir_forest\n     })\n }\n@@ -809,38 +826,6 @@ pub fn assign_node_ids(sess: &Session, krate: ast::Crate) -> ast::Crate {\n     krate\n }\n \n-pub fn lower_and_resolve<'a>(sess: &Session,\n-                             id: &'a str,\n-                             defs: &mut hir_map::Definitions,\n-                             krate: &ast::Crate,\n-                             dep_graph: &DepGraph,\n-                             make_glob_map: resolve::MakeGlobMap)\n-                             -> (ty::CrateAnalysis<'a>, Resolutions, hir_map::Forest) {\n-    resolve::with_resolver(sess, defs, make_glob_map, |mut resolver| {\n-        time(sess.time_passes(), \"name resolution\", || {\n-            resolve::resolve_crate(&mut resolver, krate);\n-        });\n-\n-        // Lower ast -> hir.\n-        let hir_forest = time(sess.time_passes(), \"lowering ast -> hir\", || {\n-            hir_map::Forest::new(lower_crate(sess, krate, sess, &mut resolver), dep_graph)\n-        });\n-\n-        (ty::CrateAnalysis {\n-            export_map: resolver.export_map,\n-            access_levels: AccessLevels::default(),\n-            reachable: NodeSet(),\n-            name: &id,\n-            glob_map: if resolver.make_glob_map { Some(resolver.glob_map) } else { None },\n-        }, Resolutions {\n-            def_map: resolver.def_map,\n-            freevars: resolver.freevars,\n-            trait_map: resolver.trait_map,\n-            maybe_unused_trait_imports: resolver.maybe_unused_trait_imports,\n-        }, hir_forest)\n-    })\n-}\n-\n /// Run the resolution, typechecking, region checking and other\n /// miscellaneous analysis passes on the crate. Return various\n /// structures carrying the results of the analysis."}, {"sha": "7ef00b971c57ba6262f24be7b313c4798c9621ee", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 20, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -38,7 +38,6 @@ use rustc::ty::subst;\n use rustc::ty::{self, Ty, TyCtxt};\n \n use syntax::ast;\n-use syntax::ast::NodeIdAssigner;\n use syntax::ptr::P;\n use syntax_pos;\n \n@@ -56,7 +55,6 @@ use rustc_serialize::{Encodable, EncoderHelpers};\n \n #[cfg(test)] use std::io::Cursor;\n #[cfg(test)] use syntax::parse;\n-#[cfg(test)] use syntax::ast::NodeId;\n #[cfg(test)] use rustc::hir::print as pprust;\n #[cfg(test)] use rustc::hir::lowering::{LoweringContext, DummyResolver};\n \n@@ -1295,32 +1293,15 @@ impl FakeExtCtxt for parse::ParseSess {\n     fn parse_sess(&self) -> &parse::ParseSess { self }\n }\n \n-#[cfg(test)]\n-struct FakeNodeIdAssigner;\n-\n-#[cfg(test)]\n-// It should go without saying that this may give unexpected results. Avoid\n-// lowering anything which needs new nodes.\n-impl NodeIdAssigner for FakeNodeIdAssigner {\n-    fn next_node_id(&self) -> NodeId {\n-        0\n-    }\n-\n-    fn peek_node_id(&self) -> NodeId {\n-        0\n-    }\n-}\n-\n #[cfg(test)]\n fn mk_ctxt() -> parse::ParseSess {\n     parse::ParseSess::new()\n }\n \n #[cfg(test)]\n fn with_testing_context<T, F: FnOnce(&mut LoweringContext) -> T>(f: F) -> T {\n-    let assigner = FakeNodeIdAssigner;\n     let mut resolver = DummyResolver;\n-    let mut lcx = LoweringContext::testing_context(&assigner, &mut resolver);\n+    let mut lcx = LoweringContext::testing_context(&mut resolver);\n     f(&mut lcx)\n }\n "}, {"sha": "9c9e3ff037bc40061925739e23bf4af8abda283e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 36, "deletions": 53, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -47,7 +47,7 @@ use rustc::hir::{self, PrimTy, TyBool, TyChar, TyFloat, TyInt, TyUint, TyStr};\n use rustc::session::Session;\n use rustc::lint;\n use rustc::hir::def::*;\n-use rustc::hir::def_id::DefId;\n+use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::ty;\n use rustc::ty::subst::{ParamSpace, FnSpace, TypeSpace};\n use rustc::hir::{Freevar, FreevarMap, TraitCandidate, TraitMap, GlobMap};\n@@ -925,7 +925,7 @@ impl PrimitiveTypeTable {\n pub struct Resolver<'a> {\n     session: &'a Session,\n \n-    definitions: &'a mut Definitions,\n+    pub definitions: Definitions,\n \n     graph_root: Module<'a>,\n \n@@ -1001,7 +1001,7 @@ pub struct Resolver<'a> {\n     arenas: &'a ResolverArenas<'a>,\n }\n \n-struct ResolverArenas<'a> {\n+pub struct ResolverArenas<'a> {\n     modules: arena::TypedArena<ModuleS<'a>>,\n     local_modules: RefCell<Vec<Module<'a>>>,\n     name_bindings: arena::TypedArena<NameBinding<'a>>,\n@@ -1079,7 +1079,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n     }\n \n     fn definitions(&mut self) -> Option<&mut Definitions> {\n-        Some(self.definitions)\n+        Some(&mut self.definitions)\n     }\n }\n \n@@ -1100,12 +1100,9 @@ impl Named for hir::PathSegment {\n }\n \n impl<'a> Resolver<'a> {\n-    fn new(session: &'a Session,\n-           definitions: &'a mut Definitions,\n-           make_glob_map: MakeGlobMap,\n-           arenas: &'a ResolverArenas<'a>)\n-           -> Resolver<'a> {\n-        let root_def_id = definitions.local_def_id(CRATE_NODE_ID);\n+    pub fn new(session: &'a Session, make_glob_map: MakeGlobMap, arenas: &'a ResolverArenas<'a>)\n+               -> Resolver<'a> {\n+        let root_def_id = DefId::local(CRATE_DEF_INDEX);\n         let graph_root =\n             ModuleS::new(NoParentLink, Some(Def::Mod(root_def_id)), false, arenas);\n         let graph_root = arenas.alloc_module(graph_root);\n@@ -1115,7 +1112,7 @@ impl<'a> Resolver<'a> {\n         Resolver {\n             session: session,\n \n-            definitions: definitions,\n+            definitions: Definitions::new(),\n \n             // The outermost module has def ID 0; this is not reflected in the\n             // AST.\n@@ -1158,7 +1155,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    fn arenas() -> ResolverArenas<'a> {\n+    pub fn arenas() -> ResolverArenas<'a> {\n         ResolverArenas {\n             modules: arena::TypedArena::new(),\n             local_modules: RefCell::new(Vec::new()),\n@@ -1168,6 +1165,27 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n+    /// Entry point to crate resolution.\n+    pub fn resolve_crate(&mut self, krate: &Crate) {\n+        // Currently, we ignore the name resolution data structures for\n+        // the purposes of dependency tracking. Instead we will run name\n+        // resolution and include its output in the hash of each item,\n+        // much like we do for macro expansion. In other words, the hash\n+        // reflects not just its contents but the results of name\n+        // resolution on those contents. Hopefully we'll push this back at\n+        // some point.\n+        let _ignore = self.session.dep_graph.in_ignore();\n+\n+        self.build_reduced_graph(krate);\n+        resolve_imports::resolve_imports(self);\n+\n+        self.current_module = self.graph_root;\n+        visit::walk_crate(self, krate);\n+\n+        check_unused::check_crate(self, krate);\n+        self.report_privacy_errors();\n+    }\n+\n     fn new_module(&self, parent_link: ParentLink<'a>, def: Option<Def>, external: bool)\n                   -> Module<'a> {\n         self.arenas.alloc_module(ModuleS::new(parent_link, def, external, self.arenas))\n@@ -1568,12 +1586,6 @@ impl<'a> Resolver<'a> {\n         None\n     }\n \n-    fn resolve_crate(&mut self, krate: &Crate) {\n-        debug!(\"(resolving crate) starting\");\n-        self.current_module = self.graph_root;\n-        visit::walk_crate(self, krate);\n-    }\n-\n     fn resolve_item(&mut self, item: &Item) {\n         let name = item.ident.name;\n \n@@ -2287,24 +2299,25 @@ impl<'a> Resolver<'a> {\n                 PatKind::Ident(bmode, ref ident, ref opt_pat) => {\n                     // First try to resolve the identifier as some existing\n                     // entity, then fall back to a fresh binding.\n-                    let resolution = if let Ok(resolution) = self.resolve_path(pat.id,\n-                                &Path::from_ident(ident.span, ident.node), 0, ValueNS) {\n+                    let local_def = self.resolve_identifier(ident.node, ValueNS, true);\n+                    let resolution = if let Some(LocalDef { def, .. }) = local_def {\n                         let always_binding = !pat_src.is_refutable() || opt_pat.is_some() ||\n                                              bmode != BindingMode::ByValue(Mutability::Immutable);\n-                        match resolution.base_def {\n+                        match def {\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) if !always_binding => {\n                                 // A constant, unit variant, etc pattern.\n-                                resolution\n+                                PathResolution::new(def)\n                             }\n                             Def::Struct(..) | Def::Variant(..) |\n                             Def::Const(..) | Def::AssociatedConst(..) | Def::Static(..) => {\n                                 // A fresh binding that shadows something unacceptable.\n+                                let kind_name = PathResolution::new(def).kind_name();\n                                 resolve_error(\n                                     self,\n                                     ident.span,\n                                     ResolutionError::BindingShadowsSomethingUnacceptable(\n-                                        pat_src.descr(), resolution.kind_name(), ident.node.name)\n+                                        pat_src.descr(), kind_name, ident.node.name)\n                                 );\n                                 err_path_resolution()\n                             }\n@@ -3454,34 +3467,4 @@ pub enum MakeGlobMap {\n     No,\n }\n \n-/// Entry point to crate resolution.\n-pub fn resolve_crate<'a, 'b>(resolver: &'b mut Resolver<'a>, krate: &'b Crate) {\n-    // Currently, we ignore the name resolution data structures for\n-    // the purposes of dependency tracking. Instead we will run name\n-    // resolution and include its output in the hash of each item,\n-    // much like we do for macro expansion. In other words, the hash\n-    // reflects not just its contents but the results of name\n-    // resolution on those contents. Hopefully we'll push this back at\n-    // some point.\n-    let _ignore = resolver.session.dep_graph.in_ignore();\n-\n-    resolver.build_reduced_graph(krate);\n-    resolve_imports::resolve_imports(resolver);\n-    resolver.resolve_crate(krate);\n-\n-    check_unused::check_crate(resolver, krate);\n-    resolver.report_privacy_errors();\n-}\n-\n-pub fn with_resolver<'a, T, F>(session: &'a Session,\n-                               definitions: &'a mut Definitions,\n-                               make_glob_map: MakeGlobMap,\n-                               f: F) -> T\n-    where F: for<'b> FnOnce(Resolver<'b>) -> T,\n-{\n-    let arenas = Resolver::arenas();\n-    let resolver = Resolver::new(session, definitions, make_glob_map, &arenas);\n-    f(resolver)\n-}\n-\n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "cc033cec8b8b1db948ee3f47ae983315a6e8d81e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -19,7 +19,6 @@ pub use util::ThinVec;\n use syntax_pos::{mk_sp, Span, DUMMY_SP, ExpnId};\n use codemap::{respan, Spanned};\n use abi::Abi;\n-use errors;\n use parse::token::{self, keywords, InternedString};\n use print::pprust;\n use ptr::P;\n@@ -362,15 +361,6 @@ pub const CRATE_NODE_ID: NodeId = 0;\n /// small, positive ids.\n pub const DUMMY_NODE_ID: NodeId = !0;\n \n-pub trait NodeIdAssigner {\n-    fn next_node_id(&self) -> NodeId;\n-    fn peek_node_id(&self) -> NodeId;\n-\n-    fn diagnostic(&self) -> &errors::Handler {\n-        panic!(\"this ID assigner cannot emit diagnostics\")\n-    }\n-}\n-\n /// The AST represents all type param bounds as types.\n /// typeck::collect::compute_bounds matches these against\n /// the \"special\" built-in traits (see middle::lang_items) and"}, {"sha": "3c88fb8f6703b6796655bdd20020943a2a118bee", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -839,7 +839,7 @@ impl HasAttrs for StmtKind {\n     fn attrs(&self) -> &[Attribute] {\n         match *self {\n             StmtKind::Local(ref local) => local.attrs(),\n-            StmtKind::Item(ref item) => item.attrs(),\n+            StmtKind::Item(..) => &[],\n             StmtKind::Expr(ref expr) | StmtKind::Semi(ref expr) => expr.attrs(),\n             StmtKind::Mac(ref mac) => {\n                 let (_, _, ref attrs) = **mac;\n@@ -851,7 +851,7 @@ impl HasAttrs for StmtKind {\n     fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n         match self {\n             StmtKind::Local(local) => StmtKind::Local(local.map_attrs(f)),\n-            StmtKind::Item(item) => StmtKind::Item(item.map_attrs(f)),\n+            StmtKind::Item(..) => self,\n             StmtKind::Expr(expr) => StmtKind::Expr(expr.map_attrs(f)),\n             StmtKind::Semi(expr) => StmtKind::Semi(expr.map_attrs(f)),\n             StmtKind::Mac(mac) => StmtKind::Mac(mac.map(|(mac, style, attrs)| {"}, {"sha": "eaf82f5f43ded1fe71823722f8ddd4cdada45b7d", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -213,12 +213,7 @@ impl<'a> fold::Folder for StripUnconfigured<'a> {\n     }\n \n     fn fold_stmt(&mut self, stmt: ast::Stmt) -> SmallVector<ast::Stmt> {\n-        // avoid calling `visit_stmt_or_expr_attrs` on items\n-        match stmt.node {\n-            ast::StmtKind::Item(_) => {}\n-            _ => self.visit_stmt_or_expr_attrs(stmt.attrs()),\n-        }\n-\n+        self.visit_stmt_or_expr_attrs(stmt.attrs());\n         self.configure(stmt).map(|stmt| fold::noop_fold_stmt(stmt, self))\n                             .unwrap_or(SmallVector::zero())\n     }"}, {"sha": "ca38ef068d05f4c610f7480e9f5444392af7afbd", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -443,6 +443,10 @@ impl MacResult for DummyResult {\n             span: self.span,\n         }))\n     }\n+\n+    fn make_ty(self: Box<DummyResult>) -> Option<P<ast::Ty>> {\n+        Some(DummyResult::raw_ty(self.span))\n+    }\n }\n \n /// An enum representing the different kinds of syntax extensions."}, {"sha": "aca1fae6a3c8e794a0f2efdaa8cdff89dd1bb2ef", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=fd45e6e9127e737ad7d7bca5efe3c50b0dab03f7", "patch": "@@ -43,18 +43,19 @@ trait MacroGenerable: Sized {\n     fn fold_with<F: Folder>(self, folder: &mut F) -> Self;\n     fn visit_with<V: Visitor>(&self, visitor: &mut V);\n \n-    // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n-    fn dummy(span: Span) -> Self;\n-\n     // The user-friendly name of the node type (e.g. \"expression\", \"item\", etc.) for diagnostics.\n     fn kind_name() -> &'static str;\n+\n+    // Return a placeholder expansion to allow compilation to continue after an erroring expansion.\n+    fn dummy(span: Span) -> Self {\n+        Self::make_with(DummyResult::any(span)).unwrap()\n+    }\n }\n \n macro_rules! impl_macro_generable {\n     ($($ty:ty: $kind_name:expr, .$make:ident,\n                $(.$fold:ident)*  $(lift .$fold_elt:ident)*,\n-               $(.$visit:ident)* $(lift .$visit_elt:ident)*,\n-               |$span:ident| $dummy:expr;)*) => { $(\n+               $(.$visit:ident)* $(lift .$visit_elt:ident)*;)*) => { $(\n         impl MacroGenerable for $ty {\n             fn kind_name() -> &'static str { $kind_name }\n             fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self> { result.$make() }\n@@ -66,31 +67,24 @@ macro_rules! impl_macro_generable {\n                 $( visitor.$visit(self) )*\n                 $( for item in self.as_slice() { visitor. $visit_elt (item) } )*\n             }\n-            fn dummy($span: Span) -> Self { $dummy }\n         }\n     )* }\n }\n \n impl_macro_generable! {\n-    P<ast::Pat>: \"pattern\", .make_pat, .fold_pat, .visit_pat, |span| P(DummyResult::raw_pat(span));\n-    P<ast::Ty>:  \"type\",    .make_ty,  .fold_ty,  .visit_ty,  |span| DummyResult::raw_ty(span);\n-    P<ast::Expr>:\n-        \"expression\", .make_expr, .fold_expr, .visit_expr, |span| DummyResult::raw_expr(span);\n-    SmallVector<ast::Stmt>:\n-        \"statement\",  .make_stmts, lift .fold_stmt, lift .visit_stmt, |_span| SmallVector::zero();\n-    SmallVector<P<ast::Item>>:\n-        \"item\",       .make_items, lift .fold_item, lift .visit_item, |_span| SmallVector::zero();\n+    P<ast::Expr>: \"expression\", .make_expr, .fold_expr, .visit_expr;\n+    P<ast::Pat>:  \"pattern\",    .make_pat,  .fold_pat,  .visit_pat;\n+    P<ast::Ty>:   \"type\",       .make_ty,   .fold_ty,   .visit_ty;\n+    SmallVector<ast::Stmt>: \"statement\", .make_stmts, lift .fold_stmt, lift .visit_stmt;\n+    SmallVector<P<ast::Item>>: \"item\",   .make_items, lift .fold_item, lift .visit_item;\n     SmallVector<ast::TraitItem>:\n-        \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item,\n-        |_span| SmallVector::zero();\n+        \"trait item\", .make_trait_items, lift .fold_trait_item, lift .visit_trait_item;\n     SmallVector<ast::ImplItem>:\n-        \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item,\n-        |_span| SmallVector::zero();\n+        \"impl item\",  .make_impl_items,  lift .fold_impl_item,  lift .visit_impl_item;\n }\n \n impl MacroGenerable for Option<P<ast::Expr>> {\n     fn kind_name() -> &'static str { \"expression\" }\n-    fn dummy(_span: Span) -> Self { None }\n     fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self> {\n         result.make_expr().map(Some)\n     }"}]}