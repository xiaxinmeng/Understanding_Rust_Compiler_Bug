{"sha": "221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMWI3Y2EzYzI3ZGY1YmI0NzI5YTcwNjBlMTY5YzBhMzRkYWI5ZDA=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-09T21:49:25Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-30T03:27:05Z"}, "message": "Remove usages of Term::as_str and mark it for removal", "tree": {"sha": "8ce37598c9a9da46410474eac18c436cc8b19d4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ce37598c9a9da46410474eac18c436cc8b19d4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "html_url": "https://github.com/rust-lang/rust/commit/221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78bcd9b5fea31d8a4738e3cbd423a285db73f84d", "url": "https://api.github.com/repos/rust-lang/rust/commits/78bcd9b5fea31d8a4738e3cbd423a285db73f84d", "html_url": "https://github.com/rust-lang/rust/commit/78bcd9b5fea31d8a4738e3cbd423a285db73f84d"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "7efcd0cbf1d9313efc5ed48b83eaeeb645f1bac2", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "patch": "@@ -715,6 +715,7 @@ impl Term {\n         }\n     }\n \n+    // FIXME: Remove this, do not stabilize\n     /// Get a reference to the interned string.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn as_str(&self) -> &str {\n@@ -739,7 +740,7 @@ impl Term {\n #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n impl fmt::Display for Term {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.as_str().fmt(f)\n+        self.sym.as_str().fmt(f)\n     }\n }\n \n@@ -1131,7 +1132,7 @@ impl TokenTree {\n             },\n             self::TokenTree::Term(tt) => {\n                 let ident = ast::Ident::new(tt.sym, tt.span.0);\n-                let sym_str = tt.sym.as_str();\n+                let sym_str = tt.sym.to_string();\n                 let token = if sym_str.starts_with(\"'\") {\n                     Lifetime(ident)\n                 } else if sym_str.starts_with(\"r#\") {"}, {"sha": "70f0b078399817ebf71f40d208e2832e937837a4", "filename": "src/libproc_macro/quote.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Flibproc_macro%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Flibproc_macro%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fquote.rs?ref=221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "patch": "@@ -183,7 +183,7 @@ impl Quote for Op {\n \n impl Quote for Term {\n     fn quote(self) -> TokenStream {\n-        quote!(::Term::new((quote self.as_str()), (quote self.span())))\n+        quote!(::Term::new((quote self.sym.as_str()), (quote self.span())))\n     }\n }\n "}, {"sha": "6b34ccc6543ea230ff9072e80e89d19f0ae52989", "filename": "src/test/compile-fail-fulldeps/proc-macro/auxiliary/attributes-included.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fproc-macro%2Fauxiliary%2Fattributes-included.rs?ref=221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "patch": "@@ -86,7 +86,7 @@ fn assert_doc(slice: &mut &[TokenTree]) {\n     }\n \n     match &tokens[0] {\n-        TokenTree::Term(tt) => assert_eq!(\"doc\", tt.as_str()),\n+        TokenTree::Term(tt) => assert_eq!(\"doc\", &*tt.to_string()),\n         _ => panic!(\"expected `doc`\"),\n     }\n     match &tokens[1] {\n@@ -118,11 +118,11 @@ fn assert_invoc(slice: &mut &[TokenTree]) {\n \n fn assert_foo(slice: &mut &[TokenTree]) {\n     match &slice[0] {\n-        TokenTree::Term(tt) => assert_eq!(tt.as_str(), \"fn\"),\n+        TokenTree::Term(tt) => assert_eq!(&*tt.to_string(), \"fn\"),\n         _ => panic!(\"expected fn\"),\n     }\n     match &slice[1] {\n-        TokenTree::Term(tt) => assert_eq!(tt.as_str(), \"foo\"),\n+        TokenTree::Term(tt) => assert_eq!(&*tt.to_string(), \"foo\"),\n         _ => panic!(\"expected foo\"),\n     }\n     match &slice[2] {"}, {"sha": "de26f8296e36b513f9e415165aa9311f92bd201f", "filename": "src/test/run-pass-fulldeps/auxiliary/cond_plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221b7ca3c27df5bb4729a7060e169c0a34dab9d0/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fcond_plugin.rs?ref=221b7ca3c27df5bb4729a7060e169c0a34dab9d0", "patch": "@@ -33,7 +33,7 @@ pub fn cond(input: TokenStream) -> TokenStream {\n             panic!(\"Invalid macro usage in cond: {}\", cond);\n         }\n         let is_else = match test {\n-            TokenTree::Term(word) => word.as_str() == \"else\",\n+            TokenTree::Term(word) => &*word.to_string() == \"else\",\n             _ => false,\n         };\n         conds.push(if is_else || input.peek().is_none() {"}]}