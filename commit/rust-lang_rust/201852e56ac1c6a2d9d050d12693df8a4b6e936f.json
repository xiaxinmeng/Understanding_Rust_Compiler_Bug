{"sha": "201852e56ac1c6a2d9d050d12693df8a4b6e936f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMTg1MmU1NmFjMWM2YTJkOWQwNTBkMTI2OTNkZjhhNGI2ZTkzNmY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T12:26:39Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-06T18:05:38Z"}, "message": "linked_list: Cleanup code in split_off", "tree": {"sha": "16b723c437e8766fe4b528ca80d8777a20033fe8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/16b723c437e8766fe4b528ca80d8777a20033fe8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/201852e56ac1c6a2d9d050d12693df8a4b6e936f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/201852e56ac1c6a2d9d050d12693df8a4b6e936f", "html_url": "https://github.com/rust-lang/rust/commit/201852e56ac1c6a2d9d050d12693df8a4b6e936f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/201852e56ac1c6a2d9d050d12693df8a4b6e936f/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "289d5db409b40e8244c9c0ca63fc078b66da79bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/289d5db409b40e8244c9c0ca63fc078b66da79bc", "html_url": "https://github.com/rust-lang/rust/commit/289d5db409b40e8244c9c0ca63fc078b66da79bc"}], "stats": {"total": 50, "additions": 37, "deletions": 13}, "files": [{"sha": "721a3a2595e64c670100e5c5a60b7fe32c1bfe0e", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/201852e56ac1c6a2d9d050d12693df8a4b6e936f/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/201852e56ac1c6a2d9d050d12693df8a4b6e936f/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=201852e56ac1c6a2d9d050d12693df8a4b6e936f", "patch": "@@ -615,25 +615,29 @@ impl<T> LinkedList<T> {\n             iter.tail\n         };\n \n-        let mut splitted_list = LinkedList {\n-            list_head: None,\n+        // The split node is the new tail node of the first part and owns\n+        // the head of the second part.\n+        let mut second_part_head;\n+\n+        unsafe {\n+            second_part_head = split_node.resolve_mut().unwrap().next.take();\n+            match second_part_head {\n+                None => {}\n+                Some(ref mut head) => head.prev = Rawlink::none(),\n+            }\n+        }\n+\n+        let second_part = LinkedList {\n+            list_head: second_part_head,\n             list_tail: self.list_tail,\n             length: len - at\n         };\n \n-        unsafe {\n-            // Swap split_node.next with list_head (which is None), nulling out split_node.next,\n-            // as it is the new tail.\n-            mem::swap(&mut split_node.resolve_mut().unwrap().next, &mut splitted_list.list_head);\n-            // Null out list_head.prev. Note this `unwrap` won't fail because if at == len\n-            // we already branched out at the top of the fn to return the empty list.\n-            splitted_list.list_head.as_mut().unwrap().prev = Rawlink::none();\n-        }\n-        // Fix the tail ptr\n+        // Fix the tail ptr of the first part\n         self.list_tail = split_node;\n         self.length = at;\n \n-        splitted_list\n+        second_part\n     }\n }\n \n@@ -947,7 +951,7 @@ impl<A: Hash> Hash for LinkedList<A> {\n #[cfg(test)]\n mod tests {\n     use std::clone::Clone;\n-    use std::iter::{Iterator, IntoIterator};\n+    use std::iter::{Iterator, IntoIterator, Extend};\n     use std::option::Option::{Some, None, self};\n     use std::__rand::{thread_rng, Rng};\n     use std::thread;\n@@ -1115,6 +1119,26 @@ mod tests {\n         assert_eq!(v1.iter().collect::<Vec<_>>().len(), 3);\n     }\n \n+    #[test]\n+    fn test_split_off() {\n+        let mut v1 = LinkedList::new();\n+        v1.push_front(1u8);\n+        v1.push_front(1u8);\n+        v1.push_front(1u8);\n+        v1.push_front(1u8);\n+\n+        // test all splits\n+        for ix in 0..1 + v1.len() {\n+            let mut a = v1.clone();\n+            let b = a.split_off(ix);\n+            check_links(&a);\n+            check_links(&b);\n+            a.extend(b);\n+            assert_eq!(v1, a);\n+        }\n+    }\n+\n+\n     #[cfg(test)]\n     fn fuzz_test(sz: i32) {\n         let mut m: LinkedList<_> = LinkedList::new();"}]}