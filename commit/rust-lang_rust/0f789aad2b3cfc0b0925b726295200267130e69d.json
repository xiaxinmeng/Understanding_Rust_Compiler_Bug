{"sha": "0f789aad2b3cfc0b0925b726295200267130e69d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNzg5YWFkMmIzY2ZjMGIwOTI1YjcyNjI5NTIwMDI2NzEzMGU2OWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-12T07:05:46Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-02-12T07:05:46Z"}, "message": "add core::iter::repeat_with", "tree": {"sha": "3ce38e6622ac98b056c0b365982ff409f2217f20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ce38e6622ac98b056c0b365982ff409f2217f20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f789aad2b3cfc0b0925b726295200267130e69d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f789aad2b3cfc0b0925b726295200267130e69d", "html_url": "https://github.com/rust-lang/rust/commit/0f789aad2b3cfc0b0925b726295200267130e69d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f789aad2b3cfc0b0925b726295200267130e69d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8398d947d160ad4f26cc22da66e5fbc7030817b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8398d947d160ad4f26cc22da66e5fbc7030817b", "html_url": "https://github.com/rust-lang/rust/commit/b8398d947d160ad4f26cc22da66e5fbc7030817b"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "980f3fc7443ace45bc39f6827abd13a74b5616a5", "filename": "src/libcore/iter/sources.rs", "status": "modified", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0f789aad2b3cfc0b0925b726295200267130e69d/src%2Flibcore%2Fiter%2Fsources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f789aad2b3cfc0b0925b726295200267130e69d/src%2Flibcore%2Fiter%2Fsources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fsources.rs?ref=0f789aad2b3cfc0b0925b726295200267130e69d", "patch": "@@ -57,6 +57,12 @@ unsafe impl<A: Clone> TrustedLen for Repeat<A> {}\n ///\n /// [`take`]: trait.Iterator.html#method.take\n ///\n+/// If the element type of the iterator you need does not implement `Clone`,\n+/// or if you do not want to keep the repeated element in memory, you can\n+/// instead use the [`repeat_with`] function.\n+///\n+/// [`repeat_with`]: fn.repeat_with.html\n+///\n /// # Examples\n ///\n /// Basic usage:\n@@ -99,6 +105,104 @@ pub fn repeat<T: Clone>(elt: T) -> Repeat<T> {\n     Repeat{element: elt}\n }\n \n+/// An iterator that repeats elements of type `A` endlessly by\n+/// applying the provided closure `F: FnMut() -> A`.\n+///\n+/// This `struct` is created by the [`repeat_with`] function.\n+/// See its documentation for more.\n+///\n+/// [`repeat_with`]: fn.repeat_with.html\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"0\")]\n+pub struct RepeatWith<F> {\n+    repeater: F\n+}\n+\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"0\")]\n+impl<A, F: FnMut() -> A> Iterator for RepeatWith<F> {\n+    type Item = A;\n+\n+    #[inline]\n+    fn next(&mut self) -> Option<A> { Some((self.repeater)()) }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (usize, Option<usize>) { (usize::MAX, None) }\n+}\n+\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"0\")]\n+impl<A, F: FnMut() -> A> DoubleEndedIterator for RepeatWith<F> {\n+    #[inline]\n+    fn next_back(&mut self) -> Option<A> { self.next() }\n+}\n+\n+#[unstable(feature = \"fused\", issue = \"35602\")]\n+impl<A, F: FnMut() -> A> FusedIterator for RepeatWith<F> {}\n+\n+#[unstable(feature = \"trusted_len\", issue = \"37572\")]\n+unsafe impl<A, F: FnMut() -> A> TrustedLen for RepeatWith<F> {}\n+\n+/// Creates a new that repeats elements of type `A` endlessly by\n+/// applying the provided closure, the repeater, `F: FnMut() -> A`.\n+///\n+/// The `repeat_with()` function calls the repeater over and over and over and\n+/// over and over and \ud83d\udd01.\n+///\n+/// Infinite iterators like `repeat_with()` are often used with adapters like\n+/// [`take`], in order to make them finite.\n+///\n+/// [`take`]: trait.Iterator.html#method.take\n+///\n+/// If the element type of the iterator you need implements `Clone`, and\n+/// it is OK to keep the source element in memory, you should instead use\n+/// the [`repeat`] function.\n+///\n+/// [`repeat`]: fn.repeat.html\n+///\n+/// # Examples\n+///\n+/// Basic usage:\n+///\n+/// ```\n+/// use std::iter;\n+///\n+/// // let's assume we have some value of a type that is not `Clone`\n+/// // or which don't want to have in memory just yet because it is expensive:\n+/// #[derive(PartialEq, Debug)]\n+/// struct Expensive;\n+///\n+/// // a particular value forever:\n+/// let mut things = iter::repeat_with(|| Expensive);\n+///\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// assert_eq!(Some(Expensive), things.next());\n+/// ```\n+///\n+/// Using mutation and going finite:\n+///\n+/// ```rust\n+/// use std::iter;\n+///\n+/// // From the zeroth to the third power of two:\n+/// let mut curr = 1;\n+/// let mut pow2 = iter::repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+///                     .take(4);\n+///\n+/// assert_eq!(Some(1), pow2.next());\n+/// assert_eq!(Some(2), pow2.next());\n+/// assert_eq!(Some(4), pow2.next());\n+/// assert_eq!(Some(8), pow2.next());\n+///\n+/// // ... and now we're done\n+/// assert_eq!(None, pow2.next());\n+/// ```\n+#[inline]\n+#[unstable(feature = \"iterator_repeat_with\", issue = \"0\")]\n+pub fn repeat_with<A, F: FnMut() -> A>(repeater: F) -> RepeatWith<F> {\n+    RepeatWith { repeater }\n+}\n+\n /// An iterator that yields nothing.\n ///\n /// This `struct` is created by the [`empty`] function. See its documentation for more."}, {"sha": "ca5318d198e7c039e244b353254562aad8f888d4", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0f789aad2b3cfc0b0925b726295200267130e69d/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f789aad2b3cfc0b0925b726295200267130e69d/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=0f789aad2b3cfc0b0925b726295200267130e69d", "patch": "@@ -1549,6 +1549,50 @@ fn test_repeat_take_collect() {\n     assert_eq!(v, vec![42, 42, 42]);\n }\n \n+#[test]\n+fn test_repeat_with() {\n+    struct NotClone(usize);\n+    let mut it = repeat_with(|| NotClone(42));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(it.next(), Some(NotClone(42)));\n+    assert_eq!(repeat_with(|| NotClone(42)).size_hint(), (usize::MAX, None));\n+}\n+\n+#[test]\n+fn test_repeat_with_rev() {\n+    let mut curr = 1;\n+    let mut pow2 = repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+                    .rev().take(4);\n+    assert_eq!(it.next(), Some(1));\n+    assert_eq!(it.next(), Some(2));\n+    assert_eq!(it.next(), Some(4));\n+    assert_eq!(it.next(), Some(8));\n+    assert_eq!(it.next(), None);\n+}\n+\n+#[test]\n+fn test_repeat_with_take() {\n+    let mut it = repeat_with(|| 42).take(3);\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), Some(42));\n+    assert_eq!(it.next(), None);\n+    is_trusted_len(repeat_with(|| 42).take(3));\n+    assert_eq!(repeat_with(|| 42).take(3).size_hint(), (3, Some(3)));\n+    assert_eq!(repeat_with(|| 42).take(0).size_hint(), (0, Some(0)));\n+    assert_eq!(repeat_with(|| 42).take(usize::MAX).size_hint(),\n+               (usize::MAX, Some(usize::MAX)));\n+}\n+\n+#[test]\n+fn test_repeat_take_collect() {\n+    let mut curr = 1;\n+    let v: Vec<_> = repeat_with(|| { let tmp = curr; curr *= 2; tmp })\n+                      .take(5).collect();\n+    assert_eq!(v, vec![1, 2, 4, 8, 16]);\n+}\n+\n #[test]\n fn test_fuse() {\n     let mut it = 0..3;"}]}