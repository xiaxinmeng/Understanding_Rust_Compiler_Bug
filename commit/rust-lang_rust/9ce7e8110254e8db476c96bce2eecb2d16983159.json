{"sha": "9ce7e8110254e8db476c96bce2eecb2d16983159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljZTdlODExMDI1NGU4ZGI0NzZjOTZiY2UyZWVjYjJkMTY5ODMxNTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T12:40:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-31T12:40:40Z"}, "message": "cleanups", "tree": {"sha": "abaddbafc4593948849394b430e3bde5c624fa22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abaddbafc4593948849394b430e3bde5c624fa22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ce7e8110254e8db476c96bce2eecb2d16983159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce7e8110254e8db476c96bce2eecb2d16983159", "html_url": "https://github.com/rust-lang/rust/commit/9ce7e8110254e8db476c96bce2eecb2d16983159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ce7e8110254e8db476c96bce2eecb2d16983159/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a2815266b35de12bd3c48cc405e8b3e8fcf8885", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a2815266b35de12bd3c48cc405e8b3e8fcf8885", "html_url": "https://github.com/rust-lang/rust/commit/2a2815266b35de12bd3c48cc405e8b3e8fcf8885"}], "stats": {"total": 159, "additions": 94, "deletions": 65}, "files": [{"sha": "546cbb66b8b6092f6dacf6e37e6961b6e88d91f6", "filename": "cli/src/main.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cli%2Fsrc%2Fmain.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -4,8 +4,8 @@ extern crate failure;\n extern crate libsyntax2;\n extern crate tools;\n \n-use std::{fs, path::Path, io::Read};\n use clap::{App, Arg, SubCommand};\n+use std::{fs, io::Read, path::Path};\n use tools::collect_tests;\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n@@ -15,16 +15,26 @@ fn main() -> Result<()> {\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(\n             SubCommand::with_name(\"render-test\")\n-                .arg(Arg::with_name(\"line\").long(\"--line\").required(true).takes_value(true))\n-                .arg(Arg::with_name(\"file\").long(\"--file\").required(true).takes_value(true))\n+                .arg(\n+                    Arg::with_name(\"line\")\n+                        .long(\"--line\")\n+                        .required(true)\n+                        .takes_value(true),\n+                )\n+                .arg(\n+                    Arg::with_name(\"file\")\n+                        .long(\"--file\")\n+                        .required(true)\n+                        .takes_value(true),\n+                ),\n         )\n         .subcommand(SubCommand::with_name(\"parse\"))\n         .get_matches();\n     match matches.subcommand() {\n         (\"parse\", _) => {\n             let tree = parse()?;\n             println!(\"{}\", tree);\n-        },\n+        }\n         (\"render-test\", Some(matches)) => {\n             let file = matches.value_of(\"file\").unwrap();\n             let file = Path::new(file);\n@@ -36,7 +46,6 @@ fn main() -> Result<()> {\n         _ => unreachable!(),\n     }\n     Ok(())\n-\n }\n \n fn parse() -> Result<String> {"}, {"sha": "c6d05025195d28b852aa5d208af78ced1887e4a3", "filename": "src/algo/walk.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Falgo%2Fwalk.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -1,6 +1,6 @@\n use SyntaxNodeRef;\n \n-pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = SyntaxNodeRef<'a>> {\n     walk(root).filter_map(|event| match event {\n         WalkEvent::Enter(node) => Some(node),\n         WalkEvent::Exit(_) => None,\n@@ -13,7 +13,7 @@ enum WalkEvent<'a> {\n     Exit(SyntaxNodeRef<'a>),\n }\n \n-fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item=WalkEvent<'a>> {\n+fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item = WalkEvent<'a>> {\n     let mut done = false;\n     ::itertools::unfold(WalkEvent::Enter(root), move |pos| {\n         if done {\n@@ -35,12 +35,11 @@ fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item=WalkEvent<'a>> {\n                         None => match node.parent() {\n                             Some(node) => WalkEvent::Exit(node),\n                             None => WalkEvent::Exit(node),\n-                        }\n+                        },\n                     }\n                 }\n             }\n         };\n         Some(res)\n     })\n }\n-"}, {"sha": "48e1d23ac1e77d97804f3beb2cd6589be6fae0ae", "filename": "src/ast.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -1,14 +1,16 @@\n use std::sync::Arc;\n-use {SyntaxNode, TreeRoot, SyntaxRoot};\n+use {SyntaxNode, SyntaxRoot, TreeRoot};\n \n #[derive(Debug)]\n pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n-    syntax: SyntaxNode<R>\n+    syntax: SyntaxNode<R>,\n }\n \n impl File<Arc<SyntaxRoot>> {\n     pub fn parse(text: &str) -> Self {\n-        File { syntax: ::parse(text.to_owned()) }\n+        File {\n+            syntax: ::parse(text.to_owned()),\n+        }\n     }\n }\n "}, {"sha": "953c9b8606407d1d525ec024f4cfb45ff7c27eb8", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -20,25 +20,25 @@\n #![allow(missing_docs)]\n //#![warn(unreachable_pub)] // rust-lang/rust#47816\n \n+extern crate itertools;\n extern crate text_unit;\n extern crate unicode_xid;\n-extern crate itertools;\n \n+pub mod algo;\n+pub mod ast;\n mod lexer;\n mod parser;\n mod syntax_kinds;\n-mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n-pub mod ast;\n-pub mod algo;\n+mod yellow;\n \n pub use {\n+    ast::File,\n     lexer::{tokenize, Token},\n     syntax_kinds::SyntaxKind,\n     text_unit::{TextRange, TextUnit},\n-    yellow::{SyntaxNode, SyntaxNodeRef, TreeRoot, SyntaxRoot},\n-    ast::File,\n+    yellow::{SyntaxNode, SyntaxNodeRef, SyntaxRoot, TreeRoot},\n };\n \n pub(crate) use yellow::SyntaxError;\n@@ -47,4 +47,3 @@ pub fn parse(text: String) -> SyntaxNode {\n     let tokens = tokenize(&text);\n     parser::parse::<yellow::GreenBuilder>(text, &tokens)\n }\n-"}, {"sha": "11bb3436b98d37c61addf9a1bb3c0d60165be7f7", "filename": "src/parser/grammar/expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fexpressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fexpressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fexpressions.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -39,7 +39,7 @@ pub(super) fn expr(p: &mut Parser) {\n fn prefix_expr(p: &mut Parser) -> Option<CompletedMarker> {\n     match p.current() {\n         AMPERSAND => Some(ref_expr(p)),\n-        _ => atom_expr(p)\n+        _ => atom_expr(p),\n     }\n }\n "}, {"sha": "9147df87dca40bd33796375d73e0329e5f4934cf", "filename": "src/parser/grammar/items/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Fmod.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -218,7 +218,6 @@ fn extern_block(p: &mut Parser) {\n     p.expect(R_CURLY);\n }\n \n-\n fn fn_item(p: &mut Parser) {\n     assert!(p.at(FN_KW));\n     p.bump();"}, {"sha": "812cacfb7e9510c583bc38778b49169d0cb5de4f", "filename": "src/parser/grammar/items/traits.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fitems%2Ftraits.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -8,7 +8,6 @@ pub(super) fn trait_item(p: &mut Parser) {\n     p.expect(R_CURLY);\n }\n \n-\n // test impl_item\n // impl Foo {}\n pub(super) fn impl_item(p: &mut Parser) {"}, {"sha": "498b45d44334d69f4aa6088588857ce088b1b220", "filename": "src/parser/grammar/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fmod.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -26,12 +26,15 @@ mod expressions;\n mod items;\n mod paths;\n mod patterns;\n-mod type_params;\n mod type_args;\n+mod type_params;\n mod types;\n \n use {\n-    parser::{parser::{Parser, CompletedMarker}, token_set::TokenSet},\n+    parser::{\n+        parser::{CompletedMarker, Parser},\n+        token_set::TokenSet,\n+    },\n     SyntaxKind::{self, *},\n };\n "}, {"sha": "6f66701ac3059989b8215770172fc8a6f36a682c", "filename": "src/parser/grammar/paths.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpaths.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -20,7 +20,11 @@ pub(super) fn expr_path(p: &mut Parser) {\n }\n \n #[derive(Clone, Copy, Eq, PartialEq)]\n-enum Mode { Use, Type, Expr }\n+enum Mode {\n+    Use,\n+    Type,\n+    Expr,\n+}\n \n fn path(p: &mut Parser, mode: Mode) {\n     if !is_path_start(p) {\n@@ -55,7 +59,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n         IDENT => {\n             name_ref(p);\n             path_generic_args(p, mode);\n-        },\n+        }\n         SELF_KW | SUPER_KW => p.bump(),\n         _ => {\n             p.error(\"expected identifier\");"}, {"sha": "7216807fda4e09c79e63a0ecf738d3face905720", "filename": "src/parser/grammar/patterns.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Fpatterns.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -43,11 +43,8 @@ fn ref_pat(p: &mut Parser) {\n // }\n fn bind_pat(p: &mut Parser) {\n     let m = p.start();\n-    if p.eat(REF_KW) {\n-        p.eat(MUT_KW);\n-    } else {\n-        p.eat(MUT_KW);\n-    }\n+    p.eat(REF_KW);\n+    p.eat(MUT_KW);\n     name(p);\n     if p.eat(AT) {\n         pattern(p);"}, {"sha": "adac73e7e2a7aec1337e1baa1aeebec82cf176da", "filename": "src/parser/grammar/type_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Ftype_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fparser%2Fgrammar%2Ftype_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fgrammar%2Ftype_args.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -12,7 +12,7 @@ pub(super) fn list(p: &mut Parser, colon_colon_required: bool) {\n             m = p.start();\n             p.bump();\n         }\n-        _ => return\n+        _ => return,\n     };\n \n     while !p.at(EOF) && !p.at(R_ANGLE) {"}, {"sha": "f99d31b3661ae9a3019f9a9d03bfb8e5a94ee273", "filename": "src/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -16,7 +16,7 @@ pub fn dump_tree(syntax: &SyntaxNode) -> String {\n         errors: &mut BTreeSet<SyntaxError>,\n     ) {\n         buff.push_str(&String::from(\"  \").repeat(level));\n-        write!(buff, \"{:?}\\n\", node).unwrap();\n+        writeln!(buff, \"{:?}\", node).unwrap();\n         let my_errors: Vec<_> = errors\n             .iter()\n             .filter(|e| e.offset == node.range().start())\n@@ -25,7 +25,7 @@ pub fn dump_tree(syntax: &SyntaxNode) -> String {\n         for err in my_errors {\n             errors.remove(&err);\n             buff.push_str(&String::from(\"  \").repeat(level));\n-            write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+            writeln!(buff, \"err: `{}`\", err.message).unwrap();\n         }\n \n         for child in node.children() {\n@@ -40,7 +40,7 @@ pub fn dump_tree(syntax: &SyntaxNode) -> String {\n         for err in my_errors {\n             errors.remove(&err);\n             buff.push_str(&String::from(\"  \").repeat(level));\n-            write!(buff, \"err: `{}`\\n\", err.message).unwrap();\n+            writeln!(buff, \"err: `{}`\", err.message).unwrap();\n         }\n     }\n }"}, {"sha": "8ddcc74b888ed86520d69bb5dc2608158fd560a7", "filename": "src/yellow/green.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fgreen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fgreen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fgreen.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -80,8 +80,14 @@ fn assert_send_sync() {\n \n #[derive(Clone, Debug)]\n pub(crate) enum GreenLeaf {\n-    Whitespace { newlines: u8, spaces: u8 },\n-    Token { kind: SyntaxKind, text: Option<Arc<str>> },\n+    Whitespace {\n+        newlines: u8,\n+        spaces: u8,\n+    },\n+    Token {\n+        kind: SyntaxKind,\n+        text: Option<Arc<str>>,\n+    },\n }\n \n impl GreenLeaf {\n@@ -121,7 +127,7 @@ impl GreenLeaf {\n                 assert!(newlines <= N_NEWLINES && spaces <= N_SPACES);\n                 &WS[N_NEWLINES - newlines..N_NEWLINES + spaces]\n             }\n-            GreenLeaf::Token { kind, text, } => match text {\n+            GreenLeaf::Token { kind, text } => match text {\n                 None => kind.static_text().unwrap(),\n                 Some(t) => t,\n             },"}, {"sha": "f20be356d120b763e805037c9f9c8f854427e6b0", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -8,5 +8,5 @@ pub(crate) use self::{\n     builder::GreenBuilder,\n     green::{GreenNode, GreenNodeBuilder},\n     red::RedNode,\n-    syntax::{SyntaxError},\n+    syntax::SyntaxError,\n };"}, {"sha": "c3d6c5f4f2a002111e2f2d181c0c84ecb877ad19", "filename": "src/yellow/red.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -36,7 +36,8 @@ impl RedNode {\n \n     fn new(green: GreenNode, parent: Option<ParentData>) -> RedNode {\n         let n_children = green.children().len();\n-        let children = (0..n_children).map(|_| None)\n+        let children = (0..n_children)\n+            .map(|_| None)\n             .collect::<Vec<_>>()\n             .into_boxed_slice();\n         RedNode {\n@@ -63,7 +64,7 @@ impl RedNode {\n \n     pub(crate) fn get_child(&self, idx: usize) -> Option<ptr::NonNull<RedNode>> {\n         if idx >= self.n_children() {\n-            return None\n+            return None;\n         }\n         match &self.children.read().unwrap()[idx] {\n             Some(child) => return Some(child.into()),"}, {"sha": "487a4ef1d408e08be233ffeaba32809694cc97dd", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -6,7 +6,7 @@ use {\n     TextRange, TextUnit,\n };\n \n-pub trait TreeRoot: Deref<Target=SyntaxRoot> + Clone {}\n+pub trait TreeRoot: Deref<Target = SyntaxRoot> + Clone {}\n \n impl TreeRoot for Arc<SyntaxRoot> {}\n \n@@ -83,14 +83,12 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         self.red().green().text()\n     }\n \n-    pub fn children<'a>(&'a self) -> impl Iterator<Item=SyntaxNode<R>> + 'a {\n+    pub fn children<'a>(&'a self) -> impl Iterator<Item = SyntaxNode<R>> + 'a {\n         let red = self.red();\n         let n_children = red.n_children();\n-        (0..n_children).map(move |i| {\n-            SyntaxNode {\n-                root: self.root.clone(),\n-                red: red.get_child(i).unwrap(),\n-            }\n+        (0..n_children).map(move |i| SyntaxNode {\n+            root: self.root.clone(),\n+            red: red.get_child(i).unwrap(),\n         })\n     }\n "}, {"sha": "deeb707d3d8dcf2813861c3c2ff360e6311bd905", "filename": "tests/testutils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/tests%2Ftestutils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/tests%2Ftestutils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftestutils%2Fsrc%2Flib.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -2,7 +2,7 @@ extern crate difference;\n \n use std::{\n     fs,\n-    path::{Path, PathBuf}\n+    path::{Path, PathBuf},\n };\n \n use difference::Changeset;"}, {"sha": "5a7d846ffb441ac57b6a2d93be09aa4dd34216eb", "filename": "tools/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/tools%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/tools%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Flib.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -1,7 +1,7 @@\n extern crate itertools;\n \n-use std::hash;\n use itertools::Itertools;\n+use std::hash;\n \n #[derive(Debug)]\n pub struct Test {\n@@ -28,18 +28,17 @@ pub fn collect_tests(s: &str) -> Vec<(usize, Test)> {\n             match block.next() {\n                 Some((idx, line)) if line.starts_with(\"test \") => {\n                     break (idx, line[\"test \".len()..].to_string())\n-                },\n+                }\n                 Some(_) => (),\n                 None => continue 'outer,\n             }\n         };\n         let text: String = itertools::join(\n-            block.map(|(_, line)| line)\n-                .chain(::std::iter::once(\"\")),\n-            \"\\n\"\n+            block.map(|(_, line)| line).chain(::std::iter::once(\"\")),\n+            \"\\n\",\n         );\n         assert!(!text.trim().is_empty() && text.ends_with(\"\\n\"));\n-        res.push((start_line, Test {name, text }))\n+        res.push((start_line, Test { name, text }))\n     }\n     res\n }"}, {"sha": "7c6c7a1aa6886e27e6c9f02ece97cba97c92f92f", "filename": "tools/src/main.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ce7e8110254e8db476c96bce2eecb2d16983159/tools%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ce7e8110254e8db476c96bce2eecb2d16983159/tools%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tools%2Fsrc%2Fmain.rs?ref=9ce7e8110254e8db476c96bce2eecb2d16983159", "patch": "@@ -3,13 +3,17 @@ extern crate clap;\n extern crate failure;\n extern crate ron;\n extern crate tera;\n-extern crate walkdir;\n extern crate tools;\n+extern crate walkdir;\n #[macro_use]\n extern crate commandspec;\n \n-use std::{collections::{HashMap}, fs, path::{Path, PathBuf}};\n use clap::{App, Arg, SubCommand};\n+use std::{\n+    collections::HashMap,\n+    fs,\n+    path::{Path, PathBuf},\n+};\n use tools::{collect_tests, Test};\n \n type Result<T> = ::std::result::Result<T, failure::Error>;\n@@ -71,7 +75,8 @@ fn get_kinds() -> Result<String> {\n     tera.add_raw_template(\"grammar\", &template)\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n     tera.register_global_function(\"concat\", Box::new(concat));\n-    let ret = tera.render(\"grammar\", &grammar)\n+    let ret = tera\n+        .render(\"grammar\", &grammar)\n         .map_err(|e| format_err!(\"template error: {:?}\", e))?;\n     return Ok(ret);\n \n@@ -157,7 +162,10 @@ fn existing_tests(dir: &Path) -> Result<HashMap<String, (PathBuf, Test)>> {\n             file_name[5..file_name.len() - 3].to_string()\n         };\n         let text = fs::read_to_string(&path)?;\n-        let test = Test { name: name.clone(), text };\n+        let test = Test {\n+            name: name.clone(),\n+            text,\n+        };\n         match res.insert(name, (path, test)) {\n             Some(old) => println!(\"Duplicate test: {:?}\", old),\n             None => (),\n@@ -167,17 +175,23 @@ fn existing_tests(dir: &Path) -> Result<HashMap<String, (PathBuf, Test)>> {\n }\n \n fn install_code_extension() -> Result<()> {\n-    execute!(r\"\n+    execute!(\n+        r\"\n cd code\n npm install\n-    \")?;\n-    execute!(r\"\n+    \"\n+    )?;\n+    execute!(\n+        r\"\n cd code\n ./node_modules/vsce/out/vsce package\n-    \")?;\n-    execute!(r\"\n+    \"\n+    )?;\n+    execute!(\n+        r\"\n cd code\n code --install-extension ./libsyntax-rust-0.0.1.vsix\n-    \")?;\n+    \"\n+    )?;\n     Ok(())\n }"}]}