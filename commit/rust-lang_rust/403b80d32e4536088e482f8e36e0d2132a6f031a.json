{"sha": "403b80d32e4536088e482f8e36e0d2132a6f031a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwM2I4MGQzMmU0NTM2MDg4ZTQ4MmY4ZTM2ZTBkMjEzMmE2ZjAzMWE=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-30T15:23:08Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-30T15:23:49Z"}, "message": "Use MaybeUninit::write in functor.rs\n\nMaybeUninit::write is stable as of 1.55.0.", "tree": {"sha": "eb5e02cc3947256f854daf0eb44c981b25c80d3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5e02cc3947256f854daf0eb44c981b25c80d3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/403b80d32e4536088e482f8e36e0d2132a6f031a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/403b80d32e4536088e482f8e36e0d2132a6f031a", "html_url": "https://github.com/rust-lang/rust/commit/403b80d32e4536088e482f8e36e0d2132a6f031a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/403b80d32e4536088e482f8e36e0d2132a6f031a/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47ab5f7ce27397310bd8359b8db1504fbf8a9b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/47ab5f7ce27397310bd8359b8db1504fbf8a9b59", "html_url": "https://github.com/rust-lang/rust/commit/47ab5f7ce27397310bd8359b8db1504fbf8a9b59"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "5b83ae31247661e7ecf7969b124d909499f568ed", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/403b80d32e4536088e482f8e36e0d2132a6f031a/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/403b80d32e4536088e482f8e36e0d2132a6f031a/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=403b80d32e4536088e482f8e36e0d2132a6f031a", "patch": "@@ -26,7 +26,7 @@ impl<T> IdFunctor for Box<T> {\n             // inverse of `Box::assume_init()` and should be safe.\n             let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`.\n-            ptr::write(raw.as_mut_ptr(), f(value));\n+            raw.write(f(value));\n             // SAFETY: We just initialized `raw`.\n             raw.assume_init()\n         }"}]}