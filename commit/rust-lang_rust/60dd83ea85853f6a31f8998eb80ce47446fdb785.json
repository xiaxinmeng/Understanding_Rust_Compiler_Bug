{"sha": "60dd83ea85853f6a31f8998eb80ce47446fdb785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZGQ4M2VhODU4NTNmNmEzMWY4OTk4ZWI4MGNlNDc0NDZmZGI3ODU=", "commit": {"author": {"name": "Paul Woolcock", "email": "paul@woolcock.us", "date": "2017-05-24T17:58:37Z"}, "committer": {"name": "Paul Woolcock", "email": "paul@woolcock.us", "date": "2017-06-24T10:42:29Z"}, "message": "add `allow_fail` test attribute\n\nThis change allows the user to add an `#[allow_fail]` attribute to\ntests that will cause the test to compile & run, but if the test fails\nit will not cause the entire test run to fail. The test output will\nshow the failure, but in yellow instead of red, and also indicate that\nit was an allowed failure.", "tree": {"sha": "ff0d9ec1a524726d7d8a2e4fbb2a296216bcffeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff0d9ec1a524726d7d8a2e4fbb2a296216bcffeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60dd83ea85853f6a31f8998eb80ce47446fdb785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60dd83ea85853f6a31f8998eb80ce47446fdb785", "html_url": "https://github.com/rust-lang/rust/commit/60dd83ea85853f6a31f8998eb80ce47446fdb785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60dd83ea85853f6a31f8998eb80ce47446fdb785/comments", "author": null, "committer": null, "parents": [{"sha": "229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "url": "https://api.github.com/repos/rust-lang/rust/commits/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38", "html_url": "https://github.com/rust-lang/rust/commit/229d0d3266002d343cdd2f4a3bf7f2fe9da15f38"}], "stats": {"total": 106, "additions": 81, "deletions": 25}, "files": [{"sha": "5a56c33b8066320354e07c853e123d8768988624", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -769,7 +769,7 @@ pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position\n                                block_info.should_panic, block_info.no_run,\n                                block_info.ignore, block_info.test_harness,\n                                block_info.compile_fail, block_info.error_codes,\n-                               line, filename);\n+                               line, filename, block_info.allow_fail);\n             } else {\n                 tests.add_old_test(text, filename);\n             }\n@@ -859,7 +859,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                                block_info.should_panic, block_info.no_run,\n                                block_info.ignore, block_info.test_harness,\n                                block_info.compile_fail, block_info.error_codes,\n-                               line, filename);\n+                               line, filename, block_info.allow_fail);\n                 prev_offset = offset;\n             }\n             Event::Start(Tag::Header(level)) => {\n@@ -889,6 +889,7 @@ struct LangString {\n     test_harness: bool,\n     compile_fail: bool,\n     error_codes: Vec<String>,\n+    allow_fail: bool,\n }\n \n impl LangString {\n@@ -902,6 +903,7 @@ impl LangString {\n             test_harness: false,\n             compile_fail: false,\n             error_codes: Vec::new(),\n+            allow_fail: false,\n         }\n     }\n \n@@ -930,6 +932,7 @@ impl LangString {\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = !seen_other_tags; }\n+                \"allow_fail\" => { data.allow_fail = true; seen_rust_tags = !seen_other_tags; }\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; }\n                 \"test_harness\" => {\n                     data.test_harness = true;\n@@ -1118,7 +1121,7 @@ mod tests {\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n-            compile_fail: bool, error_codes: Vec<String>) {\n+            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n             assert_eq!(LangString::parse(s), LangString {\n                 should_panic: should_panic,\n                 no_run: no_run,\n@@ -1128,25 +1131,27 @@ mod tests {\n                 compile_fail: compile_fail,\n                 error_codes: error_codes,\n                 original: s.to_owned(),\n+                allow_fail: allow_fail,\n             })\n         }\n \n         // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        //                       | error_codes\n-        t(\"\",                      false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"rust\",                  false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"sh\",                    false,        false,  false,  false, false, false, Vec::new());\n-        t(\"ignore\",                false,        false,  true,   true,  false, false, Vec::new());\n-        t(\"should_panic\",          true,         false,  false,  true,  false, false, Vec::new());\n-        t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n-        t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n-        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, Vec::new());\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, Vec::new());\n-        t(\"text, no_run\",          false,        true,   false,  false, false, false, Vec::new());\n-        t(\"text,no_run\",           false,        true,   false,  false, false, false, Vec::new());\n+        //                       | allow_fail | error_codes\n+        t(\"\",                      false,        false,  false,  true,  false, false, false, Vec::new());\n+        t(\"rust\",                  false,        false,  false,  true,  false, false, false, Vec::new());\n+        t(\"sh\",                    false,        false,  false,  false, false, false, false, Vec::new());\n+        t(\"ignore\",                false,        false,  true,   true,  false, false, false, Vec::new());\n+        t(\"should_panic\",          true,         false,  false,  true,  false, false, false, Vec::new());\n+        t(\"no_run\",                false,        true,   false,  true,  false, false, false, Vec::new());\n+        t(\"test_harness\",          false,        false,  false,  true,  true,  false, false, Vec::new());\n+        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  false, Vec::new());\n+        t(\"allow_fail\",            false,        false,  false,  true,  false, false, true, Vec::new());\n+        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, false, Vec::new());\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, false, Vec::new());\n+        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, false, Vec::new());\n+        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, false, Vec::new());\n+        t(\"text, no_run\",          false,        true,   false,  false, false, false, false, Vec::new());\n+        t(\"text,no_run\",           false,        true,   false,  false, false, false, false, Vec::new());\n     }\n \n     #[test]"}, {"sha": "4766778eed1b88bc00b505f708ad78b39bc83b97", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -467,7 +467,7 @@ impl Collector {\n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize, filename: String) {\n+                    line: usize, filename: String, allow_fail: bool) {\n         let name = self.generate_name(line, &filename);\n         // to be removed when hoedown is removed\n         if self.render_type == RenderType::Pulldown {\n@@ -499,6 +499,7 @@ impl Collector {\n                 ignore: should_ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n+                allow_fail: allow_fail,\n             },\n             testfn: testing::DynTestFn(box move |()| {\n                 let panic = io::set_panic(None);"}, {"sha": "07db5b8333132347a11d4e7461ab21ee50dbffad", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -534,6 +534,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n     (\"derive\", Normal, Ungated),\n     (\"should_panic\", Normal, Ungated),\n     (\"ignore\", Normal, Ungated),\n+    (\"allow_fail\", Normal, Ungated),\n     (\"no_implicit_prelude\", Normal, Ungated),\n     (\"reexport_test_harness_main\", Normal, Ungated),\n     (\"link_args\", Normal, Ungated),"}, {"sha": "86f5f42eac79614c5e74646b26754db314024a8d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -52,7 +52,8 @@ struct Test {\n     path: Vec<Ident> ,\n     bench: bool,\n     ignore: bool,\n-    should_panic: ShouldPanic\n+    should_panic: ShouldPanic,\n+    allow_fail: bool,\n }\n \n struct TestCtxt<'a> {\n@@ -133,7 +134,8 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &i),\n                         ignore: is_ignored(&i),\n-                        should_panic: should_panic(&i, &self.cx)\n+                        should_panic: should_panic(&i, &self.cx),\n+                        allow_fail: is_allowed_fail(&i),\n                     };\n                     self.cx.testfns.push(test);\n                     self.tests.push(i.ident);\n@@ -383,6 +385,10 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n+fn is_allowed_fail(i: &ast::Item) -> bool {\n+    i.attrs.iter().any(|attr| attr.check_name(\"allow_fail\"))\n+}\n+\n fn should_panic(i: &ast::Item, cx: &TestCtxt) -> ShouldPanic {\n     match i.attrs.iter().find(|attr| attr.check_name(\"should_panic\")) {\n         Some(attr) => {\n@@ -668,14 +674,16 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n             }\n         }\n     };\n+    let allow_fail_expr = ecx.expr_bool(span, test.allow_fail);\n \n     // self::test::TestDesc { ... }\n     let desc_expr = ecx.expr_struct(\n         span,\n         test_path(\"TestDesc\"),\n         vec![field(\"name\", name_expr),\n              field(\"ignore\", ignore_expr),\n-             field(\"should_panic\", fail_expr)]);\n+             field(\"should_panic\", fail_expr),\n+             field(\"allow_fail\", allow_fail_expr)]);\n \n \n     let mut visible_path = match cx.toplevel_reexport {"}, {"sha": "c68039f21ec2c9b4cbc255246acad2456fa84ec8", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -212,6 +212,7 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub should_panic: ShouldPanic,\n+    pub allow_fail: bool,\n }\n \n #[derive(Clone)]\n@@ -523,6 +524,7 @@ pub enum TestResult {\n     TrFailed,\n     TrFailedMsg(String),\n     TrIgnored,\n+    TrAllowedFail,\n     TrMetrics(MetricMap),\n     TrBench(BenchSamples),\n }\n@@ -543,6 +545,7 @@ struct ConsoleTestState<T> {\n     passed: usize,\n     failed: usize,\n     ignored: usize,\n+    allowed_fail: usize,\n     filtered_out: usize,\n     measured: usize,\n     metrics: MetricMap,\n@@ -572,6 +575,7 @@ impl<T: Write> ConsoleTestState<T> {\n             passed: 0,\n             failed: 0,\n             ignored: 0,\n+            allowed_fail: 0,\n             filtered_out: 0,\n             measured: 0,\n             metrics: MetricMap::new(),\n@@ -594,6 +598,10 @@ impl<T: Write> ConsoleTestState<T> {\n         self.write_short_result(\"ignored\", \"i\", term::color::YELLOW)\n     }\n \n+    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n+        self.write_short_result(\"FAILED (allowed)\", \"a\", term::color::YELLOW)\n+    }\n+\n     pub fn write_metric(&mut self) -> io::Result<()> {\n         self.write_pretty(\"metric\", term::color::CYAN)\n     }\n@@ -669,6 +677,7 @@ impl<T: Write> ConsoleTestState<T> {\n             TrOk => self.write_ok(),\n             TrFailed | TrFailedMsg(_) => self.write_failed(),\n             TrIgnored => self.write_ignored(),\n+            TrAllowedFail => self.write_allowed_fail(),\n             TrMetrics(ref mm) => {\n                 self.write_metric()?;\n                 self.write_plain(&format!(\": {}\\n\", mm.fmt_metrics()))\n@@ -702,6 +711,7 @@ impl<T: Write> ConsoleTestState<T> {\n                         TrFailed => \"failed\".to_owned(),\n                         TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                         TrIgnored => \"ignored\".to_owned(),\n+                        TrAllowedFail => \"failed (allowed)\".to_owned(),\n                         TrMetrics(ref mm) => mm.fmt_metrics(),\n                         TrBench(ref bs) => fmt_bench_samples(bs),\n                     },\n@@ -761,7 +771,7 @@ impl<T: Write> ConsoleTestState<T> {\n     }\n \n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n-        assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n+        assert!(self.passed + self.failed + self.ignored + self.measured + self.allowed_fail == self.total);\n \n         if self.options.display_output {\n             self.write_outputs()?;\n@@ -778,9 +788,10 @@ impl<T: Write> ConsoleTestState<T> {\n         } else {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n-        let s = format!(\". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n+        let s = format!(\". {} passed; {} failed; {} allowed to fail; {} ignored; {} measured; {} filtered out\\n\\n\",\n                         self.passed,\n                         self.failed,\n+                        self.allowed_fail,\n                         self.ignored,\n                         self.measured,\n                         self.filtered_out);\n@@ -891,6 +902,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                         st.not_failures.push((test, stdout));\n                     }\n                     TrIgnored => st.ignored += 1,\n+                    TrAllowedFail => st.allowed_fail += 1,\n                     TrMetrics(mm) => {\n                         let tname = test.name;\n                         let MetricMap(mm) = mm;\n@@ -1471,8 +1483,13 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> Tes\n                   .unwrap_or(false) {\n                 TrOk\n             } else {\n-                TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+                if desc.allow_fail {\n+                    TrAllowedFail\n+                } else {\n+                    TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+                }\n             },\n+        _ if desc.allow_fail => TrAllowedFail,\n         _ => TrFailed,\n     }\n }"}, {"sha": "7d750d51dcd1babfd57b51af604813a4c6776146", "filename": "src/test/run-pass/test-allow-fail-attr.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#[test]\n+#[allow_fail]\n+fn test1() {\n+    panic!();\n+}\n+\n+#[test]\n+#[allow_fail]\n+fn test2() {\n+    assert!(true);\n+}"}, {"sha": "b4663b0ee6c00677313f7e3c590f1e3e0cdf6420", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60dd83ea85853f6a31f8998eb80ce47446fdb785/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=60dd83ea85853f6a31f8998eb80ce47446fdb785", "patch": "@@ -476,6 +476,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n             name: make_test_name(config, testpaths),\n             ignore: ignore,\n             should_panic: should_panic,\n+            allow_fail: false,\n         },\n         testfn: make_test_closure(config, testpaths),\n     }"}]}