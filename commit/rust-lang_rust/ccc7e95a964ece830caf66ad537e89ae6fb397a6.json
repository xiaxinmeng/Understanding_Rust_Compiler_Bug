{"sha": "ccc7e95a964ece830caf66ad537e89ae6fb397a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYzdlOTVhOTY0ZWNlODMwY2FmNjZhZDUzN2U4OWFlNmZiMzk3YTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T17:32:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-15T17:32:10Z"}, "message": "Auto merge of #32972 - alexcrichton:cargotest, r=brson\n\ncargotest: Put output in build directory\n\nRight now cargotest uses `TempDir` to place output into the system temp\ndirectory, but unfortunately this means that if the process is interrupted then\nit'll leak the directory and that'll never get cleaned up. One of our bots\nfilled up its disk space and there were 20 cargotest directories lying around so\nseems prudent to clean them up!\n\nBy putting the output in the build directory it should ensure that we don't leak\ntoo many extra builds.", "tree": {"sha": "0275ba3acb450d7691a7eb236848b63e0dde2dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0275ba3acb450d7691a7eb236848b63e0dde2dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccc7e95a964ece830caf66ad537e89ae6fb397a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7e95a964ece830caf66ad537e89ae6fb397a6", "html_url": "https://github.com/rust-lang/rust/commit/ccc7e95a964ece830caf66ad537e89ae6fb397a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccc7e95a964ece830caf66ad537e89ae6fb397a6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d5f4b5e3fcd377400bcc2140621cff6fd73a617", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d5f4b5e3fcd377400bcc2140621cff6fd73a617", "html_url": "https://github.com/rust-lang/rust/commit/5d5f4b5e3fcd377400bcc2140621cff6fd73a617"}, {"sha": "73c2d2a7419844f763b1ac72b89236bd3183bfaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/73c2d2a7419844f763b1ac72b89236bd3183bfaf", "html_url": "https://github.com/rust-lang/rust/commit/73c2d2a7419844f763b1ac72b89236bd3183bfaf"}], "stats": {"total": 153, "additions": 81, "deletions": 72}, "files": [{"sha": "6aad49bc9880ec9ec1060c0f45c4bc7382196e4d", "filename": "src/bootstrap/build/check.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Fbootstrap%2Fbuild%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fcheck.rs?ref=ccc7e95a964ece830caf66ad537e89ae6fb397a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::fs;\n+\n use build::{Build, Compiler};\n \n pub fn linkcheck(build: &Build, stage: u32, host: &str) {\n@@ -29,9 +31,16 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let sep = if cfg!(windows) { \";\" } else {\":\" };\n     let ref newpath = format!(\"{}{}{}\", path.display(), sep, old_path);\n \n+    // Note that this is a short, cryptic, and not scoped directory name. This\n+    // is currently to minimize the length of path on Windows where we otherwise\n+    // quickly run into path name limit constraints.\n+    let out_dir = build.out.join(\"ct\");\n+    t!(fs::create_dir_all(&out_dir));\n+\n     build.run(build.tool_cmd(compiler, \"cargotest\")\n-              .env(\"PATH\", newpath)\n-              .arg(&build.cargo));\n+                   .env(\"PATH\", newpath)\n+                   .arg(&build.cargo)\n+                   .arg(&out_dir));\n }\n \n pub fn tidy(build: &Build, stage: u32, host: &str) {"}, {"sha": "07cfb96c30d5769bbd0707cca15943a45cb87d0c", "filename": "src/bootstrap/build/step.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Fbootstrap%2Fbuild%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Fbootstrap%2Fbuild%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fstep.rs?ref=ccc7e95a964ece830caf66ad537e89ae6fb397a6", "patch": "@@ -318,7 +318,8 @@ impl<'a> Step<'a> {\n                 vec![self.tool_linkchecker(stage), self.doc(stage)]\n             }\n             Source::CheckCargoTest { stage } => {\n-                vec![self.tool_cargotest(stage)]\n+                vec![self.tool_cargotest(stage),\n+                     self.librustc(self.compiler(stage))]\n             }\n             Source::CheckTidy { stage } => {\n                 vec![self.tool_tidy(stage)]\n@@ -333,7 +334,7 @@ impl<'a> Step<'a> {\n                 vec![self.librustc(self.compiler(stage))]\n             }\n             Source::ToolCargoTest { stage } => {\n-                vec![self.librustc(self.compiler(stage))]\n+                vec![self.libstd(self.compiler(stage))]\n             }\n \n             Source::DistDocs { stage } => vec![self.doc(stage)],"}, {"sha": "bafde903baa443b1c37272c83a20eac833d760b0", "filename": "src/tools/cargotest/Cargo.lock", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2FCargo.lock?ref=ccc7e95a964ece830caf66ad537e89ae6fb397a6", "patch": "@@ -1,28 +1,4 @@\n [root]\n name = \"cargotest\"\n version = \"0.1.0\"\n-dependencies = [\n- \"tempdir 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"libc\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n-[[package]]\n-name = \"rand\"\n-version = \"0.3.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"libc 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n-[[package]]\n-name = \"tempdir\"\n-version = \"0.3.4\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"rand 0.3.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n "}, {"sha": "8108c7f762eeb4fde94f9f23e025b3b37dd44122", "filename": "src/tools/cargotest/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2FCargo.toml?ref=ccc7e95a964ece830caf66ad537e89ae6fb397a6", "patch": "@@ -3,9 +3,6 @@ name = \"cargotest\"\n version = \"0.1.0\"\n authors = [\"Brian Anderson <banderson@mozilla.com>\"]\n \n-[dependencies]\n-tempdir = \"0.3.4\"\n-\n [[bin]]\n name = \"cargotest\"\n path = \"main.rs\""}, {"sha": "7ad54c5bf6be4952c94c98dd2eab9475ba2baac9", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 67, "deletions": 41, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccc7e95a964ece830caf66ad537e89ae6fb397a6/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=ccc7e95a964ece830caf66ad537e89ae6fb397a6", "patch": "@@ -8,73 +8,90 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate tempdir;\n-\n-use tempdir::TempDir;\n use std::env;\n use std::process::Command;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n use std::fs::File;\n use std::io::Write;\n \n-const TEST_REPOS: &'static [(&'static str, &'static str, Option<&'static str>)] = &[\n-    (\"https://github.com/rust-lang/cargo\",\n-     \"fae9c539388f1b7c70c31fd0a21b5dd9cd071177\",\n-     None),\n-    (\"https://github.com/iron/iron\",\n-     \"16c858ec2901e2992fe5e529780f59fa8ed12903\",\n-     Some(include_str!(\"lockfiles/iron-Cargo.lock\")))\n+struct Test {\n+    repo: &'static str,\n+    name: &'static str,\n+    sha: &'static str,\n+    lock: Option<&'static str>,\n+}\n+\n+const TEST_REPOS: &'static [Test] = &[\n+    Test {\n+        name: \"cargo\",\n+        repo: \"https://github.com/rust-lang/cargo\",\n+        sha: \"fae9c539388f1b7c70c31fd0a21b5dd9cd071177\",\n+        lock: None,\n+    },\n+    Test {\n+        name: \"iron\",\n+        repo: \"https://github.com/iron/iron\",\n+        sha: \"16c858ec2901e2992fe5e529780f59fa8ed12903\",\n+        lock: Some(include_str!(\"lockfiles/iron-Cargo.lock\")),\n+    },\n ];\n \n \n fn main() {\n-    let ref cargo = env::args().collect::<Vec<_>>()[1];\n+    let args = env::args().collect::<Vec<_>>();\n+    let ref cargo = args[1];\n+    let out_dir = Path::new(&args[2]);\n     let ref cargo = Path::new(cargo);\n \n-    for &(repo, sha, lockfile) in TEST_REPOS.iter().rev() {\n-        test_repo(cargo, repo, sha, lockfile);\n+    for test in TEST_REPOS.iter().rev() {\n+        test_repo(cargo, out_dir, test);\n     }\n }\n \n-fn test_repo(cargo: &Path, repo: &str, sha: &str, lockfile: Option<&str>) {\n-    println!(\"testing {}\", repo);\n-    let dir = clone_repo(repo, sha);\n-    if let Some(lockfile) = lockfile {\n-        File::create(&dir.path().join(\"Cargo.lock\")).expect(\"\")\n+fn test_repo(cargo: &Path, out_dir: &Path, test: &Test) {\n+    println!(\"testing {}\", test.repo);\n+    let dir = clone_repo(test, out_dir);\n+    if let Some(lockfile) = test.lock {\n+        File::create(&dir.join(\"Cargo.lock\")).expect(\"\")\n             .write_all(lockfile.as_bytes()).expect(\"\");\n     }\n-    if !run_cargo_test(cargo, dir.path()) {\n-        panic!(\"tests failed for {}\", repo);\n+    if !run_cargo_test(cargo, &dir) {\n+        panic!(\"tests failed for {}\", test.repo);\n     }\n }\n \n-fn clone_repo(repo: &str, sha: &str) -> TempDir {\n-    let dir = TempDir::new(\"cargotest\").expect(\"\");\n-    let status = Command::new(\"git\")\n-        .arg(\"init\")\n-        .arg(dir.path())\n-        .status()\n-        .expect(\"\");\n-    assert!(status.success());\n+fn clone_repo(test: &Test, out_dir: &Path) -> PathBuf {\n+    let out_dir = out_dir.join(test.name);\n \n-    // Try progressively deeper fetch depths to find the commit\n-    let mut found = false;\n-    for depth in &[1, 10, 100, 1000, 100000] {\n+    if !out_dir.join(\".git\").is_dir() {\n         let status = Command::new(\"git\")\n-            .arg(\"fetch\")\n-            .arg(repo)\n-            .arg(\"master\")\n-            .arg(&format!(\"--depth={}\", depth))\n-            .current_dir(dir.path())\n+            .arg(\"init\")\n+            .arg(&out_dir)\n             .status()\n             .expect(\"\");\n         assert!(status.success());\n+    }\n+\n+    // Try progressively deeper fetch depths to find the commit\n+    let mut found = false;\n+    for depth in &[0, 1, 10, 100, 1000, 100000] {\n+        if *depth > 0 {\n+            let status = Command::new(\"git\")\n+                .arg(\"fetch\")\n+                .arg(test.repo)\n+                .arg(\"master\")\n+                .arg(&format!(\"--depth={}\", depth))\n+                .current_dir(&out_dir)\n+                .status()\n+                .expect(\"\");\n+            assert!(status.success());\n+        }\n \n         let status = Command::new(\"git\")\n             .arg(\"reset\")\n-            .arg(sha)\n+            .arg(test.sha)\n             .arg(\"--hard\")\n-            .current_dir(dir.path())\n+            .current_dir(&out_dir)\n             .status()\n             .expect(\"\");\n \n@@ -84,9 +101,18 @@ fn clone_repo(repo: &str, sha: &str) -> TempDir {\n         }\n     }\n \n-    if !found { panic!(\"unable to find commit {}\", sha) }\n+    if !found {\n+        panic!(\"unable to find commit {}\", test.sha)\n+    }\n+    let status = Command::new(\"git\")\n+        .arg(\"clean\")\n+        .arg(\"-fdx\")\n+        .current_dir(&out_dir)\n+        .status()\n+        .unwrap();\n+    assert!(status.success());\n \n-    dir\n+    out_dir\n }\n \n fn run_cargo_test(cargo_path: &Path, crate_path: &Path) -> bool {"}]}