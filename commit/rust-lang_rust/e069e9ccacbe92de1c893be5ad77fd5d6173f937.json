{"sha": "e069e9ccacbe92de1c893be5ad77fd5d6173f937", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNjllOWNjYWNiZTkyZGUxYzg5M2JlNWFkNzdmZDVkNjE3M2Y5Mzc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-07T19:39:20Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-10-18T02:06:55Z"}, "message": "Prepare promote_consts MutVisitor to have projections interned", "tree": {"sha": "dd2cb7d78e44747cf5a6fe45757797b3e7cfb6bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd2cb7d78e44747cf5a6fe45757797b3e7cfb6bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e069e9ccacbe92de1c893be5ad77fd5d6173f937", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAl2pHj8ACgkQiMlBzaHU\nZDKycRAAg/KyQEU/0wOH6EaVDZ8gTznDdI4iKXX2V6FM0CoSVKt0QnZVjH6/cZT5\n15r0vRAKSATJ/V0G4wqLtq8jeE+au0y3ikqONt1UhctdKL+l9shlbh+Vqm8/6FzF\nXrsDbF46UDz+F3fxdp0jjM6BfRnLJguGpdpn7gwQo9s3pD9OPrGB2ToWOZxzzB4e\ntAG6oRanap3gfTibuSzDNNFLYPgMxFvyIeHdpwQ5fdM7k4E+hpNI1h0An1Jsn1tE\n26dz/+Ae4Hqtr60hfTBBoqCwSKn/v86e719jllc+mr24nBJPMRXK5ECblzPggkYO\nxEN6cizD/tBgrPfLW0jI8aQM+RhvKl2BNtLQv3sCotkrAF9RqwElOo3mSWCce03Q\nt+uyJv0I+UfB1gNzaJx2qsf2DTIDxg+fbbGinLFnvVVynrEycQ+q2kEhBg+SO9jL\nN0xF+tOON4YoJhAIu0e3+9VUvgIBzMHg54Xncpwd0TfxUxsVtM3VErXki5f9hCU0\nm5QjKyX72BUZIWo/tuu+GMTpHAMwCSPxDrMSh6/rwLTVolN/lE6FR6leZLfeuY5g\njy4RaUaGspwTjo8a0k+W32VEjhievx5DduQt3WB/okVjvJvoxpRtLI6U41DhW26W\noua49D3FKFXGhuGGlY6pyxLpWkpUAsDHEmudLbpF+RCro+CQr64=\n=UFMc\n-----END PGP SIGNATURE-----", "payload": "tree dd2cb7d78e44747cf5a6fe45757797b3e7cfb6bc\nparent 5de9cb0703555ee6e2e0af8305be138f09545485\nauthor Santiago Pastorino <spastorino@gmail.com> 1570477160 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1571364415 -0400\n\nPrepare promote_consts MutVisitor to have projections interned\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e069e9ccacbe92de1c893be5ad77fd5d6173f937", "html_url": "https://github.com/rust-lang/rust/commit/e069e9ccacbe92de1c893be5ad77fd5d6173f937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e069e9ccacbe92de1c893be5ad77fd5d6173f937/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de9cb0703555ee6e2e0af8305be138f09545485", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de9cb0703555ee6e2e0af8305be138f09545485", "html_url": "https://github.com/rust-lang/rust/commit/5de9cb0703555ee6e2e0af8305be138f09545485"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "d1c79c5ae2ada481c1433bb7c828f32ecc0741fd", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e069e9ccacbe92de1c893be5ad77fd5d6173f937/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e069e9ccacbe92de1c893be5ad77fd5d6173f937/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=e069e9ccacbe92de1c893be5ad77fd5d6173f937", "patch": "@@ -191,6 +191,10 @@ impl<'a, 'tcx> Promoter<'a, 'tcx> {\n         });\n     }\n \n+    fn is_temp_kind(&self, local: Local) -> bool {\n+        self.source.local_kind(local) == LocalKind::Temp\n+    }\n+\n     /// Copies the initialization of this temp to the\n     /// promoted MIR, recursing through temps.\n     fn promote_temp(&mut self, temp: Local) -> Local {\n@@ -396,10 +400,30 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n                    local: &mut Local,\n                    _: PlaceContext,\n                    _: Location) {\n-        if self.source.local_kind(*local) == LocalKind::Temp {\n+        if self.is_temp_kind(*local) {\n             *local = self.promote_temp(*local);\n         }\n     }\n+\n+    fn visit_place(\n+        &mut self,\n+        place: &mut Place<'tcx>,\n+        context: PlaceContext,\n+        location: Location,\n+    ) {\n+        self.visit_place_base(&mut place.base, context, location);\n+\n+        let new_projection: Vec<_> = place.projection.iter().map(|elem|\n+            match elem {\n+                PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n+                    PlaceElem::Index(self.promote_temp(*local))\n+                }\n+                _ => elem.clone(),\n+            }\n+        ).collect();\n+\n+        place.projection = new_projection.into_boxed_slice();\n+    }\n }\n \n pub fn promote_candidates<'tcx>("}]}