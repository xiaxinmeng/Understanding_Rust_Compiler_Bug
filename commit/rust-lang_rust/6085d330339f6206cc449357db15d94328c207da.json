{"sha": "6085d330339f6206cc449357db15d94328c207da", "node_id": "C_kwDOAAsO6NoAKDYwODVkMzMwMzM5ZjYyMDZjYzQ0OTM1N2RiMTVkOTQzMjhjMjA3ZGE", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-12-11T22:27:01Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-12-12T03:27:09Z"}, "message": "fix transmutes between pointers in different address spaces", "tree": {"sha": "442133e867fdd941e79994f82e283a30646ad90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/442133e867fdd941e79994f82e283a30646ad90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6085d330339f6206cc449357db15d94328c207da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6085d330339f6206cc449357db15d94328c207da", "html_url": "https://github.com/rust-lang/rust/commit/6085d330339f6206cc449357db15d94328c207da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6085d330339f6206cc449357db15d94328c207da/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba", "html_url": "https://github.com/rust-lang/rust/commit/c6fcdb690609769a240fc8ab0de0ce68d5ea7dba"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "eb42d4840d5c9e0402dd50eb3a5af20020520e75", "filename": "compiler/rustc_codegen_ssa/src/mir/block.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6085d330339f6206cc449357db15d94328c207da/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085d330339f6206cc449357db15d94328c207da/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fblock.rs?ref=6085d330339f6206cc449357db15d94328c207da", "patch": "@@ -1810,15 +1810,20 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         match (src.layout.abi, dst.layout.abi) {\n             (abi::Abi::Scalar(src_scalar), abi::Abi::Scalar(dst_scalar)) => {\n                 // HACK(eddyb) LLVM doesn't like `bitcast`s between pointers and non-pointers.\n-                if (src_scalar.primitive() == abi::Pointer)\n-                    == (dst_scalar.primitive() == abi::Pointer)\n-                {\n+                let src_is_ptr = src_scalar.primitive() == abi::Pointer;\n+                let dst_is_ptr = dst_scalar.primitive() == abi::Pointer;\n+                if src_is_ptr == dst_is_ptr {\n                     assert_eq!(src.layout.size, dst.layout.size);\n \n                     // NOTE(eddyb) the `from_immediate` and `to_immediate_scalar`\n                     // conversions allow handling `bool`s the same as `u8`s.\n                     let src = bx.from_immediate(src.immediate());\n-                    let src_as_dst = bx.bitcast(src, bx.backend_type(dst.layout));\n+                    // LLVM also doesn't like `bitcast`s between pointers in different address spaces.\n+                    let src_as_dst = if src_is_ptr {\n+                        bx.pointercast(src, bx.backend_type(dst.layout))\n+                    } else {\n+                        bx.bitcast(src, bx.backend_type(dst.layout))\n+                    };\n                     Immediate(bx.to_immediate_scalar(src_as_dst, dst_scalar)).store(bx, dst);\n                     return;\n                 }"}, {"sha": "e9740e30da483d6a5231c8e47a17fe2a678d015a", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6085d330339f6206cc449357db15d94328c207da/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085d330339f6206cc449357db15d94328c207da/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=6085d330339f6206cc449357db15d94328c207da", "patch": "@@ -9,7 +9,7 @@\n // It also validates that functions can be called through function pointers\n // through traits.\n \n-#![feature(no_core, lang_items, unboxed_closures, arbitrary_self_types)]\n+#![feature(no_core, lang_items, intrinsics, unboxed_closures, arbitrary_self_types)]\n #![crate_type = \"lib\"]\n #![no_core]\n \n@@ -49,6 +49,10 @@ pub trait Fn<Args: Tuple>: FnOnce<Args> {\n     extern \"rust-call\" fn call(&self, args: Args) -> Self::Output;\n }\n \n+extern \"rust-intrinsic\" {\n+    pub fn transmute<Src, Dst>(src: Src) -> Dst;\n+}\n+\n pub static mut STORAGE_FOO: fn(&usize, &mut u32) -> Result<(), ()> = arbitrary_black_box;\n pub static mut STORAGE_BAR: u32 = 12;\n \n@@ -87,3 +91,21 @@ pub extern \"C\" fn test() {\n         STORAGE_FOO(&1, &mut buf);\n     }\n }\n+\n+// Validate that we can codegen transmutes between data ptrs and fn ptrs.\n+\n+// CHECK: define{{.+}}{{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}} @transmute_data_ptr_to_fn({{\\{\\}\\*|ptr}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_data_ptr_to_fn(x: *const ()) -> fn() {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}\n+\n+// CHECK: define{{.+}}{{\\{\\}\\*|ptr}} @transmute_fn_ptr_to_data({{void \\(\\) addrspace\\(1\\)\\*|ptr addrspace\\(1\\)}}{{.*}} %x)\n+#[no_mangle]\n+pub unsafe fn transmute_fn_ptr_to_data(x: fn()) -> *const () {\n+    // It doesn't matter precisely how this is codegenned (through memory or an addrspacecast),\n+    // as long as it doesn't cause a verifier error by using `bitcast`.\n+    transmute(x)\n+}"}]}