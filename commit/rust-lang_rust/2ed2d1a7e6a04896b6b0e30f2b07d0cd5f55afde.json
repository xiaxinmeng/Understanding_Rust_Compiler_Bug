{"sha": "2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZDJkMWE3ZTZhMDQ4OTZiNmIwZTMwZjJiMDdkMGNkNWY1NWFmZGU=", "commit": {"author": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-10-09T09:53:59Z"}, "committer": {"name": "csmoe", "email": "35686186+csmoe@users.noreply.github.com", "date": "2018-10-20T03:11:31Z"}, "message": "suggest to remove prefix `b` in lint string", "tree": {"sha": "c7c2b0d389d674fa1072add7b1c8492ba25b2b25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7c2b0d389d674fa1072add7b1c8492ba25b2b25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "html_url": "https://github.com/rust-lang/rust/commit/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42dde960f95222ffd8c356e0f7841cd22294a6c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/42dde960f95222ffd8c356e0f7841cd22294a6c9", "html_url": "https://github.com/rust-lang/rust/commit/42dde960f95222ffd8c356e0f7841cd22294a6c9"}], "stats": {"total": 137, "additions": 92, "deletions": 45}, "files": [{"sha": "24b016c3d98b156848b7309008cd461616e6608f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "patch": "@@ -1326,6 +1326,14 @@ impl LitKind {\n         }\n     }\n \n+    /// Returns true if this literal is byte literal string false otherwise.\n+    pub fn is_bytestr(&self) -> bool {\n+        match self {\n+            LitKind::ByteStr(_) => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns true if this is a numeric literal.\n     pub fn is_numeric(&self) -> bool {\n         match *self {"}, {"sha": "c39fcf9a09136fd266bde899cdf7ddee849ce493", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 84, "deletions": 45, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=2ed2d1a7e6a04896b6b0e30f2b07d0cd5f55afde", "patch": "@@ -27,7 +27,7 @@ enum AttrError {\n     UnsupportedLiteral\n }\n \n-fn handle_errors(diag: &Handler, span: Span, error: AttrError) {\n+fn handle_errors(diag: &Handler, span: Span, error: AttrError, is_bytestr: bool) {\n     match error {\n         AttrError::MultipleItem(item) => span_err!(diag, span, E0538,\n                                                    \"multiple '{}' items\", item),\n@@ -44,7 +44,25 @@ fn handle_errors(diag: &Handler, span: Span, error: AttrError) {\n         AttrError::MissingFeature => span_err!(diag, span, E0546, \"missing 'feature'\"),\n         AttrError::MultipleStabilityLevels => span_err!(diag, span, E0544,\n                                                         \"multiple stability levels\"),\n-        AttrError::UnsupportedLiteral => span_err!(diag, span, E0565, \"unsupported literal\"),\n+        AttrError::UnsupportedLiteral => {\n+            let mut err = struct_span_err!(\n+                diag,\n+                span,\n+                E0565,\n+                \"unsupported literal\",\n+            );\n+            if is_bytestr {\n+                if let Ok(lint_str) = sess.source_map.span_to_snippet(span) {\n+                    err.span_suggestion_with_applicability(\n+                        span,\n+                        \"consider removing the prefix\",\n+                        format!(\"{}\", lint_str[1..]),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            err.emit();\n+        }\n     }\n }\n \n@@ -202,7 +220,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n             let meta = meta.as_ref().unwrap();\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()));\n+                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()), false);\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -231,12 +249,14 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                     handle_errors(\n                                         diagnostic,\n                                         mi.span,\n-                                        AttrError::UnknownMetaItem(mi.name(), expected));\n+                                        AttrError::UnknownMetaItem(mi.name(), expected),\n+                                        false\n+                                    );\n                                     continue 'outer\n                                 }\n                             }\n                         } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n+                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral, false);\n                             continue 'outer\n                         }\n                     }\n@@ -261,7 +281,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince);\n+                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince, false);\n                             continue\n                         }\n                         _ => {\n@@ -287,7 +307,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                 }\n                 \"unstable\" => {\n                     if stab.is_some() {\n-                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels);\n+                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels, false);\n                         break\n                     }\n \n@@ -308,12 +328,13 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                                             mi.name(),\n                                             &[\"feature\", \"reason\", \"issue\"]\n                                         ),\n+                                        false,\n                                     );\n                                     continue 'outer\n                                 }\n                             }\n                         } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n+                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral, false);\n                             continue 'outer\n                         }\n                     }\n@@ -340,7 +361,7 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature);\n+                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature, false);\n                             continue\n                         }\n                         _ => {\n@@ -351,29 +372,37 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                 }\n                 \"stable\" => {\n                     if stab.is_some() {\n-                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels);\n+                        handle_errors(diagnostic, attr.span(), AttrError::MultipleStabilityLevels, false);\n                         break\n                     }\n \n                     let mut feature = None;\n                     let mut since = None;\n                     for meta in metas {\n-                        if let NestedMetaItemKind::MetaItem(ref mi) = meta.node {\n-                            match &*mi.name().as_str() {\n-                                \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n-                                \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                                _ => {\n-                                    handle_errors(\n-                                        diagnostic,\n-                                        meta.span,\n-                                        AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                                    );\n-                                    continue 'outer\n+                        match &meta.node {\n+                            NestedMetaItemKind::MetaItem(mi) => {\n+                                match &*mi.name().as_str() {\n+                                    \"feature\" => if !get(mi, &mut feature) { continue 'outer },\n+                                    \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                                    _ => {\n+                                        handle_errors(\n+                                            diagnostic,\n+                                            meta.span,\n+                                            AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                            false,\n+                                        );\n+                                        continue 'outer\n+                                    }\n                                 }\n+                            NestedMetaItemKind::Literal(lit) => {\n+                                handle_errors(\n+                                    diagnostic,\n+                                    meta.span,\n+                                    AttrError::UnsupportedLiteral,\n+                                    lit.node.is_bytestr()\n+                                );\n+                                continue 'outer\n                             }\n-                        } else {\n-                            handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n-                            continue 'outer\n                         }\n                     }\n \n@@ -390,11 +419,11 @@ fn find_stability_generic<'a, I>(diagnostic: &Handler,\n                             })\n                         }\n                         (None, _) => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature);\n+                            handle_errors(diagnostic, attr.span(), AttrError::MissingFeature, false);\n                             continue\n                         }\n                         _ => {\n-                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince);\n+                            handle_errors(diagnostic, attr.span(), AttrError::MissingSince, false);\n                             continue\n                         }\n                     }\n@@ -461,8 +490,13 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n             MetaItemKind::List(..) => {\n                 error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n             }\n-            MetaItemKind::NameValue(lit) if !lit.node.is_str() => {\n-                error(lit.span, \"literal in `cfg` predicate value must be a string\")\n+            MetaItemKind::NameValue(lit) => if !lit.node.is_str() {\n+                handle_errors(\n+                    &sess.span_diagnostic,\n+                    lit.span, AttrError::UnsupportedLiteral,\n+                    lit.node.is_bytestr(),\n+                );\n+                true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n                 sess.config.contains(&(cfg.name(), cfg.value_str()))\n@@ -481,7 +515,7 @@ pub fn eval_condition<F>(cfg: &ast::MetaItem, sess: &ParseSess, eval: &mut F)\n         ast::MetaItemKind::List(ref mis) => {\n             for mi in mis.iter() {\n                 if !mi.is_meta_item() {\n-                    handle_errors(&sess.span_diagnostic, mi.span, AttrError::UnsupportedLiteral);\n+                    handle_errors(&sess.span_diagnostic, mi.span, AttrError::UnsupportedLiteral, false);\n                     return false;\n                 }\n             }\n@@ -551,7 +585,7 @@ fn find_deprecation_generic<'a, I>(diagnostic: &Handler,\n         depr = if let Some(metas) = attr.meta_item_list() {\n             let get = |meta: &MetaItem, item: &mut Option<Symbol>| {\n                 if item.is_some() {\n-                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()));\n+                    handle_errors(diagnostic, meta.span, AttrError::MultipleItem(meta.name()), false);\n                     return false\n                 }\n                 if let Some(v) = meta.value_str() {\n@@ -566,22 +600,27 @@ fn find_deprecation_generic<'a, I>(diagnostic: &Handler,\n             let mut since = None;\n             let mut note = None;\n             for meta in metas {\n-                if let NestedMetaItemKind::MetaItem(ref mi) = meta.node {\n-                    match &*mi.name().as_str() {\n-                        \"since\" => if !get(mi, &mut since) { continue 'outer },\n-                        \"note\" => if !get(mi, &mut note) { continue 'outer },\n-                        _ => {\n-                            handle_errors(\n-                                diagnostic,\n-                                meta.span,\n-                                AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n-                            );\n-                            continue 'outer\n+                match &meta.node {\n+                    NestedMetaItemKind::MetaItem(mi) => {\n+                        match &*mi.name().as_str() {\n+                            \"since\" => if !get(mi, &mut since) { continue 'outer },\n+                            \"note\" => if !get(mi, &mut note) { continue 'outer },\n+                            _ => {\n+                                handle_errors(\n+                                    diagnostic,\n+                                    meta.span,\n+                                    AttrError::UnknownMetaItem(mi.name(), &[\"since\", \"note\"]),\n+                                    false,\n+                                );\n+                                continue 'outer\n+                            }\n                         }\n                     }\n-                } else {\n-                    handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral);\n-                    continue 'outer\n+                    NestedMetaItemKind::Literal(lit) => {\n+                        let is_bytestr = lit.node.is_bytestr();\n+                        handle_errors(diagnostic, meta.span, AttrError::UnsupportedLiteral, is_bytestr);\n+                        continue 'outer\n+                    }\n                 }\n             }\n \n@@ -638,7 +677,7 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n             mark_used(attr);\n             for item in items {\n                 if !item.is_meta_item() {\n-                    handle_errors(diagnostic, item.span, AttrError::UnsupportedLiteral);\n+                    handle_errors(diagnostic, item.span, AttrError::UnsupportedLiteral, false);\n                     continue\n                 }\n "}]}