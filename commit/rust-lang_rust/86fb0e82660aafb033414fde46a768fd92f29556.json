{"sha": "86fb0e82660aafb033414fde46a768fd92f29556", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZmIwZTgyNjYwYWFmYjAzMzQxNGZkZTQ2YTc2OGZkOTJmMjk1NTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T15:27:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-02T15:27:54Z"}, "message": "Auto merge of #7020 - camsteffen:needless-collect, r=Manishearth\n\nImprove needless_collect output\n\nchangelog: Improve needless_collect output\n\nFixes #6908\nPartially addresses #6164", "tree": {"sha": "321270e098254f1e16b1428c59904556c9caae72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/321270e098254f1e16b1428c59904556c9caae72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86fb0e82660aafb033414fde46a768fd92f29556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86fb0e82660aafb033414fde46a768fd92f29556", "html_url": "https://github.com/rust-lang/rust/commit/86fb0e82660aafb033414fde46a768fd92f29556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86fb0e82660aafb033414fde46a768fd92f29556/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ce23730e2f9ccd96ef5f6210c14889e742ead00", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ce23730e2f9ccd96ef5f6210c14889e742ead00", "html_url": "https://github.com/rust-lang/rust/commit/9ce23730e2f9ccd96ef5f6210c14889e742ead00"}, {"sha": "33798bb0646b32680a204ef39aa1aae07c9ac0f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/33798bb0646b32680a204ef39aa1aae07c9ac0f5", "html_url": "https://github.com/rust-lang/rust/commit/33798bb0646b32680a204ef39aa1aae07c9ac0f5"}], "stats": {"total": 144, "additions": 57, "deletions": 87}, "files": [{"sha": "e0c5caf51362af256efeff528ac2217a8bd4e366", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 28, "deletions": 65, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/86fb0e82660aafb033414fde46a768fd92f29556/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fb0e82660aafb033414fde46a768fd92f29556/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=86fb0e82660aafb033414fde46a768fd92f29556", "patch": "@@ -10,8 +10,8 @@ use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, GenericArg, HirId, Local, Pat, PatKind, QPath, StmtKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-use rustc_span::source_map::Span;\n use rustc_span::symbol::{sym, Ident};\n+use rustc_span::{MultiSpan, Span};\n \n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n \n@@ -22,7 +22,7 @@ pub(super) fn check<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n-        if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n+        if let ExprKind::MethodCall(ref chain_method, method0_span, _, _) = args[0].kind;\n         if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         if let Some(ref generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n@@ -31,55 +31,28 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n             || is_type_diagnostic_item(cx, ty, sym::vecdeque_type)\n             || match_type(cx, ty, &paths::BTREEMAP)\n             || is_type_diagnostic_item(cx, ty, sym::hashmap_type);\n-        then {\n-            if method.ident.name == sym!(len) {\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    \"replace with\",\n-                    \"count()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            if method.ident.name == sym!(is_empty) {\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_sugg(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    \"replace with\",\n-                    \"next().is_none()\".to_string(),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n-            if method.ident.name == sym!(contains) {\n+        if let Some(sugg) = match &*method.ident.name.as_str() {\n+            \"len\" => Some(\"count()\".to_string()),\n+            \"is_empty\" => Some(\"next().is_none()\".to_string()),\n+            \"contains\" => {\n                 let contains_arg = snippet(cx, args[1].span, \"??\");\n-                let span = shorten_needless_collect_span(expr);\n-                span_lint_and_then(\n-                    cx,\n-                    NEEDLESS_COLLECT,\n-                    span,\n-                    NEEDLESS_COLLECT_MSG,\n-                    |diag| {\n-                        let (arg, pred) = contains_arg\n-                                .strip_prefix('&')\n-                                .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n-                        diag.span_suggestion(\n-                            span,\n-                            \"replace with\",\n-                            format!(\n-                                \"any(|{}| x == {})\",\n-                                arg, pred\n-                            ),\n-                            Applicability::MachineApplicable,\n-                        );\n-                    }\n-                );\n+                let (arg, pred) = contains_arg\n+                    .strip_prefix('&')\n+                    .map_or((\"&x\", &*contains_arg), |s| (\"x\", s));\n+                Some(format!(\"any(|{}| x == {})\", arg, pred))\n             }\n+            _ => None,\n+        };\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                NEEDLESS_COLLECT,\n+                method0_span.with_hi(expr.span.hi()),\n+                NEEDLESS_COLLECT_MSG,\n+                \"replace with\",\n+                sugg,\n+                Applicability::MachineApplicable,\n+            );\n         }\n     }\n }\n@@ -92,7 +65,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     Local { pat: Pat { hir_id: pat_id, kind: PatKind::Binding(_, _, ident, .. ), .. },\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n-                if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n+                if let ExprKind::MethodCall(ref method_name, collect_span, &[ref iter_source], ..) = init_expr.kind;\n                 if method_name.ident.name == sym!(collect) && is_trait_method(cx, &init_expr, sym::Iterator);\n                 if let Some(ref generic_args) = method_name.args;\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n@@ -101,7 +74,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     is_type_diagnostic_item(cx, ty, sym::vecdeque_type) ||\n                     match_type(cx, ty, &paths::LINKED_LIST);\n                 if let Some(iter_calls) = detect_iter_and_into_iters(block, *ident);\n-                if iter_calls.len() == 1;\n+                if let [iter_call] = &*iter_calls;\n                 then {\n                     let mut used_count_visitor = UsedCountVisitor {\n                         cx,\n@@ -114,11 +87,12 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     }\n \n                     // Suggest replacing iter_call with iter_replacement, and removing stmt\n-                    let iter_call = &iter_calls[0];\n+                    let mut span = MultiSpan::from_span(collect_span);\n+                    span.push_span_label(iter_call.span, \"the iterator could be used here instead\".into());\n                     span_lint_and_then(\n                         cx,\n                         super::NEEDLESS_COLLECT,\n-                        stmt.span.until(iter_call.span),\n+                        span,\n                         NEEDLESS_COLLECT_MSG,\n                         |diag| {\n                             let iter_replacement = format!(\"{}{}\", Sugg::hir(cx, iter_source, \"..\"), iter_call.get_iter_method(cx));\n@@ -129,7 +103,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                                     (iter_call.span, iter_replacement)\n                                 ],\n                                 Applicability::MachineApplicable,// MaybeIncorrect,\n-                            ).emit();\n+                            );\n                         },\n                     );\n                 }\n@@ -269,14 +243,3 @@ fn detect_iter_and_into_iters<'tcx>(block: &'tcx Block<'tcx>, identifier: Ident)\n     visitor.visit_block(block);\n     if visitor.seen_other { None } else { Some(visitor.uses) }\n }\n-\n-fn shorten_needless_collect_span(expr: &Expr<'_>) -> Span {\n-    if_chain! {\n-        if let ExprKind::MethodCall(.., args, _) = &expr.kind;\n-        if let ExprKind::MethodCall(_, span, ..) = &args[0].kind;\n-        then {\n-            return expr.span.with_lo(span.lo());\n-        }\n-    }\n-    unreachable!();\n-}"}, {"sha": "73a2fa992b3f25818f28582005c38e997de51fd9", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/86fb0e82660aafb033414fde46a768fd92f29556/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86fb0e82660aafb033414fde46a768fd92f29556/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=86fb0e82660aafb033414fde46a768fd92f29556", "patch": "@@ -133,9 +133,11 @@ pub fn span_lint_and_note<'a, T: LintContext>(\n ///\n /// If you need to customize your lint output a lot, use this function.\n /// If you change the signature, remember to update the internal lint `CollapsibleCalls`\n-pub fn span_lint_and_then<'a, T: LintContext, F>(cx: &'a T, lint: &'static Lint, sp: Span, msg: &str, f: F)\n+pub fn span_lint_and_then<C, S, F>(cx: &C, lint: &'static Lint, sp: S, msg: &str, f: F)\n where\n-    F: for<'b> FnOnce(&mut DiagnosticBuilder<'b>),\n+    C: LintContext,\n+    S: Into<MultiSpan>,\n+    F: FnOnce(&mut DiagnosticBuilder<'_>),\n {\n     cx.struct_span_lint(lint, sp, |diag| {\n         let mut diag = diag.build(msg);"}, {"sha": "c773b841f3b4b711c5c1f1321edd13452ecfe733", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 25, "deletions": 20, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/86fb0e82660aafb033414fde46a768fd92f29556/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86fb0e82660aafb033414fde46a768fd92f29556/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=86fb0e82660aafb033414fde46a768fd92f29556", "patch": "@@ -1,9 +1,10 @@\n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:5:5\n+  --> $DIR/needless_collect_indirect.rs:5:39\n    |\n-LL | /     let indirect_iter = sample.iter().collect::<Vec<_>>();\n-LL | |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n-   | |____^\n+LL |     let indirect_iter = sample.iter().collect::<Vec<_>>();\n+   |                                       ^^^^^^^\n+LL |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n+   |     ------------------------- the iterator could be used here instead\n    |\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n help: use the original Iterator instead of collecting it and then producing a new one\n@@ -13,11 +14,12 @@ LL |     sample.iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:7:5\n+  --> $DIR/needless_collect_indirect.rs:7:38\n    |\n-LL | /     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n-LL | |     indirect_len.len();\n-   | |____^\n+LL |     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n+   |                                      ^^^^^^^\n+LL |     indirect_len.len();\n+   |     ------------------ the iterator could be used here instead\n    |\n help: take the original Iterator's count instead of collecting it and finding the length\n    |\n@@ -26,11 +28,12 @@ LL |     sample.iter().count();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:9:5\n+  --> $DIR/needless_collect_indirect.rs:9:40\n    |\n-LL | /     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n-LL | |     indirect_empty.is_empty();\n-   | |____^\n+LL |     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n+   |                                        ^^^^^^^\n+LL |     indirect_empty.is_empty();\n+   |     ------------------------- the iterator could be used here instead\n    |\n help: check if the original Iterator has anything instead of collecting it and seeing if it's empty\n    |\n@@ -39,11 +42,12 @@ LL |     sample.iter().next().is_none();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:11:5\n+  --> $DIR/needless_collect_indirect.rs:11:43\n    |\n-LL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n-LL | |     indirect_contains.contains(&&5);\n-   | |____^\n+LL |     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n+   |                                           ^^^^^^^\n+LL |     indirect_contains.contains(&&5);\n+   |     ------------------------------- the iterator could be used here instead\n    |\n help: check if the original Iterator contains an element instead of collecting then checking\n    |\n@@ -52,11 +56,12 @@ LL |     sample.iter().any(|x| x == &5);\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:23:5\n+  --> $DIR/needless_collect_indirect.rs:23:48\n    |\n-LL | /     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n-LL | |     non_copy_contains.contains(&a);\n-   | |____^\n+LL |     let non_copy_contains = sample.into_iter().collect::<Vec<_>>();\n+   |                                                ^^^^^^^\n+LL |     non_copy_contains.contains(&a);\n+   |     ------------------------------ the iterator could be used here instead\n    |\n help: check if the original Iterator contains an element instead of collecting then checking\n    |"}]}