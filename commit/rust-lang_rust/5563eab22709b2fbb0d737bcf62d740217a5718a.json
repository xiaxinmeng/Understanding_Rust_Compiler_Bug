{"sha": "5563eab22709b2fbb0d737bcf62d740217a5718a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NjNlYWIyMjcwOWIyZmJiMGQ3MzdiY2Y2MmQ3NDAyMTdhNTcxOGE=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2012-02-06T03:31:36Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-07T01:57:22Z"}, "message": "change gcc_args to cc_args and make win32 use gcc", "tree": {"sha": "f2017853e272380892658357637384a16c39e01e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2017853e272380892658357637384a16c39e01e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5563eab22709b2fbb0d737bcf62d740217a5718a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5563eab22709b2fbb0d737bcf62d740217a5718a", "html_url": "https://github.com/rust-lang/rust/commit/5563eab22709b2fbb0d737bcf62d740217a5718a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5563eab22709b2fbb0d737bcf62d740217a5718a/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98bb5b73a5bf4173f88b21b2f27c62971e175f54", "url": "https://api.github.com/repos/rust-lang/rust/commits/98bb5b73a5bf4173f88b21b2f27c62971e175f54", "html_url": "https://github.com/rust-lang/rust/commit/98bb5b73a5bf4173f88b21b2f27c62971e175f54"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "f2efb9cdc6ce5a3581c9a4a56f88d009dbedd268", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 32, "deletions": 27, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=5563eab22709b2fbb0d737bcf62d740217a5718a", "patch": "@@ -561,12 +561,12 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n }\n \n // If the user wants an exe generated we need to invoke\n-// gcc to link the object file with some libs\n+// cc to link the object file with some libs\n fn link_binary(sess: session,\n                obj_filename: str,\n                out_filename: str,\n                lm: link_meta) {\n-    // Converts a library file name into a gcc -l argument\n+    // Converts a library file name into a cc -l argument\n     fn unlib(config: @session::config, filename: str) -> str unsafe {\n         let rmlib = fn@(filename: str) -> str {\n             if config.os == session::os_macos ||\n@@ -610,12 +610,15 @@ fn link_binary(sess: session,\n \n     // In the future, FreeBSD will use clang as default compiler.\n     // It would be flexible to use cc (system's default C compiler)\n-    // instead of hard-coded gcc\n-    let prog: str = \"cc\";\n-    // The invocations of gcc share some flags across platforms\n-\n-    let gcc_args =\n-        [stage] + sess.targ_cfg.target_strs.gcc_args +\n+    // instead of hard-coded gcc.\n+    // For win32, there is no cc command,\n+    // so we add a condition to make it use gcc.\n+    let cc_prog: str =\n+        if sess.targ_cfg.os == session::os_win32 { \"gcc\" } else { \"cc\" };\n+    // The invocations of cc share some flags across platforms\n+\n+    let cc_args =\n+        [stage] + sess.targ_cfg.target_strs.cc_args +\n         [\"-o\", output, obj_filename];\n \n     let lib_cmd;\n@@ -627,47 +630,47 @@ fn link_binary(sess: session,\n     let cstore = sess.cstore;\n     for cratepath: str in cstore::get_used_crate_files(cstore) {\n         if str::ends_with(cratepath, \".rlib\") {\n-            gcc_args += [cratepath];\n+            cc_args += [cratepath];\n             cont;\n         }\n         let cratepath = cratepath;\n         let dir = fs::dirname(cratepath);\n-        if dir != \"\" { gcc_args += [\"-L\" + dir]; }\n+        if dir != \"\" { cc_args += [\"-L\" + dir]; }\n         let libarg = unlib(sess.targ_cfg, fs::basename(cratepath));\n-        gcc_args += [\"-l\" + libarg];\n+        cc_args += [\"-l\" + libarg];\n     }\n \n     let ula = cstore::get_used_link_args(cstore);\n-    for arg: str in ula { gcc_args += [arg]; }\n+    for arg: str in ula { cc_args += [arg]; }\n \n     let used_libs = cstore::get_used_libraries(cstore);\n-    for l: str in used_libs { gcc_args += [\"-l\" + l]; }\n+    for l: str in used_libs { cc_args += [\"-l\" + l]; }\n \n     if sess.building_library {\n-        gcc_args += [lib_cmd];\n+        cc_args += [lib_cmd];\n \n         // On mac we need to tell the linker to let this library\n         // be rpathed\n         if sess.targ_cfg.os == session::os_macos {\n-            gcc_args += [\"-Wl,-install_name,@rpath/\"\n+            cc_args += [\"-Wl,-install_name,@rpath/\"\n                         + fs::basename(output)];\n         }\n     } else {\n         // FIXME: why do we hardcode -lm?\n-        gcc_args += [\"-lm\"];\n+        cc_args += [\"-lm\"];\n     }\n \n     // Always want the runtime linked in\n-    gcc_args += [\"-lrustrt\"];\n+    cc_args += [\"-lrustrt\"];\n \n     // On linux librt and libdl are an indirect dependencies via rustrt,\n     // and binutils 2.22+ won't add them automatically\n     if sess.targ_cfg.os == session::os_linux {\n-        gcc_args += [\"-lrt\", \"-ldl\"];\n+        cc_args += [\"-lrt\", \"-ldl\"];\n     }\n \n     if sess.targ_cfg.os == session::os_freebsd {\n-        gcc_args += [\"-lrt\", \"-L/usr/local/lib\", \"-lexecinfo\",\n+        cc_args += [\"-lrt\", \"-L/usr/local/lib\", \"-lexecinfo\",\n                      \"-L/usr/local/lib/gcc46\",\n                      \"-L/usr/local/lib/gcc44\", \"-lstdc++\",\n                      \"-Wl,-z,origin\",\n@@ -680,20 +683,22 @@ fn link_binary(sess: session,\n     // understand how to unwind our __morestack frame, so we have to turn it\n     // off. This has impacted some other projects like GHC.\n     if sess.targ_cfg.os == session::os_macos {\n-        gcc_args += [\"-Wl,-no_compact_unwind\"];\n+        cc_args += [\"-Wl,-no_compact_unwind\"];\n     }\n \n     // Stack growth requires statically linking a __morestack function\n-    gcc_args += [\"-lmorestack\"];\n+    cc_args += [\"-lmorestack\"];\n \n-    gcc_args += rpath::get_rpath_flags(sess, output);\n+    cc_args += rpath::get_rpath_flags(sess, output);\n \n-    #debug(\"gcc link args: %s\", str::connect(gcc_args, \" \"));\n-    // We run 'gcc' here\n-    let prog = run::program_output(prog, gcc_args);\n+    #debug(\"%s link args: %s\", cc_prog, str::connect(cc_args, \" \"));\n+    // We run 'cc' here\n+    let prog = run::program_output(cc_prog, cc_args);\n     if 0 != prog.status {\n-        sess.err(#fmt[\"linking with gcc failed with code %d\", prog.status]);\n-        sess.note(#fmt[\"gcc arguments: %s\", str::connect(gcc_args, \" \")]);\n+        sess.err(#fmt[\"linking with %s failed with code %d\",\n+                      cc_prog, prog.status]);\n+        sess.note(#fmt[\"%s arguments: %s\",\n+                       cc_prog, str::connect(cc_args, \" \")]);\n         sess.note(prog.err + prog.out);\n         sess.abort_if_errors();\n     }"}, {"sha": "cc40746b71c3394a5a0613945b8a81fd08b15d95", "filename": "src/comp/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Ftarget_strs.rs?ref=5563eab22709b2fbb0d737bcf62d740217a5718a", "patch": "@@ -3,5 +3,5 @@ type t = {\n     meta_sect_name: str,\n     data_layout: str,\n     target_triple: str,\n-    gcc_args: [str]\n+    cc_args: [str]\n };"}, {"sha": "3db3d1db50abea8bfa450ea2c482cd6dd416402e", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=5563eab22709b2fbb0d737bcf62d740217a5718a", "patch": "@@ -38,7 +38,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_freebsd { \"i686-unknown-freebsd\" }\n         },\n \n-        gcc_args: [\"-m32\"]\n+        cc_args: [\"-m32\"]\n     };\n }\n "}, {"sha": "284152c23c6472adbd0df89c1de29eefef8f76a6", "filename": "src/comp/back/x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5563eab22709b2fbb0d737bcf62d740217a5718a/src%2Fcomp%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86_64.rs?ref=5563eab22709b2fbb0d737bcf62d740217a5718a", "patch": "@@ -45,7 +45,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_freebsd { \"x86_64-unknown-freebsd\" }\n         },\n \n-        gcc_args: [\"-m64\"]\n+        cc_args: [\"-m64\"]\n     };\n }\n "}]}