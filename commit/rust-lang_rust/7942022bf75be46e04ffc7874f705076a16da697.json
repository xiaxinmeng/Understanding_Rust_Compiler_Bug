{"sha": "7942022bf75be46e04ffc7874f705076a16da697", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NDIwMjJiZjc1YmU0NmUwNGZmYzc4NzRmNzA1MDc2YTE2ZGE2OTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-25T03:46:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-25T03:46:14Z"}, "message": "Auto merge of #50986 - estebank:main-start-span, r=nikomatsakis\n\nTweak `main` type arguments and where clause spans\n\nTweak the spans for error when finding type arguments or where clauses\nin main and start functions.", "tree": {"sha": "0e695fd7a8c1cd47ab079fd00b92252398c2f5f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e695fd7a8c1cd47ab079fd00b92252398c2f5f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7942022bf75be46e04ffc7874f705076a16da697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7942022bf75be46e04ffc7874f705076a16da697", "html_url": "https://github.com/rust-lang/rust/commit/7942022bf75be46e04ffc7874f705076a16da697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7942022bf75be46e04ffc7874f705076a16da697/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8e10e386ab714c61479bc5c95ca6d42f2144143", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8e10e386ab714c61479bc5c95ca6d42f2144143", "html_url": "https://github.com/rust-lang/rust/commit/c8e10e386ab714c61479bc5c95ca6d42f2144143"}, {"sha": "b2562fbcbaaafdb06ed343c7473db769a20afd89", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2562fbcbaaafdb06ed343c7473db769a20afd89", "html_url": "https://github.com/rust-lang/rust/commit/b2562fbcbaaafdb06ed343c7473db769a20afd89"}], "stats": {"total": 92, "additions": 55, "deletions": 37}, "files": [{"sha": "7db77a3e4afa511f2bd8bb109d20a4460053d594", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -598,6 +598,18 @@ pub struct WhereClause {\n     pub predicates: HirVec<WherePredicate>,\n }\n \n+impl WhereClause {\n+    pub fn span(&self) -> Option<Span> {\n+        self.predicates.iter().map(|predicate| predicate.span())\n+            .fold(None, |acc, i| match (acc, i) {\n+                (None, i) => Some(i),\n+                (Some(acc), i) => {\n+                    Some(acc.to(i))\n+                }\n+            })\n+    }\n+}\n+\n /// A single predicate in a `where` clause\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum WherePredicate {"}, {"sha": "0cd741a11d52908bf4e5dc76b82d3809e1afd3e2", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -186,18 +186,23 @@ fn check_main_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n                         hir::ItemFn(.., ref generics, _) => {\n+                            let mut error = false;\n                             if !generics.params.is_empty() {\n                                 struct_span_err!(tcx.sess, generics.span, E0131,\n-                                         \"main function is not allowed to have type parameters\")\n+                                    \"`main` function is not allowed to have type parameters\")\n                                     .span_label(generics.span,\n-                                                \"main cannot have type parameters\")\n+                                                \"`main` cannot have type parameters\")\n                                     .emit();\n-                                return;\n+                                error = true;\n+                            }\n+                            if let Some(sp) = generics.where_clause.span() {\n+                                struct_span_err!(tcx.sess, sp, E0646,\n+                                    \"`main` function is not allowed to have a `where` clause\")\n+                                    .span_label(sp, \"`main` cannot have a `where` clause\")\n+                                    .emit();\n+                                error = true;\n                             }\n-                            if !generics.where_clause.predicates.is_empty() {\n-                                struct_span_err!(tcx.sess, main_span, E0646,\n-                                         \"main function is not allowed to have a where clause\")\n-                                         .emit();\n+                            if error {\n                                 return;\n                             }\n                         }\n@@ -251,19 +256,24 @@ fn check_start_fn_ty<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             match tcx.hir.find(start_id) {\n                 Some(hir_map::NodeItem(it)) => {\n                     match it.node {\n-                        hir::ItemFn(..,ref ps,_) => {\n-                            if !ps.params.is_empty() {\n-                                struct_span_err!(tcx.sess, ps.span, E0132,\n+                        hir::ItemFn(.., ref generics, _) => {\n+                            let mut error = false;\n+                            if !generics.params.is_empty() {\n+                                struct_span_err!(tcx.sess, generics.span, E0132,\n                                     \"start function is not allowed to have type parameters\")\n-                                    .span_label(ps.span,\n+                                    .span_label(generics.span,\n                                                 \"start function cannot have type parameters\")\n                                     .emit();\n-                                return;\n+                                error = true;\n+                            }\n+                            if let Some(sp) = generics.where_clause.span() {\n+                                struct_span_err!(tcx.sess, sp, E0647,\n+                                    \"start function is not allowed to have a `where` clause\")\n+                                    .span_label(sp, \"start function cannot have a `where` clause\")\n+                                    .emit();\n+                                error = true;\n                             }\n-                            if !ps.where_clause.predicates.is_empty() {\n-                                struct_span_err!(tcx.sess, start_span, E0647,\n-                                            \"start function is not allowed to have a where clause\")\n-                                            .emit();\n+                            if error {\n                                 return;\n                             }\n                         }"}, {"sha": "c7564a9355bc5d19e3a15d85e4dbf7f3cca5896b", "filename": "src/test/compile-fail/issue-1900.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1900.rs?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -8,5 +8,5 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: main function is not allowed to have type parameters\n+// error-pattern: `main` function is not allowed to have type parameters\n fn main<T>() { }"}, {"sha": "ba9355763f67aca3816b635992ddfffd4f0309e2", "filename": "src/test/ui/error-codes/E0131.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0131.stderr?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -1,8 +1,8 @@\n-error[E0131]: main function is not allowed to have type parameters\n+error[E0131]: `main` function is not allowed to have type parameters\n   --> $DIR/E0131.rs:11:8\n    |\n LL | fn main<T>() {\n-   |        ^^^ main cannot have type parameters\n+   |        ^^^ `main` cannot have type parameters\n \n error: aborting due to previous error\n "}, {"sha": "7b2de775a10cd3371bffd370019f808e974c2fe2", "filename": "src/test/ui/error-codes/E0646.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0646.stderr?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -1,8 +1,8 @@\n-error[E0646]: main function is not allowed to have a where clause\n-  --> $DIR/E0646.rs:11:1\n+error[E0646]: `main` function is not allowed to have a `where` clause\n+  --> $DIR/E0646.rs:11:17\n    |\n LL | fn main() where (): Copy {} //~ ERROR [E0646]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^ `main` cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "afd37a7edf46736029902c667b86ba2031819b0e", "filename": "src/test/ui/error-codes/E0647.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0647.stderr?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -1,10 +1,8 @@\n-error[E0647]: start function is not allowed to have a where clause\n-  --> $DIR/E0647.rs:17:1\n+error[E0647]: start function is not allowed to have a `where` clause\n+  --> $DIR/E0647.rs:17:56\n    |\n-LL | / fn start(_: isize, _: *const *const u8) -> isize where (): Copy { //~ ERROR [E0647]\n-LL | |     0\n-LL | | }\n-   | |_^\n+LL | fn start(_: isize, _: *const *const u8) -> isize where (): Copy { //~ ERROR [E0647]\n+   |                                                        ^^^^^^^^ start function cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "5c92516cbc504b5949bfca056e1d2268c4d3cbc5", "filename": "src/test/ui/issue-50714-1.stderr", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Fissue-50714-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Fissue-50714-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50714-1.stderr?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -1,10 +1,8 @@\n-error[E0647]: start function is not allowed to have a where clause\n-  --> $DIR/issue-50714-1.rs:19:1\n+error[E0647]: start function is not allowed to have a `where` clause\n+  --> $DIR/issue-50714-1.rs:19:56\n    |\n-LL | / fn start(_: isize, _: *const *const u8) -> isize where fn(&()): Eq { //~ ERROR [E0647]\n-LL | |     0\n-LL | | }\n-   | |_^\n+LL | fn start(_: isize, _: *const *const u8) -> isize where fn(&()): Eq { //~ ERROR [E0647]\n+   |                                                        ^^^^^^^^^^^ start function cannot have a `where` clause\n \n error: aborting due to previous error\n "}, {"sha": "e2c99980e1b7e3ca2ebe27fa196e098986810f40", "filename": "src/test/ui/issue-50714.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Fissue-50714.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7942022bf75be46e04ffc7874f705076a16da697/src%2Ftest%2Fui%2Fissue-50714.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-50714.stderr?ref=7942022bf75be46e04ffc7874f705076a16da697", "patch": "@@ -1,8 +1,8 @@\n-error[E0646]: main function is not allowed to have a where clause\n-  --> $DIR/issue-50714.rs:13:1\n+error[E0646]: `main` function is not allowed to have a `where` clause\n+  --> $DIR/issue-50714.rs:13:17\n    |\n LL | fn main() where fn(&()): Eq {} //~ ERROR [E0646]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^^^^^^^^^^ `main` cannot have a `where` clause\n \n error: aborting due to previous error\n "}]}