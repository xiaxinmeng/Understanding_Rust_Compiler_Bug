{"sha": "e3968be331aaf7fa48f2365998ed4d076ddc82c8", "node_id": "C_kwDOAAsO6NoAKGUzOTY4YmUzMzFhYWY3ZmE0OGYyMzY1OTk4ZWQ0ZDA3NmRkYzgyYzg", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2022-11-10T10:06:34Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2023-03-28T15:01:13Z"}, "message": "Add OpenHarmony targets\n\n- `aarch64-unknown-linux-ohos`\n- `armv7-unknown-linux-ohos`", "tree": {"sha": "78f50787f6df1fb7dbcf3009a3fdd25f8f49dbc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f50787f6df1fb7dbcf3009a3fdd25f8f49dbc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3968be331aaf7fa48f2365998ed4d076ddc82c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3968be331aaf7fa48f2365998ed4d076ddc82c8", "html_url": "https://github.com/rust-lang/rust/commit/e3968be331aaf7fa48f2365998ed4d076ddc82c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3968be331aaf7fa48f2365998ed4d076ddc82c8/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd19135b044cd21a9c3ae7ae87620bf41a208066", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd19135b044cd21a9c3ae7ae87620bf41a208066", "html_url": "https://github.com/rust-lang/rust/commit/dd19135b044cd21a9c3ae7ae87620bf41a208066"}], "stats": {"total": 245, "additions": 238, "deletions": 7}, "files": [{"sha": "014e6ee71c76b1977d60318df370df18177103c2", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -868,9 +868,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.87\"\n+version = \"0.1.89\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f867ce54c09855ccd135ad4a50c777182a0c7af5ff20a8f537617bd648b10d50\"\n+checksum = \"9fc9c2080d347a2c316518840ac9194644a9993dfa1e9778ef38979a339f5d8b\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\",\n@@ -2879,9 +2879,9 @@ checksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.139\"\n+version = \"0.2.140\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"201de327520df007757c1f0adce6e827fe8562fbc28bfd9c15571c66ca1f5f79\"\n+checksum = \"99227334921fae1a979cf0bfdfcc6b3e5ce376ef57e16fb6fb3ea2ed6095f80c\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]"}, {"sha": "fb563f70ed090e2fc546ae09edfbf2353b9a52f6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -214,6 +214,8 @@ pub fn target_machine_factory(\n \n     let path_mapping = sess.source_map().path_mapping().clone();\n \n+    let force_emulated_tls = sess.target.force_emulated_tls;\n+\n     Arc::new(move |config: TargetMachineFactoryConfig| {\n         let split_dwarf_file =\n             path_mapping.map_prefix(config.split_dwarf_file.unwrap_or_default()).0;\n@@ -239,6 +241,7 @@ pub fn target_machine_factory(\n                 relax_elf_relocations,\n                 use_init_array,\n                 split_dwarf_file.as_ptr(),\n+                force_emulated_tls,\n             )\n         };\n "}, {"sha": "0d63e634ad888bafdd0dd95dec36b9a32683e792", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -2257,6 +2257,7 @@ extern \"C\" {\n         RelaxELFRelocations: bool,\n         UseInitArray: bool,\n         SplitDwarfFile: *const c_char,\n+        ForceEmulatedTls: bool,\n     ) -> Option<&'static mut TargetMachine>;\n     pub fn LLVMRustDisposeTargetMachine(T: &'static mut TargetMachine);\n     pub fn LLVMRustAddLibraryInfo<'a>("}, {"sha": "329e7329b11a54946a21103a925532d2ef7f5529", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -368,7 +368,8 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n     bool EmitStackSizeSection,\n     bool RelaxELFRelocations,\n     bool UseInitArray,\n-    const char *SplitDwarfFile) {\n+    const char *SplitDwarfFile,\n+    bool ForceEmulatedTls) {\n \n   auto OptLevel = fromRust(RustOptLevel);\n   auto RM = fromRust(RustReloc);\n@@ -400,6 +401,10 @@ extern \"C\" LLVMTargetMachineRef LLVMRustCreateTargetMachine(\n   }\n   Options.RelaxELFRelocations = RelaxELFRelocations;\n   Options.UseInitArray = UseInitArray;\n+  if (ForceEmulatedTls) {\n+    Options.ExplicitEmulatedTLS = true;\n+    Options.EmulatedTLS = true;\n+  }\n \n   if (TrapUnreachable) {\n     // Tell LLVM to codegen `unreachable` into an explicit trap instruction."}, {"sha": "0a5e654cf0d03d981fd699f76b4750286101fff1", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_linux_ohos.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_linux_ohos.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -0,0 +1,31 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+use super::SanitizerSet;\n+\n+pub fn target() -> Target {\n+    let mut base = super::linux_musl_base::opts();\n+    base.env = \"ohos\".into();\n+    base.crt_static_default = false;\n+    base.max_atomic_width = Some(128);\n+\n+    Target {\n+        // LLVM 15 doesn't support OpenHarmony yet, use a linux target instead.\n+        llvm_target: \"aarch64-unknown-linux-musl\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128\".into(),\n+        arch: \"aarch64\".into(),\n+        options: TargetOptions {\n+            features: \"+reserve-x18\".into(),\n+            mcount: \"\\u{1}_mcount\".into(),\n+            force_emulated_tls: true,\n+            supported_sanitizers: SanitizerSet::ADDRESS\n+                | SanitizerSet::CFI\n+                | SanitizerSet::LEAK\n+                | SanitizerSet::MEMORY\n+                | SanitizerSet::MEMTAG\n+                | SanitizerSet::THREAD\n+                | SanitizerSet::HWADDRESS,\n+            ..base\n+        },\n+    }\n+}"}, {"sha": "a64f3a4f0493e46607c4c871553e1926a67f2a36", "filename": "compiler/rustc_target/src/spec/armv7_unknown_linux_ohos.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_unknown_linux_ohos.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -0,0 +1,27 @@\n+use crate::spec::{Target, TargetOptions};\n+\n+// This target is for OpenHarmony on ARMv7 Linux with thumb-mode, but no NEON or\n+// hardfloat.\n+\n+pub fn target() -> Target {\n+    // Most of these settings are copied from the armv7_unknown_linux_musleabi\n+    // target.\n+    Target {\n+        // LLVM 15 doesn't support OpenHarmony yet, use a linux target instead.\n+        llvm_target: \"armv7-unknown-linux-gnueabi\".into(),\n+        pointer_width: 32,\n+        data_layout: \"e-m:e-p:32:32-Fi8-i64:64-v128:64:128-a:0:32-n32-S64\".into(),\n+        arch: \"arm\".into(),\n+\n+        options: TargetOptions {\n+            abi: \"eabi\".into(),\n+            features: \"+v7,+thumb2,+soft-float,-neon\".into(),\n+            max_atomic_width: Some(64),\n+            env: \"ohos\".into(),\n+            crt_static_default: false,\n+            mcount: \"\\u{1}mcount\".into(),\n+            force_emulated_tls: true,\n+            ..super::linux_musl_base::opts()\n+        },\n+    }\n+}"}, {"sha": "c40284cbf44748a8f67d96d2a8ee7b247bb50287", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -1261,6 +1261,9 @@ supported_targets! {\n \n     (\"aarch64-unknown-nto-qnx710\", aarch64_unknown_nto_qnx_710),\n     (\"x86_64-pc-nto-qnx710\", x86_64_pc_nto_qnx710),\n+\n+    (\"aarch64-unknown-linux-ohos\", aarch64_unknown_linux_ohos),\n+    (\"armv7-unknown-linux-ohos\", armv7_unknown_linux_ohos),\n }\n \n /// Cow-Vec-Str: Cow<'static, [Cow<'static, str>]>\n@@ -1734,6 +1737,9 @@ pub struct TargetOptions {\n \n     /// Whether the target supports XRay instrumentation.\n     pub supports_xray: bool,\n+\n+    /// Forces the use of emulated TLS (__emutls_get_address)\n+    pub force_emulated_tls: bool,\n }\n \n /// Add arguments for the given flavor and also for its \"twin\" flavors\n@@ -1954,6 +1960,7 @@ impl Default for TargetOptions {\n             entry_name: \"main\".into(),\n             entry_abi: Conv::C,\n             supports_xray: false,\n+            force_emulated_tls: false,\n         }\n     }\n }\n@@ -2605,6 +2612,7 @@ impl Target {\n         key!(entry_name);\n         key!(entry_abi, Conv)?;\n         key!(supports_xray, bool);\n+        key!(force_emulated_tls, bool);\n \n         if base.is_builtin {\n             // This can cause unfortunate ICEs later down the line.\n@@ -2859,6 +2867,7 @@ impl ToJson for Target {\n         target_option_val!(entry_name);\n         target_option_val!(entry_abi);\n         target_option_val!(supports_xray);\n+        target_option_val!(force_emulated_tls);\n \n         if let Some(abi) = self.default_adjusted_cabi {\n             d.insert(\"default-adjusted-cabi\".into(), Abi::name(abi).to_json());"}, {"sha": "6345db240548de85daf9414b65427cf13f8787bb", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -15,7 +15,7 @@ cfg-if = { version = \"1.0\", features = ['rustc-dep-of-std'] }\n panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n-libc = { version = \"0.2.139\", default-features = false, features = ['rustc-dep-of-std'] }\n+libc = { version = \"0.2.140\", default-features = false, features = ['rustc-dep-of-std'] }\n compiler_builtins = { version = \"0.1.87\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }"}, {"sha": "1c44058aff79d3f18a0d6b04d2a71e16f192d5af", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -115,7 +115,10 @@ pub fn set_errno(e: i32) {\n /// Gets a detailed string description for the given error number.\n pub fn error_string(errno: i32) -> String {\n     extern \"C\" {\n-        #[cfg_attr(any(target_os = \"linux\", target_env = \"newlib\"), link_name = \"__xpg_strerror_r\")]\n+        #[cfg_attr(\n+            all(any(target_os = \"linux\", target_env = \"newlib\"), not(target_env = \"ohos\")),\n+            link_name = \"__xpg_strerror_r\"\n+        )]\n         fn strerror_r(errnum: c_int, buf: *mut c_char, buflen: libc::size_t) -> c_int;\n     }\n "}, {"sha": "b655bae96737246579e8d4d2a3add93d4a99cd2d", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -54,6 +54,22 @@ cfg_if::cfg_if! {\n     }\n }\n \n+// This is the same as musl except that we default to using the system libunwind\n+// instead of libgcc.\n+#[cfg(target_env = \"ohos\")]\n+cfg_if::cfg_if! {\n+    if #[cfg(all(feature = \"llvm-libunwind\", feature = \"system-llvm-libunwind\"))] {\n+        compile_error!(\"`llvm-libunwind` and `system-llvm-libunwind` cannot be enabled at the same time\");\n+    } else if #[cfg(feature = \"llvm-libunwind\")] {\n+        #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\")]\n+        extern \"C\" {}\n+    } else {\n+        #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\", cfg(target_feature = \"crt-static\"))]\n+        #[link(name = \"unwind\", cfg(not(target_feature = \"crt-static\")))]\n+        extern \"C\" {}\n+    }\n+}\n+\n #[cfg(target_os = \"android\")]\n cfg_if::cfg_if! {\n     if #[cfg(feature = \"llvm-libunwind\")] {"}, {"sha": "f981b5d5da84353e942b74926d9be0579d3c667e", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -149,6 +149,8 @@ const EXTRA_CHECK_CFGS: &[(Option<Mode>, &'static str, Option<&[&'static str]>)]\n     // Needed to avoid the need to copy windows.lib into the sysroot.\n     (Some(Mode::Rustc), \"windows_raw_dylib\", None),\n     (Some(Mode::ToolRustc), \"windows_raw_dylib\", None),\n+    // #[cfg(bootstrap)] ohos\n+    (Some(Mode::Std), \"target_env\", Some(&[\"ohos\"])),\n ];\n \n /// A structure representing a Rust compiler."}, {"sha": "a22f0f04b2e01b89c892ebfe96640d694d6d3a91", "filename": "src/bootstrap/llvm.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fbootstrap%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fbootstrap%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fllvm.rs?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -1008,6 +1008,9 @@ fn supported_sanitizers(\n         \"aarch64-unknown-linux-gnu\" => {\n             common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n         }\n+        \"aarch64-unknown-linux-ohos\" => {\n+            common_libs(\"linux\", \"aarch64\", &[\"asan\", \"lsan\", \"msan\", \"tsan\", \"hwasan\"])\n+        }\n         \"x86_64-apple-darwin\" => darwin_libs(\"osx\", &[\"asan\", \"lsan\", \"tsan\"]),\n         \"x86_64-unknown-fuchsia\" => common_libs(\"fuchsia\", \"x86_64\", &[\"asan\"]),\n         \"x86_64-apple-ios\" => darwin_libs(\"iossim\", &[\"asan\", \"tsan\"]),"}, {"sha": "0452126cc3782cff0a89c8a8b6a9487f5dc743a9", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -26,6 +26,7 @@\n     - [armv7-unknown-linux-uclibceabi](platform-support/armv7-unknown-linux-uclibceabi.md)\n     - [armv7-unknown-linux-uclibceabihf](platform-support/armv7-unknown-linux-uclibceabihf.md)\n     - [\\*-android and \\*-androideabi](platform-support/android.md)\n+    - [\\*-linux-ohos](platform-support/openharmony.md)\n     - [\\*-unknown-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)"}, {"sha": "5c18a38ddab94d04cfb67189fd5a62b8ab13305f", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -218,6 +218,7 @@ target | std | host | notes\n [`aarch64-kmc-solid_asp3`](platform-support/kmc-solid.md) | \u2713 |  | ARM64 SOLID with TOPPERS/ASP3\n [`aarch64-nintendo-switch-freestanding`](platform-support/aarch64-nintendo-switch-freestanding.md) | * |  | ARM64 Nintendo Switch, Horizon\n [`aarch64-pc-windows-gnullvm`](platform-support/pc-windows-gnullvm.md) | \u2713 | \u2713 |\n+[`aarch64-unknown-linux-ohos`](platform-support/openharmony.md) | \u2713 |  | ARM64 OpenHarmony |\n [`aarch64-unknown-nto-qnx710`](platform-support/nto-qnx.md) | \u2713 |  | ARM64 QNX Neutrino 7.1 RTOS |\n `aarch64-unknown-freebsd` | \u2713 | \u2713 | ARM64 FreeBSD\n `aarch64-unknown-hermit` | \u2713 |  | ARM64 HermitCore\n@@ -240,6 +241,7 @@ target | std | host | notes\n [`armv6k-nintendo-3ds`](platform-support/armv6k-nintendo-3ds.md) | ? |  | ARMv6K Nintendo 3DS, Horizon (Requires devkitARM toolchain)\n `armv7-apple-ios` | \u2713 |  | ARMv7 iOS, Cortex-a8\n [`armv7-sony-vita-newlibeabihf`](platform-support/armv7-sony-vita-newlibeabihf.md) | ? |  | ARM Cortex-A9 Sony PlayStation Vita (requires VITASDK toolchain)\n+[`armv7-unknown-linux-ohos`](platform-support/openharmony.md) | \u2713 |  | ARMv7 OpenHarmony |\n [`armv7-unknown-linux-uclibceabi`](platform-support/armv7-unknown-linux-uclibceabi.md) | \u2713 | \u2713 | ARMv7 Linux with uClibc, softfloat\n [`armv7-unknown-linux-uclibceabihf`](platform-support/armv7-unknown-linux-uclibceabihf.md) | \u2713 | ? | ARMv7 Linux with uClibc, hardfloat\n `armv7-unknown-freebsd` | \u2713 | \u2713 | ARMv7 FreeBSD"}, {"sha": "aa4debfd45a33640416e8d93db93476476bd3578", "filename": "src/doc/rustc/src/platform-support/openharmony.md", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md", "raw_url": "https://github.com/rust-lang/rust/raw/e3968be331aaf7fa48f2365998ed4d076ddc82c8/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Fopenharmony.md?ref=e3968be331aaf7fa48f2365998ed4d076ddc82c8", "patch": "@@ -0,0 +1,128 @@\n+# `*-linux-ohos*`\n+\n+**Tier: 3**\n+\n+Targets for the [OpenHarmony](https://gitee.com/openharmony/docs/) operating\n+system.\n+\n+## Target maintainers\n+\n+- Amanieu d'Antras ([@Amanieu](https://github.com/Amanieu))\n+\n+## Setup\n+\n+The OpenHarmony SDK doesn't currently support Rust compilation directly, so\n+some setup is required.\n+\n+First, you must obtain the OpenHarmony SDK from [this page](https://gitee.com/openharmony/docs/tree/master/en/release-notes).\n+Select the version of OpenHarmony you are developing for and download the \"Public SDK package for the standard system\".\n+\n+Create the following shell scripts that wrap Clang from the OpenHarmony SDK:\n+\n+`aarch64-unknown-linux-ohos-clang.sh`\n+\n+```sh\n+#!/bin/sh\n+exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \\\n+  -target aarch64-linux-ohos \\\n+  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \\\n+  -D__MUSL__ \\\n+  \"$@\"\n+```\n+\n+`aarch64-unknown-linux-ohos-clang++.sh`\n+\n+```sh\n+#!/bin/sh\n+exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \\\n+  -target aarch64-linux-ohos \\\n+  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \\\n+  -D__MUSL__ \\\n+  \"$@\"\n+```\n+\n+`armv7-unknown-linux-ohos-clang.sh`\n+\n+```sh\n+#!/bin/sh\n+exec /path/to/ohos-sdk/linux/native/llvm/bin/clang \\\n+  -target arm-linux-ohos \\\n+  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \\\n+  -D__MUSL__ \\\n+  -march=armv7-a \\\n+  -mfloat-abi=softfp \\\n+  -mtune=generic-armv7-a \\\n+  -mthumb \\\n+  \"$@\"\n+```\n+\n+`armv7-unknown-linux-ohos-clang++.sh`\n+\n+```sh\n+#!/bin/sh\n+exec /path/to/ohos-sdk/linux/native/llvm/bin/clang++ \\\n+  -target arm-linux-ohos \\\n+  --sysroot=/path/to/ohos-sdk/linux/native/sysroot \\\n+  -D__MUSL__ \\\n+  -march=armv7-a \\\n+  -mfloat-abi=softfp \\\n+  -mtune=generic-armv7-a \\\n+  -mthumb \\\n+  \"$@\"\n+```\n+\n+Future versions of the OpenHarmony SDK will avoid the need for this process.\n+\n+## Building the target\n+\n+To build a rust toolchain, create a `config.toml` with the following contents:\n+\n+```toml\n+profile = \"compiler\"\n+changelog-seen = 2\n+\n+[build]\n+sanitizers = true\n+profiler = true\n+\n+[target.aarch64-unknown-linux-ohos]\n+cc = \"/path/to/aarch64-unknown-linux-ohos-clang.sh\"\n+cxx = \"/path/to/aarch64-unknown-linux-ohos-clang++.sh\"\n+ar = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar\"\n+ranlib = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib\"\n+linker  = \"/path/to/aarch64-unknown-linux-ohos-clang.sh\"\n+\n+[target.armv7-unknown-linux-ohos]\n+cc = \"/path/to/armv7-unknown-linux-ohos-clang.sh\"\n+cxx = \"/path/to/armv7-unknown-linux-ohos-clang++.sh\"\n+ar = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar\"\n+ranlib = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ranlib\"\n+linker  = \"/path/to/armv7-unknown-linux-ohos-clang.sh\"\n+```\n+\n+## Building Rust programs\n+\n+Rust does not yet ship pre-compiled artifacts for this target. To compile for\n+this target, you will either need to build Rust with the target enabled (see\n+\"Building the target\" above), or build your own copy of `core` by using\n+`build-std` or similar.\n+\n+You will need to configure the linker to use in `~/.cargo/config`:\n+```toml\n+[target.aarch64-unknown-linux-ohos]\n+ar = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar\"\n+linker = \"/path/to/aarch64-unknown-linux-ohos-clang.sh\"\n+\n+[target.armv7-unknown-linux-ohos]\n+ar = \"/path/to/ohos-sdk/linux/native/llvm/bin/llvm-ar\"\n+linker = \"/path/to/armv7-unknown-linux-ohos-clang.sh\"\n+```\n+\n+## Testing\n+\n+Running the Rust testsuite is possible, but currently difficult due to the way\n+the OpenHarmony emulator is set up (no networking).\n+\n+## Cross-compilation toolchains and C code\n+\n+You can use the shell scripts above to compile C code for the target."}]}