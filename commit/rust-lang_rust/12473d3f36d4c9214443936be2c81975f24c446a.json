{"sha": "12473d3f36d4c9214443936be2c81975f24c446a", "node_id": "C_kwDOAAsO6NoAKDEyNDczZDNmMzZkNGM5MjE0NDQzOTM2YmUyYzgxOTc1ZjI0YzQ0NmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-04T10:22:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-12-04T10:33:07Z"}, "message": "Use parent function WfCheckingContext to check RPITIT.", "tree": {"sha": "1dd5ccc397c4691a192fe046c6ff2e9237643f88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd5ccc397c4691a192fe046c6ff2e9237643f88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12473d3f36d4c9214443936be2c81975f24c446a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12473d3f36d4c9214443936be2c81975f24c446a", "html_url": "https://github.com/rust-lang/rust/commit/12473d3f36d4c9214443936be2c81975f24c446a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12473d3f36d4c9214443936be2c81975f24c446a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "html_url": "https://github.com/rust-lang/rust/commit/cab4fd678c5b148a330f2bf255bf28a67dfea0fc"}], "stats": {"total": 138, "additions": 63, "deletions": 75}, "files": [{"sha": "b065ace6bf5e15f826f54eecaa60c0b918be0e7c", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -1544,7 +1544,7 @@ fn check_fn_or_method<'tcx>(\n     check_where_clauses(wfcx, span, def_id);\n \n     check_return_position_impl_trait_in_trait_bounds(\n-        tcx,\n+        wfcx,\n         def_id,\n         sig.output(),\n         hir_decl.output.span(),\n@@ -1580,13 +1580,14 @@ fn check_fn_or_method<'tcx>(\n \n /// Basically `check_associated_type_bounds`, but separated for now and should be\n /// deduplicated when RPITITs get lowered into real associated items.\n-#[tracing::instrument(level = \"trace\", skip(tcx))]\n+#[tracing::instrument(level = \"trace\", skip(wfcx))]\n fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n+    wfcx: &WfCheckingCtxt<'_, 'tcx>,\n     fn_def_id: LocalDefId,\n     fn_output: Ty<'tcx>,\n     span: Span,\n ) {\n+    let tcx = wfcx.tcx();\n     if let Some(assoc_item) = tcx.opt_associated_item(fn_def_id.to_def_id())\n         && assoc_item.container == ty::AssocItemContainer::TraitContainer\n     {\n@@ -1596,22 +1597,20 @@ fn check_return_position_impl_trait_in_trait_bounds<'tcx>(\n                 && tcx.def_kind(proj.item_def_id) == DefKind::ImplTraitPlaceholder\n                 && tcx.impl_trait_in_trait_parent(proj.item_def_id) == fn_def_id.to_def_id()\n             {\n-                // Create a new context, since we want the opaque's ParamEnv and not the parent's.\n                 let span = tcx.def_span(proj.item_def_id);\n-                enter_wf_checking_ctxt(tcx, span, proj.item_def_id.expect_local(), |wfcx| {\n-                    let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n-                    let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n-                        let normalized_bound = wfcx.normalize(span, None, bound);\n-                        traits::wf::predicate_obligations(\n-                            wfcx.infcx,\n-                            wfcx.param_env,\n-                            wfcx.body_id,\n-                            normalized_bound,\n-                            bound_span,\n-                        )\n-                    });\n-                    wfcx.register_obligations(wf_obligations);\n+                let bounds = wfcx.tcx().explicit_item_bounds(proj.item_def_id);\n+                let wf_obligations = bounds.iter().flat_map(|&(bound, bound_span)| {\n+                    let bound = ty::EarlyBinder(bound).subst(tcx, proj.substs);\n+                    let normalized_bound = wfcx.normalize(span, None, bound);\n+                    traits::wf::predicate_obligations(\n+                        wfcx.infcx,\n+                        wfcx.param_env,\n+                        wfcx.body_id,\n+                        normalized_bound,\n+                        bound_span,\n+                    )\n                 });\n+                wfcx.register_obligations(wf_obligations);\n             }\n         }\n     }"}, {"sha": "f1f0d7e5907d3277fb4d611d58674e0c8566969a", "filename": "src/test/ui/async-await/in-trait/async-generics-and-bounds.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics-and-bounds.stderr?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -4,11 +4,11 @@ error[E0311]: the parameter type `U` may not live long enough\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n-note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n   --> $DIR/async-generics-and-bounds.rs:12:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n-   |                  ^\n+   |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n   --> $DIR/async-generics-and-bounds.rs:12:28\n    |\n@@ -21,11 +21,11 @@ error[E0311]: the parameter type `T` may not live long enough\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n    |                            ^^^^^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n   --> $DIR/async-generics-and-bounds.rs:12:18\n    |\n LL |     async fn foo(&self) -> &(T, U) where T: Debug + Sized, U: Hash;\n-   |                  ^\n+   |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n   --> $DIR/async-generics-and-bounds.rs:12:28\n    |"}, {"sha": "2f05564564cd2b383510547b3241c84cce117c43", "filename": "src/test/ui/async-await/in-trait/async-generics.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-generics.stderr?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -4,11 +4,11 @@ error[E0311]: the parameter type `U` may not live long enough\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n-note: the parameter type `U` must be valid for the anonymous lifetime as defined here...\n+note: the parameter type `U` must be valid for the anonymous lifetime defined here...\n   --> $DIR/async-generics.rs:9:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n-   |                  ^\n+   |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n   --> $DIR/async-generics.rs:9:28\n    |\n@@ -21,11 +21,11 @@ error[E0311]: the parameter type `T` may not live long enough\n LL |     async fn foo(&self) -> &(T, U);\n    |                            ^^^^^^^\n    |\n-note: the parameter type `T` must be valid for the anonymous lifetime as defined here...\n+note: the parameter type `T` must be valid for the anonymous lifetime defined here...\n   --> $DIR/async-generics.rs:9:18\n    |\n LL |     async fn foo(&self) -> &(T, U);\n-   |                  ^\n+   |                  ^^^^^\n note: ...so that the reference type `&(T, U)` does not outlive the data it points at\n   --> $DIR/async-generics.rs:9:28\n    |"}, {"sha": "d5481d277e40a5955a74d93de96c3b0a13816480", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.rs?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -1,5 +1,4 @@\n-// check-fail\n-// known-bug: #102682\n+// check-pass\n // edition: 2021\n \n #![feature(async_fn_in_trait)]"}, {"sha": "0f02420274333badbcbc3d84b3c0fd159a8bdcd6", "filename": "src/test/ui/async-await/in-trait/async-lifetimes-and-bounds.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cab4fd678c5b148a330f2bf255bf28a67dfea0fc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab4fd678c5b148a330f2bf255bf28a67dfea0fc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes-and-bounds.stderr?ref=cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "patch": "@@ -1,23 +0,0 @@\n-error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n-   |\n-LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n-   |                                           ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Self: 'a`...\n-   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/async-lifetimes-and-bounds.rs:11:43\n-   |\n-LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T) where T: Debug + Sized;\n-   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | trait MyTrait<'a, 'b, T: 'b> {\n-   |                        ++++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "f298e45d2390b368dc7391a7b1989de9ab096f13", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.rs?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -1,5 +1,4 @@\n-// check-fail\n-// known-bug: #102682\n+// check-pass\n // edition: 2021\n \n #![feature(async_fn_in_trait)]"}, {"sha": "9a7d294bb17669f6de727d113abcc4c78903e990", "filename": "src/test/ui/async-await/in-trait/async-lifetimes.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cab4fd678c5b148a330f2bf255bf28a67dfea0fc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cab4fd678c5b148a330f2bf255bf28a67dfea0fc/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fasync-lifetimes.stderr?ref=cab4fd678c5b148a330f2bf255bf28a67dfea0fc", "patch": "@@ -1,23 +0,0 @@\n-error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/async-lifetimes.rs:9:43\n-   |\n-LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n-   |                                           ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Self: 'a`...\n-   = note: ...so that the reference type `&'a Self` does not outlive the data it points at\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/async-lifetimes.rs:9:43\n-   |\n-LL |     async fn foo(&'a self, key: &'b T) -> (&'a Self, &'b T);\n-   |                                           ^^^^^^^^^^^^^^^^^ ...so that the reference type `&'b T` does not outlive the data it points at\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | trait MyTrait<'a, 'b, T: 'b> {\n-   |                        ++++\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "52bceb3cc5cd61c3fd39062d347369d885498009", "filename": "src/test/ui/async-await/in-trait/implied-bounds.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fin-trait%2Fimplied-bounds.rs?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(async_fn_in_trait)]\n+#![allow(incomplete_features)]\n+\n+trait TcpStack {\n+    type Connection<'a>: Sized where Self: 'a;\n+    fn connect<'a>(&'a self) -> Self::Connection<'a>;\n+    async fn async_connect<'a>(&'a self) -> Self::Connection<'a>;\n+}\n+\n+fn main() {}"}, {"sha": "87bac519cf304868600d7e479c64ac7240b1047a", "filename": "src/test/ui/impl-trait/in-trait/where-clause.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12473d3f36d4c9214443936be2c81975f24c446a/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fwhere-clause.rs?ref=12473d3f36d4c9214443936be2c81975f24c446a", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// edition: 2021\n+\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Debug;\n+\n+trait Foo<Item> {\n+    fn foo<'a>(&'a self) -> impl Debug\n+    where\n+        Item: 'a;\n+}\n+\n+impl<Item, D: Debug + Clone> Foo<Item> for D {\n+    fn foo<'a>(&'a self) -> impl Debug\n+    where\n+        Item: 'a,\n+    {\n+        self.clone()\n+    }\n+}\n+\n+fn main() {}"}]}