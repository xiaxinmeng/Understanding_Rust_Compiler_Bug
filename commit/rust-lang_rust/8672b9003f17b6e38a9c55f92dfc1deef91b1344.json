{"sha": "8672b9003f17b6e38a9c55f92dfc1deef91b1344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2NzJiOTAwM2YxN2I2ZTM4YTljNTVmOTJkZmMxZGVlZjkxYjEzNDQ=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-09-12T00:25:21Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-09-12T00:25:21Z"}, "message": "Merge pull request #3440 from jld/vec-dedup\n\nAdd vec::dedup for in-place consecutive duplicate element removal.", "tree": {"sha": "aa19313097845175139ac98fd5cf35c8b0a29293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa19313097845175139ac98fd5cf35c8b0a29293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8672b9003f17b6e38a9c55f92dfc1deef91b1344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8672b9003f17b6e38a9c55f92dfc1deef91b1344", "html_url": "https://github.com/rust-lang/rust/commit/8672b9003f17b6e38a9c55f92dfc1deef91b1344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8672b9003f17b6e38a9c55f92dfc1deef91b1344/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85768d18ee8d893cac61b61e0801d5c6f1c4b536", "url": "https://api.github.com/repos/rust-lang/rust/commits/85768d18ee8d893cac61b61e0801d5c6f1c4b536", "html_url": "https://github.com/rust-lang/rust/commit/85768d18ee8d893cac61b61e0801d5c6f1c4b536"}, {"sha": "4ea45669b8d5b7017acd5555163e2a15e85da46c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea45669b8d5b7017acd5555163e2a15e85da46c", "html_url": "https://github.com/rust-lang/rust/commit/4ea45669b8d5b7017acd5555163e2a15e85da46c"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "b4985389e250607ce1607d737ccfa3bfd6c829f1", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8672b9003f17b6e38a9c55f92dfc1deef91b1344/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8672b9003f17b6e38a9c55f92dfc1deef91b1344/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=8672b9003f17b6e38a9c55f92dfc1deef91b1344", "patch": "@@ -43,6 +43,7 @@ export grow;\n export grow_fn;\n export grow_set;\n export truncate;\n+export dedup;\n export map;\n export mapi;\n export map2;\n@@ -625,6 +626,41 @@ fn truncate<T>(&v: ~[const T], newlen: uint) {\n     }\n }\n \n+/**\n+ * Remove consecutive repeated elements from a vector; if the vector is\n+ * sorted, this removes all duplicates.\n+ */\n+fn dedup<T: Eq>(&v: ~[const T]) unsafe {\n+    if v.len() < 1 { return; }\n+    let mut last_written = 0, next_to_read = 1;\n+    do as_const_buf(v) |p, ln| {\n+        // We have a mutable reference to v, so we can make arbitrary changes.\n+        // (cf. push and pop)\n+        let p = p as *mut T;\n+        // last_written < next_to_read <= ln\n+        while next_to_read < ln {\n+            // last_written < next_to_read < ln\n+            if *ptr::mut_offset(p, next_to_read) ==\n+                *ptr::mut_offset(p, last_written) {\n+                let _dropped <- *ptr::mut_offset(p, next_to_read);\n+            } else {\n+                last_written += 1;\n+                // last_written <= next_to_read < ln\n+                if next_to_read != last_written {\n+                    *ptr::mut_offset(p, last_written) <-\n+                        *ptr::mut_offset(p, next_to_read);\n+                }\n+            }\n+            // last_written <= next_to_read < ln\n+            next_to_read += 1;\n+            // last_written < next_to_read <= ln\n+        }\n+    }\n+    // last_written < next_to_read == ln\n+    unsafe::set_len(v, last_written + 1);\n+}\n+\n+\n // Appending\n #[inline(always)]\n pure fn append<T: Copy>(+lhs: ~[T], rhs: &[const T]) -> ~[T] {\n@@ -2218,6 +2254,51 @@ mod tests {\n         // If the unsafe block didn't drop things properly, we blow up here.\n     }\n \n+    #[test]\n+    fn test_dedup() {\n+        fn case(-a: ~[uint], -b: ~[uint]) {\n+            let mut v = a;\n+            dedup(v);\n+            assert(v == b);\n+        }\n+        case(~[], ~[]);\n+        case(~[1], ~[1]);\n+        case(~[1,1], ~[1]);\n+        case(~[1,2,3], ~[1,2,3]);\n+        case(~[1,1,2,3], ~[1,2,3]);\n+        case(~[1,2,2,3], ~[1,2,3]);\n+        case(~[1,2,3,3], ~[1,2,3]);\n+        case(~[1,1,2,2,2,3,3], ~[1,2,3]);\n+    }\n+\n+    #[test]\n+    fn test_dedup_unique() {\n+        let mut v0 = ~[~1, ~1, ~2, ~3];\n+        dedup(v0);\n+        let mut v1 = ~[~1, ~2, ~2, ~3];\n+        dedup(v1);\n+        let mut v2 = ~[~1, ~2, ~3, ~3];\n+        dedup(v2);\n+        /*\n+         * If the ~pointers were leaked or otherwise misused, valgrind and/or\n+         * rustrt should raise errors.\n+         */\n+    }\n+\n+    #[test]\n+    fn test_dedup_shared() {\n+        let mut v0 = ~[@1, @1, @2, @3];\n+        dedup(v0);\n+        let mut v1 = ~[@1, @2, @2, @3];\n+        dedup(v1);\n+        let mut v2 = ~[@1, @2, @3, @3];\n+        dedup(v2);\n+        /*\n+         * If the @pointers were leaked or otherwise misused, valgrind and/or\n+         * rustrt should raise errors.\n+         */\n+    }\n+\n     #[test]\n     fn test_map() {\n         // Test on-stack map."}]}