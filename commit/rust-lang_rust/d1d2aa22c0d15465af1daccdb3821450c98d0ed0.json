{"sha": "d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxZDJhYTIyYzBkMTU0NjVhZjFkYWNjZGIzODIxNDUwYzk4ZDBlZDA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-10-23T16:06:11Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2018-11-10T00:10:07Z"}, "message": "reduce list to functions callable in const ctx.", "tree": {"sha": "18c62f427f6e1efd2edd878b565fcfd1e2897c5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18c62f427f6e1efd2edd878b565fcfd1e2897c5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "html_url": "https://github.com/rust-lang/rust/commit/d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53fe6294170e5f872877e87c1b05795b2b4d11d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fe6294170e5f872877e87c1b05795b2b4d11d1", "html_url": "https://github.com/rust-lang/rust/commit/53fe6294170e5f872877e87c1b05795b2b4d11d1"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "24c8fd3a969ca3e1bde035f6531cf3c6456d7bb2", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -2074,7 +2074,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert_eq!(a.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.length\n     }\n \n@@ -2093,7 +2093,7 @@ impl<K, V> BTreeMap<K, V> {\n     /// assert!(!a.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n }"}, {"sha": "af9a7074e4a4f96d9916ae126ac8f936879cf2e2", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -730,7 +730,7 @@ impl<T> BTreeSet<T> {\n     /// assert_eq!(v.len(), 1);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.map.len()\n     }\n \n@@ -747,7 +747,7 @@ impl<T> BTreeSet<T> {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n }"}, {"sha": "e0ae7561d45530d019c15bf42e54497e8588117c", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -933,7 +933,7 @@ impl<T> VecDeque<T> {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.tail == self.head\n     }\n "}, {"sha": "5c776292f53d7a86a49f0c1dcedf80d4dd261097", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -1374,7 +1374,7 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.vec.len()\n     }\n \n@@ -1395,7 +1395,7 @@ impl String {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n \n@@ -1662,7 +1662,7 @@ impl FromUtf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn utf8_error(&self) -> Utf8Error {\n+    pub fn utf8_error(&self) -> Utf8Error {\n         self.error\n     }\n }"}, {"sha": "f7a0bbdceafc93325359fbb83a51b413548db0da", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -1165,7 +1165,7 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn len(&self) -> usize {\n+    pub fn len(&self) -> usize {\n         self.len\n     }\n \n@@ -1181,7 +1181,7 @@ impl<T> Vec<T> {\n     /// assert!(!v.is_empty());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn is_empty(&self) -> bool {\n+    pub fn is_empty(&self) -> bool {\n         self.len() == 0\n     }\n "}, {"sha": "045fabca2688efaa0c2cdeff43112618316f4568", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -116,7 +116,7 @@ impl Layout {\n     /// The minimum size in bytes for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]\n     #[inline]\n-    pub const fn size(&self) -> usize { self.size_ }\n+    pub fn size(&self) -> usize { self.size_ }\n \n     /// The minimum byte alignment for a memory block of this layout.\n     #[stable(feature = \"alloc_layout\", since = \"1.28.0\")]"}, {"sha": "cc52f048b891b578f258dd47bf2f4b03de2d5f93", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -130,7 +130,7 @@ impl<I: Iterator<Item = u16>> Iterator for DecodeUtf16<I> {\n impl DecodeUtf16Error {\n     /// Returns the unpaired surrogate which caused this error.\n     #[stable(feature = \"decode_utf16\", since = \"1.9.0\")]\n-    pub const fn unpaired_surrogate(&self) -> u16 {\n+    pub fn unpaired_surrogate(&self) -> u16 {\n         self.code\n     }\n }"}, {"sha": "4fde4e79ee20d56b37c9ede63495b4cbd17c154a", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -341,7 +341,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)] #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub const fn new_v1(pieces: &'a [&'a str],\n+    pub fn new_v1(pieces: &'a [&'a str],\n                   args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments {\n             pieces,\n@@ -359,7 +359,7 @@ impl<'a> Arguments<'a> {\n     #[doc(hidden)] #[inline]\n     #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\",\n                issue = \"0\")]\n-    pub const fn new_v1_formatted(pieces: &'a [&'a str],\n+    pub fn new_v1_formatted(pieces: &'a [&'a str],\n                             args: &'a [ArgumentV1<'a>],\n                             fmt: &'a [rt::v1::Argument]) -> Arguments<'a> {\n         Arguments {\n@@ -1492,7 +1492,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:t>6}\", Foo), \"tttttt\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn fill(&self) -> char { self.fill }\n+    pub fn fill(&self) -> char { self.fill }\n \n     /// Flag indicating what form of alignment was requested.\n     ///\n@@ -1562,7 +1562,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn width(&self) -> Option<usize> { self.width }\n+    pub fn width(&self) -> Option<usize> { self.width }\n \n     /// Optionally specified precision for numeric types.\n     ///\n@@ -1589,7 +1589,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23.2)), \"Foo(23.20)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn precision(&self) -> Option<usize> { self.precision }\n+    pub fn precision(&self) -> Option<usize> { self.precision }\n \n     /// Determines if the `+` flag was specified.\n     ///\n@@ -1617,7 +1617,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn sign_plus(&self) -> bool {\n+    pub fn sign_plus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignPlus as u32) != 0\n     }\n \n@@ -1645,7 +1645,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"Foo(23)\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn sign_minus(&self) -> bool {\n+    pub fn sign_minus(&self) -> bool {\n         self.flags & (1 << FlagV1::SignMinus as u32) != 0\n     }\n \n@@ -1672,7 +1672,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{}\", Foo(23)), \"23\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn alternate(&self) -> bool {\n+    pub fn alternate(&self) -> bool {\n         self.flags & (1 << FlagV1::Alternate as u32) != 0\n     }\n \n@@ -1697,7 +1697,7 @@ impl<'a> Formatter<'a> {\n     /// assert_eq!(&format!(\"{:04}\", Foo(23)), \"23\");\n     /// ```\n     #[stable(feature = \"fmt_flags\", since = \"1.5.0\")]\n-    pub const fn sign_aware_zero_pad(&self) -> bool {\n+    pub fn sign_aware_zero_pad(&self) -> bool {\n         self.flags & (1 << FlagV1::SignAwareZeroPad as u32) != 0\n     }\n "}, {"sha": "f0efeb59e8d6e12225366c7ac19b1e6a6e6f28ab", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -55,7 +55,7 @@ impl<'a> PanicInfo<'a> {\n                 issue = \"0\")]\n     #[doc(hidden)]\n     #[inline]\n-    pub const fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n+    pub fn internal_constructor(message: Option<&'a fmt::Arguments<'a>>,\n                                 location: Location<'a>)\n                                 -> Self {\n         struct NoPayload;\n@@ -96,7 +96,7 @@ impl<'a> PanicInfo<'a> {\n     ///\n     /// [`fmt::write`]: ../fmt/fn.write.html\n     #[unstable(feature = \"panic_info_message\", issue = \"44489\")]\n-    pub const fn message(&self) -> Option<&fmt::Arguments> {\n+    pub fn message(&self) -> Option<&fmt::Arguments> {\n         self.message\n     }\n \n@@ -125,7 +125,7 @@ impl<'a> PanicInfo<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub const fn location(&self) -> Option<&Location> {\n+    pub fn location(&self) -> Option<&Location> {\n         // NOTE: If this is changed to sometimes return None,\n         // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n         Some(&self.location)\n@@ -186,7 +186,7 @@ impl<'a> Location<'a> {\n                           and related macros\",\n                 issue = \"0\")]\n     #[doc(hidden)]\n-    pub const fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n+    pub fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n         Location { file, line, col }\n     }\n \n@@ -208,7 +208,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub const fn file(&self) -> &str {\n+    pub fn file(&self) -> &str {\n         self.file\n     }\n \n@@ -230,7 +230,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n-    pub const fn line(&self) -> u32 {\n+    pub fn line(&self) -> u32 {\n         self.line\n     }\n \n@@ -252,7 +252,7 @@ impl<'a> Location<'a> {\n     /// panic!(\"Normal panic\");\n     /// ```\n     #[stable(feature = \"panic_col\", since = \"1.25.0\")]\n-    pub const fn column(&self) -> u32 {\n+    pub fn column(&self) -> u32 {\n         self.col\n     }\n }"}, {"sha": "68de82d294529e5cefa0d3eae3159a00674849f3", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -207,7 +207,7 @@ impl<'a, T: ?Sized> Pin<&'a T> {\n     /// with the same lifetime as the original `Pin`.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub const fn get_ref(this: Pin<&'a T>) -> &'a T {\n+    pub fn get_ref(this: Pin<&'a T>) -> &'a T {\n         this.pointer\n     }\n }\n@@ -216,7 +216,7 @@ impl<'a, T: ?Sized> Pin<&'a mut T> {\n     /// Convert this `Pin<&mut T>` into a `Pin<&T>` with the same lifetime.\n     #[unstable(feature = \"pin\", issue = \"49150\")]\n     #[inline(always)]\n-    pub const fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n+    pub fn into_ref(this: Pin<&'a mut T>) -> Pin<&'a T> {\n         Pin { pointer: this.pointer }\n     }\n "}, {"sha": "dae425da78916232b15df1a7ac750b016d90afb4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -4021,7 +4021,7 @@ impl<'a, T> ChunksExact<'a, T> {\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n-    pub const fn remainder(&self) -> &'a [T] {\n+    pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }\n@@ -4517,7 +4517,7 @@ impl<'a, T> RChunksExact<'a, T> {\n     /// returned by the iterator. The returned slice has at most `chunk_size-1`\n     /// elements.\n     #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n-    pub const fn remainder(&self) -> &'a [T] {\n+    pub fn remainder(&self) -> &'a [T] {\n         self.rem\n     }\n }"}, {"sha": "186d6adbc91cf67ecb6c88df1acf286c943cebf4", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -29,7 +29,7 @@ impl Utf8Lossy {\n         unsafe { mem::transmute(bytes) }\n     }\n \n-    pub const fn chunks(&self) -> Utf8LossyChunksIter {\n+    pub fn chunks(&self) -> Utf8LossyChunksIter {\n         Utf8LossyChunksIter { source: &self.bytes }\n     }\n }"}, {"sha": "f5bfe804899596da754427753f331ba80b7a0f06", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -231,7 +231,7 @@ impl Utf8Error {\n     /// assert_eq!(1, error.valid_up_to());\n     /// ```\n     #[stable(feature = \"utf8_error\", since = \"1.5.0\")]\n-    pub const fn valid_up_to(&self) -> usize { self.valid_up_to }\n+    pub fn valid_up_to(&self) -> usize { self.valid_up_to }\n \n     /// Provide more information about the failure:\n     ///"}, {"sha": "c9fb22e0080dd1c2efc2531e8fcdfaed53336e19", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -141,7 +141,7 @@ impl LocalWaker {\n     /// `Waker` is nearly identical to `LocalWaker`, but is threadsafe\n     /// (implements `Send` and `Sync`).\n     #[inline]\n-    pub const fn as_waker(&self) -> &Waker {\n+    pub fn as_waker(&self) -> &Waker {\n         &self.0\n     }\n "}, {"sha": "c18f200872d7478c8670652a6a783e2fb5d12f44", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -3013,7 +3013,7 @@ impl<'a, K: 'a, V: 'a> VacantEntry<'a, K, V> {\n     /// assert_eq!(map.entry(\"poneyland\").key(), &\"poneyland\");\n     /// ```\n     #[stable(feature = \"map_entry_keys\", since = \"1.10.0\")]\n-    pub const fn key(&self) -> &K {\n+    pub fn key(&self) -> &K {\n         &self.key\n     }\n "}, {"sha": "e2dc02e40bfcb0c2c366b9c060a9d7a10165ffe1", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -833,7 +833,7 @@ impl NulError {\n     /// assert_eq!(nul_error.nul_position(), 7);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn nul_position(&self) -> usize { self.0 }\n+    pub fn nul_position(&self) -> usize { self.0 }\n \n     /// Consumes this error, returning the underlying vector of bytes which\n     /// generated the error in the first place.\n@@ -909,7 +909,7 @@ impl IntoStringError {\n \n     /// Access the underlying UTF-8 error that was the cause of this error.\n     #[stable(feature = \"cstring_into\", since = \"1.7.0\")]\n-    pub const fn utf8_error(&self) -> Utf8Error {\n+    pub fn utf8_error(&self) -> Utf8Error {\n         self.error\n     }\n }"}, {"sha": "e26e6d391f84d3f12bee12a774746e5506811d09", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -633,7 +633,7 @@ impl<W> IntoInnerError<W> {\n     /// };\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn error(&self) -> &Error { &self.1 }\n+    pub fn error(&self) -> &Error { &self.1 }\n \n     /// Returns the buffered writer instance which generated the error.\n     ///"}, {"sha": "c07d4a2e7554e5c20dca3c10608d0a877a40af51", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -1653,7 +1653,7 @@ impl<T, U> Chain<T, U> {\n     /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n-    pub const fn get_ref(&self) -> (&T, &U) {\n+    pub fn get_ref(&self) -> (&T, &U) {\n         (&self.first, &self.second)\n     }\n \n@@ -1780,7 +1780,7 @@ impl<T> Take<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn limit(&self) -> u64 { self.limit }\n+    pub fn limit(&self) -> u64 { self.limit }\n \n     /// Sets the number of bytes that can be read before this instance will\n     /// return EOF. This is the same as constructing a new `Take` instance, so\n@@ -1856,7 +1856,7 @@ impl<T> Take<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"more_io_inner_methods\", since = \"1.20.0\")]\n-    pub const fn get_ref(&self) -> &T {\n+    pub fn get_ref(&self) -> &T {\n         &self.inner\n     }\n "}, {"sha": "ff35325ab4fdaaacded38db1c1cb484410f67926", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -475,7 +475,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.flowinfo(), 10);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn flowinfo(&self) -> u32 {\n+    pub fn flowinfo(&self) -> u32 {\n         self.inner.sin6_flowinfo\n     }\n \n@@ -515,7 +515,7 @@ impl SocketAddrV6 {\n     /// assert_eq!(socket.scope_id(), 78);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn scope_id(&self) -> u32 {\n+    pub fn scope_id(&self) -> u32 {\n         self.inner.sin6_scope_id\n     }\n "}, {"sha": "2517c45696a2db4875c82fcf8d05b87b3800cf9e", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -402,7 +402,7 @@ impl Ipv4Addr {\n     /// assert_eq!(addr.octets(), [127, 0, 0, 1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub  fn octets(&self) -> [u8; 4] {\n+    pub fn octets(&self) -> [u8; 4] {\n         let bits = u32::from_be(self.inner.s_addr);\n         [(bits >> 24) as u8, (bits >> 16) as u8, (bits >> 8) as u8, bits as u8]\n     }"}, {"sha": "a153456370c6f45cbf50c3632b34467d5b3edaf7", "filename": "src/libstd/path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -439,15 +439,15 @@ impl<'a> PrefixComponent<'a> {\n     ///\n     /// [`Prefix`]: enum.Prefix.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn kind(&self) -> Prefix<'a> {\n+    pub fn kind(&self) -> Prefix<'a> {\n         self.parsed\n     }\n \n     /// Returns the raw [`OsStr`] slice for this prefix.\n     ///\n     /// [`OsStr`]: ../../std/ffi/struct.OsStr.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn as_os_str(&self) -> &'a OsStr {\n+    pub fn as_os_str(&self) -> &'a OsStr {\n         self.raw\n     }\n }\n@@ -1918,7 +1918,7 @@ impl Path {\n     /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     /// [`parent`]: struct.Path.html#method.parent\n     #[stable(feature = \"path_ancestors\", since = \"1.28.0\")]\n-    pub const fn ancestors(&self) -> Ancestors {\n+    pub fn ancestors(&self) -> Ancestors {\n         Ancestors {\n             next: Some(&self),\n         }\n@@ -2267,7 +2267,7 @@ impl Path {\n     /// println!(\"{}\", path.display());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn display(&self) -> Display {\n+    pub fn display(&self) -> Display {\n         Display { path: self }\n     }\n "}, {"sha": "3014283da5b271edc067f78d4c0df488a36e617a", "filename": "src/libstd/sync/condvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fcondvar.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -72,7 +72,7 @@ impl WaitTimeoutResult {\n     /// }\n     /// ```\n     #[stable(feature = \"wait_timeout\", since = \"1.5.0\")]\n-    pub const fn timed_out(&self) -> bool {\n+    pub fn timed_out(&self) -> bool {\n         self.0\n     }\n }"}, {"sha": "b726168c7c6167234619c65b3426bba66dc8fe26", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -1469,7 +1469,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn iter(&self) -> Iter<T> {\n+    pub fn iter(&self) -> Iter<T> {\n         Iter { rx: self }\n     }\n \n@@ -1512,7 +1512,7 @@ impl<T> Receiver<T> {\n     /// assert_eq!(iter.next(), None);\n     /// ```\n     #[stable(feature = \"receiver_try_iter\", since = \"1.15.0\")]\n-    pub const fn try_iter(&self) -> TryIter<T> {\n+    pub fn try_iter(&self) -> TryIter<T> {\n         TryIter { rx: self }\n     }\n "}, {"sha": "cf9698cb2a9712b6a2439314503c0aef40e63ffd", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -517,7 +517,7 @@ impl OnceState {\n     ///     assert!(!state.poisoned());\n     /// });\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n-    pub const fn poisoned(&self) -> bool {\n+    pub fn poisoned(&self) -> bool {\n         self.poisoned\n     }\n }"}, {"sha": "e9a97f7c74746973818ab5ce102150a134b1d59f", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -1391,7 +1391,7 @@ impl<T> JoinHandle<T> {\n     /// println!(\"thread id: {:?}\", thread.id());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub const fn thread(&self) -> &Thread {\n+    pub fn thread(&self) -> &Thread {\n         &self.0.thread\n     }\n "}, {"sha": "90ab349159915cad86c8a10d386558cc3a729cce", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1d2aa22c0d15465af1daccdb3821450c98d0ed0/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=d1d2aa22c0d15465af1daccdb3821450c98d0ed0", "patch": "@@ -449,7 +449,7 @@ impl SystemTimeError {\n     /// }\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n-    pub const fn duration(&self) -> Duration {\n+    pub fn duration(&self) -> Duration {\n         self.0\n     }\n }"}]}