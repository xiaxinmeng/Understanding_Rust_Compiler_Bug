{"sha": "768adb3ddda730ae300f57797b2c0587e1211e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2OGFkYjNkZGRhNzMwYWUzMDBmNTc3OTdiMmMwNTg3ZTEyMTFlODA=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T14:27:39Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-08-09T14:27:39Z"}, "message": "Added a python script to run test cases repeatedly. This helps with debugging race conditions.", "tree": {"sha": "0fcc31d71098416133a694e417799391515027ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fcc31d71098416133a694e417799391515027ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/768adb3ddda730ae300f57797b2c0587e1211e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/768adb3ddda730ae300f57797b2c0587e1211e80", "html_url": "https://github.com/rust-lang/rust/commit/768adb3ddda730ae300f57797b2c0587e1211e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/768adb3ddda730ae300f57797b2c0587e1211e80/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e422c748b7789474120a6c14bda36b5f70498fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e422c748b7789474120a6c14bda36b5f70498fa", "html_url": "https://github.com/rust-lang/rust/commit/0e422c748b7789474120a6c14bda36b5f70498fa"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "4cce41027ecc809c8acdf7ed9ec8c6f59f0c32da", "filename": "src/run.py", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/768adb3ddda730ae300f57797b2c0587e1211e80/src%2Frun.py", "raw_url": "https://github.com/rust-lang/rust/raw/768adb3ddda730ae300f57797b2c0587e1211e80/src%2Frun.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frun.py?ref=768adb3ddda730ae300f57797b2c0587e1211e80", "patch": "@@ -0,0 +1,81 @@\n+import os\n+import sys\n+import time\n+import glob\n+import fnmatch\n+from optparse import OptionParser\n+\n+rustDir = os.path.abspath('.')\n+rustTestDir = rustDir + \"/test\";\n+rustTestRunPassDir = rustTestDir + \"/run-pass\";\n+rustTestRunFailDir = rustTestDir + \"/run-fail\";\n+rustTestCompileFailDir = rustTestDir + \"/run-compile-fail\";\n+rustTestRunBenchDir = rustTestDir + \"/run-bench\";\n+\n+parser = OptionParser()\n+parser.set_usage(\"run.py [options] pattern : run.py -n 100 \\\"bas*\\\" -q\");\n+parser.add_option(\"-n\", dest=\"repetitions\", \n+                  help=\"number of repetitions\", metavar=\"NUMBER\")\n+parser.add_option(\"-q\", action=\"store_true\", dest=\"quiet\", default=False, \n+                  help=\"suppresses rust log output\")\n+parser.add_option(\"-p\", action=\"store_true\", dest=\"printSource\", \n+                  default=False, help=\"prints the test case's source\")\n+parser.add_option(\"-s\", dest=\"seed\", metavar=\"NUMBER\", default=-1,\n+                  help=\"seeds the rust scheduler, use -1 to generate seeds, \"\n+                  + \" or >= 0 to specify a seed\")\n+                  \n+(options, args) = parser.parse_args()\n+\n+def getRustTests(filter):\n+    tests = []\n+    for root, dirnames, filenames in os.walk(rustTestDir):\n+      for filename in fnmatch.filter(filenames, filter + '.rs'):\n+          tests.append(os.path.join(root, filename).\n+                       replace(rustDir + \"/\", \"\"));\n+    return tests\n+\n+\n+if len(args) != 1:\n+    parser.print_usage();\n+    sys.exit(0);\n+\n+tests = getRustTests(args[0]);\n+\n+# Make \n+for rustProgram in tests:\n+    print \"Making: \" + rustProgram;\n+    result = os.system(\"make \" + rustProgram.replace(\".rs\", \".x86\")) >> 8;\n+    if (result != 0):\n+        print \"Make failed!\";\n+        sys.exit(1);\n+\n+if (options.quiet):\n+    os.putenv(\"RUST_LOG\", \"none\")\n+\n+# Rut\n+totalPassed = 0;\n+for rustProgram in tests:\n+    repetitions = 1;\n+    if (options.repetitions):\n+        repetitions = int(options.repetitions);\n+    passed = 0;\n+    if (options.printSource):\n+        os.system(\"cat \" + rustProgram);\n+    for i in range(0, repetitions):\n+        print \"Running: \" + rustProgram + \" \" + str(i) + \\\n+              \" of \" + str(repetitions);\n+        if (options.seed):\n+            if (int(options.seed) >= 0):\n+              os.putenv(\"RUST_SEED\", options.seed);\n+            else:\n+              os.putenv(\"RUST_SEED\", str(i));\n+        result = os.system(rustProgram.replace(\".rs\", \".x86\"));\n+        exitStatus = result >> 8;\n+        signalNumber = result & 0xF;\n+        if (result == 0):\n+            passed += 1;\n+    print \"Result for: \" + rustProgram + \" \" + str(passed) + \\\n+          \" of \" + str(repetitions) + \" passed.\";\n+    totalPassed += passed;\n+print \"Total: \" + str(totalPassed) + \" of \" + \\\n+      str(len(tests) * repetitions) + \" passed.\"\n\\ No newline at end of file"}]}