{"sha": "cd3c324b0714ed744220da1419d91a6d9efefc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkM2MzMjRiMDcxNGVkNzQ0MjIwZGExNDE5ZDkxYTZkOWVmZWZjMDQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-11-27T10:53:19Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:55:21Z"}, "message": "rustc_codegen_llvm: take an Instance in attributes::from_fn_attrs.", "tree": {"sha": "9fb59e077b6d233cdf2b2616b4e8fb1666dad97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb59e077b6d233cdf2b2616b4e8fb1666dad97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd3c324b0714ed744220da1419d91a6d9efefc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3c324b0714ed744220da1419d91a6d9efefc04", "html_url": "https://github.com/rust-lang/rust/commit/cd3c324b0714ed744220da1419d91a6d9efefc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd3c324b0714ed744220da1419d91a6d9efefc04/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a8749b29780d18f57b81cf25f91b7960ccc64d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a8749b29780d18f57b81cf25f91b7960ccc64d3", "html_url": "https://github.com/rust-lang/rust/commit/8a8749b29780d18f57b81cf25f91b7960ccc64d3"}], "stats": {"total": 60, "additions": 24, "deletions": 36}, "files": [{"sha": "cee2e56ef7590abf3abd18ef62c624b86b5873f1", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=cd3c324b0714ed744220da1419d91a6d9efefc04", "patch": "@@ -2,11 +2,11 @@\n \n use std::ffi::CString;\n \n-use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n+use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::{Sanitizer, OptLevel};\n-use rustc::ty::TyCtxt;\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::small_c_str::SmallCStr;\n@@ -202,11 +202,9 @@ pub(crate) fn default_optimisation_attrs(sess: &Session, llfn: &'ll Value) {\n pub fn from_fn_attrs(\n     cx: &CodegenCx<'ll, 'tcx>,\n     llfn: &'ll Value,\n-    id: Option<DefId>,\n-    abi: Abi,\n+    instance: ty::Instance<'tcx>,\n ) {\n-    let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n-        .unwrap_or_else(|| CodegenFnAttrs::new());\n+    let codegen_fn_attrs = cx.tcx.codegen_fn_attrs(instance.def_id());\n \n     match codegen_fn_attrs.optimize {\n         OptimizeAttr::None => {\n@@ -224,6 +222,11 @@ pub fn from_fn_attrs(\n         }\n     }\n \n+    // FIXME(eddyb) consolidate these two `inline` calls (and avoid overwrites).\n+    if instance.def.is_inline(cx.tcx) {\n+        inline(cx, llfn, attributes::InlineAttr::Hint);\n+    }\n+\n     inline(cx, llfn, codegen_fn_attrs.inline);\n \n     // The `uwtable` attribute according to LLVM is:\n@@ -276,6 +279,9 @@ pub fn from_fn_attrs(\n         // Special attribute for allocator functions, which can't unwind.\n         false\n     } else {\n+        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n+        // Perhaps store the relevant information in `FnAbi`?\n+        let abi = instance.fn_sig(cx.tcx()).abi();\n         if abi == Abi::Rust || abi == Abi::RustCall {\n             // Any Rust method (or `extern \"Rust\" fn` or `extern\n             // \"rust-call\" fn`) is explicitly allowed to unwind\n@@ -330,16 +336,14 @@ pub fn from_fn_attrs(\n     // Note that currently the `wasm-import-module` doesn't do anything, but\n     // eventually LLVM 7 should read this and ferry the appropriate import\n     // module to the output file.\n-    if let Some(id) = id {\n-        if cx.tcx.sess.target.target.arch == \"wasm32\" {\n-            if let Some(module) = wasm_import_module(cx.tcx, id) {\n-                llvm::AddFunctionAttrStringValue(\n-                    llfn,\n-                    llvm::AttributePlace::Function,\n-                    const_cstr!(\"wasm-import-module\"),\n-                    &module,\n-                );\n-            }\n+    if cx.tcx.sess.target.target.arch == \"wasm32\" {\n+        if let Some(module) = wasm_import_module(cx.tcx, instance.def_id()) {\n+            llvm::AddFunctionAttrStringValue(\n+                llfn,\n+                llvm::AttributePlace::Function,\n+                const_cstr!(\"wasm-import-module\"),\n+                &module,\n+            );\n         }\n     }\n }"}, {"sha": "727cbbb8c1433a76a37c988a041fed7c5ea081a2", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=cd3c324b0714ed744220da1419d91a6d9efefc04", "patch": "@@ -80,13 +80,7 @@ pub fn get_fn(\n         let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n-        if instance.def.is_inline(tcx) {\n-            attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n-        }\n-        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n-        // Perhaps store the relevant information in `FnAbi`?\n-        let sig_abi = instance.fn_sig(cx.tcx()).abi();\n-        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig_abi);\n+        attributes::from_fn_attrs(cx, llfn, instance);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "2270b59b6822c27a203f8065858cbfde0fd4a000", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd3c324b0714ed744220da1419d91a6d9efefc04/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=cd3c324b0714ed744220da1419d91a6d9efefc04", "patch": "@@ -7,7 +7,7 @@ use crate::type_of::LayoutLlvmExt;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::{TypeFoldable, Instance};\n-use rustc::ty::layout::{FnAbiExt, LayoutOf, HasTyCtxt};\n+use rustc::ty::layout::{FnAbiExt, LayoutOf};\n use rustc_codegen_ssa::traits::*;\n \n pub use rustc::mir::mono::MonoItem;\n@@ -69,18 +69,8 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         }\n \n         debug!(\"predefine_fn: instance = {:?}\", instance);\n-        if instance.def.is_inline(self.tcx) {\n-            attributes::inline(self, lldecl, attributes::InlineAttr::Hint);\n-        }\n-        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n-        // Perhaps store the relevant information in `FnAbi`?\n-        let mono_sig_abi = instance.fn_sig(self.tcx()).abi();\n-        attributes::from_fn_attrs(\n-            self,\n-            lldecl,\n-            Some(instance.def.def_id()),\n-            mono_sig_abi,\n-        );\n+\n+        attributes::from_fn_attrs(self, lldecl, instance);\n \n         self.instances.borrow_mut().insert(instance, lldecl);\n     }"}]}