{"sha": "75585b408fa3563188c3bffa8bb13ad1b1334414", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1NTg1YjQwOGZhMzU2MzE4OGMzYmZmYThiYjEzYWQxYjEzMzQ0MTQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-15T12:55:13Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2021-07-18T12:30:11Z"}, "message": "Move mir_def_id inside `eq_opaque_type_and_type`", "tree": {"sha": "a85304a77550be010dc65fbfe9c349b553513925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a85304a77550be010dc65fbfe9c349b553513925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75585b408fa3563188c3bffa8bb13ad1b1334414", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmD0HtMACgkQgTGiTgx5\n769DlBAAppHZLpcflTc1ZuZXb+SPPyB0jpGcqWHKENYu+/c3MzmRdfnFAtN6E8zi\nuY0/+SbpmJKHSxcjfVqiTrcGnPWRWWtcEZj752khf1umoczAWwhttsHU0ZrNp2sP\nJhYsgsHfjItz83HZ4z0KG/cEWAhL4pykNZ/Avol3u9ATFijv3ZVwTulZVjqHCXs/\nAS1z3vchCWhssa7ECTcftxfqkgfbyoOUYKhUY++686/FeXh1mTE3zk//nY8lD9FJ\nbEcjZli9upETL/YTZkWuzbKudxjJme5xDbhQF9tmuDOhbSkzK2Ozpa2cCQPX96oh\nUR/O6gq+TL9clPXUbpD0+lG1IrGqs0icpvs2h7ho+hOMAk43qFss+Y7AHvNZ/kxX\nb/up09AclbMMA9+L/UyYGW1a9okv5FtKsr1OFbMCDCMe8SfNSK8QhC24jTGsQX6B\nwlcbDQy3O/zXhMG6FuvUTRPbr6ePctQ8+2QYFUFQPi1B8vAM727jfowVN3XTrsUk\nknjgvWHEE1mXfq95z3UqCWkyiCADGIoDa38sArv9Bt6M9QmtOYXh/PyPXqKt4cGs\n8/YIlsOhXHzmgULN/vrWfed9kqjhfIdtjxg9YD6cnNfinnZ1ml4Yq1puox+BUunh\nZdGviamvLONBpViMfx3nWoPIEn3Fgs5qrIgSxlkBFqh4qh8JYpo=\n=04dT\n-----END PGP SIGNATURE-----", "payload": "tree a85304a77550be010dc65fbfe9c349b553513925\nparent a002f4513b822aa0f5e694ac37701e41de275232\nauthor Santiago Pastorino <spastorino@gmail.com> 1626353713 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1626611411 -0300\n\nMove mir_def_id inside `eq_opaque_type_and_type`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75585b408fa3563188c3bffa8bb13ad1b1334414", "html_url": "https://github.com/rust-lang/rust/commit/75585b408fa3563188c3bffa8bb13ad1b1334414", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75585b408fa3563188c3bffa8bb13ad1b1334414/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a002f4513b822aa0f5e694ac37701e41de275232", "url": "https://api.github.com/repos/rust-lang/rust/commits/a002f4513b822aa0f5e694ac37701e41de275232", "html_url": "https://github.com/rust-lang/rust/commit/a002f4513b822aa0f5e694ac37701e41de275232"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "37e0643228acc5c386ab545922bf0d82a43e46ae", "filename": "compiler/rustc_mir/src/borrow_check/type_check/input_output.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Finput_output.rs?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -122,7 +122,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         if let Err(terr) = self.eq_opaque_type_and_type(\n             mir_output_ty,\n             normalized_output_ty,\n-            mir_def_id,\n             Locations::All(output_span),\n             ConstraintCategory::BoringNoLocation,\n         ) {\n@@ -145,7 +144,6 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             if let Err(err) = self.eq_opaque_type_and_type(\n                 mir_output_ty,\n                 user_provided_output_ty,\n-                mir_def_id,\n                 Locations::All(output_span),\n                 ConstraintCategory::BoringNoLocation,\n             ) {"}, {"sha": "aa3ff98f7ff9f7439683a81da5ae9e6ae3cee89a", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/75585b408fa3563188c3bffa8bb13ad1b1334414/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75585b408fa3563188c3bffa8bb13ad1b1334414/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=75585b408fa3563188c3bffa8bb13ad1b1334414", "patch": "@@ -1182,7 +1182,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     }\n \n     /// Equates a type `anon_ty` that may contain opaque types whose\n-    /// values are to be inferred by the MIR with def-id `anon_owner_def_id`.\n+    /// values are to be inferred by the MIR.\n     ///\n     /// The type `revealed_ty` contains the same type as `anon_ty`, but with the\n     /// hidden types for impl traits revealed.\n@@ -1210,12 +1210,10 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     ///   generics of `foo`). Note that `anon_ty` is not just the opaque type,\n     ///   but the entire return type (which may contain opaque types within it).\n     /// * `revealed_ty` would be `Box<(T, u32)>`\n-    /// * `anon_owner_def_id` would be the def-id of `foo`\n     fn eq_opaque_type_and_type(\n         &mut self,\n         revealed_ty: Ty<'tcx>,\n         anon_ty: Ty<'tcx>,\n-        anon_owner_def_id: LocalDefId,\n         locations: Locations,\n         category: ConstraintCategory,\n     ) -> Fallible<()> {\n@@ -1245,12 +1243,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         let tcx = infcx.tcx;\n         let param_env = self.param_env;\n         let body = self.body;\n+        let mir_def_id = body.source.def_id().expect_local();\n \n         // the \"concrete opaque types\" maps\n-        let concrete_opaque_types = &tcx.typeck(anon_owner_def_id).concrete_opaque_types;\n+        let concrete_opaque_types = &tcx.typeck(mir_def_id).concrete_opaque_types;\n         let mut opaque_type_values = VecMap::new();\n \n-        debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", body.source.def_id());\n+        debug!(\"eq_opaque_type_and_type: mir_def_id={:?}\", mir_def_id);\n         let opaque_type_map = self.fully_perform_op(\n             locations,\n             category,\n@@ -1268,7 +1267,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     // any generic parameters.)\n                     let (output_ty, opaque_type_map) =\n                         obligations.add(infcx.instantiate_opaque_types(\n-                            anon_owner_def_id,\n+                            mir_def_id,\n                             dummy_body_id,\n                             param_env,\n                             anon_ty,"}]}