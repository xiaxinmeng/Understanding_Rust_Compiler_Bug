{"sha": "87add533278d723057192292306505e269e737bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3YWRkNTMzMjc4ZDcyMzA1NzE5MjI5MjMwNjUwNWUyNjllNzM3YmM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-19T20:23:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-12-20T17:10:11Z"}, "message": "rustc: Improve crate id extraction\n\nRight now the --crate-id and related flags are all process *after* the entire\ncrate is parsed. This is less than desirable when used with makefiles because it\nmeans that just to learn the output name of the crate you have to parse the\nentire crate (unnecessary).\n\nThis commit changes the behavior to lift the handling of these flags much sooner\nin the compilation process. This allows us to not have to parse the entire crate\nand only have to worry about parsing the crate attributes themselves. The\nrelated methods have all been updated to take an array of attributes rather than\na crate.\n\nAdditionally, this ceases duplication of the \"what output are we producing\"\nlogic in order to correctly handle things in the case of --test.\n\nFinally, this adds tests for all of this functionality to ensure that it does\nnot regress.", "tree": {"sha": "e57c474628555700051889ddc4a52c7e5d17487e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e57c474628555700051889ddc4a52c7e5d17487e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87add533278d723057192292306505e269e737bc", "comment_count": 13, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87add533278d723057192292306505e269e737bc", "html_url": "https://github.com/rust-lang/rust/commit/87add533278d723057192292306505e269e737bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87add533278d723057192292306505e269e737bc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d760f994de00f4e700a03a650e5065c8391b7f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/d760f994de00f4e700a03a650e5065c8391b7f73", "html_url": "https://github.com/rust-lang/rust/commit/d760f994de00f4e700a03a650e5065c8391b7f73"}], "stats": {"total": 194, "additions": 127, "deletions": 67}, "files": [{"sha": "6647a21e26a664a850f327798353f4a8c3820bb1", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -447,7 +447,7 @@ pub mod write {\n  */\n \n pub fn build_link_meta(sess: Session,\n-                       c: &ast::Crate,\n+                       attrs: &[ast::Attribute],\n                        output: &Path,\n                        symbol_hasher: &mut Sha256)\n                        -> LinkMeta {\n@@ -458,7 +458,7 @@ pub fn build_link_meta(sess: Session,\n         truncated_hash_result(symbol_hasher).to_managed()\n     }\n \n-    let pkgid = match attr::find_pkgid(c.attrs) {\n+    let pkgid = match attr::find_pkgid(attrs) {\n         None => {\n             let stem = session::expect(\n                 sess,"}, {"sha": "4f831d9c3c6817a5e16b3c631e1f37b14ed8fe22", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 37, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -165,7 +165,7 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     let time_passes = sess.time_passes();\n \n     *sess.building_library = session::building_library(sess.opts, &crate);\n-    *sess.outputs = session::collect_outputs(sess.opts, &crate);\n+    *sess.outputs = session::collect_outputs(sess.opts, crate.attrs);\n \n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &crate));\n@@ -446,42 +446,6 @@ pub fn compile_input(sess: Session, cfg: ast::CrateConfig, input: &input,\n     let (outputs, trans) = {\n         let expanded_crate = {\n             let crate = phase_1_parse_input(sess, cfg.clone(), input);\n-            let (crate_id, crate_name, crate_file_name) = sess.opts.print_metas;\n-            // these nasty nested conditions are to avoid doing extra work\n-            if crate_id || crate_name || crate_file_name {\n-                let t_outputs = build_output_filenames(input, outdir, output, crate.attrs, sess);\n-                if crate_id || crate_name {\n-                    let pkgid = match attr::find_pkgid(crate.attrs) {\n-                        Some(pkgid) => pkgid,\n-                        None => fail!(\"No crate_id and --crate-id or --crate-name requested\")\n-                    };\n-                    if crate_id {\n-                        println(pkgid.to_str());\n-                    }\n-                    if crate_name {\n-                        println(pkgid.name);\n-                    }\n-                }\n-\n-                if crate_file_name {\n-                    let lm = link::build_link_meta(sess, &crate, &t_outputs.obj_filename,\n-                                                   &mut ::util::sha2::Sha256::new());\n-                    // if the vector is empty we default to OutputExecutable.\n-                    let style = sess.opts.outputs.get_opt(0).unwrap_or(&OutputExecutable);\n-                    let fname = link::filename_for_input(&sess, *style, &lm,\n-                                                         &t_outputs.out_filename);\n-                    println!(\"{}\", fname.display());\n-\n-                    // we already maybe printed the first one, so skip it\n-                    for style in sess.opts.outputs.iter().skip(1) {\n-                        let fname = link::filename_for_input(&sess, *style, &lm,\n-                                                             &t_outputs.out_filename);\n-                        println!(\"{}\", fname.display());\n-                    }\n-                }\n-\n-                return;\n-            }\n             if stop_after_phase_1(sess) { return; }\n             phase_2_configure_and_expand(sess, cfg, crate)\n         };"}, {"sha": "ba9ffe81a993e494dbc60b9914a416798a8ea4fa", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -421,14 +421,15 @@ pub fn building_library(options: &options, crate: &ast::Crate) -> bool {\n     }\n }\n \n-pub fn collect_outputs(options: &options, crate: &ast::Crate) -> ~[OutputStyle] {\n+pub fn collect_outputs(options: &options,\n+                       attrs: &[ast::Attribute]) -> ~[OutputStyle] {\n     // If we're generating a test executable, then ignore all other output\n     // styles at all other locations\n     if options.test {\n         return ~[OutputExecutable];\n     }\n     let mut base = options.outputs.clone();\n-    let mut iter = crate.attrs.iter().filter_map(|a| {\n+    let mut iter = attrs.iter().filter_map(|a| {\n         if \"crate_type\" == a.name() {\n             match a.value_str() {\n                 Some(n) if \"rlib\" == n => Some(OutputRlib),"}, {"sha": "49288e35f4476a3af40b243d2ddaa5c98c381659", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 75, "deletions": 25, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -21,14 +21,12 @@\n extern mod extra;\n extern mod syntax;\n \n-use driver::driver::{host_triple, optgroups, early_error};\n-use driver::driver::{str_input, file_input, build_session_options};\n-use driver::driver::{build_session, build_configuration, parse_pretty};\n-use driver::driver::{PpMode, pretty_print_input, list_metadata};\n-use driver::driver::{compile_input};\n+use back::link;\n use driver::session;\n use middle::lint;\n \n+use d = driver::driver;\n+\n use std::cast;\n use std::comm;\n use std::io;\n@@ -41,9 +39,12 @@ use std::task;\n use std::vec;\n use extra::getopts::groups;\n use extra::getopts;\n+use syntax::ast;\n+use syntax::attr;\n use syntax::codemap;\n use syntax::diagnostic::Emitter;\n use syntax::diagnostic;\n+use syntax::parse;\n \n pub mod middle {\n     pub mod trans;\n@@ -137,7 +138,7 @@ pub fn version(argv0: &str) {\n         None => \"unknown version\"\n     };\n     println!(\"{} {}\", argv0, vers);\n-    println!(\"host: {}\", host_triple());\n+    println!(\"host: {}\", d::host_triple());\n }\n \n pub fn usage(argv0: &str) {\n@@ -146,7 +147,7 @@ pub fn usage(argv0: &str) {\n Additional help:\n     -W help             Print 'lint' options and default settings\n     -Z help             Print internal options for debugging rustc\\n\",\n-              groups::usage(message, optgroups()));\n+              groups::usage(message, d::optgroups()));\n }\n \n pub fn describe_warnings() {\n@@ -206,10 +207,10 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n     if args.is_empty() { usage(binary); return; }\n \n     let matches =\n-        &match getopts::groups::getopts(args, optgroups()) {\n+        &match getopts::groups::getopts(args, d::optgroups()) {\n           Ok(m) => m,\n           Err(f) => {\n-            early_error(demitter, f.to_err_msg());\n+            d::early_error(demitter, f.to_err_msg());\n           }\n         };\n \n@@ -246,48 +247,97 @@ pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n         return;\n     }\n     let input = match matches.free.len() {\n-      0u => early_error(demitter, \"no input filename given\"),\n+      0u => d::early_error(demitter, \"no input filename given\"),\n       1u => {\n         let ifile = matches.free[0].as_slice();\n         if \"-\" == ifile {\n             let src = str::from_utf8_owned(io::stdin().read_to_end());\n-            str_input(src.to_managed())\n+            d::str_input(src.to_managed())\n         } else {\n-            file_input(Path::new(ifile))\n+            d::file_input(Path::new(ifile))\n         }\n       }\n-      _ => early_error(demitter, \"multiple input filenames provided\")\n+      _ => d::early_error(demitter, \"multiple input filenames provided\")\n     };\n \n-    let sopts = build_session_options(binary, matches, demitter);\n-    let sess = build_session(sopts, demitter);\n+    let sopts = d::build_session_options(binary, matches, demitter);\n+    let sess = d::build_session(sopts, demitter);\n     let odir = matches.opt_str(\"out-dir\").map(|o| Path::new(o));\n     let ofile = matches.opt_str(\"o\").map(|o| Path::new(o));\n-    let cfg = build_configuration(sess);\n+    let cfg = d::build_configuration(sess);\n     let pretty = matches.opt_default(\"pretty\", \"normal\").map(|a| {\n-        parse_pretty(sess, a)\n+        d::parse_pretty(sess, a)\n     });\n     match pretty {\n-      Some::<PpMode>(ppm) => {\n-        pretty_print_input(sess, cfg, &input, ppm);\n+      Some::<d::PpMode>(ppm) => {\n+        d::pretty_print_input(sess, cfg, &input, ppm);\n         return;\n       }\n-      None::<PpMode> => {/* continue */ }\n+      None::<d::PpMode> => {/* continue */ }\n     }\n     let ls = matches.opt_present(\"ls\");\n     if ls {\n         match input {\n-          file_input(ref ifile) => {\n-            list_metadata(sess, &(*ifile), @mut io::stdout() as @mut io::Writer);\n+          d::file_input(ref ifile) => {\n+            d::list_metadata(sess, &(*ifile),\n+                                  @mut io::stdout() as @mut io::Writer);\n           }\n-          str_input(_) => {\n-            early_error(demitter, \"can not list metadata for stdin\");\n+          d::str_input(_) => {\n+            d::early_error(demitter, \"can not list metadata for stdin\");\n           }\n         }\n         return;\n     }\n+    let (crate_id, crate_name, crate_file_name) = sopts.print_metas;\n+    // these nasty nested conditions are to avoid doing extra work\n+    if crate_id || crate_name || crate_file_name {\n+        let attrs = parse_crate_attrs(sess, &input);\n+        let t_outputs = d::build_output_filenames(&input, &odir, &ofile,\n+                                                  attrs, sess);\n+        if crate_id || crate_name {\n+            let pkgid = match attr::find_pkgid(attrs) {\n+                Some(pkgid) => pkgid,\n+                None => {\n+                    sess.fatal(\"No crate_id and --crate-id or \\\n+                                --crate-name requested\")\n+                }\n+            };\n+            if crate_id {\n+                println(pkgid.to_str());\n+            }\n+            if crate_name {\n+                println(pkgid.name);\n+            }\n+        }\n+\n+        if crate_file_name {\n+            let lm = link::build_link_meta(sess, attrs, &t_outputs.obj_filename,\n+                                           &mut ::util::sha2::Sha256::new());\n+            let outputs = session::collect_outputs(sopts, attrs);\n+            for &style in outputs.iter() {\n+                let fname = link::filename_for_input(&sess, style, &lm,\n+                                                     &t_outputs.out_filename);\n+                println!(\"{}\", fname.filename_display());\n+            }\n+        }\n+\n+        return;\n+    }\n+\n+    d::compile_input(sess, cfg, &input, &odir, &ofile);\n+}\n \n-    compile_input(sess, cfg, &input, &odir, &ofile);\n+fn parse_crate_attrs(sess: session::Session,\n+                     input: &d::input) -> ~[ast::Attribute] {\n+    match *input {\n+        d::file_input(ref ifile) => {\n+            parse::parse_crate_attrs_from_file(ifile, ~[], sess.parse_sess)\n+        }\n+        d::str_input(src) => {\n+            parse::parse_crate_attrs_from_source_str(\n+                d::anon_src(), src, ~[], sess.parse_sess)\n+        }\n+    }\n }\n \n #[deriving(Eq)]"}, {"sha": "7dbe760e0277dfda595513b73751ca3679577322", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -3096,7 +3096,7 @@ pub fn trans_crate(sess: session::Session,\n     }\n \n     let mut symbol_hasher = Sha256::new();\n-    let link_meta = link::build_link_meta(sess, &crate, output,\n+    let link_meta = link::build_link_meta(sess, crate.attrs, output,\n                                           &mut symbol_hasher);\n \n     // Append \".rc\" to crate name as LLVM module identifier."}, {"sha": "73240a9effd9faaa828479c8520299382d254fa1", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -79,6 +79,16 @@ pub fn parse_crate_from_file(\n     // why is there no p.abort_if_errors here?\n }\n \n+pub fn parse_crate_attrs_from_file(\n+    input: &Path,\n+    cfg: ast::CrateConfig,\n+    sess: @mut ParseSess\n+) -> ~[ast::Attribute] {\n+    let parser = new_parser_from_file(sess, cfg, input);\n+    let (inner, _) = parser.parse_inner_attrs_and_next();\n+    return inner;\n+}\n+\n pub fn parse_crate_from_source_str(\n     name: @str,\n     source: @str,\n@@ -92,6 +102,20 @@ pub fn parse_crate_from_source_str(\n     maybe_aborted(p.parse_crate_mod(),p)\n }\n \n+pub fn parse_crate_attrs_from_source_str(\n+    name: @str,\n+    source: @str,\n+    cfg: ast::CrateConfig,\n+    sess: @mut ParseSess\n+) -> ~[ast::Attribute] {\n+    let p = new_parser_from_source_str(sess,\n+                                       /*bad*/ cfg.clone(),\n+                                       name,\n+                                       source);\n+    let (inner, _) = maybe_aborted(p.parse_inner_attrs_and_next(),p);\n+    return inner;\n+}\n+\n pub fn parse_expr_from_source_str(\n     name: @str,\n     source: @str,"}, {"sha": "35ae4accb2724bd308f66268a6eb3d36f3f86c16", "filename": "src/test/run-make/crate-data-smoke/Makefile", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2FMakefile?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -0,0 +1,10 @@\n+-include ../tools.mk\n+\n+all:\n+\t[ `$(RUSTC) --crate-id crate.rs` = \"foo#0.9\" ]\n+\t[ `$(RUSTC) --crate-name crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --crate-file-name crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --crate-file-name --lib --test crate.rs` = \"foo\" ]\n+\t[ `$(RUSTC) --crate-file-name --test lib.rs` = \"mylib\" ]\n+\t$(RUSTC) --crate-file-name lib.rs\n+\t$(RUSTC) --crate-file-name rlib.rs"}, {"sha": "840f346a601bd82bea1e69242050b334534c8d6e", "filename": "src/test/run-make/crate-data-smoke/crate.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Fcrate.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -0,0 +1,7 @@\n+#[crate_id = \"foo#0.9\"];\n+\n+// Querying about the crate metadata should *not* parse the entire crate, it\n+// only needs the crate attributes (which are guaranteed to be at the top) be\n+// sure that if we have an error like a missing module that we can still query\n+// about the crate id.\n+mod error;"}, {"sha": "11c5682389e55df200e812a2a0223188677e3bb3", "filename": "src/test/run-make/crate-data-smoke/lib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Flib.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -0,0 +1,2 @@\n+#[crate_id = \"mylib\"];\n+#[crate_type = \"lib\"];"}, {"sha": "26a1de1806a7961aa453c256e0d19e74a768278b", "filename": "src/test/run-make/crate-data-smoke/rlib.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87add533278d723057192292306505e269e737bc/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcrate-data-smoke%2Frlib.rs?ref=87add533278d723057192292306505e269e737bc", "patch": "@@ -0,0 +1,2 @@\n+#[crate_id = \"mylib\"];\n+#[crate_type = \"rlib\"];"}]}