{"sha": "b29092ade31d7ff37532649dfbe1dc811edf3651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOTA5MmFkZTMxZDdmZjM3NTMyNjQ5ZGZiZTFkYzgxMWVkZjM2NTE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T18:56:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-11-01T18:57:08Z"}, "message": "Various review fixes", "tree": {"sha": "98372e3e95ad410a70a4f685112b92951fec7dea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98372e3e95ad410a70a4f685112b92951fec7dea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29092ade31d7ff37532649dfbe1dc811edf3651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29092ade31d7ff37532649dfbe1dc811edf3651", "html_url": "https://github.com/rust-lang/rust/commit/b29092ade31d7ff37532649dfbe1dc811edf3651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29092ade31d7ff37532649dfbe1dc811edf3651/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc4066ebed57d43068035f574244e3abd18ee67f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4066ebed57d43068035f574244e3abd18ee67f", "html_url": "https://github.com/rust-lang/rust/commit/dc4066ebed57d43068035f574244e3abd18ee67f"}], "stats": {"total": 30, "additions": 13, "deletions": 17}, "files": [{"sha": "d1a9d74111ad39290e4b2c04122ad4e29a1e8840", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=b29092ade31d7ff37532649dfbe1dc811edf3651", "patch": "@@ -400,6 +400,7 @@ impl SubstsBuilder {\n \n     pub fn fill(mut self, filler: impl Iterator<Item = Ty>) -> Self {\n         self.vec.extend(filler.take(self.remaining()));\n+        assert_eq!(self.remaining(), 0);\n         self\n     }\n "}, {"sha": "59b7f7eb64f3ca503fdf7b9f52b6eb45b4f2f5f4", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=b29092ade31d7ff37532649dfbe1dc811edf3651", "patch": "@@ -196,13 +196,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     AssocItem::Const(c) => ValueNs::Const(c),\n                     AssocItem::TypeAlias(_) => unreachable!(),\n                 };\n-                match item.container(self.db) {\n-                    Container::ImplBlock(_) => {\n-                        let substs = self.find_self_types(&def, ty.clone());\n-\n-                        self.write_assoc_resolution(id, item);\n-                        Some((def, substs))\n-                    }\n+                let substs = match item.container(self.db) {\n+                    Container::ImplBlock(_) => self.find_self_types(&def, ty.clone()),\n                     Container::Trait(t) => {\n                         // we're picking this method\n                         let trait_substs = Substs::build_for_def(self.db, t)\n@@ -217,11 +212,12 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             trait_: t,\n                             substs: trait_substs,\n                         }));\n-\n-                        self.write_assoc_resolution(id, item);\n-                        Some((def, Some(substs)))\n+                        Some(substs)\n                     }\n-                }\n+                };\n+\n+                self.write_assoc_resolution(id, item);\n+                Some((def, substs))\n             },\n         )\n     }"}, {"sha": "8c3d32d09dcce7d79da50adbfbbb35914716a7ea", "filename": "crates/ra_hir/src/ty/method_resolution.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29092ade31d7ff37532649dfbe1dc811edf3651/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Fmethod_resolution.rs?ref=b29092ade31d7ff37532649dfbe1dc811edf3651", "patch": "@@ -166,12 +166,10 @@ pub(crate) fn lookup_method(\n     name: &Name,\n     resolver: &Resolver,\n ) -> Option<(Ty, Function)> {\n-    iterate_method_candidates(ty, db, resolver, Some(name), LookupMode::MethodCall, |ty, f| {\n-        if let AssocItem::Function(f) = f {\n-            Some((ty.clone(), f))\n-        } else {\n-            None\n-        }\n+    iterate_method_candidates(ty, db, resolver, Some(name), LookupMode::MethodCall, |ty, f| match f\n+    {\n+        AssocItem::Function(f) => Some((ty.clone(), f)),\n+        _ => None,\n     })\n }\n \n@@ -189,6 +187,7 @@ pub enum LookupMode {\n \n // This would be nicer if it just returned an iterator, but that runs into\n // lifetime problems, because we need to borrow temp `CrateImplBlocks`.\n+// FIXME add a context type here?\n pub(crate) fn iterate_method_candidates<T>(\n     ty: &Canonical<Ty>,\n     db: &impl HirDatabase,"}]}