{"sha": "2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlYzJkOTliYmQxYTE1YThmMjc4YjNjYjgyZGRmYTllYmFmYTk2YjM=", "commit": {"author": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-12T13:41:07Z"}, "committer": {"name": "Leah Hanson", "email": "astrieanna@gmail.com", "date": "2013-04-12T13:41:07Z"}, "message": "add rustdoc comments with examples for the string versions of to_base64 and from_base64", "tree": {"sha": "b39b68e28568e4151b0657d5ef2d6cecb621fe6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b39b68e28568e4151b0657d5ef2d6cecb621fe6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "html_url": "https://github.com/rust-lang/rust/commit/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3/comments", "author": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "astrieanna", "id": 1205394, "node_id": "MDQ6VXNlcjEyMDUzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1205394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/astrieanna", "html_url": "https://github.com/astrieanna", "followers_url": "https://api.github.com/users/astrieanna/followers", "following_url": "https://api.github.com/users/astrieanna/following{/other_user}", "gists_url": "https://api.github.com/users/astrieanna/gists{/gist_id}", "starred_url": "https://api.github.com/users/astrieanna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/astrieanna/subscriptions", "organizations_url": "https://api.github.com/users/astrieanna/orgs", "repos_url": "https://api.github.com/users/astrieanna/repos", "events_url": "https://api.github.com/users/astrieanna/events{/privacy}", "received_events_url": "https://api.github.com/users/astrieanna/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f13e9ccc2e3328d4cd8ca49f84e6840dd998346", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13e9ccc2e3328d4cd8ca49f84e6840dd998346", "html_url": "https://github.com/rust-lang/rust/commit/5f13e9ccc2e3328d4cd8ca49f84e6840dd998346"}], "stats": {"total": 45, "additions": 45, "deletions": 0}, "files": [{"sha": "0815e0ff0b502d75f5b100d7d838dbc71286428f", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=2ec2d99bbd1a15a8f278b3cb82ddfa9ebafa96b3", "patch": "@@ -75,6 +75,23 @@ impl<'self> ToBase64 for &'self [u8] {\n     }\n }\n \n+/**\n+ * Convert any string (literal, `@`, `&`, `~`) to base64 encoding.\n+ *\n+ *\n+ * *Example*:\n+ *\n+ * ~~~~\n+ * extern mod std;\n+ * use std::base64::ToBase64;\n+ *\n+ * fn main () {\n+ *   let str = \"Hello, World\".to_base64();\n+ *   println(fmt!(\"%s\",str));\n+ * }\n+ * ~~~~\n+ *\n+ */\n impl<'self> ToBase64 for &'self str {\n     fn to_base64(&self) -> ~str {\n         str::to_bytes(*self).to_base64()\n@@ -147,6 +164,34 @@ impl FromBase64 for ~[u8] {\n     }\n }\n \n+/**\n+ * Convert any string (literal, `@`, `&`, `~`)\n+ * that contains a base64 encoded value, to the byte values it encodes.\n+ *\n+ * You can use the `from_bytes` function in `core::str`\n+ * to turn a `[u8]` into a string with characters corresponding to those values.\n+ *\n+ * *Example*:\n+ *\n+ * This is an example of going from a string literal to the base64 encoding\n+ * and back to the same string.\n+ *\n+ * ~~~~\n+ * extern mod std;\n+ * use std::base64::ToBase64;\n+ * use std::base64::FromBase64;\n+ * use core::str;\n+ *\n+ * fn main () {\n+ *   let hello_str = \"Hello, World\".to_base64();\n+ *   println(fmt!(\"%s\",hello_str));\n+ *   let bytes = hello_str.from_base64();\n+ *   println(fmt!(\"%?\",bytes));\n+ *   let result_str = str::from_bytes(bytes);\n+ *   println(fmt!(\"%s\",result_str));\n+ * }\n+ * ~~~~\n+ */\n impl FromBase64 for ~str {\n     fn from_base64(&self) -> ~[u8] {\n         str::to_bytes(*self).from_base64()"}]}