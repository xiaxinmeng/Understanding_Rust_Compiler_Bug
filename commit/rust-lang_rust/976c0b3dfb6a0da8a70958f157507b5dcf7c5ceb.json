{"sha": "976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NmMwYjNkZmI2YTBkYThhNzA5NThmMTU3NTA3YjVkY2Y3YzVjZWI=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-21T08:00:49Z"}, "committer": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2013-06-23T10:49:16Z"}, "message": "Remove rust_call_tydesc_glue\n\nTowards #4812. Also includes some minor cleanups.", "tree": {"sha": "bb7afcd189fcab9ab60366b7cb885573dad7be17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb7afcd189fcab9ab60366b7cb885573dad7be17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "html_url": "https://github.com/rust-lang/rust/commit/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "273f90566c26309c13ebe10278f8745e978250b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/273f90566c26309c13ebe10278f8745e978250b2", "html_url": "https://github.com/rust-lang/rust/commit/273f90566c26309c13ebe10278f8745e978250b2"}], "stats": {"total": 99, "additions": 17, "deletions": 82}, "files": [{"sha": "3766af046563f6c77500170422bfc330af1d0ca7", "filename": "src/libextra/arena.rs", "status": "modified", "additions": 8, "deletions": 24, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibextra%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibextra%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farena.rs?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -41,36 +41,20 @@ use list::{MutList, MutCons, MutNil};\n use core::at_vec;\n use core::cast::{transmute, transmute_mut_region};\n use core::cast;\n-use core::libc::size_t;\n use core::ptr;\n use core::sys;\n use core::uint;\n use core::vec;\n use core::unstable::intrinsics;\n+use core::unstable::intrinsics::{TyDesc};\n \n-#[cfg(stage0)]\n-use intrinsic::{get_tydesc, TyDesc};\n #[cfg(not(stage0))]\n-use core::unstable::intrinsics::{get_tydesc, TyDesc};\n-\n-pub mod rustrt {\n-    use core::libc::size_t;\n-    #[cfg(stage0)]\n-    use intrinsic::{TyDesc};\n-    #[cfg(not(stage0))]\n-    use core::unstable::intrinsics::{TyDesc};\n-\n-    pub extern {\n-        #[rust_stack]\n-        unsafe fn rust_call_tydesc_glue(root: *u8,\n-                                        tydesc: *TyDesc,\n-                                        field: size_t);\n-    }\n-}\n+use core::unstable::intrinsics::{get_tydesc};\n \n-// This probably belongs somewhere else. Needs to be kept in sync with\n-// changes to glue...\n-static tydesc_drop_glue_index: size_t = 3 as size_t;\n+#[cfg(stage0)]\n+unsafe fn get_tydesc<T>() -> *TyDesc {\n+    intrinsics::get_tydesc::<T>() as *TyDesc\n+}\n \n // The way arena uses arrays is really deeply awful. The arrays are\n // allocated, and have capacities reserved, but the fill for the array\n@@ -150,8 +134,8 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n         //debug!(\"freeing object: idx = %u, size = %u, align = %u, done = %b\",\n         //       start, size, align, is_done);\n         if is_done {\n-            rustrt::rust_call_tydesc_glue(\n-                ptr::offset(buf, start), tydesc, tydesc_drop_glue_index);\n+            ((*tydesc).drop_glue)(&tydesc as **TyDesc,\n+                                  ptr::offset(buf, start) as *i8);\n         }\n \n         // Find where the next tydesc lives"}, {"sha": "557a2fbc4aefea33d58eeeca3dcc94bb5c89ffee", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 3, "deletions": 15, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -158,20 +158,6 @@ fn debug_mem() -> bool {\n     false\n }\n \n-#[cfg(stage0)]\n-unsafe fn call_drop_glue(tydesc: *::std::unstable::intrinsics::TyDesc, data: *i8) {\n-    use sys::TypeDesc;\n-\n-    let tydesc: *TypeDesc = transmute(tydesc);\n-    let drop_glue: extern \"Rust\" fn(**TypeDesc, *i8) = transmute((*tydesc).drop_glue);\n-    drop_glue(to_unsafe_ptr(&tydesc), data);\n-}\n-\n-#[cfg(not(stage0))]\n-unsafe fn call_drop_glue(tydesc: *::std::unstable::intrinsics::TyDesc, data: *i8) {\n-    ((*tydesc).drop_glue)(to_unsafe_ptr(&tydesc), data);\n-}\n-\n /// Destroys all managed memory (i.e. @ boxes) held by the current task.\n #[cfg(not(test))]\n #[lang=\"annihilate\"]\n@@ -213,7 +199,9 @@ pub unsafe fn annihilate() {\n     // callback, as the original value may have been freed.\n     for each_live_alloc(false) |box, uniq| {\n         if !uniq {\n-            call_drop_glue((*box).header.type_desc, transmute(&(*box).data));\n+            let tydesc = (*box).header.type_desc;\n+            let data = transmute(&(*box).data);\n+            ((*tydesc).drop_glue)(to_unsafe_ptr(&tydesc), data);\n         }\n     }\n "}, {"sha": "2a211484e7361ce429735d200b3458eeaf8b099a", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -40,12 +40,13 @@ with destructors.\n use cast;\n use container::{Map, Set};\n use io;\n-use libc::{size_t, uintptr_t};\n+use libc::{uintptr_t};\n use option::{None, Option, Some};\n use ptr;\n use hashmap::HashSet;\n use stackwalk::walk_stack;\n use sys;\n+use unstable::intrinsics::{TyDesc};\n \n pub use stackwalk::Word;\n \n@@ -58,17 +59,11 @@ pub struct StackSegment {\n }\n \n pub mod rustrt {\n-    use libc::size_t;\n     use stackwalk::Word;\n     use super::StackSegment;\n \n     #[link_name = \"rustrt\"]\n     pub extern {\n-        #[rust_stack]\n-        pub unsafe fn rust_call_tydesc_glue(root: *Word,\n-                                            tydesc: *Word,\n-                                            field: size_t);\n-\n         #[rust_stack]\n         pub unsafe fn rust_gc_metadata() -> *Word;\n \n@@ -125,7 +120,7 @@ unsafe fn is_safe_point(pc: *Word) -> Option<SafePoint> {\n     return None;\n }\n \n-type Visitor<'self> = &'self fn(root: **Word, tydesc: *Word) -> bool;\n+type Visitor<'self> = &'self fn(root: **Word, tydesc: *TyDesc) -> bool;\n \n // Walks the list of roots for the given safe point, and calls visitor\n // on each root.\n@@ -139,7 +134,7 @@ unsafe fn _walk_safe_point(fp: *Word, sp: SafePoint, visitor: Visitor) -> bool {\n     let stack_roots: *u32 = bump(sp_meta, 2);\n     let reg_roots: *u8 = bump(stack_roots, num_stack_roots);\n     let addrspaces: *Word = align_to_pointer(bump(reg_roots, num_reg_roots));\n-    let tydescs: ***Word = bump(addrspaces, num_stack_roots);\n+    let tydescs: ***TyDesc = bump(addrspaces, num_stack_roots);\n \n     // Stack roots\n     let mut sri = 0;\n@@ -364,7 +359,7 @@ pub fn cleanup_stack_for_failure() {\n                 // FIXME #4420: Destroy this box\n                 // FIXME #4330: Destroy this box\n             } else {\n-                rustrt::rust_call_tydesc_glue(*root, tydesc, 3 as size_t);\n+                ((*tydesc).drop_glue)(&tydesc as **TyDesc, *root as *i8);\n             }\n         }\n     }"}, {"sha": "a1d6342323c64bc09cf6b56fee8c0929b0ac3315", "filename": "src/libstd/sys.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fsys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Flibstd%2Fsys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys.rs?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -22,17 +22,6 @@ use repr;\n use str;\n use unstable::intrinsics;\n \n-// Corresponds to runtime type_desc type\n-#[cfg(stage0)]\n-pub struct TypeDesc {\n-    size: uint,\n-    align: uint,\n-    take_glue: uint,\n-    drop_glue: uint,\n-    free_glue: uint\n-    // Remaining fields not listed\n-}\n-\n /// The representation of a Rust closure\n pub struct Closure {\n     code: *(),\n@@ -50,18 +39,6 @@ pub mod rustrt {\n     }\n }\n \n-/**\n- * Returns a pointer to a type descriptor.\n- *\n- * Useful for calling certain function in the Rust runtime or otherwise\n- * performing dark magick.\n- */\n-#[inline]\n-#[cfg(stage0)]\n-pub fn get_type_desc<T>() -> *TypeDesc {\n-    unsafe { intrinsics::get_tydesc::<T>() as *TypeDesc }\n-}\n-\n /// Returns the size of a type\n #[inline]\n pub fn size_of<T>() -> uint {"}, {"sha": "8d771da32fc26f032ce56dcbbd907ad2550e015d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -729,14 +729,6 @@ rust_task_deref(rust_task *task) {\n     task->deref();\n }\n \n-// Must call on rust stack.\n-extern \"C\" CDECL void\n-rust_call_tydesc_glue(void *root, size_t *tydesc, size_t glue_index) {\n-    glue_fn *fn = (glue_fn*) tydesc[glue_index];\n-    if (fn)\n-        fn(0, 0, root);\n-}\n-\n // Don't run on the Rust stack!\n extern \"C\" void\n rust_log_str(uint32_t level, const char *str, size_t size) {"}, {"sha": "7fd948d2cd94e5bb277c985b223aa8bda9862e58", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=976c0b3dfb6a0da8a70958f157507b5dcf7c5ceb", "patch": "@@ -174,7 +174,6 @@ rust_set_task_local_data\n rust_task_local_data_atexit\n rust_task_ref\n rust_task_deref\n-rust_call_tydesc_glue\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n rust_gc_metadata\n@@ -239,4 +238,4 @@ rust_valgrind_stack_deregister\n rust_take_env_lock\n rust_drop_env_lock\n rust_update_log_settings\n-rust_running_on_valgrind\n\\ No newline at end of file\n+rust_running_on_valgrind"}]}