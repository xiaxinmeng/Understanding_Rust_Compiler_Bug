{"sha": "295c2d69bd425e8258f197252d2f100e08f478d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NWMyZDY5YmQ0MjVlODI1OGYxOTcyNTJkMmYxMDBlMDhmNDc4ZDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T21:47:28Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-06T21:41:50Z"}, "message": "bug on ty::GeneratorWitness", "tree": {"sha": "637820c265f97a6bcf7f0cb4538b25ae6614b18a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637820c265f97a6bcf7f0cb4538b25ae6614b18a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/295c2d69bd425e8258f197252d2f100e08f478d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/295c2d69bd425e8258f197252d2f100e08f478d8", "html_url": "https://github.com/rust-lang/rust/commit/295c2d69bd425e8258f197252d2f100e08f478d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/295c2d69bd425e8258f197252d2f100e08f478d8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58f8cc21352613639fdc58f4f8a59f5c579b5372", "url": "https://api.github.com/repos/rust-lang/rust/commits/58f8cc21352613639fdc58f4f8a59f5c579b5372", "html_url": "https://github.com/rust-lang/rust/commit/58f8cc21352613639fdc58f4f8a59f5c579b5372"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "0fba8a5c15c4bb677844cc5330666efec11722df", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/295c2d69bd425e8258f197252d2f100e08f478d8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/295c2d69bd425e8258f197252d2f100e08f478d8/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=295c2d69bd425e8258f197252d2f100e08f478d8", "patch": "@@ -406,7 +406,10 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n \n     /// Check if this is a value of primitive type, and if yes check the validity of the value\n     /// at that type.  Return `true` if the type is indeed primitive.\n-    fn try_visit_primitive(&mut self, value: OpTy<'tcx, M::PointerTag>) -> InterpResult<'tcx, bool> {\n+    fn try_visit_primitive(\n+        &mut self,\n+        value: OpTy<'tcx, M::PointerTag>,\n+    ) -> InterpResult<'tcx, bool> {\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.kind {\n@@ -487,8 +490,7 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             | ty::Str\n             | ty::Dynamic(..)\n             | ty::Closure(..)\n-            | ty::Generator(..)\n-            | ty::GeneratorWitness(..) => Ok(false),\n+            | ty::Generator(..) => Ok(false),\n             // Some types only occur during typechecking, they have no layout.\n             // We should not see them here and we could not check them anyway.\n             ty::Error\n@@ -498,7 +500,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             | ty::Param(..)\n             | ty::Opaque(..)\n             | ty::UnnormalizedProjection(..)\n-            | ty::Projection(..) => bug!(\"Encountered invalid type {:?}\", ty),\n+            | ty::Projection(..)\n+            | ty::GeneratorWitness(..) => bug!(\"Encountered invalid type {:?}\", ty),\n         }\n     }\n "}]}