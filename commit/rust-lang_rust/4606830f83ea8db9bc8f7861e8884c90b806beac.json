{"sha": "4606830f83ea8db9bc8f7861e8884c90b806beac", "node_id": "C_kwDOAAsO6NoAKDQ2MDY4MzBmODNlYThkYjliYzhmNzg2MWU4ODg0YzkwYjgwNmJlYWM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-01T14:49:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-01T14:49:34Z"}, "message": "Rollup merge of #100012 - TaKO8Ki:avoid-ty-to-string-conversions, r=fee1-dead\n\nAvoid `Ty` to `String` conversions\n\nfollow-up to #98668", "tree": {"sha": "c65d01fc66f915131e40eb8e66e782c16bf1c5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c65d01fc66f915131e40eb8e66e782c16bf1c5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4606830f83ea8db9bc8f7861e8884c90b806beac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi5+f/CRBK7hj4Ov3rIwAAURkIAGb/rAPqMd++nKCKAxxED79j\nUx0HgZ3ydkpJgHUc7cE08JYWSFiIa2kx9AvhWGSOEcd7hgCOhYrfWUZwdW3LqqOc\nJzhiyqljeYGZMYxSkaX4SizhxzTmaFzMj5wuISB7cP0VTe1fgzhQD52ATfl9Wmne\nkG+GSfVNeHDs/S77JpIsFo/8XOSQTTHnzMxPJMWIZ0B57zn0/tbjmTLwud4ew9ka\ndGdfEhSiQcjrCO2GT3Exy20lG4ha+nWW3vcEgeFcnC32If8VH0GGWui7jbM46BPd\nObBX1mevzgyMXgmhOX++L0Z0o03dFe5VBJREkZSs3s3zgOu6esQMi9EYbvUADZc=\n=l6cs\n-----END PGP SIGNATURE-----\n", "payload": "tree c65d01fc66f915131e40eb8e66e782c16bf1c5c4\nparent e6bb00fff51185f3d417b73bf32541b62e7c54db\nparent 92b31ccb73223da007e427823b192dab0a86b91b\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1659365374 +0200\ncommitter GitHub <noreply@github.com> 1659365374 +0200\n\nRollup merge of #100012 - TaKO8Ki:avoid-ty-to-string-conversions, r=fee1-dead\n\nAvoid `Ty` to `String` conversions\n\nfollow-up to #98668\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4606830f83ea8db9bc8f7861e8884c90b806beac", "html_url": "https://github.com/rust-lang/rust/commit/4606830f83ea8db9bc8f7861e8884c90b806beac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4606830f83ea8db9bc8f7861e8884c90b806beac/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6bb00fff51185f3d417b73bf32541b62e7c54db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6bb00fff51185f3d417b73bf32541b62e7c54db", "html_url": "https://github.com/rust-lang/rust/commit/e6bb00fff51185f3d417b73bf32541b62e7c54db"}, {"sha": "92b31ccb73223da007e427823b192dab0a86b91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/92b31ccb73223da007e427823b192dab0a86b91b", "html_url": "https://github.com/rust-lang/rust/commit/92b31ccb73223da007e427823b192dab0a86b91b"}], "stats": {"total": 9, "additions": 4, "deletions": 5}, "files": [{"sha": "e6907637c57b628fbd6dca7622411f3b2b97b968", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4606830f83ea8db9bc8f7861e8884c90b806beac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4606830f83ea8db9bc8f7861e8884c90b806beac/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=4606830f83ea8db9bc8f7861e8884c90b806beac", "patch": "@@ -223,8 +223,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(def) = aty.ty_adt_def() {\n                     // We also want to be able to select the slice's type's original\n                     // signature with no type arguments resolved\n-                    let type_string = self.tcx.type_of(def.did()).to_string();\n-                    flags.push((sym::_Self, Some(format!(\"[{type_string}]\"))));\n+                    flags.push((sym::_Self, Some(format!(\"[{}]\", self.tcx.type_of(def.did())))));\n                 }\n                 if aty.is_integral() {\n                     flags.push((sym::_Self, Some(\"[{integral}]\".to_string())));\n@@ -242,10 +241,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 if let Some(def) = aty.ty_adt_def() {\n                     // We also want to be able to select the array's type's original\n                     // signature with no type arguments resolved\n-                    let type_string = self.tcx.type_of(def.did()).to_string();\n-                    flags.push((sym::_Self, Some(format!(\"[{type_string}; _]\"))));\n+                    let def_ty = self.tcx.type_of(def.did());\n+                    flags.push((sym::_Self, Some(format!(\"[{def_ty}; _]\"))));\n                     if let Some(n) = len {\n-                        flags.push((sym::_Self, Some(format!(\"[{type_string}; {n}]\"))));\n+                        flags.push((sym::_Self, Some(format!(\"[{def_ty}; {n}]\"))));\n                     }\n                 }\n                 if aty.is_integral() {"}]}