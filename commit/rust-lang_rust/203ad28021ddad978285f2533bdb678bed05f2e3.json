{"sha": "203ad28021ddad978285f2533bdb678bed05f2e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwM2FkMjgwMjFkZGFkOTc4Mjg1ZjI1MzNiZGI2NzhiZWQwNWYyZTM=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-25T09:53:00Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-06-25T10:25:20Z"}, "message": "resolve merge of NameAndSpan and ExpnInfo rust-lang/rust#51726", "tree": {"sha": "61c3ecdf6fdba88de2c0e61f0c85f8eddb65e147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c3ecdf6fdba88de2c0e61f0c85f8eddb65e147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/203ad28021ddad978285f2533bdb678bed05f2e3", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlswxZYACgkQnxhOEWSD\nEYEo1Q//RIQd6dZ/4jYK7t6pppr9BvEBsVXaNZnQCGclXB9Tvp1Pz20BjT+KRyIp\nV+UlMTQp+4GKjnEdXhnJL/mFKJOP2qmBQTrRxYd0wT4WwoLVvXQjohU+cAcYyZVG\nvsEJUr0cGxNnI6zoOoAuPvknuMj00zppjVbNVIWYPcaP7llFogaYwyh8A93xvz+J\nlNA47/7qJ9TCtM+Eyefm/uJA4Yvau4oC6UDCzbOsnk0FpxYOHihhT1qkVUL/HPAM\n8WBM9qC+s4BP/BvkGp+xxdeqAs1kFbjW/zHtmR/Qgb58yKn1IHp9pSUgV6G1JHvw\n2pZ57yPRs1tnTKOj3ENolJIyDh5eZ6+ADyLman5JML8naF8Higrd6Jp5NVh5E6B6\nTQa6m1DBFkD5MbOlxO6dq41XjtQlmZ0VTBHKfjcCkkZwLoeV6ple2Fj5m01cs7PV\nna8rDaqyYB33Nr44wtpHg64gEqe9eIZXRr+yPKUoox3SWtqYYSB2WW2b3EQ3JYPp\nY9hCj+2s4EKUe7wXrRgxPICxI6fdcLfX3QEFjCj35QT1Ey2oCwmVPBizGHqDhJXY\nXQdoPsTh1RVidIgc9Td+jFUKfXSlLN18b5Qyn8lKh4+W5AXPgxjeeDYFi995j5kp\n1YMyX1C/6GlVG3WolYe2xAcvc1JXJOqm48/qSj/JXCmJujZHNDY=\n=1uLm\n-----END PGP SIGNATURE-----", "payload": "tree 61c3ecdf6fdba88de2c0e61f0c85f8eddb65e147\nparent 535c16879111b7e6e3d55f43e469a8cccb6dbe05\nauthor flip1995 <9744647+flip1995@users.noreply.github.com> 1529920380 +0200\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1529922320 +0200\n\nresolve merge of NameAndSpan and ExpnInfo rust-lang/rust#51726\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/203ad28021ddad978285f2533bdb678bed05f2e3", "html_url": "https://github.com/rust-lang/rust/commit/203ad28021ddad978285f2533bdb678bed05f2e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/203ad28021ddad978285f2533bdb678bed05f2e3/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535c16879111b7e6e3d55f43e469a8cccb6dbe05", "url": "https://api.github.com/repos/rust-lang/rust/commits/535c16879111b7e6e3d55f43e469a8cccb6dbe05", "html_url": "https://github.com/rust-lang/rust/commit/535c16879111b7e6e3d55f43e469a8cccb6dbe05"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "414e507a55b4651892428cc8349b58038e6f24fa", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/203ad28021ddad978285f2533bdb678bed05f2e3/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203ad28021ddad978285f2533bdb678bed05f2e3/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=203ad28021ddad978285f2533bdb678bed05f2e3", "patch": "@@ -558,7 +558,7 @@ fn in_attributes_expansion(expr: &Expr) -> bool {\n         .ctxt()\n         .outer()\n         .expn_info()\n-        .map_or(false, |info| matches!(info.callee.format, ExpnFormat::MacroAttribute(_)))\n+        .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n }\n \n /// Test whether `def` is a variable defined outside a macro."}, {"sha": "ae8ffcf2fce61fd3589e82f9e3d8333f46348634", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/203ad28021ddad978285f2533bdb678bed05f2e3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/203ad28021ddad978285f2533bdb678bed05f2e3/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=203ad28021ddad978285f2533bdb678bed05f2e3", "patch": "@@ -57,7 +57,7 @@ pub fn in_constant(cx: &LateContext, id: NodeId) -> bool {\n /// Returns true if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     span.ctxt().outer().expn_info().map_or(false, |info| {\n-        match info.callee.format {\n+        match info.format {\n             // don't treat range expressions desugared to structs as \"in_macro\"\n             ExpnFormat::CompilerDesugaring(kind) => kind != CompilerDesugaringKind::DotFill,\n             _ => true,\n@@ -68,7 +68,7 @@ pub fn in_macro(span: Span) -> bool {\n /// Returns true if `expn_info` was expanded by range expressions.\n pub fn is_range_expression(span: Span) -> bool {\n     span.ctxt().outer().expn_info().map_or(false, |info| {\n-        match info.callee.format {\n+        match info.format {\n             ExpnFormat::CompilerDesugaring(CompilerDesugaringKind::DotFill) => true,\n             _ => false,\n         }\n@@ -84,12 +84,12 @@ pub fn in_external_macro<'a, T: LintContext<'a>>(cx: &T, span: Span) -> bool {\n     /// this after other checks have already happened.\n     fn in_macro_ext<'a, T: LintContext<'a>>(cx: &T, info: &ExpnInfo) -> bool {\n         // no ExpnInfo = no macro\n-        if let ExpnFormat::MacroAttribute(..) = info.callee.format {\n+        if let ExpnFormat::MacroAttribute(..) = info.format {\n             // these are all plugins\n             return true;\n         }\n         // no span for the callee = external macro\n-        info.callee.span.map_or(true, |span| {\n+        info.def_site.map_or(true, |span| {\n             // no snippet = external macro or compiler-builtin expansion\n             cx.sess()\n                 .codemap()\n@@ -768,7 +768,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n         let span_name_span = span.ctxt()\n             .outer()\n             .expn_info()\n-            .map(|ei| (ei.callee.name(), ei.call_site));\n+            .map(|ei| (ei.format.name(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name == name => return Some(new_span),\n@@ -791,7 +791,7 @@ pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n     let span_name_span = span.ctxt()\n         .outer()\n         .expn_info()\n-        .map(|ei| (ei.callee.name(), ei.call_site));\n+        .map(|ei| (ei.format.name(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name == name => Some(new_span),"}]}