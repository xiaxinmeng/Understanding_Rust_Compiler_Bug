{"sha": "55c6c88782cfcce9b593c431200dad5f05bd9125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzZjODg3ODJjZmNjZTliNTkzYzQzMTIwMGRhZDVmMDViZDkxMjU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-11T18:50:40Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-01-23T04:10:39Z"}, "message": "Port borrows across yield check to MIR borrowck", "tree": {"sha": "3490dbdcbf53740382b7b47aff5608661f287799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3490dbdcbf53740382b7b47aff5608661f287799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c6c88782cfcce9b593c431200dad5f05bd9125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c6c88782cfcce9b593c431200dad5f05bd9125", "html_url": "https://github.com/rust-lang/rust/commit/55c6c88782cfcce9b593c431200dad5f05bd9125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c6c88782cfcce9b593c431200dad5f05bd9125/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "410d27bb9730c9843ae79aeb8e42533c43e429d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/410d27bb9730c9843ae79aeb8e42533c43e429d3", "html_url": "https://github.com/rust-lang/rust/commit/410d27bb9730c9843ae79aeb8e42533c43e429d3"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "7bd3b6e39f053b46ca7ab2ce3558049c6ede6ee6", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=55c6c88782cfcce9b593c431200dad5f05bd9125", "patch": "@@ -769,7 +769,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     }\n \n     // Retrieve span of given borrow from the current MIR representation\n-    fn retrieve_borrow_span(&self, borrow: &BorrowData) -> Span {\n+    pub fn retrieve_borrow_span(&self, borrow: &BorrowData) -> Span {\n         self.mir.source_info(borrow.location).span\n     }\n "}, {"sha": "d6937c405f961d91c95a64834f0edc26d2b950e5", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=55c6c88782cfcce9b593c431200dad5f05bd9125", "patch": "@@ -209,12 +209,21 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     };\n     let flow_inits = flow_inits; // remove mut\n \n+    let movable_generator = !match tcx.hir.get(id) {\n+        hir::map::Node::NodeExpr(&hir::Expr {\n+            node: hir::ExprClosure(.., Some(hir::GeneratorMovability::Static)),\n+            ..\n+        }) => true,\n+        _ => false,\n+    };\n+\n     let mut mbcx = MirBorrowckCtxt {\n         tcx: tcx,\n         mir: mir,\n         node_id: id,\n         move_data: &mdpe.move_data,\n         param_env: param_env,\n+        movable_generator,\n         locals_are_invalidated_at_exit: match tcx.hir.body_owner_kind(id) {\n             hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => false,\n             hir::BodyOwnerKind::Fn => true,\n@@ -277,6 +286,7 @@ pub struct MirBorrowckCtxt<'cx, 'gcx: 'tcx, 'tcx: 'cx> {\n     node_id: ast::NodeId,\n     move_data: &'cx MoveData<'tcx>,\n     param_env: ParamEnv<'gcx>,\n+    movable_generator: bool,\n     /// This keeps track of whether local variables are free-ed when the function\n     /// exits even without a `StorageDead`, which appears to be the case for\n     /// constants.\n@@ -534,6 +544,18 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 drop: _,\n             } => {\n                 self.consume_operand(ContextKind::Yield.new(loc), (value, span), flow_state);\n+\n+                if self.movable_generator {\n+                    // Look for any active borrows to locals\n+                    let domain = flow_state.borrows.operator();\n+                    let data = domain.borrows();\n+                    flow_state.borrows.with_elems_outgoing(|borrows| {\n+                        for i in borrows {\n+                            let borrow = &data[i.borrow_index()];\n+                            self.check_for_local_borrow(borrow, span);\n+                        }\n+                    });\n+                }\n             }\n \n             TerminatorKind::Resume | TerminatorKind::Return | TerminatorKind::GeneratorDrop => {\n@@ -1099,6 +1121,45 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    /// Reports an error if this is a borrow of local data.\n+    /// This is called for all Yield statements on movable generators\n+    fn check_for_local_borrow(\n+        &mut self,\n+        borrow: &BorrowData<'tcx>,\n+        yield_span: Span)\n+    {\n+        fn borrow_of_local_data<'tcx>(place: &Place<'tcx>) -> bool {\n+            match place {\n+                Place::Static(..) => false,\n+                Place::Local(..) => true,\n+                Place::Projection(box proj) => {\n+                    match proj.elem {\n+                        // Reborrow of already borrowed data is ignored\n+                        // Any errors will be caught on the initial borrow\n+                        ProjectionElem::Deref => false,\n+\n+                        // For interior references and downcasts, find out if the base is local\n+                        ProjectionElem::Field(..) |\n+                        ProjectionElem::Index(..) |\n+                        ProjectionElem::ConstantIndex { .. } |\n+                        ProjectionElem::Subslice { .. } |\n+                        ProjectionElem::Downcast(..) => {\n+                            borrow_of_local_data(&proj.base)\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        debug!(\"check_for_local_borrow({:?})\", borrow);\n+\n+        if borrow_of_local_data(&borrow.borrowed_place) {\n+            self.tcx.cannot_borrow_across_generator_yield(self.retrieve_borrow_span(borrow),\n+                                                          yield_span,\n+                                                          Origin::Mir).emit();\n+        }\n+    }\n+\n     fn check_activations(\n         &mut self,\n         location: Location,"}, {"sha": "3223ff4dc8b5900b95eafdd3b69049f226b5d88d", "filename": "src/test/ui/generator/generator-with-nll.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.rs?ref=55c6c88782cfcce9b593c431200dad5f05bd9125", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z borrowck=compare\n+\n+#![feature(generators)]\n+#![feature(nll)]\n+\n+fn main() {\n+    || {\n+        // The reference in `_a` is a Legal with NLL since it ends before the yield\n+        let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+        let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+        //~^ borrow may still be in use when generator yields (Mir)\n+        yield ();\n+        println!(\"{}\", b);\n+    };\n+}"}, {"sha": "0a52a928f69d48bf269625e95b585e95420857d0", "filename": "src/test/ui/generator/generator-with-nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/55c6c88782cfcce9b593c431200dad5f05bd9125/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-with-nll.stderr?ref=55c6c88782cfcce9b593c431200dad5f05bd9125", "patch": "@@ -0,0 +1,29 @@\n+error[E0626]: borrow may still be in use when generator yields (Mir)\n+  --> $DIR/generator-with-nll.rs:20:17\n+   |\n+20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+   |                 ^^^^^^^^^\n+21 |         //~^ borrow may still be in use when generator yields (Mir)\n+22 |         yield ();\n+   |         -------- possible yield occurs here\n+\n+error[E0626]: borrow may still be in use when generator yields (Ast)\n+  --> $DIR/generator-with-nll.rs:19:23\n+   |\n+19 |         let _a = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+   |                       ^^^^\n+...\n+22 |         yield ();\n+   |         -------- possible yield occurs here\n+\n+error[E0626]: borrow may still be in use when generator yields (Ast)\n+  --> $DIR/generator-with-nll.rs:20:22\n+   |\n+20 |         let b = &mut true; //~ ERROR borrow may still be in use when generator yields (Ast)\n+   |                      ^^^^\n+21 |         //~^ borrow may still be in use when generator yields (Mir)\n+22 |         yield ();\n+   |         -------- possible yield occurs here\n+\n+error: aborting due to 3 previous errors\n+"}]}