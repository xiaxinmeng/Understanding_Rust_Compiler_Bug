{"sha": "ef0b99930e52ee90f9452542dd14f148bbbe13af", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmMGI5OTkzMGU1MmVlOTBmOTQ1MjU0MmRkMTRmMTQ4YmJiZTEzYWY=", "commit": {"author": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-11-08T13:54:03Z"}, "committer": {"name": "Robin Kruppe", "email": "robin.kruppe@gmail.com", "date": "2017-11-08T13:54:03Z"}, "message": "Disable u128 <-> float tests on emscripten", "tree": {"sha": "2543e3384f721d751df27137b8f9d0f89184d527", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2543e3384f721d751df27137b8f9d0f89184d527"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef0b99930e52ee90f9452542dd14f148bbbe13af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef0b99930e52ee90f9452542dd14f148bbbe13af", "html_url": "https://github.com/rust-lang/rust/commit/ef0b99930e52ee90f9452542dd14f148bbbe13af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef0b99930e52ee90f9452542dd14f148bbbe13af/comments", "author": null, "committer": null, "parents": [{"sha": "ce4664956f98e55842c0fd3472c12c087b4532c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce4664956f98e55842c0fd3472c12c087b4532c3", "html_url": "https://github.com/rust-lang/rust/commit/ce4664956f98e55842c0fd3472c12c087b4532c3"}], "stats": {"total": 68, "additions": 39, "deletions": 29}, "files": [{"sha": "6db4d7635f07f82c48016fe3fa10e903a2e605be", "filename": "src/test/run-pass/saturating-float-casts.rs", "status": "modified", "additions": 39, "deletions": 29, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ef0b99930e52ee90f9452542dd14f148bbbe13af/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef0b99930e52ee90f9452542dd14f148bbbe13af/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsaturating-float-casts.rs?ref=ef0b99930e52ee90f9452542dd14f148bbbe13af", "patch": "@@ -15,7 +15,9 @@\n extern crate test;\n \n use std::{f32, f64};\n-use std::{u8, i8, u16, i16, u32, i32, u64, i64, u128, i128};\n+use std::{u8, i8, u16, i16, u32, i32, u64, i64};\n+#[cfg(not(target_os=\"emscripten\"))]\n+use std::{u128, i128};\n use test::black_box;\n \n macro_rules! test {\n@@ -92,8 +94,13 @@ macro_rules! fptoui_tests {\n }\n \n pub fn main() {\n-    common_fptoi_tests!(f* -> i8 i16 i32 i64 i128 u8 u16 u32 u64 u128);\n-    fptoui_tests!(f* -> u8 u16 u32 u64 u128);\n+    common_fptoi_tests!(f* -> i8 i16 i32 i64 u8 u16 u32 u64);\n+    fptoui_tests!(f* -> u8 u16 u32 u64);\n+    // FIXME emscripten does not support i128\n+    #[cfg(not(target_os=\"emscripten\"))] {\n+        common_fptoi_tests!(f* -> i128 u128);\n+        fptoui_tests!(f* -> u128);\n+    }\n \n     // The following tests cover edge cases for some integer types.\n \n@@ -125,30 +132,33 @@ pub fn main() {\n     test!(4294967296., f* -> u32, 4294967295);\n \n     // # u128\n-    // float->int:\n-    test_c!(f32::MAX, f32 -> u128, 0xffffff00000000000000000000000000);\n-    // nextDown(f32::MAX) = 2^128 - 2 * 2^104\n-    const SECOND_LARGEST_F32: f32 = 340282326356119256160033759537265639424.;\n-    test_c!(SECOND_LARGEST_F32, f32 -> u128, 0xfffffe00000000000000000000000000);\n-\n-    // int->float:\n-    // f32::MAX - 0.5 ULP and smaller should be rounded down\n-    test_c!(0xfffffe00000000000000000000000000, u128 -> f32, SECOND_LARGEST_F32);\n-    test_c!(0xfffffe7fffffffffffffffffffffffff, u128 -> f32, SECOND_LARGEST_F32);\n-    test_c!(0xfffffe80000000000000000000000000, u128 -> f32, SECOND_LARGEST_F32);\n-    // numbers within < 0.5 ULP of f32::MAX it should be rounded to f32::MAX\n-    test_c!(0xfffffe80000000000000000000000001, u128 -> f32, f32::MAX);\n-    test_c!(0xfffffeffffffffffffffffffffffffff, u128 -> f32, f32::MAX);\n-    test_c!(0xffffff00000000000000000000000000, u128 -> f32, f32::MAX);\n-    test_c!(0xffffff00000000000000000000000001, u128 -> f32, f32::MAX);\n-    test_c!(0xffffff7fffffffffffffffffffffffff, u128 -> f32, f32::MAX);\n-    // f32::MAX + 0.5 ULP and greater should be rounded to infinity\n-    test_c!(0xffffff80000000000000000000000000, u128 -> f32, f32::INFINITY);\n-    test_c!(0xffffff80000000f00000000000000000, u128 -> f32, f32::INFINITY);\n-    test_c!(0xffffff87ffffffffffffffff00000001, u128 -> f32, f32::INFINITY);\n-\n-    // u128->f64 should not be affected by the u128->f32 checks\n-    test_c!(0xffffff80000000000000000000000000, u128 -> f64,\n-          340282356779733661637539395458142568448.0);\n-    test_c!(u128::MAX, u128 -> f64, 340282366920938463463374607431768211455.0);\n+    #[cfg(not(target_os=\"emscripten\"))]\n+    {\n+        // float->int:\n+        test_c!(f32::MAX, f32 -> u128, 0xffffff00000000000000000000000000);\n+        // nextDown(f32::MAX) = 2^128 - 2 * 2^104\n+        const SECOND_LARGEST_F32: f32 = 340282326356119256160033759537265639424.;\n+        test_c!(SECOND_LARGEST_F32, f32 -> u128, 0xfffffe00000000000000000000000000);\n+\n+        // int->float:\n+        // f32::MAX - 0.5 ULP and smaller should be rounded down\n+        test_c!(0xfffffe00000000000000000000000000, u128 -> f32, SECOND_LARGEST_F32);\n+        test_c!(0xfffffe7fffffffffffffffffffffffff, u128 -> f32, SECOND_LARGEST_F32);\n+        test_c!(0xfffffe80000000000000000000000000, u128 -> f32, SECOND_LARGEST_F32);\n+        // numbers within < 0.5 ULP of f32::MAX it should be rounded to f32::MAX\n+        test_c!(0xfffffe80000000000000000000000001, u128 -> f32, f32::MAX);\n+        test_c!(0xfffffeffffffffffffffffffffffffff, u128 -> f32, f32::MAX);\n+        test_c!(0xffffff00000000000000000000000000, u128 -> f32, f32::MAX);\n+        test_c!(0xffffff00000000000000000000000001, u128 -> f32, f32::MAX);\n+        test_c!(0xffffff7fffffffffffffffffffffffff, u128 -> f32, f32::MAX);\n+        // f32::MAX + 0.5 ULP and greater should be rounded to infinity\n+        test_c!(0xffffff80000000000000000000000000, u128 -> f32, f32::INFINITY);\n+        test_c!(0xffffff80000000f00000000000000000, u128 -> f32, f32::INFINITY);\n+        test_c!(0xffffff87ffffffffffffffff00000001, u128 -> f32, f32::INFINITY);\n+\n+        // u128->f64 should not be affected by the u128->f32 checks\n+        test_c!(0xffffff80000000000000000000000000, u128 -> f64,\n+              340282356779733661637539395458142568448.0);\n+        test_c!(u128::MAX, u128 -> f64, 340282366920938463463374607431768211455.0);\n+    }\n }"}]}