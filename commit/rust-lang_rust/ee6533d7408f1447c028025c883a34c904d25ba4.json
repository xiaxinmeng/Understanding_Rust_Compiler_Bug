{"sha": "ee6533d7408f1447c028025c883a34c904d25ba4", "node_id": "C_kwDOAAsO6NoAKGVlNjUzM2Q3NDA4ZjE0NDdjMDI4MDI1Yzg4M2EzNGM5MDRkMjViYTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T23:36:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-11T23:36:15Z"}, "message": "Auto merge of #105579 - matthiaskrgr:rollup-vw5dlqc, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #101648 (Better documentation for env::home_dir()'s broken behaviour)\n - #105283 (Don't call `diagnostic_hir_wf_check` query if we have infer variables)\n - #105369 (Detect spurious ; before assoc fn body)\n - #105472 (Make encode_info_for_trait_item use queries instead of accessing the HIR)\n - #105521 (separate heading from body)\n - #105555 (llvm-wrapper: adapt for LLVM API changes)\n - #105560 (Extend rustdoc hashtag prepended line test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "1edb59886180eb42468ce0c9b818dfeb6145207c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1edb59886180eb42468ce0c9b818dfeb6145207c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee6533d7408f1447c028025c883a34c904d25ba4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee6533d7408f1447c028025c883a34c904d25ba4", "html_url": "https://github.com/rust-lang/rust/commit/ee6533d7408f1447c028025c883a34c904d25ba4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee6533d7408f1447c028025c883a34c904d25ba4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdb07a8ec8e77aa10fb84fae1d4ff71c21180bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb07a8ec8e77aa10fb84fae1d4ff71c21180bb4", "html_url": "https://github.com/rust-lang/rust/commit/bdb07a8ec8e77aa10fb84fae1d4ff71c21180bb4"}, {"sha": "427ea68278099ef9bf7cd474f76bc6a519c9b3dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/427ea68278099ef9bf7cd474f76bc6a519c9b3dc", "html_url": "https://github.com/rust-lang/rust/commit/427ea68278099ef9bf7cd474f76bc6a519c9b3dc"}], "stats": {"total": 168, "additions": 150, "deletions": 18}, "files": [{"sha": "2865ea8927336143490193bddbeaec125dda6789", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -223,7 +223,11 @@ fromRust(LLVMRustCodeModel Model) {\n   case LLVMRustCodeModel::Large:\n     return CodeModel::Large;\n   case LLVMRustCodeModel::None:\n+#if LLVM_VERSION_LT(16, 0)\n     return None;\n+#else\n+    return std::nullopt;\n+#endif\n   default:\n     report_fatal_error(\"Bad CodeModel.\");\n   }"}, {"sha": "279b699185421982026fad27f12804d00a8e7d8d", "filename": "compiler/rustc_llvm/llvm-wrapper/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FRustWrapper.cpp?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -322,7 +322,13 @@ extern \"C\" LLVMAttributeRef LLVMRustCreateUWTableAttr(LLVMContextRef C, bool Asy\n }\n \n extern \"C\" LLVMAttributeRef LLVMRustCreateAllocSizeAttr(LLVMContextRef C, uint32_t ElementSizeArg) {\n-  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg, None));\n+  return wrap(Attribute::getWithAllocSizeArgs(*unwrap(C), ElementSizeArg,\n+#if LLVM_VERSION_LT(16, 0)\n+                                              None\n+#else\n+                                              std::nullopt\n+#endif\n+                                              ));\n }\n \n #if LLVM_VERSION_GE(15, 0)\n@@ -717,7 +723,11 @@ static std::optional<DIFile::ChecksumKind> fromRust(LLVMRustChecksumKind Kind) {\n #endif\n   switch (Kind) {\n   case LLVMRustChecksumKind::None:\n+#if LLVM_VERSION_LT(16, 0)\n     return None;\n+#else\n+    return std::nullopt;\n+#endif\n   case LLVMRustChecksumKind::MD5:\n     return DIFile::ChecksumKind::CSK_MD5;\n   case LLVMRustChecksumKind::SHA1:"}, {"sha": "29f9e82da75cc58b9b6f50b2f090dde45e50d7d2", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -1337,24 +1337,16 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         debug!(\"EncodeContext::encode_info_for_trait_item({:?})\", def_id);\n         let tcx = self.tcx;\n \n-        let ast_item = tcx.hir().expect_trait_item(def_id.expect_local());\n-        self.tables.impl_defaultness.set(def_id.index, ast_item.defaultness);\n+        let impl_defaultness = tcx.impl_defaultness(def_id.expect_local());\n+        self.tables.impl_defaultness.set(def_id.index, impl_defaultness);\n         let trait_item = tcx.associated_item(def_id);\n         self.tables.assoc_container.set(def_id.index, trait_item.container);\n \n         match trait_item.kind {\n             ty::AssocKind::Const => {}\n             ty::AssocKind::Fn => {\n-                let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind else { bug!() };\n-                match *m {\n-                    hir::TraitFn::Required(ref names) => {\n-                        record_array!(self.tables.fn_arg_names[def_id] <- *names)\n-                    }\n-                    hir::TraitFn::Provided(body) => {\n-                        record_array!(self.tables.fn_arg_names[def_id] <- self.tcx.hir().body_param_names(body))\n-                    }\n-                };\n-                self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n+                record_array!(self.tables.fn_arg_names[def_id] <- tcx.fn_arg_names(def_id));\n+                self.tables.asyncness.set(def_id.index, tcx.asyncness(def_id));\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n             }\n             ty::AssocKind::Type => {"}, {"sha": "beb9d55d454162d11da7442a650989fe9a72895a", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -706,9 +706,9 @@ impl<'a> Parser<'a> {\n             }\n             match parse_item(self) {\n                 Ok(None) => {\n-                    let is_unnecessary_semicolon = !items.is_empty()\n+                    let mut is_unnecessary_semicolon = !items.is_empty()\n                         // When the close delim is `)` in a case like the following, `token.kind` is expected to be `token::CloseDelim(Delimiter::Parenthesis)`,\n-                        // but the actual `token.kind` is `token::CloseDelim(Delimiter::Bracket)`.\n+                        // but the actual `token.kind` is `token::CloseDelim(Delimiter::Brace)`.\n                         // This is because the `token.kind` of the close delim is treated as the same as\n                         // that of the open delim in `TokenTreesReader::parse_token_tree`, even if the delimiters of them are different.\n                         // Therefore, `token.kind` should not be compared here.\n@@ -727,7 +727,13 @@ impl<'a> Parser<'a> {\n                             .span_to_snippet(self.prev_token.span)\n                             .map_or(false, |snippet| snippet == \"}\")\n                         && self.token.kind == token::Semi;\n-                    let semicolon_span = self.token.span;\n+                    let mut semicolon_span = self.token.span;\n+                    if !is_unnecessary_semicolon {\n+                        // #105369, Detect spurious `;` before assoc fn body\n+                        is_unnecessary_semicolon = self.token == token::OpenDelim(Delimiter::Brace)\n+                            && self.prev_token.kind == token::Semi;\n+                        semicolon_span = self.prev_token.span;\n+                    }\n                     // We have to bail or we'll potentially never make progress.\n                     let non_item_span = self.token.span;\n                     let is_let = self.token.is_keyword(kw::Let);"}, {"sha": "85d416c43f95a8512c66c4f2b0c8a99f282bee80", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -1710,7 +1710,8 @@ impl fmt::Display for Ident {\n     }\n }\n \n-/// This is the most general way to print identifiers.\n+/// The most general type to print identifiers.\n+///\n /// AST pretty-printer is used as a fallback for turning AST structures into token streams for\n /// proc macros. Additionally, proc macros may stringify their input and expect it survive the\n /// stringification (especially true for proc macro derives written between Rust 1.15 and 1.30)."}, {"sha": "82449a36b1d54115320fbc52c17d5f7ebdcdf5de", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -597,6 +597,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                 // can get a better error message by performing HIR-based well-formedness checking.\n                 if let ObligationCauseCode::WellFormed(Some(wf_loc)) =\n                     root_obligation.cause.code().peel_derives()\n+                    && !obligation.predicate.has_non_region_infer()\n                 {\n                     if let Some(cause) = self\n                         .tcx"}, {"sha": "183f9ab3b08f632a2a945bd905be038571a125a9", "filename": "library/std/src/env.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/library%2Fstd%2Fsrc%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/library%2Fstd%2Fsrc%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fenv.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -570,6 +570,13 @@ impl Error for JoinPathsError {\n ///\n /// [msdn]: https://docs.microsoft.com/en-us/windows/win32/api/userenv/nf-userenv-getuserprofiledirectorya\n ///\n+/// # Deprecation\n+///\n+/// This function is deprecated because the behaviour on Windows is not correct.\n+/// The 'HOME' environment variable is not standard on Windows, and may not produce\n+/// desired results; for instance, under Cygwin or Mingw it will return `/home/you`\n+/// when it should return `C:\\Users\\you`.\n+///\n /// # Examples\n ///\n /// ```\n@@ -582,7 +589,7 @@ impl Error for JoinPathsError {\n /// ```\n #[deprecated(\n     since = \"1.29.0\",\n-    note = \"This function's behavior is unexpected and probably not what you want. \\\n+    note = \"This function's behavior may be unexpected on Windows. \\\n             Consider using a crate from crates.io instead.\"\n )]\n #[must_use]"}, {"sha": "5878c58264ec361f7c008a1165a6e43d9f0bae2e", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -343,6 +343,14 @@ fn test_ascii_with_prepending_hashtag() {\n #..#.#....#....#....#..#.\n #..#.#....#....#....#..#.\n #..#.####.####.####..##..\n+</code></pre></div>\",\n+    );\n+    t(\n+        r#\"```markdown\n+# hello\n+```\"#,\n+        \"<div class=\\\"example-wrap\\\"><pre class=\\\"language-markdown\\\"><code>\\\n+# hello\n </code></pre></div>\",\n     );\n }"}, {"sha": "f123dbf4cae0caf38776560d002a327da9b79cb9", "filename": "src/test/ui/suggestions/issue-105226.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -0,0 +1,22 @@\n+use std::fmt;\n+\n+struct S {\n+}\n+\n+impl S {\n+    fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+        //~^ ERROR non-item in item list\n+        //~| ERROR associated function in `impl` without body\n+        println!(\"val: {}\", val);\n+    }\n+}\n+\n+impl S {\n+    fn hello_empty<P>(&self, val: &P) where P: fmt::Display;\n+    //~^ ERROR associated function in `impl` without body\n+}\n+\n+fn main() {\n+    let s = S{};\n+    s.hello(&32);\n+}"}, {"sha": "f16a80901039030b8b668a688d33bc8d3a450a45", "filename": "src/test/ui/suggestions/issue-105226.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -0,0 +1,31 @@\n+error: non-item in item list\n+  --> $DIR/issue-105226.rs:7:56\n+   |\n+LL | impl S {\n+   |        - item list starts here\n+LL |     fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+   |                                                      - ^ non-item starts here\n+   |                                                      |\n+   |                                                      help: consider removing this semicolon\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-105226.rs:7:5\n+   |\n+LL |     fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                      |\n+   |                                                      help: provide a definition for the function: `{ <body> }`\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-105226.rs:15:5\n+   |\n+LL |     fn hello_empty<P>(&self, val: &P) where P: fmt::Display;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                            |\n+   |                                                            help: provide a definition for the function: `{ <body> }`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "bdb84409d009d7ced0b030e68ca791af7d4b52bd", "filename": "src/test/ui/wf/hir-wf-canonicalized.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.rs?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -0,0 +1,18 @@\n+// incremental\n+\n+trait Foo {\n+    type V;\n+}\n+\n+trait Callback<T: Foo>: Fn(&Bar<'_, T>, &T::V) {}\n+\n+struct Bar<'a, T> {\n+    callback: Box<dyn Callback<dyn Callback<Bar<'a, T>>>>,\n+    //~^ ERROR the trait bound `Bar<'a, T>: Foo` is not satisfied\n+    //~| ERROR the trait bound `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static): Foo` is not satisfied\n+    //~| ERROR the size for values of type `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static)` cannot be known at compilation time\n+}\n+\n+impl<T: Foo> Bar<'_, Bar<'_, T>> {}\n+\n+fn main() {}"}, {"sha": "9fd0f9c81ebd8523a58f88f92ea37319b104fb91", "filename": "src/test/ui/wf/hir-wf-canonicalized.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee6533d7408f1447c028025c883a34c904d25ba4/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fhir-wf-canonicalized.stderr?ref=ee6533d7408f1447c028025c883a34c904d25ba4", "patch": "@@ -0,0 +1,32 @@\n+error[E0277]: the trait bound `Bar<'a, T>: Foo` is not satisfied\n+  --> $DIR/hir-wf-canonicalized.rs:10:15\n+   |\n+LL |     callback: Box<dyn Callback<dyn Callback<Bar<'a, T>>>>,\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `Bar<'a, T>`\n+\n+error[E0277]: the trait bound `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static): Foo` is not satisfied\n+  --> $DIR/hir-wf-canonicalized.rs:10:15\n+   |\n+LL |     callback: Box<dyn Callback<dyn Callback<Bar<'a, T>>>>,\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static)`\n+\n+error[E0277]: the size for values of type `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static)` cannot be known at compilation time\n+  --> $DIR/hir-wf-canonicalized.rs:10:15\n+   |\n+LL |     callback: Box<dyn Callback<dyn Callback<Bar<'a, T>>>>,\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `Sized` is not implemented for `(dyn Callback<Bar<'a, T>, for<'b, 'c, 'd> Output = ()> + 'static)`\n+note: required by a bound in `Bar`\n+  --> $DIR/hir-wf-canonicalized.rs:9:16\n+   |\n+LL | struct Bar<'a, T> {\n+   |                ^ required by this bound in `Bar`\n+help: consider relaxing the implicit `Sized` restriction\n+   |\n+LL | struct Bar<'a, T: ?Sized> {\n+   |                 ++++++++\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}