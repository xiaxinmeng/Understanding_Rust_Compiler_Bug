{"sha": "1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiYThlZDk2Y2ZlYmI5OTM2ZjVmZjJkNmFmOTYyMTU5YWIwOGM4ZTI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-12-02T21:33:16Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-12-02T21:33:16Z"}, "message": "Fix dogfood", "tree": {"sha": "4ba4ad5883213b25407b5d1f46d7811b4312139b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba4ad5883213b25407b5d1f46d7811b4312139b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCAAGBQJYQeihAAoJEF5CfHlMukXoXZsP/03OPxWdaAbVAQS5DViykrmr\nXUMoVlgiGlM6+BacWFGTCH1jca2em2LLst3zHwhHpZQgVBG6ycg4hh6nRJ8ELicz\nc7Rrnih2IBJykrh2a+X93dN/E2AHru44yw/5rxUjcRsGGjqowrTRt4ZYFGTJebxi\nqCxCrOU9n/LJPPvj1ZCC8FcZ1Vy88rIpt2xrKPnUJ2rh97lMxEN4FpBlSV4qH++s\nl6HKUo7OwJMSDVgdw+d8BNeM8IhzHlFpfqD97yp5z+7lf1iUrLw7cn4ZTtx/svUY\nANgJfFI6slnCjlyqe+kfdIQXyvJ/AXjh8zewjtIQXPPXZxLeZr0+AIrHkxOAPFw/\nMN9owziZUUqMlxbT7lOTZmBZOA3++ieNrdEPwULiziS2sUM8TbfjC5VROcKd6cWA\n952WjXI/tMBhpcrw7Rpvy4HtGMgCUJwPJPw46yOKiULH7bUb5VS39ZmEt4Tn2+01\nVDEXq4XNiskNXrb4DoLI8OXNlLvcYWtBturu4/H32C91/zVitlYDEeATHijOGL2E\nJlMQlxskRSZB55hG2ypKctMdq4pXF9O0P8UDty1utLFFo4S0H9Nmn0ld6UxUDXIJ\nbe2owBe0QRJEv8x+xdpCCMaHWUhF/+rliYJM6Kioreb3+6cF2cjoeU8RzHITrRtl\navlBn0zNUwBDyR75ygDO\n=N0hf\n-----END PGP SIGNATURE-----", "payload": "tree 4ba4ad5883213b25407b5d1f46d7811b4312139b\nparent 65ff2df7e7f7522a40bc48545d2bf8e7ce4926be\nauthor mcarton <cartonmartin+git@gmail.com> 1480714396 +0100\ncommitter mcarton <cartonmartin+git@gmail.com> 1480714396 +0100\n\nFix dogfood\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "html_url": "https://github.com/rust-lang/rust/commit/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65ff2df7e7f7522a40bc48545d2bf8e7ce4926be", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ff2df7e7f7522a40bc48545d2bf8e7ce4926be", "html_url": "https://github.com/rust-lang/rust/commit/65ff2df7e7f7522a40bc48545d2bf8e7ce4926be"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "57e25b444842703d579dbc1ad6b68448e6b7bcc3", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "patch": "@@ -241,7 +241,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n \n     fn collect_anonymous_lifetimes(&mut self, qpath: &QPath, ty: &Ty) {\n         let last_path_segment = &last_path_segment(qpath).parameters;\n-        if let &AngleBracketedParameters(ref params) = last_path_segment {\n+        if let AngleBracketedParameters(ref params) = *last_path_segment {\n             if params.lifetimes.is_empty() {\n                 match self.cx.tcx.tables().qpath_def(qpath, ty.id) {\n                     Def::TyAlias(def_id) |"}, {"sha": "294ca88b70f33870ea2fd2a4cb657eeec2203d77", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "patch": "@@ -77,7 +77,7 @@ impl LateLintPass for TypePass {\n         if let TyPath(ref qpath) = ast_ty.node {\n             let def = cx.tcx.tables().qpath_def(qpath, ast_ty.id);\n             if let Some(def_id) = opt_def_id(def) {\n-                if def_id == cx.tcx.lang_items.owned_box().unwrap() {\n+                if Some(def_id) == cx.tcx.lang_items.owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n                         let PathParameters::AngleBracketedParameters(ref ag) = last.parameters,"}, {"sha": "05bd059d58abdc513d32c7b0b0aefebdf963ddd8", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=1ba8ed96cfebb9936f5ff2d6af962159ab08c8e2", "patch": "@@ -159,9 +159,6 @@ pub fn match_def_path(cx: &LateContext, def_id: DefId, path: &[&str]) -> bool {\n     let mut apb = AbsolutePathBuffer { names: vec![] };\n \n     cx.tcx.push_item_path(&mut apb, def_id);\n-    if path == paths::VEC_FROM_ELEM {\n-        println!(\"{:#?} == {:#?}\", apb.names, path);\n-    }\n \n     apb.names.len() == path.len() &&\n     apb.names.iter().zip(path.iter()).all(|(a, &b)| &**a == b)\n@@ -214,15 +211,15 @@ pub fn last_path_segment(path: &QPath) -> &PathSegment {\n         QPath::Resolved(_, ref path) => path.segments\n                                             .last()\n                                             .expect(\"A path must have at least one segment\"),\n-        QPath::TypeRelative(_, ref seg) => &seg,\n+        QPath::TypeRelative(_, ref seg) => seg,\n     }\n }\n \n pub fn single_segment_path(path: &QPath) -> Option<&PathSegment> {\n     match *path {\n         QPath::Resolved(_, ref path) if path.segments.len() == 1 => Some(&path.segments[0]),\n         QPath::Resolved(..) => None,\n-        QPath::TypeRelative(_, ref seg) => Some(&seg),\n+        QPath::TypeRelative(_, ref seg) => Some(seg),\n     }\n }\n "}]}