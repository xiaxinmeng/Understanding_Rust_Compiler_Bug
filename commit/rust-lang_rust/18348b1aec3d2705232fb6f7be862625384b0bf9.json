{"sha": "18348b1aec3d2705232fb6f7be862625384b0bf9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MzQ4YjFhZWMzZDI3MDUyMzJmYjZmN2JlODYyNjI1Mzg0YjBiZjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-23T09:36:28Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-08-23T09:50:51Z"}, "message": "Rustup to rustc 1.47.0-nightly (663d2f5cd 2020-08-22)", "tree": {"sha": "1a193b7fe4b43de885b0094207b6b6ee2870f7ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a193b7fe4b43de885b0094207b6b6ee2870f7ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18348b1aec3d2705232fb6f7be862625384b0bf9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18348b1aec3d2705232fb6f7be862625384b0bf9", "html_url": "https://github.com/rust-lang/rust/commit/18348b1aec3d2705232fb6f7be862625384b0bf9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18348b1aec3d2705232fb6f7be862625384b0bf9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec3722587388d3ee89d4dfb8f199eb5c5c345486", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3722587388d3ee89d4dfb8f199eb5c5c345486", "html_url": "https://github.com/rust-lang/rust/commit/ec3722587388d3ee89d4dfb8f199eb5c5c345486"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "009b2fed0f93a1c039ff0d1db82ce6a03cbc6276", "filename": "patches/0022-core-Disable-not-compiling-tests.patch", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18348b1aec3d2705232fb6f7be862625384b0bf9/patches%2F0022-core-Disable-not-compiling-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/18348b1aec3d2705232fb6f7be862625384b0bf9/patches%2F0022-core-Disable-not-compiling-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0022-core-Disable-not-compiling-tests.patch?ref=18348b1aec3d2705232fb6f7be862625384b0bf9", "patch": "@@ -98,7 +98,7 @@ index 1a6be3a..42dbd59 100644\n +*/\n  \n  #[test]\n- #[cfg_attr(miri, ignore)] // Miri does not compute a maximal `mid` for `align_offset`\n+ fn align_offset_zst() {\n diff --git a/library/core/tests/slice.rs b/library/core/tests/slice.rs\n index 6609bc3..241b497 100644\n --- a/library/core/tests/slice.rs"}, {"sha": "ff8cece212cc5b5f8a2538ce20c8a172394b362f", "filename": "patches/0023-core-Ignore-failing-tests.patch", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/18348b1aec3d2705232fb6f7be862625384b0bf9/patches%2F0023-core-Ignore-failing-tests.patch", "raw_url": "https://github.com/rust-lang/rust/raw/18348b1aec3d2705232fb6f7be862625384b0bf9/patches%2F0023-core-Ignore-failing-tests.patch", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/patches%2F0023-core-Ignore-failing-tests.patch?ref=18348b1aec3d2705232fb6f7be862625384b0bf9", "patch": "@@ -30,6 +30,19 @@ index 4bc44e9..8e3c7a4 100644\n  \n  #[test]\n  fn empty_array_is_always_default() {\n+@@ -304,6 +304,7 @@ fn array_map() {\n+     assert_eq!(b, [1, 2, 3]);\n+ }\n+ \n++/*\n+ // See note on above test for why `should_panic` is used.\n+ #[test]\n+ #[should_panic(expected = \"test succeeded\")]\n+@@ -332,3 +333,4 @@ fn array_map_drop_safety() {\n+     assert_eq!(DROPPED.load(Ordering::SeqCst), num_to_create);\n+     panic!(\"test succeeded\")\n+ }\n++*/\n diff --git a/library/core/tests/num/mod.rs b/library/core/tests/num/mod.rs\n index a17c094..5bb11d2 100644\n --- a/library/core/tests/num/mod.rs"}, {"sha": "e3f84f1ce4d6b05140f956d76b0648b5b0d2cce3", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18348b1aec3d2705232fb6f7be862625384b0bf9/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/18348b1aec3d2705232fb6f7be862625384b0bf9/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=18348b1aec3d2705232fb6f7be862625384b0bf9", "patch": "@@ -1 +1 @@\n-nightly-2020-08-09\n+nightly-2020-08-23"}, {"sha": "b83b09baa2bb6a643cdf29629a604d721b101bee", "filename": "src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/18348b1aec3d2705232fb6f7be862625384b0bf9/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18348b1aec3d2705232fb6f7be862625384b0bf9/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=18348b1aec3d2705232fb6f7be862625384b0bf9", "patch": "@@ -760,6 +760,7 @@ fn trans_stmt<'tcx>(\n                 _ => fx.tcx.sess.span_fatal(stmt.source_info.span, \"Inline assembly is not supported\"),\n             }\n         }\n+        StatementKind::Coverage { .. } => fx.tcx.sess.fatal(\"-Zcoverage is unimplemented\"),\n     }\n }\n "}, {"sha": "933694b8292bc93f33d6eaaaef2f4a1de43b92bd", "filename": "src/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18348b1aec3d2705232fb6f7be862625384b0bf9/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18348b1aec3d2705232fb6f7be862625384b0bf9/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=18348b1aec3d2705232fb6f7be862625384b0bf9", "patch": "@@ -364,15 +364,15 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n             data_ctx.set_segment_section(\"\", &*section_name);\n         }\n \n-        let bytes = alloc.inspect_with_undef_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n+        let bytes = alloc.inspect_with_uninit_and_ptr_outside_interpreter(0..alloc.len()).to_vec();\n         data_ctx.define(bytes.into_boxed_slice());\n \n         for &(offset, (_tag, reloc)) in alloc.relocations().iter() {\n             let addend = {\n                 let endianness = tcx.data_layout.endian;\n                 let offset = offset.bytes() as usize;\n                 let ptr_size = tcx.data_layout.pointer_size;\n-                let bytes = &alloc.inspect_with_undef_and_ptr_outside_interpreter(offset..offset + ptr_size.bytes() as usize);\n+                let bytes = &alloc.inspect_with_uninit_and_ptr_outside_interpreter(offset..offset + ptr_size.bytes() as usize);\n                 read_target_uint(endianness, bytes).unwrap()\n             };\n "}]}