{"sha": "e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "node_id": "C_kwDOAAsO6NoAKGU3YzI1YzNhOTc4NjRjZDc0MGVhODJhNmVhNDBkODAxY2ZjM2ZhZTA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T00:37:41Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-24T04:16:09Z"}, "message": "Box `user_ty` fields in `thir::ExprKind`.\n\nThis shrinks several large variants of `ExprKind`.", "tree": {"sha": "eeee0c21c4c7603b5a2883a0a48ae1f44ab206f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eeee0c21c4c7603b5a2883a0a48ae1f44ab206f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "html_url": "https://github.com/rust-lang/rust/commit/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9429b1cec47ae4d2be8c891a482142e9efd4b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9429b1cec47ae4d2be8c891a482142e9efd4b24", "html_url": "https://github.com/rust-lang/rust/commit/c9429b1cec47ae4d2be8c891a482142e9efd4b24"}], "stats": {"total": 90, "additions": 47, "deletions": 43}, "files": [{"sha": "9064ac3f07f7aeef69db41587d59975a96db0c7a", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "patch": "@@ -15,19 +15,17 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::CanonicalUserTypeAnnotation;\n-use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts, UserType};\n+use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts};\n+use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n-\n-use rustc_span::def_id::LocalDefId;\n use std::fmt;\n use std::ops::Index;\n \n@@ -106,6 +104,8 @@ pub struct Block {\n     pub safety_mode: BlockSafety,\n }\n \n+type UserTy<'tcx> = Option<Box<CanonicalUserType<'tcx>>>;\n+\n #[derive(Clone, Debug, HashStable)]\n pub struct Adt<'tcx> {\n     /// The ADT we're constructing.\n@@ -116,7 +116,7 @@ pub struct Adt<'tcx> {\n \n     /// Optional user-given substs: for something like `let x =\n     /// Bar::<T> { ... }`.\n-    pub user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+    pub user_ty: UserTy<'tcx>,\n \n     pub fields: Box<[FieldExpr]>,\n     /// The base, e.g. `Foo {x: 1, .. base}`.\n@@ -377,13 +377,13 @@ pub enum ExprKind<'tcx> {\n     PlaceTypeAscription {\n         source: ExprId,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A type ascription on a value, e.g. `42: i32`.\n     ValueTypeAscription {\n         source: ExprId,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A closure definition.\n     Closure {\n@@ -401,17 +401,17 @@ pub enum ExprKind<'tcx> {\n     /// For literals that don't correspond to anything in the HIR\n     NonHirLiteral {\n         lit: ty::ScalarInt,\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A literal of a ZST type.\n     ZstLiteral {\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// Associated constants and named constants\n     NamedConst {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     ConstParam {\n         param: ty::ParamConst,\n@@ -800,7 +800,7 @@ mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block, 56);\n-    static_assert_size!(Expr<'_>, 104);\n+    static_assert_size!(Expr<'_>, 88);\n     static_assert_size!(Pat<'_>, 24);\n     static_assert_size!(Stmt<'_>, 120);\n }"}, {"sha": "b316a6eeac1ca7e6bee507b919fd342af7edd4e1", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "patch": "@@ -41,35 +41,35 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 Constant { span, user_ty: None, literal }\n             }\n-            ExprKind::NonHirLiteral { lit, user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::NonHirLiteral { lit, ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });\n                 let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }\n-            ExprKind::ZstLiteral { user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::ZstLiteral { ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });\n                 let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }\n-            ExprKind::NamedConst { def_id, substs, user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });"}, {"sha": "b8277f28cdc4300200b49dab6f758454996ad23a", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "patch": "@@ -513,7 +513,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(place_builder)\n             }\n \n-            ExprKind::PlaceTypeAscription { source, user_ty } => {\n+            ExprKind::PlaceTypeAscription { source, ref user_ty } => {\n                 let place_builder = unpack!(\n                     block = this.expr_as_place(\n                         block,\n@@ -522,11 +522,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         fake_borrow_temps,\n                     )\n                 );\n-                if let Some(user_ty) = user_ty {\n+                if let Some(box user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty,\n+                            user_ty: *user_ty,\n                             inferred_ty: expr.ty,\n                         });\n \n@@ -547,15 +547,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 block.and(place_builder)\n             }\n-            ExprKind::ValueTypeAscription { source, user_ty } => {\n+            ExprKind::ValueTypeAscription { source, ref user_ty } => {\n                 let source = &this.thir[source];\n                 let temp =\n                     unpack!(block = this.as_temp(block, source.temp_lifetime, source, mutability));\n-                if let Some(user_ty) = user_ty {\n+                if let Some(box user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty,\n+                            user_ty: *user_ty,\n                             inferred_ty: expr.ty,\n                         });\n                     this.cfg.push("}, {"sha": "7ebcc53693ffcaba6de22cc34f7a865e7f55143d", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 adt_def,\n                 variant_index,\n                 substs,\n-                user_ty,\n+                ref user_ty,\n                 ref fields,\n                 ref base,\n             }) => {\n@@ -378,10 +378,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n \n                 let inferred_ty = expr.ty;\n-                let user_ty = user_ty.map(|ty| {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span: source_info.span,\n-                        user_ty: ty,\n+                        user_ty: *user_ty,\n                         inferred_ty,\n                     })\n                 });"}, {"sha": "0db8748cb25dc87d807128ed2c4a7a170fb5d151", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7c25c3a97864cd740ea82a6ea40d801cfc3fae0/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=e7c25c3a97864cd740ea82a6ea40d801cfc3fae0", "patch": "@@ -329,7 +329,7 @@ impl<'tcx> Cx<'tcx> {\n                                 if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {\n                                     *did = adt_def.did();\n                                 }\n-                                u_ty\n+                                Box::new(u_ty)\n                             });\n                         debug!(\"make_mirror_unadjusted: (call) user_ty={:?}\", user_ty);\n \n@@ -464,7 +464,7 @@ impl<'tcx> Cx<'tcx> {\n                 ty::Adt(adt, substs) => match adt.adt_kind() {\n                     AdtKind::Struct | AdtKind::Union => {\n                         let user_provided_types = self.typeck_results().user_provided_types();\n-                        let user_ty = user_provided_types.get(expr.hir_id).copied();\n+                        let user_ty = user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                         debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n                         ExprKind::Adt(Box::new(Adt {\n                             adt_def: *adt,\n@@ -490,7 +490,8 @@ impl<'tcx> Cx<'tcx> {\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let user_provided_types =\n                                     self.typeck_results().user_provided_types();\n-                                let user_ty = user_provided_types.get(expr.hir_id).copied();\n+                                let user_ty =\n+                                    user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                                 debug!(\"make_mirror_unadjusted: (variant) user_ty={:?}\", user_ty);\n                                 ExprKind::Adt(Box::new(Adt {\n                                     adt_def: *adt,\n@@ -712,14 +713,17 @@ impl<'tcx> Cx<'tcx> {\n                     });\n                     debug!(\"make_mirror_unadjusted: (cast) user_ty={:?}\", user_ty);\n \n-                    ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }\n+                    ExprKind::ValueTypeAscription {\n+                        source: cast_expr,\n+                        user_ty: Some(Box::new(*user_ty)),\n+                    }\n                 } else {\n                     cast\n                 }\n             }\n             hir::ExprKind::Type(ref source, ref ty) => {\n                 let user_provided_types = self.typeck_results.user_provided_types();\n-                let user_ty = user_provided_types.get(ty.hir_id).copied();\n+                let user_ty = user_provided_types.get(ty.hir_id).copied().map(Box::new);\n                 debug!(\"make_mirror_unadjusted: (type) user_ty={:?}\", user_ty);\n                 let mirrored = self.mirror_expr(source);\n                 if source.is_syntactic_place_expr() {\n@@ -748,7 +752,7 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         hir_id: hir::HirId,\n         res: Res,\n-    ) -> Option<ty::CanonicalUserType<'tcx>> {\n+    ) -> Option<Box<ty::CanonicalUserType<'tcx>>> {\n         debug!(\"user_substs_applied_to_res: res={:?}\", res);\n         let user_provided_type = match res {\n             // A reference to something callable -- e.g., a fn, method, or\n@@ -759,19 +763,19 @@ impl<'tcx> Cx<'tcx> {\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _) => {\n-                self.typeck_results().user_provided_types().get(hir_id).copied()\n+                self.typeck_results().user_provided_types().get(hir_id).copied().map(Box::new)\n             }\n \n             // A unit struct/variant which is used as a value (e.g.,\n             // `None`). This has the type of the enum/struct that defines\n             // this variant -- but with the substitutions given by the\n             // user.\n             Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {\n-                self.user_substs_applied_to_ty_of_hir_id(hir_id)\n+                self.user_substs_applied_to_ty_of_hir_id(hir_id).map(Box::new)\n             }\n \n             // `Self` is used in expression as a tuple struct constructor or a unit struct constructor\n-            Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),\n+            Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id).map(Box::new),\n \n             _ => bug!(\"user_substs_applied_to_res: unexpected res {:?} at {:?}\", res, hir_id),\n         };\n@@ -846,13 +850,13 @@ impl<'tcx> Cx<'tcx> {\n \n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);\n-                ExprKind::NamedConst { def_id, substs, user_ty: user_ty }\n+                ExprKind::NamedConst { def_id, substs, user_ty }\n             }\n \n             Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n                 let user_provided_types = self.typeck_results.user_provided_types();\n-                let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n-                debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n+                let user_ty = user_provided_types.get(expr.hir_id).copied().map(Box::new);\n+                debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n                 let ty = self.typeck_results().node_type(expr.hir_id);\n                 match ty.kind() {\n                     // A unit struct/variant which is used as a value.\n@@ -861,7 +865,7 @@ impl<'tcx> Cx<'tcx> {\n                         adt_def: *adt_def,\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,\n-                        user_ty: user_provided_type,\n+                        user_ty,\n                         fields: Box::new([]),\n                         base: None,\n                     })),"}]}