{"sha": "867de8bbb87667a721dd409cefc294b0a1c303a1", "node_id": "C_kwDOAAsO6NoAKDg2N2RlOGJiYjg3NjY3YTcyMWRkNDA5Y2VmYzI5NGIwYTFjMzAzYTE", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-09T07:35:01Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-12T08:55:35Z"}, "message": "Remove `graph` parameter from `try_force_from_dep_node`", "tree": {"sha": "a3169ca0e395818798ca138ba83a4a6c3bdabf0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3169ca0e395818798ca138ba83a4a6c3bdabf0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867de8bbb87667a721dd409cefc294b0a1c303a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867de8bbb87667a721dd409cefc294b0a1c303a1", "html_url": "https://github.com/rust-lang/rust/commit/867de8bbb87667a721dd409cefc294b0a1c303a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867de8bbb87667a721dd409cefc294b0a1c303a1/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dd0f20ee65883d12775ae4d552596b815ac9977", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dd0f20ee65883d12775ae4d552596b815ac9977", "html_url": "https://github.com/rust-lang/rust/commit/8dd0f20ee65883d12775ae4d552596b815ac9977"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "0963e8e8bdfc0618a357c2478d99517df44c1c06", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/867de8bbb87667a721dd409cefc294b0a1c303a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867de8bbb87667a721dd409cefc294b0a1c303a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=867de8bbb87667a721dd409cefc294b0a1c303a1", "patch": "@@ -776,7 +776,7 @@ impl<K: DepKind> DepGraphData<K> {\n \n         // We failed to mark it green, so we try to force the query.\n         debug!(\"trying to force dependency {dep_dep_node:?}\");\n-        if !qcx.dep_context().try_force_from_dep_node(*dep_dep_node, data, frame) {\n+        if !qcx.dep_context().try_force_from_dep_node(*dep_dep_node, frame) {\n             // The DepNode could not be forced.\n             debug!(\"dependency {dep_dep_node:?} could not be forced\");\n             return None;\n@@ -1416,17 +1416,19 @@ impl DepNodeColorMap {\n #[inline(never)]\n #[cold]\n pub(crate) fn print_markframe_trace<K: DepKind>(\n-    graph: &DepGraphData<K>,\n+    graph: &DepGraph<K>,\n     frame: Option<&MarkFrame<'_>>,\n ) {\n+    let data = graph.data.as_ref().unwrap();\n+\n     eprintln!(\"there was a panic while trying to force a dep node\");\n     eprintln!(\"try_mark_green dep node stack:\");\n \n     let mut i = 0;\n     let mut current = frame;\n     while let Some(frame) = current {\n             // Do not try to rely on DepNode's Debug implementation, since it may panic.\n-        let node = graph.previous.index_to_node(frame.index);\n+        let node = data.previous.index_to_node(frame.index);\n         eprintln!(\"#{i} {:?} ({})\", node.kind, node.hash);\n         current = frame.parent;\n         i += 1;"}, {"sha": "40e7131987fabf44fc226b3d37d372f81e9cd376", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/867de8bbb87667a721dd409cefc294b0a1c303a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867de8bbb87667a721dd409cefc294b0a1c303a1/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=867de8bbb87667a721dd409cefc294b0a1c303a1", "patch": "@@ -20,7 +20,7 @@ use rustc_session::Session;\n use std::hash::Hash;\n use std::{fmt, panic};\n \n-use self::graph::{print_markframe_trace, DepGraphData, MarkFrame};\n+use self::graph::{print_markframe_trace, MarkFrame};\n \n pub trait DepContext: Copy {\n     type DepKind: self::DepKind;\n@@ -56,11 +56,10 @@ pub trait DepContext: Copy {\n \n     /// Try to force a dep node to execute and see if it's green.\n     #[inline]\n-    #[instrument(skip(self, graph, frame), level = \"debug\")]\n+    #[instrument(skip(self, frame), level = \"debug\")]\n     fn try_force_from_dep_node(\n         self,\n         dep_node: DepNode<Self::DepKind>,\n-        graph: &DepGraphData<Self::DepKind>,\n         frame: Option<&MarkFrame<'_>>,\n     ) -> bool {\n         let cb = self.dep_kind_info(dep_node.kind);\n@@ -69,7 +68,7 @@ pub trait DepContext: Copy {\n                 f(self, dep_node);\n             })) {\n                 if !value.is::<rustc_errors::FatalErrorMarker>() {\n-                    print_markframe_trace(graph, frame);\n+                    print_markframe_trace(self.dep_graph(), frame);\n                 }\n                 panic::resume_unwind(value)\n             }"}]}