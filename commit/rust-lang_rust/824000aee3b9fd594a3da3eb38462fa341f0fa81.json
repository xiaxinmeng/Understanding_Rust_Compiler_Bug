{"sha": "824000aee3b9fd594a3da3eb38462fa341f0fa81", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNDAwMGFlZTNiOWZkNTk0YTNkYTNlYjM4NDYyZmEzNDFmMGZhODE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-31T12:51:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-31T12:51:58Z"}, "message": "Auto merge of #35585 - Kha:gdb-qualified, r=michaelwoerister\n\ngdb: Fix pretty-printing special-cased Rust types\n\ngdb trunk now reports fully qualified type names, just like lldb. Move lldb code for extracting unqualified names to shared file.\n\nFor current releases of gdb, `extract_type_name` should just be a no-op.\n\nFixes #35155", "tree": {"sha": "5847bc77bccdd41495fddca858f30f22b4588b42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5847bc77bccdd41495fddca858f30f22b4588b42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81", "html_url": "https://github.com/rust-lang/rust/commit/824000aee3b9fd594a3da3eb38462fa341f0fa81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/824000aee3b9fd594a3da3eb38462fa341f0fa81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603d9ccfbe564e280389e9b3e880d0c53623433d", "url": "https://api.github.com/repos/rust-lang/rust/commits/603d9ccfbe564e280389e9b3e880d0c53623433d", "html_url": "https://github.com/rust-lang/rust/commit/603d9ccfbe564e280389e9b3e880d0c53623433d"}, {"sha": "471407205b0f0daccc57fe20e5260c0b199aa464", "url": "https://api.github.com/repos/rust-lang/rust/commits/471407205b0f0daccc57fe20e5260c0b199aa464", "html_url": "https://github.com/rust-lang/rust/commit/471407205b0f0daccc57fe20e5260c0b199aa464"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "e713c7c8387fc51fcaf23b2d8538ea73f0fb166e", "filename": "src/etc/debugger_pretty_printers_common.py", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Fdebugger_pretty_printers_common.py", "raw_url": "https://github.com/rust-lang/rust/raw/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Fdebugger_pretty_printers_common.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fdebugger_pretty_printers_common.py?ref=824000aee3b9fd594a3da3eb38462fa341f0fa81", "patch": "@@ -324,3 +324,20 @@ def extract_length_and_ptr_from_slice(slice_val):\n \n     assert data_ptr.type.get_dwarf_type_kind() == DWARF_TYPE_CODE_PTR\n     return (length, data_ptr)\n+\n+UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n+\n+def extract_type_name(qualified_type_name):\n+    '''Extracts the type name from a fully qualified path'''\n+    if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n+        return qualified_type_name\n+\n+    end_of_search = qualified_type_name.find(\"<\")\n+    if end_of_search < 0:\n+        end_of_search = len(qualified_type_name)\n+\n+    index = qualified_type_name.rfind(\"::\", 0, end_of_search)\n+    if index < 0:\n+        return qualified_type_name\n+    else:\n+        return qualified_type_name[index + 2:]"}, {"sha": "9b163c835c65058a3fcac383e0e3f519ae6e7d1d", "filename": "src/etc/gdb_rust_pretty_printing.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Fgdb_rust_pretty_printing.py", "raw_url": "https://github.com/rust-lang/rust/raw/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Fgdb_rust_pretty_printing.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_rust_pretty_printing.py?ref=824000aee3b9fd594a3da3eb38462fa341f0fa81", "patch": "@@ -36,7 +36,7 @@ def get_unqualified_type_name(self):\n         if tag is None:\n             return tag\n \n-        return tag.replace(\"&'static \", \"&\")\n+        return rustpp.extract_type_name(tag).replace(\"&'static \", \"&\")\n \n     def get_dwarf_type_kind(self):\n         if self.ty.code == gdb.TYPE_CODE_STRUCT:"}, {"sha": "c0a4c3e9ece932e312999fb3e3cf58fb95069deb", "filename": "src/etc/lldb_rust_formatters.py", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Flldb_rust_formatters.py", "raw_url": "https://github.com/rust-lang/rust/raw/824000aee3b9fd594a3da3eb38462fa341f0fa81/src%2Fetc%2Flldb_rust_formatters.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_rust_formatters.py?ref=824000aee3b9fd594a3da3eb38462fa341f0fa81", "patch": "@@ -29,7 +29,7 @@ def get_unqualified_type_name(self):\n         if qualified_name is None:\n             return qualified_name\n \n-        return extract_type_name(qualified_name).replace(\"&'static \", \"&\")\n+        return rustpp.extract_type_name(qualified_name).replace(\"&'static \", \"&\")\n \n     def get_dwarf_type_kind(self):\n         type_class = self.ty.GetTypeClass()\n@@ -204,7 +204,7 @@ def render_child(child_index):\n             # LLDB is not good at handling zero-sized values, so we have to help\n             # it a little\n             if field.GetType().GetByteSize() == 0:\n-                return this + extract_type_name(field.GetType().GetName())\n+                return this + rustpp.extract_type_name(field.GetType().GetName())\n             else:\n                 return this + \"<invalid value>\"\n \n@@ -274,23 +274,6 @@ def print_std_string_val(val, internal_dict):\n # Helper Functions\n #=--------------------------------------------------------------------------------------------------\n \n-UNQUALIFIED_TYPE_MARKERS = frozenset([\"(\", \"[\", \"&\", \"*\"])\n-\n-def extract_type_name(qualified_type_name):\n-    '''Extracts the type name from a fully qualified path'''\n-    if qualified_type_name[0] in UNQUALIFIED_TYPE_MARKERS:\n-        return qualified_type_name\n-\n-    end_of_search = qualified_type_name.find(\"<\")\n-    if end_of_search < 0:\n-        end_of_search = len(qualified_type_name)\n-\n-    index = qualified_type_name.rfind(\"::\", 0, end_of_search)\n-    if index < 0:\n-        return qualified_type_name\n-    else:\n-        return qualified_type_name[index + 2:]\n-\n def print_array_of_values(array_name, data_ptr_val, length, internal_dict):\n     '''Prints a contigous memory range, interpreting it as values of the\n        pointee-type of data_ptr_val.'''"}]}