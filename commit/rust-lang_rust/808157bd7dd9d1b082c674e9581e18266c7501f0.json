{"sha": "808157bd7dd9d1b082c674e9581e18266c7501f0", "node_id": "C_kwDOAAsO6NoAKDgwODE1N2JkN2RkOWQxYjA4MmM2NzRlOTU4MWUxODI2NmM3NTAxZjA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-25T09:44:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-25T09:44:38Z"}, "message": "Rollup merge of #104654 - thomcc:alloc-tests-unsafe_op_in_unsafe_fn, r=Mark-Simulacrum\n\nAdd `#![deny(unsafe_op_in_unsafe_fn)]` in liballoc tests\n\nIn https://github.com/rust-lang/rust/pull/104647#discussion_r1027332930 it was mentioned that liballoc tests should probably have this enabled (we have it pretty much everywhere else in the stdlib), so I added it.\n\nThis will probably conflict with https://github.com/rust-lang/rust/pull/104647 so I'll rebase after that lands.", "tree": {"sha": "dfeed100c427a97a9ca908fa5518096fd38d76f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfeed100c427a97a9ca908fa5518096fd38d76f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/808157bd7dd9d1b082c674e9581e18266c7501f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjgI6GCRBK7hj4Ov3rIwAAvpEIAJYiC+QmTQgkvSIzNigy6wze\nMvr1+Bm85luCBOEoLKVDElp+gM59IHLvRbX6Ah2xKCvWPBy2jwpWEucB6gq3Daad\nIiakyPIalI6+h21xzJnDEX+ecZWsIyYp+8fgmuJJ8Uf9mNgbB0QUWQfpPcNfhCxJ\nwF4qwbH9wRD8PtXYxbKwuhp/DThmzPQMGLxaGfDyxjfiiqh/gIQfwqD997Ci5yfI\nNUuxd/q3u57at5QYRtAyEQcrWRpX7IrDleB7Yyb0TC3FR2C5D/eB3x39NqnBSQTH\n9v1KH7wZvr7BLHLssD9ZO71/HNF2bTrRnwjxSOXk2yxcx3TWQb7B9puTj0rEScw=\n=UPlR\n-----END PGP SIGNATURE-----\n", "payload": "tree dfeed100c427a97a9ca908fa5518096fd38d76f0\nparent a9313e9077aa594afe80da8e423de614cada9040\nparent 54a6d4edbc56d99ecf6a461975acceb219b8a2d8\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669369478 +0100\ncommitter GitHub <noreply@github.com> 1669369478 +0100\n\nRollup merge of #104654 - thomcc:alloc-tests-unsafe_op_in_unsafe_fn, r=Mark-Simulacrum\n\nAdd `#![deny(unsafe_op_in_unsafe_fn)]` in liballoc tests\n\nIn https://github.com/rust-lang/rust/pull/104647#discussion_r1027332930 it was mentioned that liballoc tests should probably have this enabled (we have it pretty much everywhere else in the stdlib), so I added it.\n\nThis will probably conflict with https://github.com/rust-lang/rust/pull/104647 so I'll rebase after that lands.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/808157bd7dd9d1b082c674e9581e18266c7501f0", "html_url": "https://github.com/rust-lang/rust/commit/808157bd7dd9d1b082c674e9581e18266c7501f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/808157bd7dd9d1b082c674e9581e18266c7501f0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9313e9077aa594afe80da8e423de614cada9040", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9313e9077aa594afe80da8e423de614cada9040", "html_url": "https://github.com/rust-lang/rust/commit/a9313e9077aa594afe80da8e423de614cada9040"}, {"sha": "54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a6d4edbc56d99ecf6a461975acceb219b8a2d8", "html_url": "https://github.com/rust-lang/rust/commit/54a6d4edbc56d99ecf6a461975acceb219b8a2d8"}], "stats": {"total": 45, "additions": 38, "deletions": 7}, "files": [{"sha": "af49826ff30a364f4a8d308a13521475e62ea5c5", "filename": "library/alloc/tests/boxed.rs", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fboxed.rs?ref=808157bd7dd9d1b082c674e9581e18266c7501f0", "patch": "@@ -102,8 +102,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` is valid for writes and `ptr` for reads of\n+            // `old_layout.size()`, because `new_layout.size() >=\n+            // old_layout.size()` (which is an invariant that must be upheld by\n+            // callers).\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), old_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -114,12 +124,21 @@ unsafe impl const Allocator for ConstAllocator {\n         old_layout: Layout,\n         new_layout: Layout,\n     ) -> Result<NonNull<[u8]>, AllocError> {\n-        let new_ptr = self.grow(ptr, old_layout, new_layout)?;\n+        // Safety: Invariants of `grow_zeroed` and `grow` are the same, and must\n+        // be enforced by callers.\n+        let new_ptr = unsafe { self.grow(ptr, old_layout, new_layout)? };\n         if new_layout.size() > 0 {\n             let old_size = old_layout.size();\n             let new_size = new_layout.size();\n             let raw_ptr = new_ptr.as_mut_ptr();\n-            raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            // Safety:\n+            // - `grow` returned Ok, so the returned pointer must be valid for\n+            //   `new_size` bytes\n+            // - `new_size` must be larger than `old_size`, which is an\n+            //   invariant which must be upheld by callers.\n+            unsafe {\n+                raw_ptr.add(old_size).write_bytes(0, new_size - old_size);\n+            }\n         }\n         Ok(new_ptr)\n     }\n@@ -137,8 +156,18 @@ unsafe impl const Allocator for ConstAllocator {\n \n         let new_ptr = self.allocate(new_layout)?;\n         if new_layout.size() > 0 {\n-            new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n-            self.deallocate(ptr, old_layout);\n+            // Safety: `new_ptr` and `ptr` are valid for reads/writes of\n+            // `new_layout.size()` because of the invariants of shrink, which\n+            // include `new_layout.size()` being smaller than (or equal to)\n+            // `old_layout.size()`.\n+            unsafe {\n+                new_ptr.as_mut_ptr().copy_from_nonoverlapping(ptr.as_ptr(), new_layout.size());\n+            }\n+            // Safety: `ptr` is never used again is also an invariant which must\n+            // be upheld by callers.\n+            unsafe {\n+                self.deallocate(ptr, old_layout);\n+            }\n         }\n         Ok(new_ptr)\n     }"}, {"sha": "d6d2b055b2395e8563543ed0628189b5b975823c", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=808157bd7dd9d1b082c674e9581e18266c7501f0", "patch": "@@ -48,6 +48,7 @@\n #![feature(once_cell)]\n #![feature(drain_keep_rest)]\n #![deny(fuzzy_provenance_casts)]\n+#![deny(unsafe_op_in_unsafe_fn)]\n \n use std::collections::hash_map::DefaultHasher;\n use std::hash::{Hash, Hasher};"}, {"sha": "7ebed0d5ca6994085d63c3ce2631e9c6d3cbd85d", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/808157bd7dd9d1b082c674e9581e18266c7501f0/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=808157bd7dd9d1b082c674e9581e18266c7501f0", "patch": "@@ -1089,7 +1089,8 @@ fn test_into_iter_drop_allocator() {\n         }\n \n         unsafe fn deallocate(&self, ptr: NonNull<u8>, layout: Layout) {\n-            System.deallocate(ptr, layout)\n+            // Safety: Invariants passed to caller.\n+            unsafe { System.deallocate(ptr, layout) }\n         }\n     }\n "}]}