{"sha": "3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZDQ1MGVjNWQ1OGUxY2ZlYmI3YWZlMDJiYzJiYjQ1NWRiYjg3YTM=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-22T19:24:35Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-08-22T19:28:31Z"}, "message": "Add `#![feature(const_float_bits_conv)]` for `f64::to_bits` and friends", "tree": {"sha": "c2d0cef1b37477e61f20dc12d7b31230f93d6457", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2d0cef1b37477e61f20dc12d7b31230f93d6457"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "html_url": "https://github.com/rust-lang/rust/commit/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "527a685e40d8fbe61442bdbd510c2b4e1d248019", "url": "https://api.github.com/repos/rust-lang/rust/commits/527a685e40d8fbe61442bdbd510c2b4e1d248019", "html_url": "https://github.com/rust-lang/rust/commit/527a685e40d8fbe61442bdbd510c2b4e1d248019"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "7294adaccd3f6302f84034aa581147d31b7cf43a", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "patch": "@@ -73,6 +73,7 @@\n #![feature(const_discriminant)]\n #![feature(const_checked_int_methods)]\n #![feature(const_euclidean_int_methods)]\n+#![feature(const_float_bits_conv)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n #![feature(const_int_pow)]"}, {"sha": "2d2d99ef6eeb7f11b3b3aa3dc1834e884dd48c63", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "patch": "@@ -652,8 +652,9 @@ impl f32 {\n     ///\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_bits(self) -> u32 {\n+    pub const fn to_bits(self) -> u32 {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n@@ -695,8 +696,9 @@ impl f32 {\n     /// assert_eq!(v, 12.5);\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_bits(v: u32) -> Self {\n+    pub const fn from_bits(v: u32) -> Self {\n         // SAFETY: `u32` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n@@ -712,8 +714,9 @@ impl f32 {\n     /// assert_eq!(bytes, [0x41, 0x48, 0x00, 0x00]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_be_bytes(self) -> [u8; 4] {\n+    pub const fn to_be_bytes(self) -> [u8; 4] {\n         self.to_bits().to_be_bytes()\n     }\n \n@@ -727,8 +730,9 @@ impl f32 {\n     /// assert_eq!(bytes, [0x00, 0x00, 0x48, 0x41]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_le_bytes(self) -> [u8; 4] {\n+    pub const fn to_le_bytes(self) -> [u8; 4] {\n         self.to_bits().to_le_bytes()\n     }\n \n@@ -755,8 +759,9 @@ impl f32 {\n     /// );\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_ne_bytes(self) -> [u8; 4] {\n+    pub const fn to_ne_bytes(self) -> [u8; 4] {\n         self.to_bits().to_ne_bytes()\n     }\n \n@@ -769,8 +774,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_be_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_be_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_be_bytes(bytes))\n     }\n \n@@ -783,8 +789,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_le_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_le_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_le_bytes(bytes))\n     }\n \n@@ -808,8 +815,9 @@ impl f32 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n+    pub const fn from_ne_bytes(bytes: [u8; 4]) -> Self {\n         Self::from_bits(u32::from_ne_bytes(bytes))\n     }\n "}, {"sha": "82ea82fe2be2b81f383df65c847d5686e487c331", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=3cd450ec5d58e1cfebb7afe02bc2bb455dbb87a3", "patch": "@@ -666,8 +666,9 @@ impl f64 {\n     ///\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_bits(self) -> u64 {\n+    pub const fn to_bits(self) -> u64 {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute to it\n         unsafe { mem::transmute(self) }\n     }\n@@ -709,8 +710,9 @@ impl f64 {\n     /// assert_eq!(v, 12.5);\n     /// ```\n     #[stable(feature = \"float_bits_conv\", since = \"1.20.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_bits(v: u64) -> Self {\n+    pub const fn from_bits(v: u64) -> Self {\n         // SAFETY: `u64` is a plain old datatype so we can always transmute from it\n         // It turns out the safety issues with sNaN were overblown! Hooray!\n         unsafe { mem::transmute(v) }\n@@ -726,8 +728,9 @@ impl f64 {\n     /// assert_eq!(bytes, [0x40, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_be_bytes(self) -> [u8; 8] {\n+    pub const fn to_be_bytes(self) -> [u8; 8] {\n         self.to_bits().to_be_bytes()\n     }\n \n@@ -741,8 +744,9 @@ impl f64 {\n     /// assert_eq!(bytes, [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x40]);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_le_bytes(self) -> [u8; 8] {\n+    pub const fn to_le_bytes(self) -> [u8; 8] {\n         self.to_bits().to_le_bytes()\n     }\n \n@@ -769,8 +773,9 @@ impl f64 {\n     /// );\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn to_ne_bytes(self) -> [u8; 8] {\n+    pub const fn to_ne_bytes(self) -> [u8; 8] {\n         self.to_bits().to_ne_bytes()\n     }\n \n@@ -783,8 +788,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_be_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_be_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_be_bytes(bytes))\n     }\n \n@@ -797,8 +803,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_le_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_le_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_le_bytes(bytes))\n     }\n \n@@ -822,8 +829,9 @@ impl f64 {\n     /// assert_eq!(value, 12.5);\n     /// ```\n     #[stable(feature = \"float_to_from_bytes\", since = \"1.40.0\")]\n+    #[rustc_const_unstable(feature = \"const_float_bits_conv\", issue = \"72447\")]\n     #[inline]\n-    pub fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n+    pub const fn from_ne_bytes(bytes: [u8; 8]) -> Self {\n         Self::from_bits(u64::from_ne_bytes(bytes))\n     }\n "}]}