{"sha": "2008f9e0b97a28833ba666694b9f4ce40833ac23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMDhmOWUwYjk3YTI4ODMzYmE2NjY2OTRiOWY0Y2U0MDgzM2FjMjM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T11:25:55Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-30T11:29:33Z"}, "message": "Simplify", "tree": {"sha": "82feefd2f534063d7bf7c58b200bc287e7860115", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82feefd2f534063d7bf7c58b200bc287e7860115"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2008f9e0b97a28833ba666694b9f4ce40833ac23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2008f9e0b97a28833ba666694b9f4ce40833ac23", "html_url": "https://github.com/rust-lang/rust/commit/2008f9e0b97a28833ba666694b9f4ce40833ac23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2008f9e0b97a28833ba666694b9f4ce40833ac23/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc559dbe1c22b7200bcb6e3cd84dc105a0381c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc559dbe1c22b7200bcb6e3cd84dc105a0381c19", "html_url": "https://github.com/rust-lang/rust/commit/dc559dbe1c22b7200bcb6e3cd84dc105a0381c19"}], "stats": {"total": 61, "additions": 29, "deletions": 32}, "files": [{"sha": "5840e8fc08256bef106a4934334b084d07d7bb39", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 29, "deletions": 32, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2008f9e0b97a28833ba666694b9f4ce40833ac23/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/2008f9e0b97a28833ba666694b9f4ce40833ac23/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=2008f9e0b97a28833ba666694b9f4ce40833ac23", "patch": "@@ -1,41 +1,15 @@\n import * as vscode from 'vscode';\n import { Server } from '../server';\n-\n-const statusUri = vscode.Uri.parse('rust-analyzer-status://status');\n-\n-export class TextDocumentContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-    public syntaxTree: string = 'Not available';\n-\n-    public provideTextDocumentContent(\n-        _uri: vscode.Uri,\n-    ): vscode.ProviderResult<string> {\n-        const editor = vscode.window.activeTextEditor;\n-        if (editor == null) {\n-            return '';\n-        }\n-        return Server.client.sendRequest<string>(\n-            'rust-analyzer/analyzerStatus',\n-            null,\n-        );\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n-\n-let poller: NodeJS.Timer | null = null;\n-\n // Shows status of rust-analyzer (for debugging)\n \n export function makeCommand(context: vscode.ExtensionContext) {\n-    const textDocumentContentProvider = new TextDocumentContentProvider();\n+    let poller: NodeJS.Timer | null = null;\n+    const tdcp = new TextDocumentContentProvider();\n+\n     context.subscriptions.push(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer-status',\n-            textDocumentContentProvider,\n+            tdcp,\n         ),\n     );\n \n@@ -50,15 +24,38 @@ export function makeCommand(context: vscode.ExtensionContext) {\n     return async function handle() {\n         if (poller == null) {\n             poller = setInterval(\n-                () => textDocumentContentProvider.eventEmitter.fire(statusUri),\n+                () => tdcp.eventEmitter.fire(tdcp.uri),\n                 1000,\n             );\n         }\n-        const document = await vscode.workspace.openTextDocument(statusUri);\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n         return vscode.window.showTextDocument(\n             document,\n             vscode.ViewColumn.Two,\n             true,\n         );\n     };\n }\n+\n+class TextDocumentContentProvider\n+    implements vscode.TextDocumentContentProvider {\n+    uri = vscode.Uri.parse('rust-analyzer-status://status');\n+    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n+    provideTextDocumentContent(\n+        _uri: vscode.Uri,\n+    ): vscode.ProviderResult<string> {\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) {\n+            return '';\n+        }\n+        return Server.client.sendRequest<string>(\n+            'rust-analyzer/analyzerStatus',\n+            null,\n+        );\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}"}]}