{"sha": "de110f920844f5dd299c6db9ea182efacf7800cf", "node_id": "C_kwDOAAsO6NoAKGRlMTEwZjkyMDg0NGY1ZGQyOTljNmRiOWVhMTgyZWZhY2Y3ODAwY2Y", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-21T10:12:11Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-27T22:01:25Z"}, "message": "Pacify tidy.", "tree": {"sha": "07f5d0bcc11689b2e0ba61e115d1eb9fbd1d70b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f5d0bcc11689b2e0ba61e115d1eb9fbd1d70b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de110f920844f5dd299c6db9ea182efacf7800cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de110f920844f5dd299c6db9ea182efacf7800cf", "html_url": "https://github.com/rust-lang/rust/commit/de110f920844f5dd299c6db9ea182efacf7800cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de110f920844f5dd299c6db9ea182efacf7800cf/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65c3c90f3ecaa011bd7067efd562397de219facf", "url": "https://api.github.com/repos/rust-lang/rust/commits/65c3c90f3ecaa011bd7067efd562397de219facf", "html_url": "https://github.com/rust-lang/rust/commit/65c3c90f3ecaa011bd7067efd562397de219facf"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f75344f20b6d98e842f622dfd3e39d23e8e22385", "filename": "compiler/rustc_infer/src/traits/engine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fengine.rs?ref=de110f920844f5dd299c6db9ea182efacf7800cf", "patch": "@@ -43,7 +43,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n     fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n \n     /// Among all pending obligations, collect those are stalled on a inference variable which has\n-    /// changed since the last call to `select_where_possible`.  Those obligations are marked as\n+    /// changed since the last call to `select_where_possible`. Those obligations are marked as\n     /// successful and returned.\n     fn drain_unstalled_obligations(\n         &mut self,"}, {"sha": "1b2533a5cf649ce303f556de21e725d5b64f107a", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=de110f920844f5dd299c6db9ea182efacf7800cf", "patch": "@@ -216,11 +216,11 @@ impl<'cx, 'tcx> FallibleTypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n                         let substs = substs.try_fold_with(self)?;\n                         let recursion_limit = self.tcx().recursion_limit();\n                         if !recursion_limit.value_within_limit(self.anon_depth) {\n-                            // A closure or generator may have itself as in its upvars.  This\n-                            // should be checked handled by the recursion check for opaque types,\n-                            // but we may end up here before that check can happen.  In that case,\n-                            // we delay a bug to mark the trip, and continue without revealing the\n-                            // opaque.\n+                            // A closure or generator may have itself as in its upvars.\n+                            // This should be checked handled by the recursion check for opaque\n+                            // types, but we may end up here before that check can happen.\n+                            // In that case, we delay a bug to mark the trip, and continue without\n+                            // revealing the opaque.\n                             self.infcx\n                                 .err_ctxt()\n                                 .build_overflow_error(&ty, self.cause.span, true)"}, {"sha": "cd1475391a4d90f5e9c6c0849896986170c6c583", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de110f920844f5dd299c6db9ea182efacf7800cf/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=de110f920844f5dd299c6db9ea182efacf7800cf", "patch": "@@ -110,8 +110,8 @@ where\n             for component in components {\n                 match *component.kind() {\n                     // The information required to determine whether a generator has drop is\n-                    // computed on MIR, while this very method is used to build MIR.  To avoid\n-                    // cycles, we consider that generators always require drop.\n+                    // computed on MIR, while this very method is used to build MIR.\n+                    // To avoid cycles, we consider that generators always require drop.\n                     ty::Generator(..) if tcx.sess.opts.unstable_opts.drop_tracking_mir => {\n                         return Some(Err(AlwaysRequiresDrop));\n                     }"}]}