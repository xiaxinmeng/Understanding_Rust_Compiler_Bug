{"sha": "a874956d940ecb3ed524b6176a171219ac4787ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzQ5NTZkOTQwZWNiM2VkNTI0YjYxNzZhMTcxMjE5YWM0Nzg3ZWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T17:05:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-15T17:05:57Z"}, "message": "Auto merge of #75148 - joechrisellis:master, r=Amanieu\n\nImplementation of peer credentials for Unix sockets\n\nThe code in `ucred.rs` is based on the work done in [PR 13](https://github.com/tokio-rs/tokio-uds/pull/13) in the tokio-uds repository on GitHub.\n\nThis commit is effectively a port to the stdlib, so credit to Martin Habov\u0161tiak (`@Kixunil)` and contributors for the meat of this work. \ud83e\udd47\n\nHappy to make changes as needed. \ud83d\ude42", "tree": {"sha": "e0217ab89c57ffb1e64ee52fd7ac8aa744982bb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0217ab89c57ffb1e64ee52fd7ac8aa744982bb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a874956d940ecb3ed524b6176a171219ac4787ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a874956d940ecb3ed524b6176a171219ac4787ea", "html_url": "https://github.com/rust-lang/rust/commit/a874956d940ecb3ed524b6176a171219ac4787ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a874956d940ecb3ed524b6176a171219ac4787ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27a45d0aabbc19b635c858033d6e87f86c663570", "url": "https://api.github.com/repos/rust-lang/rust/commits/27a45d0aabbc19b635c858033d6e87f86c663570", "html_url": "https://github.com/rust-lang/rust/commit/27a45d0aabbc19b635c858033d6e87f86c663570"}, {"sha": "68ff495afa7687677cf9facf83c5130db24d3acd", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ff495afa7687677cf9facf83c5130db24d3acd", "html_url": "https://github.com/rust-lang/rust/commit/68ff495afa7687677cf9facf83c5130db24d3acd"}], "stats": {"total": 185, "additions": 185, "deletions": 0}, "files": [{"sha": "f43546880983ab3c18ad3da2f66d9eadb9c80aad", "filename": "library/std/src/sys/unix/ext/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fmod.rs?ref=a874956d940ecb3ed524b6176a171219ac4787ea", "patch": "@@ -37,6 +37,18 @@ pub mod process;\n pub mod raw;\n pub mod thread;\n \n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub mod ucred;\n+\n /// A prelude for conveniently writing platform-specific code.\n ///\n /// Includes all extension traits, and some important type definitions."}, {"sha": "f3da8f9f584884ed0111c8163c415d0726dc6c22", "filename": "library/std/src/sys/unix/ext/net.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet.rs?ref=a874956d940ecb3ed524b6176a171219ac4787ea", "patch": "@@ -30,6 +30,29 @@ use crate::sys::{self, cvt};\n use crate::sys_common::{self, AsInner, FromInner, IntoInner};\n use crate::time::Duration;\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+use crate::os::unix::ucred;\n+\n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub use ucred::UCred;\n+\n #[cfg(any(\n     target_os = \"linux\",\n     target_os = \"android\",\n@@ -405,6 +428,34 @@ impl UnixStream {\n         SocketAddr::new(|addr, len| unsafe { libc::getpeername(*self.0.as_inner(), addr, len) })\n     }\n \n+    /// Gets the peer credentials for this Unix domain socket.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(peer_credentials_unix_socket)]\n+    /// use std::os::unix::net::UnixStream;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let socket = UnixStream::connect(\"/tmp/sock\")?;\n+    ///     let peer_cred = socket.peer_cred().expect(\"Couldn't get peer credentials\");\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+    #[cfg(any(\n+        target_os = \"android\",\n+        target_os = \"linux\",\n+        target_os = \"dragonfly\",\n+        target_os = \"freebsd\",\n+        target_os = \"ios\",\n+        target_os = \"macos\",\n+        target_os = \"openbsd\"\n+    ))]\n+    pub fn peer_cred(&self) -> io::Result<UCred> {\n+        ucred::peer_cred(self)\n+    }\n+\n     /// Sets the read timeout for the socket.\n     ///\n     /// If the provided value is [`None`], then [`read`] calls will block"}, {"sha": "ed7516c7f28f8da1d620c232bf059dc4043c0758", "filename": "library/std/src/sys/unix/ext/ucred.rs", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred.rs?ref=a874956d940ecb3ed524b6176a171219ac4787ea", "patch": "@@ -0,0 +1,97 @@\n+//! Unix peer credentials.\n+\n+// NOTE: Code in this file is heavily based on work done in PR 13 from the tokio-uds repository on\n+//       GitHub.\n+//\n+//       For reference, the link is here: https://github.com/tokio-rs/tokio-uds/pull/13\n+//       Credit to Martin Habov\u0161tiak (GitHub username Kixunil) and contributors for this work.\n+\n+use libc::{gid_t, pid_t, uid_t};\n+\n+/// Credentials for a UNIX process for credentials passing.\n+#[unstable(feature = \"peer_credentials_unix_socket\", issue = \"42839\", reason = \"unstable\")]\n+#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]\n+pub struct UCred {\n+    /// The UID part of the peer credential. This is the effective UID of the process at the domain\n+    /// socket's endpoint.\n+    pub uid: uid_t,\n+    /// The GID part of the peer credential. This is the effective GID of the process at the domain\n+    /// socket's endpoint.\n+    pub gid: gid_t,\n+    /// The PID part of the peer credential. This field is optional because the PID part of the\n+    /// peer credentials is not supported on every platform. On platforms where the mechanism to\n+    /// discover the PID exists, this field will be populated to the PID of the process at the\n+    /// domain socket's endpoint. Otherwise, it will be set to None.\n+    pub pid: Option<pid_t>,\n+}\n+\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n+pub use self::impl_linux::peer_cred;\n+\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+pub use self::impl_bsd::peer_cred;\n+\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n+pub mod impl_linux {\n+    use super::UCred;\n+    use crate::os::unix::io::AsRawFd;\n+    use crate::os::unix::net::UnixStream;\n+    use crate::{io, mem};\n+    use libc::{c_void, getsockopt, socklen_t, ucred, SOL_SOCKET, SO_PEERCRED};\n+\n+    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        let ucred_size = mem::size_of::<ucred>();\n+\n+        // Trivial sanity checks.\n+        assert!(mem::size_of::<u32>() <= mem::size_of::<usize>());\n+        assert!(ucred_size <= u32::MAX as usize);\n+\n+        let mut ucred_size = ucred_size as socklen_t;\n+        let mut ucred: ucred = ucred { pid: 1, uid: 1, gid: 1 };\n+\n+        unsafe {\n+            let ret = getsockopt(\n+                socket.as_raw_fd(),\n+                SOL_SOCKET,\n+                SO_PEERCRED,\n+                &mut ucred as *mut ucred as *mut c_void,\n+                &mut ucred_size,\n+            );\n+\n+            if ret == 0 && ucred_size as usize == mem::size_of::<ucred>() {\n+                Ok(UCred { uid: ucred.uid, gid: ucred.gid, pid: Some(ucred.pid) })\n+            } else {\n+                Err(io::Error::last_os_error())\n+            }\n+        }\n+    }\n+}\n+\n+#[cfg(any(\n+    target_os = \"dragonfly\",\n+    target_os = \"macos\",\n+    target_os = \"ios\",\n+    target_os = \"freebsd\",\n+    target_os = \"openbsd\"\n+))]\n+pub mod impl_bsd {\n+    use super::UCred;\n+    use crate::io;\n+    use crate::os::unix::io::AsRawFd;\n+    use crate::os::unix::net::UnixStream;\n+\n+    pub fn peer_cred(socket: &UnixStream) -> io::Result<UCred> {\n+        let mut cred = UCred { uid: 1, gid: 1, pid: None };\n+        unsafe {\n+            let ret = libc::getpeereid(socket.as_raw_fd(), &mut cred.uid, &mut cred.gid);\n+\n+            if ret == 0 { Ok(cred) } else { Err(io::Error::last_os_error()) }\n+        }\n+    }\n+}"}, {"sha": "451b534b266e360b92fcaa8306823f55e715cbf6", "filename": "library/std/src/sys/unix/ext/ucred/tests.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a874956d940ecb3ed524b6176a171219ac4787ea/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fucred%2Ftests.rs?ref=a874956d940ecb3ed524b6176a171219ac4787ea", "patch": "@@ -0,0 +1,25 @@\n+use crate::os::unix::net::UnixStream;\n+use libc::{getegid, geteuid};\n+\n+#[test]\n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"dragonfly\",\n+    target_os = \"freebsd\",\n+    target_os = \"ios\",\n+    target_os = \"macos\",\n+    target_os = \"openbsd\"\n+))]\n+fn test_socket_pair() {\n+    // Create two connected sockets and get their peer credentials. They should be equal.\n+    let (sock_a, sock_b) = UnixStream::pair().unwrap();\n+    let (cred_a, cred_b) = (sock_a.peer_cred().unwrap(), sock_b.peer_cred().unwrap());\n+    assert_eq!(cred_a, cred_b);\n+\n+    // Check that the UID and GIDs match up.\n+    let uid = unsafe { geteuid() };\n+    let gid = unsafe { getegid() };\n+    assert_eq!(cred_a.uid, uid);\n+    assert_eq!(cred_a.gid, gid);\n+}"}]}