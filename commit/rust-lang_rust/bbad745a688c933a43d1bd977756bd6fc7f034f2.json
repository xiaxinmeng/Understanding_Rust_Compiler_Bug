{"sha": "bbad745a688c933a43d1bd977756bd6fc7f034f2", "node_id": "C_kwDOAAsO6NoAKGJiYWQ3NDVhNjg4YzkzM2E0M2QxYmQ5Nzc3NTZiZDZmYzdmMDM0ZjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T00:42:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-27T00:42:30Z"}, "message": "Auto merge of #91269 - matthiaskrgr:rollup-jh8i8eh, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #90611 (Fix another ICE in rustdoc scrape_examples)\n - #91197 (rustdoc: Rename `Type::ResolvedPath` to `Type::Path` and don't re-export it)\n - #91223 (Fix headings indent)\n - #91240 (Saner formatting for UTF8_CHAR_WIDTH table)\n - #91248 (Bump compiler-builtins to 0.1.53)\n - #91252 (Fix bug where submodules wouldn't be updated when running x.py from a subdirectory)\n - #91259 (Remove `--display-doctest-warnings`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "50ea2beb4ee1c2c4f01bc4a79f7f2766278fe134", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50ea2beb4ee1c2c4f01bc4a79f7f2766278fe134"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bbad745a688c933a43d1bd977756bd6fc7f034f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bbad745a688c933a43d1bd977756bd6fc7f034f2", "html_url": "https://github.com/rust-lang/rust/commit/bbad745a688c933a43d1bd977756bd6fc7f034f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bbad745a688c933a43d1bd977756bd6fc7f034f2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccce98535bd51687554be8a209b3a529ef84f7e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccce98535bd51687554be8a209b3a529ef84f7e1", "html_url": "https://github.com/rust-lang/rust/commit/ccce98535bd51687554be8a209b3a529ef84f7e1"}, {"sha": "092477d8c994ae91dc73f90c086ba00e68674fa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/092477d8c994ae91dc73f90c086ba00e68674fa8", "html_url": "https://github.com/rust-lang/rust/commit/092477d8c994ae91dc73f90c086ba00e68674fa8"}], "stats": {"total": 348, "additions": 200, "deletions": 148}, "files": [{"sha": "48d9fdb3d03e76ff6b96d69bd58dafc9dd5caa17", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -678,9 +678,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b6591c2442ee984e2b264638a8b5e7ae44fd47b32d28e3a08e2e9c3cdb0c2fb0\"\n+checksum = \"2467ff455350a4df7d02f1ed1449d0279605a763de5d586dcf6aa7d732508bcb\"\n dependencies = [\n  \"cc\",\n  \"rustc-std-workspace-core\","}, {"sha": "b2ea86d699aa6bf6f88c4dce209189e830ae241e", "filename": "library/core/src/str/validations.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fvalidations.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -244,22 +244,23 @@ pub(super) const fn run_utf8_validation(v: &[u8]) -> Result<(), Utf8Error> {\n \n // https://tools.ietf.org/html/rfc3629\n const UTF8_CHAR_WIDTH: &[u8; 256] = &[\n-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-    1, // 0x1F\n-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-    1, // 0x3F\n-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-    1, // 0x5F\n-    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-    1, // 0x7F\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, // 0x9F\n-    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n-    0, // 0xBF\n-    0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-    2, // 0xDF\n-    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // 0xEF\n-    4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0xFF\n+    // 1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 0\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 1\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 2\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 3\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 4\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 5\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 6\n+    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 7\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 8\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 9\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // A\n+    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // B\n+    0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // C\n+    2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, // D\n+    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, // E\n+    4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // F\n ];\n \n /// Given a first byte, determines how many bytes are in this UTF-8 character."}, {"sha": "4147f7ee525c00f603ce1f9ae9439673f6f1b2ea", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -16,7 +16,7 @@ panic_unwind = { path = \"../panic_unwind\", optional = true }\n panic_abort = { path = \"../panic_abort\" }\n core = { path = \"../core\" }\n libc = { version = \"0.2.106\", default-features = false, features = ['rustc-dep-of-std'] }\n-compiler_builtins = { version = \"0.1.52\" }\n+compiler_builtins = { version = \"0.1.53\" }\n profiler_builtins = { path = \"../profiler_builtins\", optional = true }\n unwind = { path = \"../unwind\" }\n hashbrown = { version = \"0.11\", default-features = false, features = ['rustc-dep-of-std'] }"}, {"sha": "1667dfc3f8544ad3f2ac2bb0519d055a914e956d", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -493,7 +493,7 @@ impl Build {\n \n         // NOTE: The check for the empty directory is here because when running x.py the first time,\n         // the submodule won't be checked out. Check it out now so we can build it.\n-        if !channel::GitInfo::new(false, relative_path).is_git() && !dir_is_empty(&absolute_path) {\n+        if !channel::GitInfo::new(false, &absolute_path).is_git() && !dir_is_empty(&absolute_path) {\n             return;\n         }\n "}, {"sha": "6be53fb4cfed4c53fd5eca1f7fdf74d5f4eb9593", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -261,6 +261,16 @@ conversion, so type inference fails because the type is not unique. Please note\n that you must write the `(())` in one sequence without intermediate whitespace\n so that `rustdoc` understands you want an implicit `Result`-returning function.\n \n+## Showing warnings in doctests\n+\n+You can show warnings in doctests by running `rustdoc --test --test-args=--show-output`\n+(or, if you're using cargo, `cargo test --doc -- --show-output`).\n+By default, this will still hide `unused` warnings, since so many examples use private functions;\n+you can add `#![warn(unused)]` to the top of your example if you want to see unused variables or dead code warnings.\n+You can also use [`#![doc(test(attr(warn(unused))))]`][test-attr] in the crate root to enable warnings globally.\n+\n+[test-attr]: ./the-doc-attribute.md#testattr\n+\n ## Documenting macros\n \n Here\u2019s an example of documenting a macro:"}, {"sha": "021040215437e0015697c4fd3554292193a3f08e", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -257,22 +257,6 @@ all these files are linked from every page, changing where they are can be cumbe\n specially cache them. This flag will rename all these files in the output to include the suffix in\n the filename. For example, `light.css` would become `light-suf.css` with the above command.\n \n-### `--display-doctest-warnings`: display warnings when documenting or running documentation tests\n-\n-Using this flag looks like this:\n-\n-```bash\n-$ rustdoc src/lib.rs -Z unstable-options --display-doctest-warnings\n-$ rustdoc --test src/lib.rs -Z unstable-options --display-doctest-warnings\n-```\n-\n-The intent behind this flag is to allow the user to see warnings that occur within their library or\n-their documentation tests, which are usually suppressed. However, [due to a\n-bug][issue-display-warnings], this flag doesn't 100% work as intended. See the linked issue for\n-details.\n-\n-[issue-display-warnings]: https://github.com/rust-lang/rust/issues/41574\n-\n ### `--extern-html-root-url`: control how rustdoc links to non-local crates\n \n Using this flag looks like this:"}, {"sha": "4e1dabd05bb48373844d8add75862f764a6111fe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -41,14 +41,8 @@ use crate::visit_ast::Module as DocModule;\n \n use utils::*;\n \n-crate use utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n-\n-crate use self::types::FnRetTy::*;\n-crate use self::types::ItemKind::*;\n-crate use self::types::SelfTy::*;\n-crate use self::types::Type::*;\n-crate use self::types::Visibility::{Inherited, Public};\n crate use self::types::*;\n+crate use self::utils::{get_auto_trait_and_blanket_impls, krate, register_res};\n \n crate trait Clean<T> {\n     fn clean(&self, cx: &mut DocContext<'_>) -> T;\n@@ -1411,12 +1405,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, did, false, vec![], substs);\n-                ResolvedPath { path }\n+                Type::Path { path }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n-                ResolvedPath { path }\n+                Type::Path { path }\n             }\n             ty::Dynamic(obj, ref reg) => {\n                 // HACK: pick the first `did` as the `did` of the trait object. Someone"}, {"sha": "37acf68defd259204b53bc550d8730abc3639f61", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -34,7 +34,6 @@ use rustc_target::spec::abi::Abi;\n use crate::clean::cfg::Cfg;\n use crate::clean::external_path;\n use crate::clean::inline::{self, print_inlined_const};\n-use crate::clean::types::Type::{QPath, ResolvedPath};\n use crate::clean::utils::{is_literal_expr, print_const_expr, print_evaluated_const};\n use crate::clean::Clean;\n use crate::core::DocContext;\n@@ -43,10 +42,14 @@ use crate::formats::item_type::ItemType;\n use crate::html::render::cache::ExternalLocation;\n use crate::html::render::Context;\n \n-use self::FnRetTy::*;\n-use self::ItemKind::*;\n-use self::SelfTy::*;\n-use self::Type::*;\n+crate use self::FnRetTy::*;\n+crate use self::ItemKind::*;\n+crate use self::SelfTy::*;\n+crate use self::Type::{\n+    Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive, QPath,\n+    RawPointer, Slice, Tuple,\n+};\n+crate use self::Visibility::{Inherited, Public};\n \n crate type ItemIdSet = FxHashSet<ItemId>;\n \n@@ -1418,8 +1421,9 @@ crate struct PolyTrait {\n crate enum Type {\n     /// A named type, which could be a trait.\n     ///\n-    /// This is mostly Rustdoc's version of [`hir::Path`]. It has to be different because Rustdoc's [`PathSegment`] can contain cleaned generics.\n-    ResolvedPath { path: Path },\n+    /// This is mostly Rustdoc's version of [`hir::Path`].\n+    /// It has to be different because Rustdoc's [`PathSegment`] can contain cleaned generics.\n+    Path { path: Path },\n     /// A `dyn Trait` object: `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n     /// A type parameter.\n@@ -1485,7 +1489,7 @@ impl Type {\n     /// Checks if this is a `T::Name` path for an associated type.\n     crate fn is_assoc_ty(&self) -> bool {\n         match self {\n-            ResolvedPath { path, .. } => path.is_assoc_ty(),\n+            Type::Path { path, .. } => path.is_assoc_ty(),\n             _ => false,\n         }\n     }\n@@ -1499,7 +1503,7 @@ impl Type {\n \n     crate fn generics(&self) -> Option<Vec<&Type>> {\n         match self {\n-            ResolvedPath { path, .. } => path.generics(),\n+            Type::Path { path, .. } => path.generics(),\n             _ => None,\n         }\n     }\n@@ -1522,7 +1526,7 @@ impl Type {\n \n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n-            ResolvedPath { ref path } => return Some(path.def_id()),\n+            Type::Path { ref path } => return Some(path.def_id()),\n             DynTrait(ref bounds, _) => return Some(bounds[0].trait_.def_id()),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,"}, {"sha": "38f53d7e0b28656b6f0deb3df34f3809823f5bed", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -2,8 +2,7 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, ExternalCrate, Generic, GenericArg, GenericArgs, ImportSource, Item,\n-    ItemKind, Lifetime, Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type,\n-    TypeBinding, Visibility,\n+    ItemKind, Lifetime, Path, PathSegment, Primitive, PrimitiveType, Type, TypeBinding, Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -187,7 +186,7 @@ crate fn build_deref_target_impls(cx: &mut DocContext<'_>, items: &[Item], ret:\n             for &did in prim.impls(tcx).iter().filter(|did| !did.is_local()) {\n                 inline::build_impl(cx, None, did, None, ret);\n             }\n-        } else if let ResolvedPath { path } = target {\n+        } else if let Type::Path { path } = target {\n             let did = path.def_id();\n             if !did.is_local() {\n                 inline::build_impls(cx, None, did, None, ret);\n@@ -362,7 +361,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n         Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n         _ => {\n             let _ = register_res(cx, path.res);\n-            ResolvedPath { path }\n+            Type::Path { path }\n         }\n     }\n }"}, {"sha": "7c23117cce3af43a52ced775b6a8da229e207d6d", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -136,9 +136,6 @@ crate struct Options {\n     ///\n     /// Be aware: This option can come both from the CLI and from crate attributes!\n     crate manual_passes: Vec<String>,\n-    /// Whether to display warnings during doc generation or while gathering doctests. By default,\n-    /// all non-rustdoc-specific lints are allowed when generating docs.\n-    crate display_doctest_warnings: bool,\n     /// Whether to run the `calculate-doc-coverage` pass, which counts the number of public items\n     /// with and without documentation.\n     crate show_coverage: bool,\n@@ -197,7 +194,6 @@ impl fmt::Debug for Options {\n             .field(\"persist_doctests\", &self.persist_doctests)\n             .field(\"default_passes\", &self.default_passes)\n             .field(\"manual_passes\", &self.manual_passes)\n-            .field(\"display_doctest_warnings\", &self.display_doctest_warnings)\n             .field(\"show_coverage\", &self.show_coverage)\n             .field(\"crate_version\", &self.crate_version)\n             .field(\"render_options\", &self.render_options)\n@@ -639,7 +635,6 @@ impl Options {\n         let proc_macro_crate = crate_types.contains(&CrateType::ProcMacro);\n         let playground_url = matches.opt_str(\"playground-url\");\n         let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n-        let display_doctest_warnings = matches.opt_present(\"display-doctest-warnings\");\n         let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n         let resource_suffix = matches.opt_str(\"resource-suffix\").unwrap_or_default();\n         let enable_minification = !matches.opt_present(\"disable-minification\");\n@@ -707,7 +702,6 @@ impl Options {\n             test_args,\n             default_passes,\n             manual_passes,\n-            display_doctest_warnings,\n             show_coverage,\n             crate_version,\n             test_run_directory,"}, {"sha": "56ccdfae1d8bc1bb2b62ff4254decc8aca379051", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -38,9 +38,6 @@ use crate::passes::span_of_attrs;\n crate struct TestOptions {\n     /// Whether to disable the default `extern crate my_crate;` when creating doctests.\n     crate no_crate_inject: bool,\n-    /// Whether to emit compilation warnings when compiling doctests. Setting this will suppress\n-    /// the default `#![allow(unused)]`.\n-    crate display_doctest_warnings: bool,\n     /// Additional crate-level attributes to add to doctests.\n     crate attrs: Vec<String>,\n }\n@@ -65,14 +62,16 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         }\n     });\n \n+    debug!(?lint_opts);\n+\n     let crate_types =\n         if options.proc_macro_crate { vec![CrateType::ProcMacro] } else { vec![CrateType::Rlib] };\n \n     let sessopts = config::Options {\n         maybe_sysroot: options.maybe_sysroot.clone(),\n         search_paths: options.libs.clone(),\n         crate_types,\n-        lint_opts: if !options.display_doctest_warnings { lint_opts } else { vec![] },\n+        lint_opts,\n         lint_cap: Some(options.lint_cap.unwrap_or(lint::Forbid)),\n         cg: options.codegen_options.clone(),\n         externs: options.externs.clone(),\n@@ -106,7 +105,6 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     };\n \n     let test_args = options.test_args.clone();\n-    let display_doctest_warnings = options.display_doctest_warnings;\n     let nocapture = options.nocapture;\n     let externs = options.externs.clone();\n     let json_unused_externs = options.json_unused_externs;\n@@ -118,8 +116,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n             let collector = global_ctxt.enter(|tcx| {\n                 let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n \n-                let mut opts = scrape_test_config(crate_attrs);\n-                opts.display_doctest_warnings |= options.display_doctest_warnings;\n+                let opts = scrape_test_config(crate_attrs);\n                 let enable_per_target_ignores = options.enable_per_target_ignores;\n                 let mut collector = Collector::new(\n                     tcx.crate_name(LOCAL_CRATE),\n@@ -165,7 +162,7 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n         Err(ErrorReported) => return Err(ErrorReported),\n     };\n \n-    run_tests(test_args, nocapture, display_doctest_warnings, tests);\n+    run_tests(test_args, nocapture, tests);\n \n     // Collect and warn about unused externs, but only if we've gotten\n     // reports for each doctest\n@@ -208,29 +205,19 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n     Ok(())\n }\n \n-crate fn run_tests(\n-    mut test_args: Vec<String>,\n-    nocapture: bool,\n-    display_doctest_warnings: bool,\n-    tests: Vec<test::TestDescAndFn>,\n-) {\n+crate fn run_tests(mut test_args: Vec<String>, nocapture: bool, tests: Vec<test::TestDescAndFn>) {\n     test_args.insert(0, \"rustdoctest\".to_string());\n     if nocapture {\n         test_args.push(\"--nocapture\".to_string());\n     }\n-    test::test_main(\n-        &test_args,\n-        tests,\n-        Some(test::Options::new().display_output(display_doctest_warnings)),\n-    );\n+    test::test_main(&test_args, tests, None);\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n-    let mut opts =\n-        TestOptions { no_crate_inject: false, display_doctest_warnings: false, attrs: Vec::new() };\n+    let mut opts = TestOptions { no_crate_inject: false, attrs: Vec::new() };\n \n     let test_attrs: Vec<_> = attrs\n         .iter()\n@@ -510,7 +497,7 @@ crate fn make_test(\n     let mut prog = String::new();\n     let mut supports_color = false;\n \n-    if opts.attrs.is_empty() && !opts.display_doctest_warnings {\n+    if opts.attrs.is_empty() {\n         // If there aren't any attributes supplied by #![doc(test(attr(...)))], then allow some\n         // lints that are commonly triggered in doctests. The crate-level test attributes are\n         // commonly used to make tests fail in case they trigger warnings, so having this there in"}, {"sha": "099609d0f912e50b10a9c5a418d11ccdc4fa010e", "filename": "src/librustdoc/doctest/tests.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fdoctest%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest%2Ftests.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -52,8 +52,7 @@ assert_eq!(2+2, 4);\n fn make_test_no_crate_inject() {\n     // Even if you do use the crate within the test, setting `opts.no_crate_inject` will skip\n     // adding it anyway.\n-    let opts =\n-        TestOptions { no_crate_inject: true, display_doctest_warnings: false, attrs: vec![] };\n+    let opts = TestOptions { no_crate_inject: true, attrs: vec![] };\n     let input = \"use asdf::qwop;\n assert_eq!(2+2, 4);\";\n     let expected = \"#![allow(unused)]\n@@ -215,20 +214,6 @@ assert_eq!(2+2, 4);\"\n     assert_eq!((output, len), (expected, 1));\n }\n \n-#[test]\n-fn make_test_display_doctest_warnings() {\n-    // If the user is asking to display doctest warnings, suppress the default `allow(unused)`.\n-    let mut opts = TestOptions::default();\n-    opts.display_doctest_warnings = true;\n-    let input = \"assert_eq!(2+2, 4);\";\n-    let expected = \"fn main() {\n-assert_eq!(2+2, 4);\n-}\"\n-    .to_string();\n-    let (output, len, _) = make_test(input, None, false, &opts, DEFAULT_EDITION, None);\n-    assert_eq!((output, len), (expected, 1));\n-}\n-\n #[test]\n fn make_test_issues_21299_33731() {\n     let opts = TestOptions::default();"}, {"sha": "d3831450e1d87d8122a7ec2319bed199b769bbe4", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -27,7 +27,7 @@ use crate::html::render::IndexItem;\n #[derive(Default)]\n crate struct Cache {\n     /// Maps a type ID to all known implementations for that type. This is only\n-    /// recognized for intra-crate `ResolvedPath` types, and is used to print\n+    /// recognized for intra-crate [`clean::Type::Path`]s, and is used to print\n     /// out extra documentation on the page of an enum/struct.\n     ///\n     /// The values of the map are a list of implementations and documentation\n@@ -401,7 +401,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             clean::ImplItem(ref i) => {\n                 self.cache.parent_is_trait_impl = i.trait_.is_some();\n                 match i.for_ {\n-                    clean::ResolvedPath { ref path } => {\n+                    clean::Type::Path { ref path } => {\n                         self.cache.parent_stack.push(path.def_id());\n                         true\n                     }\n@@ -436,8 +436,8 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n             // Note: matching twice to restrict the lifetime of the `i` borrow.\n             let mut dids = FxHashSet::default();\n             match i.for_ {\n-                clean::ResolvedPath { ref path }\n-                | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path }, .. } => {\n+                clean::Type::Path { ref path }\n+                | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. } => {\n                     dids.insert(path.def_id());\n                 }\n                 clean::DynTrait(ref bounds, _)"}, {"sha": "34742fac0e4b7f1155a3290dc92c4eaf96873004", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -607,8 +607,7 @@ crate fn href_relative_parts<'a>(fqp: &'a [String], relative_to_fqp: &'a [String\n     }\n }\n \n-/// Used when rendering a `ResolvedPath` structure. This invokes the `path`\n-/// rendering function with the necessary arguments for linking to a local path.\n+/// Used to render a [`clean::Path`].\n fn resolved_path<'cx>(\n     w: &mut fmt::Formatter<'_>,\n     did: DefId,\n@@ -762,7 +761,7 @@ fn fmt_type<'cx>(\n \n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n-        clean::ResolvedPath { ref path } => {\n+        clean::Type::Path { ref path } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n             let did = path.def_id();\n             resolved_path(f, did, path, path.is_assoc_ty(), use_absolute, cx)"}, {"sha": "d12667c9e5c777c205c8f690ab4c212450fc5754", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -218,7 +218,7 @@ fn get_index_type(clean_type: &clean::Type, generics: Vec<TypeWithKind>) -> Rend\n \n fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option<Symbol> {\n     match *clean_type {\n-        clean::ResolvedPath { ref path, .. } => {\n+        clean::Type::Path { ref path, .. } => {\n             let path_segment = path.segments.last().unwrap();\n             Some(path_segment.name)\n         }\n@@ -371,7 +371,7 @@ crate fn get_real_types<'tcx>(\n             let mut ty_generics = Vec::new();\n             for bound in bound.get_bounds().unwrap_or(&[]) {\n                 if let Some(path) = bound.get_trait_path() {\n-                    let ty = Type::ResolvedPath { path };\n+                    let ty = Type::Path { path };\n                     get_real_types(generics, &ty, tcx, recurse + 1, &mut ty_generics, cache);\n                 }\n             }"}, {"sha": "20a200f0484bd735386fecca6c0e4ea1cfb432b7", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -1227,7 +1227,7 @@ fn should_render_item(item: &clean::Item, deref_mut_: bool, tcx: TyCtxt<'_>) ->\n             | SelfTy::SelfExplicit(clean::BorrowedRef { mutability, .. }) => {\n                 (mutability == Mutability::Mut, false, false)\n             }\n-            SelfTy::SelfExplicit(clean::ResolvedPath { path }) => {\n+            SelfTy::SelfExplicit(clean::Type::Path { path }) => {\n                 (false, Some(path.def_id()) == tcx.lang_items().owned_box(), false)\n             }\n             SelfTy::SelfValue => (false, false, true),\n@@ -2520,7 +2520,7 @@ fn collect_paths_for_type(first_ty: clean::Type, cache: &Cache) -> Vec<String> {\n         }\n \n         match ty {\n-            clean::Type::ResolvedPath { path } => process_path(path.def_id()),\n+            clean::Type::Path { path } => process_path(path.def_id()),\n             clean::Type::Tuple(tys) => {\n                 work.extend(tys.into_iter());\n             }"}, {"sha": "d3738cfa3e7815af2c3935b4e9b2407f021ba7f1", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -727,8 +727,8 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n-                clean::ResolvedPath { ref path }\n-                | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path }, .. }\n+                clean::Type::Path { ref path }\n+                | clean::BorrowedRef { type_: box clean::Type::Path { ref path }, .. }\n                     if !path.is_assoc_ty() =>\n                 {\n                     let did = path.def_id();\n@@ -1453,8 +1453,8 @@ fn render_implementor(\n     // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n-        clean::ResolvedPath { ref path, .. }\n-        | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path, .. }, .. }\n+        clean::Type::Path { ref path, .. }\n+        | clean::BorrowedRef { type_: box clean::Type::Path { ref path, .. }, .. }\n             if !path.is_assoc_ty() =>\n         {\n             implementor_dups[&path.last()].1"}, {"sha": "479b5210f9e0921a43e0c13ca027ec6834f49ee7", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -1129,15 +1129,17 @@ h3.variant {\n \tmargin-top: 3px;\n }\n \n-.docblock > .section-header:first-child {\n+.top-doc .docblock > .section-header:first-child {\n \tmargin-left: 15px;\n-\tmargin-top: 0;\n }\n-\n-.docblock > .section-header:first-child:hover > a:before {\n+.top-doc .docblock > .section-header:first-child:hover > a:before {\n \tleft: -10px;\n }\n \n+.docblock > .section-header:first-child {\n+\tmargin-top: 0;\n+}\n+\n :target > code, :target > .code-header {\n \topacity: 1;\n }"}, {"sha": "7fc295747f41a5657419d11707034609dee05f1f", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -365,7 +365,7 @@ impl FromWithTcx<clean::GenericBound> for GenericBound {\n         match bound {\n             TraitBound(clean::PolyTrait { trait_, generic_params }, modifier) => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = clean::ResolvedPath { path: trait_ }.into_tcx(tcx);\n+                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 GenericBound::TraitBound {\n                     trait_,\n                     generic_params: generic_params.into_iter().map(|x| x.into_tcx(tcx)).collect(),\n@@ -388,9 +388,13 @@ crate fn from_trait_bound_modifier(modifier: rustc_hir::TraitBoundModifier) -> T\n \n impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n-        use clean::Type::*;\n+        use clean::Type::{\n+            Array, BareFunction, BorrowedRef, DynTrait, Generic, ImplTrait, Infer, Primitive,\n+            QPath, RawPointer, Slice, Tuple,\n+        };\n+\n         match ty {\n-            ResolvedPath { path } => Type::ResolvedPath {\n+            clean::Type::Path { path } => Type::ResolvedPath {\n                 name: path.whole_name(),\n                 id: from_item_id(path.def_id().into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n@@ -435,7 +439,7 @@ impl FromWithTcx<clean::Type> for Type {\n             },\n             QPath { name, self_type, trait_, .. } => {\n                 // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-                let trait_ = ResolvedPath { path: trait_ }.into_tcx(tcx);\n+                let trait_ = clean::Type::Path { path: trait_ }.into_tcx(tcx);\n                 Type::QualifiedPath {\n                     name: name.to_string(),\n                     self_type: Box::new((*self_type).into_tcx(tcx)),\n@@ -501,7 +505,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n         let clean::Impl { unsafety, generics, trait_, for_, items, polarity, kind } = impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n-        let trait_ = trait_.map(|path| clean::ResolvedPath { path }.into_tcx(tcx));\n+        let trait_ = trait_.map(|path| clean::Type::Path { path }.into_tcx(tcx));\n         // FIXME: use something like ImplKind in JSON?\n         let (synthetic, blanket_impl) = match kind {\n             clean::ImplKind::Normal => (false, None),"}, {"sha": "abb4bec5ca133c69366949290ac3c8a2bbaf58bc", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -131,7 +131,6 @@ crate fn test(options: Options) -> Result<(), String> {\n         .map_err(|err| format!(\"{}: {}\", options.input.display(), err))?;\n     let mut opts = TestOptions::default();\n     opts.no_crate_inject = true;\n-    opts.display_doctest_warnings = options.display_doctest_warnings;\n     let mut collector = Collector::new(\n         Symbol::intern(&options.input.display().to_string()),\n         options.clone(),\n@@ -146,11 +145,6 @@ crate fn test(options: Options) -> Result<(), String> {\n \n     find_testable_code(&input_str, &mut collector, codes, options.enable_per_target_ignores, None);\n \n-    crate::doctest::run_tests(\n-        options.test_args,\n-        options.nocapture,\n-        options.display_doctest_warnings,\n-        collector.tests,\n-    );\n+    crate::doctest::run_tests(options.test_args, options.nocapture, collector.tests);\n     Ok(())\n }"}, {"sha": "10b6fdf87f41972c414708bfa452b91b8c9fe61e", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -142,16 +142,21 @@ where\n             hir::ExprKind::Call(f, _) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n \n-                match types.node_type_opt(f.hir_id) {\n-                    Some(ty) => (ty, ex.span),\n-                    None => {\n-                        return;\n-                    }\n+                if let Some(ty) = types.node_type_opt(f.hir_id) {\n+                    (ty, ex.span)\n+                } else {\n+                    trace!(\"node_type_opt({}) = None\", f.hir_id);\n+                    return;\n                 }\n             }\n             hir::ExprKind::MethodCall(_, _, _, span) => {\n                 let types = tcx.typeck(ex.hir_id.owner);\n-                let def_id = types.type_dependent_def_id(ex.hir_id).unwrap();\n+                let def_id = if let Some(def_id) = types.type_dependent_def_id(ex.hir_id) {\n+                    def_id\n+                } else {\n+                    trace!(\"type_dependent_def_id({}) = None\", ex.hir_id);\n+                    return;\n+                };\n                 (tcx.type_of(def_id), span)\n             }\n             _ => {"}, {"sha": "8910cbbbb256c7c14cccd904c548591919a52576", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -1,4 +1,4 @@\n-// This test is to ensure that the anchors (`\u00a7`) have the expected color.\n+// This test is to ensure that the anchors (`\u00a7`) have the expected color and position.\n goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n show-text: true\n \n@@ -28,3 +28,47 @@ assert-css: (\"h2#implementations a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n // Same thing with the impl block title.\n move-cursor-to: \"#impl\"\n assert-css: (\"#impl a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n+\n+// Now we check the positions: only the first heading of the top doc comment should\n+// have a different position.\n+move-cursor-to: \".top-doc .docblock .section-header:first-child\"\n+assert-css: (\n+    \".top-doc .docblock .section-header:first-child > a::before\",\n+    {\"left\": \"-10px\", \"padding-right\": \"10px\"}\n+)\n+// We also check that the heading itself has a different indent.\n+assert-css: (\".top-doc .docblock .section-header:first-child\", {\"margin-left\": \"15px\"})\n+\n+move-cursor-to: \".top-doc .docblock .section-header:not(:first-child)\"\n+assert-css: (\n+    \".top-doc .docblock .section-header:not(:first-child) > a::before\",\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+)\n+assert-css: (\".top-doc .docblock .section-header:not(:first-child)\", {\"margin-left\": \"0px\"})\n+\n+// Now let's check some other docblock headings...\n+// First the impl block docs.\n+move-cursor-to: \"#title-for-struct-impl-doc\"\n+assert-css: (\n+    \"#title-for-struct-impl-doc > a::before\",\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+)\n+assert-css: (\"#title-for-struct-impl-doc\", {\"margin-left\": \"0px\"})\n+// Now a method docs.\n+move-cursor-to: \"#title-for-struct-impl-item-doc\"\n+assert-css: (\n+    \"#title-for-struct-impl-item-doc > a::before\",\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+)\n+assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n+\n+// Finally, we want to ensure that if the first element of the doc block isn't a heading,\n+// if there is a heading afterwards, it won't have the indent.\n+goto: file://|DOC_PATH|/test_docs/enum.WhoLetTheDogOut.html\n+\n+move-cursor-to: \".top-doc .docblock .section-header\"\n+assert-css: (\n+    \".top-doc .docblock .section-header > a::before\",\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+)\n+assert-css: (\".top-doc .docblock .section-header\", {\"margin-left\": \"0px\"})"}, {"sha": "9b37703dded4b7acf9e494019ecc200c512ad997", "filename": "src/test/rustdoc-gui/src/test_docs/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsrc%2Ftest_docs%2Flib.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -47,6 +47,8 @@ impl AsRef<str> for Foo {\n }\n \n /// Just a normal enum.\n+///\n+/// # title!\n #[doc(alias = \"ThisIsAnAlias\")]\n pub enum WhoLetTheDogOut {\n     /// Woof!"}, {"sha": "30b32c511b5fa715c3099be9d530d9ee7d33b694", "filename": "src/test/rustdoc-ui/display-output.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -1,9 +1,15 @@\n+// Test that `--show-output` has an effect and `allow(unused)` can be overriden.\n+\n // check-pass\n-// compile-flags:-Zunstable-options --display-doctest-warnings --test\n+// edition:2018\n+// compile-flags:--test --test-args=--show-output\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n // normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n /// ```\n+/// #![warn(unused)]\n /// let x = 12;\n+///\n+/// fn foo(x: &std::fmt::Display) {}\n /// ```\n pub fn foo() {}"}, {"sha": "f76dec1c85008b306be771406c2827d36686da8b", "filename": "src/test/rustdoc-ui/display-output.stdout", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdisplay-output.stdout?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -1,24 +1,58 @@\n \n running 1 test\n-test $DIR/display-output.rs - foo (line 6) ... ok\n+test $DIR/display-output.rs - foo (line 9) ... ok\n \n successes:\n \n----- $DIR/display-output.rs - foo (line 6) stdout ----\n+---- $DIR/display-output.rs - foo (line 9) stdout ----\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/display-output.rs:13:12\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |            ^^^^^^^^^^^^^^^^^ help: use `dyn`: `dyn std::fmt::Display`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+   = warning: this is accepted in the current edition (Rust 2018) but is a hard error in Rust 2021!\n+   = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2021/warnings-promoted-to-error.html>\n+\n warning: unused variable: `x`\n-  --> $DIR/display-output.rs:7:5\n+  --> $DIR/display-output.rs:11:5\n    |\n LL | let x = 12;\n    |     ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n-   = note: `#[warn(unused_variables)]` on by default\n+note: the lint level is defined here\n+  --> $DIR/display-output.rs:9:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(unused_variables)]` implied by `#[warn(unused)]`\n+\n+warning: unused variable: `x`\n+  --> $DIR/display-output.rs:13:8\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |        ^ help: if this is intentional, prefix it with an underscore: `_x`\n+\n+warning: function is never used: `foo`\n+  --> $DIR/display-output.rs:13:4\n+   |\n+LL | fn foo(x: &std::fmt::Display) {}\n+   |    ^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/display-output.rs:9:9\n+   |\n+LL | #![warn(unused)]\n+   |         ^^^^^^\n+   = note: `#[warn(dead_code)]` implied by `#[warn(unused)]`\n \n-warning: 1 warning emitted\n+warning: 4 warnings emitted\n \n \n \n successes:\n-    $DIR/display-output.rs - foo (line 6)\n+    $DIR/display-output.rs - foo (line 9)\n \n test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "a6138add5222c795314b3f501306ae081e637103", "filename": "src/test/rustdoc-ui/scrape-examples-ice.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bbad745a688c933a43d1bd977756bd6fc7f034f2/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fscrape-examples-ice.rs?ref=bbad745a688c933a43d1bd977756bd6fc7f034f2", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Z unstable-options --scrape-examples-output-path t.calls --scrape-examples-target-crate foobar\n+// check-pass\n+#![no_std]\n+use core as _;"}]}