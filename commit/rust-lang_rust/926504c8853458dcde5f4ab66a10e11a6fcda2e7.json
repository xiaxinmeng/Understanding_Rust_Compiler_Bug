{"sha": "926504c8853458dcde5f4ab66a10e11a6fcda2e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyNjUwNGM4ODUzNDU4ZGNkZTVmNGFiNjZhMTBlMTFhNmZjZGEyZTc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-05-27T17:38:52Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2014-05-27T17:38:52Z"}, "message": "collections: implement Show for Tree{Map,Set}", "tree": {"sha": "2f2194e693c65f6703ceabfa355be0465c9e5cff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f2194e693c65f6703ceabfa355be0465c9e5cff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/926504c8853458dcde5f4ab66a10e11a6fcda2e7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/926504c8853458dcde5f4ab66a10e11a6fcda2e7", "html_url": "https://github.com/rust-lang/rust/commit/926504c8853458dcde5f4ab66a10e11a6fcda2e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/926504c8853458dcde5f4ab66a10e11a6fcda2e7/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9e799f7506a620bcebd291d716e895faa9d427b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9e799f7506a620bcebd291d716e895faa9d427b", "html_url": "https://github.com/rust-lang/rust/commit/e9e799f7506a620bcebd291d716e895faa9d427b"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "fb663d91131af970c3204f824299c3e3713e7f48", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/926504c8853458dcde5f4ab66a10e11a6fcda2e7/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/926504c8853458dcde5f4ab66a10e11a6fcda2e7/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=926504c8853458dcde5f4ab66a10e11a6fcda2e7", "patch": "@@ -12,9 +12,11 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n-use std::iter;\n-use std::iter::{Peekable};\n use std::cmp::Ordering;\n+use std::fmt::Show;\n+use std::fmt;\n+use std::iter::Peekable;\n+use std::iter;\n use std::mem::{replace, swap};\n use std::ptr;\n \n@@ -67,6 +69,19 @@ impl<K: Ord + TotalOrd, V: Ord> Ord for TreeMap<K, V> {\n     fn lt(&self, other: &TreeMap<K, V>) -> bool { lt(self, other) }\n }\n \n+impl<K: TotalOrd + Show, V: Show> Show for TreeMap<K, V> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, r\"\\{\"));\n+\n+        for (i, (k, v)) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}: {}\", *k, *v));\n+        }\n+\n+        write!(f, r\"\\}\")\n+    }\n+}\n+\n impl<K: TotalOrd, V> Container for TreeMap<K, V> {\n     fn len(&self) -> uint { self.length }\n }\n@@ -547,6 +562,19 @@ impl<T: Ord + TotalOrd> Ord for TreeSet<T> {\n     fn lt(&self, other: &TreeSet<T>) -> bool { self.map < other.map }\n }\n \n+impl<T: TotalOrd + Show> Show for TreeSet<T> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        try!(write!(f, r\"\\{\"));\n+\n+        for (i, x) in self.iter().enumerate() {\n+            if i != 0 { try!(write!(f, \", \")); }\n+            try!(write!(f, \"{}\", *x));\n+        }\n+\n+        write!(f, r\"\\}\")\n+    }\n+}\n+\n impl<T: TotalOrd> Container for TreeSet<T> {\n     #[inline]\n     fn len(&self) -> uint { self.map.len() }\n@@ -1328,6 +1356,20 @@ mod test_treemap {\n         assert!(a < b && a <= b);\n     }\n \n+    #[test]\n+    fn test_show() {\n+        let mut map: TreeMap<int, int> = TreeMap::new();\n+        let empty: TreeMap<int, int> = TreeMap::new();\n+\n+        map.insert(1, 2);\n+        map.insert(3, 4);\n+\n+        let map_str = format!(\"{}\", map);\n+\n+        assert!(map_str == \"{1: 2, 3: 4}\".to_owned());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+    }\n+\n     #[test]\n     fn test_lazy_iterator() {\n         let mut m = TreeMap::new();\n@@ -1723,4 +1765,18 @@ mod test_set {\n             assert!(set.contains(x));\n         }\n     }\n+\n+    #[test]\n+    fn test_show() {\n+        let mut set: TreeSet<int> = TreeSet::new();\n+        let empty: TreeSet<int> = TreeSet::new();\n+\n+        set.insert(1);\n+        set.insert(2);\n+\n+        let set_str = format!(\"{}\", set);\n+\n+        assert!(set_str == \"{1, 2}\".to_owned());\n+        assert_eq!(format!(\"{}\", empty), \"{}\".to_owned());\n+    }\n }"}]}