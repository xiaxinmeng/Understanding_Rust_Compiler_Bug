{"sha": "039045c49bec06f3a42aed90d3bc94520d92514e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzOTA0NWM0OWJlYzA2ZjNhNDJhZWQ5MGQzYmM5NDUyMGQ5MjUxNGU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-21T23:07:07Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-02-22T00:28:18Z"}, "message": "Move generic arg / param validation to `create_substs_for_generic_args`", "tree": {"sha": "3091e29070119dfda744b3c9661f49fccd8a996b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3091e29070119dfda744b3c9661f49fccd8a996b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/039045c49bec06f3a42aed90d3bc94520d92514e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/039045c49bec06f3a42aed90d3bc94520d92514e", "html_url": "https://github.com/rust-lang/rust/commit/039045c49bec06f3a42aed90d3bc94520d92514e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/039045c49bec06f3a42aed90d3bc94520d92514e/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750e673491114cd8454f1715ce1fda8dd02b7ac0", "url": "https://api.github.com/repos/rust-lang/rust/commits/750e673491114cd8454f1715ce1fda8dd02b7ac0", "html_url": "https://github.com/rust-lang/rust/commit/750e673491114cd8454f1715ce1fda8dd02b7ac0"}], "stats": {"total": 302, "additions": 192, "deletions": 110}, "files": [{"sha": "d55efeda3c14afaf9f81b7a36a59a2ea9f0643ff", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 16, "deletions": 64, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -594,23 +594,15 @@ impl<'a> AstValidator<'a> {\n     }\n }\n \n-enum GenericPosition {\n-    Param,\n-    Arg,\n-}\n-\n-fn validate_generics_order<'a>(\n+fn validate_generic_param_order<'a>(\n     sess: &Session,\n     handler: &rustc_errors::Handler,\n     generics: impl Iterator<Item = (ParamKindOrd, Option<&'a [GenericBound]>, Span, Option<String>)>,\n-    pos: GenericPosition,\n     span: Span,\n ) {\n     let mut max_param: Option<ParamKindOrd> = None;\n     let mut out_of_order = FxHashMap::default();\n     let mut param_idents = vec![];\n-    let mut found_type = false;\n-    let mut found_const = false;\n \n     for (kind, bounds, span, ident) in generics {\n         if let Some(ident) = ident {\n@@ -624,11 +616,6 @@ fn validate_generics_order<'a>(\n             }\n             Some(_) | None => *max_param = Some(kind),\n         };\n-        match kind {\n-            ParamKindOrd::Type => found_type = true,\n-            ParamKindOrd::Const => found_const = true,\n-            _ => {}\n-        }\n     }\n \n     let mut ordered_params = \"<\".to_string();\n@@ -651,42 +638,26 @@ fn validate_generics_order<'a>(\n     }\n     ordered_params += \">\";\n \n-    let pos_str = match pos {\n-        GenericPosition::Param => \"parameter\",\n-        GenericPosition::Arg => \"argument\",\n-    };\n-\n     for (param_ord, (max_param, spans)) in &out_of_order {\n-        let mut err = handler.struct_span_err(\n-            spans.clone(),\n-            &format!(\n-                \"{} {pos}s must be declared prior to {} {pos}s\",\n-                param_ord,\n-                max_param,\n-                pos = pos_str,\n-            ),\n-        );\n-        if let GenericPosition::Param = pos {\n-            err.span_suggestion(\n-                span,\n+        let mut err =\n+            handler.struct_span_err(\n+                spans.clone(),\n                 &format!(\n-                    \"reorder the {}s: lifetimes, then types{}\",\n-                    pos_str,\n-                    if sess.features_untracked().const_generics { \", then consts\" } else { \"\" },\n+                    \"{} parameters must be declared prior to {} parameters\",\n+                    param_ord, max_param,\n                 ),\n-                ordered_params.clone(),\n-                Applicability::MachineApplicable,\n             );\n-        }\n+        err.span_suggestion(\n+            span,\n+            &format!(\n+                \"reorder the parameters: lifetimes, then types{}\",\n+                if sess.features_untracked().const_generics { \", then consts\" } else { \"\" },\n+            ),\n+            ordered_params.clone(),\n+            Applicability::MachineApplicable,\n+        );\n         err.emit();\n     }\n-\n-    // FIXME(const_generics): we shouldn't have to abort here at all, but we currently get ICEs\n-    // if we don't. Const parameters and type parameters can currently conflict if they\n-    // are out-of-order.\n-    if !out_of_order.is_empty() && found_type && found_const {\n-        FatalError.raise();\n-    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -1000,24 +971,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         match *generic_args {\n             GenericArgs::AngleBracketed(ref data) => {\n                 walk_list!(self, visit_generic_arg, &data.args);\n-                validate_generics_order(\n-                    self.session,\n-                    self.err_handler(),\n-                    data.args.iter().map(|arg| {\n-                        (\n-                            match arg {\n-                                GenericArg::Lifetime(..) => ParamKindOrd::Lifetime,\n-                                GenericArg::Type(..) => ParamKindOrd::Type,\n-                                GenericArg::Const(..) => ParamKindOrd::Const,\n-                            },\n-                            None,\n-                            arg.span(),\n-                            None,\n-                        )\n-                    }),\n-                    GenericPosition::Arg,\n-                    generic_args.span(),\n-                );\n \n                 // Type bindings such as `Item = impl Debug` in `Iterator<Item = Debug>`\n                 // are allowed to contain nested `impl Trait`.\n@@ -1054,7 +1007,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n-        validate_generics_order(\n+        validate_generic_param_order(\n             self.session,\n             self.err_handler(),\n             generics.params.iter().map(|param| {\n@@ -1069,7 +1022,6 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 };\n                 (kind, Some(&*param.bounds), param.ident.span, ident)\n             }),\n-            GenericPosition::Param,\n             generics.span,\n         );\n "}, {"sha": "91a7b6c8958382bab398372bec9c093e590339b4", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -417,6 +417,7 @@ E0743: include_str!(\"./error_codes/E0743.md\"),\n E0744: include_str!(\"./error_codes/E0744.md\"),\n E0745: include_str!(\"./error_codes/E0745.md\"),\n E0746: include_str!(\"./error_codes/E0746.md\"),\n+E0747: include_str!(\"./error_codes/E0747.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "45b2dfd9e2bb3ec76e750dcfd8cf71779762227a", "filename": "src/librustc_error_codes/error_codes/E0747.md", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0747.md?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -0,0 +1,10 @@\n+Generic arguments must be provided in the same order as the corresponding generic\n+parameters are declared.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0747\n+struct S<'a, T>(&'a T);\n+\n+type X = S<(), 'static>; // error: the type argument is provided before the lifetime argument\n+```"}, {"sha": "4ef732a7662a77646b6dda86c74afb70b58493da", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 71, "deletions": 12, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -481,6 +481,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         parent_substs: &[subst::GenericArg<'tcx>],\n         has_self: bool,\n         self_ty: Option<Ty<'tcx>>,\n+        arg_count_mismatch: bool,\n         args_for_def_id: impl Fn(DefId) -> (Option<&'b GenericArgs<'b>>, bool),\n         provided_kind: impl Fn(&GenericParamDef, &GenericArg<'_>) -> subst::GenericArg<'tcx>,\n         mut inferred_kind: impl FnMut(\n@@ -504,7 +505,6 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         // methods in `subst.rs`, so that we can iterate over the arguments and\n         // parameters in lock-step linearly, instead of trying to match each pair.\n         let mut substs: SmallVec<[subst::GenericArg<'tcx>; 8]> = SmallVec::with_capacity(count);\n-\n         // Iterate over each segment of the path.\n         while let Some((def_id, defs)) = stack.pop() {\n             let mut params = defs.params.iter().peekable();\n@@ -541,6 +541,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             let mut args =\n                 generic_args.iter().flat_map(|generic_args| generic_args.args.iter()).peekable();\n \n+            let arg_kind = |arg| match arg {\n+                &GenericArg::Lifetime(_) => \"lifetime\",\n+                &GenericArg::Type(_) => \"type\",\n+                &GenericArg::Const(_) => \"constant\",\n+            };\n+\n+            // If we encounter a type or const when we expect a lifetime, we infer the lifetimes.\n+            // If we later encounter a lifetime, we know that the arguments were provided in the\n+            // wrong order. `force_infer_lt` records the type or const that forced lifetimes to be\n+            // inferred, so we can use it for diagnostics later.\n+            let mut force_infer_lt = None;\n+\n             loop {\n                 // We're going to iterate through the generic arguments that the user\n                 // provided, matching them with the generic parameters we expect.\n@@ -561,28 +573,74 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                 // We expected a lifetime argument, but got a type or const\n                                 // argument. That means we're inferring the lifetimes.\n                                 substs.push(inferred_kind(None, param, infer_args));\n+                                force_infer_lt = Some(arg);\n                                 params.next();\n                             }\n-                            (_, _) => {\n+                            (_, kind) => {\n                                 // We expected one kind of parameter, but the user provided\n-                                // another. This is an error, but we need to handle it\n-                                // gracefully so we can report sensible errors.\n-                                // In this case, we're simply going to infer this argument.\n-                                args.next();\n+                                // another. This is an error. However, if we already know that\n+                                // the arguments don't match up with the parameters, we won't issue\n+                                // an additional error, as the user already knows what's wrong.\n+                                if !arg_count_mismatch {\n+                                    let param_kind = match kind {\n+                                        GenericParamDefKind::Lifetime => \"lifetime\",\n+                                        GenericParamDefKind::Type { .. } => \"type\",\n+                                        GenericParamDefKind::Const => \"constant\",\n+                                    };\n+                                    struct_span_err!(\n+                                        tcx.sess,\n+                                        arg.span(),\n+                                        E0747,\n+                                        \"{} provided when a {} was expected\",\n+                                        arg_kind(arg),\n+                                        param_kind,\n+                                    )\n+                                    .emit();\n+                                }\n+\n+                                // We've reported the error, but we want to make sure that this\n+                                // problem doesn't bubble down and create additional, irrelevant\n+                                // errors. In this case, we're simply going to ignore the argument\n+                                // and any following arguments. The rest of the parameters will be\n+                                // inferred.\n+                                while args.next().is_some() {}\n                             }\n                         }\n                     }\n-                    (Some(_), None) => {\n+                    (Some(&arg), None) => {\n                         // We should never be able to reach this point with well-formed input.\n-                        // Getting to this point means the user supplied more arguments than\n-                        // there are parameters.\n-                        args.next();\n+                        // There are two situations in which we can encounter this issue.\n+                        //\n+                        //  1.  The number of arguments is incorrect. In this case, an error\n+                        //      will already have been emitted, and we can ignore it. This case\n+                        //      also occurs when late-bound lifetime parameters are present, yet\n+                        //      the lifetime arguments have also been explicitly specified by the\n+                        //      user.\n+                        //  2.  We've inferred some lifetimes, which have been provided later (i.e.\n+                        //      after a type or const). We want to throw an error in this case.\n+\n+                        if !arg_count_mismatch {\n+                            let kind = arg_kind(arg);\n+                            assert_eq!(kind, \"lifetime\");\n+                            let provided =\n+                                force_infer_lt.expect(\"lifetimes ought to have been inferred\");\n+                            struct_span_err!(\n+                                tcx.sess,\n+                                provided.span(),\n+                                E0747,\n+                                \"{} provided when a {} was expected\",\n+                                arg_kind(provided),\n+                                kind,\n+                            )\n+                            .emit();\n+                        }\n+\n+                        break;\n                     }\n                     (None, Some(&param)) => {\n                         // If there are fewer arguments than parameters, it means\n                         // we're inferring the remaining arguments.\n                         substs.push(inferred_kind(Some(&substs), param, infer_args));\n-                        args.next();\n                         params.next();\n                     }\n                     (None, None) => break,\n@@ -658,7 +716,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             assert!(self_ty.is_none() && parent_substs.is_empty());\n         }\n \n-        let (_, potential_assoc_types) = Self::check_generic_arg_count(\n+        let (arg_count_mismatch, potential_assoc_types) = Self::check_generic_arg_count(\n             tcx,\n             span,\n             &generic_params,\n@@ -691,6 +749,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             parent_substs,\n             self_ty.is_some(),\n             self_ty,\n+            arg_count_mismatch,\n             // Provide the generic args, and whether types should be inferred.\n             |did| {\n                 if did == def_id {"}, {"sha": "e3fde9159cc38257993f2941dd70faa7cdcbc012", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // If they were not explicitly supplied, just construct fresh\n         // variables.\n         let generics = self.tcx.generics_of(pick.item.def_id);\n-        AstConv::check_generic_arg_count_for_call(\n+        let arg_count_mismatch = AstConv::check_generic_arg_count_for_call(\n             self.tcx, self.span, &generics, &seg, true, // `is_method_call`\n         );\n \n@@ -313,6 +313,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n             parent_substs,\n             false,\n             None,\n+            arg_count_mismatch,\n             // Provide the generic args, and whether types should be inferred.\n             |def_id| {\n                 // The last component of the returned tuple here is unimportant."}, {"sha": "989f98682f93e31d16205d43217afce3686054ef", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -5520,6 +5520,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 &[][..],\n                 has_self,\n                 self_ty,\n+                !infer_args_for_err.is_empty(),\n                 // Provide the generic args, and whether types should be inferred.\n                 |def_id| {\n                     if let Some(&PathSeg(_, index)) ="}, {"sha": "3bdec71d3dcf702c51a356ad7ceeff15eb1f2b6f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1269,7 +1269,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n     let object_lifetime_defaults = tcx.object_lifetime_defaults(hir_id);\n \n-    // Now create the real type parameters.\n+    // Now create the real type and const parameters.\n     let type_start = own_start - has_self as u32 + params.len() as u32;\n     let mut i = 0;\n     params.extend(ast_generics.params.iter().filter_map(|param| {"}, {"sha": "f024eb6a957e374c93b0e9e5fa8802001a2cc77e", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+type Array<T, const N: usize> = [T; N];\n+\n+fn foo<const N: usize>() -> Array<N, ()> { //~ ERROR constant provided when a type was expected\n+    unimplemented!()\n+}\n+\n+fn main() {}"}, {"sha": "225e1cd547e7c7906d95b25e7142eb02dfdb6a90", "filename": "src/test/ui/const-generics/const-arg-type-arg-misordered.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-type-arg-misordered.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-arg-type-arg-misordered.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0747]: constant provided when a type was expected\n+  --> $DIR/const-arg-type-arg-misordered.rs:6:35\n+   |\n+LL | fn foo<const N: usize>() -> Array<N, ()> {\n+   |                                   ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "683bcc867c79908d5b7778890348b8294786ac1e", "filename": "src/test/ui/const-generics/const-param-after-const-literal-arg.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+struct Foo<const A: usize, const B: usize>;\n+\n+impl<const A: usize> Foo<1, A> {} // ok\n+\n+fn main() {}"}, {"sha": "a949a6ec9ff5ca03cf5c69b770921cd647bd2d5f", "filename": "src/test/ui/const-generics/const-param-after-const-literal-arg.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-after-const-literal-arg.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-after-const-literal-arg.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}, {"sha": "2c81681b85e7ddfb6cc9e07e530e67e77dcf9b76", "filename": "src/test/ui/const-generics/const-param-before-other-params.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1,4 +1,5 @@\n #![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n \n fn bar<const X: (), 'a>(_: &'a ()) {\n     //~^ ERROR lifetime parameters must be declared prior to const parameters"}, {"sha": "fccf732de4c9991f2f99c25d77664520692bd7a7", "filename": "src/test/ui/const-generics/const-param-before-other-params.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-before-other-params.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1,14 +1,22 @@\n error: lifetime parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:3:21\n+  --> $DIR/const-param-before-other-params.rs:4:21\n    |\n LL | fn bar<const X: (), 'a>(_: &'a ()) {\n    |       --------------^^- help: reorder the parameters: lifetimes, then types, then consts: `<'a, const X: ()>`\n \n error: type parameters must be declared prior to const parameters\n-  --> $DIR/const-param-before-other-params.rs:7:21\n+  --> $DIR/const-param-before-other-params.rs:8:21\n    |\n LL | fn foo<const X: (), T>(_: &T) {\n    |       --------------^- help: reorder the parameters: lifetimes, then types, then consts: `<T, const X: ()>`\n \n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param-before-other-params.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "46ece84d69e457ae97084e56f27a9c9785f50694", "filename": "src/test/ui/parser/issue-14303-fncall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -11,7 +11,7 @@ fn foo<'a, 'b>(start: &'a usize, end: &'a usize) {\n     let _x = (*start..*end)\n         .map(|x| S { a: start, b: end })\n         .collect::<Vec<S<_, 'a>>>();\n-        //~^ ERROR lifetime arguments must be declared prior to type arguments\n+        //~^ ERROR type provided when a lifetime was expected\n }\n \n fn main() {}"}, {"sha": "cdda0d001c7dc575c7fb5f49c8aa86f4edebfad6", "filename": "src/test/ui/parser/issue-14303-fncall.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-fncall.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1,8 +1,9 @@\n-error: lifetime arguments must be declared prior to type arguments\n-  --> $DIR/issue-14303-fncall.rs:13:29\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/issue-14303-fncall.rs:13:26\n    |\n LL |         .collect::<Vec<S<_, 'a>>>();\n-   |                             ^^\n+   |                          ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "89ef914aba238a7871241e1ccf7b860c87f7460e", "filename": "src/test/ui/parser/issue-14303-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -8,6 +8,6 @@ mod foo {\n }\n \n fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-//~^ ERROR lifetime arguments must be declared prior to type arguments\n+//~^ ERROR type provided when a lifetime was expected\n \n fn main() {}"}, {"sha": "841e63ecbe9d5128c40f5d27ebed08470bc57375", "filename": "src/test/ui/parser/issue-14303-path.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-14303-path.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1,8 +1,9 @@\n-error: lifetime arguments must be declared prior to type arguments\n-  --> $DIR/issue-14303-path.rs:10:40\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/issue-14303-path.rs:10:37\n    |\n LL | fn bar<'a, 'b, 'c, T>(x: foo::X<'a, T, 'b, 'c>) {}\n-   |                                        ^^  ^^\n+   |                                     ^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "6505a97de6e4bfcbb8c556fd01d9476b133e0be5", "filename": "src/test/ui/suggestions/suggest-move-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -33,7 +33,7 @@ struct A<T, M: One<A=(), T>> { //~ ERROR associated type bindings must be declar\n \n struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n //~^ ERROR associated type bindings must be declared after generic parameters\n-//~^^ ERROR lifetime arguments must be declared prior to type arguments\n+//~^^ ERROR type provided when a lifetime was expected\n     m: M,\n     t: &'a T,\n }\n@@ -47,7 +47,7 @@ struct B<T, U, V, M: Three<A=(), B=(), C=(), T, U, V>> { //~ ERROR associated ty\n \n struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n //~^ ERROR associated type bindings must be declared after generic parameters\n-//~^^ ERROR lifetime arguments must be declared prior to type arguments\n+//~^^ ERROR type provided when a lifetime was expected\n     m: M,\n     t: &'a T,\n     u: &'b U,\n@@ -63,7 +63,7 @@ struct C<T, U, V, M: Three<T, A=(), B=(), C=(), U, V>> { //~ ERROR associated ty\n \n struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n //~^ ERROR associated type bindings must be declared after generic parameters\n-//~^^ ERROR lifetime arguments must be declared prior to type arguments\n+//~^^ ERROR lifetime provided when a type was expected\n     m: M,\n     t: &'a T,\n     u: &'b U,\n@@ -79,7 +79,7 @@ struct D<T, U, V, M: Three<T, A=(), B=(), U, C=(), V>> { //~ ERROR associated ty\n \n struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n //~^ ERROR associated type bindings must be declared after generic parameters\n-//~^^ ERROR lifetime arguments must be declared prior to type arguments\n+//~^^ ERROR lifetime provided when a type was expected\n     m: M,\n     t: &'a T,\n     u: &'b U,"}, {"sha": "07ad1a3150836e0f418dfa676d2d16f392aeaec0", "filename": "src/test/ui/suggestions/suggest-move-types.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-move-types.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -74,29 +74,30 @@ LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, '\n    |                                                            |     this associated type binding should be moved after the generic parameters\n    |                                                            this associated type binding should be moved after the generic parameters\n \n-error: lifetime arguments must be declared prior to type arguments\n-  --> $DIR/suggest-move-types.rs:34:46\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/suggest-move-types.rs:34:43\n    |\n LL | struct Al<'a, T, M: OneWithLifetime<A=(), T, 'a>> {\n-   |                                              ^^\n+   |                                           ^\n \n-error: lifetime arguments must be declared prior to type arguments\n-  --> $DIR/suggest-move-types.rs:48:80\n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/suggest-move-types.rs:48:71\n    |\n LL | struct Bl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<A=(), B=(), C=(), T, U, V, 'a, 'b, 'c>> {\n-   |                                                                                ^^  ^^  ^^\n+   |                                                                       ^\n \n-error: lifetime arguments must be declared prior to type arguments\n+error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:64:56\n    |\n LL | struct Cl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), C=(), U, 'b, V, 'c>> {\n-   |                                                        ^^                       ^^     ^^\n+   |                                                        ^^\n \n-error: lifetime arguments must be declared prior to type arguments\n+error[E0747]: lifetime provided when a type was expected\n   --> $DIR/suggest-move-types.rs:80:56\n    |\n LL | struct Dl<'a, 'b, 'c, T, U, V, M: ThreeWithLifetime<T, 'a, A=(), B=(), U, 'b, C=(), V, 'c>> {\n-   |                                                        ^^                 ^^           ^^\n+   |                                                        ^^\n \n error: aborting due to 12 previous errors\n \n+For more information about this error, try `rustc --explain E0747`."}, {"sha": "e885cd2f68ac5bbed55e1ced305c729cd34ef060", "filename": "src/test/ui/traits/trait-object-vs-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.rs?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     //~^ ERROR wrong number of lifetime arguments: expected 1, found 2\n     //~| ERROR wrong number of type arguments: expected 1, found 0\n     let _: S<dyn 'static +, 'static>;\n-    //~^ ERROR lifetime arguments must be declared prior to type arguments\n+    //~^ ERROR type provided when a lifetime was expected\n     //~| ERROR at least one trait is required for an object type\n }"}, {"sha": "d1e5a65c0ad683056681b6a785a4bbb00dd3994a", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/039045c49bec06f3a42aed90d3bc94520d92514e/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=039045c49bec06f3a42aed90d3bc94520d92514e", "patch": "@@ -1,9 +1,3 @@\n-error: lifetime arguments must be declared prior to type arguments\n-  --> $DIR/trait-object-vs-lifetime.rs:14:29\n-   |\n-LL |     let _: S<dyn 'static +, 'static>;\n-   |                             ^^^^^^^\n-\n error[E0224]: at least one trait is required for an object type\n   --> $DIR/trait-object-vs-lifetime.rs:9:23\n    |\n@@ -28,6 +22,13 @@ error[E0224]: at least one trait is required for an object type\n LL |     let _: S<dyn 'static +, 'static>;\n    |              ^^^^^^^^^^^^^\n \n+error[E0747]: type provided when a lifetime was expected\n+  --> $DIR/trait-object-vs-lifetime.rs:14:14\n+   |\n+LL |     let _: S<dyn 'static +, 'static>;\n+   |              ^^^^^^^^^^^^^\n+\n error: aborting due to 5 previous errors\n \n-For more information about this error, try `rustc --explain E0107`.\n+Some errors have detailed explanations: E0107, E0747.\n+For more information about an error, try `rustc --explain E0107`."}]}