{"sha": "dab8808e82b26a45cff00d1f49863562cf4f5ce8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYjg4MDhlODJiMjZhNDVjZmYwMGQxZjQ5ODYzNTYyY2Y0ZjVjZTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:39:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-06-25T06:39:33Z"}, "message": "Abstract over channel", "tree": {"sha": "4c69a79e2c77eff60289f9884a68d73aad7f66cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c69a79e2c77eff60289f9884a68d73aad7f66cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dab8808e82b26a45cff00d1f49863562cf4f5ce8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dab8808e82b26a45cff00d1f49863562cf4f5ce8", "html_url": "https://github.com/rust-lang/rust/commit/dab8808e82b26a45cff00d1f49863562cf4f5ce8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dab8808e82b26a45cff00d1f49863562cf4f5ce8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69e6924dd596cab20333c81b4557008b7a67bad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/69e6924dd596cab20333c81b4557008b7a67bad0", "html_url": "https://github.com/rust-lang/rust/commit/69e6924dd596cab20333c81b4557008b7a67bad0"}], "stats": {"total": 73, "additions": 43, "deletions": 30}, "files": [{"sha": "063603b451311274a53b23f911a92ada959e8c50", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 33, "deletions": 23, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=dab8808e82b26a45cff00d1f49863562cf4f5ce8", "patch": "@@ -52,17 +52,19 @@ pub struct FlycheckHandle {\n     // XXX: drop order is significant\n     cmd_send: Sender<CheckCommand>,\n     handle: jod_thread::JoinHandle<()>,\n-    pub task_recv: Receiver<CheckTask>,\n }\n \n impl FlycheckHandle {\n-    pub fn spawn(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckHandle {\n-        let (task_send, task_recv) = unbounded::<CheckTask>();\n+    pub fn spawn(\n+        config: FlycheckConfig,\n+        workspace_root: PathBuf,\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n+    ) -> FlycheckHandle {\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            FlycheckActor::new(config, workspace_root).run(&task_send, &cmd_recv);\n+            FlycheckActor::new(config, workspace_root, sender).run(&cmd_recv);\n         });\n-        FlycheckHandle { task_recv, cmd_send, handle }\n+        FlycheckHandle { cmd_send, handle }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n@@ -96,6 +98,7 @@ pub enum CheckCommand {\n }\n \n struct FlycheckActor {\n+    sender: Box<dyn Fn(CheckTask) + Send>,\n     config: FlycheckConfig,\n     workspace_root: PathBuf,\n     last_update_req: Option<Instant>,\n@@ -110,8 +113,13 @@ struct FlycheckActor {\n }\n \n impl FlycheckActor {\n-    fn new(config: FlycheckConfig, workspace_root: PathBuf) -> FlycheckActor {\n+    fn new(\n+        config: FlycheckConfig,\n+        workspace_root: PathBuf,\n+        sender: Box<dyn Fn(CheckTask) + Send>,\n+    ) -> FlycheckActor {\n         FlycheckActor {\n+            sender,\n             config,\n             workspace_root,\n             last_update_req: None,\n@@ -120,9 +128,9 @@ impl FlycheckActor {\n         }\n     }\n \n-    fn run(&mut self, task_send: &Sender<CheckTask>, cmd_recv: &Receiver<CheckCommand>) {\n+    fn run(&mut self, cmd_recv: &Receiver<CheckCommand>) {\n         // If we rerun the thread, we need to discard the previous check results first\n-        self.clean_previous_results(task_send);\n+        self.clean_previous_results();\n \n         loop {\n             select! {\n@@ -134,7 +142,7 @@ impl FlycheckActor {\n                     },\n                 },\n                 recv(self.message_recv) -> msg => match msg {\n-                    Ok(msg) => self.handle_message(msg, task_send),\n+                    Ok(msg) => self.handle_message(msg),\n                     Err(RecvError) => {\n                         // Watcher finished, replace it with a never channel to\n                         // avoid busy-waiting.\n@@ -146,15 +154,15 @@ impl FlycheckActor {\n \n             if self.should_recheck() {\n                 self.last_update_req = None;\n-                task_send.send(CheckTask::ClearDiagnostics).unwrap();\n+                self.send(CheckTask::ClearDiagnostics);\n                 self.restart_check_process();\n             }\n         }\n     }\n \n-    fn clean_previous_results(&self, task_send: &Sender<CheckTask>) {\n-        task_send.send(CheckTask::ClearDiagnostics).unwrap();\n-        task_send.send(CheckTask::Status(Status::End)).unwrap();\n+    fn clean_previous_results(&self) {\n+        self.send(CheckTask::ClearDiagnostics);\n+        self.send(CheckTask::Status(Status::End));\n     }\n \n     fn should_recheck(&mut self) -> bool {\n@@ -173,27 +181,25 @@ impl FlycheckActor {\n         }\n     }\n \n-    fn handle_message(&self, msg: CheckEvent, task_send: &Sender<CheckTask>) {\n+    fn handle_message(&self, msg: CheckEvent) {\n         match msg {\n             CheckEvent::Begin => {\n-                task_send.send(CheckTask::Status(Status::Being)).unwrap();\n+                self.send(CheckTask::Status(Status::Being));\n             }\n \n             CheckEvent::End => {\n-                task_send.send(CheckTask::Status(Status::End)).unwrap();\n+                self.send(CheckTask::Status(Status::End));\n             }\n \n             CheckEvent::Msg(Message::CompilerArtifact(msg)) => {\n-                task_send.send(CheckTask::Status(Status::Progress(msg.target.name))).unwrap();\n+                self.send(CheckTask::Status(Status::Progress(msg.target.name)));\n             }\n \n             CheckEvent::Msg(Message::CompilerMessage(msg)) => {\n-                task_send\n-                    .send(CheckTask::AddDiagnostic {\n-                        workspace_root: self.workspace_root.clone(),\n-                        diagnostic: msg.message,\n-                    })\n-                    .unwrap();\n+                self.send(CheckTask::AddDiagnostic {\n+                    workspace_root: self.workspace_root.clone(),\n+                    diagnostic: msg.message,\n+                });\n             }\n \n             CheckEvent::Msg(Message::BuildScriptExecuted(_msg)) => {}\n@@ -271,6 +277,10 @@ impl FlycheckActor {\n             let _ = message_send.send(CheckEvent::End);\n         }))\n     }\n+\n+    fn send(&self, check_task: CheckTask) {\n+        (self.sender)(check_task)\n+    }\n }\n \n enum CheckEvent {"}, {"sha": "42edadd707e86dc3fafc4f8d18f2cb202e66b646", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=dab8808e82b26a45cff00d1f49863562cf4f5ce8", "patch": "@@ -9,7 +9,7 @@ use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n use ra_db::{CrateId, SourceRoot, VfsPath};\n-use ra_flycheck::{FlycheckConfig, FlycheckHandle};\n+use ra_flycheck::{CheckTask, FlycheckConfig, FlycheckHandle};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};\n use stdx::format_to;\n@@ -30,12 +30,15 @@ use rustc_hash::{FxHashMap, FxHashSet};\n fn create_flycheck(\n     workspaces: &[ProjectWorkspace],\n     config: &FlycheckConfig,\n-) -> Option<FlycheckHandle> {\n+) -> Option<(FlycheckHandle, Receiver<CheckTask>)> {\n     // FIXME: Figure out the multi-workspace situation\n     workspaces.iter().find_map(move |w| match w {\n         ProjectWorkspace::Cargo { cargo, .. } => {\n+            let (sender, receiver) = unbounded();\n+            let sender = Box::new(move |msg| sender.send(msg).unwrap());\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(FlycheckHandle::spawn(config.clone(), cargo_project_root.into()))\n+            let flycheck = FlycheckHandle::spawn(config.clone(), cargo_project_root.into(), sender);\n+            Some((flycheck, receiver))\n         }\n         ProjectWorkspace::Json { .. } => {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -66,7 +69,7 @@ pub(crate) struct GlobalState {\n     pub(crate) analysis_host: AnalysisHost,\n     pub(crate) loader: Box<dyn vfs::loader::Handle>,\n     pub(crate) task_receiver: Receiver<vfs::loader::Message>,\n-    pub(crate) flycheck: Option<FlycheckHandle>,\n+    pub(crate) flycheck: Option<(FlycheckHandle, Receiver<CheckTask>)>,\n     pub(crate) diagnostics: DiagnosticCollection,\n     pub(crate) mem_docs: FxHashSet<VfsPath>,\n     pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,"}, {"sha": "e5f82de5ed78688d6dd8ff7f3d0d5788fe0be412", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dab8808e82b26a45cff00d1f49863562cf4f5ce8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=dab8808e82b26a45cff00d1f49863562cf4f5ce8", "patch": "@@ -136,7 +136,7 @@ pub fn main_loop(config: Config, connection: Connection) -> Result<()> {\n                     Ok(task) => Event::Vfs(task),\n                     Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n-                recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n+                recv(global_state.flycheck.as_ref().map_or(&never(), |it| &it.1)) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n                 },\n@@ -290,7 +290,7 @@ fn loop_turn(\n \n     if became_ready {\n         if let Some(flycheck) = &global_state.flycheck {\n-            flycheck.update();\n+            flycheck.0.update();\n         }\n     }\n \n@@ -486,7 +486,7 @@ fn on_notification(\n     let not = match notification_cast::<lsp_types::notification::DidSaveTextDocument>(not) {\n         Ok(_params) => {\n             if let Some(flycheck) = &global_state.flycheck {\n-                flycheck.update();\n+                flycheck.0.update();\n             }\n             return Ok(());\n         }"}]}