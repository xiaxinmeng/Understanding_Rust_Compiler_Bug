{"sha": "6203f68735a1b7511b85560b64995a14f1b40765", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMDNmNjg3MzVhMWI3NTExYjg1NTYwYjY0OTk1YTE0ZjFiNDA3NjU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-12T13:20:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-16T09:23:22Z"}, "message": "compiletest: Introduce `// {check,build,run}-pass` pass modes", "tree": {"sha": "762767eda64c720ec835789ecd53b5f7f8f9b5db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/762767eda64c720ec835789ecd53b5f7f8f9b5db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6203f68735a1b7511b85560b64995a14f1b40765", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6203f68735a1b7511b85560b64995a14f1b40765", "html_url": "https://github.com/rust-lang/rust/commit/6203f68735a1b7511b85560b64995a14f1b40765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6203f68735a1b7511b85560b64995a14f1b40765/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "374c63e0fc356eb61b1966cb6026a2a49fe9226d", "url": "https://api.github.com/repos/rust-lang/rust/commits/374c63e0fc356eb61b1966cb6026a2a49fe9226d", "html_url": "https://github.com/rust-lang/rust/commit/374c63e0fc356eb61b1966cb6026a2a49fe9226d"}], "stats": {"total": 88, "additions": 32, "deletions": 56}, "files": [{"sha": "8c1e8e6a8d3b988354b57f3ca3d4ebb5615d0e54", "filename": "src/test/incremental/no_mangle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftest%2Fincremental%2Fno_mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftest%2Fincremental%2Fno_mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fno_mangle.rs?ref=6203f68735a1b7511b85560b64995a14f1b40765", "patch": "@@ -1,4 +1,4 @@\n-// revisions:rpass1 rpass2\n+// revisions:cfail1 cfail2\n // compile-flags: --crate-type cdylib\n // skip-codegen\n "}, {"sha": "3c0e22613128ad9fc350929a6e7adb4bfdabbb37", "filename": "src/test/run-pass/compiletest-skip-codegen.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/374c63e0fc356eb61b1966cb6026a2a49fe9226d/src%2Ftest%2Frun-pass%2Fcompiletest-skip-codegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374c63e0fc356eb61b1966cb6026a2a49fe9226d/src%2Ftest%2Frun-pass%2Fcompiletest-skip-codegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompiletest-skip-codegen.rs?ref=374c63e0fc356eb61b1966cb6026a2a49fe9226d", "patch": "@@ -1,7 +0,0 @@\n-// Test that with the `skip-codegen` option the test isn't executed.\n-\n-// skip-codegen\n-\n-fn main() {\n-    unreachable!();\n-}"}, {"sha": "8be15bb15768f9c04d07d93544e0a8264eddc08a", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=6203f68735a1b7511b85560b64995a14f1b40765", "patch": "@@ -290,6 +290,13 @@ impl EarlyProps {\n     }\n }\n \n+#[derive(Clone, Copy, PartialEq, Debug)]\n+pub enum PassMode {\n+    Check,\n+    Build,\n+    Run,\n+}\n+\n #[derive(Clone, Debug)]\n pub struct TestProps {\n     // Lines that should be expected, in order, on standard out\n@@ -349,14 +356,10 @@ pub struct TestProps {\n     // testing harness and used when generating compilation\n     // arguments. (In particular, it propagates to the aux-builds.)\n     pub incremental_dir: Option<PathBuf>,\n-    // Specifies that a test must actually compile without errors.\n-    pub compile_pass: bool,\n+    // How far should the test proceed while still passing.\n+    pub pass_mode: Option<PassMode>,\n     // rustdoc will test the output of the `--test` option\n     pub check_test_line_numbers_match: bool,\n-    // The test must be compiled and run successfully. Only used in UI tests for now.\n-    pub run_pass: bool,\n-    // Skip any codegen step and running the executable. Only for run-pass.\n-    pub skip_codegen: bool,\n     // Do not pass `-Z ui-testing` to UI tests\n     pub disable_ui_testing_normalization: bool,\n     // customized normalization rules\n@@ -396,10 +399,8 @@ impl TestProps {\n             pretty_compare_only: false,\n             forbid_output: vec![],\n             incremental_dir: None,\n-            compile_pass: false,\n+            pass_mode: None,\n             check_test_line_numbers_match: false,\n-            run_pass: false,\n-            skip_codegen: false,\n             disable_ui_testing_normalization: false,\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n@@ -525,17 +526,14 @@ impl TestProps {\n                 self.check_test_line_numbers_match = config.parse_check_test_line_numbers_match(ln);\n             }\n \n-            if !self.run_pass {\n-                self.run_pass = config.parse_run_pass(ln);\n-            }\n-\n-            if !self.compile_pass {\n-                // run-pass implies compile_pass\n-                self.compile_pass = config.parse_compile_pass(ln) || self.run_pass;\n-            }\n-\n-            if !self.skip_codegen {\n-                self.skip_codegen = config.parse_skip_codegen(ln);\n+            if config.parse_name_directive(ln, \"check-pass\") ||\n+               config.parse_name_directive(ln, \"skip-codegen\") {\n+                self.pass_mode = Some(PassMode::Check);\n+            } else if config.parse_name_directive(ln, \"build-pass\") ||\n+                      config.parse_name_directive(ln, \"compile-pass\") {\n+                self.pass_mode = Some(PassMode::Build);\n+            } else if config.parse_name_directive(ln, \"run-pass\") {\n+                self.pass_mode = Some(PassMode::Run);\n             }\n \n             if !self.disable_ui_testing_normalization {\n@@ -710,10 +708,6 @@ impl Config {\n         }\n     }\n \n-    fn parse_compile_pass(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"compile-pass\")\n-    }\n-\n     fn parse_disable_ui_testing_normalization(&self, line: &str) -> bool {\n         self.parse_name_directive(line, \"disable-ui-testing-normalization\")\n     }\n@@ -722,14 +716,6 @@ impl Config {\n         self.parse_name_directive(line, \"check-test-line-numbers-match\")\n     }\n \n-    fn parse_run_pass(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"run-pass\")\n-    }\n-\n-    fn parse_skip_codegen(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"skip-codegen\")\n-    }\n-\n     fn parse_assembly_output(&self, line: &str) -> Option<String> {\n         self.parse_name_value_directive(line, \"assembly-output\")\n             .map(|r| r.trim().to_string())"}, {"sha": "8b52a529d440a07e058d09c2b18281fae1af21dc", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6203f68735a1b7511b85560b64995a14f1b40765/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=6203f68735a1b7511b85560b64995a14f1b40765", "patch": "@@ -10,7 +10,7 @@ use crate::common::{Config, TestPaths};\n use crate::common::{Incremental, MirOpt, RunMake, Ui, JsDocTest, Assembly};\n use diff;\n use crate::errors::{self, Error, ErrorKind};\n-use crate::header::TestProps;\n+use crate::header::{TestProps, PassMode};\n use crate::json;\n use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n@@ -310,28 +310,27 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn should_run_successfully(&self) -> bool {\n-        let run_pass = match self.config.mode {\n+        match self.config.mode {\n             RunPass => true,\n-            Ui => self.props.run_pass,\n-            _ => unimplemented!(),\n-        };\n-        return run_pass && !self.props.skip_codegen;\n+            Ui => self.props.pass_mode == Some(PassMode::Run),\n+            mode => panic!(\"unimplemented for mode {:?}\", mode),\n+        }\n     }\n \n     fn should_compile_successfully(&self) -> bool {\n         match self.config.mode {\n-            CompileFail => self.props.compile_pass,\n+            CompileFail => false,\n             RunPass => true,\n             JsDocTest => true,\n-            Ui => self.props.compile_pass,\n+            Ui => self.props.pass_mode.is_some(),\n             Incremental => {\n                 let revision = self.revision\n                     .expect(\"incremental tests require a list of revisions\");\n                 if revision.starts_with(\"rpass\") || revision.starts_with(\"rfail\") {\n                     true\n                 } else if revision.starts_with(\"cfail\") {\n                     // FIXME: would be nice if incremental revs could start with \"cpass\"\n-                    self.props.compile_pass\n+                    self.props.pass_mode.is_some()\n                 } else {\n                     panic!(\"revision name must begin with rpass, rfail, or cfail\");\n                 }\n@@ -433,11 +432,9 @@ impl<'test> TestCx<'test> {\n             \"run-pass tests with expected warnings should be moved to ui/\"\n         );\n \n-        if !self.props.skip_codegen {\n-            let proc_res = self.exec_compiled_test();\n-            if !proc_res.status.success() {\n-                self.fatal_proc_rec(\"test run failed!\", &proc_res);\n-            }\n+        let proc_res = self.exec_compiled_test();\n+        if !proc_res.status.success() {\n+            self.fatal_proc_rec(\"test run failed!\", &proc_res);\n         }\n     }\n \n@@ -1344,7 +1341,7 @@ impl<'test> TestCx<'test> {\n     fn check_error_patterns(&self, output_to_check: &str, proc_res: &ProcRes) {\n         debug!(\"check_error_patterns\");\n         if self.props.error_patterns.is_empty() {\n-            if self.props.compile_pass {\n+            if self.props.pass_mode.is_some() {\n                 return;\n             } else {\n                 self.fatal(&format!(\n@@ -1971,7 +1968,7 @@ impl<'test> TestCx<'test> {\n             }\n         }\n \n-        if self.props.skip_codegen {\n+        if self.props.pass_mode == Some(PassMode::Check) {\n             assert!(\n                 !self\n                     .props"}]}