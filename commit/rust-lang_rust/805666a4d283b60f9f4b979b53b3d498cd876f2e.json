{"sha": "805666a4d283b60f9f4b979b53b3d498cd876f2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwNTY2NmE0ZDI4M2I2MGY5ZjRiOTc5YjUzYjNkNDk4Y2Q4NzZmMmU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-08T04:18:55Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-09T12:12:32Z"}, "message": "Fix fallout in `librustdoc` and in tests", "tree": {"sha": "05599c3c4cc94cea0c1ff43292c2dcf0942e1dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05599c3c4cc94cea0c1ff43292c2dcf0942e1dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/805666a4d283b60f9f4b979b53b3d498cd876f2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/805666a4d283b60f9f4b979b53b3d498cd876f2e", "html_url": "https://github.com/rust-lang/rust/commit/805666a4d283b60f9f4b979b53b3d498cd876f2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/805666a4d283b60f9f4b979b53b3d498cd876f2e/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abec20b177e7db5509b1045ece4d2de7e07be446", "url": "https://api.github.com/repos/rust-lang/rust/commits/abec20b177e7db5509b1045ece4d2de7e07be446", "html_url": "https://github.com/rust-lang/rust/commit/abec20b177e7db5509b1045ece4d2de7e07be446"}], "stats": {"total": 56, "additions": 33, "deletions": 23}, "files": [{"sha": "869bbb723ef41f0ca42d9eb259f1c0cf862fc393", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -13,7 +13,7 @@\n use driver;\n use rustc::dep_graph::DepGraph;\n use rustc_lint;\n-use rustc_resolve as resolve;\n+use rustc_resolve::MakeGlobMap;\n use rustc::middle::lang_items;\n use rustc::middle::free_region::FreeRegionMap;\n use rustc::middle::region::{self, CodeExtent};\n@@ -40,7 +40,6 @@ use syntax::errors::{Level, RenderSpan};\n use syntax::parse::token;\n use syntax::feature_gate::UnstableFeatures;\n \n-use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc::hir;\n \n struct Env<'a, 'tcx: 'a> {\n@@ -123,26 +122,28 @@ fn test_env<F>(source_string: &str,\n     let krate = driver::assign_node_ids(&sess, krate);\n     let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n     LocalCrateReader::new(&sess, &cstore, defs, &krate, \"test_crate\").read_crates(&dep_graph);\n-    let lcx = LoweringContext::new(&sess, Some(&krate), defs);\n     let _ignore = dep_graph.in_ignore();\n-    let mut hir_forest = &mut hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph.clone());\n+\n+    let (_, resolutions, mut hir_forest) = {\n+        let (defs, dep_graph) = (&mut *defs.borrow_mut(), dep_graph.clone());\n+        driver::lower_and_resolve(&sess, \"test-crate\", defs, &krate, dep_graph, MakeGlobMap::No)\n+    };\n+\n     let arenas = ty::CtxtArenas::new();\n-    let ast_map = hir_map::map_crate(hir_forest, defs);\n+    let ast_map = hir_map::map_crate(&mut hir_forest, defs);\n \n     // run just enough stuff to build a tcx:\n     let lang_items = lang_items::collect_language_items(&sess, &ast_map);\n-    let resolve::CrateMap { def_map, freevars, maybe_unused_trait_imports, .. } =\n-        resolve::resolve_crate(&sess, &ast_map, resolve::MakeGlobMap::No);\n-    let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &def_map.borrow());\n+    let named_region_map = resolve_lifetime::krate(&sess, &ast_map, &resolutions.def_map.borrow());\n     let region_map = region::resolve_crate(&sess, &ast_map);\n     let index = stability::Index::new(&ast_map);\n     TyCtxt::create_and_enter(&sess,\n                                &arenas,\n-                               def_map,\n+                               resolutions.def_map,\n                                named_region_map.unwrap(),\n                                ast_map,\n-                               freevars,\n-                               maybe_unused_trait_imports,\n+                               resolutions.freevars,\n+                               resolutions.maybe_unused_trait_imports,\n                                region_map,\n                                lang_items,\n                                index,"}, {"sha": "e5fc84037ce57378deb951ab3e50bf361fcbcb91", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -20,7 +20,6 @@ use rustc::hir::map as hir_map;\n use rustc::lint;\n use rustc_trans::back::link;\n use rustc_resolve as resolve;\n-use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_metadata::cstore::CStore;\n use rustc_metadata::creader::LocalCrateReader;\n \n@@ -156,18 +155,22 @@ pub fn run_core(search_paths: SearchPaths,\n \n     let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n     LocalCrateReader::new(&sess, &cstore, &defs, &krate, &name).read_crates(&dep_graph);\n-    let lcx = LoweringContext::new(&sess, Some(&krate), defs);\n \n-    // Lower ast -> hir.\n-    let mut hir_forest = hir_map::Forest::new(lower_crate(&lcx, &krate), dep_graph);\n+    // Lower ast -> hir and resolve.\n+    let (analysis, resolutions, mut hir_forest) = {\n+        let defs = &mut *defs.borrow_mut();\n+        driver::lower_and_resolve(&sess, &name, defs, &krate, dep_graph, resolve::MakeGlobMap::No)\n+    };\n+\n     let arenas = ty::CtxtArenas::new();\n     let hir_map = hir_map::map_crate(&mut hir_forest, defs);\n \n     abort_on_err(driver::phase_3_run_analysis_passes(&sess,\n                                                      hir_map,\n+                                                     analysis,\n+                                                     resolutions,\n                                                      &arenas,\n                                                      &name,\n-                                                     resolve::MakeGlobMap::No,\n                                                      |tcx, _, analysis, result| {\n         // Return if the driver hit an err (in `result`)\n         if let Err(_) = result {"}, {"sha": "fc548924e296426f05a7d31216903604c7aaee19", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -28,7 +28,7 @@ use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{get_unstable_features_setting, OutputType};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n-use rustc::hir::lowering::{lower_crate, LoweringContext};\n+use rustc::hir::lowering::{lower_crate, LoweringContext, DummyResolver};\n use rustc_back::dynamic_lib::DynamicLibrary;\n use rustc_back::tempdir::TempDir;\n use rustc_driver::{driver, Compilation};\n@@ -97,7 +97,8 @@ pub fn run(input: &str,\n     let dep_graph = DepGraph::new(false);\n     let defs = &RefCell::new(hir_map::collect_definitions(&krate));\n \n-    let lcx = LoweringContext::new(&sess, Some(&krate), defs);\n+    let mut dummy_resolver = DummyResolver;\n+    let lcx = LoweringContext::new(&sess, Some(&krate), &mut dummy_resolver);\n     let krate = lower_crate(&lcx, &krate);\n \n     let opts = scrape_test_config(&krate);"}, {"sha": "98412c08df5206746d84aca139c09e0df1efa52d", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -34,7 +34,6 @@ use rustc::ty;\n use rustc::session::config::{self, basic_options, build_configuration, Input, Options};\n use rustc::session::build_session;\n use rustc_driver::{driver, abort_on_err};\n-use rustc::hir::lowering::{lower_crate, LoweringContext};\n use rustc_resolve::MakeGlobMap;\n use rustc_metadata::creader::LocalCrateReader;\n use rustc_metadata::cstore::CStore;\n@@ -243,14 +242,16 @@ fn compile_program(input: &str, sysroot: PathBuf)\n         let krate = driver::assign_node_ids(&sess, krate);\n         let defs = RefCell::new(ast_map::collect_definitions(&krate));\n         LocalCrateReader::new(&sess, &cstore, &defs, &krate, &id).read_crates(&dep_graph);\n-        let lcx = LoweringContext::new(&sess, Some(&krate), &defs);\n-        let mut hir_forest = ast_map::Forest::new(lower_crate(&lcx, &krate), dep_graph);\n+        let (analysis, resolutions, mut hir_forest) = {\n+            let defs = &mut *defs.borrow_mut();\n+            driver::lower_and_resolve(&sess, &id, defs, &krate, dep_graph, MakeGlobMap::No)\n+        };\n         let arenas = ty::CtxtArenas::new();\n         let ast_map = ast_map::map_crate(&mut hir_forest, &defs);\n \n         abort_on_err(driver::phase_3_run_analysis_passes(\n-            &sess, ast_map, &arenas, &id,\n-            MakeGlobMap::No, |tcx, mir_map, analysis, _| {\n+            &sess, ast_map, analysis, resolutions, &arenas, &id,\n+            |tcx, mir_map, analysis, _| {\n \n             let trans = driver::phase_4_translate_to_llvm(tcx, mir_map.unwrap(), analysis);\n "}, {"sha": "0717af98b30b43c87600cdecba73241d1056b4a4", "filename": "src/test/run-make/pretty-expanded-hygiene/input.pp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -14,3 +14,5 @@\n \n \n fn bar /* 62#0 */() { let x /* 59#2 */ = 1; y /* 61#4 */ + x /* 59#5 */ }\n+\n+fn y /* 61#0 */() { }"}, {"sha": "422fbdb08848834616c6ad6736dc65acb391d7d1", "filename": "src/test/run-make/pretty-expanded-hygiene/input.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/805666a4d283b60f9f4b979b53b3d498cd876f2e/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded-hygiene%2Finput.rs?ref=805666a4d283b60f9f4b979b53b3d498cd876f2e", "patch": "@@ -20,3 +20,5 @@ fn bar() {\n     let x = 1;\n     foo!(x)\n }\n+\n+fn y() {}"}]}