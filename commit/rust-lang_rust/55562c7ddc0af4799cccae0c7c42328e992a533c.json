{"sha": "55562c7ddc0af4799cccae0c7c42328e992a533c", "node_id": "C_kwDOAAsO6NoAKDU1NTYyYzdkZGMwYWY0Nzk5Y2NjYWUwYzdjNDIzMjhlOTkyYTUzM2M", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-26T00:51:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-26T00:51:42Z"}, "message": "Rollup merge of #100034 - tmiasko:elaborate-box-derefs, r=oli-obk\n\n Elaborate all box dereferences in `ElaborateBoxDerefs`\n\nso that it is the only pass responsible for elaboration, instead of\nsplitting this responsibility between the `StateTransform` and\n`ElaborateBoxDerefs`.", "tree": {"sha": "169474f7953c65d172de88b66a825a0d38dcdc96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/169474f7953c65d172de88b66a825a0d38dcdc96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55562c7ddc0af4799cccae0c7c42328e992a533c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjCBkeCRBK7hj4Ov3rIwAAS6kIADG3bTV/cOeT5+dgv+5i9pcx\n2nVDsVUvacATXfCMO+ptLdwfB4JzhDqPHU61yaRXijiKqdVfMT/wSuTRjzLGu7vT\n0eUCFTQfkNQJ7ZuNNy9HFFygyYzxtt2JWnIkyolgdA4eAjjLx6/Wi5JHMzUc0mVm\nGrSiFwdFpDP+NQIVaZHojtXkC5yETGGhw9QChunUOfRDxLGeC+6miBKOHFCk5iIA\nVresK/eIBDzuolHmSTTkbt6DSsWXBiPs7fQW/X+x/A2ZhHaf3DMa1Y647Z9SuaCM\nJx4eg5bqMpwKBtreH/1fcrIRxk3swHYC9B6xYkHiHUKl8l+WpSkSa2eZJS7AmmY=\n=RvIU\n-----END PGP SIGNATURE-----\n", "payload": "tree 169474f7953c65d172de88b66a825a0d38dcdc96\nparent 28457e10f550fbd580e56d7cbfc80e85330d6445\nparent 4394ea8b8230b21973ee0f7a58dbce7c531ef0c2\nauthor Yuki Okushi <jtitor@2k36.org> 1661475102 +0900\ncommitter GitHub <noreply@github.com> 1661475102 +0900\n\nRollup merge of #100034 - tmiasko:elaborate-box-derefs, r=oli-obk\n\n Elaborate all box dereferences in `ElaborateBoxDerefs`\n\nso that it is the only pass responsible for elaboration, instead of\nsplitting this responsibility between the `StateTransform` and\n`ElaborateBoxDerefs`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55562c7ddc0af4799cccae0c7c42328e992a533c", "html_url": "https://github.com/rust-lang/rust/commit/55562c7ddc0af4799cccae0c7c42328e992a533c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55562c7ddc0af4799cccae0c7c42328e992a533c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28457e10f550fbd580e56d7cbfc80e85330d6445", "url": "https://api.github.com/repos/rust-lang/rust/commits/28457e10f550fbd580e56d7cbfc80e85330d6445", "html_url": "https://github.com/rust-lang/rust/commit/28457e10f550fbd580e56d7cbfc80e85330d6445"}, {"sha": "4394ea8b8230b21973ee0f7a58dbce7c531ef0c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4394ea8b8230b21973ee0f7a58dbce7c531ef0c2", "html_url": "https://github.com/rust-lang/rust/commit/4394ea8b8230b21973ee0f7a58dbce7c531ef0c2"}], "stats": {"total": 217, "additions": 75, "deletions": 142}, "files": [{"sha": "9da9b4e91f647273a34db162de6173820a597c35", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=55562c7ddc0af4799cccae0c7c42328e992a533c", "patch": "@@ -1531,6 +1531,7 @@ impl<'tcx> Place<'tcx> {\n }\n \n impl From<Local> for Place<'_> {\n+    #[inline]\n     fn from(local: Local) -> Self {\n         Place { local, projection: List::empty() }\n     }"}, {"sha": "483c1e274aa7809d6b3cffeb5ab5be003072d642", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 65, "deletions": 40, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=55562c7ddc0af4799cccae0c7c42328e992a533c", "patch": "@@ -23,12 +23,6 @@ use crate::{Analysis, AnalysisDomain, Backward, CallReturnPlaces, GenKill, GenKi\n /// [liveness]: https://en.wikipedia.org/wiki/Live_variable_analysis\n pub struct MaybeLiveLocals;\n \n-impl MaybeLiveLocals {\n-    fn transfer_function<'a, T>(&self, trans: &'a mut T) -> TransferFunction<'a, T> {\n-        TransferFunction(trans)\n-    }\n-}\n-\n impl<'tcx> AnalysisDomain<'tcx> for MaybeLiveLocals {\n     type Domain = ChunkedBitSet<Local>;\n     type Direction = Backward;\n@@ -54,7 +48,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n         statement: &mir::Statement<'tcx>,\n         location: Location,\n     ) {\n-        self.transfer_function(trans).visit_statement(statement, location);\n+        TransferFunction(trans).visit_statement(statement, location);\n     }\n \n     fn terminator_effect(\n@@ -63,7 +57,7 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n         terminator: &mir::Terminator<'tcx>,\n         location: Location,\n     ) {\n-        self.transfer_function(trans).visit_terminator(terminator, location);\n+        TransferFunction(trans).visit_terminator(terminator, location);\n     }\n \n     fn call_return_effect(\n@@ -85,9 +79,11 @@ impl<'tcx> GenKillAnalysis<'tcx> for MaybeLiveLocals {\n         _resume_block: mir::BasicBlock,\n         resume_place: mir::Place<'tcx>,\n     ) {\n-        if let Some(local) = resume_place.as_local() {\n-            trans.kill(local);\n-        }\n+        YieldResumeEffect(trans).visit_place(\n+            &resume_place,\n+            PlaceContext::MutatingUse(MutatingUseContext::Yield),\n+            Location::START,\n+        )\n     }\n }\n \n@@ -98,28 +94,51 @@ where\n     T: GenKill<Local>,\n {\n     fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n-        let local = place.local;\n-\n-        // We purposefully do not call `super_place` here to avoid calling `visit_local` for this\n-        // place with one of the `Projection` variants of `PlaceContext`.\n-        self.visit_projection(place.as_ref(), context, location);\n+        if let PlaceContext::MutatingUse(MutatingUseContext::Yield) = context {\n+            // The resume place is evaluated and assigned to only after generator resumes, so its\n+            // effect is handled separately in `yield_resume_effect`.\n+            return;\n+        }\n \n         match DefUse::for_place(*place, context) {\n-            Some(DefUse::Def) => self.0.kill(local),\n-            Some(DefUse::Use) => self.0.gen(local),\n+            Some(DefUse::Def) => {\n+                if let PlaceContext::MutatingUse(\n+                    MutatingUseContext::Call | MutatingUseContext::AsmOutput,\n+                ) = context\n+                {\n+                    // For the associated terminators, this is only a `Def` when the terminator returns\n+                    // \"successfully.\" As such, we handle this case separately in `call_return_effect`\n+                    // above. However, if the place looks like `*_5`, this is still unconditionally a use of\n+                    // `_5`.\n+                } else {\n+                    self.0.kill(place.local);\n+                }\n+            }\n+            Some(DefUse::Use) => self.0.gen(place.local),\n             None => {}\n         }\n+\n+        self.visit_projection(place.as_ref(), context, location);\n     }\n \n     fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n-        // Because we do not call `super_place` above, `visit_local` is only called for locals that\n-        // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n-        // of the return place in a `Return` terminator or the index in an `Index` projection.\n-        match DefUse::for_place(local.into(), context) {\n-            Some(DefUse::Def) => self.0.kill(local),\n-            Some(DefUse::Use) => self.0.gen(local),\n-            None => {}\n-        }\n+        DefUse::apply(self.0, local.into(), context);\n+    }\n+}\n+\n+struct YieldResumeEffect<'a, T>(&'a mut T);\n+\n+impl<'tcx, T> Visitor<'tcx> for YieldResumeEffect<'_, T>\n+where\n+    T: GenKill<Local>,\n+{\n+    fn visit_place(&mut self, place: &mir::Place<'tcx>, context: PlaceContext, location: Location) {\n+        DefUse::apply(self.0, *place, context);\n+        self.visit_projection(place.as_ref(), context, location);\n+    }\n+\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n+        DefUse::apply(self.0, local.into(), context);\n     }\n }\n \n@@ -130,11 +149,25 @@ enum DefUse {\n }\n \n impl DefUse {\n+    fn apply<'tcx>(trans: &mut impl GenKill<Local>, place: Place<'tcx>, context: PlaceContext) {\n+        match DefUse::for_place(place, context) {\n+            Some(DefUse::Def) => trans.kill(place.local),\n+            Some(DefUse::Use) => trans.gen(place.local),\n+            None => {}\n+        }\n+    }\n+\n     fn for_place<'tcx>(place: Place<'tcx>, context: PlaceContext) -> Option<DefUse> {\n         match context {\n             PlaceContext::NonUse(_) => None,\n \n-            PlaceContext::MutatingUse(MutatingUseContext::Store | MutatingUseContext::Deinit) => {\n+            PlaceContext::MutatingUse(\n+                MutatingUseContext::Call\n+                | MutatingUseContext::Yield\n+                | MutatingUseContext::AsmOutput\n+                | MutatingUseContext::Store\n+                | MutatingUseContext::Deinit,\n+            ) => {\n                 if place.is_indirect() {\n                     // Treat derefs as a use of the base local. `*p = 4` is not a def of `p` but a\n                     // use.\n@@ -152,16 +185,6 @@ impl DefUse {\n                 place.is_indirect().then_some(DefUse::Use)\n             }\n \n-            // For the associated terminators, this is only a `Def` when the terminator returns\n-            // \"successfully.\" As such, we handle this case separately in `call_return_effect`\n-            // above. However, if the place looks like `*_5`, this is still unconditionally a use of\n-            // `_5`.\n-            PlaceContext::MutatingUse(\n-                MutatingUseContext::Call\n-                | MutatingUseContext::Yield\n-                | MutatingUseContext::AsmOutput,\n-            ) => place.is_indirect().then_some(DefUse::Use),\n-\n             // All other contexts are uses...\n             PlaceContext::MutatingUse(\n                 MutatingUseContext::AddressOf\n@@ -290,8 +313,10 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n         _resume_block: mir::BasicBlock,\n         resume_place: mir::Place<'tcx>,\n     ) {\n-        if let Some(local) = resume_place.as_local() {\n-            trans.remove(local);\n-        }\n+        YieldResumeEffect(trans).visit_place(\n+            &resume_place,\n+            PlaceContext::MutatingUse(MutatingUseContext::Yield),\n+            Location::START,\n+        )\n     }\n }"}, {"sha": "294af2455d069607b2b8e348d3087cf047a28413", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=55562c7ddc0af4799cccae0c7c42328e992a533c", "patch": "@@ -107,27 +107,8 @@ impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n             let mut visitor =\n                 ElaborateBoxDerefVisitor { tcx, unique_did, nonnull_did, local_decls, patch };\n \n-            for (block, BasicBlockData { statements, terminator, .. }) in\n-                body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut()\n-            {\n-                let mut index = 0;\n-                for statement in statements {\n-                    let location = Location { block, statement_index: index };\n-                    visitor.visit_statement(statement, location);\n-                    index += 1;\n-                }\n-\n-                let location = Location { block, statement_index: index };\n-                match terminator {\n-                    // yielding into a box is handled when lowering generators\n-                    Some(Terminator { kind: TerminatorKind::Yield { value, .. }, .. }) => {\n-                        visitor.visit_operand(value, location);\n-                    }\n-                    Some(terminator) => {\n-                        visitor.visit_terminator(terminator, location);\n-                    }\n-                    None => {}\n-                }\n+            for (block, data) in body.basic_blocks.as_mut_preserves_cfg().iter_enumerated_mut() {\n+                visitor.visit_basic_block_data(block, data);\n             }\n \n             visitor.patch.apply(body);"}, {"sha": "5b0d9900c0fb5cb5a3ef1db6425c00926790aee4", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 7, "deletions": 81, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55562c7ddc0af4799cccae0c7c42328e992a533c/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=55562c7ddc0af4799cccae0c7c42328e992a533c", "patch": "@@ -1182,8 +1182,6 @@ fn create_cases<'tcx>(\n     transform: &TransformVisitor<'tcx>,\n     operation: Operation,\n ) -> Vec<(usize, BasicBlock)> {\n-    let tcx = transform.tcx;\n-\n     let source_info = SourceInfo::outermost(body.span);\n \n     transform\n@@ -1216,85 +1214,13 @@ fn create_cases<'tcx>(\n                 if operation == Operation::Resume {\n                     // Move the resume argument to the destination place of the `Yield` terminator\n                     let resume_arg = Local::new(2); // 0 = return, 1 = self\n-\n-                    // handle `box yield` properly\n-                    let box_place = if let [projection @ .., ProjectionElem::Deref] =\n-                        &**point.resume_arg.projection\n-                    {\n-                        let box_place =\n-                            Place::from(point.resume_arg.local).project_deeper(projection, tcx);\n-\n-                        let box_ty = box_place.ty(&body.local_decls, tcx).ty;\n-\n-                        if box_ty.is_box() { Some((box_place, box_ty)) } else { None }\n-                    } else {\n-                        None\n-                    };\n-\n-                    if let Some((box_place, box_ty)) = box_place {\n-                        let unique_did = box_ty\n-                            .ty_adt_def()\n-                            .expect(\"expected Box to be an Adt\")\n-                            .non_enum_variant()\n-                            .fields[0]\n-                            .did;\n-\n-                        let Some(nonnull_def) = tcx.type_of(unique_did).ty_adt_def() else {\n-                            span_bug!(tcx.def_span(unique_did), \"expected Box to contain Unique\")\n-                        };\n-\n-                        let nonnull_did = nonnull_def.non_enum_variant().fields[0].did;\n-\n-                        let (unique_ty, nonnull_ty, ptr_ty) =\n-                            crate::elaborate_box_derefs::build_ptr_tys(\n-                                tcx,\n-                                box_ty.boxed_ty(),\n-                                unique_did,\n-                                nonnull_did,\n-                            );\n-\n-                        let ptr_local = body.local_decls.push(LocalDecl::new(ptr_ty, body.span));\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::StorageLive(ptr_local),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                Place::from(ptr_local),\n-                                Rvalue::Use(Operand::Copy(box_place.project_deeper(\n-                                    &crate::elaborate_box_derefs::build_projection(\n-                                        unique_ty, nonnull_ty, ptr_ty,\n-                                    ),\n-                                    tcx,\n-                                ))),\n-                            ))),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                Place::from(ptr_local)\n-                                    .project_deeper(&[ProjectionElem::Deref], tcx),\n-                                Rvalue::Use(Operand::Move(resume_arg.into())),\n-                            ))),\n-                        });\n-\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::StorageDead(ptr_local),\n-                        });\n-                    } else {\n-                        statements.push(Statement {\n-                            source_info,\n-                            kind: StatementKind::Assign(Box::new((\n-                                point.resume_arg,\n-                                Rvalue::Use(Operand::Move(resume_arg.into())),\n-                            ))),\n-                        });\n-                    }\n+                    statements.push(Statement {\n+                        source_info,\n+                        kind: StatementKind::Assign(Box::new((\n+                            point.resume_arg,\n+                            Rvalue::Use(Operand::Move(resume_arg.into())),\n+                        ))),\n+                    });\n                 }\n \n                 // Then jump to the real target"}]}