{"sha": "f694222887cf31f51e68927716c25736e62f037f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OTQyMjI4ODdjZjMxZjUxZTY4OTI3NzE2YzI1NzM2ZTYyZjAzN2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-01T18:37:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-04-01T18:37:28Z"}, "message": "Auto merge of #59606 - Centril:rollup, r=Centril\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #58507 (Add a -Z time option which prints only passes which runs once)\n - #58919 (Suggest using anonymous lifetime in `impl Trait` return)\n - #59041 (fixes rust-lang#56766)\n - #59586 (Fixed URL in cargotest::TEST_REPOS)\n - #59595 (Update rustc-guide submodule)\n - #59601 (Fix small typo)\n - #59603 (stabilize ptr::hash)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b772c64e479866855dfe82986e3d92868a116852", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b772c64e479866855dfe82986e3d92868a116852"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f694222887cf31f51e68927716c25736e62f037f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f694222887cf31f51e68927716c25736e62f037f", "html_url": "https://github.com/rust-lang/rust/commit/f694222887cf31f51e68927716c25736e62f037f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f694222887cf31f51e68927716c25736e62f037f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ebf47851a357faa4cd97f4b1dc7835f6376e639", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ebf47851a357faa4cd97f4b1dc7835f6376e639", "html_url": "https://github.com/rust-lang/rust/commit/9ebf47851a357faa4cd97f4b1dc7835f6376e639"}, {"sha": "e9b9f33ecc54eaebef0edaf0b26e5e32e2ded9c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9b9f33ecc54eaebef0edaf0b26e5e32e2ded9c2", "html_url": "https://github.com/rust-lang/rust/commit/e9b9f33ecc54eaebef0edaf0b26e5e32e2ded9c2"}], "stats": {"total": 156, "additions": 111, "deletions": 45}, "files": [{"sha": "464cb5b166378dff64619081dd4c42533a1eb989", "filename": "src/doc/rustc-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-guide?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1 +1 @@\n-Subproject commit 344c4e437ba4cfa5c14db643ec4d6b68dcd164c5\n+Subproject commit 464cb5b166378dff64619081dd4c42533a1eb989"}, {"sha": "4a7a16b2c94e0ecef4d86756e050737e2ff2b70d", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -2561,7 +2561,6 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n /// # Examples\n ///\n /// ```\n-/// #![feature(ptr_hash)]\n /// use std::collections::hash_map::DefaultHasher;\n /// use std::hash::{Hash, Hasher};\n /// use std::ptr;\n@@ -2579,7 +2578,7 @@ pub fn eq<T: ?Sized>(a: *const T, b: *const T) -> bool {\n ///\n /// assert_eq!(actual, expected);\n /// ```\n-#[unstable(feature = \"ptr_hash\", reason = \"newly added\", issue = \"56286\")]\n+#[stable(feature = \"ptr_hash\", since = \"1.35.0\")]\n pub fn hash<T: ?Sized, S: hash::Hasher>(hashee: *const T, into: &mut S) {\n     use hash::Hash;\n     hashee.hash(into);"}, {"sha": "7403a5d7dbb09e80219a9441da7b95c3abf2a222", "filename": "src/librustc/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1,6 +1,7 @@\n //! Error Reporting for Anonymous Region Lifetime Errors\n //! where one region is named and the other is anonymous.\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n+use crate::hir::{FunctionRetTy, TyKind};\n use crate::ty;\n use errors::{Applicability, DiagnosticBuilder};\n \n@@ -11,9 +12,10 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n         let (span, sub, sup) = self.get_regions();\n \n         debug!(\n-            \"try_report_named_anon_conflict(sub={:?}, sup={:?})\",\n+            \"try_report_named_anon_conflict(sub={:?}, sup={:?}, error={:?})\",\n             sub,\n-            sup\n+            sup,\n+            self.error,\n         );\n \n         // Determine whether the sub and sup consist of one named region ('a)\n@@ -84,6 +86,13 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             {\n                 return None;\n             }\n+            if let FunctionRetTy::Return(ty) = &fndecl.output {\n+                if let (TyKind::Def(_, _), ty::ReStatic) = (&ty.node, sub) {\n+                    // This is an impl Trait return that evaluates de need of 'static.\n+                    // We handle this case better in `static_impl_trait`.\n+                    return None;\n+                }\n+            }\n         }\n \n         let (error_var, span_label_var) = if let Some(simple_ident) = arg.pat.simple_ident() {\n@@ -103,13 +112,13 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             error_var\n         );\n \n+        diag.span_label(span, format!(\"lifetime `{}` required\", named));\n         diag.span_suggestion(\n-                new_ty_span,\n-                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-                new_ty.to_string(),\n-                Applicability::Unspecified,\n-            )\n-            .span_label(span, format!(\"lifetime `{}` required\", named));\n+            new_ty_span,\n+            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n+        );\n \n         Some(diag)\n     }"}, {"sha": "988e4a9ff23a2809d159411e73b515bd355a6cfc", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1200,6 +1200,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"when using two-phase-borrows, allow two phases even for non-autoref `&mut` borrows\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass\"),\n+    time: bool = (false, parse_bool, [UNTRACKED],\n+        \"measure time of rustc processes\"),\n     count_llvm_insns: bool = (false, parse_bool,\n         [UNTRACKED_WITH_WARNING(true,\n         \"The output generated by `-Z count_llvm_insns` might not be reliable \\"}, {"sha": "2f3df32945ceb050be73e4c93b2825203fbdba30", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -504,6 +504,9 @@ impl Session {\n         self.opts.debugging_opts.verbose\n     }\n     pub fn time_passes(&self) -> bool {\n+        self.opts.debugging_opts.time_passes || self.opts.debugging_opts.time\n+    }\n+    pub fn time_extended(&self) -> bool {\n         self.opts.debugging_opts.time_passes\n     }\n     pub fn profile_queries(&self) -> bool {"}, {"sha": "28cf3f5245ef87c4a014cc0e862ba16491b95682", "filename": "src/librustc/ty/query/on_disk_cache.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -12,7 +12,7 @@ use crate::session::{CrateDisambiguator, Session};\n use crate::ty;\n use crate::ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use crate::ty::context::TyCtxt;\n-use crate::util::common::time;\n+use crate::util::common::{time, time_ext};\n \n use errors::Diagnostic;\n use rustc_data_structures::fx::FxHashMap;\n@@ -1080,23 +1080,22 @@ fn encode_query_results<'enc, 'a, 'tcx, Q, E>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let desc = &format!(\"encode_query_results for {}\",\n         unsafe { ::std::intrinsics::type_name::<Q>() });\n \n-    time(tcx.sess, desc, || {\n+    time_ext(tcx.sess.time_extended(), Some(tcx.sess), desc, || {\n+        let map = Q::query_cache(tcx).borrow();\n+        assert!(map.active.is_empty());\n+        for (key, entry) in map.results.iter() {\n+            if Q::cache_on_disk(tcx, key.clone()) {\n+                let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n \n-    let map = Q::query_cache(tcx).borrow();\n-    assert!(map.active.is_empty());\n-    for (key, entry) in map.results.iter() {\n-        if Q::cache_on_disk(tcx, key.clone()) {\n-            let dep_node = SerializedDepNodeIndex::new(entry.index.index());\n+                // Record position of the cache entry\n+                query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n \n-            // Record position of the cache entry\n-            query_result_index.push((dep_node, AbsoluteBytePos::new(encoder.position())));\n-\n-            // Encode the type check tables with the SerializedDepNodeIndex\n-            // as tag.\n-            encoder.encode_tagged(dep_node, &entry.value)?;\n+                // Encode the type check tables with the SerializedDepNodeIndex\n+                // as tag.\n+                encoder.encode_tagged(dep_node, &entry.value)?;\n+            }\n         }\n-    }\n \n-    Ok(())\n+        Ok(())\n     })\n }"}, {"sha": "f10bc0516e5bf38a9c049ab3e053bd3d9d40dd93", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind};\n use rustc::middle::dependency_format::Linkage;\n use rustc_codegen_ssa::CodegenResults;\n-use rustc::util::common::time;\n+use rustc::util::common::{time, time_ext};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc::hir::def_id::CrateNum;\n use tempfile::{Builder as TempFileBuilder, TempDir};\n@@ -1319,7 +1319,7 @@ fn add_upstream_rust_crates(cmd: &mut dyn Linker,\n         let name = cratepath.file_name().unwrap().to_str().unwrap();\n         let name = &name[3..name.len() - 5]; // chop off lib/.rlib\n \n-        time(sess, &format!(\"altering {}.rlib\", name), || {\n+        time_ext(sess.time_extended(), Some(sess), &format!(\"altering {}.rlib\", name), || {\n             let cfg = archive_config(sess, &dst, Some(cratepath));\n             let mut archive = ArchiveBuilder::new(cfg);\n             archive.update_symbols();"}, {"sha": "fa8c4177eafe23fb900cad53b86c625bcc2ffb0d", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -125,7 +125,7 @@ impl ModuleConfig {\n         self.verify_llvm_ir = sess.verify_llvm_ir();\n         self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n         self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n-        self.time_passes = sess.time_passes();\n+        self.time_passes = sess.time_extended();\n         self.inline_threshold = sess.opts.cg.inline_threshold;\n         self.obj_is_bitcode = sess.target.target.options.obj_is_bitcode ||\n                               sess.opts.cg.linker_plugin_lto.enabled();\n@@ -1091,7 +1091,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         fewer_names: sess.fewer_names(),\n         save_temps: sess.opts.cg.save_temps,\n         opts: Arc::new(sess.opts.clone()),\n-        time_passes: sess.time_passes(),\n+        time_passes: sess.time_extended(),\n         profiler: sess.self_profiling.clone(),\n         exported_symbols,\n         plugin_passes: sess.plugin_llvm_passes.borrow().clone(),"}, {"sha": "3773f1a40c7924545878b83ec8b7dc0c03a4370d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -132,6 +132,15 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             }\n         });\n         if let Some(i) = best_choice {\n+            if let Some(next) = categorized_path.get(i + 1) {\n+                if categorized_path[i].0 == ConstraintCategory::Return\n+                    && next.0 == ConstraintCategory::OpaqueType\n+                {\n+                    // The return expression is being influenced by the return type being\n+                    // impl Trait, point at the return type and not the return expr.\n+                    return *next;\n+                }\n+            }\n             return categorized_path[i];\n         }\n \n@@ -240,6 +249,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             self.provides_universal_region(r, fr, outlived_fr)\n         });\n \n+        debug!(\"report_error: category={:?} {:?}\", category, span);\n         // Check if we can use one of the \"nice region errors\".\n         if let (Some(f), Some(o)) = (self.to_error_region(fr), self.to_error_region(outlived_fr)) {\n             let tables = infcx.tcx.typeck_tables_of(mir_def_id);"}, {"sha": "ac10683598aa7e183262881ffc85669db03dfc23", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -403,8 +403,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         mir_def_id: DefId,\n         errors_buffer: &mut Vec<Diagnostic>,\n     ) -> Option<ClosureRegionRequirements<'gcx>> {\n-        common::time(\n-            infcx.tcx.sess,\n+        common::time_ext(\n+            infcx.tcx.sess.time_extended(),\n+            Some(infcx.tcx.sess),\n             &format!(\"solve_nll_region_constraints({:?})\", mir_def_id),\n             || self.solve_inner(infcx, mir, mir_def_id, errors_buffer),\n         )"}, {"sha": "8bb663f846b73f72ee284f9cab7f408d2df851ff", "filename": "src/librustc_mir/interpret/snapshot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fsnapshot.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -431,7 +431,7 @@ impl<'a, 'mir, 'tcx> Eq for EvalSnapshot<'a, 'mir, 'tcx>\n impl<'a, 'mir, 'tcx> PartialEq for EvalSnapshot<'a, 'mir, 'tcx>\n {\n     fn eq(&self, other: &Self) -> bool {\n-        // FIXME: This looks to be a *ridicolously expensive* comparison operation.\n+        // FIXME: This looks to be a *ridiculously expensive* comparison operation.\n         // Doesn't this make tons of copies?  Either `snapshot` is very badly named,\n         // or it does!\n         self.snapshot() == other.snapshot()"}, {"sha": "37360a563950b89fbf33f9a1fc6ce55e15d40662", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -6722,6 +6722,22 @@ impl<'a> Parser<'a> {\n             self.expect(&token::OpenDelim(token::Brace))?;\n             let mut trait_items = vec![];\n             while !self.eat(&token::CloseDelim(token::Brace)) {\n+                if let token::DocComment(_) = self.token {\n+                    if self.look_ahead(1,\n+                    |tok| tok == &token::Token::CloseDelim(token::Brace)) {\n+                        let mut err = self.diagnostic().struct_span_err_with_code(\n+                            self.span,\n+                            \"found a documentation comment that doesn't document anything\",\n+                            DiagnosticId::Error(\"E0584\".into()),\n+                        );\n+                        err.help(\"doc comments must come before what they document, maybe a \\\n+                            comment was intended with `//`?\",\n+                        );\n+                        err.emit();\n+                        self.bump();\n+                        continue;\n+                    }\n+                }\n                 let mut at_end = false;\n                 match self.parse_trait_item(&mut at_end) {\n                     Ok(item) => trait_items.push(item),"}, {"sha": "1c3b5ac76138f2eb56f25c2effda0fb28a494d14", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1,7 +1,7 @@\n use std::fmt::Debug;\n \n fn elided(x: &i32) -> impl Copy { x }\n-//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+//~^ ERROR cannot infer an appropriate lifetime\n \n fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n //~^ ERROR cannot infer an appropriate lifetime"}, {"sha": "9339a83b09a9df8388a63cfc8e7a33bf3bb5227f", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1,10 +1,20 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:3:23\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----     ^^^^^^^^^ lifetime `'static` required\n-   |              |\n-   |              help: add explicit lifetime `'static` to the type of `x`: `&'static i32`\n+   |                       ---------   ^ ...but this borrow...\n+   |                       |\n+   |                       this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the anonymous lifetime #1 defined on the function body at 3:1\n+  --> $DIR/must_outlive_least_region_or_bound.rs:3:1\n+   |\n+LL | fn elided(x: &i32) -> impl Copy { x }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the anonymous lifetime #1 defined on the function body at 3:1\n+   |\n+LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n+   |                       ^^^^^^^^^^^^^^\n \n error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n@@ -67,5 +77,5 @@ LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n \n error: aborting due to 5 previous errors\n \n-Some errors occurred: E0310, E0621, E0623.\n+Some errors occurred: E0310, E0623.\n For more information about an error, try `rustc --explain E0310`."}, {"sha": "bcdf643c0b9d1136001d98643105630f55fe0231", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -8,8 +8,8 @@ trait Foo<'a> {\n impl<'a, T> Foo<'a> for T { }\n \n fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n+//~^ ERROR explicit lifetime required in the type of `x` [E0621]\n     x\n-        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n }\n \n fn main() {}"}, {"sha": "3a1e3ce3ad1a0d3a539b60618d939688e2a6b65e", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -1,8 +1,8 @@\n error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/impl-trait-captures.rs:11:5\n+  --> $DIR/impl-trait-captures.rs:10:25\n    |\n-LL |     x\n-   |     ^ lifetime `ReEarlyBound(0, 'a)` required\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n+   |                         ^^^^^^^^^^^^ lifetime `ReEarlyBound(0, 'a)` required\n help: add explicit lifetime `ReEarlyBound(0, 'a)` to the type of `x`\n    |\n LL | fn foo<'a, T>(x: &ReEarlyBound(0, 'a) T) -> impl Foo<'a> {"}, {"sha": "87b501bd2a2df616e945ae64e4dc137caee3750d", "filename": "src/test/ui/parser/doc-inside-trait-item.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -0,0 +1,6 @@\n+trait User{\n+    fn test();\n+    /// empty doc\n+    //~^ ERROR found a documentation comment that doesn't document anything\n+}\n+fn main() {}"}, {"sha": "261e27b6e0d18fc808f52fe1874efca7e89ea8f9", "filename": "src/test/ui/parser/doc-inside-trait-item.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-inside-trait-item.stderr?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -0,0 +1,11 @@\n+error[E0584]: found a documentation comment that doesn't document anything\n+  --> $DIR/doc-inside-trait-item.rs:3:5\n+   |\n+LL |     /// empty doc\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = help: doc comments must come before what they document, maybe a comment was intended with `//`?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0584`."}, {"sha": "3126b44f0d61846a835aefcad4367106c4cf4759", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f694222887cf31f51e68927716c25736e62f037f/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f694222887cf31f51e68927716c25736e62f037f/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=f694222887cf31f51e68927716c25736e62f037f", "patch": "@@ -30,7 +30,7 @@ const TEST_REPOS: &'static [Test] = &[\n     },\n     Test {\n         name: \"tokei\",\n-        repo: \"https://github.com/Aaronepower/tokei\",\n+        repo: \"https://github.com/XAMPPRocky/tokei\",\n         sha: \"5e11c4852fe4aa086b0e4fe5885822fbe57ba928\",\n         lock: None,\n         packages: &[],"}]}