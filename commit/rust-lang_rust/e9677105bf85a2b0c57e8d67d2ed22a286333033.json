{"sha": "e9677105bf85a2b0c57e8d67d2ed22a286333033", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5Njc3MTA1YmY4NWEyYjBjNTdlOGQ2N2QyZWQyMmEyODYzMzMwMzM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-02T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-08-03T18:48:18Z"}, "message": "try_err: Consider Try impl for Poll when generating suggestions\n\nThere are two different implementation of Try trait for Poll type;\nPoll<Result<T, E>> and Poll<Option<Result<T, E>>>. Take them into\naccount when generating suggestions.\n\nFor example, for Err(e)? suggest either return Poll::Ready(Err(e)) or\nreturn Poll::Ready(Some(Err(e))) as appropriate.", "tree": {"sha": "f317fbf97198bc98169216d6989209e3c5d0e453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f317fbf97198bc98169216d6989209e3c5d0e453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9677105bf85a2b0c57e8d67d2ed22a286333033", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9677105bf85a2b0c57e8d67d2ed22a286333033", "html_url": "https://github.com/rust-lang/rust/commit/e9677105bf85a2b0c57e8d67d2ed22a286333033", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9677105bf85a2b0c57e8d67d2ed22a286333033/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbbc973a842fc515f9b22d10d103bbf2d7827697", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbbc973a842fc515f9b22d10d103bbf2d7827697", "html_url": "https://github.com/rust-lang/rust/commit/bbbc973a842fc515f9b22d10d103bbf2d7827697"}], "stats": {"total": 186, "additions": 155, "deletions": 31}, "files": [{"sha": "3bd73d9f21a98f98deea34846f8a18e1a10a92d9", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 88, "deletions": 24, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/e9677105bf85a2b0c57e8d67d2ed22a286333033/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9677105bf85a2b0c57e8d67d2ed22a286333033/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=e9677105bf85a2b0c57e8d67d2ed22a286333033", "patch": "@@ -1,10 +1,13 @@\n-use crate::utils::{match_qpath, paths, snippet, snippet_with_macro_callsite, span_lint_and_sugg};\n+use crate::utils::{\n+    is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n+    span_lint_and_sugg,\n+};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource};\n+use rustc_hir::{Expr, ExprKind, MatchSource};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::Ty;\n+use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n@@ -65,19 +68,39 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n             if let Some(ref err_arg) = err_args.get(0);\n             if let ExprKind::Path(ref err_fun_path) = err_fun.kind;\n             if match_qpath(err_fun_path, &paths::RESULT_ERR);\n-            if let Some(return_type) = find_err_return_type(cx, &expr.kind);\n-\n+            if let Some(return_ty) = find_return_type(cx, &expr.kind);\n             then {\n-                let err_type = cx.typeck_results().expr_ty(err_arg);\n+                let prefix;\n+                let suffix;\n+                let err_ty;\n+\n+                if let Some(ty) = result_error_type(cx, return_ty) {\n+                    prefix = \"Err(\";\n+                    suffix = \")\";\n+                    err_ty = ty;\n+                } else if let Some(ty) = poll_result_error_type(cx, return_ty) {\n+                    prefix = \"Poll::Ready(Err(\";\n+                    suffix = \"))\";\n+                    err_ty = ty;\n+                } else if let Some(ty) = poll_option_result_error_type(cx, return_ty) {\n+                    prefix = \"Poll::Ready(Some(Err(\";\n+                    suffix = \")))\";\n+                    err_ty = ty;\n+                } else {\n+                    return;\n+                };\n+\n+                let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n+\n                 let origin_snippet = if err_arg.span.from_expansion() {\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n                     snippet(cx, err_arg.span, \"_\")\n                 };\n-                let suggestion = if err_type == return_type {\n-                    format!(\"return Err({})\", origin_snippet)\n+                let suggestion = if err_ty == expr_err_ty {\n+                    format!(\"return {}{}{}\", prefix, origin_snippet, suffix)\n                 } else {\n-                    format!(\"return Err({}.into())\", origin_snippet)\n+                    format!(\"return {}{}.into(){}\", prefix, origin_snippet, suffix)\n                 };\n \n                 span_lint_and_sugg(\n@@ -94,27 +117,68 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n     }\n }\n \n-// In order to determine whether to suggest `.into()` or not, we need to find the error type the\n-// function returns. To do that, we look for the From::from call (see tree above), and capture\n-// its output type.\n-fn find_err_return_type<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx ExprKind<'_>) -> Option<Ty<'tcx>> {\n+/// Finds function return type by examining return expressions in match arms.\n+fn find_return_type<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx ExprKind<'_>) -> Option<Ty<'tcx>> {\n     if let ExprKind::Match(_, ref arms, MatchSource::TryDesugar) = expr {\n-        arms.iter().find_map(|ty| find_err_return_type_arm(cx, ty))\n-    } else {\n-        None\n+        for arm in arms.iter() {\n+            if let ExprKind::Ret(Some(ref ret)) = arm.body.kind {\n+                return Some(cx.typeck_results().expr_ty(ret));\n+            }\n+        }\n     }\n+    None\n }\n \n-// Check for From::from in one of the match arms.\n-fn find_err_return_type_arm<'tcx>(cx: &LateContext<'tcx>, arm: &'tcx Arm<'_>) -> Option<Ty<'tcx>> {\n+/// Extracts the error type from Result<T, E>.\n+fn result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n     if_chain! {\n-        if let ExprKind::Ret(Some(ref err_ret)) = arm.body.kind;\n-        if let ExprKind::Call(ref from_error_path, ref from_error_args) = err_ret.kind;\n-        if let ExprKind::Path(ref from_error_fn) = from_error_path.kind;\n-        if match_qpath(from_error_fn, &paths::TRY_FROM_ERROR);\n-        if let Some(from_error_arg) = from_error_args.get(0);\n+        if let ty::Adt(_, subst) = ty.kind;\n+        if is_type_diagnostic_item(cx, ty, sym!(result_type));\n+        let err_ty = subst.type_at(1);\n+        then {\n+            Some(err_ty)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Extracts the error type from Poll<Result<T, E>>.\n+fn poll_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ty::Adt(def, subst) = ty.kind;\n+        if match_def_path(cx, def.did, &paths::POLL);\n+        let ready_ty = subst.type_at(0);\n+\n+        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind;\n+        if cx.tcx.is_diagnostic_item(sym!(result_type), ready_def.did);\n+        let err_ty = ready_subst.type_at(1);\n+\n+        then {\n+            Some(err_ty)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// Extracts the error type from Poll<Option<Result<T, E>>>.\n+fn poll_option_result_error_type<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<Ty<'tcx>> {\n+    if_chain! {\n+        if let ty::Adt(def, subst) = ty.kind;\n+        if match_def_path(cx, def.did, &paths::POLL);\n+        let ready_ty = subst.type_at(0);\n+\n+        if let ty::Adt(ready_def, ready_subst) = ready_ty.kind;\n+        if cx.tcx.is_diagnostic_item(sym!(option_type), ready_def.did);\n+        let some_ty = ready_subst.type_at(0);\n+\n+        if let ty::Adt(some_def, some_subst) = some_ty.kind;\n+        if cx.tcx.is_diagnostic_item(sym!(result_type), some_def.did);\n+        let err_ty = some_subst.type_at(1);\n+\n         then {\n-            Some(cx.typeck_results().expr_ty(from_error_arg))\n+            Some(err_ty)\n         } else {\n             None\n         }"}, {"sha": "923b319d7778e2b3f0741eff765eca54a331bbba", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9677105bf85a2b0c57e8d67d2ed22a286333033/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9677105bf85a2b0c57e8d67d2ed22a286333033/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=e9677105bf85a2b0c57e8d67d2ed22a286333033", "patch": "@@ -80,6 +80,7 @@ pub const PATH: [&str; 3] = [\"std\", \"path\", \"Path\"];\n pub const PATH_BUF: [&str; 3] = [\"std\", \"path\", \"PathBuf\"];\n pub const PATH_BUF_AS_PATH: [&str; 4] = [\"std\", \"path\", \"PathBuf\", \"as_path\"];\n pub const PATH_TO_PATH_BUF: [&str; 4] = [\"std\", \"path\", \"Path\", \"to_path_buf\"];\n+pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n pub const PTR_NULL: [&str; 2] = [\"ptr\", \"null\"];\n pub const PTR_NULL_MUT: [&str; 2] = [\"ptr\", \"null_mut\"];\n@@ -129,7 +130,6 @@ pub const TO_STRING: [&str; 3] = [\"alloc\", \"string\", \"ToString\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n pub const TRANSMUTE: [&str; 4] = [\"core\", \"intrinsics\", \"\", \"transmute\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n-pub const TRY_FROM_ERROR: [&str; 4] = [\"std\", \"ops\", \"Try\", \"from_error\"];\n pub const TRY_INTO_RESULT: [&str; 4] = [\"std\", \"ops\", \"Try\", \"into_result\"];\n pub const TRY_INTO_TRAIT: [&str; 3] = [\"core\", \"convert\", \"TryInto\"];\n pub const VEC: [&str; 3] = [\"alloc\", \"vec\", \"Vec\"];"}, {"sha": "9e77dcd8731642567072e5ff8ac0a8a12db38cd5", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=e9677105bf85a2b0c57e8d67d2ed22a286333033", "patch": "@@ -6,6 +6,9 @@\n #[macro_use]\n extern crate macro_rules;\n \n+use std::io;\n+use std::task::Poll;\n+\n // Tests that a simple case works\n // Should flag `Err(err)?`\n pub fn basic_test() -> Result<i32, i32> {\n@@ -104,3 +107,21 @@ pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     }\n     Ok(0)\n }\n+\n+pub fn poll_write(n: usize) -> Poll<io::Result<usize>> {\n+    if n == 0 {\n+        return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))\n+    } else if n == 1 {\n+        return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))\n+    };\n+\n+    Poll::Ready(Ok(n))\n+}\n+\n+pub fn poll_next(ready: bool) -> Poll<Option<io::Result<()>>> {\n+    if !ready {\n+        return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))\n+    }\n+\n+    Poll::Ready(None)\n+}"}, {"sha": "41bcb0a189e76de98a567bcb3db02caf9bd82354", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=e9677105bf85a2b0c57e8d67d2ed22a286333033", "patch": "@@ -6,6 +6,9 @@\n #[macro_use]\n extern crate macro_rules;\n \n+use std::io;\n+use std::task::Poll;\n+\n // Tests that a simple case works\n // Should flag `Err(err)?`\n pub fn basic_test() -> Result<i32, i32> {\n@@ -104,3 +107,21 @@ pub fn macro_inside(fail: bool) -> Result<i32, String> {\n     }\n     Ok(0)\n }\n+\n+pub fn poll_write(n: usize) -> Poll<io::Result<usize>> {\n+    if n == 0 {\n+        Err(io::ErrorKind::WriteZero)?\n+    } else if n == 1 {\n+        Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n+    };\n+\n+    Poll::Ready(Ok(n))\n+}\n+\n+pub fn poll_next(ready: bool) -> Poll<Option<io::Result<()>>> {\n+    if !ready {\n+        Err(io::ErrorKind::NotFound)?\n+    }\n+\n+    Poll::Ready(None)\n+}"}, {"sha": "3f1cbc17e72d08ff35e90bfc0e9333472d1473f8", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 24, "deletions": 6, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9677105bf85a2b0c57e8d67d2ed22a286333033/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=e9677105bf85a2b0c57e8d67d2ed22a286333033", "patch": "@@ -1,5 +1,5 @@\n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:15:9\n+  --> $DIR/try_err.rs:18:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err)`\n@@ -11,28 +11,46 @@ LL | #![deny(clippy::try_err)]\n    |         ^^^^^^^^^^^^^^^\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:25:9\n+  --> $DIR/try_err.rs:28:9\n    |\n LL |         Err(err)?;\n    |         ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:45:17\n+  --> $DIR/try_err.rs:48:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err)`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:64:17\n+  --> $DIR/try_err.rs:67:17\n    |\n LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:103:9\n+  --> $DIR/try_err.rs:106:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n-error: aborting due to 5 previous errors\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:113:9\n+   |\n+LL |         Err(io::ErrorKind::WriteZero)?\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:115:9\n+   |\n+LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:123:9\n+   |\n+LL |         Err(io::ErrorKind::NotFound)?\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n+\n+error: aborting due to 8 previous errors\n "}]}