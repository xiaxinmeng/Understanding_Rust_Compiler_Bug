{"sha": "52c34c614b561096b239bddf59aa741270b2177e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyYzM0YzYxNGI1NjEwOTZiMjM5YmRkZjU5YWE3NDEyNzBiMjE3N2U=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-28T17:30:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-28T17:30:22Z"}, "message": "Merge #2110\n\n2110: weaken requirements of AstDef r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "9c75065f4fbb2e93d02dbefe8516f6ad1b902655", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c75065f4fbb2e93d02dbefe8516f6ad1b902655"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52c34c614b561096b239bddf59aa741270b2177e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtyWuCRBK7hj4Ov3rIwAAdHIIAKA3nrE719EVxVu5OnGO6IQF\nnynECEIQUopujgyMcYAzcWoKFo3ui7LCfNIrJV3IDUouuECpURQKBQfHmj7MeUuP\nEc8Pc8O3bj6DL9pc+zzY4Gm0jiKBnKlWfoPRxKsIqe1pF3LBm3sKwDxlHvdNm7SJ\n9wNL6QTDxI904mOUzXa8cQM/fBLPn5YZ5H/z8pv1hHG9O4bKG9e3H5th6LtDMaEP\nXkMwSsbDuchowHW9Dt7vz0k2vdNSMI5OpiP1QmZHQaCiDCaBaau3nWJ6QodP3j4G\nytrd0fD9GrFII6Ppn59dul5PxWQdy96BSIke/iRG/7Id69jxjRcYOSMV8D5HOzI=\n=DMSj\n-----END PGP SIGNATURE-----\n", "payload": "tree 9c75065f4fbb2e93d02dbefe8516f6ad1b902655\nparent 1ca41f2118fca17ee5ad0f586218489fa5d883af\nparent 54d3e47318930c7a443b1498ff88d365920abe39\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572283822 +0000\ncommitter GitHub <noreply@github.com> 1572283822 +0000\n\nMerge #2110\n\n2110: weaken requirements of AstDef r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52c34c614b561096b239bddf59aa741270b2177e", "html_url": "https://github.com/rust-lang/rust/commit/52c34c614b561096b239bddf59aa741270b2177e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52c34c614b561096b239bddf59aa741270b2177e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca41f2118fca17ee5ad0f586218489fa5d883af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca41f2118fca17ee5ad0f586218489fa5d883af", "html_url": "https://github.com/rust-lang/rust/commit/1ca41f2118fca17ee5ad0f586218489fa5d883af"}, {"sha": "54d3e47318930c7a443b1498ff88d365920abe39", "url": "https://api.github.com/repos/rust-lang/rust/commits/54d3e47318930c7a443b1498ff88d365920abe39", "html_url": "https://github.com/rust-lang/rust/commit/54d3e47318930c7a443b1498ff88d365920abe39"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "518ea32e99e88ece24a4a48291351fcdbf1e1281", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/52c34c614b561096b239bddf59aa741270b2177e/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52c34c614b561096b239bddf59aa741270b2177e/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=52c34c614b561096b239bddf59aa741270b2177e", "patch": "@@ -11,7 +11,7 @@ use ra_prof::profile;\n use ra_syntax::{ast, AstNode, Parse, SyntaxNode};\n \n use crate::{\n-    db::{AstDatabase, DefDatabase, InternDatabase},\n+    db::{AstDatabase, InternDatabase},\n     AstId, Crate, FileAstId, Module, Source,\n };\n \n@@ -238,13 +238,13 @@ pub(crate) struct LocationCtx<DB> {\n     file_id: HirFileId,\n }\n \n-impl<'a, DB: DefDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB> LocationCtx<&'a DB> {\n     pub(crate) fn new(db: &'a DB, module: Module, file_id: HirFileId) -> LocationCtx<&'a DB> {\n         LocationCtx { db, module, file_id }\n     }\n }\n \n-impl<'a, DB: DefDatabase + AstDatabase> LocationCtx<&'a DB> {\n+impl<'a, DB: AstDatabase> LocationCtx<&'a DB> {\n     pub(crate) fn to_def<N, DEF>(self, ast: &N) -> DEF\n     where\n         N: AstNode,\n@@ -255,24 +255,24 @@ impl<'a, DB: DefDatabase + AstDatabase> LocationCtx<&'a DB> {\n }\n \n pub(crate) trait AstItemDef<N: AstNode>: salsa::InternKey + Clone {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<N>) -> Self;\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<N>;\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<N>) -> Self;\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<N>;\n \n-    fn from_ast(ctx: LocationCtx<&(impl AstDatabase + DefDatabase)>, ast: &N) -> Self {\n+    fn from_ast(ctx: LocationCtx<&impl AstDatabase>, ast: &N) -> Self {\n         let items = ctx.db.ast_id_map(ctx.file_id);\n         let item_id = items.ast_id(ast);\n         Self::from_ast_id(ctx, item_id)\n     }\n-    fn from_ast_id(ctx: LocationCtx<&impl DefDatabase>, ast_id: FileAstId<N>) -> Self {\n+    fn from_ast_id(ctx: LocationCtx<&impl InternDatabase>, ast_id: FileAstId<N>) -> Self {\n         let loc = ItemLoc { module: ctx.module, ast_id: ast_id.with_file_id(ctx.file_id) };\n         Self::intern(ctx.db, loc)\n     }\n-    fn source(self, db: &(impl AstDatabase + DefDatabase)) -> Source<N> {\n+    fn source(self, db: &impl AstDatabase) -> Source<N> {\n         let loc = self.lookup_intern(db);\n         let ast = loc.ast_id.to_node(db);\n         Source { file_id: loc.ast_id.file_id(), ast }\n     }\n-    fn module(self, db: &impl DefDatabase) -> Module {\n+    fn module(self, db: &impl InternDatabase) -> Module {\n         let loc = self.lookup_intern(db);\n         loc.module\n     }\n@@ -283,10 +283,10 @@ pub struct FunctionId(salsa::InternId);\n impl_intern_key!(FunctionId);\n \n impl AstItemDef<ast::FnDef> for FunctionId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::FnDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::FnDef>) -> Self {\n         db.intern_function(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::FnDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::FnDef> {\n         db.lookup_intern_function(self)\n     }\n }\n@@ -295,10 +295,10 @@ impl AstItemDef<ast::FnDef> for FunctionId {\n pub struct StructId(salsa::InternId);\n impl_intern_key!(StructId);\n impl AstItemDef<ast::StructDef> for StructId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StructDef>) -> Self {\n         db.intern_struct(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::StructDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StructDef> {\n         db.lookup_intern_struct(self)\n     }\n }\n@@ -307,10 +307,10 @@ impl AstItemDef<ast::StructDef> for StructId {\n pub struct EnumId(salsa::InternId);\n impl_intern_key!(EnumId);\n impl AstItemDef<ast::EnumDef> for EnumId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::EnumDef>) -> Self {\n         db.intern_enum(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::EnumDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::EnumDef> {\n         db.lookup_intern_enum(self)\n     }\n }\n@@ -319,10 +319,10 @@ impl AstItemDef<ast::EnumDef> for EnumId {\n pub struct ConstId(salsa::InternId);\n impl_intern_key!(ConstId);\n impl AstItemDef<ast::ConstDef> for ConstId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::ConstDef>) -> Self {\n         db.intern_const(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::ConstDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::ConstDef> {\n         db.lookup_intern_const(self)\n     }\n }\n@@ -331,10 +331,10 @@ impl AstItemDef<ast::ConstDef> for ConstId {\n pub struct StaticId(salsa::InternId);\n impl_intern_key!(StaticId);\n impl AstItemDef<ast::StaticDef> for StaticId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::StaticDef>) -> Self {\n         db.intern_static(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::StaticDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::StaticDef> {\n         db.lookup_intern_static(self)\n     }\n }\n@@ -343,10 +343,10 @@ impl AstItemDef<ast::StaticDef> for StaticId {\n pub struct TraitId(salsa::InternId);\n impl_intern_key!(TraitId);\n impl AstItemDef<ast::TraitDef> for TraitId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TraitDef>) -> Self {\n         db.intern_trait(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::TraitDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TraitDef> {\n         db.lookup_intern_trait(self)\n     }\n }\n@@ -355,10 +355,10 @@ impl AstItemDef<ast::TraitDef> for TraitId {\n pub struct TypeAliasId(salsa::InternId);\n impl_intern_key!(TypeAliasId);\n impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n-    fn intern(db: &impl DefDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n+    fn intern(db: &impl InternDatabase, loc: ItemLoc<ast::TypeAliasDef>) -> Self {\n         db.intern_type_alias(loc)\n     }\n-    fn lookup_intern(self, db: &impl DefDatabase) -> ItemLoc<ast::TypeAliasDef> {\n+    fn lookup_intern(self, db: &impl InternDatabase) -> ItemLoc<ast::TypeAliasDef> {\n         db.lookup_intern_type_alias(self)\n     }\n }"}]}