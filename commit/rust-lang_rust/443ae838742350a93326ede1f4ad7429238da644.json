{"sha": "443ae838742350a93326ede1f4ad7429238da644", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0M2FlODM4NzQyMzUwYTkzMzI2ZWRlMWY0YWQ3NDI5MjM4ZGE2NDQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-15T14:14:37Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-05-17T09:06:35Z"}, "message": "merge lazy_normalization_consts into const_generics", "tree": {"sha": "bea83b1ba3e29bc9671f1117a3e96b23140a0c50", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bea83b1ba3e29bc9671f1117a3e96b23140a0c50"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/443ae838742350a93326ede1f4ad7429238da644", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/443ae838742350a93326ede1f4ad7429238da644", "html_url": "https://github.com/rust-lang/rust/commit/443ae838742350a93326ede1f4ad7429238da644", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/443ae838742350a93326ede1f4ad7429238da644/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479968b81259ee7bfd3897cb192ff61b59fb8a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/479968b81259ee7bfd3897cb192ff61b59fb8a8f", "html_url": "https://github.com/rust-lang/rust/commit/479968b81259ee7bfd3897cb192ff61b59fb8a8f"}], "stats": {"total": 268, "additions": 70, "deletions": 198}, "files": [{"sha": "a1dd7a5ca5225ea471b66082c22ba6eebb5e9e32", "filename": "src/librustc_feature/active.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_feature%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_feature%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_feature%2Factive.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -559,9 +559,6 @@ declare_features! (\n     /// Allow negative trait implementations.\n     (active, negative_impls, \"1.44.0\", Some(68318), None),\n \n-    /// Lazily evaluate constants. Which allows constants to depend on type parameters.\n-    (active, lazy_normalization_consts, \"1.44.0\", Some(60471), None),\n-\n     /// Allows the use of `#[target_feature]` on safe functions.\n     (active, target_feature_11, \"1.45.0\", Some(69098), None),\n \n@@ -584,5 +581,4 @@ pub const INCOMPLETE_FEATURES: &[Symbol] = &[\n     sym::raw_dylib,\n     sym::const_trait_impl,\n     sym::const_trait_bound_opt_out,\n-    sym::lazy_normalization_consts,\n ];"}, {"sha": "1d3ddd7e2deff8d04c391c7237e394d012ed8095", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -164,15 +164,11 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n             (_, ty::ConstKind::Infer(InferConst::Var(vid))) => {\n                 return self.unify_const_variable(!a_is_expected, vid, a);\n             }\n-            (ty::ConstKind::Unevaluated(..), _)\n-                if self.tcx.features().lazy_normalization_consts =>\n-            {\n+            (ty::ConstKind::Unevaluated(..), _) if self.tcx.features().const_generics => {\n                 relation.const_equate_obligation(a, b);\n                 return Ok(b);\n             }\n-            (_, ty::ConstKind::Unevaluated(..))\n-                if self.tcx.features().lazy_normalization_consts =>\n-            {\n+            (_, ty::ConstKind::Unevaluated(..)) if self.tcx.features().const_generics => {\n                 relation.const_equate_obligation(a, b);\n                 return Ok(a);\n             }\n@@ -662,9 +658,7 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().features().lazy_normalization_consts => {\n-                Ok(c)\n-            }\n+            ty::ConstKind::Unevaluated(..) if self.tcx().features().const_generics => Ok(c),\n             _ => relate::super_relate_consts(self, c, c),\n         }\n     }"}, {"sha": "e5687db4ff13fceae950b00e3c6b79f8e3f6ba09", "filename": "src/librustc_infer/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fnll_relate%2Fmod.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -988,9 +988,7 @@ where\n                     }\n                 }\n             }\n-            ty::ConstKind::Unevaluated(..) if self.tcx().features().lazy_normalization_consts => {\n-                Ok(a)\n-            }\n+            ty::ConstKind::Unevaluated(..) if self.tcx().features().const_generics => Ok(a),\n             _ => relate::super_relate_consts(self, a, a),\n         }\n     }"}, {"sha": "621a4efc6ccc805477d680b27afe3dc2dc23a837", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -432,8 +432,8 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             match relation.relate(&sz_a, &sz_b) {\n                 Ok(sz) => Ok(tcx.mk_ty(ty::Array(t, sz))),\n                 // FIXME(lazy_normalization_consts) Implement improved diagnostics for mismatched array\n-                //  length?\n-                Err(err) if relation.tcx().features().lazy_normalization_consts => Err(err),\n+                // length?\n+                Err(err) if relation.tcx().features().const_generics => Err(err),\n                 Err(err) => {\n                     // Check whether the lengths are both concrete/known values,\n                     // but are unequal, for better diagnostics."}, {"sha": "a61647bfd655f781ce5882fbec29868931386a2d", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -411,7 +411,6 @@ symbols! {\n         label_break_value,\n         lang,\n         lang_items,\n-        lazy_normalization_consts,\n         let_chains,\n         lhs,\n         lib,"}, {"sha": "983e11622f9d56322b4d08487561a1c610efc6e6", "filename": "src/librustc_trait_selection/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fproject.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -388,7 +388,7 @@ impl<'a, 'b, 'tcx> TypeFolder<'tcx> for AssocTypeNormalizer<'a, 'b, 'tcx> {\n     }\n \n     fn fold_const(&mut self, constant: &'tcx ty::Const<'tcx>) -> &'tcx ty::Const<'tcx> {\n-        if self.selcx.tcx().features().lazy_normalization_consts {\n+        if self.selcx.tcx().features().const_generics {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "80740651230defc254c8689ab3ffcd9fc3209a30", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1173,7 +1173,7 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             // HACK(eddyb) this provides the correct generics when\n             // `feature(const_generics)` is enabled, so that const expressions\n             // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.features().const_generics || tcx.features().lazy_normalization_consts {\n+            if tcx.features().const_generics {\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "c28875f1752b08bac4d263cc20b58c06d3fb6213", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,6 +1,11 @@\n+<<<<<<< HEAD\n //~^ WARN the feature `const_generics` is incomplete\n #![feature(lazy_normalization_consts)]\n //~^ WARN the feature `lazy_normalization_consts` is incomplete\n+=======\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+>>>>>>> merge lazy_normalization_consts into const_generics\n \n #[allow(dead_code)]\n struct ArithArrayLen<const N: usize>([u32; 0 + N]);"}, {"sha": "14cf64eeb7ac69841461972e8e033910824b6869", "filename": "src/test/ui/const-generics/array-size-in-generic-struct-param.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-size-in-generic-struct-param.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -7,27 +7,21 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/array-size-in-generic-struct-param.rs:3:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:7:38\n+  --> $DIR/array-size-in-generic-struct-param.rs:5:38\n    |\n LL | struct ArithArrayLen<const N: usize>([u32; 0 + N]);\n    |                                      ^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n error: constant expression depends on a generic parameter\n-  --> $DIR/array-size-in-generic-struct-param.rs:16:5\n+  --> $DIR/array-size-in-generic-struct-param.rs:14:5\n    |\n LL |     arr: [u8; CFG.arr_size],\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "7eb826b8a36b119a0fc6d4ca7ef261d279be62f9", "filename": "src/test/ui/const-generics/different_byref.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdifferent_byref.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -13,8 +13,8 @@ error[E0308]: mismatched types\n LL |     x = Const::<{ [4] }> {};\n    |         ^^^^^^^^^^^^^^^^^^^ expected `3usize`, found `4usize`\n    |\n-   = note: expected struct `Const<[3usize]>`\n-              found struct `Const<[4usize]>`\n+   = note: expected type `[3usize]`\n+              found type `[4usize]`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "de41d2984a655e5f505157a14ca0e0c109ce567a", "filename": "src/test/ui/const-generics/fn-const-param-infer.stderr", "status": "modified", "additions": 6, "deletions": 10, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ffn-const-param-infer.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:16:31\n    |\n LL |     let _: Checked<not_one> = Checked::<not_two>;\n-   |            ----------------   ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n-   |            |\n-   |            expected due to this\n+   |                               ^^^^^^^^^^^^^^^^^^ expected `{not_one as fn(usize) -> bool}`, found `{not_two as fn(usize) -> bool}`\n    |\n-   = note: expected struct `Checked<{not_one as fn(usize) -> bool}>`\n-              found struct `Checked<{not_two as fn(usize) -> bool}>`\n+   = note: expected type `{not_one as fn(usize) -> bool}`\n+              found type `{not_two as fn(usize) -> bool}`\n \n error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:20:24\n@@ -37,12 +35,10 @@ error[E0308]: mismatched types\n   --> $DIR/fn-const-param-infer.rs:25:40\n    |\n LL |     let _: Checked<{generic::<u32>}> = Checked::<{generic::<u16>}>;\n-   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n-   |            |\n-   |            expected due to this\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{generic::<u32> as fn(usize) -> bool}`, found `{generic::<u16> as fn(usize) -> bool}`\n    |\n-   = note: expected struct `Checked<{generic::<u32> as fn(usize) -> bool}>`\n-              found struct `Checked<{generic::<u16> as fn(usize) -> bool}>`\n+   = note: expected type `{generic::<u32> as fn(usize) -> bool}`\n+              found type `{generic::<u16> as fn(usize) -> bool}`\n \n error: aborting due to 4 previous errors; 1 warning emitted\n "}, {"sha": "ee92e1019dd9fb181cbc4e32eb2db0e87e2ca54b", "filename": "src/test/ui/const-generics/issues/issue-61336-1.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,6 +1,7 @@\n-//~^ WARN the feature `const_generics` is incomplete\n #![feature(lazy_normalization_consts)]\n //~^ WARN the feature `lazy_normalization_consts` is incomplete\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n \n // build-pass\n "}, {"sha": "34920d8907fc1280d8e51fff660f80cc664de128", "filename": "src/test/ui/const-generics/issues/issue-61336-1.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-1.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -0,0 +1,10 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-61336-1.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "76ba795b51c7811fadd4a369b9905a84aff08137", "filename": "src/test/ui/const-generics/issues/issue-61336-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,6 +1,7 @@\n-//~^ WARN the feature `const_generics` is incomplete\n #![feature(lazy_normalization_consts)]\n //~^ WARN the feature `lazy_normalization_consts` is incomplete\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n \n fn f<T: Copy, const N: usize>(x: T) -> [T; N] {\n     [x; { N }]"}, {"sha": "5f3395223f95ddc7a3c137cbc890daa2992e1b70", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -7,14 +7,8 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-61336-2.rs:3:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-61336-2.rs:11:5\n+  --> $DIR/issue-61336-2.rs:9:5\n    |\n LL |     [x; { N }]\n    |     ^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n@@ -25,6 +19,6 @@ help: consider restricting type parameter `T`\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0eee37df3dd52c1858e6aa3ceb11be62738f2eac", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -7,14 +7,8 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-61336.rs:3:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-61336.rs:11:5\n+  --> $DIR/issue-61336.rs:9:5\n    |\n LL |     [x; N]\n    |     ^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n@@ -25,6 +19,6 @@ help: consider restricting type parameter `T`\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {\n    |       ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "2e405370dc0df9a527ec572a3c9decc270ab2f36", "filename": "src/test/ui/const-generics/issues/issue-61747.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61747.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -7,11 +7,5 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-61747.rs:5:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "35fb435b812a40c9d0a56a5425e6d13c294828ba", "filename": "src/test/ui/const-generics/issues/issue-61935.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n-#![feature(lazy_normalization_consts)]\n-//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Foo {}\n "}, {"sha": "a8d9bf6a4562f5c7e803d2cbe21c9538831292f4", "filename": "src/test/ui/const-generics/issues/issue-61935.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61935.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -6,11 +6,5 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-61935.rs:5:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "4e05aadd3930f4f81c7b4fa7b7472c0345b07dd9", "filename": "src/test/ui/const-generics/issues/issue-62504.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -16,8 +16,7 @@ struct ArrayHolder<const X: usize>([u32; X]);\n impl<const X: usize> ArrayHolder<X> {\n     pub const fn new() -> Self {\n         ArrayHolder([0; Self::SIZE])\n-        //~^ ERROR: mismatched types\n-        //~| ERROR constant expression depends on a generic parameter\n+        //~^ ERROR constant expression depends on a generic parameter\n     }\n }\n "}, {"sha": "f09af76325e96c9f98906e2acc435667099a00b3", "filename": "src/test/ui/const-generics/issues/issue-62504.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62504.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,12 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/issue-62504.rs:18:21\n-   |\n-LL |         ArrayHolder([0; Self::SIZE])\n-   |                     ^^^^^^^^^^^^^^^ expected `X`, found `Self::SIZE`\n-   |\n-   = note: expected array `[u32; X]`\n-              found array `[u32; _]`\n-\n error: constant expression depends on a generic parameter\n   --> $DIR/issue-62504.rs:18:25\n    |\n@@ -15,6 +6,5 @@ LL |         ArrayHolder([0; Self::SIZE])\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "89e0b7f62da5d41dee4d5a6a9d8ea06f6e68efe6", "filename": "src/test/ui/const-generics/issues/issue-67185-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -2,8 +2,6 @@\n \n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n-#![feature(lazy_normalization_consts)]\n-//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Baz {\n     type Quaks;"}, {"sha": "ba211caf267e2b68764b1f7f8a12d58e151ae145", "filename": "src/test/ui/const-generics/issues/issue-67185-1.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-1.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -6,11 +6,5 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-67185-1.rs:5:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "2732137f59d721bed0742a55e0757a9df2440d75", "filename": "src/test/ui/const-generics/issues/issue-67185-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,7 +1,5 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n-#![feature(lazy_normalization_consts)]\n-//~^ WARN the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n \n trait Baz {\n     type Quaks;"}, {"sha": "2f6b1f1cd47e5a4914d51e9ead4affe733a6cb8f", "filename": "src/test/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -6,14 +6,8 @@ LL | #![feature(const_generics)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `lazy_normalization_consts` is incomplete and may cause the compiler to crash\n-  --> $DIR/issue-67185-2.rs:3:12\n-   |\n-LL | #![feature(lazy_normalization_consts)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:15:1\n    |\n LL | / trait Foo\n LL | |\n@@ -31,7 +25,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:17:1\n+  --> $DIR/issue-67185-2.rs:15:1\n    |\n LL | / trait Foo\n LL | |\n@@ -49,7 +43,7 @@ LL | | }\n    = help: add `#![feature(trivial_bounds)]` to the crate attributes to enable\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:25:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -65,7 +59,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:27:6\n+  --> $DIR/issue-67185-2.rs:25:6\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -81,7 +75,7 @@ LL | impl Foo for FooImpl {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[[u16; 3]; 2]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:29:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -97,7 +91,7 @@ LL | fn f(_: impl Foo) {}\n              <[u16; 4] as Bar>\n \n error[E0277]: the trait bound `[u16; 3]: Bar` is not satisfied\n-  --> $DIR/issue-67185-2.rs:31:14\n+  --> $DIR/issue-67185-2.rs:29:14\n    |\n LL | trait Foo\n    |       --- required by a bound in this\n@@ -112,6 +106,6 @@ LL | fn f(_: impl Foo) {}\n              <[[u16; 3]; 3] as Bar>\n              <[u16; 4] as Bar>\n \n-error: aborting due to 6 previous errors; 2 warnings emitted\n+error: aborting due to 6 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "0afc1a2617eaeda0816a73407ef2fd419546b604", "filename": "src/test/ui/const-generics/issues/issue-69654.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-69654.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,14 +1,14 @@\n #![feature(const_generics)]\n #![allow(incomplete_features)]\n \n-trait Bar<O> {}\n-impl<O> Bar<O> for [u8; O] {}\n-//~^ ERROR expected value, found type parameter `O`\n+trait Bar<T> {}\n+impl<T> Bar<T> for [u8; T] {}\n+//~^ ERROR expected value, found type parameter `T`\n \n-struct Foo<const O: usize> {}\n-impl<const O: usize> Foo<O>\n+struct Foo<const T: usize> {}\n+impl<const T: usize> Foo<T>\n where\n-    [u8; O]: Bar<[(); O]>,\n+    [u8; T]: Bar<[(); T]>,\n {\n     fn foo() {}\n }"}, {"sha": "36513f94a9e97562431adca9dc10b06c0fa67139", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71922.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71922.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n #![feature(const_generics)]\n-#![feature(lazy_normalization_consts)]\n #![allow(incomplete_features)]\n trait Foo {}\n "}, {"sha": "048ed18c927bfa25e9a03b76cef939ac5c80f99d", "filename": "src/test/ui/const-generics/lazy-normalization/issue-71986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Fissue-71986.rs?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n #![allow(incomplete_features)]\n-#![feature(const_generics, lazy_normalization_consts)]\n+#![feature(const_generics)]\n \n pub trait Foo<const B: bool> {}\n pub fn bar<T: Foo<{ true }>>() {}"}, {"sha": "2c6fbfe65d6e1c6c1600f1f0e6adc5b83debaa2b", "filename": "src/test/ui/const-generics/lazy-normalization/lazy-normalization-feature-gate.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.rs?ref=479968b81259ee7bfd3897cb192ff61b59fb8a8f", "patch": "@@ -1,20 +0,0 @@\n-// gate-test-lazy_normalization_consts\n-#![feature(const_generics)]\n-//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n-trait Foo {}\n-\n-impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-//~^ ERROR cycle detected\n-\n-trait FooImpl<const IS_ZERO: bool> {}\n-\n-impl FooImpl<{ 0u8 == 0u8 }> for [(); 0] {}\n-\n-impl<const N: usize> FooImpl<{ 0u8 != 0u8 }> for [(); N] {}\n-\n-fn foo<T: Foo>(_: T) {}\n-\n-fn main() {\n-    foo([]);\n-    foo([()]);\n-}"}, {"sha": "9a7844f5e8f10e1f60eb8255207469ffad2ef7d0", "filename": "src/test/ui/const-generics/lazy-normalization/lazy-normalization-feature-gate.stderr", "status": "removed", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/479968b81259ee7bfd3897cb192ff61b59fb8a8f/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flazy-normalization%2Flazy-normalization-feature-gate.stderr?ref=479968b81259ee7bfd3897cb192ff61b59fb8a8f", "patch": "@@ -1,44 +0,0 @@\n-warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n-  --> $DIR/lazy-normalization-feature-gate.rs:2:12\n-   |\n-LL | #![feature(const_generics)]\n-   |            ^^^^^^^^^^^^^^\n-   |\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error[E0391]: cycle detected when const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   |                                                          ^^^^^^^^^^\n-   |\n-note: ...which requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   |                                                          ^^^^^^^^^^\n-note: ...which requires const-evaluating `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   |                                                          ^^^^^^^^^^\n-note: ...which requires type-checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   |                                                          ^^^^^^^^^^\n-note: ...which requires processing `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`...\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:58\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   |                                                          ^^^^^^^^^^\n-   = note: ...which again requires const-evaluating + checking `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>::{{constant}}#0`, completing the cycle\n-note: cycle used when processing `<impl at $DIR/lazy-normalization-feature-gate.rs:6:1: 6:72>`\n-  --> $DIR/lazy-normalization-feature-gate.rs:6:1\n-   |\n-LL | impl<const N: usize> Foo for [(); N] where Self: FooImpl<{ N == 0 }> {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error; 1 warning emitted\n-\n-For more information about this error, try `rustc --explain E0391`."}, {"sha": "7a665397c1207fd90c753fc5a21581f9f074f3ca", "filename": "src/test/ui/const-generics/raw-ptr-const-param.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fraw-ptr-const-param.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/raw-ptr-const-param.rs:7:40\n    |\n LL |     let _: Const<{ 15 as *const _ }> = Const::<{ 10 as *const _ }>;\n-   |            -------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n-   |            |\n-   |            expected due to this\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `{0xf as *const u32}`, found `{0xa as *const u32}`\n    |\n-   = note: expected struct `Const<{0xf as *const u32}>`\n-              found struct `Const<{0xa as *const u32}>`\n+   = note: expected type `{0xf as *const u32}`\n+              found type `{0xa as *const u32}`\n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "53328c2e89bf4ea2c58e6ca737e2fd4bc36ab2c1", "filename": "src/test/ui/const-generics/types-mismatch-const-args.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Ftypes-mismatch-const-args.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -11,12 +11,10 @@ error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:13:41\n    |\n LL |     let _: A<'a, u32, {2u32}, {3u32}> = A::<'a, u32, {4u32}, {3u32}> { data: PhantomData };\n-   |            --------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n-   |            |\n-   |            expected due to this\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `2u32`, found `4u32`\n    |\n-   = note: expected struct `A<'_, _, 2u32, _>`\n-              found struct `A<'_, _, 4u32, _>`\n+   = note: expected type `2u32`\n+              found type `4u32`\n \n error[E0308]: mismatched types\n   --> $DIR/types-mismatch-const-args.rs:15:41\n@@ -26,8 +24,8 @@ LL |     let _: A<'a, u16, {2u32}, {3u32}> = A::<'b, u32, {2u32}, {3u32}> { data\n    |            |\n    |            expected due to this\n    |\n-   = note: expected struct `A<'a, u16, _, _>`\n-              found struct `A<'b, u32, _, _>`\n+   = note: expected struct `A<'a, u16, {2u32}, {3u32}>`\n+              found struct `A<'b, u32, {2u32}, {3u32}>`\n \n error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "88f8dbe1a7d72cbbdd7827bb71d128c576d5c581", "filename": "src/test/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/443ae838742350a93326ede1f4ad7429238da644/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=443ae838742350a93326ede1f4ad7429238da644", "patch": "@@ -25,7 +25,7 @@ error: non-defining opaque type use in defining scope\n LL | fn concrete_const() -> OneConst<{123}> {\n    |                        ^^^^^^^^^^^^^^^\n    |\n-note: used non-generic constant `123usize` for generic parameter\n+note: used non-generic constant `{123}` for generic parameter\n   --> $DIR/generic_nondefining_use.rs:10:21\n    |\n LL | type OneConst<const X: usize> = impl Debug;"}]}