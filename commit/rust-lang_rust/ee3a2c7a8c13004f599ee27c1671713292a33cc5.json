{"sha": "ee3a2c7a8c13004f599ee27c1671713292a33cc5", "node_id": "C_kwDOAAsO6NoAKGVlM2EyYzdhOGMxMzAwNGY1OTllZTI3YzE2NzE3MTMyOTJhMzNjYzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-03-04T16:31:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-04T16:31:06Z"}, "message": "Rollup merge of #94549 - m-ou-se:thread-is-finished, r=yaahc\n\nRename JoinHandle::is_running to is_finished.\n\nThis is renaming `is_running` to `is_finished` as discussed on the tracking issue here: https://github.com/rust-lang/rust/issues/90470#issuecomment-1050188499\n\nTaking some of the docs suggestions from https://github.com/rust-lang/rust/pull/94033", "tree": {"sha": "bd6f4557ec323fdd785481e8dd41ca70d2b30b7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd6f4557ec323fdd785481e8dd41ca70d2b30b7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3a2c7a8c13004f599ee27c1671713292a33cc5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiIj7KCRBK7hj4Ov3rIwAAwIgIAJZCCMmCWWUXwGi1HjijAn/z\n5r5RfYBr2hBuTNDZXEIeec3Fpj15R+/sdIhKMTiJVFKdl+Ak9QiO8NFdeWfN7JB9\nvVUTDdwRHLQHWvGmEYITVdtChb9oCxfGg/mDU3FFNFqTyV28I2pTVZrfk8++VE6/\nRgi2C/ihGDaVWWUndiiccKuZCVaEatWqUyIgKbbMQPBwf6P3Cj2JPR6Lh0L/6wPS\nA1Z7dnqGocA/LzCptC02u1idWP6kmcYMVwKfcuRC2tn/Rq+v8Ni0VXCmQHOIvJnm\ngSLwLXT9HW0C9EL7DN6Up07WEO22LDny/9Q9zF/iUcSjVLQtfvCS7BEZpxeZf6k=\n=suhu\n-----END PGP SIGNATURE-----\n", "payload": "tree bd6f4557ec323fdd785481e8dd41ca70d2b30b7b\nparent 5115bdc2e2829e9c9a7ce10516bd26469049e0a9\nparent af86b55735bac498756cddd837c3ebec68811122\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1646411466 +0100\ncommitter GitHub <noreply@github.com> 1646411466 +0100\n\nRollup merge of #94549 - m-ou-se:thread-is-finished, r=yaahc\n\nRename JoinHandle::is_running to is_finished.\n\nThis is renaming `is_running` to `is_finished` as discussed on the tracking issue here: https://github.com/rust-lang/rust/issues/90470#issuecomment-1050188499\n\nTaking some of the docs suggestions from https://github.com/rust-lang/rust/pull/94033\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3a2c7a8c13004f599ee27c1671713292a33cc5", "html_url": "https://github.com/rust-lang/rust/commit/ee3a2c7a8c13004f599ee27c1671713292a33cc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3a2c7a8c13004f599ee27c1671713292a33cc5/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5115bdc2e2829e9c9a7ce10516bd26469049e0a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5115bdc2e2829e9c9a7ce10516bd26469049e0a9", "html_url": "https://github.com/rust-lang/rust/commit/5115bdc2e2829e9c9a7ce10516bd26469049e0a9"}, {"sha": "af86b55735bac498756cddd837c3ebec68811122", "url": "https://api.github.com/repos/rust-lang/rust/commits/af86b55735bac498756cddd837c3ebec68811122", "html_url": "https://github.com/rust-lang/rust/commit/af86b55735bac498756cddd837c3ebec68811122"}], "stats": {"total": 36, "additions": 22, "deletions": 14}, "files": [{"sha": "5ffc86b4560fc9221a2111dfb530ed26fe1f7549", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=ee3a2c7a8c13004f599ee27c1671713292a33cc5", "patch": "@@ -1443,13 +1443,18 @@ impl<T> JoinHandle<T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}, {"sha": "ea9623be63bc7c578523fd702c8d6af8ce96f7bf", "filename": "library/std/src/thread/scoped.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fscoped.rs?ref=ee3a2c7a8c13004f599ee27c1671713292a33cc5", "patch": "@@ -240,7 +240,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// ```\n     /// #![feature(scoped_threads)]\n-    /// #![feature(thread_is_running)]\n     ///\n     /// use std::thread;\n     ///\n@@ -274,7 +273,6 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n     ///\n     /// ```\n     /// #![feature(scoped_threads)]\n-    /// #![feature(thread_is_running)]\n     ///\n     /// use std::thread;\n     ///\n@@ -289,13 +287,18 @@ impl<'scope, T> ScopedJoinHandle<'scope, T> {\n         self.0.join()\n     }\n \n-    /// Checks if the associated thread is still running its main function.\n+    /// Checks if the associated thread has finished running its main function.\n     ///\n-    /// This might return `false` for a brief moment after the thread's main\n+    /// This might return `true` for a brief moment after the thread's main\n     /// function has returned, but before the thread itself has stopped running.\n+    /// However, once this returns `true`, [`join`][Self::join] can be expected\n+    /// to return quickly, without blocking for any significant amount of time.\n+    ///\n+    /// This function does not block. To block while waiting on the thread to finish,\n+    /// use [`join`][Self::join].\n     #[unstable(feature = \"thread_is_running\", issue = \"90470\")]\n-    pub fn is_running(&self) -> bool {\n-        Arc::strong_count(&self.0.packet) > 1\n+    pub fn is_finished(&self) -> bool {\n+        Arc::strong_count(&self.0.packet) == 1\n     }\n }\n "}, {"sha": "3323ba36bf31091798f939babdc64cb2ae932a6b", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3a2c7a8c13004f599ee27c1671713292a33cc5/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=ee3a2c7a8c13004f599ee27c1671713292a33cc5", "patch": "@@ -52,7 +52,7 @@ fn test_run_basic() {\n }\n \n #[test]\n-fn test_is_running() {\n+fn test_is_finished() {\n     let b = Arc::new(Barrier::new(2));\n     let t = thread::spawn({\n         let b = b.clone();\n@@ -63,14 +63,14 @@ fn test_is_running() {\n     });\n \n     // Thread is definitely running here, since it's still waiting for the barrier.\n-    assert_eq!(t.is_running(), true);\n+    assert_eq!(t.is_finished(), false);\n \n     // Unblock the barrier.\n     b.wait();\n \n-    // Now check that t.is_running() becomes false within a reasonable time.\n+    // Now check that t.is_finished() becomes true within a reasonable time.\n     let start = Instant::now();\n-    while t.is_running() {\n+    while !t.is_finished() {\n         assert!(start.elapsed() < Duration::from_secs(2));\n         thread::sleep(Duration::from_millis(15));\n     }"}]}