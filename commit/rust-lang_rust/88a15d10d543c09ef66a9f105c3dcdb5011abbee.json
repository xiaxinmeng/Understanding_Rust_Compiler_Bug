{"sha": "88a15d10d543c09ef66a9f105c3dcdb5011abbee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YTE1ZDEwZDU0M2MwOWVmNjZhOWYxMDVjM2RjZGI1MDExYWJiZWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-04T17:21:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-05T09:36:38Z"}, "message": "use module_for_source", "tree": {"sha": "773470eb035991ba0e137cc8b863179674d9b94f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773470eb035991ba0e137cc8b863179674d9b94f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88a15d10d543c09ef66a9f105c3dcdb5011abbee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88a15d10d543c09ef66a9f105c3dcdb5011abbee", "html_url": "https://github.com/rust-lang/rust/commit/88a15d10d543c09ef66a9f105c3dcdb5011abbee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88a15d10d543c09ef66a9f105c3dcdb5011abbee/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd878658d3072ee0741cd04c16d330e7d5907f94", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd878658d3072ee0741cd04c16d330e7d5907f94", "html_url": "https://github.com/rust-lang/rust/commit/cd878658d3072ee0741cd04c16d330e7d5907f94"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "766df1d962eda870ce86793280edc504f9bad384", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=88a15d10d543c09ef66a9f105c3dcdb5011abbee", "patch": "@@ -11,7 +11,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n use crate::{\n     db::{self, SyntaxDatabase},\n     descriptors::function::FnScopes,\n-    descriptors::module::{ModuleId, ModuleScope, ModuleTree},\n+    descriptors::module::{ModuleId, ModuleScope, ModuleTree, ModuleSource},\n     descriptors::DescriptorDatabase,\n     input::FilesDatabase,\n     Cancelable, FileId,\n@@ -35,7 +35,7 @@ pub(crate) fn resolve_based_completion(\n     let source_root_id = db.file_source_root(file_id);\n     let file = db.file_syntax(file_id);\n     let module_tree = db.module_tree(source_root_id)?;\n-    let module_id = match module_tree.any_module_for_file(file_id) {\n+    let module_id = match module_tree.any_module_for_source(ModuleSource::File(file_id)) {\n         None => return Ok(None),\n         Some(it) => it,\n     };"}, {"sha": "13bab0087f9896c57030321564efbb169b6c00c5", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=88a15d10d543c09ef66a9f105c3dcdb5011abbee", "patch": "@@ -34,12 +34,8 @@ impl ModuleTree {\n             .collect()\n     }\n \n-    pub(crate) fn modules_for_file(&self, file_id: FileId) -> Vec<ModuleId> {\n-        self.modules_for_source(ModuleSource::File(file_id))\n-    }\n-\n-    pub(crate) fn any_module_for_file(&self, file_id: FileId) -> Option<ModuleId> {\n-        self.modules_for_file(file_id).pop()\n+    pub(crate) fn any_module_for_source(&self, source: ModuleSource) -> Option<ModuleId> {\n+        self.modules_for_source(source).pop()\n     }\n }\n "}, {"sha": "823ac9bdd81656c3520bc5c7b0df422a067e9a8c", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88a15d10d543c09ef66a9f105c3dcdb5011abbee/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=88a15d10d543c09ef66a9f105c3dcdb5011abbee", "patch": "@@ -224,7 +224,7 @@ impl AnalysisImpl {\n         let module_tree = self.module_tree(file_id)?;\n \n         let res = module_tree\n-            .modules_for_file(file_id)\n+            .modules_for_source(ModuleSource::File(file_id))\n             .into_iter()\n             .filter_map(|module_id| {\n                 let link = module_id.parent_link(&module_tree)?;\n@@ -252,7 +252,7 @@ impl AnalysisImpl {\n         let module_tree = self.module_tree(file_id)?;\n         let crate_graph = self.db.crate_graph();\n         let res = module_tree\n-            .modules_for_file(file_id)\n+            .modules_for_source(ModuleSource::File(file_id))\n             .into_iter()\n             .map(|it| it.root(&module_tree))\n             .filter_map(|it| it.source(&module_tree).as_file())\n@@ -376,7 +376,7 @@ impl AnalysisImpl {\n                 fix: None,\n             })\n             .collect::<Vec<_>>();\n-        if let Some(m) = module_tree.any_module_for_file(file_id) {\n+        if let Some(m) = module_tree.any_module_for_source(ModuleSource::File(file_id)) {\n             for (name_node, problem) in m.problems(&module_tree, &*self.db) {\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n@@ -539,7 +539,7 @@ impl AnalysisImpl {\n             Some(name) => name.text(),\n             None => return Vec::new(),\n         };\n-        let module_id = match module_tree.any_module_for_file(file_id) {\n+        let module_id = match module_tree.any_module_for_source(ModuleSource::File(file_id)) {\n             Some(id) => id,\n             None => return Vec::new(),\n         };"}]}