{"sha": "47d125d0f87d83925e2c1506b467b89b5fdefadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3ZDEyNWQwZjg3ZDgzOTI1ZTJjMTUwNmI0NjdiODliNWZkZWZhZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-16T21:45:46Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-16T21:45:46Z"}, "message": "Auto merge of #28436 - ranma42:faster-partialord, r=bluss\n\nThis branch improves the performance of Ord and PartialOrd methods for slices compared to the iter-based implementation.\r\nBased on the approach used in #26884.", "tree": {"sha": "5320c48e01aa837be3f9d09458608ef9ece6beed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5320c48e01aa837be3f9d09458608ef9ece6beed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47d125d0f87d83925e2c1506b467b89b5fdefadf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47d125d0f87d83925e2c1506b467b89b5fdefadf", "html_url": "https://github.com/rust-lang/rust/commit/47d125d0f87d83925e2c1506b467b89b5fdefadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47d125d0f87d83925e2c1506b467b89b5fdefadf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f18c2aaf203e4e428c46c651b34c7a3e4ca91572", "url": "https://api.github.com/repos/rust-lang/rust/commits/f18c2aaf203e4e428c46c651b34c7a3e4ca91572", "html_url": "https://github.com/rust-lang/rust/commit/f18c2aaf203e4e428c46c651b34c7a3e4ca91572"}, {"sha": "74dc146f4296c209bf688d7cddff51eab48e8496", "url": "https://api.github.com/repos/rust-lang/rust/commits/74dc146f4296c209bf688d7cddff51eab48e8496", "html_url": "https://github.com/rust-lang/rust/commit/74dc146f4296c209bf688d7cddff51eab48e8496"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "3344d7ea5d7fc2fcf0ab467607abb45106a097d0", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/47d125d0f87d83925e2c1506b467b89b5fdefadf/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d125d0f87d83925e2c1506b467b89b5fdefadf/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=47d125d0f87d83925e2c1506b467b89b5fdefadf", "patch": "@@ -463,17 +463,33 @@ mod impls {\n         }\n     }\n \n-    partial_ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n+    partial_ord_impl! { f32 f64 }\n \n     macro_rules! ord_impl {\n         ($($t:ty)*) => ($(\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            impl PartialOrd for $t {\n+                #[inline]\n+                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n+                    Some(self.cmp(other))\n+                }\n+                #[inline]\n+                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n+                #[inline]\n+                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n+                #[inline]\n+                fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n+                #[inline]\n+                fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n-                    if *self < *other { Less }\n-                    else if *self > *other { Greater }\n-                    else { Equal }\n+                    if *self == *other { Equal }\n+                    else if *self < *other { Less }\n+                    else { Greater }\n                 }\n             }\n         )*)"}, {"sha": "5518bacb019e880abf82222582875bfe8f66d516", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 30, "deletions": 19, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/47d125d0f87d83925e2c1506b467b89b5fdefadf/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47d125d0f87d83925e2c1506b467b89b5fdefadf/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=47d125d0f87d83925e2c1506b467b89b5fdefadf", "patch": "@@ -1559,30 +1559,41 @@ impl<T: Eq> Eq for [T] {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Ord> Ord for [T] {\n     fn cmp(&self, other: &[T]) -> Ordering {\n-        self.iter().cmp(other.iter())\n+        let l = cmp::min(self.len(), other.len());\n+\n+        // Slice to the loop iteration range to enable bound check\n+        // elimination in the compiler\n+        let lhs = &self[..l];\n+        let rhs = &other[..l];\n+\n+        for i in 0..l {\n+            match lhs[i].cmp(&rhs[i]) {\n+                Ordering::Equal => (),\n+                non_eq => return non_eq,\n+            }\n+        }\n+\n+        self.len().cmp(&other.len())\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: PartialOrd> PartialOrd for [T] {\n-    #[inline]\n     fn partial_cmp(&self, other: &[T]) -> Option<Ordering> {\n-        self.iter().partial_cmp(other.iter())\n-    }\n-    #[inline]\n-    fn lt(&self, other: &[T]) -> bool {\n-        self.iter().lt(other.iter())\n-    }\n-    #[inline]\n-    fn le(&self, other: &[T]) -> bool {\n-        self.iter().le(other.iter())\n-    }\n-    #[inline]\n-    fn ge(&self, other: &[T]) -> bool {\n-        self.iter().ge(other.iter())\n-    }\n-    #[inline]\n-    fn gt(&self, other: &[T]) -> bool {\n-        self.iter().gt(other.iter())\n+        let l = cmp::min(self.len(), other.len());\n+\n+        // Slice to the loop iteration range to enable bound check\n+        // elimination in the compiler\n+        let lhs = &self[..l];\n+        let rhs = &other[..l];\n+\n+        for i in 0..l {\n+            match lhs[i].partial_cmp(&rhs[i]) {\n+                Some(Ordering::Equal) => (),\n+                non_eq => return non_eq,\n+            }\n+        }\n+\n+        self.len().partial_cmp(&other.len())\n     }\n }"}]}