{"sha": "390a13b06c79d4177b829097b06453e38188081f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MGExM2IwNmM3OWQ0MTc3YjgyOTA5N2IwNjQ1M2UzODE4ODA4MWY=", "commit": {"author": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-08-27T21:22:32Z"}, "committer": {"name": "Tim Nielens", "email": "tim.nielens@gmail.com", "date": "2020-09-06T21:06:58Z"}, "message": "needless-lifetime - fix nested elision site FPs", "tree": {"sha": "451d32be6dfd93a874f09f9ce0562c528531d05c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/451d32be6dfd93a874f09f9ce0562c528531d05c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/390a13b06c79d4177b829097b06453e38188081f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/390a13b06c79d4177b829097b06453e38188081f", "html_url": "https://github.com/rust-lang/rust/commit/390a13b06c79d4177b829097b06453e38188081f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/390a13b06c79d4177b829097b06453e38188081f/comments", "author": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tnielens", "id": 11885535, "node_id": "MDQ6VXNlcjExODg1NTM1", "avatar_url": "https://avatars.githubusercontent.com/u/11885535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tnielens", "html_url": "https://github.com/tnielens", "followers_url": "https://api.github.com/users/tnielens/followers", "following_url": "https://api.github.com/users/tnielens/following{/other_user}", "gists_url": "https://api.github.com/users/tnielens/gists{/gist_id}", "starred_url": "https://api.github.com/users/tnielens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tnielens/subscriptions", "organizations_url": "https://api.github.com/users/tnielens/orgs", "repos_url": "https://api.github.com/users/tnielens/repos", "events_url": "https://api.github.com/users/tnielens/events{/privacy}", "received_events_url": "https://api.github.com/users/tnielens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9440cbcde1ccc3cdc76ee796566303fa8be142d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9440cbcde1ccc3cdc76ee796566303fa8be142d", "html_url": "https://github.com/rust-lang/rust/commit/e9440cbcde1ccc3cdc76ee796566303fa8be142d"}], "stats": {"total": 112, "additions": 101, "deletions": 11}, "files": [{"sha": "ab6e34d201c68e268eb84008836b83031d539444", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 65, "deletions": 4, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/390a13b06c79d4177b829097b06453e38188081f/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/390a13b06c79d4177b829097b06453e38188081f/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=390a13b06c79d4177b829097b06453e38188081f", "patch": "@@ -1,21 +1,23 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_param_bound, walk_ty, NestedVisitorMap, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_param_bound, walk_trait_ref, walk_ty, NestedVisitorMap,\n+    Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n     BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty,\n-    TyKind, WhereClause, WherePredicate,\n+    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind,\n+    TraitRef, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n \n-use crate::utils::{in_macro, last_path_segment, span_lint, trait_ref_of_method};\n+use crate::utils::paths;\n+use crate::utils::{get_trait_def_id, in_macro, last_path_segment, span_lint, trait_ref_of_method};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -127,6 +129,14 @@ fn check_fn_inner<'tcx>(\n         return;\n     }\n \n+    // fn pointers and closure trait bounds are also lifetime elision sites. This lint does not\n+    // support nested elision sites in a fn item.\n+    if FnPointerOrClosureTraitBoundFinder::find_in_generics(cx, generics)\n+        || FnPointerOrClosureTraitBoundFinder::find_in_fn_decl(cx, decl)\n+    {\n+        return;\n+    }\n+\n     let mut bounds_lts = Vec::new();\n     let types = generics\n         .params\n@@ -523,3 +533,54 @@ impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n         NestedVisitorMap::None\n     }\n }\n+\n+const CLOSURE_TRAIT_BOUNDS: [&[&str]; 3] = [&paths::FN, &paths::FN_MUT, &paths::FN_ONCE];\n+\n+struct FnPointerOrClosureTraitBoundFinder<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+    found: bool,\n+}\n+\n+impl<'a, 'tcx> FnPointerOrClosureTraitBoundFinder<'a, 'tcx> {\n+    fn find_in_generics(cx: &'a LateContext<'tcx>, generics: &'tcx Generics<'tcx>) -> bool {\n+        let mut finder = Self { cx, found: false };\n+        finder.visit_generics(generics);\n+        finder.found\n+    }\n+\n+    fn find_in_fn_decl(cx: &'a LateContext<'tcx>, generics: &'tcx FnDecl<'tcx>) -> bool {\n+        let mut finder = Self { cx, found: false };\n+        finder.visit_fn_decl(generics);\n+        finder.found\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for FnPointerOrClosureTraitBoundFinder<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_trait_ref(&mut self, tref: &'tcx TraitRef<'tcx>) {\n+        if CLOSURE_TRAIT_BOUNDS\n+            .iter()\n+            .any(|trait_path| tref.trait_def_id() == get_trait_def_id(self.cx, trait_path))\n+        {\n+            self.found = true;\n+        }\n+        walk_trait_ref(self, tref);\n+    }\n+\n+    fn visit_ty(&mut self, ty: &'tcx Ty<'tcx>) {\n+        match ty.kind {\n+            TyKind::BareFn(..) => self.found = true,\n+            TyKind::OpaqueDef(item_id, _) => {\n+                let map = self.cx.tcx.hir();\n+                let item = map.expect_item(item_id.id);\n+                self.visit_item(item);\n+            },\n+            _ => (),\n+        }\n+        walk_ty(self, ty);\n+    }\n+}"}, {"sha": "9837759fd5efe70862e03defeb4580ab4e0c40a5", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/390a13b06c79d4177b829097b06453e38188081f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/390a13b06c79d4177b829097b06453e38188081f/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=390a13b06c79d4177b829097b06453e38188081f", "patch": "@@ -42,6 +42,9 @@ pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FN: [&str; 3] = [\"core\", \"ops\", \"Fn\"];\n+pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n+pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];"}, {"sha": "bc725a645acf9a21b7df532485ecdff3bdac7bf2", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/390a13b06c79d4177b829097b06453e38188081f/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/390a13b06c79d4177b829097b06453e38188081f/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=390a13b06c79d4177b829097b06453e38188081f", "patch": "@@ -259,4 +259,36 @@ mod issue4291 {\n     }\n }\n \n+mod nested_elision_sites {\n+    // Don't lint these cases, they cause FPs.\n+    // The lint does not support nested elision sites.\n+\n+    fn nested_fn_trait_bound<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+        move || i\n+    }\n+\n+    fn nested_fn_mut_trait_bound<'a>(i: &'a i32) -> impl FnMut() -> &'a i32 {\n+        move || i\n+    }\n+\n+    fn nested_fn_once_trait_bound<'a>(i: &'a i32) -> impl FnOnce() -> &'a i32 {\n+        move || i\n+    }\n+\n+    fn nested_generic_fn_trait_bound<'a, T: Fn() -> &'a i32>(f: T) -> &'a i32 {\n+        f()\n+    }\n+\n+    fn nested_where_clause_fn_trait_bound<'a, T>(f: T) -> &'a i32\n+    where\n+        T: Fn() -> &'a i32,\n+    {\n+        f()\n+    }\n+\n+    fn nested_pointer_fn<'a>(_: &'a i32) -> fn(&'a i32) -> &'a i32 {\n+        |i| i\n+    }\n+}\n+\n fn main() {}"}, {"sha": "b1943bf9d703ca3851734ab9f4584a6b8505f1cd", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/390a13b06c79d4177b829097b06453e38188081f/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/390a13b06c79d4177b829097b06453e38188081f/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=390a13b06c79d4177b829097b06453e38188081f", "patch": "@@ -36,12 +36,6 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL | fn lifetime_param_2<'a, 'b>(_x: Ref<'a>, _y: &'b u8) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n-  --> $DIR/needless_lifetimes.rs:86:1\n-   |\n-LL | fn fn_bound_2<'a, F, I>(_m: Lt<'a, I>, _f: F) -> Lt<'a, I>\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n   --> $DIR/needless_lifetimes.rs:120:5\n    |\n@@ -102,5 +96,5 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: aborting due to 16 previous errors\n "}]}