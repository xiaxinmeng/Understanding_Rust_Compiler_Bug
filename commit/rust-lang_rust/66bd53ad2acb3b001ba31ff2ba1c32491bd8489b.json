{"sha": "66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YmQ1M2FkMmFjYjNiMDAxYmEzMWZmMmJhMWMzMjQ5MWJkODQ4OWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-12T20:46:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-12-14T20:54:08Z"}, "message": "Fix rebase\n\nUpdate docs for custom normalization of test output", "tree": {"sha": "e199fcaff9ac96321c72c6c208a497dac6688c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e199fcaff9ac96321c72c6c208a497dac6688c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "html_url": "https://github.com/rust-lang/rust/commit/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3a7d36c6e2da097f705525fc6bf7726360601f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a7d36c6e2da097f705525fc6bf7726360601f5", "html_url": "https://github.com/rust-lang/rust/commit/c3a7d36c6e2da097f705525fc6bf7726360601f5"}], "stats": {"total": 170, "additions": 103, "deletions": 67}, "files": [{"sha": "021f27dacbe0ffff62cc2a1d6b72741614e04ef3", "filename": "src/test/COMPILER_TESTS.md", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2FCOMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2FCOMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2FCOMPILER_TESTS.md?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -133,13 +133,15 @@ Sometimes these built-in normalizations are not enough. In such cases, you\n may provide custom normalization rules using the header commands, e.g.\n \n ```\n-// normalize-stderr-32bit: \"fn() (32 bits)\" -> \"fn() ($PTR bits)\"\n-// normalize-stderr-64bit: \"fn() (64 bits)\" -> \"fn() ($PTR bits)\"\n+// normalize-stdout-test: \"foo\" -> \"bar\"\n+// normalize-stderr-32bit: \"fn\\(\\) \\(32 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n+// normalize-stderr-64bit: \"fn\\(\\) \\(64 bits\\)\" -> \"fn\\(\\) \\($$PTR bits\\)\"\n ```\n \n This tells the test, on 32-bit platforms, whenever the compiler writes\n `fn() (32 bits)` to stderr, it should be normalized to read `fn() ($PTR bits)`\n-instead. Similar for 64-bit.\n+instead. Similar for 64-bit. The replacement is performed by regexes using\n+default regex flavor provided by `regex` crate.\n \n The corresponding reference file will use the normalized output to test both\n 32-bit and 64-bit platforms:\n@@ -156,4 +158,5 @@ Please see `ui/transmute/main.rs` and `.stderr` for a concrete usage example.\n \n Besides `normalize-stderr-32bit` and `-64bit`, one may use any target\n information or stage supported by `ignore-X` here as well (e.g.\n-`normalize-stderr-windows`).\n+`normalize-stderr-windows` or simply `normalize-stderr-test` for unconditional\n+replacement)."}, {"sha": "4211057610bc7ebf60e5ae3f805b330209eda5c2", "filename": "src/test/compile-fail/issue-17954.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17954.rs?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "previous_filename": "src/test/ui/issue-17954.rs"}, {"sha": "98c6ae1b9bcac89d5bc77fd4d777c623bc87d2ef", "filename": "src/test/ui/const-eval-overflow-4.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval-overflow-4.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,3 +1,11 @@\n+warning: constant evaluation error: attempt to add with overflow\n+  --> $DIR/const-eval-overflow-4.rs:23:13\n+   |\n+23 |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n error[E0080]: constant evaluation error\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |"}, {"sha": "0e275e78fc68c83cd9dcc8f3a60d0c597f88949d", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,14 +1,46 @@\n+warning: constant evaluation error: non-constant path in constant expression\n+  --> $DIR/const-fn-error.rs:27:19\n+   |\n+27 |     let a : [i32; f(X)];\n+   |                   ^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n+error[E0016]: blocks in constant functions are limited to items and tail expressions\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+16 |     let mut sum = 0; //~ ERROR blocks in constant functions are limited\n+   |                   ^\n+\n+error[E0015]: calls in constant functions are limited to constant functions, struct and enum constructors\n+  --> $DIR/const-fn-error.rs:17:5\n+   |\n+17 | /     for i in 0..x { //~ ERROR calls in constant functions\n+18 | |     //~| ERROR constant function contains unimplemented\n+19 | |         sum += i;\n+20 | |     }\n+   | |_____^\n+\n+error[E0019]: constant function contains unimplemented expression type\n+  --> $DIR/const-fn-error.rs:17:5\n+   |\n+17 | /     for i in 0..x { //~ ERROR calls in constant functions\n+18 | |     //~| ERROR constant function contains unimplemented\n+19 | |         sum += i;\n+20 | |     }\n+   | |_____^\n+\n error[E0080]: constant evaluation error\n-  --> $DIR/const-fn-error.rs:20:5\n+  --> $DIR/const-fn-error.rs:21:5\n    |\n-20 |     sum //~ ERROR E0080\n+21 |     sum //~ ERROR E0080\n    |     ^^^ non-constant path in constant expression\n    |\n note: for constant expression here\n-  --> $DIR/const-fn-error.rs:26:13\n+  --> $DIR/const-fn-error.rs:27:13\n    |\n-26 |     let a : [i32; f(X)];\n+27 |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n "}, {"sha": "823cc988947cb0aeead65453a554c134dfbf5913", "filename": "src/test/ui/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.rs?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -15,10 +15,8 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n-//~^ ERROR E0080\n-//~| attempt to subtract with overflow\n-//~| NOTE attempt to subtract with overflow\n-//~| NOTE on by default\n+//~^ ERROR constant evaluation error [E0080]\n+//~| WARN attempt to subtract with overflow\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();"}, {"sha": "6e6c2130e1ccd50a831cedaff3f5200ae2e576c7", "filename": "src/test/ui/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-len-underflow-separate-spans.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,3 +1,11 @@\n+warning: constant evaluation error: attempt to subtract with overflow\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:20\n+   |\n+17 | const LEN: usize = ONE - TWO;\n+   |                    ^^^^^^^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n error[E0080]: constant evaluation error\n   --> $DIR/const-len-underflow-separate-spans.rs:17:20\n    |"}, {"sha": "2ee4a66882ba91cfc083204147cf97979ff2c48b", "filename": "src/test/ui/issue-17954.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c3a7d36c6e2da097f705525fc6bf7726360601f5/src%2Ftest%2Fui%2Fissue-17954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c3a7d36c6e2da097f705525fc6bf7726360601f5/src%2Ftest%2Fui%2Fissue-17954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17954.stderr?ref=c3a7d36c6e2da097f705525fc6bf7726360601f5", "patch": "@@ -1,13 +0,0 @@\n-error[E0597]: borrowed value does not live long enough\n-  --> $DIR/issue-17954.rs:17:14\n-   |\n-17 |     let a = &FOO;\n-   |              ^^^ does not live long enough\n-...\n-24 | } //~ temporary value only lives until here\n-   | - temporary value only lives until here\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to previous error\n-"}, {"sha": "1cd899925caa54d212fd2b2ae3f7996a1bb54c52", "filename": "src/test/ui/issue-18819.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-18819.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-18819.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-18819.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,13 +1,11 @@\n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/issue-18819.rs:26:13\n+  --> $DIR/issue-18819.rs:26:5\n    |\n-21 | / fn print_x(_: &Foo<Item=bool>, extra: &str) {\n-22 | |     println!(\"{}\", extra);\n-23 | | }\n-   | |_- defined here\n+21 | fn print_x(_: &Foo<Item=bool>, extra: &str) {\n+   | ------------------------------------------- defined here\n ...\n-26 |       print_x(X);\n-   |               ^ expected 2 parameters\n+26 |     print_x(X);\n+   |     ^^^^^^^^^^ expected 2 parameters\n \n error: aborting due to previous error\n "}, {"sha": "64f70ef2b6fdcdc9a6fa15050ae08f1e88449d23", "filename": "src/test/ui/issue-30255.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-30255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-30255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30255.rs?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -30,3 +30,4 @@ fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n     panic!();\n }\n \n+fn main() {}"}, {"sha": "14f2d5195d60c54d812306f7ee304eb9302db416", "filename": "src/test/ui/issue-3044.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-3044.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-3044.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-3044.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,10 +1,8 @@\n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/issue-3044.rs:14:28\n+  --> $DIR/issue-3044.rs:14:23\n    |\n-14 |       needlesArr.iter().fold(|x, y| {\n-   |  ____________________________^\n-15 | |     });\n-   | |_____^ expected 2 parameters\n+14 |     needlesArr.iter().fold(|x, y| {\n+   |                       ^^^^ expected 2 parameters\n \n error: aborting due to previous error\n "}, {"sha": "654fe53c07f10a1a96c7e816c88e4057fd7840c7", "filename": "src/test/ui/issue-4935.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-4935.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fissue-4935.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4935.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,11 +1,11 @@\n error[E0061]: this function takes 1 parameter but 2 parameters were supplied\n-  --> $DIR/issue-4935.rs:15:17\n+  --> $DIR/issue-4935.rs:15:13\n    |\n 13 | fn foo(a: usize) {}\n-   | ------------------- defined here\n+   | ---------------- defined here\n 14 | //~^ defined here\n 15 | fn main() { foo(5, 6) }\n-   |                 ^^^^ expected 1 parameter\n+   |             ^^^^^^^^^ expected 1 parameter\n \n error: aborting due to previous error\n "}, {"sha": "8685d0fc9c134fc7ac9268ad36ce97357fcf6d33", "filename": "src/test/ui/method-call-err-msg.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethod-call-err-msg.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,28 +1,28 @@\n error[E0061]: this function takes 0 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:25:7\n+  --> $DIR/method-call-err-msg.rs:22:7\n    |\n 15 |     fn zero(self) -> Foo { self }\n    |     -------------------- defined here\n ...\n-25 |     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n+22 |     x.zero(0)   //~ ERROR this function takes 0 parameters but 1 parameter was supplied\n    |       ^^^^ expected 0 parameters\n \n error[E0061]: this function takes 1 parameter but 0 parameters were supplied\n   --> $DIR/method-call-err-msg.rs:23:7\n    |\n-17 |     fn one(self, _: isize) -> Foo { self }\n+16 |     fn one(self, _: isize) -> Foo { self }\n    |     ----------------------------- defined here\n ...\n 23 |      .one()     //~ ERROR this function takes 1 parameter but 0 parameters were supplied\n    |       ^^^ expected 1 parameter\n \n error[E0061]: this function takes 2 parameters but 1 parameter was supplied\n-  --> $DIR/method-call-err-msg.rs:29:7\n+  --> $DIR/method-call-err-msg.rs:24:7\n    |\n-19 |     fn two(self, _: isize, _: isize) -> Foo { self }\n+17 |     fn two(self, _: isize, _: isize) -> Foo { self }\n    |     --------------------------------------- defined here\n ...\n-29 |      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n+24 |      .two(0);   //~ ERROR this function takes 2 parameters but 1 parameter was supplied\n    |       ^^^ expected 2 parameters\n \n error[E0599]: no method named `take` found for type `Foo` in the current scope"}, {"sha": "2b797ef7681c4857be824fcde879f8e3470e3137", "filename": "src/test/ui/mismatched_types/fn-variance-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.rs?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -9,10 +9,8 @@\n // except according to those terms.\n \n fn takes_imm(x: &isize) { }\n-//~^ NOTE found signature\n \n fn takes_mut(x: &mut isize) { }\n-//~^ NOTE found signature\n \n fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n     f(t)"}, {"sha": "2a27ffd1062473fcc9b5a89439862d2754e9d53e", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,21 +1,21 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:23:5\n+  --> $DIR/fn-variance-1.rs:21:5\n    |\n-14 | fn takes_mut(x: &mut isize) { }\n+13 | fn takes_mut(x: &mut isize) { }\n    | --------------------------- found signature of `for<'r> fn(&'r mut isize) -> _`\n ...\n-23 |     apply(&3, takes_mut);\n+21 |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n    = note: required by `apply`\n \n error[E0631]: type mismatch in function arguments\n-  --> $DIR/fn-variance-1.rs:29:5\n+  --> $DIR/fn-variance-1.rs:25:5\n    |\n 11 | fn takes_imm(x: &isize) { }\n    | ----------------------- found signature of `for<'r> fn(&'r isize) -> _`\n ...\n-29 |     apply(&mut 3, takes_imm);\n+25 |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n    = note: required by `apply`"}, {"sha": "1d4adc7d6d5fd5def1d48547829e1994aa2562f0", "filename": "src/test/ui/mismatched_types/overloaded-calls-bad.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Foverloaded-calls-bad.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -14,9 +14,9 @@ error[E0057]: this function takes 1 parameter but 0 parameters were supplied\n    |               ^^^ expected 1 parameter\n \n error[E0057]: this function takes 1 parameter but 2 parameters were supplied\n-  --> $DIR/overloaded-calls-bad.rs:44:15\n+  --> $DIR/overloaded-calls-bad.rs:41:15\n    |\n-44 |     let ans = s(\"burma\", \"shave\");\n+41 |     let ans = s(\"burma\", \"shave\");\n    |               ^^^^^^^^^^^^^^^^^^^ expected 1 parameter\n \n error: aborting due to 3 previous errors"}, {"sha": "8539c8818c025ed161eeb21b3f66d9001dc81209", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -3,8 +3,7 @@ error[E0631]: type mismatch in closure arguments\n    |\n 22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-23 |     //~^ NOTE found signature of `fn(usize, isize)\n-24 |     let z = call_it(3, f);\n+23 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n    = note: required by `call_it`"}, {"sha": "291aa6ec4c1149d2496533cfd8ce29443d226634", "filename": "src/test/ui/not-enough-arguments.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-enough-arguments.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,13 +1,11 @@\n error[E0061]: this function takes 4 parameters but 3 parameters were supplied\n-  --> $DIR/not-enough-arguments.rs:20:7\n+  --> $DIR/not-enough-arguments.rs:20:3\n    |\n-15 | / fn foo(a: isize, b: isize, c: isize, d:isize) {\n-16 | |   panic!();\n-17 | | }\n-   | |_- defined here\n+15 | fn foo(a: isize, b: isize, c: isize, d:isize) {\n+   | --------------------------------------------- defined here\n ...\n-20 |     foo(1, 2, 3);\n-   |         ^^^^^^^ expected 4 parameters\n+20 |   foo(1, 2, 3);\n+   |   ^^^^^^^^^^^^ expected 4 parameters\n \n error: aborting due to previous error\n "}, {"sha": "3c98b5cdc6cdc9c76524d07187ba354e41cfc945", "filename": "src/test/ui/union/union-const-eval.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-const-eval.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -1,3 +1,11 @@\n+warning: constant evaluation error: nonexistent struct field\n+  --> $DIR/union-const-eval.rs:21:21\n+   |\n+21 |         let b: [u8; C.b]; //~ ERROR constant evaluation error\n+   |                     ^^^\n+   |\n+   = note: #[warn(const_err)] on by default\n+\n error[E0080]: constant evaluation error\n   --> $DIR/union-const-eval.rs:21:21\n    |"}, {"sha": "be158c1e398965d1c88ba379e21c08aae6ba135a", "filename": "src/test/ui/variadic-ffi-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/66bd53ad2acb3b001ba31ff2ba1c32491bd8489b/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariadic-ffi-3.stderr?ref=66bd53ad2acb3b001ba31ff2ba1c32491bd8489b", "patch": "@@ -8,13 +8,13 @@ error[E0060]: this function takes at least 2 parameters but 0 parameters were su\n    |         ^^^^^ expected at least 2 parameters\n \n error[E0060]: this function takes at least 2 parameters but 1 parameter was supplied\n-  --> $DIR/variadic-ffi-3.rs:22:13\n+  --> $DIR/variadic-ffi-3.rs:22:9\n    |\n 12 |     fn foo(f: isize, x: u8, ...);\n    |     ----------------------------- defined here\n ...\n 22 |         foo(1); //~ ERROR: this function takes at least 2 parameters but 1 parameter was supplied\n-   |             ^ expected at least 2 parameters\n+   |         ^^^^^^ expected at least 2 parameters\n \n error[E0308]: mismatched types\n   --> $DIR/variadic-ffi-3.rs:24:56"}]}