{"sha": "5bad9175fb363917ffee2c2da7223e96daa2f5ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViYWQ5MTc1ZmIzNjM5MTdmZmVlMmMyZGE3MjIzZTk2ZGFhMmY1YWM=", "commit": {"author": {"name": "Bruno BELANYI", "email": "bruno@belanyi.fr", "date": "2020-10-07T09:37:32Z"}, "committer": {"name": "Bruno BELANYI", "email": "bruno@belanyi.fr", "date": "2020-10-07T09:48:06Z"}, "message": "New lint: Recommend using `ptr::eq` when possible\n\nThis is based almost entirely on the code available in the previous PR #4596.", "tree": {"sha": "b2f67790721abea61860d6b427381ffd68fad02b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2f67790721abea61860d6b427381ffd68fad02b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bad9175fb363917ffee2c2da7223e96daa2f5ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bad9175fb363917ffee2c2da7223e96daa2f5ac", "html_url": "https://github.com/rust-lang/rust/commit/5bad9175fb363917ffee2c2da7223e96daa2f5ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bad9175fb363917ffee2c2da7223e96daa2f5ac/comments", "author": {"login": "ambroisie", "id": 12465195, "node_id": "MDQ6VXNlcjEyNDY1MTk1", "avatar_url": "https://avatars.githubusercontent.com/u/12465195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ambroisie", "html_url": "https://github.com/ambroisie", "followers_url": "https://api.github.com/users/ambroisie/followers", "following_url": "https://api.github.com/users/ambroisie/following{/other_user}", "gists_url": "https://api.github.com/users/ambroisie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ambroisie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ambroisie/subscriptions", "organizations_url": "https://api.github.com/users/ambroisie/orgs", "repos_url": "https://api.github.com/users/ambroisie/repos", "events_url": "https://api.github.com/users/ambroisie/events{/privacy}", "received_events_url": "https://api.github.com/users/ambroisie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ambroisie", "id": 12465195, "node_id": "MDQ6VXNlcjEyNDY1MTk1", "avatar_url": "https://avatars.githubusercontent.com/u/12465195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ambroisie", "html_url": "https://github.com/ambroisie", "followers_url": "https://api.github.com/users/ambroisie/followers", "following_url": "https://api.github.com/users/ambroisie/following{/other_user}", "gists_url": "https://api.github.com/users/ambroisie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ambroisie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ambroisie/subscriptions", "organizations_url": "https://api.github.com/users/ambroisie/orgs", "repos_url": "https://api.github.com/users/ambroisie/repos", "events_url": "https://api.github.com/users/ambroisie/events{/privacy}", "received_events_url": "https://api.github.com/users/ambroisie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "277191890b60b28790d2d100191d6bc3d8975920", "url": "https://api.github.com/repos/rust-lang/rust/commits/277191890b60b28790d2d100191d6bc3d8975920", "html_url": "https://github.com/rust-lang/rust/commit/277191890b60b28790d2d100191d6bc3d8975920"}], "stats": {"total": 193, "additions": 193, "deletions": 0}, "files": [{"sha": "d11eeff80323d655040074fa1325716e3cf6efa4", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bad9175fb363917ffee2c2da7223e96daa2f5ac/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bad9175fb363917ffee2c2da7223e96daa2f5ac/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=5bad9175fb363917ffee2c2da7223e96daa2f5ac", "patch": "@@ -281,6 +281,7 @@ mod path_buf_push_overwrite;\n mod pattern_type_mismatch;\n mod precedence;\n mod ptr;\n+mod ptr_eq;\n mod ptr_offset_with_cast;\n mod question_mark;\n mod ranges;\n@@ -778,6 +779,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &ptr::CMP_NULL,\n         &ptr::MUT_FROM_REF,\n         &ptr::PTR_ARG,\n+        &ptr_eq::PTR_EQ,\n         &ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n         &question_mark::QUESTION_MARK,\n         &ranges::RANGE_MINUS_ONE,\n@@ -916,6 +918,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n     store.register_late_pass(|| box ptr::Ptr);\n+    store.register_late_pass(|| box ptr_eq::PtrEq);\n     store.register_late_pass(|| box needless_bool::NeedlessBool);\n     store.register_late_pass(|| box needless_bool::BoolComparison);\n     store.register_late_pass(|| box approx_const::ApproxConstant);\n@@ -1456,6 +1459,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&ptr::CMP_NULL),\n         LintId::of(&ptr::MUT_FROM_REF),\n         LintId::of(&ptr::PTR_ARG),\n+        LintId::of(&ptr_eq::PTR_EQ),\n         LintId::of(&ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&ranges::RANGE_ZIP_WITH_LEN),\n@@ -1612,6 +1616,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&panic_unimplemented::PANIC_PARAMS),\n         LintId::of(&ptr::CMP_NULL),\n         LintId::of(&ptr::PTR_ARG),\n+        LintId::of(&ptr_eq::PTR_EQ),\n         LintId::of(&question_mark::QUESTION_MARK),\n         LintId::of(&redundant_field_names::REDUNDANT_FIELD_NAMES),\n         LintId::of(&redundant_static_lifetimes::REDUNDANT_STATIC_LIFETIMES),"}, {"sha": "a05cb6270b762174d15521e541a970b801040d5f", "filename": "clippy_lints/src/ptr_eq.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/5bad9175fb363917ffee2c2da7223e96daa2f5ac/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bad9175fb363917ffee2c2da7223e96daa2f5ac/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=5bad9175fb363917ffee2c2da7223e96daa2f5ac", "patch": "@@ -0,0 +1,96 @@\n+use crate::utils;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Use `std::ptr::eq` when applicable\n+    ///\n+    /// **Why is this bad?**`ptr::eq` can be used to compare `&T` references\n+    /// (which coerce to `*const T` implicitly) by their address rather than\n+    /// comparing the values they point to.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// let a = &[1, 2, 3];\n+    /// let b = &[1, 2, 3];\n+    ///\n+    /// assert!(a as *const _ as usize == b as *const _ as usize);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = &[1, 2, 3];\n+    /// let b = &[1, 2, 3];\n+    ///\n+    /// assert!(std::ptr::eq(a, b));\n+    /// ```\n+    pub PTR_EQ,\n+    style,\n+    \"use `std::ptr::eq` when comparing raw pointers\"\n+}\n+\n+declare_lint_pass!(PtrEq => [PTR_EQ]);\n+\n+static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n+\n+impl LateLintPass<'_> for PtrEq {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if utils::in_macro(expr.span) {\n+            return;\n+        }\n+\n+        if let ExprKind::Binary(ref op, ref left, ref right) = expr.kind {\n+            if BinOpKind::Eq == op.node {\n+                let (left, right) = match (expr_as_cast_to_usize(cx, left), expr_as_cast_to_usize(cx, right)) {\n+                    (Some(lhs), Some(rhs)) => (lhs, rhs),\n+                    _ => (&**left, &**right),\n+                };\n+\n+                if_chain! {\n+                    if let Some(left_var) = expr_as_cast_to_raw_pointer(cx, left);\n+                    if let Some(right_var) = expr_as_cast_to_raw_pointer(cx, right);\n+                    if let Some(left_snip) = utils::snippet_opt(cx, left_var.span);\n+                    if let Some(right_snip) = utils::snippet_opt(cx, right_var.span);\n+                    then {\n+                        utils::span_lint_and_sugg(\n+                            cx,\n+                            PTR_EQ,\n+                            expr.span,\n+                            LINT_MSG,\n+                            \"try\",\n+                            format!(\"std::ptr::eq({}, {})\", left_snip, right_snip),\n+                            Applicability::MachineApplicable,\n+                            );\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+// If the given expression is a cast to an usize, return the lhs of the cast\n+// E.g., `foo as *const _ as usize` returns `foo as *const _`.\n+fn expr_as_cast_to_usize<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if cx.typeck_results().expr_ty(cast_expr) == cx.tcx.types.usize {\n+        if let ExprKind::Cast(ref expr, _) = cast_expr.kind {\n+            return Some(expr);\n+        }\n+    }\n+    None\n+}\n+\n+// If the given expression is a cast to a `*const` pointer, return the lhs of the cast\n+// E.g., `foo as *const _` returns `foo`.\n+fn expr_as_cast_to_raw_pointer<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if cx.typeck_results().expr_ty(cast_expr).is_unsafe_ptr() {\n+        if let ExprKind::Cast(ref expr, _) = cast_expr.kind {\n+            return Some(expr);\n+        }\n+    }\n+    None\n+}"}, {"sha": "209081e6e8011b6fb5c7bcd4b9c915d7624f8544", "filename": "tests/ui/ptr_eq.fixed", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_eq.fixed?ref=5bad9175fb363917ffee2c2da7223e96daa2f5ac", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+#![warn(clippy::ptr_eq)]\n+\n+macro_rules! mac {\n+    ($a:expr, $b:expr) => {\n+        $a as *const _ as usize == $b as *const _ as usize\n+    };\n+}\n+\n+macro_rules! another_mac {\n+    ($a:expr, $b:expr) => {\n+        $a as *const _ == $b as *const _\n+    };\n+}\n+\n+fn main() {\n+    let a = &[1, 2, 3];\n+    let b = &[1, 2, 3];\n+\n+    let _ = std::ptr::eq(a, b);\n+    let _ = std::ptr::eq(a, b);\n+    let _ = a.as_ptr() == b as *const _;\n+    let _ = a.as_ptr() == b.as_ptr();\n+\n+    // Do not lint\n+\n+    let _ = mac!(a, b);\n+    let _ = another_mac!(a, b);\n+\n+    let a = &mut [1, 2, 3];\n+    let b = &mut [1, 2, 3];\n+\n+    let _ = a.as_mut_ptr() == b as *mut [i32] as *mut _;\n+    let _ = a.as_mut_ptr() == b.as_mut_ptr();\n+\n+    let _ = a == b;\n+    let _ = core::ptr::eq(a, b);\n+}"}, {"sha": "69162870807a2c9665de1016e102c9eaf4263a55", "filename": "tests/ui/ptr_eq.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_eq.rs?ref=5bad9175fb363917ffee2c2da7223e96daa2f5ac", "patch": "@@ -0,0 +1,38 @@\n+// run-rustfix\n+#![warn(clippy::ptr_eq)]\n+\n+macro_rules! mac {\n+    ($a:expr, $b:expr) => {\n+        $a as *const _ as usize == $b as *const _ as usize\n+    };\n+}\n+\n+macro_rules! another_mac {\n+    ($a:expr, $b:expr) => {\n+        $a as *const _ == $b as *const _\n+    };\n+}\n+\n+fn main() {\n+    let a = &[1, 2, 3];\n+    let b = &[1, 2, 3];\n+\n+    let _ = a as *const _ as usize == b as *const _ as usize;\n+    let _ = a as *const _ == b as *const _;\n+    let _ = a.as_ptr() == b as *const _;\n+    let _ = a.as_ptr() == b.as_ptr();\n+\n+    // Do not lint\n+\n+    let _ = mac!(a, b);\n+    let _ = another_mac!(a, b);\n+\n+    let a = &mut [1, 2, 3];\n+    let b = &mut [1, 2, 3];\n+\n+    let _ = a.as_mut_ptr() == b as *mut [i32] as *mut _;\n+    let _ = a.as_mut_ptr() == b.as_mut_ptr();\n+\n+    let _ = a == b;\n+    let _ = core::ptr::eq(a, b);\n+}"}, {"sha": "45d8c60382b59829048fe8dc5fcfe811307b94b1", "filename": "tests/ui/ptr_eq.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bad9175fb363917ffee2c2da7223e96daa2f5ac/tests%2Fui%2Fptr_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fptr_eq.stderr?ref=5bad9175fb363917ffee2c2da7223e96daa2f5ac", "patch": "@@ -0,0 +1,16 @@\n+error: use `std::ptr::eq` when comparing raw pointers\n+  --> $DIR/ptr_eq.rs:20:13\n+   |\n+LL |     let _ = a as *const _ as usize == b as *const _ as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::eq(a, b)`\n+   |\n+   = note: `-D clippy::ptr-eq` implied by `-D warnings`\n+\n+error: use `std::ptr::eq` when comparing raw pointers\n+  --> $DIR/ptr_eq.rs:21:13\n+   |\n+LL |     let _ = a as *const _ == b as *const _;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::eq(a, b)`\n+\n+error: aborting due to 2 previous errors\n+"}]}