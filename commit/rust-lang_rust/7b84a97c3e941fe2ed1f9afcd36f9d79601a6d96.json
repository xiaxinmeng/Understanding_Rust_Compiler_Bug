{"sha": "7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "node_id": "C_kwDOAAsO6NoAKDdiODRhOTdjM2U5NDFmZTJlZDFmOWFmY2QzNmY5ZDc5NjAxYTZkOTY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-11T19:25:25Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-11T22:16:27Z"}, "message": "Make `ExprKind::Closure` a struct variant.", "tree": {"sha": "26fcc2f623fd43948db6829189cd3af1f5d581f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26fcc2f623fd43948db6829189cd3af1f5d581f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "html_url": "https://github.com/rust-lang/rust/commit/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e34621c24ee3e5dd9b060d04633ec4ee5f47fe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/e34621c24ee3e5dd9b060d04633ec4ee5f47fe40", "html_url": "https://github.com/rust-lang/rust/commit/e34621c24ee3e5dd9b060d04633ec4ee5f47fe40"}], "stats": {"total": 210, "additions": 112, "deletions": 98}, "files": [{"sha": "4b3a04f1255b99465e041ebe27e87bf7538e0b85", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -51,7 +51,7 @@ struct ExVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n-        if let ExprKind::Closure(_, _, eid, _, _) = expr.kind {\n+        if let ExprKind::Closure { body, .. } = expr.kind {\n             // do not lint if the closure is called using an iterator (see #1141)\n             if_chain! {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n@@ -64,7 +64,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            let body = self.cx.tcx.hir().body(eid);\n+            let body = self.cx.tcx.hir().body(body);\n             let ex = &body.value;\n             if let ExprKind::Block(block, _) = ex.kind {\n                 if !body.value.span.from_expansion() && !block.stmts.is_empty() {"}, {"sha": "4e530256321ccbf764449f59c8202dff46210a59", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -51,8 +51,8 @@ impl<'tcx> LateLintPass<'tcx> for ByteCount {\n             if count.ident.name == sym::count;\n             if let ExprKind::MethodCall(filter, [filter_recv, filter_arg], _) = count_recv.kind;\n             if filter.ident.name == sym!(filter);\n-            if let ExprKind::Closure(_, _, body_id, _, _) = filter_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = filter_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let [param] = body.params;\n             if let PatKind::Binding(_, arg_id, _, _) = strip_pat_refs(param.pat).kind;\n             if let ExprKind::Binary(ref op, l, r) = body.value.kind;"}, {"sha": "527529965a96fc4d8f43df63cc7cfa634fd6e15c", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -498,7 +498,7 @@ fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId,\n         | ExprKind::Loop(..)\n         | ExprKind::Match(..)\n         | ExprKind::Let(..)\n-        | ExprKind::Closure(..)\n+        | ExprKind::Closure{..}\n         | ExprKind::Block(..)\n         | ExprKind::Assign(..)\n         | ExprKind::AssignOp(..)"}, {"sha": "197cac86a57d6d1772c2f44ef50d4cc4dcc2924a", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -78,7 +78,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n             return;\n         }\n         let body = match expr.kind {\n-            ExprKind::Closure(_, _, id, _, _) => cx.tcx.hir().body(id),\n+            ExprKind::Closure { body, .. } => cx.tcx.hir().body(body),\n             _ => return,\n         };\n         if body.value.span.from_expansion() {"}, {"sha": "41e1fc4e3c209e6ae15dd4aee4ccedd0f966b885", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -158,8 +158,8 @@ fn is_infinite(cx: &LateContext<'_>, expr: &Expr<'_>) -> Finiteness {\n                 }\n             }\n             if method.ident.name == sym!(flat_map) && args.len() == 2 {\n-                if let ExprKind::Closure(_, _, body_id, _, _) = args[1].kind {\n-                    let body = cx.tcx.hir().body(body_id);\n+                if let ExprKind::Closure { body, .. } = args[1].kind {\n+                    let body = cx.tcx.hir().body(body);\n                     return is_infinite(cx, &body.value);\n                 }\n             }"}, {"sha": "0b6d9adb553e48f0baa6594fc3c0256ad3b43b6c", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -369,8 +369,8 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n                     self.visit_expr(expr);\n                 }\n             },\n-            ExprKind::Closure(_, _, body_id, ..) => {\n-                let body = self.cx.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.cx.tcx.hir().body(body);\n                 self.visit_expr(&body.value);\n             },\n             _ => walk_expr(self, expr),"}, {"sha": "99d214669359532d83c2e4bc56c42d8c34082f60", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -182,7 +182,7 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)\n         | ExprKind::Yield(_, _)\n-        | ExprKind::Closure(_, _, _, _, _)\n+        | ExprKind::Closure { .. }\n         | ExprKind::Path(_)\n         | ExprKind::ConstBlock(_)\n         | ExprKind::Lit(_)"}, {"sha": "a57159750664fc0eafe052a1fc21724049d4bd0e", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -220,7 +220,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n                 if let Some(e) = e {\n                     self.visit_expr(e);\n                 }\n-            } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+            } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                 if is_res_used(self.cx, self.iter_expr.path, id) {\n                     self.uses_iter = true;\n                 }\n@@ -260,7 +260,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_iter = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);\n@@ -307,7 +307,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n                     if let Some(e) = e {\n                         self.visit_expr(e);\n                     }\n-                } else if let ExprKind::Closure(_, _, id, _, _) = e.kind {\n+                } else if let ExprKind::Closure { body: id, .. } = e.kind {\n                     self.used_after = is_res_used(self.cx, self.iter_expr.path, id);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "818410d2793737740064c6a1b09efe4f6cd6f67b", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -177,8 +177,8 @@ fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>)\n         if let Some(block_expr) = block.expr;\n         if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n         if args.len() == 1;\n-        if let Expr{kind: ExprKind::Closure(_, _, body_id, ..), ..} = args[0];\n-        let closure_body = cx.tcx.hir().body(body_id);\n+        if let Expr{kind: ExprKind::Closure { body, .. }, ..} = args[0];\n+        let closure_body = cx.tcx.hir().body(body);\n         if closure_body.generator_kind == Some(GeneratorKind::Async(AsyncGeneratorKind::Block));\n         then {\n             return Some(closure_body);"}, {"sha": "18cfd00376784448e76e91e9272be76f931fbb33", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -88,8 +88,8 @@ fn is_ok_wrapping(cx: &LateContext<'_>, map_expr: &Expr<'_>) -> bool {\n         }\n     }\n     if_chain! {\n-        if let ExprKind::Closure(_, _, body_id, ..) = map_expr.kind;\n-        let body = cx.tcx.hir().body(body_id);\n+        if let ExprKind::Closure { body, .. } = map_expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         if let PatKind::Binding(_, param_id, ..) = body.params[0].pat.kind;\n         if let ExprKind::Call(Expr { kind: ExprKind::Path(ok_path), .. }, &[ref ok_arg]) = body.value.kind;\n         if is_lang_ctor(cx, ok_path, ResultOk);"}, {"sha": "3533de54a1e3d4e140caa0ddcaaba159f0a14d30", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -67,9 +67,9 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n             if is_type_diagnostic_item(cx, ty, sym::Option) || is_trait_method(cx, e, sym::Iterator);\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n+            if let hir::ExprKind::Closure { body, .. } = args[1].kind;\n             then {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n                 match closure_body.params[0].pat.kind {\n                     hir::PatKind::Ref(inner, hir::Mutability::Not) => if let hir::PatKind::Binding("}, {"sha": "0c22144104872bd345b4f567cc483d4efb98e356", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -117,12 +117,19 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n             // only work if the method name is `map_err` and there are only 2 arguments (e.g. x.map_err(|_|[1]\n             // Enum::Variant[2]))\n             if method.ident.as_str() == \"map_err\" && args.len() == 2 {\n-                // make sure the first argument is a closure, and grab the CaptureRef, body_id, and body_span fields\n-                if let ExprKind::Closure(capture, _, body_id, body_span, _) = args[1].kind {\n+                // make sure the first argument is a closure, and grab the CaptureRef, BodyId, and fn_decl_span\n+                // fields\n+                if let ExprKind::Closure {\n+                    capture_clause,\n+                    body,\n+                    fn_decl_span,\n+                    ..\n+                } = args[1].kind\n+                {\n                     // check if this is by Reference (meaning there's no move statement)\n-                    if capture == CaptureBy::Ref {\n+                    if capture_clause == CaptureBy::Ref {\n                         // Get the closure body to check the parameters and values\n-                        let closure_body = cx.tcx.hir().body(body_id);\n+                        let closure_body = cx.tcx.hir().body(body);\n                         // make sure there's only one parameter (`|_|`)\n                         if closure_body.params.len() == 1 {\n                             // make sure that parameter is the wild token (`_`)\n@@ -132,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for MapErrIgnore {\n                                 span_lint_and_help(\n                                     cx,\n                                     MAP_ERR_IGNORE,\n-                                    body_span,\n+                                    fn_decl_span,\n                                     \"`map_err(|_|...` wildcard pattern discards the original error\",\n                                     None,\n                                     \"consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)\","}, {"sha": "663246b4c8622f69a9ff4f4399eed77b31215d24", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -169,12 +169,12 @@ fn unit_closure<'tcx>(\n     expr: &hir::Expr<'_>,\n ) -> Option<(&'tcx hir::Param<'tcx>, &'tcx hir::Expr<'tcx>)> {\n     if_chain! {\n-        if let hir::ExprKind::Closure(_, decl, inner_expr_id, _, _) = expr.kind;\n-        let body = cx.tcx.hir().body(inner_expr_id);\n+        if let hir::ExprKind::Closure { fn_decl, body, .. } = expr.kind;\n+        let body = cx.tcx.hir().body(body);\n         let body_expr = &body.value;\n-        if decl.inputs.len() == 1;\n+        if fn_decl.inputs.len() == 1;\n         if is_unit_expression(cx, body_expr);\n-        if let Some(binding) = iter_input_pats(decl, body).next();\n+        if let Some(binding) = iter_input_pats(fn_decl, body).next();\n         then {\n             return Some((binding, body_expr));\n         }"}, {"sha": "9df2db45dcf834eb5c6a3a186c8c9c6026286c4e", "filename": "clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -177,7 +177,7 @@ fn sugg_with_curlies<'a>(\n \n     let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n     if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n-        if let ExprKind::Closure(..) = parent_expr.kind {\n+        if let ExprKind::Closure { .. } = parent_expr.kind {\n             cbrace_end = format!(\"\\n{}}}\", indent);\n             // Fix body indent due to the closure\n             indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));"}, {"sha": "dcaf6f865de3677d78bb18a2164863f8c178650d", "filename": "clippy_lints/src/matches/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsignificant_drop_in_scrutinee.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -305,7 +305,7 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n             ExprKind::Break(_, _) |\n             ExprKind::Cast(_, _) |\n             // Don't want to check the closure itself, only invocation, which is covered by MethodCall\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure { .. } |\n             ExprKind::ConstBlock(_) |\n             ExprKind::Continue(_) |\n             ExprKind::DropTemps(_) |"}, {"sha": "d31b736982b34715f308e2d9f6d72f8f0d6ca1cb", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -150,11 +150,11 @@ pub(crate) trait BindInsteadOfMap {\n         }\n \n         match arg.kind {\n-            hir::ExprKind::Closure(_, _, body_id, closure_args_span, _) => {\n-                let closure_body = cx.tcx.hir().body(body_id);\n+            hir::ExprKind::Closure { body, fn_decl_span, .. } => {\n+                let closure_body = cx.tcx.hir().body(body);\n                 let closure_expr = peel_blocks(&closure_body.value);\n \n-                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, closure_args_span) {\n+                if Self::lint_closure_autofixable(cx, expr, recv, closure_expr, fn_decl_span) {\n                     true\n                 } else {\n                     Self::lint_closure(cx, expr, closure_expr)"}, {"sha": "3efccd703a651e874f39303271f290347bb70a10", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -22,8 +22,8 @@ fn is_method<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Sy\n         hir::ExprKind::Path(QPath::Resolved(_, segments)) => {\n             segments.segments.last().unwrap().ident.name == method_name\n         },\n-        hir::ExprKind::Closure(_, _, c, _, _) => {\n-            let body = cx.tcx.hir().body(*c);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let body = cx.tcx.hir().body(*body);\n             let closure_expr = peel_blocks(&body.value);\n             let arg_id = body.params[0].pat.hir_id;\n             match closure_expr.kind {\n@@ -106,7 +106,7 @@ pub(super) fn check<'tcx>(\n             if is_trait_method(cx, map_recv, sym::Iterator);\n \n             // filter(|x| ...is_some())...\n-            if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;\n+            if let ExprKind::Closure { body: filter_body_id, .. } = filter_arg.kind;\n             let filter_body = cx.tcx.hir().body(filter_body_id);\n             if let [filter_param] = filter_body.params;\n             // optional ref pattern: `filter(|&x| ..)`\n@@ -129,7 +129,7 @@ pub(super) fn check<'tcx>(\n             if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n \n             // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure(_, _, map_body_id, ..) = map_arg.kind;\n+            if let ExprKind::Closure { body: map_body_id, .. } = map_arg.kind;\n             let map_body = cx.tcx.hir().body(map_body_id);\n             if let [map_param] = map_body.params;\n             if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;"}, {"sha": "912499bf96b94457d603aff4131c8791f22a2b0d", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -51,8 +51,8 @@ pub(super) fn check<'tcx>(\n             .map_or(false, |fun_def_id| {\n                 deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n             }),\n-        hir::ExprKind::Closure(_, _, body_id, _, _) => {\n-            let closure_body = cx.tcx.hir().body(body_id);\n+        hir::ExprKind::Closure { body, .. } => {\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             match &closure_expr.kind {"}, {"sha": "2d71bd6f240fc14bd9ccced4d3f2162d749b1635", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -71,27 +71,26 @@ pub(super) fn check<'tcx>(\n     if is_option {\n         let self_snippet = snippet(cx, recv.span, \"..\");\n         if_chain! {\n-        if let hir::ExprKind::Closure(_, _, id, span, _) = map_arg.kind;\n-            let arg_snippet = snippet(cx, span, \"..\");\n-            let body = cx.tcx.hir().body(id);\n-                if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n-                if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n-                if Some(id) == cx.tcx.lang_items().option_some_variant();\n-                then {\n-                    let func_snippet = snippet(cx, arg_char.span, \"..\");\n-                    let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n-                       `map(..)` instead\";\n-                    return span_lint_and_sugg(\n-                        cx,\n-                        OPTION_MAP_OR_NONE,\n-                        expr.span,\n-                        msg,\n-                        \"try using `map` instead\",\n-                        format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n-                        Applicability::MachineApplicable,\n-                    );\n-                }\n-\n+            if let hir::ExprKind::Closure { body, fn_decl_span, .. } = map_arg.kind;\n+            let arg_snippet = snippet(cx, fn_decl_span, \"..\");\n+            let body = cx.tcx.hir().body(body);\n+            if let Some((func, [arg_char])) = reduce_unit_expression(&body.value);\n+            if let Some(id) = path_def_id(cx, func).map(|ctor_id| cx.tcx.parent(ctor_id));\n+            if Some(id) == cx.tcx.lang_items().option_some_variant();\n+            then {\n+                let func_snippet = snippet(cx, arg_char.span, \"..\");\n+                let msg = \"called `map_or(None, ..)` on an `Option` value. This can be done more directly by calling \\\n+                   `map(..)` instead\";\n+                return span_lint_and_sugg(\n+                    cx,\n+                    OPTION_MAP_OR_NONE,\n+                    expr.span,\n+                    msg,\n+                    \"try using `map` instead\",\n+                    format!(\"{0}.map({1} {2})\", self_snippet, arg_snippet,func_snippet),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n         }\n \n         let func_snippet = snippet(cx, map_arg.span, \"..\");"}, {"sha": "b11f4531a912c006c27e04bd2bf7d6bdd6155a26", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -41,8 +41,8 @@ pub(super) fn check<'tcx>(\n             let mut applicability = Applicability::MachineApplicable;\n             let any_search_snippet = if_chain! {\n                 if search_method == \"find\";\n-                if let hir::ExprKind::Closure(_, _, body_id, ..) = search_arg.kind;\n-                let closure_body = cx.tcx.hir().body(body_id);\n+                if let hir::ExprKind::Closure { body, .. } = search_arg.kind;\n+                let closure_body = cx.tcx.hir().body(body);\n                 if let Some(closure_arg) = closure_body.params.get(0);\n                 then {\n                     if let hir::PatKind::Ref(..) = closure_arg.pat.kind {"}, {"sha": "a405467f5e8af3e55f3b9a4209ec559f2615c163", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -18,8 +18,8 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<\n         return;\n     }\n \n-    if let hir::ExprKind::Closure(_, _, body_id, ..) = arg.kind {\n-        let body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+        let body = cx.tcx.hir().body(body);\n         let arg_id = body.params[0].pat.hir_id;\n         let mutates_arg =\n             mutated_variables(&body.value, cx).map_or(true, |used_mutably| used_mutably.contains(&arg_id));"}, {"sha": "913c4dbedc30113a2d193798954df144ca7d271c", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -29,8 +29,8 @@ pub(super) fn check(\n     ) {\n         if_chain! {\n             // Extract the body of the closure passed to fold\n-            if let hir::ExprKind::Closure(_, _, body_id, _, _) = acc.kind;\n-            let closure_body = cx.tcx.hir().body(body_id);\n+            if let hir::ExprKind::Closure { body, .. } = acc.kind;\n+            let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(&closure_body.value);\n \n             // Check if the closure body is of the form `acc <op> some_expr(x)`"}, {"sha": "865f6d0318eb9451c95b0e3bd40b9f667d419c14", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -22,8 +22,8 @@ pub(super) fn check<'tcx>(\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n     if is_option || is_result {\n-        if let hir::ExprKind::Closure(_, _, eid, _, _) = arg.kind {\n-            let body = cx.tcx.hir().body(eid);\n+        if let hir::ExprKind::Closure { body, .. } = arg.kind {\n+            let body = cx.tcx.hir().body(body);\n             let body_expr = &body.value;\n \n             if usage::BindingUsageFinder::are_params_used(cx, body) {"}, {"sha": "c3b850fbb9dcc6823201c6dead09d7ae4a545103", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -112,7 +112,7 @@ struct DivergenceVisitor<'a, 'tcx> {\n impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n     fn maybe_walk_expr(&mut self, e: &'tcx Expr<'_>) {\n         match e.kind {\n-            ExprKind::Closure(..) => {},\n+            ExprKind::Closure { .. } => {},\n             ExprKind::Match(e, arms, _) => {\n                 self.visit_expr(e);\n                 for arm in arms {\n@@ -243,7 +243,7 @@ fn check_expr<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, expr: &'tcx Expr<'_>) -\n                 walk_expr(vis, expr);\n             }\n         },\n-        ExprKind::Closure(_, _, _, _, _) => {\n+        ExprKind::Closure { .. } => {\n             // Either\n             //\n             // * `var` is defined in the closure body, in which case we've reached the top of the enclosing\n@@ -315,7 +315,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             // We're about to descend a closure. Since we don't know when (or\n             // if) the closure will be evaluated, any reads in it might not\n             // occur here (or ever). Like above, bail to avoid false positives.\n-            ExprKind::Closure(_, _, _, _, _) |\n+            ExprKind::Closure{..} |\n \n             // We want to avoid a false positive when a variable name occurs\n             // only to have its address taken, so we stop here. Technically,"}, {"sha": "48ac695f2acfb67813675b217eb17ea08cba4d33", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -72,8 +72,8 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessForEach {\n             if has_iter_method(cx, cx.typeck_results().expr_ty(iter_recv)).is_some();\n             // Skip the lint if the body is not block because this is simpler than `for` loop.\n             // e.g. `v.iter().for_each(f)` is simpler and clearer than using `for` loop.\n-            if let ExprKind::Closure(_, _, body_id, ..) = for_each_arg.kind;\n-            let body = cx.tcx.hir().body(body_id);\n+            if let ExprKind::Closure { body, .. } = for_each_arg.kind;\n+            let body = cx.tcx.hir().body(body);\n             if let ExprKind::Block(..) = body.value.kind;\n             then {\n                 let mut ret_collector = RetCollector::default();"}, {"sha": "6598413c77eccc7733f1b21c6649943c5ffa1391", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -116,7 +116,7 @@ fn has_no_effect(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n         return false;\n     }\n     match peel_blocks(expr).kind {\n-        ExprKind::Lit(..) | ExprKind::Closure(..) => true,\n+        ExprKind::Lit(..) | ExprKind::Closure { .. } => true,\n         ExprKind::Path(..) => !has_drop(cx, cx.typeck_results().expr_ty(expr)),\n         ExprKind::Index(a, b) | ExprKind::Binary(_, a, b) => has_no_effect(cx, a) && has_no_effect(cx, b),\n         ExprKind::Array(v) | ExprKind::Tup(v) => v.iter().all(|val| has_no_effect(cx, val)),"}, {"sha": "de5f77f3ad976c025f8bdcf1ec2f1e25842ac71a", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -298,8 +298,8 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n             },\n             ExprKind::Match(expr, arms, _) => self.visit_match(expr, arms),\n             // since analysing the closure is not easy, just set all variables in it to side-effect\n-            ExprKind::Closure(_, _, body_id, _, _) => {\n-                let body = self.tcx.hir().body(body_id);\n+            ExprKind::Closure { body, .. } => {\n+                let body = self.tcx.hir().body(body);\n                 self.visit_body(body);\n                 let vars = std::mem::take(&mut self.ret_vars);\n                 self.add_side_effect(vars);"}, {"sha": "4c2016fe3f723c83233b88850a969ef0afa7389a", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -134,7 +134,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n             if_chain! {\n                 if let hir::StmtKind::Local(local) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n-                if let hir::ExprKind::Closure(..) = t.kind;\n+                if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;\n                 if let hir::StmtKind::Semi(second) = w[1].kind;\n                 if let hir::ExprKind::Assign(_, call, _) = second.kind;"}, {"sha": "f58da7ce9b42078b9d48ef7e3dd524db3bf8bcad", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -116,13 +116,13 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n \n fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Span, Option<Span>)> {\n     if_chain! {\n-        if let ExprKind::Closure(_, _fn_decl, body_id, span, _) = arg.kind;\n+        if let ExprKind::Closure { body, fn_decl_span, .. } = arg.kind;\n         if let ty::Closure(_def_id, substs) = &cx.typeck_results().node_type(arg.hir_id).kind();\n         let ret_ty = substs.as_closure().sig().output();\n         let ty = cx.tcx.erase_late_bound_regions(ret_ty);\n         if ty.is_unit();\n         then {\n-            let body = cx.tcx.hir().body(body_id);\n+            let body = cx.tcx.hir().body(body);\n             if_chain! {\n                 if let ExprKind::Block(block, _) = body.value.kind;\n                 if block.expr.is_none();\n@@ -131,9 +131,9 @@ fn check_arg<'tcx>(cx: &LateContext<'tcx>, arg: &'tcx Expr<'tcx>) -> Option<(Spa\n                 then {\n                     let data = stmt.span.data();\n                     // Make a span out of the semicolon for the help message\n-                    Some((span, Some(data.with_lo(data.hi-BytePos(1)))))\n+                    Some((fn_decl_span, Some(data.with_lo(data.hi-BytePos(1)))))\n                 } else {\n-                    Some((span, None))\n+                    Some((fn_decl_span, None))\n                 }\n             }\n         } else {"}, {"sha": "7d4373b2a57bcfcc6a651d5209c3f89a86c59cee", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -155,7 +155,7 @@ fn detect_lint(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<LintTrigger> {\n         if let ExprKind::MethodCall(name_ident, args, _) = &expr.kind;\n         if let name = name_ident.ident.name.to_ident_string();\n         if name == \"sort_by\" || name == \"sort_unstable_by\";\n-        if let [vec, Expr { kind: ExprKind::Closure(_, _, closure_body_id, _, _), .. }] = args;\n+        if let [vec, Expr { kind: ExprKind::Closure{ body: closure_body_id, .. }, .. }] = args;\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(vec), sym::Vec);\n         if let closure_body = cx.tcx.hir().body(*closure_body_id);\n         if let &["}, {"sha": "2c8820eb7e1a1faed0639c47926992c5e8136d2d", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -466,7 +466,13 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 self.expr(scrutinee);\n                 self.slice(arms, |arm| self.arm(arm));\n             },\n-            ExprKind::Closure(capture_by, fn_decl, body_id, _, movability) => {\n+            ExprKind::Closure {\n+                capture_clause,\n+                fn_decl,\n+                body: body_id,\n+                movability,\n+                ..\n+            } => {\n                 let movability = OptionPat::new(movability.map(|m| format!(\"Movability::{m:?}\")));\n \n                 let ret_ty = match fn_decl.output {\n@@ -475,7 +481,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n                 };\n \n                 bind!(self, fn_decl, body_id);\n-                kind!(\"Closure(CaptureBy::{capture_by:?}, {fn_decl}, {body_id}, _, {movability})\");\n+                kind!(\"Closure(CaptureBy::{capture_clause:?}, {fn_decl}, {body_id}, _, {movability})\");\n                 out!(\"if let {ret_ty} = {fn_decl}.output;\");\n                 self.body(body_id);\n             },"}, {"sha": "730724b95b968277082b2f72c5fed88cc6645b1d", "filename": "clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -198,7 +198,7 @@ fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessS\n                 | ExprKind::Let(..)\n                 | ExprKind::If(..)\n                 | ExprKind::Match(..)\n-                | ExprKind::Closure(..)\n+                | ExprKind::Closure { .. }\n                 | ExprKind::Field(..)\n                 | ExprKind::Path(_)\n                 | ExprKind::AddrOf(..)"}, {"sha": "12931c56df619d332a501b2e4f27c288d820fadb", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -622,10 +622,12 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                 self.hash_expr(e);\n                 self.hash_ty(ty);\n             },\n-            ExprKind::Closure(cap, _, eid, _, _) => {\n-                std::mem::discriminant(&cap).hash(&mut self.s);\n+            ExprKind::Closure {\n+                capture_clause, body, ..\n+            } => {\n+                std::mem::discriminant(&capture_clause).hash(&mut self.s);\n                 // closures inherit TypeckResults\n-                self.hash_expr(&self.cx.tcx.hir().body(eid).value);\n+                self.hash_expr(&self.cx.tcx.hir().body(body).value);\n             },\n             ExprKind::Field(e, ref f) => {\n                 self.hash_expr(e);"}, {"sha": "0cf23ca626c7542186c26b55e7e9fc171f8b8eb6", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -962,7 +962,7 @@ pub fn can_move_expr_to_closure<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'\n                         self.captures.entry(l).and_modify(|e| *e |= cap).or_insert(cap);\n                     }\n                 },\n-                ExprKind::Closure(..) => {\n+                ExprKind::Closure { .. } => {\n                     let closure_id = self.cx.tcx.hir().local_def_id(e.hir_id).to_def_id();\n                     for capture in self.cx.typeck_results().closure_min_captures_flattened(closure_id) {\n                         let local_id = match capture.place.base {\n@@ -1200,7 +1200,7 @@ pub fn get_enclosing_loop_or_closure<'tcx>(tcx: TyCtxt<'tcx>, expr: &Expr<'_>) -\n         match node {\n             Node::Expr(\n                 e @ Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 },\n             ) => return Some(e),\n@@ -1693,7 +1693,7 @@ pub fn get_async_fn_body<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'_>) -> Option<&'t\n         _,\n         &[\n             Expr {\n-                kind: ExprKind::Closure(_, _, body, _, _),\n+                kind: ExprKind::Closure { body, .. },\n                 ..\n             },\n         ],\n@@ -1780,7 +1780,7 @@ pub fn is_expr_identity_function(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool\n     }\n \n     match expr.kind {\n-        ExprKind::Closure(_, _, body_id, _, _) => is_body_identity_function(cx, cx.tcx.hir().body(body_id)),\n+        ExprKind::Closure { body, .. } => is_body_identity_function(cx, cx.tcx.hir().body(body)),\n         _ => path_def_id(cx, expr).map_or(false, |id| match_def_path(cx, id, &paths::CONVERT_IDENTITY)),\n     }\n }"}, {"sha": "4d21ba8bd1d16b2a38081c816e38eb5679862095", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -134,7 +134,7 @@ impl<'a> Sugg<'a> {\n             | hir::ExprKind::Box(..)\n             | hir::ExprKind::If(..)\n             | hir::ExprKind::Let(..)\n-            | hir::ExprKind::Closure(..)\n+            | hir::ExprKind::Closure { .. }\n             | hir::ExprKind::Unary(..)\n             | hir::ExprKind::Match(..) => Sugg::MaybeParen(get_snippet(expr.span)),\n             hir::ExprKind::Continue(..)\n@@ -188,7 +188,7 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             ast::ExprKind::AddrOf(..)\n             | ast::ExprKind::Box(..)\n-            | ast::ExprKind::Closure(..)\n+            | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)\n             | ast::ExprKind::Unary(..)\n@@ -790,8 +790,8 @@ pub struct DerefClosure {\n ///\n /// note: this only works on single line immutable closures with exactly one input parameter.\n pub fn deref_closure_args<'tcx>(cx: &LateContext<'_>, closure: &'tcx hir::Expr<'_>) -> Option<DerefClosure> {\n-    if let hir::ExprKind::Closure(_, fn_decl, body_id, ..) = closure.kind {\n-        let closure_body = cx.tcx.hir().body(body_id);\n+    if let hir::ExprKind::Closure { fn_decl, body, .. } = closure.kind {\n+        let closure_body = cx.tcx.hir().body(body);\n         // is closure arg a type annotated double reference (i.e.: `|x: &&i32| ...`)\n         // a type annotation is present if param `kind` is different from `TyKind::Infer`\n         let closure_arg_is_type_annotated_double_ref = if let TyKind::Rptr(_, MutTy { ty, .. }) = fn_decl.inputs[0].kind"}, {"sha": "3af5dfb62f97e112fb6b8268f3e9f3b263375a78", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=7b84a97c3e941fe2ed1f9afcd36f9d79601a6d96", "patch": "@@ -185,7 +185,7 @@ pub fn local_used_after_expr(cx: &LateContext<'_>, local_id: HirId, after: &Expr\n             matches!(\n                 node,\n                 Node::Expr(Expr {\n-                    kind: ExprKind::Loop(..) | ExprKind::Closure(..),\n+                    kind: ExprKind::Loop(..) | ExprKind::Closure { .. },\n                     ..\n                 })\n             )"}]}