{"sha": "b238ddd21adf9910769522a21e31c2e14f664396", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMzhkZGQyMWFkZjk5MTA3Njk1MjJhMjFlMzFjMmUxNGY2NjQzOTY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-15T19:33:05Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-15T19:33:05Z"}, "message": "Make macro def krate mandatory\n\nRefactors builtin derive support to go through proper name resolution", "tree": {"sha": "219749056bcef5cd35cfc94826108c4f955b1c8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/219749056bcef5cd35cfc94826108c4f955b1c8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b238ddd21adf9910769522a21e31c2e14f664396", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b238ddd21adf9910769522a21e31c2e14f664396", "html_url": "https://github.com/rust-lang/rust/commit/b238ddd21adf9910769522a21e31c2e14f664396", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b238ddd21adf9910769522a21e31c2e14f664396/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31c3246a8c87a3639623c30b692a57e728bb046", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31c3246a8c87a3639623c30b692a57e728bb046", "html_url": "https://github.com/rust-lang/rust/commit/c31c3246a8c87a3639623c30b692a57e728bb046"}], "stats": {"total": 133, "additions": 91, "deletions": 42}, "files": [{"sha": "9bfcd215a5e74f873ba15dd004d400a4a6b6229a", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -970,7 +970,7 @@ impl MacroDef {\n     /// defines this macro. The reasons for this is that macros are expanded\n     /// early, in `hir_expand`, where modules simply do not exist yet.\n     pub fn module(self, db: &dyn HirDatabase) -> Option<Module> {\n-        let krate = self.id.krate?;\n+        let krate = self.id.krate;\n         let module_id = db.crate_def_map(krate).root;\n         Some(Module::new(Crate { id: krate }, module_id))\n     }"}, {"sha": "3efca5baa5cda5ecf96f5d2753dab76b5a6cb038", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -158,7 +158,7 @@ impl SourceToDefCtx<'_, '_> {\n         let krate = self.file_to_def(file_id)?.krate;\n         let file_ast_id = self.db.ast_id_map(src.file_id).ast_id(&src.value);\n         let ast_id = Some(AstId::new(src.file_id, file_ast_id.upcast()));\n-        Some(MacroDefId { krate: Some(krate), ast_id, kind, local_inner: false })\n+        Some(MacroDefId { krate, ast_id, kind, local_inner: false })\n     }\n \n     pub(super) fn find_container(&mut self, src: InFile<&SyntaxNode>) -> Option<ChildContainer> {"}, {"sha": "23e2fd7641fab3e9aca67bcad3fc57177adca800", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -803,7 +803,7 @@ impl ExprCollector<'_> {\n                 }\n                 Either::Right(e) => {\n                     let mac = MacroDefId {\n-                        krate: Some(self.expander.module.krate),\n+                        krate: self.expander.module.krate,\n                         ast_id: Some(self.expander.ast_id(&e)),\n                         kind: MacroDefKind::Declarative,\n                         local_inner: false,"}, {"sha": "62ab3b2bd6227decb9efabc317292bad8366b582", "filename": "crates/hir_def/src/item_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_scope.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -363,7 +363,7 @@ impl ItemInNs {\n                 ModuleDefId::TypeAliasId(id) => id.lookup(db).module(db).krate,\n                 ModuleDefId::BuiltinType(_) => return None,\n             },\n-            ItemInNs::Macros(id) => return id.krate,\n+            ItemInNs::Macros(id) => return Some(id.krate),\n         })\n     }\n }"}, {"sha": "785895277fa48ca546b23c58073d4a830f7d0d10", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -309,13 +309,13 @@ impl DefCollector<'_> {\n         let macro_def = match self.proc_macros.iter().find(|(n, _)| n == name) {\n             Some((_, expander)) => MacroDefId {\n                 ast_id: None,\n-                krate: Some(self.def_map.krate),\n+                krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(*expander),\n                 local_inner: false,\n             },\n             None => MacroDefId {\n                 ast_id: None,\n-                krate: Some(self.def_map.krate),\n+                krate: self.def_map.krate,\n                 kind: MacroDefKind::ProcMacro(ProcMacroExpander::dummy(self.def_map.krate)),\n                 local_inner: false,\n             },\n@@ -784,14 +784,6 @@ impl DefCollector<'_> {\n         directive: &DeriveDirective,\n         path: &ModPath,\n     ) -> Option<MacroDefId> {\n-        if let Some(name) = path.as_ident() {\n-            // FIXME this should actually be handled with the normal name\n-            // resolution; the std lib defines built-in stubs for the derives,\n-            // but these are new-style `macro`s, which we don't support yet\n-            if let Some(def_id) = find_builtin_derive(name) {\n-                return Some(def_id);\n-            }\n-        }\n         let resolved_res = self.def_map.resolve_path_fp_with_macro(\n             self.db,\n             ResolveMode::Other,\n@@ -984,7 +976,9 @@ impl ModCollector<'_, '_> {\n                     // to define builtin macros, so we support at least that part.\n                     if mac.is_builtin {\n                         let krate = self.def_collector.def_map.krate;\n-                        if let Some(macro_id) = find_builtin_macro(&mac.name, krate, ast_id) {\n+                        let macro_id = find_builtin_macro(&mac.name, krate, ast_id)\n+                            .or_else(|| find_builtin_derive(&mac.name, krate, ast_id));\n+                        if let Some(macro_id) = macro_id {\n                             let vis = self\n                                 .def_collector\n                                 .def_map\n@@ -1326,7 +1320,7 @@ impl ModCollector<'_, '_> {\n         // Case 2: normal `macro_rules!` macro\n         let macro_id = MacroDefId {\n             ast_id: Some(ast_id),\n-            krate: Some(self.def_collector.def_map.krate),\n+            krate: self.def_collector.def_map.krate,\n             kind: MacroDefKind::Declarative,\n             local_inner: mac.is_local_inner,\n         };"}, {"sha": "6fe2ee78a1fcbd176cfb10b9d6ecc359f03e7a50", "filename": "crates/hir_def/src/nameres/tests/macros.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmacros.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -633,14 +633,43 @@ pub struct bar;\n fn expand_derive() {\n     let map = compute_crate_def_map(\n         \"\n-        //- /main.rs\n+        //- /main.rs crate:main deps:core\n+        use core::*;\n+\n         #[derive(Copy, Clone)]\n         struct Foo;\n+\n+        //- /core.rs crate:core\n+        #[rustc_builtin_macro]\n+        pub macro Copy {}\n+\n+        #[rustc_builtin_macro]\n+        pub macro Clone {}\n         \",\n     );\n     assert_eq!(map.modules[map.root].scope.impls().len(), 2);\n }\n \n+#[test]\n+fn resolve_builtin_derive() {\n+    check(\n+        r#\"\n+//- /main.rs crate:main deps:core\n+use core::*;\n+\n+//- /core.rs crate:core\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+pub trait Clone {}\n+\"#,\n+        expect![[r#\"\n+            crate\n+            Clone: t m\n+        \"#]],\n+    );\n+}\n+\n #[test]\n fn macro_expansion_overflow() {\n     mark::check!(macro_expansion_overflow);"}, {"sha": "ad378762a1eaa640e3bf98d9a626f5ddd836219d", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -8,7 +8,7 @@ use syntax::{\n     match_ast,\n };\n \n-use crate::{db::AstDatabase, name, quote, LazyMacroId, MacroDefId, MacroDefKind};\n+use crate::{db::AstDatabase, name, quote, AstId, CrateId, LazyMacroId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -29,16 +29,15 @@ macro_rules! register_builtin {\n                 };\n                 expander(db, id, tt)\n             }\n-        }\n-\n-        pub fn find_builtin_derive(ident: &name::Name) -> Option<MacroDefId> {\n-            let kind = match ident {\n-                $( id if id == &name::name![$trait] => BuiltinDeriveExpander::$trait, )*\n-                 _ => return None,\n-            };\n \n-            Some(MacroDefId { krate: None, ast_id: None, kind: MacroDefKind::BuiltInDerive(kind), local_inner: false })\n+            fn find_by_name(name: &name::Name) -> Option<Self> {\n+                match name {\n+                    $( id if id == &name::name![$trait] => Some(BuiltinDeriveExpander::$trait), )*\n+                     _ => None,\n+                }\n+            }\n         }\n+\n     };\n }\n \n@@ -54,6 +53,20 @@ register_builtin! {\n     PartialEq => partial_eq_expand\n }\n \n+pub fn find_builtin_derive(\n+    ident: &name::Name,\n+    krate: CrateId,\n+    ast_id: AstId<ast::Macro>,\n+) -> Option<MacroDefId> {\n+    let expander = BuiltinDeriveExpander::find_by_name(ident)?;\n+    Some(MacroDefId {\n+        krate,\n+        ast_id: Some(ast_id),\n+        kind: MacroDefKind::BuiltInDerive(expander),\n+        local_inner: false,\n+    })\n+}\n+\n struct BasicAdtInfo {\n     name: tt::Ident,\n     type_params: usize,\n@@ -261,7 +274,7 @@ mod tests {\n     use super::*;\n \n     fn expand_builtin_derive(s: &str, name: Name) -> String {\n-        let def = find_builtin_derive(&name).unwrap();\n+        let expander = BuiltinDeriveExpander::find_by_name(&name).unwrap();\n         let fixture = format!(\n             r#\"//- /main.rs crate:main deps:core\n <|>\n@@ -283,7 +296,12 @@ mod tests {\n         let attr_id = AstId::new(file_id.into(), ast_id_map.ast_id(&items[0]));\n \n         let loc = MacroCallLoc {\n-            def,\n+            def: MacroDefId {\n+                krate: CrateId(0),\n+                ast_id: None,\n+                kind: MacroDefKind::BuiltInDerive(expander),\n+                local_inner: false,\n+            },\n             krate: CrateId(0),\n             kind: MacroCallKind::Attr(attr_id, name.to_string()),\n         };"}, {"sha": "dddbbcdac48e0e0858a966cb7be02041715d5428", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -69,13 +69,13 @@ pub fn find_builtin_macro(\n \n     match kind {\n         Either::Left(kind) => Some(MacroDefId {\n-            krate: Some(krate),\n+            krate,\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltIn(kind),\n             local_inner: false,\n         }),\n         Either::Right(kind) => Some(MacroDefId {\n-            krate: Some(krate),\n+            krate,\n             ast_id: Some(ast_id),\n             kind: MacroDefKind::BuiltInEager(kind),\n             local_inner: false,\n@@ -534,7 +534,7 @@ mod tests {\n             Either::Left(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n-                    krate: Some(CrateId(0)),\n+                    krate: CrateId(0),\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n                     kind: MacroDefKind::BuiltIn(expander),\n                     local_inner: false,\n@@ -555,7 +555,7 @@ mod tests {\n             Either::Right(expander) => {\n                 // the first one should be a macro_rules\n                 let def = MacroDefId {\n-                    krate: Some(krate),\n+                    krate,\n                     ast_id: Some(AstId::new(file_id.into(), ast_id_map.ast_id(&macro_rules))),\n                     kind: MacroDefKind::BuiltInEager(expander),\n                     local_inner: false,"}, {"sha": "7ab0a5e52eb071751df865f6d9cb4d9448cd8460", "filename": "crates/hir_expand/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fhygiene.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -29,8 +29,8 @@ impl Hygiene {\n                 MacroCallId::LazyMacro(id) => {\n                     let loc = db.lookup_intern_macro(id);\n                     match loc.def.kind {\n-                        MacroDefKind::Declarative => (loc.def.krate, loc.def.local_inner),\n-                        MacroDefKind::BuiltIn(_) => (loc.def.krate, false),\n+                        MacroDefKind::Declarative => (Some(loc.def.krate), loc.def.local_inner),\n+                        MacroDefKind::BuiltIn(_) => (Some(loc.def.krate), false),\n                         MacroDefKind::BuiltInDerive(_) => (None, false),\n                         MacroDefKind::BuiltInEager(_) => (None, false),\n                         MacroDefKind::ProcMacro(_) => (None, false),"}, {"sha": "d486186e59d31b9800180f4d288229b3c657818e", "filename": "crates/hir_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Flib.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -224,13 +224,7 @@ impl From<EagerMacroId> for MacroCallId {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDefId {\n-    // FIXME: krate and ast_id are currently optional because we don't have a\n-    // definition location for built-in derives. There is one, though: the\n-    // standard library defines them. The problem is that it uses the new\n-    // `macro` syntax for this, which we don't support yet. As soon as we do\n-    // (which will probably require touching this code), we can instead use\n-    // that (and also remove the hacks for resolving built-in derives).\n-    pub krate: Option<CrateId>,\n+    pub krate: CrateId,\n     pub ast_id: Option<AstId<ast::Macro>>,\n     pub kind: MacroDefKind,\n "}, {"sha": "a7656b864865cc832075467f4ae03211b52eb7b8", "filename": "crates/hir_ty/src/tests/macros.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -686,6 +686,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n \"#,\n     );\n@@ -702,6 +704,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n #[derive(Clone)]\n pub struct S;\n@@ -737,6 +741,8 @@ mod clone {\n     trait Clone {\n         fn clone(&self) -> Self;\n     }\n+    #[rustc_builtin_macro]\n+    macro Clone {}\n }\n \"#,\n     );"}, {"sha": "68c628d314376e5e522673186a54c30d33519367", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -221,6 +221,8 @@ struct Foo<|>;\n mod marker {\n     trait Copy {}\n }\n+#[rustc_builtin_macro]\n+macro Copy {}\n \"#,\n         );\n     }"}, {"sha": "3530a5fdb4b4c70a47ea05ab45d50dd3cab9282c", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -38,6 +38,9 @@\n <pre><code><span class=\"keyword\">use</span> <span class=\"module\">inner</span><span class=\"operator\">::</span><span class=\"punctuation\">{</span><span class=\"self_keyword\">self</span> <span class=\"keyword\">as</span> <span class=\"module declaration\">inner_mod</span><span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n <span class=\"keyword\">mod</span> <span class=\"module declaration\">inner</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro</span> <span class=\"unresolved_reference declaration\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+\n <span class=\"comment\">// Needed for function consuming vs normal</span>\n <span class=\"keyword\">pub</span> <span class=\"keyword\">mod</span> <span class=\"module declaration\">marker</span> <span class=\"punctuation\">{</span>\n     <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"function attribute\">lang</span><span class=\"attribute attribute\"> </span><span class=\"operator attribute\">=</span><span class=\"attribute attribute\"> </span><span class=\"string_literal attribute\">\"copy\"</span><span class=\"attribute attribute\">]</span>\n@@ -119,7 +122,7 @@\n     <span class=\"value_param callable\">f</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span>\n <span class=\"punctuation\">}</span>\n \n-<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"unresolved_reference\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"keyword\">impl</span> <span class=\"macro\">Copy</span> <span class=\"punctuation\">{</span><span class=\"punctuation\">}</span>\n \n <span class=\"keyword\">fn</span> <span class=\"function declaration\">foo</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span> <span class=\"punctuation\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">bar</span> <span class=\"operator\">=</span> <span class=\"function\">foobar</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>"}, {"sha": "f53d2c3ba41300a14968061b8ddf0e6caedb35f9", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b238ddd21adf9910769522a21e31c2e14f664396/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=b238ddd21adf9910769522a21e31c2e14f664396", "patch": "@@ -12,6 +12,9 @@ fn test_highlighting() {\n use inner::{self as inner_mod};\n mod inner {}\n \n+#[rustc_builtin_macro]\n+macro Copy {}\n+\n // Needed for function consuming vs normal\n pub mod marker {\n     #[lang = \"copy\"]"}]}