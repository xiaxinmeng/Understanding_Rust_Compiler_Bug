{"sha": "487e961c6ae072d969e148def0b0856c2367ae00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4N2U5NjFjNmFlMDcyZDk2OWUxNDhkZWYwYjA4NTZjMjM2N2FlMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-24T19:34:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-24T19:34:11Z"}, "message": "Auto merge of #52181 - QuietMisdreavus:panicked-tester, r=GuillaumeGomez\n\nrustdoc: set panic output before starting compiler thread pool\n\nWhen the compiler was updated to run on a thread pool, rustdoc's processing of compiler/doctest stderr/stdout was moved into each compiler thread. However, this caused output of the test to be lost if the test failed at *runtime* instead of compile time. This change sets up the `set_panic` call and output bomb before starting the compiler thread pool, so that the `Drop` call that writes back to the test's stdout happens after the test runs, not just after it compiles.\n\nFixes https://github.com/rust-lang/rust/issues/51162", "tree": {"sha": "75e387657438fab491eae50a57a2f6fb4c2287e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75e387657438fab491eae50a57a2f6fb4c2287e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/487e961c6ae072d969e148def0b0856c2367ae00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/487e961c6ae072d969e148def0b0856c2367ae00", "html_url": "https://github.com/rust-lang/rust/commit/487e961c6ae072d969e148def0b0856c2367ae00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/487e961c6ae072d969e148def0b0856c2367ae00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f498e4ec1b57c3245a2fb8e0d5d836ed56760d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f498e4ec1b57c3245a2fb8e0d5d836ed56760d2d", "html_url": "https://github.com/rust-lang/rust/commit/f498e4ec1b57c3245a2fb8e0d5d836ed56760d2d"}, {"sha": "76e33b4eb4f116b02d3754efd67e4fba0c9b3f93", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e33b4eb4f116b02d3754efd67e4fba0c9b3f93", "html_url": "https://github.com/rust-lang/rust/commit/76e33b4eb4f116b02d3754efd67e4fba0c9b3f93"}], "stats": {"total": 187, "additions": 132, "deletions": 55}, "files": [{"sha": "2100ceea22849713c853d10cf810dd61ae7628b3", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/487e961c6ae072d969e148def0b0856c2367ae00/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e961c6ae072d969e148def0b0856c2367ae00/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=487e961c6ae072d969e148def0b0856c2367ae00", "patch": "@@ -1497,10 +1497,12 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n     }\n }\n \n-/// Runs `f` in a suitable thread for running `rustc`; returns a\n-/// `Result` with either the return value of `f` or -- if a panic\n-/// occurs -- the panic value.\n-pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n+/// Runs `f` in a suitable thread for running `rustc`; returns a `Result` with either the return\n+/// value of `f` or -- if a panic occurs -- the panic value.\n+///\n+/// This version applies the given name to the thread. This is used by rustdoc to ensure consistent\n+/// doctest output across platforms and executions.\n+pub fn in_named_rustc_thread<F, R>(name: String, f: F) -> Result<R, Box<dyn Any + Send>>\n     where F: FnOnce() -> R + Send + 'static,\n           R: Send + 'static,\n {\n@@ -1564,7 +1566,7 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n \n     // The or condition is added from backward compatibility.\n     if spawn_thread || env::var_os(\"RUST_MIN_STACK\").is_some() {\n-        let mut cfg = thread::Builder::new().name(\"rustc\".to_string());\n+        let mut cfg = thread::Builder::new().name(name);\n \n         // FIXME: Hacks on hacks. If the env is trying to override the stack size\n         // then *don't* set it explicitly.\n@@ -1580,6 +1582,16 @@ pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n     }\n }\n \n+/// Runs `f` in a suitable thread for running `rustc`; returns a\n+/// `Result` with either the return value of `f` or -- if a panic\n+/// occurs -- the panic value.\n+pub fn in_rustc_thread<F, R>(f: F) -> Result<R, Box<dyn Any + Send>>\n+    where F: FnOnce() -> R + Send + 'static,\n+          R: Send + 'static,\n+{\n+    in_named_rustc_thread(\"rustc\".to_string(), f)\n+}\n+\n /// Get a list of extra command-line flags provided by the user, as strings.\n ///\n /// This function is used during ICEs to show more information useful for"}, {"sha": "eb980a7369bf27ac2e62370c268d6f6072fcf017", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 47, "deletions": 45, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/487e961c6ae072d969e148def0b0856c2367ae00/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e961c6ae072d969e148def0b0856c2367ae00/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=487e961c6ae072d969e148def0b0856c2367ae00", "patch": "@@ -232,40 +232,42 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n         ..config::basic_options().clone()\n     };\n \n-    let (libdir, outdir) = driver::spawn_thread_pool(sessopts, |sessopts| {\n-        // Shuffle around a few input and output handles here. We're going to pass\n-        // an explicit handle into rustc to collect output messages, but we also\n-        // want to catch the error message that rustc prints when it fails.\n-        //\n-        // We take our thread-local stderr (likely set by the test runner) and replace\n-        // it with a sink that is also passed to rustc itself. When this function\n-        // returns the output of the sink is copied onto the output of our own thread.\n-        //\n-        // The basic idea is to not use a default Handler for rustc, and then also\n-        // not print things by default to the actual stderr.\n-        struct Sink(Arc<Mutex<Vec<u8>>>);\n-        impl Write for Sink {\n-            fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n-                Write::write(&mut *self.0.lock().unwrap(), data)\n-            }\n-            fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    // Shuffle around a few input and output handles here. We're going to pass\n+    // an explicit handle into rustc to collect output messages, but we also\n+    // want to catch the error message that rustc prints when it fails.\n+    //\n+    // We take our thread-local stderr (likely set by the test runner) and replace\n+    // it with a sink that is also passed to rustc itself. When this function\n+    // returns the output of the sink is copied onto the output of our own thread.\n+    //\n+    // The basic idea is to not use a default Handler for rustc, and then also\n+    // not print things by default to the actual stderr.\n+    struct Sink(Arc<Mutex<Vec<u8>>>);\n+    impl Write for Sink {\n+        fn write(&mut self, data: &[u8]) -> io::Result<usize> {\n+            Write::write(&mut *self.0.lock().unwrap(), data)\n         }\n-        struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n-        impl Drop for Bomb {\n-            fn drop(&mut self) {\n-                let _ = self.1.write_all(&self.0.lock().unwrap());\n-            }\n+        fn flush(&mut self) -> io::Result<()> { Ok(()) }\n+    }\n+    struct Bomb(Arc<Mutex<Vec<u8>>>, Box<Write+Send>);\n+    impl Drop for Bomb {\n+        fn drop(&mut self) {\n+            let _ = self.1.write_all(&self.0.lock().unwrap());\n         }\n-        let data = Arc::new(Mutex::new(Vec::new()));\n+    }\n+    let data = Arc::new(Mutex::new(Vec::new()));\n+\n+    let old = io::set_panic(Some(box Sink(data.clone())));\n+    let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n+\n+    let (libdir, outdir, compile_result) = driver::spawn_thread_pool(sessopts, |sessopts| {\n         let codemap = Lrc::new(CodeMap::new_doctest(\n             sessopts.file_path_mapping(), filename.clone(), line as isize - line_offset as isize\n         ));\n         let emitter = errors::emitter::EmitterWriter::new(box Sink(data.clone()),\n                                                         Some(codemap.clone()),\n                                                         false,\n                                                         false);\n-        let old = io::set_panic(Some(box Sink(data.clone())));\n-        let _bomb = Bomb(data.clone(), old.unwrap_or(box io::stdout()));\n \n         // Compile the code\n         let diagnostic_handler = errors::Handler::with_emitter(true, false, box emitter);\n@@ -312,28 +314,28 @@ fn run_test(test: &str, cratename: &str, filename: &FileName, line: usize,\n             Err(_) | Ok(Err(CompileIncomplete::Errored(_))) => Err(())\n         };\n \n-        match (compile_result, compile_fail) {\n-            (Ok(()), true) => {\n-                panic!(\"test compiled while it wasn't supposed to\")\n-            }\n-            (Ok(()), false) => {}\n-            (Err(()), true) => {\n-                if error_codes.len() > 0 {\n-                    let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n-                    error_codes.retain(|err| !out.contains(err));\n-                }\n-            }\n-            (Err(()), false) => {\n-                panic!(\"couldn't compile the test\")\n+        (libdir, outdir, compile_result)\n+    });\n+\n+    match (compile_result, compile_fail) {\n+        (Ok(()), true) => {\n+            panic!(\"test compiled while it wasn't supposed to\")\n+        }\n+        (Ok(()), false) => {}\n+        (Err(()), true) => {\n+            if error_codes.len() > 0 {\n+                let out = String::from_utf8(data.lock().unwrap().to_vec()).unwrap();\n+                error_codes.retain(|err| !out.contains(err));\n             }\n         }\n-\n-        if error_codes.len() > 0 {\n-            panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n+        (Err(()), false) => {\n+            panic!(\"couldn't compile the test\")\n         }\n+    }\n \n-        (libdir, outdir)\n-    });\n+    if error_codes.len() > 0 {\n+        panic!(\"Some expected error codes were not found: {:?}\", error_codes);\n+    }\n \n     if no_run { return }\n \n@@ -548,7 +550,7 @@ impl Collector {\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n-                name: testing::DynTestName(name),\n+                name: testing::DynTestName(name.clone()),\n                 ignore: should_ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n@@ -558,7 +560,7 @@ impl Collector {\n                 let panic = io::set_panic(None);\n                 let print = io::set_print(None);\n                 match {\n-                    rustc_driver::in_rustc_thread(move || with_globals(move || {\n+                    rustc_driver::in_named_rustc_thread(name, move || with_globals(move || {\n                         io::set_panic(panic);\n                         io::set_print(print);\n                         hygiene::set_default_edition(edition);"}, {"sha": "62e495288cb9bca13cdb2dfd9239159b4e6588be", "filename": "src/test/rustdoc-ui/failed-doctest-output.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs?ref=487e961c6ae072d969e148def0b0856c2367ae00", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Issue #51162: A failed doctest was not printing its stdout/stderr\n+// FIXME: if/when the output of the test harness can be tested on its own, this test should be\n+// adapted to use that, and that normalize line can go away\n+\n+// compile-flags:--test\n+// normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// failure-status: 101\n+\n+// doctest fails at runtime\n+/// ```\n+/// panic!(\"oh no\");\n+/// ```\n+pub struct SomeStruct;\n+\n+// doctest fails at compile time\n+/// ```\n+/// no\n+/// ```\n+pub struct OtherStruct;"}, {"sha": "cf417f8d412eeb93232039968efe2b9a74ef3c44", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=487e961c6ae072d969e148def0b0856c2367ae00", "patch": "@@ -0,0 +1,32 @@\n+\n+running 2 tests\n+test $DIR/failed-doctest-output.rs - OtherStruct (line 26) ... FAILED\n+test $DIR/failed-doctest-output.rs - SomeStruct (line 20) ... FAILED\n+\n+failures:\n+\n+---- $DIR/failed-doctest-output.rs - OtherStruct (line 26) stdout ----\n+error[E0425]: cannot find value `no` in this scope\n+ --> $DIR/failed-doctest-output.rs:27:1\n+  |\n+3 | no\n+  | ^^ not found in this scope\n+\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 26)' panicked at 'couldn't compile the test', librustdoc/test.rs:332:13\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n+\n+---- $DIR/failed-doctest-output.rs - SomeStruct (line 20) stdout ----\n+thread '$DIR/failed-doctest-output.rs - SomeStruct (line 20)' panicked at 'test executable failed:\n+\n+thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n+note: Run with `RUST_BACKTRACE=1` for a backtrace.\n+\n+', librustdoc/test.rs:367:17\n+\n+\n+failures:\n+    $DIR/failed-doctest-output.rs - OtherStruct (line 26)\n+    $DIR/failed-doctest-output.rs - SomeStruct (line 20)\n+\n+test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "eeb280e1de36cbd62f54dc9c981ba78bd96c0089", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/487e961c6ae072d969e148def0b0856c2367ae00/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=487e961c6ae072d969e148def0b0856c2367ae00", "patch": "@@ -392,18 +392,20 @@ impl TestProps {\n \n             if let Some(code) = config.parse_failure_status(ln) {\n                 self.failure_status = code;\n-            } else {\n-                self.failure_status = match config.mode {\n-                    Mode::RunFail => 101,\n-                    _ => 1,\n-                };\n             }\n \n             if !self.run_rustfix {\n                 self.run_rustfix = config.parse_run_rustfix(ln);\n             }\n         });\n \n+        if self.failure_status == -1 {\n+            self.failure_status = match config.mode {\n+                Mode::RunFail => 101,\n+                _ => 1,\n+            };\n+        }\n+\n         for key in &[\"RUST_TEST_NOCAPTURE\", \"RUST_TEST_THREADS\"] {\n             if let Ok(val) = env::var(key) {\n                 if self.exec_env.iter().find(|&&(ref x, _)| x == key).is_none() {"}]}