{"sha": "2ff67ed94e9835f7ee01088aa479a1ca5796bee5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmZjY3ZWQ5NGU5ODM1ZjdlZTAxMDg4YWE0NzlhMWNhNTc5NmJlZTU=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-04T19:53:52Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-04T19:53:52Z"}, "message": "Remove unused argument.", "tree": {"sha": "767498836b190ef346752152d1d65bb1a6ba03af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/767498836b190ef346752152d1d65bb1a6ba03af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ff67ed94e9835f7ee01088aa479a1ca5796bee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ff67ed94e9835f7ee01088aa479a1ca5796bee5", "html_url": "https://github.com/rust-lang/rust/commit/2ff67ed94e9835f7ee01088aa479a1ca5796bee5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ff67ed94e9835f7ee01088aa479a1ca5796bee5/comments", "author": null, "committer": null, "parents": [{"sha": "02dff96b52cac4900fd35235623c8a2dd98ca08f", "url": "https://api.github.com/repos/rust-lang/rust/commits/02dff96b52cac4900fd35235623c8a2dd98ca08f", "html_url": "https://github.com/rust-lang/rust/commit/02dff96b52cac4900fd35235623c8a2dd98ca08f"}], "stats": {"total": 13, "additions": 6, "deletions": 7}, "files": [{"sha": "d2fa0acc327c8ab65bc473c6996c34ef67f8b2f3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2ff67ed94e9835f7ee01088aa479a1ca5796bee5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ff67ed94e9835f7ee01088aa479a1ca5796bee5/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=2ff67ed94e9835f7ee01088aa479a1ca5796bee5", "patch": "@@ -1278,7 +1278,7 @@ fn make_generic_glue(@crate_ctxt cx, @ty.t t, str name,\n     fn_name = sanitize(fn_name);\n     auto llfn = decl_fastcall_fn(cx.llmod, fn_name, llfnty);\n \n-    auto fcx = new_fn_ctxt(cx, fn_name, llfn);\n+    auto fcx = new_fn_ctxt(cx, llfn);\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto re;\n@@ -2656,7 +2656,7 @@ fn trans_for_each(@block_ctxt cx,\n     // FIXME: handle ty params properly.\n     let vec[ast.ty_param] ty_params = vec();\n \n-    auto fcx = new_fn_ctxt(cx.fcx.ccx, s, lliterbody);\n+    auto fcx = new_fn_ctxt(cx.fcx.ccx, lliterbody);\n     auto bcx = new_top_block_ctxt(fcx);\n \n     // FIXME: populate lllocals from llenv here.\n@@ -3151,7 +3151,7 @@ fn trans_bind_thunk(@crate_ctxt cx,\n     let TypeRef llthunk_ty = get_pair_fn_ty(type_of(cx, incoming_fty));\n     let ValueRef llthunk = decl_fastcall_fn(cx.llmod, s, llthunk_ty);\n \n-    auto fcx = new_fn_ctxt(cx, s, llthunk);\n+    auto fcx = new_fn_ctxt(cx, llthunk);\n     auto bcx = new_top_block_ctxt(fcx);\n \n     auto llclosure = bcx.build.PointerCast(fcx.llenv, llclosure_ty);\n@@ -4213,7 +4213,6 @@ fn trans_block(@block_ctxt cx, &ast.block b) -> result {\n //  - trans_args\n \n fn new_fn_ctxt(@crate_ctxt cx,\n-               str name,\n                ValueRef llfndecl) -> @fn_ctxt {\n \n     let ValueRef llretptr = llvm.LLVMGetParam(llfndecl, 0u);\n@@ -4429,7 +4428,7 @@ fn trans_fn(@crate_ctxt cx, &ast._fn f, ast.def_id fid,\n     auto llfndecl = cx.item_ids.get(fid);\n     cx.item_names.insert(cx.path, llfndecl);\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n+    auto fcx = new_fn_ctxt(cx, llfndecl);\n     create_llargs_for_fn_args(fcx, f.proto,\n                               ty_self, ret_ty_of_fn(ann),\n                               f.decl.inputs, ty_params);\n@@ -4514,7 +4513,7 @@ fn trans_obj(@crate_ctxt cx, &ast._obj ob, ast.def_id oid,\n                            id=f.id));\n     }\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, llctor_decl);\n+    auto fcx = new_fn_ctxt(cx, llctor_decl);\n     create_llargs_for_fn_args(fcx, ast.proto_fn,\n                               none[TypeRef], ret_ty_of_fn(ann),\n                               fn_args, ty_params);\n@@ -4644,7 +4643,7 @@ fn trans_tag_variant(@crate_ctxt cx, ast.def_id tag_id,\n     check (cx.item_ids.contains_key(variant.id));\n     let ValueRef llfndecl = cx.item_ids.get(variant.id);\n \n-    auto fcx = new_fn_ctxt(cx, cx.path, llfndecl);\n+    auto fcx = new_fn_ctxt(cx, llfndecl);\n     create_llargs_for_fn_args(fcx, ast.proto_fn,\n                               none[TypeRef], ret_ty_of_fn(variant.ann),\n                               fn_args, ty_params);"}]}