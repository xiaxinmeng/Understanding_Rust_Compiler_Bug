{"sha": "b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZTM0NDYyMmMxMmJkMjVkNzNiZmM1YTI4NDRlOTY3MDViZjhkOGE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T23:03:19Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-12-09T23:03:19Z"}, "message": "Add a type abbreviation and redo first pass of collect_item_types to collect across the whole crate, not just top level.", "tree": {"sha": "8e5729aec70fbda4c9fc9f7f8d049fb93e721003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e5729aec70fbda4c9fc9f7f8d049fb93e721003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "html_url": "https://github.com/rust-lang/rust/commit/b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7e344622c12bd25d73bfc5a2844e96705bf8d8a/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876282791e36c482676aeeaee722f5038126e175", "url": "https://api.github.com/repos/rust-lang/rust/commits/876282791e36c482676aeeaee722f5038126e175", "html_url": "https://github.com/rust-lang/rust/commit/876282791e36c482676aeeaee722f5038126e175"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "3692b7a704f2de381084f43fc7ec50a3c03f76dd", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7e344622c12bd25d73bfc5a2844e96705bf8d8a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7e344622c12bd25d73bfc5a2844e96705bf8d8a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=b7e344622c12bd25d73bfc5a2844e96705bf8d8a", "patch": "@@ -353,22 +353,25 @@ fn type_err_to_str(&type_err err) -> str {\n // AST, along with a table mapping item IDs to their types.\n \n fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n-    fn trans_ty_item_id_to_ty(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+\n+    type ty_item_table = hashmap[ast.def_id,@ast.item];\n+\n+    fn trans_ty_item_id_to_ty(@ty_item_table id_to_ty_item,\n                               @ty_table item_to_ty,\n                               ast.def_id id) -> @ty {\n         check (id_to_ty_item.contains_key(id));\n         auto item = id_to_ty_item.get(id);\n         ret trans_ty_item_to_ty(id_to_ty_item, item_to_ty, item);\n     }\n \n-    fn trans_fn_arg_to_ty(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+    fn trans_fn_arg_to_ty(@ty_item_table id_to_ty_item,\n                           @ty_table item_to_ty,\n                           &ast.arg a) -> arg {\n         auto f = bind trans_ty_item_id_to_ty(id_to_ty_item, item_to_ty, _);\n         ret rec(mode=a.mode, ty=ast_ty_to_ty(f, a.ty));\n     }\n \n-    fn trans_ty_item_to_ty(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+    fn trans_ty_item_to_ty(@ty_item_table id_to_ty_item,\n                            @ty_table item_to_ty,\n                            @ast.item it) -> @ty {\n         alt (it.node) {\n@@ -414,7 +417,7 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n         }\n     }\n \n-    fn get_tag_variant_types(@hashmap[ast.def_id,@ast.item] id_to_ty_item,\n+    fn get_tag_variant_types(@ty_item_table id_to_ty_item,\n                              @ty_table item_to_ty,\n                              &ast.def_id tag_id,\n                              &vec[ast.variant] variants) -> vec[ast.variant] {\n@@ -452,14 +455,22 @@ fn collect_item_types(@ast.crate crate) -> tup(@ast.crate, @ty_table) {\n     // First pass: collect all type item IDs.\n     auto module = crate.node.module;\n     auto id_to_ty_item = @common.new_def_hash[@ast.item]();\n-    for (@ast.item item in module.items) {\n-        alt (item.node) {\n+    fn collect(&@ty_item_table id_to_ty_item, @ast.item i)\n+        -> @ty_item_table {\n+        alt (i.node) {\n             case (ast.item_ty(_, _, _, ?def_id, _)) {\n-                id_to_ty_item.insert(def_id, item);\n+                id_to_ty_item.insert(def_id, i);\n             }\n             case (_) { /* empty */ }\n         }\n+        ret id_to_ty_item;\n     }\n+    auto fld_1 = fold.new_identity_fold[@ty_item_table]();\n+    auto f = collect;\n+    fld_1 = @rec(update_env_for_item = f with *fld_1);\n+    fold.fold_crate[@ty_item_table](id_to_ty_item, fld_1, crate);\n+\n+\n \n     // Second pass: translate the types of all items.\n     auto item_to_ty = @common.new_def_hash[@ty]();"}]}