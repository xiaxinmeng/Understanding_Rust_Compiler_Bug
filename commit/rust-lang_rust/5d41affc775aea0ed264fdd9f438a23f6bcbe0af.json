{"sha": "5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "node_id": "C_kwDOAAsO6NoAKDVkNDFhZmZjNzc1YWVhMGVkMjY0ZmRkOWY0MzhhMjNmNmJjYmUwYWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T12:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-11T12:01:47Z"}, "message": "Auto merge of #14547 - Veykril:extract_adjust, r=Veykril\n\nfix: Fix receiver adjustments for extract_variable assist", "tree": {"sha": "b7de57e073279976ce9eef18944fc9ad55c34892", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7de57e073279976ce9eef18944fc9ad55c34892"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "html_url": "https://github.com/rust-lang/rust/commit/5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5d41affc775aea0ed264fdd9f438a23f6bcbe0af/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f443076a662175f9d71f03607e625531743688", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f443076a662175f9d71f03607e625531743688", "html_url": "https://github.com/rust-lang/rust/commit/f9f443076a662175f9d71f03607e625531743688"}, {"sha": "72d47144e834f1a20a2797dbbe4a57edc7a35da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/72d47144e834f1a20a2797dbbe4a57edc7a35da4", "html_url": "https://github.com/rust-lang/rust/commit/72d47144e834f1a20a2797dbbe4a57edc7a35da4"}], "stats": {"total": 59, "additions": 32, "deletions": 27}, "files": [{"sha": "014c23197face98e68e03c32ec31aa835290bde6", "filename": "crates/ide-assists/src/handlers/extract_variable.rs", "status": "modified", "additions": 32, "deletions": 26, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/5d41affc775aea0ed264fdd9f438a23f6bcbe0af/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d41affc775aea0ed264fdd9f438a23f6bcbe0af/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_variable.rs?ref=5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "patch": "@@ -1,3 +1,4 @@\n+use hir::TypeInfo;\n use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode},\n@@ -46,21 +47,24 @@ pub(crate) fn extract_variable(acc: &mut Assists, ctx: &AssistContext<'_>) -> Op\n         .take_while(|it| ctx.selection_trimmed().contains_range(it.text_range()))\n         .find_map(valid_target_expr)?;\n \n-    if let Some(ty_info) = ctx.sema.type_of_expr(&to_extract) {\n-        if ty_info.adjusted().is_unit() {\n-            return None;\n-        }\n+    let ty = ctx.sema.type_of_expr(&to_extract).map(TypeInfo::adjusted);\n+    if matches!(&ty, Some(ty_info) if ty_info.is_unit()) {\n+        return None;\n     }\n \n-    let reference_modifier = match get_receiver_type(ctx, &to_extract) {\n+    let parent = to_extract.syntax().parent().and_then(ast::Expr::cast);\n+    let needs_adjust = parent\n+        .as_ref()\n+        .map_or(false, |it| matches!(it, ast::Expr::FieldExpr(_) | ast::Expr::MethodCallExpr(_)));\n+\n+    let reference_modifier = match ty.filter(|_| needs_adjust) {\n         Some(receiver_type) if receiver_type.is_mutable_reference() => \"&mut \",\n         Some(receiver_type) if receiver_type.is_reference() => \"&\",\n         _ => \"\",\n     };\n \n-    let parent_ref_expr = to_extract.syntax().parent().and_then(ast::RefExpr::cast);\n-    let var_modifier = match parent_ref_expr {\n-        Some(expr) if expr.mut_token().is_some() => \"mut \",\n+    let var_modifier = match parent {\n+        Some(ast::Expr::RefExpr(expr)) if expr.mut_token().is_some() => \"mut \",\n         _ => \"\",\n     };\n \n@@ -164,22 +168,6 @@ fn valid_target_expr(node: SyntaxNode) -> Option<ast::Expr> {\n     }\n }\n \n-fn get_receiver_type(ctx: &AssistContext<'_>, expression: &ast::Expr) -> Option<hir::Type> {\n-    let receiver = get_receiver(expression.clone())?;\n-    Some(ctx.sema.type_of_expr(&receiver)?.original())\n-}\n-\n-/// In the expression `a.b.c.x()`, find `a`\n-fn get_receiver(expression: ast::Expr) -> Option<ast::Expr> {\n-    match expression {\n-        ast::Expr::FieldExpr(field) if field.expr().is_some() => {\n-            let nested_expression = &field.expr()?;\n-            get_receiver(nested_expression.to_owned())\n-        }\n-        _ => Some(expression),\n-    }\n-}\n-\n #[derive(Debug)]\n enum Anchor {\n     Before(SyntaxNode),\n@@ -944,6 +932,11 @@ struct S {\n     vec: Vec<u8>\n }\n \n+struct Vec<T>;\n+impl<T> Vec<T> {\n+    fn push(&mut self, _:usize) {}\n+}\n+\n fn foo(s: &mut S) {\n     $0s.vec$0.push(0);\n }\"#,\n@@ -952,6 +945,11 @@ struct S {\n     vec: Vec<u8>\n }\n \n+struct Vec<T>;\n+impl<T> Vec<T> {\n+    fn push(&mut self, _:usize) {}\n+}\n+\n fn foo(s: &mut S) {\n     let $0vec = &mut s.vec;\n     vec.push(0);\n@@ -973,6 +971,10 @@ struct X {\n struct S {\n     vec: Vec<u8>\n }\n+struct Vec<T>;\n+impl<T> Vec<T> {\n+    fn push(&mut self, _:usize) {}\n+}\n \n fn foo(f: &mut Y) {\n     $0f.field.field.vec$0.push(0);\n@@ -987,6 +989,10 @@ struct X {\n struct S {\n     vec: Vec<u8>\n }\n+struct Vec<T>;\n+impl<T> Vec<T> {\n+    fn push(&mut self, _:usize) {}\n+}\n \n fn foo(f: &mut Y) {\n     let $0vec = &mut f.field.field.vec;\n@@ -1123,7 +1129,7 @@ struct S {\n }\n \n fn foo(s: S) {\n-    let $0x = s.sub;\n+    let $0x = &s.sub;\n     x.do_thing();\n }\"#,\n         );\n@@ -1189,7 +1195,7 @@ impl X {\n \n fn foo() {\n     let local = &mut S::new();\n-    let $0x = &mut local.sub;\n+    let $0x = &local.sub;\n     x.do_thing();\n }\"#,\n         );"}, {"sha": "fe4cbfc88672d6548ea3c00d38876bb3ad22b931", "filename": "crates/project-model/src/build_scripts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5d41affc775aea0ed264fdd9f438a23f6bcbe0af/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5d41affc775aea0ed264fdd9f438a23f6bcbe0af/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fbuild_scripts.rs?ref=5d41affc775aea0ed264fdd9f438a23f6bcbe0af", "patch": "@@ -415,7 +415,6 @@ impl WorkspaceBuildScripts {\n                     let dir_entry = entry.ok()?;\n                     if dir_entry.file_type().ok()?.is_file() {\n                         let path = dir_entry.path();\n-                        tracing::info!(\"p{:?}\", path);\n                         let extension = path.extension()?;\n                         if extension == std::env::consts::DLL_EXTENSION {\n                             let name = path.file_stem()?.to_str()?.split_once('-')?.0.to_owned();"}]}