{"sha": "bf5ec797255f95b7912c612942f6ece27b809d32", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNWVjNzk3MjU1Zjk1Yjc5MTJjNjEyOTQyZjZlY2UyN2I4MDlkMzI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T11:55:46Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-12-06T11:55:46Z"}, "message": "miri: import ty::Ty directly.", "tree": {"sha": "c7d18f65101541b2e3224d7ba0eac2606c7714ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7d18f65101541b2e3224d7ba0eac2606c7714ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf5ec797255f95b7912c612942f6ece27b809d32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf5ec797255f95b7912c612942f6ece27b809d32", "html_url": "https://github.com/rust-lang/rust/commit/bf5ec797255f95b7912c612942f6ece27b809d32", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf5ec797255f95b7912c612942f6ece27b809d32/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42a534c20a2185f93effecb8f818e1220fd4a565", "url": "https://api.github.com/repos/rust-lang/rust/commits/42a534c20a2185f93effecb8f818e1220fd4a565", "html_url": "https://github.com/rust-lang/rust/commit/42a534c20a2185f93effecb8f818e1220fd4a565"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "e6d163df4d455f79a7688d7f2842895685f7b6d9", "filename": "src/librustc/mir/interpret/cast.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fcast.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -1,4 +1,4 @@\n-use ty::{self, Ty};\n+use ty::Ty;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n \n use rustc_const_math::ConstFloat;\n@@ -37,7 +37,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         }\n     }\n \n-    fn cast_from_signed_int(&self, val: i128, ty: ty::Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n+    fn cast_from_signed_int(&self, val: i128, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         self.cast_from_int(val as u128, ty, val < 0)\n     }\n \n@@ -71,7 +71,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     fn cast_from_int(\n         &self,\n         v: u128,\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         negative: bool,\n     ) -> EvalResult<'tcx, PrimVal> {\n         trace!(\"cast_from_int: {}, {}, {}\", v, ty, negative);"}, {"sha": "9f6b303e4e0309921c5a9f4f2c8007dbf8073fc4", "filename": "src/librustc/mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fconst_eval.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -274,7 +274,7 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n \n     fn box_alloc<'a>(\n         _ecx: &mut EvalContext<'a, 'tcx, Self>,\n-        _ty: ty::Ty<'tcx>,\n+        _ty: Ty<'tcx>,\n         _dest: Place,\n     ) -> EvalResult<'tcx> {\n         Err("}, {"sha": "a864b7f08f56a31e5657695dd87221d7f3c2512a", "filename": "src/librustc/mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Feval_context.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -346,7 +346,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n     /// the value has to be a fat pointer, and we only care about the \"extra\" data in it.\n     pub fn size_and_align_of_dst(\n         &mut self,\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         value: Value,\n     ) -> EvalResult<'tcx, (Size, Align)> {\n         let layout = self.layout_of(ty)?;"}, {"sha": "65edbea1e5d294680fc9f681dc1e5d2a35e52a04", "filename": "src/librustc/mir/interpret/machine.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmachine.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -4,7 +4,8 @@\n \n use super::{EvalResult, EvalContext, Place, PrimVal, ValTy};\n \n-use {mir, ty};\n+use mir;\n+use ty::{self, Ty};\n use syntax::codemap::Span;\n use syntax::ast::Mutability;\n \n@@ -60,9 +61,9 @@ pub trait Machine<'tcx>: Sized {\n         ecx: &EvalContext<'a, 'tcx, Self>,\n         bin_op: mir::BinOp,\n         left: PrimVal,\n-        left_ty: ty::Ty<'tcx>,\n+        left_ty: Ty<'tcx>,\n         right: PrimVal,\n-        right_ty: ty::Ty<'tcx>,\n+        right_ty: Ty<'tcx>,\n     ) -> EvalResult<'tcx, Option<(PrimVal, bool)>>;\n \n     /// Called when trying to mark machine defined `MemoryKinds` as static\n@@ -73,7 +74,7 @@ pub trait Machine<'tcx>: Sized {\n     /// Returns a pointer to the allocated memory\n     fn box_alloc<'a>(\n         ecx: &mut EvalContext<'a, 'tcx, Self>,\n-        ty: ty::Ty<'tcx>,\n+        ty: Ty<'tcx>,\n         dest: Place,\n     ) -> EvalResult<'tcx>;\n "}, {"sha": "a903c9e06e1618845f56b9bdeec656544caaf8e6", "filename": "src/librustc/mir/interpret/terminator/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fterminator%2Fmod.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -1,5 +1,5 @@\n use mir;\n-use ty::{self, TypeVariants};\n+use ty::{self, Ty};\n use ty::layout::LayoutOf;\n use syntax::codemap::Span;\n use syntax::abi::Abi;\n@@ -177,16 +177,16 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         sig: ty::FnSig<'tcx>,\n         real_sig: ty::FnSig<'tcx>,\n     ) -> EvalResult<'tcx, bool> {\n-        fn check_ty_compat<'tcx>(ty: ty::Ty<'tcx>, real_ty: ty::Ty<'tcx>) -> bool {\n+        fn check_ty_compat<'tcx>(ty: Ty<'tcx>, real_ty: Ty<'tcx>) -> bool {\n             if ty == real_ty {\n                 return true;\n             } // This is actually a fast pointer comparison\n             return match (&ty.sty, &real_ty.sty) {\n                 // Permit changing the pointer type of raw pointers and references as well as\n                 // mutability of raw pointers.\n                 // TODO: Should not be allowed when fat pointers are involved.\n-                (&TypeVariants::TyRawPtr(_), &TypeVariants::TyRawPtr(_)) => true,\n-                (&TypeVariants::TyRef(_, _), &TypeVariants::TyRef(_, _)) => {\n+                (&ty::TyRawPtr(_), &ty::TyRawPtr(_)) => true,\n+                (&ty::TyRef(_, _), &ty::TyRef(_, _)) => {\n                     ty.is_mutable_pointer() == real_ty.is_mutable_pointer()\n                 }\n                 // rule out everything else\n@@ -220,7 +220,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                     // Second argument must be a tuple matching the argument list of sig\n                     let snd_ty = real_sig.inputs_and_output[1];\n                     match snd_ty.sty {\n-                        TypeVariants::TyTuple(tys, _) if sig.inputs().len() == tys.len() =>\n+                        ty::TyTuple(tys, _) if sig.inputs().len() == tys.len() =>\n                             if sig.inputs().iter().zip(tys).all(|(ty, real_ty)| check_ty_compat(ty, real_ty)) {\n                                 return Ok(true)\n                             },"}, {"sha": "86ad5399e8427c080a6317e07ba5d3d0bed03b2d", "filename": "src/librustc/mir/interpret/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf5ec797255f95b7912c612942f6ece27b809d32/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalidation.rs?ref=bf5ec797255f95b7912c612942f6ece27b809d32", "patch": "@@ -337,7 +337,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         base: Place,\n         mut layout: ty::layout::TyLayout<'tcx>,\n         i: usize,\n-    ) -> EvalResult<'tcx, ty::Ty<'tcx>> {\n+    ) -> EvalResult<'tcx, Ty<'tcx>> {\n         match base {\n             Place::Ptr { extra: PlaceExtra::DowncastVariant(variant_index), .. } => {\n                 layout = layout.for_variant(&self, variant_index);"}]}