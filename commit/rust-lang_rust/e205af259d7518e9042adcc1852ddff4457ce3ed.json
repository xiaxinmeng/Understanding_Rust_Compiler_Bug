{"sha": "e205af259d7518e9042adcc1852ddff4457ce3ed", "node_id": "C_kwDOAAsO6NoAKGUyMDVhZjI1OWQ3NTE4ZTkwNDJhZGNjMTg1MmRkZmY0NDU3Y2UzZWQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-13T14:43:36Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-04-25T09:39:58Z"}, "message": "Prefer test duped crates for ide features", "tree": {"sha": "12b95b7be6127d8f68eabce87d14153d3e1f1695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12b95b7be6127d8f68eabce87d14153d3e1f1695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e205af259d7518e9042adcc1852ddff4457ce3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e205af259d7518e9042adcc1852ddff4457ce3ed", "html_url": "https://github.com/rust-lang/rust/commit/e205af259d7518e9042adcc1852ddff4457ce3ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e205af259d7518e9042adcc1852ddff4457ce3ed/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4c7a87755d2d4abfb957ef98a1368a359154917", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4c7a87755d2d4abfb957ef98a1368a359154917", "html_url": "https://github.com/rust-lang/rust/commit/a4c7a87755d2d4abfb957ef98a1368a359154917"}], "stats": {"total": 184, "additions": 65, "deletions": 119}, "files": [{"sha": "0e384a2e427ca143afeea178b8130e55aa920248", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -87,6 +87,7 @@ name = \"base-db\"\n version = \"0.0.0\"\n dependencies = [\n  \"cfg\",\n+ \"indexmap\",\n  \"la-arena\",\n  \"profile\",\n  \"rustc-hash\",\n@@ -579,6 +580,7 @@ dependencies = [\n  \"hir-def\",\n  \"hir-expand\",\n  \"hkalbasi-rustc-ap-rustc_index\",\n+ \"indexmap\",\n  \"intern\",\n  \"itertools\",\n  \"la-arena\","}, {"sha": "3c0aedce14757a030d918b19cfa997171cdf5c24", "filename": "crates/base-db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fbase-db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fbase-db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2FCargo.toml?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -14,6 +14,7 @@ doctest = false\n [dependencies]\n salsa = \"0.17.0-pre.2\"\n rustc-hash = \"1.1.0\"\n+indexmap = \"1.6.0\"\n \n la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n "}, {"sha": "7593135c5c46b6b73a0efb208b081807455616d4", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -6,9 +6,10 @@ mod input;\n mod change;\n pub mod fixture;\n \n-use std::{panic, sync::Arc};\n+use std::{hash::BuildHasherDefault, panic, sync::Arc};\n \n-use rustc_hash::FxHashSet;\n+use indexmap::IndexSet;\n+use rustc_hash::FxHasher;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n@@ -59,7 +60,10 @@ pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<str>;\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId>;\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n+    fn relevant_crates(\n+        &self,\n+        file_id: FileId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -99,10 +103,16 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n \n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n+    fn source_root_crates(\n+        &self,\n+        id: SourceRootId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>>;\n }\n \n-fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<CrateId>> {\n+fn source_root_crates(\n+    db: &dyn SourceDatabaseExt,\n+    id: SourceRootId,\n+) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n     let graph = db.crate_graph();\n     let res = graph\n         .iter()\n@@ -128,7 +138,10 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         source_root.resolve_path(path)\n     }\n \n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(\n+        &self,\n+        file_id: FileId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n         let _p = profile::span(\"relevant_crates\");\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)"}, {"sha": "5a186466bc45157e1022e3aba81b839d0623c046", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -1,7 +1,9 @@\n //! Database used for testing `hir_def`.\n \n use std::{\n-    fmt, panic,\n+    fmt,\n+    hash::BuildHasherDefault,\n+    panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -11,7 +13,8 @@ use base_db::{\n     Upcast,\n };\n use hir_expand::{db::ExpandDatabase, InFile};\n-use rustc_hash::FxHashSet;\n+use indexmap::IndexSet;\n+use rustc_hash::FxHasher;\n use syntax::{algo, ast, AstNode};\n \n use crate::{\n@@ -77,7 +80,10 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(\n+        &self,\n+        file_id: FileId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "7c153e28d0f24dbe094b2dbb4062e4901964dc27", "filename": "crates/hir-ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2FCargo.toml?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -30,6 +30,7 @@ la-arena = { version = \"0.3.0\", path = \"../../lib/la-arena\" }\n once_cell = \"1.17.0\"\n typed-arena = \"2.0.1\"\n rustc_index = { version = \"0.0.20221221\", package = \"hkalbasi-rustc-ap-rustc_index\", default-features = false }\n+indexmap = \"1.6.0\"\n \n # local deps\n stdx.workspace = true"}, {"sha": "7525106fd095f7a682458c8b891e59c3e4a3b4c7", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -1,7 +1,9 @@\n //! Database used for testing `hir`.\n \n use std::{\n-    fmt, panic,\n+    fmt,\n+    hash::BuildHasherDefault,\n+    panic,\n     sync::{Arc, Mutex},\n };\n \n@@ -11,7 +13,8 @@ use base_db::{\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::ExpandDatabase;\n-use rustc_hash::FxHashSet;\n+use indexmap::IndexSet;\n+use rustc_hash::FxHasher;\n use stdx::hash::NoHashHashMap;\n use syntax::TextRange;\n use test_utils::extract_annotations;\n@@ -82,7 +85,10 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(\n+        &self,\n+        file_id: FileId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "12257247c873a2514f8f6303c2564f5e319a0ba8", "filename": "crates/hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -119,7 +119,9 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn file_to_def(&self, file: FileId) -> SmallVec<[ModuleId; 1]> {\n         let _p = profile::span(\"SourceBinder::to_module_def\");\n         let mut mods = SmallVec::new();\n-        for &crate_id in self.db.relevant_crates(file).iter() {\n+        // HACK: We iterate in reverse so that dev-dependency duplicated crates appear first in this\n+        // Most code only deals with one module and we want to prefer the test enabled code where possible\n+        for &crate_id in self.db.relevant_crates(file).iter().rev() {\n             // FIXME: inner items\n             let crate_def_map = self.db.crate_def_map(crate_id);\n             mods.extend("}, {"sha": "879dbb7450741dd97e8742c8ea3d676aae8d1be0", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -43,7 +43,7 @@ pub mod syntax_helpers {\n     pub use parser::LexedStr;\n }\n \n-use std::{fmt, mem::ManuallyDrop, sync::Arc};\n+use std::{fmt, hash::BuildHasherDefault, mem::ManuallyDrop, sync::Arc};\n \n use base_db::{\n     salsa::{self, Durability},\n@@ -53,6 +53,7 @@ use hir::{\n     db::{DefDatabase, ExpandDatabase, HirDatabase},\n     symbols::FileSymbolKind,\n };\n+use indexmap::IndexSet;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n@@ -119,7 +120,10 @@ impl FileLoader for RootDatabase {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(\n+        &self,\n+        file_id: FileId,\n+    ) -> Arc<IndexSet<CrateId, BuildHasherDefault<FxHasher>>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "065b25d7463d35d3d1e8ef33ecc114fd81a79fa3", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -938,7 +938,7 @@ fn cargo_to_crate_graph(\n     // Get all dependencies of the workspace members that are used as dev-dependencies\n     for pkg in cargo.packages() {\n         for dep in &cargo[pkg].dependencies {\n-            if dep.kind == DepKind::Dev {\n+            if dep.kind == DepKind::Dev && cargo[dep.pkg].is_member {\n                 work.push(dep.pkg);\n             }\n         }\n@@ -955,6 +955,10 @@ fn cargo_to_crate_graph(\n                 }\n                 v.insert({\n                     let duped = crate_graph.duplicate(to);\n+                    tracing::info!(\n+                        \"duplicating workspace crate {:?} as it is being used as a dev-dependency: {to:?} -> {duped:?}\",\n+                        crate_graph[to].display_name\n+                    );\n                     if let Some(proc_macro) = proc_macros.get(&to).cloned() {\n                         proc_macros.insert(duped, proc_macro);\n                     }\n@@ -1008,7 +1012,12 @@ fn cargo_to_crate_graph(\n \n     for (&pkg, targets) in &pkg_crates {\n         for &(krate, _) in targets {\n-            if test_dupes.get(&krate).is_some() {\n+            if let Some(&dupe) = test_dupes.get(&krate) {\n+                tracing::info!(\n+                    \"{krate:?} {:?} {dupe:?} {:?}\",\n+                    crate_graph[krate].cfg_options,\n+                    crate_graph[dupe].cfg_options\n+                );\n                 // if the crate got duped as a dev-dep the dupe already has test set\n                 continue;\n             }"}, {"sha": "107094025147dfeb19cc18e140f50e45c42b5fa2", "filename": "crates/project-model/test_data/cargo_dev_dependencies-crate-graph.txt", "status": "modified", "additions": 4, "deletions": 102, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "raw_url": "https://github.com/rust-lang/rust/raw/e205af259d7518e9042adcc1852ddff4457ce3ed/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Ftest_data%2Fcargo_dev_dependencies-crate-graph.txt?ref=e205af259d7518e9042adcc1852ddff4457ce3ed", "patch": "@@ -244,14 +244,14 @@\n                 prelude: true,\n             },\n             Dependency {\n-                crate_id: Idx::<CrateData>(8),\n+                crate_id: Idx::<CrateData>(7),\n                 name: CrateName(\n                     \"ra_playground\",\n                 ),\n                 prelude: true,\n             },\n             Dependency {\n-                crate_id: Idx::<CrateData>(7),\n+                crate_id: Idx::<CrateData>(5),\n                 name: CrateName(\n                     \"regex\",\n                 ),\n@@ -328,14 +328,14 @@\n                 prelude: true,\n             },\n             Dependency {\n-                crate_id: Idx::<CrateData>(8),\n+                crate_id: Idx::<CrateData>(7),\n                 name: CrateName(\n                     \"ra_playground\",\n                 ),\n                 prelude: true,\n             },\n             Dependency {\n-                crate_id: Idx::<CrateData>(7),\n+                crate_id: Idx::<CrateData>(5),\n                 name: CrateName(\n                     \"regex\",\n                 ),\n@@ -552,104 +552,6 @@\n         channel: None,\n     },\n     7: CrateData {\n-        root_file_id: FileId(\n-            6,\n-        ),\n-        edition: Edition2018,\n-        version: Some(\n-            \"1.7.3\",\n-        ),\n-        display_name: Some(\n-            CrateDisplayName {\n-                crate_name: CrateName(\n-                    \"regex\",\n-                ),\n-                canonical_name: \"regex\",\n-            },\n-        ),\n-        cfg_options: CfgOptions(\n-            [\n-                \"debug_assertions\",\n-                \"feature=aho-corasick\",\n-                \"feature=default\",\n-                \"feature=memchr\",\n-                \"feature=perf\",\n-                \"feature=perf-cache\",\n-                \"feature=perf-dfa\",\n-                \"feature=perf-inline\",\n-                \"feature=perf-literal\",\n-                \"feature=std\",\n-                \"feature=unicode\",\n-                \"feature=unicode-age\",\n-                \"feature=unicode-bool\",\n-                \"feature=unicode-case\",\n-                \"feature=unicode-gencat\",\n-                \"feature=unicode-perl\",\n-                \"feature=unicode-script\",\n-                \"feature=unicode-segment\",\n-                \"test\",\n-            ],\n-        ),\n-        potential_cfg_options: Some(\n-            CfgOptions(\n-                [\n-                    \"debug_assertions\",\n-                    \"feature=aho-corasick\",\n-                    \"feature=default\",\n-                    \"feature=memchr\",\n-                    \"feature=pattern\",\n-                    \"feature=perf\",\n-                    \"feature=perf-cache\",\n-                    \"feature=perf-dfa\",\n-                    \"feature=perf-inline\",\n-                    \"feature=perf-literal\",\n-                    \"feature=std\",\n-                    \"feature=unicode\",\n-                    \"feature=unicode-age\",\n-                    \"feature=unicode-bool\",\n-                    \"feature=unicode-case\",\n-                    \"feature=unicode-gencat\",\n-                    \"feature=unicode-perl\",\n-                    \"feature=unicode-script\",\n-                    \"feature=unicode-segment\",\n-                    \"feature=unstable\",\n-                    \"feature=use_std\",\n-                ],\n-            ),\n-        ),\n-        env: Env {\n-            entries: {\n-                \"CARGO_PKG_LICENSE\": \"\",\n-                \"CARGO_PKG_VERSION_MAJOR\": \"1\",\n-                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/regex-1.7.3\",\n-                \"CARGO_PKG_VERSION\": \"1.7.3\",\n-                \"CARGO_PKG_AUTHORS\": \"\",\n-                \"CARGO_CRATE_NAME\": \"regex\",\n-                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                \"CARGO_PKG_NAME\": \"regex\",\n-                \"CARGO_PKG_VERSION_PATCH\": \"3\",\n-                \"CARGO\": \"cargo\",\n-                \"CARGO_PKG_REPOSITORY\": \"\",\n-                \"CARGO_PKG_VERSION_MINOR\": \"7\",\n-                \"CARGO_PKG_VERSION_PRE\": \"\",\n-            },\n-        },\n-        dependencies: [],\n-        origin: Library {\n-            repo: Some(\n-                \"https://github.com/rust-lang/regex\",\n-            ),\n-            name: \"regex\",\n-        },\n-        is_proc_macro: false,\n-        target_layout: Err(\n-            \"target_data_layout not loaded\",\n-        ),\n-        channel: None,\n-    },\n-    8: CrateData {\n         root_file_id: FileId(\n             4,\n         ),"}]}