{"sha": "c838351ba673c283564875226a2fc6bad0bc1ea1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MzgzNTFiYTY3M2MyODM1NjQ4NzUyMjZhMmZjNmJhZDBiYzFlYTE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-24T20:55:22Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-09-25T21:27:42Z"}, "message": "rustdoc: Implement stripping based on privacy\n\nThis will probably need to get tweaked once the privacy rules have been fully\nagreed on, but for now this has all of the infrastructure necessary for\nfiltering out private items.\n\nCloses #9410", "tree": {"sha": "cdf425851b6cec120c668b97a527ad0ce56957e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf425851b6cec120c668b97a527ad0ce56957e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c838351ba673c283564875226a2fc6bad0bc1ea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c838351ba673c283564875226a2fc6bad0bc1ea1", "html_url": "https://github.com/rust-lang/rust/commit/c838351ba673c283564875226a2fc6bad0bc1ea1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c838351ba673c283564875226a2fc6bad0bc1ea1/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acab4a8c8e3aef66a279d2d7f7c55ace2cece9fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/acab4a8c8e3aef66a279d2d7f7c55ace2cece9fc", "html_url": "https://github.com/rust-lang/rust/commit/acab4a8c8e3aef66a279d2d7f7c55ace2cece9fc"}], "stats": {"total": 96, "additions": 91, "deletions": 5}, "files": [{"sha": "8cbe1eed55af40b6a76eafa8dfcc8a4064eb9cdd", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=c838351ba673c283564875226a2fc6bad0bc1ea1", "patch": "@@ -15,6 +15,7 @@ use its = syntax::parse::token::ident_to_str;\n \n use syntax;\n use syntax::ast;\n+use syntax::ast_util;\n use syntax::attr::AttributeMethods;\n \n use std;\n@@ -283,7 +284,7 @@ impl Clean<Item> for ast::method {\n             attrs: self.attrs.clean(),\n             source: self.span.clean(),\n             id: self.self_id.clone(),\n-            visibility: None,\n+            visibility: self.vis.clean(),\n             inner: MethodItem(Method {\n                 generics: self.generics.clean(),\n                 self_: self.explicit_self.clean(),"}, {"sha": "6f05b042dba1c847c8af1d4bfb1f23ce05e81862", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c838351ba673c283564875226a2fc6bad0bc1ea1", "patch": "@@ -13,6 +13,7 @@ use std::local_data;\n use std::rt::io;\n \n use syntax::ast;\n+use syntax::ast_util;\n \n use clean;\n use html::render::{cache_key, current_location_key};"}, {"sha": "070c0e5d9864289627c83431206e08f0734da6cc", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c838351ba673c283564875226a2fc6bad0bc1ea1", "patch": "@@ -615,13 +615,21 @@ fn document(w: &mut io::Writer, item: &clean::Item) {\n fn item_module(w: &mut io::Writer, cx: &Context,\n                item: &clean::Item, items: &[clean::Item]) {\n     document(w, item);\n+    debug2!(\"{:?}\", items);\n     let mut indices = vec::from_fn(items.len(), |i| i);\n \n-    fn lt(i1: &clean::Item, i2: &clean::Item) -> bool {\n+    fn lt(i1: &clean::Item, i2: &clean::Item, idx1: uint, idx2: uint) -> bool {\n         if shortty(i1) == shortty(i2) {\n             return i1.name < i2.name;\n         }\n         match (&i1.inner, &i2.inner) {\n+            (&clean::ViewItemItem(ref a), &clean::ViewItemItem(ref b)) => {\n+                match (&a.inner, &b.inner) {\n+                    (&clean::ExternMod(*), _) => true,\n+                    (_, &clean::ExternMod(*)) => false,\n+                    _ => idx1 < idx2,\n+                }\n+            }\n             (&clean::ViewItemItem(*), _) => true,\n             (_, &clean::ViewItemItem(*)) => false,\n             (&clean::ModuleItem(*), _) => true,\n@@ -638,18 +646,19 @@ fn item_module(w: &mut io::Writer, cx: &Context,\n             (_, &clean::FunctionItem(*)) => false,\n             (&clean::TypedefItem(*), _) => true,\n             (_, &clean::TypedefItem(*)) => false,\n-            _ => false,\n+            _ => idx1 < idx2,\n         }\n     }\n \n+    debug2!(\"{:?}\", indices);\n     do sort::quick_sort(indices) |&i1, &i2| {\n-        lt(&items[i1], &items[i2])\n+        lt(&items[i1], &items[i2], i1, i2)\n     }\n \n+    debug2!(\"{:?}\", indices);\n     let mut curty = \"\";\n     for &idx in indices.iter() {\n         let myitem = &items[idx];\n-        if myitem.name.is_none() { loop }\n \n         let myty = shortty(myitem);\n         if myty != curty {"}, {"sha": "8376fa52882ad108857c0f4698d91842319792fa", "filename": "src/librustdoc/passes.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses.rs?ref=c838351ba673c283564875226a2fc6bad0bc1ea1", "patch": "@@ -46,6 +46,78 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n     (crate, None)\n }\n \n+/// Strip private items from the point of view of a crate or externally from a\n+/// crate, specified by the `xcrate` flag.\n+pub fn strip_private(crate: clean::Crate) -> plugins::PluginResult {\n+    struct Stripper;\n+    impl fold::DocFolder for Stripper {\n+        fn fold_item(&mut self, i: Item) -> Option<Item> {\n+            match i.inner {\n+                // These items can all get re-exported\n+                clean::TypedefItem(*) | clean::StaticItem(*) |\n+                clean::StructItem(*) | clean::EnumItem(*) |\n+                clean::TraitItem(*) | clean::FunctionItem(*) |\n+                clean::ViewItemItem(*) | clean::MethodItem(*) => {\n+                    // XXX: re-exported items should get surfaced in the docs as\n+                    //      well (using the output of resolve analysis)\n+                    if i.visibility != Some(ast::public) {\n+                        return None;\n+                    }\n+                }\n+\n+                // These are public-by-default (if the enum was public)\n+                clean::VariantItem(*) => {\n+                    if i.visibility == Some(ast::private) {\n+                        return None;\n+                    }\n+                }\n+\n+                // We show these regardless of whether they're public/private\n+                // because it's useful to see sometimes\n+                clean::StructFieldItem(*) => {}\n+\n+                // handled below\n+                clean::ModuleItem(*) => {}\n+\n+                // impls/tymethods have no control over privacy\n+                clean::ImplItem(*) | clean::TyMethodItem(*) => {}\n+            }\n+\n+            let fastreturn = match i.inner {\n+                // nothing left to do for traits (don't want to filter their\n+                // methods out, visibility controlled by the trait)\n+                clean::TraitItem(*) => true,\n+\n+                // implementations of traits are always public.\n+                clean::ImplItem(ref imp) if imp.trait_.is_some() => true,\n+\n+                _ => false,\n+            };\n+\n+            let i = if fastreturn {\n+                return Some(i);\n+            } else {\n+                self.fold_item_recur(i)\n+            };\n+\n+            match i {\n+                Some(i) => {\n+                    match i.inner {\n+                        // emptied modules/impls have no need to exist\n+                        clean::ModuleItem(ref m) if m.items.len() == 0 => None,\n+                        clean::ImplItem(ref i) if i.methods.len() == 0 => None,\n+                        _ => Some(i),\n+                    }\n+                }\n+                None => None,\n+            }\n+        }\n+    }\n+    let mut stripper = Stripper;\n+    let crate = stripper.fold_crate(crate);\n+    (crate, None)\n+}\n+\n pub fn unindent_comments(crate: clean::Crate) -> plugins::PluginResult {\n     struct CommentCleaner;\n     impl fold::DocFolder for CommentCleaner {"}, {"sha": "dd52058be8ac4c5f8cd42a1302b49ef7cb38b5b9", "filename": "src/librustdoc/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c838351ba673c283564875226a2fc6bad0bc1ea1/src%2Flibrustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Frustdoc.rs?ref=c838351ba673c283564875226a2fc6bad0bc1ea1", "patch": "@@ -56,11 +56,14 @@ static PASSES: &'static [Pass] = &[\n      \"removes excess indentation on comments in order for markdown to like it\"),\n     (\"collapse-docs\", passes::collapse_docs,\n      \"concatenates all document attributes into one document attribute\"),\n+    (\"strip-private\", passes::strip_private,\n+     \"strips all private items from a crate which cannot be seen externally\"),\n ];\n \n static DEFAULT_PASSES: &'static [&'static str] = &[\n     \"unindent-comments\",\n     \"collapse-docs\",\n+    \"strip-private\",\n ];\n \n local_data_key!(pub ctxtkey: @core::DocContext)"}]}