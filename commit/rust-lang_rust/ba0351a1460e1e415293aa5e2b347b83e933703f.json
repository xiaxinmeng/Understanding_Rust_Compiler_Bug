{"sha": "ba0351a1460e1e415293aa5e2b347b83e933703f", "node_id": "C_kwDOAAsO6NoAKGJhMDM1MWExNDYwZTFlNDE1MjkzYWE1ZTJiMzQ3YjgzZTkzMzcwM2Y", "commit": {"author": {"name": "Paul Gey", "email": "narpfel@gmx.de", "date": "2021-10-17T14:21:53Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2022-04-17T14:28:48Z"}, "message": "Preserve attributes for `imports_granularity=Item`\n\nFixes #5030", "tree": {"sha": "3be63ab695bf6b0dc5f702e2e134955b525b17b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3be63ab695bf6b0dc5f702e2e134955b525b17b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0351a1460e1e415293aa5e2b347b83e933703f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0351a1460e1e415293aa5e2b347b83e933703f", "html_url": "https://github.com/rust-lang/rust/commit/ba0351a1460e1e415293aa5e2b347b83e933703f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0351a1460e1e415293aa5e2b347b83e933703f/comments", "author": {"login": "narpfel", "id": 7093552, "node_id": "MDQ6VXNlcjcwOTM1NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/7093552?v=4", "gravatar_id": "", "url": "https://api.github.com/users/narpfel", "html_url": "https://github.com/narpfel", "followers_url": "https://api.github.com/users/narpfel/followers", "following_url": "https://api.github.com/users/narpfel/following{/other_user}", "gists_url": "https://api.github.com/users/narpfel/gists{/gist_id}", "starred_url": "https://api.github.com/users/narpfel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/narpfel/subscriptions", "organizations_url": "https://api.github.com/users/narpfel/orgs", "repos_url": "https://api.github.com/users/narpfel/repos", "events_url": "https://api.github.com/users/narpfel/events{/privacy}", "received_events_url": "https://api.github.com/users/narpfel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3f87fb9a629db8bf0c6e04604320cd028f79e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3f87fb9a629db8bf0c6e04604320cd028f79e8", "html_url": "https://github.com/rust-lang/rust/commit/4f3f87fb9a629db8bf0c6e04604320cd028f79e8"}], "stats": {"total": 80, "additions": 56, "deletions": 24}, "files": [{"sha": "485a72b85da4476c3f2380bf116c08c0b5678210", "filename": "src/imports.rs", "status": "modified", "additions": 39, "deletions": 13, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ba0351a1460e1e415293aa5e2b347b83e933703f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0351a1460e1e415293aa5e2b347b83e933703f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ba0351a1460e1e415293aa5e2b347b83e933703f", "patch": "@@ -10,6 +10,7 @@ use rustc_span::{\n \n use crate::comment::combine_strs_with_missing_comments;\n use crate::config::lists::*;\n+use crate::config::ImportGranularity;\n use crate::config::{Edition, IndentStyle};\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n@@ -182,15 +183,26 @@ impl UseSegment {\n     }\n }\n \n-pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -> Vec<UseTree> {\n+pub(crate) fn regroup_use_trees(\n+    use_trees: Vec<UseTree>,\n+    import_granularity: ImportGranularity,\n+) -> Vec<UseTree> {\n+    let merge_by = match import_granularity {\n+        ImportGranularity::Item => return flatten_use_trees(use_trees, ImportGranularity::Item),\n+        ImportGranularity::Preserve => return use_trees,\n+        ImportGranularity::Crate => SharedPrefix::Crate,\n+        ImportGranularity::Module => SharedPrefix::Module,\n+        ImportGranularity::One => SharedPrefix::One,\n+    };\n+\n     let mut result = Vec::with_capacity(use_trees.len());\n     for use_tree in use_trees {\n         if use_tree.has_comment() || use_tree.attrs.is_some() {\n             result.push(use_tree);\n             continue;\n         }\n \n-        for mut flattened in use_tree.flatten() {\n+        for mut flattened in use_tree.flatten(import_granularity) {\n             if let Some(tree) = result\n                 .iter_mut()\n                 .find(|tree| tree.share_prefix(&flattened, merge_by))\n@@ -208,10 +220,13 @@ pub(crate) fn merge_use_trees(use_trees: Vec<UseTree>, merge_by: SharedPrefix) -\n     result\n }\n \n-pub(crate) fn flatten_use_trees(use_trees: Vec<UseTree>) -> Vec<UseTree> {\n+fn flatten_use_trees(\n+    use_trees: Vec<UseTree>,\n+    import_granularity: ImportGranularity,\n+) -> Vec<UseTree> {\n     use_trees\n         .into_iter()\n-        .flat_map(UseTree::flatten)\n+        .flat_map(|tree| tree.flatten(import_granularity))\n         .map(UseTree::nest_trailing_self)\n         .collect()\n }\n@@ -581,7 +596,7 @@ impl UseTree {\n         }\n     }\n \n-    fn flatten(self) -> Vec<UseTree> {\n+    fn flatten(self, import_granularity: ImportGranularity) -> Vec<UseTree> {\n         if self.path.is_empty() {\n             return vec![self];\n         }\n@@ -595,15 +610,19 @@ impl UseTree {\n                 let prefix = &self.path[..self.path.len() - 1];\n                 let mut result = vec![];\n                 for nested_use_tree in list {\n-                    for flattend in &mut nested_use_tree.clone().flatten() {\n+                    for flattend in &mut nested_use_tree.clone().flatten(import_granularity) {\n                         let mut new_path = prefix.to_vec();\n                         new_path.append(&mut flattend.path);\n                         result.push(UseTree {\n                             path: new_path,\n                             span: self.span,\n                             list_item: None,\n                             visibility: self.visibility.clone(),\n-                            attrs: None,\n+                            // only retain attributes for `ImportGranularity::Item`\n+                            attrs: match import_granularity {\n+                                ImportGranularity::Item => self.attrs.clone(),\n+                                _ => None,\n+                            },\n                         });\n                     }\n                 }\n@@ -951,7 +970,7 @@ impl Rewrite for UseTree {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-pub(crate) enum SharedPrefix {\n+enum SharedPrefix {\n     Crate,\n     Module,\n     One,\n@@ -1106,7 +1125,7 @@ mod test {\n     macro_rules! test_merge {\n         ($by:ident, [$($input:expr),* $(,)*], [$($output:expr),* $(,)*]) => {\n             assert_eq!(\n-                merge_use_trees(parse_use_trees!($($input,)*), SharedPrefix::$by),\n+                regroup_use_trees(parse_use_trees!($($input,)*), ImportGranularity::$by),\n                 parse_use_trees!($($output,)*),\n             );\n         }\n@@ -1215,12 +1234,18 @@ mod test {\n     #[test]\n     fn test_flatten_use_trees() {\n         assert_eq!(\n-            flatten_use_trees(parse_use_trees![\"foo::{a::{b, c}, d::e}\"]),\n+            flatten_use_trees(\n+                parse_use_trees![\"foo::{a::{b, c}, d::e}\"],\n+                ImportGranularity::Item\n+            ),\n             parse_use_trees![\"foo::a::b\", \"foo::a::c\", \"foo::d::e\"]\n         );\n \n         assert_eq!(\n-            flatten_use_trees(parse_use_trees![\"foo::{self, a, b::{c, d}, e::*}\"]),\n+            flatten_use_trees(\n+                parse_use_trees![\"foo::{self, a, b::{c, d}, e::*}\"],\n+                ImportGranularity::Item\n+            ),\n             parse_use_trees![\n                 \"foo::{self}\",\n                 \"foo::a\",\n@@ -1234,12 +1259,13 @@ mod test {\n     #[test]\n     fn test_use_tree_flatten() {\n         assert_eq!(\n-            parse_use_tree(\"a::b::{c, d, e, f}\").flatten(),\n+            parse_use_tree(\"a::b::{c, d, e, f}\").flatten(ImportGranularity::Item),\n             parse_use_trees!(\"a::b::c\", \"a::b::d\", \"a::b::e\", \"a::b::f\",)\n         );\n \n         assert_eq!(\n-            parse_use_tree(\"a::b::{c::{d, e, f}, g, h::{i, j, k}}\").flatten(),\n+            parse_use_tree(\"a::b::{c::{d, e, f}, g, h::{i, j, k}}\")\n+                .flatten(ImportGranularity::Item),\n             parse_use_trees![\n                 \"a::b::c::d\",\n                 \"a::b::c::e\","}, {"sha": "f565612ded1841a2371f2e7802f08360881bf484", "filename": "src/reorder.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ba0351a1460e1e415293aa5e2b347b83e933703f/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0351a1460e1e415293aa5e2b347b83e933703f/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=ba0351a1460e1e415293aa5e2b347b83e933703f", "patch": "@@ -11,8 +11,8 @@ use std::cmp::{Ord, Ordering};\n use rustc_ast::ast;\n use rustc_span::{symbol::sym, Span};\n \n-use crate::config::{Config, GroupImportsTactic, ImportGranularity};\n-use crate::imports::{flatten_use_trees, merge_use_trees, SharedPrefix, UseSegment, UseTree};\n+use crate::config::{Config, GroupImportsTactic};\n+use crate::imports::{regroup_use_trees, UseSegment, UseTree};\n use crate::items::{is_mod_decl, rewrite_extern_crate, rewrite_mod};\n use crate::lists::{itemize_list, write_list, ListFormatting, ListItem};\n use crate::rewrite::RewriteContext;\n@@ -107,15 +107,8 @@ fn rewrite_reorderable_or_regroupable_items(\n             for (item, list_item) in normalized_items.iter_mut().zip(list_items) {\n                 item.list_item = Some(list_item.clone());\n             }\n-            normalized_items = match context.config.imports_granularity() {\n-                ImportGranularity::Crate => merge_use_trees(normalized_items, SharedPrefix::Crate),\n-                ImportGranularity::Module => {\n-                    merge_use_trees(normalized_items, SharedPrefix::Module)\n-                }\n-                ImportGranularity::Item => flatten_use_trees(normalized_items),\n-                ImportGranularity::One => merge_use_trees(normalized_items, SharedPrefix::One),\n-                ImportGranularity::Preserve => normalized_items,\n-            };\n+            normalized_items =\n+                regroup_use_trees(normalized_items, context.config.imports_granularity());\n \n             let mut regrouped_items = match context.config.group_imports() {\n                 GroupImportsTactic::Preserve | GroupImportsTactic::One => {"}, {"sha": "f367e79f01f6457ddf61ae561f217349db7dfcb3", "filename": "tests/source/issue-5030.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ba0351a1460e1e415293aa5e2b347b83e933703f/tests%2Fsource%2Fissue-5030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0351a1460e1e415293aa5e2b347b83e933703f/tests%2Fsource%2Fissue-5030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-5030.rs?ref=ba0351a1460e1e415293aa5e2b347b83e933703f", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-imports_granularity: Item\n+\n+#[cfg(feature = \"foo\")]\n+use std::collections::{\n+    HashMap,\n+    HashSet,\n+};"}, {"sha": "b371331ed0096807b6d0c2bd2679e199069a45ae", "filename": "tests/target/issue-5030.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ba0351a1460e1e415293aa5e2b347b83e933703f/tests%2Ftarget%2Fissue-5030.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0351a1460e1e415293aa5e2b347b83e933703f/tests%2Ftarget%2Fissue-5030.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5030.rs?ref=ba0351a1460e1e415293aa5e2b347b83e933703f", "patch": "@@ -0,0 +1,6 @@\n+// rustfmt-imports_granularity: Item\n+\n+#[cfg(feature = \"foo\")]\n+use std::collections::HashMap;\n+#[cfg(feature = \"foo\")]\n+use std::collections::HashSet;"}]}