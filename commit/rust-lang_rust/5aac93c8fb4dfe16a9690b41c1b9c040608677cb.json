{"sha": "5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYWM5M2M4ZmI0ZGZlMTZhOTY5MGI0MWMxYjljMDQwNjA4Njc3Y2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T23:13:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-16T23:13:30Z"}, "message": "Auto merge of #53910 - IsaacWoods:unify_cvoid, r=SimonSapin\n\nMove std::os::raw::c_void into libcore and re-export in libstd\n\nImplements the first part of [RFC 2521](https://github.com/rust-lang/rfcs/pull/2521).\n\ncc #53856", "tree": {"sha": "859a2d2bf65630a6d0a1a0e9cb5db84d6ee95370", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/859a2d2bf65630a6d0a1a0e9cb5db84d6ee95370"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "html_url": "https://github.com/rust-lang/rust/commit/5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690", "html_url": "https://github.com/rust-lang/rust/commit/cb6d2dfa8923902b0992a1522dc4a45a9d3ba690"}, {"sha": "23e345bc0c79c43753b224ab127f5c06d553e4c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e345bc0c79c43753b224ab127f5c06d553e4c4", "html_url": "https://github.com/rust-lang/rust/commit/23e345bc0c79c43753b224ab127f5c06d553e4c4"}], "stats": {"total": 83, "additions": 48, "deletions": 35}, "files": [{"sha": "a03756f9c229f8e4104755cdc4b7383a30dcb9ab", "filename": "src/libcore/ffi.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "patch": "@@ -0,0 +1,42 @@\n+#![stable(feature = \"\", since = \"1.30.0\")]\n+\n+#![allow(non_camel_case_types)]\n+\n+//! Utilities related to FFI bindings.\n+\n+use ::fmt;\n+\n+/// Equivalent to C's `void` type when used as a [pointer].\n+///\n+/// In essence, `*const c_void` is equivalent to C's `const void*`\n+/// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n+/// *not* the same as C's `void` return type, which is Rust's `()` type.\n+///\n+/// Ideally, this type would be equivalent to [`!`], but currently it may\n+/// be more ideal to use `c_void` for FFI purposes.\n+///\n+/// [`!`]: ../../std/primitive.never.html\n+/// [pointer]: ../../std/primitive.pointer.html\n+// NB: For LLVM to recognize the void pointer type and by extension\n+//     functions like malloc(), we need to have it represented as i8* in\n+//     LLVM bitcode. The enum used here ensures this and prevents misuse\n+//     of the \"raw\" type by only having private variants.. We need two\n+//     variants, because the compiler complains about the repr attribute\n+//     otherwise.\n+#[repr(u8)]\n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub enum c_void {\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n+    #[doc(hidden)] __variant1,\n+    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n+               issue = \"0\")]\n+    #[doc(hidden)] __variant2,\n+}\n+\n+#[stable(feature = \"std_debug\", since = \"1.16.0\")]\n+impl fmt::Debug for c_void {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.pad(\"c_void\")\n+    }\n+}"}, {"sha": "675e73e952cc2ca011c055a949d38c75e99b18e2", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "patch": "@@ -202,6 +202,7 @@ pub mod iter;\n pub mod option;\n pub mod raw;\n pub mod result;\n+pub mod ffi;\n \n pub mod slice;\n pub mod str;"}, {"sha": "a3345df5e0d8563e2e3351e3682e99e809fe44b1", "filename": "src/libstd/ffi/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibstd%2Fffi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibstd%2Fffi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fmod.rs?ref=5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "patch": "@@ -171,5 +171,8 @@ pub use self::c_str::{FromBytesWithNulError};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::os_str::{OsString, OsStr};\n \n+#[stable(feature = \"raw_os\", since = \"1.1.0\")]\n+pub use core::ffi::c_void;\n+\n mod c_str;\n mod os_str;"}, {"sha": "95faf3a5dd63d351460c7f70fa2a770e7d711690", "filename": "src/libstd/os/raw/mod.rs", "status": "modified", "additions": 2, "deletions": 35, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5aac93c8fb4dfe16a9690b41c1b9c040608677cb/src%2Flibstd%2Fos%2Fraw%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw%2Fmod.rs?ref=5aac93c8fb4dfe16a9690b41c1b9c040608677cb", "patch": "@@ -18,8 +18,6 @@\n \n #![stable(feature = \"raw_os\", since = \"1.1.0\")]\n \n-use fmt;\n-\n #[doc(include = \"os/raw/char.md\")]\n #[cfg(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n                                        target_arch = \"arm\",\n@@ -83,40 +81,9 @@ use fmt;\n #[doc(include = \"os/raw/double.md\")]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_double = f64;\n \n-/// Equivalent to C's `void` type when used as a [pointer].\n-///\n-/// In essence, `*const c_void` is equivalent to C's `const void*`\n-/// and `*mut c_void` is equivalent to C's `void*`. That said, this is\n-/// *not* the same as C's `void` return type, which is Rust's `()` type.\n-///\n-/// Ideally, this type would be equivalent to [`!`], but currently it may\n-/// be more ideal to use `c_void` for FFI purposes.\n-///\n-/// [`!`]: ../../primitive.never.html\n-/// [pointer]: ../../primitive.pointer.html\n-// NB: For LLVM to recognize the void pointer type and by extension\n-//     functions like malloc(), we need to have it represented as i8* in\n-//     LLVM bitcode. The enum used here ensures this and prevents misuse\n-//     of the \"raw\" type by only having private variants.. We need two\n-//     variants, because the compiler complains about the repr attribute\n-//     otherwise.\n-#[repr(u8)]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")]\n-pub enum c_void {\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n-               issue = \"0\")]\n-    #[doc(hidden)] __variant1,\n-    #[unstable(feature = \"c_void_variant\", reason = \"should not have to exist\",\n-               issue = \"0\")]\n-    #[doc(hidden)] __variant2,\n-}\n-\n-#[stable(feature = \"std_debug\", since = \"1.16.0\")]\n-impl fmt::Debug for c_void {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        f.pad(\"c_void\")\n-    }\n-}\n+#[doc(no_inline)]\n+pub use core::ffi::c_void;\n \n #[cfg(test)]\n #[allow(unused_imports)]"}]}