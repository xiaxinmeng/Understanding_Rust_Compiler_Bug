{"sha": "a283f581839e17a3be4a828c95fa9e905e878ac4", "node_id": "C_kwDOAAsO6NoAKGEyODNmNTgxODM5ZTE3YTNiZTRhODI4Yzk1ZmE5ZTkwNWU4NzhhYzQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-18T19:51:33Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-08T03:36:30Z"}, "message": "Rename some suggestion/note functions\n\nWe really shouldn't be naming functions `fn check_*` unless they're\ndoing *typechecking*. It's especially misleading when we're doing this\ninside of HIR typeck.", "tree": {"sha": "d20e1639d1dea04cf8f139a56b8bfd60947e5ca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d20e1639d1dea04cf8f139a56b8bfd60947e5ca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a283f581839e17a3be4a828c95fa9e905e878ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a283f581839e17a3be4a828c95fa9e905e878ac4", "html_url": "https://github.com/rust-lang/rust/commit/a283f581839e17a3be4a828c95fa9e905e878ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a283f581839e17a3be4a828c95fa9e905e878ac4/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5", "html_url": "https://github.com/rust-lang/rust/commit/a9051d861ca13a1c16da3cd4248b26d86cf5e1d5"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "447332be8991e632a4cd21ca6ed2af5a1fc303fe", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=a283f581839e17a3be4a828c95fa9e905e878ac4", "patch": "@@ -86,9 +86,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.emit_type_mismatch_suggestions(err, expr, expr_ty, expected, expected_ty_expr, error);\n         self.note_type_is_not_clone(err, expected, expr_ty, expr);\n         self.note_internal_mutation_in_method(err, expr, Some(expected), expr_ty);\n-        self.check_for_range_as_method_call(err, expr, expr_ty, expected);\n-        self.check_for_binding_assigned_block_without_tail_expression(err, expr, expr_ty, expected);\n-        self.check_wrong_return_type_due_to_generic_arg(err, expr, expr_ty);\n+        self.suggest_method_call_on_range_literal(err, expr, expr_ty, expected);\n+        self.suggest_return_binding_for_missing_tail_expr(err, expr, expr_ty, expected);\n+        self.note_wrong_return_ty_due_to_generic_arg(err, expr, expr_ty);\n     }\n \n     /// Requires that the two types unify, and prints an error message if\n@@ -1217,7 +1217,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// In addition of this check, it also checks between references mutability state. If the\n     /// expected is mutable but the provided isn't, maybe we could just say \"Hey, try with\n     /// `&mut`!\".\n-    pub fn check_ref(\n+    pub fn suggest_deref_or_ref(\n         &self,\n         expr: &hir::Expr<'tcx>,\n         checked_ty: Ty<'tcx>,\n@@ -1572,7 +1572,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         None\n     }\n \n-    pub fn check_for_cast(\n+    pub fn suggest_cast(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n@@ -1939,7 +1939,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     /// Identify when the user has written `foo..bar()` instead of `foo.bar()`.\n-    pub fn check_for_range_as_method_call(\n+    pub fn suggest_method_call_on_range_literal(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'tcx>,\n@@ -2008,7 +2008,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Identify when the type error is because `()` is found in a binding that was assigned a\n     /// block without a tail expression.\n-    fn check_for_binding_assigned_block_without_tail_expression(\n+    fn suggest_return_binding_for_missing_tail_expr(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,\n@@ -2050,7 +2050,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_wrong_return_type_due_to_generic_arg(\n+    fn note_wrong_return_ty_due_to_generic_arg(\n         &self,\n         err: &mut Diagnostic,\n         expr: &hir::Expr<'_>,"}, {"sha": "8818a67934baf565105f46a95ac75e6b52e7b204", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=a283f581839e17a3be4a828c95fa9e905e878ac4", "patch": "@@ -275,7 +275,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ) -> bool {\n         let expr = expr.peel_blocks();\n         if let Some((sp, msg, suggestion, applicability, verbose, annotation)) =\n-            self.check_ref(expr, found, expected)\n+            self.suggest_deref_or_ref(expr, found, expected)\n         {\n             if verbose {\n                 err.span_suggestion_verbose(sp, msg, suggestion, applicability);\n@@ -342,7 +342,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.span_label(sp, format!(\"{descr} `{name}` defined here\"));\n             }\n             return true;\n-        } else if self.check_for_cast(err, expr, found, expected, expected_ty_expr) {\n+        } else if self.suggest_cast(err, expr, found, expected, expected_ty_expr) {\n             return true;\n         } else {\n             let methods = self.get_conversion_methods(expr.span, expected, found, expr.hir_id);"}, {"sha": "90653bcba7087962c027f687c218ed737e1a7ef3", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a283f581839e17a3be4a828c95fa9e905e878ac4/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=a283f581839e17a3be4a828c95fa9e905e878ac4", "patch": "@@ -1045,7 +1045,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n         }\n \n-        self.check_for_inner_self(&mut err, source, rcvr_ty, item_name);\n+        self.suggest_unwrapping_inner_self(&mut err, source, rcvr_ty, item_name);\n \n         bound_spans.sort();\n         bound_spans.dedup();\n@@ -1132,7 +1132,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n         }\n \n-        self.check_for_deref_method(&mut err, source, rcvr_ty, item_name, expected);\n+        self.note_derefed_ty_has_method(&mut err, source, rcvr_ty, item_name, expected);\n         return Some(err);\n     }\n \n@@ -1805,7 +1805,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_for_inner_self(\n+    fn suggest_unwrapping_inner_self(\n         &self,\n         err: &mut Diagnostic,\n         source: SelfSource<'tcx>,\n@@ -2175,7 +2175,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_for_deref_method(\n+    fn note_derefed_ty_has_method(\n         &self,\n         err: &mut Diagnostic,\n         self_source: SelfSource<'tcx>,"}]}