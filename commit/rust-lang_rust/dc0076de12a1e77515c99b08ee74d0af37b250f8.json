{"sha": "dc0076de12a1e77515c99b08ee74d0af37b250f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMDA3NmRlMTJhMWU3NzUxNWM5OWIwOGVlNzRkMGFmMzdiMjUwZjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-28T22:33:16Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-28T22:33:16Z"}, "message": "Move roots_to_scan to LoopState", "tree": {"sha": "29389ab58f1084a3936677ff8cbe1e1e9f42f64e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29389ab58f1084a3936677ff8cbe1e1e9f42f64e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc0076de12a1e77515c99b08ee74d0af37b250f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc0076de12a1e77515c99b08ee74d0af37b250f8", "html_url": "https://github.com/rust-lang/rust/commit/dc0076de12a1e77515c99b08ee74d0af37b250f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc0076de12a1e77515c99b08ee74d0af37b250f8/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c2d4135db867efe335a0654d86429bea7bb9caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c2d4135db867efe335a0654d86429bea7bb9caf", "html_url": "https://github.com/rust-lang/rust/commit/1c2d4135db867efe335a0654d86429bea7bb9caf"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "a96628235b7e00a7f6f8dae6a97978c7eab9f2e6", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/dc0076de12a1e77515c99b08ee74d0af37b250f8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0076de12a1e77515c99b08ee74d0af37b250f8/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=dc0076de12a1e77515c99b08ee74d0af37b250f8", "patch": "@@ -208,6 +208,9 @@ pub fn main_loop(\n         )\n     };\n \n+    loop_state.roots_to_scan = world_state.vfs.read().n_roots();\n+    loop_state.roots_total = loop_state.roots_to_scan;\n+\n     let pool = ThreadPool::default();\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (libdata_sender, libdata_receiver) = unbounded::<LibraryData>();\n@@ -333,7 +336,10 @@ struct LoopState {\n     in_flight_libraries: usize,\n     pending_libraries: Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>,\n     workspace_loaded: bool,\n+\n     roots_scanned_progress: Option<usize>,\n+    roots_to_scan: usize,\n+    roots_total: usize,\n }\n \n impl LoopState {\n@@ -377,6 +383,7 @@ fn loop_turn(\n             world_state.add_lib(lib);\n             world_state.maybe_collect_garbage();\n             loop_state.in_flight_libraries -= 1;\n+            loop_state.roots_to_scan -= 1;\n         }\n         Event::CheckWatcher(task) => on_check_task(task, world_state, task_sender)?,\n         Event::Msg(msg) => match msg {\n@@ -408,7 +415,7 @@ fn loop_turn(\n     };\n \n     let mut state_changed = false;\n-    if let Some(changes) = world_state.process_changes() {\n+    if let Some(changes) = world_state.process_changes(&mut loop_state.roots_to_scan) {\n         state_changed = true;\n         loop_state.pending_libraries.extend(changes);\n     }\n@@ -427,8 +434,11 @@ fn loop_turn(\n         });\n     }\n \n+    let show_progress = !loop_state.workspace_loaded\n+        && world_state.feature_flags.get(\"notifications.workspace-loaded\");\n+\n     if !loop_state.workspace_loaded\n-        && world_state.roots_to_scan == 0\n+        && loop_state.roots_to_scan == 0\n         && loop_state.pending_libraries.is_empty()\n         && loop_state.in_flight_libraries == 0\n     {\n@@ -439,9 +449,10 @@ fn loop_turn(\n             let snap = world_state.snapshot();\n             move || snap.analysis().prime_caches(subs).unwrap_or_else(|_: Canceled| ())\n         });\n-        send_startup_progress(&connection.sender, loop_state, world_state);\n-    } else if !loop_state.workspace_loaded {\n-        send_startup_progress(&connection.sender, loop_state, world_state);\n+    }\n+\n+    if show_progress {\n+        send_startup_progress(&connection.sender, loop_state);\n     }\n \n     if state_changed {\n@@ -706,18 +717,10 @@ fn on_diagnostic_task(task: DiagnosticTask, msg_sender: &Sender<Message>, state:\n     }\n }\n \n-fn send_startup_progress(\n-    sender: &Sender<Message>,\n-    loop_state: &mut LoopState,\n-    world_state: &WorldState,\n-) {\n-    if !world_state.feature_flags.get(\"notifications.workspace-loaded\") {\n-        return;\n-    }\n-\n-    let total: usize = world_state.workspaces.iter().map(|it| it.n_packages()).sum();\n+fn send_startup_progress(sender: &Sender<Message>, loop_state: &mut LoopState) {\n+    let total: usize = loop_state.roots_total;\n     let prev_progress = loop_state.roots_scanned_progress;\n-    let progress = total - world_state.roots_to_scan;\n+    let progress = total - loop_state.roots_to_scan;\n     loop_state.roots_scanned_progress = Some(progress);\n \n     match (prev_progress, loop_state.workspace_loaded) {"}, {"sha": "01008b09fb9082aedfa6fc36cf6d1068e89c25d7", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dc0076de12a1e77515c99b08ee74d0af37b250f8/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc0076de12a1e77515c99b08ee74d0af37b250f8/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=dc0076de12a1e77515c99b08ee74d0af37b250f8", "patch": "@@ -51,8 +51,6 @@ pub struct Options {\n pub struct WorldState {\n     pub options: Options,\n     pub feature_flags: Arc<FeatureFlags>,\n-    //FIXME: this belongs to `LoopState` rather than to `WorldState`\n-    pub roots_to_scan: usize,\n     pub roots: Vec<PathBuf>,\n     pub workspaces: Arc<Vec<ProjectWorkspace>>,\n     pub analysis_host: AnalysisHost,\n@@ -123,7 +121,7 @@ impl WorldState {\n         let (task_sender, task_receiver) = unbounded();\n         let task_sender = Box::new(move |t| task_sender.send(t).unwrap());\n         let (mut vfs, vfs_roots) = Vfs::new(roots, task_sender, watch);\n-        let roots_to_scan = vfs_roots.len();\n+\n         for r in vfs_roots {\n             let vfs_root_path = vfs.root2path(r);\n             let is_local = folder_roots.iter().any(|it| vfs_root_path.starts_with(it));\n@@ -190,7 +188,6 @@ impl WorldState {\n         WorldState {\n             options,\n             feature_flags: Arc::new(feature_flags),\n-            roots_to_scan,\n             roots: folder_roots,\n             workspaces: Arc::new(workspaces),\n             analysis_host,\n@@ -206,6 +203,7 @@ impl WorldState {\n     /// FIXME: better API here\n     pub fn process_changes(\n         &mut self,\n+        roots_to_scan: &mut usize,\n     ) -> Option<Vec<(SourceRootId, Vec<(FileId, RelativePathBuf, Arc<String>)>)>> {\n         let changes = self.vfs.write().commit_changes();\n         if changes.is_empty() {\n@@ -219,7 +217,7 @@ impl WorldState {\n                     let root_path = self.vfs.read().root2path(root);\n                     let is_local = self.roots.iter().any(|r| root_path.starts_with(r));\n                     if is_local {\n-                        self.roots_to_scan -= 1;\n+                        *roots_to_scan -= 1;\n                         for (file, path, text) in files {\n                             change.add_file(SourceRootId(root.0), FileId(file.0), path, text);\n                         }\n@@ -247,7 +245,6 @@ impl WorldState {\n     }\n \n     pub fn add_lib(&mut self, data: LibraryData) {\n-        self.roots_to_scan -= 1;\n         let mut change = AnalysisChange::new();\n         change.add_library(data);\n         self.analysis_host.apply_change(change);"}]}