{"sha": "59295854f892b0a8f42a6fbc80b04d1f1c695828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5Mjk1ODU0Zjg5MmIwYThmNDJhNmZiYzgwYjA0ZDFmMWM2OTU4Mjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-12T17:41:44Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-18T03:20:22Z"}, "message": "Add token id to delims", "tree": {"sha": "73f624f906a9d22e3edf408972dddf5eb8b50291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73f624f906a9d22e3edf408972dddf5eb8b50291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59295854f892b0a8f42a6fbc80b04d1f1c695828", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59295854f892b0a8f42a6fbc80b04d1f1c695828", "html_url": "https://github.com/rust-lang/rust/commit/59295854f892b0a8f42a6fbc80b04d1f1c695828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59295854f892b0a8f42a6fbc80b04d1f1c695828/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aceb9d7fb0809ccf364514d9177342edea144c59", "url": "https://api.github.com/repos/rust-lang/rust/commits/aceb9d7fb0809ccf364514d9177342edea144c59", "html_url": "https://github.com/rust-lang/rust/commit/aceb9d7fb0809ccf364514d9177342edea144c59"}], "stats": {"total": 200, "additions": 135, "deletions": 65}, "files": [{"sha": "49155fe6262c234d8bd222a4e13ac75d2dc41b80", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -16,7 +16,10 @@ macro_rules! __quote {\n         {\n             let children = $crate::__quote!($($tt)*);\n             let subtree = tt::Subtree {\n-                delimiter: Some(tt::Delimiter::$delim),\n+                delimiter: Some(tt::Delimiter {\n+                    kind: tt::DelimiterKind::$delim,\n+                    id: tt::TokenId::unspecified(),\n+                }),\n                 token_trees: $crate::quote::IntoTt::to_tokens(children),\n             };\n             subtree\n@@ -257,8 +260,13 @@ mod tests {\n         let fields =\n             fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone()).flatten();\n \n-        let list =\n-            tt::Subtree { delimiter: Some(tt::Delimiter::Brace), token_trees: fields.collect() };\n+        let list = tt::Subtree {\n+            delimiter: Some(tt::Delimiter {\n+                kind: tt::DelimiterKind::Brace,\n+                id: tt::TokenId::unspecified(),\n+            }),\n+            token_trees: fields.collect(),\n+        };\n \n         let quoted = quote! {\n             impl Clone for #struct_name {"}, {"sha": "c67ae41109c58c569272fd6b8e812a5de1a07295", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -106,7 +106,7 @@ fn match_subtree(\n             }\n             Op::TokenTree(tt::TokenTree::Subtree(lhs)) => {\n                 let rhs = src.expect_subtree().map_err(|()| err!(\"expected subtree\"))?;\n-                if lhs.delimiter != rhs.delimiter {\n+                if lhs.delimiter.map(|it| it.kind) != rhs.delimiter.map(|it| it.kind) {\n                     bail!(\"mismatched delimiter\")\n                 }\n                 let mut src = TtIter::new(rhs);"}, {"sha": "5a03a372a33dc2f648b0d57133608777893f1d33", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -115,10 +115,10 @@ impl<'a> TokenSource for SubtreeTokenSource<'a> {\n }\n \n fn convert_delim(d: Option<tt::Delimiter>, closing: bool) -> TtToken {\n-    let (kinds, texts) = match d {\n-        Some(tt::Delimiter::Parenthesis) => ([T!['('], T![')']], \"()\"),\n-        Some(tt::Delimiter::Brace) => ([T!['{'], T!['}']], \"{}\"),\n-        Some(tt::Delimiter::Bracket) => ([T!['['], T![']']], \"[]\"),\n+    let (kinds, texts) = match d.map(|it| it.kind) {\n+        Some(tt::DelimiterKind::Parenthesis) => ([T!['('], T![')']], \"()\"),\n+        Some(tt::DelimiterKind::Brace) => ([T!['{'], T!['}']], \"{}\"),\n+        Some(tt::DelimiterKind::Bracket) => ([T!['['], T![']']], \"[]\"),\n         None => ([L_DOLLAR, R_DOLLAR], \"\"),\n     };\n "}, {"sha": "a85bb058b7c090bc910788d83aa7c02268eae7bd", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 99, "deletions": 45, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -5,6 +5,7 @@ use ra_syntax::{\n     ast, AstToken, NodeOrToken, Parse, SmolStr, SyntaxKind, SyntaxKind::*, SyntaxNode,\n     SyntaxTreeBuilder, TextRange, TextUnit, T,\n };\n+use rustc_hash::FxHashMap;\n use std::iter::successors;\n use tt::buffer::{Cursor, TokenBuffer};\n \n@@ -83,6 +84,15 @@ impl TokenMap {\n     fn insert(&mut self, token_id: tt::TokenId, relative_range: TextRange) {\n         self.entries.push((token_id, relative_range));\n     }\n+\n+    fn insert_delim(\n+        &mut self,\n+        _token_id: tt::TokenId,\n+        _open_relative_range: TextRange,\n+        _close_relative_range: TextRange,\n+    ) {\n+        // FIXME: Add entries for delimiter\n+    }\n }\n \n /// Returns the textual content of a doc comment block as a quoted string\n@@ -121,7 +131,10 @@ fn convert_doc_comment(token: &ra_syntax::SyntaxToken) -> Option<Vec<tt::TokenTr\n         token_trees.push(mk_punct('!'));\n     }\n     token_trees.push(tt::TokenTree::from(tt::Subtree {\n-        delimiter: Some(tt::Delimiter::Bracket),\n+        delimiter: Some(tt::Delimiter {\n+            kind: tt::DelimiterKind::Bracket,\n+            id: tt::TokenId::unspecified(),\n+        }),\n         token_trees: meta_tkns,\n     }));\n \n@@ -190,12 +203,16 @@ impl Convertor {\n         .last()\n         .unwrap();\n \n-        let (delimiter, skip_first) = match (first_child.kind(), last_child.kind()) {\n-            (T!['('], T![')']) => (Some(tt::Delimiter::Parenthesis), true),\n-            (T!['{'], T!['}']) => (Some(tt::Delimiter::Brace), true),\n-            (T!['['], T![']']) => (Some(tt::Delimiter::Bracket), true),\n+        let (delimiter_kind, skip_first) = match (first_child.kind(), last_child.kind()) {\n+            (T!['('], T![')']) => (Some(tt::DelimiterKind::Parenthesis), true),\n+            (T!['{'], T!['}']) => (Some(tt::DelimiterKind::Brace), true),\n+            (T!['['], T![']']) => (Some(tt::DelimiterKind::Bracket), true),\n             _ => (None, false),\n         };\n+        let delimiter = delimiter_kind.map(|kind| tt::Delimiter {\n+            kind,\n+            id: self.alloc_delim(first_child.text_range(), last_child.text_range()),\n+        });\n \n         let mut token_trees = Vec::new();\n         let mut child_iter = tt.children_with_tokens().skip(skip_first as usize).peekable();\n@@ -232,25 +249,31 @@ impl Convertor {\n                                 .push(tt::Leaf::from(tt::Punct { char, spacing, id }).into());\n                         }\n                     } else {\n-                        let child: tt::TokenTree = if token.kind() == T![true]\n-                            || token.kind() == T![false]\n-                        {\n-                            let id = self.alloc(token.text_range());\n-                            tt::Leaf::from(tt::Literal { text: token.text().clone(), id }).into()\n-                        } else if token.kind().is_keyword()\n-                            || token.kind() == IDENT\n-                            || token.kind() == LIFETIME\n-                        {\n-                            let id = self.alloc(token.text_range());\n-                            let text = token.text().clone();\n-                            tt::Leaf::from(tt::Ident { text, id }).into()\n-                        } else if token.kind().is_literal() {\n-                            let id = self.alloc(token.text_range());\n-                            tt::Leaf::from(tt::Literal { text: token.text().clone(), id }).into()\n-                        } else {\n-                            return None;\n+                        let child: tt::Leaf = match token.kind() {\n+                            T![true] | T![false] => {\n+                                let id = self.alloc(token.text_range());\n+                                let text = token.text().clone();\n+                                tt::Literal { text, id }.into()\n+                            }\n+                            IDENT | LIFETIME => {\n+                                let id = self.alloc(token.text_range());\n+                                let text = token.text().clone();\n+                                tt::Ident { text, id }.into()\n+                            }\n+                            k if k.is_keyword() => {\n+                                let id = self.alloc(token.text_range());\n+                                let text = token.text().clone();\n+                                tt::Ident { text, id }.into()\n+                            }\n+                            k if k.is_literal() => {\n+                                let id = self.alloc(token.text_range());\n+                                let text = token.text().clone();\n+                                tt::Literal { text, id }.into()\n+                            }\n+                            _ => return None,\n                         };\n-                        token_trees.push(child);\n+\n+                        token_trees.push(child.into());\n                     }\n                 }\n                 NodeOrToken::Node(node) => {\n@@ -275,11 +298,26 @@ impl Convertor {\n         self.map.insert(token_id, relative_range);\n         token_id\n     }\n+\n+    fn alloc_delim(\n+        &mut self,\n+        open_abs_range: TextRange,\n+        close_abs_range: TextRange,\n+    ) -> tt::TokenId {\n+        let open_relative_range = open_abs_range - self.global_offset;\n+        let close_relative_range = close_abs_range - self.global_offset;\n+        let token_id = tt::TokenId(self.next_id);\n+        self.next_id += 1;\n+\n+        self.map.insert_delim(token_id, open_relative_range, close_relative_range);\n+        token_id\n+    }\n }\n \n struct TtTreeSink<'a> {\n     buf: String,\n     cursor: Cursor<'a>,\n+    open_delims: FxHashMap<tt::TokenId, TextUnit>,\n     text_pos: TextUnit,\n     inner: SyntaxTreeBuilder,\n     token_map: TokenMap,\n@@ -294,6 +332,7 @@ impl<'a> TtTreeSink<'a> {\n         TtTreeSink {\n             buf: String::new(),\n             cursor,\n+            open_delims: FxHashMap::default(),\n             text_pos: 0.into(),\n             inner: SyntaxTreeBuilder::default(),\n             roots: smallvec::SmallVec::new(),\n@@ -307,10 +346,10 @@ impl<'a> TtTreeSink<'a> {\n }\n \n fn delim_to_str(d: Option<tt::Delimiter>, closing: bool) -> SmolStr {\n-    let texts = match d {\n-        Some(tt::Delimiter::Parenthesis) => \"()\",\n-        Some(tt::Delimiter::Brace) => \"{}\",\n-        Some(tt::Delimiter::Bracket) => \"[]\",\n+    let texts = match d.map(|it| it.kind) {\n+        Some(tt::DelimiterKind::Parenthesis) => \"()\",\n+        Some(tt::DelimiterKind::Brace) => \"{}\",\n+        Some(tt::DelimiterKind::Bracket) => \"[]\",\n         None => return \"\".into(),\n     };\n \n@@ -331,34 +370,49 @@ impl<'a> TreeSink for TtTreeSink<'a> {\n                 break;\n             }\n \n-            match self.cursor.token_tree() {\n+            let text: Option<SmolStr> = match self.cursor.token_tree() {\n                 Some(tt::TokenTree::Leaf(leaf)) => {\n                     // Mark the range if needed\n-                    if let tt::Leaf::Ident(ident) = leaf {\n-                        if kind == IDENT {\n-                            let range =\n-                                TextRange::offset_len(self.text_pos, TextUnit::of_str(&ident.text));\n-                            self.token_map.insert(ident.id, range);\n-                        }\n-                    }\n-\n+                    let id = match leaf {\n+                        tt::Leaf::Ident(ident) => ident.id,\n+                        tt::Leaf::Punct(punct) => punct.id,\n+                        tt::Leaf::Literal(lit) => lit.id,\n+                    };\n+                    let text = SmolStr::new(format!(\"{}\", leaf));\n+                    let range = TextRange::offset_len(self.text_pos, TextUnit::of_str(&text));\n+                    self.token_map.insert(id, range);\n                     self.cursor = self.cursor.bump();\n-                    self.buf += &format!(\"{}\", leaf);\n+                    Some(text)\n                 }\n                 Some(tt::TokenTree::Subtree(subtree)) => {\n                     self.cursor = self.cursor.subtree().unwrap();\n-                    self.buf += &delim_to_str(subtree.delimiter, false);\n-                }\n-                None => {\n-                    if let Some(parent) = self.cursor.end() {\n-                        self.cursor = self.cursor.bump();\n-                        self.buf += &delim_to_str(parent.delimiter, true);\n+                    if let Some(id) = subtree.delimiter.map(|it| it.id) {\n+                        self.open_delims.insert(id, self.text_pos);\n                     }\n+                    Some(delim_to_str(subtree.delimiter, false))\n                 }\n+                None => self.cursor.end().and_then(|parent| {\n+                    self.cursor = self.cursor.bump();\n+                    if let Some(id) = parent.delimiter.map(|it| it.id) {\n+                        if let Some(open_delim) = self.open_delims.get(&id) {\n+                            let open_range =\n+                                TextRange::offset_len(*open_delim, TextUnit::from_usize(1));\n+                            let close_range =\n+                                TextRange::offset_len(self.text_pos, TextUnit::from_usize(1));\n+                            self.token_map.insert_delim(id, open_range, close_range);\n+                        }\n+                    }\n+\n+                    Some(delim_to_str(parent.delimiter, true))\n+                }),\n             };\n+\n+            if let Some(text) = text {\n+                self.buf += &text;\n+                self.text_pos += TextUnit::of_str(&text);\n+            }\n         }\n \n-        self.text_pos += TextUnit::of_str(&self.buf);\n         let text = SmolStr::new(self.buf.as_str());\n         self.buf.clear();\n         self.inner.token(kind, text);\n@@ -504,7 +558,7 @@ mod tests {\n         let token_tree = ast::TokenTree::cast(token_tree).unwrap();\n         let tt = ast_to_token_tree(&token_tree).unwrap().0;\n \n-        assert_eq!(tt.delimiter, Some(tt::Delimiter::Brace));\n+        assert_eq!(tt.delimiter.map(|it| it.kind), Some(tt::DelimiterKind::Brace));\n     }\n \n     #[test]"}, {"sha": "6bcfedcac26a672473b1a7bb5c789394b2d9555e", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -77,13 +77,15 @@ macro_rules! foobar {\n     }\n \n     assert_eq!(expansion.token_trees.len(), 3);\n-    // ($e:ident) => { foo bar $e }\n-    //  0123      45    6   7  89\n-    assert_eq!(get_id(&expansion.token_trees[0]), Some(6));\n-    assert_eq!(get_id(&expansion.token_trees[1]), Some(7));\n-\n-    // So baz should be 10\n-    assert_eq!(get_id(&expansion.token_trees[2]), Some(10));\n+    // {($e:ident) => { foo bar $e }}\n+    // 012345      67 8 9   T   12\n+    assert_eq!(get_id(&expansion.token_trees[0]), Some(9));\n+    assert_eq!(get_id(&expansion.token_trees[1]), Some(10));\n+\n+    // The input args of macro call include parentheses:\n+    // (baz)\n+    // So baz should be 12+1+1\n+    assert_eq!(get_id(&expansion.token_trees[2]), Some(14));\n }\n \n #[test]"}, {"sha": "73d8395a8e5c14fd11966566adc33feaddacceb1", "filename": "crates/ra_tt/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_tt%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59295854f892b0a8f42a6fbc80b04d1f1c695828/crates%2Fra_tt%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2Fsrc%2Flib.rs?ref=59295854f892b0a8f42a6fbc80b04d1f1c695828", "patch": "@@ -55,7 +55,13 @@ pub struct Subtree {\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n-pub enum Delimiter {\n+pub struct Delimiter {\n+    pub id: TokenId,\n+    pub kind: DelimiterKind,\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum DelimiterKind {\n     Parenthesis,\n     Brace,\n     Bracket,\n@@ -97,10 +103,10 @@ impl fmt::Display for TokenTree {\n \n impl fmt::Display for Subtree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        let (l, r) = match self.delimiter {\n-            Some(Delimiter::Parenthesis) => (\"(\", \")\"),\n-            Some(Delimiter::Brace) => (\"{\", \"}\"),\n-            Some(Delimiter::Bracket) => (\"[\", \"]\"),\n+        let (l, r) = match self.delimiter.map(|it| it.kind) {\n+            Some(DelimiterKind::Parenthesis) => (\"(\", \")\"),\n+            Some(DelimiterKind::Brace) => (\"{\", \"}\"),\n+            Some(DelimiterKind::Bracket) => (\"[\", \"]\"),\n             None => (\"\", \"\"),\n         };\n         f.write_str(l)?;"}]}