{"sha": "cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "node_id": "C_kwDOAAsO6NoAKGNmOWMwYTU5MzVkODMzYTUyMTcxY2QzNzk3NjE2ZjJhYmM5ZTNiNWE", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T14:21:21Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-07-01T14:21:21Z"}, "message": "cleanup mir visitor for `rustc::pass_by_value`", "tree": {"sha": "022e1eeb37b966e673e03e34d29b852c014f363c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022e1eeb37b966e673e03e34d29b852c014f363c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "html_url": "https://github.com/rust-lang/rust/commit/cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2733bb1dd9afe5fd20370ca4d539d42ac50419", "html_url": "https://github.com/rust-lang/rust/commit/7e2733bb1dd9afe5fd20370ca4d539d42ac50419"}], "stats": {"total": 343, "additions": 193, "deletions": 150}, "files": [{"sha": "41279588e633460af12450b463bfad4f7b3b27ea", "filename": "compiler/rustc_borrowck/src/borrow_set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fborrow_set.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -92,9 +92,9 @@ impl LocalsStateAtExit {\n         struct HasStorageDead(BitSet<Local>);\n \n         impl<'tcx> Visitor<'tcx> for HasStorageDead {\n-            fn visit_local(&mut self, local: &Local, ctx: PlaceContext, _: Location) {\n+            fn visit_local(&mut self, local: Local, ctx: PlaceContext, _: Location) {\n                 if ctx == PlaceContext::NonUse(NonUseContext::StorageDead) {\n-                    self.0.insert(*local);\n+                    self.0.insert(local);\n                 }\n             }\n         }\n@@ -223,7 +223,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         self.super_assign(assigned_place, rvalue, location)\n     }\n \n-    fn visit_local(&mut self, temp: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, temp: Local, context: PlaceContext, location: Location) {\n         if !context.is_use() {\n             return;\n         }\n@@ -232,7 +232,7 @@ impl<'a, 'tcx> Visitor<'tcx> for GatherBorrows<'a, 'tcx> {\n         // check whether we (earlier) saw a 2-phase borrow like\n         //\n         //     TMP = &mut place\n-        if let Some(&borrow_index) = self.pending_activations.get(temp) {\n+        if let Some(&borrow_index) = self.pending_activations.get(&temp) {\n             let borrow_data = &mut self.location_map[borrow_index.as_usize()];\n \n             // Watch out: the use of TMP in the borrow itself"}, {"sha": "b3edc35dc3642cc7c5963bcec53782801dd22656", "filename": "compiler/rustc_borrowck/src/diagnostics/find_all_local_uses.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_all_local_uses.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -18,8 +18,8 @@ struct AllLocalUsesVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for AllLocalUsesVisitor {\n-    fn visit_local(&mut self, local: &Local, _context: PlaceContext, location: Location) {\n-        if *local == self.for_local {\n+    fn visit_local(&mut self, local: Local, _context: PlaceContext, location: Location) {\n+        if local == self.for_local {\n             self.uses.insert(location);\n         }\n     }"}, {"sha": "b5a3081e56a7a50f9899603b8b2797fef13c1bb9", "filename": "compiler/rustc_borrowck/src/diagnostics/find_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Ffind_use.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -106,7 +106,7 @@ enum DefUseResult {\n }\n \n impl<'cx, 'tcx> Visitor<'tcx> for DefUseVisitor<'cx, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         let local_ty = self.body.local_decls[local].ty;\n \n         let mut found_it = false;"}, {"sha": "fda2cee43fbf1dde8e3f746ec86b025b493a4eb5", "filename": "compiler/rustc_borrowck/src/type_check/liveness/local_use_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Flocal_use_map.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -157,7 +157,7 @@ impl LocalUseMapBuild<'_> {\n }\n \n impl Visitor<'_> for LocalUseMapBuild<'_> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         if self.locals_with_use_data[local] {\n             match def_use::categorize(context) {\n                 Some(DefUse::Def) => self.insert_def(local, location),"}, {"sha": "bc76a465e3c3a638662f08564a104c46f21cbf78", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -54,7 +54,7 @@ impl UseFactsExtractor<'_, '_> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for UseFactsExtractor<'a, 'tcx> {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         match def_use::categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n             Some(DefUse::Use) => self.insert_use(local, location),"}, {"sha": "a21a8dd48be2b7375c34b2013dc369be5be5856c", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -333,9 +333,9 @@ struct TypeVerifier<'a, 'b, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n-    fn visit_span(&mut self, span: &Span) {\n+    fn visit_span(&mut self, span: Span) {\n         if !span.is_dummy() {\n-            self.last_span = *span;\n+            self.last_span = span;\n         }\n     }\n "}, {"sha": "8833753b12c5d53da2c6b77ce1386999bbb97d4f", "filename": "compiler/rustc_borrowck/src/used_muts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fused_muts.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -91,8 +91,8 @@ impl<'visit, 'cx, 'tcx> Visitor<'tcx> for GatherUsedMutsVisitor<'visit, 'cx, 'tc\n         self.super_statement(statement, location);\n     }\n \n-    fn visit_local(&mut self, local: &Local, place_context: PlaceContext, location: Location) {\n-        if place_context.is_place_assignment() && self.temporary_used_locals.contains(local) {\n+    fn visit_local(&mut self, local: Local, place_context: PlaceContext, location: Location) {\n+        if place_context.is_place_assignment() && self.temporary_used_locals.contains(&local) {\n             // Propagate the Local assigned at this Location as a used mutable local variable\n             for moi in &self.mbcx.move_data.loc_map[location] {\n                 let mpi = &self.mbcx.move_data.moves[*moi].path;"}, {"sha": "5c26168b50d65808cc006d75f8b6cd9a0bbeb0c3", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -143,13 +143,13 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx,\n             // now that we have moved to the \"slice of projections\" representation.\n             if let mir::ProjectionElem::Index(local) = elem {\n                 self.visit_local(\n-                    &local,\n+                    local,\n                     PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                     location,\n                 );\n             }\n         } else {\n-            self.visit_local(&place_ref.local, context, location);\n+            self.visit_local(place_ref.local, context, location);\n         }\n     }\n }\n@@ -185,7 +185,7 @@ impl<'mir, 'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> Visitor<'tcx>\n         self.process_place(&place.as_ref(), context, location);\n     }\n \n-    fn visit_local(&mut self, &local: &mir::Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: mir::Local, context: PlaceContext, location: Location) {\n         match context {\n             PlaceContext::MutatingUse(MutatingUseContext::Call)\n             | PlaceContext::MutatingUse(MutatingUseContext::Yield) => {"}, {"sha": "dc46583d5afbeefb7a47061191039ece099563c1", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -418,7 +418,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                             PlaceContext::MutatingUse(MutatingUseContext::Borrow)\n                         }\n                     };\n-                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_local(reborrowed_place_ref.local, ctx, location);\n                     self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }\n@@ -431,7 +431,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n                         }\n                         Mutability::Mut => PlaceContext::MutatingUse(MutatingUseContext::AddressOf),\n                     };\n-                    self.visit_local(&reborrowed_place_ref.local, ctx, location);\n+                    self.visit_local(reborrowed_place_ref.local, ctx, location);\n                     self.visit_projection(reborrowed_place_ref, ctx, location);\n                     return;\n                 }"}, {"sha": "8eee13196fcb3b0496448169622dfb52bc4f200c", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -106,7 +106,7 @@ struct Collector<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n-    fn visit_local(&mut self, &index: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, index: Local, context: PlaceContext, location: Location) {\n         debug!(\"visit_local: index={:?} context={:?} location={:?}\", index, context, location);\n         // We're only interested in temporaries and the return place\n         match self.ccx.body.local_kind(index) {"}, {"sha": "c9cb01701cfd259bbb1f185873f5fb7cd20f81c2", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -196,8 +196,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n-        if self.body.local_decls.get(*local).is_none() {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n+        if self.body.local_decls.get(local).is_none() {\n             self.fail(\n                 location,\n                 format!(\"local {:?} has no corresponding declaration in `body.local_decls`\", local),\n@@ -208,7 +208,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             // Uses of locals must occur while the local's storage is allocated.\n             self.storage_liveness.seek_after_primary_effect(location);\n             let locals_with_storage = self.storage_liveness.get();\n-            if !locals_with_storage.contains(*local) {\n+            if !locals_with_storage.contains(local) {\n                 self.fail(location, format!(\"use of local {:?}, which has no storage here\", local));\n             }\n         }\n@@ -823,8 +823,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         self.super_terminator(terminator, location);\n     }\n \n-    fn visit_source_scope(&mut self, scope: &SourceScope) {\n-        if self.body.source_scopes.get(*scope).is_none() {\n+    fn visit_source_scope(&mut self, scope: SourceScope) {\n+        if self.body.source_scopes.get(scope).is_none() {\n             self.tcx.sess.diagnostic().delay_span_bug(\n                 self.body.span,\n                 &format!("}, {"sha": "8d92bb359385780cdccebde4885f6c141640dc9b", "filename": "compiler/rustc_const_eval/src/util/collect_writes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcollect_writes.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -24,8 +24,8 @@ struct FindLocalAssignmentVisitor {\n }\n \n impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n-    fn visit_local(&mut self, local: &Local, place_context: PlaceContext, location: Location) {\n-        if self.needle != *local {\n+    fn visit_local(&mut self, local: Local, place_context: PlaceContext, location: Location) {\n+        if self.needle != local {\n             return;\n         }\n "}, {"sha": "9285246eb797c8d535cfa1ba5cc19547b9e7bc2b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 149, "deletions": 106, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -30,9 +30,11 @@\n //! For example, the `super_basic_block_data` method begins like this:\n //!\n //! ```ignore (pseudo-rust)\n-//! fn super_basic_block_data(&mut self,\n-//!                           block: BasicBlock,\n-//!                           data: & $($mutability)? BasicBlockData<'tcx>) {\n+//! fn super_basic_block_data(\n+//!     &mut self,\n+//!     block: BasicBlock,\n+//!     data: & $($mutability)? BasicBlockData<'tcx>\n+//! ) {\n //!     let BasicBlockData {\n //!         statements,\n //!         terminator,\n@@ -78,106 +80,135 @@ macro_rules! make_mir_visitor {\n                 self.super_body(body);\n             }\n \n-            fn visit_basic_block_data(&mut self,\n-                                      block: BasicBlock,\n-                                      data: & $($mutability)? BasicBlockData<'tcx>) {\n+            fn visit_basic_block_data(\n+                &mut self,\n+                block: BasicBlock,\n+                data: & $($mutability)? BasicBlockData<'tcx>,\n+            ) {\n                 self.super_basic_block_data(block, data);\n             }\n \n-            fn visit_source_scope_data(&mut self,\n-                                           scope_data: & $($mutability)? SourceScopeData<'tcx>) {\n+            fn visit_source_scope_data(\n+                &mut self,\n+                scope_data: & $($mutability)? SourceScopeData<'tcx>,\n+            ) {\n                 self.super_source_scope_data(scope_data);\n             }\n \n-            fn visit_statement(&mut self,\n-                               statement: & $($mutability)? Statement<'tcx>,\n-                               location: Location) {\n+            fn visit_statement(\n+                &mut self,\n+                statement: & $($mutability)? Statement<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_statement(statement, location);\n             }\n \n-            fn visit_assign(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            rvalue: & $($mutability)? Rvalue<'tcx>,\n-                            location: Location) {\n+            fn visit_assign(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                rvalue: & $($mutability)? Rvalue<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_assign(place, rvalue, location);\n             }\n \n-            fn visit_terminator(&mut self,\n-                                terminator: & $($mutability)? Terminator<'tcx>,\n-                                location: Location) {\n+            fn visit_terminator(\n+                &mut self,\n+                terminator: & $($mutability)? Terminator<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_terminator(terminator, location);\n             }\n \n-            fn visit_assert_message(&mut self,\n-                                    msg: & $($mutability)? AssertMessage<'tcx>,\n-                                    location: Location) {\n+            fn visit_assert_message(\n+                &mut self,\n+                msg: & $($mutability)? AssertMessage<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_assert_message(msg, location);\n             }\n \n-            fn visit_rvalue(&mut self,\n-                            rvalue: & $($mutability)? Rvalue<'tcx>,\n-                            location: Location) {\n+            fn visit_rvalue(\n+                &mut self,\n+                rvalue: & $($mutability)? Rvalue<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_rvalue(rvalue, location);\n             }\n \n-            fn visit_operand(&mut self,\n-                             operand: & $($mutability)? Operand<'tcx>,\n-                             location: Location) {\n+            fn visit_operand(\n+                &mut self,\n+                operand: & $($mutability)? Operand<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_operand(operand, location);\n             }\n \n-            fn visit_ascribe_user_ty(&mut self,\n-                                     place: & $($mutability)? Place<'tcx>,\n-                                     variance: & $($mutability)? ty::Variance,\n-                                     user_ty: & $($mutability)? UserTypeProjection,\n-                                     location: Location) {\n+            fn visit_ascribe_user_ty(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                variance: & $($mutability)? ty::Variance,\n+                user_ty: & $($mutability)? UserTypeProjection,\n+                location: Location,\n+            ) {\n                 self.super_ascribe_user_ty(place, variance, user_ty, location);\n             }\n \n-            fn visit_coverage(&mut self,\n-                              coverage: & $($mutability)? Coverage,\n-                              location: Location) {\n+            fn visit_coverage(\n+                &mut self,\n+                coverage: & $($mutability)? Coverage,\n+                location: Location,\n+            ) {\n                 self.super_coverage(coverage, location);\n             }\n \n-            fn visit_retag(&mut self,\n-                           kind: & $($mutability)? RetagKind,\n-                           place: & $($mutability)? Place<'tcx>,\n-                           location: Location) {\n+            fn visit_retag(\n+                &mut self,\n+                kind: & $($mutability)? RetagKind,\n+                place: & $($mutability)? Place<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_retag(kind, place, location);\n             }\n \n-            fn visit_place(&mut self,\n-                            place: & $($mutability)? Place<'tcx>,\n-                            context: PlaceContext,\n-                            location: Location) {\n+            fn visit_place(\n+                &mut self,\n+                place: & $($mutability)? Place<'tcx>,\n+                context: PlaceContext,\n+                location: Location,\n+            ) {\n                 self.super_place(place, context, location);\n             }\n \n             visit_place_fns!($($mutability)?);\n \n-            fn visit_constant(&mut self,\n-                              constant: & $($mutability)? Constant<'tcx>,\n-                              location: Location) {\n+            fn visit_constant(\n+                &mut self,\n+                constant: & $($mutability)? Constant<'tcx>,\n+                location: Location,\n+            ) {\n                 self.super_constant(constant, location);\n             }\n \n-            // The macro results in a false positive of sorts, where &mut Span\n-            // is fine, but &Span is not; just allow the lint.\n-            #[allow(rustc::pass_by_value)]\n-            fn visit_span(&mut self,\n-                          span: & $($mutability)? Span) {\n+            fn visit_span(\n+                &mut self,\n+                span: $(& $mutability)? Span,\n+            ) {\n                 self.super_span(span);\n             }\n \n-            fn visit_source_info(&mut self,\n-                                 source_info: & $($mutability)? SourceInfo) {\n+            fn visit_source_info(\n+                &mut self,\n+                source_info: & $($mutability)? SourceInfo,\n+            ) {\n                 self.super_source_info(source_info);\n             }\n \n-            fn visit_ty(&mut self,\n-                        ty: $(& $mutability)? Ty<'tcx>,\n-                        _: TyContext) {\n+            fn visit_ty(\n+                &mut self,\n+                ty: $(& $mutability)? Ty<'tcx>,\n+                _: TyContext,\n+            ) {\n                 self.super_ty(ty);\n             }\n \n@@ -196,45 +227,56 @@ macro_rules! make_mir_visitor {\n                 self.super_user_type_annotation(index, ty);\n             }\n \n-            fn visit_region(&mut self,\n-                            region: $(& $mutability)? ty::Region<'tcx>,\n-                            _: Location) {\n+            fn visit_region(\n+                &mut self,\n+                region: $(& $mutability)? ty::Region<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_region(region);\n             }\n \n-            fn visit_const(&mut self,\n-                           constant: $(& $mutability)? ty::Const<'tcx>,\n-                           _: Location) {\n+            fn visit_const(\n+                &mut self,\n+                constant: $(& $mutability)? ty::Const<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_const(constant);\n             }\n \n-            fn visit_substs(&mut self,\n-                            substs: & $($mutability)? SubstsRef<'tcx>,\n-                            _: Location) {\n+            fn visit_substs(\n+                &mut self,\n+                substs: & $($mutability)? SubstsRef<'tcx>,\n+                _: Location,\n+            ) {\n                 self.super_substs(substs);\n             }\n \n-            fn visit_local_decl(&mut self,\n-                                local: Local,\n-                                local_decl: & $($mutability)? LocalDecl<'tcx>) {\n+            fn visit_local_decl(\n+                &mut self,\n+                local: Local,\n+                local_decl: & $($mutability)? LocalDecl<'tcx>,\n+            ) {\n                 self.super_local_decl(local, local_decl);\n             }\n \n-            fn visit_var_debug_info(&mut self,\n-                                    var_debug_info: & $($mutability)* VarDebugInfo<'tcx>) {\n+            fn visit_var_debug_info(\n+                &mut self,\n+                var_debug_info: & $($mutability)* VarDebugInfo<'tcx>,\n+            ) {\n                 self.super_var_debug_info(var_debug_info);\n             }\n \n-            #[allow(rustc::pass_by_value)]\n-            fn visit_local(&mut self,\n-                            _local: & $($mutability)? Local,\n-                            _context: PlaceContext,\n-                            _location: Location) {\n-            }\n+            fn visit_local(\n+                &mut self,\n+                _local: $(& $mutability)? Local,\n+                _context: PlaceContext,\n+                _location: Location,\n+            ) {}\n \n-            #[allow(rustc::pass_by_value)]\n-            fn visit_source_scope(&mut self,\n-                                      scope: & $($mutability)? SourceScope) {\n+            fn visit_source_scope(\n+                &mut self,\n+                scope: $(& $mutability)? SourceScope,\n+            ) {\n                 self.super_source_scope(scope);\n             }\n \n@@ -296,7 +338,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_var_debug_info(var_debug_info);\n                 }\n \n-                self.visit_span(&$($mutability)? body.span);\n+                self.visit_span($(& $mutability)? body.span);\n \n                 for const_ in &$($mutability)? body.required_consts {\n                     let location = START_BLOCK.start_location();\n@@ -338,14 +380,14 @@ macro_rules! make_mir_visitor {\n                     local_data: _,\n                 } = scope_data;\n \n-                self.visit_span(span);\n+                self.visit_span($(& $mutability)? *span);\n                 if let Some(parent_scope) = parent_scope {\n-                    self.visit_source_scope(parent_scope);\n+                    self.visit_source_scope($(& $mutability)? *parent_scope);\n                 }\n                 if let Some((callee, callsite_span)) = inlined {\n                     let location = START_BLOCK.start_location();\n \n-                    self.visit_span(callsite_span);\n+                    self.visit_span($(& $mutability)? *callsite_span);\n \n                     let ty::Instance { def: callee_def, substs: callee_substs } = callee;\n                     match callee_def {\n@@ -368,7 +410,7 @@ macro_rules! make_mir_visitor {\n                     self.visit_substs(callee_substs, location);\n                 }\n                 if let Some(inlined_parent_scope) = inlined_parent_scope {\n-                    self.visit_source_scope(inlined_parent_scope);\n+                    self.visit_source_scope($(& $mutability)? *inlined_parent_scope);\n                 }\n             }\n \n@@ -410,14 +452,14 @@ macro_rules! make_mir_visitor {\n                     }\n                     StatementKind::StorageLive(local) => {\n                         self.visit_local(\n-                            local,\n+                            $(& $mutability)? *local,\n                             PlaceContext::NonUse(NonUseContext::StorageLive),\n                             location\n                         );\n                     }\n                     StatementKind::StorageDead(local) => {\n                         self.visit_local(\n-                            local,\n+                            $(& $mutability)? *local,\n                             PlaceContext::NonUse(NonUseContext::StorageDead),\n                             location\n                         );\n@@ -483,7 +525,7 @@ macro_rules! make_mir_visitor {\n                         // cannot be changed by any visitor, though.\n                         let $($mutability)? local = RETURN_PLACE;\n                         self.visit_local(\n-                            & $($mutability)? local,\n+                            $(& $mutability)? local,\n                             PlaceContext::NonMutatingUse(NonMutatingUseContext::Move),\n                             location,\n                         );\n@@ -840,8 +882,10 @@ macro_rules! make_mir_visitor {\n                 self.visit_source_info(source_info);\n             }\n \n-            fn super_var_debug_info(&mut self,\n-                                    var_debug_info: & $($mutability)? VarDebugInfo<'tcx>) {\n+            fn super_var_debug_info(\n+                &mut self,\n+                var_debug_info: & $($mutability)? VarDebugInfo<'tcx>\n+            ) {\n                 let VarDebugInfo {\n                     name: _,\n                     source_info,\n@@ -861,32 +905,31 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            #[allow(rustc::pass_by_value)]\n-            fn super_source_scope(&mut self,\n-                                      _scope: & $($mutability)? SourceScope) {\n-            }\n+            fn super_source_scope(\n+                &mut self,\n+                _scope: $(& $mutability)? SourceScope\n+            ) {}\n \n-            fn super_constant(&mut self,\n-                              constant: & $($mutability)? Constant<'tcx>,\n-                              location: Location) {\n+            fn super_constant(\n+                &mut self,\n+                constant: & $($mutability)? Constant<'tcx>,\n+                location: Location\n+            ) {\n                 let Constant {\n                     span,\n                     user_ty,\n                     literal,\n                 } = constant;\n \n-                self.visit_span(span);\n+                self.visit_span($(& $mutability)? *span);\n                 drop(user_ty); // no visit method for this\n                 match literal {\n                     ConstantKind::Ty(ct) => self.visit_const($(& $mutability)? *ct, location),\n                     ConstantKind::Val(_, ty) => self.visit_ty($(& $mutability)? *ty, TyContext::Location(location)),\n                 }\n             }\n \n-            // The macro results in a false positive of sorts, where &mut Span\n-            // is fine, but &Span is not; just allow the lint.\n-            #[allow(rustc::pass_by_value)]\n-            fn super_span(&mut self, _span: & $($mutability)? Span) {\n+            fn super_span(&mut self, _span: $(& $mutability)? Span) {\n             }\n \n             fn super_source_info(&mut self, source_info: & $($mutability)? SourceInfo) {\n@@ -895,8 +938,8 @@ macro_rules! make_mir_visitor {\n                     scope,\n                 } = source_info;\n \n-                self.visit_span(span);\n-                self.visit_source_scope(scope);\n+                self.visit_span($(& $mutability)? *span);\n+                self.visit_source_scope($(& $mutability)? *scope);\n             }\n \n             fn super_user_type_projection(\n@@ -910,7 +953,7 @@ macro_rules! make_mir_visitor {\n                 _index: UserTypeAnnotationIndex,\n                 ty: & $($mutability)? CanonicalUserTypeAnnotation<'tcx>,\n             ) {\n-                self.visit_span(& $($mutability)? ty.span);\n+                self.visit_span($(& $mutability)? ty.span);\n                 self.visit_ty($(& $mutability)? ty.inferred_ty, TyContext::UserTy(ty.span));\n             }\n \n@@ -1058,7 +1101,7 @@ macro_rules! visit_place_fns {\n                 }\n             }\n \n-            self.visit_local(&place.local, context, location);\n+            self.visit_local(place.local, context, location);\n \n             self.visit_projection(place.as_ref(), context, location);\n         }\n@@ -1091,7 +1134,7 @@ macro_rules! visit_place_fns {\n                 }\n                 ProjectionElem::Index(local) => {\n                     self.visit_local(\n-                        &local,\n+                        local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n                         location,\n                     );"}, {"sha": "83ce4c44b7144e5cfa97c5d5c67feb5f55364396", "filename": "compiler/rustc_mir_dataflow/src/impls/init_locals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Finit_locals.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -81,7 +81,7 @@ where\n     // deinitialized, although clearly it is only partially deinitialized. This analysis is not\n     // actually used anywhere at the moment, so this is not critical, but this does need to be fixed\n     // before it starts being used again.\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, NonUseContext};\n         match context {\n             // These are handled specially in `call_return_effect` and `yield_resume_effect`."}, {"sha": "e64136928cce8af34e7712b95160b7c993982a5d", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -111,7 +111,7 @@ where\n         }\n     }\n \n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         // Because we do not call `super_place` above, `visit_local` is only called for locals that\n         // do not appear as part of  a `Place` in the MIR. This handles cases like the implicit use\n         // of the return place in a `Return` terminator or the index in an `Index` projection."}, {"sha": "eae9313b77138258934a48f6e94152e387168c52", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -288,12 +288,12 @@ impl<'a, 'mir, 'tcx, T> Visitor<'tcx> for MoveVisitor<'a, 'mir, 'tcx, T>\n where\n     T: GenKill<Local>,\n {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, loc: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, loc: Location) {\n         if PlaceContext::NonMutatingUse(NonMutatingUseContext::Move) == context {\n             let mut borrowed_locals = self.borrowed_locals.borrow_mut();\n             borrowed_locals.seek_before_primary_effect(loc);\n-            if !borrowed_locals.contains(*local) {\n-                self.trans.kill(*local);\n+            if !borrowed_locals.contains(local) {\n+                self.trans.kill(local);\n             }\n         }\n     }"}, {"sha": "48aea61b19186c4b1e3b741071d006bd888d7f9e", "filename": "compiler/rustc_mir_transform/src/const_debuginfo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_debuginfo.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -88,12 +88,12 @@ fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Consta\n }\n \n impl Visitor<'_> for LocalUseVisitor {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, location: Location) {\n         if context.is_mutating_use() {\n-            self.local_mutating_uses[*local] = self.local_mutating_uses[*local].saturating_add(1);\n+            self.local_mutating_uses[local] = self.local_mutating_uses[local].saturating_add(1);\n \n             if context.is_place_assignment() {\n-                self.local_assignment_locations[*local] = Some(location);\n+                self.local_assignment_locations[local] = Some(location);\n             }\n         }\n     }"}, {"sha": "36844d5f6cfae0b51c0821669f0bc14d17024b83", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -882,7 +882,7 @@ impl CanConstProp {\n }\n \n impl Visitor<'_> for CanConstProp {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n             // Projections are fine, because `&mut foo.x` will be caught by"}, {"sha": "dc3cb282c7328285b64a8ee20ef6edb2d2ff7b6e", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -773,7 +773,7 @@ impl CanConstProp {\n }\n \n impl Visitor<'_> for CanConstProp {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _: Location) {\n         use rustc_middle::mir::visit::PlaceContext::*;\n         match context {\n             // Projections are fine, because `&mut foo.x` will be caught by"}, {"sha": "d29d17399af3a64ca81c19153de0ed0c18b0c2d5", "filename": "compiler/rustc_mir_transform/src/nrvo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnrvo.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -219,7 +219,7 @@ impl IsReturnPlaceRead {\n }\n \n impl<'tcx> Visitor<'tcx> for IsReturnPlaceRead {\n-    fn visit_local(&mut self, &l: &Local, ctxt: PlaceContext, _: Location) {\n+    fn visit_local(&mut self, l: Local, ctxt: PlaceContext, _: Location) {\n         if l == mir::RETURN_PLACE && ctxt.is_use() && !ctxt.is_place_assignment() {\n             self.0 = true;\n         }"}, {"sha": "980af98436281133cd1cdc78d6d0dcf30ecb3ee4", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -509,12 +509,12 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n         }\n     }\n \n-    fn visit_local(&mut self, local: &Local, _ctx: PlaceContext, _location: Location) {\n+    fn visit_local(&mut self, local: Local, _ctx: PlaceContext, _location: Location) {\n         if self.increment {\n-            self.use_count[*local] += 1;\n+            self.use_count[local] += 1;\n         } else {\n-            assert_ne!(self.use_count[*local], 0);\n-            self.use_count[*local] -= 1;\n+            assert_ne!(self.use_count[local], 0);\n+            self.use_count[local] -= 1;\n         }\n     }\n }"}, {"sha": "6902213ddad4ff28843ff6655ed9f45633dd4948", "filename": "compiler/rustc_mir_transform/src/simplify_try.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify_try.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -462,14 +462,14 @@ impl LocalUseCounter {\n }\n \n impl Visitor<'_> for LocalUseCounter {\n-    fn visit_local(&mut self, local: &Local, context: PlaceContext, _location: Location) {\n+    fn visit_local(&mut self, local: Local, context: PlaceContext, _location: Location) {\n         if context.is_storage_marker()\n             || context == PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n         {\n             return;\n         }\n \n-        self.local_uses[*local] += 1;\n+        self.local_uses[local] += 1;\n     }\n }\n "}, {"sha": "3f082896ccfd4d5878951266e087ed0f91ff130a", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf9c0a5935d833a52171cd3797616f2abc9e3b5a/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=cf9c0a5935d833a52171cd3797616f2abc9e3b5a", "patch": "@@ -928,7 +928,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n \n     fn visit_local(\n         &mut self,\n-        _place_local: &Local,\n+        _place_local: Local,\n         _context: mir::visit::PlaceContext,\n         _location: Location,\n     ) {"}]}