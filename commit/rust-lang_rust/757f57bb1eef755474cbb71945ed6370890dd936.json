{"sha": "757f57bb1eef755474cbb71945ed6370890dd936", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1N2Y1N2JiMWVlZjc1NTQ3NGNiYjcxOTQ1ZWQ2MzcwODkwZGQ5MzY=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-01-09T18:20:33Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2016-01-12T01:55:45Z"}, "message": "Add set_oom_handler and use it print a message when out of memory", "tree": {"sha": "0ea5fcaf8b512548c82b027c387ce820bd593712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea5fcaf8b512548c82b027c387ce820bd593712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/757f57bb1eef755474cbb71945ed6370890dd936", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/757f57bb1eef755474cbb71945ed6370890dd936", "html_url": "https://github.com/rust-lang/rust/commit/757f57bb1eef755474cbb71945ed6370890dd936", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/757f57bb1eef755474cbb71945ed6370890dd936/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d70ab2bdf16c22b9f3ff0230089b44855e3f1593", "url": "https://api.github.com/repos/rust-lang/rust/commits/d70ab2bdf16c22b9f3ff0230089b44855e3f1593", "html_url": "https://github.com/rust-lang/rust/commit/d70ab2bdf16c22b9f3ff0230089b44855e3f1593"}], "stats": {"total": 101, "additions": 88, "deletions": 13}, "files": [{"sha": "dd4bf5174ee2ca402d8a25a384973c4760c3452f", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/757f57bb1eef755474cbb71945ed6370890dd936/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f57bb1eef755474cbb71945ed6370890dd936/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=757f57bb1eef755474cbb71945ed6370890dd936", "patch": "@@ -92,6 +92,7 @@\n #![feature(unsize)]\n #![feature(drop_in_place)]\n #![feature(fn_traits)]\n+#![feature(const_fn)]\n \n #![feature(needs_allocator)]\n \n@@ -127,15 +128,6 @@ mod boxed_test;\n pub mod arc;\n pub mod rc;\n pub mod raw_vec;\n+pub mod oom;\n \n-/// Common out-of-memory routine\n-#[cold]\n-#[inline(never)]\n-#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n-           issue = \"27700\")]\n-pub fn oom() -> ! {\n-    // FIXME(#14674): This really needs to do something other than just abort\n-    //                here, but any printing done must be *guaranteed* to not\n-    //                allocate.\n-    unsafe { core::intrinsics::abort() }\n-}\n+pub use oom::oom;"}, {"sha": "d355d59185eb4850311f808835835400978fc756", "filename": "src/liballoc/oom.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/757f57bb1eef755474cbb71945ed6370890dd936/src%2Fliballoc%2Foom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f57bb1eef755474cbb71945ed6370890dd936/src%2Fliballoc%2Foom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Foom.rs?ref=757f57bb1eef755474cbb71945ed6370890dd936", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014-2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use core::sync::atomic::{AtomicPtr, Ordering};\n+use core::mem;\n+use core::intrinsics;\n+\n+static OOM_HANDLER: AtomicPtr<()> = AtomicPtr::new(default_oom_handler as *mut ());\n+\n+fn default_oom_handler() -> ! {\n+    // The default handler can't do much more since we can't assume the presence\n+    // of libc or any way of printing an error message.\n+    unsafe { intrinsics::abort() }\n+}\n+\n+/// Common out-of-memory routine\n+#[cold]\n+#[inline(never)]\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+           issue = \"27700\")]\n+pub fn oom() -> ! {\n+    let value = OOM_HANDLER.load(Ordering::SeqCst);\n+    let handler: fn() -> ! = unsafe { mem::transmute(value) };\n+    handler();\n+}\n+\n+/// Set a custom handler for out-of-memory conditions\n+///\n+/// To avoid recursive OOM failures, it is critical that the OOM handler does\n+/// not allocate any memory itself.\n+#[unstable(feature = \"oom\", reason = \"not a scrutinized interface\",\n+           issue = \"27700\")]\n+pub fn set_oom_handler(handler: fn() -> !) {\n+    OOM_HANDLER.store(handler as *mut (), Ordering::SeqCst);\n+}"}, {"sha": "9771b057d8d21f5bfac77a38cbb71b5130e5c899", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/757f57bb1eef755474cbb71945ed6370890dd936/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f57bb1eef755474cbb71945ed6370890dd936/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=757f57bb1eef755474cbb71945ed6370890dd936", "patch": "@@ -15,6 +15,7 @@ use io::{self, ErrorKind};\n use libc;\n use num::One;\n use ops::Neg;\n+use alloc::oom;\n \n #[cfg(target_os = \"android\")]   pub use os::android as platform;\n #[cfg(target_os = \"bitrig\")]    pub use os::bitrig as platform;\n@@ -45,6 +46,22 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n+// A nicer handler for out-of-memory situations than the default one. This one\n+// prints a message to stderr before aborting. It is critical that this code\n+// does not allocate any memory since we are in an OOM situation. Any errors are\n+// ignored while printing since there's nothing we can do about them and we are\n+// about to exit anyways.\n+fn oom_handler() -> ! {\n+    use intrinsics;\n+    let msg = \"fatal runtime error: out of memory\\n\";\n+    unsafe {\n+        libc::write(libc::STDERR_FILENO,\n+                    msg.as_ptr() as *const libc::c_void,\n+                    msg.len() as libc::size_t);\n+        intrinsics::abort();\n+    }\n+}\n+\n #[cfg(not(any(target_os = \"nacl\", test)))]\n pub fn init() {\n     use libc::signal;\n@@ -58,10 +75,14 @@ pub fn init() {\n     unsafe {\n         assert!(signal(libc::SIGPIPE, libc::SIG_IGN) != !0);\n     }\n+\n+    oom::set_oom_handler(oom_handler);\n }\n \n #[cfg(all(target_os = \"nacl\", not(test)))]\n-pub fn init() { }\n+pub fn init() {\n+    oom::set_oom_handler(oom_handler);\n+}\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno as libc::c_int {"}, {"sha": "7e4db3d89a3f779a96e84aec500cf8ad11887ed7", "filename": "src/libstd/sys/windows/mod.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/757f57bb1eef755474cbb71945ed6370890dd936/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/757f57bb1eef755474cbb71945ed6370890dd936/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmod.rs?ref=757f57bb1eef755474cbb71945ed6370890dd936", "patch": "@@ -20,6 +20,7 @@ use num::Zero;\n use os::windows::ffi::{OsStrExt, OsStringExt};\n use path::PathBuf;\n use time::Duration;\n+use alloc::oom;\n \n #[macro_use] pub mod compat;\n \n@@ -42,7 +43,26 @@ pub mod thread_local;\n pub mod time;\n pub mod stdio;\n \n-pub fn init() {}\n+// See comment in sys/unix/mod.rs\n+fn oom_handler() -> ! {\n+    use intrinsics;\n+    use ptr;\n+    let msg = \"fatal runtime error: out of memory\\n\";\n+    unsafe {\n+        // WriteFile silently fails if it is passed an invalid handle, so there\n+        // is no need to check the result of GetStdHandle.\n+        c::WriteFile(c::GetStdHandle(c::STD_ERROR_HANDLE),\n+                     msg.as_ptr() as c::LPVOID,\n+                     msg.len() as DWORD,\n+                     ptr::null_mut(),\n+                     ptr::null_mut());\n+        intrinsics::abort();\n+    }\n+}\n+\n+pub fn init() {\n+    oom::set_oom_handler(oom_handler);\n+}\n \n pub fn decode_error_kind(errno: i32) -> ErrorKind {\n     match errno as c::DWORD {"}]}