{"sha": "b5c1b48048cc911c3caa07ada776239123a97b50", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1YzFiNDgwNDhjYzkxMWMzY2FhMDdhZGE3NzYyMzkxMjNhOTdiNTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-03T05:16:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-03T05:16:02Z"}, "message": "auto merge of #10199 : alexcrichton/rust/no-propagate, r=brson\n\nThis commit removes the propagation of `link_args` attributes across crates. The first commit message has the reasons as to why. Additionally, this starts statically linking some C/C++ helper libraries that we have to their respective crates instead of throwing then in librustrt and then having everything depend on librustrt.\r\n\r\nThe major downside of this movement is that we're losing the ability to control visible symbols. I couldn't figure out a way to internalize symbols from a static library during the linking process, so everyone who links to librustdoc will be able to use its sundown implementation (not exactly ideal). I'm not entirely sure how to fix this (beyond generating a list of all public symbols, including rust ones, and passing that to the linker), but we may have a much easier time with this once we start using llvm's linker toolchain.\r\n\r\nThere's certainly a lot more possibilities in where this can go, but I didn't want to go too deep just yet. The main idea here is to stop propagating linker arguments and then see how we're able to start statically linking libraries as a result.\r\n\r\nr? @catamorphism, you're going to be working on linking soon, so feel free to completely throw this away for something else!", "tree": {"sha": "8129865701c0d4d288cbc1453801db3e583910f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8129865701c0d4d288cbc1453801db3e583910f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5c1b48048cc911c3caa07ada776239123a97b50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5c1b48048cc911c3caa07ada776239123a97b50", "html_url": "https://github.com/rust-lang/rust/commit/b5c1b48048cc911c3caa07ada776239123a97b50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5c1b48048cc911c3caa07ada776239123a97b50/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a248e34fc7afdccf0f50b7b6b28dac86f1b93374", "url": "https://api.github.com/repos/rust-lang/rust/commits/a248e34fc7afdccf0f50b7b6b28dac86f1b93374", "html_url": "https://github.com/rust-lang/rust/commit/a248e34fc7afdccf0f50b7b6b28dac86f1b93374"}, {"sha": "0ce1b2f04d5b1a427f966ed70b09e95ae882947e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce1b2f04d5b1a427f966ed70b09e95ae882947e", "html_url": "https://github.com/rust-lang/rust/commit/0ce1b2f04d5b1a427f966ed70b09e95ae882947e"}], "stats": {"total": 276, "additions": 85, "deletions": 191}, "files": [{"sha": "65147b5e4eb1f5440438513672957a55a4c031fb", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -625,10 +625,10 @@ config.stamp: $(S)configure $(S)Makefile.in $(S)src/snapshots.txt\n # new definitions), make sure definitions always precede their uses,\n # especially for the dependency lists of recipes.\n \n+include $(CFG_SRC_DIR)mk/rt.mk\n include $(CFG_SRC_DIR)mk/target.mk\n include $(CFG_SRC_DIR)mk/host.mk\n include $(CFG_SRC_DIR)mk/stage0.mk\n-include $(CFG_SRC_DIR)mk/rt.mk\n include $(CFG_SRC_DIR)mk/rustllvm.mk\n include $(CFG_SRC_DIR)mk/tools.mk\n include $(CFG_SRC_DIR)mk/docs.mk"}, {"sha": "d51b09b56dafa4516f2b872c0349e6265fd45ab1", "filename": "mk/rt.mk", "status": "modified", "additions": 51, "deletions": 15, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -87,19 +87,11 @@ RUNTIME_CXXS_$(1)_$(2) := \\\n               rt/sync/rust_thread.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_upcall.cpp \\\n-              rt/rust_uv.cpp \\\n               rt/miniz.cpp \\\n               rt/rust_android_dummy.cpp \\\n               rt/rust_test_helpers.cpp\n \n-RUNTIME_CS_$(1)_$(2) := rt/sundown/src/autolink.c \\\n-\t\t\trt/sundown/src/buffer.c \\\n-\t\t\trt/sundown/src/stack.c \\\n-\t\t\trt/sundown/src/markdown.c \\\n-\t\t\trt/sundown/html/houdini_href_e.c \\\n-\t\t\trt/sundown/html/houdini_html_e.c \\\n-\t\t\trt/sundown/html/html_smartypants.c \\\n-\t\t\trt/sundown/html/html.c\n+RUNTIME_CS_$(1)_$(2) :=\n \n RUNTIME_S_$(1)_$(2) := rt/arch/$$(HOST_$(1))/_context.S \\\n \t\t\trt/arch/$$(HOST_$(1))/record_sp.S\n@@ -108,10 +100,7 @@ RT_BUILD_DIR_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/stage$(2)\n \n RUNTIME_DEF_$(1)_$(2) := $$(RT_OUTPUT_DIR_$(1))/rustrt$$(CFG_DEF_SUFFIX_$(1))\n RUNTIME_INCS_$(1)_$(2) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n-                     -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n-                     -I $$(S)src/rt/sundown/src \\\n-                     -I $$(S)src/rt/sundown/html \\\n-                     -I $$(S)src/libuv/include\n+                     -I $$(S)src/rt/arch/$$(HOST_$(1))\n RUNTIME_OBJS_$(1)_$(2) := $$(RUNTIME_CXXS_$(1)_$(2):rt/%.cpp=$$(RT_BUILD_DIR_$(1)_$(2))/%.o) \\\n                      $$(RUNTIME_CS_$(1)_$(2):rt/%.c=$$(RT_BUILD_DIR_$(1)_$(2))/%.o) \\\n                      $$(RUNTIME_S_$(1)_$(2):rt/%.S=$$(RT_BUILD_DIR_$(1)_$(2))/%.o)\n@@ -140,10 +129,9 @@ $$(RT_BUILD_DIR_$(1)_$(2))/arch/$$(HOST_$(1))/libmorestack.a: $$(MORESTACK_OBJS_\n \t$$(Q)$(AR_$(1)) rcs $$@ $$^\n \n $$(RT_BUILD_DIR_$(1)_$(2))/$(CFG_RUNTIME_$(1)): $$(RUNTIME_OBJS_$(1)_$(2)) $$(MKFILE_DEPS) \\\n-                        $$(RUNTIME_DEF_$(1)_$(2)) $$(LIBUV_LIB_$(1))\n+                        $$(RUNTIME_DEF_$(1)_$(2))\n \t@$$(call E, link: $$@)\n \t$$(Q)$$(call CFG_LINK_CXX_$(1),$$@, $$(RUNTIME_OBJS_$(1)_$(2)) \\\n-\t    $$(LIBUV_LIB_$(1)) \\\n \t    $$(CFG_LIBUV_LINK_FLAGS_$(1)),$$(RUNTIME_DEF_$(1)_$(2)),$$(CFG_RUNTIME_$(1)))\n \n # These could go in rt.mk or rustllvm.mk, they're needed for both.\n@@ -242,6 +230,54 @@ $$(LIBUV_LIB_$(1)): $$(LIBUV_DEPS) $$(LIBUV_MAKEFILE_$(1))\n \t\tNO_LOAD=\"$$(LIBUV_NO_LOAD)\" \\\n \t\tV=$$(VERBOSE)\n endif\n+\n+# libuv support functionality (extra C/C++ that we need to use libuv)\n+\n+UV_SUPPORT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),uv_support)\n+UV_SUPPORT_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/uv_support\n+UV_SUPPORT_LIB_$(1) := $$(UV_SUPPORT_DIR_$(1))/$$(UV_SUPPORT_NAME_$(1))\n+UV_SUPPORT_CS_$(1) := rt/rust_uv.cpp\n+UV_SUPPORT_OBJS_$(1) := $$(UV_SUPPORT_CS_$(1):rt/%.cpp=$$(UV_SUPPORT_DIR_$(1))/%.o)\n+\n+$$(UV_SUPPORT_DIR_$(1))/%.o: rt/%.cpp\n+\t@$$(call E, compile: $$@)\n+\t@mkdir -p $$(@D)\n+\t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, \\\n+\t\t-I $$(S)src/libuv/include \\\n+                 $$(RUNTIME_CFLAGS_$(1))) $$<\n+\n+$$(UV_SUPPORT_LIB_$(1)): $$(UV_SUPPORT_OBJS_$(1))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n+\n+# sundown markdown library (used by librustdoc)\n+\n+SUNDOWN_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),sundown)\n+SUNDOWN_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/sundown\n+SUNDOWN_LIB_$(1) := $$(SUNDOWN_DIR_$(1))/$$(SUNDOWN_NAME_$(1))\n+\n+SUNDOWN_CS_$(1) := rt/sundown/src/autolink.c \\\n+\t\t\trt/sundown/src/buffer.c \\\n+\t\t\trt/sundown/src/stack.c \\\n+\t\t\trt/sundown/src/markdown.c \\\n+\t\t\trt/sundown/html/houdini_href_e.c \\\n+\t\t\trt/sundown/html/houdini_html_e.c \\\n+\t\t\trt/sundown/html/html_smartypants.c \\\n+\t\t\trt/sundown/html/html.c\n+\n+SUNDOWN_OBJS_$(1) := $$(SUNDOWN_CS_$(1):rt/%.c=$$(SUNDOWN_DIR_$(1))/%.o)\n+\n+$$(SUNDOWN_DIR_$(1))/%.o: rt/%.c\n+\t@$$(call E, compile: $$@)\n+\t@mkdir -p $$(@D)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, \\\n+\t\t-I $$(S)src/rt/sundown/src -I $$(S)src/rt/sundown/html \\\n+                 $$(RUNTIME_CFLAGS_$(1))) $$<\n+\n+$$(SUNDOWN_LIB_$(1)): $$(SUNDOWN_OBJS_$(1))\n+\t@$$(call E, link: $$@)\n+\t$$(Q)$$(AR_$(1)) rcs $$@ $$^\n+\n endef\n \n # Instantiate template for all stages/targets"}, {"sha": "f7d8ec83a5a17cc70775b9bd923d17de066aa14a", "filename": "mk/target.mk", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -77,10 +77,15 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTUV_$(2)): \\\n \t\t$$(LIBRUSTUV_CRATE) $$(LIBRUSTUV_INPUTS) \\\n \t        $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_STDLIB_$(2)) \\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(LIBUV_LIB_$(2)) \\\n+\t\t$$(UV_SUPPORT_LIB_$(2)) \\\n \t\t| $$(TLIB$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n+\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n+\t\t-L $$(dir $$(LIBUV_LIB_$(2))) \\\n+\t\t--out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTUV_GLOB_$(2)),$$(notdir $$@))\n \n $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBSYNTAX_$(3)): \\\n@@ -117,13 +122,16 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)):\t\t\\\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTC_GLOB_$(2)),$$(notdir $$@))\n \n+# NOTE: after the next snapshot remove these '-L' flags\n $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$$(X_$(3)):\t\t\t\\\n \t\t$$(DRIVER_CRATE)\t\t\t\t\\\n \t\t$$(TSREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_LIBRUSTC_$(3)) \\\n \t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$<\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) --cfg rustc -o $$@ $$< \\\n+\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n+\t\t-L $$(dir $$(LIBUV_LIB_$(2)))\n ifdef CFG_ENABLE_PAX_FLAGS\n \t@$$(call E, apply PaX flags: $$@)\n \t@\"$(CFG_PAXCTL)\" -cm \"$$@\""}, {"sha": "eabb5f535e61d900ec9fd2dcff0aa3730f09cf1a", "filename": "mk/tests.mk", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -358,7 +358,9 @@ $(3)/stage$(1)/test/rustuvtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(LIBRUSTUV_CRATE) $$(LIBRUSTUV_INPUTS)\t\\\n \t\t$$(STDTESTDEP_$(1)_$(2)_$(3))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n+\t\t-L $$(UV_SUPPORT_DIR_$(2)) \\\n+\t\t-L $$(dir $$(LIBUV_LIB_$(2)))\n \n $(3)/stage$(1)/test/syntaxtest-$(2)$$(X_$(2)):\t\t\t\\\n \t\t$$(LIBSYNTAX_CRATE) $$(LIBSYNTAX_INPUTS)\t\\\n@@ -392,7 +394,8 @@ $(3)/stage$(1)/test/rustdoctest-$(2)$$(X_$(2)):\t\t\t\t\t\\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBSYNTAX_$(2)) \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_LIBRUSTC_$(2))\n \t@$$(call E, compile_and_link: $$@)\n-\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test\n+\t$$(STAGE$(1)_T_$(2)_H_$(3)) -o $$@ $$< --test \\\n+\t\t-L $$(SUNDOWN_DIR_$(2))\n \n endef\n "}, {"sha": "fb2e0b6367c9723c784a82b3518bed287c477754", "filename": "mk/tools.mk", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -57,10 +57,12 @@ $$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTDOC_$(4)):\t\t\\\n \t\t$$(RUSTDOC_LIB) $$(RUSTDOC_INPUTS)\t\t\t\\\n \t\t$$(SREQ$(1)_T_$(4)_H_$(3))\t\t\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$(CFG_LIBRUSTC_$(4)) \\\n+\t\t$$(SUNDOWN_LIB_$(4)) \\\n \t\t| $$(TLIB$(1)_T_$(4)_H_$(3))/\n \t@$$(call E, compile_and_link: $$@)\n \t$$(call REMOVE_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n-\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) --out-dir $$(@D) $$< && touch $$@\n+\t$$(STAGE$(1)_T_$(4)_H_$(3)) $$(WFLAGS_ST$(1)) \\\n+\t\t-L $$(SUNDOWN_DIR_$(4)) --out-dir $$(@D) $$< && touch $$@\n \t$$(call LIST_ALL_OLD_GLOB_MATCHES_EXCEPT,$$(dir $$@),$(LIBRUSTDOC_GLOB_$(4)),$$(notdir $$@))\n \n $$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X_$(4)):\t\t\t\\"}, {"sha": "815ec943c49621725a3d1422e79affd9823825d8", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -16,7 +16,7 @@ use lib::llvm::llvm;\n use lib::llvm::ModuleRef;\n use lib;\n use metadata::common::LinkMeta;\n-use metadata::{encoder, csearch, cstore, filesearch};\n+use metadata::{encoder, cstore, filesearch};\n use middle::trans::context::CrateContext;\n use middle::trans::common::gensym_name;\n use middle::ty;\n@@ -1043,14 +1043,6 @@ pub fn link_args(sess: Session,\n     let ula = cstore::get_used_link_args(cstore);\n     for arg in ula.iter() { args.push(arg.to_owned()); }\n \n-    // Add all the link args for external crates.\n-    do cstore::iter_crate_data(cstore) |crate_num, _| {\n-        let link_args = csearch::get_link_args_for_crate(cstore, crate_num);\n-        for link_arg in link_args.move_iter() {\n-            args.push(link_arg);\n-        }\n-    }\n-\n     // # Extern library linking\n \n     // User-supplied library search paths (-L on the cammand line) These are"}, {"sha": "e152d009050c858dbe74144e746842c9171b576c", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -304,8 +304,7 @@ pub mod llvm {\n     use super::debuginfo::*;\n     use std::libc::{c_char, c_int, c_longlong, c_ushort, c_uint, c_ulonglong};\n \n-    #[link_args = \"-Lrustllvm -lrustllvm\"]\n-    #[link_name = \"rustllvm\"]\n+    #[link_args = \"-lrustllvm\"]\n     extern {\n         /* Create and destroy contexts. */\n         pub fn LLVMContextCreate() -> ContextRef;"}, {"sha": "48fe21b334395312915dd373a48ab6b5530126a1", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -261,13 +261,6 @@ pub fn get_item_visibility(cstore: @mut cstore::CStore,\n     decoder::get_item_visibility(cdata, def_id.node)\n }\n \n-pub fn get_link_args_for_crate(cstore: @mut cstore::CStore,\n-                               crate_num: ast::CrateNum)\n-                            -> ~[~str] {\n-    let cdata = cstore::get_crate_data(cstore, crate_num);\n-    decoder::get_link_args_for_crate(cdata)\n-}\n-\n pub fn each_impl(cstore: @mut cstore::CStore,\n                  crate_num: ast::CrateNum,\n                  callback: &fn(ast::DefId)) {"}, {"sha": "56abaa27cce2c10fb4fa93f4f6a42eaa781666f5", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -1456,16 +1456,6 @@ pub fn translate_def_id(cdata: Cmd, did: ast::DefId) -> ast::DefId {\n     }\n }\n \n-pub fn get_link_args_for_crate(cdata: Cmd) -> ~[~str] {\n-    let link_args = reader::get_doc(reader::Doc(cdata.data), tag_link_args);\n-    let mut result = ~[];\n-    do reader::tagged_docs(link_args, tag_link_args_arg) |arg_doc| {\n-        result.push(arg_doc.as_str());\n-        true\n-    };\n-    result\n-}\n-\n pub fn each_impl(cdata: Cmd, callback: &fn(ast::DefId)) {\n     let impls_doc = reader::get_doc(reader::Doc(cdata.data), tag_impls);\n     let _ = do reader::tagged_docs(impls_doc, tag_impls_impl) |impl_doc| {"}, {"sha": "1ad7e416342f5bd5eac81c960141d2d1d6ecc308", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -75,7 +75,6 @@ struct Stats {\n     attr_bytes: u64,\n     dep_bytes: u64,\n     lang_item_bytes: u64,\n-    link_args_bytes: u64,\n     impl_bytes: u64,\n     misc_bytes: u64,\n     item_bytes: u64,\n@@ -1610,19 +1609,6 @@ fn encode_lang_items(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n     ebml_w.end_tag();   // tag_lang_items\n }\n \n-fn encode_link_args(ecx: &EncodeContext, ebml_w: &mut writer::Encoder) {\n-    ebml_w.start_tag(tag_link_args);\n-\n-    let link_args = cstore::get_used_link_args(ecx.cstore);\n-    for link_arg in link_args.iter() {\n-        ebml_w.start_tag(tag_link_args_arg);\n-        ebml_w.writer.write(link_arg.as_bytes());\n-        ebml_w.end_tag();\n-    }\n-\n-    ebml_w.end_tag();\n-}\n-\n struct ImplVisitor<'self> {\n     ecx: &'self EncodeContext<'self>,\n     ebml_w: &'self mut writer::Encoder,\n@@ -1740,7 +1726,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         attr_bytes: 0,\n         dep_bytes: 0,\n         lang_item_bytes: 0,\n-        link_args_bytes: 0,\n         impl_bytes: 0,\n         misc_bytes: 0,\n         item_bytes: 0,\n@@ -1797,11 +1782,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n     encode_lang_items(&ecx, &mut ebml_w);\n     ecx.stats.lang_item_bytes = wr.tell() - i;\n \n-    // Encode the link args.\n-    i = wr.tell();\n-    encode_link_args(&ecx, &mut ebml_w);\n-    ecx.stats.link_args_bytes = wr.tell() - i;\n-\n     // Encode the def IDs of impls, for coherence checking.\n     i = wr.tell();\n     encode_impls(&ecx, crate, &mut ebml_w);\n@@ -1838,7 +1818,6 @@ pub fn encode_metadata(parms: EncodeParams, crate: &Crate) -> ~[u8] {\n         println!(\" attribute bytes: {}\", ecx.stats.attr_bytes);\n         println!(\"       dep bytes: {}\", ecx.stats.dep_bytes);\n         println!(\" lang item bytes: {}\", ecx.stats.lang_item_bytes);\n-        println!(\" link args bytes: {}\", ecx.stats.link_args_bytes);\n         println!(\"      impl bytes: {}\", ecx.stats.impl_bytes);\n         println!(\"      misc bytes: {}\", ecx.stats.misc_bytes);\n         println!(\"      item bytes: {}\", ecx.stats.item_bytes);"}, {"sha": "fbe7a965615359dd3a5abdf61aeba16c16cd36c0", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -69,6 +69,7 @@ struct buf {\n }\n \n // sundown FFI\n+#[link_args = \"-lsundown\"]\n extern {\n     fn sdhtml_renderer(callbacks: *sd_callbacks,\n                        options_ptr: *html_renderopt,"}, {"sha": "9e86ab11286e4d049f9690b97609aadbcb3dfe6c", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -1003,6 +1003,8 @@ pub struct uv_err_data {\n     err_msg: ~str,\n }\n \n+// uv_support is the result of compiling rust_uv.cpp\n+#[link_args = \"-luv_support -luv\"]\n extern {\n \n     fn rust_uv_handle_size(type_: uintptr_t) -> size_t;\n@@ -1172,3 +1174,13 @@ extern {\n                             signum: c_int) -> c_int;\n     fn rust_uv_signal_stop(handle: *uv_signal_t) -> c_int;\n }\n+\n+// libuv requires various system libraries to successfully link on some\n+// platforms\n+#[cfg(target_os = \"linux\")]\n+#[link_args = \"-lpthread\"]\n+extern {}\n+\n+#[cfg(target_os = \"win32\")]\n+#[link_args = \"-lWs2_32 -lpsapi -liphlpapi\"]\n+extern {}"}, {"sha": "275966583d92ce45385aa287532cdb8cccf5e9c7", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 0, "deletions": 121, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b5c1b48048cc911c3caa07ada776239123a97b50/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b5c1b48048cc911c3caa07ada776239123a97b50", "patch": "@@ -26,92 +26,6 @@ rust_win32_rand_gen\n rust_win32_rand_release\n upcall_rust_personality\n upcall_reset_stack_limit\n-rust_uv_loop_new\n-rust_uv_loop_delete\n-rust_uv_walk\n-rust_uv_loop_set_data\n-rust_uv_run\n-rust_uv_close\n-rust_uv_async_send\n-rust_uv_async_init\n-rust_uv_timer_init\n-rust_uv_timer_start\n-rust_uv_timer_stop\n-rust_uv_tcp_init\n-rust_uv_buf_init\n-rust_uv_strerror\n-rust_uv_err_name\n-rust_uv_ip4_addr\n-rust_uv_ip4_name\n-rust_uv_ip6_addr\n-rust_uv_ip6_name\n-rust_uv_tcp_connect\n-rust_uv_tcp_bind\n-rust_uv_tcp_connect6\n-rust_uv_tcp_bind6\n-rust_uv_tcp_getsockname\n-rust_uv_tcp_nodelay\n-rust_uv_tcp_keepalive\n-rust_uv_tcp_simultaneous_accepts\n-rust_uv_udp_init\n-rust_uv_udp_bind\n-rust_uv_udp_bind6\n-rust_uv_udp_send\n-rust_uv_udp_send6\n-rust_uv_udp_recv_start\n-rust_uv_udp_recv_stop\n-rust_uv_get_udp_handle_from_send_req\n-rust_uv_udp_getsockname\n-rust_uv_udp_set_membership\n-rust_uv_udp_set_multicast_loop\n-rust_uv_udp_set_multicast_ttl\n-rust_uv_udp_set_ttl\n-rust_uv_udp_set_broadcast\n-rust_uv_is_ipv4_sockaddr\n-rust_uv_is_ipv6_sockaddr\n-rust_uv_malloc_sockaddr_storage\n-rust_uv_free_sockaddr_storage\n-rust_uv_listen\n-rust_uv_accept\n-rust_uv_write\n-rust_uv_read_start\n-rust_uv_read_stop\n-rust_uv_is_ipv4_addrinfo\n-rust_uv_is_ipv6_addrinfo\n-rust_uv_get_next_addrinfo\n-rust_uv_addrinfo_as_sockaddr_in\n-rust_uv_addrinfo_as_sockaddr_in6\n-rust_uv_get_stream_handle_from_connect_req\n-rust_uv_get_stream_handle_from_write_req\n-rust_uv_get_loop_for_uv_handle\n-rust_uv_get_data_for_uv_loop\n-rust_uv_set_data_for_uv_loop\n-rust_uv_get_data_for_uv_handle\n-rust_uv_set_data_for_uv_handle\n-rust_uv_get_data_for_req\n-rust_uv_set_data_for_req\n-rust_uv_get_base_from_buf\n-rust_uv_get_len_from_buf\n-rust_uv_getaddrinfo\n-rust_uv_freeaddrinfo\n-rust_uv_idle_init\n-rust_uv_idle_start\n-rust_uv_idle_stop\n-rust_uv_fs_open\n-rust_uv_fs_unlink\n-rust_uv_fs_write\n-rust_uv_fs_read\n-rust_uv_fs_close\n-rust_uv_get_result_from_fs_req\n-rust_uv_get_ptr_from_fs_req\n-rust_uv_get_loop_from_fs_req\n-rust_uv_fs_stat\n-rust_uv_fs_fstat\n-rust_uv_fs_req_cleanup\n-rust_uv_populate_uv_stat\n-rust_uv_fs_mkdir\n-rust_uv_fs_rmdir\n-rust_uv_fs_readdir\n rust_dbg_lock_create\n rust_dbg_lock_destroy\n rust_dbg_lock_lock\n@@ -128,9 +42,6 @@ rust_signal_little_lock\n rust_wait_little_lock\n tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n-rust_uv_ip4_port\n-rust_uv_ip6_port\n-rust_uv_tcp_getpeername\n rust_raw_thread_start\n rust_raw_thread_join\n rust_raw_thread_delete\n@@ -150,14 +61,6 @@ rust_dbg_extern_return_TwoU32s\n rust_dbg_extern_return_TwoU64s\n rust_dbg_extern_identity_double\n rust_dbg_extern_identity_u8\n-rust_uv_handle_size\n-rust_uv_req_size\n-rust_uv_handle_type_max\n-rust_uv_req_type_max\n-rust_uv_ip4_addrp\n-rust_uv_ip6_addrp\n-rust_uv_free_ip4_addr\n-rust_uv_free_ip6_addr\n rust_initialize_rt_tls_key\n rust_dbg_next_port\n rust_try\n@@ -172,29 +75,5 @@ rust_get_global_args_ptr\n rust_take_global_args_lock\n rust_drop_global_args_lock\n rust_get_test_int\n-rust_uv_get_loop_from_getaddrinfo_req\n-rust_uv_spawn\n-rust_uv_process_kill\n-rust_set_stdio_container_flags\n-rust_set_stdio_container_fd\n-rust_set_stdio_container_stream\n-rust_uv_process_pid\n-rust_uv_pipe_init\n-rust_uv_signal_init\n-rust_uv_signal_start\n-rust_uv_signal_stop\n-sdhtml_renderer\n-sd_markdown_new\n-sd_markdown_render\n-sd_markdown_free\n-bufrelease\n-bufnew\n rust_take_dlerror_lock\n rust_drop_dlerror_lock\n-rust_uv_pipe_open\n-rust_uv_pipe_bind\n-rust_uv_pipe_connect\n-rust_uv_tty_init\n-rust_uv_tty_set_mode\n-rust_uv_tty_get_winsize\n-rust_uv_guess_handle"}]}