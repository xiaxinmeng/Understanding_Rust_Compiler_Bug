{"sha": "529b7a4167aab91257da02277c00e5cba245babb", "node_id": "C_kwDOAAsO6NoAKDUyOWI3YTQxNjdhYWI5MTI1N2RhMDIyNzdjMDBlNWNiYTI0NWJhYmI", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-30T16:10:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T16:10:23Z"}, "message": "Merge #10398\n\n10398: Give defaultLibrary semantic token modifier to items from standard library r=Veykril a=lhvy\n\nFixes #8999, fixes #2155\r\n\r\n`builtInCrates` could be an alternate name to `defaultLibrary`, which one is better?\r\n\r\n> P.S. I'm participating in [Hacktoberfest 2021](https://hacktoberfest.digitalocean.com/). If this PR is up to standard and merged, I'd appreciate if the `hacktoberfest-accepted` label could be added. Thanks!\n\nCo-authored-by: lhvy <me@lhvy.dev>\nCo-authored-by: Lucas <me@lhvy.dev>", "tree": {"sha": "05e04c24d2c36325eb5e53512d269e3ad0ccabd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05e04c24d2c36325eb5e53512d269e3ad0ccabd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/529b7a4167aab91257da02277c00e5cba245babb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVeFvCRBK7hj4Ov3rIwAAljAIABfxmx802kOHEYnlXbG4gHlL\nqpJKE2RzHqcZ5VOsh39PmI7zuAf3iq+ehorqhMO5yGdUE2DsGzp0DuF8Af/qPwlP\nOIV6ROMGYs5xlScWVVFk7ncogt8ipmjkfZPezASqXkURyW05fZKnjCVsMDcj9aok\nLAAcEnrOFSZn8Baom3G7mDiV2B0eqm20AIPmA1QhKGZF0ZR+oqXXMOILrkM6PYFU\nrJ6YJWpLXZfS/PO/oP2077WTXAnCTXkt5nfW1oeeSdTLEDvetnFBF6DsV6MOVEvX\nDZBQvu1m9gZxk8YXBwpFBF/QSTftaeT/YjTdIaAWxz7J883C/uc1tkp21g3Shvc=\n=Cdi0\n-----END PGP SIGNATURE-----\n", "payload": "tree 05e04c24d2c36325eb5e53512d269e3ad0ccabd6\nparent 26a10767cb4490cb34a7d0baeec6df6399214356\nparent 0b2ba8be689225d6f243e484816cfc91f2b45bc4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633018223 +0000\ncommitter GitHub <noreply@github.com> 1633018223 +0000\n\nMerge #10398\n\n10398: Give defaultLibrary semantic token modifier to items from standard library r=Veykril a=lhvy\n\nFixes #8999, fixes #2155\r\n\r\n`builtInCrates` could be an alternate name to `defaultLibrary`, which one is better?\r\n\r\n> P.S. I'm participating in [Hacktoberfest 2021](https://hacktoberfest.digitalocean.com/). If this PR is up to standard and merged, I'd appreciate if the `hacktoberfest-accepted` label could be added. Thanks!\n\nCo-authored-by: lhvy <me@lhvy.dev>\nCo-authored-by: Lucas <me@lhvy.dev>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/529b7a4167aab91257da02277c00e5cba245babb", "html_url": "https://github.com/rust-lang/rust/commit/529b7a4167aab91257da02277c00e5cba245babb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/529b7a4167aab91257da02277c00e5cba245babb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26a10767cb4490cb34a7d0baeec6df6399214356", "url": "https://api.github.com/repos/rust-lang/rust/commits/26a10767cb4490cb34a7d0baeec6df6399214356", "html_url": "https://github.com/rust-lang/rust/commit/26a10767cb4490cb34a7d0baeec6df6399214356"}, {"sha": "0b2ba8be689225d6f243e484816cfc91f2b45bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2ba8be689225d6f243e484816cfc91f2b45bc4", "html_url": "https://github.com/rust-lang/rust/commit/0b2ba8be689225d6f243e484816cfc91f2b45bc4"}], "stats": {"total": 209, "additions": 163, "deletions": 46}, "files": [{"sha": "6d352942cabf3dfec514ee617b6acecbadda15c4", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -134,6 +134,7 @@ pub struct HlRange {\n // consuming:: Emitted for locals that are being consumed when use in a function call.\n // controlFlow:: Emitted for control-flow related tokens, this includes the `?` operator.\n // declaration:: Emitted for names of definitions, like `foo` in `fn foo() {}`.\n+// defaultLibrary:: Emitted for items from built-in crates (std, core, alloc, test and proc_macro).\n // documentation:: Emitted for documentation comments.\n // injected:: Emitted for doc-string injected highlighting like rust source blocks in documentation.\n // intraDocLink:: Emitted for intra doc links in doc-strings."}, {"sha": "5113ab84d537c0b8db914da6e78bde744d70ba61", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 33, "deletions": 11, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -3,7 +3,7 @@\n use hir::{AsAssocItem, HasVisibility, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n-    helpers::try_resolve_derive_input_at,\n+    helpers::{try_resolve_derive_input_at, FamousDefs},\n     RootDatabase, SymbolKind,\n };\n use rustc_hash::FxHashMap;\n@@ -25,7 +25,6 @@ pub(super) fn element(\n     syntactic_name_ref_highlighting: bool,\n     element: SyntaxElement,\n ) -> Option<(Highlight, Option<u64>)> {\n-    let db = sema.db;\n     let mut binding_hash = None;\n     let highlight: Highlight = match element.kind() {\n         FN => {\n@@ -79,10 +78,10 @@ pub(super) fn element(\n \n             match NameClass::classify_lifetime(sema, &lifetime) {\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_def(db, krate, def) | HlMod::Definition\n+                    highlight_def(sema, krate, def) | HlMod::Definition\n                 }\n                 None => match NameRefClass::classify_lifetime(sema, &lifetime) {\n-                    Some(NameRefClass::Definition(def)) => highlight_def(db, krate, def),\n+                    Some(NameRefClass::Definition(def)) => highlight_def(sema, krate, def),\n                     _ => SymbolKind::LifetimeParam.into(),\n                 },\n                 _ => Highlight::from(SymbolKind::LifetimeParam) | HlMod::Definition,\n@@ -93,7 +92,7 @@ pub(super) fn element(\n                 element.ancestors().nth(2).and_then(ast::Attr::cast).zip(element.as_token())\n             {\n                 match try_resolve_derive_input_at(sema, &attr, token) {\n-                    Some(makro) => highlight_def(sema.db, krate, Definition::Macro(makro)),\n+                    Some(makro) => highlight_def(sema, krate, Definition::Macro(makro)),\n                     None => HlTag::None.into(),\n                 }\n             } else {\n@@ -275,7 +274,7 @@ fn highlight_name_ref(\n                     }\n                 };\n \n-                let mut h = highlight_def(db, krate, def);\n+                let mut h = highlight_def(sema, krate, def);\n \n                 match def {\n                     Definition::Local(local)\n@@ -334,15 +333,15 @@ fn highlight_name(\n     };\n     match name_kind {\n         Some(NameClass::Definition(def)) => {\n-            let mut h = highlight_def(db, krate, def) | HlMod::Definition;\n+            let mut h = highlight_def(sema, krate, def) | HlMod::Definition;\n             if let Definition::ModuleDef(hir::ModuleDef::Trait(trait_)) = &def {\n                 if trait_.is_unsafe(db) {\n                     h |= HlMod::Unsafe;\n                 }\n             }\n             h\n         }\n-        Some(NameClass::ConstReference(def)) => highlight_def(db, krate, def),\n+        Some(NameClass::ConstReference(def)) => highlight_def(sema, krate, def),\n         Some(NameClass::PatFieldShorthand { field_ref, .. }) => {\n             let mut h = HlTag::Symbol(SymbolKind::Field).into();\n             if let hir::VariantDef::Union(_) = field_ref.parent_def(db) {\n@@ -366,7 +365,12 @@ fn calc_binding_hash(name: &hir::Name, shadow_count: u32) -> u64 {\n     hash((name, shadow_count))\n }\n \n-fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition) -> Highlight {\n+fn highlight_def(\n+    sema: &Semantics<RootDatabase>,\n+    krate: Option<hir::Crate>,\n+    def: Definition,\n+) -> Highlight {\n+    let db = sema.db;\n     let mut h = match def {\n         Definition::Macro(_) => Highlight::new(HlTag::Symbol(SymbolKind::Macro)),\n         Definition::Field(_) => Highlight::new(HlTag::Symbol(SymbolKind::Field)),\n@@ -504,7 +508,14 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n     };\n \n-    let is_from_other_crate = def.module(db).map(hir::Module::krate) != krate;\n+    let famous_defs = FamousDefs(&sema, krate);\n+    let def_crate = def.module(db).map(hir::Module::krate).or_else(|| match def {\n+        Definition::ModuleDef(hir::ModuleDef::Module(module)) => Some(module.krate()),\n+        _ => None,\n+    });\n+    let is_from_other_crate = def_crate != krate;\n+    let is_from_builtin_crate =\n+        def_crate.map_or(false, |def_crate| famous_defs.builtin_crates().any(|it| def_crate == it));\n     let is_builtin_type = matches!(def, Definition::ModuleDef(hir::ModuleDef::BuiltinType(_)));\n     let is_public = def.visibility(db) == Some(hir::Visibility::Public);\n \n@@ -514,6 +525,10 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n         _ => {}\n     }\n \n+    if is_from_builtin_crate {\n+        h |= HlMod::DefaultLibrary;\n+    }\n+\n     h\n }\n \n@@ -546,7 +561,10 @@ fn highlight_method_call(\n         h |= HlMod::Trait;\n     }\n \n-    let is_from_other_crate = Some(func.module(sema.db).krate()) != krate;\n+    let famous_defs = FamousDefs(&sema, krate);\n+    let def_crate = func.module(sema.db).krate();\n+    let is_from_other_crate = Some(def_crate) != krate;\n+    let is_from_builtin_crate = famous_defs.builtin_crates().any(|it| def_crate == it);\n     let is_public = func.visibility(sema.db) == hir::Visibility::Public;\n \n     if is_from_other_crate {\n@@ -555,6 +573,10 @@ fn highlight_method_call(\n         h |= HlMod::Public;\n     }\n \n+    if is_from_builtin_crate {\n+        h |= HlMod::DefaultLibrary;\n+    }\n+\n     if let Some(self_param) = func.self_param(sema.db) {\n         match self_param.access(sema.db) {\n             hir::Access::Shared => h |= HlMod::Reference,"}, {"sha": "0f9a99efac6b0a3adc0e9de1d994a9f3c89d2fbb", "filename": "crates/ide/src/syntax_highlighting/tags.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftags.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -55,6 +55,8 @@ pub enum HlMod {\n     Consuming,\n     /// Used with keywords like `if` and `break`.\n     ControlFlow,\n+    /// Used for items from built-in crates (std, core, alloc, test and proc_macro).\n+    DefaultLibrary,\n     /// `foo` in `fn foo(x: i32)` is a definition, `foo` in `foo(90 + 2)` is\n     /// not.\n     Definition,\n@@ -187,42 +189,44 @@ impl fmt::Display for HlTag {\n impl HlMod {\n     const ALL: &'static [HlMod; HlMod::Unsafe as u8 as usize + 1] = &[\n         HlMod::Associated,\n+        HlMod::Async,\n         HlMod::Attribute,\n         HlMod::Callable,\n         HlMod::Consuming,\n         HlMod::ControlFlow,\n+        HlMod::DefaultLibrary,\n         HlMod::Definition,\n         HlMod::Documentation,\n         HlMod::Injected,\n         HlMod::IntraDocLink,\n+        HlMod::Library,\n         HlMod::Mutable,\n+        HlMod::Public,\n         HlMod::Reference,\n         HlMod::Static,\n         HlMod::Trait,\n-        HlMod::Async,\n-        HlMod::Library,\n-        HlMod::Public,\n         HlMod::Unsafe,\n     ];\n \n     fn as_str(self) -> &'static str {\n         match self {\n             HlMod::Associated => \"associated\",\n+            HlMod::Async => \"async\",\n             HlMod::Attribute => \"attribute\",\n             HlMod::Callable => \"callable\",\n             HlMod::Consuming => \"consuming\",\n             HlMod::ControlFlow => \"control\",\n+            HlMod::DefaultLibrary => \"default_library\",\n             HlMod::Definition => \"declaration\",\n             HlMod::Documentation => \"documentation\",\n             HlMod::Injected => \"injected\",\n             HlMod::IntraDocLink => \"intra_doc_link\",\n+            HlMod::Library => \"library\",\n             HlMod::Mutable => \"mutable\",\n+            HlMod::Public => \"public\",\n             HlMod::Reference => \"reference\",\n             HlMod::Static => \"static\",\n             HlMod::Trait => \"trait\",\n-            HlMod::Async => \"async\",\n-            HlMod::Library => \"library\",\n-            HlMod::Public => \"public\",\n             HlMod::Unsafe => \"unsafe\",\n         }\n     }"}, {"sha": "bf3f1616ac11bfceabf7f176b39acb0426aba183", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_assoc_functions.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_assoc_functions.html?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -45,8 +45,8 @@\n <span class=\"keyword\">struct</span> <span class=\"struct declaration\">foo</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static public\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference public\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">trait</span> <span class=\"trait declaration\">t</span> <span class=\"brace\">{</span>\n@@ -55,7 +55,7 @@\n <span class=\"brace\">}</span>\n \n <span class=\"keyword\">impl</span> <span class=\"trait\">t</span> <span class=\"keyword\">for</span> <span class=\"struct\">foo</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static trait public\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference trait public\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static trait\">is_static</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference trait\">is_not_static</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n         </code></pre>\n\\ No newline at end of file"}, {"sha": "33d3196cdb3d51e776f75918d3be04f6cba0a4cf", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_default_library.html", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_default_library.html?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -0,0 +1,49 @@\n+\n+<style>\n+body                { margin: 0; }\n+pre                 { color: #DCDCCC; background: #3F3F3F; font-size: 22px; padding: 0.4em; }\n+\n+.lifetime           { color: #DFAF8F; font-style: italic; }\n+.label              { color: #DFAF8F; font-style: italic; }\n+.comment            { color: #7F9F7F; }\n+.documentation      { color: #629755; }\n+.intra_doc_link     { font-style: italic; }\n+.injected           { opacity: 0.65 ; }\n+.struct, .enum      { color: #7CB8BB; }\n+.enum_variant       { color: #BDE0F3; }\n+.string_literal     { color: #CC9393; }\n+.field              { color: #94BFF3; }\n+.function           { color: #93E0E3; }\n+.function.unsafe    { color: #BC8383; }\n+.trait.unsafe       { color: #BC8383; }\n+.operator.unsafe    { color: #BC8383; }\n+.mutable.unsafe     { color: #BC8383; text-decoration: underline; }\n+.keyword.unsafe     { color: #BC8383; font-weight: bold; }\n+.parameter          { color: #94BFF3; }\n+.text               { color: #DCDCCC; }\n+.type               { color: #7CB8BB; }\n+.builtin_type       { color: #8CD0D3; }\n+.type_param         { color: #DFAF8F; }\n+.attribute          { color: #94BFF3; }\n+.numeric_literal    { color: #BFEBBF; }\n+.bool_literal       { color: #BFE6EB; }\n+.macro              { color: #94BFF3; }\n+.module             { color: #AFD8AF; }\n+.value_param        { color: #DCDCCC; }\n+.variable           { color: #DCDCCC; }\n+.format_specifier   { color: #CC696B; }\n+.mutable            { text-decoration: underline; }\n+.escape_sequence    { color: #94BFF3; }\n+.keyword            { color: #F0DFAF; font-weight: bold; }\n+.control            { font-style: italic; }\n+.reference          { font-style: italic; font-weight: bold; }\n+\n+.unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n+</style>\n+<pre><code><span class=\"keyword\">use</span> <span class=\"module default_library library\">core</span><span class=\"operator\">::</span><span class=\"module default_library library\">iter</span><span class=\"semicolon\">;</span>\n+\n+<span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">foo</span> <span class=\"operator\">=</span> <span class=\"enum_variant default_library library\">Some</span><span class=\"parenthesis\">(</span><span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">nums</span> <span class=\"operator\">=</span> <span class=\"module default_library library\">iter</span><span class=\"operator\">::</span><span class=\"function default_library library\">repeat</span><span class=\"parenthesis\">(</span><span class=\"variable\">foo</span><span class=\"operator\">.</span><span class=\"function associated consuming default_library library\">unwrap</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "d9e1a05a036806c5bfd967e748db23f354ccf7a2", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_doctest.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_doctest.html?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -75,7 +75,7 @@\n     <span class=\"comment documentation\">/// #</span><span class=\"none injected\"> </span><span class=\"attribute attribute injected\">#</span><span class=\"attribute attribute injected\">!</span><span class=\"attribute attribute injected\">[</span><span class=\"builtin_attr attribute injected\">allow</span><span class=\"parenthesis attribute injected\">(</span><span class=\"none attribute injected\">unused_mut</span><span class=\"parenthesis attribute injected\">)</span><span class=\"attribute attribute injected\">]</span>\n     <span class=\"comment documentation\">/// </span><span class=\"keyword injected\">let</span><span class=\"none injected\"> </span><span class=\"keyword injected\">mut</span><span class=\"none injected\"> </span><span class=\"variable declaration injected mutable\">foo</span><span class=\"colon injected\">:</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"none injected\"> </span><span class=\"operator injected\">=</span><span class=\"none injected\"> </span><span class=\"struct injected\">Foo</span><span class=\"operator injected\">::</span><span class=\"function injected\">new</span><span class=\"parenthesis injected\">(</span><span class=\"parenthesis injected\">)</span><span class=\"semicolon injected\">;</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration static public\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">const</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public static\">new</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"struct\">Foo</span> <span class=\"brace\">{</span>\n         <span class=\"struct\">Foo</span> <span class=\"brace\">{</span> <span class=\"field\">bar</span><span class=\"colon\">:</span> <span class=\"bool_literal\">true</span> <span class=\"brace\">}</span>\n     <span class=\"brace\">}</span>\n \n@@ -109,7 +109,7 @@\n     <span class=\"comment documentation\">/// ```sh</span>\n     <span class=\"comment documentation\">/// echo 1</span>\n     <span class=\"comment documentation\">/// ```</span>\n-    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration reference public\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">pub</span> <span class=\"keyword\">fn</span> <span class=\"function associated declaration public reference\">foo</span><span class=\"parenthesis\">(</span><span class=\"operator\">&</span><span class=\"self_keyword declaration reference\">self</span><span class=\"parenthesis\">)</span> <span class=\"operator\">-&gt;</span> <span class=\"builtin_type\">bool</span> <span class=\"brace\">{</span>\n         <span class=\"bool_literal\">true</span>\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>"}, {"sha": "92cfa0d0a871136142d4626fc71e879bde972210", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_extern_crate.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_extern_crate.html?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -40,6 +40,6 @@\n \n .unresolved_reference { color: #FC5555; text-decoration: wavy underline; }\n </style>\n-<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">std</span><span class=\"semicolon\">;</span>\n-<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module declaration library\">abc</span><span class=\"semicolon\">;</span>\n+<pre><code><span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module default_library library\">std</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword\">extern</span> <span class=\"keyword\">crate</span> <span class=\"module default_library library\">alloc</span> <span class=\"keyword\">as</span> <span class=\"module default_library declaration library\">abc</span><span class=\"semicolon\">;</span>\n </code></pre>\n\\ No newline at end of file"}, {"sha": "7918a9627508eb013057c60c8a9bb065c06a0958", "filename": "crates/ide/src/syntax_highlighting/test_data/highlighting.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlighting.html?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -241,12 +241,12 @@\n     <span class=\"brace\">}</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function declaration async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n-    <span class=\"keyword\">let</span> <span class=\"variable declaration\">song</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">learn_song</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword control async\">await</span><span class=\"semicolon\">;</span>\n-    <span class=\"unresolved_reference\">sing_song</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">song</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword control async\">await</span><span class=\"semicolon\">;</span>\n+<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function async declaration\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+    <span class=\"keyword\">let</span> <span class=\"variable declaration\">song</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">learn_song</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword async control\">await</span><span class=\"semicolon\">;</span>\n+    <span class=\"unresolved_reference\">sing_song</span><span class=\"parenthesis\">(</span><span class=\"variable consuming\">song</span><span class=\"parenthesis\">)</span><span class=\"operator\">.</span><span class=\"keyword async control\">await</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span>\n \n-<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function declaration async\">async_main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n+<span class=\"keyword async\">async</span> <span class=\"keyword\">fn</span> <span class=\"function async declaration\">async_main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f1</span> <span class=\"operator\">=</span> <span class=\"function async\">learn_and_sing</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">f2</span> <span class=\"operator\">=</span> <span class=\"unresolved_reference\">dance</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     futures::<span class=\"macro\">join!</span><span class=\"parenthesis\">(</span>f1<span class=\"comma\">,</span> f2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>"}, {"sha": "e7bfbcc604098b4b79a65d157972f383049809d8", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -776,6 +776,23 @@ fn test_extern_crate() {\n     );\n }\n \n+#[test]\n+fn test_default_library() {\n+    check_highlighting(\n+        r#\"\n+        //- minicore: option, iterators\n+        use core::iter;\n+\n+        fn main() {\n+            let foo = Some(92);\n+            let nums = iter::repeat(foo.unwrap());\n+        }\n+        \"#,\n+        expect_file![\"./test_data/highlight_default_library.html\"],\n+        false,\n+    );\n+}\n+\n #[test]\n fn test_associated_function() {\n     check_highlighting("}, {"sha": "08bd8e0cba6030f49ef80b90d8361f1b0c45986e", "filename": "crates/ide_db/src/helpers/famous_defs.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -68,6 +68,29 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:ops:Deref\")\n     }\n \n+    pub fn alloc(&self) -> Option<Crate> {\n+        self.find_crate(\"alloc\")\n+    }\n+\n+    pub fn test(&self) -> Option<Crate> {\n+        self.find_crate(\"test\")\n+    }\n+\n+    pub fn proc_macro(&self) -> Option<Crate> {\n+        self.find_crate(\"proc_macro\")\n+    }\n+\n+    pub fn builtin_crates(&self) -> impl Iterator<Item = Crate> {\n+        IntoIterator::into_iter([\n+            self.std(),\n+            self.core(),\n+            self.alloc(),\n+            self.test(),\n+            self.proc_macro(),\n+        ])\n+        .filter_map(|it| it)\n+    }\n+\n     fn find_trait(&self, path: &str) -> Option<Trait> {\n         match self.find_def(path)? {\n             hir::ScopeDef::ModuleDef(hir::ModuleDef::Trait(it)) => Some(it),"}, {"sha": "8a5d09ad788532deb1d58a191a3500cee3116099", "filename": "crates/rust-analyzer/src/semantic_tokens.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fsemantic_tokens.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -87,20 +87,20 @@ macro_rules! define_semantic_token_modifiers {\n }\n \n define_semantic_token_modifiers![\n+    (ASYNC, \"async\"),\n+    (ATTRIBUTE_MODIFIER, \"attribute\"),\n+    (CALLABLE, \"callable\"),\n     (CONSTANT, \"constant\"),\n+    (CONSUMING, \"consuming\"),\n     (CONTROL_FLOW, \"controlFlow\"),\n     (INJECTED, \"injected\"),\n-    (MUTABLE, \"mutable\"),\n-    (CONSUMING, \"consuming\"),\n-    (ASYNC, \"async\"),\n+    (INTRA_DOC_LINK, \"intraDocLink\"),\n     (LIBRARY, \"library\"),\n+    (MUTABLE, \"mutable\"),\n     (PUBLIC, \"public\"),\n-    (UNSAFE, \"unsafe\"),\n-    (ATTRIBUTE_MODIFIER, \"attribute\"),\n-    (TRAIT_MODIFIER, \"trait\"),\n-    (CALLABLE, \"callable\"),\n-    (INTRA_DOC_LINK, \"intraDocLink\"),\n     (REFERENCE, \"reference\"),\n+    (TRAIT_MODIFIER, \"trait\"),\n+    (UNSAFE, \"unsafe\"),\n ];\n \n #[derive(Default)]"}, {"sha": "3508fcc189e7243ff0880e8a6f717f396bb186b4", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/529b7a4167aab91257da02277c00e5cba245babb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/529b7a4167aab91257da02277c00e5cba245babb/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=529b7a4167aab91257da02277c00e5cba245babb", "patch": "@@ -529,23 +529,24 @@ fn semantic_token_type_and_modifiers(\n \n     for modifier in highlight.mods.iter() {\n         let modifier = match modifier {\n+            HlMod::Associated => continue,\n+            HlMod::Async => semantic_tokens::ASYNC,\n             HlMod::Attribute => semantic_tokens::ATTRIBUTE_MODIFIER,\n+            HlMod::Callable => semantic_tokens::CALLABLE,\n+            HlMod::Consuming => semantic_tokens::CONSUMING,\n+            HlMod::ControlFlow => semantic_tokens::CONTROL_FLOW,\n+            HlMod::DefaultLibrary => lsp_types::SemanticTokenModifier::DEFAULT_LIBRARY,\n             HlMod::Definition => lsp_types::SemanticTokenModifier::DECLARATION,\n             HlMod::Documentation => lsp_types::SemanticTokenModifier::DOCUMENTATION,\n             HlMod::Injected => semantic_tokens::INJECTED,\n-            HlMod::ControlFlow => semantic_tokens::CONTROL_FLOW,\n-            HlMod::Mutable => semantic_tokens::MUTABLE,\n-            HlMod::Reference => semantic_tokens::REFERENCE,\n-            HlMod::Consuming => semantic_tokens::CONSUMING,\n-            HlMod::Async => semantic_tokens::ASYNC,\n+            HlMod::IntraDocLink => semantic_tokens::INTRA_DOC_LINK,\n             HlMod::Library => semantic_tokens::LIBRARY,\n+            HlMod::Mutable => semantic_tokens::MUTABLE,\n             HlMod::Public => semantic_tokens::PUBLIC,\n-            HlMod::Unsafe => semantic_tokens::UNSAFE,\n-            HlMod::Callable => semantic_tokens::CALLABLE,\n+            HlMod::Reference => semantic_tokens::REFERENCE,\n             HlMod::Static => lsp_types::SemanticTokenModifier::STATIC,\n-            HlMod::IntraDocLink => semantic_tokens::INTRA_DOC_LINK,\n             HlMod::Trait => semantic_tokens::TRAIT_MODIFIER,\n-            HlMod::Associated => continue,\n+            HlMod::Unsafe => semantic_tokens::UNSAFE,\n         };\n         mods |= modifier;\n     }"}]}