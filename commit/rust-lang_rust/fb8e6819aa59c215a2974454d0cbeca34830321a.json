{"sha": "fb8e6819aa59c215a2974454d0cbeca34830321a", "node_id": "C_kwDOAAsO6NoAKGZiOGU2ODE5YWE1OWMyMTVhMjk3NDQ1NGQwY2JlY2EzNDgzMDMyMWE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-03T01:36:44Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-05T21:52:04Z"}, "message": "Split and inline `ShallowResolver::fold_ty`.", "tree": {"sha": "86f4aae7cddfe7c576d323962a10e176ff8c5658", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86f4aae7cddfe7c576d323962a10e176ff8c5658"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb8e6819aa59c215a2974454d0cbeca34830321a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8e6819aa59c215a2974454d0cbeca34830321a", "html_url": "https://github.com/rust-lang/rust/commit/fb8e6819aa59c215a2974454d0cbeca34830321a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb8e6819aa59c215a2974454d0cbeca34830321a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2cf3f7b24b4667f72b12da547b57c02741f0615", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2cf3f7b24b4667f72b12da547b57c02741f0615", "html_url": "https://github.com/rust-lang/rust/commit/c2cf3f7b24b4667f72b12da547b57c02741f0615"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "8e0bcff8d0a89cd794fd77d8902dd7d05fb970b7", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 33, "deletions": 24, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/fb8e6819aa59c215a2974454d0cbeca34830321a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8e6819aa59c215a2974454d0cbeca34830321a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=fb8e6819aa59c215a2974454d0cbeca34830321a", "patch": "@@ -30,7 +30,7 @@ use rustc_middle::ty::relate::RelateResult;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n use rustc_middle::ty::visit::TypeVisitable;\n pub use rustc_middle::ty::IntVarValue;\n-use rustc_middle::ty::{self, GenericParamDefKind, InferConst, Ty, TyCtxt};\n+use rustc_middle::ty::{self, GenericParamDefKind, InferConst, InferTy, Ty, TyCtxt};\n use rustc_middle::ty::{ConstVid, FloatVid, IntVid, TyVid};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -1870,9 +1870,33 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n     /// If `ty` is a type variable of some kind, resolve it one level\n     /// (but do not resolve types found in the result). If `typ` is\n     /// not a type variable, just return it unmodified.\n+    #[inline]\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        match *ty.kind() {\n-            ty::Infer(ty::TyVar(v)) => {\n+        if let ty::Infer(v) = ty.kind() { self.fold_infer_ty(*v).unwrap_or(ty) } else { ty }\n+    }\n+\n+    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n+        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n+            self.infcx\n+                .inner\n+                .borrow_mut()\n+                .const_unification_table()\n+                .probe_value(vid)\n+                .val\n+                .known()\n+                .unwrap_or(ct)\n+        } else {\n+            ct\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> ShallowResolver<'a, 'tcx> {\n+    // This is separate from `fold_ty` to keep that method small and inlinable.\n+    #[inline(never)]\n+    fn fold_infer_ty(&mut self, v: InferTy) -> Option<Ty<'tcx>> {\n+        match v {\n+            ty::TyVar(v) => {\n                 // Not entirely obvious: if `typ` is a type variable,\n                 // it can be resolved to an int/float variable, which\n                 // can then be recursively resolved, hence the\n@@ -1886,41 +1910,26 @@ impl<'a, 'tcx> TypeFolder<'tcx> for ShallowResolver<'a, 'tcx> {\n                 // Note: if these two lines are combined into one we get\n                 // dynamic borrow errors on `self.inner`.\n                 let known = self.infcx.inner.borrow_mut().type_variables().probe(v).known();\n-                known.map_or(ty, |t| self.fold_ty(t))\n+                known.map(|t| self.fold_ty(t))\n             }\n \n-            ty::Infer(ty::IntVar(v)) => self\n+            ty::IntVar(v) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .int_unification_table()\n                 .probe_value(v)\n-                .map_or(ty, |v| v.to_type(self.infcx.tcx)),\n+                .map(|v| v.to_type(self.infcx.tcx)),\n \n-            ty::Infer(ty::FloatVar(v)) => self\n+            ty::FloatVar(v) => self\n                 .infcx\n                 .inner\n                 .borrow_mut()\n                 .float_unification_table()\n                 .probe_value(v)\n-                .map_or(ty, |v| v.to_type(self.infcx.tcx)),\n-\n-            _ => ty,\n-        }\n-    }\n+                .map(|v| v.to_type(self.infcx.tcx)),\n \n-    fn fold_const(&mut self, ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n-        if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.kind() {\n-            self.infcx\n-                .inner\n-                .borrow_mut()\n-                .const_unification_table()\n-                .probe_value(vid)\n-                .val\n-                .known()\n-                .unwrap_or(ct)\n-        } else {\n-            ct\n+            ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => None,\n         }\n     }\n }"}]}