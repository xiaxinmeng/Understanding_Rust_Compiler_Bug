{"sha": "e75588934c01d6bc9abb02979eb61168a7b5c598", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTU4ODkzNGMwMWQ2YmM5YWJiMDI5NzllYjYxMTY4YTdiNWM1OTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T02:46:22Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-06-15T16:06:57Z"}, "message": "Move overlapping span to a note", "tree": {"sha": "361b03ebf5188f39cfcdf136f674c923bdacc8c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361b03ebf5188f39cfcdf136f674c923bdacc8c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75588934c01d6bc9abb02979eb61168a7b5c598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75588934c01d6bc9abb02979eb61168a7b5c598", "html_url": "https://github.com/rust-lang/rust/commit/e75588934c01d6bc9abb02979eb61168a7b5c598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75588934c01d6bc9abb02979eb61168a7b5c598/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "921f35fe73e8749dee8531f7fbaf2cb4958fa799", "url": "https://api.github.com/repos/rust-lang/rust/commits/921f35fe73e8749dee8531f7fbaf2cb4958fa799", "html_url": "https://github.com/rust-lang/rust/commit/921f35fe73e8749dee8531f7fbaf2cb4958fa799"}], "stats": {"total": 145, "additions": 99, "deletions": 46}, "files": [{"sha": "cc95441b68a03108cefe0779d8543f1562bbabf1", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -53,7 +53,36 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n \n                         // Customize the spans and labels depending on their relative order so\n                         // that split sentences flow correctly.\n-                        if sup_origin.span().shrink_to_hi() <= return_sp.shrink_to_lo() {\n+                        if sup_origin.span().overlaps(return_sp) && sp == sup_origin.span() {\n+                            // Avoid the following:\n+                            //\n+                            // error: cannot infer an appropriate lifetime\n+                            //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+                            //    |\n+                            // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+                            //    |           ----                      ---------^-\n+                            //    |           |                         |        |\n+                            //    |           |                         |   ...and is captured here\n+                            //    |           |           ...is required to be `'static` by this...\n+                            //    |           this data with the anonymous lifetime `'_`...\n+                            //\n+                            // and instead show:\n+                            //\n+                            // error: cannot infer an appropriate lifetime\n+                            //   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n+                            //    |\n+                            // LL | fn foo(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+                            //    |           ----                               ^ ...is captured here with a `'static` requirement\n+                            //    |           |\n+                            //    |           this data with the anonymous lifetime `'_`...\n+                            //    |\n+                            // note: ...is required to be `'static` by this\n+                            //    |\n+                            // LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+                            //    |                                         ^^^^^^^^^^^\n+                            err.span_label(sup_origin.span(), \"...is captured here...\");\n+                            err.span_note(return_sp, \"...and required to be `'static` by this\");\n+                        } else if sup_origin.span() <= return_sp {\n                             err.span_label(sup_origin.span(), \"...is captured here...\");\n                             err.span_label(return_sp, \"...and required to be `'static` by this\");\n                         } else {"}, {"sha": "2da49379ea8c2abb20f442195e8b9adaf6f3b2c3", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -109,12 +109,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:18:50\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n-   |               ----                      ---------^-\n-   |               |                         |        |\n-   |               |                         |        ...and is captured here\n-   |               |                         ...is required to be `'static` by this...\n+   |               ----                               ^ ...is captured here...\n+   |               |\n    |               this data with the anonymous lifetime `'_`...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/must_outlive_least_region_or_bound.rs:18:41\n+   |\n+LL | fn elided3(x: &i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                                         ^^^^^^^^^^^\n help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn elided3(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -124,12 +127,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:21:59\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n-   |                     -------                      ---------^-\n-   |                     |                            |        |\n-   |                     |                            |        ...and is captured here\n-   |                     |                            ...is required to be `'static` by this...\n+   |                     -------                               ^ ...is captured here...\n+   |                     |\n    |                     this data with lifetime `'a`...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/must_outlive_least_region_or_bound.rs:21:50\n+   |\n+LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug> { Box::new(x) }\n+   |                                                  ^^^^^^^^^^^\n help: to permit non-static references in a trait object value, you can add an explicit bound for lifetime `'a`\n    |\n LL | fn explicit3<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }\n@@ -139,12 +145,15 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:24:60\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |               ----                                ---------^-\n-   |               |                                   |        |\n-   |               |                                   |        ...and is captured here\n-   |               |                                   ...is required to be `'static` by this...\n+   |               ----                                         ^ ...is captured here...\n+   |               |\n    |               this data with the anonymous lifetime `'_`...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/must_outlive_least_region_or_bound.rs:24:51\n+   |\n+LL | fn elided4(x: &i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                                   ^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn elided4(x: &i32) -> Box<dyn Debug + '_> { Box::new(x) }\n@@ -158,12 +167,13 @@ error: cannot infer an appropriate lifetime\n   --> $DIR/must_outlive_least_region_or_bound.rs:27:69\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n-   |                     -------                                ---------^-\n-   |                     |                                      |        |\n-   |                     |                                      |        ...and is captured here\n-   |                     |                                      ...is required to be `'static` by this...\n-   |                     this data with lifetime `'a`...\n+   |                     ------- this data with lifetime `'a`...         ^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/must_outlive_least_region_or_bound.rs:27:60\n+   |\n+LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'static> { Box::new(x) }\n+   |                                                            ^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn explicit4<'a>(x: &'a i32) -> Box<dyn Debug + 'a> { Box::new(x) }"}, {"sha": "6c0b26a86b65197a1b19aacc1734423db51237de", "filename": "src/test/ui/issues/issue-16922.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16922.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -4,11 +4,13 @@ error: cannot infer an appropriate lifetime\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any> {\n    |                       -- this data with the anonymous lifetime `'_`...\n LL |     Box::new(value) as Box<dyn Any>\n-   |     ---------^^^^^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^^^^^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/issue-16922.rs:4:5\n+   |\n+LL |     Box::new(value) as Box<dyn Any>\n+   |     ^^^^^^^^^^^^^^^\n help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn foo<T: Any>(value: &T) -> Box<dyn Any + '_> {"}, {"sha": "b333c314c57c9181ed068ba4e4668054a836699d", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.stderr", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -4,11 +4,13 @@ error: cannot infer an appropriate lifetime\n LL | fn a(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with the anonymous lifetime `'_`...\n LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n-   |                                     ---------^-\n-   |                                     |        |\n-   |                                     |        ...and is captured here\n-   |                                     ...is required to be `'static` by this...\n+   |                                              ^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/region-object-lifetime-in-coercion.rs:8:37\n+   |\n+LL |     let x: Box<dyn Foo + 'static> = Box::new(v);\n+   |                                     ^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn a(v: &[u8]) -> Box<dyn Foo + '_> {\n@@ -24,11 +26,13 @@ error: cannot infer an appropriate lifetime\n LL | fn b(v: &[u8]) -> Box<dyn Foo + 'static> {\n    |         ----- this data with the anonymous lifetime `'_`...\n LL |     Box::new(v)\n-   |     ---------^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/region-object-lifetime-in-coercion.rs:13:5\n+   |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn b(v: &[u8]) -> Box<dyn Foo + '_> {\n@@ -45,11 +49,13 @@ LL | fn c(v: &[u8]) -> Box<dyn Foo> {\n    |         ----- this data with the anonymous lifetime `'_`...\n ...\n LL |     Box::new(v)\n-   |     ---------^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^ ...is captured here...\n+   |\n+note: ...and required to be `'static` by this\n+  --> $DIR/region-object-lifetime-in-coercion.rs:19:5\n    |\n+LL |     Box::new(v)\n+   |     ^^^^^^^^^^^\n help: to permit non-static references in a trait object value, you can add an explicit bound for the anonymous lifetime `'_`\n    |\n LL | fn c(v: &[u8]) -> Box<dyn Foo + '_> {"}, {"sha": "3127ae65ace7dc9ccb67b9b292e417f5f13e965a", "filename": "src/test/ui/regions/regions-close-object-into-object-2.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -4,11 +4,13 @@ error: cannot infer an appropriate lifetime\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'static> {\n    |                         ------------------ this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |     ------^^^---------------\n-   |     |     |\n-   |     |     ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |           ^^^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/regions-close-object-into-object-2.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn g<'a, T: 'static>(v: Box<dyn A<T> + 'a>) -> Box<dyn X + 'a> {"}, {"sha": "b18c61f13769429f50aadd1a5b60b3904e3d7de8", "filename": "src/test/ui/regions/regions-close-object-into-object-4.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -4,11 +4,13 @@ error: cannot infer an appropriate lifetime\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'static> {\n    |                   ---------------- this data with lifetime `'a`...\n LL |     box B(&*v) as Box<dyn X>\n-   |     ------^^^---------------\n-   |     |     |\n-   |     |     ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |           ^^^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/regions-close-object-into-object-4.rs:10:5\n+   |\n+LL |     box B(&*v) as Box<dyn X>\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to lifetime `'a`\n    |\n LL | fn i<'a, T, U>(v: Box<dyn A<U>+'a>) -> Box<dyn X + 'a> {"}, {"sha": "5cb9506afd351fc77ab5c95b2fb022bf2f300ad5", "filename": "src/test/ui/regions/regions-proc-bound-capture.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e75588934c01d6bc9abb02979eb61168a7b5c598/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-proc-bound-capture.stderr?ref=e75588934c01d6bc9abb02979eb61168a7b5c598", "patch": "@@ -5,11 +5,13 @@ LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + 'static> {\n    |                   ------ this data with the anonymous lifetime `'_`...\n LL |     // This is illegal, because the region bound on `proc` is 'static.\n LL |     Box::new(move || { *x })\n-   |     ---------^^^^^^^^^^^^^^-\n-   |     |        |\n-   |     |        ...and is captured here\n-   |     ...is required to be `'static` by this...\n+   |              ^^^^^^^^^^^^^^ ...is captured here...\n    |\n+note: ...and required to be `'static` by this\n+  --> $DIR/regions-proc-bound-capture.rs:9:5\n+   |\n+LL |     Box::new(move || { *x })\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n help: consider changing the trait object's explicit `'static` bound to the anonymous lifetime `'_`\n    |\n LL | fn static_proc(x: &isize) -> Box<dyn FnMut() -> (isize) + '_> {"}]}