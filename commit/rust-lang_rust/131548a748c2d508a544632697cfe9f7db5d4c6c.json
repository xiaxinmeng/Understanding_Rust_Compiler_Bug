{"sha": "131548a748c2d508a544632697cfe9f7db5d4c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMTU0OGE3NDhjMmQ1MDhhNTQ0NjMyNjk3Y2ZlOWY3ZGI1ZDRjNmM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-21T20:57:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-22T09:08:23Z"}, "message": "gen_random: handle size 0 and writing to mem", "tree": {"sha": "4c54221dc887cb7f6a66f5488f4b6d58b48eb735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c54221dc887cb7f6a66f5488f4b6d58b48eb735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/131548a748c2d508a544632697cfe9f7db5d4c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/131548a748c2d508a544632697cfe9f7db5d4c6c", "html_url": "https://github.com/rust-lang/rust/commit/131548a748c2d508a544632697cfe9f7db5d4c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/131548a748c2d508a544632697cfe9f7db5d4c6c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703b7f8a7e64fb2273fb516ecb8c953375d9deed", "url": "https://api.github.com/repos/rust-lang/rust/commits/703b7f8a7e64fb2273fb516ecb8c953375d9deed", "html_url": "https://github.com/rust-lang/rust/commit/703b7f8a7e64fb2273fb516ecb8c953375d9deed"}], "stats": {"total": 50, "additions": 21, "deletions": 29}, "files": [{"sha": "7a684bdaa78f4201a1d3698235ead334e1053bee", "filename": "src/fn_call.rs", "status": "modified", "additions": 21, "deletions": 29, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/131548a748c2d508a544632697cfe9f7db5d4c6c/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/131548a748c2d508a544632697cfe9f7db5d4c6c/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=131548a748c2d508a544632697cfe9f7db5d4c6c", "patch": "@@ -298,19 +298,14 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n                 // is called if a `HashMap` is created the regular way (e.g. HashMap<K, V>).\n                 match this.read_scalar(args[0])?.to_usize(this)? {\n                     id if id == sys_getrandom => {\n-                        let ptr = this.read_scalar(args[1])?.to_ptr()?;\n+                        let ptr = this.read_scalar(args[1])?.not_undef()?;\n                         let len = this.read_scalar(args[2])?.to_usize(this)?;\n \n                         // The only supported flags are GRND_RANDOM and GRND_NONBLOCK,\n                         // neither of which have any effect on our current PRNG\n                         let _flags = this.read_scalar(args[3])?.to_i32()?;\n \n-                        if len > 0 {\n-                            let data = gen_random(this, len as usize)?;\n-                            this.memory_mut().get_mut(ptr.alloc_id)?\n-                                        .write_bytes(tcx, ptr, &data)?;\n-                        }\n-\n+                        gen_random(this, len as usize, ptr)?;\n                         this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n                     }\n                     id => {\n@@ -714,14 +709,8 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             },\n             \"SecRandomCopyBytes\" => {\n                 let len = this.read_scalar(args[1])?.to_usize(this)?;\n-                let ptr = this.read_scalar(args[2])?.to_ptr()?;\n-\n-                if len > 0 {\n-                    let data = gen_random(this, len as usize)?;\n-                    this.memory_mut().get_mut(ptr.alloc_id)?\n-                        .write_bytes(tcx, ptr, &data)?;\n-                }\n-\n+                let ptr = this.read_scalar(args[2])?.not_undef()?;\n+                gen_random(this, len as usize, ptr)?;\n                 this.write_null(dest)?;\n             }\n \n@@ -878,15 +867,9 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n             }\n             // The actual name of 'RtlGenRandom'\n             \"SystemFunction036\" => {\n-                let ptr = this.read_scalar(args[0])?.to_ptr()?;\n+                let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let len = this.read_scalar(args[1])?.to_u32()?;\n-\n-                if len > 0 {\n-                    let data = gen_random(this, len as usize)?;\n-                    this.memory_mut().get_mut(ptr.alloc_id)?\n-                        .write_bytes(tcx, ptr, &data)?;\n-                }\n-\n+                gen_random(this, len as usize, ptr)?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n \n@@ -927,21 +910,30 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n fn gen_random<'a, 'mir, 'tcx>(\n     this: &mut MiriEvalContext<'a, 'mir, 'tcx>,\n     len: usize,\n-) -> Result<Vec<u8>, EvalError<'tcx>>  {\n+    dest: Scalar<Tag>,\n+) -> EvalResult<'tcx>  {\n+    if len == 0 {\n+        // Nothing to do\n+        return Ok(());\n+    }\n+    let ptr = dest.to_ptr()?;\n \n-    match &mut this.machine.rng {\n+    let data = match &mut this.machine.rng {\n         Some(rng) => {\n             let mut data = vec![0; len];\n             rng.fill_bytes(&mut data);\n-            Ok(data)\n+            data\n         }\n         None => {\n-            err!(Unimplemented(\n+            return err!(Unimplemented(\n                 \"miri does not support gathering system entropy in deterministic mode!\n                 Use '-Zmiri-seed=<seed>' to enable random number generation.\n                 WARNING: Miri does *not* generate cryptographically secure entropy -\n                 do not use Miri to run any program that needs secure random number generation\".to_owned(),\n-            ))\n+            ));\n         }\n-    }\n+    };\n+    let tcx = &{this.tcx.tcx};\n+    this.memory_mut().get_mut(ptr.alloc_id)?\n+        .write_bytes(tcx, ptr, &data)\n }"}]}