{"sha": "f7581d8d219613d6aa2a017d31d230587a6076f6", "node_id": "C_kwDOAAsO6NoAKGY3NTgxZDhkMjE5NjEzZDZhYTJhMDE3ZDMxZDIzMDU4N2E2MDc2ZjY", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-12T20:45:21Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-04-17T12:01:03Z"}, "message": "Suggest using integration tests for proc-macros", "tree": {"sha": "380da949518d4198a6ab97574fc8a89716f9e586", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380da949518d4198a6ab97574fc8a89716f9e586"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7581d8d219613d6aa2a017d31d230587a6076f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7581d8d219613d6aa2a017d31d230587a6076f6", "html_url": "https://github.com/rust-lang/rust/commit/f7581d8d219613d6aa2a017d31d230587a6076f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7581d8d219613d6aa2a017d31d230587a6076f6/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d7ed3ba8445452013dd873dc9abcad41a3d82b2", "html_url": "https://github.com/rust-lang/rust/commit/0d7ed3ba8445452013dd873dc9abcad41a3d82b2"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "950caaa5ebe2ddae9f25e0c867a5aefe3dbc56e4", "filename": "compiler/rustc_resolve/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fmessages.ftl?ref=f7581d8d219613d6aa2a017d31d230587a6076f6", "patch": "@@ -223,3 +223,6 @@ resolve_remove_surrounding_derive =\n resolve_add_as_non_derive =\n     add as non-Derive macro\n     `#[{$macro_path}]`\n+\n+resolve_proc_macro_same_crate = can't use a procedural macro from the same crate that defines it\n+    .help = you can define integration tests in a directory named `tests`"}, {"sha": "a0b403828edc1862fecc56cb91b641ced03a794f", "filename": "compiler/rustc_resolve/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Ferrors.rs?ref=f7581d8d219613d6aa2a017d31d230587a6076f6", "patch": "@@ -508,3 +508,12 @@ pub(crate) struct RemoveSurroundingDerive {\n pub(crate) struct AddAsNonDerive<'a> {\n     pub(crate) macro_path: &'a str,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(resolve_proc_macro_same_crate)]\n+pub(crate) struct ProcMacroSameCrate {\n+    #[primary_span]\n+    pub(crate) span: Span,\n+    #[help]\n+    pub(crate) is_test: bool,\n+}"}, {"sha": "2211fb56ccda1aac5fd810511c9e8d60a64e2b33", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7581d8d219613d6aa2a017d31d230587a6076f6/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=f7581d8d219613d6aa2a017d31d230587a6076f6", "patch": "@@ -1,7 +1,7 @@\n //! A bunch of methods and structures more or less related to resolving macros and\n //! interface provided by `Resolver` to macro expander.\n \n-use crate::errors::{AddAsNonDerive, MacroExpectedFound, RemoveSurroundingDerive};\n+use crate::errors::{self, AddAsNonDerive, MacroExpectedFound, RemoveSurroundingDerive};\n use crate::Namespace::*;\n use crate::{BuiltinMacroState, Determinacy};\n use crate::{DeriveData, Finalize, ParentScope, ResolutionError, Resolver, ScopeSet};\n@@ -513,10 +513,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 if let Some(def_id) = def_id.as_local() {\n                     self.unused_macros.remove(&def_id);\n                     if self.proc_macro_stubs.contains(&def_id) {\n-                        self.tcx.sess.span_err(\n-                            path.span,\n-                            \"can't use a procedural macro from the same crate that defines it\",\n-                        );\n+                        self.tcx.sess.emit_err(errors::ProcMacroSameCrate {\n+                            span: path.span,\n+                            is_test: self.tcx.sess.is_test_crate(),\n+                        });\n                     }\n                 }\n             }"}, {"sha": "c13f384fa3ae14a9474ad57a3ca6c8adc182d62c", "filename": "tests/ui/proc-macro/test-same-crate.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f7581d8d219613d6aa2a017d31d230587a6076f6/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7581d8d219613d6aa2a017d31d230587a6076f6/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Ftest-same-crate.rs?ref=f7581d8d219613d6aa2a017d31d230587a6076f6", "patch": "@@ -0,0 +1,16 @@\n+// compile-flags: --test\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro]\n+pub fn mac(input: TokenStream) -> TokenStream { loop {} }\n+\n+#[cfg(test)]\n+mod test {\n+    #[test]\n+    fn t() { crate::mac!(A) }\n+    //~^ ERROR can't use a procedural macro from the same crate that defines it\n+    //~| HELP you can define integration tests in a directory named `tests`\n+}"}, {"sha": "5d12e149c3c4cf7f87d87337549d03f9048e6744", "filename": "tests/ui/proc-macro/test-same-crate.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f7581d8d219613d6aa2a017d31d230587a6076f6/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7581d8d219613d6aa2a017d31d230587a6076f6/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Ftest-same-crate.stderr?ref=f7581d8d219613d6aa2a017d31d230587a6076f6", "patch": "@@ -0,0 +1,10 @@\n+error: can't use a procedural macro from the same crate that defines it\n+  --> $DIR/test-same-crate.rs:13:14\n+   |\n+LL |     fn t() { crate::mac!(A) }\n+   |              ^^^^^^^^^^\n+   |\n+   = help: you can define integration tests in a directory named `tests`\n+\n+error: aborting due to previous error\n+"}]}