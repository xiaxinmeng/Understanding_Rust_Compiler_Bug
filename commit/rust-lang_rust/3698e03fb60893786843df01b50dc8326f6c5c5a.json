{"sha": "3698e03fb60893786843df01b50dc8326f6c5c5a", "node_id": "C_kwDOAAsO6NoAKDM2OThlMDNmYjYwODkzNzg2ODQzZGYwMWI1MGRjODMyNmY2YzVjNWE", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2021-10-09T21:11:13Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-01-07T22:54:28Z"}, "message": "Remove span from UpvarCapture::ByValue\n\nThis span is unused and is superseded by capture_kind_expr_id in CaptureInfo", "tree": {"sha": "aab8addff3b7e028a15b50bba89fb244552e22d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aab8addff3b7e028a15b50bba89fb244552e22d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3698e03fb60893786843df01b50dc8326f6c5c5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3698e03fb60893786843df01b50dc8326f6c5c5a", "html_url": "https://github.com/rust-lang/rust/commit/3698e03fb60893786843df01b50dc8326f6c5c5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3698e03fb60893786843df01b50dc8326f6c5c5a/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e012a191d768adeda1ee36a99ef8b92d51920154", "url": "https://api.github.com/repos/rust-lang/rust/commits/e012a191d768adeda1ee36a99ef8b92d51920154", "html_url": "https://github.com/rust-lang/rust/commit/e012a191d768adeda1ee36a99ef8b92d51920154"}], "stats": {"total": 73, "additions": 28, "deletions": 45}, "files": [{"sha": "73a5a9cf0c357bf31a5f48b51be440d4973d70ab", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -712,7 +712,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                             }) => {\n                                 capture_reason = format!(\"mutable borrow of `{}`\", upvar);\n                             }\n-                            ty::UpvarCapture::ByValue(_) => {\n+                            ty::UpvarCapture::ByValue => {\n                                 capture_reason = format!(\"possible mutation of `{}`\", upvar);\n                             }\n                             _ => bug!(\"upvar `{}` borrowed, but not mutably\", upvar),"}, {"sha": "7e961e1e750be9a3fb970442b87774ffe24f0129", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -186,7 +186,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n         .map(|captured_place| {\n             let capture = captured_place.info.capture_kind;\n             let by_ref = match capture {\n-                ty::UpvarCapture::ByValue(_) => false,\n+                ty::UpvarCapture::ByValue => false,\n                 ty::UpvarCapture::ByRef(..) => true,\n             };\n             Upvar { place: captured_place.clone(), by_ref }"}, {"sha": "d3acf130f4fb3f0065603f0a3ce00593c6934e3b", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -56,13 +56,7 @@ pub enum UpvarCapture<'tcx> {\n     /// Upvar is captured by value. This is always true when the\n     /// closure is labeled `move`, but can also be true in other cases\n     /// depending on inference.\n-    ///\n-    /// If the upvar was inferred to be captured by value (e.g. `move`\n-    /// was not used), then the `Span` points to a usage that\n-    /// required it. There may be more than one such usage\n-    /// (e.g. `|| { a; a; }`), in which case we pick an\n-    /// arbitrary one.\n-    ByValue(Option<Span>),\n+    ByValue,\n \n     /// Upvar is captured by reference.\n     ByRef(UpvarBorrow<'tcx>),"}, {"sha": "7e1fc21f3ffc3821c2dd737dfd743aeaf04106d7", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -266,7 +266,7 @@ fn to_upvars_resolved_place_builder<'a, 'tcx>(\n             // we need to deref it\n             upvar_resolved_place_builder = match capture.info.capture_kind {\n                 ty::UpvarCapture::ByRef(_) => upvar_resolved_place_builder.deref(),\n-                ty::UpvarCapture::ByValue(_) => upvar_resolved_place_builder,\n+                ty::UpvarCapture::ByValue => upvar_resolved_place_builder,\n             };\n \n             let next_projection = capture.place.projections.len();"}, {"sha": "a4f3a63e40b603bc586eb30f9dd5e457f1c3a9d2", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -930,7 +930,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     let mut projs = closure_env_projs.clone();\n                     projs.push(ProjectionElem::Field(Field::new(i), ty));\n                     match capture {\n-                        ty::UpvarCapture::ByValue(_) => {}\n+                        ty::UpvarCapture::ByValue => {}\n                         ty::UpvarCapture::ByRef(..) => {\n                             projs.push(ProjectionElem::Deref);\n                         }"}, {"sha": "1c03c7b060518276ba800e8836100f37ef1c4c2b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -1108,7 +1108,7 @@ impl<'tcx> Cx<'tcx> {\n         let temp_lifetime = self.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n \n         match upvar_capture {\n-            ty::UpvarCapture::ByValue(_) => captured_place_expr,\n+            ty::UpvarCapture::ByValue => captured_place_expr,\n             ty::UpvarCapture::ByRef(upvar_borrow) => {\n                 let borrow_kind = match upvar_borrow.kind {\n                     ty::BorrowKind::ImmBorrow => BorrowKind::Shared,"}, {"sha": "2e3bf7ea548ac347dd39a9b1167b53ad2381455b", "filename": "compiler/rustc_passes/src/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fliveness.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -726,7 +726,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                             );\n                             self.acc(self.exit_ln, var, ACC_READ | ACC_USE);\n                         }\n-                        ty::UpvarCapture::ByValue(_) => {}\n+                        ty::UpvarCapture::ByValue => {}\n                     }\n                 }\n             }\n@@ -1481,7 +1481,7 @@ impl<'tcx> Liveness<'_, 'tcx> {\n         for (&var_hir_id, min_capture_list) in closure_min_captures {\n             for captured_place in min_capture_list {\n                 match captured_place.info.capture_kind {\n-                    ty::UpvarCapture::ByValue(_) => {}\n+                    ty::UpvarCapture::ByValue => {}\n                     ty::UpvarCapture::ByRef(..) => continue,\n                 };\n                 let span = captured_place.get_capture_kind_span(self.ir.tcx);"}, {"sha": "89a7a0cf999818a15d069682fac7135d598e8054", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -867,7 +867,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n                         all_captures_are_imm_borrow = false;\n                     }\n                 }\n-                ty::UpvarCapture::ByValue(_) => {\n+                ty::UpvarCapture::ByValue => {\n                     all_captures_are_imm_borrow = false;\n                 }\n             }"}, {"sha": "0325f50563fb103bddf89c5ad728231dba6d5590", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -409,7 +409,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n \n             let updated = match capture_info.capture_kind {\n-                ty::UpvarCapture::ByValue(..) => match closure_kind {\n+                ty::UpvarCapture::ByValue => match closure_kind {\n                     ty::ClosureKind::Fn | ty::ClosureKind::FnMut => {\n                         (ty::ClosureKind::FnOnce, Some((usage_span, place.clone())))\n                     }\n@@ -1086,7 +1086,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         for captured_place in root_var_min_capture_list.iter() {\n             match captured_place.info.capture_kind {\n                 // Only care about captures that are moved into the closure\n-                ty::UpvarCapture::ByValue(..) => {\n+                ty::UpvarCapture::ByValue => {\n                     projections_list.push(captured_place.place.projections.as_slice());\n                     diagnostics_info.insert(UpvarMigrationInfo::CapturingPrecise {\n                         source_expr: captured_place.info.path_expr_id,\n@@ -1481,7 +1481,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // at the first Deref in `adjust_upvar_borrow_kind_for_consume` and then moved into\n             // the closure.\n             hir::CaptureBy::Value if !place.deref_tys().any(ty::TyS::is_ref) => {\n-                ty::UpvarCapture::ByValue(None)\n+                ty::UpvarCapture::ByValue\n             }\n             hir::CaptureBy::Value | hir::CaptureBy::Ref => {\n                 let origin = UpvarRegion(upvar_id, closure_span);\n@@ -1678,7 +1678,7 @@ fn apply_capture_kind_on_capture_ty<'tcx>(\n     capture_kind: UpvarCapture<'tcx>,\n ) -> Ty<'tcx> {\n     match capture_kind {\n-        ty::UpvarCapture::ByValue(_) => ty,\n+        ty::UpvarCapture::ByValue => ty,\n         ty::UpvarCapture::ByRef(borrow) => tcx\n             .mk_ref(borrow.region, ty::TypeAndMut { ty: ty, mutbl: borrow.kind.to_mutbl_lossy() }),\n     }\n@@ -1756,12 +1756,10 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n \n         debug!(?upvar_id);\n \n-        let usage_span = tcx.hir().span(diag_expr_id);\n-\n         let capture_info = ty::CaptureInfo {\n             capture_kind_expr_id: Some(diag_expr_id),\n             path_expr_id: Some(diag_expr_id),\n-            capture_kind: ty::UpvarCapture::ByValue(Some(usage_span)),\n+            capture_kind: ty::UpvarCapture::ByValue,\n         };\n \n         let curr_info = self.capture_information[&place_with_id.place];\n@@ -1841,7 +1839,7 @@ impl<'a, 'tcx> InferBorrowKind<'a, 'tcx> {\n \n         debug!(?curr_capture_info);\n \n-        if let ty::UpvarCapture::ByValue(_) = curr_capture_info.capture_kind {\n+        if let ty::UpvarCapture::ByValue = curr_capture_info.capture_kind {\n             // It's already captured by value, we don't need to do anything here\n             return;\n         } else if let ty::UpvarCapture::ByRef(curr_upvar_borrow) = curr_capture_info.capture_kind {\n@@ -1961,7 +1959,7 @@ impl<'a, 'tcx> euv::Delegate<'tcx> for InferBorrowKind<'a, 'tcx> {\n             },\n \n             // Just truncating the place will never cause capture kind to be updated to ByValue\n-            ty::UpvarCapture::ByValue(..) => unreachable!(),\n+            ty::UpvarCapture::ByValue => unreachable!(),\n         }\n     }\n \n@@ -1980,7 +1978,7 @@ fn restrict_precision_for_drop_types<'a, 'tcx>(\n ) -> (Place<'tcx>, ty::UpvarCapture<'tcx>) {\n     let is_copy_type = fcx.infcx.type_is_copy_modulo_regions(fcx.param_env, place.ty(), span);\n \n-    if let (false, UpvarCapture::ByValue(..)) = (is_copy_type, curr_mode) {\n+    if let (false, UpvarCapture::ByValue) = (is_copy_type, curr_mode) {\n         for i in 0..place.projections.len() {\n             match place.ty_before_projection(i).kind() {\n                 ty::Adt(def, _) if def.destructor(fcx.tcx).is_some() => {\n@@ -2070,9 +2068,7 @@ fn adjust_for_move_closure<'tcx>(\n         truncate_place_to_len_and_update_capture_kind(&mut place, &mut kind, idx);\n     }\n \n-    // AMAN: I think we don't need the span inside the ByValue anymore\n-    //       we have more detailed span in CaptureInfo\n-    (place, ty::UpvarCapture::ByValue(None))\n+    (place, ty::UpvarCapture::ByValue)\n }\n \n /// Adjust closure capture just that if taking ownership of data, only move data\n@@ -2085,7 +2081,7 @@ fn adjust_for_non_move_closure<'tcx>(\n         place.projections.iter().position(|proj| proj.kind == ProjectionKind::Deref);\n \n     match kind {\n-        ty::UpvarCapture::ByValue(..) => {\n+        ty::UpvarCapture::ByValue => {\n             if let Some(idx) = contains_deref {\n                 truncate_place_to_len_and_update_capture_kind(&mut place, &mut kind, idx);\n             }\n@@ -2128,7 +2124,7 @@ fn construct_capture_kind_reason_string<'tcx>(\n     let place_str = construct_place_string(tcx, place);\n \n     let capture_kind_str = match capture_info.capture_kind {\n-        ty::UpvarCapture::ByValue(_) => \"ByValue\".into(),\n+        ty::UpvarCapture::ByValue => \"ByValue\".into(),\n         ty::UpvarCapture::ByRef(borrow) => format!(\"{:?}\", borrow.kind),\n     };\n \n@@ -2149,7 +2145,7 @@ fn construct_capture_info_string<'tcx>(\n     let place_str = construct_place_string(tcx, place);\n \n     let capture_kind_str = match capture_info.capture_kind {\n-        ty::UpvarCapture::ByValue(_) => \"ByValue\".into(),\n+        ty::UpvarCapture::ByValue => \"ByValue\".into(),\n         ty::UpvarCapture::ByRef(borrow) => format!(\"{:?}\", borrow.kind),\n     };\n     format!(\"{} -> {}\", place_str, capture_kind_str)\n@@ -2240,18 +2236,11 @@ fn determine_capture_info<'tcx>(\n     // If the capture kind is equivalent then, we don't need to escalate and can compare the\n     // expressions.\n     let eq_capture_kind = match (capture_info_a.capture_kind, capture_info_b.capture_kind) {\n-        (ty::UpvarCapture::ByValue(_), ty::UpvarCapture::ByValue(_)) => {\n-            // We don't need to worry about the spans being ignored here.\n-            //\n-            // The expr_id in capture_info corresponds to the span that is stored within\n-            // ByValue(span) and therefore it gets handled with priortizing based on\n-            // expressions below.\n-            true\n-        }\n+        (ty::UpvarCapture::ByValue, ty::UpvarCapture::ByValue) => true,\n         (ty::UpvarCapture::ByRef(ref_a), ty::UpvarCapture::ByRef(ref_b)) => {\n             ref_a.kind == ref_b.kind\n         }\n-        (ty::UpvarCapture::ByValue(_), _) | (ty::UpvarCapture::ByRef(_), _) => false,\n+        (ty::UpvarCapture::ByValue, _) | (ty::UpvarCapture::ByRef(_), _) => false,\n     };\n \n     if eq_capture_kind {\n@@ -2263,8 +2252,8 @@ fn determine_capture_info<'tcx>(\n         // We select the CaptureKind which ranks higher based the following priority order:\n         // ByValue > MutBorrow > UniqueImmBorrow > ImmBorrow\n         match (capture_info_a.capture_kind, capture_info_b.capture_kind) {\n-            (ty::UpvarCapture::ByValue(_), _) => capture_info_a,\n-            (_, ty::UpvarCapture::ByValue(_)) => capture_info_b,\n+            (ty::UpvarCapture::ByValue, _) => capture_info_a,\n+            (_, ty::UpvarCapture::ByValue) => capture_info_b,\n             (ty::UpvarCapture::ByRef(ref_a), ty::UpvarCapture::ByRef(ref_b)) => {\n                 match (ref_a.kind, ref_b.kind) {\n                     // Take LHS:\n@@ -2319,7 +2308,7 @@ fn truncate_place_to_len_and_update_capture_kind<'tcx>(\n         }\n \n         ty::UpvarCapture::ByRef(..) => {}\n-        ty::UpvarCapture::ByValue(..) => {}\n+        ty::UpvarCapture::ByValue => {}\n     }\n \n     place.projections.truncate(len);"}, {"sha": "5b6e73ef5ee1edb469e9b1437016b9fcd470fe7b", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -796,7 +796,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                     );\n \n                     match capture_info.capture_kind {\n-                        ty::UpvarCapture::ByValue(_) => {\n+                        ty::UpvarCapture::ByValue => {\n                             self.delegate_consume(&place_with_id, place_with_id.hir_id);\n                         }\n                         ty::UpvarCapture::ByRef(upvar_borrow) => {"}, {"sha": "5ce68bc4d1d5c3bb748feb3fb24bd9a8e9bdf294", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3698e03fb60893786843df01b50dc8326f6c5c5a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3698e03fb60893786843df01b50dc8326f6c5c5a/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=3698e03fb60893786843df01b50dc8326f6c5c5a", "patch": "@@ -969,7 +969,7 @@ pub fn can_move_expr_to_closure(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) ->\n                         };\n                         if !self.locals.contains(&local_id) {\n                             let capture = match capture.info.capture_kind {\n-                                UpvarCapture::ByValue(_) => CaptureKind::Value,\n+                                UpvarCapture::ByValue => CaptureKind::Value,\n                                 UpvarCapture::ByRef(borrow) => match borrow.kind {\n                                     BorrowKind::ImmBorrow => CaptureKind::Ref(Mutability::Not),\n                                     BorrowKind::UniqueImmBorrow | BorrowKind::MutBorrow => {"}]}