{"sha": "5307d3674e2df2baef0e37125a98227590fc43d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDdkMzY3NGUyZGYyYmFlZjBlMzcxMjVhOTgyMjc1OTBmYzQzZDI=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:17:17Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-30T00:32:38Z"}, "message": "std: Implement Extendable for hashmap, str and trie", "tree": {"sha": "c225a955046a3353bda8d6604baf8d45806dda1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c225a955046a3353bda8d6604baf8d45806dda1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5307d3674e2df2baef0e37125a98227590fc43d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5307d3674e2df2baef0e37125a98227590fc43d2", "html_url": "https://github.com/rust-lang/rust/commit/5307d3674e2df2baef0e37125a98227590fc43d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5307d3674e2df2baef0e37125a98227590fc43d2/comments", "author": null, "committer": null, "parents": [{"sha": "f8ae526f707c9a9e0540b80209838d2e75dc960b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8ae526f707c9a9e0540b80209838d2e75dc960b", "html_url": "https://github.com/rust-lang/rust/commit/f8ae526f707c9a9e0540b80209838d2e75dc960b"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "e43293f32122a4edd2576b718a20735f9b716bab", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=5307d3674e2df2baef0e37125a98227590fc43d2", "patch": "@@ -19,7 +19,7 @@ use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator, Chain};\n+use iterator::{Iterator, IteratorUtil, FromIterator, Extendable, Chain};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -618,15 +618,19 @@ impl<K> Iterator<K> for HashSetConsumeIterator<K> {\n }\n \n impl<K: Eq + Hash, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for HashMap<K, V> {\n-    pub fn from_iterator(iter: &mut T) -> HashMap<K, V> {\n+    fn from_iterator(iter: &mut T) -> HashMap<K, V> {\n         let (lower, _) = iter.size_hint();\n         let mut map = HashMap::with_capacity(lower);\n+        map.extend(iter);\n+        map\n+    }\n+}\n \n+impl<K: Eq + Hash, V, T: Iterator<(K, V)>> Extendable<(K, V), T> for HashMap<K, V> {\n+    fn extend(&mut self, iter: &mut T) {\n         for iter.advance |(k, v)| {\n-            map.insert(k, v);\n+            self.insert(k, v);\n         }\n-\n-        map\n     }\n }\n \n@@ -771,15 +775,19 @@ impl<T:Hash + Eq> HashSet<T> {\n }\n \n impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n-    pub fn from_iterator(iter: &mut T) -> HashSet<K> {\n+    fn from_iterator(iter: &mut T) -> HashSet<K> {\n         let (lower, _) = iter.size_hint();\n         let mut set = HashSet::with_capacity(lower);\n+        set.extend(iter);\n+        set\n+    }\n+}\n \n+impl<K: Eq + Hash, T: Iterator<K>> Extendable<K, T> for HashSet<K> {\n+    fn extend(&mut self, iter: &mut T) {\n         for iter.advance |k| {\n-            set.insert(k);\n+            self.insert(k);\n         }\n-\n-        set\n     }\n }\n "}, {"sha": "fff859321fbe6c1c6fa7035df830a2f5e49e42f5", "filename": "src/libstd/str.rs", "status": "modified", "additions": 24, "deletions": 3, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=5307d3674e2df2baef0e37125a98227590fc43d2", "patch": "@@ -23,7 +23,8 @@ use char::Char;\n use clone::Clone;\n use container::{Container, Mutable};\n use iter::Times;\n-use iterator::{Iterator, FromIterator, IteratorUtil, Filter, AdditiveIterator, Map};\n+use iterator::{Iterator, FromIterator, Extendable, IteratorUtil};\n+use iterator::{Filter, AdditiveIterator, Map};\n use libc;\n use num::Zero;\n use option::{None, Option, Some};\n@@ -2323,10 +2324,20 @@ impl<T: Iterator<char>> FromIterator<char, T> for ~str {\n     fn from_iterator(iterator: &mut T) -> ~str {\n         let (lower, _) = iterator.size_hint();\n         let mut buf = with_capacity(lower);\n+        buf.extend(iterator);\n+        buf\n+    }\n+}\n+\n+impl<T: Iterator<char>> Extendable<char, T> for ~str {\n+    #[inline]\n+    fn extend(&mut self, iterator: &mut T) {\n+        let (lower, _) = iterator.size_hint();\n+        let reserve = lower + self.len();\n+        self.reserve_at_least(reserve);\n         for iterator.advance |ch| {\n-            buf.push_char(ch)\n+            self.push_char(ch)\n         }\n-        buf\n     }\n }\n \n@@ -2503,6 +2514,16 @@ mod tests {\n         assert_eq!(data, s.as_slice());\n     }\n \n+    #[test]\n+    fn test_extend() {\n+        let data = ~\"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\";\n+        let mut cpy = data.clone();\n+        let other = \"abc\";\n+        let mut it = other.iter();\n+        cpy.extend(&mut it);\n+        assert_eq!(cpy, data + other);\n+    }\n+\n     #[test]\n     fn test_clear() {\n         let mut empty = ~\"\";"}, {"sha": "6a0554a8c8d4324be5e76f19437e8b63fe08b18f", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5307d3674e2df2baef0e37125a98227590fc43d2/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=5307d3674e2df2baef0e37125a98227590fc43d2", "patch": "@@ -11,7 +11,7 @@\n //! An ordered map and set for integer keys implemented as a radix trie\n \n use prelude::*;\n-use iterator::{IteratorUtil, FromIterator};\n+use iterator::{IteratorUtil, FromIterator, Extendable};\n use uint;\n use util::{swap, replace};\n \n@@ -155,14 +155,18 @@ impl<T> TrieMap<T> {\n }\n \n impl<T, Iter: Iterator<(uint, T)>> FromIterator<(uint, T), Iter> for TrieMap<T> {\n-    pub fn from_iterator(iter: &mut Iter) -> TrieMap<T> {\n+    fn from_iterator(iter: &mut Iter) -> TrieMap<T> {\n         let mut map = TrieMap::new();\n+        map.extend(iter);\n+        map\n+    }\n+}\n \n+impl<T, Iter: Iterator<(uint, T)>> Extendable<(uint, T), Iter> for TrieMap<T> {\n+    fn extend(&mut self, iter: &mut Iter) {\n         for iter.advance |(k, v)| {\n-            map.insert(k, v);\n+            self.insert(k, v);\n         }\n-\n-        map\n     }\n }\n \n@@ -222,14 +226,18 @@ impl TrieSet {\n }\n \n impl<Iter: Iterator<uint>> FromIterator<uint, Iter> for TrieSet {\n-    pub fn from_iterator(iter: &mut Iter) -> TrieSet {\n+    fn from_iterator(iter: &mut Iter) -> TrieSet {\n         let mut set = TrieSet::new();\n+        set.extend(iter);\n+        set\n+    }\n+}\n \n+impl<Iter: Iterator<uint>> Extendable<uint, Iter> for TrieSet {\n+    fn extend(&mut self, iter: &mut Iter) {\n         for iter.advance |elem| {\n-            set.insert(elem);\n+            self.insert(elem);\n         }\n-\n-        set\n     }\n }\n "}]}