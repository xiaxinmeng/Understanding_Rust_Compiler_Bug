{"sha": "b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "node_id": "C_kwDOAAsO6NoAKGIzMWI3NGU4ZmI0NTgwMGU5Zjg2Yzg0YjFmNzhlMzZiZjc2YzQ5OGM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-14T15:45:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-14T15:45:25Z"}, "message": "Merge pull request #1340 from bjorn3/non_rustup_build\n\nPush up a lot of rustc and cargo references", "tree": {"sha": "7478522350f6316630917a98e1833b221e3db04a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7478522350f6316630917a98e1833b221e3db04a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjws4VCRBK7hj4Ov3rIwAAH+8IAIRn39jKUtno/XyoNmGsv6xN\nx3xnjrLauLjwDu28VWVr4eEYp23IN+IbM875G1piKH2Nj5YVivwu8kgO3ffDHeYg\nEcjMBngwAmfNF0o2J4poklF4Sout/8J/7OqwIotSneiS1mXW6qDnEGOWoG9quJ/K\nmRwYzi9QdxtmGby9ICiY6fBHb9IKm3WRf93mqRcXDBkeTpfwVdvm8MYCyr8wUjJG\n5O+bj/4CaBY6SrUuVut5F4bvsFVB43Shv28LF5O+hN589604RXmkIOlH8UiMdjdt\nwBkQC5LJ/poUtLwgxbxzXmOJ8OKXzAy6sEsDmAh2CVGrWLyqyJ9YFmopbUTZxbM=\n=jxF6\n-----END PGP SIGNATURE-----\n", "payload": "tree 7478522350f6316630917a98e1833b221e3db04a\nparent 395eaa1538a18aff0c433b683625b7decf3c9235\nparent 629eab79c16a6659a241c0b50ea986780934a65d\nauthor bjorn3 <17426603+bjorn3@users.noreply.github.com> 1673711125 +0100\ncommitter GitHub <noreply@github.com> 1673711125 +0100\n\nMerge pull request #1340 from bjorn3/non_rustup_build\n\nPush up a lot of rustc and cargo references"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "html_url": "https://github.com/rust-lang/rust/commit/b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395eaa1538a18aff0c433b683625b7decf3c9235", "url": "https://api.github.com/repos/rust-lang/rust/commits/395eaa1538a18aff0c433b683625b7decf3c9235", "html_url": "https://github.com/rust-lang/rust/commit/395eaa1538a18aff0c433b683625b7decf3c9235"}, {"sha": "629eab79c16a6659a241c0b50ea986780934a65d", "url": "https://api.github.com/repos/rust-lang/rust/commits/629eab79c16a6659a241c0b50ea986780934a65d", "html_url": "https://github.com/rust-lang/rust/commit/629eab79c16a6659a241c0b50ea986780934a65d"}], "stats": {"total": 235, "additions": 135, "deletions": 100}, "files": [{"sha": "8742389f3322718645ccd25d2e1c4a0e9f9f600f", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -18,10 +18,10 @@ pub(crate) fn run(\n     sysroot_kind: SysrootKind,\n     dirs: &Dirs,\n     cg_clif_dylib: &Path,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n ) {\n     if !config::get_bool(\"testsuite.abi-cafe\") {\n-        eprintln!(\"[SKIP] abi-cafe\");\n+        eprintln!(\"[RUN] abi-cafe (skipped)\");\n         return;\n     }\n \n@@ -31,15 +31,15 @@ pub(crate) fn run(\n         channel,\n         sysroot_kind,\n         cg_clif_dylib,\n-        host_compiler,\n-        &host_compiler.triple,\n+        bootstrap_host_compiler,\n+        bootstrap_host_compiler.triple.clone(),\n     );\n \n     eprintln!(\"Running abi-cafe\");\n \n     let pairs = [\"rustc_calls_cgclif\", \"cgclif_calls_rustc\", \"cgclif_calls_cc\", \"cc_calls_cgclif\"];\n \n-    let mut cmd = ABI_CAFE.run(host_compiler, dirs);\n+    let mut cmd = ABI_CAFE.run(bootstrap_host_compiler, dirs);\n     cmd.arg(\"--\");\n     cmd.arg(\"--pairs\");\n     cmd.args(pairs);"}, {"sha": "1e83f21ba577b8bf870b77792ecc2094beee0294", "filename": "build_system/bench.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbench.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -21,24 +21,24 @@ pub(crate) static SIMPLE_RAYTRACER_LLVM: CargoProject =\n pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n     CargoProject::new(&SIMPLE_RAYTRACER_REPO.source_dir(), \"simple_raytracer\");\n \n-pub(crate) fn benchmark(dirs: &Dirs, host_compiler: &Compiler) {\n-    benchmark_simple_raytracer(dirs, host_compiler);\n+pub(crate) fn benchmark(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n+    benchmark_simple_raytracer(dirs, bootstrap_host_compiler);\n }\n \n-fn benchmark_simple_raytracer(dirs: &Dirs, host_compiler: &Compiler) {\n+fn benchmark_simple_raytracer(dirs: &Dirs, bootstrap_host_compiler: &Compiler) {\n     if std::process::Command::new(\"hyperfine\").output().is_err() {\n         eprintln!(\"Hyperfine not installed\");\n         eprintln!(\"Hint: Try `cargo install hyperfine` to install hyperfine\");\n         std::process::exit(1);\n     }\n \n     eprintln!(\"[LLVM BUILD] simple-raytracer\");\n-    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(host_compiler, dirs);\n+    let build_cmd = SIMPLE_RAYTRACER_LLVM.build(bootstrap_host_compiler, dirs);\n     spawn_and_wait(build_cmd);\n     fs::copy(\n         SIMPLE_RAYTRACER_LLVM\n             .target_dir(dirs)\n-            .join(&host_compiler.triple)\n+            .join(&bootstrap_host_compiler.triple)\n             .join(\"debug\")\n             .join(get_file_name(\"main\", \"bin\")),\n         RelPath::BUILD.to_path(dirs).join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),"}, {"sha": "514404305a3fa0416635e45dc7ad0b9a6a34357a", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -10,10 +10,10 @@ pub(crate) static CG_CLIF: CargoProject = CargoProject::new(&RelPath::SOURCE, \"c\n pub(crate) fn build_backend(\n     dirs: &Dirs,\n     channel: &str,\n-    host_compiler: &Compiler,\n+    bootstrap_host_compiler: &Compiler,\n     use_unstable_features: bool,\n ) -> PathBuf {\n-    let mut cmd = CG_CLIF.build(&host_compiler, dirs);\n+    let mut cmd = CG_CLIF.build(&bootstrap_host_compiler, dirs);\n \n     cmd.env(\"CARGO_BUILD_INCREMENTAL\", \"true\"); // Force incr comp even in release mode\n \n@@ -48,7 +48,7 @@ pub(crate) fn build_backend(\n \n     CG_CLIF\n         .target_dir(dirs)\n-        .join(&host_compiler.triple)\n+        .join(&bootstrap_host_compiler.triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))\n }"}, {"sha": "9eebcf95505d90ef2d7b0e8de404b9a7dfabdf5f", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -3,7 +3,9 @@ use std::path::Path;\n use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n-use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n+use super::rustc_info::{\n+    get_file_name, get_rustc_version, get_toolchain_name, get_wrapper_file_name,\n+};\n use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n@@ -17,15 +19,17 @@ pub(crate) fn build_sysroot(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib_src: &Path,\n-    host_compiler: &Compiler,\n-    target_triple: &str,\n-) {\n+    bootstrap_host_compiler: &Compiler,\n+    target_triple: String,\n+) -> Compiler {\n     eprintln!(\"[BUILD] sysroot {:?}\", sysroot_kind);\n \n     DIST_DIR.ensure_fresh(dirs);\n     BIN_DIR.ensure_exists(dirs);\n     LIB_DIR.ensure_exists(dirs);\n \n+    let is_native = bootstrap_host_compiler.triple == target_triple;\n+\n     // Copy the backend\n     let cg_clif_dylib_path = if cfg!(windows) {\n         // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n@@ -42,32 +46,34 @@ pub(crate) fn build_sysroot(\n     for wrapper in [\"rustc-clif\", \"rustdoc-clif\", \"cargo-clif\"] {\n         let wrapper_name = get_wrapper_file_name(wrapper, \"bin\");\n \n-        let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n+        let mut build_cargo_wrapper_cmd = Command::new(&bootstrap_host_compiler.rustc);\n         build_cargo_wrapper_cmd\n+            .env(\"TOOLCHAIN_NAME\", get_toolchain_name())\n             .arg(RelPath::SCRIPTS.to_path(dirs).join(&format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(DIST_DIR.to_path(dirs).join(wrapper_name))\n             .arg(\"-g\");\n         spawn_and_wait(build_cargo_wrapper_cmd);\n     }\n \n-    let default_sysroot = super::rustc_info::get_default_sysroot();\n+    let default_sysroot = super::rustc_info::get_default_sysroot(&bootstrap_host_compiler.rustc);\n \n-    let host_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&host_compiler.triple).join(\"lib\");\n-    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(target_triple).join(\"lib\");\n+    let host_rustlib_lib =\n+        RUSTLIB_DIR.to_path(dirs).join(&bootstrap_host_compiler.triple).join(\"lib\");\n+    let target_rustlib_lib = RUSTLIB_DIR.to_path(dirs).join(&target_triple).join(\"lib\");\n     fs::create_dir_all(&host_rustlib_lib).unwrap();\n     fs::create_dir_all(&target_rustlib_lib).unwrap();\n \n     if target_triple == \"x86_64-pc-windows-gnu\" {\n-        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\").exists() {\n+        if !default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\").exists() {\n             eprintln!(\n                 \"The x86_64-pc-windows-gnu target needs to be installed first before it is possible \\\n                 to compile a sysroot for it.\",\n             );\n             process::exit(1);\n         }\n         for file in fs::read_dir(\n-            default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+            default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n         )\n         .unwrap()\n         {\n@@ -83,7 +89,11 @@ pub(crate) fn build_sysroot(\n         SysrootKind::None => {} // Nothing to do\n         SysrootKind::Llvm => {\n             for file in fs::read_dir(\n-                default_sysroot.join(\"lib\").join(\"rustlib\").join(&host_compiler.triple).join(\"lib\"),\n+                default_sysroot\n+                    .join(\"lib\")\n+                    .join(\"rustlib\")\n+                    .join(&bootstrap_host_compiler.triple)\n+                    .join(\"lib\"),\n             )\n             .unwrap()\n             {\n@@ -103,9 +113,9 @@ pub(crate) fn build_sysroot(\n                 try_hard_link(&file, host_rustlib_lib.join(file.file_name().unwrap()));\n             }\n \n-            if target_triple != host_compiler.triple {\n+            if !is_native {\n                 for file in fs::read_dir(\n-                    default_sysroot.join(\"lib\").join(\"rustlib\").join(target_triple).join(\"lib\"),\n+                    default_sysroot.join(\"lib\").join(\"rustlib\").join(&target_triple).join(\"lib\"),\n                 )\n                 .unwrap()\n                 {\n@@ -118,19 +128,19 @@ pub(crate) fn build_sysroot(\n             build_clif_sysroot_for_triple(\n                 dirs,\n                 channel,\n-                host_compiler.clone(),\n+                bootstrap_host_compiler.clone(),\n                 &cg_clif_dylib_path,\n             );\n \n-            if host_compiler.triple != target_triple {\n+            if !is_native {\n                 build_clif_sysroot_for_triple(\n                     dirs,\n                     channel,\n                     {\n-                        let mut target_compiler = host_compiler.clone();\n-                        target_compiler.triple = target_triple.to_owned();\n-                        target_compiler.set_cross_linker_and_runner();\n-                        target_compiler\n+                        let mut bootstrap_target_compiler = bootstrap_host_compiler.clone();\n+                        bootstrap_target_compiler.triple = target_triple.clone();\n+                        bootstrap_target_compiler.set_cross_linker_and_runner();\n+                        bootstrap_target_compiler\n                     },\n                     &cg_clif_dylib_path,\n                 );\n@@ -147,6 +157,12 @@ pub(crate) fn build_sysroot(\n             }\n         }\n     }\n+\n+    let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n+    if !is_native {\n+        target_compiler.set_cross_linker_and_runner();\n+    }\n+    target_compiler\n }\n \n pub(crate) static ORIG_BUILD_SYSROOT: RelPath = RelPath::SOURCE.join(\"build_sysroot\");\n@@ -169,7 +185,7 @@ fn build_clif_sysroot_for_triple(\n             process::exit(1);\n         }\n         Ok(source_version) => {\n-            let rustc_version = get_rustc_version();\n+            let rustc_version = get_rustc_version(&compiler.rustc);\n             if source_version != rustc_version {\n                 eprintln!(\"The patched sysroot source is outdated\");\n                 eprintln!(\"Source version: {}\", source_version.trim());"}, {"sha": "6f388cd605fce2f194d0f43cea484e5c7233b29d", "filename": "build_system/mod.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -97,7 +97,7 @@ pub fn main() {\n         }\n     }\n \n-    let host_compiler = Compiler::llvm_with_triple(\n+    let bootstrap_host_compiler = Compiler::bootstrap_with_triple(\n         std::env::var(\"HOST_TRIPLE\")\n             .ok()\n             .or_else(|| config::get_value(\"host\"))\n@@ -106,7 +106,7 @@ pub fn main() {\n     let target_triple = std::env::var(\"TARGET_TRIPLE\")\n         .ok()\n         .or_else(|| config::get_value(\"target\"))\n-        .unwrap_or_else(|| host_compiler.triple.clone());\n+        .unwrap_or_else(|| bootstrap_host_compiler.triple.clone());\n \n     // FIXME allow changing the location of these dirs using cli arguments\n     let current_dir = std::env::current_dir().unwrap();\n@@ -134,8 +134,15 @@ pub fn main() {\n         process::exit(0);\n     }\n \n-    let cg_clif_dylib =\n-        build_backend::build_backend(&dirs, channel, &host_compiler, use_unstable_features);\n+    env::set_var(\"RUSTC\", \"rustc_should_be_set_explicitly\");\n+    env::set_var(\"RUSTDOC\", \"rustdoc_should_be_set_explicitly\");\n+\n+    let cg_clif_dylib = build_backend::build_backend(\n+        &dirs,\n+        channel,\n+        &bootstrap_host_compiler,\n+        use_unstable_features,\n+    );\n     match command {\n         Command::Prepare => {\n             // Handled above\n@@ -146,14 +153,20 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n-                &target_triple,\n+                &bootstrap_host_compiler,\n+                target_triple.clone(),\n             );\n \n-            if host_compiler.triple == target_triple {\n-                abi_cafe::run(channel, sysroot_kind, &dirs, &cg_clif_dylib, &host_compiler);\n+            if bootstrap_host_compiler.triple == target_triple {\n+                abi_cafe::run(\n+                    channel,\n+                    sysroot_kind,\n+                    &dirs,\n+                    &cg_clif_dylib,\n+                    &bootstrap_host_compiler,\n+                );\n             } else {\n-                eprintln!(\"[SKIP] abi-cafe (cross-compilation not supported)\");\n+                eprintln!(\"[RUN] abi-cafe (skipped, cross-compilation not supported)\");\n                 return;\n             }\n         }\n@@ -163,8 +176,8 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n-                &target_triple,\n+                &bootstrap_host_compiler,\n+                target_triple,\n             );\n         }\n         Command::Bench => {\n@@ -173,10 +186,10 @@ pub fn main() {\n                 channel,\n                 sysroot_kind,\n                 &cg_clif_dylib,\n-                &host_compiler,\n-                &target_triple,\n+                &bootstrap_host_compiler,\n+                target_triple,\n             );\n-            bench::benchmark(&dirs, &host_compiler);\n+            bench::benchmark(&dirs, &bootstrap_host_compiler);\n         }\n     }\n }"}, {"sha": "bc6c3223dc234b8ed207e0492f5198bcae249df3", "filename": "build_system/prepare.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -35,7 +35,7 @@ pub(crate) fn prepare(dirs: &Dirs) {\n }\n \n fn prepare_sysroot(dirs: &Dirs) {\n-    let sysroot_src_orig = get_default_sysroot().join(\"lib/rustlib/src/rust\");\n+    let sysroot_src_orig = get_default_sysroot(Path::new(\"rustc\")).join(\"lib/rustlib/src/rust\");\n     assert!(sysroot_src_orig.exists());\n \n     eprintln!(\"[COPY] sysroot src\");\n@@ -50,7 +50,7 @@ fn prepare_sysroot(dirs: &Dirs) {\n         &SYSROOT_SRC.to_path(dirs).join(\"library\"),\n     );\n \n-    let rustc_version = get_rustc_version();\n+    let rustc_version = get_rustc_version(Path::new(\"rustc\"));\n     fs::write(SYSROOT_RUSTC_VERSION.to_path(dirs), &rustc_version).unwrap();\n \n     eprintln!(\"[GIT] init\");"}, {"sha": "8a7e1c472dd10968c7d79b788f30795493f5bdfb", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -1,9 +1,9 @@\n use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n \n-pub(crate) fn get_rustc_version() -> String {\n+pub(crate) fn get_rustc_version(rustc: &Path) -> String {\n     let version_info =\n-        Command::new(\"rustc\").stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n+        Command::new(rustc).stderr(Stdio::inherit()).args(&[\"-V\"]).output().unwrap().stdout;\n     String::from_utf8(version_info).unwrap()\n }\n \n@@ -23,6 +23,16 @@ pub(crate) fn get_host_triple() -> String {\n         .to_owned()\n }\n \n+pub(crate) fn get_toolchain_name() -> String {\n+    let active_toolchain = Command::new(\"rustup\")\n+        .stderr(Stdio::inherit())\n+        .args(&[\"show\", \"active-toolchain\"])\n+        .output()\n+        .unwrap()\n+        .stdout;\n+    String::from_utf8(active_toolchain).unwrap().trim().split_once(' ').unwrap().0.to_owned()\n+}\n+\n pub(crate) fn get_cargo_path() -> PathBuf {\n     let cargo_path = Command::new(\"rustup\")\n         .stderr(Stdio::inherit())\n@@ -53,8 +63,8 @@ pub(crate) fn get_rustdoc_path() -> PathBuf {\n     Path::new(String::from_utf8(rustc_path).unwrap().trim()).to_owned()\n }\n \n-pub(crate) fn get_default_sysroot() -> PathBuf {\n-    let default_sysroot = Command::new(\"rustc\")\n+pub(crate) fn get_default_sysroot(rustc: &Path) -> PathBuf {\n+    let default_sysroot = Command::new(rustc)\n         .stderr(Stdio::inherit())\n         .args(&[\"--print\", \"sysroot\"])\n         .output()"}, {"sha": "dcfadd737566e20d8a76f0fb8bf393e9b27eb654", "filename": "build_system/tests.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -3,6 +3,7 @@ use super::build_sysroot::{self, SYSROOT_SRC};\n use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n+use super::rustc_info::get_host_triple;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::SysrootKind;\n use std::env;\n@@ -119,7 +120,7 @@ pub(crate) static LIBCORE_TESTS: CargoProject =\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::custom(\"test.rust-random/rand\", &|runner| {\n-        spawn_and_wait(RAND.clean(&runner.target_compiler.cargo, &runner.dirs));\n+        RAND.clean(&runner.dirs);\n \n         if runner.is_native {\n             eprintln!(\"[TEST] rust-random/rand\");\n@@ -134,11 +135,11 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.simple-raytracer\", &|runner| {\n-        spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.host_compiler.cargo, &runner.dirs));\n+        SIMPLE_RAYTRACER.clean(&runner.dirs);\n         spawn_and_wait(SIMPLE_RAYTRACER.build(&runner.target_compiler, &runner.dirs));\n     }),\n     TestCase::custom(\"test.libcore\", &|runner| {\n-        spawn_and_wait(LIBCORE_TESTS.clean(&runner.host_compiler.cargo, &runner.dirs));\n+        LIBCORE_TESTS.clean(&runner.dirs);\n \n         if runner.is_native {\n             spawn_and_wait(LIBCORE_TESTS.test(&runner.target_compiler, &runner.dirs));\n@@ -150,7 +151,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex-shootout-regex-dna\", &|runner| {\n-        spawn_and_wait(REGEX.clean(&runner.target_compiler.cargo, &runner.dirs));\n+        REGEX.clean(&runner.dirs);\n \n         // newer aho_corasick versions throw a deprecation warning\n         let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n@@ -194,7 +195,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.regex\", &|runner| {\n-        spawn_and_wait(REGEX.clean(&runner.host_compiler.cargo, &runner.dirs));\n+        REGEX.clean(&runner.dirs);\n \n         // newer aho_corasick versions throw a deprecation warning\n         let lint_rust_flags = format!(\"{} --cap-lints warn\", runner.target_compiler.rustflags);\n@@ -221,7 +222,7 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n         }\n     }),\n     TestCase::custom(\"test.portable-simd\", &|runner| {\n-        spawn_and_wait(PORTABLE_SIMD.clean(&runner.host_compiler.cargo, &runner.dirs));\n+        PORTABLE_SIMD.clean(&runner.dirs);\n \n         let mut build_cmd = PORTABLE_SIMD.build(&runner.target_compiler, &runner.dirs);\n         build_cmd.arg(\"--all-targets\");\n@@ -240,22 +241,22 @@ pub(crate) fn run_tests(\n     channel: &str,\n     sysroot_kind: SysrootKind,\n     cg_clif_dylib: &Path,\n-    host_compiler: &Compiler,\n-    target_triple: &str,\n+    bootstrap_host_compiler: &Compiler,\n+    target_triple: String,\n ) {\n-    let runner =\n-        TestRunner::new(dirs.clone(), host_compiler.triple.clone(), target_triple.to_string());\n-\n     if config::get_bool(\"testsuite.no_sysroot\") {\n-        build_sysroot::build_sysroot(\n+        let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             SysrootKind::None,\n             cg_clif_dylib,\n-            host_compiler,\n-            &target_triple,\n+            bootstrap_host_compiler,\n+            target_triple.clone(),\n         );\n \n+        let runner =\n+            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n+\n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n@@ -266,49 +267,41 @@ pub(crate) fn run_tests(\n     let run_extended_sysroot = config::get_bool(\"testsuite.extended_sysroot\");\n \n     if run_base_sysroot || run_extended_sysroot {\n-        build_sysroot::build_sysroot(\n+        let target_compiler = build_sysroot::build_sysroot(\n             dirs,\n             channel,\n             sysroot_kind,\n             cg_clif_dylib,\n-            host_compiler,\n-            &target_triple,\n+            bootstrap_host_compiler,\n+            target_triple.clone(),\n         );\n-    }\n \n-    if run_base_sysroot {\n-        runner.run_testsuite(BASE_SYSROOT_SUITE);\n-    } else {\n-        eprintln!(\"[SKIP] base_sysroot tests\");\n-    }\n+        let runner =\n+            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n \n-    if run_extended_sysroot {\n-        runner.run_testsuite(EXTENDED_SYSROOT_SUITE);\n-    } else {\n-        eprintln!(\"[SKIP] extended_sysroot tests\");\n+        if run_base_sysroot {\n+            runner.run_testsuite(BASE_SYSROOT_SUITE);\n+        } else {\n+            eprintln!(\"[SKIP] base_sysroot tests\");\n+        }\n+\n+        if run_extended_sysroot {\n+            runner.run_testsuite(EXTENDED_SYSROOT_SUITE);\n+        } else {\n+            eprintln!(\"[SKIP] extended_sysroot tests\");\n+        }\n     }\n }\n \n struct TestRunner {\n     is_native: bool,\n     jit_supported: bool,\n     dirs: Dirs,\n-    host_compiler: Compiler,\n     target_compiler: Compiler,\n }\n \n impl TestRunner {\n-    pub fn new(dirs: Dirs, host_triple: String, target_triple: String) -> Self {\n-        let is_native = host_triple == target_triple;\n-        let jit_supported =\n-            is_native && host_triple.contains(\"x86_64\") && !host_triple.contains(\"windows\");\n-\n-        let host_compiler = Compiler::clif_with_triple(&dirs, host_triple);\n-\n-        let mut target_compiler = Compiler::clif_with_triple(&dirs, target_triple);\n-        if !is_native {\n-            target_compiler.set_cross_linker_and_runner();\n-        }\n+    pub fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n             target_compiler.rustflags.push_str(&rustflags);\n@@ -323,7 +316,11 @@ impl TestRunner {\n             target_compiler.rustflags.push_str(\" -Clink-arg=-undefined -Clink-arg=dynamic_lookup\");\n         }\n \n-        Self { is_native, jit_supported, dirs, host_compiler, target_compiler }\n+        let jit_supported = is_native\n+            && target_compiler.triple.contains(\"x86_64\")\n+            && !target_compiler.triple.contains(\"windows\");\n+\n+        Self { is_native, jit_supported, dirs, target_compiler }\n     }\n \n     pub fn run_testsuite(&self, tests: &[TestCase]) {"}, {"sha": "07ea482fbbeaa07e4d0d5128bcc7793fade8962e", "filename": "build_system/utils.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -19,7 +19,7 @@ pub(crate) struct Compiler {\n }\n \n impl Compiler {\n-    pub(crate) fn llvm_with_triple(triple: String) -> Compiler {\n+    pub(crate) fn bootstrap_with_triple(triple: String) -> Compiler {\n         Compiler {\n             cargo: get_cargo_path(),\n             rustc: get_rustc_path(),\n@@ -146,9 +146,8 @@ impl CargoProject {\n         cmd\n     }\n \n-    #[must_use]\n-    pub(crate) fn clean(&self, cargo: &Path, dirs: &Dirs) -> Command {\n-        self.base_cmd(\"clean\", cargo, dirs)\n+    pub(crate) fn clean(&self, dirs: &Dirs) {\n+        let _ = fs::remove_dir_all(self.target_dir(dirs));\n     }\n \n     #[must_use]"}, {"sha": "c993430b830b6ebe3d4c1fc919f50fd043f57311", "filename": "scripts/cargo-clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo-clif.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -26,7 +26,7 @@ fn main() {\n     env::set_var(\"RUSTDOCFLAGS\", env::var(\"RUSTDOCFLAGS\").unwrap_or(String::new()) + &rustflags);\n \n     // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n \n     let args: Vec<_> = match env::args().nth(1).as_deref() {\n         Some(\"jit\") => {"}, {"sha": "c187f54a60e775a0b2a5bca42406390035f6310d", "filename": "scripts/rustc-clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustc-clif.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     }\n \n     // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n \n     #[cfg(unix)]\n     Command::new(\"rustc\").args(args).exec();"}, {"sha": "a6528ac41aee08f9f57ae4e396af40c99b239728", "filename": "scripts/rustdoc-clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b31b74e8fb45800e9f86c84b1f78e36bf76c498c/scripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Frustdoc-clif.rs?ref=b31b74e8fb45800e9f86c84b1f78e36bf76c498c", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     }\n \n     // Ensure that the right toolchain is used\n-    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"RUSTUP_TOOLCHAIN\"));\n+    env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n \n     #[cfg(unix)]\n     Command::new(\"rustdoc\").args(args).exec();"}]}