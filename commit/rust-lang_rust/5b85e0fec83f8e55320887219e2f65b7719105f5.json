{"sha": "5b85e0fec83f8e55320887219e2f65b7719105f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViODVlMGZlYzgzZjhlNTUzMjA4ODcyMTllMmY2NWI3NzE5MTA1ZjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T17:33:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-08T17:33:37Z"}, "message": "Rustfmt", "tree": {"sha": "8718e69cc75f9b8c91fc6fac5a3c26a15add4571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8718e69cc75f9b8c91fc6fac5a3c26a15add4571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b85e0fec83f8e55320887219e2f65b7719105f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b85e0fec83f8e55320887219e2f65b7719105f5", "html_url": "https://github.com/rust-lang/rust/commit/5b85e0fec83f8e55320887219e2f65b7719105f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b85e0fec83f8e55320887219e2f65b7719105f5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b29b4cec18366764966bb4d4bd415cf6edb3d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b29b4cec18366764966bb4d4bd415cf6edb3d29", "html_url": "https://github.com/rust-lang/rust/commit/7b29b4cec18366764966bb4d4bd415cf6edb3d29"}], "stats": {"total": 22, "additions": 10, "deletions": 12}, "files": [{"sha": "b6a29d0747522bb9092df044fea44088c0a5ec1e", "filename": "src/abi.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5b85e0fec83f8e55320887219e2f65b7719105f5/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b85e0fec83f8e55320887219e2f65b7719105f5/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=5b85e0fec83f8e55320887219e2f65b7719105f5", "patch": "@@ -290,7 +290,9 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n     let fn_ty = func.layout().ty;\n     let sig = ty_fn_sig(fx.tcx, fn_ty);\n \n-    let return_place = destination.as_ref().map(|(place, _)| trans_place(fx, place));\n+    let return_place = destination\n+        .as_ref()\n+        .map(|(place, _)| trans_place(fx, place));\n \n     // Unpack arguments tuple for closures\n     let args = if sig.abi == Abi::RustCall {\n@@ -331,7 +333,10 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             let ret = match return_place {\n                 Some(ret) => ret,\n                 None => {\n-                    println!(\"codegen_call(fx, {:?}, {:?}, {:?})\", func, args, destination);\n+                    println!(\n+                        \"codegen_call(fx, {:?}, {:?}, {:?})\",\n+                        func, args, destination\n+                    );\n                     // Insert non returning intrinsics here\n                     match intrinsic {\n                         \"abort\" => {"}, {"sha": "be8281c59f4740bac0a3b421edb52a92c2dd1d57", "filename": "src/base.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b85e0fec83f8e55320887219e2f65b7719105f5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b85e0fec83f8e55320887219e2f65b7719105f5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=5b85e0fec83f8e55320887219e2f65b7719105f5", "patch": "@@ -231,11 +231,7 @@ pub fn trans_fn<'a, 'tcx: 'a>(\n     fx.comments.clone()\n }\n \n-fn trans_stmt<'a, 'tcx: 'a>(\n-    fx: &mut FunctionCx<'a, 'tcx>,\n-    cur_ebb: Ebb,\n-    stmt: &Statement<'tcx>,\n-) {\n+fn trans_stmt<'a, 'tcx: 'a>(fx: &mut FunctionCx<'a, 'tcx>, cur_ebb: Ebb, stmt: &Statement<'tcx>) {\n     fx.tcx.sess.warn(&format!(\"stmt {:?}\", stmt));\n \n     let inst = fx.bcx.func.layout.last_inst(cur_ebb).unwrap();\n@@ -825,11 +821,8 @@ pub fn trans_place<'a, 'tcx: 'a>(\n                     if layout.is_unsized() {\n                         unimpl!(\"Unsized places are not yet implemented\");\n                     }\n-                    CPlace::Addr(\n-                        base.to_cvalue(fx).load_value(fx),\n-                        layout,\n-                    )\n-                },\n+                    CPlace::Addr(base.to_cvalue(fx).load_value(fx), layout)\n+                }\n                 ProjectionElem::Field(field, _ty) => base.place_field(fx, field),\n                 ProjectionElem::Index(local) => {\n                     let index = fx.get_local_place(local).to_cvalue(fx).load_value(fx);"}]}