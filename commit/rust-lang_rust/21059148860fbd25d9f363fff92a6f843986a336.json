{"sha": "21059148860fbd25d9f363fff92a6f843986a336", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMDU5MTQ4ODYwZmJkMjVkOWYzNjNmZmY5MmE2Zjg0Mzk4NmEzMzY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T13:40:52Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-13T13:40:52Z"}, "message": "Remove old commented-out code.", "tree": {"sha": "0e528b1350980a51db3e87fa335cf0cf51785a73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e528b1350980a51db3e87fa335cf0cf51785a73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21059148860fbd25d9f363fff92a6f843986a336", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21059148860fbd25d9f363fff92a6f843986a336", "html_url": "https://github.com/rust-lang/rust/commit/21059148860fbd25d9f363fff92a6f843986a336", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21059148860fbd25d9f363fff92a6f843986a336/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9aa3a8675f115216f4e5d182128450e29a9600ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa3a8675f115216f4e5d182128450e29a9600ce", "html_url": "https://github.com/rust-lang/rust/commit/9aa3a8675f115216f4e5d182128450e29a9600ce"}], "stats": {"total": 36, "additions": 1, "deletions": 35}, "files": [{"sha": "0452485d03bd6cb5e49ba9ec2b087f5147387c4e", "filename": "src/interpreter.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/21059148860fbd25d9f363fff92a6f843986a336/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21059148860fbd25d9f363fff92a6f843986a336/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=21059148860fbd25d9f363fff92a6f843986a336", "patch": "@@ -362,42 +362,8 @@ impl<'a, 'tcx: 'a> Interpreter<'a, 'tcx> {\n             LvalueTy::Downcast { ref adt_def, substs, variant_index } =>\n                 self.make_variant_repr(&adt_def.variants[variant_index], substs),\n         };\n-        Ok((ptr, repr))\n \n-        //     mir::Lvalue::Projection(ref proj) => {\n-        //         let base_ptr = self.lvalue_to_ptr(&proj.base);\n-\n-        //         match proj.elem {\n-        //             mir::ProjectionElem::Field(field, _) => {\n-        //                 base_ptr.offset(field.index())\n-        //             }\n-\n-        //             mir::ProjectionElem::Downcast(_, variant) => {\n-        //                 let adt_val = self.read_pointer(base_ptr);\n-        //                 if let Value::Adt { variant: actual_variant, data_ptr } = adt_val {\n-        //                     debug_assert_eq!(variant, actual_variant);\n-        //                     data_ptr\n-        //                 } else {\n-        //                     panic!(\"Downcast attempted on non-ADT: {:?}\", adt_val)\n-        //                 }\n-        //             }\n-\n-        //             mir::ProjectionElem::Deref => {\n-        //                 let ptr_val = self.read_pointer(base_ptr);\n-        //                 if let Value::Pointer(ptr) = ptr_val {\n-        //                     ptr\n-        //                 } else {\n-        //                     panic!(\"Deref attempted on non-pointer: {:?}\", ptr_val)\n-        //                 }\n-        //             }\n-\n-        //             mir::ProjectionElem::Index(ref _operand) => unimplemented!(),\n-        //             mir::ProjectionElem::ConstantIndex { .. } => unimplemented!(),\n-        //         }\n-        //     }\n-\n-        //     _ => unimplemented!(),\n-        // }\n+        Ok((ptr, repr))\n     }\n \n     fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> EvalResult<Pointer> {"}]}