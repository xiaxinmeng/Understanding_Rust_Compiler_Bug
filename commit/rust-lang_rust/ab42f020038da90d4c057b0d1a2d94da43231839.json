{"sha": "ab42f020038da90d4c057b0d1a2d94da43231839", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNDJmMDIwMDM4ZGE5MGQ0YzA1N2IwZDFhMmQ5NGRhNDMyMzE4Mzk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:53:16Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:53:16Z"}, "message": "Rerun rustfmt", "tree": {"sha": "dfd7cedaf2d1c3514d3702d4883fd1ef0dce2f7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfd7cedaf2d1c3514d3702d4883fd1ef0dce2f7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab42f020038da90d4c057b0d1a2d94da43231839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab42f020038da90d4c057b0d1a2d94da43231839", "html_url": "https://github.com/rust-lang/rust/commit/ab42f020038da90d4c057b0d1a2d94da43231839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab42f020038da90d4c057b0d1a2d94da43231839/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f941131bfb4bb9d4a4b083f75dacd0a2de8e7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f941131bfb4bb9d4a4b083f75dacd0a2de8e7c6", "html_url": "https://github.com/rust-lang/rust/commit/2f941131bfb4bb9d4a4b083f75dacd0a2de8e7c6"}], "stats": {"total": 81, "additions": 55, "deletions": 26}, "files": [{"sha": "1f31cb0b2ecd2925d165571889e2712d809b9b88", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -262,7 +262,9 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             ExprTup(ref tup) => self.multi(tup).map(Constant::Tuple),\n             ExprRepeat(ref value, number_id) => {\n                 if let Some(lcx) = self.lcx {\n-                    self.binop_apply(value, &lcx.tcx.map.body(number_id).value, |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))\n+                    self.binop_apply(value,\n+                                     &lcx.tcx.map.body(number_id).value,\n+                                     |v, n| Some(Constant::Repeat(Box::new(v), n.as_u64() as usize)))\n                 } else {\n                     None\n                 }"}, {"sha": "896efb438458138a03f3a9bed8268566e0fdb9c6", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -44,7 +44,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                 let variant = &var.node;\n                 if let Some(body_id) = variant.disr_expr {\n                     use rustc_const_eval::*;\n-                    let bad = match eval_const_expr_partial(cx.tcx, &cx.tcx.map.body(body_id).value, EvalHint::ExprTypeChecked, None) {\n+                    let bad = match eval_const_expr_partial(cx.tcx,\n+                                                            &cx.tcx.map.body(body_id).value,\n+                                                            EvalHint::ExprTypeChecked,\n+                                                            None) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "2d85f2dd3cbf8afa2158238bccdffd5fb7bdb268", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -141,9 +141,10 @@ impl<'a, 'tcx> Functions {\n     ) {\n         let expr = &body.value;\n         if unsafety == hir::Unsafety::Normal && cx.access_levels.is_exported(nodeid) {\n-            let raw_ptrs = iter_input_pats(decl, body).zip(decl.inputs.iter())\n-                                                      .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n-                                                      .collect::<HashSet<_>>();\n+            let raw_ptrs = iter_input_pats(decl, body)\n+                .zip(decl.inputs.iter())\n+                .filter_map(|(arg, ty)| raw_ptr_arg(arg, ty))\n+                .collect::<HashSet<_>>();\n \n             if !raw_ptrs.is_empty() {\n                 let mut v = DerefVisitor {"}, {"sha": "8f1c6e4e9d1a852fdfbeb104c07cd639098ee72f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -751,8 +751,12 @@ fn lint_or_fun_call(cx: &LateContext, expr: &hir::Expr, name: &str, args: &[hir:\n     ) {\n         // don't lint for constant values\n         // FIXME: can we `expect` here instead of match?\n-        let promotable = cx.tcx.rvalue_promotable_to_static.borrow()\n-                             .get(&arg.id).cloned().unwrap_or(true);\n+        let promotable = cx.tcx\n+            .rvalue_promotable_to_static\n+            .borrow()\n+            .get(&arg.id)\n+            .cloned()\n+            .unwrap_or(true);\n         if promotable {\n             return;\n         }\n@@ -1348,19 +1352,18 @@ enum SelfKind {\n \n impl SelfKind {\n     fn matches(self, ty: &hir::Ty, arg: &hir::Arg, self_ty: &hir::Ty, allow_value_for_ref: bool) -> bool {\n-        // Self types in the HIR are desugared to explicit self types. So it will always be `self: SomeType`,\n+        // Self types in the HIR are desugared to explicit self types. So it will always be `self:\n+        // SomeType`,\n         // where SomeType can be `Self` or an explicit impl self type (e.g. `Foo` if the impl is on `Foo`)\n         // Thus, we only need to test equality against the impl self type or if it is an explicit\n         // `Self`. Furthermore, the only possible types for `self: ` are `&Self`, `Self`, `&mut Self`,\n         // and `Box<Self>`, including the equivalent types with `Foo`.\n-        let is_actually_self = |ty| {\n-            is_self_ty(ty) || ty == self_ty\n-        };\n+        let is_actually_self = |ty| is_self_ty(ty) || ty == self_ty;\n         if is_self(arg) {\n-           match self {\n+            match self {\n                 SelfKind::Value => is_actually_self(ty),\n                 SelfKind::Ref | SelfKind::RefMut if allow_value_for_ref => is_actually_self(ty),\n-                SelfKind::Ref | SelfKind::RefMut=> {\n+                SelfKind::Ref | SelfKind::RefMut => {\n                     match ty.node {\n                         hir::TyRptr(_, ref mt_ty) => {\n                             let mutability_match = if self == SelfKind::Ref {\n@@ -1370,10 +1373,10 @@ impl SelfKind {\n                             };\n                             is_actually_self(&mt_ty.ty) && mutability_match\n \n-                        }\n-                        _ => false\n+                        },\n+                        _ => false,\n                     }\n-                }\n+                },\n                 _ => false,\n             }\n         } else {"}, {"sha": "6e27358836bcb770616de45cd65afeb5c1ee8852", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -42,7 +42,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                     .expect(\"A function with an unknown type is called. If this happened, the compiler would have \\\n                              aborted the compilation long ago\");\n                 if let ExprPath(ref path) = fn_expr.node {\n-                    check_arguments(cx, arguments, function_type, &print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n+                    check_arguments(cx,\n+                                    arguments,\n+                                    function_type,\n+                                    &print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n                 }\n             },\n             ExprMethodCall(ref name, _, ref arguments) => {"}, {"sha": "e330a662f97d5c025f301f5ef4d778aa92ad50a8", "filename": "clippy_lints/src/utils/hir.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhir.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -112,7 +112,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n                 !self.ignore_fn && l_name.node == r_name.node && over(l_tys, r_tys, |l, r| self.eq_ty(l, r)) &&\n                 self.eq_exprs(l_args, r_args)\n             },\n-            (&ExprRepeat(ref le, ll_id), &ExprRepeat(ref re, rl_id)) => self.eq_expr(le, re) && self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value),\n+            (&ExprRepeat(ref le, ll_id), &ExprRepeat(ref re, rl_id)) => {\n+                self.eq_expr(le, re) &&\n+                self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value)\n+            },\n             (&ExprRet(ref l), &ExprRet(ref r)) => both(l, r, |l, r| self.eq_expr(l, r)),\n             (&ExprPath(ref l), &ExprPath(ref r)) => self.eq_qpath(l, r),\n             (&ExprStruct(ref l_path, ref lf, ref lo), &ExprStruct(ref r_path, ref rf, ref ro)) => {\n@@ -183,7 +186,8 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     }\n \n     fn eq_path(&self, left: &Path, right: &Path) -> bool {\n-        left.is_global() == right.is_global() && over(&left.segments, &right.segments, |l, r| self.eq_path_segment(l, r))\n+        left.is_global() == right.is_global() &&\n+        over(&left.segments, &right.segments, |l, r| self.eq_path_segment(l, r))\n     }\n \n     fn eq_path_parameters(&self, left: &PathParameters, right: &PathParameters) -> bool {\n@@ -211,7 +215,10 @@ impl<'a, 'tcx: 'a> SpanlessEq<'a, 'tcx> {\n     fn eq_ty(&self, left: &Ty, right: &Ty) -> bool {\n         match (&left.node, &right.node) {\n             (&TySlice(ref l_vec), &TySlice(ref r_vec)) => self.eq_ty(l_vec, r_vec),\n-            (&TyArray(ref lt, ll_id), &TyArray(ref rt, rl_id)) => self.eq_ty(lt, rt) && self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value),\n+            (&TyArray(ref lt, ll_id), &TyArray(ref rt, rl_id)) => {\n+                self.eq_ty(lt, rt) &&\n+                self.eq_expr(&self.cx.tcx.map.body(ll_id).value, &self.cx.tcx.map.body(rl_id).value)\n+            },\n             (&TyPtr(ref l_mut), &TyPtr(ref r_mut)) => l_mut.mutbl == r_mut.mutbl && self.eq_ty(&*l_mut.ty, &*r_mut.ty),\n             (&TyRptr(_, ref l_rmut), &TyRptr(_, ref r_rmut)) => {\n                 l_rmut.mutbl == r_rmut.mutbl && self.eq_ty(&*l_rmut.ty, &*r_rmut.ty)"}, {"sha": "457008eb0ef2fbb6174ab6c842055ebcf78cf346", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -53,7 +53,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         match item.vis {\n             hir::Visibility::Public => println!(\"public\"),\n             hir::Visibility::Crate => println!(\"visible crate wide\"),\n-            hir::Visibility::Restricted { ref path, .. } => println!(\"visible in module `{}`\", print::to_string(print::NO_ANN, |s| s.print_path(path, false))),\n+            hir::Visibility::Restricted { ref path, .. } => {\n+                println!(\"visible in module `{}`\",\n+                         print::to_string(print::NO_ANN, |s| s.print_path(path, false)))\n+            },\n             hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n         if item.defaultness.is_default() {\n@@ -340,7 +343,10 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n     match item.vis {\n         hir::Visibility::Public => println!(\"public\"),\n         hir::Visibility::Crate => println!(\"visible crate wide\"),\n-        hir::Visibility::Restricted { ref path, .. } => println!(\"visible in module `{}`\", print::to_string(print::NO_ANN, |s| s.print_path(path, false))),\n+        hir::Visibility::Restricted { ref path, .. } => {\n+            println!(\"visible in module `{}`\",\n+                     print::to_string(print::NO_ANN, |s| s.print_path(path, false)))\n+        },\n         hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n     }\n     match item.node {\n@@ -414,7 +420,9 @@ fn print_pat(cx: &LateContext, pat: &hir::Pat, indent: usize) {\n         },\n         hir::PatKind::Struct(ref path, ref fields, ignore) => {\n             println!(\"{}Struct\", ind);\n-            println!(\"{}name: {}\", ind, print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n+            println!(\"{}name: {}\",\n+                     ind,\n+                     print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n             println!(\"{}ignore leftover fields: {}\", ind, ignore);\n             println!(\"{}fields:\", ind);\n             for field in fields {\n@@ -427,7 +435,9 @@ fn print_pat(cx: &LateContext, pat: &hir::Pat, indent: usize) {\n         },\n         hir::PatKind::TupleStruct(ref path, ref fields, opt_dots_position) => {\n             println!(\"{}TupleStruct\", ind);\n-            println!(\"{}path: {}\", ind, print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n+            println!(\"{}path: {}\",\n+                     ind,\n+                     print::to_string(print::NO_ANN, |s| s.print_qpath(path, false)));\n             if let Some(dot_position) = opt_dots_position {\n                 println!(\"{}dot position: {}\", ind, dot_position);\n             }"}, {"sha": "f971779b2edb3e8fe53427b662e8f93f498ba200", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab42f020038da90d4c057b0d1a2d94da43231839/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=ab42f020038da90d4c057b0d1a2d94da43231839", "patch": "@@ -917,6 +917,6 @@ pub fn is_self_ty(slf: &Ty) -> bool {\n     false\n }\n \n-pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item=&'tcx Arg> {\n+pub fn iter_input_pats<'tcx>(decl: &FnDecl, body: &'tcx Body) -> impl Iterator<Item = &'tcx Arg> {\n     (0..decl.inputs.len()).map(move |i| &body.arguments[i])\n-}\n\\ No newline at end of file\n+}"}]}