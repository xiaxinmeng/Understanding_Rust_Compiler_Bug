{"sha": "304c6dcaed94ce573755123a7979dd8f2bde7b02", "node_id": "C_kwDOAAsO6NoAKDMwNGM2ZGNhZWQ5NGNlNTczNzU1MTIzYTc5NzlkZDhmMmJkZTdiMDI", "commit": {"author": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-01T07:41:16Z"}, "committer": {"name": "Tomoaki Kawada", "email": "kawada@kmckk.co.jp", "date": "2022-12-12T05:22:45Z"}, "message": "kmc-solid: Synchronize the first update of `ThreadInner::lifecycle` with the second one on detach\n\nThe first update (swap RMW operation) must happen-before the second\nupdate so that the latter can release `ThreadInner` safely.", "tree": {"sha": "293cff2cf87b184e4a924d373681ee2b6cf8ede5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/293cff2cf87b184e4a924d373681ee2b6cf8ede5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/304c6dcaed94ce573755123a7979dd8f2bde7b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/304c6dcaed94ce573755123a7979dd8f2bde7b02", "html_url": "https://github.com/rust-lang/rust/commit/304c6dcaed94ce573755123a7979dd8f2bde7b02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/304c6dcaed94ce573755123a7979dd8f2bde7b02/comments", "author": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kawadakk", "id": 81723441, "node_id": "MDQ6VXNlcjgxNzIzNDQx", "avatar_url": "https://avatars.githubusercontent.com/u/81723441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kawadakk", "html_url": "https://github.com/kawadakk", "followers_url": "https://api.github.com/users/kawadakk/followers", "following_url": "https://api.github.com/users/kawadakk/following{/other_user}", "gists_url": "https://api.github.com/users/kawadakk/gists{/gist_id}", "starred_url": "https://api.github.com/users/kawadakk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kawadakk/subscriptions", "organizations_url": "https://api.github.com/users/kawadakk/orgs", "repos_url": "https://api.github.com/users/kawadakk/repos", "events_url": "https://api.github.com/users/kawadakk/events{/privacy}", "received_events_url": "https://api.github.com/users/kawadakk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae7633f434011fe1829b9b235a20d91634479eb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae7633f434011fe1829b9b235a20d91634479eb5", "html_url": "https://github.com/rust-lang/rust/commit/ae7633f434011fe1829b9b235a20d91634479eb5"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "68eebef1b20de367d2001f3b645c416a78d760e9", "filename": "library/std/src/sys/itron/thread.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/304c6dcaed94ce573755123a7979dd8f2bde7b02/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/304c6dcaed94ce573755123a7979dd8f2bde7b02/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fitron%2Fthread.rs?ref=304c6dcaed94ce573755123a7979dd8f2bde7b02", "patch": "@@ -119,7 +119,7 @@ impl Thread {\n \n             let old_lifecycle = inner\n                 .lifecycle\n-                .swap(LIFECYCLE_EXITED_OR_FINISHED_OR_JOIN_FINALIZE, Ordering::Release);\n+                .swap(LIFECYCLE_EXITED_OR_FINISHED_OR_JOIN_FINALIZE, Ordering::AcqRel);\n \n             match old_lifecycle {\n                 LIFECYCLE_DETACHED => {\n@@ -129,9 +129,9 @@ impl Thread {\n \n                     // In this case, `*p_inner`'s ownership has been moved to\n                     // us, and we are responsible for dropping it. The acquire\n-                    // ordering is not necessary because the parent thread made\n-                    // no memory access needing synchronization since the call\n-                    // to `acre_tsk`.\n+                    // ordering ensures that the swap operation that wrote\n+                    // `LIFECYCLE_DETACHED` happens-before `Box::from_raw(\n+                    // p_inner)`.\n                     // Safety: See above.\n                     let _ = unsafe { Box::from_raw(p_inner) };\n \n@@ -267,15 +267,15 @@ impl Drop for Thread {\n         let inner = unsafe { self.p_inner.as_ref() };\n \n         // Detach the thread.\n-        match inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::Acquire) {\n+        match inner.lifecycle.swap(LIFECYCLE_DETACHED_OR_JOINED, Ordering::AcqRel) {\n             LIFECYCLE_INIT => {\n                 // [INIT \u2192 DETACHED]\n                 // When the time comes, the child will figure out that no\n                 // one will ever join it.\n                 // The ownership of `*p_inner` is moved to the child thread.\n-                // However, the release ordering is not necessary because we\n-                // made no memory access needing synchronization since the call\n-                // to `acre_tsk`.\n+                // The release ordering ensures that the above swap operation on\n+                // `lifecycle` happens-before the child thread's\n+                // `Box::from_raw(p_inner)`.\n             }\n             LIFECYCLE_FINISHED => {\n                 // [FINISHED \u2192 JOINED]"}]}