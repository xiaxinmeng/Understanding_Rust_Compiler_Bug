{"sha": "b48bc9ec935f6c87d16628b026cc4b9c99746b94", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0OGJjOWVjOTM1ZjZjODdkMTY2MjhiMDI2Y2M0YjljOTk3NDZiOTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-24T22:37:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-24T22:37:01Z"}, "message": "auto merge of #12445 : huonw/rust/less-unsafe, r=alexcrichton\n\nCommits for details. Highlights:\r\n\r\n- `flate` returns `CVec<u8>` to save reallocating a whole new `&[u8]`\r\n- a lot of `transmute`s removed outright or replaced with `as` (etc.)", "tree": {"sha": "acf90ab35a460176c2e308fbc0dc8b250bdb7b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acf90ab35a460176c2e308fbc0dc8b250bdb7b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b48bc9ec935f6c87d16628b026cc4b9c99746b94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b48bc9ec935f6c87d16628b026cc4b9c99746b94", "html_url": "https://github.com/rust-lang/rust/commit/b48bc9ec935f6c87d16628b026cc4b9c99746b94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b48bc9ec935f6c87d16628b026cc4b9c99746b94/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a4f7d9babb0c638f3425ced08e13f9fbfdcf56", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a4f7d9babb0c638f3425ced08e13f9fbfdcf56", "html_url": "https://github.com/rust-lang/rust/commit/68a4f7d9babb0c638f3425ced08e13f9fbfdcf56"}, {"sha": "9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8d5aa29e40066b9c247ef252b58c2092ecdfae", "html_url": "https://github.com/rust-lang/rust/commit/9e8d5aa29e40066b9c247ef252b58c2092ecdfae"}], "stats": {"total": 146, "additions": 68, "deletions": 78}, "files": [{"sha": "9489b907b4ded4bee1786da522036c4ffd463210", "filename": "mk/crates.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -65,7 +65,7 @@ DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n               collections time extra\n DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n                 test time\n-DEPS_flate := std native:miniz\n+DEPS_flate := std extra native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n DEPS_serialize := std"}, {"sha": "717e5ec7b18b8988c202a74d325c686342d672e7", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -167,13 +167,12 @@ unsafe fn destroy_chunk(chunk: &Chunk) {\n // is necessary in order to properly do cleanup if a failure occurs\n // during an initializer.\n #[inline]\n-unsafe fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n-    let p_bits: uint = transmute(p);\n-    p_bits | (is_done as uint)\n+fn bitpack_tydesc_ptr(p: *TyDesc, is_done: bool) -> uint {\n+    p as uint | (is_done as uint)\n }\n #[inline]\n-unsafe fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n-    (transmute(p & !1), p & 1 == 1)\n+fn un_bitpack_tydesc_ptr(p: uint) -> (*TyDesc, bool) {\n+    ((p & !1) as *TyDesc, p & 1 == 1)\n }\n \n impl Arena {"}, {"sha": "b93ffce636b2c6b11d25e68c1271176b1643f600", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -35,7 +35,9 @@\n  * if necessary.\n  */\n \n+use std::cast;\n use std::ptr;\n+use std::raw;\n \n /**\n  * The type representing a foreign chunk of memory\n@@ -111,6 +113,20 @@ impl <T> CVec<T> {\n         }\n     }\n \n+    /// View the stored data as a slice.\n+    pub fn as_slice<'a>(&'a self) -> &'a [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n+    /// View the stored data as a mutable slice.\n+    pub fn as_mut_slice<'a>(&'a mut self) -> &'a mut [T] {\n+        unsafe {\n+            cast::transmute(raw::Slice { data: self.base as *T, len: self.len })\n+        }\n+    }\n+\n     /**\n      * Retrieves an element at a given index\n      *"}, {"sha": "1a14432be6a3af11fd88752d56b15c42ba452e94", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -20,9 +20,10 @@ Simple compression\n #[license = \"MIT/ASL2\"];\n #[allow(missing_doc)];\n \n+extern crate extra;\n use std::libc::{c_void, size_t, c_int};\n use std::libc;\n-use std::vec;\n+use extra::c_vec::CVec;\n \n pub mod rustrt {\n     use std::libc::{c_int, c_void, size_t};\n@@ -33,63 +34,57 @@ pub mod rustrt {\n                                           src_buf_len: size_t,\n                                           pout_len: *mut size_t,\n                                           flags: c_int)\n-                                          -> *c_void;\n+                                          -> *mut c_void;\n \n         pub fn tinfl_decompress_mem_to_heap(psrc_buf: *c_void,\n                                             src_buf_len: size_t,\n                                             pout_len: *mut size_t,\n                                             flags: c_int)\n-                                            -> *c_void;\n+                                            -> *mut c_void;\n     }\n }\n \n static LZ_NORM : c_int = 0x80;  // LZ with 128 probes, \"normal\"\n static TINFL_FLAG_PARSE_ZLIB_HEADER : c_int = 0x1; // parse zlib header and adler32 checksum\n static TDEFL_WRITE_ZLIB_HEADER : c_int = 0x01000; // write zlib header and adler32 checksum\n \n-fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n+fn deflate_bytes_internal(bytes: &[u8], flags: c_int) -> CVec<u8> {\n     unsafe {\n         let mut outsz : size_t = 0;\n         let res = rustrt::tdefl_compress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                      bytes.len() as size_t,\n                                                      &mut outsz,\n                                                      flags);\n-        assert!(res as int != 0);\n-            let out = vec::raw::from_buf_raw(res as *u8,\n-                                             outsz as uint);\n-        libc::free(res as *mut c_void);\n-        out\n+        assert!(!res.is_null());\n+        CVec::new_with_dtor(res as *mut u8, outsz as uint, proc() libc::free(res))\n     }\n }\n \n-pub fn deflate_bytes(bytes: &[u8]) -> ~[u8] {\n+pub fn deflate_bytes(bytes: &[u8]) -> CVec<u8> {\n     deflate_bytes_internal(bytes, LZ_NORM)\n }\n \n-pub fn deflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n+pub fn deflate_bytes_zlib(bytes: &[u8]) -> CVec<u8> {\n     deflate_bytes_internal(bytes, LZ_NORM | TDEFL_WRITE_ZLIB_HEADER)\n }\n \n-fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> ~[u8] {\n+fn inflate_bytes_internal(bytes: &[u8], flags: c_int) -> CVec<u8> {\n     unsafe {\n         let mut outsz : size_t = 0;\n         let res = rustrt::tinfl_decompress_mem_to_heap(bytes.as_ptr() as *c_void,\n                                                        bytes.len() as size_t,\n                                                        &mut outsz,\n                                                        flags);\n-        assert!(res as int != 0);\n-        let out = vec::raw::from_buf_raw(res as *u8,\n-                                         outsz as uint);\n-        libc::free(res as *mut c_void);\n-        out\n+        assert!(!res.is_null());\n+        CVec::new_with_dtor(res as *mut u8, outsz as uint, proc() libc::free(res))\n     }\n }\n \n-pub fn inflate_bytes(bytes: &[u8]) -> ~[u8] {\n+pub fn inflate_bytes(bytes: &[u8]) -> CVec<u8> {\n     inflate_bytes_internal(bytes, 0)\n }\n \n-pub fn inflate_bytes_zlib(bytes: &[u8]) -> ~[u8] {\n+pub fn inflate_bytes_zlib(bytes: &[u8]) -> CVec<u8> {\n     inflate_bytes_internal(bytes, TINFL_FLAG_PARSE_ZLIB_HEADER)\n }\n \n@@ -115,19 +110,19 @@ mod tests {\n             debug!(\"de/inflate of {} bytes of random word-sequences\",\n                    input.len());\n             let cmp = deflate_bytes(input);\n-            let out = inflate_bytes(cmp);\n+            let out = inflate_bytes(cmp.as_slice());\n             debug!(\"{} bytes deflated to {} ({:.1f}% size)\",\n                    input.len(), cmp.len(),\n                    100.0 * ((cmp.len() as f64) / (input.len() as f64)));\n-            assert_eq!(input, out);\n+            assert_eq!(input.as_slice(), out.as_slice());\n         }\n     }\n \n     #[test]\n     fn test_zlib_flate() {\n         let bytes = ~[1, 2, 3, 4, 5];\n         let deflated = deflate_bytes(bytes);\n-        let inflated = inflate_bytes(deflated);\n-        assert_eq!(inflated, bytes);\n+        let inflated = inflate_bytes(deflated.as_slice());\n+        assert_eq!(inflated.as_slice(), bytes.as_slice());\n     }\n }"}, {"sha": "779fb6815b7e92f45a993e0cb71ee36270a1bb6d", "filename": "src/libgreen/context.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fcontext.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -9,8 +9,7 @@\n // except according to those terms.\n \n use std::uint;\n-use std::cast::{transmute, transmute_mut_unsafe,\n-                transmute_region, transmute_mut_region};\n+use std::cast::{transmute, transmute_mut_unsafe};\n use stack::Stack;\n use std::rt::stack;\n use std::raw;\n@@ -55,10 +54,6 @@ impl Context {\n         // Save and then immediately load the current context,\n         // which we will then modify to call the given function when restored\n         let mut regs = new_regs();\n-        unsafe {\n-            rust_swap_registers(transmute_mut_region(&mut *regs),\n-                                transmute_region(&*regs));\n-        };\n \n         initialize_call_frame(&mut *regs,\n                               init,\n@@ -294,11 +289,8 @@ fn initialize_call_frame(regs: &mut Registers, fptr: InitFn, arg: uint,\n }\n \n fn align_down(sp: *mut uint) -> *mut uint {\n-    unsafe {\n-        let sp: uint = transmute(sp);\n-        let sp = sp & !(16 - 1);\n-        transmute::<uint, *mut uint>(sp)\n-    }\n+    let sp = (sp as uint) & !(16 - 1);\n+    sp as *mut uint\n }\n \n // ptr::mut_offset is positive ints only"}, {"sha": "c6db989d036d76e75504b478d13b297a667f4962", "filename": "src/libgreen/sched.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fsched.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -612,9 +612,7 @@ impl Scheduler {\n                                f: |&mut Scheduler, ~GreenTask|) -> ~GreenTask {\n         let f_opaque = ClosureConverter::from_fn(f);\n \n-        let current_task_dupe = unsafe {\n-            *cast::transmute::<&~GreenTask, &uint>(&current_task)\n-        };\n+        let current_task_dupe = &*current_task as *GreenTask;\n \n         // The current task is placed inside an enum with the cleanup\n         // function. This enum is then placed inside the scheduler.\n@@ -633,13 +631,8 @@ impl Scheduler {\n                 cast::transmute_mut_region(*next_task.sched.get_mut_ref());\n \n             let current_task: &mut GreenTask = match sched.cleanup_job {\n-                Some(CleanupJob { task: ref task, .. }) => {\n-                    let task_ptr: *~GreenTask = task;\n-                    cast::transmute_mut_region(*cast::transmute_mut_unsafe(task_ptr))\n-                }\n-                None => {\n-                    rtabort!(\"no cleanup job\");\n-                }\n+                Some(CleanupJob { task: ref mut task, .. }) => &mut **task,\n+                None => rtabort!(\"no cleanup job\")\n             };\n \n             let (current_task_context, next_task_context) =\n@@ -852,7 +845,7 @@ impl Scheduler {\n \n     // * Utility Functions\n \n-    pub fn sched_id(&self) -> uint { unsafe { cast::transmute(self) } }\n+    pub fn sched_id(&self) -> uint { self as *Scheduler as uint }\n \n     pub fn run_cleanup_job(&mut self) {\n         let cleanup_job = self.cleanup_job.take_unwrap();"}, {"sha": "bf0ea14ca875373c6e71664edb77c34768a87459", "filename": "src/libgreen/task.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibgreen%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Ftask.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -266,7 +266,7 @@ impl GreenTask {\n     // context switches\n \n     pub fn as_uint(&self) -> uint {\n-        unsafe { cast::transmute(self) }\n+        self as *GreenTask as uint\n     }\n \n     pub unsafe fn from_uint(val: uint) -> ~GreenTask { cast::transmute(val) }"}, {"sha": "ff617e5a230ed53c3b8d309962e2ebd0a059ee99", "filename": "src/libnative/io/addrinfo.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Faddrinfo.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -14,7 +14,7 @@ use std::cast;\n use std::io::IoError;\n use std::libc;\n use std::libc::{c_char, c_int};\n-use std::ptr::null;\n+use std::ptr::{null, mut_null};\n \n use super::net::sockaddr_to_addr;\n \n@@ -42,13 +42,13 @@ impl GetAddrInfoRequest {\n         });\n \n         let hint_ptr = hint.as_ref().map_or(null(), |x| x as *libc::addrinfo);\n-        let res = null();\n+        let mut res = mut_null();\n \n         // Make the call\n         let s = unsafe {\n             let ch = if c_host.is_null() { null() } else { c_host.with_ref(|x| x) };\n             let cs = if c_serv.is_null() { null() } else { c_serv.with_ref(|x| x) };\n-            getaddrinfo(ch, cs, hint_ptr, &res)\n+            getaddrinfo(ch, cs, hint_ptr, &mut res)\n         };\n \n         // Error?\n@@ -74,7 +74,7 @@ impl GetAddrInfoRequest {\n                     flags: (*rp).ai_flags as uint\n                 });\n \n-                rp = (*rp).ai_next;\n+                rp = (*rp).ai_next as *mut libc::addrinfo;\n             }\n         }\n \n@@ -86,8 +86,8 @@ impl GetAddrInfoRequest {\n \n extern \"system\" {\n     fn getaddrinfo(node: *c_char, service: *c_char,\n-                   hints: *libc::addrinfo, res: **libc::addrinfo) -> c_int;\n-    fn freeaddrinfo(res: *libc::addrinfo);\n+                   hints: *libc::addrinfo, res: *mut *mut libc::addrinfo) -> c_int;\n+    fn freeaddrinfo(res: *mut libc::addrinfo);\n     #[cfg(not(windows))]\n     fn gai_strerror(errcode: c_int) -> *c_char;\n     #[cfg(windows)]"}, {"sha": "27430ddee97eb7b3e8102dd108e88594b4c6ef20", "filename": "src/libnative/io/file.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -91,7 +91,7 @@ impl FileDesc {\n         #[cfg(not(windows))] type rlen = libc::size_t;\n         let ret = retry(|| unsafe {\n             libc::read(self.fd(),\n-                       buf.as_ptr() as *mut libc::c_void,\n+                       buf.as_mut_ptr() as *mut libc::c_void,\n                        buf.len() as rlen) as libc::c_int\n         });\n         if ret == 0 {"}, {"sha": "d71f7544225c6c7cb0b4505fcf725e399e2baac9", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -309,7 +309,7 @@ impl rtio::RtioTcpStream for TcpStream {\n         let ret = retry(|| {\n             unsafe {\n                 libc::recv(self.fd(),\n-                           buf.as_ptr() as *mut libc::c_void,\n+                           buf.as_mut_ptr() as *mut libc::c_void,\n                            buf.len() as wrlen,\n                            0) as libc::c_int\n             }"}, {"sha": "5682697ebfc8197ed829a4936f6408d9c3a9096f", "filename": "src/libnative/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibnative%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Ftask.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -186,7 +186,7 @@ impl rt::Runtime for Ops {\n         cur_task.put_runtime(self as ~rt::Runtime);\n \n         unsafe {\n-            let cur_task_dupe = *cast::transmute::<&~Task, &uint>(&cur_task);\n+            let cur_task_dupe = &*cur_task as *Task;\n             let task = BlockedTask::block(cur_task);\n \n             if times == 1 {\n@@ -218,7 +218,7 @@ impl rt::Runtime for Ops {\n                 }\n             }\n             // re-acquire ownership of the task\n-            cur_task = cast::transmute::<uint, ~Task>(cur_task_dupe);\n+            cur_task = cast::transmute(cur_task_dupe);\n         }\n \n         // put the task back in TLS, and everything is as it once was."}, {"sha": "bfc7fdb14666fb5cc2780de16b278caa9fac1d47", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -944,7 +944,7 @@ fn link_rlib(sess: Session,\n             // into the archive.\n             let bc = obj_filename.with_extension(\"bc\");\n             match fs::File::open(&bc).read_to_end().and_then(|data| {\n-                fs::File::create(&bc).write(flate::deflate_bytes(data))\n+                fs::File::create(&bc).write(flate::deflate_bytes(data).as_slice())\n             }) {\n                 Ok(()) => {}\n                 Err(e) => {"}, {"sha": "c0d18672a9bf161faf3832923c06abf1ca27b8fd", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -58,7 +58,7 @@ pub fn run(sess: session::Session, llmod: ModuleRef,\n         let bc = bc.expect(\"missing bytecode in archive!\");\n         let bc = time(sess.time_passes(), format!(\"inflate {}.bc\", name), (), |_|\n                       flate::inflate_bytes(bc));\n-        let ptr = bc.as_ptr();\n+        let ptr = bc.as_slice().as_ptr();\n         debug!(\"linking {}\", name);\n         time(sess.time_passes(), format!(\"ll link {}\", name), (), |()| unsafe {\n             if !llvm::LLVMRustLinkInExternalBitcode(llmod,"}, {"sha": "ce6b5af8d0e07593957df87f5ff0a7103bab5ee8", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -18,6 +18,7 @@ use metadata::loader;\n \n use std::cell::RefCell;\n use collections::HashMap;\n+use extra::c_vec::CVec;\n use syntax::ast;\n use syntax::parse::token::IdentInterner;\n \n@@ -28,7 +29,7 @@ use syntax::parse::token::IdentInterner;\n pub type cnum_map = @RefCell<HashMap<ast::CrateNum, ast::CrateNum>>;\n \n pub enum MetadataBlob {\n-    MetadataVec(~[u8]),\n+    MetadataVec(CVec<u8>),\n     MetadataArchive(loader::ArchiveMetadata),\n }\n "}, {"sha": "5b3c18a5a9309c26ad2ca03a498545546fcd0646", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -2569,7 +2569,7 @@ pub fn write_metadata(cx: &CrateContext, krate: &ast::Crate) -> ~[u8] {\n     let encode_parms = crate_ctxt_to_encode_parms(cx, encode_inlined_item);\n     let metadata = encoder::encode_metadata(encode_parms, krate);\n     let compressed = encoder::metadata_encoding_version +\n-                        flate::deflate_bytes(metadata);\n+                        flate::deflate_bytes(metadata).as_slice();\n     let llmeta = C_bytes(compressed);\n     let llconst = C_struct([llmeta], false);\n     let name = format!(\"rust_metadata_{}_{}_{}\", cx.link_meta.crateid.name,"}, {"sha": "e998b5ca20b300a1250ff8009949e1ce30699ca6", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -123,7 +123,7 @@ impl QueuePool {\n         unsafe {\n             assert_eq!(uvll::uv_async_init(loop_.handle, handle, async_cb), 0);\n             uvll::uv_unref(handle);\n-            let data: *c_void = *cast::transmute::<&~QueuePool, &*c_void>(&q);\n+            let data = &*q as *QueuePool as *c_void;\n             uvll::set_data_for_uv_handle(handle, data);\n         }\n "}, {"sha": "bc9eee517536dae4e6c7695ea7b756d974b1a92a", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -161,9 +161,7 @@ pub mod reader {\n         ];\n \n         unsafe {\n-            let (ptr, _): (*u8, uint) = transmute(data);\n-            let ptr = ptr.offset(start as int);\n-            let ptr: *i32 = transmute(ptr);\n+            let ptr = data.as_ptr().offset(start as int) as *i32;\n             let val = from_be32(*ptr) as u32;\n \n             let i = (val >> 28u) as uint;"}, {"sha": "a98fd31c45727427585e95a52d73f6a21f7322c6", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -350,10 +350,8 @@ impl Float for f32 {\n         static EXP_MASK: u32 = 0x7f800000;\n         static MAN_MASK: u32 = 0x007fffff;\n \n-        match (\n-            unsafe { ::cast::transmute::<f32,u32>(*self) } & MAN_MASK,\n-            unsafe { ::cast::transmute::<f32,u32>(*self) } & EXP_MASK,\n-        ) {\n+        let bits: u32 = unsafe {::cast::transmute(*self)};\n+        match (bits & MAN_MASK, bits & EXP_MASK) {\n             (0, 0)        => FPZero,\n             (_, 0)        => FPSubnormal,\n             (0, EXP_MASK) => FPInfinite,"}, {"sha": "5975ce40d84fadad2e20cea5d9f380d75919f7ce", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b48bc9ec935f6c87d16628b026cc4b9c99746b94/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b48bc9ec935f6c87d16628b026cc4b9c99746b94", "patch": "@@ -352,10 +352,8 @@ impl Float for f64 {\n         static EXP_MASK: u64 = 0x7ff0000000000000;\n         static MAN_MASK: u64 = 0x000fffffffffffff;\n \n-        match (\n-            unsafe { ::cast::transmute::<f64,u64>(*self) } & MAN_MASK,\n-            unsafe { ::cast::transmute::<f64,u64>(*self) } & EXP_MASK,\n-        ) {\n+        let bits: u64 = unsafe {::cast::transmute(*self)};\n+        match (bits & MAN_MASK, bits & EXP_MASK) {\n             (0, 0)        => FPZero,\n             (_, 0)        => FPSubnormal,\n             (0, EXP_MASK) => FPInfinite,"}]}