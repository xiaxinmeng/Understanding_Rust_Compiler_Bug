{"sha": "eba03d462e987a969d21aa74632e4d96dbe9751e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYTAzZDQ2MmU5ODdhOTY5ZDIxYWE3NDYzMmU0ZDk2ZGJlOTc1MWU=", "commit": {"author": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-12T06:23:23Z"}, "committer": {"name": "Chris Gregory", "email": "czipperz@gmail.com", "date": "2019-04-12T06:23:23Z"}, "message": "Fix convert module's documentation links", "tree": {"sha": "056bfb5f0a5ab9afc202f129599d8ab24a0d3e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/056bfb5f0a5ab9afc202f129599d8ab24a0d3e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eba03d462e987a969d21aa74632e4d96dbe9751e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eba03d462e987a969d21aa74632e4d96dbe9751e", "html_url": "https://github.com/rust-lang/rust/commit/eba03d462e987a969d21aa74632e4d96dbe9751e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eba03d462e987a969d21aa74632e4d96dbe9751e/comments", "author": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "czipperz", "id": 10054343, "node_id": "MDQ6VXNlcjEwMDU0MzQz", "avatar_url": "https://avatars.githubusercontent.com/u/10054343?v=4", "gravatar_id": "", "url": "https://api.github.com/users/czipperz", "html_url": "https://github.com/czipperz", "followers_url": "https://api.github.com/users/czipperz/followers", "following_url": "https://api.github.com/users/czipperz/following{/other_user}", "gists_url": "https://api.github.com/users/czipperz/gists{/gist_id}", "starred_url": "https://api.github.com/users/czipperz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/czipperz/subscriptions", "organizations_url": "https://api.github.com/users/czipperz/orgs", "repos_url": "https://api.github.com/users/czipperz/repos", "events_url": "https://api.github.com/users/czipperz/events{/privacy}", "received_events_url": "https://api.github.com/users/czipperz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3de0106789468b211bcc3a25c09c0cf07119186d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3de0106789468b211bcc3a25c09c0cf07119186d", "html_url": "https://github.com/rust-lang/rust/commit/3de0106789468b211bcc3a25c09c0cf07119186d"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "dbe0d204aca8d489ee1fb66b4576bf1b9a3687f5", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eba03d462e987a969d21aa74632e4d96dbe9751e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eba03d462e987a969d21aa74632e4d96dbe9751e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=eba03d462e987a969d21aa74632e4d96dbe9751e", "patch": "@@ -213,7 +213,7 @@ pub trait AsMut<T: ?Sized> {\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies `Into<U> for T`\n+/// - [`From`]`<T> for U` implies `Into<U> for T`\n /// - [`Into`]` is reflexive, which means that `Into<T> for T` is implemented\n ///\n /// # Implementing `Into` for conversions to external types\n@@ -273,7 +273,7 @@ pub trait AsMut<T: ?Sized> {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [From]: trait.From.html\n+/// [`From`]: trait.From.html\n /// [`into`]: trait.Into.html#tymethod.into\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n@@ -285,18 +285,18 @@ pub trait Into<T>: Sized {\n /// Used to do value-to-value conversions while consuming the input value. It is the reciprocal of\n /// [`Into`].\n ///\n-/// One should always prefer implementing [`From`] over [`Into`]\n-/// because implementing [`From`] automatically provides one with a implementation of [`Into`]\n+/// One should always prefer implementing `From` over [`Into`]\n+/// because implementing `From` automatically provides one with a implementation of [`Into`]\n /// thanks to the blanket implementation in the standard library.\n ///\n /// Only implement [`Into`] if a conversion to a type outside the current crate is required.\n-/// [`From`] cannot do these type of conversions because of Rust's orphaning rules.\n+/// `From` cannot do these type of conversions because of Rust's orphaning rules.\n /// See [`Into`] for more details.\n ///\n-/// Prefer using [`Into`] over using [`From`] when specifying trait bounds on a generic function.\n+/// Prefer using [`Into`] over using `From` when specifying trait bounds on a generic function.\n /// This way, types that directly implement [`Into`] can be used as arguments as well.\n ///\n-/// The [`From`] is also very useful when performing error handling. When constructing a function\n+/// The `From` is also very useful when performing error handling. When constructing a function\n /// that is capable of failing, the return type will generally be of the form `Result<T, E>`.\n /// The `From` trait simplifies error handling by allowing a function to return a single error type\n /// that encapsulate multiple error types. See the \"Examples\" section and [the book][book] for more\n@@ -306,8 +306,8 @@ pub trait Into<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - [`From<T>`]` for U` implies [`Into<U>`]` for T`\n-/// - [`From`] is reflexive, which means that `From<T> for T` is implemented\n+/// - `From<T>` for U` implies [`Into`]`<U> for T`\n+/// - `From` is reflexive, which means that `From<T> for T` is implemented\n ///\n /// # Examples\n ///\n@@ -361,7 +361,7 @@ pub trait Into<T>: Sized {\n /// [`Option<T>`]: ../../std/option/enum.Option.html\n /// [`Result<T, E>`]: ../../std/result/enum.Result.html\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`Into<U>`]: trait.Into.html\n+/// [`Into`]: trait.Into.html\n /// [`from`]: trait.From.html#tymethod.from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -422,7 +422,7 @@ pub trait TryInto<T>: Sized {\n ///\n /// # Generic Implementations\n ///\n-/// - `TryFrom<T> for U` implies [`TryInto<U>`]` for T`\n+/// - `TryFrom<T> for U` implies [`TryInto`]`<U> for T`\n /// - [`try_from`] is reflexive, which means that `TryFrom<T> for T`\n /// is implemented and cannot fail -- the associated `Error` type for\n /// calling `T::try_from()` on a value of type `T` is `Infallible`."}]}