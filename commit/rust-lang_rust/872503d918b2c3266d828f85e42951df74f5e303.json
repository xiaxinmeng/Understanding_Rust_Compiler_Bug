{"sha": "872503d918b2c3266d828f85e42951df74f5e303", "node_id": "C_kwDOAAsO6NoAKDg3MjUwM2Q5MThiMmMzMjY2ZDgyOGY4NWU0Mjk1MWRmNzRmNWUzMDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T13:37:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-14T13:37:39Z"}, "message": "Auto merge of #78781 - eddyb:measureme-rdpmc, r=oli-obk\n\nIntegrate measureme's hardware performance counter support.\n\n*Note: this is a companion to https://github.com/rust-lang/measureme/pull/143, and duplicates some information with it for convenience*\n\n**(much later) EDIT**: take any numbers with a grain of salt, they may have changed since initial PR open.\n\n## Credits\n\nI'd like to start by thanking `@alyssais,` `@cuviper,` `@edef1c,` `@glandium,` `@jix,` `@Mark-Simulacrum,` `@m-ou-se,` `@mystor,` `@nagisa,` `@puckipedia,` and `@yorickvP,` for all of their help with testing, and valuable insight and suggestions.\nGetting here wouldn't have been possible without you!\n\n(If I've forgotten anyone please let me know, I'm going off memory here, plus some discussion logs)\n\n## Summary\n\nThis PR adds support to `-Z self-profile` for counting hardware events such as \"instructions retired\" (as opposed to being limited to time measurements), using the `rdpmc` instruction on `x86_64` Linux.\n\nWhile other OSes may eventually be supported, preliminary research suggests some kind of kernel extension/driver is required to enable this, whereas on Linux any user can profile (at least) their own threads.\n\nSupporting Linux on architectures other than x86_64 should be much easier (provided the hardware supports such performance counters), and was mostly not done due to a lack of readily available test hardware.\nThat said, 32-bit `x86` (aka `i686`) would be almost trivial to add and test once we land the initial `x86_64` version (as all the CPU detection code can be reused).\n\nA new flag `-Z self-profile-counter` was added, to control which of the named `measureme` counters is used, and which defaults to `wall-time`, in order to keep `-Z self-profile`'s current functionality unchanged (at least for now).\n\nThe named counters so far are:\n* `wall-time`: the existing time measurement\n    * name chosen for consistency with `perf.rust-lang.org`\n    * continues to use `std::time::Instant` for a nanosecond-precision \"monotonic clock\"\n* `instructions:u`: the hardware performance counter usually referred to as \"Instructions retired\"\n    * here \"retired\" (roughly) means \"fully executed\"\n    * the `:u` suffix is from the Linux `perf` tool and indicates the counter only runs while userspace code is executing, and therefore counts no kernel instructions\n        * *see [Caveats/Subtracting IRQs](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Subtracting-IRQs) for why this isn't entirely true and why `instructions-minus-irqs:u` should be preferred instead*\n* `instructions-minus-irqs:u`: same as `instructions:u`, except the count of hardware interrupts (\"IRQs\" here for brevity) is subtracted\n    * *see [Caveats/Subtracting IRQs](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Subtracting-IRQs) for why this should be preferred over `instructions:u`*\n* `instructions-minus-r0420:u`: experimental counter, same as `instructions-minus-irqs:u` but subtracting an undocumented counter (`r0420:u`) instead of IRQs\n    * the `rXXXX` notation is again from Linux `perf`, and indicates a \"raw\" counter, with a hex representation of the low-level counter configuration - this was picked because we still don't *really* know what it is\n    * this only exists for (future) testing and isn't included/used in any comparisons/data we've put together so far\n    * *see [Challenges/Zen's undocumented 420 counter](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Epilogue-Zen\u2019s-undocumented-420-counter) for details on how this counter was found and what it does*\n\n---\n\nThere are also some additional commits:\n* ~~see [Challenges/Rebasing *shouldn't* affect the results, right?](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Rebasing-*shouldn\u2019t*-affect-the-results,-right) for details on the changes to `rustc_parse` and `rustc_trait_section` (the latter far more dubious, and probably shouldn't be merged, or not as-is)~~\n  *  **EDIT**: the effects of these are no long quantifiable, the PR includes reverts for them\n* ~~see [Challenges/`jemalloc`: purging will commence in ten seconds](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#jemalloc-purging-will-commence-in-ten-seconds) for details on the `jemalloc` change~~\n  * this is also separately found in #77162, and we probably want to avoid doing it by default, ideally we'd use the runtime control API `jemalloc` offers (assuming that can stop the timer that's already running, which I'm not sure about)\n  * **EDIT**: until we can do this based on `-Z` flags, this commit has also been reverted\n* the `proc_macro` change was to avoid randomized hashing and therefore ASLR-like effects\n\n---\n\n**(much later) EDIT**: take any numbers with a grain of salt, they may have changed since initial PR open.\n\n#### Write-up / report\n\nBecause of how extensive the full report ended up being, I've kept most of it [on `hackmd.io`](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view), but for convenient access, here are all the sections (with individual links):\n<sup>(someone suggested I'd make a backup, so [here it is on the wayback machine](http://web.archive.org/web/20201127164748/https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view) - I'll need to remember to update that if I have to edit the write-up)</sup>\n\n* [**Motivation**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Motivation)\n\n* [**Results**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Results)\n    * [**Overhead**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Overhead)\n    *Preview (see the report itself for more details):*\n\n    |Counter|Total<br>`instructions-minus-irqs:u`|Overhead from \"Baseline\"<br>(for all 1903881<br>counter reads)|Overhead from \"Baseline\"<br>(per each counter read)|\n    |-|-|-|-|\n    |Baseline|63637621286 \u00b16||\n    |`instructions:u`|63658815885 \u00b12|&nbsp;&nbsp;+21194599 \u00b18|&nbsp;&nbsp;+11|\n    |`instructions-minus-irqs:u`|63680307361 \u00b113|&nbsp;&nbsp;+42686075 \u00b119|&nbsp;&nbsp;+22|\n    |`wall-time`|63951958376 \u00b110275|+314337090 \u00b110281|+165|\n\n    * [**\"Macro\" noise (self time)**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#\u201cMacro\u201d-noise-(self-time))\n    *Preview (see the report itself for more details):*\n\n    || `wall-time` (ns) | `instructions:u` | `instructions-minus-irqs:u`\n    -: | -: | -: | -:\n    `typeck` | 5478261360 \u00b1283933373 (\u00b1~5.2%) | 17350144522 \u00b16392 (\u00b1~0.00004%) | 17351035832.5 \u00b14.5 (\u00b1~0.00000003%)\n    `expand_crate` | 2342096719 \u00b1110465856 (\u00b1~4.7%) | 8263777916 \u00b12937 (\u00b1~0.00004%) | 8263708389 \u00b10 (\u00b1~0%)\n    `mir_borrowck` | 2216149671 \u00b1119458444 (\u00b1~5.4%) | 8340920100 \u00b12794 (\u00b1~0.00003%) | 8341613983.5 \u00b12.5 (\u00b1~0.00000003%)\n    `mir_built` | 1269059734 \u00b191514604 (\u00b1~7.2%) | 4454959122 \u00b11618 (\u00b1~0.00004%) | 4455303811 \u00b11 (\u00b1~0.00000002%)\n    `resolve_crate` | 942154987.5 \u00b153068423.5 (\u00b1~5.6%) | 3951197709 \u00b139 (\u00b1~0.000001%) | 3951196865 \u00b10 (\u00b1~0%)\n\n    * [**\"Micro\" noise (individual sampling intervals)**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#\u201cMicro\u201d-noise-(individual-sampling-intervals))\n\n* [**Caveats**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Caveats)\n    * [**Disabling ASLR**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Disabling-ASLR)\n    * [**Non-deterministic proc macros**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Non-deterministic-proc-macros)\n    * [**Subtracting IRQs**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Subtracting-IRQs)\n    * [**Lack of support for multiple threads**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Lack-of-support-for-multiple-threads)\n\n* [**Challenges**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Challenges)\n    * [**How do we even read hardware performance counters?**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#How-do-we-even-read-hardware-performance-counters)\n    * [**ASLR: it's free entropy**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#ASLR-it\u2019s-free-entropy)\n    * [**The serializing instruction**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#The-serializing-instruction)\n    * [**Getting constantly interrupted**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Getting-constantly-interrupted)\n    * [**AMD patented time-travel and dubbed it `SpecLockMap`<br><sup>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or: \"how we accidentally unlocked `rr` on AMD Zen\"</sup>**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#AMD-patented-time-travel-and-dubbed-it-SpecLockMapnbspnbspnbspnbspnbspnbspnbspnbspor-\u201chow-we-accidentally-unlocked-rr-on-AMD-Zen\u201d)\n    * [**`jemalloc`: purging will commence in ten seconds**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#jemalloc-purging-will-commence-in-ten-seconds)\n    * [**Rebasing *shouldn't* affect the results, right?**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Rebasing-*shouldn\u2019t*-affect-the-results,-right)\n    * [**Epilogue: Zen's undocumented 420 counter**](https://hackmd.io/sH315lO2RuicY-SEt7ynGA?view#Epilogue-Zen\u2019s-undocumented-420-counter)", "tree": {"sha": "2176c97e5b740d9bcf160c3adee372d0b9b6c914", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2176c97e5b740d9bcf160c3adee372d0b9b6c914"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/872503d918b2c3266d828f85e42951df74f5e303", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/872503d918b2c3266d828f85e42951df74f5e303", "html_url": "https://github.com/rust-lang/rust/commit/872503d918b2c3266d828f85e42951df74f5e303", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/872503d918b2c3266d828f85e42951df74f5e303/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf", "html_url": "https://github.com/rust-lang/rust/commit/edab34ab2abbafc16a78daedf71dbacd2eb0b7bf"}, {"sha": "a4f1331b9d351658dcdf676e1560a807992dcfa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f1331b9d351658dcdf676e1560a807992dcfa9", "html_url": "https://github.com/rust-lang/rust/commit/a4f1331b9d351658dcdf676e1560a807992dcfa9"}], "stats": {"total": 50, "additions": 42, "deletions": 8}, "files": [{"sha": "a1f42d8d3c0597320a85d589dc88d484c5b9861c", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -550,14 +550,20 @@ impl SelfProfiler {\n     pub fn new(\n         output_directory: &Path,\n         crate_name: Option<&str>,\n-        event_filters: &Option<Vec<String>>,\n+        event_filters: Option<&[String]>,\n+        counter_name: &str,\n     ) -> Result<SelfProfiler, Box<dyn Error + Send + Sync>> {\n         fs::create_dir_all(output_directory)?;\n \n         let crate_name = crate_name.unwrap_or(\"unknown-crate\");\n-        let filename = format!(\"{}-{}.rustc_profile\", crate_name, process::id());\n+        // HACK(eddyb) we need to pad the PID, strange as it may seem, as its\n+        // length can behave as a source of entropy for heap addresses, when\n+        // ASLR is disabled and the heap is otherwise determinic.\n+        let pid: u32 = process::id();\n+        let filename = format!(\"{}-{:07}.rustc_profile\", crate_name, pid);\n         let path = output_directory.join(&filename);\n-        let profiler = Profiler::new(&path)?;\n+        let profiler =\n+            Profiler::with_counter(&path, measureme::counters::Counter::by_name(counter_name)?)?;\n \n         let query_event_kind = profiler.alloc_string(\"Query\");\n         let generic_activity_event_kind = profiler.alloc_string(\"GenericActivity\");\n@@ -570,7 +576,7 @@ impl SelfProfiler {\n \n         let mut event_filter_mask = EventFilter::empty();\n \n-        if let Some(ref event_filters) = *event_filters {\n+        if let Some(event_filters) = event_filters {\n             let mut unknown_events = vec![];\n             for item in event_filters {\n                 if let Some(&(_, mask)) ="}, {"sha": "551f094209e4eff666bef352c7b34ee5f605a546", "filename": "compiler/rustc_query_impl/src/profiling_support.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fprofiling_support.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -275,6 +275,9 @@ fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n             let query_name = profiler.get_or_alloc_cached_string(query_name);\n             let event_id = event_id_builder.from_label(query_name).to_string_id();\n \n+            // FIXME(eddyb) make this O(1) by using a pre-cached query name `EventId`,\n+            // instead of passing the `DepNodeIndex` to `finish_with_query_invocation_id`,\n+            // when recording the event in the first place.\n             let mut query_invocation_ids = Vec::new();\n             query_cache.iter(&mut |_, _, i| {\n                 query_invocation_ids.push(i.into());"}, {"sha": "64c8274abdfccfcb6bd368e46e014ebde09a4295", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -1473,6 +1473,12 @@ options! {\n         for example: `-Z self-profile-events=default,query-keys`\n         all options: none, all, default, generic-activity, query-provider, query-cache-hit\n                      query-blocked, incr-cache-load, incr-result-hashing, query-keys, function-args, args, llvm, artifact-sizes\"),\n+    self_profile_counter: String = (\"wall-time\".to_string(), parse_string, [UNTRACKED],\n+        \"counter used by the self profiler (default: `wall-time`), one of:\n+        `wall-time` (monotonic clock, i.e. `std::time::Instant`)\n+        `instructions:u` (retired instructions, userspace-only)\n+        `instructions-minus-irqs:u` (subtracting hardware interrupt counts for extra accuracy)\"\n+    ),\n     share_generics: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"make the current crate share its generic instantiations\"),\n     show_span: Option<String> = (None, parse_opt_string, [TRACKED],"}, {"sha": "0205a6e1b0fcf36f85d476b003441e676f15c1fb", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -1253,7 +1253,8 @@ pub fn build_session(\n         let profiler = SelfProfiler::new(\n             directory,\n             sopts.crate_name.as_deref(),\n-            &sopts.debugging_opts.self_profile_events,\n+            sopts.debugging_opts.self_profile_events.as_ref().map(|xs| &xs[..]),\n+            &sopts.debugging_opts.self_profile_counter,\n         );\n         match profiler {\n             Ok(profiler) => Some(Arc::new(profiler)),"}, {"sha": "c219a9465d39f2d091133298a697049cd0712c67", "filename": "library/proc_macro/src/bridge/handle.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fhandle.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -1,7 +1,7 @@\n //! Server-side handles and storage for per-handle data.\n \n use std::collections::{BTreeMap, HashMap};\n-use std::hash::Hash;\n+use std::hash::{BuildHasher, Hash};\n use std::num::NonZeroU32;\n use std::ops::{Index, IndexMut};\n use std::sync::atomic::{AtomicUsize, Ordering};\n@@ -51,15 +51,31 @@ impl<T> IndexMut<Handle> for OwnedStore<T> {\n     }\n }\n \n+// HACK(eddyb) deterministic `std::collections::hash_map::RandomState` replacement\n+// that doesn't require adding any dependencies to `proc_macro` (like `rustc-hash`).\n+#[derive(Clone)]\n+struct NonRandomState;\n+\n+impl BuildHasher for NonRandomState {\n+    type Hasher = std::collections::hash_map::DefaultHasher;\n+    #[inline]\n+    fn build_hasher(&self) -> Self::Hasher {\n+        Self::Hasher::new()\n+    }\n+}\n+\n /// Like `OwnedStore`, but avoids storing any value more than once.\n pub(super) struct InternedStore<T: 'static> {\n     owned: OwnedStore<T>,\n-    interner: HashMap<T, Handle>,\n+    interner: HashMap<T, Handle, NonRandomState>,\n }\n \n impl<T: Copy + Eq + Hash> InternedStore<T> {\n     pub(super) fn new(counter: &'static AtomicUsize) -> Self {\n-        InternedStore { owned: OwnedStore::new(counter), interner: HashMap::new() }\n+        InternedStore {\n+            owned: OwnedStore::new(counter),\n+            interner: HashMap::with_hasher(NonRandomState),\n+        }\n     }\n \n     pub(super) fn alloc(&mut self, x: T) -> Handle {"}, {"sha": "d38fecc45b2fc93dfd21f7af09514c4419be1948", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/872503d918b2c3266d828f85e42951df74f5e303/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/872503d918b2c3266d828f85e42951df74f5e303/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=872503d918b2c3266d828f85e42951df74f5e303", "patch": "@@ -3140,6 +3140,7 @@ impl DefaultHasher {\n     /// `DefaultHasher` instances, but is the same as all other `DefaultHasher`\n     /// instances created through `new` or `default`.\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n+    #[inline]\n     #[allow(deprecated)]\n     #[must_use]\n     pub fn new() -> DefaultHasher {\n@@ -3153,6 +3154,7 @@ impl Default for DefaultHasher {\n     /// See its documentation for more.\n     ///\n     /// [`new`]: DefaultHasher::new\n+    #[inline]\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()\n     }"}]}