{"sha": "0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGQxZDRiYzEyZjcwMDVmMzJiM2ZiYzljYjQxMjhlNDZiYjBlODA=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2016-10-29T12:35:54Z"}, "committer": {"name": "Florian Diebold", "email": "florian.diebold@freiheit.com", "date": "2016-11-29T12:04:27Z"}, "message": "rustc_privacy: fix compilation", "tree": {"sha": "d87ecfd682bf440be6954943de89bd076a7b3e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d87ecfd682bf440be6954943de89bd076a7b3e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "html_url": "https://github.com/rust-lang/rust/commit/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd6a57ce2a4fd011013ec7c377b4a2ccebb71120", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd6a57ce2a4fd011013ec7c377b4a2ccebb71120", "html_url": "https://github.com/rust-lang/rust/commit/dd6a57ce2a4fd011013ec7c377b4a2ccebb71120"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "eb742b87889814f49022599c96e8b2597b8d3172", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0cdd1d4bc12f7005f32b3fbc9cb4128e46bb0e80", "patch": "@@ -30,7 +30,7 @@ use rustc::dep_graph::DepNode;\n use rustc::hir::{self, PatKind};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::DefId;\n-use rustc::hir::intravisit::{self, Visitor};\n+use rustc::hir::intravisit::{self, Visitor, NestedVisitMode};\n use rustc::hir::itemlikevisit::DeepVisitor;\n use rustc::hir::pat_util::EnumerateAndAdjustIterator;\n use rustc::lint;\n@@ -120,8 +120,8 @@ impl<'a, 'tcx> EmbargoVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for EmbargoVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::All))\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n@@ -432,8 +432,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for PrivacyVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::All))\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {\n@@ -640,8 +640,8 @@ impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a\n impl<'a, 'tcx> Visitor<'tcx> for ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n     /// We want to visit items in the context of their containing\n     /// module and so forth, so supply a crate for doing a deep walk.\n-    fn nested_visit_map(&mut self) -> Option<&hir::map::Map<'tcx>> {\n-        Some(&self.tcx.map)\n+    fn nested_visit_map(&mut self) -> Option<(&hir::map::Map<'tcx>, NestedVisitMode)> {\n+        Some((&self.tcx.map, NestedVisitMode::All))\n     }\n \n     fn visit_item(&mut self, item: &'tcx hir::Item) {"}]}