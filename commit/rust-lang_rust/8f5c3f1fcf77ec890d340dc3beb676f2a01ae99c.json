{"sha": "8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNWMzZjFmY2Y3N2VjODkwZDM0MGRjM2JlYjY3NmYyYTAxYWU5OWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T18:10:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-29T18:10:39Z"}, "message": "Auto merge of #32557 - dotdash:issue-32518, r=nikomatsakis\n\nUse weak_odr linkage when reusing definitions across codegen units\n\nWhen reuing a definition across codegen units, we obviously cannot use\ninternal linkage, but using external linkage means that we can end up\nwith multiple conflicting definitions of a single symbol across\nmultiple crates. Since the definitions should all be equal\nsemantically, we can use weak_odr linkage to resolve the situation.\n\nFixes #32518\n\nr? @nikomatsakis", "tree": {"sha": "50bd691fddf0839196b938fb8fb4aec408f73a06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50bd691fddf0839196b938fb8fb4aec408f73a06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "html_url": "https://github.com/rust-lang/rust/commit/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c07a3cc599b0a88c35b5c1bd3fc92fa6925e4ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c07a3cc599b0a88c35b5c1bd3fc92fa6925e4ce", "html_url": "https://github.com/rust-lang/rust/commit/0c07a3cc599b0a88c35b5c1bd3fc92fa6925e4ce"}, {"sha": "22f458758652d309b7c65fa904d44f090214456c", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f458758652d309b7c65fa904d44f090214456c", "html_url": "https://github.com/rust-lang/rust/commit/22f458758652d309b7c65fa904d44f090214456c"}], "stats": {"total": 169, "additions": 152, "deletions": 17}, "files": [{"sha": "4df2da801f92588201e2401a0d9058c1164a3119", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -2125,6 +2125,9 @@ extern {\n     pub fn LLVMRustFreeOperandBundleDef(Bundle: OperandBundleDefRef);\n \n     pub fn LLVMRustPositionBuilderAtStart(B: BuilderRef, BB: BasicBlockRef);\n+\n+    pub fn LLVMRustSetComdat(M: ModuleRef, V: ValueRef, Name: *const c_char);\n+    pub fn LLVMRustUnsetComdat(V: ValueRef);\n }\n \n // LLVM requires symbols from this library, but apparently they're not printed\n@@ -2149,6 +2152,24 @@ pub fn SetLinkage(global: ValueRef, link: Linkage) {\n     }\n }\n \n+// Externally visible symbols that might appear in multiple translation units need to appear in\n+// their own comdat section so that the duplicates can be discarded at link time. This can for\n+// example happen for generics when using multiple codegen units. This function simply uses the\n+// value's name as the comdat value to make sure that it is in a 1-to-1 relationship to the\n+// function.\n+// For more details on COMDAT sections see e.g. http://www.airs.com/blog/archives/52\n+pub fn SetUniqueComdat(llmod: ModuleRef, val: ValueRef) {\n+    unsafe {\n+        LLVMRustSetComdat(llmod, val, LLVMGetValueName(val));\n+    }\n+}\n+\n+pub fn UnsetComdat(val: ValueRef) {\n+    unsafe {\n+        LLVMRustUnsetComdat(val);\n+    }\n+}\n+\n pub fn SetDLLStorageClass(global: ValueRef, class: DLLStorageClassTypes) {\n     unsafe {\n         LLVMRustSetDLLStorageClass(global, class);"}, {"sha": "559ba17e1ae7da597b8643113db8a2ca3204b7f1", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 24, "deletions": 12, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -2215,18 +2215,27 @@ pub fn update_linkage(ccx: &CrateContext,\n         }\n     }\n \n-    match id {\n-        Some(id) if ccx.reachable().contains(&id) => {\n+    let (is_reachable, is_generic) = if let Some(id) = id {\n+        (ccx.reachable().contains(&id), false)\n+    } else {\n+        (false, true)\n+    };\n+\n+    // We need external linkage for items reachable from other translation units, this include\n+    // other codegen units in case of parallel compilations.\n+    if is_reachable || ccx.sess().opts.cg.codegen_units > 1 {\n+        if is_generic {\n+            // This only happens with multiple codegen units, in which case we need to use weak_odr\n+            // linkage because other crates might expose the same symbol. We cannot use\n+            // linkonce_odr here because the symbol might then get dropped before the other codegen\n+            // units get to link it.\n+            llvm::SetUniqueComdat(ccx.llmod(), llval);\n+            llvm::SetLinkage(llval, llvm::WeakODRLinkage);\n+        } else {\n             llvm::SetLinkage(llval, llvm::ExternalLinkage);\n-        },\n-        _ => {\n-            // `id` does not refer to an item in `ccx.reachable`.\n-            if ccx.sess().opts.cg.codegen_units > 1 {\n-                llvm::SetLinkage(llval, llvm::ExternalLinkage);\n-            } else {\n-                llvm::SetLinkage(llval, llvm::InternalLinkage);\n-            }\n-        },\n+        }\n+    } else {\n+        llvm::SetLinkage(llval, llvm::InternalLinkage);\n     }\n }\n \n@@ -2547,8 +2556,10 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<&str>) {\n         // then give it internal linkage.\n         for ccx in cx.iter() {\n             for val in iter_globals(ccx.llmod()).chain(iter_functions(ccx.llmod())) {\n+                let linkage = llvm::LLVMGetLinkage(val);\n                 // We only care about external definitions.\n-                if !(llvm::LLVMGetLinkage(val) == llvm::ExternalLinkage as c_uint &&\n+                if !((linkage == llvm::ExternalLinkage as c_uint ||\n+                      linkage == llvm::WeakODRLinkage as c_uint) &&\n                      llvm::LLVMIsDeclaration(val) == 0) {\n                     continue;\n                 }\n@@ -2560,6 +2571,7 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<&str>) {\n                    !reachable.contains(str::from_utf8(&name).unwrap()) {\n                     llvm::SetLinkage(val, llvm::InternalLinkage);\n                     llvm::SetDLLStorageClass(val, llvm::DefaultStorageClass);\n+                    llvm::UnsetComdat(val);\n                 }\n             }\n         }"}, {"sha": "04a07bdf1ce975de15b7d44ba7ba93fb3068ae19", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -123,7 +123,6 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             ref attrs, node: hir::ImplItemKind::Method(\n                 hir::MethodSig { ref decl, .. }, ref body), ..\n         }) => {\n-            base::update_linkage(ccx, lldecl, None, base::OriginalTranslation);\n             attributes::from_fn_attrs(ccx, attrs, lldecl);\n \n             let is_first = !ccx.available_monomorphizations().borrow()\n@@ -133,12 +132,14 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             }\n \n             let trans_everywhere = attr::requests_inline(attrs);\n-            if trans_everywhere && !is_first {\n-                llvm::SetLinkage(lldecl, llvm::AvailableExternallyLinkage);\n-            }\n-\n             if trans_everywhere || is_first {\n+                let origin = if is_first { base::OriginalTranslation } else { base::InlinedCopy };\n+                base::update_linkage(ccx, lldecl, None, origin);\n                 trans_fn(ccx, decl, body, lldecl, psubsts, fn_node_id);\n+            } else {\n+                // We marked the value as using internal linkage earlier, but that is illegal for\n+                // declarations, so switch back to external linkage.\n+                llvm::SetLinkage(lldecl, llvm::ExternalLinkage);\n             }\n         }\n "}, {"sha": "697b2d3f539651533a613685e4f0b321a28d3d60", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -1189,3 +1189,16 @@ extern \"C\" void LLVMRustPositionBuilderAtStart(LLVMBuilderRef B, LLVMBasicBlockR\n     auto point = unwrap(BB)->getFirstInsertionPt();\n     unwrap(B)->SetInsertPoint(unwrap(BB), point);\n }\n+\n+extern \"C\" void LLVMRustSetComdat(LLVMModuleRef M, LLVMValueRef V, const char *Name) {\n+    Triple TargetTriple(unwrap(M)->getTargetTriple());\n+    GlobalObject *GV = unwrap<GlobalObject>(V);\n+    if (!TargetTriple.isOSBinFormatMachO()) {\n+        GV->setComdat(unwrap(M)->getOrInsertComdat(Name));\n+    }\n+}\n+\n+extern \"C\" void LLVMRustUnsetComdat(LLVMValueRef V) {\n+    GlobalObject *GV = unwrap<GlobalObject>(V);\n+    GV->setComdat(nullptr);\n+}"}, {"sha": "7c88d3d37e3a3524c5fb57510e4a3f7981c6d441", "filename": "src/test/auxiliary/cgu_test.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcgu_test.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// compile-flags: --crate-type=lib\n+\n+pub fn id<T>(t: T) -> T {\n+  t\n+}"}, {"sha": "0f0d1cd87e1f84cc294e15e22d4bae4dd287b22e", "filename": "src/test/auxiliary/cgu_test_a.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test_a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test_a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcgu_test_a.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// compile-flags: -Ccodegen-units=2 --crate-type=lib\n+\n+extern crate cgu_test;\n+\n+pub mod a {\n+    pub fn a() {\n+        ::cgu_test::id(0);\n+    }\n+}\n+pub mod b {\n+    pub fn a() {\n+        ::cgu_test::id(0);\n+    }\n+}"}, {"sha": "0f0d1cd87e1f84cc294e15e22d4bae4dd287b22e", "filename": "src/test/auxiliary/cgu_test_b.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Fauxiliary%2Fcgu_test_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcgu_test_b.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// compile-flags: -Ccodegen-units=2 --crate-type=lib\n+\n+extern crate cgu_test;\n+\n+pub mod a {\n+    pub fn a() {\n+        ::cgu_test::id(0);\n+    }\n+}\n+pub mod b {\n+    pub fn a() {\n+        ::cgu_test::id(0);\n+    }\n+}"}, {"sha": "386d3e6524c4edd7dd090e55fa9f6bea0f5e298e", "filename": "src/test/run-pass/issue-32518.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Frun-pass%2Fissue-32518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c/src%2Ftest%2Frun-pass%2Fissue-32518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-32518.rs?ref=8f5c3f1fcf77ec890d340dc3beb676f2a01ae99c", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// no-prefer-dynamic\n+// aux-build:cgu_test.rs\n+// aux-build:cgu_test_a.rs\n+// aux-build:cgu_test_b.rs\n+\n+extern crate cgu_test_a;\n+extern crate cgu_test_b;\n+\n+fn main() {\n+    cgu_test_a::a::a();\n+    cgu_test_b::a::a();\n+}"}]}